[
  {
    "owner": "pywinauto",
    "repo": "pywinauto",
    "content": "TITLE: Interactive Notepad Automation with PyWinAuto\nDESCRIPTION: Interactive Python console session demonstrating how to automate Notepad using PyWinAuto, including starting the application, accessing menus, and typing text.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/getting_started.txt#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from pywinauto import application\n>>> app = application.Application()\n>>> app.start(\"Notepad.exe\")\n<pywinauto.application.Application object at 0x00AE0990>\n>>> app.UntitledNotepad.draw_outline()\n>>> app.UntitledNotepad.menu_select(\"Edit -> Replace\")\n>>> app.Replace.print_control_identifiers()\n>>> app.Replace.Cancel.click()\n>>> app.UntitledNotepad.Edit.type_keys(\"Hi from Python interactive prompt %s\" % str(dir()), with_spaces = True)\n```\n\n----------------------------------------\n\nTITLE: Basic Notepad Automation using pywinauto\nDESCRIPTION: Demonstrates basic usage of pywinauto to start Notepad, access menu items, click buttons and type text. Uses the default Win32 backend to interact with the application.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywinauto.application import Application\napp = Application().start(\"notepad.exe\")\n\napp.UntitledNotepad.menu_select(\"Help->About Notepad\")\napp.AboutNotepad.OK.click()\napp.UntitledNotepad.Edit.type_keys(\"pywinauto Works!\", with_spaces = True)\n```\n\n----------------------------------------\n\nTITLE: Connecting to an Application with pywinauto\nDESCRIPTION: Creates an Application object to start Notepad and access its main window. This demonstrates the basic process of launching an application and creating a window specification for automation.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/getting_started.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pywinauto.application import Application\napp = Application(backend=\"uia\").start('notepad.exe')\n\n# describe the window inside Notepad.exe process\ndlg_spec = app.UntitledNotepad\n# wait till the window is really open\nactionable_dlg = dlg_spec.wait('visible')\n```\n\n----------------------------------------\n\nTITLE: Initializing PyWinAuto Application Instance\nDESCRIPTION: Examples showing how to start or connect to an application using PyWinAuto. Demonstrates both start() and connect() methods with various parameters.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HowTo.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = Application().start(r\"c:\\path\\to\\your\\application -a -n -y --arguments\")\n```\n\nLANGUAGE: python\nCODE:\n```\napp = Application().connect(process=2341)\n```\n\nLANGUAGE: python\nCODE:\n```\napp = Application().connect(handle=0x010f0c)\n```\n\nLANGUAGE: python\nCODE:\n```\napp = Application().connect(path=r\"c:\\windows\\system32\\notepad.exe\")\n```\n\nLANGUAGE: python\nCODE:\n```\napp = Application().connect(title_re=\".*Notepad\", class_name=\"Notepad\")\n```\n\n----------------------------------------\n\nTITLE: Windows Explorer Automation using UI Automation Backend\nDESCRIPTION: Shows advanced usage of pywinauto with MS UI Automation backend to interact with Windows Explorer. Demonstrates connecting to existing processes, handling context menus, and working with dialog properties.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pywinauto import Desktop, Application\n\nApplication().start('explorer.exe \"C:\\\\Program Files\"')\n\n# connect to another process spawned by explorer.exe\n# Note: make sure the script is running as Administrator!\napp = Application(backend=\"uia\").connect(path=\"explorer.exe\", title=\"Program Files\")\n\napp.ProgramFiles.set_focus()\ncommon_files = app.ProgramFiles.ItemsView.get_item('Common Files')\ncommon_files.right_click_input()\napp.ContextMenu.Properties.invoke()\n\n# this dialog is open in another process (Desktop object doesn't rely on any process id)\nProperties = Desktop(backend='uia').Common_Files_Properties\nProperties.print_control_identifiers()\nProperties.Cancel.click()\nProperties.wait_not('visible') # make sure the dialog is closed\n```\n\n----------------------------------------\n\nTITLE: Print Control Identifiers for GUI Inspection\nDESCRIPTION: Shows how to use print_control_identifiers() to display all possible ways to access controls in a window. This is a crucial debugging tool that helps identify control properties and possible access methods.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/getting_started.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> app.Properties.print_control_identifiers()\n\nControl Identifiers:\n\nDialog - 'Windows NT Properties'    (L688, T518, R1065, B1006)\n[u'Windows NT PropertiesDialog', u'Dialog', u'Windows NT Properties']\nchild_window(title=\"Windows NT Properties\", control_type=\"Window\")\n   | \n   | Image - ''    (L717, T589, R749, B622)\n   | [u'', u'0', u'Image1', u'Image0', 'Image', u'1']\n   | child_window(auto_id=\"13057\", control_type=\"Image\")\n   | \n   | Image - ''    (L717, T630, R1035, B632)\n   | ['Image2', u'2']\n   | child_window(auto_id=\"13095\", control_type=\"Image\")\n   | \n   | Edit - 'Folder name:'    (L790, T596, R1036, B619)\n   | [u'3', 'Edit', u'Edit1', u'Edit0']\n   | child_window(title=\"Folder name:\", auto_id=\"13156\", control_type=\"Edit\")\n   | \n   | Static - 'Type:'    (L717, T643, R780, B658)\n   | [u'Type:Static', u'Static', u'Static1', u'Static0', u'Type:']\n   | child_window(title=\"Type:\", auto_id=\"13080\", control_type=\"Text\")\n   | \n   | Edit - 'Type:'    (L790, T643, R1036, B666)\n   | [u'4', 'Edit2', u'Type:Edit']\n   | child_window(title=\"Type:\", auto_id=\"13059\", control_type=\"Edit\")\n   | \n   | Static - 'Location:'    (L717, T669, R780, B684)\n   | [u'Location:Static', u'Location:', u'Static2']\n   | child_window(title=\"Location:\", auto_id=\"13089\", control_type=\"Text\")\n   | \n   | Edit - 'Location:'    (L790, T669, R1036, B692)\n   | ['Edit3', u'Location:Edit', u'5']\n   | child_window(title=\"Location:\", auto_id=\"13065\", control_type=\"Edit\")\n   | \n   | Static - 'Size:'    (L717, T695, R780, B710)\n   | [u'Size:Static', u'Size:', u'Static3']\n   | child_window(title=\"Size:\", auto_id=\"13081\", control_type=\"Text\")\n   | \n   | Edit - 'Size:'    (L790, T695, R1036, B718)\n   | ['Edit4', u'6', u'Size:Edit']\n   | child_window(title=\"Size:\", auto_id=\"13064\", control_type=\"Edit\")\n   | \n   | Static - 'Size on disk:'    (L717, T721, R780, B736)\n   | [u'Size on disk:', u'Size on disk:Static', u'Static4']\n   | child_window(title=\"Size on disk:\", auto_id=\"13107\", control_type=\"Text\")\n   | \n   | Edit - 'Size on disk:'    (L790, T721, R1036, B744)\n   | ['Edit5', u'7', u'Size on disk:Edit']\n   | child_window(title=\"Size on disk:\", auto_id=\"13106\", control_type=\"Edit\")\n   | \n   | Static - 'Contains:'    (L717, T747, R780, B762)\n```\n\n----------------------------------------\n\nTITLE: Creating Detailed Window Specifications\nDESCRIPTION: Shows how to create and use window specifications to target specific windows and controls. This example creates a specification for Notepad and demonstrates accessing the wrapper object.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/getting_started.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> dlg_spec = app.window(title='Untitled - Notepad')\n\n>>> dlg_spec\n<pywinauto.application.WindowSpecification object at 0x0568B790>\n\n>>> dlg_spec.wrapper_object()\n<pywinauto.controls.win32_controls.DialogWrapper object at 0x05639B70>\n```\n\n----------------------------------------\n\nTITLE: Multi-level Window Specifications with Combined Criteria\nDESCRIPTION: Demonstrates creating more complex window specifications using multiple criteria and nested specifications. Shows how to target specific controls within windows using regular expressions and multiple properties.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/getting_started.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# can be multi-level\napp.window(title_re='.* - Notepad$').window(class_name='Edit')\n\n# can combine criteria\ndlg = Desktop(backend=\"uia\").Calculator\ndlg.window(auto_id='num8Button', control_type='Button')\n```\n\n----------------------------------------\n\nTITLE: Cross-Process Automation with Desktop Object\nDESCRIPTION: Demonstrates using the Desktop object to automate Windows applications across process boundaries. This example launches Windows Calculator and connects to it regardless of its process structure.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/getting_started.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom subprocess import Popen\nfrom pywinauto import Desktop\n\nPopen('calc.exe', shell=True)\ndlg = Desktop(backend=\"uia\").Calculator\ndlg.wait('visible')\n```\n\n----------------------------------------\n\nTITLE: Accessing Controls in PyWinAuto\nDESCRIPTION: Demonstrates various ways to access controls within dialogs, including direct attribute access and index notation.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HowTo.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.dlg.control\napp['dlg']['control']\napp.PageSetup.Margins.window_text()\napp.PageSetup.MarginsGroupBox.window_text()\n```\n\n----------------------------------------\n\nTITLE: Checking pywinauto Installation with Notepad Automation\nDESCRIPTION: This snippet demonstrates how to use pywinauto to start Notepad and type some keys, verifying that the library is installed correctly.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pywinauto.application import Application\n>>> app = Application(backend=\"uia\").start(\"notepad.exe\")\n>>> app.UntitledNotepad.type_keys(\"%FX\")\n```\n\n----------------------------------------\n\nTITLE: Automating File Save As in Notepad using pywinauto\nDESCRIPTION: This example demonstrates how to use pywinauto to automate the process of saving a file with UTF-8 encoding in Notepad, showcasing the delayed attribute resolution feature.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/index.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.UntitledNotepad.menu_select(\"File->SaveAs\")\napp.SaveAs.ComboBox5.select(\"UTF-8\")\napp.SaveAs.edit1.set_text(\"Example-utf8.txt\")\napp.SaveAs.Save.click()\n```\n\n----------------------------------------\n\nTITLE: Accessing System Tray Icons with Pywinauto\nDESCRIPTION: Shows how to connect to the Explorer process and access the System Tray icons using pywinauto. It also demonstrates clicking on system tray icons and interacting with popup menus.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HowTo.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pywinauto.application\napp = pywinauto.application.Application().connect(path=\"explorer\")\nsystray_icons = app.ShellTrayWnd.NotificationAreaToolbar\n\n# connect to outlook\noutlook = Application.connect(path='outlook.exe')\n\n# click on Outlook's icon\ntaskbar.ClickSystemTrayIcon(\"Microsoft Outlook\")\n\n# Select an item in the popup menu\noutlook.PopupMenu.Menu().get_menu_path(\"Cancel Server Request\")[0].click()\n```\n\n----------------------------------------\n\nTITLE: Dialog Handling with SaveAs Example\nDESCRIPTION: Example demonstrating how to interact with the SaveAs dialog in Notepad, including menu selection, combo box selection, and text input.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/Readme.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.Notepad.menu_select(\"File->SaveAs\")\napp.SaveAs.ComboBox5.select(\"UTF-8\")\napp.SaveAs.edit1.set_text(\"Example-utf8.txt\")\napp.SaveAs.Save.click()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Dialog States in pywinauto\nDESCRIPTION: This snippet shows how to wait for specific dialog states when performing long operations or when dialogs appear/disappear dynamically in pywinauto.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/index.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp.Open.Open.click() # opening large file\napp.Open.wait_not('visible') # make sure \"Open\" dialog became invisible\n# wait for up to 30 seconds until data.txt is loaded\napp.window(title='data.txt - Notepad').wait('ready', timeout=30)\n```\n\n----------------------------------------\n\nTITLE: Using Attribute Resolution and Item Access for Window Specifications\nDESCRIPTION: Shows two approaches for creating window specifications using Python's attribute resolution and dictionary-style access. These methods provide convenient shortcuts for targeting windows and controls.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/getting_started.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.UntitledNotepad\n# is equivalent to\napp.window(best_match='UntitledNotepad')\n```\n\n----------------------------------------\n\nTITLE: Handling Owner-Drawn ListBox Controls in Pywinauto\nDESCRIPTION: Demonstrates workarounds for interacting with owner-drawn ListBox controls that don't respond to standard events. It shows how to select items using index-based selection and keyboard simulation.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HowTo.txt#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napp.HelpTopics.ListBox.select(1)\n\napp.Helptopics.ListBox1.type_keys(\"{HOME}{DOWN 2}{ENTER}\")\n\nprint app.HelpTopics.Edit.texts()[1]\n```\n\n----------------------------------------\n\nTITLE: Accessing Notepad Controls with Pywinauto\nDESCRIPTION: Code snippets demonstrating various Pywinauto operations including accessing controls, menu selection, and button clicking in Notepad.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/getting_started.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n<pywinauto.controls.win32_controls.EditWrapper object at 0x00DDC2D0>\n```\n\nLANGUAGE: python\nCODE:\n```\napp.UntitledNotepad.menu_select(\"File -> Exit\")\n```\n\nLANGUAGE: python\nCODE:\n```\napp.Notepad.DontSave.click()\n```\n\n----------------------------------------\n\nTITLE: Starting an Application with UIA Backend\nDESCRIPTION: Example showing how to initialize an application with the Microsoft UI Automation (UIA) backend, which was introduced in version 0.6.0. The UIA backend provides support for modern Windows applications.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\napp = Application(backend='uia').start('your_app.exe')\n```\n\n----------------------------------------\n\nTITLE: Starting and Connecting to Applications in Python using pywinauto\nDESCRIPTION: Demonstrates how to start a new application and connect to an existing one using pywinauto's static methods.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom pywinauto.application import Application\nnotepad = Application.start(\"notepad\")\nsame_notepad = Application.connect(path = \"notepad\")\n```\n\n----------------------------------------\n\nTITLE: Attribute Access for Dialog and Control Selection in pywinauto\nDESCRIPTION: This code snippet illustrates how pywinauto uses attribute access to locate windows, dialogs, and controls in a Windows application.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmyapp.Notepad # looks for a Window/Dialog of your app that has a title 'similar'\n               # to \"Notepad\"\n\nmyapp.PageSetup.OK # looks first for a dialog with a title like \"PageSetup\"\n                    # then it looks for a control on that dialog with a title\n                    # like \"OK\"\n```\n\n----------------------------------------\n\nTITLE: Handling Non-English Applications in PyWinAuto\nDESCRIPTION: Shows how to work with applications that use non-ASCII characters in their interface.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HowTo.txt#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp['dialog_ident']['control_ident'].click()\napp.window(title_re=\"NonAsciiCharacters\").window(title=\"MoreNonAsciiCharacters\").click()\n```\n\n----------------------------------------\n\nTITLE: References to Control Classes and Methods\nDESCRIPTION: A collection of cross-references to detailed documentation for various control wrapper classes and their methods in PyWinAuto. Covers common Windows controls like ComboBox, Dialog, Edit, ListView, etc.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/controls_overview.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _ComboBoxWrapper.ItemData: code/pywinauto.controls.win32_controls.html#pywinauto.controls.win32_controls.ComboBoxWrapper.ItemData\n.. _ComboBoxWrapper.ItemTexts: code/pywinauto.controls.win32_controls.html#pywinauto.controls.win32_controls.ComboBoxWrapper.ItemTexts\n.. _ComboBoxWrapper.Select: code/pywinauto.controls.win32_controls.html#pywinauto.controls.win32_controls.ComboBoxWrapper.Select\n.. _ComboBoxWrapper.SelectedIndex: code/pywinauto.controls.win32_controls.html#pywinauto.controls.win32_controls.ComboBoxWrapper.SelectedIndex\n```\n\n----------------------------------------\n\nTITLE: Using ListView inplace controls in Pywinauto\nDESCRIPTION: Demonstrates how to interact with in-place controls (ComboBox, Edit, DateTimePicker) inside a ListView control using various indexing methods.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nauto_detected_ctrl = list_view.get_item(0).inplace_control()\n\ncombo = list_view.get_item(1,1).inplace_control(\"ComboBox\")\ncombo.select(\"Item name\")\n\nedit = list_view.get_item(3,4).inplace_control(\"Edit\") \nedit.type_keys(\"some text{ENTER}\", set_foreground=False)\n\ndt_picker = list_view.get_item(2,0).inplace_control(\"DateTimePicker\")\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Navigation in PyWinAuto\nDESCRIPTION: This example shows how PyWinAuto handles navigation between dialogs, specifically dealing with potential timing issues when a new dialog is opened. It demonstrates the library's approach to resolving the correct dialog even when executed quickly.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/dev_notes.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# open the Printer setup dialog (which has \"Page Setup\" as title)\napp.PageSetup.Printer.Click()\n\n# if this runs too quickly it actually finds the current page setup dialog\n# before the next dialog opens, but that dialog does not have a Properties\n# button - so an error is raised.\n# because we re-run the resolution from the start we find the new pagesetup dialog.\napp.PageSetup.Properties.Click()\n```\n\n----------------------------------------\n\nTITLE: UpDown Control Methods\nDESCRIPTION: Methods for interacting with up-down (spin) controls including value getting/setting and increment/decrement operations\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/controls_overview.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nGetBase()\nGetBuddyControl()\nGetRange()\nGetValue()\nSetValue()\nIncrement()\nDecrement()\n```\n\n----------------------------------------\n\nTITLE: Toolbar Control Methods\nDESCRIPTION: Methods for interacting with toolbar controls including button manipulation, tooltip retrieval and button state inspection\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/controls_overview.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nButton()\nButtonCount()\nGetButton()\nGetButtonRect()\nGetToolTipsControl()\nPressButton()\n```\n\n----------------------------------------\n\nTITLE: Interacting with Context Menus in Python using pywinauto\nDESCRIPTION: Shows how to interact with context menus using pywinauto's PopupMenuWrapper.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\napp.Notepad.Edit.RightClick()\n# need to use MenuClick rather then MenuSelect\napp.PopupMenu.MenuClick(\"Select All\")\napp.Notepad.Edit.RightClick()\napp.PopupMenu.MenuClick(\"Copy\")\n```\n\n----------------------------------------\n\nTITLE: CPU Usage Wait Example in Python\nDESCRIPTION: Example showing how to wait for CPU usage to drop below a threshold using Pywinauto's wait_cpu_usage_lower method\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/wait_long_operations.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\napp.wait_cpu_usage_lower(threshold=5) # wait until CPU usage is lower than 5%\n```\n\n----------------------------------------\n\nTITLE: TreeView Control Methods\nDESCRIPTION: Methods for navigating and manipulating treeview controls, including item selection and property retrieval\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/controls_overview.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nEnsureVisible()\nGetItem()\nGetProperties()\nIsSelected()\nItemCount()\nRoot()\nSelect()\n```\n\n----------------------------------------\n\nTITLE: Dialog State Waiting Example\nDESCRIPTION: Example showing how to handle long operations by waiting for dialog state changes using wait_not and wait methods.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/Readme.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.Open.Open.click() # opening large file\napp.Open.wait_not('visible') # make sure \"Open\" dialog became invisible\n# wait up to 30 seconds until data.txt is loaded\napp.window(title='data.txt - Notepad').wait('ready', timeout=30)\n```\n\n----------------------------------------\n\nTITLE: Using MenuItem Properties in Python\nDESCRIPTION: Example showing how to check menu item state using Pywinauto's MenuItem methods.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nMenuItem.IsChecked()\n```\n\n----------------------------------------\n\nTITLE: Accessing Windows with Special Characters in Titles\nDESCRIPTION: Demonstrates how to access windows with titles containing special characters using dictionary-style access, which is necessary when window titles contain spaces or special symbols.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/getting_started.txt#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp['Untitled - Notepad']\n# is the same as\napp.window(best_match='Untitled - Notepad')\n```\n\n----------------------------------------\n\nTITLE: Control Pattern Reference in Python\nDESCRIPTION: Example showing the syntax pattern for referencing controls using nearby text and window class in Pywinauto.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\napp.dlg.<Nearby_text><Window_class>\n```\n\n----------------------------------------\n\nTITLE: Referencing Controls by Nearby Text in Python\nDESCRIPTION: Example showing how to reference a control by combining nearby text with window class using Pywinauto. Demonstrates accessing the Footer edit control in the Page Setup dialog.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.PageSetup.FooterEdit\n```\n\n----------------------------------------\n\nTITLE: Setting COM Threading Model for Pywinauto\nDESCRIPTION: Explains how to set the COM threading model for pywinauto, specifically showing how to override the default Multithreaded Apartment (MTA) model with the Single-Threaded Apartment (STA) model.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HowTo.txt#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.coinit_flags = 2  # COINIT_APARTMENTTHREADED\n\nimport pywinauto\n```\n\n----------------------------------------\n\nTITLE: Disabling Magic Attribute Lookup in PyWinAuto\nDESCRIPTION: Code showing how to disable PyWinAuto's magic lookup system by setting allow_magic_lookup=False when creating Desktop or Application instances.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/getting_started.txt#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndesktop = Desktop(backend='win32', allow_magic_lookup=False)\n\n# or\n\napp = Application(allow_magic_lookup=False)\n```\n\n----------------------------------------\n\nTITLE: Accessing Menu Items in Python using pywinauto\nDESCRIPTION: Demonstrates how to access specific menu items using pywinauto's MenuItem class.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\napp.Notepad.MenuItem(\"View\")\napp.Notepad.MenuItem(\"View->Status Bar\")\n```\n\n----------------------------------------\n\nTITLE: Importing Application and WindowSpecification Classes in Python\nDESCRIPTION: Code example showing how to import the main Application and WindowSpecification classes directly from pywinauto. This simplifies imports for users of the library.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport pywinauto.application\n```\n\n----------------------------------------\n\nTITLE: Connecting to an Application in Python using pywinauto\nDESCRIPTION: Demonstrates how to connect to an existing application using pywinauto's Application.connect() method.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\napp = Application.connect(title = 'Find')\napp.Find.Close.Click()\napp.NotePad.MenuSelect(\"File->Exit\")\n```\n\n----------------------------------------\n\nTITLE: Wait Until Passes Decorator Example in Python\nDESCRIPTION: Demonstrates using the always_wait_until_passes decorator to repeatedly check a condition with timing controls\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/wait_long_operations.txt#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@always_wait_until_passes(4, 2)\ndef ensure_text_changed(ctrl):\n    if previous_text == ctrl.window_text():\n        raise ValueError('The ctrl text remains the same while change is expected')\n```\n\n----------------------------------------\n\nTITLE: Ansible Playbook for Remote GUI Automation\nDESCRIPTION: An Ansible playbook example that uses the win_psexec module to run GUI automation scripts on a remote Windows machine.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/remote_execution.txt#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- name: test ra module\n  hosts: *****\n  tasks:\n    - name: run GUI automation\n      win_psexec:\n        command: python pywinauto_example.py\n        executable: C:\\Windows\\PSTools\\psexec.exe\n        interactive: yes\n        username: admin\n        password: ******\n        hostnames: ******\n```\n\n----------------------------------------\n\nTITLE: Windows Scheduler Command for One-time Task\nDESCRIPTION: A command-line example showing how to schedule a one-time task with GUI interaction support using the Windows Task Scheduler.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/remote_execution.txt#2025-04-23_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nSchtasks /Create /tn my_task /tr c:\\temp\\my_task.bat /sc ONCE /st hh:mi:ss /sd yyyy/mm/dd\n```\n\n----------------------------------------\n\nTITLE: Global Timing Controls in Pywinauto\nDESCRIPTION: Examples of setting global timing controls using the Timings class to adjust script execution speed\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/wait_long_operations.txt#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom timings import Timings\n\nTimings.defaults()\nTimings.slow() # double all timings (~2x slower script execution)\nTimings.fast() # divide all timings by two (~2x faster)\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for pywinauto Project\nDESCRIPTION: This snippet defines the required packages and their versions for the pywinauto project. It includes conditional dependencies based on Python version and operating system, covering packages for Windows automation, imaging, testing, documentation, and GUI development.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/dev-requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndocutils<0.18\npywin32<=227; python_version <= '3.6' and platform_system == 'Windows'\npywin32>=300; python_version > '3.6' and platform_system == 'Windows'\nPillow==6.2.0; python_version <= '3.7'\nPillow==10.3.0; python_version == '3.8'\nPillow==11.1.0; python_version > '3.8'\ncoverage\npytest==4.6.11; python_version <= '3.6'\npytest; python_version > '3.6'\npytest-cov==2.12.1; python_version <= '3.6'\npytest-cov; python_version > '3.6'\ncodecov\nrst2pdf\nSphinx\nmock==2.0.0\ncodacy-coverage\nPyQt5==5.15.9; python_version >= '3.6'\nPyQt5-sip==12.15.0; python_version >= '3.9' and python_version < '3.10'\nPyQt5-sip; python_version >= '3.10'\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for pywinauto\nDESCRIPTION: A requirements file that specifies exact versions of Python packages needed for the pywinauto project. It includes Babel for internationalization, mock for testing, rst2pdf for PDF documentation generation, and Sphinx for documentation building.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBabel==2.17.0\nmock==2.0.0\nrst2pdf\nSphinx==8.2.3\n```\n\n----------------------------------------\n\nTITLE: Simplified Application Interaction in Python using pywinauto\nDESCRIPTION: Shows a simplified way to interact with an application without explicitly connecting, using pywinauto's automatic window matching.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\napp = Application()\napp.Find.Close.Click()\napp.NotePad.MenuSelect(\"File->Exit\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx TOC Tree for Main Documentation\nDESCRIPTION: Defines the main table of contents tree structure for PyWinAuto documentation, including getting started guides, how-tos, and other core documentation pages.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/contents.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   index\n   getting_started\n   HowTo\n   wait_long_operations\n   remote_execution\n   controls_overview\n   credits\n\n   dev_notes\n   TODO\n   HISTORY\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx TOC Tree for Source Code Reference\nDESCRIPTION: Defines the table of contents structure for PyWinAuto's source code documentation section.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/contents.txt#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   code/code\n```\n\n----------------------------------------\n\nTITLE: Resolving Application Dialog Control in PyWinAuto\nDESCRIPTION: This snippet demonstrates the attribute resolution process in PyWinAuto for accessing a control on a dialog within an application. It shows how the library resolves multi-level attribute access and handles potential timing issues.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/dev_notes.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.dlg.control.action()\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the overall structure of the PyWinAuto documentation using reStructuredText directives. It organizes the documentation into sections and subsections, listing the relevant module documentation files for each category.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/code.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nBasic User Input Modules\n========================\n.. toctree::\n   :maxdepth: 1\n   \n   pywinauto.mouse.txt\n   pywinauto.keyboard.txt\n\nMain User Modules\n=================\n.. toctree::\n   :maxdepth: 1\n   \n   pywinauto.base_application.txt\n   pywinauto.windows.application.txt\n   pywinauto.linux.application.txt\n   pywinauto.findbestmatch.txt\n   pywinauto.findwindows.txt\n   pywinauto.timings.txt\n   pywinauto.txt\n\nSpecific Functionality\n======================\n.. toctree::\n   :maxdepth: 1\n   \n   pywinauto.clipboard.txt\n   pywinauto.windows.win32_hooks.txt\n\n\nControls Reference\n==================\n.. toctree::\n   :maxdepth: 1\n   \n   pywinauto.base_wrapper.txt\n   pywinauto.controls.hwndwrapper.txt\n   pywinauto.controls.menuwrapper.txt\n   pywinauto.controls.common_controls.txt\n   pywinauto.controls.win32_controls.txt\n\n   pywinauto.controls.uiawrapper.txt\n   pywinauto.controls.uia_controls.txt\n\n   pywinauto.controls.atspi_controls.txt\n   pywinauto.controls.atspiwrapper.txt\n\nPre-supplied Tests\n==================\n.. toctree::\n   :maxdepth: 1\n   \n   pywinauto.tests.allcontrols.txt\n   pywinauto.tests.asianhotkey.txt\n   pywinauto.tests.comboboxdroppedheight.txt\n   pywinauto.tests.comparetoreffont.txt\n   pywinauto.tests.leadtrailspaces.txt\n   pywinauto.tests.miscvalues.txt\n   pywinauto.tests.missalignment.txt\n   pywinauto.tests.missingextrastring.txt\n   pywinauto.tests.overlapping.txt\n   pywinauto.tests.repeatedhotkey.txt\n   pywinauto.tests.translation.txt\n   pywinauto.tests.truncation.txt\n\nBackend Internal Implementation modules\n=======================================\n.. toctree::\n   :maxdepth: 1\n   \n   pywinauto.backend.txt\n   pywinauto.element_info.txt\n\n   pywinauto.windows.win32_element_info.txt\n\n   pywinauto.windows.uia_element_info.txt\n   pywinauto.windows.uia_defines.txt\n\n   pywinauto.linux.atspi_element_info.txt\n\nInternal Modules\n================\n.. toctree::\n   :maxdepth: 1\n   \n   pywinauto.controlproperties.txt\n   pywinauto.handleprops.txt\n   pywinauto.xml_helpers.txt\n   pywinauto.fuzzydict.txt\n   pywinauto.actionlogger.txt\n   pywinauto.sysinfo.txt\n   pywinauto.windows.remote_memory_block.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for PyWinauto Windows Application Module\nDESCRIPTION: ReStructuredText directive for Sphinx documentation that configures the automodule feature to document the pywinauto.windows.application module. It includes module members and undocumented members while excluding specific methods with Kill_, kill_, Window_, and window_ names.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.windows.application.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: pywinauto.windows.application\n    :members:\n    :exclude-members: Kill_, kill_, Window_, window_\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Writing Dialog Information to XML in PyWinAuto\nDESCRIPTION: These snippets demonstrate the challenge of ensuring the correct dialog is active before writing its information to an XML file. It highlights the need for a method to verify dialog activation without accessing specific controls.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/dev_notes.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp.MainWin.MenuSelect(\"Something That->Loads a Dialog\")\napp.Dlg._write(\"dlg.xml\")\n```\n\nLANGUAGE: python\nCODE:\n```\napp.PageSetup.Printer.Click()\napp.PageSetup._write(\"pagesetup.xml\")\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for PyWinAuto base application\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for the pywinauto.base_application module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.base_application.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: pywinauto.base_application\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for pywinauto uiawrapper\nDESCRIPTION: ReStructuredText directive to auto-document the pywinauto.controls.uiawrapper module, showing members and inheritance while excluding control_type_to_cls.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.controls.uiawrapper.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n .. automodule:: pywinauto.controls.uiawrapper\n    :members:\n    :exclude-members: control_type_to_cls\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Control Class Method Links - Dialog, Edit and Header\nDESCRIPTION: Documentation links for methods of Dialog, Edit and Header control wrapper classes. Includes references to methods for client area, testing, XML writing, text manipulation and header column operations.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/controls_overview.txt#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _DialogWrapper.ClientAreaRect: code/pywinauto.controls.win32_controls.html#pywinauto.controls.win32_controls.DialogWrapper.ClientAreaRect\n.. _DialogWrapper.RunTests: code/pywinauto.controls.win32_controls.html#pywinauto.controls.win32_controls.DialogWrapper.RunTests\n.. _DialogWrapper.WriteToXML: code/pywinauto.controls.win32_controls.html#pywinauto.controls.win32_controls.DialogWrapper.WriteToXML\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for AT-SPI Wrapper Module\nDESCRIPTION: Sphinx documentation configuration directives for the pywinauto.controls.atspiwrapper module. Includes all members and inherited members while excluding control_type_to_cls mapping.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.controls.atspiwrapper.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: pywinauto.controls.atspiwrapper\n    :members:\n    :exclude-members: control_type_to_cls\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for pywinauto.controls.menuwrapper\nDESCRIPTION: This snippet configures the Sphinx automodule directive for the pywinauto.controls.menuwrapper module. It includes all members except for a specific list of excluded members, and shows undocumented members and inheritance.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.controls.menuwrapper.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n .. automodule:: pywinauto.controls.menuwrapper\n    :members:\n    :exclude-members: GetMenuPath, GetProperties, Item, ItemCount, Items,\n        Click, ClickInput, FriendlyClassName, GetProperties, ID, Index,\n        IsChecked, IsEnabled, Rectangle, Select, State, SubMenu, Text, Type\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ToolTips Control Methods\nDESCRIPTION: Methods for retrieving tooltip information and counts from tooltip controls\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/controls_overview.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nGetTip()\nGetTipText()\nToolCount()\n```\n\n----------------------------------------\n\nTITLE: Sphinx Automodule Directive for Remote Memory Block\nDESCRIPTION: A Sphinx directive that auto-generates documentation for the remote_memory_block module within the pywinauto.windows package. It includes all members and undocumented members in the output.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.windows.remote_memory_block.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n .. automodule:: pywinauto.windows.remote_memory_block\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Documentation Directive for Clipboard Module\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for pywinauto's clipboard module. The directive includes all members and undocumented members in the output.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.clipboard.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n .. automodule:: pywinauto.clipboard\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Action Logger\nDESCRIPTION: Shortcuts for controlling the action logger module, which can be enabled or disabled as needed. The action logger provides detailed logging of pywinauto operations.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HISTORY.txt#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nactionlogger.enable()\nactionlogger.disable()\nactionlogger.set_level(level)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Block for pywinauto.mouse Module\nDESCRIPTION: ReStructuredText documentation directive to auto-generate documentation for the pywinauto.mouse module including all members and undocumented members.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.mouse.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n .. automodule:: pywinauto.mouse\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for pywinauto.fuzzydict Module\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the pywinauto.fuzzydict module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.fuzzydict.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n .. automodule:: pywinauto.fuzzydict\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Finding RDP Session ID\nDESCRIPTION: A PowerShell script that identifies the process ID of an RDP session, which is needed when launching GUI automation using PsExec or similar tools.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/remote_execution.txt#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$session = tasklist /fo CSV | findstr RDP ; $session = $session.Split(\",\")[3] ; $session.Split('\"')[1]\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for pywinauto.tests.allcontrols Module\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to automatically generate documentation for the pywinauto.tests.allcontrols module. It includes all members and undocumented members in the generated documentation.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.tests.allcontrols.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n .. automodule:: pywinauto.tests.allcontrols\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for pywinauto.tests.repeatedhotkey Module\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the pywinauto.tests.repeatedhotkey module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.tests.repeatedhotkey.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n .. automodule:: pywinauto.tests.repeatedhotkey\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Slave Agent Batch Script\nDESCRIPTION: A batch script example for setting up a Jenkins slave agent that allows GUI testing on Windows. It connects to the Jenkins master and enables running GUI tests through the agent.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/remote_execution.txt#2025-04-23_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\njava -jar slave.jar -jnlpUrl https://<JENKINS_HOST>/computer/<NODE_NAME>/slave-agent.jnlp -workDir <WORKDIR> -secret <SECRET>\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for PyWinAuto Tests Miscvalues Module\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to automatically generate documentation for the pywinauto.tests.miscvalues module. It includes all members and undocumented members in the generated documentation.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.tests.miscvalues.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: pywinauto.tests.miscvalues\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Pywinauto Overlapping Test Module\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to automatically generate documentation for the pywinauto.tests.overlapping module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.tests.overlapping.txt#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n .. automodule:: pywinauto.tests.overlapping\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting pywinauto Module with Sphinx\nDESCRIPTION: RST documentation snippet that uses the automodule directive to automatically generate documentation for the pywinauto module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n .. automodule:: pywinauto\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for pywinauto.tests.leadtrailspaces Module\nDESCRIPTION: RST directive for automatically generating documentation from the pywinauto.tests.leadtrailspaces module, including all members and undocumented members.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.tests.leadtrailspaces.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n .. automodule:: pywinauto.tests.leadtrailspaces\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Selecting Dialog Windows in PyWinAuto\nDESCRIPTION: Shows different methods for selecting dialog windows, including attribute access, indexing, and window searching.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/HowTo.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndlg = app.Notepad\ndlg = app['Notepad']\ndlg = app.top_window()\ndlg = app.window(title_re=\"Page Setup\", class_name=\"#32770\")\ndialogs = app.windows()\napp.window(handle=win)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for PyWinAuto Common Controls\nDESCRIPTION: RST directive configuration for documenting the pywinauto.controls.common_controls module. Excludes common control methods like Click and ClickInput while including other members and inheritance information.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.controls.common_controls.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: pywinauto.controls.common_controls\n    :members:\n    :exclude-members: Click, ClickInput, HasStyle, IsCheckable, IsChecked,\n        IsEnabled, IsPressable, IsPressed, Rectangle, State, Style, Text\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for pywinauto UIA Controls\nDESCRIPTION: Sphinx documentation configuration directive that enables automatic documentation generation for the pywinauto.controls.uia_controls module. Includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.controls.uia_controls.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: pywinauto.controls.uia_controls\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx RST Keyboard Module Documentation\nDESCRIPTION: RST directive to auto-generate module documentation for pywinauto.keyboard, including all members and undocumented members.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.keyboard.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n .. automodule:: pywinauto.keyboard\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating RST Documentation for pywinauto.timings\nDESCRIPTION: ReStructuredText directive for automatically generating documentation from the pywinauto.timings module, including all members and undocumented members.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.timings.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n .. automodule:: pywinauto.timings\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for pywinauto.handleprops\nDESCRIPTION: Sphinx documentation configuration directive for automatically generating API documentation from the pywinauto.handleprops module. Includes all members and undocumented members in the output.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.handleprops.txt#2025-04-23_snippet_0\n\nLANGUAGE: sphinx\nCODE:\n```\n.. automodule:: pywinauto.handleprops\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for pywinauto.element_info Module\nDESCRIPTION: This reStructuredText directive instructs Sphinx to automatically generate documentation for the pywinauto.element_info module. It includes all members of the module, including those that are not explicitly documented.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.element_info.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: pywinauto.element_info\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting ComboBox Dropped Height Test Module in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the pywinauto.tests.comboboxdroppedheight module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.tests.comboboxdroppedheight.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: pywinauto.tests.comboboxdroppedheight\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc directive for AT-SPI controls module documentation\nDESCRIPTION: This reStructuredText directive instructs Sphinx to automatically generate documentation for the pywinauto.controls.atspi_controls module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/docs/code/pywinauto.controls.atspi_controls.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n .. automodule:: pywinauto.controls.atspi_controls\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing pywinauto\nDESCRIPTION: Basic usage example showing how to start Notepad and send keystrokes using pywinauto's UIA backend.\nSOURCE: https://github.com/pywinauto/pywinauto/blob/master/Readme.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pywinauto import Application\n>>> app = Application(backend=\"uia\").start(\"notepad.exe\")\n>>> app.UntitledNotepad.type_keys(\"%FX\")\n```"
  }
]