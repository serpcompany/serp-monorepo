[
  {
    "owner": "atinux",
    "repo": "nuxt-auth-utils",
    "content": "TITLE: Using the useUserSession Vue Composable\nDESCRIPTION: Example of how to implement user session management in a Vue component, including login status checking and logout functionality.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { loggedIn, user, session, fetch, clear, openInPopup } = useUserSession()\n</script>\n\n<template>\n  <div v-if=\"loggedIn\">\n    <h1>Welcome {{ user.login }}!</h1>\n    <p>Logged in since {{ session.loggedInAt }}</p>\n    <button @click=\"clear\">Logout</button>\n  </div>\n  <div v-else>\n    <h1>Not logged in</h1>\n    <a href=\"/auth/github\">Login with GitHub</a>\n    <!-- or open the OAuth route in a popup -->\n    <button @click=\"openInPopup('/auth/github')\">Login with GitHub</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Session Management Server Utils\nDESCRIPTION: Examples of server-side session management functions for setting, getting, requiring, and clearing user sessions.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Set a user session, note that this data is encrypted in the cookie but can be decrypted with an API call\n// Only store the data that allow you to recognize a user, but do not store sensitive data\n// Merges new data with existing data using unjs/defu library\nawait setUserSession(event, {\n  // User data\n  user: {\n    login: 'atinux'\n  },\n  // Private data accessible only on server/ routes\n  secure: {\n    apiToken: '1234567890'\n  },\n  // Any extra fields for the session data\n  loggedInAt: new Date()\n})\n\n// Replace a user session. Same behaviour as setUserSession, except it does not merge data with existing data\nawait replaceUserSession(event, data)\n\n// Get the current user session\nconst session = await getUserSession(event)\n\n// Clear the current user session\nawait clearUserSession(event)\n\n// Require a user session (send back 401 if no `user` key in session)\nconst session = await requireUserSession(event)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Auth\nDESCRIPTION: Configuration of the required session password in the .env file for securing authentication cookies.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nNUXT_SESSION_PASSWORD=password-with-at-least-32-characters\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Auth Utils with NPX\nDESCRIPTION: Command to add the auth-utils module to your Nuxt project using the Nuxt CLI.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add auth-utils\n```\n\n----------------------------------------\n\nTITLE: Password Hashing and Verification\nDESCRIPTION: Example of using the password hashing utilities to securely hash and verify user passwords using scrypt.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst hashedPassword = await hashPassword('user_password')\n\nif (await verifyPassword(hashedPassword, 'user_password')) {\n  // Password is valid\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth Configuration in Nuxt Config\nDESCRIPTION: Configuration example for OAuth providers in nuxt.config.ts, showing how to set client ID and secret.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    oauth: {\n      // provider in lowercase (github, google, etc.)\n      <provider>: {\n        clientId: '...',\n        clientSecret: '...'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Handler\nDESCRIPTION: Example of creating a GitHub OAuth handler using the defineOAuthGitHubEventHandler utility to handle authentication flow and session management.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineOAuthGitHubEventHandler({\n  config: {\n    emailRequired: true\n  },\n  async onSuccess(event, { user, tokens }) {\n    await setUserSession(event, {\n      user: {\n        githubId: user.id\n      }\n    })\n    return sendRedirect(event, '/')\n  },\n  // Optional, will return a json error and 401 status code by default\n  onError(event, error) {\n    console.error('GitHub OAuth error:', error)\n    return sendRedirect(event, '/')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining User Session Types with TypeScript\nDESCRIPTION: Example of type declaration file to augment UserSession types with custom fields for type-safe session handling.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// auth.d.ts\ndeclare module '#auth-utils' {\n  interface User {\n    // Add your own fields\n  }\n\n  interface UserSession {\n    // Add your own fields\n  }\n\n  interface SecureSessionData {\n    // Add your own fields\n  }\n}\n\nexport {}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for UserSessionComposable\nDESCRIPTION: Interface showing the TypeScript types for the useUserSession composable, including the available properties and methods.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserSessionComposable {\n  /**\n   * Computed indicating if the auth session is ready\n   */\n  ready: ComputedRef<boolean>\n  /**\n   * Computed indicating if the user is logged in.\n   */\n  loggedIn: ComputedRef<boolean>\n  /**\n   * The user object if logged in, null otherwise.\n   */\n  user: ComputedRef<User | null>\n  /**\n   * The session object.\n   */\n  session: Ref<UserSession>\n  /**\n   * Fetch the user session from the server.\n   */\n  fetch: () => Promise<void>\n  /**\n   * Clear the user session and remove the session cookie.\n   */\n  clear: () => Promise<void>\n  /**\n   * Open the OAuth route in a popup that auto-closes when successful.\n   */\n  openInPopup: (route: string, size?: { width?: number, height?: number }) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Using AuthState Component with Simple Login/Logout Button in Vue\nDESCRIPTION: This snippet demonstrates how to implement a basic login/logout button in a header using the AuthState component. It conditionally displays either a logout button or login link based on the user's authentication status.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <header>\n    <AuthState v-slot=\"{ loggedIn, clear }\">\n      <button v-if=\"loggedIn\" @click=\"clear\">Logout</button>\n      <NuxtLink v-else to=\"/login\">Login</NuxtLink>\n    </AuthState>\n  </header>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering Authentication Example\nDESCRIPTION: Example of making authenticated requests during server-side rendering using useRequestFetch and useFetch.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// When using useAsyncData\nconst { data } = await useAsyncData('team', () => useRequestFetch()('/api/protected-endpoint'))\n\n// useFetch will automatically use useRequestFetch during SSR\nconst { data } = await useFetch('/api/protected-endpoint')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Options in Nuxt Config\nDESCRIPTION: This code shows how to configure session options for nuxt-auth-utils in the nuxt.config.ts file. In this example, the session maxAge is set to one week (in seconds).\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['nuxt-auth-utils'],\n  runtimeConfig: {\n    session: {\n      maxAge: 60 * 60 * 24 * 7 // 1 week\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting User Session with Custom Configuration\nDESCRIPTION: This snippet demonstrates how to use the setUserSession function with a custom session configuration, overriding the default options. The example sets a custom maxAge of one week.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\nawait setUserSession(event, { ... } , {\n  maxAge: 60 * 60 * 24 * 7 // 1 week\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing WebAuthn Authentication Handler\nDESCRIPTION: Server-side implementation of WebAuthn authentication process. Handles credential verification and user session management.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// server/api/webauthn/authenticate.post.ts\nexport default defineWebAuthnAuthenticateEventHandler({\n  // Optionally, we can prefetch the credentials if the user gives their userName during login\n  async allowCredentials(event, userName) {\n    const credentials = await useDatabase().sql`...`\n    // If no credentials are found, the authentication cannot be completed\n    if (!credentials.length)\n      throw createError({ statusCode: 400, message: 'User not found' })\n\n    // If user is found, only allow credentials that are registered\n    // The browser will automatically try to use the credential that it knows about\n    // Skipping the step for the user to select a credential for a better user experience\n    return credentials\n    // example: [{ id: '...' }]\n  },\n  async getCredential(event, credentialId) {\n    // Look for the credential in our database\n    const credential = await useDatabase().sql`...`\n\n    // If the credential is not found, there is no account to log in to\n    if (!credential)\n      throw createError({ statusCode: 400, message: 'Credential not found' })\n\n    return credential\n  },\n  async onSuccess(event, { credential, authenticationInfo }) {\n    // The credential authentication has been successful\n    // We can look it up in our database and get the corresponding user\n    const db = useDatabase()\n    const user = await db.sql`...`\n\n    // Update the counter in the database (authenticationInfo.newCounter)\n    await db.sql`...`\n\n    // Set the user session\n    await setUserSession(event, {\n      user: {\n        id: user.id\n      },\n      loggedInAt: Date.now(),\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing WebAuthn Registration Handler\nDESCRIPTION: Server-side implementation of WebAuthn registration process using defineWebAuthnRegisterEventHandler. Handles user validation and credential storage.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// server/api/webauthn/register.post.ts\nimport { z } from 'zod'\nexport default defineWebAuthnRegisterEventHandler({\n  // optional\n  async validateUser(userBody, event) {\n    // bonus: check if the user is already authenticated to link a credential to his account\n    // We first check if the user is already authenticated by getting the session\n    // And verify that the email is the same as the one in session\n    const session = await getUserSession(event)\n    if (session.user?.email && session.user.email !== userBody.userName) {\n      throw createError({ statusCode: 400, message: 'Email not matching curent session' })\n    }\n\n    // If he registers a new account with credentials\n    return z.object({\n      // we want the userName to be a valid email\n      userName: z.string().email() \n    }).parse(userBody)\n  },\n  async onSuccess(event, { credential, user }) {\n    // The credential creation has been successful\n    // We need to create a user if it does not exist\n    const db = useDatabase()\n\n    // Get the user from the database\n    let dbUser = await db.sql`...`\n    if (!dbUser) {\n      // Store new user in database & its credentials\n      dbUser = await db.sql`...`\n    }\n\n    // we now need to store the credential in our database and link it to the user\n    await db.sql`...`\n\n    // Set the user session\n    await setUserSession(event, {\n      user: {\n        id: dbUser.id\n      },\n      loggedInAt: Date.now(),\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Challenge Implementation\nDESCRIPTION: Implementation of WebAuthn challenge storage and retrieval for enhanced security against replay attacks.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineWebAuthnAuthenticateEventHandler({\n  async storeChallenge(event, challenge, attemptId) {\n    // Store the challenge in a KV store or DB\n    await useStorage().setItem(`attempt:${attemptId}`, challenge)\n  },\n  async getChallenge(event, attemptId) {\n    const challenge = await useStorage().getItem(`attempt:${attemptId}`)\n\n    // Make sure to always remove the attempt because they are single use only!\n    await useStorage().removeItem(`attempt:${attemptId}`)\n\n    if (!challenge)\n      throw createError({ statusCode: 400, message: 'Challenge expired' })\n\n    return challenge\n  },\n  async onSuccess(event, { authenticator }) {\n    // ...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Frontend Implementation for WebAuthn\nDESCRIPTION: Client-side Vue implementation for WebAuthn registration and authentication, including form handling and session management.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { register, authenticate } = useWebAuthn({\n  registerEndpoint: '/api/webauthn/register', // Default\n  authenticateEndpoint: '/api/webauthn/authenticate', // Default\n})\nconst { fetch: fetchUserSession } = useUserSession()\n\nconst userName = ref('')\nasync function signUp() {\n  await register({ userName: userName.value })\n    .then(fetchUserSession) // refetch the user session\n}\n\nasync function signIn() {\n  await authenticate(userName.value)\n    .then(fetchUserSession) // refetch the user session\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"signUp\">\n    <input v-model=\"userName\" placeholder=\"Email or username\" />\n    <button type=\"submit\">Sign up</button>\n  </form>\n  <form @submit.prevent=\"signIn\">\n    <input v-model=\"userName\" placeholder=\"Email or username\" />\n    <button type=\"submit\">Sign in</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for WebAuthn Authentication\nDESCRIPTION: SQL schema for creating users and credentials tables to store WebAuthn authentication data. Includes user information and credential details like public keys, counters, and transport methods.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  email TEXT NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS credentials (\n  userId INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,\n  id TEXT UNIQUE NOT NULL,\n  publicKey TEXT NOT NULL,\n  counter INTEGER NOT NULL,\n  backedUp INTEGER NOT NULL,\n  transports TEXT NOT NULL,\n  PRIMARY KEY (\"userId\", \"id\")\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling WebAuthn in Nuxt Config\nDESCRIPTION: Configuration for enabling WebAuthn (passkey) support in the Nuxt Auth Utils module.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    webAuthn: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing WebAuthn Dependencies\nDESCRIPTION: Command to install the required dependencies for WebAuthn (passkey) support in Nuxt Auth Utils.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx nypm i @simplewebauthn/server@11 @simplewebauthn/browser@11\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated WebSocket Handler with Nuxt Auth Utils\nDESCRIPTION: This snippet demonstrates how to create a WebSocket handler in Nuxt that uses requireUserSession to authenticate users before upgrading connections. It also sends personalized messages to the authenticated user.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\n// server/routes/ws.ts\nexport default defineWebSocketHandler({\n  async upgrade(request) {\n    // Make sure the user is authenticated before upgrading the WebSocket connection\n    await requireUserSession(request)\n  },\n  async open(peer) {\n    const { user } = await requireUserSession(peer)\n\n    peer.send(`Hello, ${user.name}!`)\n  },\n  message(peer, message) {\n    peer.send(`Echo: ${message}`)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Connection in Vue Component\nDESCRIPTION: This Vue component demonstrates how to use the useWebSocket composable to connect to a secure WebSocket endpoint. It includes buttons for opening/closing the connection and sending messages, plus displays the connection status and received data.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { status, data, send, open, close } = useWebSocket('/ws', { immediate: false })\n\n// Only open the websocket after the page is hydrated (client-only)\nonMounted(open)\n</script>\n\n<template>\n  <div>\n    <p>Status: {{ status }}</p>\n    <p>Data: {{ data }}</p>\n    <p>\n      <button @click=\"open\">Open</button>\n      <button @click=\"close(1000, 'Closing')\">Close</button>\n      <button @click=\"send('hello')\">Send hello</button>\n    </p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSocket Support in Nuxt Config\nDESCRIPTION: This code enables WebSocket support in a Nuxt application by configuring the Nitro experimental WebSocket feature in the nuxt.config.ts file.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    experimental: {\n      websocket: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using AuthState Component with Placeholder Slot in Vue\nDESCRIPTION: This snippet shows how to use the AuthState component with a placeholder slot that displays while the user session is being fetched. This is useful for prerendered pages to provide a better user experience during loading states.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <header>\n    <AuthState>\n      <template #default=\"{ loggedIn, clear }\">\n        <button v-if=\"loggedIn\" @click=\"clear\">Logout</button>\n        <NuxtLink v-else to=\"/login\">Login</NuxtLink>\n      </template>\n      <template #placeholder>\n        <button disabled>Loading...</button>\n      </template>\n    </AuthState>\n  </header>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Session Extension Plugin Implementation\nDESCRIPTION: Nitro plugin implementation for extending user sessions and handling session-related hooks.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// server/plugins/session.ts\nexport default defineNitroPlugin(() => {\n  // Called when the session is fetched during SSR for the Vue composable (/api/_auth/session)\n  // Or when we call useUserSession().fetch()\n  sessionHooks.hook('fetch', async (session, event) => {\n    // extend User Session by calling your database\n    // or\n    // throw createError({ ... }) if session is invalid for example\n  })\n\n  // Called when we call useUserSession().clear() or clearUserSession(event)\n  sessionHooks.hook('clear', async (session, event) => {\n    // Log that user logged out\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashing Options\nDESCRIPTION: Configuration example for customizing the scrypt options for password hashing in the Nuxt config.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['nuxt-auth-utils'],\n  auth: {\n    hash: {\n      scrypt: {\n        // See https://github.com/adonisjs/hash/blob/94637029cd526783ac0a763ec581306d98db2036/src/types.ts#L144\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling AT Protocol in Nuxt Config\nDESCRIPTION: Configuration for enabling AT Protocol (Bluesky) support in the Nuxt Auth Utils module.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    atproto: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing AT Protocol Dependencies\nDESCRIPTION: Command to install the required dependencies for AT Protocol (Bluesky) authentication support.\nSOURCE: https://github.com/atinux/nuxt-auth-utils/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx nypm i @atproto/oauth-client-node @atproto/api\n```"
  }
]