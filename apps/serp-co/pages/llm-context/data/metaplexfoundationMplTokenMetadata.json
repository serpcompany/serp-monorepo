[
  {
    "owner": "metaplex-foundation",
    "repo": "mpl-token-metadata",
    "content": "TITLE: Creating Programmable NFT Metadata with Asset Data and Builder - Token Metadata - Rust\nDESCRIPTION: Draft Rust example for creating programmable NFT metadata via the CreateBuilder API, encompassing construction of asset data with required fields, customization (name, symbol, URI, fee basis, programmable config), and the use of the builder pattern to specify accounts, options, and arguments. Prerequisites: mpl_token_metadata crate, public key types, and builder/instruction traits. Inputs include metadata/mint public keys, asset data, and optional parameters; output is a constructed Solana instruction. Limitation: only illustrates construction, not submission or full execution.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse mpl_token_metadata::instruction::builders::CreateBuilder;\n\n...\n\nlet name = puffed_out_string(\"Programmable NFT\", MAX_NAME_LENGTH);\nlet symbol = puffed_out_string(\"PRG\", MAX_SYMBOL_LENGTH);\nlet uri = puffed_out_string(\"http://first.programmable.nft/\", MAX_URI_LENGTH);\n\nlet mut asset = AssetData::new(\n    TokenStandard::ProgrammableNonFungible,\n    name.clone(),\n    symbol.clone(),\n    uri.clone(),\n    context.payer.pubkey(),\n);\nasset.seller_fee_basis_points = 500;\nasset.programmable_config = Some(ProgrammableConfig {\n    rule_set: Pubkey::from_str(\"Cex6GAMtCwD9E17VsEK4rQTbmcVtSdHxWcxhwdwXkuAN\").unwrap(),\n});\n\n...\n\nlet create_ix = CreateBuilder::new()\n    .metadata(metadata)\n    .master_edition(master_edition)\n    .mint(mint)\n    .mint_authority(payer_pubkey)\n    .payer(payer_pubkey)\n    .update_authority(payer_pubkey)\n    .initialize_mint(true)\n    .update_authority_as_signer(true)\n    .build(CreateArgs::V1 {\n        asset_data: asset,\n        decimals: Some(0),\n        max_supply: Some(0),\n    })?\n    .instruction();\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Next.js App for Solana NFT Creation\nDESCRIPTION: This shell script outlines the steps to initialize a Next.js application named `ui-create-nft`, install required dependencies for Solana development including Umi, wallet adapters, NFT Storage uploader, and Metaplex token metadata library. It also includes steps to view the main page file, configure environment variables (specifically for the NFT Storage token), and start the local development server.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/examples/js/ui-create-nft/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Create a new Next app with all default values.\nnpx create-next-app@latest ui-create-nft\ncd ui-create-nft\n\n# Install dependencies.\nnpm install @metaplex-foundation/umi \\\n  @metaplex-foundation/umi-signer-wallet-adapters \\\n  @metaplex-foundation/umi-uploader-nft-storage \\\n  @metaplex-foundation/mpl-token-metadata@alpha \\\n  @solana/web3.js \\\n  @solana/wallet-adapter-base \\\n  @solana/wallet-adapter-react \\\n  @solana/wallet-adapter-react-ui \\\n  @solana/wallet-adapter-wallets\n\n# Check out the code for the index page.\ncat pages/index.tsx\n\n# add your nft.storage token to the .env file\nvi .env\n\n# Run locally.\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project and Installing Metaplex/Solana Dependencies (Shell)\nDESCRIPTION: This shell script guides the user through creating a new Next.js application named 'ui-create-nft', changing into the project directory, and installing essential Node.js packages. These packages include Metaplex Umi core, signer wallet adapters, Bundlr uploader, derived signer, Metaplex toolbox, digital asset library, Solana web3.js, and Solana wallet adapter components for React. Finally, it shows how to display the content of the main index page and start the Next.js development server.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/examples/js/ui-create-nft-with-derived-signer/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Create a new Next app with all default values.\nnpx create-next-app@latest ui-create-nft\ncd ui-create-nft\n\n# Install dependencies.\nnpm install @metaplex-foundation/umi \\\n  @metaplex-foundation/umi-signer-wallet-adapters \\\n  @metaplex-foundation/umi-uploader-bundlr \\\n  @metaplex-foundation/umi-signer-derived \\\n  @metaplex-foundation/mpl-toolbox \\\n  @lorisleiva/mpl-digital-asset \\\n  @solana/web3.js \\\n  @solana/wallet-adapter-base \\\n  @solana/wallet-adapter-react \\\n  @solana/wallet-adapter-react-ui \\\n  @solana/wallet-adapter-wallets\n\n# Check out the code for the index page.\ncat pages/index.tsx\n\n# Run locally.\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Specifying Mint Instruction Accounts Object - Token Metadata JS SDK - JavaScript\nDESCRIPTION: Shows how to specify a MintInstructionAccounts object in JavaScript/TypeScript for creating a mint instruction via the Token Metadata JS SDK. Each field (token, tokenOwner, metadata, masterEdition, mint, payer) corresponds to a required account's public key, enabling the SDK to construct transactions based on their positions. This is used when building mint instructions; required dependency includes the correct types from the SDK. Inputs are public key objects; output is the account list used for instruction construction. Omitting an account may break the positional pattern unless handled with a not-set-value.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mintAccounts: MintInstructionAccounts = {\n    token,\n    tokenOwner,\n    metadata,\n    masterEdition,\n    mint,\n    payer,\n    ...\n};\n\n```\n\n----------------------------------------\n\nTITLE: Registering MPL Token Metadata Plugin with Umi\nDESCRIPTION: This TypeScript code snippet demonstrates how to integrate the MPL Token Metadata library with the Umi framework. It first imports the `mplTokenMetadata` function from the installed package and then registers it as a plugin by calling the `use` method on an existing Umi instance (`umi`). This makes the library's features available through the Umi context.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/js/README.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';\numi.use(mplTokenMetadata());\n```\n\n----------------------------------------\n\nTITLE: Creating and Invoking CreateV1 Instructions - Rust\nDESCRIPTION: Shows how to instantiate the `CreateV1InstructionArgs` with parameters such as name, symbol, uri, and others, then create a `CreateV1` instruction struct with the required accounts. The final step demonstrates calling `.instruction(args)` to produce a Solana instruction suitable for submission in a transaction. Dependencies include the Metaplex SDK types and Solana's instruction types. Inputs are account public keys and argument structs; output is a serialized instruction.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/rust/README.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// instruction args\nlet args = CreateV1InstructionArgs {\n    name: String::from(\"pNFT\"),\n    symbol: String::from(\"\"),\n    uri: String::from(\"http://my.pnft\"),\n    seller_fee_basis_points: 500,\n    primary_sale_happened: false,\n    is_mutable: true,\n    token_standard: TokenStandard::ProgrammableNonFungible,\n    collection: None,\n    uses: None,\n    collection_details: None,\n    creators: None,\n    rule_set: None,\n    decimals: Some(0),\n    print_supply: Some(PrintSupply::Zero),\n};\n\n// instruction accounts\nlet create_ix = CreateV1 {\n    metadata,\n    master_edition: Some(master_edition),\n    mint: (mint_pubkey, true),\n    authority: payer_pubkey,\n    payer: payer_pubkey,\n    update_authority: (payer_pubkey, true),\n    system_program: system_program::ID,\n    sysvar_instructions: solana_program::sysvar::instructions::ID,\n    spl_token_program: spl_token::ID,\n};\n\n// creates the instruction\nlet create_ix = create_ix.instruction(args);\n```\n\n----------------------------------------\n\nTITLE: Building TransferV1Cpi Using Builder Pattern - Rust\nDESCRIPTION: Demonstrates using `TransferV1CpiBuilder` for streamlined creation of CPI transfer structs in on-chain instructions. Each account and parameter can be set via chained builder methods. Once set, `.invoke_signed` is called with signer seeds for program execution. Dependencies include the builder utilities from the SDK and solana_program account management. Inputs are account_info references and builder method calls; output is the result of the CPI.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/rust/README.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet cpi_transfer = TransferV1CpiBuilder::new(metadata_program_info)\n    .token(owner_token_info)\n    .token_owner(owner_info)\n    .destination_token(destination_token_info)\n    .destination_owner(destination_info)\n    .mint(mint_info)\n    .metadata(metadata_info)\n    .edition(edition_info)\n    .authority(vault_info)\n    .payer(payer_info)\n    .system_program(system_program_info)\n    .sysvar_instructions(sysvar_instructions_info)\n    .spl_token_program(spl_token_program_info)\n    .spl_ata_program(spl_ata_program_info)\n    .amount(amount);\n\n// performs the CPI\ncpi_transfer.invoke_signed(&[&signer_seeds])\n```\n\n----------------------------------------\n\nTITLE: Building CreateV1 Instruction Using Builder Pattern - Rust\nDESCRIPTION: Illustrates how to build a `CreateV1` instruction using the `CreateV1Builder` for ergonomic initialization. This builder pattern enables chaining methods for each parameter, with both account keys and instruction data included. Dependencies remain the Metaplex SDK and Solana program libraries. Inputs are account public keys, instruction parameters, and builder method calls; output is a finalized instruction struct or Instruction object.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/rust/README.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet create_ix = CreateV1Builder::new()\n    .metadata(metadata)\n    .master_edition(Some(master_edition))\n    .mint(mint_pubkey, true)\n    .authority(payer_pubkey)\n    .payer(payer_pubkey)\n    .update_authority(payer_pubkey, true)\n    .is_mutable(true)\n    .primary_sale_happened(false)\n    .name(String::from(\"pNFT\"))\n    .uri(String::from(\"http://my.pnft\"))\n    .seller_fee_basis_points(500)\n    .token_standard(TokenStandard::ProgrammableNonFungible)\n    .print_supply(PrintSupply::Zero)\n    .instruction();\n```\n\n----------------------------------------\n\nTITLE: Finding and Creating PDAs in Metaplex Token Metadata (Rust)\nDESCRIPTION: Defines helper functions on the Metadata struct for Solana's Metaplex program, allowing developers to deterministically find a PDA (`find_pda`) based on a mint public key and create a PDA (`create_pda`) when the bump value is known. Requires Solana's `Pubkey`, associated error types, and the static `MPL_TOKEN_METADATA_ID`. Input parameters include a mint Pubkey and optionally a bump value; output is either a tuple of the derived PDA and bump or a Result with the PDA. Optimized for both off-chain and on-chain usage.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/rust/README.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nimpl Metadata {\n    pub fn find_pda(mint: Pubkey) -> (solana_program::pubkey::Pubkey, u8) {\n        solana_program::pubkey::Pubkey::find_program_address(\n            &[\n                \"metadata\".as_bytes(),\n                crate::MPL_TOKEN_METADATA_ID.as_ref(),\n                mint.as_ref(),\n            ],\n            &crate::MPL_TOKEN_METADATA_ID,\n        )\n    }\n    pub fn create_pda(\n        mint: Pubkey,\n        bump: u8,\n    ) -> Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError> {\n        solana_program::pubkey::Pubkey::create_program_address(\n            &[\n                \"metadata\".as_bytes(),\n                crate::MPL_TOKEN_METADATA_ID.as_ref(),\n                mint.as_ref(),\n                &[bump],\n            ],\n            &crate::MPL_TOKEN_METADATA_ID,\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking TransferV1 CPI Instruction in On-Chain Context - Rust\nDESCRIPTION: Shows constructing and invoking a `TransferV1Cpi` for performing a CPI transfer on-chain. The example prepares argument and account structs, then calls `.invoke_signed` with signer seeds for authorization. Dependencies are the SDK CPI struct, Solana's account_info and instruction handling. Inputs include all required account_info references and seed arrays; output is the result of the program invocation.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/rust/README.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// instruction args\nlet mut args = TransferV1InstructionArgs {\n    amount,\n    authorization_data: None,\n};\n\n// instruction accounts\nlet cpi_transfer = TransferV1Cpi::new(\n    metadata_program_info,\n    TransferV1CpiAccounts {\n        token: owner_token_info,\n        token_owner: owner_info,\n        destination_token: destination_token_info,\n        destination_owner: destination_info,\n        mint: mint_info,\n        metadata: metadata_info,\n        authority: vault_info,\n        payer: payer_info,\n        system_program: system_program_info,\n        sysvar_instructions: sysvar_instructions_info,\n        spl_token_program: spl_token_program_info,\n        spl_ata_program: spl_ata_program_info,\n        edition: edition_info,\n        token_record: None,\n        destination_token_record: None,\n        authorization_rules: None,\n        authorization_rules_program: None,\n    },\n    args,\n);\n\n// performs the CPI\ncpi_transfer.invoke_signed(&[&signer_seeds])\n```\n\n----------------------------------------\n\nTITLE: Installing mpl-token-metadata via Cargo - Bash\nDESCRIPTION: Demonstrates adding the mpl-token-metadata SDK as a dependency to the current Rust project using Cargo. Requires Cargo to be installed and run from the project's root directory. No additional arguments are needed; this simply brings the library into the project.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/rust/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo add mpl-token-metadata\n```\n\n----------------------------------------\n\nTITLE: Installing Metaplex Token Metadata SDK via NPM (Shell)\nDESCRIPTION: Installs the latest version of the @metaplex-foundation/mpl-token-metadata SDK using npm. This makes the package available in your Node.js project for interacting with Metaplex token metadata. Requires Node.js and npm to be installed. No parameters are required for this basic installation. Output is a new or updated package entry added to your package.json and modules installed in node_modules.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/js/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @metaplex-foundation/mpl-token-metadata --save\n```\n\n----------------------------------------\n\nTITLE: Installing MPL Token Metadata via npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to download and install the `@metaplex-foundation/mpl-token-metadata` library into the current project's dependencies. This step is necessary before the library can be imported and used in JavaScript or TypeScript code.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/js/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @metaplex-foundation/mpl-token-metadata\n```\n\n----------------------------------------\n\nTITLE: Adding Token Metadata Rust Crate via Cargo\nDESCRIPTION: This command uses Cargo, the Rust package manager, to add the `mpl-token-metadata` crate as a dependency to a Rust project. This crate enables Rust developers to interact with the Metaplex Token Metadata Solana program, commonly used within Solana programs or Rust-based tooling.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo add mpl-token-metadata\n```\n\n----------------------------------------\n\nTITLE: Installing Token Metadata TypeScript Package via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@metaplex-foundation/mpl-token-metadata` package. This package provides TypeScript libraries and utilities necessary for interacting with the Metaplex Token Metadata Solana program from JavaScript or TypeScript applications.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @metaplex-foundation/mpl-token-metadata\n```\n\n----------------------------------------\n\nTITLE: Defining CreateV1 Client Instruction Struct - Rust\nDESCRIPTION: Defines the `CreateV1` struct representing client-side instruction accounts for creating metadata. Each field corresponds to a program account or parameter required by the Metaplex Token Metadata program. Some fields, such as 'master_edition' and 'mint', use options or account flags. Dependencies include the Solana program crate and its public key types. Expected input is a set of public keys or keypairs; output is an initialized struct instance. Limitations include the need to supply all non-optional fields.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/rust/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub struct CreateV1 {\n    /// Unallocated metadata account with address as pda of ['metadata', program id, mint id]\n    pub metadata: solana_program::pubkey::Pubkey,\n    /// Unallocated edition account with address as pda of ['metadata', program id, mint, 'edition']\n    pub master_edition: Option<solana_program::pubkey::Pubkey>,\n    /// Mint of token asset\n    pub mint: (solana_program::pubkey::Pubkey, bool),\n    /// Mint authority\n    pub authority: solana_program::pubkey::Pubkey,\n    /// Payer\n    pub payer: solana_program::pubkey::Pubkey,\n    /// Update authority for the metadata account\n    pub update_authority: (solana_program::pubkey::Pubkey, bool),\n    /// System program\n    pub system_program: solana_program::pubkey::Pubkey,\n    /// Instructions sysvar account\n    pub sysvar_instructions: solana_program::pubkey::Pubkey,\n    /// SPL Token program\n    pub spl_token_program: solana_program::pubkey::Pubkey,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransferV1Cpi Struct for On-Chain CPI - Rust\nDESCRIPTION: Defines the `TransferV1Cpi` struct used for cross-program invocations (CPI) within on-chain Solana programs. Expects account_info references for all involved accounts, some optional, plus instruction argument types. Used when other Solana programs must call into Token Metadata. Dependencies include solana_program::account_info and Metaplex SDK types. Must provide references to all required accounts and a fully constructed argument struct.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/rust/README.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub struct TransferV1Cpi<'a> {\n    /// The program to invoke.\n    pub __program: &'a solana_program::account_info::AccountInfo<'a>,\n    /// Token account\n    pub token: &'a solana_program::account_info::AccountInfo<'a>,\n    /// Token account owner\n    pub token_owner: &'a solana_program::account_info::AccountInfo<'a>,\n    /// Destination token account\n    pub destination_token: &'a solana_program::account_info::AccountInfo<'a>,\n    /// Destination token account owner\n    pub destination_owner: &'a solana_program::account_info::AccountInfo<'a>,\n    /// Mint of token asset\n    pub mint: &'a solana_program::account_info::AccountInfo<'a>,\n    /// Metadata (pda of ['metadata', program id, mint id])\n    pub metadata: &'a solana_program::account_info::AccountInfo<'a>,\n    /// Edition of token asset\n    pub edition: Option<&'a solana_program::account_info::AccountInfo<'a>>,\n    /// Owner token record account\n    pub token_record: Option<&'a solana_program::account_info::AccountInfo<'a>>,\n    /// Destination token record account\n    pub destination_token_record: Option<&'a solana_program::account_info::AccountInfo<'a>>,\n    /// Transfer authority (token owner or delegate)\n    pub authority: &'a solana_program::account_info::AccountInfo<'a>,\n    /// Payer\n    pub payer: &'a solana_program::account_info::AccountInfo<'a>,\n    /// System Program\n    pub system_program: &'a solana_program::account_info::AccountInfo<'a>,\n    /// Instructions sysvar account\n    pub sysvar_instructions: &'a solana_program::account_info::AccountInfo<'a>,\n    /// SPL Token Program\n    pub spl_token_program: &'a solana_program::account_info::AccountInfo<'a>,\n    /// SPL Associated Token Account program\n    pub spl_ata_program: &'a solana_program::account_info::AccountInfo<'a>,\n    /// Token Authorization Rules Program\n    pub authorization_rules_program: Option<&'a solana_program::account_info::AccountInfo<'a>>,\n    /// Token Authorization Rules account\n    pub authorization_rules: Option<&'a solana_program::account_info::AccountInfo<'a>>,\n    /// The arguments for the instruction.\n    pub __args: TransferV1InstructionArgs,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the TokenStandard Enum in Rust\nDESCRIPTION: This Rust code defines the `TokenStandard` enum within the Metaplex Token Metadata program. It enumerates different types of tokens managed by the program, including the newly added `ProgrammableNonFungible` variant, which represents NFTs with customizable lifecycle behavior (like transfers and updates) governed by rule sets.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub enum TokenStandard {\n    /// This is a master edition.\n    NonFungible,\n    /// A token with metadata that can also have attributes.\n    FungibleAsset,\n    /// A token with simple metadata.\n    Fungible,\n    /// This is a limited edition.\n    NonFungibleEdition,\n    /// [NEW] An NFT with customizable behaviour for lifecycle events\n    /// (e.g. transfers, updates, etc.).\n    ProgrammableNonFungible,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unified Metadata Instructions Enum - Token Metadata - Rust\nDESCRIPTION: Defines the core MetadataInstruction enum, encompassing all major actions (Burn, Create, Delegate, etc.) users can perform on assets (NFTs, programmable NFTs, fungibles) in the program. Each enum variant takes an associated *Args struct, supporting versioning and future extension. Required dependencies include knowledge of the involved Args structs, and the code is central to the program's instruction handling. The design ensures operations for any asset class are addressed uniformly. Inputs are instruction calls mapped to these variants; outputs are processed instructions. Limitation: only the enum is defined here, not the execution logic.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub enum MetadataInstruction {\n    ..,\n    // Closes the accounts of an asset\n    Burn(BurnArgs),\n    // Create the metadata and associated accounts\n    Create(CreateArgs),\n    // Create a delegate\n    Delegate(DelegateArgs),\n    // Change the asset type of an asset\n    Migrate(MigrateArgs),\n    // Locks a token\n    Lock(LockArgs),\n    // Mint a token\n    Mint(MintArgs),\n    // Mint copies of a fungible asset\n    Print(PrintArgs),\n    // Revokes a delegate\n    Revoke(RevokeArgs),\n    // Transfer an asset\n    Transfer(TransferArgs),\n    // Unlocks a token\n    Unlock(LockArgs),\n    // Updates the metadata of an asset\n    Update(UpdateArgs),\n    // Authorizes the use of a token\n    Use(UseArgs),\n    // Verifies creator/collection for an asset\n    Verify(VerificationArgs),\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the TokenRecord Struct in Rust\nDESCRIPTION: Defines the Rust struct `TokenRecord` used in the Metaplex Token Metadata program. This struct holds the state (`TokenState`), optional delegate information (`delegate`, `delegate_role`), and potential locked transfer address (`locked_transfer`) for a specific token account, facilitating token-level delegation. It's a PDA derived using the token account ID.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npub struct TokenRecord {\n    pub key: Key,\n    pub bump: u8,\n    pub state: TokenState,\n    pub rule_set_revision: Option<u64>,\n    pub delegate: Option<Pubkey>,\n    pub delegate_role: Option<TokenDelegateRole>,\n    pub locked_transfer: Option<Pubkey>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the MetadataDelegateRecord Struct in Rust\nDESCRIPTION: Specifies the Rust struct `MetadataDelegateRecord` used within the Metaplex Token Metadata program. This structure represents a metadata-level delegate, storing the associated mint, the delegate's public key, and the update authority public key. It facilitates delegation for metadata operations like collection management, updates, and usage tracking. It's a PDA derived using mint, role, update authority, and delegate ID.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npub struct MetadataDelegateRecord {\n    pub key: Key,\n    pub bump: u8,\n    pub mint: Pubkey,\n    pub delegate: Pubkey,\n    pub update_authority: Pubkey,\n}\n```\n\n----------------------------------------\n\nTITLE: Omitting Optional Accounts in MintInstructionAccounts - Token Metadata JS SDK - JavaScript\nDESCRIPTION: Demonstrates how to omit an optional account (e.g., masterEdition) in the MintInstructionAccounts object by simply not including it in the object. The SDK sets the Token Metadata program ID as a stand-in for omitted accounts, preserving position and clarity for the program. This maintains compatibility when minting assets that do not require specific accounts. Inputs remain public keys for present fields; limitation: must rely on the SDK's internal logic to substitute the not-set-value.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mintAccounts: MintInstructionAccounts = {\n    token,\n    tokenOwner,\n    metadata,\n    mint,\n    payer,\n    ...\n};\n\n```\n\n----------------------------------------\n\nTITLE: Building Rust BPF Program with Cargo - Bash\nDESCRIPTION: Executes the Rust BPF build command in a specific program directory. This builds the Solana BPF-compatible shared object required to deploy smart contracts for the Metaplex Token Metadata and related programs. Requires Rust, Solana toolchains, and Cargo to be installed. The primary input is the Rust Cargo project; output is a .so file in the target/deploy directory. Run this inside either the mpl-token-auth-rules or rooster project directories as instructed.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo build-bpf\n```\n\n----------------------------------------\n\nTITLE: Enforcing Accounts Relative Position in Mint Instruction - Token Metadata JS SDK - JavaScript\nDESCRIPTION: Lists the expected positional order of accounts for Token Metadata mint instructions within the JavaScript SDK. This order ensures correct transaction construction and program logic, as some accounts may be optional depending on the asset class. The array is for documentation and developer reference; the input is the account object, output is a correctly formed instruction. Limitation: strictly follows positional requirements—developer must handle omitted accounts as described elsewhere.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Accounts relative position:\n0. token\n1. tokenOwner\n2. metadata\n3. masterEdition\n4. mint\n5. payer\n...\n\n```\n\n----------------------------------------\n\nTITLE: Building the Token Metadata Solana Program via pnpm\nDESCRIPTION: Executed from the root directory, this command runs the `programs:build` script defined in the project's `package.json`. This script compiles the Rust source code of the Token Metadata Solana program, placing the resulting binary in the `<ROOT>/programs/.bin` directory.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm programs:build\n```\n\n----------------------------------------\n\nTITLE: Building Metaplex Token Metadata with Cargo (Rust, Shell)\nDESCRIPTION: This shell snippet uses Cargo to compile the Solana BPF program and output the results to a specified directory for test programs. Requires Rust, Cargo, and the appropriate Solana toolchain installed. The main input is the Cargo project in the root directory, and it outputs BPF binaries to '../../test-programs/'.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build-bpf --bpf-out-dir ../../test-programs/\n```\n\n----------------------------------------\n\nTITLE: Starting Local Solana Validator for TypeScript Tests via pnpm\nDESCRIPTION: Executed from the root directory, this command runs the `validator` script, likely using the Amman framework, to start a local Solana test validator. This local network is required for running the TypeScript integration tests against the deployed program.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm validator\n```\n\n----------------------------------------\n\nTITLE: Building and Running TypeScript Client Tests via pnpm\nDESCRIPTION: Executed within the `<ROOT>/clients/js` directory after dependencies are installed, this command first runs the `build` script (e.g., compiling TypeScript) and then, upon success, runs the `test` script to execute the TypeScript test suite against the local validator.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npnpm build && pnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Rust SDK Tests via pnpm (Bash)\nDESCRIPTION: Executes the Rust client test suite associated with the project using pnpm. Requires prior installation of pnpm dependencies. No parameters are needed; expected output is the result of test execution for any Rust clients. Useful for validating integration and correctness of Rust-side functionality.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/rust/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm clients:rust:test\n```\n\n----------------------------------------\n\nTITLE: Testing Metaplex Token Metadata (BPF, Rust, Shell)\nDESCRIPTION: This shell snippet runs tests for the Solana BPF program using Cargo, outputting test artifacts to the '../../test-programs/' directory. Assumes the program has been built already and requires Rust, Cargo, and Solana BPF toolchain. The input is the on-chain Rust codebase, and the output is the result of running all integration and unit tests for the BPF program.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo test-bpf --bpf-out-dir ../../test-programs/\n```\n\n----------------------------------------\n\nTITLE: Running BPF Tests for Metaplex Token Metadata - Bash\nDESCRIPTION: Runs tests for the Token Metadata program using Solana's BPF testing tools. Assumes prior deployment of required .so files to the appropriate target/deploy directories. Requires that Rust, Cargo, and Solana toolchains are installed and configured. Executes all BPF tests defined in the Cargo project, which validates program logic and interactions on a local test ledger. Should be run from within the token-metadata/program directory.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncargo test-bpf\n```\n\n----------------------------------------\n\nTITLE: Running BPF Program Tests via pnpm\nDESCRIPTION: Executed from the root directory, this command runs the `programs:test` script defined in `package.json`. This script executes the BPF (Berkeley Packet Filter) tests, which specifically target the on-chain program logic written in Rust.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm programs:test\n```\n\n----------------------------------------\n\nTITLE: Building and Running JavaScript/TypeScript Tests - Bash\nDESCRIPTION: Builds the JS/TS portion of the repo and executes the test suite. Requires all dependencies to be installed and the Amman validator to be running in the background. Ensures the compiled JavaScript/TypeScript code is up-to-date before invoking the test runner, which validates functional correctness and integration with Solana programs.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn build && yarn test\n```\n\n----------------------------------------\n\nTITLE: Starting Amman Blockchain Testing Environment (Yarn, Shell)\nDESCRIPTION: This shell command starts the Amman Solana testing environment using Yarn from the '../js' folder. Amman must be installed as a dev dependency. The input is a project directory with Amman configured; the result is a running test validator environment on the local machine.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn amman:start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TypeScript Client Tests via pnpm\nDESCRIPTION: Executed within the `<ROOT>/clients/js` directory, this command uses pnpm to install the dependencies specific to the TypeScript client library and its tests. This step is necessary after starting the local validator and before running the client tests.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building Token Metadata Program via Shell Script - Bash\nDESCRIPTION: Compiles the Token Metadata program and moves the resulting shared object to the appropriate deployment directory. This step is essential for making the program available for local validator tests, especially for JavaScript/TypeScript workflows that expect the .so file in test-programs/. This step requires a Unix-like shell, bash, and necessary build dependencies.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh token-metadata\n```\n\n----------------------------------------\n\nTITLE: Building and Testing the JavaScript Interface of Token Metadata (Yarn, Shell)\nDESCRIPTION: This shell command compiles TypeScript source and then runs all JavaScript-based integration tests using Yarn. Prerequisites include Yarn, all dependencies installed, and a previously started Amman environment. The input is the TypeScript/JavaScript project, and the output is the test results and compiled code.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn build && yarn test\n```\n\n----------------------------------------\n\nTITLE: Starting Amman Local Validator for JS/TS Testing - Bash\nDESCRIPTION: Launches the Amman local Solana validator, which is essential for running integration and end-to-end tests with JavaScript/TypeScript code against local Solana programs. The command initializes a test ledger and deploys required program .so files as defined in the Amman configuration. Must be run from the js directory in the repository. The Amman output includes information about loaded programs, the test validator, and mock servers.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nyarn amman:start\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies for Token Metadata Tests (Yarn, Shell)\nDESCRIPTION: This shell command installs all JavaScript dependencies required for integration testing through Yarn in the '../js' folder. Requires Yarn and an internet connection. No keys or parameters are needed; the output is a properly set up node_modules directory for running tests and scripts.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for Building via pnpm\nDESCRIPTION: Executed from the root directory of the repository, this command uses pnpm (Performant npm) to install all project dependencies defined in the `package.json` file. This is a necessary first step before building the Solana program.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript/TypeScript Project Dependencies with Yarn - Bash\nDESCRIPTION: Installs project dependencies for the JavaScript/TypeScript portion of the Token Metadata repository. Runs the Yarn package manager, which reads the project's package.json and node_modules to set up the environment for builds and tests. This is a prerequisite for running Amman-based test validators and automated JavaScript/TypeScript test suites.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/program/ProgrammableNFTGuide.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm (Bash)\nDESCRIPTION: Installs all Node.js dependencies for the project using pnpm from the repository's root directory. Required before running any SDK or test commands. There are no required parameters and this command must be run in a shell environment with pnpm installed. Outputs the results of fetching and linking the modules.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/rust/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pnpm (Shell)\nDESCRIPTION: Installs all necessary project dependencies as defined in the package.json and pnpm-lock.yaml files using the pnpm package manager. This is the first step after cloning the repository to set up the development environment. Requires pnpm to be installed globally.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/js/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Building, Testing, and Linting the JS Client using pnpm (Shell)\nDESCRIPTION: Provides a set of shell commands executed via pnpm to manage the development lifecycle of the JavaScript client. Includes commands for building the project (`pnpm build`), running all tests (`pnpm build && pnpm test`), running specific tests, and fixing linting/formatting issues (`pnpm lint:fix`, `pnpm format:fix`). Building is often a prerequisite for testing.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/js/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Build the client.\npnpm build\n\n# Test the client (requires building first).\npnpm build && pnpm test\n\n# Test a specific file or set of files.\npnpm build && pnpm test test/somefile.test.js\npnpm build && pnpm test test/somePattern*\n\n# Lint and/or format the client.\npnpm lint:fix\npnpm format:fix\n```\n\n----------------------------------------\n\nTITLE: Generating Metaplex Token Metadata SDK API with Yarn (Shell)\nDESCRIPTION: Describes how to regenerate the API from updated Rust contracts by running a Yarn script. This is necessary when underlying contract logic has changed and you need to update the SDK code accordingly. Requires Node.js and Yarn to be installed. Input: runs the 'api:gen' script; Output: refreshed SDK API files. Should be followed by updating wrapper code and tests.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/js/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn api:gen\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Deployment Settings for JS Docs\nDESCRIPTION: Lists the required Vercel project settings for deploying the auto-generated JavaScript client documentation. Specifies the build command (`pnpm run build:docs`), output directory (`docs`), installation command (`pnpm install`), and explicitly states no development command is needed. These settings ensure Vercel can correctly build and deploy the documentation site.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/clients/js/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- Build Command: `pnpm run build:docs`\n- Output Directory: `docs`\n- Install Command: `pnpm install`\n- Development Command: _None_\n```\n\n----------------------------------------\n\nTITLE: Installing Both New and Deprecated APIs for Metaplex Token Metadata SDK (Shell)\nDESCRIPTION: Installs the ~2.0 version of the mpl-token-metadata SDK to provide both new and deprecated APIs simultaneously. Useful for transitioning codebases that need access to both API versions. Requires npm and Node.js. Outputs both APIs within the package, allowing explicit imports of deprecated features. Ensure compatibility with your codebase.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/js/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @metaplex-foundation/mpl-token-metadata@~2.0 --save\n```\n\n----------------------------------------\n\nTITLE: Installing Deprecated Metaplex Token Metadata SDK via NPM (Shell)\nDESCRIPTION: Installs a legacy version (^1.2) of the @metaplex-foundation/mpl-token-metadata SDK by specifying the deprecated version tag. This is useful for projects that depend on the older API instead of the latest auto-generated version. Requires npm and Node.js. Outputs the older SDK in node_modules with your project able to access deprecated methods. Constraints: the legacy API may lack new features and may be unsupported.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/js/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @metaplex-foundation/mpl-token-metadata@^1.2 --save\n```\n\n----------------------------------------\n\nTITLE: Importing Deprecated API from Metaplex Token Metadata SDK (TypeScript)\nDESCRIPTION: Demonstrates how to explicitly import the deprecated API from the mpl-token-metadata SDK using TypeScript. Requires the ~2.0 SDK version to be installed. The 'deprecated' module provides legacy functions. Input: none directly, but the SDK must be installed as a dependency. Output: imported deprecated functionalities available in your TypeScript code.\nSOURCE: https://github.com/metaplex-foundation/mpl-token-metadata/blob/main/programs/token-metadata/js/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deprecated } from \"@metaplex-foundation/mpl-token-metadata\";\n```"
  }
]