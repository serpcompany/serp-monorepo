[
  {
    "owner": "salvo-rs",
    "repo": "salvo",
    "content": "TITLE: Using ToResponses for Complete Response Definitions\nDESCRIPTION: Demonstrates using a type that implements ToResponses to define all responses for an endpoint in a single implementation.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nresponses(MyResponse)\n```\n\n----------------------------------------\n\nTITLE: Multiple Content Types in Response Definition\nDESCRIPTION: Shows how to define a response that supports multiple content types (JSON and XML) with the same response body type.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nresponses(\n    (status_code = 200, description = \"Success response\", body = Pet, content_type = [\"application/json\", \"text/xml\"])\n)\n```\n\n----------------------------------------\n\nTITLE: Pet Struct with Documentation and Examples\nDESCRIPTION: Example of a Pet struct with field-level documentation that generates into OpenAPI descriptions, along with an object-level example for the schema.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::ToSchema;\n/// This is a pet.\n#[derive(ToSchema)]\n#[salvo(schema(example = json!({\"name\": \"bob the cat\", \"id\": 0})))]\nstruct Pet {\n    /// Unique id of a pet.\n    id: u64,\n    /// Name of a pet.\n    name: String,\n    /// Age of a pet if known.\n    age: Option<i32>,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAPI with Salvo in Rust\nDESCRIPTION: A complete example showing how to implement OpenAPI documentation with Salvo framework. It demonstrates creating API endpoints with generic types, generating OpenAPI documentation, and setting up a Swagger UI for API exploration.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize, ToSchema, Debug)]\nstruct MyObject<T: ToSchema + std::fmt::Debug> {\n    value: T,\n}\n\n#[endpoint]\nasync fn use_string(body: JsonBody<MyObject<String>>) -> String {\n    format!(\"{:?}\", body)\n}\n#[endpoint]\nasync fn use_i32(body: JsonBody<MyObject<i32>>) -> String {\n    format!(\"{:?}\", body)\n}\n#[endpoint]\nasync fn use_u64(body: JsonBody<MyObject<u64>>) -> String {\n    format!(\"{:?}\", body)\n}\n\n#[tokio::main]\nasync fn main() {\n    tracing_subscriber::fmt().init();\n\n    let router = Router::new()\n        .push(Router::with_path(\"i32\").post(use_i32))\n        .push(Router::with_path(\"u64\").post(use_u64))\n        .push(Router::with_path(\"string\").post(use_string));\n\n    let doc = OpenApi::new(\"test api\", \"0.0.1\").merge_router(&router);\n\n    let router = router\n        .push(doc.into_router(\"/api-doc/openapi.json\"))\n        .push(SwaggerUi::new(\"/api-doc/openapi.json\").into_router(\"swagger-ui\"));\n\n    let acceptor = TcpListener::new(\"127.0.0.1:5800\").bind().await;\n    Server::new(acceptor).serve(router).await;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenAPI Support in Salvo using Cargo.toml\nDESCRIPTION: This snippet shows how to enable OpenAPI support in Salvo by adding the 'oapi' feature to the Salvo dependency in Cargo.toml.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi-macros/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"oapi\"] }\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Parameter Validation Attributes in Rust\nDESCRIPTION: Shows how to add validation constraints to parameters using Salvo attributes. Includes numeric constraints, string length limits, pattern matching, and array size restrictions.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(salvo_oapi::ToParameters, serde::Deserialize)]\nstruct Item {\n    #[salvo(parameter(maximum = 10, minimum = 5, multiple_of = 2.5))]\n    id: i32,\n    #[salvo(parameter(max_length = 10, min_length = 5, pattern = \"[a-z]*\"))]\n    value: String,\n    #[salvo(parameter(max_items = 5, min_items = 1))]\n    items: Vec<String>,\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Attributes in Salvo\nDESCRIPTION: Example of using validation attributes in Salvo schema for numeric ranges, string lengths, patterns, and collection sizes.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(salvo_oapi::ToSchema, serde::Deserialize)]\nstruct Item {\n    #[salvo(schema(maximum = 10, minimum = 5, multiple_of = 2.5))]\n    id: i32,\n    #[salvo(schema(max_length = 10, min_length = 5, pattern = \"[a-z]*\"))]\n    value: String,\n    #[salvo(schema(max_items = 5, min_items = 1))]\n    items: Vec<String>,\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Schema Implementation with schema_with in Rust\nDESCRIPTION: Demonstrates how to manually implement a custom schema for a field using the schema_with attribute. Creates a custom email type with specific format and description.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo_oapi::schema::Object;\nfn custom_type() -> Object {\n    Object::new()\n        .schema_type(salvo_oapi::BasicType::String)\n        .format(salvo_oapi::SchemaFormat::Custom(\n            \"email\".to_string(),\n        ))\n        .description(\"this is the description\")\n}\n\n#[derive(salvo_oapi::ToParameters, serde::Deserialize)]\n#[salvo(parameters(default_parameter_in = Query))]\nstruct Query {\n    #[salvo(parameter(schema_with = custom_type))]\n    email: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Parameter Extraction in Salvo Handlers\nDESCRIPTION: Shows how to automatically extract and inject request data as function parameters in handler functions, eliminating the need for manual extraction code.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[handler]\nasync fn edit<'a>(good_man: GoodMan<'a>) {\n    res.render(Json(good_man));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters with Tuples in Salvo OpenAPI\nDESCRIPTION: Comprehensive example of defining API parameters using tuples format, including various parameter attributes like location, type, description, style, validation constraints, and examples.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nparameters(\n    (\"limit\" = i32, Query),\n    (\"x-custom-header\" = String, Header, description = \"Custom header\"),\n    (\"id\" = String, Path, deprecated, description = \"Pet database id\"),\n    (\"name\", Path, deprecated, description = \"Pet name\"),\n    (\n        \"value\" = inline(Option<[String]>),\n        Query,\n        description = \"Value description\",\n        style = Form,\n        allow_reserved,\n        deprecated,\n        explode,\n        example = json!([\"Value\"])),\n        max_length = 10,\n        min_items = 1\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ToResponse for a Named Struct in Rust\nDESCRIPTION: Uses the ToResponse derive macro on a struct to create a response with an inlined schema. The response includes a custom description overriding the doc comment.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_response.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(ToResponse)]\n#[salvo(response(description = \"Person response returns single Person entity\"))]\nstruct Person {\n    name: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Combining ToParameters with Tuple Parameters\nDESCRIPTION: Demonstrates combining reusable parameter types with inline parameter definitions in a single parameters declaration.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nparameters(\n    MyParameters1,\n    MyParameters2,\n    (\"id\" = String, Path, deprecated, description = \"Pet database id\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Request Data in Salvo\nDESCRIPTION: Shows how to extract and deserialize request data into custom types in Salvo. It defines a struct with custom extraction rules and demonstrates two ways to use it in handlers.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.zh.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize, Extractible, Debug)]\n#[salvo(extract(default_source(from = \"body\")))]\nstruct GoodMan<'a> {\n    #[salvo(extract(source(from = \"param\")))]\n    id: i64,\n    username: &'a str,\n    first_name: String,\n    last_name: String,\n}\n\n#[handler]\nasync fn edit(req: &mut Request) {\n    let good_man: GoodMan<'_> = req.extract().await.unwrap();\n}\n\n#[handler]\nasync fn edit<'a>(good_man: GoodMan<'a>) {\n    res.render(Json(good_man));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Path Regex in Routes\nDESCRIPTION: Demonstrates using a registered custom regex pattern in route definitions, making path matching more concise and readable.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nRouter::with_path(\"{id:guid}\").get(index)\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Schemes in Salvo OpenAPI\nDESCRIPTION: Shows how to add security schemes when creating an OpenAPI object. This example demonstrates setting up HTTP Bearer authentication.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo_oapi::security::{Http, HttpAuthScheme};\nuse salvo_oapi::{OpenApi, SecurityScheme};\n\n#[tokio::main]\nasync fn main() {\n    let doc = OpenApi::new(\"test\", \"0.1\")\n        .add_security_scheme(\n            \"bearer\",\n            SecurityScheme::Http(Http::new(HttpAuthScheme::Bearer).bearer_format(\"JSON\")));\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Handling in Salvo\nDESCRIPTION: Example of handling file uploads in Salvo, including retrieving the uploaded file from the request and saving it to the filesystem asynchronously.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[handler]\nasync fn upload(req: &mut Request, res: &mut Response) {\n    let file = req.file(\"file\").await;\n    if let Some(file) = file {\n        let dest = format!(\"temp/{}\", file.name().unwrap_or_else(|| \"file\".into()));\n        if let Err(e) = tokio::fs::copy(&file.path, Path::new(&dest)).await {\n            res.status_code(StatusCode::INTERNAL_SERVER_ERROR);\n        } else {\n            res.render(\"Ok\");\n        }\n    } else {\n        res.status_code(StatusCode::BAD_REQUEST);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Middleware in Salvo\nDESCRIPTION: Demonstrates how to create a basic middleware in Salvo that adds a custom header to the response. The middleware is then added to the router.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.zh.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo::http::header::{self, HeaderValue};\nuse salvo::prelude::*;\n\n#[handler]\nasync fn add_header(res: &mut Response) {\n    res.headers_mut()\n        .insert(header::SERVER, HeaderValue::from_static(\"Salvo\"));\n}\n\n// Adding middleware to router\nRouter::new().hoop(add_header).get(hello)\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Salvo\nDESCRIPTION: Demonstrates how to handle file uploads in Salvo using the Request object. It checks for the presence of a file, copies it to a destination, and returns an appropriate response.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.zh.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[handler]\nasync fn upload(req: &mut Request, res: &mut Response) {\n    let file = req.file(\"file\").await;\n    if let Some(file) = file {\n        let dest = format!(\"temp/{}\", file.name().unwrap_or_else(|| \"file\".into()));\n        if let Err(e) = std::fs::copy(&file.path, Path::new(&dest)) {\n            res.status_code(StatusCode::INTERNAL_SERVER_ERROR);\n        } else {\n            res.render(\"Ok\");\n        }\n    } else {\n        res.status_code(StatusCode::BAD_REQUEST);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Support in Salvo Using Cargo.toml\nDESCRIPTION: This code snippet shows how to enable OpenTelemetry support in Salvo by adding the 'otel' feature in the Cargo.toml dependency configuration. The asterisk in the version field indicates using the latest version available.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/otel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"otel\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining Extractible Types for Request Data in Salvo\nDESCRIPTION: Shows how to define a struct with the Extractible derive macro to easily extract and validate data from various request sources like path parameters and body.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize, Extractible, Debug)]\n/// Get the data field value from the body by default.\n#[salvo(extract(default_source(from = \"body\")))]\nstruct GoodMan<'a> {\n    /// The id number is obtained from the request path parameter, and the data is automatically parsed as i64 type.\n    #[salvo(extract(source(from = \"param\")))]\n    id: i64,\n    /// Reference types can be used to avoid memory copying.\n    username: &'a str,\n    first_name: String,\n    last_name: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Routes in Salvo\nDESCRIPTION: Shows how to set up nested routes in Salvo, including routes that require authentication and those that don't. It demonstrates the flexibility of Salvo's routing system.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.zh.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nRouter::new()\n    .push(\n        Router::with_path(\"articles\")\n            .get(list_articles)\n            .push(Router::with_path(\"{id}\").get(show_article)),\n    )\n    .push(\n        Router::with_path(\"articles\")\n            .hoop(auth_check)\n            .push(Router::with_path(\"{id}\").patch(edit_article).delete(delete_article)),\n    );\n```\n\n----------------------------------------\n\nTITLE: Enabling Rate Limiter Feature in Salvo\nDESCRIPTION: Shows how to enable the rate-limiter feature in Salvo by specifying it in the project's Cargo.toml dependencies.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/rate-limiter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"rate-limiter\"] }\n```\n\n----------------------------------------\n\nTITLE: Enabling Salvo Proxy Middleware in Cargo.toml\nDESCRIPTION: This snippet shows how to enable the proxy feature for Salvo in a Rust project's Cargo.toml file. It demonstrates adding Salvo as a dependency with the proxy feature enabled.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/proxy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"proxy\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware in Salvo\nDESCRIPTION: Example of creating a simple middleware function in Salvo that adds a Server header to the response. This demonstrates Salvo's approach to middleware as regular handlers.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo::http::header::{self, HeaderValue};\nuse salvo::prelude::*;\n\n#[handler]\nasync fn add_header(res: &mut Response) {\n    res.headers_mut()\n        .insert(header::SERVER, HeaderValue::from_static(\"Salvo\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger with Docker for OpenTelemetry Collection\nDESCRIPTION: Docker command to start Jaeger with its UI and OTLP collector configured to receive telemetry data. The container exposes port 16686 for the UI and port 4317 for the OTLP collector with collector explicitly enabled.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/logging-otlp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 16686:16686 -p 4317:4317 -e COLLECTOR_OTLP_ENABLED=true jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Salvo Handlers with Craft Macro in Rust\nDESCRIPTION: Demonstrates how to use the #[craft] attribute macro to convert struct methods into Salvo web handlers. Shows implementation with different receiver types (&self, Arc<Self>) and query parameter handling. The example includes a simple web service with multiple endpoints.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/craft-macros/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo::oapi::extract::*;\nuse salvo::prelude::*;\nuse salvo_craft_macros::craft;\nuse std::sync::Arc;\n\n#[tokio::main]\nasync fn main() {\n    let service = Arc::new(Service::new(1));\n    let router = Router::new()\n        .push(Router::with_path(\"add1\").get(service.add1()))\n        .push(Router::with_path(\"add2\").get(service.add2()))\n        .push(Router::with_path(\"add3\").get(Service::add3()));\n    let acceptor = TcpListener::new(\"127.0.0.1:5800\").bind().await;\n    Server::new(acceptor).serve(router).await;\n}\n\n#[derive(Clone)]\npub struct Service {\n    state: i64,\n}\n\n#[craft]\nimpl Service {\n    fn new(state: i64) -> Self {\n        Self { state }\n    }\n    /// doc line 1\n    /// doc line 2\n    #[craft(handler)]\n    fn add1(&self, left: QueryParam<i64>, right: QueryParam<i64>) -> String {\n        (self.state + *left + *right).to_string()\n    }\n    /// doc line 3\n    /// doc line 4\n    #[craft(handler)]\n    pub(crate) fn add2(self: ::std::sync::Arc<Self>, left: QueryParam<i64>, right: QueryParam<i64>) -> String {\n        (self.state + *left + *right).to_string()\n    }\n    /// doc line 5\n    /// doc line 6\n    #[craft(handler)]\n    pub fn add3(left: QueryParam<i64>, right: QueryParam<i64>) -> String {\n        (*left + *right).to_string()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ToSchema Derive Example for Struct with Documentation\nDESCRIPTION: Shows how to apply the ToSchema derive macro to a struct with doc comments that will be used as descriptions in the OpenAPI documentation. The example demonstrates documenting both the struct itself and its fields.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// This is a pet\n#[derive(salvo_oapi::ToSchema)]\nstruct Pet {\n    /// Name for your pet\n    name: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated GET Endpoint for Pet Retrieval\nDESCRIPTION: Example of a deprecated endpoint for retrieving pet information by ID. Shows path parameter handling and response configuration.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n#[endpoint(\n    responses(\n        (status_code = 200, description = \"Pet found from database\")\n    ),\n    parameters(\n        (\"id\", description = \"Pet id\"),\n    )\n)]\n#[deprecated]\nasync fn get_pet_by_id(id: PathParam<i32>, res: &mut Response) {\n    let json = json!({ \"pet\": format!(\"{:?}\", id.into_inner())});\n    res.render(Json(json))\n}\n```\n\n----------------------------------------\n\nTITLE: Handling POST Request with Custom Headers in Salvo\nDESCRIPTION: Endpoint configuration for storing a pet with CSRF token validation. Includes response headers and body schema definition.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n#[salvo_oapi::endpoint(\n   request_body = Pet,\n   responses(\n        (status_code = 200, description = \"Pet stored successfully\", body = Pet,\n            headers(\n                (\"x-cache-len\", description = \"Cache length\")\n            )\n        ),\n   ),\n   parameters(\n     (\"x-csrf-token\", Header, description = \"Current csrf token of user\"),\n   )\n)]\nfn post_pet(res: &mut Response) {\n    res.render(Json(Pet {\n        id: 4,\n        name: \"bob the cat\".to_string(),\n    }));\n}\n```\n\n----------------------------------------\n\nTITLE: Value Type Override with Integer\nDESCRIPTION: Example showing how to override a String type with i64 using the value_type attribute.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(ToParameters, serde::Deserialize)]\n#[salvo(parameters(default_parameter_in = Query))]\nstruct Filter {\n    #[salvo(parameter(value_type = i64))]\n    id: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAPI Support in Salvo\nDESCRIPTION: Demonstrates how to add OpenAPI support to a Salvo application. It defines routes, generates OpenAPI documentation, and sets up a Swagger UI for API exploration.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.zh.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Serialize, Deserialize, ToSchema, Debug)]\nstruct MyObject<T: ToSchema + std::fmt::Debug> {\n    value: T,\n}\n\n#[endpoint]\nasync fn use_string(body: JsonBody<MyObject<String>>) -> String {\n    format!(\"{:?}\", body)\n}\n#[endpoint]\nasync fn use_i32(body: JsonBody<MyObject<i32>>) -> String {\n    format!(\"{:?}\", body)\n}\n#[endpoint]\nasync fn use_u64(body: JsonBody<MyObject<u64>>) -> String {\n    format!(\"{:?}\", body)\n}\n\n#[tokio::main]\nasync fn main() {\n    tracing_subscriber::fmt().init();\n\n    let router = Router::new()\n        .push(Router::with_path(\"i32\").post(use_i32))\n        .push(Router::with_path(\"u64\").post(use_u64))\n        .push(Router::with_path(\"string\").post(use_string));\n\n    let doc = OpenApi::new(\"test api\", \"0.0.1\").merge_router(&router);\n\n    let router = router\n        .unshift(doc.into_router(\"/api-doc/openapi.json\"))\n        .unshift(SwaggerUi::new(\"/api-doc/openapi.json\").into_router(\"swagger-ui\"));\n\n    let acceptor = TcpListener::new(\"127.0.0.1:5800\").bind().await;\n    Server::new(acceptor).serve(router).await;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Static Asset Serving in Salvo via Cargo.toml\nDESCRIPTION: Configuration snippet showing how to enable the serve-static feature in a Salvo project using Cargo.toml dependencies.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/serve-static/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"serve-static\"] }\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Removes the single build dependency and copies all configuration files for full control over the build setup.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/proxy-react-app/react-app/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Combined Public and Authenticated Routing in Salvo\nDESCRIPTION: Demonstrates combining both public and authenticated routes for the same resource in a single router structure.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nRouter::new()\n    .push(\n        Router::with_path(\"articles\")\n            .get(list_articles)\n            .push(Router::with_path(\"{id}\").get(show_article)),\n    )\n    .push(\n        Router::with_path(\"articles\")\n            .hoop(auth_check)\n            .push(Router::with_path(\"{id}\").patch(edit_article).delete(delete_article)),\n    );\n```\n\n----------------------------------------\n\nTITLE: Running Salvo Todos API Server\nDESCRIPTION: Command to start the Salvo Todos API server. After running, the API documentation will be available at /api-doc/openapi.json and the main application at the root endpoint.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/oapi-todos/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Numeric Enum Schema with Examples and Defaults\nDESCRIPTION: Example demonstrating how to create an enum with numeric values using the repr attribute, along with adding example and default values to the generated schema.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::ToSchema;\n#[derive(ToSchema)]\n#[repr(u8)]\n#[salvo(schema(default = default_value, example = 2))]\nenum Mode {\n    One = 1,\n    Two,\n }\n\nfn default_value() -> u8 {\n    1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Enum Response with Multiple Content Types in Rust\nDESCRIPTION: Implements ToResponse on an enum with variants using content attributes to define multiple response content schemas. Shows how to add examples and schema inlining for variants.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_response.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(salvo_oapi::ToSchema)]\nstruct Admin {\n    name: String,\n}\n#[derive(salvo_oapi::ToSchema)]\nstruct Admin2 {\n    name: String,\n    id: i32,\n}\n\n#[derive(salvo_oapi::ToResponse)]\nenum Person {\n    #[salvo(\n        response(examples(\n            (\"Person1\" = (value = json!({\"name\": \"name1\"}))),\n            (\"Person2\" = (value = json!({\"name\": \"name2\"})))\n        ))\n    )]\n    Admin(#[salvo(content(\"application/vnd-custom-v1+json\"))] Admin),\n\n    #[salvo(response(example = json!({\"name\": \"name3\", \"id\": 1})))]\n    Admin2(#[salvo(content(\"application/vnd-custom-v2+json\"))] #[salvo(schema(inline))] Admin2),\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToParameters Type for Parameter Definition\nDESCRIPTION: Shows how to use a type that implements ToParameters to define endpoint parameters in a reusable way.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nparameters(MyParameters)\n```\n\n----------------------------------------\n\nTITLE: Refresh Database Migrations\nDESCRIPTION: Command to rollback all migrations and then reapply them in sequence.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/db-sea-orm/src/migration/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Custom Tagged Enum Schema Definition\nDESCRIPTION: Example demonstrating how to use the Serde tag attribute to create an internally tagged JSON representation of an enum in the OpenAPI schema.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n# use serde::Serialize;\n# use salvo_oapi::ToSchema;\n#[derive(Serialize, ToSchema)]\nstruct Foo(String);\n\n#[derive(Serialize, ToSchema)]\n#[serde(tag = \"tag\")]\nenum Bar {\n    UnitValue,\n    NamedFields {\n        id: &'static str,\n        names: Option<Vec<String>>\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Field-Level Schema Attributes\nDESCRIPTION: Example demonstrating how to apply schema attributes at the field level to configure examples and default values for individual fields in a struct.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::ToSchema;\n#[derive(ToSchema)]\nstruct Pet {\n    #[salvo(schema(example = 1, default = 0))]\n    id: u64,\n    name: String,\n    age: Option<i32>,\n}\n```\n\n----------------------------------------\n\nTITLE: Value Type Override with Object\nDESCRIPTION: Example demonstrating how to override a String type with Object type.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(ToParameters, serde::Deserialize)]\n#[salvo(parameters(default_parameter_in = Query))]\nstruct Filter {\n    #[salvo(parameter(value_type = Object))]\n    id: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ToParameters Usage with Query Parameters\nDESCRIPTION: Example showing basic usage of ToParameters derive macro to generate parameters from a struct with documentation comments.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(salvo_oapi::ToParameters, serde::Deserialize)]\nstruct Query {\n    /// Query todo items by name.\n    name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Method References for Schema Attribute Values\nDESCRIPTION: Example showing how to use function references to provide dynamic example and default values for schema fields, rather than static literals.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::ToSchema;\n#[derive(ToSchema)]\nstruct Pet {\n    #[salvo(schema(example = u64::default, default = u64::default))]\n    id: u64,\n    #[salvo(schema(default = default_name))]\n    name: String,\n    age: Option<i32>,\n}\n\nfn default_name() -> String {\n    \"bob\".to_string()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Publishable Key in Environment File\nDESCRIPTION: Creates a .env.local file for the React application and adds the Clerk publishable key as an environment variable needed for authentication.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/jwt-clerk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\necho \"VITE_CLERK_PUBLISHABLE_KEY=CLERK_PUBLISHABLE_KEY\" >> app/.env.local\n```\n\n----------------------------------------\n\nTITLE: Complete Response Format with Body in Salvo OpenAPI\nDESCRIPTION: A more complete response definition that includes status code, description, body type, content type, headers, and a JSON example response.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nresponses(\n    (status_code = 200, description = \"Success response\", body = Pet, content_type = \"application/json\",\n        headers(...),\n        example = json!({\"id\": 1, \"name\": \"bob the cat\"})\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Session Support in Salvo via Cargo.toml\nDESCRIPTION: Configuration snippet showing how to enable the session feature in Salvo through Cargo dependencies. Uses a wildcard version specifier and explicitly enables the session feature.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/session/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"session\"] }\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache Feature in Salvo Projects\nDESCRIPTION: Shows how to enable the cache middleware feature in a Salvo project by adding the appropriate feature flag in the Cargo.toml dependency configuration.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/cache/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"cache\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Response Types with Enum\nDESCRIPTION: Example showing how to define multiple response types using an enum with different variants for success, error, and other response cases.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_responses.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(salvo_oapi::ToResponse, salvo_oapi::ToSchema)]\nstruct Response {\n    message: String,\n}\n#[derive(salvo_oapi::ToSchema, Debug)]\nstruct BadRequest {}\n#[derive(salvo_oapi::ToResponses)]\nenum UserResponses {\n    /// Success response description.\n    #[salvo(response(status_code = 200))]\n    Success { value: String },\n\n    #[salvo(response(status_code = 404))]\n    NotFound,\n\n    #[salvo(response(status_code = 400))]\n    BadRequest(BadRequest),\n\n    #[salvo(response(status_code = 500))]\n    ServerError(Response),\n\n    #[salvo(response(status_code = 418))]\n    TeaPot(Response),\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Reusable Response in an Operation Handler in Rust\nDESCRIPTION: Demonstrates how to implement both ToResponse and Scribe traits for a custom response, then use it in an endpoint handler. The example shows how to set headers and write to the response body.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_response.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo_core::http::{header::CONTENT_TYPE, HeaderValue};\nuse salvo_core::prelude::*;\nuse salvo_oapi::{ToSchema, ToResponse, endpoint};\n\n#[derive(ToResponse, ToSchema)]\nstruct PersonResponse {\n   value: String\n}\nimpl Scribe for PersonResponse {\n    fn render(self, res: &mut Response) {\n        res.headers_mut()\n            .insert(CONTENT_TYPE, HeaderValue::from_static(\"text/plain; charset=utf-8\"));\n        let _ = res.write_body(self.value);\n    }\n}\n\n#[endpoint(\n    responses(\n        (status_code = 200, response = PersonResponse)\n    )\n)]\nfn get_person() -> PersonResponse {\n    PersonResponse { value: \"person\".to_string() }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Router in Salvo\nDESCRIPTION: Shows how to add a middleware to a Salvo router chain. This snippet adds the previously defined 'add_header' middleware to a GET route.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nRouter::new().hoop(add_header).get(hello)\n```\n\n----------------------------------------\n\nTITLE: Initializing ACME and HTTP3 Server in Salvo\nDESCRIPTION: Sets up a Salvo server with ACME certificate acquisition and HTTP3 support. It defines a simple hello world handler and configures the server to listen on ports 80 and 443.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.zh.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo::prelude::*;\n\n#[handler]\nasync fn hello(_req: &mut Request, _depot: &mut Depot, res: &mut Response) {\n    res.render(Text::Plain(\"Hello World\"));\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut router = Router::new().get(hello);\n    let listener = TcpListener::new(\"0.0.0.0:443\")\n        .acme()\n        .add_domain(\"test.salvo.rs\") // 用你自己的域名替换此域名\n        .http01_challenge(&mut router).quinn(\"0.0.0.0:443\");\n    let acceptor = listener.join(TcpListener::new(\"0.0.0.0:80\")).bind().await;\n    Server::new(acceptor).serve(router).await;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Salvo Project with CLI\nDESCRIPTION: Command to create a new Salvo project using the Salvo CLI tool. This command scaffolds a new project with the specified name and appropriate project structure.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsalvo new project_name\n```\n\n----------------------------------------\n\nTITLE: Default Value Configuration for Struct\nDESCRIPTION: Example showing how to use the Serde default attribute to mark a struct and its fields as having default values, which affects their required status in the generated OpenAPI schema.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n #[derive(salvo_oapi::ToSchema, serde::Deserialize, Default)]\n #[serde(default)]\n struct MyValue {\n     field: String\n }\n```\n\n----------------------------------------\n\nTITLE: Custom Schema Implementation in Salvo\nDESCRIPTION: Demonstrates manual schema implementation for a field using schema_with attribute and custom type function.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::schema::Object;\nfn custom_type() -> Object {\n    Object::new()\n        .schema_type(salvo_oapi::BasicType::String)\n        .format(salvo_oapi::SchemaFormat::Custom(\n            \"email\".to_string(),\n        ))\n        .description(\"this is the description\")\n}\n\n#[derive(salvo_oapi::ToSchema)]\nstruct Value {\n    #[salvo(schema(schema_with = custom_type))]\n    id: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Chainable Tree Routing in Salvo\nDESCRIPTION: Examples of different routing patterns in Salvo, showing how to define routes for articles with different HTTP methods.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nRouter::with_path(\"articles\").get(list_articles).post(create_article);\nRouter::with_path(\"articles/{id}\")\n    .get(show_article)\n    .patch(edit_article)\n    .delete(delete_article);\n```\n\n----------------------------------------\n\nTITLE: Routing with Different Authentication Requirements in Salvo\nDESCRIPTION: Demonstrates how to create separate routing branches for public and authenticated routes targeting the same API resource. This leverages Salvo's tree-like routing system.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nRouter::with_path(\"articles\")\n    .get(list_articles)\n    .push(Router::with_path(\"{id}\").get(show_article));\n```\n\n----------------------------------------\n\nTITLE: Creating a Response with Custom Attributes in Rust\nDESCRIPTION: Shows how to create a response from a named struct with custom attributes for description, content type, example, and headers. The example demonstrates comprehensive response customization.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_response.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo_oapi::{ToSchema, ToResponse};\n\n /// This is description\n ///\n /// It will also be used in `ToSchema` if present\n #[derive(ToSchema, ToResponse)]\n #[salvo(\n    response(\n        description = \"Override description for response\",\n        content_type = \"text/xml\"\n    )\n )]\n #[salvo(\n    response(\n        example = json!({\"name\": \"the name\"}),\n        headers(\n            (\"csrf-token\", description = \"response csrf token\"),\n            (\"random-id\" = i32)\n        )\n    )\n )]\n struct Person {\n     name: String,\n }\n```\n\n----------------------------------------\n\nTITLE: Creating a Response from an Unnamed Field Struct in Rust\nDESCRIPTION: Demonstrates using ToResponse with an unnamed field struct to define a response containing a list of Person entities. This approach allows for Vec and Option response types.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_response.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// Person list response\n#[derive(salvo_oapi::ToResponse)]\nstruct PersonList(Vec<Person>);\n```\n\n----------------------------------------\n\nTITLE: Multiple Unnamed Parameters Definition\nDESCRIPTION: Shows how to define names for multiple unnamed parameters in a tuple struct.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(ToParameters, serde::Deserialize)]\n#[salvo(parameters(names(\"id\", \"name\")))] \nstruct IdAndName(u64, String);\n```\n\n----------------------------------------\n\nTITLE: Multiple Response Types Handler in Salvo\nDESCRIPTION: Endpoint configuration supporting multiple response content types with different schema definitions for different API versions.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\n#[salvo_oapi::endpoint(\n    responses(\n        (status_code = 200, content(\n                (\"application/vnd.user.v1+json\" = User1, example = json!({\"id\": \"id\".to_string()})),\n                (\"application/vnd.user.v2+json\" = User2, example = json!({\"id\": 2}))\n            )\n        )\n    )\n)]\nasync fn get_user() {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAPI Endpoint Responses in Salvo\nDESCRIPTION: Example showing how to define and use ToResponses with an enum to create multiple response types for an API endpoint. Includes success, error and not found responses.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_responses.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo_core::http::{header::CONTENT_TYPE, HeaderValue};\nuse salvo_core::prelude::*;\n\n#[derive(salvo_oapi::ToSchema, Debug)]\nstruct BadRequest {\n    message: String,\n}\n\n#[derive(salvo_oapi::ToResponses, Debug)]\nenum UserResponses {\n    /// Success response\n    #[salvo(response(status_code = 200))]\n    Success { value: String },\n\n    #[salvo(response(status_code = 404))]\n    NotFound,\n\n    #[salvo(response(status_code = 400))]\n    BadRequest(BadRequest),\n}\n\nimpl Scribe for UserResponses {\n    fn render(self, res: &mut Response) {\n        res.headers_mut()\n            .insert(CONTENT_TYPE, HeaderValue::from_static(\"text/plain; charset=utf-8\"));\n        let _ = res.write_body(format!(\"{self:#?}\"));\n    }\n}\n\n#[salvo_oapi::endpoint(\n    responses(\n        UserResponses\n    )\n)]\nasync fn get_user() -> UserResponses {\n   UserResponses::NotFound\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Links Format in Salvo OpenAPI\nDESCRIPTION: Example showing how to define links between operations in Salvo OpenAPI responses. This demonstrates linking to another operation with parameters, request body, and a custom server.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nresponses(\n    (status = 200, description = \"success response\",\n        links(\n            (\"link_name\" = (\n                operation_id = \"test_links\",\n                parameters((\"key\" = \"value\"), (\"json_value\" = json!(1))),\n                request_body = \"this is body\",\n                server(url = \"http://localhost\")\n            ))\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Enum Example with Inline Schema Configuration\nDESCRIPTION: Demonstrates how to use the inline attribute with enum variants containing unnamed fields. This example shows how to inline the schemas of Number and Color types within the Card enum schema definition.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo_oapi::ToSchema;\n#[derive(ToSchema)]\nenum Number {\n    One,\n}\n\n#[derive(ToSchema)]\nenum Color {\n    Spade,\n}\n#[derive(ToSchema)]\nenum Card {\n    Number(#[salvo(schema(inline))] Number),\n    Color(#[salvo(schema(inline))] Color),\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Middleware to Specific Routes in Salvo\nDESCRIPTION: Shows how to add an authentication middleware to specific article routes that require user authentication, such as edit and delete operations.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nRouter::with_path(\"articles\")\n    .hoop(auth_check)\n    .push(Router::with_path(\"{id}\").patch(edit_article).delete(delete_article));\n```\n\n----------------------------------------\n\nTITLE: Implementing Salvo Handlers with #[craft] Macro in Rust\nDESCRIPTION: Example demonstrating how to use the #[craft] attribute macro to convert Service methods into Salvo web handlers. The example shows different method receiver types (self, Arc<Self>, and static) and creates a simple web service that adds numbers.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/craft/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo::oapi::extract::*;\nuse salvo::prelude::*;\nuse salvo_craft::craft;\nuse std::sync::Arc;\n\n#[tokio::main]\nasync fn main() {\n    let service = Arc::new(Service::new(1));\n    let router = Router::new()\n        .push(Router::with_path(\"add1\").get(service.add1()))\n        .push(Router::with_path(\"add2\").get(service.add2()))\n        .push(Router::with_path(\"add3\").get(Service::add3()));\n    let acceptor = TcpListener::new(\"127.0.0.1:5800\").bind().await;\n    Server::new(acceptor).serve(router).await;\n}\n\n#[derive(Clone)]\npub struct Service {\n    state: i64,\n}\n\n#[craft]\nimpl Service {\n    fn new(state: i64) -> Self {\n        Self { state }\n    }\n    /// doc line 1\n    /// doc line 2\n    #[craft(handler)]\n    fn add1(&self, left: QueryParam<i64>, right: QueryParam<i64>) -> String {\n        (self.state + *left + *right).to_string()\n    }\n    /// doc line 3\n    /// doc line 4\n    #[craft(handler)]\n    pub(crate) fn add2(\n        self: ::std::sync::Arc<Self>,\n        left: QueryParam<i64>,\n        right: QueryParam<i64>,\n    ) -> String {\n        (self.state + *left + *right).to_string()\n    }\n    /// doc line 5\n    /// doc line 6\n    #[craft(handler)]\n    pub fn add3(left: QueryParam<i64>, right: QueryParam<i64>) -> String {\n        (*left + *right).to_string()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Security Schemes to Endpoints in Salvo OpenAPI\nDESCRIPTION: Demonstrates how to specify security requirements for an endpoint using the `endpoint` macro with the security attribute.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo_oapi::endpoint;\n\n#[endpoint(security([\"bearer\" = [\"bearer\"]]))]npub async fn authenticated_action() {}\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenAPI Support in Salvo with Cargo.toml\nDESCRIPTION: This snippet shows how to enable the OpenAPI (oapi) feature in a Salvo project by adding the appropriate dependency in the Cargo.toml file. The asterisk represents any version number.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"oapi\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining Error Response Schema in Rust with Salvo OpenAPI\nDESCRIPTION: Demonstrates creating an error response enum with custom schema attributes for OpenAPI documentation. Includes default values and examples for different error variants.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::ToSchema;\n#[derive(ToSchema)]\nenum ErrorResponse {\n    InvalidCredentials,\n    #[salvo(schema(default = String::default, example = \"Pet not found\"))]\n    NotFound(String),\n    System {\n        #[salvo(schema(example = \"Unknown system failure\"))]\n        details: String,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Salvo CLI with Cargo\nDESCRIPTION: Command to install the Salvo CLI tool using Cargo. The CLI simplifies project creation with various templates for web APIs, websites, and database integrations.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncargo install salvo-cli\n```\n\n----------------------------------------\n\nTITLE: Generic Type Override\nDESCRIPTION: Shows how to use a generic type to override the default field type.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(ToParameters, serde::Deserialize)]\n#[salvo(parameters(default_parameter_in = Query))]\nstruct Filter {\n    #[salvo(parameter(value_type = Option<String>))]\n    id: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Struct Response with Inline Schema\nDESCRIPTION: Example showing how to create a success response using a named struct with an inlined schema.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_responses.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// This is success response\n#[derive(salvo_oapi::ToResponses)]\n#[salvo(response(status_code = 200))]\nstruct SuccessResponse {\n    value: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Inlined List Response in Rust\nDESCRIPTION: Demonstrates how to create a response with an inlined schema for a list of Person entities. The schema inline attribute ensures the Vec<Person> schema is directly embedded in the response.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_response.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n/// Person list response\n#[derive(salvo_oapi::ToResponse)]\nstruct PersonList(#[salvo(schema(inline))] Vec<Person>);\n```\n\n----------------------------------------\n\nTITLE: Type-Level Schema Attributes for Enums\nDESCRIPTION: Example showing how to apply schema attributes at the type level for enums and unnamed field structs, specifying examples for the entire type.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::ToSchema;\n#[derive(ToSchema)]\n#[salvo(schema(example = \"Bus\"))]\nenum VehicleType {\n    Rocket, Car, Bus, Submarine\n}\n```\n\n----------------------------------------\n\nTITLE: Check Migration Status\nDESCRIPTION: Command to check the current status of all migrations in the database.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/db-sea-orm/src/migration/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Output in Salvo OpenAPI Schema\nDESCRIPTION: Shows how to configure XML output formatting for OpenAPI schema using XML attributes. Includes namespace configuration, prefix settings, and wrapped collections.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::ToSchema;\n#[derive(ToSchema)]\n#[salvo(schema(xml(name = \"user\", prefix = \"u\", namespace = \"https://user.xml.schema.test\")))] \nstruct User {\n    #[salvo(schema(xml(attribute, prefix = \"u\")))] \n    id: i64,\n    #[salvo(schema(xml(name = \"user_name\", prefix = \"u\")))] \n    username: String,\n    #[salvo(schema(xml(wrapped(name = \"linkList\"), name = \"link\")))] \n    links: Vec<String>,\n    #[salvo(schema(xml(wrapped, name = \"photo_url\")))] \n    photos_urls: Vec<String>\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Jaeger All-in-One Container\nDESCRIPTION: Launches a Jaeger instance in Docker with OTLP collector enabled and necessary ports exposed for UDP communication and web UI access.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/otel-jaeger/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -e COLLECTOR_OTLP_ENABLED=true -p6831:6831/udp -p6832:6832/udp -p16686:16686 -p14268:14268 jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Inlining ToResponse Implementation\nDESCRIPTION: Shows how to inline a type that implements ToResponse directly in the responses map rather than referencing it.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nresponses(\n    (status_code = 200, response = inline(ReusableResponse))\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling CSRF Feature in Salvo with Cargo\nDESCRIPTION: Shows how to enable the CSRF middleware in a Salvo project by adding the appropriate feature flag in the Cargo.toml file. This allows developers to incorporate CSRF protection in their Salvo web applications.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/csrf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"csrf\"] }\n```\n\n----------------------------------------\n\nTITLE: Manual Extraction of Request Data in Salvo\nDESCRIPTION: Demonstrates manually extracting structured data from a request using the extract method.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[handler]\nasync fn edit(req: &mut Request) {\n    let good_man: GoodMan<'_> = req.extract().await.unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Pending Migrations\nDESCRIPTION: Commands to apply all pending migrations or a specific number of pending migrations to the database.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/db-sea-orm/src/migration/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Enabling Compression Feature in Salvo\nDESCRIPTION: This snippet shows how to enable the compression middleware feature in Salvo by adding it to your Cargo.toml file. The compression feature is part of the official Salvo crate.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/compression/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"compression\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum Response from Variants in Rust\nDESCRIPTION: Shows how to create an enum response with different variants. This approach allows for returning different types of responses from the same endpoint based on conditions.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_response.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(salvo_oapi::ToResponse)]\nenum PersonType {\n    Value(String),\n    Foobar,\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS Feature in Salvo\nDESCRIPTION: Configuration snippet showing how to enable CORS protection feature in Salvo through Cargo.toml dependencies. Uses wildcard version specifier with the cors feature flag.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/cors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"cors\"] }\n```\n\n----------------------------------------\n\nTITLE: Using Reusable Responses with ToResponse\nDESCRIPTION: Example of using a reusable response type that implements the ToResponse trait, allowing for consistent response patterns across endpoints.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nresponses(\n    (status_code = 200, response = ReusableResponse)\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Salvo JWT Authentication with Cargo\nDESCRIPTION: Configuration for adding the JWT authentication feature to a Salvo project via Cargo.toml. This enables the jwt-auth feature from the main Salvo crate.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/jwt-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"jwt-auth\"] }\n```\n\n----------------------------------------\n\nTITLE: Example Request Body Definitions for Salvo OpenAPI\nDESCRIPTION: Shows various ways to define request bodies in OpenAPI documentation, including specifying content types and different data types.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n request_body(content = String, description = \"Xml as string request\", content_type = \"text/xml\"),\n request_body = Pet,\n request_body = Option<[Pet]>,\n```\n\n----------------------------------------\n\nTITLE: Installing Salvo Flash via Cargo.toml\nDESCRIPTION: Configuration snippet showing how to enable flash functionality in a Salvo project by adding it as a feature in the dependency declaration.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/flash/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nsalvo = { version = \"*\", features = [\"flash\"] }\n```\n\n----------------------------------------\n\nTITLE: Basic Struct Schema Definition with Serde Integration\nDESCRIPTION: Example showing how to define a Foo struct and a Bar enum with various Serde attributes that affect OpenAPI schema generation. Demonstrates rename_all, rename, and skip attributes.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n# use serde::Serialize;\n# use salvo_oapi::ToSchema;\n#[derive(Serialize, ToSchema)]\nstruct Foo(String);\n\n#[derive(Serialize, ToSchema)]\n#[serde(rename_all = \"camelCase\")]\nenum Bar {\n    UnitValue,\n    #[serde(rename_all = \"camelCase\")]\n    NamedFields {\n        #[serde(rename = \"id\")]\n        named_id: &'static str,\n        name_list: Option<Vec<String>>\n    },\n    UnnamedFields(Foo),\n    #[serde(skip)]\n    SkipMe,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Salvo Examples\nDESCRIPTION: Command to run examples from the Salvo repository. This shows how to navigate to the examples directory and run a specific example like basic-auth.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncd examples\ncargo run --bin example-basic-auth\n```\n\n----------------------------------------\n\nTITLE: Hello World with ACME and HTTP3 in Salvo\nDESCRIPTION: A basic Salvo example that demonstrates how to create a server with automatic TLS certificate acquisition via ACME, supporting HTTP/1, HTTP/2, and HTTP/3 protocols.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse salvo::prelude::*;\n\n#[handler]\nasync fn hello(res: &mut Response) {\n    res.render(Text::Plain(\"Hello World\"));\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut router = Router::new().get(hello);\n    let listener = TcpListener::new(\"0.0.0.0:443\")\n        .acme()\n        .add_domain(\"test.salvo.rs\") // Replace this domain name with your own.\n        .http01_challenge(&mut router).quinn(\"0.0.0.0:443\");\n    let acceptor = listener.join(TcpListener::new(\"0.0.0.0:80\")).bind().await;\n    Server::new(acceptor).serve(router).await;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated Attribute in Salvo Schema\nDESCRIPTION: Demonstrates how Rust's deprecated attribute is reflected in OpenAPI documentation for both struct and field level deprecation.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::ToSchema;\n#[derive(ToSchema)]\n#[deprecated]\nstruct User {\n    id: i64,\n    username: String,\n    links: Vec<String>,\n    #[deprecated]\n    photos_urls: Vec<String>\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Response Types with Content Attribute\nDESCRIPTION: Demonstrates how to define multiple response data formats for a single status code, each with its own schema and example.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nresponses(\n   (status_code = 200, content(\n           (\"application/vnd.user.v1+json\" = User, example = json!(User {id: \"id\".to_string()})),\n           (\"application/vnd.user.v2+json\" = User2, example = json!(User2 {id: 2}))\n       )\n   )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Unit Struct Response in Rust\nDESCRIPTION: Shows how to use ToResponse with a unit struct to create a response without a body. This is useful for success responses that don't need to return data.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_response.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Success response which does not have body.\n#[derive(salvo_oapi::ToResponse)]\nstruct SuccessResponse;\n```\n\n----------------------------------------\n\nTITLE: Basic OpenAPI Parameter Definition in Rust\nDESCRIPTION: Demonstrates basic parameter definition using ToSchema and ToParameters derive macros. Defines an Id struct with an i64 value and a Filter struct with a query parameter.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(ToSchema)]\nstruct Id {\n    value: i64,\n}\n\n#[derive(ToParameters, serde::Deserialize)]\n#[salvo(parameters(default_parameter_in = Query))]\nstruct Filter {\n    #[salvo(parameter(value_type = Id))]\n    id: String\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response Example Definition for Salvo OpenAPI\nDESCRIPTION: Shows how to define an example for a response schema, including summary and example value using JSON.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n (\"John\" = (summary = \"This is John\", value = json!({\"name\": \"John\"})))\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Path Regex Patterns in Salvo\nDESCRIPTION: Shows how to register a custom regex pattern for path matching, specifically for GUID validation in route parameters.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nPathFilter::register_wisp_regex(\n    \"guid\",\n    Regex::new(\"[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}\").unwrap(),\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Value Type and Format in Salvo Schema\nDESCRIPTION: Shows how to enforce specific types and formats in OpenAPI spec using value_type and format attributes.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::ToSchema;\n#[derive(ToSchema)]\nstruct Post {\n    id: i32,\n    #[salvo(schema(value_type = String, format = Binary))]\n    value: Vec<u8>,\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Pet Query Example\nDESCRIPTION: Complete example showing ToParameters usage with enum schema inlining and multiple query parameters.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::Deserialize;\nuse salvo_core::prelude::*;\nuse salvo_oapi::{ToParameters, ToSchema};\n\n#[derive(Deserialize, ToSchema)]\n#[serde(rename_all = \"snake_case\")]\nenum PetKind {\n    Dog,\n    Cat,\n}\n\n#[derive(Deserialize, ToParameters)]\nstruct PetQuery {\n    /// Name of pet\n    name: Option<String>,\n    /// Age of pet\n    age: Option<i32>,\n    /// Kind of pet\n    #[salvo(parameter(inline))]\n    kind: PetKind\n}\n\n#[salvo_oapi::endpoint(\n    parameters(PetQuery),\n    responses(\n        (status_code = 200, description = \"success response\")\n    )\n)]\nasync fn get_pet(query: PetQuery) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Response Examples in Single Endpoint\nDESCRIPTION: Demonstrates how to configure multiple example responses for a single endpoint with different summaries and descriptions.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\n#[salvo_oapi::endpoint(\n    responses(\n        (status_code = 200, body = User,\n            examples(\n                (\"Demo\" = (summary = \"This is summary\", description = \"Long description\",\n                            value = json!(User{name: \"Demo\".to_string()}))),\n                (\"John\" = (summary = \"Another user\", value = json!({\"name\": \"John\"})))\n             )\n        )\n    )\n)]\nasync fn get_user() -> Json<User> {\n  Json(User {name: \"John\".to_string()})\n}\n```\n\n----------------------------------------\n\nTITLE: Using Doc Comments for OpenAPI Summary and Description in Rust\nDESCRIPTION: Demonstrates how doc comments are used to generate OpenAPI summary and description. The first line becomes the summary while the remaining lines form the description.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// This is a summary of the operation\n///\n/// The rest of the doc comment will be included to operation description.\n#[salvo_oapi::endpoint()]\nfn endpoint() {}\n```\n\n----------------------------------------\n\nTITLE: Tagged Numeric Enum with Skip Attributes\nDESCRIPTION: Example showing how to use Serde's tag and skip attributes with a numeric enum to control the schema generation, including skipping specific variants from the OpenAPI documentation.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_schema.md#2025-04-21_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n# use salvo_oapi::ToSchema;\n#[derive(ToSchema, serde::Serialize)]\n#[repr(i8)]\n#[serde(tag = \"code\")]\nenum ExitCode {\n    Error = -1,\n    #[serde(skip)]\n    Unknown = 0,\n    Ok = 1,\n }\n```\n\n----------------------------------------\n\nTITLE: Minimal Response Format in Salvo OpenAPI\nDESCRIPTION: Shows the minimal syntax for defining API responses with status codes and descriptions in Salvo. Demonstrates different ways to specify status codes including numeric literals, string patterns, and constants.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nresponses(\n    (status_code = 200, description = \"success response\"),\n    (status_code = 404, description = \"resource missing\"),\n    (status_code = \"5XX\", description = \"server error\"),\n    (status_code = StatusCode::INTERNAL_SERVER_ERROR, description = \"internal server error\"),\n    (status_code = IM_A_TEAPOT, description = \"happy easter\")\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unnamed Struct Response\nDESCRIPTION: Example showing how to create a response with an inlined schema using an unnamed struct.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_responses.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(salvo_oapi::ToSchema)]\nstruct Foo;\n#[derive(salvo_oapi::ToResponses)]\n#[salvo(response(status_code = 201))]\nstruct CreatedResponse(#[salvo(schema(...))] Foo);\n```\n\n----------------------------------------\n\nTITLE: Running Test Client\nDESCRIPTION: Executes the test client that sends requests to both server instances for demonstrating distributed tracing.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/otel-jaeger/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin example-otel-client\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Struct Response\nDESCRIPTION: Example showing how to create a response without content using a unit struct.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_responses.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(salvo_oapi::ToResponses)]\n#[salvo(response(status_code = NOT_FOUND))]\nstruct NotFound;\n```\n\n----------------------------------------\n\nTITLE: Reset Database Migrations\nDESCRIPTION: Command to rollback all previously applied migrations without reapplying them.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/db-sea-orm/src/migration/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Single Unnamed Parameter Definition\nDESCRIPTION: Demonstrates using the names attribute to define a name for a single unnamed parameter in a tuple struct.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(ToParameters, serde::Deserialize)]\n#[salvo(parameters(names(\"id\")))] \nstruct Id(u64);\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Default robots.txt configuration that allows all user agents (*) to access all parts of the website. No paths are disallowed, indicating complete crawler access is permitted.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/proxy-react-app/react-app/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Response Header Formats in Salvo OpenAPI\nDESCRIPTION: Shows different ways to define response headers, from simple name-only definitions to headers with types and descriptions.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/endpoint.md#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n(\"x-csrf-token\"),\n(\"x-csrf-token\" = String, description = \"New csrf token\"),\n```\n\n----------------------------------------\n\nTITLE: Implementing Copy2 Struct in Rust for Salvo Framework\nDESCRIPTION: Defines a generic Copy2<T> struct that wraps any type implementing the Copy trait. It provides a getter method to retrieve a copy of the wrapped value and features debug formatting.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/static-embed-file/static/test2.txt#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive(Debug)]\npub struct Copy2<T: Copy>(T);\n\nimpl<T: Copy> Copy2<T> {\n    /// Create a new instance.\n    #[inline]\n    pub fn new(data: T) -> Self {\n        Self(data)\n    }\n\n    /// Get a copy of the data.\n    #[inline]\n    pub fn get(&self) -> T {\n        self.0\n    }\n}\n\nimpl<T: Copy + std::fmt::Debug> std::fmt::Display for Copy2<T> {\n    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n        write!(f, \"{:?}\", self.0)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Salvo Todos API Application\nDESCRIPTION: Command to start the Salvo Todos API application. After running this command, the API and its documentation will be available at the specified URLs.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/todos-utoipa/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk API Key in Environment File for React\nDESCRIPTION: Creates a .env.local file with the Clerk publishable key that's required for authentication. The key should be obtained from the Clerk dashboard API Keys section.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/jwt-oidc-clerk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\necho \"VITE_CLERK_PUBLISHABLE_KEY=CLERK_PUBLISHABLE_KEY\" >> app/.env.local\n```\n\n----------------------------------------\n\nTITLE: Fresh Database Setup\nDESCRIPTION: Command to drop all tables and reapply all migrations for a fresh database setup.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/db-sea-orm/src/migration/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Creates an optimized production build with minified bundles and hashed filenames.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/proxy-react-app/react-app/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations\nDESCRIPTION: Commands to rollback the last applied migrations or a specific number of previously applied migrations.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/db-sea-orm/src/migration/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite\nDESCRIPTION: Launches the test runner in interactive watch mode for running application tests.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/proxy-react-app/react-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Accessing Salvo Endpoint for Testing OpenTelemetry\nDESCRIPTION: Command to access the example endpoint which will generate telemetry data that will be sent to Jaeger for visualization. This curl request triggers a trace that can be viewed in the Jaeger UI.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/logging-otlp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:5800/\nYou should see \"Hello World\" as the response. Traces for requests made to this endpoint will be sent to Jaeger.\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server\nDESCRIPTION: Starts the development server for local React app development with hot reload functionality.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/proxy-react-app/react-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Launching Second Server Instance\nDESCRIPTION: Starts the second server instance of the distributed tracing example using Cargo.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/otel-jaeger/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin example-otel-server2\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot.txt Rules\nDESCRIPTION: This snippet defines the default rules for web crawlers. It allows all user agents and does not disallow any specific paths, effectively giving full access to crawlers.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/jwt-oidc-clerk/app/static/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Launching First Server Instance\nDESCRIPTION: Starts the first server instance of the distributed tracing example using Cargo.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/otel-jaeger/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin example-otel-server1\n```\n\n----------------------------------------\n\nTITLE: Implementing the copy2 Macro for Salvo HTTP Handlers in Rust\nDESCRIPTION: This macro implementation helps create copies of simple HTTP handler functions in the Salvo framework. It addresses ownership issues when handlers need to be moved into multiple closures or event handlers by generating cloned copies of the handlers.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/static-dir-list/static/test/test2.txt#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[macro_export]\nmacro_rules! copy2 {\n    ($handler:expr) => {\n        copy2!($handler, $handler, $handler)\n    };\n    ($handler1:expr, $handler2:expr) => {\n        copy2!($handler1, $handler2, $handler1)\n    };\n    ($handler1:expr, $handler2:expr, $handler3:expr) => {\n        (|req, depot, res| $handler1(req, depot, res),\n         |req, depot, res| $handler2(req, depot, res),\n         |req, depot, res| $handler3(req, depot, res))\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Type Override\nDESCRIPTION: Demonstrates overriding a Vec type with another Vec type.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/oapi/docs/derive_to_parameters.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(ToParameters, serde::Deserialize)]\n#[salvo(parameters(default_parameter_in = Query))]\nstruct Filter {\n    #[salvo(parameter(value_type = Vec<i32>))]\n    id: Vec<String>\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Path Copy Function in Rust\nDESCRIPTION: A simple function that returns a PathBuf type after converting a directory path string\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/static-embed-files/static/test2.txt#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncopy2\n```\n\n----------------------------------------\n\nTITLE: Creating a File Upload Form in HTML\nDESCRIPTION: This HTML form allows users to upload files through a web interface. It includes both single and multiple file upload fields, and is configured to POST to '/upload' endpoint with the required multipart/form-data encoding type for file uploads.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/crates/serve-static/test/static/test2.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Upload files</title>\n    </head>\n    <body>\n        <form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n            <p><input type=\"file\" name=\"file\"></p>\n            <p><input type=\"file\" name=\"files\" multiple></p>\n            <p><button type=\"submit\">Submit</button></p>\n        </form>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Robot Access Control with robots.txt\nDESCRIPTION: This robots.txt file allows all web robots (search engines, crawlers, etc.) full access to crawl the entire website. The file references the standard specification at robotstxt.org and sets no crawling restrictions.\nSOURCE: https://github.com/salvo-rs/salvo/blob/main/examples/jwt-clerk/app/static/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```"
  }
]