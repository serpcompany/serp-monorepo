[
  {
    "owner": "praw-dev",
    "repo": "asyncpraw",
    "content": "TITLE: Complete LMGTFY Reddit Bot Implementation in Python\nDESCRIPTION: The full implementation of the LMGTFY Reddit bot using Async PRAW. This script monitors new submissions, analyzes their titles, and replies with LMGTFY links when appropriate.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/reply_bot.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom urllib.parse import quote_plus\n\nimport asyncpraw\n\nTARGET_SUBREDDIT = \"AskReddit\"\nREPLY_TEMPLATE = \"[Let me google that for you](https://lmgtfy.com/?q={})\"\n\n\nasync def process_submission(submission):\n    \"\"\"Process a submission -- check if it's a simple question and reply.\"\"\"\n    # Ignore titles with more than 10 words as they probably are not simple\n    if len(submission.title.split()) > 10:\n        return\n\n    # Check for simple question phrases\n    normalized_title = submission.title.lower()\n    if any(\n        question in normalized_title\n        for question in [\"what is\", \"who is\", \"what are\"]\n    ):\n        url_title = quote_plus(submission.title)\n        reply_text = REPLY_TEMPLATE.format(url_title)\n        print(f\"Replying to: {submission.title}\")\n        await submission.reply(reply_text)\n\n\nasync def main():\n    reddit = asyncpraw.Reddit(\n        client_id=os.environ[\"REDDIT_CLIENT_ID\"],\n        client_secret=os.environ[\"REDDIT_CLIENT_SECRET\"],\n        user_agent=\"LMGTFY (by u/USERNAME)\",\n        username=os.environ[\"REDDIT_USERNAME\"],\n        password=os.environ[\"REDDIT_PASSWORD\"],\n    )\n    subreddit = await reddit.subreddit(TARGET_SUBREDDIT)\n    async for submission in subreddit.stream.submissions():\n        await process_submission(submission)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Read-only Reddit Instance in Python with Async PRAW\nDESCRIPTION: Creates a read-only Reddit instance using Async PRAW. Requires client ID, client secret, and user agent. This instance can be used for retrieving public information from Reddit.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/quick_start.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpraw\n\nreddit = asyncpraw.Reddit(\n    client_id=\"my client id\",\n    client_secret=\"my client secret\",\n    user_agent=\"my user agent\",\n)\n\nprint(reddit.read_only)\n# Output: True\n```\n\n----------------------------------------\n\nTITLE: Using Saved Refresh Token in PRAW\nDESCRIPTION: This snippet shows how to authenticate with Reddit using a previously obtained refresh token in PRAW. This allows for maintaining authentication without storing the user's credentials.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/authentication.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreddit = praw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Password Flow in Async PRAW\nDESCRIPTION: This snippet demonstrates how to authenticate with Reddit using the Password Flow approach in Async PRAW. It requires client_id, client_secret, username, password, and user_agent parameters to authenticate as a specific Reddit user.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/authentication.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreddit = asyncpraw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    password=\"1guiwevlfo00esyy\",\n    user_agent=\"testscript by u/fakebot3\",\n    username=\"fakebot3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using Reddit as Async Context Manager\nDESCRIPTION: Example showing how to use Reddit class as an asynchronous context manager that automatically closes the requestor session.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/CHANGES.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync with Reddit() as reddit:\n    # session automatically closes after context\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hot Submissions from Subreddit using Async PRAW\nDESCRIPTION: Demonstrates how to fetch the 10 hottest submissions from a subreddit using an asynchronous for loop. This code snippet assumes a read-only Reddit instance has been created.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/quick_start.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# continued from code above\n\nsubreddit = await reddit.subreddit(\"test\")\nasync for submission in subreddit.hot(limit=10):\n    print(submission.title)\n\n# Output: 10 submissions\n```\n\n----------------------------------------\n\nTITLE: Obtaining Subreddit Information using Async PRAW\nDESCRIPTION: Demonstrates how to fetch information about a subreddit, including its display name, title, and description. This code snippet assumes a Reddit instance has been created.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/quick_start.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a asyncpraw.Reddit instance bound to variable `reddit`\nsubreddit = await reddit.subreddit(\"redditdev\", fetch=True)\n\nprint(subreddit.display_name)\n# Output: redditdev\nprint(subreddit.title)\n# Output: reddit development\nprint(subreddit.description)\n# Output: a subreddit for discussion of ...\n```\n\n----------------------------------------\n\nTITLE: Monitoring New Submissions in a Subreddit with Async PRAW in Python\nDESCRIPTION: Uses Async PRAW to create an infinite stream of new submissions from a specified subreddit. This allows the bot to continuously monitor for new posts.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/reply_bot.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsubreddit = await reddit.subreddit(\"test\")\nasync for submission in subreddit.stream.submissions():\n    # do something with submission\n    ...\n```\n\n----------------------------------------\n\nTITLE: Common Async PRAW Operations\nDESCRIPTION: Examples of common Reddit operations using Async PRAW including creating submissions, commenting, accessing top posts, and getting moderator listings.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a submission to r/test\nsubreddit = await reddit.subreddit(\"test\")\nawait subreddit.submit(\"Test Submission\", url=\"https://reddit.com\")\n\n# Comment on a known submission\nsubmission = await reddit.submission(\n    url=\"https://www.reddit.com/comments/5e1az9\", fetch=False\n)\nawait submission.reply(\"Super rad!\")\n\n# Reply to the first comment of a weekly top thread of a moderated community\nsubreddit = await reddit.subreddit(\"mod\")\nasync for submission in subreddit.top(time_filter=\"week\"):\n    comments = await submission.comments()\n    await comments[0].reply(\"An automated reply\")\n\n# Output score for the first 256 items on the frontpage\nasync for submission in reddit.front.hot(limit=256):\n    print(submission.score)\n\n# Obtain the moderator listing for r/test\nsubreddit = await reddit.subreddit(\"test\")\nasync for moderator in subreddit.moderator:\n    print(moderator)\n```\n\n----------------------------------------\n\nTITLE: Initializing Authorized Reddit Instance in Python with Async PRAW\nDESCRIPTION: Creates an authorized Reddit instance using Async PRAW. Requires client ID, client secret, user agent, username, and password. This instance can perform actions that require authentication.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/quick_start.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpraw\n\nreddit = asyncpraw.Reddit(\n    client_id=\"my client id\",\n    client_secret=\"my client secret\",\n    password=\"my password\",\n    user_agent=\"my user agent\",\n    username=\"my username\",\n)\n\nprint(reddit.read_only)\n# Output: False\n```\n\n----------------------------------------\n\nTITLE: Creating Submission Instances using Async PRAW\nDESCRIPTION: Demonstrates two ways to create Submission instances: using a submission ID and using a submission URL. This code snippet assumes a Reddit instance has been created.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/quick_start.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a asyncpraw.Reddit instance bound to variable `reddit`\nsubmission = await reddit.submission(\"39zje0\")\nprint(submission.title)\n# Output: reddit will soon only be available ...\n\n# or\nsubmission = await reddit.submission(url=\"https://www.reddit.com/...\")\n```\n\n----------------------------------------\n\nTITLE: Manual Fetching of Lazily Loaded Objects in Async PRAW\nDESCRIPTION: Demonstrates how to manually fetch or refresh lazily loaded objects in Async PRAW using the load() method. This is useful when you need to access attributes of a lazily loaded object later in the code.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/asyncpraw_migration.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# object is lazily loaded and no requests are made\nsubmission = await reddit.submission(\"id\", fetch=False)\n...\n# network request is made and item is fully fetched\nawait submission.load()\n\n# network request is not made as object is already fully fetched\nprint(submission.score)\n```\n\n----------------------------------------\n\nTITLE: Initializing Async PRAW Reddit Instance\nDESCRIPTION: Example of creating an authenticated Reddit instance using Async PRAW with OAuth credentials.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpraw\n\nreddit = asyncpraw.Reddit(\n    client_id=\"CLIENT_ID\",\n    client_secret=\"CLIENT_SECRET\",\n    password=\"PASSWORD\",\n    user_agent=\"USERAGENT\",\n    username=\"USERNAME\",\n)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Hot Submissions in a Subreddit using Async PRAW\nDESCRIPTION: Shows how to iterate through the first 10 hot submissions in a subreddit, printing various attributes of each submission. This code snippet assumes a Subreddit instance has been obtained.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/quick_start.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a Subreddit instance bound to variable `subreddit`\nasync for submission in subreddit.hot(limit=10):\n    print(submission.title)\n    # Output: the submission's title\n    print(submission.score)\n    # Output: the submission's score\n    print(submission.id)\n    # Output: the submission's ID\n    print(submission.url)\n    # Output: the URL the submission points to or the submission's URL if it's a self post\n```\n\n----------------------------------------\n\nTITLE: Obtaining Redditor Instances using Async PRAW\nDESCRIPTION: Shows two ways to obtain Redditor instances: from a Submission's author and directly using a username. This code snippet assumes a Reddit instance and a Submission instance have been created.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/quick_start.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a Submission instance bound to variable `submission`\nredditor1 = submission.author\nprint(redditor1.name)\n# Output: name of the redditor\n\n# assume you have a asyncpraw.Reddit instance bound to variable `reddit`\nredditor2 = await reddit.redditor(\"bboe\", fetch=True)\nprint(redditor2.link_karma)\n# Output: u/bboe's karma\n```\n\n----------------------------------------\n\nTITLE: Obtaining an Authorization URL for Code Flow in Async PRAW\nDESCRIPTION: This snippet shows how to generate an authorization URL for the Code Flow authentication method. This URL is used to direct users to Reddit's authorization page where they can grant permissions to your application.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/authentication.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nreddit = asyncpraw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    redirect_uri=\"http://localhost:8080\",\n    user_agent=\"testscript by u/fakebot3\",\n)\nprint(reddit.auth.url(scopes=[\"identity\"], state=\"...\", duration=\"permanent\"))\n```\n\n----------------------------------------\n\nTITLE: Handling MoreComments Objects in Python\nDESCRIPTION: Demonstrates how to skip MoreComments objects when iterating through comments to avoid AttributeError.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/comments.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom asyncpraw.models import MoreComments\n\ncomments - await submission.comments()\nfor top_level_comment in comments:\n    if isinstance(top_level_comment, MoreComments):\n        continue\n    print(top_level_comment.body)\n```\n\n----------------------------------------\n\nTITLE: Breadth-First Traversal of Comment Tree in Python\nDESCRIPTION: Implements a breadth-first traversal of the entire comment tree using a queue, allowing iteration over comments at all levels.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/comments.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncomments = await submission.comments()\nawait comments.replace_more(limit=None)\ncomment_queue = comments[:]  # Seed with top-level\nwhile comment_queue:\n    comment = comment_queue.pop(0)\n    print(comment.body)\n    comment_queue.extend(comment.replies)\n```\n\n----------------------------------------\n\nTITLE: Authorizing with Code and Retrieving User Information in Async PRAW\nDESCRIPTION: This snippet demonstrates how to complete the Code Flow by exchanging the authorization code for a refresh token. It then shows how to verify the authentication by retrieving the authenticated user's information.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/authentication.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(await reddit.auth.authorize(code))\nprint(await reddit.user.me())\n```\n\n----------------------------------------\n\nTITLE: Accessing Comments on a Submission using Async PRAW\nDESCRIPTION: Demonstrates how to access top-level comments and all comments on a submission. This code snippet assumes a Reddit instance has been created.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/quick_start.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a asyncpraw.Reddit instance bound to variable `reddit`\ntop_level_comments = await submission.comments()\nall_comments = await submission.comments.list()\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit with SQLiteTokenManager in Python\nDESCRIPTION: Demonstrates initializing a Reddit instance using the new SQLiteTokenManager for token storage and management.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/CHANGES.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntoken_manager = SQLiteTokenManager(\"tokens.db\")\nreddit = Reddit(..., token_manager=token_manager)\n```\n\n----------------------------------------\n\nTITLE: Configuring Async PRAW with Custom SSL Certificate\nDESCRIPTION: Demonstrates how to create a custom aiohttp ClientSession with a self-signed SSL certificate, and use it with Async PRAW. This allows Async PRAW to work with networks that use self-signed SSL certificates.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ssl\n\nimport aiohttp\nimport asyncpraw\n\n\nssl_ctx = ssl.create_default_context(cafile=\"/path/to/certfile.pem\")\n\nconn = aiohttp.TCPConnector(ssl_context=ssl_ctx)\nsession = aiohttp.ClientSession(connector=conn)\nreddit = asyncpraw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    password=\"1guiwevlfo00esyy\",\n    requestor_kwargs={\"session\": session},  # pass the custom Session instance\n    user_agent=\"testscript by u/fakebot3\",\n    username=\"fakebot3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit Class with Explicit Keyword Arguments in Python\nDESCRIPTION: This code snippet demonstrates how to initialize the Reddit class from Async PRAW by explicitly passing all required authentication and identification information as keyword arguments. It includes client ID, client secret, password, user agent, and username.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/reddit_initialization.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreddit = asyncpraw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    password=\"1guiwevlfo00esyy\",\n    user_agent=\"testscript by u/fakebot3\",\n    username=\"fakebot3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Replying to Reddit Submissions with Async PRAW in Python\nDESCRIPTION: Uses Async PRAW to reply to a Reddit submission with the constructed LMGTFY link. This is the final step in the bot's workflow.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/reply_bot.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait submission.reply(reply_text)\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit Instance with Async PRAW in Python\nDESCRIPTION: Creates an instance of the Reddit class using Async PRAW with OAuth2 credentials. This is the first step in setting up a Reddit bot.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/reply_bot.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpraw\n\nreddit = asyncpraw.Reddit(\n    client_id=\"CLIENT_ID\",\n    client_secret=\"CLIENT_SECRET\",\n    password=\"PASSWORD\",\n    user_agent=\"LMGTFY (by u/USERNAME)\",\n    username=\"USERNAME\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using Interpolation in praw.ini Configuration\nDESCRIPTION: This INI configuration example demonstrates how to use interpolation to construct a user agent string from separate components.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/prawini.rst#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[bot1]\nbot_name=MyBot\nbot_version=1.2.3\nbot_author=MyUser\nuser_agent=script:%(bot_name)s:v%(bot_version)s (by u/%(bot_author)s)\n```\n\n----------------------------------------\n\nTITLE: Configuring Async PRAW with Custom aiohttp ClientSession for Proxy Support\nDESCRIPTION: Shows how to create a custom aiohttp ClientSession with trust_env=True to enable proxy support, and pass it to Async PRAW during initialization. This allows Async PRAW to use proxy settings from environment variables.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpraw\nfrom aiohttp import ClientSession\n\n\nsession = ClientSession(trust_env=True)\nreddit = asyncpraw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    password=\"1guiwevlfo00esyy\",\n    requestor_kwargs={\"session\": session},  # pass the custom Session instance\n    user_agent=\"testscript by u/fakebot3\",\n    username=\"fakebot3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit Instance and Displaying Scopes in Python using PRAW\nDESCRIPTION: This code creates a Reddit instance using a refresh token for authentication and prints the available scopes. It demonstrates how to set up PRAW with a refresh token and user agent, and then access the auth.scopes() method.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/authentication.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n        refresh_token=\"WeheY7PwgeCZj4S3QgUcLhKE5S2s4eAYdxM\",\n        user_agent=\"testscript by u/fakebot3\",\n    )\n    print(reddit.auth.scopes())\n```\n\n----------------------------------------\n\nTITLE: Analyzing Submission Titles and Constructing LMGTFY URLs in Python\nDESCRIPTION: Processes submission titles to check if they meet certain criteria, then constructs a URL-safe LMGTFY link based on the title. This is used to generate appropriate responses for the bot.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/reply_bot.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib.parse import quote_plus\n\nreply_template = \"[Let me google that for you](https://lmgtfy.com/?q={})\"\n\nurl_title = quote_plus(submission.title)\nreply_text = reply_template.format(url_title)\n```\n\n----------------------------------------\n\nTITLE: Using CommentForest.list() for Comment Traversal in Python\nDESCRIPTION: Utilizes the list() method of CommentForest to obtain a flattened list of all comments, simplifying the traversal process.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/comments.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncomments = await submission.comments()\ncomments.replace_more(limit=None)\nall_comments = await comments.list()\nfor comment in all_comments:\n    print(comment.body)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Submission Object by URL in Python\nDESCRIPTION: Retrieves a submission object using the full URL of a Reddit post. This object is used to access the comments of the submission.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/comments.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurl = \"https://www.reddit.com/r/funny/comments/3g1jfi/buttons/\"\nsubmission = await reddit.submission(url=url)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Two-Factor Authentication in Async PRAW\nDESCRIPTION: This snippet demonstrates how to authenticate with a Reddit account that has two-factor authentication enabled. The 2FA token is appended to the password with a colon separator.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/authentication.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreddit = asyncpraw.Reddit(\n    client_id=\"SI8pN3DSbt0zor\",\n    client_secret=\"xaxkj7HNh8kwg8e5t4m6KvSrbTI\",\n    password=\"1guiwevlfo00esyy:955413\",\n    user_agent=\"testscript by u/fakebot3\",\n    username=\"fakebot3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Configuration in Async PRAW\nDESCRIPTION: Demonstrates how to access custom configuration options from a PRAW.ini file using the Reddit instance. This example shows retrieving a custom 'app_debugging' setting.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/options.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreddit.config.custom[\"app_debugging\"]\n```\n\n----------------------------------------\n\nTITLE: Basic RedditAPIException Handling in Python\nDESCRIPTION: Basic example of handling Reddit API exceptions using the new RedditAPIException class, accessing only the first error item. This approach is not recommended as it doesn't handle multiple errors.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/praw7_migration.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    subreddit = await reddit.subreddit(\"test\")\n    await subreddit.submit(\"Test Title\", url=\"invalidurl\")\nexcept RedditAPIException as exception:\n    print(exception.items[0].error_type)\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit Instance for Comment Extraction in Python\nDESCRIPTION: Creates an instance of the Reddit class from asyncpraw to authenticate and access the Reddit API. This setup is required for extracting comments from submissions.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/comments.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpraw\n\nreddit = asyncpraw.Reddit(\n    client_id=\"CLIENT_ID\",\n    client_secret=\"CLIENT_SECRET\",\n    password=\"PASSWORD\",\n    user_agent=\"Comment Extraction (by u/USERNAME)\",\n    username=\"USERNAME\",\n)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Reddit Objects using Direct Constructors in AsyncPRAW\nDESCRIPTION: Demonstrates how to refresh comment, subreddit, and submission objects using their respective constructors in AsyncPRAW.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/faq.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait reddit.comment(comment.id)\nawait reddit.subreddit(subreddit.display_name)\nawait reddit.submission(submission.id)\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Logging for Async PRAW\nDESCRIPTION: Implements both console and file-based logging for Async PRAW with rotation capability. Creates a log file that rotates when it reaches 16MB, keeping up to 5 backup files.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/logging.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nstream_handler = logging.StreamHandler()\nstream_handler.setLevel(logging.DEBUG)\nfile_handler = logging.handlers.RotatingFileHandler(\n    \"praw_log.txt\", maxBytes=1024 * 1024 * 16, backupCount=5\n)\nfile_handler.setLevel(logging.DEBUG)\nfor logger_name in (\"asyncpraw\", \"asyncprawcore\"):\n    logger = logging.getLogger(logger_name)\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(stream_handler)\n    logger.addHandler(file_handler)\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit Instance with Configuration Interpolation\nDESCRIPTION: This Python code shows how to initialize a Reddit instance with basic configuration interpolation enabled.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/prawini.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreddit = asyncpraw.Reddit(\"bot1\", config_interpolation=\"basic\")\n```\n\n----------------------------------------\n\nTITLE: Obtaining Submission Object by ID in Python\nDESCRIPTION: Retrieves a submission object using the ID of a Reddit post. This method is an alternative to using the full URL.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/comments.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsubmission = await reddit.submission(\"3g1jfi\")\n```\n\n----------------------------------------\n\nTITLE: Refreshing Reddit Objects using load() Method in AsyncPRAW\nDESCRIPTION: Shows how to refresh comment, subreddit, and submission objects using the load() method in AsyncPRAW.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/faq.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait comment.load()\nawait subreddit.load()\nawait submission.load()\n```\n\n----------------------------------------\n\nTITLE: Verifying Authentication in Async PRAW\nDESCRIPTION: This snippet shows how to verify that you are correctly authenticated as the intended user by printing the current authenticated user's information. This is useful to confirm successful OAuth authentication.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/authentication.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(await reddit.user.me())\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Subreddits in AsyncPRAW\nDESCRIPTION: Example of how to work with multiple subreddits by concatenating them with + symbol to avoid timeout issues.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/faq.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait reddit.subreddit(\"pics+LifeProTips\")\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL for Implicit Flow in Async PRAW\nDESCRIPTION: This snippet shows how to generate an authorization URL for the Implicit Flow authentication method. This flow returns the access token directly in the redirect URI fragment.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/authentication.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(reddit.auth.url(scopes=[\"identity\"], state=\"...\", implicit=True))\n```\n\n----------------------------------------\n\nTITLE: Installing Async PRAW via pip\nDESCRIPTION: Commands for installing either the stable release of Async PRAW from PyPI or the latest development version from GitHub.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install asyncpraw\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade https://github.com/praw-dev/asyncpraw/archive/master.zip\n```\n\n----------------------------------------\n\nTITLE: Defining Method with Keyword-Only Arguments in Async PRAW (Python)\nDESCRIPTION: Demonstrates the preferred method structure in Async PRAW with keyword-only arguments sorted alphabetically.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleClass:\n    async def example_method(\n        self,\n        *,\n        arg1,\n        arg2,\n        optional_arg1=None,\n    ): ...\n```\n\n----------------------------------------\n\nTITLE: Installing Async PRAW via pip\nDESCRIPTION: Command to install Async PRAW using pip package manager. Supports Python 3.8+.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/installation.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install asyncpraw\n```\n\n----------------------------------------\n\nTITLE: Using replace_more() to Remove MoreComments Objects in Python\nDESCRIPTION: Utilizes the replace_more() method to remove all MoreComments objects from the comment forest before iteration.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/comments.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncomments = await submission.comments()\nawait comments.replace_more(limit=0)\nfor top_level_comment in comments:\n    print(top_level_comment.body)\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Logging for PRAW\nDESCRIPTION: Sets up basic console logging for PRAW and PRAWCORE at DEBUG level. This configuration enables logging of all HTTP requests to the console output.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/logging.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nhandler = logging.StreamHandler()\nhandler.setLevel(logging.DEBUG)\nfor logger_name in (\"praw\", \"prawcore\"):\n    logger = logging.getLogger(logger_name)\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Updating Async PRAW to Latest Version\nDESCRIPTION: Command to update Async PRAW to the latest version available on PyPI.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/installation.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade asyncpraw\n```\n\n----------------------------------------\n\nTITLE: Using Stream Generator with Continue After ID in Python\nDESCRIPTION: Demonstrates using the stream_generator function with the new continue_after_id parameter to start streaming after a specific item ID.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/CHANGES.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstream_generator(..., continue_after_id='some_id')\n```\n\n----------------------------------------\n\nTITLE: Toggling Read-Only Mode in Async PRAW\nDESCRIPTION: This snippet demonstrates how to toggle between read-only mode and authenticated mode in Async PRAW. Read-only mode provides access to Reddit like a logged-out user would see.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/authentication.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Enable read-only mode\nreddit.read_only = True\n\n# Disable read-only mode (must have a valid authorization)\nreddit.read_only = False\n```\n\n----------------------------------------\n\nTITLE: Changing Comment Sort Order on a Submission using Async PRAW\nDESCRIPTION: Shows how to change the comment sort order on a submission before accessing its comments. This code snippet assumes a Reddit instance has been created.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/quick_start.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# assume you have a asyncpraw.Reddit instance bound to variable `reddit`\nsubmission = await reddit.submission(\"39zje0\")\nsubmission.comment_sort = \"new\"\ntop_level_comments = await submission.comments()\n```\n\n----------------------------------------\n\nTITLE: Initializing Async PRAW Reddit Instance with Custom Ratelimit\nDESCRIPTION: This snippet demonstrates how to create an Async PRAW Reddit instance with a custom ratelimit_seconds setting. It sets the maximum wait time for ratelimit errors to 300 seconds.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/ratelimits.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpraw\n\nreddit = asyncpraw.Reddit(..., ratelimit_seconds=300)\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Older Version of Async PRAW\nDESCRIPTION: Command to install a specific older version of Async PRAW by specifying the version number.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/installation.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install asyncpraw==7.1.0\n```\n\n----------------------------------------\n\nTITLE: Reading Subreddits by Name in Python\nDESCRIPTION: Using the subreddits parameter in Reddit.info() method to specify subreddits by name.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/CHANGES.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nReddit.info(subreddits=...)\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Bot Configurations in praw.ini\nDESCRIPTION: This INI configuration example shows how to define multiple bot configurations with different OAuth credentials in a praw.ini file.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/prawini.rst#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[bot1]\nclient_id=revokedpDQy3xZ\nclient_secret=revokedoqsMk5nHCJTHLrwgvHpr\npassword=invalidht4wd50gk\nusername=fakebot1\n\n[bot2]\nclient_id=revokedcIqbclb\nclient_secret=revokedCClyu4FjVO77MYlTynfj\npassword=invalidzpiq8s59j\nusername=fakebot2\n\n[bot3]\nclient_id=revokedSbt0zor\nclient_secret=revokedNh8kwg8e5t4m6KvSrbTI\npassword=invalidlfo00esyy\nusername=fakebot3\n```\n\n----------------------------------------\n\nTITLE: Iterative RedditAPIException Handling in Python\nDESCRIPTION: Recommended approach for handling Reddit API exceptions by iterating over all error items in the RedditAPIException. This properly handles cases where multiple errors are returned from the API.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/praw7_migration.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    subreddit = await reddit.subreddit(\"test\")\n    await subreddit.submit(\"Test Title\", url=\"invalidurl\")\nexcept RedditAPIException as exception:\n    for subexception in exception.items:\n        print(subexception.error_type)\n```\n\n----------------------------------------\n\nTITLE: Replacing All MoreComments Objects in Python\nDESCRIPTION: Uses replace_more() with limit=None to replace all MoreComments objects in the comment forest, allowing full comment tree traversal.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/comments.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncomments = await submission.comments()\nawait comments.replace_more(limit=None)\nfor top_level_comment in comments:\n    print(top_level_comment.body)\n```\n\n----------------------------------------\n\nTITLE: Installing Async PRAW Development Dependencies (Zsh)\nDESCRIPTION: Installs Async PRAW in editable mode along with all development dependencies using pip in Zsh shell.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Top-Level Comments in Python\nDESCRIPTION: Iterates through the top-level comments of a submission and prints their body text. This code may raise an AttributeError for MoreComments objects.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/comments.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncomments = await submission.comments()\nfor top_level_comment in comments:\n    print(top_level_comment.body)\n```\n\n----------------------------------------\n\nTITLE: Setting Async PRAW Environment Variables in Shell\nDESCRIPTION: This code snippet demonstrates how to set Async PRAW environment variables for username and password when invoking a Python script. These variables will override values in praw.ini but not those passed directly to the Reddit class.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/environment_variables.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npraw_username=bboe praw_password=not_my_password python my_script.py\n```\n\n----------------------------------------\n\nTITLE: Using Reddit Token Manager in Python\nDESCRIPTION: Example showing the token_manager argument usage in PRAW 8 for Reddit authentication. This replaces the deprecated refresh token configuration.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/CHANGES.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nReddit(token_manager=...)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading in Async PRAW for Submissions\nDESCRIPTION: Shows how to implement lazy loading in Async PRAW when removing a submission. This approach is useful when full object data is not required for the operation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/asyncpraw_migration.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# PRAW:\n# object is not fetched and is only removed\nreddit.submission(\"id\").mod.remove()\n\n# Async PRAW:\n# network request is not made and object is lazily loaded\nsubmission = await reddit.submission(\"id\", fetch=False)\n\n# object is not fetched and is only removed\nawait submission.mod.remove()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autoclass for AsyncPRAW Subreddit documentation\nDESCRIPTION: This directive configures Sphinx to automatically generate documentation for the asyncpraw.models.Subreddit class, including any inherited members. This is part of the API reference documentation for the AsyncPRAW library.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/subreddit.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.Subreddit\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment for Async PRAW Development (Bash)\nDESCRIPTION: Creates a virtual environment for isolating the Async PRAW development environment using Python's venv module.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Creating ModNote in Python\nDESCRIPTION: Demonstrates creating a moderator note using the create_note method on a Comment or Submission object.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/CHANGES.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncomment.create_note(\"This is a mod note\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit Instance with Specific Site Configuration\nDESCRIPTION: This Python code shows how to initialize a Reddit instance using a specific site configuration from praw.ini.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/prawini.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nreddit = asyncpraw.Reddit(\"bot2\", user_agent=\"bot2 user agent\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Author Notes in Python\nDESCRIPTION: Shows how to retrieve moderator notes for the author of a Comment or Submission using the author_notes method.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/CHANGES.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnotes = submission.author_notes()\n```\n\n----------------------------------------\n\nTITLE: Documenting asyncpraw.models.Redditors Class\nDESCRIPTION: This snippet uses Sphinx documentation syntax to automatically generate documentation for the Redditors class from the asyncpraw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/reddit/redditors.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.Redditors\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Async PRAW (Bash)\nDESCRIPTION: Installs pre-commit hooks to automatically run checks when committing changes to Async PRAW.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Experimental Submission Editing with Inline Media in Python\nDESCRIPTION: Shows usage of the new experimental _edit_experimental method for editing submissions with inline media, including the preserve_inline_media parameter.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/CHANGES.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsubmission._edit_experimental(body=\"New text\", preserve_inline_media=True)\n```\n\n----------------------------------------\n\nTITLE: Inspecting PRAW Object Attributes with vars()\nDESCRIPTION: Demonstrates how to use Python's built-in vars() function to view all available attributes and their values for an Async PRAW object like a Submission. The example shows retrieving a submission by ID and pretty printing its attributes.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/quick_start.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pprint\n\n# assume you have a asyncpraw.Reddit instance bound to variable `reddit`\nsubmission = await reddit.submission(\"39zje0\")\npprint.pprint(vars(submission))\n```\n\n----------------------------------------\n\nTITLE: Correct URL Search in AsyncPRAW\nDESCRIPTION: Proper way to search for URLs in subreddits by prefixing 'url:' and using quotation marks around the URL.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/faq.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsubreddit = await reddit.subreddit(\"all\")\nasync for result in subreddit.search('url:\"https://google.com\"'):\n    # do things with results\n    ...\n```\n\n----------------------------------------\n\nTITLE: Documenting asyncpraw.models.list.base.BaseList class with Sphinx in reStructuredText\nDESCRIPTION: A Sphinx documentation directive that automatically generates API documentation for the BaseList class from the asyncpraw.models.list.base module. The directive includes inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/baselist.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.list.base.BaseList\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Linting Dependencies for Async PRAW (Bash)\nDESCRIPTION: Installs Async PRAW in editable mode along with linting dependencies using pip.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[lint]\n```\n\n----------------------------------------\n\nTITLE: Comparing Object Retrieval by Indices in PRAW and Async PRAW\nDESCRIPTION: Illustrates the change in accessing specific objects like WikiPage between PRAW and Async PRAW. In Async PRAW, string indices are replaced with get_<item name>(item) methods, and objects are fully loaded by default.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/asyncpraw_migration.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# PRAW:\n# lazily creates a WikiPage instance\npage = subreddit.wiki[\"page\"]\n\n# network request is made and item is fully fetched\nprint(page.content_md)\n\n# Async PRAW:\n# network request made and object is fully loaded\npage = await subreddit.wiki.get_page(\"page\")\n\n# network request is not made as WikiPage is already fully fetched\nprint(page.content_md)\n\n# using slices\nrule = await subreddit.mod.rules.get_rule(slice(-3, None))  # to get the last 3 rules\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Second-Level Comments in Python\nDESCRIPTION: Demonstrates how to iterate over second-level comments (replies to top-level comments) after replacing MoreComments objects.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/comments.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsubmission.comments.replace_more(limit=None)\nfor top_level_comment in submission.comments:\n    for second_level_comment in top_level_comment.replies:\n        print(second_level_comment.body)\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Request Log Output\nDESCRIPTION: Example of the log output format for HTTP requests made by Async PRAW, showing the request details and response information.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/logging.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nFetching: GET https://oauth.reddit.com/api/v1/me at 1691743155.4952002\nData: None\nParams: {'raw_json': 1}\nResponse: 200 (876 bytes) (rst-45:rem-892:used-104 ratelimit) at 1691743156.3847592\n```\n\n----------------------------------------\n\nTITLE: Documenting the MoreComments class with Sphinx in RST\nDESCRIPTION: This RST documentation snippet uses the autoclass directive to generate documentation for the asyncpraw.models.MoreComments class, including its inherited members. This is part of the Sphinx documentation system.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/more.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nMoreComments\n============\n\n.. autoclass:: asyncpraw.models.MoreComments\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Comparing Lazy Loading in PRAW and Async PRAW for Submissions\nDESCRIPTION: Demonstrates the difference in lazy loading behavior between PRAW and Async PRAW when fetching a submission. In PRAW, the object is lazily loaded, while in Async PRAW, it's fully loaded by default.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/asyncpraw_migration.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# PRAW:\n# network request is not made and object is lazily loaded\nsubmission = reddit.submission(\"id\")\n\n# network request is made and object is fully fetched\nprint(submission.score)\n\n# Async PRAW:\n# network request made and object is fully loaded\nsubmission = await reddit.submission(\"id\")\n\n# network request is not made as object is already fully fetched\nprint(submission.score)\n```\n\n----------------------------------------\n\nTITLE: Fetching Reddit OAuth2 Scopes using Python Requests\nDESCRIPTION: Script to retrieve an up-to-date listing of all Reddit OAuth2 scopes and their descriptions using the Reddit API. Makes a GET request to Reddit's scopes endpoint and formats the output.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/tutorials/refresh_token.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nresponse = requests.get(\n    \"https://www.reddit.com/api/v1/scopes.json\",\n    headers={\"User-Agent\": \"fetch-scopes by u/bboe\"},\n)\n\nfor scope, data in sorted(response.json().items()):\n    print(f\"{scope:>18s}  {data['description']}\")\n```\n\n----------------------------------------\n\nTITLE: Direct RedditAPIException Printing in Python\nDESCRIPTION: Simplified approach to handling Reddit API exceptions by directly printing the exception object, which automatically displays all contained error items.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/praw7_migration.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    subreddit = await reddit.subreddit(\"test\")\n    await subreddit.submit(\"Test Title\", url=\"invalidurl\")\nexcept RedditAPIException as exception:\n    print(exception)\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Log Message Example\nDESCRIPTION: Sample log message shown when API rate limits are encountered during POST actions.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/logging.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nRate limit hit, sleeping for 5.5 seconds\n```\n\n----------------------------------------\n\nTITLE: Documenting RuleModeration Class in Python using Sphinx\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the RuleModeration class from the asyncpraw.models.reddit.rules module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/rulemoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.rules.RuleModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Incorrect URL Search in AsyncPRAW\nDESCRIPTION: Example of incorrect way to search for URLs in subreddits that leads to redirect issues.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/faq.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsubreddit = await reddit.subreddit(\"all\")\nasync for result in subreddit.search(\"https://google.com\"):\n    # do things with results\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting HTTPS_PROXY Environment Variable for Async PRAW in Bash\nDESCRIPTION: Demonstrates how to set the HTTPS_PROXY environment variable when running a Python script that uses Async PRAW. This allows the script to use a proxy for HTTPS requests.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS_PROXY=http://localhost:3128 ./prawbot.py\n```\n\n----------------------------------------\n\nTITLE: Running Pre-push Checks for Async PRAW (Bash)\nDESCRIPTION: Runs all necessary checks and ensures documentation builds correctly before pushing changes to Async PRAW.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./pre_push.py\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditWidgetsModeration Class in reStructuredText\nDESCRIPTION: Sphinx documentation directive for auto-generating class documentation for the SubredditWidgetsModeration class, including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditwidgetsmoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.SubredditWidgetsModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Redirect Error Example in AsyncPRAW\nDESCRIPTION: Example of the error message received when trying to perform non-read-only actions with a read-only instance.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/faq.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nasyncprawcore.exceptions.Redirect: Redirect to /r/subreddit/login/ (You may be trying to perform a non-read-only action via a read-only instance.)\n```\n\n----------------------------------------\n\nTITLE: Configuring Reddit Instance with Window Size in Python\nDESCRIPTION: Sets the window_size parameter when initializing a Reddit instance to specify the rate limit window duration. The default is 600 seconds.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/CHANGES.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreddit = Reddit(window_size=600)\n```\n\n----------------------------------------\n\nTITLE: Applying Test Markers for Cassette Recording in Async PRAW (Python)\nDESCRIPTION: Demonstrates the use of pytest markers to control cassette recording and playback in Async PRAW tests.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.recorder_kwargs(allow_playback_repeats=True)\nclass TestClass:\n    @pytest.mark.recorder_kwargs(match_on=[\"uri\", \"method\", \"body\"])\n    async def test_example(self): ...\n\n    @pytest.mark.cassette_name(\"TestClass.test_example\")\n    @pytest.mark.recorder_kwargs(match_on=[\"uri\", \"method\", \"body\"])\n    async def test_example__different_assertion(self): ...\n\n    @pytest.mark.add_placeholder(generated_data_a=generate_data_a())\n    @pytest.mark.add_placeholder(generated_data_b=generate_data_b())\n    async def test_example__with_generated_placeholders(self): ...\n```\n\n----------------------------------------\n\nTITLE: Documenting CommunityList Class with Sphinx in reStructuredText\nDESCRIPTION: This snippet uses Sphinx directives to automatically generate documentation for the CommunityList class from the asyncpraw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/communitylist.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nCommunityList\n=============\n\n.. autoclass:: asyncpraw.models.CommunityList\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Development Version from GitHub\nDESCRIPTION: Command to install the latest development version of Async PRAW directly from the GitHub repository.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/installation.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade https://github.com/praw-dev/asyncpraw/archive/master.zip\n```\n\n----------------------------------------\n\nTITLE: Legacy APIException Handling in Python\nDESCRIPTION: Example showing the deprecated way of handling Reddit API exceptions using APIException class. This approach only handles single errors and will be removed in Async PRAW 8.0.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/praw7_migration.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    subreddit = await reddit.subreddit(\"test\")\n    await subreddit.submit(\"Test Title\", url=\"invalidurl\")\nexcept APIException as exception:\n    print(exception.error_type)\n```\n\n----------------------------------------\n\nTITLE: Documenting ButtonWidget Class in Python\nDESCRIPTION: This snippet uses Sphinx autodoc to generate documentation for the ButtonWidget class from the asyncpraw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/buttonwidget.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: asyncpraw.models.ButtonWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Async PRAW Testing (Bash)\nDESCRIPTION: Sets up environment variables required for safely recording test interactions without leaking credentials in Async PRAW.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport prawtest_client_id=myclientid\nexport prawtest_client_secret=myclientsecret\nexport prawtest_password=mypassword\nexport prawtest_test_subreddit=test\nexport prawtest_username=myusername\nexport prawtest_user_agent=praw_pytest\n```\n\n----------------------------------------\n\nTITLE: Importing Async PRAW Exceptions Module\nDESCRIPTION: Sphinx documentation directive for automatically generating documentation for the asyncpraw.exceptions module, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/exceptions.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: asyncpraw.exceptions\\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for PRAW Collection Class\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the Collection class from asyncpraw.models, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/collection.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nCollection\n==========\n\n.. autoclass:: asyncpraw.models.Collection\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Running Pytest for Async PRAW (Bash)\nDESCRIPTION: Executes the test suite for Async PRAW using pytest.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Documentation\nDESCRIPTION: ReStructuredText markup defining the documentation structure and organization of AsyncPRAW's auxiliary classes, broken down into logical categories with links to individual class documentation pages.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n    :caption: Collections\n\n    other/collection\n    other/collectionmoderation\n    other/subredditcollections\n    other/subredditcollectionsmoderation\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for Message Class in PRAW using reStructuredText\nDESCRIPTION: This snippet uses the autoclass directive to automatically generate documentation for the Message class from the asyncpraw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/message.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.Message\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Async PRAW Development Dependencies (Bash)\nDESCRIPTION: Installs Async PRAW in editable mode along with all development dependencies using pip.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[dev]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for Asyncpraw Comment Model\nDESCRIPTION: This snippet sets up the Sphinx autodoc configuration for the Comment class in the asyncpraw.models module. It includes inherited members in the generated documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/comment.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.Comment\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autoclass Directive for AsyncPRAW InlineGif Model\nDESCRIPTION: A Sphinx directive that auto-generates documentation for the InlineGif class in AsyncPRAW. The directive includes all inherited members to provide comprehensive documentation of the class's functionality.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/inlinegif.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.InlineGif\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on MacOS/Linux (Bash)\nDESCRIPTION: Activates the virtual environment for Async PRAW development on MacOS or Linux systems.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for asyncpraw.models.Draft\nDESCRIPTION: A Sphinx documentation directive that automatically generates API documentation for the Draft class in the asyncpraw library. The directive includes all inherited members in the generated documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/draft.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.Draft\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining FullnameMixin Documentation in RST\nDESCRIPTION: Sphinx documentation stub that uses the autoclass directive to automatically generate documentation for the FullnameMixin class from asyncpraw.models.reddit.mixins, including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/fullnamemixin.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nFullnameMixin\n=============\n\n.. autoclass:: asyncpraw.models.reddit.mixins.FullnameMixin\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for AsyncPRAW Submission Class\nDESCRIPTION: This directive configures Sphinx to automatically document the Submission class from the asyncpraw.models module. It includes inherited members and specifies that the private method _edit_experimental should be included in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/submission.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.Submission\n    :inherited-members:\n    :private-members: _edit_experimental\n```\n\n----------------------------------------\n\nTITLE: Generating WikiPage Class Documentation with Sphinx in reStructuredText\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the WikiPage class from the asyncpraw.models.reddit.wikipage module. It includes inherited members in the documentation output.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/wikipage.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.wikipage.WikiPage\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for CommentHelper Class in PRAW\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the CommentHelper class in PRAW. It includes all inherited members of the class.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/commenthelper.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.listing.mixins.subreddit.CommentHelper\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for AsyncPRAW ListingGenerator Class\nDESCRIPTION: Uses Sphinx's autoclass directive to generate documentation for the ListingGenerator class from the asyncpraw.models module, including all inherited members. This directive instructs Sphinx to automatically document the class and its methods.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/listinggenerator.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.ListingGenerator\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Emoji Class in RST\nDESCRIPTION: Sphinx documentation directive for automatically generating documentation from the Emoji class in asyncpraw.models.reddit.emoji module, including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/emoji.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nEmoji\n=====\n\n.. autoclass:: asyncpraw.models.reddit.emoji.Emoji\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Including Config Class Documentation with Sphinx in RST\nDESCRIPTION: This RST code uses Sphinx's autoclass directive to automatically generate documentation for the asyncpraw.config.Config class, including all its inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/config.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nConfig\n======\n\n.. autoclass:: asyncpraw.config.Config\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting up automodule directive for token_manager in reStructuredText\nDESCRIPTION: This snippet configures the Sphinx documentation generator to automatically document the asyncpraw.util.token_manager module, including any inherited members from parent classes.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/token_manager.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: asyncpraw.util.token_manager\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining ImageData Documentation with Sphinx in reStructuredText\nDESCRIPTION: This directive instructs Sphinx to automatically generate documentation for the asyncpraw.models.ImageData class, including all inherited members. This is part of the API documentation for the asyncpraw library.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/imagedata.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.ImageData\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure in RST Format\nDESCRIPTION: ReStructuredText code that defines the documentation hierarchy and organization through toctree directives. It sets up sections for different aspects of the Async PRAW library documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :caption: Getting Started\n\n    getting_started/quick_start\n    getting_started/installation\n    getting_started/authentication\n    getting_started/configuration\n    getting_started/multiple_instances\n    getting_started/logging\n    getting_started/ratelimits\n    getting_started/faq\n\n.. toctree::\n    :maxdepth: 1\n    :caption: Code Overview\n\n    code_overview/reddit_instance\n    code_overview/asyncpraw_models\n    code_overview/exceptions\n    code_overview/other\n\n.. toctree::\n    :maxdepth: 1\n    :caption: Tutorials\n\n    tutorials/comments.rst\n    tutorials/refresh_token.rst\n    tutorials/reply_bot.rst\n\n.. toctree::\n    :maxdepth: 1\n    :caption: Package Info\n\n    package_info/change_log\n    package_info/contributing\n    package_info/glossary\n    package_info/asyncpraw_migration\n    package_info/praw7_migration\n    package_info/references\n\n.. toctree::\n    :hidden:\n\n    genindex\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for AsyncPRAW LiveThread class\nDESCRIPTION: A reStructuredText directive that uses Sphinx's autodoc extension to automatically generate documentation for the LiveThread class from asyncpraw.models. The ':inherited-members:' option ensures that inherited methods and attributes are included in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/livethread.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.LiveThread\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Viewing Environment Variables in Python\nDESCRIPTION: This Python snippet demonstrates how to access and print the value of an environment variable using the os module.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/prawini.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nprint(os.environ.get(\"<variable>\", \"\"))\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for CommentModeration Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the CommentModeration class from the asyncpraw.models.reddit.comment module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/commentmoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.comment.CommentModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autoclass directive for AsyncPRAW InlineVideo class\nDESCRIPTION: A reStructuredText directive that instructs Sphinx to automatically generate documentation for the InlineVideo class in the asyncpraw.models package. The directive includes the class itself and all its inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/inlinevideo.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.InlineVideo\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation URL Redirects in ReadTheDocs\nDESCRIPTION: A list of URL redirect mappings used to maintain backwards compatibility as documentation structure changes. Each line maps an old URL path to its new location using the arrow notation (->) to indicate the redirect direction.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/redirect_log.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/code_overview/exceptions.html -> /pages/exceptions.html\n/code_overview/other.html -> /pages/code_overview.html\n/code_overview/asyncpraw_models.html -> /pages/code_overview.html\n/code_overview/reddit_instance.html -> /pages/code_overview.html\n/getting_started/authentication.html -> /pages/oauth.html\n/getting_started/configuration.html -> /pages/configuration_files.html\n/getting_started/configuration/environment_variables.html -> /pages/configuration_files.html\n/getting_started/configuration/options.html -> /pages/configuration_files.html\n/getting_started/configuration/prawini.html -> /pages/configuration_files.html\n/getting_started/configuration/reddit_initialization.html -> /pages/configuration_files.html\n/getting_started/installation.html -> /\n/getting_started/quick_start.html -> /pages/getting_started.html\n/package_info/change_log.html -> /pages/changelog.html\n/package_info/contributing.html -> /pages/contributor_guidelines.html\n/package_info/references.html -> /\n/pages/call_and_response_bot.html -> /tutorials/reply_bot.html\n/pages/changelog.html -> /package_info/change_log.html\n/pages/code_overview.html -> /code_overview/reddit_instance.html\n/pages/comment_parsing.html -> /tutorials/comments.html\n/pages/configuration_files.html -> /getting_started/configuration.html\n/pages/contributor_guidelines.html -> /package_info/contributing.html\n/pages/exceptions.html -> /code_overview/exceptions.html\n/pages/faq.html -> /\n/pages/getting_started.html -> /getting_started/quick_start.html\n/pages/lazy-loading.html -> /\n/pages/multiprocess.html -> /\n/pages/oauth.html -> /getting_started/authentication.html\n/pages/useful_scripts.html -> /\n/pages/writing_a_bot.html -> /tutorials/reply_bot.html\n/tutorials/comments.html -> /pages/comment_parsing.html\n/tutorials/refresh_token.html -> /pages/oauth.html\n/tutorials/reply_bot.html -> /pages/writing_a_bot.html\n```\n\n----------------------------------------\n\nTITLE: Defining ModmailConversation Class Documentation with Sphinx in RST\nDESCRIPTION: This RST (reStructuredText) snippet configures Sphinx documentation for the ModmailConversation class from the asyncpraw.models.reddit.modmail module. It uses the autoclass directive to automatically generate documentation including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/modmailconversation.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nModmailConversation\n===================\n\n.. autoclass:: asyncpraw.models.reddit.modmail.ModmailConversation\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Flow Table Structure in ReStructuredText\nDESCRIPTION: A ReStructuredText table that organizes Reddit API OAuth authentication flows by application type. The table uses a grid format with merged cells to show which authentication flows are applicable to script applications, web applications, and installed applications.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/authentication_flow_table.txt#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. rst-class:: center_table_items\n\n+-----------------+-----------------------------------------------+-----------------------------------------------+-------------------------------+\n|Application Type |                    Script                     |                      Web                      |           Installed           |\n+=================+===============================================+===============================================+===============================+\n|  Default Flow   |        :ref:`Password <password_flow>`        |                            :ref:`Code <code_flow>`                            |\n+-----------------+-----------------------------------------------+-----------------------------------------------+-------------------------------+\n|                 |            :ref:`Code <code_flow>`            |                                               |                               |\n+                 +-----------------------------------------------+:ref:`application_only_client_credentials_flow`+:ref:`Implicit <implicit_flow>`+\n|Alternative Flows|:ref:`application_only_client_credentials_flow`|                                               |                               |\n+                 +-----------------------------------------------+-----------------------------------------------+-------------------------------+\n|                 |                                         :ref:`application_only_installed_client_flow`                                         |\n+-----------------+-------------------------------------------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Documenting ModNote Class with reStructuredText\nDESCRIPTION: Documentation directive for automatically generating API documentation for the ModNote class from asyncpraw.models, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/mod_note.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.ModNote\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for LiveThreadContribution Class\nDESCRIPTION: ReStructuredText documentation directive that automatically generates class documentation for the LiveThreadContribution class from asyncpraw.models.reddit.live module, including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/livethreadcontribution.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.live.LiveThreadContribution\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for SubmissionModeration in asyncpraw using Sphinx\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the SubmissionModeration class from asyncpraw.models.reddit.submission, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/submissionmoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.submission.SubmissionModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variables in MacOS/Linux\nDESCRIPTION: This bash command demonstrates how to echo the value of an environment variable in MacOS or Linux terminals.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/prawini.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"$<variable>\"\n```\n\n----------------------------------------\n\nTITLE: Generating Stylesheet Class Documentation using autodoc in Python\nDESCRIPTION: This code snippet uses Sphinx's autodoc extension to automatically generate documentation for the Stylesheet class from the asyncpraw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/stylesheet.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: asyncpraw.models.Stylesheet\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for LiveUpdateContribution Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the LiveUpdateContribution class. It includes all inherited members in the documentation output.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/liveupdatecontribution.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.live.LiveUpdateContribution\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining SubredditModeration Documentation Structure in RST\nDESCRIPTION: RST (reStructuredText) directive for automatically generating documentation for the SubredditModeration class in asyncpraw. The directive includes inherited members to ensure complete documentation coverage.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditmoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSubredditModeration\n===================\n\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variables in Windows Command Prompt\nDESCRIPTION: This batch command shows how to echo the value of an environment variable in Windows Command Prompt.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/prawini.rst#2025-04-23_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\necho \"%<variable>%\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for asyncpraw ModmailMessage Class in reStructuredText\nDESCRIPTION: Sphinx documentation configuration for the ModmailMessage class in the asyncpraw library. This reStructuredText directive instructs the documentation generator to include the class definition and all inherited members in the generated documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/modmailmessage.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nModmailMessage\n==============\n\n.. autoclass:: asyncpraw.models.ModmailMessage\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Menu Class RST Directive\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the Menu class from asyncpraw.models, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/menu.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.Menu\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting CommentForest Class in Python using Sphinx\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the CommentForest class from the asyncpraw.models.comment_forest module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/commentforest.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.comment_forest.CommentForest\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows (Batch)\nDESCRIPTION: Activates the virtual environment for Async PRAW development on Windows systems using Command Prompt.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_2\n\nLANGUAGE: bat\nCODE:\n```\n.venv\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Documenting ModeratorRelationship Class Using reStructuredText\nDESCRIPTION: A reStructuredText directive that generates documentation for the ModeratorRelationship class from the asyncpraw package. This directive uses autoclass to automatically pull documentation from the class's docstrings, including any inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/moderatorrelationship.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.ModeratorRelationship\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining ModAction Class Documentation in RST\nDESCRIPTION: RST directive defining automated documentation generation for the asyncpraw.models.ModAction class, including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/mod_action.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.ModAction\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoClass Directive for RedditBase in reStructuredText\nDESCRIPTION: This reStructuredText directive instructs Sphinx to automatically generate documentation for the RedditBase class from the asyncpraw.models.reddit.base module. The ':inherited-members:' flag ensures that inherited methods and attributes are included in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/redditbase.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.base.RedditBase\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining SubredditModerationStream Class Documentation in RST\nDESCRIPTION: ReStructuredText directive for documenting the SubredditModerationStream class from asyncpraw library, including inherited members\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditmoderationstream.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditModerationStream\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for PostFlairWidget Class\nDESCRIPTION: Sphinx documentation directive that configures automatic documentation generation for the PostFlairWidget class from the asyncpraw.models module, including documentation of inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/postflairwidget.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.PostFlairWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for SubredditRulesModeration Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the SubredditRulesModeration class from the asyncpraw.models.reddit.rules module. It includes inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditrulesmoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.rules.SubredditRulesModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining SubredditMessage Documentation Structure in RST\nDESCRIPTION: This RST (reStructuredText) snippet defines the documentation structure for the SubredditMessage class in the asyncpraw library. It uses the autoclass directive to automatically include documentation for the class and its inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditmessage.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSubredditMessage\n================\n\n.. autoclass:: asyncpraw.models.SubredditMessage\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RedditorList Class Documentation Directive in RST\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for the RedditorList class from asyncpraw.models, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/redditorlist.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.RedditorList\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Note Block for Async PRAW Attributes\nDESCRIPTION: A reStructuredText note block explaining how Async PRAW handles dynamic attributes from the Reddit API. It describes that attributes are provided dynamically and may change, with instructions for discovering available attributes and contributing documentation updates.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/typical_attributes.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. note::\n\n    This table describes attributes that typically belong to objects of this class.\n    Async PRAW dynamically provides the attributes that Reddit returns via the API.\n    Since those attributes are subject to change on Reddit's end, Async PRAW makes no\n    effort to document any new/removed/changed attributes, other than to instruct you on\n    how to discover what is available. As a result, this table of attributes may not be\n    complete. See :ref:`determine-available-attributes-of-an-object` for detailed\n    information.\n\n    If you would like to add an attribute to this table, feel free to open a `pull\n    request <https://github.com/praw-dev/asyncpraw/pulls>`_.\n```\n\n----------------------------------------\n\nTITLE: Defining API Documentation for ModeratedList Class in reStructuredText\nDESCRIPTION: Documentation setup for the ModeratedList class using reStructuredText with the autoclass directive. The directive instructs the documentation generator to include the ModeratedList class and its inherited members in the generated API documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/moderatedlist.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nModeratedList\n=============\n\n.. autoclass:: asyncpraw.models.ModeratedList\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx RemovalReason Documentation\nDESCRIPTION: ReStructuredText directive for auto-generating documentation for the RemovalReason class from asyncpraw, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/removalreason.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.removal_reasons.RemovalReason\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting DraftHelper Class in asyncpraw for Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the DraftHelper class in the asyncpraw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/reddit/drafts.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.DraftHelper\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Trophy Class Documentation with Sphinx in RST\nDESCRIPTION: This RST (reStructuredText) snippet configures the Sphinx documentation generator to automatically document the Trophy class from the asyncpraw.models module, including its __str__ method.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/trophy.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTrophy\n======\n\n.. autoclass:: asyncpraw.models.Trophy\n    :members: __str__\n```\n\n----------------------------------------\n\nTITLE: SubredditFilters Class Documentation in RST\nDESCRIPTION: ReStructuredText directive for auto-generating documentation from the SubredditFilters class, including all inherited members\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditfilters.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditFilters\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Referencing asyncpraw LiveHelper Class in reStructuredText (RST)\nDESCRIPTION: This snippet uses Sphinx autoclass directive to automatically generate documentation for the LiveHelper class from the asyncpraw.models module, including all its inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/reddit/live.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.LiveHelper\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for ModNoteMixin Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the ModNoteMixin class from the asyncpraw.models.reddit.mixins module. It includes all members of the class in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/mod_note_mixin.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.mixins.ModNoteMixin\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for SubredditFlairTemplates Class\nDESCRIPTION: ReStructuredText documentation directive that auto-generates documentation for the SubredditFlairTemplates class including all inherited members from its parent classes.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditflairtemplates.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditFlairTemplates\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx documentation for SubredditWidgets class in asyncpraw\nDESCRIPTION: A Sphinx documentation directive that auto-generates documentation for the SubredditWidgets class from the asyncpraw.models module. The directive includes inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditwidgets.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.SubredditWidgets\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Reddit Instance Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure for the Reddit instance documentation using reStructuredText format. It includes an autoclass directive to automatically document the Reddit class and its inherited members, followed by a table of contents tree linking to helper class documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/reddit_instance.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nThe Reddit Instance\n===================\n\n.. autoclass:: asyncpraw.Reddit\n    :inherited-members:\n\n.. toctree::\n    :maxdepth: 2\n    :caption: Helper Classes\n\n    reddit/drafts\n    reddit/front\n    reddit/inbox\n    reddit/live\n    reddit/multireddit\n    reddit/redditors\n    reddit/subreddit\n    reddit/subreddits\n    reddit/user\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditLinkFlairTemplates class in Sphinx (restructuredtext)\nDESCRIPTION: This is a Sphinx documentation directive that automatically generates API documentation for the SubredditLinkFlairTemplates class from the asyncpraw.models.reddit.subreddit module. The directive includes inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditlinkflairtemplates.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditLinkFlairTemplates\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditQuarantine Class with Sphinx in RST\nDESCRIPTION: This RST directive uses Sphinx's autoclass feature to generate documentation for the SubredditQuarantine class from the asyncpraw.models.reddit.subreddit module, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditquarantine.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditQuarantine\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Preferences Class in asyncpraw with RST\nDESCRIPTION: This RST code snippet generates documentation for the Preferences class in the asyncpraw.models module. It uses the autoclass directive to automatically include all inherited members of the class.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/preferences.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nPreferences\n===========\n\n.. autoclass:: asyncpraw.models.Preferences\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting BaseModNotes Class Reference in reStructuredText\nDESCRIPTION: A reStructuredText directive that automatically generates documentation for the BaseModNotes class from the asyncpraw.models.mod_notes module, including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/base_mod_notes.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.mod_notes.BaseModNotes\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditRedditorFlairTemplates Class in RST\nDESCRIPTION: ReStructuredText documentation directive that auto-generates class documentation for SubredditRedditorFlairTemplates including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditredditorflairtemplates.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditRedditorFlairTemplates\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditRemovalReasons Class in reStructuredText\nDESCRIPTION: This snippet uses the autoclass directive to generate documentation for the SubredditRemovalReasons class from the asyncpraw.models.reddit.removal_reasons module. It includes inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditremovalreasons.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.removal_reasons.SubredditRemovalReasons\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for SubredditWiki Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to automatically generate documentation for the SubredditWiki class from the asyncpraw.models.reddit.subreddit module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditwiki.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditWiki\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining SubredditRelationship class documentation with Sphinx in RST\nDESCRIPTION: Uses Sphinx's autoclass directive to generate documentation for the SubredditRelationship class from the asyncpraw.models.reddit.subreddit module, including all inherited members. This is part of the AsyncPRAW library documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditrelationship.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditRelationship\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditEmoji Class with reStructuredText\nDESCRIPTION: A reStructuredText directive that automatically generates documentation for the SubredditEmoji class from the asyncpraw.models.reddit.emoji module. The directive includes inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditemoji.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSubredditEmoji\n==============\n\n.. autoclass:: asyncpraw.models.reddit.emoji.SubredditEmoji\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for SubredditStylesheet Class\nDESCRIPTION: ReStructuredText directive for automatically generating class documentation from docstrings, including inherited members from parent classes.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditstylesheet.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditStylesheet\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation for PRAW Front Class\nDESCRIPTION: ReStructuredText documentation configuration for the asyncpraw.models.Front class, including inherited members in the documentation generation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/reddit/front.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nreddit.front\n============\n\n.. autoclass:: asyncpraw.models.Front\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autoclass for InboxableMixin in restructuredtext\nDESCRIPTION: This snippet configures Sphinx to automatically generate documentation for the InboxableMixin class from the asyncpraw.models.reddit.mixins module, including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/inboxablemixin.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.mixins.InboxableMixin\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Referencing Redditor Class Documentation in restructuredtext\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the asyncpraw.models.Redditor class, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/redditor.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.Redditor\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining SubredditCollectionsModeration Class Documentation in reStructuredText\nDESCRIPTION: This snippet specifies how to document the SubredditCollectionsModeration class using the Sphinx autoclass directive. The directive includes inherited members in the documentation for this class from asyncpraw's Reddit collections module.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditcollectionsmoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nSubredditCollectionsModeration\n==============================\n\n.. autoclass:: asyncpraw.models.reddit.collections.SubredditCollectionsModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Inbox Class in RST Format\nDESCRIPTION: A Sphinx documentation directive that references the asyncpraw.models.Inbox class and includes all inherited members in the generated documentation. This is used to generate API documentation for the asynchronous Python Reddit API Wrapper.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/reddit/inbox.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.Inbox\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Widget Class Documentation in reStructuredText\nDESCRIPTION: This snippet uses the autoclass directive to automatically generate documentation for the Widget class from the asyncpraw.models module. It includes all inherited members of the class.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/widget.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nWidget\n======\n\n.. autoclass:: asyncpraw.models.Widget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionModeration Class Documentation with reStructuredText\nDESCRIPTION: ReStructuredText directive that generates documentation for the asyncpraw.models.reddit.collections.CollectionModeration class including its inherited members. This is part of the Sphinx documentation system used to build the AsyncPRAW API documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/collectionmoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.collections.CollectionModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditHelper Class Using reStructuredText\nDESCRIPTION: This code snippet uses the Sphinx autoclass directive to automatically generate documentation for the SubredditHelper class from the asyncpraw.models module, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/reddit/subreddit.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.SubredditHelper\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining LiveContributorRelationship Documentation Page in reStructuredText\nDESCRIPTION: This snippet defines a documentation page for the LiveContributorRelationship class using reStructuredText format. It includes a heading and an autoclass directive that automatically generates documentation from the class docstrings, including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/livecontributorrelationship.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nLiveContributorRelationship\n===========================\n\n.. autoclass:: asyncpraw.models.reddit.live.LiveContributorRelationship\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditStream Class with Sphinx in reStructuredText\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the SubredditStream class from the asyncpraw.models.reddit.subreddit module, including all inherited members. This is commonly used in Python project documentation to automatically extract docstrings from code.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditstream.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditStream\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for UserSubreddit Class in asyncpraw\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the UserSubreddit class in the asyncpraw.models module. The directive includes all inherited members from parent classes.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/usersubreddit.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.UserSubreddit\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting User Class - Sphinx RST\nDESCRIPTION: Sphinx documentation directive to auto-generate documentation for the asyncpraw.models.User class including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/reddit/user.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nreddit.user\n===========\n\n.. autoclass:: asyncpraw.models.User\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for RedditorModNotes Class in Python\nDESCRIPTION: This snippet uses the Sphinx autoclass directive to automatically generate documentation for the RedditorModNotes class from the asyncpraw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/redditor_mod_notes.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.RedditorModNotes\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining LiveThreadStream class documentation in RST\nDESCRIPTION: Sphinx documentation directive for the LiveThreadStream class in the asyncpraw.models.reddit.live module. The directive includes inherited members in the generated documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/livethreadstream.rst#2025-04-23_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\nLiveThreadStream\n================\n\n.. autoclass:: asyncpraw.models.reddit.live.LiveThreadStream\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining RedditorStream Class Documentation Structure in RST\nDESCRIPTION: RestructuredText directive that automatically generates documentation for the RedditorStream class, including all inherited members from parent classes.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/redditorstream.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.redditor.RedditorStream\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Fullname Object Types in reStructuredText\nDESCRIPTION: This snippet defines the six different types of objects returned from Reddit, identified by their fullname prefixes. It includes comments, redditors, submissions, messages, subreddits, and awards.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/glossary.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n- ``t1`` These object represent :class:`.Comment`\\ s.\n\n  .. _fullname_t2:\n\n  - ``t2`` These object represent :class:`.Redditor`\\ s.\n\n  .. _fullname_t3:\n\n  - ``t3`` These object represent :class:`.Submission`\\ s.\n\n  .. _fullname_t4:\n\n  - ``t4`` These object represent :class:`.Message`\\ s.\n\n  .. _fullname_t5:\n\n  - ``t5`` These object represent :class:`.Subreddit`\\ s.\n\n  .. _fullname_t6:\n\n  - ``t6`` These object represent ``Award``\\ s, such as ``Reddit Gold`` or ``Reddit\n    Silver``.\n```\n\n----------------------------------------\n\nTITLE: Documenting RedditModNotes Class Using reStructuredText\nDESCRIPTION: This snippet uses reStructuredText to create documentation for the RedditModNotes class from the asyncpraw.models module. It employs the autoclass directive to automatically include the class documentation and its inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/reddit_mod_notes.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nRedditModNotes\n==============\n\n.. autoclass:: asyncpraw.models.RedditModNotes\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Modmail Class in Python\nDESCRIPTION: This code snippet uses Sphinx documentation syntax to automatically generate documentation for the Modmail class. It includes inherited members from parent classes.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/modmail.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.Modmail\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for Auth Class in asyncpraw using reStructuredText\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the Auth class in the asyncpraw.models module, including all inherited members. This directive tells the documentation generator to pull docstrings and method signatures from the Python source code.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/auth.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.Auth\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Reddit Awards ReStructuredText Definition\nDESCRIPTION: ReStructuredText formatted list defining Reddit awards with their associated image paths, IDs and descriptions. Each entry follows a consistent format of award name, image directive, award ID and description with point value.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/awards.txt#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nDread                       .. image:: https://preview.redd.it/award_images/t5_22cerq/nvfe4gyawnf51_Dread.png?width=64&height=64&crop=smart&auto=webp&s=34247d8bba8dc5aa7eaed6e81135da0c935d37f3                    award_81cf5c92-8500-498c-9c94-3e4034cece0a  Staring into the abyss and it's staring right back  100\nEvil Cackle                 .. image:: https://preview.redd.it/award_images/t5_22cerq/43zl6dfcg9e51_EvilCackle.png?width=64&height=64&crop=smart&auto=webp&s=bd7d6c66b7594ac91ff2d8a7d86340a0f49a153c               award_483d8e29-bbe5-404e-a09a-c2d7b16c4fff  Laugh like a supervillain                           100\n```\n\n----------------------------------------\n\nTITLE: Documentation Reference for SubredditModNotes Class in asyncpraw\nDESCRIPTION: Sphinx documentation directive that automatically generates class documentation from docstrings for the SubredditModNotes class in the asyncpraw.models module. The inherited-members option ensures that inherited methods and attributes are also documented.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subreddit_mod_notes.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.SubredditModNotes\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PollData Class in Python using Sphinx\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the PollData class from the asyncpraw.models.reddit.poll module. It includes all inherited members of the class.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/polldata.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.poll.PollData\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for AsyncPRAW Subreddits Class\nDESCRIPTION: A reStructuredText directive that uses Sphinx's autoclass feature to automatically generate documentation for the Subreddits class in the asyncpraw.models module, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/reddit/subreddits.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.Subreddits\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Reddit Awards RST Documentation\nDESCRIPTION: ReStructuredText format documentation listing Reddit awards with their images and metadata including award IDs, descriptions, and coin values.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/awards.txt#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nSuper Heart Eyes            .. image:: https://www.redditstatic.com/gold/awards/icon/Superheart_64.png                                                                                                              award_6220ecfe-4552-4949-aa13-fb1fb7db537c  When the love is out of control.                    325\nTable Slap                  .. image:: https://www.redditstatic.com/gold/awards/icon/TableSlap_64.png                                                                                                               award_9f928aff-c9f5-4e7e-aa91-8619dce60f1c  When laughter meets percussion                      325\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditListingMixin Class in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the SubredditListingMixin class. It includes all inherited members of the class.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditlistingmixin.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.listing.mixins.subreddit.SubredditListingMixin\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Referencing SubmissionFlair Class with Sphinx Autodoc in RST\nDESCRIPTION: This RST directive instructs Sphinx to automatically generate documentation for the SubmissionFlair class from the asyncpraw.models.reddit.submission module, including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/submissionflair.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.submission.SubmissionFlair\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Async PRAW Models in reStructuredText\nDESCRIPTION: This snippet creates a table of contents tree for Async PRAW models documentation using reStructuredText format. It defines a toctree directive with maximum depth of 2 and includes links to documentation for various Reddit object models.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/asyncpraw_models.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n    :caption: Models\n\n    models/comment\n    models/draft\n    models/livethread\n    models/liveupdate\n    models/message\n    models/modmailconversation\n    models/more\n    models/multireddit\n    models/redditor\n    models/submission\n    models/subreddit\n    models/wikipage\n```\n\n----------------------------------------\n\nTITLE: Defining Reddit Awards Table in reStructuredText\nDESCRIPTION: This code snippet defines a table in reStructuredText format that lists various Reddit awards. It includes columns for the award name, image, ID, description, and coin cost.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/awards.txt#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n==========================  ======================================================================================================================================================================================  ==========================================  ==================================================  ======\nWholesome (Pro)             .. image:: https://preview.redd.it/award_images/t5_22cerq/0o2j782f00e41_WholesomeSuperpro.png?width=64&height=64&crop=smart&auto=webp&s=2a04235b56e4fbc90106067bfe0d61bd60300c4f        award_1f0462ee-18f5-4f33-89cf-f1f79336a452  When you come across a feel-good thing. Gives       500\n                                                                                                                                                                                                                                                                %{coin_symbol}100 Coins to both the author and the\n                                                                                                                                                                                                                                                                community.\nPot o' Coins                .. image:: https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=64&height=64&crop=smart&auto=webp&s=7bb8b7ab622f25b5e6f7f2068663b5ea964d2957                award_35c78e6e-507b-4f1d-b3d8-ed43840909a8  The treasure at the end of the rainbow. Gives the   1000\n                                                                                                                                                                                                                                                                author 800 Coins to do with as they please.\nCornucopia                  .. image:: https://preview.redd.it/award_images/t5_22cerq/27xs8z0ja3u51_Cornucopia.png?width=64&height=64&crop=smart&auto=webp&s=4298b88d2511a0951817f440fe5244f6dcf513a9               award_9a123cdb-d26d-4d0c-b7fa-46750b8289fa  A candy cornucopia of love that gives the author a  2000\n                                                                                                                                                                                                                                                                bounty of 1500 Coins.\nArgentium                   .. image:: https://www.redditstatic.com/gold/awards/icon/Mithril_64.png                                                                                                                 award_4ca5a4e6-8873-4ac5-99b9-71b1d5161a91  Latin for distinguished. Shimmers like silver &     20000\n                                                                                                                                                                                                                                                                stronger than steel. When someone deserves outsize\n                                                                                                                                                                                                                                                                recognition. This award gives a three-month\n                                                                                                                                                                                                                                                                Premium subscription and 2500 coins to the\n                                                                                                                                                                                                                                                                recipient.\nTernion All-Powerful        .. image:: https://www.redditstatic.com/gold/awards/icon/Trinity_64.png                                                                                                                 award_2385c499-a1fb-44ec-b9b7-d260f3dc55de  Legendary level. A no holds barred celebration of   50000\n                                                                                                                                                                                                                                                                something that hits you in the heart, mind and\n                                                                                                                                                                                                                                                                soul. Some might call it unachievanium. Gives the\n                                                                                                                                                                                                                                                                author 6 months of Premium and 5000 Coins.\n==========================  ======================================================================================================================================================================================  ==========================================  ==================================================  ======\n```\n\n----------------------------------------\n\nTITLE: Documenting Styles Class in Python using Sphinx\nDESCRIPTION: This code snippet uses Sphinx's autodoc extension to automatically generate documentation for the Styles class from the asyncpraw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/styles.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.Styles\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for PRAW Rule Class in reStructuredText\nDESCRIPTION: A Sphinx documentation directive that generates API documentation for the asyncpraw.models.Rule class, including all inherited members. This directive instructs Sphinx to automatically extract and format the class documentation from the source code.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/rule.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.Rule\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting the LiveUpdate class with Sphinx autoclass directive in RST\nDESCRIPTION: This RST code instructs Sphinx to automatically generate documentation for the LiveUpdate class from the asyncpraw.models module, including documentation for inherited members. This is part of the AsyncPRAW API documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/liveupdate.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nLiveUpdate\n==========\n\n.. autoclass:: asyncpraw.models.LiveUpdate\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubListing Class in Python using Sphinx\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the SubListing class from the asyncpraw.models.listing.mixins.redditor module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/sublisting.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.listing.mixins.redditor.SubListing\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditRules Class with reStructuredText\nDESCRIPTION: This snippet uses Sphinx's reStructuredText syntax to generate API documentation for the SubredditRules class from the asyncpraw.models.reddit.rules module. The autoclass directive automatically extracts class documentation including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditrules.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nSubredditRules\n==============\n\n.. autoclass:: asyncpraw.models.reddit.rules.SubredditRules\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Auto-Documentation for asyncpraw Multireddit Class\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the Multireddit class from asyncpraw.models, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/models/multireddit.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.Multireddit\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for AsyncPRAW ImageWidget Class in RST\nDESCRIPTION: A reStructuredText directive that configures Sphinx to automatically generate documentation for the ImageWidget class from the asyncpraw.models module, including all inherited members. This is used in the API documentation to document widget functionality for Reddit subreddits.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/imagewidget.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.ImageWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Utility Classes in RST\nDESCRIPTION: Sphinx/RST documentation describing the utility classes and functions in the asyncpraw.models.util module. Contains autodoc directives for BoundedSet, ExponentialCounter and utility functions.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/util.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nUtil\n====\n\n.. autoclass:: asyncpraw.models.util.BoundedSet\n    :inherited-members:\n\n.. autoclass:: asyncpraw.models.util.ExponentialCounter\n    :inherited-members:\n\n.. autofunction:: asyncpraw.models.util.permissions_string\n\n.. autofunction:: asyncpraw.models.util.stream_generator\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variables in Windows PowerShell\nDESCRIPTION: This PowerShell command illustrates how to output the value of an environment variable in Windows PowerShell.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/getting_started/configuration/prawini.rst#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Output \"$env:<variable>\"\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for InlineMedia Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the InlineMedia class from the asyncpraw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/inlinemedia.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.InlineMedia\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating IDCard Class Documentation in Sphinx for AsyncPRAW\nDESCRIPTION: A reStructuredText directive that uses Sphinx's autoclass feature to automatically generate documentation for the asyncpraw.models.IDCard class, including all inherited members. This creates comprehensive API documentation for the IDCard class.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/idcard.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.IDCard\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for asyncpraw.models.Submenu\nDESCRIPTION: Sphinx directive that automatically generates documentation for the asyncpraw.models.Submenu class from its docstrings. The :inherited-members: option ensures that inherited methods and properties are also documented.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/submenu.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.Submenu\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting RulesWidget Class in AsyncPRAW\nDESCRIPTION: This snippet uses the Sphinx autoclass directive to automatically generate documentation for the RulesWidget class in AsyncPRAW. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/ruleswidget.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.RulesWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: TextArea Class Documentation Directive in RST\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the TextArea class from asyncpraw.models, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/textarea.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nTextArea\n========\n\n.. autoclass:: asyncpraw.models.TextArea\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Method with Positional Arguments in Async PRAW (Python)\nDESCRIPTION: Shows an exception to the keyword-only argument rule when the argument order is clear without documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleClass:\n    def pair(self, left, right): ...\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for MenuLink Class in asyncpraw\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to automatically generate documentation for the MenuLink class from the asyncpraw.models module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/menulink.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.MenuLink\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting PartialRedditor Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the PartialRedditor class from the asyncpraw.models.redditors module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/partialredditor.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.redditors.PartialRedditor\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Method with Mixed Arguments in Async PRAW (Python)\nDESCRIPTION: Illustrates a method with mandatory positional arguments and optional keyword-only arguments in Async PRAW.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/contributing.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Subreddit:\n    async def submit(\n        self,\n        title,\n        *,\n        collection_id=None,\n        discussion_type=None,\n        draft_id=None,\n        flair_id=None,\n        flair_text=None,\n        inline_media=None,\n        nsfw=False,\n        resubmit=True,\n        selftext=None,\n        send_replies=True,\n        spoiler=False,\n        url=None,\n    ): ...\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for AsyncPRAW Image Class\nDESCRIPTION: A Sphinx documentation directive that automatically generates documentation for the asyncpraw.models.Image class. The directive includes the :inherited-members: option to ensure documentation includes all members inherited from parent classes.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/image.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.Image\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineImage Class with Sphinx in RST\nDESCRIPTION: ReStructuredText documentation directive for auto-generating documentation of the InlineImage class from asyncpraw.models, including inherited members\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/inlineimage.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nInlineImage\n===========\n\n.. autoclass:: asyncpraw.models.InlineImage\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documentation Reference for asyncpraw.models.Hover Class in Sphinx\nDESCRIPTION: Sphinx directive that automatically generates documentation for the Hover class in the asyncpraw.models module. The directive includes all inherited members in the documentation output.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/hover.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.Hover\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx autoclass directive for ContributorRelationship in asyncpraw\nDESCRIPTION: This RST (reStructuredText) directive instructs Sphinx to automatically generate documentation for the ContributorRelationship class from the asyncpraw.models.reddit.subreddit module, including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/contributorrelationship.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.ContributorRelationship\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Class Documentation with Sphinx for asyncpraw.models.DraftList\nDESCRIPTION: A Sphinx documentation directive for the DraftList class in the asyncpraw.models module. It includes the autoclass directive to automatically generate documentation from the class's docstrings and also includes documentation for inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/draftlist.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nDraftList\n=========\n\n.. autoclass:: asyncpraw.models.DraftList\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Button Class Documentation Directive in reStructuredText\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the Button class in the asyncpraw library, including all inherited members. This directive is used to build comprehensive documentation for the Reddit API wrapper.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/button.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nButton\n======\n\n.. autoclass:: asyncpraw.models.Button\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autoclass for CustomWidget in RST\nDESCRIPTION: This RST code configures Sphinx to automatically generate documentation for the CustomWidget class in the asyncpraw.models module, including all inherited members. This is part of the API documentation for asyncpraw, an asynchronous Python Reddit API Wrapper.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/customwidget.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nCustomWidget\n============\n\n.. autoclass:: asyncpraw.models.CustomWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditCollections Class in Python\nDESCRIPTION: This code snippet uses Sphinx's autoclass directive to generate documentation for the SubredditCollections class. It includes all inherited members of the class.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditcollections.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.collections.SubredditCollections\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for CalendarConfiguration Class in asyncpraw\nDESCRIPTION: ReStructuredText directive that automatically generates API documentation for the CalendarConfiguration class from the asyncpraw.models module. The inherited-members flag ensures that inherited methods and attributes are included in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/calendarconfiguration.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.CalendarConfiguration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Referencing PollOption Class Documentation in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to reference the PollOption class from the asyncpraw.models.reddit.poll module and include its inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/polloption.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.poll.PollOption\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Calendar Class with Sphinx Directives\nDESCRIPTION: Sphinx documentation directive to automatically generate API documentation for the Calendar class from the asyncpraw.models module, including documentation for inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/calendar.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nCalendar\n========\n\n.. autoclass:: asyncpraw.models.Calendar\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting SubredditFlair Class with Sphinx in RST\nDESCRIPTION: This RST (reStructuredText) snippet configures Sphinx's autoclass directive to document the SubredditFlair class from the asyncpraw.models.reddit.subreddit module, including its inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/subredditflair.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.subreddit.SubredditFlair\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Including CHANGES.rst File in reStructuredText\nDESCRIPTION: This directive includes the contents of the CHANGES.rst file located two directory levels up from the current file. It's commonly used to incorporate changelog information into documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/package_info/change_log.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../CHANGES.rst\n```\n\n----------------------------------------\n\nTITLE: Documenting WidgetModeration Class with Sphinx\nDESCRIPTION: RST directive for auto-documenting the WidgetModeration class from asyncpraw.models, including all inherited members in the documentation output.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/widgetmoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.WidgetModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining ModeratorsWidget Documentation Structure in RST\nDESCRIPTION: ReStructuredText documentation structure for the ModeratorsWidget class, using autoclass directive to automatically generate documentation including inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/moderatorswidget.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nModeratorsWidget\n================\n\n.. autoclass:: asyncpraw.models.ModeratorsWidget\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting AsyncPRAWBase Class with autoclass Directive in reStructuredText\nDESCRIPTION: Uses the reStructuredText autoclass directive to automatically generate documentation for the AsyncPRAWBase class from the asyncpraw.models.base module, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/asyncprawbase.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.base.AsyncPRAWBase\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for DomainListing class in AsyncPRAW\nDESCRIPTION: This RST directive configures Sphinx to automatically generate documentation for the DomainListing class from the asyncpraw.models module, including inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/domainlisting.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.DomainListing\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: WikiPageModeration Class Reference Documentation in RST\nDESCRIPTION: RST documentation directive that auto-generates documentation for the WikiPageModeration class from asyncpraw.models.reddit.wikipage module, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/wikipagemoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.wikipage.WikiPageModeration\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining MultiredditHelper Documentation with reStructuredText\nDESCRIPTION: Uses the autoclass directive to generate documentation for the MultiredditHelper class in the asyncpraw library. The directive includes the inherited-members option to ensure all inherited methods and attributes are also documented.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/reddit/multireddit.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: asyncpraw.models.MultiredditHelper\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for ThingModerationMixin in reStructuredText\nDESCRIPTION: A sphinx documentation directive that configures automatic documentation generation for the ThingModerationMixin class from the asyncpraw.models.reddit.mixins module, including all inherited members.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/thingmoderationmixin.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.mixins.ThingModerationMixin\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting UserSubredditModeration Class with Sphinx in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the UserSubredditModeration class from the asyncpraw.models.reddit.user_subreddit module. It includes all inherited members in the documentation.\nSOURCE: https://github.com/praw-dev/asyncpraw/blob/master/docs/code_overview/other/usersubredditmoderation.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: asyncpraw.models.reddit.user_subreddit.UserSubredditModeration\n    :inherited-members:\n```"
  }
]