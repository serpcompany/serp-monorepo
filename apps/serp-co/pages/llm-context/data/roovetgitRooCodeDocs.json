[
  {
    "owner": "roovetgit",
    "repo": "roo-code-docs",
    "content": "TITLE: Search Files for TODO/FIXME Comments in JavaScript\nDESCRIPTION: This example demonstrates how to use the `search_files` tool to locate all TODO or FIXME comments within JavaScript files in the `src` directory. It specifies the directory to search in, the regular expression pattern to match, and the file pattern to filter by.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/search-files.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<search_files>\n<path>src</path>\n<regex>TODO|FIXME</regex>\n<file_pattern>*.js</file_pattern>\n</search_files>\n```\n\n----------------------------------------\n\nTITLE: Search for Import Patterns from @components\nDESCRIPTION: This example demonstrates how to use the `search_files` tool to search for a specific import pattern across the entire project. It looks for import statements that import from the `@components` directory. It specifies the search path and the regex pattern for the import statement.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/search-files.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<search_files>\n<path>.</path>\n<regex>import\\s+.*\\s+from\\s+['\"]@components/</regex>\n</search_files>\n```\n\n----------------------------------------\n\nTITLE: Using MultiSearchReplaceDiffStrategy for Multiple Search/Replace Operations\nDESCRIPTION: Example format for using the MultiSearchReplaceDiffStrategy which supports multiple changes in one request. This format requires line numbers for each search block and exact matching of content including whitespace and indentation.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/apply-diff.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n<<<<<<< SEARCH\n:start_line:10\n:end_line:12\n-------\n    // Old calculation logic\n    const result = value * 0.9;\n    return result;\n=======\n    // Updated calculation logic with logging\n    console.log(`Calculating for value: ${value}`);\n    const result = value * 0.95; // Adjusted factor\n    return result;\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n:start_line:25\n:end_line:25\n-------\n    const defaultTimeout = 5000;\n=======\n    const defaultTimeout = 10000; // Increased timeout\n>>>>>>> REPLACE\n```\n\n----------------------------------------\n\nTITLE: Implementing SSE Transport for MCP Server with Express in TypeScript\nDESCRIPTION: This example shows how to set up an MCP server using SSE transport with an Express.js server. It creates a server instance, initializes the SSE transport, and sets up the Express app to handle MCP requests.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/mcp/server-transports.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\nimport express from 'express';\n\nconst app = express();\nconst server = new Server({name: 'remote-server', version: '1.0.0'});\n// Register tools...\n\n// Use SSE transport\nconst transport = new SSEServerTransport(server);\napp.use('/mcp', transport.requestHandler());\napp.listen(3000, () => {\n  console.log('MCP server listening on port 3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Modes Configuration in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure for defining custom modes in Roo Code. It includes required properties like slug, name, roleDefinition, and groups, as well as the optional customInstructions property.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/custom-modes.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customModes\": [\n    {\n      \"slug\": \"mode-name\",\n      \"name\": \"Mode Display Name\",\n      \"roleDefinition\": \"Mode's role and capabilities\",\n      \"groups\": [\"read\", \"edit\"],\n      \"customInstructions\": \"Additional guidelines\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Information Gathering Pattern\nDESCRIPTION: A common workflow pattern for information gathering that starts with asking follow-up questions, then reading files, and finally searching across files.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/tool-use-overview.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[ask_followup_question](/features/tools/ask-followup-question) → [read_file](/features/tools/read-file) → [search_files](/features/tools/search-files)\n```\n\n----------------------------------------\n\nTITLE: Search for Usages of a Specific Function\nDESCRIPTION: This example demonstrates how to use the `search_files` tool to find all usages of a function named `calculateTotal` across JavaScript and TypeScript files in the current directory.  It specifies the directory to search, the regular expression pattern for the function definition, and the file pattern to include both JavaScript and TypeScript files.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/search-files.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<search_files>\n<path>.</path>\n<regex>function\\s+calculateTotal</regex>\n<file_pattern>*.{js,ts}</file_pattern>\n</search_files>\n```\n\n----------------------------------------\n\nTITLE: Implementing STDIO Transport for MCP Server in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up an MCP server using STDIO transport. It imports necessary modules, creates a server instance, and initializes the STDIO transport.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/mcp/server-transports.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\n\nconst server = new Server({name: 'local-server', version: '1.0.0'});\n// Register tools...\n\n// Use STDIO transport\nconst transport = new StdioServerTransport(server);\ntransport.listen();\n```\n\n----------------------------------------\n\nTITLE: Completing Task with Result and Command using attempt_completion in XML\nDESCRIPTION: This example shows how to use the attempt_completion tool to complete a task by providing both a result summary of a React application creation and a command to demonstrate the result.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/attempt-completion.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<attempt_completion>\n<result>\nI've created a simple React application with the following features:\n1. A responsive landing page with the requested hero section\n2. A working contact form with validation\n3. Navigation between all three requested pages\n4. Styling that matches the provided design mockup\n</result>\n<command>npm start</command>\n</attempt_completion>\n```\n\n----------------------------------------\n\nTITLE: Task Management Pattern\nDESCRIPTION: A common workflow pattern for task management that creates a new task, switches to an appropriate mode, and then executes a command.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/tool-use-overview.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[new_task](/features/tools/new-task) → [switch_mode](/features/tools/switch-mode) → [execute_command](/features/tools/execute-command)\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Commands in Sequence\nDESCRIPTION: Illustrates the use of execute_command to perform multiple operations in a single command, such as creating directories and files.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/execute-command.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<execute_command>\n<command>mkdir -p src/components && touch src/components/App.js</command>\n</execute_command>\n```\n\n----------------------------------------\n\nTITLE: Code Modification Pattern\nDESCRIPTION: A common workflow pattern for code modification that involves reading a file, applying a diff to make changes, and then attempting to complete the task.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/tool-use-overview.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[read_file](/features/tools/read-file) → [apply_diff](/features/tools/apply-diff) → [attempt_completion](/features/tools/attempt-completion)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dynamic Tool Discovery in MCP with JSON\nDESCRIPTION: This code snippet shows how MCP enables an AI to discover available tools at runtime. It illustrates the declarative way tools are exposed to the AI agent with their names, descriptions, and required parameters.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/mcp/mcp-vs-api.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// AI discovers available tools\n{\n  \"tools\": [\n    {\n      \"name\": \"readFile\",\n      \"description\": \"Reads content from a file\",\n      \"parameters\": {\n        \"path\": { \"type\": \"string\", \"description\": \"File path\" }\n      }\n    },\n    {\n      \"name\": \"createTicket\",\n      \"description\": \"Creates a ticket in issue tracker\",\n      \"parameters\": {\n        \"title\": { \"type\": \"string\" },\n        \"description\": { \"type\": \"string\" }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Specific Line Range with read_file Tool in XML\nDESCRIPTION: This snippet shows how to read a specific range of lines (from start_line to end_line) using the read_file tool. This approach is efficient for large files when only a portion needs to be examined.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/read-file.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<read_file>\n<path>src/app.js</path>\n<start_line>46</start_line>\n<end_line>68</end_line>\n</read_file>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Workspace-Wide Instructions\nDESCRIPTION: Shows the recommended directory structure for organizing workspace-wide custom instruction files in the .roo/rules/ directory.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/custom-instructions.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .roo/\n│   └── rules/          # Workspace-wide rules\n│       ├── 01-general.md\n│       └── 02-coding-style.txt\n└── ... (other project files)\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Configuration File with write_to_file\nDESCRIPTION: This snippet demonstrates how to use the write_to_file tool to create a new JSON configuration file. It specifies the file path, content, and line count for a settings.json file.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/write-to-file.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<write_to_file>\n<path>config/settings.json</path>\n<content>\n{\n  \"apiEndpoint\": \"https://api.example.com\",\n  \"theme\": {\n    \"primaryColor\": \"#007bff\",\n    \"secondaryColor\": \"#6c757d\",\n    \"fontFamily\": \"Arial, sans-serif\"\n  },\n  \"features\": {\n    \"darkMode\": true,\n    \"notifications\": true,\n    \"analytics\": false\n  },\n  \"version\": \"1.0.0\"\n}\n</content>\n<line_count>14</line_count>\n</write_to_file>\n```\n\n----------------------------------------\n\nTITLE: Completing Python Script Task with Execution using attempt_completion in XML\nDESCRIPTION: This snippet illustrates the use of the attempt_completion tool to complete a Python script task by providing a result summary of data processing steps and a command to execute the script.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/attempt-completion.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<attempt_completion>\n<result>\nI've created a data processing script that:\n1. Reads the CSV files from the data directory\n2. Cleans and normalizes the data as requested\n3. Generates the summary statistics in JSON format\n4. Outputs the processed data to the output directory\n</result>\n<command>python process_data.py</command>\n</attempt_completion>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default 'Code' Mode Globally in JSON\nDESCRIPTION: This JSON snippet demonstrates how to override Roo Code's built-in 'code' mode with a customized version globally. It replaces the default mode with a specialized version that restricts editing to JavaScript and TypeScript files only while adding custom instructions.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/custom-modes.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customModes\": [{\n    \"slug\": \"code\",\n    \"name\": \"Code\",\n    \"roleDefinition\": \"You are a software engineer with global-specific constraints\",\n    \"groups\": [\n      \"read\",\n      [\"edit\", { \"fileRegex\": \"\\\\.(js|ts)$\", \"description\": \"JS/TS files only\" }]\n    ],\n    \"customInstructions\": \"Focus on project-specific JS/TS development\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Completing Task with Result Summary using attempt_completion in XML\nDESCRIPTION: This snippet demonstrates how to use the attempt_completion tool to complete a task by providing a result summary of CSS updates for a navigation bar.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/attempt-completion.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<attempt_completion>\n<result>\nI've updated the CSS for the navigation bar to match the design mockup. The changes include:\n1. Updated color scheme to use the new brand colors\n2. Added responsive behavior for mobile devices\n3. Fixed the alignment issues in the dropdown menus\n</result>\n</attempt_completion>\n```\n\n----------------------------------------\n\nTITLE: Configuring STDIO Transport Server in JSON\nDESCRIPTION: Example configuration for an MCP server using STDIO transport, showing basic server setup with command execution, arguments, environment variables, and tool permissions.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/mcp/using-mcp-in-roo.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"server1\": {\n      \"command\": \"python\",\n      \"args\": [\"/path/to/server.py\"],\n      \"env\": {\n        \"API_KEY\": \"your_api_key\"\n      },\n      \"alwaysAllow\": [\"tool1\", \"tool2\"],\n      \"disabled\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shell Integration to Bash Configuration\nDESCRIPTION: This bash script checks if the terminal program is VSCode and, if so, sources the shell integration script. This is added to the `~/.bashrc` file to enable shell integration for Bash.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Specific Mode Override in JSON\nDESCRIPTION: This JSON snippet shows how to override a default mode for a specific project. It creates a project-specific version of the 'code' mode that has a custom name, role definition, file access restrictions limited to JavaScript and TypeScript files, and project-specific instructions.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/custom-modes.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customModes\": [{\n    \"slug\": \"code\",\n    \"name\": \"Code (Project-Specific)\",\n    \"roleDefinition\": \"You are a software engineer with project-specific constraints\",\n    \"groups\": [\n      \"read\",\n      [\"edit\", { \"fileRegex\": \"\\\\.(js|ts)$\", \"description\": \"JS/TS files only\" }]\n    ],\n    \"customInstructions\": \"Focus on project-specific JS/TS development\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shell Integration to PowerShell Profile\nDESCRIPTION: This PowerShell script checks if the terminal program is VSCode and, if so, sources the PowerShell integration script.  This is added to the `$Profile` file to enable shell integration for PowerShell.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nif ($env:TERM_PROGRAM -eq \"vscode\") { . \"$(code --locate-shell-integration-path pwsh)\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for a Project\nDESCRIPTION: Shows how to use execute_command to install multiple npm packages for a project.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/execute-command.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<execute_command>\n<command>npm install express mongodb mongoose dotenv</command>\n</execute_command>\n```\n\n----------------------------------------\n\nTITLE: Reading an Entire File with read_file Tool in XML\nDESCRIPTION: This snippet demonstrates how to read the complete content of a small file using the read_file tool. No line range is specified, so the tool returns the entire file with line numbers.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/read-file.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<read_file>\n<path>src/app.js</path>\n</read_file>\n```\n\n----------------------------------------\n\nTITLE: Adding Shell Integration to Fish Configuration\nDESCRIPTION: This Fish script checks if the terminal program is VSCode and, if so, sources the shell integration script. This is added to the `~/.config/fish/config.fish` file to enable shell integration for Fish.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nstring match -q \"$TERM_PROGRAM\" \"vscode\"; and . (code --locate-shell-integration-path fish)\n```\n\n----------------------------------------\n\nTITLE: Configuring a Test Engineer Mode with File Restrictions in JSON\nDESCRIPTION: This JSON snippet shows the configuration for a test engineer mode with file access restrictions. It defines a mode that can only edit test files (matching .test.js, .spec.js, .test.ts, or .spec.ts patterns) while maintaining read access to all files.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/custom-modes.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customModes\": [{\n    \"slug\": \"test-engineer\",\n    \"name\": \"Test Engineer\",\n    \"roleDefinition\": \"You are a test engineer focused on code quality\",\n    \"groups\": [\n      \"read\",\n      [\"edit\", { \"fileRegex\": \"\\\\.(test|spec)\\\\.(js|ts)$\", \"description\": \"Test files only\" }]\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Browser and Navigating to Website using browser_action in XML\nDESCRIPTION: This snippet demonstrates how to use the browser_action tool to launch a browser and navigate to a specific URL. It uses the 'launch' action and specifies the target URL.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/browser-action.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<browser_action>\n<action>launch</action>\n<url>https://example.com</url>\n</browser_action>\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy\nDESCRIPTION: This command sets the PowerShell execution policy to 'RemoteSigned' for the current user, allowing local scripts to run while requiring downloaded scripts to be signed. This is a necessary step to enable Roo Code's shell integration in PowerShell.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Reading a Large Text File with read_file Tool in XML\nDESCRIPTION: This snippet demonstrates how to read a large log file without specifying a line range. For files exceeding the internal line limit, the tool automatically truncates the content and displays a notice.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/read-file.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<read_file>\n<path>logs/large_app.log</path>\n</read_file>\n```\n\n----------------------------------------\n\nTITLE: Clicking at Specific Coordinates using browser_action in XML\nDESCRIPTION: This example shows how to perform a click action at specific coordinates on the webpage. It uses the 'click' action and specifies the x,y coordinates for the click.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/browser-action.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<browser_action>\n<action>click</action>\n<coordinate>450,300</coordinate>\n</browser_action>\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with asdf Runtime Version Manager\nDESCRIPTION: Configuration example for using asdf version manager with MCP servers. Shows how to reference specific Node.js versions and set environment variables for version control.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/mcp/using-mcp-in-roo.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"appsignal\": {\n      \"command\": \"/Users/myself/.asdf/installs/nodejs/22.2.0/bin/node\",\n      \"args\": [\n        \"/Users/myself/Code/Personal/my-mcp/build/index.js\"\n      ],\n      \"env\": {\n        \"ASDF_NODE_VERSION\": \"22.2.0\"\n      },\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: System Prompt Construction\nDESCRIPTION: Illustrates how Roo Code constructs the final prompt sent to the AI model when a system prompt override file is present. It shows the order in which the role definition, override file content, and custom instructions are combined.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/footgun-prompting.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n${roleDefinition}\n\n${content_of_your_override_file}\n\n${customInstructions}\n```\n\n----------------------------------------\n\nTITLE: Building and Starting a Project\nDESCRIPTION: Shows how to chain multiple npm commands using execute_command to build and then start a project.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/execute-command.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<execute_command>\n<command>npm run build && npm start</command>\n</execute_command>\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Documentation via MCP Resource\nDESCRIPTION: Example demonstrating how to fetch API documentation from a documentation server using the access_mcp_resource tool.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/access-mcp-resource.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<access_mcp_resource>\n<server_name>api-docs</server_name>\n<uri>docs://payment-service/endpoints</uri>\n</access_mcp_resource>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Documentation Writer Mode in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure a basic documentation writer mode in Roo Code. It defines a custom mode with a slug, name, role definition, file access groups (with regex pattern for Markdown files only), and custom instructions for focusing on clear explanations.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/custom-modes.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customModes\": [{\n    \"slug\": \"docs-writer\",\n    \"name\": \"Documentation Writer\",\n    \"roleDefinition\": \"You are a technical writer specializing in clear documentation\",\n    \"groups\": [\n      \"read\",\n      [\"edit\", { \"fileRegex\": \"\\\\.md$\", \"description\": \"Markdown files only\" }]\n    ],\n    \"customInstructions\": \"Focus on clear explanations and examples\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Mode Validation Function in TypeScript\nDESCRIPTION: A TypeScript function that validates whether a specific tool is allowed for a given mode. It takes parameters for the tool name, mode slug, custom modes configuration, optional tool requirements, and optional tool parameters.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/tool-use-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisToolAllowedForMode(\n    tool: string,\n    modeSlug: string,\n    customModes: ModeConfig[],\n    toolRequirements?: Record<string, boolean>,\n    toolParams?: Record<string, any>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI for Bedrock Authentication in Bash\nDESCRIPTION: Command to configure AWS CLI credentials required for authentication with AWS Bedrock. This is a prerequisite step before using AWS Bedrock models with Roo Code.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/providers/bedrock.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws configure\n```\n\n----------------------------------------\n\nTITLE: Usage Example - Examining a Specific Module's Structure\nDESCRIPTION: Example showing how to use the tool to examine the structure of a specific module by providing the path to the components directory.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/list-code-definition-names.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<list_code_definition_names>\n<path>src/components</path>\n</list_code_definition_names>\n```\n\n----------------------------------------\n\nTITLE: Switching to Code Mode in Roo AI System using XML\nDESCRIPTION: This snippet demonstrates how to use the switch_mode tool to change Roo's operational mode to Code mode for implementing login functionality. It specifies the mode slug and provides a reason for the mode switch.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/switch-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<switch_mode>\n<mode_slug>code</mode_slug>\n<reason>Need to implement the login functionality based on the architecture we've discussed</reason>\n</switch_mode>\n```\n\n----------------------------------------\n\nTITLE: Accessing Domain Knowledge via MCP Resource\nDESCRIPTION: Example showing how to retrieve domain-specific knowledge from a knowledge base using the access_mcp_resource tool.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/access-mcp-resource.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<access_mcp_resource>\n<server_name>knowledge-base</server_name>\n<uri>kb://medical/terminology/common</uri>\n</access_mcp_resource>\n```\n\n----------------------------------------\n\nTITLE: Appending Log Entries with append_to_file in XML\nDESCRIPTION: Example of using the append_to_file tool to add log entries to an existing log file. This demonstrates the basic usage pattern where the path parameter specifies the target file and the content parameter contains the text to be appended.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/append-to-file.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<append_to_file>\n<path>logs/application.log</path>\n<content>\n[2024-04-18 10:30:00] INFO: User logged in successfully.\n[2024-04-18 10:30:05] WARN: Disk space running low.\n</content>\n</append_to_file>\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for ask_followup_question Tool\nDESCRIPTION: The standard JSON format used by the ask_followup_question tool to display questions and suggested answers in the UI. This structure includes the question text and an array of suggested answers.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/ask-followup-question.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  question: \"User's question here\",\n  suggest: [\n    { answer: \"Suggestion 1\" },\n    { answer: \"Suggestion 2\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New File with append_to_file in XML\nDESCRIPTION: Example of using the append_to_file tool to create a new file with initial content if it doesn't exist. This demonstrates how the tool handles file creation when the specified path doesn't exist, automatically creating any necessary parent directories.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/append-to-file.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<append_to_file>\n<path>project/docs/notes.md</path>\n<content>\n# Project Notes\n\n- Initial setup complete.\n- Need to configure database connection.\n</content>\n</append_to_file>\n```\n\n----------------------------------------\n\nTITLE: Specific Directory Usage: List Files in Project Subdirectory\nDESCRIPTION: Example of examining a specific project subdirectory without recursion. This example explicitly sets the recursive parameter to false to only list the top-level contents of the specified directory.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/list-files.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<list_files>\n<path>src/components</path>\n<recursive>false</recursive>\n</list_files>\n```\n\n----------------------------------------\n\nTITLE: Refactoring TypeScript Function with Roo Code\nDESCRIPTION: This snippet shows how to instruct Roo Code to refactor a specific function in a TypeScript file, converting it from using Promises to async/await syntax.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/advanced-usage/large-projects.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n@/src/components/MyComponent.tsx Refactor the `processData` function to use `async/await` instead of Promises.\n```\n\n----------------------------------------\n\nTITLE: Analyzing Source Code with MCP Tool\nDESCRIPTION: Example of using the MCP tool to perform code complexity analysis. The tool accepts parameters for programming language, file path, and specific metrics to analyze.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/use-mcp-tool.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<use_mcp_tool>\n<server_name>code-analysis</server_name>\n<tool_name>complexity_metrics</tool_name>\n<arguments>\n{\n  \"language\": \"typescript\",\n  \"file_path\": \"src/app.ts\",\n  \"include_functions\": true,\n  \"metrics\": [\"cyclomatic\", \"cognitive\"]\n}\n</arguments>\n</use_mcp_tool>\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Module with write_to_file\nDESCRIPTION: This snippet illustrates the use of write_to_file to create a JavaScript module. It specifies the file path, JavaScript content with utility functions, and line count for a helpers.js file.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/write-to-file.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<write_to_file>\n<path>src/utils/helpers.js</path>\n<content>\n/**\n * Utility functions for the application\n */\n\nexport function formatDate(date) {\n  return new Date(date).toLocaleDateString();\n}\n\nexport function calculateTotal(items) {\n  return items.reduce((sum, item) => sum + item.price, 0);\n}\n\nexport function debounce(func, delay) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), delay);\n  };\n}\n</content>\n<line_count>18</line_count>\n</write_to_file>\n```\n\n----------------------------------------\n\nTITLE: Configuring File Restrictions for Edit Group in JSON\nDESCRIPTION: This JSON snippet shows how to configure file restrictions for the 'edit' group in a custom mode. It uses a regular expression to limit file access to specific file types or patterns.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/custom-modes.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\"edit\", {\n  \"fileRegex\": \"\\\\.md$\",\n  \"description\": \"Markdown files only\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Finding and Replacing Variables in JavaScript\nDESCRIPTION: Request to search for all instances of a specific variable name in a JavaScript file and replace them with a new variable name.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/typing-your-requests.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfind all instances of the variable `oldValue` in @/src/App.js and replace them with `newValue`\n```\n\n----------------------------------------\n\nTITLE: Example Output Format for list_code_definition_names Tool\nDESCRIPTION: Shows the standard output format of the tool, displaying file paths followed by line numbers and the actual source code of each definition. This format helps quickly identify where definitions are located in files and their implementation details.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/list-code-definition-names.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nsrc/utils.js:\n0--0 | export class HttpClient {\n5--5 | formatDate() {\n10--10 | function parseConfig(data) {\n\nsrc/models/User.js:\n0--0 | interface UserProfile {\n10--10 | export class User {\n20--20 | function createUser(data) {\n```\n```\n\n----------------------------------------\n\nTITLE: Update Fish Configuration - Fish\nDESCRIPTION: This code snippet demonstrates how to update the `config.fish` file to integrate with VS Code's shell integration scripts.  It includes an optional `if status is-interactive` block to ensure the script is only sourced in interactive shells. The snippet also contains an alternative method to source the script using the explicit path in Cygwin format.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_12\n\nLANGUAGE: fish\nCODE:\n```\n# Example config.fish structure\nif status is-interactive\n    # Your other interactive shell configurations...\n    # automatic locate integration script:\n    string match -q \"$TERM_PROGRAM\" \"vscode\"; and . (code --locate-shell-integration-path fish)\n\n    # Or if the above fails for you:\n    # Source the VS Code shell integration script\n    # IMPORTANT: Replace the example path below with the actual path you found in Step 1.\n    # Make sure the path is in a format Cygwin can understand (e.g., using /cygdrive/c/...).\n    # source \"/cygdrive/c/Users/YourUser/.vscode/extensions/..../shellIntegration.fish\"\nend\n```\n\n----------------------------------------\n\nTITLE: Requesting Weather Forecast Data with MCP Tool\nDESCRIPTION: Example of using the MCP tool to request weather forecast data from a weather server. The tool takes parameters for city, number of days, and response format.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/use-mcp-tool.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<use_mcp_tool>\n<server_name>weather-server</server_name>\n<tool_name>get_forecast</tool_name>\n<arguments>\n{\n  \"city\": \"San Francisco\",\n  \"days\": 5,\n  \"format\": \"text\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n----------------------------------------\n\nTITLE: Running Terminal Commands through Roo Code\nDESCRIPTION: Request to execute an npm installation command in the terminal through Roo Code's interface.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/typing-your-requests.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nrun the command `npm install` in the terminal\n```\n\n----------------------------------------\n\nTITLE: Example: Asking About Implementation Preferences\nDESCRIPTION: Example of using ask_followup_question to inquire about styling preferences for a web application, with three suggested styling approaches as options.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/ask-followup-question.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ask_followup_question>\n<question>Which styling approach would you prefer for this web application?</question>\n<follow_up>\n<suggest>Use Bootstrap for rapid development with consistent components</suggest>\n<suggest>Use Tailwind CSS for utility-first styling with maximum flexibility</suggest>\n<suggest>Use vanilla CSS with custom styling for complete control and minimal dependencies</suggest>\n</follow_up>\n</ask_followup_question>\n```\n\n----------------------------------------\n\nTITLE: Switching to Debug Mode in Roo AI System using XML\nDESCRIPTION: This snippet illustrates using the switch_mode tool to transition Roo to Debug mode for troubleshooting. It specifies the debug mode slug and provides a reason for initiating the mode switch.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/switch-mode.md#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<switch_mode>\n<mode_slug>debug</mode_slug>\n<reason>Need to systematically diagnose the authentication error</reason>\n</switch_mode>\n```\n\n----------------------------------------\n\nTITLE: Executing a Command in a Specific Directory\nDESCRIPTION: Demonstrates how to use the cwd parameter to specify a working directory for command execution.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/execute-command.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<execute_command>\n<command>git status</command>\n<cwd>./my-project</cwd>\n</execute_command>\n```\n\n----------------------------------------\n\nTITLE: Example Chat Input Format for Code Context\nDESCRIPTION: Demonstrates how code context is added to chat conversations with Roo, including file path and line numbers for precise code reference.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/code-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCan you explain this function?\n@myFile.js:15:25\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome with Remote Debugging on Linux\nDESCRIPTION: Command to start Chrome browser with remote debugging enabled on Linux, allowing connection from Roo Code.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/browser-use.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoogle-chrome --remote-debugging-port=9222 --user-data-dir=/tmp/chrome-debug --no-first-run\n```\n\n----------------------------------------\n\nTITLE: Verifying Bash Shell Integration Status\nDESCRIPTION: These bash commands are used to verify that shell integration is active in Bash. They check for specific environment variables, prompt commands, and debug traps related to VSCode.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nset | grep -i '[16]33;'\necho \"$PROMPT_COMMAND\" | grep vsc\ntrap -p DEBUG | grep vsc\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer MCP Server on macOS/Linux\nDESCRIPTION: macOS and Linux configuration for setting up a Puppeteer MCP server. Provides a simplified setup without the need for a shell wrapper.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/mcp/using-mcp-in-roo.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-puppeteer\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Architecture Mode Task in XML\nDESCRIPTION: Example of creating a new subtask in architect mode for system design planning.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/new-task.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<new_task>\n<mode>architect</mode>\n<message>Design the database schema and system architecture for our new e-commerce platform.</message>\n</new_task>\n```\n\n----------------------------------------\n\nTITLE: Attempting to Read a Blocked File with read_file Tool in XML\nDESCRIPTION: This snippet demonstrates attempting to read a file that is excluded by rules in a .rooignore file. The tool will return an access denied error to protect sensitive information.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/read-file.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<read_file>\n<path>.env</path>\n</read_file>\n```\n\n----------------------------------------\n\nTITLE: Adding Shell Integration to Zsh Configuration\nDESCRIPTION: This zsh script checks if the terminal program is VSCode and, if so, sources the shell integration script. This is added to the `~/.zshrc` file to enable shell integration for Zsh.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path zsh)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with mise Runtime Version Manager\nDESCRIPTION: Configuration example for using mise (formerly rtx) runtime version manager with MCP servers. Demonstrates how to specify runtime versions and execute commands with proper version control.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/mcp/using-mcp-in-roo.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mcp-batchit\": {\n      \"command\": \"mise\",\n      \"args\": [\n        \"x\",\n        \"--\",\n        \"node\",\n        \"/Users/myself/workspace/mcp-batchit/build/index.js\"\n      ],\n      \"disabled\": false,\n      \"alwaysAllow\": [\n        \"search\",\n        \"batch_execute\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Simple Command in Current Directory\nDESCRIPTION: Demonstrates how to use the execute_command tool to run a simple npm command in the current working directory.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/execute-command.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<execute_command>\n<command>npm run dev</command>\n</execute_command>\n```\n\n----------------------------------------\n\nTITLE: Generating Images with MCP Tool\nDESCRIPTION: Example of using the MCP tool to generate an image based on a text prompt. The tool accepts parameters for the image prompt, style, dimensions, and output format.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/use-mcp-tool.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<use_mcp_tool>\n<server_name>image-generation</server_name>\n<tool_name>create_image</tool_name>\n<arguments>\n{\n  \"prompt\": \"A futuristic city with flying cars\",\n  \"style\": \"photorealistic\",\n  \"dimensions\": {\n    \"width\": 1024,\n    \"height\": 768\n  },\n  \"format\": \"webp\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Python File with a Simple Function\nDESCRIPTION: Request to create a new Python utility file with an addition function that takes two number arguments and returns their sum.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/typing-your-requests.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncreate a new file named `utils.py` and add a function called `add` that takes two numbers as arguments and returns their sum\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer MCP Server on Windows\nDESCRIPTION: Windows-specific configuration for setting up a Puppeteer MCP server using Windows Command Prompt. Uses cmd to execute npx commands for running the Puppeteer server package.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/mcp/using-mcp-in-roo.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"@modelcontextprotocol/server-puppeteer\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring roo.acceptInput in keybindings.json with Basic Context\nDESCRIPTION: JSON configuration for adding a keyboard shortcut to the roo.acceptInput command with a basic context condition that ensures the command only works when Roo is focused.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/keyboard-shortcuts.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+enter\",  // or your preferred key combination\n  \"command\": \"roo.acceptInput\",\n  \"when\": \"rooViewFocused\"  // This is a context condition that ensures the command only works when Roo is focused\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Resources with MCP Tool\nDESCRIPTION: Example of using the MCP tool to query a database and store the results as a resource. The tool accepts parameters for database name, query type, fields, filter conditions, and storage identifier.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/use-mcp-tool.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<use_mcp_tool>\n<server_name>database-connector</server_name>\n<tool_name>query_and_store</tool_name>\n<arguments>\n{\n  \"database\": \"users\",\n  \"type\": \"select\",\n  \"fields\": [\"name\", \"email\", \"last_login\"],\n  \"where\": {\n    \"status\": \"active\"\n  },\n  \"store_as\": \"active_users\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n----------------------------------------\n\nTITLE: Modifying Component Style in TypeScript React\nDESCRIPTION: Request to change the color property of a button component in a specific TypeScript React file using context mentions.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/typing-your-requests.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nin the file @src/components/Button.tsx, change the color of the button to blue\n```\n\n----------------------------------------\n\nTITLE: Fetching System Configuration via MCP Resource\nDESCRIPTION: Example demonstrating how to access system configuration data from an infrastructure monitor using the access_mcp_resource tool.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/access-mcp-resource.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<access_mcp_resource>\n<server_name>infra-monitor</server_name>\n<uri>config://production/database</uri>\n</access_mcp_resource>\n```\n\n----------------------------------------\n\nTITLE: Usage Example - Listing Code Definitions in Current Directory\nDESCRIPTION: Example of how to use the tool to list code definitions in the current directory by specifying '.' as the path parameter.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/list-code-definition-names.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<list_code_definition_names>\n<path>.</path>\n</list_code_definition_names>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Test Engineer Custom Mode for Roo Code\nDESCRIPTION: JSON configuration for a specialized Jest testing mode focused on TDD practices with TypeScript support. This mode restricts file access to test-related files only and provides specific instructions for writing and maintaining Jest test suites with best practices for test organization.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/community.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"jest-test-engineer\",\n  \"name\": \"Jest Test Engineer\",\n  \"roleDefinition\": \"You are Roo, a Jest testing specialist with deep expertise in:\\n- Writing and maintaining Jest test suites\\n- Test-driven development (TDD) practices\\n- Mocking and stubbing with Jest\\n- Integration testing strategies\\n- TypeScript testing patterns\\n- Code coverage analysis\\n- Test performance optimization\\n\\nYour focus is on maintaining high test quality and coverage across the codebase, working primarily with:\\n- Test files in __tests__ directories\\n- Mock implementations in __mocks__\\n- Test utilities and helpers\\n- Jest configuration and setup\\n\\nYou ensure tests are:\\n- Well-structured and maintainable\\n- Following Jest best practices\\n- Properly typed with TypeScript\\n- Providing meaningful coverage\\n- Using appropriate mocking strategies\",\n  \"groups\": [\n    \"read\",\n    \"browser\",\n    \"command\",\n    [\"edit\", {\n      \"fileRegex\": \"(__tests__/.*|__mocks__/.*|\\\\.test\\\\.(ts|tsx|js|jsx)$|/test/.*|jest\\\\.config\\\\.(js|ts)$)\",\n      \"description\": \"Test files, mocks, and Jest configuration\"\n    }]\n  ],\n  \"customInstructions\": \"When writing tests:\\n- Always use describe/it blocks for clear test organization\\n- Include meaningful test descriptions\\n- Use beforeEach/afterEach for proper test isolation\\n- Implement proper error cases\\n- Add JSDoc comments for complex test scenarios\\n- Ensure mocks are properly typed\\n- Verify both positive and negative test cases\"\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Code Explanation\nDESCRIPTION: Request to explain the functionality of a specific function in a TypeScript utility file using context mentions for file reference.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/typing-your-requests.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nexplain the function `calculateTotal` in @/src/utils.ts\n```\n\n----------------------------------------\n\nTITLE: Basic Usage: List Top-Level Files in Current Directory\nDESCRIPTION: Example of using list_files to display files in the current directory without recursion. This simple example passes only the required path parameter.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/list-files.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<list_files>\n<path>.</path>\n</list_files>\n```\n\n----------------------------------------\n\nTITLE: Configure VS Code Terminal Profile for Fish - JSON\nDESCRIPTION: This JSON snippet configures the VS Code terminal profile for the Fish shell within a Cygwin environment. It demonstrates two methods: launching Fish through `bash.exe` and launching Fish directly. It sets the path to the shell executable, arguments for launching, and an optional icon. The profile is configured under `terminal.integrated.profiles.windows` in VS Code's `settings.json` file.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ... other settings ...\n\n  \"terminal.integrated.profiles.windows\": {\n    // ... other profiles ...\n\n    // Recommended: Use bash.exe to launch fish as a login shell\n    \"fish\": {\n      \"path\": \"C:\\\\cygwin64\\\\bin\\\\bash.exe\", // Or your Cygwin bash path\n      \"args\": [\n        \"--login\", // Ensures login scripts run (important for Cygwin environment)\n        \"-i\",      // Ensures bash runs interactively\n        \"-c\",\n        \"exec fish\" // Replace bash process with fish\n      ],\n      \"icon\": \"terminal-bash\" // Optional: Use a recognizable icon\n    }\n    // Alternative (if the above fails): Launch fish directly\n    \"fish-direct\": {\n      \"path\": \"C:\\\\cygwin64\\\\bin\\\\fish.exe\", // Ensure this is in your Windows PATH or provide full path\n      // Use 'options' here instead of 'args'; otherwise, you might encounter the error \"terminal process terminated exit code 1\".\n      \"options\": [\"-l\", \"-c\"], // Example: login and interactive flags.\n      \"icon\": \"terminal-fish\" // Optional: Use a fish icon\n    }\n  },\n\n  // Optional: Set fish as your default if desired\n  // \"terminal.integrated.defaultProfile.windows\": \"fish\", // or \"fish-direct\" depending what you use.\n\n  // ... other settings ...\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Configured Ollama Model\nDESCRIPTION: Command to save an Ollama model with custom configurations under a new name\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/providers/ollama.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/save your_model_name\n```\n\n----------------------------------------\n\nTITLE: Addressing Detected Problems\nDESCRIPTION: Request to fix all detected issues in the codebase using the problems context mention shortcut.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/typing-your-requests.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n@problems address all detected problems\n```\n\n----------------------------------------\n\nTITLE: Configuring Roo Orchestrator JSON Schema\nDESCRIPTION: Defines the configuration schema for the Roo orchestrator system, including role definition, custom instructions for task management, and file access permissions. The configuration specifies orchestration capabilities for breaking down complex tasks into manageable subtasks and coordinating their execution across different specialized modes.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/community.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"advanced-orchestrator\",\n  \"name\": \"Advanced Orchestrator\",\n  \"roleDefinition\": \"You are Roo, a strategic workflow orchestrator who coordinates complex tasks by delegating them to appropriate specialized modes. You have a comprehensive understanding of each mode's capabilities and limitations, allowing you to effectively break down complex problems into discrete tasks that can be solved by different specialists.\",\n  \"customInstructions\": \"Your role is to coordinate complex workflows by delegating tasks to specialized modes. As an orchestrator, you should:\\n\\n1. When given a complex task, break it down into logical subtasks that can be delegated to appropriate specialized modes:\\n   - Create specific, clearly defined, and scope-limited subtasks\\n   - Ensure each subtask fits within context length limitations\\n   - Make subtask divisions granular enough to prevent misunderstandings and information loss\\n   - Prioritize core functionality implementation over iterative development when task complexity is high\\n\\n2. For each subtask, create a new task with a clear, specific instruction using the new_task tool:\\n   - Choose the most appropriate mode for each task based on its nature and requirements\\n   - Provide detailed requirements and summaries of completed work for context\\n   - Store all subtask-related content in a dedicated prompt directory\\n   - Ensure subtasks focus on their specific stage while maintaining compatibility with other modules\\n\\n3. Track and manage the progress of all subtasks:\\n   - Arrange subtasks in a logical sequence based on dependencies\\n   - Establish checkpoints to validate incremental achievements\\n   - Reserve adequate context space for complex subtasks\\n   - Define clear completion criteria for each subtask\\n   - When a subtask is completed, analyze its results and determine the next steps\\n\\n4. Facilitate effective communication throughout the workflow:\\n   - Use clear, natural language for subtask descriptions (avoid code blocks in descriptions)\\n   - Provide sufficient context information when initiating each subtask\\n   - Keep instructions concise and unambiguous\\n   - Clearly label inputs and expected outputs for each subtask\\n\\n5. Help the user understand how the different subtasks fit together in the overall workflow:\\n   - Provide clear reasoning about why you're delegating specific tasks to specific modes\\n   - Document the workflow architecture and dependencies between subtasks\\n   - Visualize the workflow when helpful for understanding\\n\\n6. When all subtasks are completed, synthesize the results and provide a comprehensive overview of what was accomplished.\\n\\n7. You can also manage custom modes by editing custom_modes.json and .roomodes files directly. This allows you to create, modify, or delete custom modes as part of your orchestration capabilities.\\n\\n8. Ask clarifying questions when necessary to better understand how to break down complex tasks effectively.\\n\\n9. Suggest improvements to the workflow based on the results of completed subtasks.\",\n  \"groups\": [\n    \"read\",\n    [\"edit\", { \"fileRegex\": \"\\\\.roomodes$|cline_custom_modes\\\\.json$\", \"description\": \"Mode configuration files only\" }]\n  ],\n  \"source\": \"global\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Requesting Database Technology Clarification\nDESCRIPTION: Example of using ask_followup_question to determine database preferences for user data storage, presenting four different database options as suggestions.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/ask-followup-question.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ask_followup_question>\n<question>What database should this application use for storing user data?</question>\n<follow_up>\n<suggest>MongoDB for flexible schema and document-based storage</suggest>\n<suggest>PostgreSQL for relational data with strong consistency guarantees</suggest>\n<suggest>Firebase for real-time updates and simplified backend management</suggest>\n<suggest>SQLite for lightweight local storage without external dependencies</suggest>\n</follow_up>\n</ask_followup_question>\n```\n\n----------------------------------------\n\nTITLE: Creating Code Mode Task in XML\nDESCRIPTION: Example of creating a new subtask in code mode for implementing an authentication service.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/new-task.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<new_task>\n<mode>code</mode>\n<message>Implement a user authentication service with login, registration, and password reset functionality.</message>\n</new_task>\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Debian/Ubuntu Linux\nDESCRIPTION: Commands to update package repositories and install Git on Debian-based Linux distributions including Ubuntu.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/checkpoints.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install git\n```\n\n----------------------------------------\n\nTITLE: Running Ollama Model\nDESCRIPTION: Command to load and run a specific Ollama model\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/providers/ollama.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nollama run qwen2.5-coder:32b\n```\n\n----------------------------------------\n\nTITLE: Downloading Ollama Models\nDESCRIPTION: Generic command for pulling Ollama models from the model repository\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/providers/ollama.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nollama pull <model_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Orchestrator Mode in JSON\nDESCRIPTION: Defines a workflow orchestration mode that coordinates complex tasks by delegating to specialized modes and managing the overall process.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/community.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"slug\": \"orchestrator\",\n      \"name\": \"Orchestrator\",\n      \"roleDefinition\": \"You are Roo, a strategic workflow orchestrator who coordinates complex tasks by delegating them to appropriate specialized modes. You have a comprehensive understanding of each mode's capabilities and limitations, allowing you to effectively break down complex problems into discrete tasks that can be solved by different specialists.\",\n      \"customInstructions\": \"Your role is to coordinate complex workflows by delegating tasks to specialized modes. As an orchestrator, you should:\\n\\n1. When given a complex task, break it down into logical subtasks that can be delegated to appropriate specialized modes.\\n\\n2. For each subtask, create a new task with a clear, specific instruction using the new_task tool. Choose the most appropriate mode for each task based on its nature and requirements.\\n\\n3. Track and manage the progress of all subtasks. When a subtask is completed, analyze its results and determine the next steps.\\n\\n4. Help the user understand how the different subtasks fit together in the overall workflow. Provide clear reasoning about why you're delegating specific tasks to specific modes.\\n\\n5. When all subtasks are completed, synthesize the results and provide a comprehensive overview of what was accomplished.\\n\\n6. You can also manage custom modes by editing custom_modes.json and .roomodes files directly. This allows you to create, modify, or delete custom modes as part of your orchestration capabilities.\\n\\n7. Ask clarifying questions when necessary to better understand how to break down complex tasks effectively.\\n\\n8. Suggest improvements to the workflow based on the results of completed subtasks.\",\n      \"groups\": [\n        \"read\",\n        [\"edit\", { \"fileRegex\": \"\\\\.roomodes$|cline_custom_modes\\\\.json$\", \"description\": \"Mode configuration files only\" }]\n      ],\n      \"source\": \"global\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Ollama Context Window\nDESCRIPTION: Command to configure the context window size parameter for an Ollama model\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/providers/ollama.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/set parameter num_ctx 32768\n```\n\n----------------------------------------\n\nTITLE: Verifying PowerShell Shell Integration Status\nDESCRIPTION: These PowerShell commands verify that shell integration is active by checking for VSCode-related functions and inspecting the prompt function for VSCode-specific strings.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Command -Name \"*VSC*\" -CommandType Function\nGet-Content Function:\\Prompt | Select-String \"VSCode\"\n```\n\n----------------------------------------\n\nTITLE: Configuring roo.acceptInput in keybindings.json with Specific Webview Context\nDESCRIPTION: JSON configuration for adding a keyboard shortcut to the roo.acceptInput command with a more specific context condition that targets the exact webview ID for Roo.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/keyboard-shortcuts.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"ctrl+enter\",\n  \"command\": \"roo.acceptInput\",\n  \"when\": \"webviewViewFocus && webviewViewId == 'roo-cline.SidebarProvider'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage: Recursively List All Files in Source Directory\nDESCRIPTION: Example of recursively listing all files in a source directory. This example demonstrates using both the required path parameter and the optional recursive parameter set to true.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/list-files.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<list_files>\n<path>src</path>\n<recursive>true</recursive>\n</list_files>\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Definition for Boomerang Mode\nDESCRIPTION: Text for the 'Role Definition' field when creating a custom Boomerang Mode. This definition establishes Roo as a strategic workflow orchestrator that coordinates complex tasks by delegating them to appropriate specialized modes.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/boomerang-tasks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nYou are Roo, a strategic workflow orchestrator who coordinates complex tasks by delegating them to appropriate specialized modes. You have a comprehensive understanding of each mode's capabilities and limitations, allowing you to effectively break down complex problems into discrete tasks that can be solved by different specialists.\n```\n\n----------------------------------------\n\nTITLE: Verifying Fish Shell Integration Status\nDESCRIPTION: These Fish commands are used to verify that shell integration is active in Fish. They check for functions and the Fish prompt related to VSCode.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_9\n\nLANGUAGE: fish\nCODE:\n```\nfunctions | grep -i vsc\nfunctions fish_prompt | grep -i vsc\n```\n\n----------------------------------------\n\nTITLE: SSE Transport Configuration in JSON\nDESCRIPTION: Configuration example for an MCP server using SSE transport, demonstrating remote server setup with URL endpoint and custom headers for authentication.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/mcp/using-mcp-in-roo.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"remote-server\": {\n      \"url\": \"https://your-server-url.com/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer your-token\"\n      },\n      \"alwaysAllow\": [\"tool3\"],\n      \"disabled\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Powerlevel10k Integration Configuration\nDESCRIPTION: This Bash script sets the `POWERLEVEL9K_TERM_SHELL_INTEGRATION` variable to `true` before Powerlevel10k is sourced in `~/.zshrc`. This helps ensure that Powerlevel10k is compatible with shell integration.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Add before sourcing powerlevel10k in ~/.zshrc\ntypeset -g POWERLEVEL9K_TERM_SHELL_INTEGRATION=true\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome with Remote Debugging on macOS\nDESCRIPTION: Command to start Chrome browser with remote debugging enabled on macOS, allowing connection from Roo Code.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/browser-use.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222 --user-data-dir=/tmp/chrome-debug --no-first-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Instructions for Boomerang Mode\nDESCRIPTION: Text for the 'Mode-specific Custom Instructions' field when creating a custom Boomerang Mode. These instructions detail how the orchestrator should break down tasks, delegate them, track progress, and synthesize results.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/boomerang-tasks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYour role is to coordinate complex workflows by delegating tasks to specialized modes. As an orchestrator, you should:\n\n1. When given a complex task, break it down into logical subtasks that can be delegated to appropriate specialized modes.\n\n2. For each subtask, use the `new_task` tool to delegate. Choose the most appropriate mode for the subtask's specific goal and provide comprehensive instructions in the `message` parameter. These instructions must include:\n    *   All necessary context from the parent task or previous subtasks required to complete the work.\n    *   A clearly defined scope, specifying exactly what the subtask should accomplish.\n    *   An explicit statement that the subtask should *only* perform the work outlined in these instructions and not deviate.\n    *   An instruction for the subtask to signal completion by using the `attempt_completion` tool, providing a concise yet thorough summary of the outcome in the `result` parameter, keeping in mind that this summary will be the source of truth used to keep track of what was completed on this project.\n    *   A statement that these specific instructions supersede any conflicting general instructions the subtask's mode might have.\n\n3. Track and manage the progress of all subtasks. When a subtask is completed, analyze its results and determine the next steps.\n\n4. Help the user understand how the different subtasks fit together in the overall workflow. Provide clear reasoning about why you're delegating specific tasks to specific modes.\n\n5. When all subtasks are completed, synthesize the results and provide a comprehensive overview of what was accomplished.\n\n6. Ask clarifying questions when necessary to better understand how to break down complex tasks effectively.\n\n7. Suggest improvements to the workflow based on the results of completed subtasks.\n\nUse subtasks to maintain clarity. If a request significantly shifts focus or requires a different expertise (mode), consider creating a subtask rather than overloading the current one.\n```\n\n----------------------------------------\n\nTITLE: User Response Format Example\nDESCRIPTION: Example of how user responses to followup questions are formatted with <answer> tags for clarity and consistency, helping to separate the user's answer from other conversation elements.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/ask-followup-question.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<answer>\nUse Tailwind CSS for utility-first styling with maximum flexibility\n</answer>\n```\n\n----------------------------------------\n\nTITLE: Usage Example - Exploring a Utility Library\nDESCRIPTION: Example demonstrating how to use the tool to explore the structure of a utility library by specifying the path to the utils directory.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/list-code-definition-names.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<list_code_definition_names>\n<path>lib/utils</path>\n</list_code_definition_names>\n```\n\n----------------------------------------\n\nTITLE: Using MCP Tool with No Arguments\nDESCRIPTION: Example of using the MCP tool that requires no input arguments. This demonstrates how to call a tool that doesn't need any parameters, providing an empty JSON object.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/use-mcp-tool.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<use_mcp_tool>\n<server_name>system-monitor</server_name>\n<tool_name>get_current_status</tool_name>\n<arguments>\n{}\n</arguments>\n</use_mcp_tool>\n```\n\n----------------------------------------\n\nTITLE: Executing Chained Shell Commands in Roo Code\nDESCRIPTION: Example of chained shell commands using the && operator to execute sequential commands, specifically changing directory and running npm install. This pattern is now better supported by the auto-approval logic.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v2.2.31.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd some-dir && npm install\n```\n\n----------------------------------------\n\nTITLE: Installing Git on macOS using Xcode Command Line Tools\nDESCRIPTION: Alternative command to install Git on macOS using the Xcode Command Line Tools, which bundles Git along with other developer utilities.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/checkpoints.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Detailed STDIO Transport Configuration in JSON\nDESCRIPTION: Extended configuration example for STDIO transport showing all available options including working directory specification and environment variables.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/mcp/using-mcp-in-roo.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"local-server\": {\n      \"command\": \"node\",\n      \"args\": [\"server.js\"],\n      \"cwd\": \"/path/to/project/root\",\n      \"env\": {\n        \"API_KEY\": \"your_api_key\"\n      },\n      \"alwaysAllow\": [\"tool1\", \"tool2\"],\n      \"disabled\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Mode-Specific Instructions\nDESCRIPTION: Shows the recommended directory structure for organizing mode-specific custom instruction files.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/custom-instructions.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .roo/\n│   └── rules-code/     # Rules for \"code\" mode\n│       ├── 01-js-style.md\n│       └── 02-ts-style.md\n└── ... (other project files)\n```\n\n----------------------------------------\n\nTITLE: Starting Ollama Server\nDESCRIPTION: Command to start the Ollama server service\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/providers/ollama.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nollama serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level MCP Settings in JSON\nDESCRIPTION: Example configuration file (.roo/mcp.json) for setting up project-specific MCP (Mode Communication Protocol) server configurations. This file allows for tailored MCP setups at the project or workspace level.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.11.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roo-code-settings.json\": {\n    \"api_profiles\": {},\n    \"global_settings\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific Ollama Model\nDESCRIPTION: Example command for downloading the qwen2.5-coder model\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/providers/ollama.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nollama pull qwen2.5-coder:32b\n```\n\n----------------------------------------\n\nTITLE: Using Codicon Component in React/JSX\nDESCRIPTION: Example of using the Codicon component to display an edit icon in the documentation.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/suggested-responses.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Codicon name=\"edit\" />\n```\n\n----------------------------------------\n\nTITLE: Importing KangarooIcon Component in React\nDESCRIPTION: Import statement for the KangarooIcon component from the site components directory, used to display the Roo Code icon in the documentation.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/the-chat-interface.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport KangarooIcon from '@site/src/components/KangarooIcon';\n```\n\n----------------------------------------\n\nTITLE: Configuring Junior Developer Code Reviewer Mode in JSON\nDESCRIPTION: Defines a supportive code reviewer mode focused on mentoring junior developers with educational feedback and best practices.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/community.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"junior-reviewer\",\n  \"name\": \"Junior Dev Code Reviewer\",\n  \"roleDefinition\": \"You are Roo, an experienced and supportive code reviewer focused on helping junior developers grow. Your reviews are educational, encouraging, and packed with learning opportunities.\\n\\nYour core principles are:\\n\\n1. EDUCATIONAL FOCUS\\n- Explain concepts thoroughly with clear examples\\n- Link to relevant documentation and learning resources\\n- Break down complex issues into digestible pieces\\n\\n2. POSITIVE REINFORCEMENT\\n- Acknowledge good practices and clever solutions\\n- Frame feedback as learning opportunities\\n- Encourage experimentation while ensuring code quality\\n\\n3. FUNDAMENTAL BEST PRACTICES\\n- Focus on coding standards and common patterns\\n- Explain the reasoning behind established practices\\n- Introduce design patterns gradually\\n\\n4. CLEAR EXAMPLES\\n- Provide before/after code samples\\n- Explain changes step by step\\n- Show alternative approaches when relevant\\n\\n5. STRUCTURED LEARNING\\n- Organize feedback by learning objective\\n- Build on previous review comments\\n- Include exercises and challenges when appropriate\",\n  \"customInstructions\": \"When reviewing code:\\n1. Start with positive observations\\n2. Include detailed explanations with each suggestion\\n3. Link to relevant documentation\\n4. Provide clear, educational code examples\\n5. Use a supportive and encouraging tone\\n6. Focus on fundamental best practices\\n7. Create structured learning opportunities\\n8. Always explain the 'why' behind each suggestion\",\n  \"groups\": [\n    \"read\",\n    [\n      \"edit\",\n      {\n        \"fileRegex\": \"\\\\.(md)$\",\n        \"description\": \"Markdown files for review output\"\n      }\n    ],\n    \"command\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VibeMode Custom Mode for Roo Code\nDESCRIPTION: JSON configuration for VibeMode, which transforms natural language descriptions into working code using an intuitive, flow-based development approach. This mode has full system access and emphasizes maintaining creative flow while handling technical details automatically.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/community.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"vibemode\",\n  \"name\": \"VibeMode\",\n  \"roleDefinition\": \"You are Roo, a Vibe Coding assistant that transforms natural language descriptions into working code. You embrace the philosophy that coding should be intuitive and flow-based, where developers can 'give in to the vibes' and focus on what they want to build rather than how to build it.\\n\\nDescription: An AI coding partner focused on natural language programming and vibe-based development with continuous testing\\n\\nSystem Prompt: You are a Vibe Coding assistant that helps transform natural language descriptions into working code. Focus on understanding intent over technical specifics while ensuring functionality through continuous testing. Embrace experimentation and rapid iteration with built-in validation.\\n\\nGoals:\\n- Transform natural language descriptions into functional code\\n- Maintain flow state by handling technical details automatically\\n- Suggest improvements while preserving user intent\\n- Handle error resolution autonomously when possible\\n- Ensure code quality through continuous testing\\n- Validate each iteration before proceeding\\n\\nPrimary Responsibilities:\\n\\nNatural Language Programming\\n- Transform conversational descriptions into functional code\\n- Handle technical implementation details automatically\\n- Maintain creative flow by managing error resolution autonomously\\n- Suggest improvements while preserving user intent\\n- Generate appropriate tests for new functionality\\n\\nWorkflow Optimization\\n- Minimize keyboard interaction by supporting voice-to-text input\\n- Handle error messages through simple copy-paste resolution\\n- Maintain context across development sessions\\n- Switch to appropriate specialized modes when needed\\n- Run tests automatically after each significant change\\n- Provide immediate feedback on test results\\n\\nTest-Driven Development\\n- Create tests before implementing new features\\n- Validate changes through automated testing\\n- Maintain test coverage throughout development\\n- Flag potential issues early in the development cycle\\n- Ensure backwards compatibility with existing functionality\\n\\nPrompt Templates:\\n- Initialization: 'I want to create {description}'\\n- Refinement: 'Can you modify this to {change}'\\n- Error Handling: 'Fix this error: {error}'\\n- Iteration: 'Let's improve {aspect}'\\n- Test Creation: 'Generate tests for {feature}'\\n- Validation: 'Verify the changes to {component}'\",\n  \"groups\": [\n    \"read\",\n    \"edit\",\n    \"browser\",\n    \"command\",\n    \"mcp\"\n  ],\n  \"customInstructions\": \"Prioritize working solutions over perfect code. Use error messages as learning opportunities. Maintain a conversational, encouraging tone. Suggest improvements without breaking flow. Document key decisions and assumptions. Focus on understanding intent over technical specifics. Embrace experimentation and rapid iteration. Switch to architect mode when structural changes are needed. Switch to ask mode when research is required. Switch to code mode when precise implementation is needed. Maintain context across mode transitions. Handle errors autonomously when possible. Preserve code context and conversation history. Support voice-to-text input through SuperWhisper integration. Generate and run tests for each new feature. Validate all changes through automated testing. Maintain test coverage throughout development. Provide immediate feedback on test results. Flag potential issues early in development cycle. Ensure backwards compatibility.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Architect Mode in Roo AI System using XML\nDESCRIPTION: This example shows how to use the switch_mode tool to change Roo's mode to Architect mode for system design. It includes the required mode slug and a reason explaining the need for the mode change.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/switch-mode.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<switch_mode>\n<mode_slug>architect</mode_slug>\n<reason>Need to design the system architecture before implementation</reason>\n</switch_mode>\n```\n\n----------------------------------------\n\nTITLE: Importing Codicon Component in React/JSX\nDESCRIPTION: Import statement for the Codicon component used to display icons in the documentation.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/suggested-responses.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Codicon from '@site/src/components/Codicon';\n```\n\n----------------------------------------\n\nTITLE: Defining Project Custom Modes\nDESCRIPTION: Reference to a configuration file (.roomodes) that enables project-specific custom modes within the workspace.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.3.20.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.roomodes\n```\n\n----------------------------------------\n\nTITLE: Importing VideoGrid Component in JSX\nDESCRIPTION: This code imports the VideoGrid component from the site's components directory. The component is used to display a grid of tutorial videos on the page.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/tutorial-videos.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport VideoGrid from '@site/src/components/VideoGrid';\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Roo Code Docs Website\nDESCRIPTION: Command to start a local development server for the Roo Code Docs website. This opens a browser window automatically and supports live reloading for most changes.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Locate Fish Shell Integration Path - Bash\nDESCRIPTION: This command is used to locate the `shellIntegration.fish` script within VS Code.  It is executed within the Fish terminal inside VS Code. The output path will be used to configure Fish shell.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncode --locate-shell-integration-path fish\n```\n\n----------------------------------------\n\nTITLE: Importing KangarooIcon Component in React\nDESCRIPTION: This code snippet imports the KangarooIcon component from a specific file path. It's likely used to display a kangaroo icon in the documentation.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport KangarooIcon from '@site/src/components/KangarooIcon';\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Single File Instructions\nDESCRIPTION: Demonstrates the fallback method using a single .roorules file for workspace-wide instructions.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/custom-instructions.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .roorules           # Workspace-wide rules (single file)\n└── ... (other project files)\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Fedora Linux\nDESCRIPTION: Command to install Git on Fedora Linux using the dnf package manager.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/checkpoints.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install git\n```\n\n----------------------------------------\n\nTITLE: Configuring Senior Developer Code Reviewer Mode in JSON\nDESCRIPTION: Defines an advanced code reviewer mode focused on architectural decisions, system scalability, and technical strategy.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/community.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"senior-reviewer\",\n  \"name\": \"Senior Dev Code Reviewer\",\n  \"roleDefinition\": \"You are Roo, a highly experienced technical architect providing strategic code review feedback focused on system-level implications and architectural decisions.\\n\\nYour core principles are:\\n\\n1. ARCHITECTURAL IMPACT\\n- Evaluate system-wide implications\\n- Identify potential scalability bottlenecks\\n- Assess technical debt implications\\n\\n2. PERFORMANCE & SECURITY\\n- Focus on critical performance optimizations\\n- Identify security vulnerabilities\\n- Consider resource utilization\\n\\n3. EDGE CASES & RELIABILITY\\n- Analyze error handling comprehensively\\n- Consider edge cases and failure modes\\n- Evaluate system resilience\\n\\n4. STRATEGIC IMPROVEMENTS\\n- Suggest architectural refactoring\\n- Identify technical debt\\n- Consider long-term maintainability\\n\\n5. TRADE-OFF ANALYSIS\\n- Discuss architectural trade-offs\\n- Consider alternative approaches\\n- Evaluate technical decisions\",\n  \"customInstructions\": \"When reviewing code:\\n1. Focus on architectural and systemic implications\\n2. Evaluate performance and scalability concerns\\n3. Consider security implications\\n4. Analyze error handling and edge cases\\n5. Suggest strategic improvements\\n6. Discuss technical trade-offs\\n7. Be direct and concise\\n8. Think about long-term maintainability\",\n  \"groups\": [\n    \"read\",\n    [\n      \"edit\",\n      {\n        \"fileRegex\": \"\\\\.(md)$\",\n        \"description\": \"Markdown files for review output\"\n      }\n    ],\n    \"command\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Documentation\nDESCRIPTION: Structured markdown document detailing the release notes for Roo Code 3.8.5, including feature highlights, provider updates, and various improvements and fixes\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.8.5.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Roo Code 3.8.5 Release Notes (2025-03-12)\n\nThis release introduces significant refactoring, remote browser support, MCP over SSE, and various provider/model updates.\n\n## Feature Highlights\n\n*   **Terminal Architecture Refactor:** Addressed critical issues with the terminal architecture for improved stability and performance. (thanks KJ7LNW!)\n*   **MCP over SSE:** Added support for Model Context Protocol (MCP) communication over Server-Sent Events (SSE). (thanks aheizi!)\n*   **Remote Browser Support:** Added the ability to connect to a remote Chrome browser instance. (thanks afshawnlotfi!)\n\n## Provider & Model Support\n\n*   Added custom `baseUrl` support for Google AI Studio Gemini. (thanks dqroid!)\n*   Added OpenAI-compatible DeepSeek/QwQ reasoning support. (thanks lightrabbit!)\n*   Added Anthropic-style prompt caching in the OpenAI-compatible provider. (thanks dleen!)\n*   Added Deepseek R1 model for AWS Bedrock. (thanks ATempsch!)\n*   Added `gemini-2.0-pro-exp-02-05` model to Vertex AI provider. (thanks shohei-ihaya!)\n*   Added support for custom ARNs in AWS Bedrock. (thanks Smartsheet-JB-Brown!)\n*   Updated Bedrock prices to the latest. (thanks Smartsheet-JB-Brown!)\n\n## Improvements & Fixes\n\n*   Preserved parent-child relationship when cancelling Boomerang Tasks (subtasks). (thanks cannuri!)\n*   Added PowerShell-specific command handling. (thanks KJ7LNW!)\n*   Fixed MarkdownBlock text color for Dark High Contrast theme. (thanks cannuri!)\n*   Brought back progress status indicator for multi-diff edits. (thanks qdaxb!)\n*   Refactored alert dialog styles to use the correct VSCode theme. (thanks cannuri!)\n*   Updated MCP servers directory path for platform compatibility. (thanks hannesrudolph!)\n*   Fixed browser system prompt inclusion rules. (thanks cannuri!)\n*   Fixed OpenAI-style cost calculations. (thanks dtrugman!)\n*   Fixed issue allowing use of an excluded directory as the working directory. (thanks Szpadel!)\n*   Added Kotlin language support in `list_code_definition_names` tool. (thanks kohii!)\n*   Improved handling of diff application errors. (thanks qdaxb!)\n*   Fixed OpenRouter custom `baseUrl` support.\n*   Fixed usage tracking for SiliconFlow and other providers that include usage on every chunk.\n*   Added telemetry for checkpoint save/restore/diff and diff strategies.\n*   Published git tags to GitHub from CI. (thanks pdecat!)\n```\n\n----------------------------------------\n\nTITLE: Parsing Ollama Model Think Tags\nDESCRIPTION: Shows the XML-style think tags used for reasoning in Ollama models. These tags are now parsed with improved handling.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.3.22.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<think>\n```\n\n----------------------------------------\n\nTITLE: Switching to Ask Mode in Roo AI System using XML\nDESCRIPTION: This example demonstrates how to use the switch_mode tool to change Roo's operational mode to Ask mode for information gathering. It includes the required mode slug and a reason for the mode transition.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/switch-mode.md#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<switch_mode>\n<mode_slug>ask</mode_slug>\n<reason>Need to answer questions about the implemented feature</reason>\n</switch_mode>\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Greeting File with write_to_file Tool\nDESCRIPTION: Example showing how to use the write_to_file tool to create a JavaScript file that implements a greeting function. The tool generates a new file named greeting.js with a simple greeting function that logs a message to the console.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/how-tools-work.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<write_to_file>\n<path>greeting.js</path>\n<content>\nfunction greet(name) {\n  console.log(`Hello, ${name}!`);\n}\n\ngreet('World');\n</content>\n<line_count>5</line_count>\n</write_to_file>\n```\n\n----------------------------------------\n\nTITLE: Importing KangarooIcon Component in React/JSX\nDESCRIPTION: This code imports a custom KangarooIcon component from the site's components directory. This icon is used in the documentation to represent the Roo Code icon in the VS Code Activity Bar.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/model-temperature.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport KangarooIcon from '@site/src/components/KangarooIcon';\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome with Remote Debugging on Windows\nDESCRIPTION: Command to start Chrome browser with remote debugging enabled on Windows, allowing connection from Roo Code.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/browser-use.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --remote-debugging-port=9222 --user-data-dir=C:\\chrome-debug --no-first-run\n```\n\n----------------------------------------\n\nTITLE: Querying File Structure in TypeScript with Roo Code\nDESCRIPTION: This snippet demonstrates how to use Roo Code to list functions and classes in a large TypeScript file. It utilizes the '@' symbol to reference a specific file path.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/advanced-usage/large-projects.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n@/src/components/MyComponent.tsx List the functions and classes in this file.\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with JSX in React\nDESCRIPTION: This code snippet demonstrates how to embed a YouTube video responsively using JSX in a React component. It creates an iframe with proper styling for responsive behavior and maintains a 16:9 aspect ratio.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/getting-started/installing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ position: 'relative', paddingBottom: '56.25%', height: 0, overflow: 'hidden' }}>\n  <iframe\n    src=\"https://www.youtube.com/embed/Mcq3r1EPZ-4\"\n    style={{\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n    }}\n    frameBorder=\"0\"\n    allow=\"autoplay; encrypted-media\"\n    allowFullScreen\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Release Notes Content in Markdown\nDESCRIPTION: Markdown formatted release notes detailing the addition of a new Gemini model and visual fixes.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.2.5.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Roo Code 3.2.5 Release Notes\n\nThis patch release adds a new Gemini model and includes visual fixes.\n\n## Updates & Fixes\n\n*   Added the `gemini-flash-thinking-01-21` model. (thanks monotykamary!)\n*   Included minor visual fixes. (thanks monotykamary!)\n```\n\n----------------------------------------\n\nTITLE: Terminal Command Reference in Markdown\nDESCRIPTION: Demonstrates the usage of the newly introduced @terminal mention feature in code formatting context.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.3.21.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@terminal\n```\n\n----------------------------------------\n\nTITLE: Language Code Reference in Markdown\nDESCRIPTION: References to language codes for Chinese (Simplified and Traditional) in code formatting context.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.3.21.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nzh-cn\n```\n\nLANGUAGE: markdown\nCODE:\n```\nzh-tw\n```\n\n----------------------------------------\n\nTITLE: Attempting to Read a Non-Existent File with read_file Tool in XML\nDESCRIPTION: This snippet shows the syntax for attempting to read a file that doesn't exist. The tool will return an error indicating the file was not found at the specified path.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/read-file.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<read_file>\n<path>non_existent_file.txt</path>\n</read_file>\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes for Roo Code 3.3.25\nDESCRIPTION: Markdown formatted release notes detailing the new Debug mode and experimental Power Steering feature added in version 3.3.25.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.3.25.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Roo Code 3.3.25 Release Notes (2025-02-21)\n\nThis release introduces the Debug mode and an experimental \"Power Steering\" option.\n\n## Feature Highlights\n\n*   **Debug Mode:** Added a new \"Debug\" mode specializing in diagnosing and fixing tricky problems. (thanks Ted Werbel, Carlos E. Perez!)\n*   **Experimental Power Steering:** Added an optional \"Power Steering\" setting to improve model adherence to role definitions and custom instructions by more frequently reminding the model of its current mode details (uses additional tokens). Enable via the checkbox at the bottom of the main settings view.\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Arch Linux\nDESCRIPTION: Command to install Git on Arch Linux using the pacman package manager.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/checkpoints.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S git\n```\n\n----------------------------------------\n\nTITLE: System Prompt Format for Combined Instructions\nDESCRIPTION: Demonstrates the exact format used when combining different types of instructions in the system prompt, showing the hierarchy and precedence of various instruction sources.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/custom-instructions.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n====\nUSER'S CUSTOM INSTRUCTIONS\n\nThe following additional instructions are provided by the user, and should be followed to the best of your ability without interfering with the TOOL USE guidelines.\n\n[Language Preference (if set)]\n\n[Global Instructions (from Prompts Tab)]\n\n[Mode-specific Instructions (from Prompts Tab for the current mode)]\n\nMode-Specific Instructions (from Files/Directories):\n[Contents of files in .roo/rules-{modeSlug}/ (if directory exists and is not empty)]\n[Contents of .roorules-{modeSlug} file (if .roo/rules-{modeSlug}/ does not exist or is empty, and file exists)]\n\nWorkspace-Wide Instructions (from Files/Directories):\n[Contents of files in .roo/rules/ (if directory exists and is not empty)]\n[Contents of .roorules file (if .roo/rules/ does not exist or is empty, and file exists)]\n\n====\n```\n\n----------------------------------------\n\nTITLE: Inline Code Reference in Markdown\nDESCRIPTION: Markdown formatting showing inline code references to the o3-mini model name.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.3.7.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`o3-mini`\n```\n\n----------------------------------------\n\nTITLE: Configuration Reference for Custom System Prompts\nDESCRIPTION: File path specification for custom system prompt configuration. Users can create files at .roo/system-prompt-[slug] to override default system prompts for specific modes.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.7.8.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.roo/system-prompt-[slug]\n```\n\n----------------------------------------\n\nTITLE: Example of Using Context Variables in System Prompt\nDESCRIPTION: Shows how to use the context variables within the system prompt override file. It allows the system prompt to dynamically adapt to different modes, languages, operating systems, and workspaces, providing a more context-aware interaction with the AI model. The variables will be replaced by Roo Code before sending to the model.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/footgun-prompting.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYou are assisting a user in the '{{mode}}' mode.\nTheir operating system is {{operatingSystem}} and their default shell is {{shell}}.\nThe project is located at: {{workspace}}.\nPlease respond in {{language}}.\n```\n\n----------------------------------------\n\nTITLE: Configuring User Story Creator Mode in JSON\nDESCRIPTION: Defines an agile requirements specialist mode focused on creating structured user stories with acceptance criteria and technical considerations.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/community.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"user-story-creator\",\n  \"name\": \"User Story Creator\",\n  \"roleDefinition\": \"You are Roo, an agile requirements specialist focused on creating clear, valuable user stories. Your expertise includes:\\n- Crafting well-structured user stories following the standard format\\n- Breaking down complex requirements into manageable stories\\n- Identifying acceptance criteria and edge cases\\n- Ensuring stories deliver business value\\n- Maintaining consistent story quality and granularity\",\n  \"customInstructions\": \"Expected User Story Format:\\n\\nTitle: [Brief descriptive title]\\n\\nAs a [specific user role/persona],\\nI want to [clear action/goal],\\nSo that [tangible benefit/value].\\n\\nAcceptance Criteria:\\n1. [Criterion 1]\\n2. [Criterion 2]\\n3. [Criterion 3]\\n\\nStory Types to Consider:\\n- Functional Stories (user interactions and features)\\n- Non-functional Stories (performance, security, usability)\\n- Epic Breakdown Stories (smaller, manageable pieces)\\n- Technical Stories (architecture, infrastructure)\\n\\nEdge Cases and Considerations:\\n- Error scenarios\\n- Permission levels\\n- Data validation\\n- Performance requirements\\n- Security implications\",\n  \"groups\": [\n    \"read\",\n    \"edit\",\n    \"command\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Text into Focused Input Field using browser_action in XML\nDESCRIPTION: This snippet illustrates how to type text into a focused input field on the webpage. It uses the 'type' action and specifies the text to be typed.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/browser-action.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<browser_action>\n<action>type</action>\n<text>Hello, World!</text>\n</browser_action>\n```\n\n----------------------------------------\n\nTITLE: Displaying Gear Icon in Markdown\nDESCRIPTION: This snippet demonstrates how to use a custom Codicon component to display a gear icon in Markdown. It's used in the context of instructing users to open Roo Code settings.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/providers/openai.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Codicon name=\"gear\" />\n```\n\n----------------------------------------\n\nTITLE: Scrolling Down Webpage using browser_action in XML\nDESCRIPTION: This example demonstrates how to scroll down the webpage to see more content. It uses the 'scroll_down' action without any additional parameters.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/browser-action.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<browser_action>\n<action>scroll_down</action>\n</browser_action>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML File with write_to_file\nDESCRIPTION: This example shows how to use the write_to_file tool to create a simple HTML file. It includes the file path, HTML content, and line count for an index.html file.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/write-to-file.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<write_to_file>\n<path>src/index.html</path>\n<content>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>My Application</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"app.js\"></script>\n</body>\n</html>\n</content>\n<line_count>13</line_count>\n</write_to_file>\n```\n\n----------------------------------------\n\nTITLE: Accessing Weather Data via MCP Resource\nDESCRIPTION: Example showing how to access current weather data from a weather server using the access_mcp_resource tool.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/access-mcp-resource.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<access_mcp_resource>\n<server_name>weather-server</server_name>\n<uri>weather://san-francisco/current</uri>\n</access_mcp_resource>\n```\n\n----------------------------------------\n\nTITLE: Closing Browser Session using browser_action in XML\nDESCRIPTION: This snippet shows how to close the browser session after completing interactions. It uses the 'close' action to terminate the browser session properly.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/browser-action.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<browser_action>\n<action>close</action>\n</browser_action>\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Writer Custom Mode for Roo Code\nDESCRIPTION: JSON configuration for a specialized technical documentation expert mode that focuses on creating clear, maintainable documentation. This mode has read, edit, and command capabilities and emphasizes following best practices and consistent style guidelines.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/community.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"documentation-writer\",\n  \"name\": \"Documentation Writer\",\n  \"roleDefinition\": \"You are Roo, a technical documentation expert specializing in creating clear, comprehensive documentation for software projects. Your expertise includes:\\nWriting clear, concise technical documentation\\nCreating and maintaining README files, API documentation, and user guides\\nFollowing documentation best practices and style guides\\nUnderstanding code to accurately document its functionality\\nOrganizing documentation in a logical, easily navigable structure\",\n  \"customInstructions\": \"Focus on creating documentation that is clear, concise, and follows a consistent style. Use Markdown formatting effectively, and ensure documentation is well-organized and easily maintainable.\",\n  \"groups\": [\n    \"read\",\n    \"edit\",\n    \"command\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output Format: With Roo-Ignored Files\nDESCRIPTION: Sample output format when .rooignore files are used and showRooIgnoredFiles is enabled, showing how ignored files are marked with a lock symbol.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/list-files.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nsrc/\nsrc/components/\nsrc/components/Button.tsx\nsrc/components/Header.tsx\n🔒 src/secrets.json\nsrc/utils/\nsrc/utils/helpers.ts\nsrc/index.ts\n```\n\n----------------------------------------\n\nTITLE: Verifying Zsh Shell Integration Status\nDESCRIPTION: These zsh commands are used to verify that shell integration is active in Zsh. They check for functions and typeset variables related to VSCode.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_7\n\nLANGUAGE: zsh\nCODE:\n```\nfunctions | grep -i vsc\ntypeset -p precmd_functions preexec_functions\n```\n\n----------------------------------------\n\nTITLE: Installing Git on macOS using Homebrew\nDESCRIPTION: Command to install Git on macOS using the Homebrew package manager, which is the recommended installation method for Git on macOS systems.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/checkpoints.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install git\n```\n\n----------------------------------------\n\nTITLE: Example Output Format: Standard File Listing\nDESCRIPTION: Sample output format showing how the list_files tool displays results, with directories marked by trailing slashes and a truncation message when the file limit is reached.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/list-files.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nsrc/\nsrc/components/\nsrc/components/Button.tsx\nsrc/components/Header.tsx\nsrc/utils/\nsrc/utils/helpers.ts\nsrc/index.ts\n...\nFile listing truncated (showing 200 of 543 files). Use list_files on specific subdirectories for more details.\n```\n\n----------------------------------------\n\nTITLE: Tool Call Structure in TypeScript\nDESCRIPTION: A TypeScript object representing a tool call with properties for the call type, tool name, input arguments, and a unique call identifier.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/tool-use-overview.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst toolCall = {\n    type: \"tool_call\",\n    name: chunk.name,\n    arguments: chunk.input,\n    callId: chunk.callId\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Roo Code Docs Website\nDESCRIPTION: Command to install all required npm dependencies for the Roo Code Docs website. This must be run before starting the local development server.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Displaying Gear Icon in Markdown\nDESCRIPTION: This snippet demonstrates how to display a gear icon in Markdown using a custom Codicon syntax. It's used in the context of accessing Roo Code settings.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/experimental/experimental-features.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Codicon name=\"gear\" />\n```\n\n----------------------------------------\n\nTITLE: Checking PowerShell Execution Policy\nDESCRIPTION: This PowerShell command retrieves the current execution policy for the user, used for troubleshooting and ensuring Roo Code has the proper permissions to run scripts.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/shell-integration.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ExecutionPolicy\n```\n\n----------------------------------------\n\nTITLE: Room Modes Configuration File\nDESCRIPTION: References the configuration file for custom room modes that is now automatically created when adding custom modes through the Prompts tab.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.3.22.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n.roomodes\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Mode Task in XML\nDESCRIPTION: Example of creating a new subtask in documentation mode for API documentation.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/new-task.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<new_task>\n<mode>docs</mode>\n<message>Create comprehensive API documentation for the authentication service we just built.</message>\n</new_task>\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Auto-Approval Pattern in Configuration\nDESCRIPTION: Demonstrates the new wildcard (*) pattern that can be used for command execution auto-approval. This feature should be used with caution as it allows automatic approval of all commands.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.3.22.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n*\n```\n\n----------------------------------------\n\nTITLE: Implementing File System Watcher for @-mention Suggestions\nDESCRIPTION: Demonstrates the usage of createFileSystemWatcher API to improve the reliability of file tracking for @-mention suggestions. This implementation provides more consistent updates to the available files list.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v2.2.28.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateFileSystemWatcher\n```\n\n----------------------------------------\n\nTITLE: Model Identifier for GPT-4.5 Preview\nDESCRIPTION: Model identifier string for the newly supported GPT-4.5 Preview model\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.7.8.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngpt-4.5-preview\n```\n\n----------------------------------------\n\nTITLE: Displaying Mode Switching via Slash Commands in Markdown\nDESCRIPTION: An image tag showing how to use slash commands to switch between different modes in Roo Code.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/using-modes.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"/img/modes/modes-1.png\" alt=\"Using slash commands to switch modes\" width=\"400\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Mode Shortcut Reference Table in Markdown\nDESCRIPTION: A markdown table listing keyboard shortcuts for toggling between modes across different operating systems.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/using-modes.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Operating System | Shortcut |\n|------------------|----------|\n| macOS | ⌘ + . |\n| Windows | Ctrl + . |\n| Linux | Ctrl + . |\n```\n\n----------------------------------------\n\nTITLE: Displaying Mode Switch Suggestions in Markdown\nDESCRIPTION: An image tag showing how to accept mode switch suggestions from Roo in the interface.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/using-modes.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"/img/modes/modes-2.png\" alt=\"Accepting a mode switch suggestion from Roo\" width=\"400\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Mode Switching via Dropdown Menu in Markdown\nDESCRIPTION: An image tag showing how to use the dropdown menu to switch between different modes in Roo Code.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/basic-usage/using-modes.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"/img/modes/modes.png\" alt=\"Using the dropdown menu to switch modes\" width=\"400\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding VideoGrid Component in Markdown\nDESCRIPTION: This JSX code embedded in markdown renders the VideoGrid component which displays the collection of tutorial videos. The component is inserted directly into the markdown content without any parameters.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/tutorial-videos.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<VideoGrid />\n```\n\n----------------------------------------\n\nTITLE: Model Reference in Markdown\nDESCRIPTION: Reference to OpenAI model identifier in code formatting context.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/update-notes/v3.3.21.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\no1\n```\n\n----------------------------------------\n\nTITLE: Example: Addressing Authentication Method Ambiguity\nDESCRIPTION: Example of using ask_followup_question to clarify user authentication requirements by presenting three different authentication implementation approaches.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/features/tools/ask-followup-question.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ask_followup_question>\n<question>How should the application handle user authentication?</question>\n<follow_up>\n<suggest>Implement email/password authentication with account verification</suggest>\n<suggest>Use social login providers (Google, GitHub, etc.) for quick signup</suggest>\n<suggest>Implement both email/password and social login options</suggest>\n</follow_up>\n</ask_followup_question>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for LM Studio Integration\nDESCRIPTION: Complete markdown documentation detailing the setup and configuration process for using LM Studio with Roo Code, including installation steps, model recommendations, and configuration instructions.\nSOURCE: https://github.com/roovetgit/roo-code-docs/blob/main/docs/providers/lmstudio.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Using LM Studio With Roo Code\n\nRoo Code supports running models locally using LM Studio.  LM Studio provides a user-friendly interface for downloading, configuring, and running local language models.  It also includes a built-in local inference server that emulates the OpenAI API, making it easy to integrate with Roo Code.\n\n**Website:** [https://lmstudio.ai/](https://lmstudio.ai/)\n\n## Setting Up LM Studio\n\n1.  **Download and Install LM Studio:** Download LM Studio from the [LM Studio website](https://lmstudio.ai/).\n2.  **Download a Model:**  Use the LM Studio interface to search for and download a model.  Some recommended models include:\n    *   CodeLlama models (e.g., `codellama:7b-code`, `codellama:13b-code`, `codellama:34b-code`)\n    *   Mistral models (e.g., `mistralai/Mistral-7B-Instruct-v0.1`)\n    *   DeepSeek Coder models (e.g., `deepseek-coder:6.7b-base`)\n    * Any other model that is supported by Roo, or for which you can set the context window.\n\n    Look for models in the GGUF format.  LM Studio provides a search interface to find and download models.\n3.  **Start the Local Server:**\n    *   Open LM Studio.\n    *   Click the **\"Local Server\"** tab (the icon looks like `<->`).\n    *   Select the model you downloaded.\n    *   Click **\"Start Server\"**.\n\n## Configuration in Roo Code\n\n1.  **Open Roo Code Settings:** Click the gear icon (<Codicon name=\"gear\" />) in the Roo Code panel.\n2.  **Select Provider:** Choose \"LM Studio\" from the \"API Provider\" dropdown.\n3.  **Enter Model ID:** Enter the *file name* of the model you loaded in LM Studio (e.g., `codellama-7b.Q4_0.gguf`).  You can find this in the LM Studio \"Local Server\" tab.\n4.  **(Optional) Base URL:**  By default, Roo Code will connect to LM Studio at `http://localhost:1234`.  If you've configured LM Studio to use a different address or port, enter the full URL here.\n\n## Tips and Notes\n\n*   **Resource Requirements:** Running large language models locally can be resource-intensive. Make sure your computer meets the minimum requirements for the model you choose.\n*   **Model Selection:**  LM Studio provides a wide range of models.  Experiment to find the one that best suits your needs.\n*   **Local Server:**  The LM Studio local server must be running for Roo Code to connect to it.\n*   **LM Studio Documentation:** Refer to the [LM Studio documentation](https://lmstudio.ai/docs) for more information.\n*   **Troubleshooting:** If you see a \"Please check the LM Studio developer logs to debug what went wrong\" error, you may need to adjust the context length settings in LM Studio.\n```"
  }
]