[
  {
    "owner": "peternator7",
    "repo": "strum",
    "content": "TITLE: Installing Strum Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding Strum to a Rust project via Cargo.toml. Shows how to import both the core library and the macros, with an alternative approach using the \"derive\" feature.\nSOURCE: https://github.com/peternator7/strum/blob/master/README.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nstrum = \"0.27\"\nstrum_macros = \"0.27\"\n\n# You can also use the \"derive\" feature, and import the macros directly from \"strum\"\n# strum = { version = \"0.27\", features = [\"derive\"] }\n```\n\n----------------------------------------\n\nTITLE: Implementing #[strum(transparent)] on Enum, Rust\nDESCRIPTION: This snippet demonstrates the use of the `#[strum(transparent)]` attribute with `IntoStaticStr`, `Display`, and `AsRefStr` on an enum. This forwards the implementation to the inner value. The inner value must be convertible to an `&'static str` for static strings. This allows for cleaner and more concise code when working with enums that wrap strings.\nSOURCE: https://github.com/peternator7/strum/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n  #[derive(strum::Display)]\n  enum SurveyResponse {\n    Yes,\n    No,\n    #[strum(transparent)]\n    Other(String)\n  }\n\n  fn main() {\n    let response = SurveyResponse::Other(\"It was good\".into());\n    println!(\"Question: Did you have fun?\");\n    println!(\"Answer: {}\", response);\n    // prints: Answer: It was good\n  }\n```\n\n----------------------------------------\n\nTITLE: Using VariantArray Macro, Rust\nDESCRIPTION: This example demonstrates the usage of the `VariantArray` macro. The macro adds an associated constant `VARIANTS` to your enum. This constant is a `&'static [Self]` slice, allowing access to all the variants of the enum. This works exclusively on enums that only have unit variants. This provides a simple way to iterate over all enum variants.\nSOURCE: https://github.com/peternator7/strum/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n  use strum::VariantArray;\n\n  #[derive(Debug, VariantArray)]\n  enum Color {\n    Red,\n    Blue,\n    Green,\n  }\n\n  fn main() {\n    println!(\"{:?}\", Color::VARIANTS); // prints: [\"Red\", \"Blue\", \"Green\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: New way of adding attributes to a variant\nDESCRIPTION: This code snippet shows the new, preferred syntax for adding `disabled` and `default` attributes to an enum variant using the `strum` macro.  It uses marker-style attributes, which are less ambiguous.\nSOURCE: https://github.com/peternator7/strum/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nenum Test {\n  #[strum(disabled, default)]\n  Variant(String)\n}\n```\n\n----------------------------------------\n\nTITLE: Using EnumIs Macro, Rust\nDESCRIPTION: This snippet demonstrates the use of the `EnumIs` macro. This macro automatically implements `is_{variant_name}` methods for each variant of the enum. It provides a convenient way to check if an enum instance matches a particular variant. No external dependencies are required.\nSOURCE: https://github.com/peternator7/strum/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n  #[derive(EnumIs)]\n  enum Color {\n      Red,\n      Blue,\n      Green,\n  }\n\n  #[test]\n  fn simple_test() {\n      assert!(Color::Red.is_red());\n  }\n```\n\n----------------------------------------\n\nTITLE: Using EnumTable Macro, Rust\nDESCRIPTION: This example demonstrates the usage of the `EnumTable` macro. The macro adds a new type that stores an item for each variant of the enum. It is useful for storing a value for each variant of an enum. This feature is marked as experimental.  The example shows the initialization of a `ColorTable` filled with zeros and how to increment values based on enum variants.\nSOURCE: https://github.com/peternator7/strum/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n  use strum::EnumTable;\n\n  #[derive(Copy, Clone, Debug, EnumTable)]\n  enum Color {\n    Red,\n    Blue,\n    Green,\n  }\n\n  fn main() {\n    let mut counts = ColorTable::filled(0);\n    for color in &[Color::Red, Color::Red, Color::Green]] {\n      counts[color] += 1;\n    }\n\n    assert_eq!(counts[Color::Red], 2);\n    assert_eq!(counts[Color::Blue], 0);\n    assert_eq!(counts[Color::Green], 1);\n  }\n```\n\n----------------------------------------\n\nTITLE: Old way of adding attributes to a variant\nDESCRIPTION: This code snippet illustrates the old syntax for adding `disabled` and `default` attributes to an enum variant using the `strum` macro. This syntax is now deprecated and will generate an error.\nSOURCE: https://github.com/peternator7/strum/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// OLD WAY\nenum Test {\n  #[strum(disabled = \"true\", default = \"true\")]\n  Variant(String)\n}\n```"
  }
]