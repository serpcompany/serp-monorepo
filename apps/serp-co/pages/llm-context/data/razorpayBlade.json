[
  {
    "owner": "razorpay",
    "repo": "blade",
    "content": "TITLE: Implementing Cross-Platform Accessibility Attributes with makeAccessible Function in TypeScript\nDESCRIPTION: This function provides a compatibility layer for adding accessibility attributes that work seamlessly across both native and web platforms. It takes standardized accessibility props and maps them to platform-specific properties.\n\nLANGUAGE: typescript\nCODE:\n```\nconst props = makeAccessible({\n  label: 'hello world',\n  labelledBy: 'id1',\n  role: 'button',\n  checked: false,\n  selected: false,\n  disabled: false,\n  expanded: false,\n  busy: false,\n});\n\n// In react native the above code will return:\n{\n  accessibilityLabel: 'hello world',\n  accessibilityLabelledBy: 'id1',\n  accessibilityRole: 'button',\n  accessibilityState: {\n    checked: false,\n    selected: false,\n    disabled: false,\n    expanded: false,\n    busy: false,\n  },\n}\n\n// In web the above code will return:\n{\n  'aria-labelledby': 'id1',\n  'aria-label': 'hello world',\n  'role': 'button',\n  'aria-checked': 'true',\n  'aria-selected': 'false',\n  'aria-disabled': 'true',\n  'aria-expanded': 'false',\n  'aria-busy': 'false',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Visually Hidden Content with CSS for Screen Reader Access\nDESCRIPTION: CSS implementation for creating content that is hidden visually but still accessible to screen readers. This technique (often called .sr-only) ensures screen reader users can access content that doesn't need to be visible on screen.\n\nLANGUAGE: css\nCODE:\n```\n.sr-only {\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n}\n\n<button>\n  <span class=\"sr-only\">Save</span>\n  <span class=\"save-icon\"></span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Component with Compound Components Pattern in JSX\nDESCRIPTION: This example demonstrates the compound components pattern for an Alert component, showing how to structure components with title, description, and action buttons. It includes event handlers for button clicks and allows for linking to external resources.\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert title=\"International Payments Only\">\n  <Alert.Description>\n    Currently you can only accept payments in international currencies using PayPal. You cannot\n    accept payments in INR (₹) using PayPal. <Link href=\"https://razorpay.com\">Know More</Link>\n  </Alert.Description>\n  <Alert.PrimaryAction\n    onClick={() => {\n      // do something\n    }}\n  >\n    Primary Action\n  </Alert.PrimaryAction>\n  <Alert.SecondaryAction\n    onClick={() => {\n      // do something\n    }}\n    href=\"https://razorpay.com\"\n  >\n    Link\n  </Alert.SecondaryAction>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Toast Functionality in React with Blade Components\nDESCRIPTION: Shows how to implement basic toast functionality using the Blade toast component. This includes setting up the BladeProvider, ToastContainer, and using the useToast hook to display customizable toasts with various properties like color, content, icons, and actions.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BladeProvider, ToastContainer, useToast } from \"@razorpay/blade/components\"\n\nconst HomePage = () => {\n  const toast = useToast();\n\n  return (\n    <Button\n      onClick={() => {\n        toast.show({\n          type: 'informational',\n          color: 'success',\n          content: 'Payment Successful',\n          leading: <DollarIcon />,\n          autoDismiss: true,\n          onDismissButtonClick: () => {\n            console.log('Toast dismissed');\n          },\n          action: {\n            text: 'View',\n            onClick: () => {\n              console.log('Toast action clicked');\n            }\n          }\n        });\n      }}\n    >\n      Show Toast\n    </Button>\n  );\n};\n\nconst App = () => {\n  return (\n    <BladeProvider>\n      <ToastContainer position=\"bottom-left\" />\n      <HomePage />\n    </BladeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Stack Layout with Direction Prop in JSX\nDESCRIPTION: Example of using the Stack component with responsive direction prop to create a layout that changes from column to row based on screen size. Components are arranged in Stack with Cards that display titles and content.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stack, Card, Title } from '@razorpay/blade/components';\n\nconst Dashboard = () => (\n  <Stack direction={{ s: 'column', l: 'row' }}>\n    <Card>\n      <Title>This is Card Title</Title>\n      <Content>This is Card Content</Content>\n    </Card>\n    <Card>\n      <Title>This is Card Title</Title>\n      <Content>This is Card Content</Content>\n    </Card>\n    <Card>\n      <Title>This is Card Title</Title>\n      <Content>This is Card Content</Content>\n    </Card>\n  </Stack>\n);\n\nexport default Dashboard;\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Component with Header, Body and Footer in React (Blade)\nDESCRIPTION: A comprehensive example showing how to implement a Card component with its various parts including header, body, and footer. This demonstrates proper usage of the Card API with leading and trailing sections for both header and footer.\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Card,\n  CardHeader,\n  CardHeaderLeading,\n  CardHeaderTrailing,\n  CardHeaderBadge,\n  CardHeaderIcon,\n  CardHeaderCounter,\n  CardBody,\n  CardFooter,\n  CardFooterLeading,\n  CardFooterTrailing,\n} from \"@razorpay/blade\"\n\n<Card surfaceLevel={2}>\n  <CardHeader>\n    <CardHeaderLeading  \n      title=\"Payments Links\" \n      subtitle=\"Share payment link via an email, SMS, messenger, chatbot etc.\" \n      prefix={<CardHeaderIcon icon={DollarIcon} />}\n      suffix={<CardHeaderCounter amount={20} />}\n    />\n    <CardHeaderTrailing \n      visual={<CardHeaderBadge variant=\"positive\">NEW</CardHeaderBadge>} \n    />\n  </CardHeader>\n  <CardBody>\n    Card Body Content\n  </CardBody>\n  <CardFooter>\n    <CardFooterLeading \n      title=\"Card Footer Title\" \n      subtitle=\"Card footer subtitle\" \n    />\n    <CardFooterTrailing \n      actions={{\n        primaryAction: { text: 'Know more', onClick: () => {} },\n        secondaryAction: { text: 'Read Docs', onClick: () => {} },\n      }}\n    />\n  </CardFooter>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Table Component with Composable API in React\nDESCRIPTION: This code snippet demonstrates the implementation of a Table component using a composable API approach. It shows how to create a table with sorting, selection, pagination, and toolbar functionality. The example includes sticky headers/footers, row density control, and the ability to render custom cell content.\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n    data={data} // This contains the actual data to be rendered in the table which would be retrieved from some API\n    selectionType='single'\n    onSelectionChange={onSelectionChange}\n    sortFunctions={sortFunctions}\n    onSortChange={onSortChange}\n    isLoading={false}\n    isStickyHeader={true}\n    isStickyFooter={true}\n    isStickyFistColumn={true}\n    rowDensity='normal'\n    showStripedRows={true}\n    pagination={()=>(\n        <TablePagination\n          defaultPageSize={10}\n          label='1-10 of 100'\n          showLabel='left'\n          showPageSizePicker\n          showPageNumberSelector\n          onPageChange={console.log}\n          onPageSizeChange={console.log}\n        />\n      )}\n   toolbar={()=>(\n        <TableToolbar title=\"Users\" itemsSelectedTitle={`${selectedUsersCount} Users selected`}>\n            <ToolbarActions>\n                <Button>Export</Button>\n            </ToolbarActions>\n        </TableToolbar>\n      )}\n>\n{(tableData) => (\n  <>\n    <TableHeader>\n      <TableHeaderRow>\n         <TableHeaderCell headerKey='firstName'>\n          First Name\n        </TableHeaderCell>\n        <TableHeaderCell headerKey='lastName'>\n          Last Name\n        </TableHeaderCell>\n        <TableHeaderCell headerKey='balance'>\n          Balance\n          <Tooltip content='Current bank balance'>\n            <InfoIcon size='medium' />\n          </Tooltip>\n        </TableHeaderCell>\n       </TableHeaderRow>\n     </TableHeader>\n\n    <TableBody>\n      {tableData.map((row) => (\n        <TableRow onClick={console.log} isDisabled={false}>\n          <TableCell>\n            {row.firstName}\n          </TableCell>\n          <TableCell>\n            {row.lastName}\n          </TableCell>\n          <TableCell>\n            {row.balance}\n            <Badge>Low</Badge>\n          </TableCell>\n        <TableRow>\n      ))}\n    </TableBody>\n\n    <TableFooter>\n      <TableFooterRow>\n        <TableFooterCell>\n          Total\n        </TableFooterCell>\n        <TableFooterCell>\n          {computedTotalBalance}\n        </TableFooterCell>\n      </TableFooterRow>\n    </TableFooter>\n   </>\n  )\n}\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Card Components in Blade Design System\nDESCRIPTION: This example demonstrates the new API approach for Card components in the Blade design system, where all Card-related components are imported individually rather than being accessed as static methods. The example shows how to construct a Card with header elements including icons, counters, and badges.\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Card,\n  CardHeader,\n  CardHeaderLeading,\n  CardHeaderTrailing,\n  CardHeaderIcon,\n  CardHeaderCounter,\n  CardHeaderBadge\n} from \"@razorpay/blade\"\n\n\n<Card surfaceLevel={2}>\n  <CardHeader>\n    <CardHeaderLeading  \n      title=\"Payments Links\" \n      subtitle=\"Share payment link via an email, SMS, messenger, chatbot etc.\" \n      prefix={<CardHeaderIcon icon={DollarIcon} />}\n      suffix={<CardHeaderCounter amount={20} />}\n    />\n    <CardHeaderTrailing \n      visual={<CardHeaderBadge variant=\"positive\">NEW</CardHeaderBadge>} \n    />\n  </CardHeader>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Table Component with Composable API in React\nDESCRIPTION: This code snippet demonstrates the implementation of a Table component using a composable API approach. It shows how to create a table with sorting, selection, pagination, and toolbar functionality. The example includes sticky headers/footers, row density control, and the ability to render custom cell content.\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n    data={data} // This contains the actual data to be rendered in the table which would be retrieved from some API\n    selectionType='single'\n    onSelectionChange={onSelectionChange}\n    sortFunctions={sortFunctions}\n    onSortChange={onSortChange}\n    isLoading={false}\n    isStickyHeader={true}\n    isStickyFooter={true}\n    isStickyFistColumn={true}\n    rowDensity='normal'\n    showStripedRows={true}\n    pagination={()=>(\n        <TablePagination\n          defaultPageSize={10}\n          label='1-10 of 100'\n          showLabel='left'\n          showPageSizePicker\n          showPageNumberSelector\n          onPageChange={console.log}\n          onPageSizeChange={console.log}\n        />\n      )}\n   toolbar={()=>(\n        <TableToolbar title=\"Users\" itemsSelectedTitle={`${selectedUsersCount} Users selected`}>\n            <ToolbarActions>\n                <Button>Export</Button>\n            </ToolbarActions>\n        </TableToolbar>\n      )}\n>\n{(tableData) => (\n  <>\n    <TableHeader>\n      <TableHeaderRow>\n         <TableHeaderCell headerKey='firstName'>\n          First Name\n        </TableHeaderCell>\n        <TableHeaderCell headerKey='lastName'>\n          Last Name\n        </TableHeaderCell>\n        <TableHeaderCell headerKey='balance'>\n          Balance\n          <Tooltip content='Current bank balance'>\n            <InfoIcon size='medium' />\n          </Tooltip>\n        </TableHeaderCell>\n       </TableHeaderRow>\n     </TableHeader>\n\n    <TableBody>\n      {tableData.map((row) => (\n        <TableRow onClick={console.log} isDisabled={false}>\n          <TableCell>\n            {row.firstName}\n          </TableCell>\n          <TableCell>\n            {row.lastName}\n          </TableCell>\n          <TableCell>\n            {row.balance}\n            <Badge>Low</Badge>\n          </TableCell>\n        <TableRow>\n      ))}\n    </TableBody>\n\n    <TableFooter>\n      <TableFooterRow>\n        <TableFooterCell>\n          Total\n        </TableFooterCell>\n        <TableFooterCell>\n          {computedTotalBalance}\n        </TableFooterCell>\n      </TableFooterRow>\n    </TableFooter>\n   </>\n  )\n}\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Implementing SortFunctionsType for Table Sorting in TypeScript\nDESCRIPTION: Defines the SortFunctionsType that maps column keys to sort functions. Each function takes an array of TableNode objects and returns a sorted array of TableNode objects.\n\nLANGUAGE: typescript\nCODE:\n```\ntype SortFunctionsType = {\n  [key: string]: (array: TableNode[]) => TableNode[];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SideNav with Nested Navigation Levels in React\nDESCRIPTION: This code snippet demonstrates the primary API for the SideNav component, showing how to create a navigation sidebar with multiple levels of navigation, section headings, and a footer. It uses react-router-dom's NavLink for navigation.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NavLink } from 'react-router-dom';\n\n// Component\n<SideNav banner={<CustomActivationCard />}>\n  <SideNavBody>\n    {/* L1 Items */}\n    <SideNavLink as={NavLink} title=\"Home\" icon={HomeIcon} href=\"/\" />\n    <SideNavLink\n      as={NavLink}\n      title=\"Create Payouts\"\n      trailing={<Button icon={PlusIcon} variant=\"tertiary\" />}\n      icon={HomeIcon}\n      href=\"/create-payouts\"\n    />\n\n    <SideNavLink \n      as={NavLink} \n      title=\"Accounts\" \n      icon={AccountsIcon} \n      // sets the submenu as active\n      isActive={true}\n      href=\"/accounts\"\n    >\n      {/* L2 */}\n      <SideNavLevel title=\"Accounts\">\n        <SideNavLink as={NavLink} title=\"Profile\" icon={UserIcon} href=\"/accounts/profile\" />\n        <SideNavLink \n          as={NavLink} \n          title=\"Settings\" \n          icon={UserIcon} \n          // sets the link as active \n          isActive={true} \n          href=\"/accounts/settings\" \n        />\n        <SideNavLink as={NavLink} title=\"Edit\" icon={UserIcon} href=\"/accounts/settings\">\n          {/* L3 */}\n          <SideNavLevel>\n            <SideNavLink as={NavLink} title=\"Password\" icon={PassIcon} href=\"/accounts/edit/pass\" />\n            <SideNavLink as={NavLink} title=\"Email\" icon={EmailIcon} href=\"/accounts/edit/email\" />\n          </SideNavLevel>\n        </SideNavLink>\n      </SideNavLevel>\n    </SideNavLink>\n\n    {/* Section Heading */}\n    <SideNavSection title=\"Products\" maxVisibleItems={3}>\n      <SideNavLink as={NavLink} href=\"/payment-gateway\" title=\"Payment Gateway\" />\n      <SideNavLink as={NavLink} href=\"/payment-pages\" title=\"Payment Pages\" />\n      <SideNavLink as={NavLink} href=\"/payment-links\" title=\"Payment Links\" />\n      <SideNavLink as={NavLink} href=\"/qr-codes\" title=\"QR Codes\" />\n      <SideNavLink as={NavLink} href=\"/subscriptions\" title=\"Subscriptions\" />\n    </SideNavSection>\n  </SideNavBody>\n\n\n  {/* Footer */}\n  <SideNavFooter>\n    <Box display=\"flex\" paddingY=\"spacing.4\" paddingX=\"spacing.3\" justifyContent=\"spacing-between\">\n      <Box display=\"flex\" gap=\"spacing.3\">\n        <Indicator color=\"positive\" />\n        <Text>Test Mode</Text>\n      </Box>\n      <Switch />\n    </Box>\n    <SideNavLink as={NavLink} href=\"/settings\" title=\"Settings\" />\n  </SideNavFooter>\n</SideNav>;\n```\n\n----------------------------------------\n\nTITLE: Implementing SpotlightPopover with Custom Footer in Blade UI Framework\nDESCRIPTION: This snippet demonstrates how to implement a guided tour using the SpotlightPopover component with a custom footer. It shows the complete implementation including defining steps, managing state, and handling step changes. The example showcases integration with a DashboardPage component that contains the highlightable elements.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SpotlightPopover, SpotlightPopoverFooter } from '@razorpay/blade/components';\nimport type { SpotlightPopoverSteps } from '@razorpay/blade/components';\n\nconst Footer = ({ activeStep, totalSteps, goToNext, goToPrevious, stopTour }) => {\n  const isLast = activeStep === totalSteps - 1;\n  const isFirst = activeStep === 0;\n  return (\n    <SpotlightPopoverFooter\n      activeStep={activeStep}\n      totalSteps={totalSteps}\n      actions={{\n        primary: isLast\n          ? { text: 'Done', onClick: stopTour }\n          : { text: 'Next', onClick: goToNext },\n        secondary: isFirst\n          ? undefined\n          : { text: 'Prev', onClick: goToPrevious },\n      }}\n    />\n  );\n};\n\nconst steps: SpotlightPopoverSteps = [\n  {\n    name: 'step-1',\n    title: 'Step 1',\n    content: ({ activeStep }) => (\n      <Text>Some content {activeStep}</Text>\n    ),\n    footer: Footer,\n  },\n  {\n    name: 'step-2',\n    title: 'Step 2',\n    content: ({ activeStep }) => (\n      <Text>Some content {activeStep}</Text>\n    ),\n    footer: Footer,\n  },\n  {\n    name: 'step-3',\n    title: 'Step 3',\n    content: ({ gotToNext, activeStep }) => (\n      <Box>\n        <Text>Some content {activeStep}</Text>\n        <Button onClick={gotToNext}>Next</Button>\n      </Box>\n    ),\n    footer: Footer,\n  },\n];\n\nconst App = () => {\n  const [IsOpen, setIsOpen] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n\n  const handleOpenChange = ({ isOpen }) => {\n    setIsOpen(isOpen);\n    // reset the active step so if the user opens the tour again,\n    // it starts from the first step\n    setActiveStep(0);\n  };\n\n  const handleFinish = () => {\n    // do something when the tour is finished\n    // ie: send an analytic event\n    // or: close the tour\n    // or: reset the active step\n  };\n\n  const handleStepChange = (step: number) => {\n    setActiveStep(step);\n    // do something with the step\n    // ie: send an analytic event\n  };\n\n  return (\n    <Box>\n      <Button onClick={() => setIsOpen(true)}>Show SpotlightPopover</Button>\n      <SpotlightPopover\n        steps={steps}\n        isOpen={isOpen}\n        onOpenChange={handleOpenChange}\n        onFinish={handleFinish}\n        onStepChange={handleStepChange}\n        activeStep={activeStep}\n      >\n        <DashboardPage />\n      </SpotlightPopover>\n    </Box>\n  );\n};\n\n// In some other file: DashboardPage.tsx\nconst DashboardPage = () => {\n  return (\n    <Box>\n      <SpotlightPopoverStep name=\"step-1\">\n        <Button>Click me</Button>\n      </SpotlightPopoverStep>\n\n      <Box>\n        <SpotlightPopoverStep name=\"step-2\">\n          <Text>Some content</Text>\n        </SpotlightPopoverStep>\n      </Box>\n\n      <Card>\n        <CardBody>\n          <SpotlightPopoverStep name=\"step-3\">\n            <Box>\n              <Text>Some content</Text>\n              <Text>Some content</Text>\n              <Text>Some content</Text>\n            </Box>\n          </SpotlightPopoverStep>\n        </CardBody>\n      </Card>\n    </Box>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Search Components with React.Lazy for Optimized Bundling\nDESCRIPTION: Improved implementation of conditional rendering using React.Lazy to reduce bundle size. This approach dynamically imports components only when needed and uses Suspense for handling the loading state.\n\nLANGUAGE: jsx\nCODE:\n```\n// With React.Lazy\nimport { Suspense } from 'react';\n\nconst LargeSearchInput = React.lazy(() => import('@razorpay/blade/components'));\nconst SmallSearchInput = React.lazy(() => import('@razorpay/blade/components'));\n\nconst SearchScreen = () => (\n  <Suspense fallback={<div>Loading...</div>}>\n    {isMobile ? <SmallSearchInput /> : <LargeSearchInput />}\n  </Suspense>\n);\n\nexport default SearchScreen;\n```\n\n----------------------------------------\n\nTITLE: Composing BottomSheet with Select Dropdown (Responsive Implementation)\nDESCRIPTION: Complex implementation showing how BottomSheet can be composed with SelectInput dropdown in a responsive way. Uses lazy loading and device detection to render either BottomSheet on mobile or DropdownOverlay on desktop.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner, useTheme, useBreakpoint } from \"@razorpay/blade\";\n\nconst BottomSheet = React.lazy();\nconst DropdownOverlay = React.lazy();\n\nconst App = () => {\n  const { theme } = useTheme();\n  const { matchedDeviceType } = useBreakpoint({ breakpoints: theme.breakpoints });\n  const isMobile = matchedDeviceType === 'mobile';\n\n  return (\n    <Dropdown selectionType={selectionType}>\n      <SelectInput label=\"Select Action\" />\n      {/* We can either put a fallback spinner or show skeleton loaders */}\n      <React.Suspense fallback={<Spinner />}>\n        {isMobile ? (\n          <BottomSheet>\n            <BottomSheetHeader>\n              <BottomSheetHeaderLeading title=\"Payments Links\" prefix={PayIcon} />\n            </BottomSheetHeader>\n            <BottomSheetBody>\n              <SelectContent />\n            </BottomSheetBody>\n            <BottomSheetFooter>\n              <BottomSheetFooterLeading title=\"Footer Title\" prefix={icon} />\n              <BottomSheetFooterTrailing\n                actions={{\n                  primaryAction: { text: 'Confirm' },\n                  secondaryAction: { text: 'Close' },\n                }}\n              />\n            </BottomSheetFooter>\n          </BottomSheet>\n        ) : (\n          <DropdownOverlay>\n            <SelectContent />\n          </DropdownOverlay>\n        )}\n      </React.Suspense>\n    </Dropdown>\n  );\n};\n\nconst SelectContent = () => {\n  return (\n    <ActionList>\n      <ActionListItem\n        leading={<ActionListItemIcon icon={SettingsIcon} />}\n        title=\"Settings\"\n        value=\"settings\"\n      />\n      <ActionListItem leading={<ActionListItemIcon icon={InfoIcon} />} title=\"Info\" value=\"info\" />\n    </ActionList>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Input Field Props Configuration in TypeScript/React\nDESCRIPTION: This code snippet defines TypeScript props for an input field component, including autocomplete suggestions, keyboard return key types, keyboard type options, and text alignment settings.\n\nLANGUAGE: TypeScript\nCODE:\n```\n(value: string) => ReactNode\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n(value?: string) => ReactNode\n```\n\n----------------------------------------\n\nTITLE: Full Controlled AutoComplete Component in JSX\nDESCRIPTION: A complete implementation of a controlled AutoComplete component with state management for filtering, input value tracking, and selection handling. This example demonstrates the complete flow with proper initialization and rendering.\n\nLANGUAGE: jsx\nCODE:\n```\nconst allCities = [\n  {\n    title: 'Mumbai',\n    value: 'mumbai'\n  },\n  {\n    title: 'Pune',\n    value: 'pune'\n  },\n  {\n    title: 'Bangalore',\n    value: 'bangalore'\n  },\n];\n\nconst ControlledAutoComplete = () => {\n  // Controlled Filtering\n  const [filteredValues, setFilteredValues] = React.useState(allCities);\n  // Controlled Input Value\n  const [currentInputValue, setCurrentInputValue] = React.useState('');\n  // Controlled Selections\n  const [currentSelections, setCurrentSelections] = React.useState<string[]>([]);\n\n  return (\n    <Dropdown>\n      <AutoComplete\n        label=\"Select City\"\n        // Controlled input value\n        // Sets the input value of input element in AutoComplete\n        inputValue={currentInputValue}\n        // Triggers when input value changes\n        onInputValueChange={(inputValue) => {\n          if (inputValue) {\n            // filtering logic\n            const allCityValues = allCities.map((city) => city.value);\n            const filteredCities = allCityValues.filter((cityValue) => cityValue.includes(inputValue));\n            setFilteredValues(filteredCities);\n          } else {\n            setFilteredValues(allCityValues);\n          }\n          setCurrentInputValue(inputValue);\n        }}\n        // Selected Items in AutoComplete\n        value={currentSelections}\n        onChange={({ values }) => {\n          setCurrentSelections(values);\n        }}\n        // controls the values that should be shown to user\n        filteredValues={filteredValues}\n      />\n      <DropdownOverlay>\n        <ActionList>\n          {allCities.map((city) => (\n            <ActionListItem\n              title={city.title}\n              value={city.value}\n            />\n          ))}\n        </ActionList>\n      </DropdownOverlay>\n    </Dropdown>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled State Accordion in React with Blade\nDESCRIPTION: Example showing how to implement a controlled state Accordion component using useState to manage the expanded item index. The component includes multiple accordion items with headers and body content.\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const [index, setIndex] = useState(0);\n  const onExpandChange = ({ expandedIndex }) => setIndex(expandedIndex);\n\n  return (\n    <Accordion expandedIndex={index} onExpandChange={onExpandChange}>\n      <AccordionItem>\n        <AccordionItemHeader title=\"How can I setup Route?\" />\n        <AccordionItemBody>\n          You can use Razorpay Route from the Dashboard or using APIs to transfer money to\n          customers.\n        </AccordionItemBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionItemHeader title=\"How can I setup QR Codes?\" />\n        <AccordionItemBody>Just use Razorpay</AccordionItemBody>\n      </AccordionItem>\n    </Accordion>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Toast Component Props Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Toast component props, detailing all available configuration options including toast type, color, content, leading element, auto-dismiss behavior, duration, callbacks, and actions.\n\nLANGUAGE: ts\nCODE:\n```\ntype ToastProps = {\n  /**\n   * @default `informational`\n   */\n  type?: 'informational' | 'promotional';\n\n  /**\n   * @default `neutral`\n   */\n  color?: 'neutral' | 'positive' | 'negative' | 'notice' | 'information'\n\n  /**\n   * Content of the toast\n   */\n  content: React.ReactNode;\n\n  /**\n   * Can be used to render an icon or asset\n   */\n  leading?: React.ReactElement;\n\n  /**\n   * If true, the toast will be dismissed after few seconds\n   * \n   * @default true - for informational toast\n   * @default false - for promotional toast\n   */\n  autoDismiss?: boolean;\n\n  /**\n   * Duration after which the toast will be dismissed (in ms)\n   * \n   * Duration for promotional toast is 8s\n   * Duration for informational toast is 4s\n   */\n  duration?: 8000 | 4000;\n\n  /**\n   * Called when the toast is dismissed or duration runs out\n   */\n  onDismissButtonClick?: () => void;\n\n  /**\n   * Primary action of toast\n   */\n  action?: {\n    text: string;\n    onClick?: (e: Event) => void;\n    isLoading? boolean;\n  }\n\n  /**\n   * Forwarded to react-hot-toast\n   * \n   * This can be used to programatically update toasts by providing an id\n   */\n  toastId?: string; \n}\n```\n\n----------------------------------------\n\nTITLE: Composable Table Implementation Example in JSX/React\nDESCRIPTION: Example showing how to use the composable table API to create a complete table with headers, body, footer, and additional features like pagination and toolbar. Demonstrates the component composition pattern.\n\nLANGUAGE: jsx\nCODE:\n```\n// Composable Table\n\n<Table\n    data={data} // This contains the actual data to be rendered in the table which would be retrieved from some API\n    selectionType='single'\n    onSelectionChange={onSelectionChange}\n    sortFunctions={sortFunctions}\n    onSortChange={onSortChange}\n    isLoading={false}\n    rowDensity='normal'\n    showStripedRows={true}\n    pagination={()=>(\n        <TablePagination\n          defaultPageSize={10}\n          label='1-10 of 100'\n          showLabel='left'\n          showPageSizePicker\n          showPageNumberSelector\n          onPageChange={console.log}\n          onPageSizeChange={console.log}\n        />\n      )}\n   toolbar={()=>(\n        <TableToolbar title=\"Users\" itemsSelectedTitle={`${selectedUsersCount} Users selected`}>\n            <ToolbarActions>\n                <Button>Export</Button>\n            </ToolbarActions>\n        </TableToolbar>\n      )}\n>\n{(tableData) => (\n  <>\n    <TableHeader>\n      <TableHeaderRow>\n         <TableHeaderCell headerKey='firstName'>\n          First Name\n        </TableHeaderCell>\n        <TableHeaderCell headerKey='lastName'>\n          Last Name\n        </TableHeaderCell>\n        <TableHeaderCell headerKey='balance'>\n          Balance\n          <Tooltip content='Current bank balance'>\n            <InfoIcon size='medium' />\n          </Tooltip>\n        </TableHeaderCell>\n       </TableHeaderRow>\n     </TableHeader>\n\n    <TableBody>\n      {tableData.map((row) => (\n        <TableRow onClick={console.log} isDisabled={false}>\n          <TableCell>\n            {row.firstName}\n          </TableCell>\n          <TableCell>\n            {row.lastName}\n          </TableCell>\n          <TableCell>\n            {row.balance}\n            <Badge>Low</Badge>\n          </TableCell>\n        <TableRow>\n      ))}\n    </TableBody>\n\n    <TableFooter>\n      <TableFooterRow>\n        <TableFooterCell>\n          Total\n        </TableFooterCell>\n        <TableFooterCell>\n          {computedTotalBalance}\n        </TableFooterCell>\n      </TableFooterRow>\n    </TableFooter>\n   </>\n  )\n}\n</Table>\n```\n\n----------------------------------------\n\nTITLE: Using Layout Styling Props with Box and Button Components in Blade\nDESCRIPTION: This example demonstrates how to use layout-based styling props directly on Blade components. The Box component uses flex layout properties while Button components utilize margin properties, showcasing how styling props can be used for minor adjustments without requiring additional wrapper components.\n\nLANGUAGE: tsx\nCODE:\n```\n<Box\n  display=\"flex\"\n  flexDirection=\"column\"\n  alignItems=\"center\"\n  marginTop=\"spacing.1\"\n  marginBottom=\"spacing.2\"\n  paddingX=\"spacing.1\"\n>\n  <Button>Button 1</Button>\n  <Button marginTop=\"spacing.1\">Button 2</Button>\n  <Button marginTop=\"spacing.2\">Button 3</Button>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Table Component with Pagination in React\nDESCRIPTION: Example implementation of a table component with pagination, sorting, and editable cells using the Blade UI library. This component demonstrates how to create a data table with mock data and configure toolbar actions, pagination controls, and custom cell rendering.\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Table,\n  TableEditableCell,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n  TableToolbar,\n  TableToolbarActions,\n  TableFooter,\n  TableFooterRow,\n  TableFooterCell,\n  TablePagination,\n} from '@razorpay/blade/components';\n\nconst nodes: Item[] = [\n  ...Array.from({ length: 100 }, (_, i) => ({\n    id: (i + 1).toString(),\n    paymentId: `rzp${Math.floor(Math.random() * 1000000)}`,\n    amount: Number((Math.random() * 10000).toFixed(2)),\n    status: ['Completed', 'Pending', 'Failed'][Math.floor(Math.random() * 3)],\n    date: new Date(2021, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),\n    type: ['Payout', 'Refund'][Math.floor(Math.random() * 2)],\n    method: ['Bank Transfer', 'Credit Card', 'PayPal'][Math.floor(Math.random() * 3)],\n    bank: ['HDFC', 'ICICI', 'SBI'][Math.floor(Math.random() * 3)],\n    account: Math.floor(Math.random() * 1000000000).toString(),\n    name: [\n      'John Doe',\n      'Jane Doe',\n      'Bob Smith',\n      'Alice Smith',\n      'John Smith',\n      'Jane Smith',\n      'Bob Doe',\n      'Alice Doe',\n    ][Math.floor(Math.random() * 8)],\n  })),\n];\n\ntype Item = {\n  id: string,\n  paymentId: string,\n  amount: number,\n  status: string,\n  date: Date,\n  type: string,\n  method: string,\n  bank: string,\n  account: string,\n  name: string,\n};\nconst data: TableData<Item> = {\n  nodes,\n};\n\nconst TableComponent: StoryFn<typeof Table> = ({ ...args }) => {\n  return (\n    <Box\n      backgroundColor={args.backgroundColor ?? 'surface.background.gray.intense'}\n      padding=\"spacing.5\"\n      overflow=\"auto\"\n      minHeight=\"400px\"\n    >\n      <Table\n        {...args}\n        data={data}\n        toolbar={\n          <TableToolbar title=\"Showing 1-10 [Items]\" selectedTitle=\"Showing 1-10 [Items]\">\n            <TableToolbarActions>\n              <Button variant=\"secondary\" marginRight=\"spacing.2\">\n                Export\n              </Button>\n              <Button>Refund</Button>\n            </TableToolbarActions>\n          </TableToolbar>\n        }\n        sortFunctions={{\n          ID: (array) => array.sort((a, b) => Number(a.id) - Number(b.id)),\n          AMOUNT: (array) => array.sort((a, b) => a.amount - b.amount),\n          PAYMENT_ID: (array) => array.sort((a, b) => a.paymentId.localeCompare(b.paymentId)),\n          DATE: (array) => array.sort((a, b) => a.date.getTime() - b.date.getTime()),\n          STATUS: (array) => array.sort((a, b) => a.status.localeCompare(b.status)),\n        }}\n        pagination={\n          <TablePagination\n            onPageChange={console.log}\n            defaultPageSize={10}\n            onPageSizeChange={console.log}\n            showPageSizePicker\n            showPageNumberSelector\n          />\n        }\n      >\n        {/* tableData variables has things that you passed from data.nodes in Table component */}\n        {(tableData) => (\n          <>\n            {/* Add when you need header */}\n            <TableHeader>\n              <TableHeaderRow>\n                <TableHeaderCell headerKey=\"PAYMENT_ID\">ID</TableHeaderCell>\n                <TableHeaderCell headerKey=\"AMOUNT\">Amount</TableHeaderCell>\n                <TableHeaderCell headerKey=\"ACCOUNT\">Account</TableHeaderCell>\n                <TableHeaderCell headerKey=\"DATE\">Date</TableHeaderCell>\n                <TableHeaderCell headerKey=\"METHOD\">Method</TableHeaderCell>\n                <TableHeaderCell headerKey=\"STATUS\">Status</TableHeaderCell>\n              </TableHeaderRow>\n            </TableHeader>\n            <TableBody>\n              {tableData.map((tableItem, index) => (\n                <TableRow key={index} item={tableItem}>\n                  <TableCell>\n                    <Code size=\"medium\">{tableItem.paymentId}</Code>\n                  </TableCell>\n                  <TableEditableCell\n                    accessibilityLabel=\"Amount\"\n                    placeholder=\"Enter text\"\n                    successText=\"Amount is valid\"\n                  />\n                  <TableCell>{tableItem.account}</TableCell>\n                  <TableCell>\n                    {tableItem.date?.toLocaleDateString('en-IN', {\n                      year: 'numeric',\n                      month: '2-digit',\n                      day: '2-digit',\n                    })}\n                  </TableCell>\n                  <TableCell>{tableItem.method}</TableCell>\n                  <TableCell>\n                    <Badge\n                      size=\"medium\"\n                      color={\n                        tableItem.status === 'Completed'\n                          ? 'positive'\n                          : tableItem.status === 'Pending'\n                          ? 'notice'\n                          : tableItem.status === 'Failed'\n                          ? 'negative'\n                          : 'primary'\n                      }\n                    >\n                      {tableItem.status}\n                    </Badge>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n            {/* Add when you need footer */}\n            <TableFooter>\n              <TableFooterRow>\n                <TableFooterCell>Total</TableFooterCell>\n                <TableFooterCell>-</TableFooterCell>\n                <TableFooterCell>-</TableFooterCell>\n                <TableFooterCell>-</TableFooterCell>\n                <TableFooterCell>-</TableFooterCell>\n                {args.selectionType === 'multiple' ? <TableFooterCell>-</TableFooterCell> : null}\n                <TableFooterCell>\n                  <Amount value={10} />\n                </TableFooterCell>\n              </TableFooterRow>\n            </TableFooter>\n          </>\n        )}\n      </Table>\n    </Box>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Tabs Component Props Interface\nDESCRIPTION: TypeScript interface for the Tabs component, detailing all available props including value, orientation, size, variant, and lazy loading options.\n\nLANGUAGE: ts\nCODE:\n```\ntype TabsProps = {\n  /**\n   * The content of the component, accepts `TabList` and `TabPanel` components.\n   */\n  children: React.ReactNode;\n  /**\n   * The value of the selected tab, If set the component will be controlled.\n   */\n  value?: string;\n  /**\n   * The default value of the selected tab, in case the Tabs component is uncontrolled.\n   */\n  defaultValue?: string;\n  /**\n   * Callback fired when the value changes.\n   */\n  onChange?: (value: string) => void;\n  /**\n   * The orientation of the tabs.\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * The size of the tabs.\n   */\n  size?: 'medium' | 'large';\n  /**\n   * The variant of the tabs.\n   */\n  variant?: 'bordered' | 'filled';\n  /**\n   * If `true`, the TabItems will grow to use all the available space.\n   */\n  isFullWidthTabItem?: boolean;\n  /**\n   * By default the TabPanels will be mounted to the DOM even if they are not selected.\n   * \n   * If `true`, the TabPanels will only be mounted to the DOM when they are selected.\n   * \n   * @default false\n   */\n  isLazy?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Shake Animation with Framer Motion in React\nDESCRIPTION: React component example showing how to implement a shake animation on hover using Framer Motion. The animation is controlled through useAnimation hook and applies a series of translateX transformations with custom easing and duration from motion tokens.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAnimation } from 'framer-motion';\n\nfunction Example() {\n  const move = useAnimation(); // Create an animation control using `useAnimation`\n\n  return (\n    <motion.div\n        animate={move} // Create a motion div with motion and pass the move animation control to it\n        onHoverStart={() => // Start the `move` animation control inside `onHoverStart` that will translate the object in X axis\n          move.start(\n            {\n              translateX: [\n                \"0px\",   // 0%\n                \"-10px\", // 10%\n                \"0px\",   // 20%\n                \"10px\",  // 30%\n                \"0px\",   // 40%\n                \"-10px\", // 50%\n                \"0px\",   // 60%\n                \"10px\",  // 70%\n                \"0px\",   // 80%\n                \"-10px\", // 90%\n                \"0px\",   // 100%\n              ],\n            },\n            {\n              duration: motionToken.duration.quick3, // Set the duration of the animation using our motion tokens\n              ease: motionToken.easing.standard.effective, // Set the easing of the animation using our motion tokens\n            }\n          )\n        }\n      />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Adaptive Layout with Multiple Responsive Components\nDESCRIPTION: Comprehensive example of creating an adaptive layout with multiple responsive components including conditional navigation bars, hidden elements based on screen size, and responsive card layouts.\n\nLANGUAGE: jsx\nCODE:\n```\nimport loadable from '@loadable/component';\nimport { Stack, Card, Title, Hidden, Avatar, Divider } from '@razorpay/blade/components';\n\nconst DesktopNavBar = loadable(() => import('@razorpay/blade/components'));\nconst MobileNavBar = loadable(() => import('@razorpay/blade/components'));\nconst BottomNavBar = loadable(() => import('@razorpay/blade/components'));\n\nconst Dashboard = () => (\n  <Stack direction={{ s: 'column', l: 'row' }}>\n    {isMobile ? <MobileNavBar /> : <DesktopNavbar />}\n    <Stack direction=\"column\">\n      <Hidden hide={{ s: true, l: false }}>\n        <Stack direction=\"row\" justifyContent=\"space-between\">\n          <div>some profile information</div>\n          <Stack direction=\"row\">\n            <Avatar />\n            <Avatar />\n          </Stack>\n        </Stack>\n      </Hidden>\n      <Stack direction={{ s: 'column', l: 'row' }}>\n        <Card>\n          <Title>This is Card Title</Title>\n          <Content>This is Card Content</Content>\n        </Card>\n        <Card>\n          <Title>This is Card Title</Title>\n          <Content>This is Card Content</Content>\n        </Card>\n        <Card>\n          <Title>This is Card Title</Title>\n          <Content>This is Card Content</Content>\n        </Card>\n      </Stack>\n    </Stack>\n    <Hidden hide={{ s: false, l: true }}>\n      <BottomNavBar />\n    </Hidden>\n  </Stack>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing TextArea Component in React with Validation\nDESCRIPTION: Example showing how to use the TextArea component with validation state that changes based on input length. The component includes a label, placeholder, clear button, and helper text with conditional error/success messages.\n\nLANGUAGE: tsx\nCODE:\n```\n<TextArea\n  label=\"Enter Message\"\n  labelPosition=\"left\"\n  placeholder=\"Enter your message\"\n  showClearButton\n  helpText=\"Send message to author\"\n  errorText=\"Message cannot be blank\"\n  successText=\"Message sent\"\n  validationState={textareaValue.length < 10 ? 'error' : 'success'}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility Using makeAccessible Utility in Web Components\nDESCRIPTION: Example usage of the makeAccessible utility for implementing accessibility features in Blade components for web platform. This code is referenced as an example implementation for ensuring proper ARIA attributes and accessibility features.\n\nLANGUAGE: tsx\nCODE:\n```\nmakeAccessible\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation in React TSX\nDESCRIPTION: Examples of basic Checkbox component usage including label text, helper text, and both controlled and uncontrolled implementations.\n\nLANGUAGE: tsx\nCODE:\n```\n// Label text\n<Checkbox>is blade awesome?</Checkbox>\n// Helper text\n<Checkbox helpText=\"Hint: yes\">is blade awesome?</Checkbox>\n// uncontrolled\n<Checkbox defaultChecked={true}>is blade awesome?</Checkbox>\n// controlled\n<Checkbox isChecked={true | false} onChange={({ isChecked }) => {}}>is blade awesome?</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Using OTPInput Component in React/React Native\nDESCRIPTION: Example showing how to use the OTPInput component with various props including length configuration, validation states, and helper text. This demonstrates a typical implementation for a one-time password input field.\n\nLANGUAGE: tsx\nCODE:\n```\n<OTPInput\n  otpLength={6}\n  label=\"Enter One Time Code\"\n  labelPosition=\"left\"\n  helpText=\"Enter the OTP sent to your phone number\"\n  errorText=\"Invalid OTP\"\n  successText=\"Valid OTP\"\n  validationState={inputValue.length < 6 ? 'error' : 'success'}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tooltip Triggers\nDESCRIPTION: Demonstrates how to create custom components that can be used as tooltip triggers by forwarding necessary props and refs. This example shows how to implement and use a custom button as a tooltip trigger.\n\nLANGUAGE: jsx\nCODE:\n```\nimport type { TooltipTriggerProps } from \"@razorpay/blade/components\";\n\ntype MyCustomButtonProps = { \n  children: React.ReactNode \n} & TooltipTriggerProps\n\nconst MyCustomButton = React.forwardRef<\n  HTMLDivElement,\n  MyCustomButtonProps\n>(({ children, ...props }, ref) => {\n  return (\n    <button\n      ref={ref}\n      tabIndex={0}\n      // you can either spread the props\n      // or pick the onFocus, onMouse.. etc events and add them individually\n      {...props}\n    >\n       {children}\n    </button>\n  );\n});\n\n// custom trigger\n<Tooltip content=\"Amount reversed to customer bank account\">\n  <MyCustomButton>Click me<MyCustomButton>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Implementing Clickable Card in React\nDESCRIPTION: Demonstrates how to make a Card component clickable by adding an onClick handler. Includes an example of how to prevent event propagation when clicking on child elements within the card.\n\nLANGUAGE: jsx\nCODE:\n```\n<Card onClick={() => console.log('card click')}>...</Card>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Card onClick={() => console.log('card click')}>\n  <CardBody>\n    <Button\n      onClick={(e) => {\n        e.stopPropagation();\n        console.log('child click');\n      }}\n    >\n      Click me\n    </Button>\n  </CardBody>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Implementing ProgressBar Component in React\nDESCRIPTION: Sample usage of the ProgressBar component showing how to import and implement it with various props like variant, label, value, contrast, size, and accessibility attributes.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ProgressBar } from '@razorpay/components';\n\n<ProgressBar \n  variant='progress'\n  label='Loading' \n  value={20} \n  contrast='low'\n  size='large'\n  accessibilityLabel='Loading Payments'\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Collapsible Components in JSX\nDESCRIPTION: Basic example of how to import and use the Collapsible component with both Button and Link triggers. This snippet demonstrates the component composition pattern with CollapsibleButton/Link and CollapsibleBody.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Collapsible, CollapsibleButton, CollapsibleLink, CollapsibleBody } from '@razorpay/blade';\n\n<Collapsible>\n  <CollapsibleButton>Button</CollapsibleButton>\n  <CollapsibleBody>\n    <Box>Slot</Box>\n  </CollapsibleBody>\n</Collapsible>;\n\n<Collapsible>\n  <CollapsibleLink>Button</CollapsibleLink>\n  <CollapsibleBody>\n    <Box>Slot</Box>\n  </CollapsibleBody>\n</Collapsible>;\n```\n\n----------------------------------------\n\nTITLE: Using Modal Component with Header, Body, and Footer in React\nDESCRIPTION: Example of how to implement a Modal with its sub-components including state management, header, body, and footer buttons. Shows the basic controlled component pattern with isOpen state and onDismiss handler.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Text } from '@razorpay/blade/components';\n\nconst [isOpen, setIsOpen] = useState(false);\n\n<Modal isOpen={isOpen} onDismiss={() => setIsOpen(false)}>\n  <ModalHeader title=\"Modal Title\" />\n  <ModalBody>\n    <Text>This is the Modal Body</Text>\n  </ModalBody>\n  <ModalFooter>\n    <Button variant='secondary'>Cancel</Button>\n    <Button variant='primary'>Save</Button>\n  </ModalFooter>\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct File Upload with Progress Tracking in React\nDESCRIPTION: A React component that demonstrates a controlled file upload with progress tracking using Axios for HTTP requests and the Blade FileUpload component. It handles file selection, upload progress monitoring, success states, and error handling while providing visual feedback to users.\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Box, FileUpload } from '@razorpay/blade/components';\n\nconst ControlledCustomProgressFileUploadForm = () => {\n  const [uploadedFile, setUploadedFile] = useState();\n\n  const handleFileChange = async ({ files }) => {\n    // Create a FormData object to append files\n    const formData = new FormData();\n\n    formData.append('files', files[0]);\n    setUploadedFile(files[0]);\n\n    try {\n      // Simulate a file upload using axios\n      const response = await axios.post(\n        'https://run.mocky.io/v3/bb0b32f0-fc54-4d78-9c9b-08b3a4d8f7c5',\n        formData,\n        {\n          headers: {\n            'content-type': 'multipart/form-data',\n          },\n          onUploadProgress: (progressEvent) => {\n            setUploadedFile((previousState) => {\n              const percentCompleted = Math.round(\n                (progressEvent.loaded * 100) / progressEvent.total,\n              );\n\n              return {\n                ...previousState,\n                uploadPercent: percentCompleted,\n                status: percentCompleted === 100 ? 'success' : 'uploading',\n              };\n            });\n          },\n        },\n      );\n\n      // Handle success, reset form, etc.\n      console.log('Files uploaded successfully:', response.data);\n    } catch (error) {\n      // Handle errors\n      setUploadedFile((previousState) => {\n        return {\n          ...previousState,\n          status: 'error',\n          errorText: error.message,\n        };\n      });\n      console.error('File upload failed:', error.message);\n    }\n  };\n\n  return (\n    <Box>\n      <FileUpload\n        label=\"Upload product image\"\n        uploadType=\"single\"\n        fileList={uploadedFile ? [uploadedFile] : []}\n        onChange={handleFileChange}\n        showSelectedFiles={false}\n        accept=\".jpg, .png\"\n        helpText=\"Upload .jpg, .png, or .pdf files only\"\n        onDrop={(e) => console.log('Files dropped!', e)}\n      />\n    </Box>\n  );\n};\n\nexport default ControlledCustomProgressFileUploadForm;\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Implementation in JSX\nDESCRIPTION: Demonstrates the basic structure of the Menu component with various subcomponents including MenuHeader, MenuDivider, MenuItem, and nested submenus.\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu>\n  {/* Any interactive item which has onClick, onMouseDown exposed */}\n  <Button>Open Menu</Button>\n  <MenuOverlay>\n    <MenuHeader title=\"\" />\n    {/* All of this is a slot */}\n    <Box display=\"flex\" paddingY=\"spacing.4\" gap=\"spacing.2\">\n      <Avatar name=\"Saurabh Daware\" />\n      <Text>Saurabh Daware</Text>\n    </Box>\n    <MenuDivider />\n    <MenuItem title=\"Undo\" onClick={() => console.log('Undo')} />\n    <MenuItem title=\"Redo\" isDisabled />\n    <MenuItem title=\"Cut\" />\n    {/* Sub Menu */}\n    <Menu>\n      <MenuItem title=\"Copy\" />\n      <MenuOverlay>\n        <MenuItem title=\"Text\" />\n        <MenuItem title=\"Video\" />\n        <MenuItem title=\"Audio\" />\n      </MenuOverlay>\n    </Menu>\n    <Menu>\n      <MenuItem title=\"Share\" />\n      <MenuOverlay>\n        <MenuItem title=\"Text\" />\n        <MenuItem title=\"Video\" />\n        <MenuItem title=\"Audio\" />\n      </MenuOverlay>\n    </Menu>\n    <MenuFooter>\n      <Button>Apply</Button>\n    </MenuFooter>\n  </MenuOverlay>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Alert Component in React\nDESCRIPTION: Example showing how to import and use the Alert component with various props including title, description with embedded Link component, and primary/secondary actions.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert, Link } from '@razorpay/blade';\n\n<Alert\n  title=\"International Payments Only\"\n  description={\n    <>\n      Currently you can only accept payments in international currencies using PayPal. You cannot\n      accept payments in INR (₹) using PayPal. <Link href=\"https://razorpay.com\">Know More</Link>\n    </>\n  }\n  actions={{\n    primary: { text: 'Primary Action', onClick: {() => { /* do something */ }} },\n    secondary: { text: 'Link', onClick: {() => { /* do something */ }}, href: 'https://razorpay.com'},\n  }}\n/>;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Popover State in React\nDESCRIPTION: Shows how to implement a controlled Popover component using React useState hook. The popover's open state is controlled by an external button and the onOpenChange callback.\n\nLANGUAGE: js\nCODE:\n```\nconst ControlledPopover = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <>\n    <Button onClick={()=> setIsOpen(prev => !prev)}>Trigger</Button>\n    <Popover\n      isOpen={isOpen}\n      onOpenChange={({ isOpen }) => setIsOpen(isOpen)}\n      content={<Text>Any content</Text>}\n    >\n      <IconButton icon={InfoIcon} accessibilityLabel=\"Refund\" />\n    </Popover>\n    </> \n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchInput with Table Filtering in React\nDESCRIPTION: Example showing how to use SearchInput within a Table component to filter table data based on user input, with integration in the TableToolbar.\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Box, SearchInput } from '@razorpay/blade/components';\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  return (\n    <Table\n      data={data}\n      toolbar={\n        <TableToolbar>\n          <TableToolbarActions>\n            <SearchInput\n              label=\"Search bank transactions\"\n              onChange={({ value }) => setSearchTerm(value)}\n              placeholder=\"SBI, HDFC, ICICI, etc.\"\n            />\n          </TableToolbarActions>\n        </TableToolbar>\n      }\n    >\n      {(tableData) => (\n        <>\n          <TableHeader>\n            <TableHeaderRow>\n              <TableHeaderCell>Bank Name</TableHeaderCell>\n              <TableHeaderCell>Amount</TableHeaderCell>\n              <TableHeaderCell>Date</TableHeaderCell>\n              <TableHeaderCell>Method</TableHeaderCell>\n            </TableHeaderRow>\n          </TableHeader>\n          <TableBody>\n            {tableData\n              // Filter item based on the search input value\n              .filter((tableItem) => tableItem.bankName.includes(searchTerm))\n              .map((tableItem, index) => (\n                <TableRow key={index} item={tableItem}>\n                  <TableCell>\n                    <Code size=\"medium\">{tableItem.paymentId}</Code>\n                  </TableCell>\n                  <TableCell>\n                    <Amount value={tableItem.amount} />\n                  </TableCell>\n                  <TableCell>\n                    {tableItem.date?.toLocaleDateString('en-IN', {\n                      year: 'numeric',\n                      month: '2-digit',\n                      day: '2-digit',\n                    })}\n                  </TableCell>\n                  <TableCell>{tableItem.status}</TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </>\n      )}\n    </Table>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Desktop and Mobile Navigation Bar with TopNav Component in JSX\nDESCRIPTION: This code demonstrates the basic usage of the TopNav component for both desktop and mobile interfaces. The desktop version includes a brand logo, TabNav for horizontal navigation, and right-aligned actions. The mobile version shows a simplified layout with a hamburger menu button and essential action buttons.\n\nLANGUAGE: jsx\nCODE:\n```\n// Desktop Navigation Bar\n<TopNav>\n  <TopNavBrand>\n    <img src=\"razorpay-logo\" />\n  </TopNavBrand>\n  <TopNavContent>\n    <TabNav\n      items={[\n        { href: '/home', title: 'Home' },\n        { href: '/payroll', title: 'Payroll' },\n        { href: '/payments', title: 'Payments', isAlwaysOverflowing: true, },\n      ]}\n    >\n      {({ items, overflowingItems }) => {\n        return (\n          <>\n            <TabNavItems>\n              {items.map((item) => (\n                <TabNavItem href={item.href} title={title} />\n              ))}\n            </TabNavItems>\n            <Menu>\n              <TabNavItem title=\"More\" />\n              {overflowingItems.map((item) => {\n                return (\n                  <MenuItem key={item.title}>\n                    <CustomExploreItem\n                      icon={item.icon}\n                      title={item.title}\n                      description={item.description}\n                    />\n                  </MenuItem>\n                );\n              })}\n            </Menu>\n          </>\n        );\n      }}\n    </TabNav>\n  </TopNavContent>\n  <TopNavActions>\n    <SearchInput />\n    <Tooltip content=\"View Ecosystem Health\">\n      <Button icon={ActivityIcon} />\n    <Tooltip>\n    <Tooltip content=\"View Announcements\">\n      <Button icon={AnnouncementIcon} />\n    </Tooltip>\n    <Tooltip content=\"Ask Ray\">\n      <Button icon={RayIcon} />\n    </Tooltip>\n    <Menu>\n      <Avatar />\n      <MenuOverlay>\n        { /* Avatar Menu Items */ }\n      </MenuOverlay>\n    </Menu>\n  </TopNavActions>\n</TopNav>\n\n// Mobile Navigation Bar\n<TopNav>\n  <TopNavContent>\n    <Button icon={MenuIcon} variant=\"secondary\" accessibilityLabel=\"Toggle side navigation\" />\n    <Text>{currentPageTitle}</Text>\n  </TopNavContent>\n  <TopNavActions>\n    <SearchInput />\n    <Button icon={ActivityIcon} accessibilityLabel=\"View Ecosystem Health\" />\n    <Button icon={AnnouncementIcon} accessibilityLabel=\"View Announcements\" />\n    <Button icon={RayIcon} accessibilityLabel=\"Ask Ray\" />\n    <Avatar onClick={openBottomSheet} />\n    <BottomSheet>\n      { /* Avatar BottomSheet Content */ }\n    </BottomSheet>\n  </TopNavActions>\n</TopNav>\n```\n\n----------------------------------------\n\nTITLE: Full Width Alert Component Implementation\nDESCRIPTION: Example showing how to create a full-width alert that spans the entire container width and removes all borders. This layout works across desktop, mobile, and native platforms.\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert\n  title=\"International Payments Only\"\n  isFullWidth\n  description={\n    <>\n      Use vendor payouts to quickly generate invoices.{' '}\n      <Link href=\"https://razorpay.com\">Know More</Link>\n    </>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Detailed View Pattern with Drawer Component in JSX\nDESCRIPTION: Shows how to implement the Detailed View Pattern using a Drawer component triggered by a TableRow click. The implementation includes DrawerHeader and DrawerBody components.\n\nLANGUAGE: jsx\nCODE:\n```\n// Table Code\n<TableRow onClick={() => setIsDrawerOpen(true)} />\n// Table Code\n\n<Drawer isOpen={isDrawerOpen}>\n  <DrawerHeader>{/* Custom header */}</DrawerHeader>\n  <DrawerBody>\n  </DrawerBody>\n</Drawer>\n\n```\n\n----------------------------------------\n\nTITLE: Basic DatePicker Usage in JSX\nDESCRIPTION: Example showing how to implement a basic date picker with a single date selection, default value, and an onChange handler.\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  label=\"Pick date\"\n  selectionType=\"single\"\n  defaultValue={new Date()}\n  onChange={(date) => {\n    console.log('date selected', date);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Action Type Definition for Card Footer in TypeScript\nDESCRIPTION: Type definition for Card Footer actions, specifying the properties accepted by primary and secondary action buttons. This includes onClick handlers, text content, type, accessibility labels, loading/disabled states, and icon configuration.\n\nLANGUAGE: ts\nCODE:\n```\ntype Action = {\n  onClick: () => void;\n  text: string;\n  type?: 'button' | 'reset' | 'submit';\n  accessibilityLabel: string;\n  isLoading: boolean;\n  isDisabled: boolean;\n  icon: React.ReactNode;\n  iconPosition: \"left\" | \"right\"\n}\n```\n\n----------------------------------------\n\nTITLE: Card Component Implementation with Current API Structure\nDESCRIPTION: The current implementation approach using nested components with Leading and Trailing sections for Card headers, showing the complete structure.\n\nLANGUAGE: jsx\nCODE:\n```\n<Card surfaceLevel={2}>\n  <Card.Header>\n    <Card.HeaderLeading  \n      title=\"Payments Links\" \n      subtitle=\"Share payment link via an email, SMS, messenger, chatbot etc.\" \n      prefix={<CardHeaderIcon icon={DollarIcon} />}\n      suffix={<CardHeaderCounter amount={20} />}\n    />\n    <Card.HeaderTrailing \n      visual={<CardHeaderBadge variant=\"positive\">NEW</CardHeaderBadge>} \n    />\n  </Card.Header>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Integration with React Router for Breadcrumb Navigation\nDESCRIPTION: Example showing how to integrate the Breadcrumb component with React Router by creating a custom RouterBreadcrumbItem component that utilizes React Router hooks.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem } from \"@razorpay/blade/components\";\nimport {\n  useHref,\n  useLinkClickHandler,\n} from \"react-router-dom\";\n\nconst RouterBreadcrumbItem = React.forwardRef(\n  (\n    {\n      onClick,\n      replace = false,\n      state,\n      target,\n      to,\n      ...rest\n    },\n    ref\n  ) => {\n    const href = useHref(to);\n    const handleClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n    });\n\n    return (\n      <BreadcrumbItem\n        {...rest}\n        href={href}\n        onClick={(event) => {\n          onClick?.(event);\n          if (!event.defaultPrevented) {\n            handleClick(event);\n          }\n        }}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nconst App = () => {\n  return (\n    <Breadcrumb>\n      <RouterBreadcrumbItem to=\"/\">\n        Home\n      </RouterBreadcrumbItem>\n      <RouterBreadcrumbItem to=\"/dashboard\">\n        Dashboard\n      </RouterBreadcrumbItem>\n      <RouterBreadcrumbItem to=\"/settlements\" isCurrentPage>\n        Settlements\n      </RouterBreadcrumbItem>\n    </Breadcrumb>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled State in Collapsible with React Hooks\nDESCRIPTION: Example of controlling the Collapsible component state using React hooks. This pattern allows external control of the component's expanded state using useState and onExpandChange callback.\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const onExpandChange = ({ isExpanded }) => setIsExpanded(isExpanded);\n\n  return (\n    <Collapsible isExpanded={isExpanded} onExpandChange={onExpandChange}>\n      <CollapsibleLink>Answer to life, universe and everything</CollapsibleLink>\n      <CollapsibleBody>\n        <Text>42</Text>\n      </CollapsibleBody>\n    </Collapsible>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: PhoneNumberInput Component API TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the PhoneNumberInput component, extending BaseInput with additional props for internationalization. Includes properties for country selection, value control, and event handling.\n\nLANGUAGE: ts\nCODE:\n```\ntype CommonProps = Pick<\n  BaseInputProps, \n  | 'label'\n  | 'labelPosition'\n  | 'name'\n  | 'validationState'\n  | 'errorText'\n  | 'successText'\n  | 'helpText'\n  | 'defaultValue'\n  | 'necessityIndicator'\n  | 'isRequired'\n  | 'isDisabled'\n  | 'onFocus'\n  | 'onBlur'\n>\n\ntype PhoneNumberInputProps = CommonProps & {\n  /**\n   * Default value of the input, Used to set the default value of input field when it's uncontrolled\n   */\n  defaultValue?: string;\n  /**\n   * Value of the input, Used to turn the input field to controlled so user can control the value\n   */\n  value?: string;\n  /**\n   * The default country code to be used in the input.\n   * \n   * @default \"IN\" or autodetect based on the user's locale\n   */\n  countryCode?: CountryCodeType;\n  /**\n   * Callback that is called when the value of the input changes.\n   */\n  onChange?: (event: { \n    /**\n     * formatted phone number with dial code\n     * \n     * @example: \"+91 123456789\"\n     */\n    phoneNumber: string; \n    /**\n     * dial code of the country\n     * \n     * @example: 91 for India\n     */\n    dialCode: string; \n    /**\n     * country code of the country\n     * \n     * @example: \"IN\" for India\n     */\n    countryCode: string; \n    /**\n     * raw value of the input\n     */\n    value: string;\n  }): void;\n  /**\n   * If true, the dial code text will be shown in the leading text.\n   * \n   * @default true\n   */\n  showDialCode?: boolean;\n  /**\n   * If true, the country selector will be shown.\n   * \n   * @default true\n   */\n  showCountrySelector?: boolean;\n  /**\n   * Callback that is called when the clear button is clicked.\n   */\n  onClearButtonClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /**\n   * Icon to be shown on the leading side of the input.\n   */\n  leadingIcon?: IconComponent;\n  /**\n   * The size of the input field.\n   * \n   * @default medium\n   */\n  size?: 'medium' | 'large'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of AutoComplete Component in JSX\nDESCRIPTION: Demonstrates the minimal implementation of AutoComplete with a Dropdown component and ActionListItems for city selection. The component is configured with multiple selection type.\n\nLANGUAGE: jsx\nCODE:\n```\n<Dropdown selectionType=\"multiple\">\n  <AutoComplete label=\"Select Cities\" />\n  <DropdownOverlay>\n    <ActionList>\n      <ActionListItem title=\"Mumbai\" value=\"mumbai\" />\n      <ActionListItem title=\"Pune\" value=\"pune\" />\n      <ActionListItem title=\"Hyderabad\" value=\"hyderabad\" />\n    </ActionList>\n  </DropdownOverlay>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled Tabs Examples\nDESCRIPTION: Examples showing both controlled and uncontrolled versions of the Tabs component. The controlled version manages state with useState, while the uncontrolled version uses defaultValue.\n\nLANGUAGE: js\nCODE:\n```\nconst Controlled = () => {\n  const [selected, setSelected] = React.useState('payments');\n\n  return (\n    <Tabs value={selected} onChange={(value) => setSelected(value)}>\n      <TabList>\n        <TabItem value=\"payments\">Payments</TabItem>\n        <TabItem value=\"refunds\">Refunds</TabItem>\n      </TabList>\n\n      <TabPanel value=\"payments\">\n        <Payments />\n      </TabPanel>\n      <TabPanel value=\"refunds\">\n        <Refunds />\n      </TabPanel>\n    </Tabs>\n  );\n};\n\nconst Uncontrolled = () => {\n  return (\n    <Tabs defaultValue=\"refunds\">\n      <TabList>\n        <TabItem value=\"payments\">Payments</TabItem>\n        <TabItem value=\"refunds\">Refunds</TabItem>\n      </TabList>\n\n      <TabPanel value=\"payments\">\n        <Payments />\n      </TabPanel>\n      <TabPanel value=\"refunds\">\n        <Refunds />\n      </TabPanel>\n    </Tabs>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the useDropdown Hook for Keyboard Control\nDESCRIPTION: A code snippet demonstrating how to use the useDropdown hook to programmatically control a dropdown's visibility based on keyboard shortcuts. It shows how to open a dropdown when CTRL+K is pressed.\n\nLANGUAGE: typescript\nCODE:\n```\nconst { isDropdownVisible, setIsDropdownVisible } = useDropdown();\n\nconst onKeyPressed = (e) => {\n  // Opens dropdown when CTRL + K is pressed while dropdown was not visible\n  if (e.ctrlKey && e.keyCode === 75 && !isDropdownVisible) {\n    setIsDropdownVisible(true);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled RadioGroup Components in React TSX\nDESCRIPTION: Demonstration of both controlled and uncontrolled RadioGroup implementations. The controlled version uses React state to manage selection, while the uncontrolled version uses the defaultValue prop for initial selection.\n\nLANGUAGE: tsx\nCODE:\n```\nconst Controlled = () => {\n  const [selected, setSelected] = React.useState('kamlesh');\n\n  return (\n    <RadioGroup\n      name=\"developers\"\n      label=\"Developers (controlled)\"\n      value={selected}\n      onChange={({ value }) => setSelected(value)}\n    >\n      <Radio value=\"anurag\">Anurag</Radio>\n      <Radio value=\"chaitanya\">Chaitanya</Radio>\n      <Radio value=\"divyanshu\">Divyanshu</Radio>\n      <Radio value=\"kamlesh\">Kamlesh</Radio>\n    </RadioGroup>\n  );\n};\n\nconst Uncontrolled = () => {\n  return (\n    <RadioGroup \n      name=\"developers\" \n      label=\"Developers (uncontrolled)\" \n      defaultValue=\"chaitanya\"\n    >\n      <Radio value=\"anurag\">Anurag</Radio>\n      <Radio value=\"chaitanya\">Chaitanya</Radio>\n      <Radio value=\"divyanshu\">Divyanshu</Radio>\n      <Radio value=\"kamlesh\">Kamlesh</Radio>\n    </RadioGroup>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Card Component with Constrained Prop-Based API (API 6)\nDESCRIPTION: A strictly constrained props-based approach that provides complete control over the Card structure but limits flexibility for extension.\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n  <Card.Header\n    title=\"\"\n    subtitle=\"\"\n    prefixIcon={CloseIcon}\n    prefixAvatar={}\n    counter={12}\n    counterIntent=\"\"\n    trailingVisual={<Badge />}\n  />\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet Component with Card-like API (Initial Proposal)\nDESCRIPTION: First API proposal for BottomSheet component that follows a structure similar to Card component. This implementation includes header, body and footer sections with their respective leading and trailing elements.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheet isOpen={boolean} snapPoints={[]}>\n  <BottomSheetHeader>\n    <BottomSheetHeaderLeading title=\"Payments Links\" prefix={BladeIcon} />\n    <BottomSheetHeaderTrailing visual={Link | Action | Icon} />\n  </BottomSheetHeader>\n  <BottomSheetBody>\n    any thing\n  </BottomSheetBody>\n  <BottomSheetFooter>\n    <BottomSheetFooterLeading title=\"Footer Title\" prefix={icon} />\n    <BottomSheetFooterTrailing\n      actions={{\n        primaryAction: { text: 'Know more', onClick: () => {} },\n        secondaryAction: { text: 'Read Docs', onClick: () => {} },\n      }}\n    />\n  </BottomSheetFooter>\n</BottomSheet>\n```\n\n----------------------------------------\n\nTITLE: Basic ButtonGroup Usage Example with Icons\nDESCRIPTION: Example of using the ButtonGroup component to group related action buttons with icons. This demonstrates how to visually associate buttons that share a common purpose or functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ButtonGroup,\n  Button,\n  RefreshIcon,\n  ShareIcon,\n  DownloadIcon,\n} from '@razorpay/blade/components';\n\nconst App = () => {\n  return (\n    <ButtonGroup>\n      <Button icon={RefreshIcon} />\n      <Button icon={ShareIcon}>Share</Button>\n      <Button icon={DownloadIcon}>Download</Button>\n    </ButtonGroup>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: SideNav with Body and Footer Structure in React\nDESCRIPTION: Example showing the standard structure of SideNav with both body and footer sections. The body contains the main navigation items while the footer can contain additional actions or information.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNav>\n  <SideNavBody>{/* children */}</SideNavBody>\n  <SideNavFooter>{/* children */}</SideNavFooter>\n</SideNav>\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoComplete with External Tags in React\nDESCRIPTION: This code shows how to implement an AutoComplete component with tags displayed outside the input field, which is recommended when the number of possible selections exceeds 10. It demonstrates setting up state for selected items and rendering tags in a separate UI element.\n\nLANGUAGE: jsx\nCODE:\n```\nconst [selectedItems, setSelectedItems] = React.useState([]);\n\n// ...\n\n<AutoComplete\n  label=\"Status\"\n  labelPosition=\"inside-input\"\n  maxRows=\"single\"\n  value={selectedItems}\n  onChange={({ values }) => setSelectedItems(values)}\n/>\n\n\n// Somewhere outside in your UI\n<Box>\n  {selectedItems.map((selectedItemName, index) =>\n    <Tag\n      onDismiss={() => removeItem(index)}\n    >\n      {selectedItemName}\n    </Tag>\n  )}\n</Box>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Platform Box Component with Consistent Defaults\nDESCRIPTION: This code demonstrates how to create a wrapper component around Box to ensure consistent defaults across platforms. This approach allows developers to maintain platform-specific defaults while enabling cross-platform consistency when needed.\n\nLANGUAGE: tsx\nCODE:\n```\nconst CrossPlatformBox = (props: BoxProps) => {\n  return <Box display=\"flex\" flexDirection=\"column\" {...props} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled AutoComplete Implementation in JSX\nDESCRIPTION: Shows how to implement a controlled AutoComplete component with state management for filtering, input value, and selections. Includes hooks for managing state and filtering logic based on user input.\n\nLANGUAGE: jsx\nCODE:\n```\nconst allCities = ['Mumbai', 'Pune', 'Bangalore']\nconst [filteredValues, setFilteredValues] = React.useState(allCities);\nconst [selections, setSelections] = React.useState([]);\n\n// ...\n\n<AutoComplete\n  // For controlling the selections\n  value={selections}\n  onChange={({ name, values }) => {\n    setSelections(values)\n  }}\n  // For controlling the input value\n  inputValue={}\n  onInputValueChange={(inputValue) => {\n    // Filter and set the state here\n    const filteredCityValues = allCities\n      .filter((city) => city.includes(inputValue))\n      .map((city) => city.toLowerCase());\n\n    setFilteredValues(filteredCityValues);\n  }}\n  // Control the filtering of items (Make sure to pass array of values here)\n  filteredValue={filteredValues}\n/>\n\n// ...\n\n<ActionList>\n  {allCities.map((city) => <ActionListItem title={city} value={city.toLowerCase()} />)}\n</ActionList>\n```\n\n----------------------------------------\n\nTITLE: Using AvatarGroup to Stack Multiple Avatars\nDESCRIPTION: Complete example demonstrating how to use the AvatarGroup component to stack multiple Avatar components together with a maximum display count and consistent sizing.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar, AvatarGroup } from '@razorpay/blade/components';\n\nconst App = () => (\n  <AvatarGroup maxCount={3} size=\"medium\">\n    <Avatar color=\"primary\" name=\"Nitin Kumar\" />\n    <Avatar color=\"positive\" name=\"Anurag\" />\n    <Avatar color=\"negative\" name=\"Saurabh Daware\" />\n    <Avatar color=\"information\" name=\"Rama Krushna\" />\n    <Avatar color=\"notice\" name=\"Sachin Tendulkar\" />\n  </AvatarGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Component Props TypeScript Interface\nDESCRIPTION: TypeScript type definitions for the Drawer and DrawerHeader components. The types define all available props with JSDoc comments explaining their purpose, including required and optional properties.\n\nLANGUAGE: ts\nCODE:\n```\ntype DrawerProps = {\n  /**\n   * Controlled state of drawer open or not\n   */\n  isOpen: boolean;\n\n  /**\n   * Dismiss handler\n   */\n  onDismiss: () => void;\n\n  /**\n   * Show or hide overlay.\n   *\n   * Also decides if clicking outside on overlay closes the drawer or not\n   */\n  showOverlay?: boolean;\n\n  /**\n   * Initial focus reference element\n   */\n  initialFocusRef?: React.MutableRefObject<any>;\n\n  /**\n   * children node.\n   *\n   * Supports DrawerHeader and DrawerBody\n   */\n  children: React.ReactNode;\n\n  /**\n   * Override z-index of Drawer.\n   *\n   * @default 1002\n   */\n  zIndex?: number;\n\n  /**\n   *  Accessibility label for the drawer\n   */\n  accessibilityLabel?: string;\n};\n\ntype DrawerHeaderProps = {\n  /**\n   * Title of the Drawer\n   */\n  title: string;\n\n  /**\n   * Subtitle of the Drawer\n   */\n  subtitle?: string;\n\n  /**\n   * Leading element\n   *\n   * Icon or Asset\n   */\n  leading?: ReactNode;\n\n  /**\n   * Title suffix element\n   *\n   * Badge\n   */\n  titleSuffix?: ReactNode;\n\n  /**\n   * Title trailing element\n   *\n   * Link, Button[]\n   */\n  trailing?: ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete Drawer Component Example in JSX\nDESCRIPTION: Full usage example of the Drawer component showing how to implement a controlled drawer with state management. The example demonstrates opening and closing the drawer with a button, and adding content to the drawer body.\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyCuteDrawer = () => {\n  const [showDrawer, setShowDrawer] = React.useState(false);\n  return (\n    <Box>\n      <Button onClick={() => setShowDrawer(true)}>Open Drawer</Button>\n      <Drawer\n        isOpen={showDrawer}\n        onDismiss={() => {\n          setShowDrawer(false);\n        }}\n      >\n        <DrawerHeader\n          title=\"Announcements\"\n        />\n        <DrawerBody>\n          <FTXAnnouncement />\n          <RazorpayOnePromotions />\n          <CatPictures />\n        </DrawerBody>\n      <Drawer>\n    </Box>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TabNav with Menu Component in JSX\nDESCRIPTION: Example of using the TabNav with the Menu component to create a dropdown menu for additional navigation options. Uses hover interaction and demonstrates how to handle selected state changes.\n\nLANGUAGE: jsx\nCODE:\n```\nconst WithMenu = () => {\n  const [isOpen, setOpen] = React.useState(false);\n  const [selected, setSelected] = React.useState<string | null>(null);\n\n  return (\n    <TabNav>\n      <TabNavItem as={RouterLink} isActive href=\"/home\" icon={HomeIcon} />\n      <Menu interactionType=\"hover\">\n        <TabNavItem \n          title={selected ? `More: ${selected}` : \"More\"}\n          trailingIcon={isOpen ? ChevronDown : ChevronUp}\n        />\n        <MenuOverlay>\n          <MenuItem onClick={() => setSelected(\"Engage\")}>Engage</MenuItem>\n          <MenuItem onClick={() => setSelected(\"Payroll\")}>Payroll</MenuItem>\n        </MenuOverlay>\n      </Menu>\n    </TabNav>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete List Component Implementation with Nesting\nDESCRIPTION: Sample implementation of the List component showing multiple nesting levels with different variants (unordered, ordered, and ordered-filled) and custom icons.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { List, InfoIcon, EditIcon } from '@razorpay/components';\n\n<List variant='unordered' icon={InfoIcon} size='medium'>\n  <ListItem icon={EditIcon}>\n    Item 1\n    <List variant='ordered'>\n      <ListItem>\n        Item 1.1\n        <List variant='ordered-filled'>\n          <ListItem>\n            Item 1.1.1\n          <ListItem/>\n        <List/>\n      <ListItem/>\n    <List/>\n  <ListItem/>\n  <ListItem>\n    Item 2\t\t\n  <ListItem/>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Implementing TabNav with Table-Like Data API in React (Accepted Approach)\nDESCRIPTION: This approach uses a data-driven API where we pass the items data and use render props to handle regular and overflowing items. It provides easy access to overflowing items and flexibility in rendering, while allowing users to control the order of items in the \"More\" dropdown.\n\nLANGUAGE: jsx\nCODE:\n```\n<TabNav\n  items={[\n    { href: '/home', title: 'Home' },\n    { href: '/payroll', title: 'Payroll' },\n    { href: '/payments', title: 'Payments' },\n    {\n      href: '/rize',\n      title: 'rize',\n      description: 'rize description',\n      icon: RizeIcon,\n      // force this item to always be inside \"more\" regardless of screen size\n      isAlwaysOverflowing: true,\n    },\n  ]}\n>\n  {({ items, overflowingItems }) => {\n    return (\n      <>\n        <TabNavItems>\n          {items.map((item) => (\n            <TabNavItem title={item.title} href={item.href} />\n          ))}\n        </TabNavItems>\n        <Menu>\n          <TabNavItem title=\"More\" />\n          {overflowingItems.map((item) => {\n            return (\n              <MenuItem key={item.title}>\n                <CustomExploreItem\n                  icon={item.icon}\n                  title={item.title}\n                  description={item.description}\n                />\n              </MenuItem>\n            );\n          })}\n        </Menu>\n      </>\n    );\n  }}\n</TabNav>\n```\n\n----------------------------------------\n\nTITLE: Using Separate Error Text in Checkbox Component for Validation Feedback\nDESCRIPTION: Example of using a dedicated errorText prop in the Checkbox component to provide specific error feedback. This approach makes it easier to manage help text and error text separately without conditional logic.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [validationState, setValidationState] = React.useState('none');\n\n<Checkbox \n  validationState={validationState}\n  helpText={'Enter valid username'}\n  errorText={'Invalid username provided, contains special chars'}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonGroup Props Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the props for the ButtonGroup component, including children, variant, size, color, fullWidth options, disabled state, and test ID for automation.\n\nLANGUAGE: typescript\nCODE:\n```\ntype ButtonGroupProps = {\n  /**\n   * Accepts multiple Button components as children\n   */\n  children: React.ReactNode;\n  /**\n   * Specifies the visual style variant of the ButtonGroup.\n   *\n   * @default 'primary'\n   */\n  variant?: ButtonProps['variant'];\n  /**\n   * Specifies the size of the ButtonGroup.\n   *\n   * @default 'medium'\n   */\n  size?: ButtonProps['size'];\n  /**\n   * Specifies the color of the ButtonGroup.\n   *\n   * @default 'primary'\n   */\n  color?: ButtonProps['color'];\n  /**\n   * Specifies whether the ButtonGroup should take up the full width of its container.\n   */\n  isFullWidth?: boolean;\n  /**\n   * Disables or enables the ButtonGroup component\n   *\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Test ID for automation\n   */\n  testID?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Title Component in Blade\nDESCRIPTION: The Title component is designed for large, banner-style text on landing pages or as page-level headings. It uses BaseText internally and renders as native HTML heading tags on web or native text elements in React Native.\n\nLANGUAGE: jsx\nCODE:\n```\n<Title\n  variant=\"small | medium | large\"\n  type=\"normal | subtle | subdued | muted | placeholder\"\n  contrast=\"low | high\"\n>\n  Some Title\n</Title>\n```\n\n----------------------------------------\n\nTITLE: Card Component with Final Hybrid API (API 7)\nDESCRIPTION: The final API design using a hybrid approach with specialized sub-components accessed through dot notation, balancing flexibility and control.\n\nLANGUAGE: jsx\nCODE:\n```\n<Card>\n  <Card.Header \n    titlePrefix={<Card.Header.Icon />}\n    titleSuffix={<Card.Header.Counter />}\n    title=\"Title\"\n    subTitle=\"Subtitle\" \n  />\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Modal or BottomSheet Based on Platform in React\nDESCRIPTION: Example of how to conditionally render either a Modal component for desktop web or a BottomSheet component for mobile web using platform detection from the Blade design system's useTheme hook.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme, BottomSheet, Modal } from '@razorpay/blade';\n\nconst App = () => {\n  const { theme, platform } = useTheme();\n\n  return (\n    <>\n      {platform === 'onMobile' ? (\n        <BottomSheet>\n          <BottomSheetHeader />\n          <BottomSheetBody>\n            /* BottomSheetBody content */\n          </BottomSheetBody>\n          <BottomSheetFooter />\n        </BottomSheet>\n      ) : (\n        <Modal>\n          <ModalHeader />\n          <ModalBody>\n            /* ModalBody content */\n          </ModalBody>\n          <ModalFooter />\n        </Modal>\n      )}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Chip Groups with React State\nDESCRIPTION: Example of controlled usage for both single and multiple selection ChipGroup components. Demonstrates how to manage the selected values using React state and handle changes through the onChange callback.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Single() {\n  // string value when selectionType is 'single' (default)\n  const [selected, setSelected] = useState('proprietorship');\n\n  return (\n    <Box>\n      <Text> Select Business type: </Text>\n      <ChipGroup\n        selectionType=\"single\"\n        accessibilityLabel=\"select business type\"\n        value={selected}\n        onChange={({ values }) => setSelected(values[0])}\n      >\n        <Chip value=\"proprietorship\">Proprietorship</Chip>\n        <Chip value=\"public\">Public</Chip>\n        <Chip value=\"small-business\">Small Business</Chip>\n      </ChipGroup>\n    </Box>\n  );\n}\n\nfunction Multiple() {\n  // array of strings value when selectionType is 'multiple'\n  const [selected, setSelected] = useState(['in-progress', 'pending']);\n\n  return (\n    <Box>\n      <Text> Quick Filters: </Text>\n      <ChipGroup\n        accessibilityLabel=\"Quick filters\"\n        selectionType=\"multiple\"\n        value={selected}\n        onChange={({ values }) => setSelected(values)}\n      >\n        <Chip value=\"refunded\">Refunded</Chip>\n        <Chip value=\"failed\">Failed</Chip>\n        <Chip value=\"pending\">Pending</Chip>\n        <Chip value=\"in-progress\">In Progress</Chip>\n      </ChipGroup>\n    </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Mobile/Desktop TopNav in JSX\nDESCRIPTION: Example of responsive TopNav implementation that conditionally renders different components based on screen size. This pattern allows for optimizing navigation for mobile devices with limited screen real estate.\n\nLANGUAGE: jsx\nCODE:\n```\nconst isMobile = useIsMobile();\n\nreturn (\n  <>\n    <TopNav>\n        <TopNav>\n          {isMobile ? (\n            <>\n              <Link icon={HomeIcon} size=\"medium\" href=\"/home\">\n                Home\n              </Link>\n              <Heading textAlign=\"center\" size=\"small\" weight=\"semibold\">\n                Payments\n              </Heading>\n              <AvatarWithMenu />\n            </>\n          ) : (\n            <>\n              <TopNavBrand />\n              <TopNavContent />\n              <TopNavActions />\n            </>\n          )}\n    </TopNav>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Accordion Components in React\nDESCRIPTION: Basic example showing how to use the Accordion component with its child components AccordionItem, AccordionItemHeader, and AccordionItemBody. Demonstrates both using title props and custom slot content.\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionItemHeader,\n  AccordionItemBody,\n} from '@razorpay/blade/components';\n\n<Accordion showNumberPrefix defaultExpandedIndex={0}>\n  <AccordionItem>\n    {/* With title and description defined */}\n    <AccordionItemHeader title=\"Can I create linked accounts using Route?\" />\n    <AccordionItemBody>\n      <Text>\n        You can use Razorpay Route from the Dashboard or using APIs to transfer money to customers.\n      </Text>\n    </AccordionItemBody>\n  </AccordionItem>\n  {/* With custom slot for trigger */}\n  <AccordionItem>\n    <AccordionItemHeader>\n      <div>Trigger Slot</div>\n    </AccordionItemHeader>\n    <AccordionItemBody>\n      <div>Slot</div>\n    </AccordionItemBody>\n  </AccordionItem>\n</Accordion>;\n```\n\n----------------------------------------\n\nTITLE: Programmatically Dismissing Toasts in React\nDESCRIPTION: Example showing how to programmatically dismiss toasts by storing and using the toast ID. This demonstrates using a ref to keep track of the toast ID and using it with the dismiss method.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BladeProvider, ToastContainer, useToast } from \"@razorpay/blade/components\"\n\nconst Example = () => {\n  const toastId = React.useRef(null);\n  const toast = useToast();\n\n  return (\n    <Box>\n      <Button\n        onClick={() => {\n          toastId.current = toast.show({\n            color: 'success',\n            content: 'Payment Successful',\n          });\n        }}\n      >\n        Show Toast\n      </Button>\n      <Button onClick={() => toast.dismiss(toastId.current)}>Dismiss Toast</Button>\n    </Box>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Single Selection Chip Group in React\nDESCRIPTION: Example of uncontrolled usage with single Chip selection. This creates a group of chips where only one chip can be selected at a time, with 'proprietorship' selected by default.\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>\n  <Text> Select Business type: </Text>\n  <ChipGroup accessibilityLabel=\"select business type\" defaultValue=\"proprietorship\">\n    <Chip value=\"proprietorship\">Proprietorship</Chip>\n    <Chip value=\"public\">Public</Chip>\n    <Chip value=\"small-business\">Small Business</Chip>\n  </ChipGroup>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation for Checkbox Group with 'All Must Be Selected' Requirement\nDESCRIPTION: Example of user-managed validation where all checkboxes must be selected. It shows how to configure the CheckboxGroup to display error state when not all options are selected by comparing selected array length with total number of checkboxes.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AllOfThemHasToBeSelected() {\n  const [selected, setSelected] = React.useState([]);\n\n  return (\n    <CheckboxGroup\n      label=\"Do you agree to all the terms?\"\n      helpText=\"Select all\"\n      errorText=\"You must tick all of the items\"\n      value={selected}\n      onChange={setSelected}\n      validationState={selected.length < 3 ? 'error' : 'none'}\n    >\n      <Checkbox value=\"use-ts\">I will use TS</Checkbox>\n      <Checkbox value=\"no-any\">I won't use any</Checkbox>\n      <Checkbox value=\"use-js\">I won't use JS</Checkbox>\n    </CheckboxGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled Multiple File Upload with Form Submission\nDESCRIPTION: Example of implementing an uncontrolled multiple file upload component with form submission. This example demonstrates handling multiple files using a form reference, iterating through the files collection, and submitting them as a batch via a POST request.\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport axios from 'axios';\nimport { Box, FileUpload } from '@razorpay/blade/components';\n\nconst UncontrolledMultiFileUploadForm = () => {\n  const fileUploadRef = useRef();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Create a FormData object to append files\n    const formData = new FormData();\n\n    fileUploadRef.current.files.forEach((file, index) => {\n      formData.append(`file-${index}`, file);\n    });\n\n    try {\n      // Simulate a file upload using axios\n      const response = await axios.post(\n        'https://run.mocky.io/v3/bb0b32f0-fc54-4d78-9c9b-08b3a4d8f7c5',\n        formData,\n        {\n          headers: {\n            'content-type': 'multipart/form-data',\n          },\n        },\n      );\n\n      // Handle success, reset form, etc.\n      console.log('Files uploaded successfully:', response.data);\n    } catch (error) {\n      // Handle errors\n      console.error('File upload failed:', error.message);\n    }\n  };\n\n  return (\n    <Box>\n      <form onSubmit={handleSubmit}>\n        <FileUpload\n          label=\"GSTIN Certificate\"\n          uploadType=\"multiple\"\n          ref={fileUploadRef}\n          accept=\".jpg, .png, .pdf\"\n          helpText=\"Upload .jpg, .png, or .pdf files only\"\n          onDrop={(e) => console.log('Files dropped!', e)}\n        />\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </Box>\n  );\n};\n\nexport default UncontrolledMultiFileUploadForm;\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Component in React JSX\nDESCRIPTION: Example usage of the Tag component showing how to implement it with an icon and dismiss handler. This demonstrates the basic structure and common props used with the component.\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag\n  icon={CheckIcon}\n  size=\"medium\"\n  onDismiss={() => {\n    console.log('Close Icon Clicked');\n  }}\n>\n  Unpaid\n</Tag>\n```\n\n----------------------------------------\n\nTITLE: Initializing BladeProvider for App Setup in React\nDESCRIPTION: Demonstrates how to wrap your application with BladeProvider to enable responsive design, theme switching, and proper unit handling. Requires styled-components and the Blade design system.\n\nLANGUAGE: jsx\nCODE:\n```\n// App entry point\nimport { BladeProvider } from '@razorpay/blade/components';\nimport { bladeTheme } from '@razorpay/blade/tokens';\nimport App from from './App';\n\nfunction AppWrapper(): JSX.Element {\n  return (\n    <BladeProvider themeTokens={bladeTheme} colorScheme=\"light\">\n      <App />\n    </BladeProvider>\n  );\n}\n\nexport default AppWrapper;\n```\n\n----------------------------------------\n\nTITLE: Custom Trigger Menu Example in JSX\nDESCRIPTION: Shows how to use a custom component as a Menu trigger, with notes on required props for accessibility.\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu>\n  <CustomComponentTrigger />\n  <MenuOverlay>{/* ... */}</MenuOverlay>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive StepGroup with State Management\nDESCRIPTION: Implementation of an interactive StepGroup where steps can be selected through onClick handlers, with state management to track the selected index.\n\nLANGUAGE: jsx\nCODE:\n```\nconst InteractiveStepGroup = () => {\n  const [selectedIndex, setSelectedIndex] = React.useState(-1);\n\n  return (\n    <StepGroup>\n      <StepItem\n        marker={<StepItemIcon icon={CheckIcon} color=\"positive\" />}\n        title=\"Introduction\"\n        timestamp=\"Thu, 11th Oct23 | 12:00pm\"\n        isSelected={selectedIndex === 0}\n        // `onClick` prop turns item into Interactive item\n        onClick={() => {\n          setSelectedIndex(0);\n        }}\n      />\n      <StepItem\n        marker={<StepItemIcon icon={ClockIcon} color=\"primary\" />}\n        title=\"Compliance Details\"\n        description=\"Provide documentation of reports\"\n        isSelected={selectedIndex === 1}\n        onClick={() => {\n          setSelectedIndex(1);\n        }}\n      />\n    </StepGroup>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Detailed Fade Component Implementation with TypeScript Interface\nDESCRIPTION: Comprehensive example of the Fade component with its TypeScript interface definition. The interface defines props for controlling animation type, triggers, and visibility state.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Fade } from '@razorpay/blade/components';\n\n<Fade isVisible={showCard}>\n  <Card>\n    <CardBody>\n      <Text>Fade In/Out Card</Text>\n    </CardBody>\n  </Card>\n</Fade>;\n```\n\nLANGUAGE: ts\nCODE:\n```\ntype FadeProps = {\n  /**\n   * whether to animate entry and / or exit\n   *\n   * @default inout\n   */\n  type: 'in' | 'out' | 'inout';\n\n  /**\n   * What should trigger the motion\n   *\n   * @default ['mount']\n   */\n  motionTriggers: ('mount' | 'hover' | 'tap' | 'inView')[];\n\n  /**\n   * Visibility state. Only required when motionTriggers is set to mount\n   *\n   * @default true\n   */\n  isVisible?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Bottom Sheet Component in React\nDESCRIPTION: Example demonstrating how to implement a Bottom Sheet with header, body, and footer sections. The example shows a sheet for selecting saved addresses with radio buttons and action buttons.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BottomSheet } from '@razorpay/blade';\n\nconst [isOpen, setIsOpen] = React.useState(false);\n\n<BottomSheetComponent\n  isOpen={isOpen}\n  onDismiss={() => {\n    setIsOpen(false);\n  }}\n>\n  <BottomSheetHeader\n    title=\"Saved Address\"\n    subtitle=\"Addresses are ordered by street\"\n    titleSuffix={<Counter value={12} />}\n    trailing={<Badge variant=\"information\">Current: Home</Badge>}\n  />\n  <BottomSheetBody>\n    <RadioGroup label=\"Addresses\">\n      <Radio value=\"home\">Home - 11850 Florida 24, Cedar Key, Florida</Radio>\n      <Radio value=\"office\">Office - 2033 Florida 21, Cedar Key, Florida</Radio>\n      <Radio value=\"office2\">Hackerway - 2011, 51th Street</Radio>\n    </RadioGroup>\n  </BottomSheetBody>\n  <BottomSheetFooter>\n    <Button isFullWidth variant=\"secondary\">\n      Add new\n    </Button>\n    <Button isFullWidth marginTop=\"spacing.5\">\n      Remove\n    </Button>\n  </BottomSheetFooter>\n</BottomSheetComponent>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled Single File Upload with Form Submission\nDESCRIPTION: Example of implementing an uncontrolled single file upload component with form submission. This example demonstrates using a form reference to access the file data when the form is submitted, and then sending it via a POST request using axios.\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useRef } from 'react';\nimport axios from 'axios';\nimport { Box, FileUpload } from '@razorpay/blade/components';\n\nconst UncontrolledSingleFileUploadForm = () => {\n  const fileUploadRef = useRef();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Create a FormData object to append files\n    const formData = new FormData();\n    formData.append('files', fileUploadRef.current.files[0]);\n    try {\n      // Simulate a file upload using axios\n      const response = await axios.post(\n        'https://run.mocky.io/v3/bb0b32f0-fc54-4d78-9c9b-08b3a4d8f7c5',\n        formData,\n        {\n          headers: {\n            'content-type': 'multipart/form-data',\n          },\n        },\n      );\n\n      // Handle success, reset form, etc.\n      console.log('Files uploaded successfully:', response.data);\n    } catch (error) {\n      // Handle errors\n      console.error('File upload failed:', error.message);\n    }\n  };\n\n  return (\n    <Box>\n      <form onSubmit={handleSubmit}>\n        <FileUpload\n          label=\"GSTIN Certificate\"\n          uploadType=\"single\"\n          ref={fileUploadRef}\n          accept=\".jpg, .png, .pdf\"\n          helpText=\"Upload .jpg, .png, or .pdf file only\"\n          onDrop={(e) => console.log('Files dropped!', e)}\n        />\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </Box>\n  );\n};\n\nexport default UncontrolledSingleFileUploadForm;\n```\n\n----------------------------------------\n\nTITLE: Calendar with Dropdown Composition Example\nDESCRIPTION: Alternative approach showing how to compose Calendar with Dropdown components for a custom date picker experience.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Calendar, Dropdown, DropdownButton, DropdownOverlay } from '@razorpay/blade/components';\nimport { getFormattedDate } from '@razorpay/blade/utils';\n\nfunction WithDropdown(): React.ReactElement {\n  const [selectedDate, setSelectedDate] = React.useState < DateValue > new Date();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <Dropdown isOpen={isOpen} onOpenChange={setIsOpen}>\n      <DropdownButton>\n        {getFormattedDate({\n          date: selectedDate,\n          format: 'DD/MM/YYYY',\n          type: 'default',\n        })}\n      </DropdownButton>\n      <DropdownOverlay>\n        <Calendar\n          value={selectedDate}\n          onChange={(date) => {\n            setSelectedDate(date);\n            setIsOpen(false);\n          }}\n        />\n        {/* <TimePickerComponentMaybeInFuture /> */}\n      </DropdownOverlay>\n    </Dropdown>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ChatMessage Component Usage Examples with Animation and Error States\nDESCRIPTION: Examples showing how to use the ChatMessage component with animations, error states, nested components like Card, and with Markdown content.\n\nLANGUAGE: tsx\nCODE:\n```\n// for animation\n<Move>\n  <ChatMessage senderType=\"self\">Demo Text</ChatMessage>\n</Move>\n\n// with error\n<ChatMessage validationState=\"error\" errorText=\"Error Message\">Demo Text</ChatMessage>\n\n// with card\n<ChatMessage><Card></Card></ChatMessage>\n\n\n<ChatMessage><Markdown>  Demo Text </Markdown></ChatMessage>\n<ChatMessage><Markdown> Demo Text </Markdown></ChatMessage>\n\n\n// with footer actions\n   <ChatMessage\n     footerActions={\n       <ChipGroup>\n         <Chip value=\"value1\">value1</Chip>\n         <Chip value=\"value2\">value2</Chip>\n       </ChipGroup>\n     }\n   >\n   demo message\n   </ChatMessage>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Carousel with Multiple Items in React using Blade Components\nDESCRIPTION: Example of creating a carousel with testimonials using the Blade Carousel component. This sample demonstrates how to configure autoPlay, specify the number of visible items, set navigation button position, and structure carousel items with content.\n\nLANGUAGE: jsx\nCODE:\n```\nconst Testimonial = () => {\n  return (\n    <Box display=\"flex\" gap=\"spacing.2\">\n      <Box>\n        <Title>Acquire Customers From New Customer Segments</Title>\n        <Text weight=\"bold\">Subham Kumar</Text>\n      </Box>\n      <Img src=\"./avatar-1.png\" />\n    </Box>\n  )\n};\n\n<Carousel\n  autoPlay\n  visibleItems={2}\n  navigationButtonPosition=\"bottom\"\n>\n  <CarouselItem>\n    <Testimonial />\n  </CarouselItem>\n  <CarouselItem>\n    <Testimonial />\n  </CarouselItem>\n  <CarouselItem>\n    <Testimonial />\n  </CarouselItem>\n</Carousel>\n```\n\n----------------------------------------\n\nTITLE: MenuOverlay Props Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the MenuOverlay component which serves as a flexible container for menu content.\n\nLANGUAGE: ts\nCODE:\n```\ntype MenuOverlay = {\n  /**\n   * A slot inside Menu's overlay.\n   *\n   * Supports MenuItem or any other component\n   */\n  children: React.ReactElement[];\n};\n```\n\n----------------------------------------\n\nTITLE: Concluded Solution for SelectInput Trigger in JSX\nDESCRIPTION: The selected implementation for controlling dropdown selection when using a SelectInput trigger. It uses the value and onChange props on the SelectInput for controlling the selection state.\n\nLANGUAGE: jsx\nCODE:\n```\nconst [currentSelection, setCurrentSelection] = React.useState();\n\nconst onSomeAction = () => {\n  setCurrentSelection('mumbai');\n};\n\nconst onResetClick = () => {\n  setCurrentSelection(undefined);\n};\n\nconst onSelectChange = ({ values }) => {\n  setCurrentSelection(values[0]);\n};\n\n<Dropdown>\n  <SelectInput\n    label=\"City\"\n    // New Prop 👇🏼\n    value={currentSelection}\n    onChange={onSelectChange}\n  />\n  <DropdownOverlay>\n    <ActionList>\n      <ActionListItem title=\"Mumbai\" value=\"mumbai\" />\n      <ActionListItem title=\"Bangalore\" value=\"bangalore\" />\n    </ActionList>\n  </DropdownOverlay>\n</Dropdown>;\n```\n\n----------------------------------------\n\nTITLE: Complex Skeleton Layout Using Box Components\nDESCRIPTION: Shows how to create a more complex loading state by combining Box and Skeleton components with flex layout properties to create a structured placeholder design.\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  display=\"flex\"\n  flexDirection=\"column\"\n  gap=\"spacing.2\"\n>\n  <Box display=\"flex\" flexDirection=\"row\" gap=\"spacing.2\">\n    <Skeleton\n      flexShrink={0}\n      width=\"40px\"\n      height=\"40px\"\n      borderRadius=\"max\"\n    />\n    <Skeleton width=\"100%\" />\n  </Box>\n  <Box flexDirection=\"column\" display=\"flex\" gap=\"spacing.2\">\n    <Skeleton />\n    <Skeleton />\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Controlled DatePicker Implementation\nDESCRIPTION: Example of a controlled DatePicker component where the selected date is managed by React state.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ControlledDatePicker() {\n  const [selectedDate, setSelectedDate] = React.useState<DateValue>(new Date());\n\n  return (\n    <DatePicker\n      label=\"Pick date\"\n      selectionType=\"single\"\n      value={selectedDate}\n      onChange={setSelectedDate}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ListItem with ListItemLink Component in Blade\nDESCRIPTION: Example of how to embed a link within a list item using the ListItemLink component. This pattern allows for inline links without breaking the list structure.\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem>\n    For more information <ListItemLink href=''>Click here</ListItemLink>\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Defining Table Toolbar Types in TypeScript\nDESCRIPTION: TypeScript type definitions for table toolbar functionality in the Blade UI library. These types describe properties for the toolbar and its action buttons, including customizable titles for selected and unselected states.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TableToolbarProps = {\n  /**\n   * The children of TableToolbar should be TableToolbarActions\n   */\n  children?: React.ReactNode;\n  /**\n   * The title of the TableToolbar. If not provided, it will show the default title.\n   * @default `Showing 1 to ${totalItems} Items`\n   */\n  title?: string;\n  /**\n   * The title to show when items are selected. If not provided, it will show the default title.\n   * @default `${selectedRows.length} 'Items'} Selected`\n   */\n  selectedTitle?: string;\n};\n\ntype TableToolbarActionsProps = {\n  children?: React.ReactNode;\n} & StyledPropsBlade;\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Motion Features in Blade\nDESCRIPTION: This demonstrates how to implement lazy loading of motion features to reduce the initial bundle size. The features.ts file exports the required animation bundle while App.tsx implements the LazyMotion component.\n\nLANGUAGE: js\nCODE:\n```\n// If you're using basic presets like Fade, Move, Slide, Scale, etc\nimport { domAnimations } from 'motion/react';\nexport default domAnimations; // 15kb;\n\n// OR\n\n// If you're using previously mentioned presets + `Morph` preset or drag / drop animations from motion/react\nimport { domMax } from 'motion/react';\nexport default domMax; // 25kb (includes the 15kb of domAnimations)\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet with SelectInput and ActionList Using Saurabh's Proposed API\nDESCRIPTION: A code sample demonstrating Saurabh's proposed API for BottomSheet integration with SelectInput, where BottomSheet manages all component state without importing from Dropdown.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheet> - loop and get ActionList useBottomSheetState()\n  <SelectInput label=\"Select Action\" />\n  <BottomSheetContainer>\n     <BottomSheetBody>\n\t\t\t\t<ActionList /> // useBottomSheetContext() isOpen, states\n\t\t </BottomSheetBody>\n     <BottomSheetFooter />\n  </BottomSheetContainer>\n</BottomSheet>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Dropdown using useSelect hook in JSX\nDESCRIPTION: This code demonstrates a hook-based approach for controlling dropdown selection, using the useSelect hook. It provides methods like selectItem and reset to manipulate the selection state.\n\nLANGUAGE: jsx\nCODE:\n```\nconst { selectItem, reset, dropdownRef } = useSelect();\n\nconst onSomeAction = () => {\n  selectItem('mumbai');\n};\n\nconst onResetClick = () => {\n  reset();\n};\n\n<Dropdown ref={dropdownRef}>\n  <SelectInput />\n  <DropdownOverlay>\n    <ActionList>\n      <ActionListItem title=\"Mumbai\" value=\"mumbai\" />\n      <ActionListItem title=\"Bangalore\" value=\"bangalore\" />\n    </ActionList>\n  </DropdownOverlay>\n</Dropdown>;\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple SpotlightPopover Flows with Prefixed IDs\nDESCRIPTION: This snippet demonstrates how to implement multiple guided tour flows in the same application by prefixing the step IDs to avoid conflicts. It shows separate SpotlightPopover instances for global and page-specific tours, each with their own set of steps and corresponding elements.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SpotlightPopover } from '@razorpay/blade/components';\nimport type { SpotlightPopoverSteps } from '@razorpay/blade/components';\n\nconst globalSteps: SpotlightPopoverSteps = [\n  {\n    id: 'global-step-1',\n    title: 'Step 1',\n    content: // ...\n  },\n  {\n    id: 'step-2',\n    title: 'Step 2',\n    content: // ...\n  },\n];\n\nconst paymentLinkSteps: SpotlightPopoverSteps = [\n  {\n    id: 'paymentlink-step-1',\n    title: 'Step 1',\n    content: // ...\n  },\n  {\n    id: 'paymentlink-step-2',\n    title: 'Step 2',\n    content: // ...\n  },\n];\n\nconst App = () => {\n  return (\n    <Box>\n      <SpotlightPopover\n        steps={globalSteps}\n      />\n       <SpotlightPopover\n        steps={paymentLinksSteps}\n      />\n    </Box>\n  );\n};\n\n// file: DashboardPage.tsx\nconst DashboardPage = () => {\n  return (\n    <Box>\n      <Button id=\"global-step-1\">Click me</Button>\n      <Box id=\"global-step-2\" padding=\"spacing.5\">\n        <Text>Some content</Text>\n      </Box>\n    </Box>\n  );\n};\n\n// file: PaymentLinks.tsx\nconst PaymentLinksPage = () => {\n  return (\n    <Box>\n      <Button id=\"paymentlink-step-1\">Click me</Button>\n      <Box id=\"paymentlink-step-2\" padding=\"spacing.5\">\n        <Text>Some content</Text>\n      </Box>\n    </Box>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled Input Example with Tags Integration\nDESCRIPTION: Full example of a controlled input component with tags integration. This code shows how to manage tags in state, add new tags, and remove existing ones within a TextInput component.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const [inputValue, setInputValue] = React.useState('');\n  const [tags, setTags] = React.useState([]);\n\n  const addTag = () => {\n    // Add input value to tags and clear the input value\n    setTags([...tags, inputValue]);\n    setInputValue('');\n  }\n\n  const removeTag = (tagName) => {\n    setTags(tags.filter(tagNameValue) => tagNameValue !== tagName);\n  }\n\n  return (\n    <TextInput\n      tags={tags.map((tagName, index) => (\n        <Tag onDismiss={() => removeTag(tagName)}>{tagName}</Tag>\n      ))}\n      value={inputValue}\n      onChange={({ value }) => setInputValue(value)}\n      onKeyDown={(e) => {\n        if (e.key === 'ENTER') {\n          addTag();\n        }\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Data and Column Definitions for Table Component in JSX\nDESCRIPTION: This snippet demonstrates how to set up data, sortFunctions, selection handlers, column definitions, footer definitions, and pagination configuration for a table component.\n\nLANGUAGE: jsx\nCODE:\n```\n// Mock data & functions\nconst data = [{\n    firstName: 'John',\n    lastName: 'Doe',\n    balance: 1000\n},\n{\n    firstName: 'Jane',\n    lastName: 'Doe',\n    balance: 2000\n}];\n\n\nconst sortFunctions = {\n  firstName: (array) => array.sort((a, b) => a.name.localeCompare(b.name)),\n};\n\nconst onSelectionChange = (selectedItems) => {\n  console.log(selectedItems);\n};\n\nconst columnDefinition = [\n    {\n        header: 'First Name',\n        headerKey: 'firstName',\n        cell: (row) => row.firstName,\n    },\n    {\n        header: 'Last Name',\n        headerKey: 'lastName',\n        cell: (row) => row.lastName,\n    },\n    {\n        header: () => (\n            <>\n                Balance\n                <Tooltip content='Current bank balance'>\n                    <InfoIcon size='medium' />\n                </Tooltip>\n            </>),\n        headerKey: 'balance',\n        cell: (row) => (\n            <>\n                {row.balance}\n                <Badge>Low</Badge>\n            </>),\n    }\n];\n\nconst footerDefinition = [\n    {\n        footer: 'Total',\n    },\n    {\n        footer: computedTotalBalance,\n    }\n];\n\nconst pagination = {\n  label?: string,\n  defaultPageSize?: number,\n  currentPage?: number,\n  showLabel?: boolean,\n  showPageNumberSelector?: boolean,\n  showPageSizePicker?: boolean,\n  onPageChange?: ({ page }) => void,\n  onPageSizeChange?: ({ pageSize }) => void,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using Heading Component in Blade\nDESCRIPTION: The Heading component is intended for section headings within a page. It uses BaseText internally and renders as HTML heading tags on web or text elements in React Native. Only accepts string children.\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading\n  variant=\"small | medium | large | subheading\"\n  type=\"normal | subtle | subdued | muted | placeholder\"\n  contrast=\"low | high\"\n>\n  Some Heading\n</Heading>\n```\n\n----------------------------------------\n\nTITLE: Implementing TabNav with More Menu and Overflow Handling\nDESCRIPTION: Example of the new TabNav API with a \"More\" dropdown menu. This implementation demonstrates the challenge of handling overflowing items when screen size changes, which is one of the key issues addressed by the prop-based API.\n\nLANGUAGE: jsx\nCODE:\n```\n<TabNav>\n  <TabNavItemLink icon={HomeIcon} accessibilityLabel=\"Home\" href=\"/home\" />\n  <TabNavItemLink title=\"Payroll\" href=\"/payroll\" />\n  <TabNavItemLink title=\"Payments\" href=\"/payments\" />\n  <Menu>\n    <TabNavItemLink title=\"More\" href=\"/more\" />\n    <MenuOverlay>\n      {overflowingItems.map((item) => {\n        // ??\n      })}\n      <MenuItem>\n        <ExploreItem title=\"Magic Checkout\" description=\"Some product description\" />\n      </MenuItem>\n      <MenuItem>\n        <ExploreItem title=\"RazorX\" description=\"Some product description\" />\n      </MenuItem>\n    </MenuOverlay>\n  </Menu>\n</TabNav>\n```\n\n----------------------------------------\n\nTITLE: Migrating from ThemeProvider to BladeProvider\nDESCRIPTION: Diff showing the migration from ThemeProvider to BladeProvider in the app entry point, including the prop rename from 'theme' to 'themeTokens'.\n\nLANGUAGE: diff\nCODE:\n```\n// App entry point\n-import { ThemeProvider } from '@razorpay/blade/components';\n+import { BladeProvider } from '@razorpay/blade/components';\nimport { paymentTheme } from '@razorpay/blade/tokens';\n\nfunction App(): JSX.Element {\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n-      <ThemeProvider theme={paymentTheme}>\n+      <BladeProvider themeTokens={paymentTheme}>\n        <Card />\n-      </ThemeProvider>\n+      </BladeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\n// somewhere in the app\nconst { theme } = useTheme();\n\n-background-color: ${theme.colors.surface.background.level2.lowContrast.onLight};\n+background-color: ${theme.colors.surface.background.level2.lowContrast};\n-font-size: ${theme.typography.desktop.fonts.size[200]}px;\n+font-size: ${theme.typography.fonts.size[200]}px;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Compact Table Component in JSX\nDESCRIPTION: This snippet shows how to use the Compact API pattern to create a table with a single component that takes all configuration as props, including data, columns, selection, sorting, and styling options.\n\nLANGUAGE: jsx\nCODE:\n```\n// Compact Table\n\n<Table\n  data={data} // This contains the actual data to be rendered in the table which would be retrieved from some API\n  columns={columns} // This contains the column definition for the table\n  footerRow={footerRow} // This contains the footer definition for the table\n  selectionType=\"single\"\n  onSelectionChange={onSelectionChange}\n  sortFunctions={sortFunctions}\n  onSortChange={onSortChange}\n  isLoading={false}\n  rowDensity=\"normal\"\n  showStripedRows={true}\n  toolbarTitle=\"Users\"\n  toolbarItemsSelectedTitle={`${selectedUsersCount} Users selected`}\n  toolbarActions={<Button>Export</Button>}\n  isStickyHeader={true}\n  isStickyFooter={true}\n  isStickyFistColumn={true}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Motion Tokens with useTheme Hook\nDESCRIPTION: Example showing how to access motion tokens directly using the useTheme hook. This demonstrates extracting easing, duration, and delay values from the theme context for use in custom components.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme } from '@razorpay/blade/components';\nimport { makeMotionTime } from '@razorpay/blade/utils';\n\nconst CustomComponent = () => {\n  const { theme } = useTheme();\n  const easing = theme.motion.easing.standard;\n  const duration = makeMotionTime(theme.motion.duration.xgentle);\n  const delay = makeMotionTime(theme.motion.delay.short);\n\n  return (\n    ...\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic RadioGroup Component in React TSX\nDESCRIPTION: Example of a basic RadioGroup implementation with Radio children components. This snippet demonstrates how to create a radio selection group with a label, help text, and default selected value.\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup\n  name=\"developers\"\n  label=\"Developers\"\n  helpText=\"Pick preferred blade developer\"\n  defaultValue=\"anurag\"\n>\n  <Radio value=\"anurag\">Anurag</Radio>\n  <Radio value=\"chaitanya\">Chaitanya</Radio>\n  <Radio value=\"divyanshu\">Divyanshu</Radio>\n  <Radio value=\"kamlesh\">Kamlesh</Radio>\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing SideNavSection with Collapsible Items in JSX\nDESCRIPTION: Example of a SideNavSection with collapsible items. This component supports showing a limited number of items initially with the ability to expand to see more. The maxVisibleItems prop controls how many items are visible by default.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNav>\n  <SideNavSection \n    title=\"OFFERINGS SECTION\" \n    maxVisibleItems={3}\n    onToggleVisibleItems={(isExpanded) => {\n      console.log(\"When +13 More is clicked\")\n    }}\n  >\n    {/* All SideNavLink items */}\n  </SideNavSection>\n</SideNav>\n```\n\n----------------------------------------\n\nTITLE: Using Text Component in Blade\nDESCRIPTION: The Text component is used for body text or paragraphs. It renders as p tags on web and Text elements in React Native. Unlike Title and Heading, it accepts ReactNode as children to allow for inline formatting and embedded elements.\n\nLANGUAGE: jsx\nCODE:\n```\n<Text\n  variant=\"body | caption\"\n  weight=\"regular | bold\"\n  size=\"small | medium\"\n  type=\"normal | subtle | subdued | muted | placeholder\"\n  contrast=\"low | high\"\n  truncateAfterLines={3}\n>\n  Some Text\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Card Component with Hybrid Compound/Props API (API 4)\nDESCRIPTION: A hybrid approach combining compound components with props for configuration, providing both structure and flexibility for the Card layout.\n\nLANGUAGE: jsx\nCODE:\n```\n<Card surfaceLevel={2}>\n  <Card.Header \n    title=\"Payments Links\" \n    subtitle=\"Share payment link via an email, SMS, messenger, chatbot etc.\" \n    titlePrefix={<DollarIcon size=\"xl\" />}\n    titleSuffix={<Counter amount={20} />}\n    trailingVisual={<Badge variant=\"positive\">NEW</Badge>}\n  />\n  <Card.Body>\n    Card Body Content\n  </Card.Body>\n  <Card.Footer\n    title=\"Card Footer Title\" \n    subtitle=\"Card footer subtitle\" \n    actions={{\n      primaryAction: { text: 'Know more', onClick: () => {} },\n      secondaryAction: { text: 'Read Docs', onClick: () => {} },\n    }} \n  />\n</Card>\n```\n\n----------------------------------------\n\nTITLE: BladeProvider Import Change Migration Step\nDESCRIPTION: Migration step showing how to update the import statement from ThemeProvider to BladeProvider.\n\nLANGUAGE: diff\nCODE:\n```\n-import { ThemeProvider } from '@razorpay/blade/components';\n+import { BladeProvider } from '@razorpay/blade/components';\n```\n\n----------------------------------------\n\nTITLE: Defining Avatar and AvatarGroup Types in TypeScript\nDESCRIPTION: TypeScript type definitions for the Avatar and AvatarGroup components, detailing all available props and their purposes. This includes size options, variants, color themes, and interaction behavior.\n\nLANGUAGE: ts\nCODE:\n```\ntype AvatarGroupProps = {\n  /**\n   * Children elements representing the avatars to stack.\n   */\n  children: React.ReactNode;\n  /**\n   * The size of each avatar within the group. Propagates to all avatars.\n   * @default \"xsmall\"\n   */\n  size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';\n  /**\n   * The maximum number of avatars to display before truncating.\n   */\n  maxCount?: number;\n  testID?: string;\n};\n\ntype AvatarProps = {\n  /**\n   * The size of the avatar.\n   * @default \"xsmall\"\n   */\n  size?: 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';\n  /**\n   * The visual variant of the avatar.\n   * @default \"circle\"\n   */\n  variant?: 'circle' | 'square';\n  /**\n   * The color theme of the avatar.\n   * @default \"neutral\"\n   */\n  color?: 'primary' | 'positive' | 'negative' | 'notice' | 'information' | 'neutral';\n  /**\n   * Custom icon component to use as the avatar.\n   */\n  icon?: IconComponent;\n  /**\n   * The name of the avatar, used to generate initials.\n   * If src has loaded, the name will be used as the alt attribute of the img. If src is not loaded, the name will be used to create the initials.\n   */\n  name?: string;\n  /**\n   * Custom image source for an image avatar.\n   */\n  src?: string;\n  /**\n   * The `alt` attribute for the `img` element\n   */\n  alt?: string;\n  /**\n   * The `srcSet` attribute for the `img` element, useful for responsive images.\n   */\n  srcSet?: string;\n  /**\n   * CORS settings attributes\n   */\n  crossOrigin?: 'anonymous' | 'use-credentials' | '';\n  /**\n   * Defines which referrer is sent when fetching the resource.\n   */\n  referrerPolicy?: HTMLAttributeReferrerPolicy;\n  /**\n   * Automatically renders button with `a` tag with `href` on web\n   */\n  href?: ButtonProps['href'];\n  /**\n   * anchor target attribute\n   *\n   * Should only be used alongside `href`\n   */\n  target?: ButtonProps['target'];\n  /**\n   * anchor rel attribute\n   *\n   * Should only be used alongside `href`\n   */\n  rel?: ButtonProps['rel'];\n  /**\n   * Click handler for the avatar.\n   */\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  testID?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyMotion for Optimized Animation Loading\nDESCRIPTION: This React component demonstrates how to implement LazyMotion to dynamically load animation features only when needed, optimizing initial bundle size and performance.\n\nLANGUAGE: jsx\nCODE:\n```\n// Make sure to return the specific export containing the feature bundle.\nconst loadFeatures = () => import('./features').then((res) => res.default);\n\n// This animation will run when loadFeatures resolves.\nfunction App({ children }) {\n  return <LazyMotion features={loadFeatures}>{children}</LazyMotion>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Usage Example in JSX\nDESCRIPTION: Demonstrates a basic implementation of the Popover component with a title, content with a link, and an icon button trigger. The placement is set to 'top-end'.\n\nLANGUAGE: js\nCODE:\n```\n// basic example\n<Popover\n  placement=\"top-end\"\n  title=\"International Payments\"\n  content={\n    <Text>\n      Your business can go international with support for transactions in \n      <Link href=\"#\">100 foreign currencies.</Link>\n    </Text>\n  }\n>\n  <IconButton icon={InfoIcon} accessibilityLabel=\"Refund\" />\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up ActionList Documentation in Storybook\nDESCRIPTION: This code imports the necessary components from Storybook and local files, then sets up the documentation page for the ActionList component. It uses Meta to configure the Storybook page title and renders the ActionListDocs component.\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { ActionListDocs } from './ActionListDocs';\n\n<Meta title=\"Components/Dropdown/ActionList/Docs\" />\n\n<ActionListDocs />\n```\n\n----------------------------------------\n\nTITLE: Defining TableData Type Structure in TypeScript\nDESCRIPTION: Defines the TableData type structure for the Table component. It includes TableNode type with required id field and optional nodes property, along with a TableData type containing an array of TableNode objects.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TableNode = {\n  id: Identifier;\n  nodes?: null;\n  [key: string]: unknown;\n};\n\n// we might want to add more meta information here in the future (could need some for pagination. Will update this as we go.)\ntype TableData = {\n  nodes: TableNode[];\n};\n```\n\n----------------------------------------\n\nTITLE: Alternative BottomSheet Implementation with Explicit Trigger\nDESCRIPTION: An alternative approach where BottomSheet remains loosely coupled from other components, with explicit control over open/close state and a dedicated trigger component.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheet isOpen={} snapPoints={[]}>\n\t<BottomSheetTrigger>\n\t  <SelectInput label=\"Select Action\" />\n\t</BottomSheetTrigger>\n  <BottomSheetContainer>\n     <BottomSheetHeader />\n     <BottomSheetBody>\n\t\t\t\t<ActionList />\n\t\t </BottomSheetBody>\n     <BottomSheetFooter />\n  </BottomSheetContainer>\n</BottomSheet>\n```\n\n----------------------------------------\n\nTITLE: DatePicker with Presets\nDESCRIPTION: Example showing how to configure the DatePicker with predefined date range presets, such as 'Past 7 days' or 'Past month'.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction DatePickerWithPresets() {\n  return (\n    <DatePicker\n      label=\"Pick date\"\n      selectionType=\"range\"\n      presets={[\n        { label: 'Past 7 days', value: (date) => [dayjs(date).subtract(7, 'day'), date] },\n        { label: 'Past month', value: (date) => [dayjs(date).subtract(1, 'month'), date] },\n      ]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the TabItem Component Props Interface\nDESCRIPTION: TypeScript interface for the TabItem component, specifying properties for customizing individual tab items including content, value, leading/trailing elements, and disabled state.\n\nLANGUAGE: ts\nCODE:\n```\ntype TabItemProps = {\n  /**\n   * The label of the tab item.\n   */\n  children: React.ReactNode;\n  /**\n   * The value of the tab item.\n   */\n  value: string;\n  /**\n   * Leading element of the tab item.\n   * Can be used to render an icon.\n   */\n  leading?: React.ReactNode;\n  /**\n   * Trailing element of the tab item.\n   * Can be used to render an badge/counter.\n   */\n  trailing?: React.ReactNode;\n  /**\n   * If `true`, the tab item will be disabled.\n   */\n  isDisabled?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from ActionList Header/Footer to Dropdown Header/Footer\nDESCRIPTION: Complete migration example showing how to update from the deprecated ActionListHeader and ActionListFooter components to the new standardized DropdownHeader and DropdownFooter components.\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  Dropdown,\n  DropdownOverlay,\n  SelectInput,\n  ActionListHeader,\n  ActionListFooter,\n  ActionList,\n  ActionListItem\n} from '@razorpay/blade/components';\n\nfunction App() {\n  return (\n    <Dropdown>\n      <SelectInput label=\"Select City\" />\n      <DropdownOverlay>\n+       <DropdownHeader title=\"Title\" />\n        <ActionList>\n-          <ActionListHeader title=\"Title\" />\n            <ActionListItem />\n            <ActionListItem />\n-          <ActionListFooter trailing={<Button>Apply</Button>} />\n        </ActionList>\n+       <DropdownFooter>\n+         <Box><Button>Apply</Button></Box>\n+       </DropdownFooter>\n      </DropdownOverlay>\n    </Dropdown>\n  )\n}\n\nexport { App };\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton with Card Component for Full Card Loading\nDESCRIPTION: Example of implementing a loading state for an entire Card component by creating a custom skeleton template that matches the Card structure with conditional rendering based on loading state.\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const { data, isLoading } = useQuery();\n\n  return (\n    <>\n      {isLoading ? (\n        <Box elevation=\"lowRaised\" borderRadius=\"medium\">\n          <Box display=\"flex\">\n            <Box>\n              <Skeleton width=\"40%\" height=\"30px\" />\n              <Skeleton width=\"30%\" height=\"20px\" />\n            </Box>\n            <Skeleton width=\"30px\" height=\"50px\" />\n          </Box>\n          <Skeleton width=\"100%\" height=\"100px\" />\n        </Box>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardHeaderLeading title={data.title} subtitle={data.subtitle} />\n            <CardHeaderTrailing\n              visual={<CardHeaderBadge variant=\"neutral\">{data.badge}</CardHeaderBadge>}\n            />\n          </CardHeader>\n          <CardBody>\n            <Text>{data.content}</Text>\n          </CardBody>\n        </Card>\n      )}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Selectable Card Implementation - Method 2 with CardGroup Components\nDESCRIPTION: Shows an alternative approach for selectable cards using dedicated CardGroup and CardGroupItem components. This method provides a more intuitive API similar to existing radio/checkbox components but introduces additional components.\n\nLANGUAGE: jsx\nCODE:\n```\nconst [selected, setSelected] = React.useState('orange');\n\n<CardGroup selectionType=\"single\" value={selected} onChange={(e) => console.log(e)}>\n  <CardGroupItem value=\"monthly\">\n    <Card isSelected={selected === 'monthly'}>\n      <CardBody>\n        <Text>Monthly</Text>\n      </CardBody>\n    </Card>\n  </CardGroupItem>\n  <CardGroupItem value=\"quarterly\">\n    <Card isSelected={selected === 'quarterly'}>\n      <CardBody>\n        <Text>Quarterly</Text>\n      </CardBody>\n    </Card>\n  </CardGroupItem>\n  <CardGroupItem value=\"annually\">\n    <Card isSelected={selected === 'annually'}>\n      <CardBody>\n        <Text>Annually</Text>\n      </CardBody>\n    </Card>\n  </CardGroupItem>\n</CardGroup>;\n```\n\n----------------------------------------\n\nTITLE: SideNav with Banner Component in React\nDESCRIPTION: Implementation example of SideNav with a banner element for displaying critical information such as activation notices. The banner appears at the top of the navigation panel.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNav \n  banner={\n    <Card href=\"/activate\">\n      {/* Activation Pending Styles */}\n    </Card>\n  }\n>\n  {/* children */}\n</SideNav>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Structure Example for SpotlightPopover in JSX\nDESCRIPTION: Demonstrates the basic usage pattern for SpotlightPopover component, showing how to define steps and highlight elements using SpotlightPopoverStep.\n\nLANGUAGE: jsx\nCODE:\n```\nconst steps = [\n  {\n    name: 'step-1',\n    title: 'Step 1',\n    content: () => <Text>Some content for step 1</Text>,\n    footer: (props) => <SpotlightPopoverFooter {...props} actions={{}} />\n  },\n  // ...more steps\n];\n\n<SpotlightPopover steps={steps}>\n  // ... more jsx\n  <SpotlightPopoverStep name=\"step-1\">\n    <Box>I'll be highlighted</Box>\n  </SpotlightPopoverStep>\n</SpotlightPopover>;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Platform-Specific Types\nDESCRIPTION: TypeScript configuration example for supporting platform-dependent types in tsconfig.json, using moduleSuffixes for web and native platforms.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // For react-native use `.native`\n    // For web use `.web` extension\n    \"moduleSuffixes\": [\".web\", \"\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Components with styled-components\nDESCRIPTION: Example code showing how to create an animated component using Blade's motion tokens. This demonstrates creating a pulsing circle animation with styled-components, applying duration and easing properties from the theme.\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from 'styled-components';\nimport { makeMotionTime } from '@razorpay/blade/utils';\n\nconst ExampleDiv = styled.div`\n  height: 50px;\n  width: 50px;\n  border-radius: 25px;\n  background-color: ${(props) =>\n    console.log('from example div', props.theme) ||\n    props.theme.colors.surface.background.primary.subtle};\n  animation: ${(props) =>\n    `resize ${makeMotionTime(props.theme.motion.duration.xgentle)} ${\n      props.theme.motion.easing.standard\n    } infinite`};\n  @keyframes resize {\n    0% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(1.5);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Drawer Enhancement with Header, Body, and Footer Components in JSX\nDESCRIPTION: Demonstrates the enhanced Drawer component structure with DrawerHeader, DrawerBody, and DrawerFooter components for creating a complete detailed view interface.\n\nLANGUAGE: jsx\nCODE:\n```\n<Drawer>\n  <DrawerHeader>{/* Custom Drawer Header */}</DrawerHeader>\n  <DrawerBody></DrawerBody>\n  <DrawerFooter></DrawerFooter>\n</Drawer>\n```\n\n----------------------------------------\n\nTITLE: Collapsible StepGroup Implementation in JSX\nDESCRIPTION: Shows how to implement a Collapsible StepGroup enhancement for the Detailed View Pattern. The component includes StepItems and a Collapsible section with a toggle link.\n\nLANGUAGE: jsx\nCODE:\n```\n<StepGroup>\n  <StepItem />\n  <StepItem />\n  <Collapsible>\n    <CollapsibleLink>Toggle timeline</CollapsibleLink>\n    <CollapsibleBody>\n      <StepItem />\n      <StepItem />\n    </CollapsibleBody>\n  </Collapsible>\n</StepGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Table Pagination Types in TypeScript\nDESCRIPTION: TypeScript type definitions for table pagination in the Blade UI library. These types define common pagination properties, and specific options for client-side and server-side pagination with appropriate conditionally required properties.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TablePaginationType = 'client' | 'server';\n\ntype TablePaginationServerProps = TablePaginationCommonProps & {\n  /**\n   * Whether the pagination is happening on client or server.\n   * If the pagination is happening on `client`, the Table component will **divide the data into pages** and show the pages based on the page size.\n   * If the pagination is happening on `server`, the Table component will **not divide the data into pages and will show all the data**. You will have to fetch data for each page as the page changes and pass it to the Table component.\n   * When paginationType is `server`, the `onPageChange` & `totalItemCount` props are required.\n   * @default 'client'\n   * */\n  paginationType?: Extract<TablePaginationType, 'server'>;\n  /**\n   * The total number of possible items in the table. This is used to calculate the total number of pages when pagination is happening on server and not all the data is fetched at once.\n   */\n  totalItemCount: number;\n  /**\n   * Callback function that is called when the page is changed\n   */\n  onPageChange: ({ page }: { page: number }) => void;\n};\n\ntype TablePaginationClientProps = TablePaginationCommonProps & {\n  /**\n   * Whether the pagination is happening on client or server.\n   * If the pagination is happening on `client`, the Table component will **divide the data into pages** and show the pages based on the page size.\n   * If the pagination is happening on `server`, the Table component will **not divide the data into pages and will show all the data**. You will have to fetch data for each page as the page changes and pass it to the Table component.\n   * When paginationType is `server`, the `onPageChange` & `totalItemCount` props are required.\n   * @default 'client'\n   * */\n  paginationType?: Extract<TablePaginationType, 'client'>;\n  /**\n   * The total number of possible items in the table. This is used to calculate the total number of pages when pagination is happening on server and not all the data is fetched at once.\n   */\n  totalItemCount?: number;\n  /**\n   * Callback function that is called when the page is changed\n   */\n  onPageChange?: ({ page }: { page: number }) => void;\n};\n\ntype TablePaginationProps = TablePaginationCommonProps &\n  (TablePaginationServerProps | TablePaginationClientProps);\n```\n\n----------------------------------------\n\nTITLE: Removing ActionList surfaceLevel Prop\nDESCRIPTION: Example of how to update ActionList component by removing the surfaceLevel prop which has been deprecated in Blade v11.\n\nLANGUAGE: diff\nCODE:\n```\n- <ActionList surfaceLevel={2/3} >\n+ <ActionList >\n```\n\n----------------------------------------\n\nTITLE: SpotlightPopover API Type Definition in TypeScript\nDESCRIPTION: Defines the type structure for SpotlightPopover component, including the Step type and the main component props for implementing a guided tour with multiple steps.\n\nLANGUAGE: jsx\nCODE:\n```\n// Step will have similar props as the Popover component, With extra SpotlightPopover related props.\ntype Step = {\n  /**\n   * Unique identifier for the tour step\n   */\n  name: string;\n  /**\n   * Content of the Popover\n   */\n  content: ({ gotToNext, goToPrev, stopTour, activeStep, totalSteps }) => React.ReactNode;\n  /**\n   * Footer content\n   */\n  footer?: ({ gotToNext, goToPrev, stopTour, activeStep, totalSteps }) => React.ReactNode;\n  /**\n   * Popover title\n   */\n  title?: string;\n  /**\n   * Leading content placed before the title\n   *\n   * Can be any blade icon or asset.\n   */\n  titleLeading?: React.ReactNode;\n  /**\n   * Placement of Popover\n   * @default \"top\"\n   */\n  placement?: UseFloatingOptions['placement'];\n}\n\ntype SpotlightPopoverProps = {\n  /**\n   * Array of steps to be rendered\n   *\n   * The order of the steps will be the order in which they are rendered depending on the `activeStep` prop\n   */\n  steps: Step[];\n  /**\n   * Whether the tour is visible or not\n   */\n  isOpen: boolean;\n  /**\n   * Callback when the tour is opened or closed\n   */\n  onOpenChange: ({ isOpen: boolean }) => void;\n  /**\n   * Callback which fires `stopTour` is called from `steps` render prop.\n   */\n  onFinish: () => void;\n  /**\n   * Callback when the active step changes\n   */\n  onStepChange?: (step: number) => void;\n  /**\n   * Active step to be rendered\n   */\n  activeStep: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ActionListSection Component in React JSX\nDESCRIPTION: Example showing how to use the ActionListSection component to group ActionListItems with an optional section title. The component wraps sections inside ActionList and adds dividers automatically.\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionList>\n  <ActionListSection title=\"Section Heading\">\n    <ActionListItem\n    // ...props\n    />\n  </ActionListSection>\n</ActionList>\n```\n\n----------------------------------------\n\nTITLE: Basic CheckboxGroup Implementation in React TSX\nDESCRIPTION: Example of CheckboxGroup usage with multiple Checkbox components, label, helper text, and default values for the group.\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxGroup\n  label=\"Developers\"\n  helpText=\"Pick blade developers\"\n  defaultValue={['anurag', 'kamlesh']}\n>\n  <Checkbox value=\"anurag\">Anurag</Checkbox>\n  <Checkbox value=\"kamlesh\">Kamlesh</Checkbox>\n  <Checkbox value=\"chaitanya\">Chaitanya</Checkbox>\n</CheckboxGroup>\n```\n\n----------------------------------------\n\nTITLE: Replacing Alert contrast Prop with emphasis Prop\nDESCRIPTION: Code diff showing how to replace the deprecated contrast prop with the new emphasis prop in the Alert component, using the new terminology for visual prominence.\n\nLANGUAGE: diff\nCODE:\n```\n- <Alert description=\"Hello World\" contrast=\"low\" />\n+ <Alert description=\"Hello World\" emphasis=\"subtle\" />\n\n- <Alert description=\"Hello World\" contrast=\"high\" />\n+ <Alert description=\"Hello World\" emphasis=\"intense\" />\n```\n\n----------------------------------------\n\nTITLE: ActionList Complex Usage Example in JSX\nDESCRIPTION: Comprehensive example of ActionList with sections, headers, footers, and various item types demonstrating the full range of features.\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionList surfaceLevel={2}>\n  <ActionListHeader title=\"Recent Searches\" leading={<ActionListHeaderIcon icon={HistoryIcon} />} />\n  <ActionListSection title=\"Section Heading\">\n    <ActionListItem\n      title=\"Accept API\"\n      value=\"accept\"\n      description=\"Accept this API\"\n      leading={<ActionListItemIcon icon={StarIcon} />}\n      trailing={<ActionListItemText>⌘ + Space</ActionListItemText>}\n    />\n  </ActionListSection>\n  <ActionListItem\n    title=\"Delete\"\n    description=\"Delete this value\"\n    value=\"delete\"\n    intent=\"negative\"\n    leading={<ActionListItemIcon icon={TrashIcon} />}\n    trailing={<ActionListItemText>⌘ + Space + D</ActionListItemText>}\n  />\n  <ActionListFooter\n    title=\"Footer Title\"\n    description=\"Footer Description\"\n    leading={<ActionListFooterIcon icon={DocIcon} />}\n    trailing={\n      <>\n        <Button intent=\"secondary\">Secondary Button</Button>\n        <Button>Primary Button</Button>\n      </>\n    }\n  />\n</ActionList>\n```\n\n----------------------------------------\n\nTITLE: BladeThemeProvider Implementation Pattern\nDESCRIPTION: Example of how to use the BladeThemeProvider component with theme tokens to enable theming throughout an application.\n\nLANGUAGE: jsx\nCODE:\n```\nimport {myThemeTokens, BladeThemeProvider} from 'design-system';\n\n<BladeThemeProvider theme={myThemeTokens}>\n  <MyApp/>\n</BladeThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Custom Labeled Switch Component\nDESCRIPTION: Shows how to add a custom label to a Switch component since it doesn't render a label element internally. This approach uses a Box component as a label wrapper.\n\nLANGUAGE: jsx\nCODE:\n```\n<Box as=\"label\" display=\"flex\">\n  Dark mode\n  <Switch id=\"dark-mode\" />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: DropdownOverlay Component Usage in JSX\nDESCRIPTION: Example showing how to use the DropdownOverlay component to position and animate dropdown content.\n\nLANGUAGE: jsx\nCODE:\n```\n<Dropdown>\n  <SelectInput label=\"Click For Greetings\" />\n  <DropdownOverlay>Hi</DropdownOverlay>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Updating Amount prefix Prop to currencyIndicator\nDESCRIPTION: Code diff showing how to replace the deprecated prefix prop with the new currencyIndicator prop in the Amount component.\n\nLANGUAGE: diff\nCODE:\n```\n- <Amount prefix=\"currency-symbol\" value={123456.789} />\n+ <Amount currencyIndicator=\"currency-symbol\" value={123456.789} />\n\n- <Amount prefix=\"currency-code\" value={123456.789} />\n+ <Amount currencyIndicator=\"currency-code\" value={123456.789} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Promotional Toast in React\nDESCRIPTION: Example showing how to create a promotional toast with custom content, including a heading and text, along with an icon and action button. This demonstrates the richer layout options of promotional toasts.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BladeProvider, ToastContainer, useToast } from \"@razorpay/blade/components\"\n\nconst Example = () => {\n  const toast = useToast();\n\n  return (\n    <Button\n      onClick={() => {\n        toast.show({\n          type: 'promotional',\n          content: (\n            <Box>\n              <Heading>Payment Successful</Heading>\n              <Text>Amount: ₹100</Text>\n            </Box>\n          ),\n          leading: <DollarIcon />,\n          action: {\n            text: 'Okay'\n          }\n        });\n      }}\n    >\n      Do payment\n    </Button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested StepGroup Structure\nDESCRIPTION: Example showing how to create nested StepGroups for more complex process flows, with different icon styles and progress indicators.\n\nLANGUAGE: jsx\nCODE:\n```\n<StepGroup>\n  <StepItem\n    marker={<StepItemIcon icon={CheckIcon} color=\"positive\" />}\n    title=\"Disputes Raised\"\n    timestamp=\"Thu, 11th Oct23 | 12:00pm\"\n    stepProgress=\"full\"\n    trailing={<Badge>Label</Badge>}\n  />\n  {/* Nested StepGroup */}\n  <StepGroup>\n    <StepItem\n      marker={<StepItemIcon icon={CheckIcon} color=\"primary\" />}\n      title=\"Needs Response\"\n      timestamp=\"Respond latest by Tue, 23rd Oct'24 | 12:00pm\"\n      description=\"Description\"\n      stepProgress=\"start\"\n    />\n    <StepItem\n      marker={<StepItemIcon icon={CheckIcon} color=\"neutral\" />}\n      title=\"Needs Response\"\n      timestamp=\"Respond latest by Tue, 23rd Oct'24 | 12:00pm\"\n      description=\"Description\"\n    />\n  </StepGroup>\n  <StepItem\n    marker={<StepItemIcon icon={CheckIcon} color=\"neutral\" />}\n    title=\"Decision from Bank\"\n    trailing={<Badge color=\"neutral\">Pending</Badge>}\n  />\n</StepGroup>\n```\n\n----------------------------------------\n\nTITLE: ButtonGroup with Dropdown Integration Example\nDESCRIPTION: Example of combining ButtonGroup with a Dropdown component to create a split button with dropdown functionality. This pattern is useful for actions that have multiple sub-options.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ButtonGroup,\n  Button,\n  Dropdown,\n  DropdownOverlay,\n  DropdownButton,\n  ActionList,\n  ActionListItem,\n  ChevronDownIcon,\n} from '@razorpay/blade/components';\n\nconst App = () => {\n  return (\n    <ButtonGroup>\n      <Button icon={PlusIcon}>Payout</Button>\n      <Dropdown>\n        <DropdownButton icon={ChevronDownIcon} />\n        <DropdownOverlay placement=\"bottom-end\">\n          <ActionList>\n            <ActionListItem title=\"Bulk Payout\" value=\"bulk-payout\" />\n            <ActionListItem title=\"Upload Invoice\" value=\"upload-invoice\" />\n            <ActionListItem title=\"Add Contact\" value=\"add-contact\" />\n            <ActionListItem title=\"Team Member\" value=\"team-member\" />\n          </ActionList>\n        </DropdownOverlay>\n      </Dropdown>\n    </ButtonGroup>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Migration Example from Dropdown to Menu in JSX\nDESCRIPTION: Shows how to migrate from the deprecated Dropdown API to the recommended Menu API for action-based menus.\n\nLANGUAGE: jsx\nCODE:\n```\n- <Dropdown>\n-   <DropdownButton variant=\"tertiary\" icon={UserIcon}>User</DropdownButton>\n-   <DropdownOverlay>\n-     <ActionList>\n-       <ActionListItem title=\"Profile\" />\n-       <ActionListItem title=\"Account\" />\n-     </ActionList>\n-   </DropdownOverlay>\n- </Dropdown>\n+ <Menu>\n+   <Button variant=\"tertiary\" icon={UserIcon}>User<Button>\n+   <MenuOverlay>\n+     <MenuItem title=\"Profile\" />\n+     <MenuItem title=\"Account\" />\n+   </MenuOverlay>\n+ </Menu>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Resolver for Blade Package Compatibility\nDESCRIPTION: Configuration update for Jest v27 or older with custom resolvers to maintain compatibility with the @razorpay/blade package. This diff shows the moduleNameMapper settings needed in the Jest configuration.\n\nLANGUAGE: diff\nCODE:\n```\n  moduleNameMapper: {\n    // ...rest of your config\n+   '@razorpay/blade/components': '<rootDir>/node_modules/@razorpay/blade/build/components/index.development.web.js',\n+   '@razorpay/blade/utils': '<rootDir>/node_modules/@razorpay/blade/build/utils/index.development.web.js',\n+   '@razorpay/blade/tokens': '<rootDir>/node_modules/@razorpay/blade/build/tokens/index.development.web.js',\n  },\n```\n\n----------------------------------------\n\nTITLE: Card Component with Semi-Flexible Compound API (API 5)\nDESCRIPTION: A semi-flexible compound component approach that addresses issues with icon size and color by providing specialized sub-components.\n\nLANGUAGE: jsx\nCODE:\n```\n<Card.Header>\n  <Card.HeaderLeading>\n    <CardHeader.Icon icon={Clock} />\n    <Card.HeaderTitle title=\"\" subtitle=\"\"  />\n    <CardHeader.Counter />\n  </Card.HeaderLeading>\n  <Card.HeaderTrailing>\n    <Badge />\n  </Card.HeaderTrailing>\n</Card.Header>\n```\n\n----------------------------------------\n\nTITLE: Defining ChatMessage Props Interface in TypeScript\nDESCRIPTION: TypeScript interface defining all available props for the ChatMessage component, including message type, sender type, loading state, validation state, and various rendering options.\n\nLANGUAGE: tsx\nCODE:\n```\ntype ChatMessageProps = {\n  messageType?: 'last' | 'default';\n  senderType?: 'self' | 'other';\n  isLoading?: boolean;\n  validationState?: 'error' | 'none';\n  errorText?: string;\n  onClick?: () => void;\n  footerActions?: ReactNode;\n  children: ReactNode | string;\n  leading?: ReactNode;\n  loadingText?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: List Component with Nested Prop for Hierarchy\nDESCRIPTION: Alternative API approach using a nested prop to define the hierarchical structure, which was rejected for poor readability.\n\nLANGUAGE: jsx\nCODE:\n```\n<List variant='ordered'>\n  <ListItem \n    nested={\n      <ListItem\n        nested={\n          <ListItem>\n            Item 1.1.1\n          <ListItem/>\n        }\n      >\n        Item 1.1\n      <ListItem/>\n    }\n  >\n    Item 1\n  <ListItem/>\n  <ListItem>\n    Item 2\t\t\n  <ListItem/>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Creating Letter Avatars with Color Variants\nDESCRIPTION: Example of using the Avatar component to display letter-based avatars with different color themes. The component automatically generates initials from the provided names.\n\nLANGUAGE: tsx\nCODE:\n```\n<Avatar color=\"primary\" name=\"Nitin Kumar\" />\n<Avatar color=\"positive\" name=\"Anurag\" />\n<Avatar color=\"negative\" name=\"Saurabh Daware\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta for Installation Guide\nDESCRIPTION: This JSX code sets the Storybook page title for the installation guide documentation. The Meta component from Storybook's addon-docs is used to configure the page as 'Guides/Installation'.\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Guides/Installation\" />\n```\n\n----------------------------------------\n\nTITLE: Using the Amount Component in React with Various Props\nDESCRIPTION: Example of importing and implementing the Amount component with different properties including suffix, size, styling options, and currency value settings.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Amount } from '@razorpay/components';\n\n<Amount\n  suffix=\"decimals\"\n  size=\"title-medium\"\n  isAffixSubtle={true}\n  intent=\"information\"\n  prefix=\"currency-symbol\"\n  value={1000}\n/>;\n\n```\n\n----------------------------------------\n\nTITLE: Icon Component API Usage Example\nDESCRIPTION: Demonstrates the standard API for using icon components in Blade. Icons accept color and size props that follow Blade's design system tokens.\n\nLANGUAGE: jsx\nCODE:\n```\n<CreditCardIcon\n  color='surface.icon | feedback.icon | action.icon'\n  size='xsmall | small | medium | large | 2xlarge'\n>\n```\n\n----------------------------------------\n\nTITLE: Using Code Component in Blade\nDESCRIPTION: The Code component is meant for highlighting inline code snippets within text. It's not a full code block but rather for inline code references. It renders as code tags on web and Text elements in React Native.\n\nLANGUAGE: jsx\nCODE:\n```\n<Code size=\"large | medium\" type=\"normal | subtle | subdued | muted | placeholder\">\n  SENTRY_AUTH_TOKEN:xyz\n</Code>\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomNav with NavLink in React\nDESCRIPTION: Example of how to use the BottomNav component with React Router's NavLink. Shows how to create navigation items with various properties including active state handling and click events.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NavLink } from 'react-router-dom';\n\n<BottomNav>\n  <BottomNavItem \n    as={NavLink} \n    isActive={true}\n    title=\"Payments\"\n    icon={WalletIcon}\n    href=\"/payments\"\n  />\n  <BottomNavItem \n    as={NavLink} \n    title=\"Transactions\"\n    icon={TransactionsIcon}\n    href=\"/transactions\"\n  />\n  <BottomNavItem \n    as={NavLink} \n    title=\"Links\"\n    icon={PaymentLinksIcon}\n    href=\"/links\"\n  />\n  <BottomNavItem \n    title=\"More\"\n    icon={MoreIcons}\n    onClick={() => {\n      // This can be used to open SideNav drawer\n      setIsSideNavOpen(true)\n    }}\n  />\n</BottomNav>\n```\n\n----------------------------------------\n\nTITLE: Including Blade Fonts via CDN\nDESCRIPTION: HTML link tag to include Blade fonts CSS from unpkg CDN for projects that don't use a bundler or use no-code tools.\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/@razorpay/blade@<blade-version>/fonts.css\" />\n<!--\n  Replace <blade-version> in the URL with the version of Blade you're using\n  E.g. https://unpkg.com/@razorpay/blade@11.3.1/fonts.css\n-->\n```\n\n----------------------------------------\n\nTITLE: Multi-level Navigation Structure with SideNavLevel in JSX\nDESCRIPTION: Example of nested navigation levels using SideNavLevel components. This demonstrates how to create L1, L2, and L3 navigation levels with active states. SideNavLevel creates hierarchical navigation structures.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNav>\n  {/* L1 Items */}\n  <SideNavLink title=\"L1 Item\" />\n\n\n  {/* isActive marks this submenu as active */}\n  <SideNavLink title=\"L2 Trigger\" isActive>\n    {/* L2 Level */}\n    <SideNavLevel>\n      <SideNavLink />\n      {/* isActive marks this link as active */}\n      <SideNavLink isActive />\n      <SideNavLink title=\"L3 Trigger\">\n        {/* L3 Level */}\n        <SideNavLevel>\n          <SideNavLink />\n          <SideNavLink />\n        </SideNavLevel>\n      </SideNavLink>\n    </SideNavLevel>\n</SideNav>\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Tokens in Components with useTheme (Previous Implementation)\nDESCRIPTION: Example of how theme tokens were previously accessed in components, showing the problematic pattern of hardcoding mode and platform values like 'onLight' and 'desktop'.\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledCard = styled.div(\n  ({ theme }: { theme: Theme }) => `\n  width: 368px;\n  background-color: ${theme.colors.surface.background.level2.lowContrast.onLight};\n  border-radius: ${theme.border.radius.medium}px;\n  box-shadow: ${theme.shadows.offsetX.level[1]}px ${theme.shadows.offsetY.level[1]}px ${theme.shadows.blurRadius.level[1]}px ${theme.shadows.color.level[1].onLight}, ${theme.shadows.offsetX.level[1]}px ${theme.shadows.offsetY.level[1]}px ${theme.shadows.blurRadius.level[1]}px ${theme.shadows.color.level[1].onLight};\n  padding: ${theme.spacing[5]}px;\n  display: flex;\n  flex-direction: column;\n`,\n);\n\nconst Card = (): React.ReactElement => {\n  const { theme } = useTheme();\n  return (\n    <React.Fragment>\n      <DisplayLarge theme={theme}>Cash Advance </DisplayLarge>\n      <StyledCard theme={theme}>\n        <AlertInformation theme={theme}>\n          The interest charged will be deposited back into your bank account within a day of\n          repayment.\n        </AlertInformation>\n        <Divider theme={theme} />\n        <CaptionRegular theme={theme}>\n          This amount will be deducted in 3 installments from your settlement balance between Feb\n          18-20 on a daily basis.\n        </CaptionRegular>\n      </StyledCard>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Menu Subcomponent Props in TypeScript\nDESCRIPTION: Defines the TypeScript interfaces for additional Menu subcomponents including MenuHeader, MenuFooter, and MenuDivider.\n\nLANGUAGE: ts\nCODE:\n```\n// Follows the standard header, footer types of Blade like DropdownHeader, ModalHeader, etc\ntype MenuHeaderProps = BaseHeaderProps;\ntype MenuFooterProps = BaseFooterProps;\n\n// No props\ntype MenuDividerProps = {};\n```\n\n----------------------------------------\n\nTITLE: Alternative StepGroup-controlled Selection Approach in JSX\nDESCRIPTION: This snippet shows an alternative approach where the StepGroup component manages selection state and click events for all its child items. This approach was rejected due to potential confusion in nested StepGroup scenarios.\n\nLANGUAGE: jsx\nCODE:\n```\n<StepGroup selected={selectedIndex} onItemClick={({ clickedItemIndex }) => {}}>\n  <StepItem />\n  <StepItem />\n</StepGroup>\n```\n\n----------------------------------------\n\nTITLE: Migrating from Old to New Accordion API in React\nDESCRIPTION: Shows how to migrate from the old Accordion API to the new API that introduces AccordionItemHeader and AccordionItemBody components. The old API with icon, title, and description props is being deprecated.\n\nLANGUAGE: diff\nCODE:\n```\n<Accordion>\n  <AccordionItem\n-    icon={StarIcon}\n-    title=\"This is title\"\n-    description=\"Body content of Accordion\"\n  />\n</Accordion>\n```\n\nLANGUAGE: diff\nCODE:\n```\n<Accordion>\n  <AccordionItem>\n+    <AccordionItemHeader leading={<StarIcon size=\"large\" />} title=\"This is title\" />\n+    <AccordionItemBody>Body content of Accordion</AccordionItemBody>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: BottomSheet Migration from Pre-release Version\nDESCRIPTION: Migration guide showing how to update from the pre-release version of BottomSheet to the stable version, including import changes and API modifications for Header and Footer components.\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n-  BottomSheet_PRE_RELEASE,\n+  BottomSheet,\n  BottomSheetHeader,\n  BottomSheetBody,\n  BottomSheetFooter\n} from \"@razorpay/blade/components\"\n```\n\n----------------------------------------\n\nTITLE: Menu Component Props Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the Menu component props, including children structure, open state control, and interaction mode options.\n\nLANGUAGE: ts\nCODE:\n```\ntype MenuProps = {\n  /**\n   * First children is trigger and second children is MenuOverlay\n   **/\n  children: [React.ReactElement, React.ReactElement];\n\n  /**\n   * Open controlled state\n   */\n  isOpen?: boolean;\n\n  /**\n   * On Menu open change callback\n   */\n  onOpenChange?: ({ isOpen }: { isOpen: boolean }) => void;\n\n  /**\n   * Should menu open on click or hover\n   *\n   * @default 'click'\n   */\n  openInteraction?: 'hover' | 'click';\n};\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton with Card Component for Partial Loading\nDESCRIPTION: Implementation showing how to use Skeleton for loading only the content part of a Card component while keeping the header visible, providing a more targeted loading experience.\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const { data, isLoading } = useQuery();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardHeaderLeading title=\"Payment options\" subtitle=\"Secured by Razorpay\" />\n        <CardHeaderTrailing visual={<CardHeaderBadge variant=\"neutral\">PENDING</CardHeaderBadge>} />\n      </CardHeader>\n      <CardBody>\n        {isLoading ? <Skeleton width=\"100%\" height=\"100px\" /> : <Text>{data.content}</Text>}\n      </CardBody>\n    </Card>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Blade Globally with npm\nDESCRIPTION: Command to install the Blade package globally using npm. This is required before running the AI codemod tools.\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @razorpay/blade\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Creation with Brand Color\nDESCRIPTION: Example code showing how to create a custom theme using createTheme function with a single brand color and apply it using BladeProvider.\n\nLANGUAGE: tsx\nCODE:\n```\nconst customTheme = createTheme({ brandColor: '#19BEA2' })\n\n<BladeProvider themeTokens={customTheme} colorScheme={colorScheme}>\n {App}\n</BladeProvider>\n```\n\n----------------------------------------\n\nTITLE: DatePicker API Type Definition\nDESCRIPTION: TypeScript interface defining the DatePicker component props, combining input properties with calendar properties. Includes properties for labeling, state management, and event handling.\n\nLANGUAGE: ts\nCODE:\n```\ntype InputProps = Pick<\n  BaseInputProps,\n  | 'labelPosition'\n  | 'validationState'\n  | 'errorText'\n  | 'successText'\n  | 'helpText'\n  | 'necessityIndicator'\n  | 'isRequired'\n  | 'isDisabled'\n  | 'onFocus'\n  | 'onBlur'\n  | 'size'\n  | 'autoFocus'\n>;\n\ntype DatePickerProps = InputProps &\n  CalendarProps & {\n    /**\n     * Label for the input\n     * \n     * If labelPosition is set to \"left\" on range picker,\n     * then we will take the `{ start }` label and render it on the left side of the input ignoring the `{ end }`\n     */\n    label?: string | { start: string, end?: string };\n    /**\n     * Sets the HTML name attribute\n     */\n    name?: string | { start: string, end: string };\n    isOpen?: boolean;\n    defaultIsOpen?: boolean;\n    onOpenChange?: ({ isOpen }: { isOpen: boolean }) => void;\n  };\n```\n\n----------------------------------------\n\nTITLE: Proposed Combobox Component Structure in JSX\nDESCRIPTION: Example of a proposed component structure if Dropdown is renamed to Combobox. Shows the nested hierarchy of components including ComboboxOverlay, ComboboxList, and ComboboxItem.\n\nLANGUAGE: jsx\nCODE:\n```\n<Combobox>\n  <SelectInput />\n  <ComboboxOverlay>\n    <ComboboxList />\n      <ComboboxItem />\n      <ComboboxItem />\n    </ComboboxList>\n  </ComboboxOverlay>\n</Combobox>\n```\n\n----------------------------------------\n\nTITLE: Using Button with Href Attribute in React\nDESCRIPTION: Demonstrates how to use the Button component with href, target, and rel properties to create a button that functions as a link. The component automatically renders as an anchor tag.\n\nLANGUAGE: jsx\nCODE:\n```\n<Button href=\"https://youtu.be/iPaBUhIsslA\" target=\"_blank\" rel=\"noopener noreferrer\">\n  I am Link!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Migration for Alert Component isDismissible Prop\nDESCRIPTION: Shows the required code change for fixing a typo in the Alert component's isDismissible prop. This breaking change in version 6.0.0 requires renaming the prop from isDismissable to isDismissible.\n\nLANGUAGE: diff\nCODE:\n```\n<Alert\n- isDismissable\n+ isDismissible\n/>\n```\n\n----------------------------------------\n\nTITLE: Typography Migration: Title Component Changes\nDESCRIPTION: Example showing how to migrate from the 'large' size variant to 'xlarge' in the Title component as part of the typography scale streamlining.\n\nLANGUAGE: diff\nCODE:\n```\n- <Title size=\"large\">hello world</Title>\n+ <Title size=\"xlarge\">hello world</Title>\n```\n\n----------------------------------------\n\nTITLE: Installing Blade and Dependencies for Web\nDESCRIPTION: Command to install Blade and its peer dependencies including styled-components, i18nify libraries, and framer-motion using yarn.\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @razorpay/blade styled-components@5.3.11 @razorpay/i18nify-js@1.9.3 @razorpay/i18nify-react@4.0.8 framer-motion@11.13.3\n```\n\n----------------------------------------\n\nTITLE: MenuItem Props Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the MenuItem component, detailing all possible properties for customizing menu items including title, interactions, and visual elements.\n\nLANGUAGE: ts\nCODE:\n```\ntype MenuItemProps = {\n  /**\n   * title of item\n   */\n  title: string;\n\n  /**\n   * Description text for the item\n   */\n  description?: string;\n\n  /**\n   * Click handler for MenuItem\n   *\n   * Absense of this prop and href will turn the item into non-interactive item\n   */\n  onClick?: (event: React.MouseEvent) => void;\n\n  /**\n   * Link to open when item is clicked.\n   *\n   * Absense of this prop and onClick will turn the item into non-interactive item\n   */\n  href?: string;\n\n  /**\n   * HTML target of the link\n   */\n  target?: string;\n\n  /**\n   * Item that goes on left-side of item.\n   *\n   * Will be overriden in multiselect\n   */\n  leading?: React.ReactNode;\n\n  /**\n   * Item that goes on right-side of item.\n   */\n  trailing?: React.ReactNode;\n\n  /**\n   * Item that goes immediately next to the title.\n   */\n  titleSuffix?: React.ReactElement;\n\n  /**\n   * disabled state of item\n   */\n  isDisabled?: boolean;\n\n  /**\n   * as prop to pass React Router's Link component for client-side navigation\n   */\n  as?: React.ReactComponent;\n\n  /**\n   * Color of item. set to negative for dangerous actions like Delete, Remove, etc\n   */\n  color?: 'negative';\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Basic Structure of Tabs Component\nDESCRIPTION: Shows the basic JSX structure of the Tabs component, illustrating how TabList, TabItem, and TabPanel components are nested together.\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs>\n  <TabList>\n    <TabItem />\n  </TabList>\n  <TabPanel />\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Alternative DatePicker API Approach (Popover-like)\nDESCRIPTION: An alternative API design for DatePicker that follows a Popover-like pattern with content as a prop.\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  isOpen={isOpen}\n  onOpenChange={setIsOpen}\n  content={\n    <Box>\n      <Calendar />\n      <SomeOtherComponent />\n    </Box>\n  }\n  {...calendarProps}\n>\n  <Button>Open DatePicker</Button> or <DatePickerInput />\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation for Checkbox Group with 'At Least One Selected' Requirement\nDESCRIPTION: Example of user-managed validation where at least one checkbox must be selected. It demonstrates how to use CheckboxGroup with validation states, helpText, and errorText to guide the user when no checkboxes are selected.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AnyOneHasToBeSelected() {\n  const [selected, setSelected] = React.useState([]);\n\n  return (\n    <CheckboxGroup\n      label=\"Do you love any of the fruits?\"\n      helpText=\"Select atleast one\"\n      errorText=\"You must select atleast one\"\n      value={selected}\n      onChange={setSelected}\n      validationState={selected.length === 0 ? 'error' : 'none'}\n    >\n      <Checkbox value=\"apple\">apple</Checkbox>\n      <Checkbox value=\"mango\">mango</Checkbox>\n      <Checkbox value=\"orange\">orange</Checkbox>\n      <Checkbox value=\"banana\">banana</Checkbox>\n    </CheckboxGroup>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jest v27 Compatibility with moduleNameMapper Configuration\nDESCRIPTION: Configuration adjustment for Jest v27 users or those with custom resolvers, ensuring compatibility with the @razorpay/blade package by adding module name mappings for components, utils, and tokens.\n\nLANGUAGE: diff\nCODE:\n```\n  moduleNameMapper: {\n    // ...rest of your config\n+   '@razorpay/blade/components': '<rootDir>/node_modules/@razorpay/blade/build/components/index.development.web.js',\n+   '@razorpay/blade/utils': '<rootDir>/node_modules/@razorpay/blade/build/utils/index.development.web.js',\n+   '@razorpay/blade/tokens': '<rootDir>/node_modules/@razorpay/blade/build/tokens/index.development.web.js',\n  },\n```\n\n----------------------------------------\n\nTITLE: Implementing Icon Avatars in React\nDESCRIPTION: Example showing how to create icon-based avatars by providing an icon component to the Avatar. This allows for symbolic representation rather than text or images.\n\nLANGUAGE: tsx\nCODE:\n```\n<Avatar color=\"primary\" icon={SearchIcon} />\n<Avatar color=\"primary\" icon={TransactionIcon} />\n```\n\n----------------------------------------\n\nTITLE: Using SelectInput with defaultValue instead of isDefaultSelected\nDESCRIPTION: Migration example showing how to replace the deprecated isDefaultSelected prop on ActionListItem with the new defaultValue prop on SelectInput for default selections.\n\nLANGUAGE: diff\nCODE:\n```\n<Dropdown>\n  <SelectInput\n    label=\"Select City\"\n+   defaultValue=\"mumbai\"\n  />\n  <DropdownOverlay>\n    <ActionListItem\n      title=\"Mumbai\"\n      value=\"mumbai\"\n-     isDefaultSelected\n     />\n    <ActionListItem title=\"Bangalore\" value=\"bangalore\" />\n  </DropdownOverlay>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Defining the makeTypographySize Type Signature in TypeScript\nDESCRIPTION: The type signature for the makeTypographySize utility function that converts numeric font sizes to platform-specific string values.\n\nLANGUAGE: tsx\nCODE:\n```\nconst makeTypographySize = (size: number) => string;\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Properties with Explicit Mode and Platform Specifications\nDESCRIPTION: Example showing the explicit access of theme properties with hardcoded mode (onLight) and platform (desktop) specifications, highlighting the problem with the old approach.\n\nLANGUAGE: jsx\nCODE:\n```\nconst { theme } = useTheme();\n\nbackground-color: ${theme.colors.surface.background.level2.lowContrast.onLight};\nfont-size: ${theme.typography.desktop.fonts.size[200]}px;\n```\n\n----------------------------------------\n\nTITLE: BottomSheet Footer with Custom Box Layout\nDESCRIPTION: An implementation showing BottomSheet Footer with a custom Box layout for organizing elements like Checkbox and Button.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheetFooter layoutDirection=\"vertical | horizontal\">\n  <Box display=\"flex\">\n    <Checkbox label=\"Remember login\" />\n    <Button>Login</Button>\n  </Box>\n</BottomSheetFooter>\n```\n\n----------------------------------------\n\nTITLE: Replacing onDismiss prop with onOpenChange in Dropdown Component\nDESCRIPTION: Examples showing how to migrate from the deprecated 'onDismiss' prop to the new 'onOpenChange' prop in the Dropdown component, handling both inline and function reference cases.\n\nLANGUAGE: diff\nCODE:\n```\n- <Dropdown onDismiss={() => console.log(\"Dismissed!!!);}> Hello </Dropdown>\n+ <Dropdown\n+   onOpenChange={(isOpen) => {\n+     if (!isOpen) {\n+       console.log(\"Dismissed!!!\");\n+     }\n+   }}\n+ >\n\n- <Dropdown onDismiss={handleDropdownDismiss}> Hello </Dropdown>\n+ <Dropdown\n+   onOpenChange={(isOpen) => {\n+     if (!isOpen) {\n+       handleDropdownDismiss();\n+     }\n+   }}\n+ >\n```\n\n----------------------------------------\n\nTITLE: Implementing EntityItemRow Component in React/Redux\nDESCRIPTION: A connected React component for rendering table rows with active state highlighting. It handles row clicks and passes data back through a callback function, with support for custom styling based on row state.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass EntityItemRow extends Component {\n  render() {\n    const {\n      id,\n      luminateRowId,\n      activeEntityId,\n      activeSecEntityId,\n      rowClasses = '',\n      onRowClick,\n      item,\n      isDisabled,\n    } = this.props;\n    const receiverType = item?.receiver_type || '';\n    const sourceChannel = item?.source_channel || '';\n    return (\n      <tr\n        onClick={() => {\n          onRowClick?.({\n            id,\n            rowData: { receiverType, sourceChannel },\n          });\n        }}\n        className={`${luminateRowId === id ? 'luminate' : ''}${\n          activeEntityId === id || activeSecEntityId === id ? ' active' : ''\n        }${rowClasses ?? ''}${isDisabled?.(item) ? ' disabled' : ''}`}\n        data-testid={`entity-item-row-${id}`}\n      >\n        {this.props.children}\n      </tr>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return state.app;\n};\n\nexport default connect(mapStateToProps, null)(EntityItemRow);\n```\n\n----------------------------------------\n\nTITLE: Handling SelectInput onChange Migration\nDESCRIPTION: Example demonstrating how to migrate code using SelectInput's onChange handler, which no longer fires on initial render. Initial values should now be set in useState's initializer.\n\nLANGUAGE: tsx\nCODE:\n```\nconst Example = (): JSX.Element => {\n  const [cities, setCities] = React.useState();\n  return (\n    <>\n      <Dropdown>\n        <SelectInput label=\"Cities\" onChange={({values}) => setCities(values) } />\n        <DropdownOverlay>\n          <ActionListItem title=\"Mumbai\" value=\"mumbai\" />\n          <ActionListItem title=\"Pune\" value=\"pune\" />\n        </DropdownOverlay>\n      </Dropdown>\n      <Text>{cities}</Text>\n      {/*\n        In earlier versions, value of `cities` would've been `['']`\n        (because onChange would've been called initially to set array with empty string value)\n\n        Now it will output undefined (anything you pass in your useState) as the onChange wouldn't be called on initial render\n      */}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Locale-Based Amount Formatting with I18nProvider\nDESCRIPTION: Example of how to use the @razorpay/i18nify-react package to control locale settings for the Amount component in Blade v11. The example shows how to create a toggle for changing the locale dynamically.\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport { I18nProvider, useI18nContext } from '@razorpay/i18nify-react';\nimport { BladeProvider, Amount } from '@razorpay/blade/components';\n\nconst ToggleAmount = ({ value }) => {\n  const { setI18nState } = useI18nContext();\n\n  function onLocaleChange() {\n    setI18nState({ locale: 'de-DE' });\n  }\n\n  return (\n    <>\n      <Amount value={value} />\n      <button onClick={onLocaleChange}>change locale to German</button>\n    </>\n  );\n};\n\nconst App = () => {\n  return (\n    <I18nProvider initData={{ locale: 'en-IN' }}>\n      <BladeProvider>\n        <ToggleAmount value={2000000} />\n      </BladeProvider>\n    </I18nProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Theme Tokens with Styled Components in React\nDESCRIPTION: Demonstration of using theme tokens with styled-components and the useTheme hook. This shows how tokens were explicitly accessed with mode designations (onLight/onDark) before the breaking change.\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledCard = styled.div(\n  ({ theme }: { theme: Theme }) => `\n  width: 368px;\n  background-color: ${theme.colors.surface.background.level2.lowContrast.onLight};\n  border-radius: ${theme.border.radius.medium}px;\n  box-shadow: ${theme.shadows.offsetX.level[1]}px ${theme.shadows.offsetY.level[1]}px ${theme.shadows.blurRadius.level[1]}px ${theme.shadows.color.level[1].onLight}, ${theme.shadows.offsetX.level[1]}px ${theme.shadows.offsetY.level[1]}px ${theme.shadows.blurRadius.level[1]}px ${theme.shadows.color.level[1].onLight};\n  padding: ${theme.spacing[5]}px;\n  display: flex;\n  flex-direction: column;\n`,\n);\n\nconst Card = (): React.ReactElement => {\n  const { theme } = useTheme();\n  return (\n    <React.Fragment>\n      <DisplayLarge theme={theme}>Cash Advance </DisplayLarge>\n      <StyledCard theme={theme}>\n        <AlertInformation theme={theme}>\n          The interest charged will be deposited back into your bank account within a day of\n          repayment.\n        </AlertInformation>\n        <Divider theme={theme} />\n        <CaptionRegular theme={theme}>\n          This amount will be deducted in 3 installments from your settlement balance between Feb\n          18-20 on a daily basis.\n        </CaptionRegular>\n      </StyledCard>\n    </React.Fragment>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: SideNavLink with Badge in titleSuffix in JSX\nDESCRIPTION: Example showing how to add a badge to a SideNavLink using the titleSuffix prop. This implementation displays a 'New' badge with positive coloring next to the navigation item title.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNavLink\n  as={NavLink}\n  icon={LayoutIcon}\n  title=\"L1 Item Name\"\n  href=\"/new-item-link\"\n  titleSuffix={\n    <Badge color=\"positive\">New</Badge>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Simplified Card Header Icon Implementation in React\nDESCRIPTION: Example showing how to implement a Card Header with an icon using the CardHeaderIcon component instead of directly passing an icon with specific props. This approach simplifies usage and prevents errors by handling styling internally.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardHeader, CardHeaderIcon } from \"@razorpay/blade/components\";\n\n<CardHeader prefix={<CardHeaderIcon icon={InfoIcon} />}>\n```\n\n----------------------------------------\n\nTITLE: Typography Component Breaking Changes in Blade\nDESCRIPTION: Breaking change to make 'size' prop consistent across Typography components (Heading, Title, and Text) with migration instructions.\n\nLANGUAGE: markdown\nCODE:\n```\n- 3aebc58: feat(Typography): make `size` prop consistent for `Heading`, `Title`, and `Text`\n\n  > **Warning**\n  >\n  > Breaking Change!\n  > This is a breaking change for apps that are using `Title` or `Heading` component from blade. Rest of the apps can upgrade without any migrations.\n\n  #### Migration\n\n  _**Tip:** If you're using TypeScript, run `yarn tsc` and that should throw errors wherever a change is required._\n\n  1. **`<Title />`:** Rename `variant` prop to `size` in Title\n\n  ```diff\n  - <Title variant=\"small\">Some Title</Title>\n  + <Title size=\"small\">Some Title</Title>\n  ```\n\n  2. **`<Heading />`:** Rename `variant` prop to `size` if the value is `small`, `medium,` or `large`. No change is required on `variant=\"subheading\"`.\n\n  ```diff\n  <Heading variant=\"subheading\">Nothing changes here</Heading> // No change here\n\n  - <Heading variant=\"medium\">Medium Heading</Heading>\n  + <Heading size=\"medium\">Medium Heading</Heading>\n  ```\n\n  ##### Edge Cases\n\n  Make sure to follow migration on new component if `Title` or `Heading` from blade is overriden with styled-components.\n\n  ```diff\n  const MyTitle = styled(Title)`\n    // some styles\n  `\n\n  - <MyTitle variant=\"large\" />\n  + <MyTitle size=\"large\" />\n  ```\n```\n\n----------------------------------------\n\nTITLE: Implementing Restrictive Component Structure with Internal Button Handling in JSX\nDESCRIPTION: API 2 design approach (chosen as final API) for BaseHeader component. This approach handles button rendering internally, making it more restrictive and resilient but introduces more props.\n\nLANGUAGE: jsx\nCODE:\n```\n<BaseHeader>\n  <BaseHeaderLeading\n    title=\"\"\n    subtitle=\"\"\n    prefix={}\n    suffix={}\n    showBackButton={boolean}\n    onBackButtonClick={}\n    showCloseButton={}\n    showDivider={}\n  />\n  <BaseHeaderTrailing showCloseButton={boolean} onCloseButtonClick={}>\n    Badge | IconButton | Link\n  </BottomSheetHeaderTrailing>\n</BaseHeader>\n```\n\n----------------------------------------\n\nTITLE: Replacing variant prop with color prop in Counter Component\nDESCRIPTION: Shows how to update Counter components from using the 'variant' prop to the 'color' prop, with mapping between old and new values.\n\nLANGUAGE: diff\nCODE:\n```\n- <Counter variant=\"blue\"> Hello </Counter>\n+ <Counter color=\"primary\"> Hello </Counter>\n\n- <Counter variant=\"positive|negative|information|notice|neutral\"> Hello </Counter>\n+ <Counter color=\"positive|negative|information|notice|neutral\"> Hello </Counter>\n```\n\n----------------------------------------\n\nTITLE: Updating size prop values in Heading Component\nDESCRIPTION: Examples of how to migrate to the new size scale in the Heading component, with some sizes now mapping to the Text component instead.\n\nLANGUAGE: diff\nCODE:\n```\n- <Heading size=\"large\"> Hello </Heading>\n+ <Heading size=\"medium\"> Hello </Heading>\n\n- <Heading size=\"medium\"> Hello </Heading>\n+ <Heading size=\"small\"> Hello </Heading>\n\n- <Heading size=\"small\"> Hello </Heading>\n+ <Text size=\"large\"> Hello </Text>\n```\n\n----------------------------------------\n\nTITLE: Using SideNavFooter with Toggle Controls and Navigation Links\nDESCRIPTION: Example of implementing a SideNavFooter component within a SideNav container. Shows how to add toggle controls using Switch components and navigation links with icons. The footer can contain interactive elements like test mode toggles and settings links.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNav>\n  {/* ... Other Items */}\n  <SideNavFooter>\n    <SideNavItem\n      as=\"label\"\n      title=\"Test Mode\"\n      leading={\n        <Indicator\n          color={\n            isTestModeActive \n            ? 'notice' \n            : 'positive'\n          }\n          emphasis=\"intense\"\n          accessibilityLabel=\"\"\n        />\n      }\n      backgroundColor={\n        isTestModeActive \n        ? `feedback.background.notice.subtle` \n        : undefined\n      }\n      trailing={\n        <Switch\n          accessibilityLabel=\"\"\n          size=\"small\"\n          isChecked={isTestModeActive}\n          onChange={({ isChecked }) => {\n            setIsTestModeActive(isChecked);\n          }}\n        />\n      }\n    />\n    <SideNavLink \n      as={NavLink}\n      icon={GearIcon}\n      href=\"/settings\" \n      title=\"Settings\" \n    >\n      {/* L2 SideNavLink items */}\n    </SideNavLink>\n  </SideNavFooter>\n</SideNav>\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Component Size Property in React\nDESCRIPTION: Example of Link component usage with the new size prop and its visual representation. The code shows how to use the small size variant for Links.\n\nLANGUAGE: jsx\nCODE:\n```\n<img width=\"379\" alt=\"image\" src=\"https://user-images.githubusercontent.com/6682655/196698626-e73dcc07-3d35-49e1-8ead-95c5826f3c41.png\">\n```\n\n----------------------------------------\n\nTITLE: PasswordField to PasswordInput Rename in Blade\nDESCRIPTION: Breaking change that renames PasswordField component to PasswordInput with migration instructions.\n\nLANGUAGE: markdown\nCODE:\n```\n- e16c154: feat(PasswordInput)!: rename from `PasswordField` to `PasswordInput`\n\n  #### Migration\n\n  > **Warning**\n  >\n  > Breaking change!\n\n  Rename occurences of `PasswordField` to `PasswordInput`, no changes in the API.\n\n  ```diff\n  - PasswordField\n  + PasswordInput\n  ```\n```\n\n----------------------------------------\n\nTITLE: TextInput Field Addition in Blade\nDESCRIPTION: Introduction of the TextInput Field component with support for various input types, max character limits, and clear functionality.\n\nLANGUAGE: markdown\nCODE:\n```\n- a6bf780: feat(TextInput): add TextInput Field\n\n  ### This release publishes **`TextField`** Input\n\n  #### [Figma Link](https://www.figma.com/file/jubmQL9Z8V7881ayUD95ps/Blade---Payment-Light?node-id=10953%3A210737)\n\n  #### Capabilities\n\n  - Support for various `type` of TextInput i.e `'text' | 'telephone' | 'email' | 'url' | 'numeric' | 'search'`\n  - Automatically decide `keyboardType`, `keyboardReturnKeyType`, `autoCompleteSuggestionType` based on `type` attribute alone\n\n  ![image](https://user-images.githubusercontent.com/11384858/188391913-d45e40b4-1b92-4fab-8bf8-8d49891929f8.png)\n\n  - Max characters to be accepted by the input field which will in turn also render a counter\n    ![image](https://user-images.githubusercontent.com/11384858/188390436-2854807d-5fb0-42de-8171-3ba61be4b9f6.png)\n\n  - Clear the content of the input field with the help of a clear button\n    ![image](https://user-images.githubusercontent.com/11384858/188391183-8e262200-7424-4a80-a5fe-1c7166be26ce.png)\n\n  - Attach `prefix` and `suffix` to the input field\n  - Fully Accessible\n```\n\n----------------------------------------\n\nTITLE: Changing weight prop from bold to semibold in Typography Components\nDESCRIPTION: Examples showing how to update the 'weight' prop from 'bold' to 'semibold' in Text, Heading, and Display components, noting that Code component still uses 'bold'.\n\nLANGUAGE: diff\nCODE:\n```\n- <Text weight=\"bold\"> Hello </Text>\n+ <Text weight=\"semibold\"> Hello </Text>\n\n- <Heading weight=\"bold\"> Hello </Heading>\n+ <Heading weight=\"semibold\"> Hello </Heading>\n\n- <Display weight=\"bold\"> Hello </Display>\n+ <Display weight=\"semibold\"> Hello </Display>\n```\n\n----------------------------------------\n\nTITLE: Migrating from Counter's 'intent' Prop to 'variant'\nDESCRIPTION: Example showing how to migrate from the deprecated 'intent' prop to the new 'variant' prop in the Counter component, which was changed to better support more color options including the new blue variant.\n\nLANGUAGE: diff\nCODE:\n```\n <Counter\n-  intent='positive'\n+  variant='positive'\n   value={42}\n />\n```\n\n----------------------------------------\n\nTITLE: Migration for Alert Component Intent Prop\nDESCRIPTION: Shows how to update Alert component usage after the default intent was changed from 'information' to 'neutral'. This ensures backward compatibility by explicitly setting the intent to 'information'.\n\nLANGUAGE: diff\nCODE:\n```\n<Alert\n+ intent=\"information\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Casting Platform-Specific Types in TypeScript\nDESCRIPTION: Shows two approaches for casting to platform-specific types: using Platform.Cast* type utilities or castWebType/castNativeType functions. This is particularly useful when working with styled-components or other scenarios where type casting is needed for platform-specific implementations.\n\nLANGUAGE: ts\nCODE:\n```\nimport {Platform, castWebType, castNativeType} from '~utils';\n\n// blade internal component type: \ntype ButtonProps = {\n  onClick?: Platform.Select<{\n    native: (event: GestureResponderEvent) => void;\n    web: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  }>;\n}\n\n// Option 1: with `Platform.Cast` utilities\n// web.ts\n<Button onClick={onClick as Platform.CastWeb<typeof onClick>} />\n//               ^ (event: React.MouseEvent<HTMLButtonElement>) => void\n\n// native.ts\n<Button onClick={onClick as Platform.CastNative<typeof onClick>} />\n//               ^ (event: GestureResponderEvent) => void\n\n\n// Option 2: with `castType` utilities\n// web.ts\n<Button onClick={castWebType(onClick)} />\n//               ^ (event: React.MouseEvent<HTMLButtonElement>) => void\n\n// native.ts\n<Button onClick={castNativeType(onClick)} />\n//               ^ (event: GestureResponderEvent) => void\n```\n\n----------------------------------------\n\nTITLE: Replacing intent prop with color prop in Chip and ChipGroup Components\nDESCRIPTION: Shows how to update Chip and ChipGroup components from using the 'intent' prop to the 'color' prop, with mapping between old and new values.\n\nLANGUAGE: diff\nCODE:\n```\n- <Chip intent=\"none\"> Hello </Chip>\n+ <Chip color=\"primary\"> Hello </Chip>\n\n- <Chip intent=\"positive|negative\"> Hello </Chip>\n+ <Chip color=\"positive|negative\"> Hello </Chip>\n\n- <ChipGroup intent=\"none\">\n+ <ChipGroup color=\"primary\">\n\n- <ChipGroup intent=\"positive|negative\">\n+ <ChipGroup color=\"positive|negative\">\n```\n\n----------------------------------------\n\nTITLE: Replacing surfaceLevel prop with backgroundColor in Card Component\nDESCRIPTION: Examples showing how to migrate from the deprecated 'surfaceLevel' prop to the new 'backgroundColor' prop in the Card component, using appropriate color tokens.\n\nLANGUAGE: diff\nCODE:\n```\n- <Card surfaceLevel={2}> Hello </Card>\n+ <Card backgroundColor=\"surface.background.gray.moderate\"> Hello </Card>\n\n- <Card surfaceLevel={3}> Hello </Card>\n+ <Card backgroundColor=\"surface.background.gray.intense\"> Hello </Card>\n```\n\n----------------------------------------\n\nTITLE: Icon Size Breaking Change in Blade\nDESCRIPTION: Modification of icon size mappings for the Icon component, affecting IconButton, Button, Link, and Spinner components.\n\nLANGUAGE: markdown\nCODE:\n```\n- 65834be: fix: icon sizes for `Icon`, `IconButton`, `Button`, `Link` & `Spinner` components\n\n  ## ⚠️ Breaking changes for `Icon`\n\n  **❗️This version introduces a breaking change for the `Icon` component's `size` prop**\n\n  Earlier, the `size` prop had the following size to pixel mapping:\n\n  - **xxsmall:** 10px\n  - **xsmall**: 12px\n  - **small**: 16px\n  - **medium**: 20px\n  - **large**: 24px\n  - **xlarge**: 32px\n\n  Now, the correct `size` prop will have the following size to pixel mapping:\n\n  - **xsmall**: 8px\n  - **small**: 12px\n  - **medium**: 16px\n  - **large**: 20px\n  - **xlarge**: 24px\n  - **2xlarge**: 32px\n\n  > ⚠️ `xxsmall` is not an accepted value anymore. Instead, we have a new acceptable value of `2xlarge`.\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Transformation in Chip Labels with React\nDESCRIPTION: Example demonstrating how to transform text displayed in chips, specifically showing uppercase transformation. This dynamically generates chips from an array and transforms the displayed text while maintaining the original values.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TextTransform() {\n  const values = ['proprietorship', 'public', 'small business];\n\n  return (\n    <Box>\n      <Text> Select Business type: </Text>\n      <ChipGroup\n        selectionType=\"single\"\n        accessibilityLabel=\"select business type\"\n        value={selected}\n        onChange={({ values }) => setSelected(values[0])}\n      >\n        {values.map(value => (\n          <Chip value={value}>{value.toUpperCase()}</Chip>\n        ))}\n      </ChipGroup>\n    </Box>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Indicator Component with Text Label\nDESCRIPTION: Example of how to use the Indicator component with a text label, setting the intent to 'positive' and providing an accessibility label for screen readers.\n\nLANGUAGE: jsx\nCODE:\n```\n<Indicator intent=\"positive\" accessibilityLabel=\"Active for xyz@email.com\">\n  Active | xyz@email.com\n</Indicator>\n```\n\n----------------------------------------\n\nTITLE: Migration for Alert Component isFullWidth Prop\nDESCRIPTION: Demonstrates how to update Alert component usage by replacing the removed isBorderless prop with isFullWidth. This change aligns with updated designs and centers alerts on desktop resolutions.\n\nLANGUAGE: diff\nCODE:\n```\n<Alert\n- isBorderless\n+ isFullWidth\n/>\n```\n\n----------------------------------------\n\nTITLE: Removing contrast prop from ProgressBar Component\nDESCRIPTION: Shows how to handle the removal of the 'contrast' prop from the ProgressBar component without replacement.\n\nLANGUAGE: diff\nCODE:\n```\n- <ProgressBar contrast=\"low|high\" value={20} />\n+ <ProgressBar value={20} />\n```\n\n----------------------------------------\n\nTITLE: Initializing ThemeProvider with Payment Theme in React\nDESCRIPTION: Example of setting up the ThemeProvider with a payment theme in the application entry point. This represents the old way of providing theme tokens before the breaking change.\n\nLANGUAGE: jsx\nCODE:\n```\n// App entry point\nimport { ThemeProvider } from '@razorpay/blade/components';\nimport { paymentTheme } from '@razorpay/blade/tokens';\n\nfunction App(): JSX.Element {\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n      <ThemeProvider theme={paymentTheme}>\n        <Card />\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Alternative DatePicker API Approach (Dropdown-like)\nDESCRIPTION: An alternative API design for DatePicker that follows a Dropdown-like pattern with overlay component.\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  isOpen={isOpen}\n  onOpenChange={setIsOpen}\n  {...calendarProps}\n>\n  <Button>Open DatePicker</Button> or <DatePickerInput />\n  <DatePickerOverlay>\n    <Calendar />\n    <SomeOtherComponent />\n  </DatePickerOverlay>\n</DatePicker>\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach to Tags in TextInput\nDESCRIPTION: An alternative API design for integrating tags within a TextInput component by extending the value prop to accept JSX. This approach allows embedding Tag components directly within the value.\n\nLANGUAGE: jsx\nCODE:\n```\n<TextInput\n  value={\n    <>\n      <Tag onDismiss={}>kamlesh.chandnani@razorpay.com</Tag>\n      <Tag onDismiss={}>divyanshu.maithani@razopay.com</Tag>\n      saurabhdaw\n    </>\n  }\n  onChange={}\n/>\n```\n\n----------------------------------------\n\nTITLE: Replacing default color with primary in Button and Link Components\nDESCRIPTION: Examples showing how to update Button and Link components from using 'color=\"default\"' to the new 'color=\"primary\"' value.\n\nLANGUAGE: diff\nCODE:\n```\n- <Button color=\"default\"> Hello </Button>\n+ <Button color=\"primary\"> Hello </Button>\n\n- <Link color=\"default\" href=\"https://razorpay.com/\"> Hello </Link>\n+ <Link color=\"primary\" href=\"https://razorpay.com/\"> Hello </Link>\n```\n\n----------------------------------------\n\nTITLE: Replacing intent prop with color prop in ProgressBar Component\nDESCRIPTION: Shows how to update ProgressBar components from using the 'intent' prop to the 'color' prop, with status values mapping directly.\n\nLANGUAGE: diff\nCODE:\n```\n- <ProgressBar intent=\"positive|negative|information|notice|neutral\" value={20} />\n+ <ProgressBar color=\"positive|negative|information|notice|neutral\" value={20} />\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Example in JSX\nDESCRIPTION: Shows a simple implementation of the Menu component with a button trigger and basic content including custom slots and MenuItem components.\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu>\n  <Button>Edit</Button> {/* Can be Link, Avatar, or any custom interactive item */}\n  <MenuOverlay>\n    {/* Supports any JSX */}\n    <Box>Slot</Box>\n    <Divider />\n    <Box overflowY=\"auto\">\n      <MenuItem title=\"Profile\" />\n      <MenuItem>\n        <Text>Custom Slot in Item</Text>\n      </MenuItem>\n    </Box>\n  </MenuOverlay>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Variables in React Button Component\nDESCRIPTION: Demonstrates how to use dynamic variables inside Button component children without wrapping in string literals. This allows for more flexibility when combining dynamic content with static text.\n\nLANGUAGE: jsx\nCODE:\n```\n<Button onClick={}>{someVariable} hello</Button>\n```\n\n----------------------------------------\n\nTITLE: Removing Platform Keywords Migration Step\nDESCRIPTION: Migration step showing how to remove platform-specific keywords (desktop/mobile) from theme access.\n\nLANGUAGE: diff\nCODE:\n```\n-background-color: ${theme.colors.surface.background.level2.lowContrast.onLight};\n+background-color: ${theme.colors.surface.background.level2.lowContrast};\n```\n\n----------------------------------------\n\nTITLE: Using Platform.Select for Cross-Platform Type Definitions in TypeScript\nDESCRIPTION: Demonstrates how to use the Platform.Select utility to provide platform-specific type definitions for event handlers in a Button component. This allows the onClick prop to have the correct type (GestureResponderEvent for native, MouseEvent for web) depending on the platform.\n\nLANGUAGE: tsx\nCODE:\n```\n// blade internal\ntype ButtonProps = {\n  onClick?: Platform.Select<{\n    native: (event: GestureResponderEvent) => void;\n    web: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  }>;\n}\nconst Button = (props: ButtonProps) => <></>\n\n// consumer end: \n// on native `event` is GestureResponderEvent\n<Button onClick={event => {}} />\n\n// consumer end: \n// on web `event` is MouseEvent\n<Button onClick={event => {}} />\n```\n\n----------------------------------------\n\nTITLE: Removing contrast prop from Skeleton Component\nDESCRIPTION: Shows how to handle the removal of the 'contrast' prop from the Skeleton component without replacement.\n\nLANGUAGE: diff\nCODE:\n```\n- <Skeleton contrast=\"low|high\" />\n+ <Skeleton />\n```\n\n----------------------------------------\n\nTITLE: Using the Amount Component\nDESCRIPTION: Example showing how to use the newly added Amount component to display currency values.\n\nLANGUAGE: tsx\nCODE:\n```\n<Amount value={10000} />\n```\n\n----------------------------------------\n\nTITLE: Using useTheme Hook in a React Component\nDESCRIPTION: Demonstrates how to use the useTheme hook in a React component to access theme context and toggle between light and dark color schemes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { useTheme, Heading, Text, Button } from '@razorpay/blade/components';\n\nconst MyComponent = () => {\n  const { theme, colorScheme, platform, setColorScheme } = useTheme();\n\n  return (\n    <>\n      <Heading>Hello, world!</Heading>\n      <Text>The current color scheme is: {colorScheme}</Text>\n      <Text>The current platform is: {platform}</Text>\n      <Button onClick={() => setColorScheme(colorScheme === 'light' ? 'dark' : 'light')}>\n        Toggle color scheme\n      </Button>\n    </>\n  );\n};\n\nexport default MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Replacing contrast prop with emphasis prop in Badge Component\nDESCRIPTION: Examples showing how to migrate from the removed 'contrast' prop to the new 'emphasis' prop in the Badge component.\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge contrast=\"low\"> Hello </Badge>\n+ <Badge emphasis=\"subtle\"> Hello </Badge>\n\n- <Badge contrast=\"high\"> Hello </Badge>\n+ <Badge emphasis=\"intense\"> Hello </Badge>\n```\n\n----------------------------------------\n\nTITLE: Replacing default color with primary in Spinner Component\nDESCRIPTION: Shows how to update Spinner components from using 'color=\"default\"' to the new 'color=\"primary\"' value.\n\nLANGUAGE: diff\nCODE:\n```\n- <Spinner color=\"default\" />\n+ <Spinner color=\"primary\" />\n```\n\n----------------------------------------\n\nTITLE: React Component Usage Example with Virtualized ActionList\nDESCRIPTION: Shows how to implement the ActionList component with virtualization enabled through the isVirtualized prop.\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionList isVirtualized></ActionList>\n```\n\n----------------------------------------\n\nTITLE: DatePicker Selection Type Example\nDESCRIPTION: Example showing how to configure the DatePicker component with different selection types (single or range).\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n  selectionType={\"single\" | \"range\"}\n/>\n```\n\n----------------------------------------\n\nTITLE: Mocking ResizeObserver in Jest for Blade UI Components\nDESCRIPTION: This code snippet shows how to mock the ResizeObserver API in Jest when testing Blade UI components. It creates a mock implementation with empty functions for observe, unobserve, and disconnect methods.\n\nLANGUAGE: javascript\nCODE:\n```\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n            observe: jest.fn(),\n            unobserve: jest.fn(),\n            disconnect: jest.fn(),\n            }));\n```\n\n----------------------------------------\n\nTITLE: Using Button with href in JSX\nDESCRIPTION: Example of using the Button component with href, target, and rel attributes which renders as an anchor tag instead of a button element.\n\nLANGUAGE: jsx\nCODE:\n```\n<Button href=\"https://youtu.be/iPaBUhIsslA\" target=\"_blank\" rel=\"noopener noreferrer\">\n  I am Link!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining the makeSize Utility Function Signature in TypeScript\nDESCRIPTION: Function signature for makeSize which takes a number parameter and returns a string with px units appended.\n\nLANGUAGE: tsx\nCODE:\n```\nconst makeSize = (size: number) => string;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shake Animation with React Native Reanimated v2\nDESCRIPTION: Example of creating a shake animation using React Native Reanimated (v2). This approach uses shared values and worklets that can run on the UI thread for better performance. The animation uses interpolation to create a shaking effect similar to the Animated API example.\n\nLANGUAGE: jsx\nCODE:\n```\nimport Animated, {\n  useAnimatedStyle,\n  withTiming,\n  useSharedValue,\n  interpolate,\n} from 'react-native-reanimated';\n\nfunction Example() {\n  const shakeAnimation = useSharedValue(0); // Create a shared value to hold the value of shakeAnimation\n\n  const shakeAnimationStyle = useAnimatedStyle(() => { // Define a worklet that is triggered whenever shakeAnimation changes\n    return {\n      transform: [\n        {\n          translateX: interpolate( // Interpolate the animated value in the range of 0 to 100 to create a shake effect\n            shakeAnimation.value,\n            [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], // Input range\n            [0, -50, 50, -50, 50, -50, 50, -50, 50, -50, 0], // Output range\n          ),\n        },\n      ],\n    };\n  });\n\n  return (\n    <View>\n      <Animated.View style={[styles.block, shakeAnimationStyle]} />\n      <Button text=\"Shake\" onPress={() => {\n        shakeAnimation.value = withTiming(100, { // Change the value of shakeAnimation to 100\n          duration: motionToken.duration.quick3, // Define the duration it takes to change the value of shakeAnimation to 100\n          easing: motionToken.easing.standard.effective, // Define the easing of the animation\n        });\n      }}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for makeBorderSize Utility in TypeScript\nDESCRIPTION: Defines the TypeScript function signature for makeBorderSize. It takes a numeric border size and returns a formatted string value with proper units.\n\nLANGUAGE: tsx\nCODE:\n```\nconst makeBorderSize = (size: number) => string;\n```\n\n----------------------------------------\n\nTITLE: Typography Migration Codemod Command\nDESCRIPTION: Command to run a codemod that automatically updates all instances of theme.typography.lineHeights to the new scale.\n\nLANGUAGE: sh\nCODE:\n```\nnpx jscodeshift ./YOUR_DIR --extensions=tsx,ts,jsx,js -t ./node_modules/@razorpay/blade/codemods/migrate-typography/transformers/migrate-typography.ts --ignore-pattern=\"**/node_modules/**\"\n```\n\n----------------------------------------\n\nTITLE: Removing fontWeight prop from Badge Component\nDESCRIPTION: Shows how to handle the removal of the 'fontWeight' prop from the Badge component without replacement.\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge fontWeight=\"regular|bold\"> Hello </Badge>\n+ <Badge> Hello </Badge>\n```\n\n----------------------------------------\n\nTITLE: Accessing Utilities from Blade Utils Module\nDESCRIPTION: Shows how to view the public utilities exported from Blade. This explains where to find the supported public utilities after some internal utilities were removed from re-exports.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from '@razorpay/blade/utils';\n```\n\n----------------------------------------\n\nTITLE: Alternative ChatMessage Component API Examples\nDESCRIPTION: Alternative API usage examples for the ChatMessage component, showcasing different ways to provide content including direct message strings, card bodies, and markdown.\n\nLANGUAGE: tsx\nCODE:\n```\n// for animation\n<Move>\n<ChatMessage message=\"Demo Text\"/>\n</Move>\n\n// with card\n<ChatMessage cardBody={<SomeComponent/>} />\n\n\n\n// Markdown\n<ChatMessage markdown=\"# this is markdown\" />\n\n// \n```\n\n----------------------------------------\n\nTITLE: Migrating Counter Component from Intent to Variant Property\nDESCRIPTION: Update guide for migrating from the deprecated 'intent' prop to the new 'variant' prop in the Counter component. This change supports more than just feedback colors with the addition of a blue variant.\n\nLANGUAGE: diff\nCODE:\n```\n <Counter\n-  intent='positive'\n+  variant='positive'\n   value={42}\n />\n```\n\n----------------------------------------\n\nTITLE: Client-Side Navigation Menu Example in JSX\nDESCRIPTION: Demonstrates using React Router's Link component for client-side navigation with MenuItem.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom';\n\n<MenuItem as={Link} href=\"/support\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shake Animation with React Native Animated API\nDESCRIPTION: Example of creating a shake animation using React Native's built-in Animated API. The animation uses interpolation to create a shaking effect by translating the view horizontally through multiple positions based on an animated value that changes over time.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Animated } from 'react-native';\n\nfunction Example() {\n  const shakeAnimation = React.useRef(new Animated.Value(0)).current; // Create a ref to hold Animated.Value\n\n  return (\n    <View>\n      <Animated.View\n        style={[styles.block, \n          {\n            transform: [\n              {\n                translateX: shakeAnimation.interpolate({ // Interpolate the animated value in the range of 0 to 100 to create a shake effect\n                  inputRange: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n                  outputRange: [0, -50, 50, -50, 50, -50, 50, -50, 50, -50, 0]\n                }),\n              },\n            ],\n          },\n        ]}\n      />\n      <Button text=\"Shake\" onPress={()=>\n        Animated.timing(shakeAnimation, { // Change the value of shakeAnimation to 100\n          toValue: 100,\n          useNativeDriver: true,\n          duration: motionToken.duration.quick3, // Define the duration it takes to change the value of shakeAnimation to 100\n          easing: motionToken.easing.standard.effective, // Define the easing of the animation\n        }).start()}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from isDefaultSelected to defaultValue in SelectInput\nDESCRIPTION: Example showing how to migrate from using isDefaultSelected on ActionListItem to using defaultValue on SelectInput for default selections in a Dropdown component.\n\nLANGUAGE: diff\nCODE:\n```\n<Dropdown>\n  <SelectInput\n    label=\"Select City\"\n+   defaultValue=\"mumbai\"\n  />\n  <DropdownOverlay>\n    <ActionListItem\n      title=\"Mumbai\"\n      value=\"mumbai\"\n-     isDefaultSelected\n     />\n    <ActionListItem title=\"Bangalore\" value=\"bangalore\" />\n  </DropdownOverlay>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: ActionList Virtualization Note\nDESCRIPTION: Information about the current limitations of the virtualization feature in ActionList component, noting it only supports fixed height lists without descriptions.\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n>\n> Current version only supports virtulization of fixed height list where items do not have descriptions. We'll be adding support for dynamic height lists in future versions\n```\n\n----------------------------------------\n\nTITLE: Migrating Title Component from variant to size prop in React\nDESCRIPTION: Migration guide for updating the Title component from using variant prop to size prop. This code diff shows the breaking change implementation.\n\nLANGUAGE: jsx\nCODE:\n```\n- <Title variant=\"small\">Some Title</Title>\n+ <Title size=\"small\">Some Title</Title>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Setting Up Component Status Page\nDESCRIPTION: This code imports necessary components from Storybook and a custom ComponentStatusTable component. It sets up a documentation page with a title and renders the ComponentStatusTable within an Unstyled container.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { Unstyled } from '@storybook/blocks';\nimport { ComponentStatusTable } from '../../src/utils/storybook/ComponentStatusTable';\n\n<Meta title=\"Guides/Component Status\" />\n\n# ⚙️ Component Status\n\n<br />\n<br />\n\n<Unstyled>\n  <ComponentStatusTable />\n</Unstyled>\n```\n\n----------------------------------------\n\nTITLE: Removing variant prop from Heading Component\nDESCRIPTION: Shows how to update code after the removal of the 'variant' prop from the Heading component, mapping subheading variant to the Text component.\n\nLANGUAGE: diff\nCODE:\n```\n- <Heading variant=\"regular\"> Hello </Heading>\n+ <Heading> Hello </Heading>\n\n- <Heading variant=\"subheading\"> Hello </Heading>\n+ <Text size=\"small\"> Hello </Text>\n```\n\n----------------------------------------\n\nTITLE: BottomSheet Footer API Changes\nDESCRIPTION: Example showing how the Footer component API has changed to accept JSX content directly instead of using a configuration object.\n\nLANGUAGE: jsx\nCODE:\n```\n// Before:\n<BottomSheetFooter\n  trailing={{\n    primary: {\n      text: 'Hello',\n      onClick: () => {},\n    },\n    secondary: {\n      text: 'World',\n      onClick: () => {},\n    },\n  }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// After:\n<BottomSheetFooter>\n  <Button isFullWidth variant=\"secondary\" onClick={() => {}}>\n    Hello\n  </Button>\n  <Button isFullWidth marginTop=\"spacing.5\" onClick={() => {}}>\n    World\n  </Button>\n</BottomSheetFooter>\n```\n\n----------------------------------------\n\nTITLE: Defining Easing Tokens with Easing.bezier for React Native\nDESCRIPTION: JavaScript object defining easing tokens for React Native animations using Easing.bezier() functions. This implementation is compatible with React Native's Animated API or react-native-reanimated, providing the same standardized animation behaviors as in web.\n\nLANGUAGE: js\nCODE:\n```\neasing: {\n  standard: {\n    effective: Easing.bezier(0.3, 0, 0.2, 1),\n    revealing: Easing.bezier(0.5, 0, 0, 1),\n    wary: Easing.bezier(1, 0.5, 0, 0.5),\n    attentive: Easing.bezier(0.5, 0, 0.3, 1.5),\n  },\n  entrance: {\n    effective: Easing.bezier(0, 0, 0.2, 1),\n    revealing: Easing.bezier(0, 0, 0, 1),\n    attentive: Easing.bezier(0.5, 0, 0.3, 1.5),\n  },\n  exit: {\n    effective: Easing.bezier(0.17, 0, 1, 1),\n    revealing: Easing.bezier(0.5, 0, 1, 1),\n    attentive: Easing.bezier(0.7, 0, 0.5, 1),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Running the AI Codemod Migration Command\nDESCRIPTION: Command to run the AI codemod tool for migrating code at a specified path. This example uses a preset knowledge base for table pattern migration in dashboard applications.\n\nLANGUAGE: sh\nCODE:\n```\naicodemod <path-to-migrate>\n  --code-knowledge presets/dashboard/table-pattern-1\n```\n\n----------------------------------------\n\nTITLE: FileUpload Component Behavior Timeline\nDESCRIPTION: Detailed timeline explaining the evolution of FileUpload component behavior across different versions, specifically related to the onChange and onRemove handlers.\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n>\n> Check the below timeline if you're upgrading from 11.34.1+ version to this version\n\n**Timeline of FileUpload changes**\n\n- In 11.34.1: We did not call onChange on removing of file. Only onRemove was called\n- In 11:36.2: We added dispatchEvent call which started calling onChange on onRemove (since React treats `input type=\"file\"` differently than `input type=\"text\"` - [CodeSandbox Link](https://codesandbox.io/p/sandbox/friendly-ishizaka-yk7mm3))\n- In 12.4.0: We released a fix thinking onChange call was expected behaviour and we just updated the state value for it\n- **This version:** Reverts back to 11.34.1 behaviour. If you're upgrading to this version from 11.34.1 or previous versions, the behaviour will stay same. If you're upgrading from 11.34.1+ and use FileUpload component, its recommended to test out FileUpload instances.\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript dependencies for styled-components in web projects\nDESCRIPTION: Installs the TypeScript type definitions for styled-components using Yarn, which is required for proper type support with Blade in web projects.\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @types/styled-components\n```\n\n----------------------------------------\n\nTITLE: Negative Amount Support Note\nDESCRIPTION: Information about the requirement to upgrade i18nify packages to support the new negative amount feature in the Amount component.\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n>\n> Consumers should upgrade to latest version of `@razorpay/i18nify-js` and `@razorpay/i18nify-react` for support of negative amount\n```\n\n----------------------------------------\n\nTITLE: Using AccessibilityInfo API in React Native for Dynamic Announcements\nDESCRIPTION: Implementation of dynamic content announcements in React Native using the AccessibilityInfo.announceForAccessibility API. This allows developers to programmatically notify screen reader users of changes that happen in the application.\n\nLANGUAGE: typescript\nCODE:\n```\nReact.useEffect(() => {\n  AccessibilityInfo.announceForAccessibility('Some content to be announced');\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Migration Guide for Alert Component's isBorderless Prop (React)\nDESCRIPTION: Diff showing how to update the Alert component by replacing the removed 'isBorderless' prop with 'isFullWidth'.\n\nLANGUAGE: diff\nCODE:\n```\n<Alert\n- isBorderless\n+ isFullWidth\n/>\n```\n\n----------------------------------------\n\nTITLE: Replacing type prop with color prop in Typography Components\nDESCRIPTION: Shows how to migrate from the deprecated 'type' prop to the new 'color' prop in Text, Heading, and Display components, using the appropriate color token values.\n\nLANGUAGE: diff\nCODE:\n```\n- <Text type=\"normal\"> Hello </Text>\n+ <Text color=\"surface.text.gray.normal\"> Hello </Text>\n\n- <Text type=\"subtle\"> Hello </Text>\n+ <Text color=\"surface.text.gray.subtle\"> Hello </Text>\n\n- <Text type=\"muted\"> Hello </Text>\n+ <Text color=\"surface.text.gray.muted\"> Hello </Text>\n\n- <Text type=\"subdued\"> Hello </Text>\n+ <Text color=\"surface.text.gray.muted\"> Hello </Text>\n\n- <Text type=\"placeholder\"> Hello </Text>\n+ <Text color=\"surface.text.gray.disabled\"> Hello </Text>\n```\n\n----------------------------------------\n\nTITLE: Top-Level Re-exports Example\nDESCRIPTION: Example of how to implement top-level re-exports in the package structure, useful for package maintainers.\n\nLANGUAGE: javascript\nCODE:\n```\n// example: top level re-exports \"packages/blade/index.ts\"\nexport * from 'src/components/Button'\nexport * from 'src/components/Text'\nexport * from 'src/tokens/theme'\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown & ActionList Structure in JSX\nDESCRIPTION: Top-level skeleton showing how to compose Dropdown and ActionList components together for item selection functionality.\n\nLANGUAGE: jsx\nCODE:\n```\n<Dropdown>\n  <SelectInput label=\"Item Selection\" />\n  <DropdownOverlay>\n    <ActionList>\n      <ActionListItem title=\"Item Value\" value=\"item-one\" />\n      <ActionListItem title=\"Item Value\" value=\"item-two\" />\n    </ActionList>\n  </DropdownOverlay>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Defining Delay Tokens for Motion in JavaScript\nDESCRIPTION: JavaScript object defining delay tokens in milliseconds for animations. These tokens represent standardized delay durations that can be used consistently across the design system.\n\nLANGUAGE: javascript\nCODE:\n```\ndelay: {\n  '2xshort': 70,\n  xshort: 120,\n  short: 180,\n  long: 3000,\n  xlong: 5000,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blade Components from Figma Specifications\nDESCRIPTION: Example of translating a Figma component (Export button) to Blade code implementation. Shows how to identify component properties from Figma and use the corresponding props in the code.\n\nLANGUAGE: jsx\nCODE:\n```\n// in your file where you want to implement this\nimport { Button, DownloadIcon } from '@razorpay/blade/components';\n\n<Button variant=\"secondary\" size=\"medium\" icon={DownloadIcon} iconPosition=\"left\">\n  Export\n</Button>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard-Only Focus Rings with CSS\nDESCRIPTION: Demonstrates the use of CSS :focus-visible pseudo-class to create focus indicators that only appear when navigating with a keyboard, not when clicking with a mouse. This approach is recommended over JavaScript solutions for simplicity and performance.\n\nLANGUAGE: CSS\nCODE:\n```\n:focus-visible\n```\n\n----------------------------------------\n\nTITLE: Import Pattern 2: Root Package Imports\nDESCRIPTION: Example of importing everything from the root package in a mono-package structure.\n\nLANGUAGE: javascript\nCODE:\n```\n/* mono-package */\nimport { Button, Text, overrideTheme, paymentTheme, getColorScheme, useColorScheme } from '@razorpay/blade'\n```\n\n----------------------------------------\n\nTITLE: Migrated Invoice List Using New Blade Component System\nDESCRIPTION: The refactored version of the invoice list component using the new Blade component system. It simplifies the implementation by using Table, TableHeader, TableRow, and other composable components while maintaining the same functionality.\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Table,\n  TableHeader,\n  TableHeaderRow,\n  TableHeaderCell,\n  TableBody,\n  TableRow,\n  TableCell,\n} from '@razorpay/blade/components';\n\nimport { amount, createdAt } from 'common/ui/item/pair';\n\nimport {\n  customer,\n  invoiceId,\n  invoiveStatus,\n  paymentLink,\n  paymentLinkId,\n  receiptNumber,\n  referenceId,\n} from 'merchant/views/Invoices/Invoices/item';\nimport { shareURL } from 'merchant/views/Invoices/Invoices/helpers';\n\nconst InvoiceListItem = (props) => {\n  const { invoice, columns } = props;\n\n  return (\n    <TableRow item={invoice}>\n      {columns.map(({ title, value }) => (\n        <TableCell key={title}>{value(invoice)}</TableCell>\n      ))}\n    </TableRow>\n  );\n};\n\nexport default (props) => {\n  const {\n    type,\n    invoices,\n    isLoading,\n    onCopy = () => {},\n    EmptyList,\n    isPaymentlinksV2Enabled,\n  } = props;\n\n  const isPaymentLinksType = type === 'link';\n  const label = isPaymentLinksType ? paymentLinkId : invoiceId;\n  const receipt = isPaymentlinksV2Enabled ? referenceId : receiptNumber;\n\n  const columns = [label, createdAt, amount, receipt, customer, paymentLink(onCopy), invoiveStatus];\n\n  return (\n    <Table data={{ nodes: invoices }} isLoading={isLoading}>\n      {(tableData) => (\n        <>\n          <TableHeader>\n            <TableHeaderRow>\n              {columns.map(({ title }) => (\n                <TableHeaderCell key={title}>{title}</TableHeaderCell>\n              ))}\n            </TableHeaderRow>\n          </TableHeader>\n          <TableBody>\n            {tableData.length <= 0 ? (\n              <EmptyList />\n            ) : (\n              tableData.map((invoice) => (\n                <InvoiceListItem key={invoice.id} invoice={invoice} columns={columns} />\n              ))\n            )}\n          </TableBody>\n        </>\n      )}\n    </Table>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: ColorSchemeNames Type Definition\nDESCRIPTION: Defines the possible values for the current color scheme of the application, which can be either 'dark' or 'light'.\n\nLANGUAGE: tsx\nCODE:\n```\ntype ColorSchemeNames = 'dark' | 'light';\n```\n\n----------------------------------------\n\nTITLE: Migration Guide for Alert Intent (React)\nDESCRIPTION: Diff showing how to explicitly set the 'intent' prop to 'information' after the default intent was changed to 'neutral'.\n\nLANGUAGE: diff\nCODE:\n```\n<Alert\n+ intent=\"information\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Replacing Alert intent Prop with color Prop\nDESCRIPTION: Code diff showing how to replace the deprecated intent prop with the new color prop in the Alert component.\n\nLANGUAGE: diff\nCODE:\n```\n- <Alert description=\"Hello World\" intent=\"positive|negative|information|notice|neutral\" />\n+ <Alert description=\"Hello World\" color=\"positive|negative|information|notice|neutral\" />\n```\n\n----------------------------------------\n\nTITLE: Import Pattern 3: Category-based Imports\nDESCRIPTION: Example of importing from specific categories within the root package, providing better organization.\n\nLANGUAGE: javascript\nCODE:\n```\n/* mono-package with per category import */\nimport { Button, Text } from '@razorpay/blade/components'\nimport { overrideTheme, paymentTheme } from '@razorpay/blade/theme'\nimport { getColorScheme, useColorScheme } from '@razorpay/blade/utils'\n```\n\n----------------------------------------\n\nTITLE: Defining Font Family Fallbacks in CSS\nDESCRIPTION: A CSS font-family declaration that defines Lato as the primary typeface with system fonts as fallbacks for various platforms.\n\nLANGUAGE: CSS\nCODE:\n```\n\"Lato\", -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif\n```\n\n----------------------------------------\n\nTITLE: Card Component with Leading/Trailing Structure (API 2)\nDESCRIPTION: An approach using Leading and Trailing components for Card headers to better match visual design patterns with a more structured layout.\n\nLANGUAGE: jsx\nCODE:\n```\n<Card.Header>\n  <Card.HeaderLeading>\n    <Clock />\n    <Card.HeaderTitle title=\"\" subtitle=\"\"  />\n    <Counter />\n  </Card.HeaderLeading>\n  <Card.HeaderTrailing>\n    <Badge />\n  </Card.HeaderTrailing>\n</Card.Header>\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Tokens for Motion in JavaScript\nDESCRIPTION: JavaScript object defining duration tokens in milliseconds for animations. These tokens categorize animations into quick, moderate, and gentle speeds for consistent timing across components.\n\nLANGUAGE: javascript\nCODE:\n```\nduration: {\n  quick1: 70,\n  quick2: 150,\n  quick3: 200,\n  moderate1: 250,\n  moderate2: 300,\n  gentle1: 400,\n  gentle2: 600,\n  gentle3: 900,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filled Variant Tabs Example\nDESCRIPTION: Example showing the filled variant of tabs with Week, Month, and Custom tab items, each with their corresponding panel content.\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs variant=\"filled\" defaultValue=\"refunds\">\n  <TabList>\n    <TabItem value=\"week\">Week</TabItem>\n    <TabItem value=\"month\">Month</TabItem>\n    <TabItem value=\"custom\">Custom</TabItem>\n  </TabList>\n\n  <TabPanel value=\"week\">\n    <WeekGraph />\n  </TabPanel>\n  <TabPanel value=\"month\">\n    <MonthGraph />\n  </TabPanel>\n  <TabPanel value=\"custom\">\n    <CustomGraph />\n  </TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Configuration for Declaration Files\nDESCRIPTION: TypeScript configuration for generating type declaration files. This config is specifically set up to only emit declaration files without transpiling the code, as Rollup with Babel handles the actual bundling.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"declaration\": true,\n    \"emitDeclarationOnly\": true,\n    \"noEmit\": false,\n    \"declarationDir\": \"build/types\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spatial Scale Token System Table\nDESCRIPTION: A markdown table defining the linear scale for spacing tokens, ranging from spacing-0 (0px) to spacing-10 (56px). This scale combines multiples of 4pt and 8pt to provide flexible spacing options.\n\nLANGUAGE: markdown\nCODE:\n```\n| Alias      | Value |\n|------------|-------|\n| spacing-0  | 0px   |\n| spacing-1  | 4px   |\n| spacing-2  | 8px   |\n| spacing-3  | 12px  |\n| spacing-4  | 16px  |\n| spacing-5  | 20px  |\n| spacing-6  | 24px  |\n| spacing-7  | 32px  |\n| spacing-8  | 40px  |\n| spacing-9  | 48px  |\n| spacing-10 | 56px  |\n```\n\n----------------------------------------\n\nTITLE: Migration Guide for Badge Default Size (React)\nDESCRIPTION: Diff showing how to update Badge components with no size specified to explicitly use 'large' size following a design change.\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge>...</Badge>\n+ <Badge size='large'>...</Badge>\n```\n\n----------------------------------------\n\nTITLE: Semantic Component Styling Example\nDESCRIPTION: Example of a Caption component styled using semantic tokens from the theme, showing the ideal structure that abstracts platform differences.\n\nLANGUAGE: jsx\nCODE:\n```\nconst Caption = styled.div`\n  font-size: theme.typography.caption.fonts.size\n  line-height: theme.typography.caption.lineheight\n  color: theme.colors.surface.text.subdued.lowContrast.onLight\n`\n```\n\n----------------------------------------\n\nTITLE: Updating Amount Component Size Props\nDESCRIPTION: Code diff showing how to migrate the Amount component size prop from the old format to the new type/size/weight system introduced in Blade v11.\n\nLANGUAGE: diff\nCODE:\n```\n- <Amount size=\"body-small\" value={123456.789} />\n+ <Amount value={123456.789} type=\"body\" size=\"small\" />\n\n- <Amount size=\"body-small-bold\" value={123456.789} />\n+ <Amount value={123456.789} type=\"body\" size=\"small\" weight=\"semibold\" />\n\n- <Amount size=\"body-medium\" value={123456.789} />\n+ <Amount value={123456.789} type=\"body\" size=\"medium\" />\n\n- <Amount size=\"body-medium-bold\" value={123456.789} />\n+ <Amount value={123456.789} type=\"body\" size=\"medium\" weight=\"semibold\" />\n\n- <Amount size=\"heading-small\" value={123456.789} />\n+ <Amount value={123456.789} type=\"body\" size=\"large\" />\n\n- <Amount size=\"heading-small-bold\" value={123456.789} />\n+ <Amount value={123456.789} type=\"body\" size=\"large\" weight=\"semibold\" />\n\n- <Amount size=\"heading-large\" value={123456.789} />\n+ <Amount value={123456.789} type=\"heading\" size=\"medium\" />\n\n- <Amount size=\"heading-large-bold\" value={123456.789} />\n+ <Amount value={123456.789} type=\"heading\" size=\"medium\" weight=\"semibold\" />\n\n- <Amount size=\"title-small\" value={123456.789} />\n+ <Amount value={123456.789} type=\"heading\" size=\"large\" />\n\n- <Amount size=\"title-medium\" value={123456.789} />\n+ <Amount value={123456.789} type=\"heading\" size=\"xlarge\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Styles with Relative Units in CSS\nDESCRIPTION: Example of button styling using relative (rem) units for typography and layout properties. These units scale relative to the root font size, supporting better accessibility.\n\nLANGUAGE: css\nCODE:\n```\nbutton {\n  font-size: 1rem;\n  line-height: 1.5;\n  padding: 0.5rem;\n  margin: 0.125rem;\n  min-height: 3rem;\n  width: 12.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SortChangeEvent Type for Table Sorting in TypeScript\nDESCRIPTION: Defines the SortChangeEvent type that represents the event triggered when table sorting changes. It contains the sort key and a boolean indicating if the sort is reversed.\n\nLANGUAGE: typescript\nCODE:\n```\ntype SortChangeEvent = {\n  sortKey: string;\n  isSortReversed: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Orientation Tabs Example\nDESCRIPTION: Example showing vertical orientation tabs with leading icons and trailing counters for different tab items.\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs orientation=\"vertical\">\n  <TabList>\n    <TabItem value=\"all-expenses\" leading={RupeeIcon}>\n      All Expenses\n    </TabItem>\n    <TabItem\n      value=\"categories\"\n      leading={EditIcon}\n      trailing={<Counter value={26} variant=\"notice\" />}\n    >\n      Categorise\n    </TabItem>\n    <TabItem\n      value=\"review\"\n      leading={TransactionIcon}\n      trailing={<Counter value={99} variant=\"information\" />}\n    >\n      Review\n    </TabItem>\n    <TabItem value=\"synced\" leading={CheckCircleIcon}>\n      Synced\n    </TabItem>\n    <TabItem\n      value=\"synced-fail\"\n      leading={WarningIcon}\n      trailing={<Counter value={3} variant=\"negative\" />}\n    >\n      Synced Failed\n    </TabItem>\n    <TabItem value=\"excluded\" leading={SlashIcon}>\n      Excluded\n    </TabItem>\n  </TabList>\n  ...\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: React Native Styling with dp for Layout and Pixel Ratio for Typography\nDESCRIPTION: React Native StyleSheet using density-independent pixels (dp) for layout and PixelRatio.get() for typography. This combines fixed layout dimensions with text that scales based on the device's pixel density.\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = StyleSheet.create({\n   button2: {\n      marginBottom: 16,\n      minHeight: 48,\n      backgroundColor: '#3987f0',\n      borderRadius: 2,\n      paddingLeft: 24,\n      paddingRight: 24,\n      paddingTop: 12,\n      paddingBottom: 12,\n   },\n   button2Text: {\n      color: '#ffffff',\n      textAlign: 'center',\n      fontSize: 16 * PixelRatio.get(),\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Setting Up Theme Playground in Storybook\nDESCRIPTION: Sets up a Storybook documentation page with imports for various Blade components and the ThemePlayground component. The code includes a TODO comment about rebranding and white-labeling issues related to theming functionality.\n\nLANGUAGE: jsx\nCODE:\n```\n{/* TODO: Rebranding - Rexpose Theming once we fix white-labeling */}\nimport { Meta } from '@storybook/addon-docs';\nimport {\n  Collapsible,\n  CollapsibleLink,\n  CollapsibleBody,\n  Accordion,\n  AccordionItem,\n  Text,\n  Code,\n  Link,\n} from '../../src/components';\nimport { ThemePlayground } from '../../src/storybook-recipes/ThemePlayground';\n\n<Meta title=\"Guides/Theming/Theme Playground\" />\n# Theme Playground\n\nPlay around with the theme and see how it affects the components!\n\n<ThemePlayground />\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Styles in React Native\nDESCRIPTION: Example of button styling in React Native using unitless values, which are interpreted as density-independent pixels (dp). This allows consistent rendering across different device screen densities.\n\nLANGUAGE: js\nCODE:\n```\nStylesheet.create({\n  button: { \n  \tfontSize: 16, /* 16dp */\n  \tpadding: 8, /* 8dp */\n  \tmargin: 2, /* 2dp */\n  \tminHeight: 48, /* 48dp */\n  \twidth: 200, /* 200dp */\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tabs Component Example\nDESCRIPTION: Basic implementation example of the Tabs component showing four tab items with their corresponding panels for Payments, Refunds, Disputes, and Settlements.\n\nLANGUAGE: js\nCODE:\n```\n<Tabs>\n  <TabList>\n    <TabItem value=\"payments\">Payments</TabItem>\n    <TabItem value=\"refunds\">Refunds</TabItem>\n    <TabItem value=\"disputes\">Disputes</TabItem>\n    <TabItem value=\"settlements\">Settlements</TabItem>\n  </TabList>\n\n  <TabPanel value=\"payments\">\n    <Payments />\n  </TabPanel>\n  <TabPanel value=\"refunds\">\n    <Refunds />\n  </TabPanel>\n  <TabPanel value=\"disputes\">\n    <Disputes />\n  </TabPanel>\n  <TabPanel value=\"settlements\">\n    <Settlements />\n  </TabPanel>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Migrating Styled Components with Title Component\nDESCRIPTION: Edge case migration example for styled-components that override Title from Blade library, showing the prop name change from variant to size.\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyTitle = styled(Title)`\n  // some styles\n`\n\n- <MyTitle variant=\"large\" />\n+ <MyTitle size=\"large\" />\n```\n\n----------------------------------------\n\nTITLE: Updating BladeProvider Theme Configuration\nDESCRIPTION: Code diff showing how to replace the deprecated paymentTheme and bankingTheme with the new bladeTheme in the BladeProvider component.\n\nLANGUAGE: diff\nCODE:\n```\n  import { BladeProvider } from '@razorpay/blade/components';\n- import { paymentTheme, bankingTheme } from \"@razorpay/blade/tokens\";\n+ import { bladeTheme } from \"@razorpay/blade/tokens\";\n\n  const AppWrapper = () => {\n    return (\n-     <BladeProvider themeTokens={paymentTheme|bankingTheme} colorScheme=\"light\">\n+     <BladeProvider themeTokens={bladeTheme} colorScheme=\"light\">\n        <App />\n      </BladeProvider>\n    );\n  }\n\n  export default AppWrapper;\n```\n\n----------------------------------------\n\nTITLE: Styling Button with rem for Layout and px for Typography in CSS\nDESCRIPTION: CSS styling for a button using rem units for layout properties and px for typography. With this approach, layout will scale relative to browser font size, but text size will remain fixed regardless of browser font settings.\n\nLANGUAGE: css\nCODE:\n```\n.Button2 {\nbackground: #3987f0;\nborder: 1px solid #3987f0;\nbox-sizing: border-box;\nborder-radius: 2px;\n\nmargin-bottom: 16px;\nmin-height: 3rem; /* 48px */\npadding-left: 1.5rem; /* 24px */\npadding-right: 1.5rem; /* 24px */\npadding-top: 0.75rem; /* 12px */\npadding-bottom: 0.75rem; /* 12px */\n}\n.Button2 > div {\ncolor: white;\nfont-size: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unitless Token Values for Cross-Platform Use in JavaScript\nDESCRIPTION: This code snippet defines unitless token objects for spacing and font sizes that can be used across platforms. Values are stored without units (as plain numbers) and will have appropriate units attached during rendering based on the target platform (px for web, dp for React Native).\n\nLANGUAGE: javascript\nCODE:\n```\nconst space = {\n   1: 8,\n   2: 12,\n   3: 16,\n}\nconst fontSize = {\n   1: 14,\n   2: 18,\n   3: 24,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Active SideNavLink in JSX\nDESCRIPTION: Example of an active SideNavLink. The isActive prop is set to true, which would typically be controlled by the consumer based on the react-router active state.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNavLink\n  as={NavLink}\n  icon={LayoutIcon}\n  title=\"L1 Item Name\"\n  href=\"/l1-item\"\n  // This will be controlled on consumer\n  // depending on react-router active state\n  isActive={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using makeMotionTime with styled-components in Web Applications\nDESCRIPTION: Example of using makeMotionTime in a web application with styled-components. The function converts theme motion duration values into millisecond string format for CSS transitions.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeMotionTime } from '@razorpay/blade/utils';\nimport styled from 'styled-components';\n\nconst CustomComponent = styled.div`\n  transition-duration: ${({ theme }) =>\n    makeMotionTime(theme.motion.duration.gentle)}; // '400ms' for web\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining the TabPanel Component Props Interface\nDESCRIPTION: TypeScript interface for the TabPanel component, specifying properties for tab content panels including the value to match with TabItem and children content.\n\nLANGUAGE: ts\nCODE:\n```\ntype TabPanelProps = {\n  /**\n   * The value of the tab panel. This will be used to match the selected tab.\n   */\n  value: string;\n  /**\n   * The content of the tab panel.\n   */\n  children: React.ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Button with px for Layout and rem for Typography in CSS\nDESCRIPTION: CSS styling for a button using px units for layout properties and rem for typography. In this case, layout dimensions will remain fixed, but text size will scale relative to the browser's font size settings.\n\nLANGUAGE: css\nCODE:\n```\n.Button3 {\nbackground: #3987f0;\nborder: 1px solid #3987f0;\nbox-sizing: border-box;\nborder-radius: 2px;\n\nmargin-bottom: 16px;\nmin-height: 48px;\npadding: 16px;\n}\n.Button3 > div {\ncolor: white;\nfont-size: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Button with rem Units for Layout and Typography in CSS\nDESCRIPTION: CSS styling for a button using rem units for both layout and typography, which will scale relative to the browser's font size. This approach ensures all elements scale proportionately when the user changes their browser font size settings.\n\nLANGUAGE: css\nCODE:\n```\n.Button1 {\nbackground: #3987f0;\nborder: 1px solid #3987f0;\nbox-sizing: border-box;\nborder-radius: 2px;\n\nmargin-bottom: 16px;\npadding-left: 1.5rem; /* 24px */\npadding-right: 1.5rem; /* 24px */\npadding-top: 0.75rem; /* 12px */\npadding-bottom: 0.75rem; /* 12px */\nmin-height: 3rem; /* 48px */\n}\n.Button1 > div {\ncolor: white;\nfont-size: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading OTPInput Component Migration Example\nDESCRIPTION: Code example showing how to wrap the OTPInput component with a Box to maintain fixed width behavior after the component was changed to have fluid width in version 9.0.0, providing backward compatibility.\n\nLANGUAGE: diff\nCODE:\n```\n+ <Box maxWidth='256px' />\n  <OTPInput label='Enter OTP' otpLength={6} />\n+ </Box>\n```\n\n----------------------------------------\n\nTITLE: Migrating PasswordField to PasswordInput in React\nDESCRIPTION: Migration guide for the component rename from PasswordField to PasswordInput, showing a simple replacement with no API changes.\n\nLANGUAGE: jsx\nCODE:\n```\n- PasswordField\n+ PasswordInput\n```\n\n----------------------------------------\n\nTITLE: Removing onLight/onDark Keywords Migration Step\nDESCRIPTION: Migration step showing how to remove color mode-specific keywords from theme access.\n\nLANGUAGE: diff\nCODE:\n```\n-background-color: ${theme.colors.surface.background.level2.lowContrast.onLight};\n+background-color: ${theme.colors.surface.background.level2.lowContrast};\n```\n\n----------------------------------------\n\nTITLE: Implementing Shake Animation with CSS in React\nDESCRIPTION: React component example showing how to implement a shake animation on hover using styled-components and CSS animations. The animation is defined through keyframes and applies translateX transformations with custom easing and duration from motion tokens.\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from 'styled-components';\n\nconst AnimatedBlock = styled.div` /* Create a styled div */\n  :hover {\n    animation: \n      shake /* Set a custom keyframe animation */\n      ${motionToken.duration.quick3} /* Set the duration of the animation using our motion tokens */\n      ${motionToken.easing.standard.effective}; /* Set the easing of the animation using our motion tokens */\n  }\n\n  @keyframes shake { /* Define the custom keyframe animation */\n    0%,\n    100% {\n      transform: translateX(0);\n    }\n    10%,\n    30%,\n    50%,\n    70%,\n    90% {\n      transform: translateX(-10px);\n    }\n    20%,\n    40%,\n    60%,\n    80% {\n      transform: translateX(10px);\n    }\n`\n\nfunction Example() {\n\n  return(\n    <div>\n      <AnimatedBlock />\n    <div>\n)\n```\n\n----------------------------------------\n\nTITLE: SideNavLink with Trailing Button in JSX\nDESCRIPTION: Example of a SideNavLink with a trailing action button. This implementation includes a tertiary button in the trailing slot that appears on hover, providing quick access to create a new payout.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNavLink\n  as={NavLink}\n  icon={PayoutIcon}\n  title=\"Create Payouts\"\n  href=\"/payouts\"\n  trailing={\n    <Button\n      href=\"/payouts/create\"\n      icon={PlusIcon}\n      size=\"xsmall\"\n      variant=\"tertiary\"\n    />\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining VirtualizedWrapperProps TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the VirtualizedWrapperProps that outlines the required and optional props for the TableVirtualizedWrapper component. It includes tableData, headerHeight, rowHeight, and children props, with a comprehensive example of component usage in the documentation.\n\nLANGUAGE: typescript\nCODE:\n```\ntype VirtualizedWrapperProps<Item> = {\n  /**\n   *   <TableComponent\n   *      data={data}\n   *      rowDensity=\"compact\"\n   *      selectionType=\"multiple\"\n   *      height=\"700px\"\n   *      toolbar={\n   *        <TableToolbar>\n   *          <TableToolbarActions>\n   *            <Button variant=\"secondary\" marginRight=\"spacing.2\">\n   *              Export\n   *            </Button>\n   *            <Button>Payout</Button>\n   *          </TableToolbarActions>\n   *        </TableToolbar>\n   *      }\n   *    >\n   *      {(tableData) => (\n   *        <TableVirtualizedWrapper tableData={tableData}>\n   *          <TableHeader>\n   *            <TableHeaderRow>\n   *              <TableHeaderCell>ID</TableHeaderCell>\n   *              <TableHeaderCell>Amount</TableHeaderCell>\n   *              <TableHeaderCell>Account</TableHeaderCell>\n   *              <TableHeaderCell>Date</TableHeaderCell>\n   *              <TableHeaderCell>Method</TableHeaderCell>\n   *              <TableHeaderCell>Status</TableHeaderCell>\n   *            </TableHeaderRow>\n   *          </TableHeader>\n   *          <TableBody<Item>>\n   *            {(tableItem, index) => (\n   *              <TableRow\n   *                key={index}\n   *                item={tableItem}\n   *                hoverActions={\n   *                  <>\n   *                    <IconButton\n   *                      accessibilityLabel=\"Copy\"\n   *                      isHighlighted\n   *                      icon={CopyIcon}\n   *                      onClick={() => console.log('copy', tableItem)}\n   *                    />\n   *                    <IconButton\n   *                      accessibilityLabel=\"Delete\"\n   *                      isHighlighted\n   *                      icon={TrashIcon}\n   *                      onClick={() => console.log('delete', tableItem)}\n   *                    />\n   *                  </>\n   *                }\n   *              >\n   *                <TableCell>\n   *                  <Code size=\"medium\">{tableItem.paymentId}</Code>\n   *                </TableCell>\n   *                <TableCell>\n   *                  <Amount value={tableItem.amount} />\n   *                </TableCell>\n   *                <TableCell>{tableItem.account}</TableCell>\n   *                <TableCell>\n   *                  {tableItem.date?.toLocaleDateString('en-IN', {\n   *                    year: 'numeric',\n   *                    month: '2-digit',\n   *                    day: '2-digit',\n   *                  })}\n   *                </TableCell>\n   *                <TableCell>{tableItem.method}</TableCell>\n   *                <TableCell>\n   *                  <Badge\n   *                    size=\"medium\"\n   *                    color={\n   *                      tableItem.status === 'Completed'\n   *                        ? 'positive'\n   *                        : tableItem.status === 'Pending'\n   *                        ? 'notice'\n   *                        : tableItem.status === 'Failed'\n   *                        ? 'negative'\n   *                        : 'default'\n   *                    }\n   *                  >\n   *                    {tableItem.status}\n   *                  </Badge>\n   *                </TableCell>\n   *              </TableRow>\n   *            )}\n   *          </TableBody>\n   *        </TableVirtualizedWrapper>\n   *      )}\n   *    </TableComponent>\n   *\n    /**\n   * The tableData prop is an array of objects.\n   */\n  tableData: TableNode<Item>[];\n  /**\n   * headerHeight is the height of the header\n   **/\n  headerHeight?: number;\n  /**\n   * rowHeight is the height of each row, it can be a fixed number or a function that returns a number\n   **/\n  rowHeight?: (item: TableLibraryTableNode, index: number) => number;\n  children: React.ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: BottomSheet Header API Changes\nDESCRIPTION: Detailed migration guide for the API changes in BottomSheetHeader component, showing removed and added props.\n\nLANGUAGE: diff\nCODE:\n```\n-  title: string;\n+  title?: string;\n  subtitle?: string;\n-  prefix?: React.ReactNode;\n-  suffix?: React.ReactNode;\n+  leading?: React.ReactNode;\n+  trailing?: React.ReactNode;\n+  titleSuffix?: React.ReactNode;\n+  showBackButton?: boolean;\n+  onBackButtonClick?: () => void;\n+  closeButtonRef: React.MutableRefObject<any>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Top-Level Re-exports in JavaScript\nDESCRIPTION: Example of how top-level re-exports are implemented across different categories (components, themes, utils) in the Blade design system.\n\nLANGUAGE: js\nCODE:\n```\n// example of top level re-exports\n// packages/blade/src/components/index.ts\nexport * from 'src/components/Button'\nexport * from 'src/components/Text'\n\n// packages/blade/src/tokens/theme/index.ts\nexport * from 'src/tokens/theme/paymentTheme'\nexport * from 'src/tokens/theme/bankingTheme'\nexport * from 'src/tokens/theme/overrideTheme'\n\n// packages/blade/src/utils/index.ts\nexport * from 'src/tokens/utils/getColorScheme'\nexport * from 'src/tokens/utils/useColorScheme'\n```\n\n----------------------------------------\n\nTITLE: Importing Blade Font CSS in Web Applications\nDESCRIPTION: Shows how to import the Blade font CSS file which sets the font face and loads the fonts. This is the recommended approach for web applications using Blade after the brand refresh.\n\nLANGUAGE: javascript\nCODE:\n```\n// index.tsx\nimport '@razorpay/blade/fonts.css';\n```\n\n----------------------------------------\n\nTITLE: Type Definition for PageSizeChangeEvent in TypeScript\nDESCRIPTION: Type definition for the PageSizeChangeEvent callback used in the TablePagination component. The callback is triggered when the page size changes and receives an object with the new page size.\n\nLANGUAGE: typescript\nCODE:\n```\ntype PageSizeChangeEvent = ({ pageSize: number }) => void;\n```\n\n----------------------------------------\n\nTITLE: Using ThemeProvider in React with Blade (Previous Implementation)\nDESCRIPTION: Example of the previous approach for importing and using ThemeProvider from Blade components with paymentTheme. This shows the entry point setup before the breaking change.\n\nLANGUAGE: jsx\nCODE:\n```\n// App entry point\nimport { ThemeProvider } from '@razorpay/blade/components';\nimport { paymentTheme } from '@razorpay/blade/tokens';\n\nfunction App(): JSX.Element {\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n      <ThemeProvider theme={paymentTheme}>\n        <Card />\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Migration Example from onDismiss to onOpenChange in Dropdown\nDESCRIPTION: Code diff demonstrating how to migrate from the deprecated onDismiss prop to the new onOpenChange prop in the Dropdown component.\n\nLANGUAGE: diff\nCODE:\n```\n<Dropdown\n- onDismiss={() => console.log('dismissed')}\n+ onOpenChange={(isOpen) => {\n+  if (!isOpen) {\n+    console.log('dismissed');\n+  }\n+ }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Migration Guide for isDismissible Prop (React)\nDESCRIPTION: Diff showing how to update the Alert component to fix a prop name typo, changing 'isDismissable' to 'isDismissible'.\n\nLANGUAGE: diff\nCODE:\n```\n<Alert\n- isDismissable\n+ isDismissible\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Font Family with Styled Components\nDESCRIPTION: Demonstrates how to apply the Blade font family to the body element using styled-components. This implementation uses the theme's typography font family settings.\n\nLANGUAGE: javascript\nCODE:\n```\n// With styled-components\nconst GlobalStyles = createGlobalStyles`\n  body {\n    font-family: ${(theme) => theme.typography.fonts.family.text}\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Basic Box Component Usage with Margin in Blade\nDESCRIPTION: Example showing how to use the proposed Box component to add spacing adjustments to a container in the Blade design system.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Box, Button, Heading, Text } from '@razorpay/blade/components';\n\n// adding spacing adjustments to entire container\n<Box marginTop=\"spacing.1\">\n  <Button>Space on top</Button>\n</Box>;\n```\n\n----------------------------------------\n\nTITLE: Migrating from Title to Heading Component in Typography\nDESCRIPTION: Examples showing how to replace the deprecated Title component with the Heading component, including mapping of different size values between the two components.\n\nLANGUAGE: diff\nCODE:\n```\n- <Title size=\"xlarge\"> Hello </Title>\n+ <Heading size=\"2xlarge\"> Hello </Heading>\n\n- <Title size=\"large\"> Hello </Title>\n+ <Heading size=\"xlarge\"> Hello </Heading>\n\n- <Title size=\"medium\"> Hello </Title>\n+ <Heading size=\"xlarge\"> Hello </Heading>\n\n- <Title size=\"small\"> Hello </Title>\n+ <Heading size=\"large\"> Hello </Heading>\n```\n\n----------------------------------------\n\nTITLE: Sample Table Data and Functions in JSX/React\nDESCRIPTION: Example code showing mock data and functions used for demonstration purposes in the table examples. Includes sample user data, sort functions, and event handlers.\n\nLANGUAGE: jsx\nCODE:\n```\n// Mock data & functions\n\nconst data = [\n  {\n    firstName: 'John',\n    lastName: 'Doe',\n    balance: 1000,\n  },\n  {\n    firstName: 'Jane',\n    lastName: 'Doe',\n    balance: 2000,\n  },\n];\n\nconst sortFunctions = {\n  firstName: (array) => array.sort((a, b) => a.name.localeCompare(b.name)),\n};\n\nconst onSelectionChange = (selectedItems) => {\n  console.log(selectedItems);\n};\n\nconst onSortChange = ({ headerKey, sortType }) => {\n  console.log({ headerKey, sortType });\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from ThemeProvider to BladeProvider in React\nDESCRIPTION: Diff showing the migration from ThemeProvider to BladeProvider, renaming the provider component and changing the prop name from 'theme' to 'themeTokens'.\n\nLANGUAGE: diff\nCODE:\n```\n// App entry point\n-import { ThemeProvider } from '@razorpay/blade/components';\n+import { BladeProvider } from '@razorpay/blade/components';\nimport { paymentTheme } from '@razorpay/blade/tokens';\n\nfunction App(): JSX.Element {\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n-      <ThemeProvider theme={paymentTheme}>\n+      <BladeProvider themeTokens={paymentTheme}>\n        <Card />\n-      </ThemeProvider>\n+      </BladeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n\n// somewhere in the app\nconst { theme } = useTheme();\n\n-background-color: ${theme.colors.surface.background.level2.lowContrast.onLight};\n+background-color: ${theme.colors.surface.background.level2.lowContrast};\n-font-size: ${theme.typography.desktop.fonts.size[200]}px;\n+font-size: ${theme.typography.fonts.size[200]}px;\n```\n\n----------------------------------------\n\nTITLE: Font Family Fallbacks in CSS\nDESCRIPTION: CSS snippet demonstrating the recommended font fallbacks for TASA Orbiter, Inter, and monospace fonts used in Blade. These fallbacks ensure proper text rendering when primary fonts cannot be loaded.\n\nLANGUAGE: css\nCODE:\n```\n{\n  font-family: 'TASA Orbiter', -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica\n      Neue, sans-serif;\n\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica\n      Neue, sans-serif;\n\n  font-family: \"Menlo\", San Francisco Mono, Courier New, Roboto Mono, monospace;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Staggered Animations in Blade\nDESCRIPTION: This code demonstrates how to create staggered animations for multiple elements using the Stagger and Fade components from Blade. Elements will appear one after another in sequence.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { \n  Stagger, \n  Fade \n} from '@razorpay/blade/components';\n\n<Stagger isVisible={showCards}>\n  <Fade>\n    <Box />\n  </Fade>\n  <Fade>\n    <Box />\n  </Fade>\n  <Fade>\n    <Box />\n  </Fade>\n</Stagger>;\n```\n\n----------------------------------------\n\nTITLE: Problematic Theme Access Pattern Highlighting Hardcoded Values\nDESCRIPTION: Code snippet highlighting the specific problem with the previous implementation where developers had to explicitly specify 'onLight/onDark' and 'desktop/mobile' values.\n\nLANGUAGE: jsx\nCODE:\n```\nconst { theme } = useTheme();\n\nbackground-color: ${theme.colors.surface.background.level2.lowContrast.onLight};\nfont-size: ${theme.typography.desktop.fonts.size[200]}px;\n```\n\n----------------------------------------\n\nTITLE: Checkbox Breaking Change in Blade\nDESCRIPTION: Rename of 'neccessityIndicator' prop to 'necessityIndicator' in the Checkbox component to fix a spelling error.\n\nLANGUAGE: markdown\nCODE:\n```\n- 51a6787: feat: add `Radio` & `RadioGroup` component\n\n  ## ⚠️ Breaking change for `Checkbox`\n\n  - We've renamed the `neccessityIndicator` prop to `necessityIndicator` to fix a spelling error\n```\n\n----------------------------------------\n\nTITLE: Scale Component for Highlight Animations\nDESCRIPTION: Implementation of the Scale component for highlighting elements with animation. The component can be controlled with isHighlighted prop or through motion triggers like hover.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Scale } from '@razorpay/blade/components';\n\n<Scale isHighlighted>\n  <Box />\n</Scale>;\n```\n\nLANGUAGE: ts\nCODE:\n```\ntype ScaleProps = {\n  /**\n   * @default scale-down\n   */\n  type: 'scale-up' | 'scale-down';\n\n  /**\n   * What should trigger the motion\n   *\n   * @default ['hover']\n   */\n  motionTriggers: ('mount' | 'hover' | 'tap' | 'inView')[];\n\n  /**\n   * Controlled state of highlighting.\n   *\n   * Only applicable when motionTriggers is no defined\n   *\n   * @default undefined - uses motionTriggers to trigger highlight\n   */\n  isHighlighted?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Skeleton Usage in JSX\nDESCRIPTION: Demonstrates simple implementation of Skeleton components with width, height, border radius and margin properties to create a basic loading placeholder.\n\nLANGUAGE: jsx\nCODE:\n```\n<Skeleton width=\"100%\" height=\"20px\" borderRadius=\"medium\" marginY=\"spacing.1\" />\n<Skeleton width=\"100%\" height=\"20px\" borderRadius=\"medium\" marginY=\"spacing.1\" />\n<Skeleton width=\"100%\" height=\"20px\" borderRadius=\"medium\" marginY=\"spacing.1\" />\n```\n\n----------------------------------------\n\nTITLE: Changes to onChange Behavior in SelectInput Example\nDESCRIPTION: Example demonstrating how the onChange behavior in SelectInput has changed, where it no longer gets called on initial render. Shows a typical usage scenario with state management.\n\nLANGUAGE: tsx\nCODE:\n```\nconst Example = (): JSX.Element => {\n  const [cities, setCities] = React.useState();\n  return (\n    <>\n      <Dropdown>\n        <SelectInput label=\"Cities\" onChange={({values}) => setCities(values) } />\n        <DropdownOverlay>\n          <ActionListItem title=\"Mumbai\" value=\"mumbai\" />\n          <ActionListItem title=\"Pune\" value=\"pune\" />\n        </DropdownOverlay>\n      </Dropdown>\n      <Text>{cities}</Text>\n      {/*\n        In earlier versions, value of `cities` would've been `['']`\n        (because onChange would've been called initially to set array with empty string value)\n\n        Now it will output undefined (anything you pass in your useState) as the onChange wouldn't be called on initial render\n      */}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: UseDropdownHookReturns Interface Definition\nDESCRIPTION: Defines the TypeScript interface for the return value of the useDropdown hook, including the state for dropdown visibility and a function to update that state.\n\nLANGUAGE: typescript\nCODE:\n```\ntype UseDropdownHookReturns = {\n  /**\n   * State to tell if dropdown is visible or not\n   */\n  isDropdownVisible: boolean;\n  /**\n   * function to call to change the dropdown state\n   */\n  setIsDropdownVisible: (isDropdownVisible: boolean) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Theme Provider and Consumer Example\nDESCRIPTION: Complete example showing both the theme provider setup and a component consuming the theme, demonstrating the full pattern.\n\nLANGUAGE: jsx\nCODE:\n```\nimport {myTheme, BladeThemeProvider} from 'design-system';\n\n<BladeThemeProvider theme={myTheme}>\n  <MyApp/>\n</BladeThemeProvider>\n\n// somewhere in the MyApp tree where I might need to use tokens\nimport {useTheme} from 'design-system'\n\nconst SomeComponent =  () => {\n  const {theme} = useTheme()\n\n  return (\n    <div>\n      <span style={{ backgroundColor: theme.colors.background.surface.level1.lowContrast }}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scale Animation on Parent Hover in Blade\nDESCRIPTION: This snippet demonstrates how to implement a scale animation that triggers when the parent container is hovered. It uses AnimateInteractions and Scale components from the Blade library.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { \n  AnimateInteractions, \n  Scale \n} from '@razorpay/blade/components';\n\n<AnimateInteractions motionTriggers={['hover']}>\n  <Card>\n    <CardBody>\n      <Scale motionTriggers={['on-animate-interactions']}>\n        <img src=\"./rajorpay.jpeg\" />\n      </Scale>\n    </CardBody>\n  </Card>\n</AnimateInteractions>;\n```\n\n----------------------------------------\n\nTITLE: Defining Easing Tokens with Cubic Bezier Functions for Web\nDESCRIPTION: JavaScript object defining easing tokens for standard, entrance, and exit animations using cubic-bezier functions. These tokens provide consistent animation behaviors across components, with different intents (effective, revealing, attentive, wary) for various use cases.\n\nLANGUAGE: js\nCODE:\n```\neasing: {\n  standard: {\n    effective: 'cubic-bezier(0.3, 0, 0.2, 1)',\n    revealing: 'cubic-bezier(0.5, 0, 0, 1)',\n    attentive: 'cubic-bezier(0.5, 0, 0.3, 1.5)',\n    wary: 'cubic-bezier(1, 0.5, 0, 0.5)',\n  },\n  entrance: {\n    effective: 'cubic-bezier(0, 0, 0.2, 1)',\n    revealing: 'cubic-bezier(0, 0, 0, 1)',\n    attentive: 'cubic-bezier(0.5, 0, 0.3, 1.5)',\n  },\n  exit: {\n    effective: 'cubic-bezier(0.17, 0, 1, 1)',\n    revealing: 'cubic-bezier(0.5, 0, 1, 1)',\n    attentive: 'cubic-bezier(0.7, 0, 0.5, 1)',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using ActionListFooter Component in React JSX - With Feedback Intent\nDESCRIPTION: Example of ActionListFooter with additional leading icon and trailing action buttons for providing feedback functionality.\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionListFooter\n  title=\"Footer Title\"\n  description=\"Footer Description\"\n  leading={<ActionListFooterIcon icon={DocIcon} />}\n  trailing={\n    <>\n      <IconButton onClick={} icon={CloseIcon} />\n      <IconButton onClick={} icon={CheckIcon} />\n    </>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Provider Prop Rename Migration Step\nDESCRIPTION: Migration step showing how to rename the 'theme' prop to 'themeTokens' when using BladeProvider.\n\nLANGUAGE: diff\nCODE:\n```\n-<BladeProvider theme={paymentTheme}>\n+<BladeProvider themeTokens={paymentTheme}>\n```\n\n----------------------------------------\n\nTITLE: Spacing Token Breaking Change in Blade\nDESCRIPTION: Addition of a 2px spacing token resulting in a shift of all spacing tokens by 1 step, with migration instructions.\n\nLANGUAGE: markdown\nCODE:\n```\n- cc4355a: feat(blade): added 2px spacing token\n\n  #### Breaking changes\n\n> **Note**\n>\n> This breaking change affects you only if you're using the tokens directly somewhere. If you're only using the components then nothing needs to be updated at your end.\n\n- Added 2px token, thus all spacing tokens have shifted by 1 step.\n\n#### Migration steps\n\nShift every spacing token other than the first one (`0th` index) by +1\n\n```diff\n- <div style={{ margin: theme.spacing[1] }} />\n+ <div style={{ margin: theme.spacing[2] }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Scale Animation on Element Hover in Blade\nDESCRIPTION: This example shows how to directly apply scale animation to an element using the motionTriggers prop. The image scales up when it is hovered directly.\n\nLANGUAGE: jsx\nCODE:\n```\n<Scale motionTriggers={['hover']}>\n  <img src=\"./rajorpay.jpeg\" />\n</Scale>\n```\n\n----------------------------------------\n\nTITLE: Responsive Text Component Implementation\nDESCRIPTION: Example of a DisplayXLarge component implementation with responsive line-height values for web platforms using media queries.\n\nLANGUAGE: typescript\nCODE:\n```\nweb\n  const DisplayXLarge = styled.div`\n    // 60px - global-lh-60\n    line-height: getLineHeight(lineHeight.6xl)\n    // 38px - global-lh-38\n    @media(min-widht: 375px){\n      line-height: getLineHeight(lineHeight.4xl)\n    }\n  `\n\nnative\n  const DisplayXLarge = styled.div`\n      // 38px - global-lh-38\n      line-height: getLineHeight(lineHeight.4xl)\n    `\n```\n\n----------------------------------------\n\nTITLE: Type Definition for PageChangeEvent in TypeScript\nDESCRIPTION: Type definition for the PageChangeEvent callback used in the TablePagination component. The callback is triggered when the current page changes and receives an object with the new page number.\n\nLANGUAGE: typescript\nCODE:\n```\ntype PageChangeEvent = ({ page: number }) => void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Contrast Demo for Blade Buttons\nDESCRIPTION: A React component that demonstrates how createTheme automatically handles contrast for accessibility, showing buttons with light and dark text based on the brand color's contrast needs.\n\nLANGUAGE: jsx\nCODE:\n```\nexport const ContrastDemo = () => {\n  return (\n    <div>\n      <BladeProvider themeTokens={createTheme({ brandColor: '#83003D' }).theme} colorScheme=\"light\">\n        <Heading>Foreground on Button is Light based on the brand color</Heading>\n        <Button icon={CreditCardIcon}>Pay Now</Button>\n      </BladeProvider>\n      <BladeProvider themeTokens={createTheme({ brandColor: '#5EDD55' }).theme} colorScheme=\"light\">\n        <Heading marginTop=\"spacing.6\">\n          Foreground on Button is Dark based on the brand color\n        </Heading>\n        <Button icon={CreditCardIcon}>Pay Now</Button>\n      </BladeProvider>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using ActionListFooter Component in React JSX - Simple Usage\nDESCRIPTION: Basic implementation of the ActionListFooter component with just title and description props.\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionListFooter title=\"Footer Title\" description=\"Footer Description\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Responsive Text Component API in React\nDESCRIPTION: Shows two different approaches for setting font size in a Text component - a simple approach with a single value and a responsive approach with different values for different screen sizes using an object syntax.\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontSize=\"100\" />\n\n<Text fontSize={{ small: 100, medium: 100, large: 100, xl: 400 }} />\n```\n\n----------------------------------------\n\nTITLE: Component Import Examples for Web and Native\nDESCRIPTION: Simple examples showing how components would be imported from the design system in both web and native platforms with identical syntax.\n\nLANGUAGE: jsx\nCODE:\n```\n// web\nimport DisplayXLarge from '@razorpay/blade/components'\n<DisplayXLarge/>\n\n// native\nimport DisplayXLarge from '@razorpay/blade/components'\n<DisplayXLarge/>\n```\n\n----------------------------------------\n\nTITLE: Theme Type Import Migration Step\nDESCRIPTION: Migration step showing how to update the Theme type import from tokens to components package.\n\nLANGUAGE: diff\nCODE:\n```\n-import type { Theme } from '@razorpay/blade/tokens';\n+import type { Theme } from '@razorpay/blade/components';\n```\n\n----------------------------------------\n\nTITLE: Migration Example for Overlay Background Token Change\nDESCRIPTION: Code diff showing how to migrate from the deprecated overlay.background token to the new surface.overlay.background[800] token.\n\nLANGUAGE: diff\nCODE:\n```\n- background={theme.colors.overlay.background}\n+ background={theme.colors.surface.overlay.background[800]}\n```\n\n----------------------------------------\n\nTITLE: Platform Types Improvement with TypeScript 4.7 in Blade\nDESCRIPTION: Enhancement of platform-dependent type support in Blade using TypeScript 4.7's module suffix feature.\n\nLANGUAGE: markdown\nCODE:\n```\n- bf92637: feat(blade): Improve platform types with TS 4.7\n\n  ### Added support for platform dependant types\n\n  Migration Steps\n\n  1. Upgrade to TypeScript 4.7+\n  2. In `tsconfig.json` add `moduleSuffix: ['.web', '']` or `moduleSuffix: ['.native', '']` (depending on the platform)\n\n  ```js\n  {\n    \"compilerOptions\": {\n      // For react-native use `.native`\n      // For web use `.web` extension\n      \"moduleSuffixes\": [\".web\", \"\"]\n    }\n  }\n  ```\n\n  > **Note**:\n  > if you are on <TS 4.7 or don't specify the `moduleSuffixes` blade will fallback to resolving `web` types\n```\n\n----------------------------------------\n\nTITLE: Configuring Typography Font Size Responsively in JSX\nDESCRIPTION: Example of attempting to configure font sizes for different screen sizes on a Typography component. This illustrates potential confusion when consumers try to apply responsive props to components that may already handle responsiveness automatically.\n\nLANGUAGE: jsx\nCODE:\n```\nfontSize={{ small: 100, medium: 100, large: 100, xl: 400 }}\n```\n\n----------------------------------------\n\nTITLE: Using assertBladeCoverage in Playwright Tests\nDESCRIPTION: This code demonstrates how to use the assertBladeCoverage utility in Playwright tests to verify that a page's Blade coverage meets a specified threshold (default 70%). It requires Blade v10.22.0+ and a properly configured Playwright setup.\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from '@playwright/test';\nimport { assertBladeCoverage } from '@razorpay/blade/coverageUtils';\n\ntest.describe.parallel('Test Home @flow=home', () => {\n  test('should have blade coverage more than 70% @priority=normal', async ({ page }) => {\n    await page.goto('/');\n\n    await assertBladeCoverage({ page, expect, threshold: 70 });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Component Usage in JSX\nDESCRIPTION: Simple example showing how to use the Dropdown component as a wrapper for dropdown sub-components.\n\nLANGUAGE: jsx\nCODE:\n```\n<Dropdown>{/* Dropdown sub-components */}</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Migrating Spacing Tokens After Breaking Change\nDESCRIPTION: Migration example for updating spacing token indexes after the addition of a 2px spacing token, requiring a shift of all existing tokens by +1.\n\nLANGUAGE: jsx\nCODE:\n```\n- <div style={{ margin: theme.spacing[1] }} />\n+ <div style={{ margin: theme.spacing[2] }} />\n```\n\n----------------------------------------\n\nTITLE: Using Box with Flex Layout and Gap in Blade\nDESCRIPTION: Example demonstrating how to create a flexbox layout with gaps between child elements using the proposed Box component.\n\nLANGUAGE: tsx\nCODE:\n```\n<Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" gap=\"spacing.2\">\n  <Button>Need</Button>\n  <Button>Some</Button>\n  <Button>Space</Button>\n</Box>;\n```\n\n----------------------------------------\n\nTITLE: Highly Flexible BottomSheet Footer with ButtonGroup\nDESCRIPTION: A very flexible implementation of BottomSheet Footer using ButtonGroup for action arrangement with layout direction control.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheetFooter layoutDirection=\"vertical | horizontal\">\n <AnythingElse>\n <ButtonGroup attached={false}>\n   <Button>Primary</Button>\n   <Button>Secondary</Button>\n </ButtonGroup>\n</BottomSheetFooter>\n```\n\n----------------------------------------\n\nTITLE: Link Component Size Prop Addition in Blade\nDESCRIPTION: Addition of a 'size' prop to the Link component with support for 'small' size, with a note about icon positioning.\n\nLANGUAGE: markdown\nCODE:\n```\n- 6429d93: feat(Link): add `size` prop and support for `small` size\n\n  > **Note**\n  >\n  > Icons in links are slightly bumped up now to match the designs\n\n  <img width=\"379\" alt=\"image\" src=\"https://user-images.githubusercontent.com/6682655/196698626-e73dcc07-3d35-49e1-8ead-95c5826f3c41.png\">\n```\n\n----------------------------------------\n\nTITLE: Component Prop Change for Checkbox/Radio in Blade\nDESCRIPTION: Addition of a 'small' variant to Checkbox/Radio components in Blade UI library.\n\nLANGUAGE: markdown\nCODE:\n```\n- 8dc131d: feat(blade): added `small` variant in Checkbox/Radio\n```\n\n----------------------------------------\n\nTITLE: Global Typography Token Structure in TypeScript\nDESCRIPTION: Initial structure of typography tokens stored in tokens/global/typography.ts showing font family, size, and weight properties organized for desktop and mobile platforms.\n\nLANGUAGE: typescript\nCODE:\n```\nconst typography: Typography = {\n  desktop: {\n    fonts: {\n      family: {\n        ...fontFamily,\n      },\n      size: {\n        10: 9,\n        25: 10,\n        50: 11,\n        75: 12,\n        100: 13,\n        200: 16,\n        300: 18,\n        400: 20,\n        500: 22,\n        600: 25,\n        700: 28,\n        800: 32,\n        900: 36,\n        1000: 40,\n      },\n      weight: {\n        ...fontWeight,\n      },\n    },\n    // lineHeights: {},\n    // letterSpacings: {},\n  },\n  mobile: {\n    fonts: {\n      family: {\n        ...fontFamily,\n      },\n      size: {\n        10: 10,\n        25: 11,\n        50: 12,\n        75: 14,\n        100: 15,\n        200: 17,\n        300: 18,\n        400: 20,\n        500: 22,\n        600: 24,\n        700: 27,\n        800: 29,\n        900: 32,\n        1000: 35,\n      },\n      weight: {\n        ...fontWeight,\n      },\n    },\n    // lineHeights: {},\n    // letterSpacings: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Storybook Modal Documentation\nDESCRIPTION: This code imports the Meta component from Storybook's addon-docs and a custom ModalDocs component. It then configures the Storybook page with a title and renders the ModalDocs component.\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { ModalDocs } from './ModalDocs';\n\n<Meta title=\"Components/Modal/Modal\" />\n\n<ModalDocs />\n```\n\n----------------------------------------\n\nTITLE: Removing surfaceLevel prop from Table Component\nDESCRIPTION: Shows how to handle the removal of the 'surfaceLevel' prop from the Table component without replacement.\n\nLANGUAGE: diff\nCODE:\n```\n- <Table data={tableData} surfaceLevel={1/2/3} >\n+ <Table data={tableData} >\n```\n\n----------------------------------------\n\nTITLE: Figma-aligned BottomSheet Header Implementation\nDESCRIPTION: A BottomSheet Header implementation that aligns with Figma design patterns, using leading and trailing properties along with titleAddon.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheetHeader\n  title=\"\"\n  subtitle=\"\"\n  leading={<Asset />}\n  trailing={Badge | IconButton | Link}\n  titleAddon={<BottomSheetCounter />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Theme Structure Transformation\nDESCRIPTION: Shows the transformation of theme structure from a flat organization to a more semantic organization with responsive contexts.\n\nLANGUAGE: jsx\nCODE:\n```\n// from this \nconst paymentTheme = {\n  colors,\n  border,\n  spacing,\n  shadows,\n  typography,\n};\n\n// to this\nconst myThemeTokens = {\n  colors:{\n    onLight:{},\n    onDark:{}\n  },\n  border:{},\n  spacing:{},\n  shadows:{},\n  typography:{\n    onMobile:{},\n    onDesktop:{}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing contrast prop from Typography Components\nDESCRIPTION: Instructions for handling the removal of the 'contrast' prop from Text, Heading, and Display components, with guidance on how to manage high contrast cases.\n\nLANGUAGE: diff\nCODE:\n```\n- <Text contrast=\"low\"> Hello </Text>\n+ <Text> Hello </Text>\n\n// contrast=\"high\" doesn't exist anymore, so you will need to manually update these cases a new color token that matches the contrast you need.\n- <Text contrast=\"high\"> Hello </Text>\n+ <Text> Hello </Text>\n```\n\n----------------------------------------\n\nTITLE: Migrating from ActionListHeader/Footer to DropdownHeader/Footer\nDESCRIPTION: Migration guide for moving from the deprecated ActionListHeader and ActionListFooter components to the new standardized DropdownHeader and DropdownFooter components, which are now placed outside ActionList but inside DropdownOverlay.\n\nLANGUAGE: diff\nCODE:\n```\nimport {\n  Dropdown,\n  DropdownOverlay,\n  SelectInput,\n  ActionListHeader,\n  ActionListFooter,\n  ActionList,\n  ActionListItem\n} from '@razorpay/blade/components';\n\nfunction App() {\n  return (\n    <Dropdown>\n      <SelectInput label=\"Select City\" />\n      <DropdownOverlay>\n+       <DropdownHeader title=\"Title\" />\n        <ActionList>\n-          <ActionListHeader title=\"Title\" />\n            <ActionListItem />\n            <ActionListItem />\n-          <ActionListFooter trailing={<Button>Apply</Button>} />\n        </ActionList>\n+       <DropdownFooter>\n+         <Box><Button>Apply</Button></Box>\n+       </DropdownFooter>\n      </DropdownOverlay>\n    </Dropdown>\n  )\n}\n\nexport { App };\n```\n\n----------------------------------------\n\nTITLE: Migration for Badge Component Size Changes\nDESCRIPTION: Shows the required updates for Badge component size changes where small becomes medium and medium becomes large. This addresses the design changes in version 4.0.0 which added a new small size and bumped existing sizes.\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge size='small'>...</Badge>\n+ <Badge size='medium'>...</Badge>\n```\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge size='medium'>...</Badge>\n+ <Badge size='large'>...</Badge>\n```\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge>...</Badge>\n+ <Badge size='large'>...</Badge>\n```\n\n----------------------------------------\n\nTITLE: Component with useTheme Hook Implementation\nDESCRIPTION: Example of a component that uses the useTheme hook to access theme tokens for styling, showing the consumer pattern.\n\nLANGUAGE: jsx\nCODE:\n```\n// somewhere in the MyApp tree where I might need to use tokens\nimport {useTheme} from 'design-system'\n\nconst SomeComponent =  () => {\n  const {theme} = useTheme()\n\n  return (\n    <div>\n      <span style={{ backgroundColor: theme.colors.background.surface.level1.lowContrast }}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing default color with primary in Counter Component\nDESCRIPTION: Shows how to update Counter components from using 'color=\"default\"' to the new 'color=\"primary\"' value.\n\nLANGUAGE: diff\nCODE:\n```\n- <Counter color=\"default\"> Hello </Counter>\n+ <Counter color=\"primary\"> Hello </Counter>\n```\n\n----------------------------------------\n\nTITLE: Alternative BottomSheet Header Implementation with Nested HeaderLeading Component\nDESCRIPTION: A more structured implementation of BottomSheet Header using nested HeaderLeading and HeaderTrailing components for better visual organization.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheetHeader>\n <BottomSheetHeaderLeading\n   title=\"\"\n   subtitle=\"\"\n   // future scope?\n   prefix={<AssetComponent />}\n   suffix={<BottomSheetCounter />}\n />\n <BottomSheetHeaderTrailing visual={Badge | IconButton | Link} />\n // OR\n <BottomSheetHeaderTrailing>Badge | IconButton | Link</BottomSheetHeaderTrailing>\n</BottomSheetHeader>\n\n<BottomSheet onCloseButtonClick={}>\n\n</BottomSheet>\n\n// about this simple API?\n<BottomSheetHeader\n    title=\"\" // since there is only one title and we control the rendering so this should be fine?\n    subtitle=\"\"\n    prefix={<AssetComponent />}\n    suffix={<BottomSheetCounter />}\n    trailingVisual={}\n    showBackButton={}\n    onBackButtonClick={() => {}}\n  />\n```\n\n----------------------------------------\n\nTITLE: Replacing intent prop with color prop in Indicator Component\nDESCRIPTION: Shows how to update Indicator components from using the 'intent' prop to the 'color' prop, with status values mapping directly.\n\nLANGUAGE: diff\nCODE:\n```\n- <Indicator intent=\"positive|negative|information|notice|neutral\" />\n+ <Indicator color=\"positive|negative|information|notice|neutral\" />\n\n- <Indicator intent=\"positive|negative|information|notice|neutral\"> Hello </Indicator>\n+ <Indicator color=\"positive|negative|information|notice|neutral\"> Hello </Indicator>\n```\n\n----------------------------------------\n\nTITLE: Implementing iOS Safari Compatibility Fix for BottomSheet and SpotlightPopoverTour\nDESCRIPTION: CSS fix for iOS Safari height calculation bug when using BottomSheet or SpotlightPopoverTour components. Prevents page content from getting clipped by setting explicit dimensions on the body element.\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Proposed BottomSheet Header Implementation with Nested Components\nDESCRIPTION: An implementation pattern for BottomSheet Header showing how it can be used within a BottomSheet component, including title, subtitle, and additional visual elements.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheet onClose={()={}}>\n    <BottomSheetHeader\n      title=\"\" // since there is only one title and we control the rendering so this should be fine?\n      subtitle=\"\"\n      prefix={<AssetComponent />}\n      suffix={<BottomSheetCounter />}\n      trailing={}\n      showBackButton={}\n      onBackButtonClick={() => {}}\n    />\n</BottomSheet>;\n```\n\n----------------------------------------\n\nTITLE: FileUpload Component Behavior Note\nDESCRIPTION: Explanation of how the onChange handler behaves when a file is removed from the FileUpload component.\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n>\n> Previously, onChange did not provide an updated value when a file was removed. Now, when a file is removed from FileUpload, onChange will return the updated value.\n```\n\n----------------------------------------\n\nTITLE: Replacing variant prop with color prop in Badge Component\nDESCRIPTION: Shows how to update Badge components from using the 'variant' prop to the 'color' prop, with mapping between old and new values.\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge variant=\"blue\"> Hello </Badge>\n+ <Badge color=\"primary\"> Hello </Badge>\n\n- <Badge variant=\"positive|negative|information|notice|neutral\"> Hello </Badge>\n+ <Badge color=\"positive|negative|information|notice|neutral\"> Hello </Badge>\n```\n\n----------------------------------------\n\nTITLE: Migrating Overlay Background Token in Blade\nDESCRIPTION: Shows how to migrate from the deprecated theme.colors.overlay.background token to the new theme.colors.surface.overlay.background[800] token.\n\nLANGUAGE: diff\nCODE:\n```\n- background={theme.colors.overlay.background}\n+ background={theme.colors.surface.overlay.background[800]}\n```\n\n----------------------------------------\n\nTITLE: Using Blade Design Tokens with styled-components\nDESCRIPTION: Demonstrates how to utilize Blade design tokens in styled-components. Shows the correct approach to reference color tokens from the theme rather than hardcoding values, ensuring consistency with the design system.\n\nLANGUAGE: jsx\nCODE:\n```\nconst StyledCard = styled.div(\n  ({ theme }: { theme: Theme }) => `\n    width: 368px;\n    background-color: ${theme.colors.surface.background.gray.moderate};\n`,\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing contrast prop with emphasis prop in Counter Component\nDESCRIPTION: Examples showing how to migrate from the removed 'contrast' prop to the new 'emphasis' prop in the Counter component.\n\nLANGUAGE: diff\nCODE:\n```\n- <Counter contrast=\"low\"> Hello </Counter>\n+ <Counter emphasis=\"subtle\"> Hello </Counter>\n\n- <Counter contrast=\"high\"> Hello </Counter>\n+ <Counter emphasis=\"intense\"> Hello </Counter>\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet Header Component in JSX\nDESCRIPTION: A complete implementation of the BottomSheet Header component showing all available props including title, subtitle, leading/trailing elements, and back button functionality.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheetHeader\n  title=\"\"\n  subtitle=\"\"\n  leading={<AssetComponent />}\n  trailing={<BottomSheetCounter />}\n  titleSuffix={<BottomSheetCounter />}\n  showBackButton={true}\n  onBackButtonClick={() => {}}\n  hideDivider={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Blade-Old Layout Pattern Example\nDESCRIPTION: Example of how layouts were handled in the deprecated blade-old system using enhancer components like Space and View.\n\nLANGUAGE: tsx\nCODE:\n```\n<Space padding={[2.5, 0, 5, 0]}>\n  <View>\n    <Heading>Account Blocked</Heading>\n  </View>\n</Space>\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeExplorer Component with JSONTree\nDESCRIPTION: Creates a ThemeExplorer component that accesses the current theme via useTheme hook and displays it using JSONTree. Includes custom rendering for color values that shows color swatches alongside their HSLA values.\n\nLANGUAGE: JSX\nCODE:\n```\nexport const ThemeExplorer = () => {\n  const { theme } = useTheme();\n  return (\n    <Box paddingX=\"spacing.5\" paddingY=\"spacing.2\" backgroundColor=\"surface.background.gray.moderate\">\n      <JSONTree\n        data={theme}\n        hideRoot\n        valueRenderer={(valueAsString, value) => {\n          if (value?.startsWith?.('hsla')) {\n            return (\n              <Box display=\"inline-flex\" gap=\"spacing.5\">\n                <div style={{ backgroundColor: value, height: '20px', width: '20px' }} />\n                <Text>{value}</Text>\n              </Box>\n            );\n          }\n          return <Text display=\"inline\">{value}</Text>;\n        }}\n        theme={{\n          scheme: 'Material Lighter',\n          base00: theme.colors.surface.background.gray.moderate,\n          base01: '#f0f0f1',\n          base02: '#e5e5e6',\n          base03: theme.colors.surface.text.gray.muted,\n          base04: '#696c77',\n          base05: '#383a42',\n          base06: '#202227',\n          base07: '#090a0b',\n          base08: '#ca1243',\n          base09: '#d75f00',\n          base0A: '#c18401',\n          base0B: theme.colors.feedback.text.positive.intense,\n          base0C: '#0184bc',\n          base0D: theme.colors.interactive.text.primary.default,\n          base0E: '#a626a4',\n          base0F: '#986801',\n        }}\n      />\n    </Box>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: OTPInput Migration for Fluid Width Implementation\nDESCRIPTION: Code modification to maintain existing UI when migrating to the new fluid-width OTPInput component. This involves wrapping the OTPInput with a Box component and setting a maxWidth based on the otpLength.\n\nLANGUAGE: diff\nCODE:\n```\n+ <Box maxWidth='256px' />\n  <OTPInput label='Enter OTP' otpLength={6} />\n+ </Box>\n```\n\n----------------------------------------\n\nTITLE: Implementing useSx Hook for Custom Component Styling in Blade\nDESCRIPTION: This snippet demonstrates how to use the hypothetical useSx hook for styling components that aren't directly accessible, such as FlatList's contentContainerStyle. The hook returns a function that accepts the same properties as the sx prop.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSx } from '@razorpay/blade/utils';\n\n// ...\n\nconst sx = useSx();\n\nreturn (\n  <>\n    <CustomHeader style={sx({ marginBottom: 'spacing.2' })} />\n    <FlatList\n      contentContainerStyle={sx({ marginX: 'spacing.1' })}\n      data={data}\n      renderItem={renderItem}\n    />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Using makeSpace with Styled Components in React\nDESCRIPTION: Example showing how to use the makeSpace utility within a styled component to convert a theme spacing token into pixel units for padding.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeSpace } from '@razorpay/blade/utils';\nimport styled from 'styled-components';\n\nconst CustomComponent = styled.div`\n  padding: ${({ theme }) => makeSpace(theme.spacing[2])}; // 4px\n`;\n```\n\n----------------------------------------\n\nTITLE: Replacing contrast prop with color prop in Spinner Component\nDESCRIPTION: Examples showing how to migrate from the removed 'contrast' prop to specific 'color' prop values in the Spinner component.\n\nLANGUAGE: diff\nCODE:\n```\n- <Spinner contrast=\"low\" />\n+ <Spinner color=\"primary\" />\n\n- <Spinner contrast=\"high\" />\n+ <Spinner color=\"white\" />\n```\n\n----------------------------------------\n\nTITLE: Import Pattern 1: Individual Component Imports\nDESCRIPTION: Example of importing individual components from multi-package structure, where each component is its own package.\n\nLANGUAGE: javascript\nCODE:\n```\n/* multi-package */\nimport Button from '@razorpay-blade/Button' \nimport Text from '@razorpay-blade/Text'\nimport overrideTheme from '@razorpay-blade/overrideTheme'\nimport paymentTheme from '@razorpay-blade/paymentTheme'\nimport getColorScheme from '@razorpay-blade/getColorScheme'\nimport useColorScheme from '@razorpay-blade/useColorScheme'\n```\n\n----------------------------------------\n\nTITLE: Rendering Conditional UI Components in React\nDESCRIPTION: This code snippet shows a conditional rendering pattern for either a BottomSheet with footer or a DropdownOverlay with ActionList. It's part of a Dropdown component implementation that changes its UI based on some condition.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheetFooter />\n        </BottomSheet>\n      ) : (\n        <DropdownOverlay>\n          <ActionList />\n        </DropdownOverlay>\n      )}\n    </Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet with ActionList-like API (Second Proposal)\nDESCRIPTION: Second API proposal for BottomSheet that follows a structure more similar to ActionList component. This implementation simplifies the header and footer APIs by using props instead of nested components.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheet isOpen={boolean} snapPoints={[]}>\n  <BottomSheetHeader \n\t\ttitle=\"Payment Links\"\n\t\tleading={<BottomSheetHeaderIcon icon={HistoryIcon} />}\n\t\ttrailing={<Link>Clear</Link>}\n\t/>\n\t<BottomSheetBody>any content</BottomSheetBody>\n  <BottomSheetFooter\n    title=\"Footer Title\"\n    leading={<ActionListFooterIcon icon={DocIcon} />}\n    trailing={{ //<- confirm if this BottomSheet Footer should be 2 buttons or anything else?\n      primary: { text: 'Apply' },\n      secondary: { text: 'Cancel' },\n    }}\n  />\n</BottomSheet>\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Blade Design System\nDESCRIPTION: Example of how consumers should be able to import and use Blade components and utilities without overhead.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button, Text } from '@razorpay/blade/components'\nimport { overrideTheme, paymentTheme } from '@razorpay/blade/theme'\nimport { getColorScheme, useColorScheme } from '@razorpay/blade/utils'\n```\n\n----------------------------------------\n\nTITLE: Final Recommended Dropdown-BottomSheet Composition\nDESCRIPTION: The finalized approach for composing Dropdown with BottomSheet for mobile views without lazy loading, maintaining component independence.\n\nLANGUAGE: jsx\nCODE:\n```\n<Dropdown selectionType={selectionType}>\n  <SelectInput label=\"Select Action\" />\n  {isMobile ? (\n    <BottomSheet>\n      <BottomSheetHeader  />\n      <BottomSheetBody>\n        <ActionList /> <-- works as expected\n      </BottomSheetBody>\n```\n\n----------------------------------------\n\nTITLE: Razorsharp Changelog in Markdown\nDESCRIPTION: A changelog document tracking versions 1.0.1 and 1.0.2 of the razorsharp package. Version 1.0.2 includes bug fixes for justifyContent, alignItems, and color tokens, along with algorithm improvements. Version 1.0.1 adds support for running razorsharp in development mode.\n\nLANGUAGE: markdown\nCODE:\n```\n# razorsharp\n\n## 1.0.2\n\n### Patch Changes\n\n- a98452ea: - Fix bug with justifyContent and alignItems generating incorrect values\n  - Fix bug with incorrect value of color tokens getting generated\n  - Improve algo that generates width, height, maxWidth, maxHeight, and flex grow properties\n\n## 1.0.1\n\n### Patch Changes\n\n- b8e7b2ad: feat: run razorsharp in dev mode\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Layouts with Box Component in Blade\nDESCRIPTION: Example demonstrating responsive styling using the object-based format with breakpoints. This shows how to create a layout that changes from column to row orientation at larger screen sizes with varying gap spacing at different breakpoints.\n\nLANGUAGE: tsx\nCODE:\n```\n<Box\n  display=\"flex\"\n  flexDirection={{ base: 'column', l: 'row' }}\n  alignItems=\"center\"\n  marginTop=\"spacing.1\"\n  marginBottom=\"spacing.2\"\n  paddingX=\"spacing.1\"\n  gap={{ base: 'spacing.1', m: 'spacing.2', l: 'spacing.3' }}\n>\n  <Button>Button 1</Button>\n  <Button>Button 2</Button>\n  <Button>Button 3</Button>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Nesting ActionList within BottomSheet Implementation\nDESCRIPTION: Example of how ActionList can be nested within BottomSheet, demonstrating the draggable behavior of the BottomSheetBody which contains the ActionList component.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheet isOpen={boolean} snapPoints={[]}>\n  <BottomSheetBody> <-- draggable\n    <ActionList>\n\t\t\t<ActionListHeader />\n  </BottomSheetBody>\n</BottomSheet>\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Return Key Types Between Web and Native Platforms\nDESCRIPTION: A markdown table showing the equivalent keyboard return key type attributes for web (`enterkeyhint`) and native (`returnKeyType`) platforms.\n\nLANGUAGE: markdown\nCODE:\n```\n| Key Type            | Web                       | Native                                   |\n| ------------------- | ------------------------- | ---------------------------------------- |\n| <kbd>↵</kbd>        | `enterkeyhint=\"enter\"`    | `returnKeyType=\"default\"`                |\n| <kbd>go</kbd>       | `enterkeyhint=\"go\"`       | `returnKeyType=\"go\"`                     |\n| <kbd>Done</kbd>     | `enterkeyhint=\"done\"`     | `returnKeyType=\"done\"`                   |\n| <kbd>Next</kbd>     | `enterkeyhint=\"next\"`     | `returnKeyType=\"next\"`                   |\n| <kbd>Previous</kbd> | `enterkeyhint=\"previous\"` | `returnKeyType=\"previous\"`(android only) |\n| <kbd>Search</kbd>   | `enterkeyhint=\"search\"`   | `returnKeyType=\"search\"`                 |\n| <kbd>Send</kbd>     | `enterkeyhint=\"send\"`     | `returnKeyType=\"send\"`                   |\n```\n\n----------------------------------------\n\nTITLE: Mono-package Import Pattern in JavaScript\nDESCRIPTION: Example of importing components when using a mono-package strategy where all components exist within a single package with category-based imports.\n\nLANGUAGE: js\nCODE:\n```\n// package.json.name: \"@razorpay/blade\"\nimport { Button, Text } from '@razorpay/blade/components'\nimport { overrideTheme, paymentTheme } from '@razorpay/blade/tokens'\n```\n\n----------------------------------------\n\nTITLE: Composed Dropdown with Responsive Device Detection\nDESCRIPTION: Implementation showing how Dropdown can be combined with conditional rendering based on device type, using BottomSheet for mobile and DropdownOverlay for desktop.\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const { theme } = useTheme();\n  const { matchedDeviceType } = useBreakpoint({ breakpoints: theme.breakpoints });\n  const isMobile = matchedDeviceType === 'mobile';\n\n  return (\n    <Dropdown selectionType={selectionType}>\n      <SelectInput label=\"Select Action\" />\n      {isMobile ? (\n        <BottomSheet>\n          <BottomSheetHeader />\n          <BottomSheetBody>\n\t\t\t\t\t\t<ActionList />\n          </BottomSheetBody>\n          <BottomSheetFooter />\n        </BottomSheet>\n      ) : (\n        <DropdownOverlay>\n          <SelectContent />\n        </DropdownOverlay>\n      )}\n    </Dropdown>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Flexible Layout with Explicit Button Components in JSX\nDESCRIPTION: API 1 design approach for BaseHeader component with explicit button components. This approach offers more flexibility with back and close buttons as separate components, but is less restrictive as an internal component.\n\nLANGUAGE: jsx\nCODE:\n```\n<BaseHeader>\n  <BaseHeaderBackButton onClick={} />\n  <BaseHeaderLeading\n    title=\"\"\n    subtitle=\"\"\n    prefix={AssetComponent | BladeIcon}\n    suffix={<Counter />}\n  />\n  <BaseHeaderTrailing>Badge | IconButton | Link</BottomSheetHeaderTrailing>\n  <BaseHeaderCloseButton onClick={} />\n</BaseHeader>\n```\n\n----------------------------------------\n\nTITLE: Deprecated Accordion API Usage\nDESCRIPTION: Example of using the deprecated Accordion API approach with title and description props directly on AccordionItem rather than using separate header and body components.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Accordion, AccordionItem } from '@razorpay/blade';\n\n<Accordion showNumberPrefix defaultExpandedIndex={0}>\n  <AccordionItem\n    title=\"Can I create linked accounts using Route?\"\n    description=\"You can use Razorpay Route from the Dashboard or using APIs to transfer money to customers.\"\n  >\n    <div>Slot</div>\n  </AccordionItem>\n  <AccordionItem title=\"How can I transfer money to customers?\" description=\"Just use Razorpay\" />\n</Accordion>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Typography for Headings in CSS\nDESCRIPTION: CSS classes demonstrating how to scale typography for desktop and mobile devices with different font sizes and line heights for optimal readability.\n\nLANGUAGE: CSS\nCODE:\n```\n.headingXXL-Desktop {\n  line-height: 60px; /* (1.5) looks good on large screens */\n  font-size: 40px;\n}\n\n.headingXXL-Mobile {\n  line-height: 38px; /* (1.3) looks good on small screens */\n  font-size: 28px;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Layout Props Directly to Blade Components\nDESCRIPTION: Example showing how components themselves can accept layout props directly, eliminating the need for wrapper components.\n\nLANGUAGE: tsx\nCODE:\n```\n<Heading>Title</Heading>\n<Text marginTop=\"spacing.1\">Content</Text>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Breadcrumb Component in JSX\nDESCRIPTION: Demonstrates the fundamental implementation of the Breadcrumb component with three linked items, where the last item is marked as the current page.\n\nLANGUAGE: jsx\nCODE:\n```\n<Breadcrumb size=\"small\" color=\"primary\">\n  <BreadcrumbItem href=\"/\">Home</BreadcrumbItem>\n  <BreadcrumbItem href=\"/dashboard\">Dashboard</BreadcrumbItem>\n  <BreadcrumbItem href=\"/settlements\" isCurrentPage>Settlements</BreadcrumbItem>\n</Breadcrumb>\n```\n\n----------------------------------------\n\nTITLE: Implementing TabNav with JSX and Metadata API in React\nDESCRIPTION: This approach uses a compound-like API where metadata is passed to TabNavItem components to render overflowing items. It's less verbose and familiar, but creates odd indirection in data flow where overflowMetadata is indirectly passed to overflowingItems.\n\nLANGUAGE: jsx\nCODE:\n```\nconst { overflowingItems, setOverflowingItems } = React.useState([]);\n\n<TabNav>\n  <TabNavItems\n    onOverflow={(items) => {\n      setOverflowingItems(items);\n    }}\n  >\n    <TabNavItemLink icon={HomeIcon} accessibilityLabel=\"Home\" href=\"/home\" />\n    <TabNavItemLink title=\"Payroll\" href=\"/payroll\" />\n    <TabNavItemLink\n      title=\"Payments\"\n      href=\"/payments\"\n      icon={MagicCheckoutIcon}\n      // this meta data will be passed to `items` array\n      overflowMetadata={{\n        icon: MagicCheckoutIcon,\n        href: '/payment',\n        title: 'Payments',\n        description: 'Some product description',\n      }}\n    />\n  </TabNavItems>\n  <Menu>\n    <TabNavItemLink title=\"More\" trailing={<ChevronDownIcon />} />\n    <MenuOverlay>\n      // render the overflowing items\n      {overflowingItems.map((item) => {\n        return (\n          <MenuItem key={item.title}>\n            <ExploreItem icon={item.icon} title={item.title} description={item.description} />\n          </MenuItem>\n        );\n      })}\n      <MenuItem>\n        <ExploreItem\n          icon={MagicCheckoutIcon}\n          title=\"Magic Checkout\"\n          description=\"Some product description\"\n        />\n      </MenuItem>\n      <MenuItem>\n        <ExploreItem icon={RazorXIcon} title=\"RazorX\" description=\"Some product description\" />\n      </MenuItem>\n    </MenuOverlay>\n  </Menu>\n</TabNav>\n```\n\n----------------------------------------\n\nTITLE: Creating Typography Component for Displaying Token Values in React\nDESCRIPTION: Defines a Typography component that displays tables of typography tokens including font family, font weight, and font size. The component uses the useTheme hook to access the current theme and displays each token with its corresponding value.\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Typography = () => {\n  const { theme } = useTheme();\n  return (\n    <>\n      <h3>Font Family</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Token Name</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(theme.typography.fonts.family).map(([key, value]) => (\n            <tr key={key}>\n              <td>{`theme.typography.fonts.family.${key}`}</td>\n              <td>{value}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <h3>Font Weight</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Token Name</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(theme.typography.fonts.weight).map(([key, value]) => (\n            <tr key={key}>\n              <td>{`theme.typography.fonts.weight.${key}`}</td>\n              <td>{value}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <h3>Font Size</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Token Name</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(theme.typography.fonts.size).map(([key, value]) => (\n            <tr key={key}>\n              <td>{`theme.typography.fonts.size.${key}`}</td>\n              <td style={{ fontSize: makeTypographySize(value), padding: '16px' }}>\n                Era of rising Fintech\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Validation States for Checkbox Component in React TSX\nDESCRIPTION: Example showing how to implement validation states in the Checkbox component, demonstrating how validationState prop passes aria-invalid attributes for accessibility.\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox validationState={'error' | 'none'}>is blade awesome?</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Defining TabNav and TabNavItem Types in TypeScript\nDESCRIPTION: TypeScript interface definitions for the old TabNav and TabNavItem components, showing the props structure for the compound component API. This includes support for hyperlinks, active states, icons, and accessibility options.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TabNav = {\n  children: React.ReactNode;\n};\n\ntype TabNavItem = {\n  /**\n   * href of the link\n   */\n  href?: LinkProps['href'];\n  /**\n   * Anchor tag `target` attribute\n   */\n  target?: LinkProps['target'];\n  /**\n   * as prop to pass ReactRouter's Link component.\n   *\n   * @default 'a'\n   *\n   * @example\n   * ```jsx\n   * import { Link } from 'react-router-dom';\n   *\n   * <TabNavItem as={Link} />\n   * ```\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  as: React.ComponentType<any>;\n  /**\n   * Selected state of the navigation item.\n   *\n   * @default false\n   */\n  isActive?: boolean;\n  /**\n   * Element to render before the navigation item.\n   *\n   * @default undefined\n   */\n  leading?: IconComponent;\n  /**\n   * Element to render inside the navigation item.\n   *\n   * This can either be a string or JSX element (eg: Menu component)\n   */\n  children?: React.ReactNode;\n  /**\n   * Accessibility label for the navigation item.\n   */\n  accessibilityLabel?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Alternative API with Separate OrderedList and UnorderedList Components\nDESCRIPTION: Alternative API approach using separate OrderedList and UnorderedList components instead of a single List component with variants. This approach was not chosen due to discoverability concerns.\n\nLANGUAGE: jsx\nCODE:\n```\n<UnorderedList icon={InfoIcon} size='medium'>\n  <ListItem icon={EditIcon}>\n    Item 1\n    <OrderedList variant='filled'>\n      <ListItem>\n        Item 1.1\n        <OrderedList>\n          <ListItem>\n            Item 1.1.1\n          <ListItem/>\n        <OrderedList />\n      <ListItem/>\n    <OrderedList />\n  <ListItem/>\n  <ListItem>\n    Item 2\t\t\n  <ListItem/>\n</UnorderedList>\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration for TypeScript Declaration Bundling\nDESCRIPTION: Configuration for bundling TypeScript declaration files using rollup-plugin-dts. This setup takes declaration files from the build/types directory and bundles them to match the library's output structure.\n\nLANGUAGE: javascript\nCODE:\n```\n// `exportCategory` could be one of `components`, `tokens` or `utils`\nconst config = {\n  input: `build/types/${exportCategory}/index.d.ts`,\n  output: [\n    {\n      file: `build/${exportCategory}/index.d.ts`,\n      format: 'esm',\n    },\n  ],\n  plugins: [pluginDeclarations()],\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled CheckboxGroup Examples in React TSX\nDESCRIPTION: Implementation examples showing the difference between controlled and uncontrolled CheckboxGroup components, with the controlled version using React state to manage selected values.\n\nLANGUAGE: tsx\nCODE:\n```\nconst Controlled = () => {\n  const [selected, setSelected] = React.useState(['anurag', 'kamlesh']);\n\n  return (\n    <CheckboxGroup \n      label=\"Developers (controlled)\" \n      value={selected} \n      onChange={setSelected}\n    >\n      <Checkbox value=\"anurag\">Anurag</Checkbox>\n      <Checkbox value=\"kamlesh\">Kamlesh</Checkbox>\n      <Checkbox value=\"chaitanya\">Chaitanya</Checkbox>\n    </CheckboxGroup>\n  );\n};\n\nconst Uncontrolled = () => {\n  return (\n    <CheckboxGroup\n      label=\"Developers (uncontrolled)\"\n      defaultValue={['anurag', 'chaitanya']}\n    >\n      <Checkbox value=\"anurag\">Anurag</Checkbox>\n      <Checkbox value=\"kamlesh\">Kamlesh</Checkbox>\n      <Checkbox value=\"chaitanya\">Chaitanya</Checkbox>\n    </CheckboxGroup>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component to Display Spacing Token Visualization\nDESCRIPTION: Defines a Spacing component that accesses theme values via the useTheme hook and renders a table displaying all spacing tokens. Each token is visualized with a colored div sized according to the token value using the makeSpace utility.\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Spacing = () => {\n  const { theme } = useTheme();\n  return (\n    <table>\n      <tbody>\n        {Object.entries(theme.spacing).map(([key, value]) => (\n          <tr key={key}>\n            <td>{`theme.spacing.${key}`}</td>\n            <td>\n              <div\n                style={{\n                  height: makeSpace(value),\n                  width: makeSpace(value),\n                  backgroundColor: 'rgba(223, 135, 0, 0.18)',\n                }}\n              />\n            </td>\n            <td>{value}px</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing TabNav with Responsive Items in JSX\nDESCRIPTION: Example of using TabNav with responsive navigation items that automatically handle overflow into a 'More' menu. This component uses render props pattern to provide access to both visible items and overflowing items for custom rendering.\n\nLANGUAGE: jsx\nCODE:\n```\n<TabNav\n  items={[\n    { href: '/home', title: 'Home' },\n    { href: '/payroll', title: 'Payroll' },\n    { href: '/payments', title: 'Payments' },\n    {\n      href: '/rize',\n      title: 'rize',\n      description: 'rize description',\n      icon: RizeIcon,\n      // force this item to always be inside \"more\" regardless of screen size\n      isAlwaysOverflowing: true,\n    },\n  ]}\n>\n  {({ items, overflowingItems }) => {\n    return (\n      <>\n        <TabNavItems>\n          {items.map((item) => (\n            <TabNavItem title={item.title} href={item.href} />\n          ))}\n        </TabNavItems>\n        <Menu>\n          <TabNavItem title=\"More\" />\n          {overflowingItems.map((item) => {\n            return (\n              <MenuItem key={item.title}>\n                <CustomExploreItem\n                  icon={item.icon}\n                  title={item.title}\n                  description={item.description}\n                />\n              </MenuItem>\n            );\n          })}\n        </Menu>\n      </>\n    );\n  }}\n</TabNav>\n```\n\n----------------------------------------\n\nTITLE: Calendar Props Type Definition\nDESCRIPTION: TypeScript interface for the Calendar component used within DatePicker. Defines properties for selection mode, date ranges, presets, and calendar navigation controls.\n\nLANGUAGE: ts\nCODE:\n```\ntype PickerType = 'date' | 'month' | 'year';\ntype DateRange = [Date, Date];\ntype Preset = {\n  /**\n   * Label for the preset\n   *\n   * @example 'Last 7 days'\n   */\n  label: string;\n  /**\n   * Value can be a range of dates\n   *\n   * @example with range selection\n   * (date) => [dayjs().subtract(7, 'day'), dayjs()]\n   */\n  value: (date: Date) => DateRange;\n};\n\ntype CalendarProps = {\n  /**\n   * Sets the selection mode of the calendar\n   * @default 'single'\n   */\n  selectionType: 'single' | 'range';\n  /**\n   * Sets the picker type\n   * @default 'date'\n   */\n  picker: PickerType;\n  onPickerChange: (picker: PickerType) => void;\n\n  // Standard controlled/uncontrolled state props\n  value: Date | DateRange;\n  defaultValue: Date | DateRange;\n  onChange: (value: Date | DateRange) => void;\n\n  /**\n   * Defines presets for the date range picker\n   *\n   * @example with range selection\n   * [\n   *   { label: 'Last 7 days', value: (date) => [dayjs(date).subtract(7, 'day'), date] },\n   *   { label: 'Last month', value: (date) => [dayjs(date).subtract(1, 'month'), date] },\n   * ]\n   */\n  presets: Preset[];\n  /**\n   * Sets the first day of the week in the calendar.\n   *\n   * 0-6 (0=Sunday, 1=Monday, etc.)\n   * @default 1\n   */\n  firstDayOfWeek: number;\n  /**\n   * Sets the minimum date that can be selected.\n   */\n  minDate?: Date;\n  /**\n   * Sets the maximum date that can be selected.\n   */\n  maxDate?: Date;\n  /**\n   * Determines whether single date can be selected as range, applicable only when type=\"range\"\n   * @default false\n   */\n  allowSingleDateInRange?: boolean;\n  /**\n   * Sets the locale for the calendar.\n   *\n   * @default 'en'\n   */\n  locale?: string;\n\n  /**\n   * Callback which is called whenever the next button is clicked.\n   *\n   * @param date - The updated date.\n   * @param type - The level of the calendar. (\"month\" | \"year\" | \"decade\")\n   */\n  onNext?: ({ date, type }: { date: Date; type: Level }) => void;\n  onPrevious?: ({ date, type }: { date: Date; type: Level }) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Elevation Tokens Demonstration Component\nDESCRIPTION: Creates a component that demonstrates all available elevation tokens in the Blade design system. The component renders a table that displays each elevation token name alongside a visual representation of its shadow effect, applying the actual shadow values from the theme to show how they appear.\n\nLANGUAGE: JSX\nCODE:\n```\nexport const Elevation = () => {\n  const { theme } = useTheme();\n  return (\n    <table>\n      <tbody>\n        {Object.entries(theme.elevation).map(([key, value]) => (\n          <tr\n            key={key}\n            style={{\n              backgroundColor: theme.colors.surface.background.gray.moderate,\n            }}\n          >\n            <td\n              style={{ color: theme.colors.surface.text.gray.normal }}\n            >{`theme.elevation.${key}`}</td>\n            <td style={{ padding: '20px' }}>\n              <div\n                style={{\n                  width: '100px',\n                  height: '100px',\n                  backgroundColor: '#fff',\n                  borderRadius: '8px',\n                  boxShadow: `${value}`,\n                }}\n              />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Non-Hierarchical List with Level Props\nDESCRIPTION: Alternative API approach using level props to define the hierarchy, which was rejected for being unintuitive and difficult to visually parse.\n\nLANGUAGE: jsx\nCODE:\n```\n<List variant='ordered'>\n  <ListItem level='1'>\n    Item 1\n  <ListItem/>\n  <ListItem level='2'>\n    Item 1.1\n  <ListItem/>\n  <ListItem level='2'>\n    Item 1.2\n  <ListItem/>\n  <ListItem level='3'>\n    Item 1.2.1\n  <ListItem/>\n  <ListItem level='1'>\n    Item 2\t\t\n  <ListItem/>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Package.json Exports Map Configuration\nDESCRIPTION: JSON configuration for the exports field in package.json that defines subpath exports with platform-specific entry points for web and React Native. This configuration enables cleaner imports without the '/build' path.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./components\": {\n      \"react-native\": \"./build/components/index.native.js\",\n      \"default\": \"./build/components/index.web.js\"\n    },\n    \"./tokens\": {\n      \"react-native\": \"./build/tokens/index.native.js\",\n      \"default\": \"./build/tokens/index.web.js\"\n    },\n    \"./utils\": {\n      \"react-native\": \"./build/tokens/index.native.js\",\n      \"default\": \"./build/tokens/index.web.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SelectInput Component TypeScript Interface\nDESCRIPTION: TypeScript definition for SelectInput component props, extending from FormLabel and FormValidation properties with additional icon property.\n\nLANGUAGE: ts\nCODE:\n```\ntype SelectInputProps = {\n  // ... FormLabelProps like `label`, `labelPosition`\n  // ... FormValidationProps like `validationState`, `helpText`, `errorText`, etc.\n  // ... State Props like `isRequired`, `isDisabled`,\n  icon: IconComponent;\n};\n```\n\n----------------------------------------\n\nTITLE: Active BottomNavItem Implementation\nDESCRIPTION: Demonstrates how to set a navigation item as active/selected using the isActive property.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomNavItem\n  title=\"Payments\"\n  as={NavLink}\n  icon={AcceptPaymentsIcon}\n  href=\"/payments\"\n  // sets item as active\n  isActive\n/>\n```\n\n----------------------------------------\n\nTITLE: Definition of makeMotionTime Utility for React Native\nDESCRIPTION: Type signature for the makeMotionTime utility function in React Native applications. The function takes a numeric size parameter and returns it as a number.\n\nLANGUAGE: tsx\nCODE:\n```\nconst makeMotionTime = (size: number) => number;\n```\n\n----------------------------------------\n\nTITLE: Using ActionListHeader Component in React JSX\nDESCRIPTION: Example of implementing the ActionListHeader component with a title and a leading icon. This component serves as the header for the ActionList.\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionListHeader title=\"Recent Searches\" leading={<ActionListHeaderIcon icon={HistoryIcon} />} />\n```\n\n----------------------------------------\n\nTITLE: Basic BottomNav Usage\nDESCRIPTION: Simple example of BottomNav component usage with children placeholder.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomNav>{/* children */}</BottomNav>\n```\n\n----------------------------------------\n\nTITLE: Category-Based Import Examples\nDESCRIPTION: Comparison between category-based imports and root package imports, highlighting the organizational benefits.\n\nLANGUAGE: javascript\nCODE:\n```\n// every import statement is meaningful and consumers will be able to \nimport { Button, Text } from '@razorpay/blade/components'\nimport { overrideTheme, paymentTheme } from '@razorpay/blade/theme'\nimport { getColorScheme, useColorScheme } from '@razorpay/blade/utils'\n\nimport { Button, Text, overrideTheme, paymentTheme, getColorScheme, useColorScheme } from '@razorpay/blade'\n```\n\n----------------------------------------\n\nTITLE: Multi-package Import Pattern in JavaScript\nDESCRIPTION: Example of importing components when using a multi-package strategy where each component has its own package and versioning.\n\nLANGUAGE: js\nCODE:\n```\n// package.json.name: \"@razorpay-blade/button\" \nimport Button from '@razorpay-blade/button'\n\n// package.json.name: \"@razorpay-blade/text\" \nimport Text from '@razorpay-blade/text'\n\n// package.json.name: \"@razorpay-blade/tokens\" \nimport { overrideTheme, paymentTheme } from '@razorpay-blade/tokens'\n```\n\n----------------------------------------\n\nTITLE: FileUpload Component Type Definitions in TypeScript\nDESCRIPTION: TypeScript interface definitions for the FileUpload component, including BladeFile interface that extends the native File type, BladeFileList type, and various props interfaces for the component with their descriptions.\n\nLANGUAGE: typescript\nCODE:\n```\n// Check the File type from MDN for more details: https://developer.mozilla.org/en-US/docs/Web/API/File\ninterface BladeFile extends File {\n  /**\n   * The unique identifier of the file.\n   */\n  id: string;\n  /**\n   * The file's upload status.\n   */\n  status?: 'uploading' | 'success' | 'error';\n  /**\n   * The percentage of file upload completion.\n   */\n  uploadPercent?: number;\n  /**\n   * Text indicating an error state\n   */\n  errorText?: string;\n}\n\ntype BladeFileList = BladeFile[];\n\ntype FileUploadCommonProps = {\n  /**\n   * Position of the label relative to the file upload area. Desktop only prop. Default value on mobile will be 'top'\n   *\n   * @default 'top'\n   */\n  labelPosition?: 'top' | 'left';\n  /**\n   * Defines the selection behavior of the FileUpload component\n   */\n  uploadType?: 'single' | 'multiple';\n  /**\n   * File types that can be accepted. See [input's accept attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)\n   *\n   * Usage: accept=\".jpg, .png, .pdf\", accept=\"image/*\", accept=\"image/png, image/jpeg, application/pdf\"\n   */\n  accept?: string;\n  /**\n   * Disables or enables the FileUpload component\n   */\n  isDisabled?: boolean;\n  /**\n   * Sets the required state of the file input\n   *\n   * @default false\n   */\n  isRequired?: boolean;\n  /**\n   * Renders a necessity indicator after the label. If `isRequired` is `true`, it defaults to `'required'`\n   */\n  necessityIndicator?: 'required' | 'optional' | 'none';\n  /**\n   * The name of the file upload input, [useful in form submissions](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)\n   */\n  name?: string;\n  /**\n   * List of files that have been selected/uploaded, useful when the component is controlled\n   */\n  fileList?: BladeFileList;\n  /**\n   * Limit the number of files that can be uploaded\n   */\n  maxCount?: number;\n  /**\n   * Maximum size per file (in bytes)\n   */\n  maxSize?: number;\n  /**\n   * Callback function triggered when files are selected\n   */\n  onChange?: ({ name, fileList }: { name?: string; fileList: BladeFileList }) => void;\n  /**\n   * Callback function triggered when the preview icon is clicked\n   */\n  onPreview?: ({ file }: { file: File }) => void;\n  /**\n   * Callback function triggered when a file is removed\n   */\n  onRemove?: ({ file }: { file: File }) => void;\n  /**\n   * Callback function triggered when a file upload is dismissed\n   */\n  onDismiss?: ({ file }: { file: File }) => void;\n  /**\n   * Callback function executed when files are dropped into the upload area\n   */\n  onDrop?: ({ name, fileList }: { name: string; fileList: BladeFileList }) => void;\n  /**\n   * State indicating whether there is an error in the FileUpload component\n   */\n  validationState?: 'none' | 'error';\n  /**\n   * Additional text providing assistance or guidance\n   */\n  helpText?: string;\n  /**\n   * Text indicating an error state\n   */\n  errorText?: string;\n  /**\n   * Test ID for automation\n   */\n  testID?: string;\n};\n\n/*\n  Mandatory accessibilityLabel prop when label is not provided\n*/\ntype FileUploadPropsWithA11yLabel = {\n  /**\n   * Label to be shown for the input field\n   */\n  label?: undefined;\n  /**\n   * Accessibility label for the input\n   */\n  accessibilityLabel: string;\n};\n\n/*\n  Optional accessibilityLabel prop when label is provided\n*/\ntype FileUploadPropsWithLabel = {\n  /**\n   * Label to be shown for the input field\n   */\n  label: string;\n  /**\n   * Accessibility label for the input\n   */\n  accessibilityLabel?: string;\n};\n\ntype FileUploadProps = (FileUploadPropsWithA11yLabel | FileUploadPropsWithLabel) &\n  FileUploadCommonProps;\n```\n\n----------------------------------------\n\nTITLE: SubMenu Example in JSX\nDESCRIPTION: Demonstrates how to implement nested menus by using a MenuItem as the trigger for a submenu.\n\nLANGUAGE: jsx\nCODE:\n```\n<Menu>\n  <Button>Edit</Button>\n  <MenuOverlay>\n    <MenuItem title=\"Profile\" />\n    {/* You can nest menu and use MenuItem as trigger for the next submenu */}\n    <Menu>\n      <MenuItem title=\"Accounts\" />\n      <MenuOverlay>\n        <MenuItem title=\"Business Account\" />\n        <MenuItem title=\"Personal Account\" />\n      </MenuOverlay>\n    </Menu>\n  </MenuOverlay>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: SpotlightPopoverStep API Type Definition in TypeScript\nDESCRIPTION: Defines the type structure for the SpotlightPopoverStep component which is used to wrap elements that need to be highlighted during a guided tour.\n\nLANGUAGE: jsx\nCODE:\n```\ntype SpotlightPopoverStepProps = {\n  /**\n   * Unique identifier/name for the tour step\n   *\n   * This should be the same as the `name` prop of the element inside the `steps` array of the `SpotlightPopover` component\n   */\n  name: string\n  /**\n   * React children with a single child which exposes a ref\n   */\n  children: React.ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Long Running Import\nDESCRIPTION: Example of a potentially verbose import statement when importing many items from the root package.\n\nLANGUAGE: javascript\nCODE:\n```\n// example of long running import\nimport { Button, Text, overrideTheme, paymentTheme, getColorScheme, useColorScheme } from '@razorpay/blade'\n```\n\n----------------------------------------\n\nTITLE: Import Pattern 4: Direct Component Imports\nDESCRIPTION: Example of directly importing specific components from their exact paths within categories.\n\nLANGUAGE: javascript\nCODE:\n```\n/* mono-package with per category per component import */\nimport Button from '@razorpay/blade/components/Button'\nimport Text from '@razorpay/blade/components/Text'\nimport paymentTheme from '@razorpay/blade/theme/paymentTheme'\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal StepGroup Orientation\nDESCRIPTION: Simple example showing how to set a StepGroup to horizontal orientation instead of the default vertical layout.\n\nLANGUAGE: jsx\nCODE:\n```\n<StepGroup orientation=\"horizontal\">{/* StepItem components */}</StepGroup>\n```\n\n----------------------------------------\n\nTITLE: List API with Boolean isOrderedFilled Property\nDESCRIPTION: Originally proposed API approach using isOrderedFilled as a boolean property instead of a separate variant value. This approach was ultimately not chosen.\n\nLANGUAGE: jsx\nCODE:\n```\n<List variant='unordered' icon={InfoIcon} size='medium'>\n  <ListItem icon={EditIcon}>\n    Item 1\n    <List variant='ordered'>\n      <ListItem>\n        Item 1.1\n        <List variant='ordered' isOrderedFilled={true}>\n          <ListItem>\n            Item 1.1.1\n          <ListItem/>\n        <List/>\n      <ListItem/>\n    <List/>\n  <ListItem/>\n  <ListItem>\n    Item 2\t\t\n  <ListItem/>\n</List>\n```\n\n----------------------------------------\n\nTITLE: MUI-inspired Hybrid Selection Approach in JSX\nDESCRIPTION: This snippet demonstrates a hybrid approach inspired by Material UI, where StepGroup manages selection state while individual StepItems handle their click events. This approach was also rejected due to potential ambiguity in nested structures.\n\nLANGUAGE: jsx\nCODE:\n```\n<StepGroup selected={selectedIndex}>\n  <StepItem onClick={() => setSelecteIndex(0)} />\n  <StepItem onClick={() => setSelecteIndex(1)} />\n</StepGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Documentation Meta for Blade Integration Guide\nDESCRIPTION: Configures the Storybook metadata for the Blade integration guide page, setting the title for navigation purposes in the Storybook sidebar.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n\n<Meta title=\"Guides/Integrations/Basic Examples\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Typography Documentation Layout with Button Link in React\nDESCRIPTION: Creates the documentation layout for typography tokens, including a heading, an explanatory note about using the tokens with makeTypographySize utility, and a button linking to the Figma design file.\n\nLANGUAGE: jsx\nCODE:\n```\n<Box paddingBottom=\"spacing.6\">\n  <Button\n    variant=\"tertiary\"\n    href=\"https://www.figma.com/file/5BZsOpNjbUHqgVh850yPBW/%5BResearch%5D-Typography-%26-Spacing-Refresh?type=design&node-id=101-99618&mode=design&t=KdVVWtntizpKmsBt-0\"\n    icon={ExternalLinkIcon}\n    target=\"_blank\"\n  >\n    {'View on Figma'}\n  </Button>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Styles with Pixel Units in CSS\nDESCRIPTION: Example of button styling using pixel (px) units for typography and layout properties. This shows absolute units that don't scale with user preferences.\n\nLANGUAGE: css\nCODE:\n```\nbutton {\n  font-size: 14px;\n  line-height: 16px;\n  padding: 8px;\n  margin: 2px;\n  min-height: 48px;\n  width: 200px;\n}\n```\n\n----------------------------------------\n\nTITLE: Stagger Component Props Interface Definition\nDESCRIPTION: This TypeScript interface defines the available props for the Stagger component, including visibility state and motion triggers that determine when the staggered animation should start.\n\nLANGUAGE: ts\nCODE:\n```\ntype StaggerProps = {\n  /**\n   * Visibility state\n   */\n  isVisible?: boolean;\n\n  /**\n   * What should trigger the motion\n   *\n   * @default ['mount']\n   */\n  motionTriggers: ('mount' | 'hover' | 'tap' | 'inView')[];\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Component Usage\nDESCRIPTION: Shows the simplest implementation of the Switch component with only a value prop.\n\nLANGUAGE: jsx\nCODE:\n```\n// basic\n<Switch value=\"dark-mode\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Title for Storybook Documentation\nDESCRIPTION: Defines the title for the Storybook documentation page that will appear in the navigation sidebar.\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Motion/Introduction to Motion\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Component for Typography Tokens Documentation in React\nDESCRIPTION: Sets up the Storybook Meta component for the Typography tokens page, configuring the documentation container to use BladeProvider with the appropriate theme and color scheme.\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta\n  title=\"Tokens/Typography\"\n  parameters={{\n    docs: {\n      container: ({ children, context }) => {\n        const colorScheme = context.store.globals.globals.colorScheme;\n        return (\n          <DocsContainer context={context}>\n            <BladeProvider key={colorScheme} themeTokens={bladeTheme} colorScheme={colorScheme}>\n              {children}\n            </BladeProvider>\n          </DocsContainer>\n        );\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectionChangeEvent Type for Table Selection in TypeScript\nDESCRIPTION: Defines the SelectionChangeEvent type as a function that handles table row selection changes. It receives an array of selected TableNode items.\n\nLANGUAGE: typescript\nCODE:\n```\ntype SelectionChangeEvent = (selectedItems: TableNode[]) => void;\n```\n\n----------------------------------------\n\nTITLE: Styling Button with px Units for Layout and Typography in CSS\nDESCRIPTION: CSS styling for a button using px units for both layout and typography. This approach ensures fixed dimensions regardless of browser font size settings or user preferences, maintaining consistent appearance across devices.\n\nLANGUAGE: css\nCODE:\n```\n.Button4 {\nmargin-bottom: 16px;\nmin-height: 48px;\nbackground: #3987f0;\nborder: 1px solid #3987f0;\nbox-sizing: border-box;\nborder-radius: 2px;\n\nmargin-bottom: 16px;\nmin-height: 48px;\npadding: 16px;\n}\n.Button4 > div {\ncolor: white;\nfont-size: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Blade Motion Presets with Components\nDESCRIPTION: Demonstrates how to use Blade motion presets with components. In this example, the Fade animation is applied to a Badge component to create an animated UI element.\n\nLANGUAGE: ts\nCODE:\n```\nimport { Fade, Badge } from '@razorpay/blade/components';\n\nfunction MyComponent() {\n  return (\n    <Fade>\n      <Badge color=\"positive\">Motion Approved</Badge>\n    </Fade>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Morph Component for Layout Animations\nDESCRIPTION: Example of the Morph component that enables smooth layout transitions between different UI states. Uses AnimatePresence from motion/react to handle mounting and unmounting of components.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AnimatePresence } from 'motion/react';\nimport { \n  Button, \n  Morph \n} from '@razorpay/blade/components';\n\n<AnimatePresence>\n{\n  isChatVisible ? (\n    <Morph layoutId=\"chat-interface\">\n      <ChatInterface />\n    </Morph>\n  ) : (\n    <Morph layoutId=\"chat-interface\">\n      <Button icon={RazorpayIcon} />\n    </Morph>\n  )\n}\n</AnimatePresence>\n```\n\n----------------------------------------\n\nTITLE: Alternative Tab API Implementation\nDESCRIPTION: An alternative API structure for tabs that was considered but not chosen. This approach uses a single Tab component instead of separate TabItem and TabPanel components.\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs>\n  <Tab title=\"Payments\" value=\"\" leading={} trailing={}>\n    <Text>Tab Panel Content For Payments</Text>\n  </Tab>\n  <Tab title=\"Refunds\" value=\"\" leading={} trailing={}>\n    <Text>Tab Panel Content For Refunds</Text>\n  </Tab>\n  <Tab title=\"Disputes\" value=\"\" leading={} trailing={}>\n    <Text>Tab Panel Content For Disputes</Text>\n  </Tab>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Using the useBreakpoint Hook in Blade for Responsive Design\nDESCRIPTION: Example of how to use the useBreakpoint hook from Blade's utilities to detect the current breakpoint and device type for implementing responsive behaviors in components.\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useBreakpoint } from '@razorpay/blade/utils';\n\nconst { matchedBreakpoint, matchedDeviceType } = useBreakpoint({ breakpoints: theme.breakpoints });\n// matchedBreakpoint can have values like `xs`, `s`, `m`, etc\n// matchedDevice can be `mobile` or `desktop` (small tablets are considered as mobile)\n```\n\n----------------------------------------\n\nTITLE: BottomSheet Footer with Action Configuration Object\nDESCRIPTION: An implementation of BottomSheet Footer with an actions configuration object for primary and secondary buttons, along with layout direction control.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheetFooter\n  layoutDirection=\"vertical | horizontal\" // discuss this naming\n  actions={{\n    primary: Action,\n    secondary: Action,\n  }}\n>\n  <AnythingInSlot />\n</BottomSheetFooter>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Advanced Animation Features in Framer Motion\nDESCRIPTION: Creates a features.js file that exports the domMax bundle from Framer Motion. This provides advanced features like Morph and Layout animations, including all basic animations, at a bundle size of around 25kb.\n\nLANGUAGE: ts\nCODE:\n```\n// features.js\nimport { domMax } from 'framer-motion';\nexport default domMax; // ~25kb (This includes domAnimation bundle as well so no need to import domAnimation again)\n```\n\n----------------------------------------\n\nTITLE: Displaying Breakpoints Table Component for Blade Design System\nDESCRIPTION: A React component that renders a table showing all available breakpoint tokens in the Blade theme, including their values, corresponding media queries, and target screen sizes.\n\nLANGUAGE: JSX\nCODE:\n```\nexport const Breakpoints = () => {\n  const { theme } = useTheme();\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Token Name</th>\n          <th>Token Value</th>\n          <th>Corresponding Media Query</th>\n          <th>Corresponding Screen</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.entries(theme.breakpoints).map(([key, value]) => (\n          <tr key={key}>\n            <td>{`theme.breakpoints.${key}`}</td>\n            <td>{value}</td>\n            <td>\n              <Unstyled>\n                {value === 0 ? (\n                  <Text>Base styles without media query</Text>\n                ) : (\n                  <Code>@media {getMediaQuery({ min: value })}</Code>\n                )}\n              </Unstyled>\n            </td>\n            <td dangerouslySetInnerHTML={{ __html: breakpointScreenMapping[key] }} />\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: React Native Styling with Pixel Ratio for Layout and Typography\nDESCRIPTION: React Native StyleSheet using PixelRatio.get() for both layout and typography properties. This approach scales elements based on the device's pixel ratio, ensuring consistent physical size across different device densities.\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = StyleSheet.create({\n   button1: {\n      marginBottom: 16,\n      height: 48 * PixelRatio.get(),\n      backgroundColor: '#3987f0',\n      borderRadius: 2,\n      paddingLeft: 24 * PixelRatio.get(),\n      paddingRight: 24 * PixelRatio.get(),\n      paddingTop: 12 * PixelRatio.get(),\n      paddingBottom: 12 * PixelRatio.get(),\n   },\n   button1Text: {\n      color: '#ffffff',\n      textAlign: 'center',\n      fontSize: 16 * PixelRatio.get(),\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Content from Screen Readers with aria-hidden in HTML\nDESCRIPTION: Example of using the aria-hidden attribute to hide decorative elements from screen readers while keeping them visible for sighted users. This pattern is useful for elements like decorative icons that don't need to be announced.\n\nLANGUAGE: html\nCODE:\n```\n<button>\n  <span class=\"twitter-icon\" aria-hidden=\"true\"></span>\n  <span>Tweet</span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Card Component with Props-based Configuration (API 3)\nDESCRIPTION: A props-only approach for Card configuration, where all header and footer elements are passed as nested objects with configuration options.\n\nLANGUAGE: jsx\nCODE:\n```\n<Card \n  level={1 | 2} \n  header={{\n    title: '',\n    subtitle: '',\n    prefixIcon: '',\n    counter: 12,\n    trailingVisual: <Badge />\n  }}\n  footer={{\n    title: '',\n    subtitle: '',\n    actions: {\n      primaryAction:{ text: 'Save', onClick: () => {} },\n      secondaryAction:{ text: 'Delete', onClick: () => {} },\n    }\n  }}\n>\n  User content\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Alternative BottomSheet Header Implementation with Addon Properties\nDESCRIPTION: A simplified implementation of BottomSheet Header using titleLeftAddon and titleRightAddon properties for adding visual elements around the title.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheetHeader\n  title=\"\"\n  subtitle=\"\"\n  // future scope?\n  titleLeftAddon={<Asset />}\n  titleRightAddon={<BottomSheetCounter />}\n  trailingVisual={Badge | IconButton | Link} // or just trailing={}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Border Token Display Component in React\nDESCRIPTION: Defines a React component that renders tables displaying border radius and width tokens from the Blade theme. The component uses the useTheme hook to access the theme tokens and creates visual examples of each border property value.\n\nLANGUAGE: JSX\nCODE:\n```\nexport const Border = () => {\n  const { theme } = useTheme();\n  return (\n    <>\n      <br />\n      <h3>Border Radius</h3>\n      <table>\n        <tbody>\n          {Object.entries(theme.border.radius).map(([key, value]) => (\n            <tr key={key}>\n              <td>{`theme.border.radius.${key}`}</td>\n              <td>\n                {key === 'round' ? (\n                  <div\n                    style={{\n                      width: '64px',\n                      height: '64px',\n                      backgroundColor: 'hsla(220, 30%, 96%, 1)',\n                      borderRadius: `${makeBorderSize(value)}`,\n                      border: '1px solid hsla(216, 15%, 54%, 0.18)',\n                    }}\n                  />\n                ) : (\n                  <div\n                    style={{\n                      width: '96px',\n                      height: '64px',\n                      backgroundColor: 'hsla(220, 30%, 96%, 1)',\n                      borderRadius: `${makeBorderSize(value)}`,\n                      border: '1px solid hsla(216, 15%, 54%, 0.18)',\n                    }}\n                  />\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <br />\n      <h3>Border Width</h3>\n      <table>\n        <tbody>\n          {Object.entries(theme.border.width).map(([key, value]) => (\n            <tr key={key}>\n              <td>{`theme.border.width.${key}`}</td>\n              <td>\n                <div\n                  style={{\n                    width: '64px',\n                    height: '64px',\n                    backgroundColor: 'hsla(220, 30%, 96%, 1)',\n                    borderRadius: `${makeBorderSize(theme.border.radius.medium)}`,\n                    border: `${value}px solid hsla(216, 15%, 54%, 0.18)`,\n                  }}\n                />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Migration from Deprecated to New Accordion API\nDESCRIPTION: Shows the diff between the deprecated AccordionItem usage and the new recommended approach using AccordionItemHeader and AccordionItemBody components.\n\nLANGUAGE: diff\nCODE:\n```\n  <AccordionItem\n-   title=\"Accordion Title\"\n-   icon={QRIcon}\n-   description=\"Information inside Accordion\"\n  />\n\n  ⬇️\n\n  <AccordionItem>\n    <AccordionItemHeader\n+     title=\"Accordion Title\"\n+     icon={QRIcon}\n    />\n    <AccordionItemBody>\n+     Information inside Accordion\n    </AccordionItemBody>\n  </AccordionItem>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Component in Storybook with JSX\nDESCRIPTION: This snippet imports necessary components from Storybook and custom documentation components, then configures the Storybook documentation page for the Dropdown component. It sets the title for the component in the Storybook navigation and renders the DropdownDocs component.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { DropdownDocs } from './DropdownDocs';\n\n<Meta title=\"Components/Dropdown/Dropdown\" />\n\n<DropdownDocs />\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Search Components Based on Screen Size\nDESCRIPTION: Example of conditionally rendering different search input components based on screen size. It demonstrates a simple approach that imports both components regardless of which one is rendered.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LargeSearchInput, SmallSearchInput } from '@razorpay/blade/components';\n\nconst SearchScreen = () => (isMobile ? <SmallSearchInput /> : <LargeSearchInput />);\n\nexport default SearchScreen;\n```\n\n----------------------------------------\n\nTITLE: Using HTML inert Attribute for Focus Trapping\nDESCRIPTION: Shows how to use the HTML inert attribute to ignore user input events for elements outside a modal, creating a focus trap. While useful, this approach has limited browser support and requires a polyfill for broader compatibility.\n\nLANGUAGE: HTML\nCODE:\n```\ninert\n```\n\n----------------------------------------\n\nTITLE: Alternative Custom Trigger API for Accordion Component\nDESCRIPTION: An alternative API approach for implementing custom triggers in the Accordion component using a 'trigger' prop on AccordionItem. This approach eliminates the need for separate Header and Body components.\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion>\n  <AccordionItem trigger={<div>Trigger SLOT</div>}>\n    <div>Content SLOT</div>\n  </AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Migrating Heading Component Props in React\nDESCRIPTION: Migration example for updating the Heading component from using variant prop to size prop for specific variants, while maintaining backward compatibility for 'subheading'.\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading variant=\"subheading\">Nothing changes here</Heading> // No change here\n\n- <Heading variant=\"medium\">Medium Heading</Heading>\n+ <Heading size=\"medium\">Medium Heading</Heading>\n```\n\n----------------------------------------\n\nTITLE: Dropdown with DropdownButton/DropdownLink Integration\nDESCRIPTION: Code diff showing how to use alternative trigger components like DropdownButton or DropdownLink instead of SelectInput.\n\nLANGUAGE: diff\nCODE:\n```\n<Dropdown>\n+ <DropdownButton /> // or <DropdownLink />\n  <DropdownOverlay>\n    <ActionList />\n  </DropdownOverlay>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Using Blade Motion Presets with Fade Component\nDESCRIPTION: Example of using Blade's motion presets after setup, demonstrating the Fade component wrapping a Badge component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fade, Badge } from '@razorpay/blade/components';\n\nfunction MyComponent() {\n  return (\n    <Fade>\n      <Badge color=\"positive\">Motion Approved</Badge>\n    </Fade>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Guide for Badge Medium Size (React)\nDESCRIPTION: Diff showing how to update Badge components with 'medium' size to 'large' following a design change.\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge size='medium'>...</Badge>\n+ <Badge size='large'>...</Badge>\n```\n\n----------------------------------------\n\nTITLE: Current Layout Implementation (Before Proposal)\nDESCRIPTION: Contrived example showing how layouts are currently implemented without dedicated layout primitives, requiring inline styles and wrapper divs.\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n  <Button>Button 1</Button>\n  <div style={{ marginTop: theme.spacing[2] }}>\n    <Button>Button 2</Button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: ActionList Simple Usage Example in JSX\nDESCRIPTION: Basic example of ActionList with ActionListItems, showing event handling, icons, and formatting options.\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionList\n  surfaceLevel={2}\n  onChange={(e) => {\n    console.log({ name: e.name, values: e.values });\n  }}\n>\n  <ActionListItem\n    title=\"Accept API\"\n    value=\"accept\"\n    description=\"Accept this API\"\n    leading={<ActionListItemIcon icon={StarIcon} />}\n    trailing={<ActionListItemText>⌘ + Space + A</ActionListItemText>}\n    onClick={() => {}}\n  />\n  <ActionListItem\n    title=\"Delete\"\n    description=\"Delete this value\"\n    value=\"delete\"\n    intent=\"negative\"\n    leading={<ActionListItemIcon icon={TrashIcon} />}\n    trailing={<ActionListItemText>⌘ + Space + D</ActionListItemText>}\n    onClick={() => {}}\n  />\n</ActionList>\n```\n\n----------------------------------------\n\nTITLE: Preloading Font Resources in HTML\nDESCRIPTION: HTML code snippet showing how to preload font resources for better performance in client-side rendering applications. This can be used with the manual self-hosting approach.\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"preload\" href=\"/fonts/TASAOrbiterVF.woff2\" as=\"font\" type=\"font/woff2\" crossorigin />\n<link rel=\"preload\" href=\"/fonts/Inter-Regular.ttf\" as=\"font\" type=\"font/ttf\" crossorigin />\n<link rel=\"preload\" href=\"/fonts/Inter-SemiBold.ttf\" as=\"font\" type=\"font/ttf\" crossorigin />\n```\n\n----------------------------------------\n\nTITLE: Migration Guide for Badge Small Size (React)\nDESCRIPTION: Diff showing how to update Badge components with 'small' size to 'medium' following a design change.\n\nLANGUAGE: diff\nCODE:\n```\n- <Badge size='small'>...</Badge>\n+ <Badge size='medium'>...</Badge>\n```\n\n----------------------------------------\n\nTITLE: ActionList Component TypeScript Interface\nDESCRIPTION: TypeScript definition for ActionList component props, specifying selection type, event handling, and surface level properties.\n\nLANGUAGE: ts\nCODE:\n```\ntype ActionListProps = {\n  children: React.ReactNode;\n\n  /**\n   * Renders simple menu or checkboxes depending on the type selected here\n   *\n   * @default single\n   */\n  selectionType?: 'single' | 'multiple';\n\n  /** Callback that gets called when item is checked/clicked */\n  onChange?: () => void;\n\n  /**\n   * Changes the background surface level color\n   *\n   * @default 2\n   */\n  surfaceLevel: 2 | 3;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Figma Token Publisher Plugin\nDESCRIPTION: Commands for setting up and running the Figma Token Publisher plugin locally. Includes steps for installing dependencies with yarn and starting webpack in watch mode for development.\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:watch\n```\n\n----------------------------------------\n\nTITLE: Proposed Layout Solution Comparison\nDESCRIPTION: Side-by-side comparison showing how the proposed layout primitives simplify layout implementation compared to the current approach.\n\nLANGUAGE: tsx\nCODE:\n```\n// before\n<div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n  <Button>Button 1</Button>\n  <div style={{ marginTop: theme.spacing[2] }}>\n    <Button>Button 2</Button>\n  </div>\n</div>\n\n// after\n<Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n  <Button>Button 1</Button>\n  <Button marginTop=\"spacing.2\">Button 2</Button>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Font Face in CSS\nDESCRIPTION: Example of manually defining font-face in CSS for TASA Orbiter and Inter fonts. This approach requires downloading font files and configuring them correctly, which is more time-consuming than the recommended approach.\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'TASA Orbiter';\n  src: url('/fonts/TASAOrbiterVF.woff2') format('woff2-variations');\n  font-weight: 125 950;\n  font-stretch: 75% 125%;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'Inter';\n  src: url('/fonts/Inter-Regular.ttf') format('truetype');\n  font-weight: normal;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'Inter';\n  src: url('/fonts/Inter-SemiBold.ttf') format('truetype');\n  font-weight: 600;\n  font-style: normal;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ListItemCode Component in Blade Lists\nDESCRIPTION: Example showing how to include code snippets within list items using the ListItemCode component, which formats text as code.\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem>\n    Finally run <ListItemCode>yarn install</ListItemCode>\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Array in JSX Children (React)\nDESCRIPTION: Example showing how to use dynamic variables inside children without wrapping them in string literals in Button component.\n\nLANGUAGE: jsx\nCODE:\n```\n<Button onClick={}>{someVariable} hello</Button>\n```\n\n----------------------------------------\n\nTITLE: Using Semantic HTML List Elements with Custom Styling\nDESCRIPTION: Shows how to use semantic HTML list elements (ol, ul, li) with CSS to remove default styling while maintaining accessibility. This approach is preferred for web implementations to ensure proper screen reader functionality.\n\nLANGUAGE: css\nCODE:\n```\nlist-style-type: none; padding: 0px, margin: 0px\n```\n\n----------------------------------------\n\nTITLE: Amount Component Basic Usage\nDESCRIPTION: Example showing how to use the Amount component to display currency values.\n\nLANGUAGE: tsx\nCODE:\n```\n<Amount value={10000} />\n```\n\n----------------------------------------\n\nTITLE: Using Box Component for Basic Layout in Blade Design System\nDESCRIPTION: Example showing how to use the Box component to create a column layout with flex display, centered alignment, and consistent spacing between elements.\n\nLANGUAGE: tsx\nCODE:\n```\n<Box\n  display=\"flex\"\n  flexDirection=\"column\"\n  alignItems=\"center\"\n  marginTop=\"spacing.1\"\n  marginBottom=\"spacing.2\"\n  paddingX=\"spacing.1\"\n  gap=\"spacing.1\"\n>\n  <Button>Button 1</Button>\n  <Button>Button 2</Button>\n  <Button>Button 3</Button>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Caption Component Using Semantic Typography\nDESCRIPTION: Updated Caption component implementation that uses semantic typography tokens from the theme, improving consistency but still with platform hardcoding.\n\nLANGUAGE: typescript\nCODE:\n```\n// Text.ts\nimport { paymentTheme } from '@razorpay/blade/tokens';\n\nconst Caption = styled.div`\n  font-size: ${paymentTheme.typography.desktop.font.size.caption};\n  line-height: ${paymentTheme.typography.desktop.lineHeight.caption};\n`\n```\n\n----------------------------------------\n\nTITLE: Composing Indicator with Other UI Elements\nDESCRIPTION: Example showing how to compose the Indicator component with other UI elements to show a dot at the top-right corner, using relative and absolute positioning.\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ position: 'relative' }}>\n  <NotificationWidget />\n  <div style={{ position: 'absolute', top: 0, right: 0 }}>\n    <Indicator intent=\"notice\" accessibilityLabel=\"Pending notifications\" />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Typography Migration: Line-height Scale Changes\nDESCRIPTION: Example showing how to migrate from the old named line-height tokens to the new numbered values in the theme.\n\nLANGUAGE: diff\nCODE:\n```\n- theme.typography.lineHeights.s\n+ theme.typography.lineHeights[50]\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-step Animation with React Native Animated API\nDESCRIPTION: Example showing how to implement multi-step keyframe animations in React Native using the Animated API. This approach allows applying easing to interpolation for more complex animations, but requires disabling the native driver which may impact performance.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Example() {\n  ...\n    return (\n      <View>\n        <Animated.View\n          style={[styles.block, \n            {\n              transform: [\n                {\n                  translateX: shakeAnimation.interpolate({ // Interpolate the animated value in the range of 0 to 100 to create a shake effect\n                    inputRange: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n                    outputRange: [0, -50, 50, -50, 50, -50, 50, -50, 50, -50, 0],\n                    easing: motionToken.easing.standard.effective, // Define easing inside the interpolate function\n                  }),\n                },\n              ],\n            },\n          ]}\n        />\n        <Button text=\"Shake\" onPress={()=>\n          Animated.timing(shakeAnimation, {\n            toValue: 100,\n            useNativeDriver: false, // Set native driver usage to false\n            duration: motionToken.duration.quick3, // Define only duration here\n          }).start()}\n        />\n      </View>\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Opening Popover on Initial Load\nDESCRIPTION: Shows how to make a Popover appear immediately when the component mounts by setting the defaultIsOpen prop to true.\n\nLANGUAGE: js\nCODE:\n```\nconst InitialOpen = () => {\n  return (\n    <Popover\n      defaultIsOpen={true}\n      content={<Text>Any content</Text>}\n    >\n      <IconButton icon={InfoIcon} accessibilityLabel=\"Refund\" />\n    </Popover>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Semantic Typography Implementation in Theme\nDESCRIPTION: Improved approach using semantic typography tokens in the theme that reference global typography values, providing better platform independence.\n\nLANGUAGE: javascript\nCODE:\n```\n// paymentTheme.ts\nimport globalTypography from './typography'\nconst  paymentTheme = {\n  colors,\n  border,\n  spacing,\n  shadows,\n  typography: {\n    desktop: {\n      font: {\n        weight: {\n          caption: globalTypography.desktop.fonts.weight.regular,\n        },\n        size: {\n          caption: globalTypography.desktop.fonts.size.100,\n        },\n        family: {\n          caption: globalTypography.desktop.fonts.family.text,\n        }\n      },\n      lineHeight: {\n        caption: globalTypography.desktop.lineHeight.small,\n      },\n      letterSpacing: {\n        caption: globalTypography.desktop.letterSpacing.normal,\n      },\n    },\n    mobile: {\n      font: {\n        weight: {\n          caption: globalTypography.mobile.fonts.weight.regular,\n        },\n        size: {\n          caption: globalTypography.mobile.fonts.size.200,\n        },\n        family: {\n          caption: globalTypography.mobile.fonts.family.text,\n        },\n      },\n      lineHeight: {\n        caption: globalTypography.mobile.lineHeight.small,\n      },\n      letterSpacing: {\n        caption: globalTypography.mobile.letterSpacing.normal,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Breakpoints for Responsive Design\nDESCRIPTION: Specifies the breakpoint values for different screen sizes that will be supported in Blade's responsive design system, targeting mobile devices through desktops.\n\nLANGUAGE: text\nCODE:\n```\ns:  480px // Mobile devices\nm:  768px // Large mobile devices\nl: 1024px // Small screens, Tablets\nxl: 1200px // Desktops\n```\n\n----------------------------------------\n\nTITLE: Using iOS accessibilityViewIsModal for Focus Management\nDESCRIPTION: Demonstrates the React Native accessibility property for iOS that causes VoiceOver to ignore elements outside a modal, creating an effective focus trap for screen reader users on iOS devices.\n\nLANGUAGE: JavaScript\nCODE:\n```\naccessibilityViewIsModal\n```\n\n----------------------------------------\n\nTITLE: Copying Custom Declaration Files Script\nDESCRIPTION: Bash command using copyfiles to copy custom hand-written declaration files from the source to the build directory. This supplements TypeScript's emitted declarations with manually created ones.\n\nLANGUAGE: bash\nCODE:\n```\ncopyfiles -u 1 \\\"src/**/*.d.ts\\\" build/types\n```\n\n----------------------------------------\n\nTITLE: Definition of makeMotionTime Utility for Web\nDESCRIPTION: Type signature for the makeMotionTime utility function in web applications. The function takes a numeric size parameter and returns a string with 'ms' suffix.\n\nLANGUAGE: tsx\nCODE:\n```\nconst makeMotionTime = (size: number) => string;\n```\n\n----------------------------------------\n\nTITLE: Text Component Implementation with Hard-coded Platform\nDESCRIPTION: Example of a Text component using the typography tokens with hard-coded desktop platform, which creates issues for responsive design.\n\nLANGUAGE: typescript\nCODE:\n```\n// Text.ts\nimport { BladeProvider } from '@razorpay/blade/components';\nimport { paymentTokens, bankingTokens } from '@razorpay/blade/tokens';\n\noverrideTokens()\n\n<BladeProvider tokens={payment}>\n  <MyApp/>\n</BladeProvider>\n\nconst {colors, typography} = useTheme()\n\nconst Caption = styled.div`\n  font-size: ${theme.typography.desktop.fonts.size.100};\n  line-height: ${theme.typography.desktop.lineHeight.s};\n`\n```\n\n----------------------------------------\n\nTITLE: React Native accessible prop usage for accessibility\nDESCRIPTION: Shows how to use the accessible prop in React Native to make elements focusable for screen readers. Unlike web's tabindex approach, React Native groups elements with accessible=true into single selectable components.\n\nLANGUAGE: jsx\nCODE:\n```\naccessible={true}\n```\n\n----------------------------------------\n\nTITLE: Clean Import Syntax After Package.json Configuration\nDESCRIPTION: Example of the improved import syntax that consumers can use after implementing the exports map or barrel file re-export pattern. This allows importing directly from subpaths without the '/build' directory.\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ThemeProvider, useTheme} from '@razorpay/blade/components';\nimport {paymentTheme, globalColors} from '@razorpay/blade/tokens';\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Package Registry for Razorpay Employees\nDESCRIPTION: Commands to configure npm to use GitHub Package Registry for Razorpay scoped packages. Includes adding the GitHub access token to shell configuration and configuring npmrc.\n\nLANGUAGE: bash\nCODE:\n```\nexport GITHUB_ACCESS_TOKEN=\"<YOUR_TOKEN>\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# add following to your .npmrc\n@razorpay:registry=https://npm.pkg.github.com/\n//npm.pkg.github.com/:always-auth=true\n//npm.pkg.github.com/:_authToken=${GITHUB_ACCESS_TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Using makeMotionTime with React Native Reanimated\nDESCRIPTION: Example showing how to use makeMotionTime with React Native Reanimated for animations. The function returns numeric values suitable for React Native animation durations.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@razorpay/blade/components';\nimport { makeMotionTime } from '@razorpay/blade/utils';\nimport Animated, { useSharedValue, useAnimatedStyle, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  const { theme } = useTheme();\n  const width = useSharedValue(50);\n\n  const style = useAnimatedStyle(() => {\n    return {\n      width: withTiming(width.value, {\n        duration: makeMotionTime(theme.motion.duration.gentle), // 400 for native\n        easing: theme.motion.easing.standard.attentive,\n      }),\n    };\n  });\n\n  return (\n    <View>\n      <Animated.View style={[styles.box, style]} />\n      <Button onPress={() => (width.value = Math.random() * 300)}>Animate</Button>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FAQ Component with Accordion in React for Blade UI Library\nDESCRIPTION: This code defines a React component that renders an accordion UI element containing frequently asked questions for the Blade UI library. The component currently includes one FAQ item about fixing a 'ResizeObserver is not defined' error when running Jest tests.\n\nLANGUAGE: jsx\nCODE:\n```\nexport const FAQComponent = () => {\n  return (\n    <Accordion marginTop=\"spacing.4\" showNumberPrefix>\n      <AccordionItem\n        title=\"'ResizeObserver is not defined' error when running Jest\"\n        description={\n          <Text>\n            This error is caused because ResizeObserver is used by Blade but has no global\n            definitions for it on your jest setup. To fix this, you can add the following mock to\n            your jest setup file:\n            <Code marginTop=\"spacing.2\" marginBottom=\"spacing.4\">\n              {`global.ResizeObserver = jest.fn().mockImplementation(() => ({\n            observe: jest.fn(),\n            unobserve: jest.fn(),\n            disconnect: jest.fn(),\n            }));`}\n            </Code>\n            You can find the relevant{' '}\n            <Link href=\"https://github.com/razorpay/blade/issues/1367\" target=\"_blank\">\n              GitHub issue here\n            </Link>\n          </Text>\n        }\n      />\n    </Accordion>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Library Components with Subpath Exports\nDESCRIPTION: Example of how consumers would import components from the library using the subpath exports pattern after proper package.json configuration. This demonstrates the desired import syntax for accessing different parts of the library.\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ThemeProvider, useTheme} from '@razorpay/blade/build/components';\nimport {paymentTheme, globalColors} from '@razorpay/blade/build/tokens';\n```\n\n----------------------------------------\n\nTITLE: Typography Token Structure with LineHeight Implementation\nDESCRIPTION: Extended typography token structure that includes lineHeight properties for both desktop and mobile platforms using semantic size names.\n\nLANGUAGE: typescript\nCODE:\n```\nconst typography: Typography = {\n  desktop: {\n    fonts: {\n      family: {\n        ...fontFamily,\n      },\n      size: {\n        10: 9,\n        25: 10,\n        50: 11,\n        75: 12,\n        100: 13,\n        200: 16,\n        300: 18,\n        400: 20,\n        500: 22,\n        600: 25,\n        700: 28,\n        800: 32,\n        900: 36,\n        1000: 40,\n      },\n      weight: {\n        ...fontWeight,\n      },\n    },\n    lineHeights: {\n      none: 0,\n      s: 12,\n      m: 14,\n      l: 15,\n      // so on\n    },\n    // letterSpacings: {},\n  },\n  mobile: {\n    fonts: {\n      family: {\n        ...fontFamily,\n      },\n      size: {\n        10: 10,\n        25: 11,\n        50: 12,\n        75: 14,\n        100: 15,\n        200: 17,\n        300: 18,\n        400: 20,\n        500: 22,\n        600: 24,\n        700: 27,\n        800: 29,\n        900: 32,\n        1000: 35,\n      },\n      weight: {\n        ...fontWeight,\n      },\n    },\n    lineHeights: {\n      none: 0,\n      s: 14,\n      m: 16,\n      l: 17,\n      // so on\n    },\n    // letterSpacings: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Category-Based Re-exports Examples\nDESCRIPTION: Examples of how to implement category-based re-exports in the package structure for maintainers.\n\nLANGUAGE: javascript\nCODE:\n```\n// packages/blade/src/components/index.ts\nexport * from 'src/components/Button'\nexport * from 'src/components/Text'\n\n// packages/blade/src/tokens/theme/index.ts\nexport * from 'src/tokens/theme/paymentTheme'\nexport * from 'src/tokens/theme/bankingTheme'\nexport * from 'src/tokens/theme/overrideTheme'\n\n// packages/blade/src/utils/index.ts\nexport * from 'src/tokens/utils/getColorScheme'\nexport * from 'src/tokens/utils/useColorScheme'\n```\n\n----------------------------------------\n\nTITLE: Defining makeSpace Function Signature in TypeScript\nDESCRIPTION: The function signature for makeSpace, which takes a numeric size parameter and returns a string with the pixel unit appended.\n\nLANGUAGE: tsx\nCODE:\n```\nconst makeSpace = (size: number) => string;\n```\n\n----------------------------------------\n\nTITLE: Refactoring Typography Token Path in JavaScript\nDESCRIPTION: Example of refactoring a typography token path by removing the device condition (desktop/mobile), which will be handled by the ThemeProvider. This simplifies accessing font size tokens.\n\nLANGUAGE: javascript\nCODE:\n```\n// from this\ntheme.typography.desktop.fonts.size.100\n\n// to this (the desktop and mobile will be taken care by theme provider)\ntheme.typography.fonts.size.100\n```\n\n----------------------------------------\n\nTITLE: Configuring React Native for Custom Fonts\nDESCRIPTION: JavaScript configuration to include custom fonts in a React Native project by specifying the assets directory for font files.\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  // ... rest of the config\n  assets: ['./public/fonts/'],\n};\n```\n\n----------------------------------------\n\nTITLE: React Native Styling with dp for Layout and Typography with Auto-scaling\nDESCRIPTION: React Native StyleSheet using density-independent pixels (dp) for both layout and typography with text auto-scaling enabled. This approach honors the device's font size settings, making the app more accessible.\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = StyleSheet.create({\n   button3: {\n      marginBottom: 16,\n      height: 48,\n      backgroundColor: '#3987f0',\n      borderRadius: 2,\n      paddingLeft: 24,\n      paddingRight: 24,\n      paddingTop: 12,\n      paddingBottom: 12,\n   },\n   button3Text: {\n      color: '#ffffff',\n      textAlign: 'center',\n      fontSize: 16,\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: useScale Platform Detection Pseudo-code\nDESCRIPTION: Pseudo-code implementation of a useScale hook that would determine which typography scale to use based on platform and client type.\n\nLANGUAGE: jsx\nCODE:\n```\nusescale:\nif platform === web\n  if client is desktop\n    return typo.desktop\n  else\n   return typo.mobile\nelse \n  return typo.mobile\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests for Blade Coverage\nDESCRIPTION: Command to execute Playwright tests that include Blade coverage assertions. This runs all tests configured in the Playwright test runner.\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test\n```\n\n----------------------------------------\n\nTITLE: Setting up Global Font Styles with Styled Components\nDESCRIPTION: Example of creating global styles with styled-components to apply Blade fonts throughout the application, including default text and heading font families.\n\nLANGUAGE: ts\nCODE:\n```\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: ${(props) => props.theme.typography.fonts.family.text}\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: ${(props) => props.theme.typography.fonts.family.heading};\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Theme Export Implementation in TypeScript\nDESCRIPTION: Simple theme export file showing how typography tokens are imported from globals and re-exported as part of the payment theme.\n\nLANGUAGE: typescript\nCODE:\n```\n// paymentTheme.ts\nimport typography from './globals/typography'\nconst paymentTheme = {\n  colors,\n  border,\n  spacing,\n  shadows,\n  typography,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing nested ThemeProviders with potential conflicts in React TSX\nDESCRIPTION: This example demonstrates the potential conflict that can occur when nesting theme providers with styled-components. When a custom theme is provided inside a BladeProvider, the shallow merge behavior can override critical theme tokens needed by Blade components.\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * bladeTheme\n * {\n *  ...\n *  colors { // 👈 Blade components need this token\n *      ...\n *  }\n *  ...\n * }\n *\n */\n\nconst myCustomTheme = {\n  // 👇 Oops, this will override the colors key above\n  colors: {\n    primary: 'hotpink',\n  },\n};\n\nconst App = () => {\n  // ...\n  return (\n    <BladeProvider themeTokens={bladeTheme}>\n      {/* The theme provider below will merge and replace any top level keys from `bladeTheme` above */}\n      <ThemeProvider theme={myCustomTheme}>\n        <Button>Hello</Button>\n      </ThemeProvider>\n    </BladeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Enhanced Bundle Version with domMax\nDESCRIPTION: Configuration for setting up framer-motion with enhanced features using domMax for Morph or Layout animations.\n\nLANGUAGE: ts\nCODE:\n```\n// features.js\nimport { domMax } from 'framer-motion';\nexport default domMax; // ~25kb (This includes domAnimation bundle as well so no need to import domAnimation again)\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access all content on the website. The 'User-agent: *' directive targets all crawler bots, and the empty 'Disallow:' line indicates no restrictions on crawlable content.\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Importing Blade Components for Storybook Documentation Page\nDESCRIPTION: This code imports various UI components from the Blade component library and the Storybook addon-docs Meta component. It also imports a MotionInstallation MDX file that likely contains installation instructions for motion-related components.\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport {\n  StepGroup,\n  StepItem,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemLink,\n  Text,\n  InfoIcon,\n  Tooltip,\n  TooltipInteractiveWrapper,\n  Accordion,\n  AccordionItem,\n  AccordionItemHeader,\n  AccordionItemBody,\n  Heading,\n  Tabs,\n  TabList,\n  TabItem,\n  TabPanel,\n  Box,\n} from '../../src/components';\n\nimport MotionInstallation from '../../src/components/BaseMotion/docs/MotionInstallation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook for Documentation\nDESCRIPTION: Imports the Meta component from Storybook's addon-docs and sets the title for the current documentation page to 'Guides/Contributing'.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n\n<Meta title=\"Guides/Contributing\" />\n```\n\n----------------------------------------\n\nTITLE: Using BaseText Component in Blade\nDESCRIPTION: The BaseText component serves as the internal foundation for all text components in Blade. It accepts various typography-related props and can render as different HTML elements. This component isn't meant for direct consumer use but offers flexibility for internal component construction.\n\nLANGUAGE: jsx\nCODE:\n```\n<BaseText\n  color=\"surface.text | feedback.text | button.text\"\n  fontFamily=\"fontfamily.name\"\n  fontSize=\"fontSize.name\"\n  fontWeight=\"fontWeight.name\"\n  lineWeight=\"lineWeight\"\n  letterSpacing=\"letterSpacing\"\n  formatting=\"bold/italic/strike\"\n  as=\"h1-h6/p/span\"\n>\n  Some Text\n</BaseText>\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Dependencies for Blade\nDESCRIPTION: Command to install the required React Native dependencies for Blade including floating-ui, reanimated, tab-view, and various UI-related packages.\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @floating-ui/react-native@0.10.0 react-native-reanimated@3.4.1 react-native-tab-view@3.5.2 react-native-pager-view@6.2.1 react-native-svg@12.3.0 react-native-gesture-handler@2.9.0 @gorhom/bottom-sheet@4.4.6 @gorhom/portal@1.0.1\n```\n\n----------------------------------------\n\nTITLE: Switching Between Light and Dark Color Schemes in Blade\nDESCRIPTION: Example showing how to toggle between light and dark color schemes in a custom branded theme using the colorScheme prop of BladeProvider.\n\nLANGUAGE: tsx\nCODE:\n```\n// or colorScheme=\"light\"\n<BladeProvider themeTokens={customThemeTokens} colorScheme=\"dark\">\n  <App />\n</BladeProvider>\n```\n\n----------------------------------------\n\nTITLE: Manual Tooltip Trigger Wrapping with Custom Styling\nDESCRIPTION: The preferred approach using an explicit TooltipInteractiveWrapper component that gives users control over the wrapper's styling. This allows for custom width, margin, padding and other style properties to be applied to the wrapper element.\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip>\n  <TooltipInteractiveWrapper width=\"\" margin=\"\" padding=\"\" whatever=\"\">\n    <InfoIcon size=\"2xlarge\" color=\"action.icon.link.visited\" />\n  </TooltipInteractiveWrapper>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Using shouldWrapChildren Prop for Tooltip Trigger Wrapping\nDESCRIPTION: A code example showing the previous API approach where a simple prop controlled whether the tooltip trigger should be wrapped in a wrapper component. This approach caused layout issues due to the automatically inserted div element.\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip shouldWrapChildren>\n    <InfoIcon size=\"2xlarge\" color=\"action.icon.link.visited\" />\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Importing Blade Fonts for Web\nDESCRIPTION: Code snippet showing how to import Blade fonts CSS in a web project's root entry file to make the fonts available throughout the application.\n\nLANGUAGE: ts\nCODE:\n```\n// Somewhere in root index.ts or entryBrowser.tsx file\nimport '@razorpay/blade/fonts.css';\n```\n\n----------------------------------------\n\nTITLE: Using createTheme with BladeProvider in React\nDESCRIPTION: This snippet demonstrates how to create a custom theme with the createTheme function and apply it using BladeProvider. The brandColor parameter defines the primary color from which a color palette is generated.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createTheme } from '@razorpay/blade/tokens';\n\nconst { theme: customThemeTokens } = createTheme({\n  brandColor: '#83003D', // 'rgba(131, 0, 61)', 'hsl(332, 100%, 26%)' are also valid values\n});\n\nconst Wrapper = () => {\n  return (\n    <BladeProvider themeTokens={customThemeTokens}>\n      <App />\n    </BladeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining useToast Hook Return Type in TypeScript\nDESCRIPTION: TypeScript interface definition for the return type of the useToast hook, specifying the available methods for showing and dismissing toasts with their parameters and return types.\n\nLANGUAGE: ts\nCODE:\n```\ntype useToastReturnType = {\n  /**\n   * @returns id of the toast\n   */\n  show: (toast: Toast) => string;\n\n  /**\n   * id of the toast to be dismissed\n   * \n   * if id is not provided, all the toasts will be dismissed\n   */\n  dismiss: (toastId?: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Fonts in Android\nDESCRIPTION: Java code to import and register custom fonts in an Android React Native application by modifying the MainApplication.java file.\n\nLANGUAGE: js\nCODE:\n```\n// add the below import statement after all the import statements\nimport com.facebook.react.views.text.ReactFontManager;\n```\n\nLANGUAGE: js\nCODE:\n```\npublic void onCreate() {\n  // add the below lines as the first lines\n  ReactFontManager.getInstance().addCustomFont(this, \"Inter\", R.font.inter);\n  ReactFontManager.getInstance().addCustomFont(this, \"TASA Orbiter Display\", R.font.tasa);\n  // rest of the content of the method\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook\nDESCRIPTION: Imports the Meta component from Storybook addon-docs to define metadata for documentation pages.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Props Interface for Tag Component\nDESCRIPTION: TypeScript interface defining the props accepted by the Tag component, including size options, icon support, dismiss handler, and disabled state. This type definition specifies the component's API.\n\nLANGUAGE: ts\nCODE:\n```\ntype TagProps = {\n  /**\n   * Decides the size of Tag\n   *\n   * @default medium\n   */\n  size?: 'medium' | 'large';\n\n  /**\n   * Any icon from Blade\n   */\n  icon?: IconComponent;\n\n  /**\n   * Callback when close icon on Tag is clicked\n   *\n   */\n  onDismiss?: () => void;\n\n  /**\n   * Text that renders inside Tag\n   */\n  children: ReactText;\n\n  /**\n   * Disable tag\n   */\n  isDisabled?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Using SpotlightPopoverStep with Tour Keys to Avoid ID Conflicts in JSX\nDESCRIPTION: Demonstrates how to use the tourKey prop with SpotlightPopover and SpotlightPopoverStep components to automatically prefix IDs, avoiding conflicts between different tour flows on the same page.\n\nLANGUAGE: jsx\nCODE:\n```\n// No need to prefix the ids manually in steps array.\n\n<SpotlightPopover tourKey=\"global\" steps={globalSteps} />;\n<SpotlightPopover tourKey=\"paymentlinks\" steps={paymentLinksSteps} />;\n\n// file: DashboardPage.tsx\n<SpotlightPopoverStep tourKey=\"global\" id=\"step-1\">\n  <Button>Click me</Button>\n</SpotlightPopoverStep>;\n\n// file: PaymentLinks.tsx\n<SpotlightPopoverStep tourKey=\"paymentlinks\" id=\"step-1\">\n  <Button>Click me</Button>\n</SpotlightPopoverStep>;\n```\n\n----------------------------------------\n\nTITLE: Extending styled-components DefaultTheme with Blade Theme types\nDESCRIPTION: Creates a TypeScript declaration file that extends the DefaultTheme interface from styled-components with Blade's Theme types, enabling proper type checking for theme properties.\n\nLANGUAGE: typescript\nCODE:\n```\n// file: index.d.ts\nimport { Theme } from '@razorpay/blade/components';\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends Theme {}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the Border Component in Storybook Documentation\nDESCRIPTION: Renders the Border component within the Storybook documentation page, along with a note about using the border tokens with the makeBorderSize utility.\n\nLANGUAGE: JSX\nCODE:\n```\n# ─ Border\n\n> These tokens should be used along with the [makeBorderSize util](?path=/story/utils-makebordersize--docs).\n\n<Border />\n```\n\n----------------------------------------\n\nTITLE: Basic SideNav Component Usage in React\nDESCRIPTION: A simple example showing the basic structure of the SideNav component with children. This demonstrates the minimal implementation for using the component.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNav>{/* children */}</SideNav>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Component for Theme Documentation\nDESCRIPTION: Sets up the Storybook documentation page with a custom container that wraps content in a BladeProvider to apply theme tokens based on the selected color scheme.\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta\n  title=\"Tokens/Theme\"\n  parameters={{\n    docs: {\n      container: ({ children, context }) => {\n        const colorScheme = context.store.globals.globals.colorScheme;\n        return (\n          <DocsContainer context={context}>\n            <BladeProvider key={colorScheme} themeTokens={bladeTheme} colorScheme={colorScheme}>\n              {children}\n            </BladeProvider>\n          </DocsContainer>\n        );\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Storybook Documentation for Border Tokens in Blade UI\nDESCRIPTION: Imports necessary components and utilities from Storybook and the Blade library, then configures the Storybook Meta component to properly render documentation with the correct theme context.\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Meta, DocsContainer } from '@storybook/addon-docs';\nimport { BladeProvider, useTheme } from '../../src/components';\nimport { makeBorderSize } from '../../src/utils';\nimport { bladeTheme } from '../../src/tokens';\n\n<Meta\n  title=\"Tokens/Border\"\n  parameters={{\n    docs: {\n      container: ({ children, context }) => {\n        const colorScheme = context.store.globals.globals.colorScheme;\n        \n        return (\n          <DocsContainer context={context}>\n            <BladeProvider\n              key={colorScheme}\n              themeTokens={bladeTheme}\n              colorScheme={colorScheme}\n            >\n              {children}\n            </BladeProvider>\n          </DocsContainer>\n        );\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover with Constrained API in React\nDESCRIPTION: Example of a constrained API implementation for the Popover component with predefined structure for footer actions using primary and secondary button configuration objects.\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover\n  content={<Text>Any content</Text>}\n  footer={<Text>Slotted content of Footer</Text>}\n  footerActions={{\n    primary: {\n      text: \"Primary me\",\n      onClick: () => {},\n    },\n    secondary: {\n      text: \"Secondary me\",\n      onClick: () => {},\n    },\n  }}\n>\n  <IconButton icon={InfoIcon} />\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: ColorSchemeInput Type Definition\nDESCRIPTION: Defines the possible values that can be used with the setColorScheme function to set the application's color scheme.\n\nLANGUAGE: tsx\nCODE:\n```\ntype ColorSchemeInput = 'dark' | 'light' | 'system';\n```\n\n----------------------------------------\n\nTITLE: Using makeSize with styled-components in React\nDESCRIPTION: Example showing how to import and use the makeSize utility in a styled-component to set height and width dimensions with px units.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeSize } from '@razorpay/blade/utils';\nimport styled from 'styled-components';\n\nconst CustomComponent = styled.div`\n  height: ${makeSize(512)}; // '512px'\n  width: ${makeSize(256)}; // '256px'\n`;\n```\n\n----------------------------------------\n\nTITLE: Web & React Native Keyboard Type Mapping Based on Input Type\nDESCRIPTION: A table showing how different input types map to their corresponding attributes in web and React Native implementations. It defines keyboard types, autocomplete suggestions, and return key behaviors for various input types.\n\nLANGUAGE: markdown\nCODE:\n```\n| type   | web attributes                                                                                                                                                                          | react-native attributes                                                                |\n| ------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |\n| text   | `inputmode=\"text\"`, `autocomplete=\"off\"`(can be set to valid options for autocomplete based on the context where the plain text is being use for eg: `name`,`username`,`country`, etc.) | `keyboardType=\"default\"`                                                               |\n| search | `inputmode=\"search\"`, `autocomplete=\"off\"`(can give option to consumer to configure this with more options which are contextual), `enterkeyhint=\"search\"`                               | `keyboardType=\"default\"`, `returnKeyType=\"search\"`                                     |\n| tel    | `inputmode=\"tel\"`, `autocomplete=\"tel\"`, `enterkeyhint=\"done\"`(can be overridden by consumers)                                                                                          | `keyboardType=\"phone-pad\"`, `returnKeyType=\"done\"`(can be overridden by consumers)     |\n| email  | `inputmode=\"email\"`, `autocomplete=\"email\"`, `enterkeyhint=\"done\"`(can be overridden by consumers)                                                                                      | `keyboardType=\"email-address\"`, `returnKeyType=\"done\"`(can be overridden by consumers) |\n| url    | `inputmode=\"url\"`, `autocomplete=\"off\"`, `enterkeyhint=\"done\"`(can be overridden by consumers)                                                                                          | `keyboardType=\"url\"`, `returnKeyType=\"done\"`(can be overridden by consumers)           |\n| number | `type=\"text\"`, `inputmode=\"decimal\"`, `autocomplete=\"off\"`, `enterkeyhint=\"done\"`(can be overridden by consumers)                                                                       | `keyboardType=\"decimal-pad\"`, `returnKeyType=\"done\"`(can be overridden by consumers)   |\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundlemon in package.json for Bundle Size Limits\nDESCRIPTION: Configuration for Bundlemon that defines maximum size limits for different build outputs. This setup allows monitoring both web and native bundles for components and tokens.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\n    {\n      \"path\": \"./build/components/index.web.js\",\n      \"maxSize\": \"200kB\"\n    },\n    {\n      \"path\": \"./build/tokens/index.web.js\",\n      \"maxSize\": \"100kB\"\n    },\n    {\n      \"path\": \"./build/components/index.native.js\",\n      \"maxSize\": \"200kB\"\n    },\n    {\n      \"path\": \"./build/tokens/index.native.js\",\n      \"maxSize\": \"100kB\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Storybook Documentation for Layout Primitives\nDESCRIPTION: This code imports necessary components from Storybook and a custom documentation component, then configures a documentation page for the Layout Primitives tutorial. It uses the Meta component to set the page title within the Storybook navigation hierarchy.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport { LayoutPrimitivesDocs } from './LayoutPrimitivesDocs';\n\n<Meta title=\"Components/Layout Primitives (Box)/Layout Primitives Tutorial\" />\n\n<LayoutPrimitivesDocs />\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Dropdown using onChange and value in JSX\nDESCRIPTION: This code demonstrates an alternative approach for controlling dropdown selection using the value prop on SelectInput instead of isSelected on individual items. It simplifies implementation by centralizing the controlled state.\n\nLANGUAGE: jsx\nCODE:\n```\nconst [currentSelection, setCurrentSelection] = React.useState();\n\nconst onSomeAction = () => {\n  setCurrentSelection('mumbai');\n};\n\nconst onResetClick = () => {\n  setCurrentSelection(undefined);\n};\n\nconst onSelectChange = ({ values }) => {\n  setCurrentSelection(values[0]);\n};\n\n<Dropdown>\n  <SelectInput\n    label=\"City\"\n    // New Prop 👇🏼\n    value={currentSelection}\n    onChange={onSelectChange}\n  />\n  <DropdownOverlay>\n    <ActionList>\n      <ActionListItem title=\"Mumbai\" value=\"mumbai\" />\n      <ActionListItem title=\"Bangalore\" value=\"bangalore\" />\n    </ActionList>\n  </DropdownOverlay>\n</Dropdown>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Skip Navigation Links in HTML\nDESCRIPTION: A basic implementation of skip navigation links that allows keyboard and screen reader users to bypass navigation and go directly to main content. The implementation uses a visually hidden link that becomes visible on focus.\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <a class=\"skip-link\" href=\"#main-content\"> Skip Navigation or Skip to Content </a>\n  <main id=\"main-content\">Content here</main>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for iOS Development\nDESCRIPTION: Command to run the storybook development server for iOS components.\n\nLANGUAGE: sh\nCODE:\n```\nyarn start:ios\n```\n\n----------------------------------------\n\nTITLE: Refactoring Color Token Path in JavaScript\nDESCRIPTION: Example of refactoring a color token path by removing the light/dark condition, which will be handled by the ThemeProvider. This simplifies accessing surface background colors with different contrast levels.\n\nLANGUAGE: javascript\nCODE:\n```\ntheme.colors.surface.background.level1.lowContrast.onLight\n\n// to this (the light and dark will be taken care by the themeprovider)\ntheme.colors.surface.background.level1.lowContrast\n```\n\n----------------------------------------\n\nTITLE: Implementing TabNav with Config Based API in React\nDESCRIPTION: This config-driven API approach defines both the data and rendering of items, letting TabNav handle rendering internally. It provides access to overflowing items and rendering flexibility but introduces a completely new API pattern that may be less intuitive.\n\nLANGUAGE: jsx\nCODE:\n```\nconst renderTabNavItem = (props) => {\n  return <TabNavItemLink title={props.title} icon={props.icon} href={props.href} />\n}\n\n<TabNav\n  items={[\n    { href: '/home', title: 'Home', render: renderTabNavItem },\n    { href: '/payroll', title: 'Payroll', render: renderTabNavItem },\n    { href: '/payments', title: 'Payments', render: (props) => {} },\n    {\n      href: '/capital',\n      title: 'Capital',\n      // description/icon etc extra props can later be rendered inside <ExploreItem />\n      description: 'Description',\n      icon: CapitalIcon, \n      render: renderTabNavItem,\n    },\n    {\n      href: '/more',\n      render: (props) => (\n        <Menu>\n          <TabNavItemLink title=\"More\" trailing={<ChevronDownIcon />} />\n          <MenuOverlay>\n            {props.overflowingItems.map((item) => {\n              return (\n                <MenuItem key={item.title}>\n                  // custom explore item\n                  <ExploreItem\n                    icon={item.icon}\n                    title={item.title}\n                    description={item.description}\n                  />\n                </MenuItem>\n              );\n            })}\n            <MenuItem>\n              <ExploreItem\n                icon={MagicCheckoutIcon}\n                title=\"Magic Checkout\"\n                description=\"Some product description\"\n              />\n            </MenuItem>\n            <MenuItem>\n              <ExploreItem\n                icon={RazorXIcon}\n                title=\"RazorX\"\n                description=\"Some product description\"\n              />\n            </MenuItem>\n          </MenuOverlay>\n        </Menu>\n      ),\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Cocoapods for iOS Development\nDESCRIPTION: Command to install Cocoapods, which is required for iOS development with React Native.\n\nLANGUAGE: sh\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for Web Development\nDESCRIPTION: Command to run the storybook development server for web components.\n\nLANGUAGE: sh\nCODE:\n```\nyarn start:web\n```\n\n----------------------------------------\n\nTITLE: Implementing Mobile Dashboard Navigation with BottomSheet\nDESCRIPTION: Example of a mobile-specific Dashboard navigation using TopNav with action buttons and a BottomSheet component. This implementation uses the useBreakpoint hook to conditionally render the mobile version.\n\nLANGUAGE: jsx\nCODE:\n```\nconst Dashboard = () => {\n  const { isMobile } = useBreakpoint();\n\n  if (isMobile) {\n    return (\n      <TopNav>\n        <TopNavBrand />\n        <TopNavContent>\n          <Button icon={MenuIcon} variant=\"tertiary\" accessibilityLabel=\"Toggle side navigation\" />\n          <Text>{currentPageTitle}</Text>\n        </TopNavContent>\n        <TopNavActions>\n          <Button icon={ActivityIcon} accessibilityLabel=\"View Ecosystem Health\" />\n          <Button icon={AnnouncementIcon} accessibilityLabel=\"View Announcements\" />\n          <Button icon={RayIcon} accessibilityLabel=\"Ask Ray\" />\n          <Avatar onClick={openBottomSheet} />\n          <BottomSheet>\n            { /* Avatar BottomSheet Content */ }\n          </BottomSheet>\n        </TopNavActions>\n      </TopNav>\n    )\n  }\n\n  return (\n    // ... desktop navigation bar jsx\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for Android Development\nDESCRIPTION: Command to run the storybook development server for Android components.\n\nLANGUAGE: sh\nCODE:\n```\nyarn start:android\n```\n\n----------------------------------------\n\nTITLE: TabNav Props Definition in TypeScript\nDESCRIPTION: Type definition for the TabNav component that manages navigation items with responsive behavior. It accepts an array of items and uses a render props pattern to provide access to both visible and overflowing items.\n\nLANGUAGE: ts\nCODE:\n```\ntype TabNav = {\n  children: React.ReactNode;\n  /**\n   * Array of navigation items\n   */\n  items: Array<\n    TabNavItem & {\n      /**\n       * force this item to always be inside \"more\" regardless of screen size\n       */\n      isAlwaysOverflowing?: boolean;\n    }\n  >;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Web Unit Tests\nDESCRIPTION: Command to run unit tests for web components in the Blade project.\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/blade\nyarn test:react # web tests\n```\n\n----------------------------------------\n\nTITLE: React Router Integration with SideNavLink Component\nDESCRIPTION: Example showing how to pass the NavLink component from React Router to SideNavLink components. This approach requires defining NavLink at each item but follows common patterns and gives more flexibility.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNav>\n  <SideNavLink as={NavLink} />\n  <SideNavLink as={NavLink} />\n</SideNav>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic SideNavLink with Icon in JSX\nDESCRIPTION: Example of a basic SideNavLink implementation with an icon. This snippet shows how to create a navigation link to the vendor payments page using the NavLink component with a BillIcon.\n\nLANGUAGE: jsx\nCODE:\n```\n<SideNavLink\n  as={NavLink}\n  icon={BillIcon}\n  title=\"Vendor Payments\"\n  href=\"/vendor-payments\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Alternative Levels API for SideNav in React\nDESCRIPTION: Another approach for implementing SideNav with separate trigger and container components for different navigation levels. This implementation uses refs to connect related levels, offering a different component composition structure.\n\nLANGUAGE: jsx\nCODE:\n```\nconst accountsL2Ref = React.useRef(null);\n\n<SideNav>\n  <SideNavL1>\n    <SideNavLink title=\"Home\" icon={HomeIcon} href=\"/\" />\n    <SideNavLink l2Ref={accountsL2Ref} title=\"Accounts\" icon={UserIcon} href=\"/accounts\" />\n  </SideNavL1>\n\n  <SideNavL2 ref={accountsL2Ref}>\n    <SideNavLink title=\"Profile\" icon={ProfileIcon} href=\"/accounts/profile\" />\n    <SideNavLink title=\"Business Profile\" icon={BusinessIcon} href=\"/accounts/business\">\n      <SideNavL3>\n        <SideNavLink title=\"Business Info\" icon={ProfileIcon} href=\"/accounts/profile\" />\n        <SideNavLink title=\"Business Details\" icon={ProfileIcon} href=\"/accounts/profile\" />\n      </SideNavL3>\n    </SideNavLink>\n  </SideNavL2>\n</SideNav>;\n```\n\n----------------------------------------\n\nTITLE: Nested SpotlightPopover Components and Context Limitations in React Native\nDESCRIPTION: Illustrates the technical challenge in React Native when nesting multiple SpotlightPopover components, where the React Context will only get values from the nearest provider, limiting the ability to have multiple tour flows.\n\nLANGUAGE: jsx\nCODE:\n```\n<SpotlightPopover tourKey=\"global\">\n  <SpotlightPopover tourKey=\"payments\">\n    <Example1 /> // this will get all the states from the `payments` tour\n    <Example2 /> // this will also get all the states from the `payments` tour\n  </SpotlightPopover>\n</SpotlightPopover>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Component Composition with Blade UI Components\nDESCRIPTION: This snippet demonstrates how to compose Blade UI components to create a responsive interface that renders a BottomSheet on mobile devices and a DropdownOverlay on larger screens. It uses the useBreakpoint hook to determine the device type.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme, useBreakpoint, BottomSheet, Dropdown } from '@razorpay/blade';\n\nconst App = () => {\n  const { theme } = useTheme();\n  const { matchedDeviceType } = useBreakpoint({ breakpoints: theme.breakpoints });\n  const isMobile = matchedDeviceType === 'mobile';\n\n  return (\n    <Dropdown selectionType={selectionType}>\n      <SelectInput label=\"Select Action\" />\n      {isMobile ? (\n        <BottomSheet>\n          <BottomSheetHeader />\n          <BottomSheetBody>\n            <SelectContent />\n          </BottomSheetBody>\n          <BottomSheetFooter />\n        </BottomSheet>\n      ) : (\n        <DropdownOverlay>\n          <SelectContent />\n        </DropdownOverlay>\n      )}\n    </Dropdown>\n  );\n};\n\nconst SelectContent = () => {\n  return (\n    <ActionList>\n      <ActionListItem\n        leading={<ActionListItemIcon icon={SettingsIcon} />}\n        title=\"Settings\"\n        value=\"settings\"\n      />\n      <ActionListItem leading={<ActionListItemIcon icon={InfoIcon} />} title=\"Info\" value=\"info\" />\n    </ActionList>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Component Composition with Blade UI Components\nDESCRIPTION: This snippet demonstrates how to compose Blade UI components to create a responsive interface that renders a BottomSheet on mobile devices and a DropdownOverlay on larger screens. It uses the useBreakpoint hook to determine the device type.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTheme, useBreakpoint, BottomSheet, Dropdown } from '@razorpay/blade';\n\nconst App = () => {\n  const { theme } = useTheme();\n  const { matchedDeviceType } = useBreakpoint({ breakpoints: theme.breakpoints });\n  const isMobile = matchedDeviceType === 'mobile';\n\n  return (\n    <Dropdown selectionType={selectionType}>\n      <SelectInput label=\"Select Action\" />\n      {isMobile ? (\n        <BottomSheet>\n          <BottomSheetHeader />\n          <BottomSheetBody>\n            <SelectContent />\n          </BottomSheetBody>\n          <BottomSheetFooter />\n        </BottomSheet>\n      ) : (\n        <DropdownOverlay>\n          <SelectContent />\n        </DropdownOverlay>\n      )}\n    </Dropdown>\n  );\n};\n\nconst SelectContent = () => {\n  return (\n    <ActionList>\n      <ActionListItem\n        leading={<ActionListItemIcon icon={SettingsIcon} />}\n        title=\"Settings\"\n        value=\"settings\"\n      />\n      <ActionListItem leading={<ActionListItemIcon icon={InfoIcon} />} title=\"Info\" value=\"info\" />\n    </ActionList>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Card Component with Nested Header Components (API 1)\nDESCRIPTION: An approach using nested JSX components for Card headers with customizable header title, icon, counter, and trailing elements.\n\nLANGUAGE: jsx\nCODE:\n```\n<Card.Header>\n  <Card.HeaderTitle icon={Clock} subtitle=\"Card subtitle\">\n    Card Header Title\n    <Card.HeaderCounter value={12} />\n  </Card.HeaderTitle>\n  <Card.HeaderTrailingVisual>\n    <Badge />\n  </Card.HeaderTrailingVisual>\n</Card.Header>\n```\n\n----------------------------------------\n\nTITLE: Linkable Card Implementation Using href Property\nDESCRIPTION: Demonstrates how to implement linkable cards using the href property. This approach internally uses a LinkOverlay component to ensure proper accessibility and prevent interaction issues with nested interactive elements.\n\nLANGUAGE: jsx\nCODE:\n```\n// we might also need to expose other link props like target=blank etc\n<Card href=\"/payment-pages\" />\n```\n\n----------------------------------------\n\nTITLE: Hoverable Card Implementation - Method 2 with shouldshouldScaleOnHover Prop\nDESCRIPTION: Shows an alternative implementation for hoverable cards using a shouldshouldScaleOnHover prop that automatically handles hover effects via CSS. This method reduces complexity for consumers but offers less manual control.\n\nLANGUAGE: jsx\nCODE:\n```\n<Card\n  // we can still have onHover event for flexibility\n  onHover={() => {\n    // users can do stuff here\n  }}\n  // automatic hover, we can internally pass :hover to styled components\n  shouldshouldScaleOnHover\n/>\n```\n\n----------------------------------------\n\nTITLE: ActionListHeader TypeScript Props Interface\nDESCRIPTION: TypeScript interface for the ActionListHeader component props, defining the title and leading visual element properties.\n\nLANGUAGE: ts\nCODE:\n```\ntype ActionListHeaderProps = {\n  title: string;\n  /**\n   * Leading visual of header\n   *\n   * Should be limited to `ActionListHeaderIcon`\n   */\n  leading: React.ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: ActionListSection TypeScript Props Interface\nDESCRIPTION: TypeScript interface for the ActionListSection component props, which includes an optional title property for the section heading.\n\nLANGUAGE: ts\nCODE:\n```\ntype ActionListSectionProps = {\n  /** Section Heading. Should be optional */\n  title?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Alert Component Usage Without Title\nDESCRIPTION: Example showing an Alert component with notice intent and without a title, displaying only a description message about payment refund limitations.\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert\n  intent=\"notice\"\n  description=\"The payment was made 6 months ago, therefore you can't issue refund to this merchant.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Example of Breadcrumb with Last Separator in JSX\nDESCRIPTION: Demonstrates using the showLastSeparator prop to display the last separator in the Breadcrumb component, which can be useful in page title implementations.\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  return (\n    <Box>\n      <Breadcrumb showLastSeparator marginBottom=\"spacing.3\">\n        <BreadcrumbItem href=\"/help\">Help</BreadcrumbItem>\n        <BreadcrumbItem href=\"/support-tickets\">Support Tickets</BreadcrumbItem>\n      </Breadcrumb>\n      <Box display=\"flex\" gap=\"spacing.3\">\n        <Heading>Settlements related</Heading>\n        <Badge color=\"notice\">OPEN</Badge>\n      </Box>\n    </Box>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: BreadcrumbItem Component Props TypeScript Interface\nDESCRIPTION: TypeScript interface for the BreadcrumbItem component, specifying props like href, onClick handler, current page status, children content, and icon options.\n\nLANGUAGE: ts\nCODE:\n```\ntype BreadcrumbItemProps = {\n  /**\n   * Href of the BreadcrumbItem\n   */\n  href: string;\n  /**\n   * Function to be called on click of the BreadcrumbItem,\n   * \n   * This can be used to integrate with routing libraries like `react-router-dom`\n   */\n  onClick?: (event: React.MouseEvent<HTMLAnchorElement>) => void;\n  /**\n   * Whether the BreadcrumbItem is the current page,\n   * Sets the aria-current attribute to `page`\n   * \n   * @default false\n   */\n  isCurrentPage?: boolean;\n  /**\n   * Content of the BreadcrumbItem\n   */\n  children?: string;\n  /**\n   * Icon to be shown before the BreadcrumbItem\n   */\n  icon?: IconComponent;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic BottomNavItem Implementation\nDESCRIPTION: Shows how to create a basic navigation item with title, icon, and routing capabilities using NavLink.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomNavItem \n  title=\"Payments\" \n  as={NavLink} \n  icon={AcceptPaymentsIcon} \n  href=\"/payments\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Intent-based Chip Selection in React\nDESCRIPTION: Example showing how to use different visual intents (positive/negative) for chips. This creates a yes/no selection where each option has a distinct visual styling based on its semantic meaning.\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>\n  <Text> Is the result helpful? </Text>\n  <ChipGroup accessibilityLabel=\"Is the result helpful?\" selectionType=\"single\">\n    <Chip intent=\"positive\" value=\"yes\">\n      Yes\n    </Chip>\n    <Chip intent=\"negative\" value=\"no\">\n      No\n    </Chip>\n  </ChipGroup>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Hierarchical List with Variant-based Configuration\nDESCRIPTION: The final chosen API approach using a hierarchical structure with variants to control list types (ordered, ordered-filled, unordered) with custom icon support.\n\nLANGUAGE: jsx\nCODE:\n```\n<List variant='unordered' icon={InfoIcon} size='medium'>\n  <ListItem icon={EditIcon}>\n    Item 1\n    <List variant='ordered'>\n      <ListItem>\n        Item 1.1\n        <List variant='ordered-filled'>\n          <ListItem>\n            Item 1.1.1\n          <ListItem/>\n        <List/>\n      <ListItem/>\n    <List/>\n  <ListItem/>\n  <ListItem>\n    Item 2\t\t\n  <ListItem/>\n</List>\n```\n\n----------------------------------------\n\nTITLE: Using Tooltip with Non-Interactive Elements\nDESCRIPTION: Shows how to make tooltips work with non-interactive elements like icons or counters by using the TooltipInteractiveWrapper component, which provides the necessary interactions for tooltip triggering.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip, TooltipInteractiveWrapper } from '@razorpay/blade';\n\n// non-interactive element as trigger\n<Tooltip content=\"Amount reversed to customer bank account\">\n  <TooltipInteractiveWrapper>\n    <Counter value={100} />\n  </TooltipInteractiveWrapper>\n</Tooltip>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Spinner Component in React/JSX\nDESCRIPTION: Example showing how to import and use the Spinner component from the Razorpay components library. This demonstrates setting contrast, size, and accessibility label properties.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner } from '@razorpay/components';\n\n<Spinner\n  contrast='high'\n  size='large' \n  accessibilityLabel='Loading'\n/>\n```\n\n----------------------------------------\n\nTITLE: BottomSheet Example with Flexible Content\nDESCRIPTION: Sample demonstrating the proposed final approach where BottomSheet remains independent and ActionList works inside BottomSheetBody without special integration.\n\nLANGUAGE: jsx\nCODE:\n```\n<BottomSheet>\n\t<BottomSheetHeader />\n\t<BottomSheetBody>\n\t\t<ActionList /> <---- works out of the box\n\t</BottomSheetBody>\n\t<BottomSheetFooter />\n</BottomSheet>\n```\n\n----------------------------------------\n\nTITLE: Defining VirtualizedWrapperProps TypeScript Interface for Blade's VirtualizedTable\nDESCRIPTION: TypeScript interface definition for VirtualizedWrapperProps which specifies the props accepted by the TableVirtualizedWrapper component. It includes tableData (array of table node objects), optional headerHeight, optional rowHeight function, and children elements, along with a comprehensive usage example.\n\nLANGUAGE: typescript\nCODE:\n```\ntype VirtualizedWrapperProps<Item> = {\n  /**\n   * * @example\n   *   <TableComponent\n   *      data={data}\n   *      isVirtualized\n   *      rowDensity=\"compact\"\n   *      selectionType=\"multiple\"\n   *      height=\"700px\"\n   *      toolbar={\n   *        <TableToolbar>\n   *          <TableToolbarActions>\n   *            <Button variant=\"secondary\" marginRight=\"spacing.2\">\n   *              Export\n   *            </Button>\n   *            <Button>Payout</Button>\n   *          </TableToolbarActions>\n   *        </TableToolbar>\n   *      }\n   *    >\n   *      {(tableData) => (\n   *        <TableVirtualizedWrapper tableData={tableData}>\n   *          <TableHeader>\n   *            <TableHeaderRow>\n   *              <TableHeaderCell>ID</TableHeaderCell>\n   *              <TableHeaderCell>Amount</TableHeaderCell>\n   *              <TableHeaderCell>Account</TableHeaderCell>\n   *              <TableHeaderCell>Date</TableHeaderCell>\n   *              <TableHeaderCell>Method</TableHeaderCell>\n   *              <TableHeaderCell>Status</TableHeaderCell>\n   *            </TableHeaderRow>\n   *          </TableHeader>\n   *          <TableBody<Item>>\n   *            {(tableItem, index) => (\n   *              <TableRow\n   *                key={index}\n   *                item={tableItem}\n   *                hoverActions={\n   *                  <>\n   *                    <IconButton\n   *                      accessibilityLabel=\"Copy\"\n   *                      isHighlighted\n   *                      icon={CopyIcon}\n   *                      onClick={() => console.log('copy', tableItem)}\n   *                    />\n   *                    <IconButton\n   *                      accessibilityLabel=\"Delete\"\n   *                      isHighlighted\n   *                      icon={TrashIcon}\n   *                      onClick={() => console.log('delete', tableItem)}\n   *                    />\n   *                  </>\n   *                }\n   *              >\n   *                <TableCell>\n   *                  <Code size=\"medium\">{tableItem.paymentId}</Code>\n   *                </TableCell>\n   *                <TableCell>\n   *                  <Amount value={tableItem.amount} />\n   *                </TableCell>\n   *                <TableCell>{tableItem.account}</TableCell>\n   *                <TableCell>\n   *                  {tableItem.date?.toLocaleDateString('en-IN', {\n   *                    year: 'numeric',\n   *                    month: '2-digit',\n   *                    day: '2-digit',\n   *                  })}\n   *                </TableCell>\n   *                <TableCell>{tableItem.method}</TableCell>\n   *                <TableCell>\n   *                  <Badge\n   *                    size=\"medium\"\n   *                    color={\n   *                      tableItem.status === 'Completed'\n   *                        ? 'positive'\n   *                        : tableItem.status === 'Pending'\n   *                        ? 'notice'\n   *                        : tableItem.status === 'Failed'\n   *                        ? 'negative'\n   *                        : 'default'\n   *                    }\n   *                  >\n   *                    {tableItem.status}\n   *                  </Badge>\n   *                </TableCell>\n   *              </TableRow>\n   *            )}\n   *          </TableBody>\n   *        </TableVirtualizedWrapper>\n   *      )}\n   *    </TableComponent>\n   *\n   **/\n  /**\n   /**\n   * The tableData prop is an array of objects.\n   */\n  tableData: TableNode<Item>[];\n  /**\n   * headerHeight is the height of the header\n   **/\n  headerHeight?: number;\n  /**\n   * rowHeight is the height of each row, it can be a fixed number or a function that returns a number\n   **/\n  rowHeight?: (item: TableLibraryTableNode, index: number) => number;\n  children: React.ReactNode;\n  children: React.ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Table Component TypeScript Types\nDESCRIPTION: Comprehensive type definitions for a Table component and its subcomponents, including props for features like selection, sorting, pagination, and styling options.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TableNode<Item> = Item & {\n  id: Identifier;\n};\n\ntype TableData<Item> = {\n  nodes: TableNode<Item>[];\n};\n\ntype TableBackgroundColors = `surface.background.gray.${DotNotationToken<\n  Theme['colors']['surface']['background']['gray']\n>}`;\n\ntype TableHeaderProps = {\n  /**\n   * The children of TableHeader should be TableHeaderRow\n   * @example\n   * <TableHeader>\n   *   <TableHeaderRow>\n   *     <TableHeaderCell>Header Cell 1</TableHeaderCell>\n   *   </TableHeaderRow>\n   * </TableHeader>\n   **/\n  children: React.ReactNode;\n};\n\ntype TableHeaderRowProps = {\n  /**\n   * The children of TableHeaderRow should be TableHeaderCell\n   * @example\n   * <TableHeader>\n   *   <TableHeaderRow>\n   *     <TableHeaderCell>Header Cell 1</TableHeaderCell>\n   *   </TableHeaderRow>\n   * </TableHeader>\n   **/\n  children: React.ReactNode;\n  /**\n   * The rowDensity prop determines the density of the table.\n   * The rowDensity prop can be 'compact', 'normal', or'comfortable'.\n   * The default value is `normal`.\n   **/\n  rowDensity?: TableProps<unknown>['rowDensity'];\n};\n\ntype TableHeaderCellProps = {\n  /**\n   * The children of TableHeaderCell can be a string or a ReactNode.\n   **/\n  children: string | React.ReactNode;\n  /**\n   * The unique key of the column.\n   * This is used to identify the column for sorting in sortFunctions prop of Table.\n   * Sorting is enabled only for columns whose key is present in sortableColumns prop of Table.\n   **/\n  headerKey?: string;\n};\n\ntype TableProps<Item> = {\n  /**\n   * The children of the Table component should be a function that returns TableHeader, TableBody and TableFooter components.\n   * The function will be called with the tableData prop.\n   */\n  children: (tableData: TableNode<Item>[]) => React.ReactElement;\n  /**\n   * The data prop is an object with a nodes property that is an array of objects.\n   * Each object in the array is a row in the table.\n   * The object should have an id property that is a unique identifier for the row.\n   */\n  data: TableData<Item>;\n  /**\n   * Selection mode determines how the table rows can be selected.\n   * @default 'row'\n   **/\n  multiSelectTrigger?: 'checkbox' | 'row';\n  /**\n   * The selectionType prop determines the type of selection that is allowed on the table.\n   * The selectionType prop can be 'none', 'single' or 'multiple'.\n   * @default 'none'\n   **/\n  selectionType?: 'none' | 'single' | 'multiple';\n  /**\n   * The onSelectionChange prop is a function that is called when the selection changes.\n   * The function is called with an object that has a values property that is an array of the selected rows.\n   **/\n  onSelectionChange?: ({\n    values,\n    selectedIds,\n  }: {\n    /**\n     * Note: on server side paginated data, this prop will only contain the selected rows on the current page.\n     *\n     * Thus, it's recommended to use `selectedIds` for more consistent state management across server/client paginated data.\n     *\n     * *Deprecated:* Use `selectedIds` instead.\n     *\n     * @deprecated\n     */\n    values: TableNode<Item>[];\n    /**\n     * An array of selected row ids.\n     */\n    selectedIds: Identifier[];\n  }) => void;\n  /**\n   * The isHeaderSticky prop determines whether the table header is sticky or not.\n   * The default value is `false`.\n   **/\n  isHeaderSticky?: boolean;\n  /**\n   * The isFooterSticky prop determines whether the table footer is sticky or not.\n   * The default value is `false`.\n   **/\n  isFooterSticky?: boolean;\n  /**\n   * The isFirstColumnSticky prop determines whether the first column is sticky or not.\n   * The default value is `false`.\n   **/\n  isFirstColumnSticky?: boolean;\n  /**\n   * The rowDensity prop determines the density of the table.\n   * The rowDensity prop can be 'compact', 'normal', or'comfortable'.\n   * The default value is `normal`.\n   **/\n  rowDensity?: 'compact' | 'normal' | 'comfortable';\n  /**\n   * The onSortChange prop is a function that is called when the sort changes.\n   * The function is called with an object that has a sortKey property that is the key of the column that is sorted and a isSortReversed property that is a boolean that determines whether the sort is reversed or not.\n   **/\n  onSortChange?: ({\n    sortKey,\n    isSortReversed,\n  }: {\n    sortKey: TableHeaderCellProps['headerKey'];\n    isSortReversed: boolean;\n  }) => void;\n  /**\n   * The sortFunctions prop is an object that has a key for each column that is sortable.\n   * The value of each key is a function that is called when the column is sorted.\n   * The function is called with an array of the rows in the table.\n   * The function should return an array of the rows in the table.\n   **/\n  sortFunctions?: Record<string, (array: TableNode<Item>[]) => TableNode<Item>[]>;\n  /**\n   * The toolbar prop is a React element that is rendered above the table.\n   * The toolbar prop should be a `TableToolbar` component.\n   **/\n  toolbar?: React.ReactElement;\n  /**\n   * The pagination prop is a React element that is rendered below the table.\n   * The pagination prop should be a `TablePagination` component.\n   **/\n  pagination?: React.ReactElement;\n  /**\n   * The height prop is a responsive styled prop that determines the height of the table.\n   **/\n  height?: BoxProps['height'];\n  /**\n   * The showStripedRows prop determines whether the table should have striped rows or not.\n   * The default value is `false`.\n   **/\n  showStripedRows?: boolean;\n  /**\n   * The gridTemplateColumns prop determines the grid-template-columns CSS property of the table.\n   * The default value is `repeat(${columnCount},minmax(100px, 1fr))`.\n   **/\n  gridTemplateColumns?: string;\n  /**\n   * The isLoading prop determines whether the table is loading or not.\n   * The default value is `false`.\n   **/\n  isLoading?: boolean;\n  /**\n   * The isRefreshing prop determines whether the table is refreshing or not.\n   * The default value is `false`.\n   **/\n  isRefreshing?: boolean;\n  /**\n   * The showBorderedCells prop determines whether the table should have bordered cells or not.\n   **/\n  showBorderedCells?: boolean;\n} & StyledPropsBlade;\n\ntype Identifier = string | number;\n\ntype TableBodyProps = {\n  /**\n   * The children of the TableBody component should be TableRow components.\n   * @example\n   * <TableBody>\n   *   <TableRow>\n   *     <TableCell>...</TableCell>\n   *   </TableRow>\n   * </TableBody>\n   **/\n  children: React.ReactNode;\n};\n\ntype TableRowProps<Item> = {\n  /**\n   * The children of the TableRow component should be TableCell components.\n   * @example\n   * <TableRow>\n   *   <TableCell>...</TableCell>\n   * </TableRow>\n   **/\n  children: React.ReactNode;\n  /**\n   * The item prop is used to pass the individual table item to the TableRow component.\n   * @example\n   * tableData.map((tableItem) => (\n   *   <TableRow item={item}>\n   *     <TableCell>...</TableCell>\n   *   </TableRow>\n   * ));\n   **/\n  item: TableNode<Item>;\n  /**\n   * The isDisabled prop is used to disable the TableRow component.\n   * @example\n   * <TableRow isDisabled>\n   *   <TableCell>...</TableCell>\n   * </TableRow>\n   **/\n  isDisabled?: boolean;\n  /**\n   * Callback triggered when the row is hovered. It is called with the current row item prop.\n   */\n  onHover?: ({ item }: { item: TableNode<Item> }) => void;\n  /**\n   * Callback triggered when the row is clicked. It is called with the current row item prop.\n   */\n  onClick?: ({ item }: { item: TableNode<Item> }) => void;\n};\n\ntype TableCellProps = {\n  /**\n   * The children of the TableCell component should be a string or a ReactNode.\n   * @example\n   * <TableCell>{'Hello'}</TableCell>\n   * <TableCell>\n   *  <Text>...</Text>\n   * </TableCell>\n   * <TableCell>\n   * <Button>...</Button>\n   * </TableCell>\n   **/\n  children: React.ReactNode;\n};\n\ntype TableEditableCellProps = Pick<\n  BaseInputProps,\n  | 'validationState'\n  | 'placeholder'\n  | 'defaultValue'\n  | 'name'\n  | 'onChange'\n  | 'onFocus'\n  | 'onBlur'\n  | 'value'\n  | 'isDisabled'\n  | 'isRequired'\n  | 'prefix'\n  | 'suffix'\n  | 'maxCharacters'\n  | 'autoFocus'\n  | 'keyboardReturnKeyType'\n  | 'autoCompleteSuggestionType'\n  | 'onSubmit'\n  | 'autoCapitalize'\n  | 'testID'\n  | 'onClick'\n  | 'leadingIcon'\n  | 'trailingButton'\n  | 'errorText'\n  | 'successText'\n> & {\n  accessibilityLabel: NonNullable<BaseInputProps['accessibilityLabel']>;\n};\n\ntype TableFooterProps = {\n  /**\n   * The children of TableFooter should be TableFooterRow\n   * @example\n   * <TableFooter>\n   *   <TableFooterRow>\n   *     <TableFooterCell>Footer Cell 1</TableFooterCell>\n   *   </TableFooterRow>\n   * </TableFooter>\n   **/\n  children: React.ReactNode;\n};\n\ntype TableFooterRowProps = {\n  /**\n   * The children of TableFooterRow should be TableFooterCell\n   * @example\n   * <TableFooter>\n   *   <TableFooterRow>\n   *     <TableFooterCell>Footer Cell 1</TableFooterCell>\n   *   </TableFooterRow>\n   * </TableFooter>\n   **/\n  children: React.ReactNode;\n};\n\ntype TableFooterCellProps = {\n  /**\n   * The children of TableHeaderCell can be a string or a ReactNode.\n   **/\n  children: string | React.ReactNode;\n};\n\ntype TablePaginationCommonProps = {\n  /**\n   * The default page size.\n   * Page size controls how rows are shown per page.\n   * @default 10\n   **/\n  defaultPageSize?: 10 | 25 | 50;\n  /**\n   * The current page. Passing this prop will make the component controlled and will not update the page on its own.\n   **/\n  currentPage?: number;\n\n  /**\n   * Callback function that is called when the page size is changed\n   */\n  onPageSizeChange?: ({ pageSize }: { pageSize: number }) => void;\n  /**\n   * Whether to show the page size picker. It will be always be hidden on mobile.\n   * Page size picker controls how rows are shown per page.\n   * @default true\n   */\n  showPageSizePicker?: boolean;\n  /**\n   * Whether to show the page number selector. It will be always be hidden on mobile.\n   * Page number selectors is a group of buttons that allows the user to jump to a specific page.\n   * @default false\n   */\n  showPageNumberSelector?: boolean;\n  /**\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Flexible TableBody Component with Loading and Empty States\nDESCRIPTION: A functional React component that renders a table body with support for loading states, empty data handling, and custom components. It conditionally displays a loader, empty state message, or the actual table content based on props.\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport TableLoader from 'common/ui/TableLoader';\nimport EmptyTableRow from 'common/ui/EmptyTableRow';\n\nexport default (props) => {\n  let tableRowComponent;\n  const {\n    isLoading,\n    emptyTableRow,\n    emptyTableMsg,\n    colSpan,\n    rows,\n    children,\n    SpinnerComponent,\n  } = props;\n\n  if (isLoading) {\n    tableRowComponent = SpinnerComponent || <TableLoader colSpan={colSpan} />;\n  } else if (!rows.length) {\n    tableRowComponent = emptyTableRow || (\n      <EmptyTableRow colSpan={colSpan} message={emptyTableMsg} />\n    );\n  }\n\n  return (\n    <tbody>\n      {tableRowComponent\n        ? typeof tableRowComponent === 'function'\n          ? tableRowComponent(colSpan)\n          : tableRowComponent\n        : children}\n    </tbody>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Point-to-Pixel Relationship in CSS\nDESCRIPTION: This snippet defines the fundamental relationship between points (pt) and pixels (px) at 1x resolution, establishing the base measurement unit for the spatial system.\n\nLANGUAGE: css\nCODE:\n```\n1pt = 1px\n```\n\n----------------------------------------\n\nTITLE: Markdown Document Reference Path for Blade v11 Upgrade Guide\nDESCRIPTION: A markdown-formatted link that redirects users to the new location of the upgrade guide documentation.\n\nLANGUAGE: markdown\nCODE:\n```\n[docs/migration-docs/upgrade-v11.md](./docs/migration-docs/upgrade-v11.md)\n```"
  }
]