[
  {
    "owner": "michaelhly",
    "repo": "solana-py",
    "content": "TITLE: Initializing Synchronous Solana API Client\nDESCRIPTION: Creates a synchronous client instance to interact with the Solana JSON RPC API using the devnet endpoint.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom solana.rpc.api import Client\n\nhttp_client = Client(\"https://api.devnet.solana.com\")\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Solana API Client\nDESCRIPTION: Demonstrates the usage of the asynchronous Solana API client, including connection checking and proper client closure.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom solana.rpc.async_api import AsyncClient\n\nasync def main():\n    async with AsyncClient(\"https://api.devnet.solana.com\") as client:\n        res = await client.is_connected()\n    print(res)  # True\n\n    # Alternatively, close the client explicitly instead of using a context manager:\n    client = AsyncClient(\"https://api.devnet.solana.com\")\n    res = await client.is_connected()\n    print(res)  # True\n    await client.close()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing Solana Websocket Client\nDESCRIPTION: Shows how to use the Solana websocket client to subscribe to logs, receive messages, and unsubscribe. It also demonstrates using the client as an asynchronous iterator.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom asyncstdlib import enumerate\nfrom solana.rpc.websocket_api import connect\n\nasync def main():\n    async with connect(\"wss://api.devnet.solana.com\") as websocket:\n        await websocket.logs_subscribe()\n        first_resp = await websocket.recv()\n        subscription_id = first_resp[0].result\n        next_resp = await websocket.recv()\n        print(next_resp)\n        await websocket.logs_unsubscribe(subscription_id)\n\n    # Alternatively, use the client as an infinite asynchronous iterator:\n    async with connect(\"wss://api.devnet.solana.com\") as websocket:\n        await websocket.logs_subscribe()\n        first_resp = await websocket.recv()\n        subscription_id = first_resp[0].result\n        async for idx, msg in enumerate(websocket):\n            if idx == 3:\n                break\n            print(msg)\n        await websocket.logs_unsubscribe(subscription_id)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Fetching Solana Account Info\nDESCRIPTION: Code demonstrating how to retrieve account information from the Solana blockchain.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresp = http_client.get_account_info(\"83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri\")\nprint(resp)\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Client for Solana API\nDESCRIPTION: Example of creating an HTTP client to interact with Solana's API using the library.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom solana.rpc.api import Client\n\nhttp_client = Client(\"https://api.devnet.solana.com\")\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Client for Solana\nDESCRIPTION: Example showing how to create a WebSocket client for real-time Solana blockchain data.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom solana.rpc.websocket_api import connect\n\nasync def main():\n    async with connect(\"wss://api.devnet.solana.com\") as websocket:\n        await websocket.account_subscribe(\n            \"83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri\",\n            commitment=\"confirmed\",\n        )\n        first_resp = await websocket.recv()\n        print(first_resp)\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Installing Solana.py Dependencies\nDESCRIPTION: Commands to install the necessary Python packages for using Solana.py, including Solders for Solana SDK bindings and the main Solana package.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install solders\npip install solana\n```\n\n----------------------------------------\n\nTITLE: Importing Solana Package in Python\nDESCRIPTION: Basic import statement to use the Solana package in a Python script.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport solana\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Python Package\nDESCRIPTION: Instructions for installing the solana package using pip package manager.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install solana\n```\n\n----------------------------------------\n\nTITLE: Importing SPL Library in Python\nDESCRIPTION: Shows how to correctly import the SPL library in Python projects. The SPL library is bundled with the main Solana package but requires a separate import statement.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/docs/spl/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport spl\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install solana\n```\n\n----------------------------------------\n\nTITLE: Defining Solana RPC Types in Python\nDESCRIPTION: This code snippet defines various RPC types used in Solana Python client. It includes classes for representing account information, block production, epoch info, fee calculator, and other Solana-specific concepts.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/docs/rpc/types.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"RPC Types.\"\"\"\nfrom __future__ import annotations\n\nfrom typing import Any, List, NewType, Optional, Tuple, Union\n\nfrom solana.publickey import PublicKey\n\nTransactionSignature = NewType(\"TransactionSignature\", str)\nBlockhash = NewType(\"Blockhash\", str)\n\n\nclass RPCMethod:\n    \"\"\"RPC Method types.\"\"\"\n\n    GET_ACCOUNT_INFO = \"getAccountInfo\"\n    GET_BALANCE = \"getBalance\"\n    GET_BLOCK = \"getBlock\"\n    GET_BLOCK_HEIGHT = \"getBlockHeight\"\n    GET_BLOCK_PRODUCTION = \"getBlockProduction\"\n    GET_BLOCKS = \"getBlocks\"\n    GET_BLOCKS_WITH_LIMIT = \"getBlocksWithLimit\"\n    GET_BLOCK_TIME = \"getBlockTime\"\n    GET_CLUSTER_NODES = \"getClusterNodes\"\n    GET_EPOCH_INFO = \"getEpochInfo\"\n    GET_EPOCH_SCHEDULE = \"getEpochSchedule\"\n    GET_FEE_CALCULATOR_FOR_BLOCKHASH = \"getFeeCalculatorForBlockhash\"\n    GET_FEE_RATE_GOVERNOR = \"getFeeRateGovernor\"\n    GET_FEES = \"getFees\"\n    GET_FIRST_AVAILABLE_BLOCK = \"getFirstAvailableBlock\"\n    GET_GENESIS_HASH = \"getGenesisHash\"\n    GET_HEALTH = \"getHealth\"\n    GET_IDENTITY = \"getIdentity\"\n    GET_INFLATION_GOVERNOR = \"getInflationGovernor\"\n    GET_INFLATION_RATE = \"getInflationRate\"\n    GET_INFLATION_REWARD = \"getInflationReward\"\n    GET_LARGEST_ACCOUNTS = \"getLargestAccounts\"\n    GET_LEADER_SCHEDULE = \"getLeaderSchedule\"\n    GET_MAX_RETRANSMIT_SLOT = \"getMaxRetransmitSlot\"\n    GET_MINIMUM_BALANCE_FOR_RENT_EXEMPTION = \"getMinimumBalanceForRentExemption\"\n    GET_MULTIPLE_ACCOUNTS = \"getMultipleAccounts\"\n    GET_PROGRAM_ACCOUNTS = \"getProgramAccounts\"\n    GET_RECENT_BLOCKHASH = \"getRecentBlockhash\"\n    GET_RECENT_PERFORMANCE_SAMPLES = \"getRecentPerformanceSamples\"\n    GET_SIGNATURE_STATUSES = \"getSignatureStatuses\"\n    GET_SIGNATURES_FOR_ADDRESS = \"getSignaturesForAddress\"\n    GET_SLOT = \"getSlot\"\n    GET_SLOT_LEADER = \"getSlotLeader\"\n    GET_STAKE_ACTIVATION = \"getStakeActivation\"\n    GET_SUPPLY = \"getSupply\"\n    GET_TOKEN_ACCOUNT_BALANCE = \"getTokenAccountBalance\"\n    GET_TOKEN_ACCOUNTS = \"getTokenAccounts\"\n    GET_TOKEN_LARGEST_ACCOUNTS = \"getTokenLargestAccounts\"\n    GET_TOKEN_SUPPLY = \"getTokenSupply\"\n    GET_TRANSACTION = \"getTransaction\"\n    GET_TRANSACTION_COUNT = \"getTransactionCount\"\n    GET_VERSION = \"getVersion\"\n    GET_VOTE_ACCOUNTS = \"getVoteAccounts\"\n    IS_BLOCKHASH_VALID = \"isBlockhashValid\"\n    MINIMUM_LEDGER_SLOT = \"minimumLedgerSlot\"\n    REQUEST_AIRDROP = \"requestAirdrop\"\n    SEND_TRANSACTION = \"sendTransaction\"\n    SIMULATE_TRANSACTION = \"simulateTransaction\"\n\n\nclass Commitment:\n    \"\"\"Commitment type.\"\"\"\n\n    FINALIZED = \"finalized\"\n    CONFIRMED = \"confirmed\"\n    PROCESSED = \"processed\"\n\n\nclass AccountInfo(dict):\n    \"\"\"Account information.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init AccountInfo.\"\"\"\n        super().__init__(kwargs)\n        self.executable: bool = kwargs[\"executable\"]\n        self.owner: PublicKey = PublicKey(kwargs[\"owner\"])\n        self.lamports: int = int(kwargs[\"lamports\"])\n        self.data: Union[List[int], List[str]] = kwargs[\"data\"]\n        self.rent_epoch: int = int(kwargs.get(\"rentEpoch\", 0))\n\n\nclass BlockProductionResponseResultValue(dict):\n    \"\"\"Value field for a block production response.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init BlockProductionResponseResultValue.\"\"\"\n        super().__init__(kwargs)\n        self.by_identity: dict = kwargs[\"byIdentity\"]\n        self.range: dict = kwargs[\"range\"]\n\n\nclass BlockProductionResponseResult(dict):\n    \"\"\"Resut field for a block production response.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init BlockProductionResponseResult.\"\"\"\n        super().__init__(kwargs)\n        self.context: dict = kwargs[\"context\"]\n        self.value: BlockProductionResponseResultValue = BlockProductionResponseResultValue(**kwargs[\"value\"])\n\n\nclass EpochInfo(dict):\n    \"\"\"Epoch information.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init EpochInfo.\"\"\"\n        super().__init__(kwargs)\n        self.absolute_slot: int = int(kwargs[\"absoluteSlot\"])\n        self.block_height: int = int(kwargs[\"blockHeight\"])\n        self.epoch: int = int(kwargs[\"epoch\"])\n        self.slot_index: int = int(kwargs[\"slotIndex\"])\n        self.slots_in_epoch: int = int(kwargs[\"slotsInEpoch\"])\n\n\nclass EpochSchedule(dict):\n    \"\"\"Epoch schedule.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init EpochSchedule.\"\"\"\n        super().__init__(kwargs)\n        self.slots_per_epoch: int = int(kwargs[\"slotsPerEpoch\"])\n        self.leader_schedule_slot_offset: int = int(kwargs[\"leaderScheduleSlotOffset\"])\n        self.warmup: bool = bool(kwargs[\"warmup\"])\n        self.first_normal_epoch: int = int(kwargs[\"firstNormalEpoch\"])\n        self.first_normal_slot: int = int(kwargs[\"firstNormalSlot\"])\n\n\nclass FeeCalculatorInfo(dict):\n    \"\"\"Fee calculator information.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init FeeCalculatorInfo.\"\"\"\n        super().__init__(kwargs)\n        self.lamports_per_signature: int = int(kwargs[\"lamportsPerSignature\"])\n\n\nclass FeesInfo(dict):\n    \"\"\"Fees information.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init FeesInfo.\"\"\"\n        super().__init__(kwargs)\n        self.blockhash: Blockhash = Blockhash(kwargs[\"blockhash\"])\n        self.fee_calculator: FeeCalculatorInfo = FeeCalculatorInfo(**kwargs[\"feeCalculator\"])\n        self.last_valid_slot: int = int(kwargs.get(\"lastValidSlot\"))\n        self.last_valid_block_height: int = int(kwargs.get(\"lastValidBlockHeight\"))\n\n\nclass Context(dict):\n    \"\"\"RPC response context.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init Context.\"\"\"\n        super().__init__(kwargs)\n        self.slot: int = int(kwargs[\"slot\"])\n\n\nclass TokenAmount(dict):\n    \"\"\"Token amount.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init TokenAmount.\"\"\"\n        super().__init__(kwargs)\n        self.amount: str = kwargs[\"amount\"]\n        self.decimals: int = int(kwargs[\"decimals\"])\n        self.ui_amount: float = float(kwargs[\"uiAmount\"])\n        self.ui_amount_string: str = kwargs[\"uiAmountString\"]\n\n\nclass ParsedAccountData(dict):\n    \"\"\"Parsed account data.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init ParsedAccountData.\"\"\"\n        super().__init__(kwargs)\n        self.program: str = kwargs[\"program\"]\n        self.parsed: dict = kwargs[\"parsed\"]\n        self.space: int = int(kwargs[\"space\"])\n\n\nclass ParsedAccount(dict):\n    \"\"\"Parsed account information.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init ParsedAccount.\"\"\"\n        super().__init__(kwargs)\n        self.program: str = kwargs[\"program\"]\n        self.parsed: dict = kwargs[\"parsed\"]\n        self.space: int = int(kwargs[\"space\"])\n\n\nclass AccountKey(dict):\n    \"\"\"Account key.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init AccountKey.\"\"\"\n        super().__init__(kwargs)\n        self.pubkey: PublicKey = PublicKey(kwargs[\"pubkey\"])\n        self.signer: bool = bool(kwargs[\"signer\"])\n        self.writable: bool = bool(kwargs[\"writable\"])\n        self.source: Optional[str] = kwargs.get(\"source\")\n\n\nclass LogMessage(str):\n    \"\"\"Parsed log message.\"\"\"\n\n    def __init__(self, msg: str) -> None:\n        \"\"\"Init LogMessage.\"\"\"\n        super().__init__()\n        self.msg = msg\n\n\nclass InstructionData(dict):\n    \"\"\"Instruction data.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init InstructionData.\"\"\"\n        super().__init__(kwargs)\n        self.data: str = kwargs[\"data\"]\n        self.parsed: Optional[dict] = kwargs.get(\"parsed\")\n\n\nclass Instruction(dict):\n    \"\"\"Instruction.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init Instruction.\"\"\"\n        super().__init__(kwargs)\n        self.program_id: str = kwargs[\"programId\"]\n        self.accounts: List[AccountKey] = [AccountKey(**obj) for obj in kwargs[\"accounts\"]]\n        self.data: InstructionData = InstructionData(**kwargs[\"data\"])\n\n\nclass InnerInstruction(dict):\n    \"\"\"Inner instruction.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init InnerInstruction.\"\"\"\n        super().__init__(kwargs)\n        self.index: int = int(kwargs[\"index\"])\n        self.instructions: List[Instruction] = [Instruction(**obj) for obj in kwargs[\"instructions\"]]\n\n\nclass TransactionResponseMeta(dict):\n    \"\"\"Transaction metadata.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init TransactionResponseMeta.\"\"\"\n        super().__init__(kwargs)\n        self.err: Optional[dict] = kwargs.get(\"err\")\n        self.fee: int = int(kwargs[\"fee\"])\n        self.inner_instructions: Optional[List[InnerInstruction]] = [\n            InnerInstruction(**obj) for obj in kwargs.get(\"innerInstructions\", [])\n        ]\n        self.post_balances: List[int] = [int(obj) for obj in kwargs[\"postBalances\"]]\n        self.post_token_balances: Optional[List[dict]] = kwargs.get(\"postTokenBalances\")\n        self.pre_balances: List[int] = [int(obj) for obj in kwargs[\"preBalances\"]]\n        self.pre_token_balances: Optional[List[dict]] = kwargs.get(\"preTokenBalances\")\n        self.rewards: Optional[List[dict]] = kwargs.get(\"rewards\")\n        self.log_messages: Optional[List[LogMessage]] = [\n            LogMessage(obj) for obj in kwargs.get(\"logMessages\", [])\n        ]\n\n\nclass Message(dict):\n    \"\"\"Transaction message.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init Message.\"\"\"\n        super().__init__(kwargs)\n        account_keys = [AccountKey(**obj) for obj in kwargs[\"accountKeys\"]]\n        self.account_keys: List[AccountKey] = account_keys\n        self.header: dict = kwargs[\"header\"]\n        self.instructions: List[Instruction] = [Instruction(**obj) for obj in kwargs[\"instructions\"]]\n        self.recent_blockhash: str = kwargs[\"recentBlockhash\"]\n\n\nclass TransactionResponse(dict):\n    \"\"\"Parsed transaction info.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init TransactionResponse.\"\"\"\n        super().__init__(kwargs)\n        self.slot: int = int(kwargs[\"slot\"])\n        self.transaction: dict = kwargs[\"transaction\"]\n        self.meta: Optional[TransactionResponseMeta] = TransactionResponseMeta(**kwargs[\"meta\"])\n        self.block_time: Optional[int] = int(kwargs[\"blockTime\"]) if kwargs.get(\"blockTime\") else None\n\n\nclass TokenAccountBalanceResponse(dict):\n    \"\"\"Parsed response for token account balance.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init TokenAccountBalanceResponse.\"\"\"\n        super().__init__(kwargs)\n        self.context: Context = Context(**kwargs[\"context\"])\n        self.value: TokenAmount = TokenAmount(**kwargs[\"value\"])\n\n\nclass TokenAccountBalancePair(dict):\n    \"\"\"Token Account Balance Pair.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init TokenAccountBalancePair.\"\"\"\n        super().__init__(kwargs)\n        self.address: PublicKey = PublicKey(kwargs[\"address\"])\n        self.amount: TokenAmount = TokenAmount(**kwargs[\"amount\"])\n\n\nclass TokenResponse(dict):\n    \"\"\"Token Response.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init TokenResponse.\"\"\"\n        super().__init__(kwargs)\n        self.context: Context = Context(**kwargs[\"context\"])\n        self.value: TokenAmount = TokenAmount(**kwargs[\"value\"])\n\n\nclass StakeActivation(dict):\n    \"\"\"Stake Activation.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init StakeActivation.\"\"\"\n        super().__init__(kwargs)\n        self.active: int = int(kwargs[\"active\"])\n        self.inactive: int = int(kwargs[\"inactive\"])\n        self.state: str = kwargs[\"state\"]\n\n\nclass PrioritizationFee(dict):\n    \"\"\"Prioritization Fee.\"\"\"\n\n    def __init__(self, **kwargs: Any) -> None:\n        \"\"\"Init PrioritizationFee.\"\"\"\n        super().__init__(kwargs)\n        self.slot: int = int(kwargs[\"slot\"])\n        self.prioritization_fee: int = int(kwargs[\"prioritizationFee\"])\n\n\nclass ConfirmationStatus:\n    \"\"\"Confirmation status.\"\"\"\n\n    PROCESSED = \"processed\"\n    CONFIRMED = \"confirmed\"\n    FINALIZED = \"finalized\"\n\n\nParsedConfirmedTransaction = Union[TransactionResponse, dict]\nParsedConfirmedTransactionWithStatusMeta = Tuple[TransactionResponse, str]\nJsonParsedConfirmedTransaction = Union[dict, List]\n\nDataSlice = Tuple[int, int]\n\n\nclass SolanaClientException(Exception):\n    \"\"\"Solana client exception.\"\"\"\n\n    def __init__(self, error_msg: str) -> None:\n        \"\"\"Init SolanaClientException.\"\"\"\n        super().__init__()\n        self.error_msg = error_msg\n\n    def __str__(self) -> str:\n        \"\"\"String representation of exception.\"\"\"\n        return f\"SolanaClientException: {self.error_msg}\"\n\n\nclass SolanaClientErrorCode:\n    \"\"\"Solana client error codes.\"\"\"\n\n    JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP = -32001\n    JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE = -32002\n    JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE = -32003\n    JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE = -32004\n    JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY = -32005\n    JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE = -32006\n    JSON_RPC_SERVER_ERROR_SLOT_SKIPPED = -32007\n    JSON_RPC_SERVER_ERROR_NO_SNAPSHOT = -32008\n    JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED = -32009\n    JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX = -32010\n    JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE = -32011\n    JSON_RPC_SCAN_ERROR = -32012\n    JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH = -32013\n    JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET = -32014\n    JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION = -32015\n    JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED = -32016\n```\n\n----------------------------------------\n\nTITLE: Defining SPL Token Constants in Python\nDESCRIPTION: This code defines the core constants used in the Solana SPL Token program, including the program ID, ASSOCIATED_TOKEN PROGRAM_ID, account data sizes, and various important parameters needed for token operations on the Solana blockchain.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/docs/spl/token/constants.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"SPL Token program constants.\"\"\"\n\nfrom typing import Final\n\nfrom solana.publickey import PublicKey\n\nTOKEN_PROGRAM_ID: Final[PublicKey] = PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\")\n\"\"\"Public key that identifies the SPL Token program.\"\"\"\n\nASSOCIATED_TOKEN_PROGRAM_ID: Final[PublicKey] = PublicKey(\n    \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n)\n\"\"\"Public key that identifies the SPL Associated Token Account program.\"\"\"\n\nACCOUNT_SIZE: Final[int] = 165\n\"\"\"Data length of a Token Account.\"\"\"\n\nMINT_SIZE: Final[int] = 82\n\"\"\"Data length of a Mint Account.\"\"\"\n\nMULTISIG_SIZE: Final[int] = 355\n\"\"\"Data length of a Multisig Account.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Solana Python API Module in Markdown\nDESCRIPTION: A markdown code fence indicating the solana.rpc.api module, which is the main API client interface for interacting with Solana blockchain in Python.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/docs/rpc/api.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::solana.rpc.api\n```\n\n----------------------------------------\n\nTITLE: Setting Up Solana.py Development Environment\nDESCRIPTION: Instructions for setting up the development environment for Solana.py, including installing poetry and dev dependencies.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npoetry install\npoetry shell\n```\n\n----------------------------------------\n\nTITLE: Running Linting and Tests for Solana.py\nDESCRIPTION: Commands to run linting and different types of tests (all, unit, integration) for the Solana.py project.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake lint\n\n# All tests\nmake tests\n# Unit tests only\nmake unit-tests\n# Integration tests only\nmake int-tests\n```\n\n----------------------------------------\n\nTITLE: Defining SPL Memo Program ID Constant in Python\nDESCRIPTION: This code snippet defines the Program ID constant for the SPL Memo program on Solana. The constant represents the public key of the program deployed on Solana's blockchain.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/docs/spl/memo/constants.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"SPL Memo Program Constants.\"\"\"\n\nfrom solana.publickey import PublicKey\n\nPROGRAM_ID: PublicKey = PublicKey(\"Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo\")\n```\n\n----------------------------------------\n\nTITLE: Solana RPC Commitment Path\nDESCRIPTION: Module path reference for accessing Solana RPC commitment configurations.\nSOURCE: https://github.com/michaelhly/solana-py/blob/master/docs/rpc/commitment.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsolana.rpc.commitment\n```"
  }
]