[
  {
    "owner": "ocornut",
    "repo": "imgui",
    "content": "TITLE: Creating a Tool Window with Dear ImGui in C++\nDESCRIPTION: Extended example showing how to create a more complex tool window with menu bar, color picker, plotting, and scrolling regions. This demonstrates how Dear ImGui can be used to build sophisticated development tools.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Create a window called \"My First Tool\", with a menu bar.\nImGui::Begin(\"My First Tool\", &my_tool_active, ImGuiWindowFlags_MenuBar);\nif (ImGui::BeginMenuBar())\n{\n    if (ImGui::BeginMenu(\"File\"))\n    {\n        if (ImGui::MenuItem(\"Open..\", \"Ctrl+O\")) { /* Do stuff */ }\n        if (ImGui::MenuItem(\"Save\", \"Ctrl+S\"))   { /* Do stuff */ }\n        if (ImGui::MenuItem(\"Close\", \"Ctrl+W\"))  { my_tool_active = false; }\n        ImGui::EndMenu();\n    }\n    ImGui::EndMenuBar();\n}\n\n// Edit a color stored as 4 floats\nImGui::ColorEdit4(\"Color\", my_color);\n\n// Generate samples and plot them\nfloat samples[100];\nfor (int n = 0; n < 100; n++)\n    samples[n] = sinf(n * 0.2f + ImGui::GetTime() * 1.5f);\nImGui::PlotLines(\"Samples\", samples, 100);\n\n// Display contents in a scrolling region\nImGui::TextColored(ImVec4(1,1,0,1), \"Important Stuff\");\nImGui::BeginChild(\"Scrolling\");\nfor (int n = 0; n < 50; n++)\n    ImGui::Text(\"%04d: Some text\", n);\nImGui::EndChild();\nImGui::End();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Dear ImGui in an Application\nDESCRIPTION: Standard integration pattern for Dear ImGui in an application. Shows the sequence of function calls needed during initialization, frame rendering, and shutdown phases. This basic pattern applies when using any of the standard backends.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/EXAMPLES.md#2025-04-20_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nAt initialization:\n  call ImGui::CreateContext()\n  call ImGui_ImplXXXX_Init() for each backend.\n\nAt the beginning of your frame:\n  call ImGui_ImplXXXX_NewFrame() for each backend.\n  call ImGui::NewFrame()\n\nAt the end of your frame:\n  call ImGui::Render()\n  call ImGui_ImplXXXX_RenderDrawData() for your Renderer backend.\n\nAt shutdown:\n  call ImGui_ImplXXXX_Shutdown() for each backend.\n  call ImGui::DestroyContext()\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Input with Dear ImGui in C++\nDESCRIPTION: Demonstrates the proper way to handle mouse input in an application using Dear ImGui. Shows how to forward mouse events to ImGui and conditionally to your application based on the WantCaptureMouse flag.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid MyLowLevelMouseButtonHandler(int button, bool down)\n{\n    // (1) ALWAYS forward mouse data to ImGui! This is automatic with default backends. With your own backend:\n    ImGuiIO& io = ImGui::GetIO();\n    io.AddMouseButtonEvent(button, down);\n\n    // (2) ONLY forward mouse data to your underlying app/game.\n    if (!io.WantCaptureMouse)\n        my_game->HandleMouseData(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dear ImGui Usage in C++\nDESCRIPTION: Simple example of Dear ImGui API usage showing text display, buttons, input fields, and sliders. This demonstrates the fundamentals of immediate mode GUI where interface elements are recreated each frame.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nImGui::Text(\"Hello, world %d\", 123);\nif (ImGui::Button(\"Save\"))\n    MySaveFunction();\nImGui::InputText(\"string\", buf, IM_ARRAYSIZE(buf));\nImGui::SliderFloat(\"float\", &f, 0.0f, 1.0f);\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Shapes with ImDrawList in ImGui (C++)\nDESCRIPTION: Demonstrates how to use the low-level ImDrawList API to render custom shapes like circles and lines within an ImGui window. Shows cursor positioning, shape drawing with colors, and window space allocation.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nImGui::Begin(\"My shapes\");\n\nImDrawList* draw_list = ImGui::GetWindowDrawList();\n\n// Get the current ImGui cursor position\nImVec2 p = ImGui::GetCursorScreenPos();\n\n// Draw a red circle\ndraw_list->AddCircleFilled(ImVec2(p.x + 50, p.y + 50), 30.0f, IM_COL32(255, 0, 0, 255));\n\n// Draw a 3 pixel thick yellow line\ndraw_list->AddLine(ImVec2(p.x, p.y), ImVec2(p.x + 100.0f, p.y + 100.0f), IM_COL32(255, 255, 0, 255), 3.0f);\n\n// Advance the ImGui cursor to claim space in the window (otherwise the window will appear small and needs to be resized)\nImGui::Dummy(ImVec2(200, 200));\n\nImGui::End();\n```\n\n----------------------------------------\n\nTITLE: Initializing Dear ImGui Demo Window\nDESCRIPTION: Reference to the demo window function that showcases the end-user API functionality. This function is located in imgui_demo.cpp and serves as the primary reference for Dear ImGui's features and capabilities.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/README.txt#2025-04-20_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nImGui::ShowDemoWindow()\n```\n\n----------------------------------------\n\nTITLE: Loading TTF/OTF Font File in Dear ImGui\nDESCRIPTION: Shows how to load a custom TTF or OTF font file in Dear ImGui using the AddFontFromFileTTF function.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nImGuiIO& io = ImGui::GetIO();\nio.Fonts->AddFontFromFileTTF(\"font.ttf\", size_pixels);\n```\n\n----------------------------------------\n\nTITLE: Loading Default Font in Dear ImGui\nDESCRIPTION: Demonstrates how to load the default font in Dear ImGui using the AddFontDefault function.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nImGuiIO& io = ImGui::GetIO();\nio.Fonts->AddFontDefault();\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Fonts in Dear ImGui\nDESCRIPTION: Demonstrates how to combine multiple fonts into one, including merging character ranges and icon fonts.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// Load a first font\nImFont* font = io.Fonts->AddFontDefault();\n\n// Add character ranges and merge into the previous font\n// The ranges array is not copied by the AddFont* functions and is used lazily\n// so ensure it is available at the time of building or calling GetTexDataAsRGBA32().\nstatic const ImWchar icons_ranges[] = { 0xf000, 0xf3ff, 0 }; // Will not be copied by AddFont* so keep in scope.\nImFontConfig config;\nconfig.MergeMode = true;\nio.Fonts->AddFontFromFileTTF(\"DroidSans.ttf\", 18.0f, &config, io.Fonts->GetGlyphRangesJapanese()); // Merge into first font\nio.Fonts->AddFontFromFileTTF(\"fontawesome-webfont.ttf\", 18.0f, &config, icons_ranges);             // Merge into first font\nio.Fonts->Build();\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Fonts in Dear ImGui\nDESCRIPTION: Demonstrates how to load and use multiple fonts in Dear ImGui, including switching between fonts during rendering.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Init\nImGuiIO& io = ImGui::GetIO();\nImFont* font1 = io.Fonts->AddFontFromFileTTF(\"font.ttf\", size_pixels);\nImFont* font2 = io.Fonts->AddFontFromFileTTF(\"anotherfont.otf\", size_pixels);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nImGui::Text(\"Hello\"); // use the default font (which is the first loaded font)\nImGui::PushFont(font2);\nImGui::Text(\"Hello with another font\");\nImGui::PopFont();\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Unicode Font Ranges in ImGui C++\nDESCRIPTION: Demonstrates how to load custom Unicode font ranges for displaying non-Latin characters like Chinese, Japanese, Korean and Cyrillic. Shows both default Japanese ranges and custom range building approaches using ImFontGlyphRangesBuilder.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\n// Add default Japanese ranges\nio.Fonts->AddFontFromFileTTF(\"myfontfile.ttf\", size_in_pixels, nullptr, io.Fonts->GetGlyphRangesJapanese());\n\n// Or create your own custom ranges (e.g. for a game you can feed your entire game script and only build the characters the game need)\nImVector<ImWchar> ranges;\nImFontGlyphRangesBuilder builder;\nbuilder.AddText(\"Hello world\");                        // Add a string (here \"Hello world\" contains 7 unique characters)\nbuilder.AddChar(0x7262);                               // Add a specific character\nbuilder.AddRanges(io.Fonts->GetGlyphRangesJapanese()); // Add one of the default ranges\nbuilder.BuildRanges(&ranges);                          // Build the final result (ordered ranges with all the unique characters submitted)\nio.Fonts->AddFontFromFileTTF(\"myfontfile.ttf\", 16.0f, nullptr, ranges.Data);\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Font in ImGui (C++)\nDESCRIPTION: Shows how to load a custom TTF/OTF font file into ImGui's font atlas with specified pixel size. Includes proper file path formatting examples for different operating systems.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nImGuiIO& io = ImGui::GetIO();\nio.Fonts->AddFontFromFileTTF(\"myfontfile.ttf\", size_in_pixels);\nio.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Icon Fonts with FontAwesome in Dear ImGui (C++)\nDESCRIPTION: Example of how to merge FontAwesome icons into the default ImGui font. This setup allows using icon identifiers directly in text strings without switching between different fonts.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n// Merge icons into default tool font\n#include \"IconsFontAwesome.h\"\nImGuiIO& io = ImGui::GetIO();\nio.Fonts->AddFontDefault();\n\nImFontConfig config;\nconfig.MergeMode = true;\nconfig.GlyphMinAdvanceX = 13.0f; // Use if you want to make the icon monospaced\nstatic const ImWchar icon_ranges[] = { ICON_MIN_FA, ICON_MAX_FA, 0 };\nio.Fonts->AddFontFromFileTTF(\"fonts/fontawesome-webfont.ttf\", 13.0f, &config, icon_ranges);\n```\n\n----------------------------------------\n\nTITLE: Using FontAwesome Icons in ImGui UI Elements (C++)\nDESCRIPTION: Examples of how to use FontAwesome icons in ImGui UI elements like text and buttons. Shows how C string literals can be concatenated at compilation time to combine icons with regular text.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// Usage, e.g.\nImGui::Text(\"%s among %d items\", ICON_FA_SEARCH, count);\nImGui::Button(ICON_FA_SEARCH \" Search\");\n// C string _literals_ can be concatenated at compilation time, e.g. \"hello\" \" world\"\n// ICON_FA_SEARCH is defined as a string literal so this is the same as \"A\" \"B\" becoming \"AB\"\n```\n\n----------------------------------------\n\nTITLE: Using '###' for Constant IDs with Variable Labels in Dear ImGui (C++)\nDESCRIPTION: Shows how to use '###' to create a constant ID while allowing the visible label to change, useful for animated or dynamic labels.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nButton(\"Hello###ID\");  // Label = \"Hello\",  ID = hash of (..., \"###ID\")\nButton(\"World###ID\");  // Label = \"World\",  ID = hash of (..., \"###ID\")  // Same ID, different label\n\nsprintf(buf, \"My game (%f FPS)###MyGame\", fps);\nBegin(buf);            // Variable title,   ID = hash of \"MyGame\"\n```\n\n----------------------------------------\n\nTITLE: Loading Font from Memory in Dear ImGui\nDESCRIPTION: Shows how to load a font from memory in Dear ImGui, including options for ownership of the font data.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nImFont* font = io.Fonts->AddFontFromMemoryTTF(data, data_size, size_pixels, ...);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nImFontConfig font_cfg;\nfont_cfg.FontDataOwnedByAtlas = false;\nImFont* font = io.Fonts->AddFontFromMemoryTTF(data, data_size, size_pixels, &font_cfg);\n```\n\n----------------------------------------\n\nTITLE: Using PushID()/PopID() for ID Scoping in Dear ImGui (C++)\nDESCRIPTION: Demonstrates using PushID() and PopID() to create scopes and avoid ID conflicts when creating multiple similar elements, such as in loops.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nBegin(\"Window\");\nfor (int i = 0; i < 100; i++)\n{\n  PushID(i);           // Push i to the id tack\n  Button(\"Click\");     // Label = \"Click\",  ID = hash of (\"Window\", i, \"Click\")\n  PopID();\n}\nfor (int i = 0; i < 100; i++)\n{\n  MyObject* obj = Objects[i];\n  PushID(obj);\n  Button(\"Click\");     // Label = \"Click\",  ID = hash of (\"Window\", obj pointer, \"Click\")\n  PopID();\n}\nfor (int i = 0; i < 100; i++)\n{\n  MyObject* obj = Objects[i];\n  PushID(obj->Name);\n  Button(\"Click\");     // Label = \"Click\",  ID = hash of (\"Window\", obj->Name, \"Click\")\n  PopID();\n}\nEnd();\n```\n\n----------------------------------------\n\nTITLE: Using ImTextureID with DirectX9 in Dear ImGui\nDESCRIPTION: Shows how to use ImTextureID with DirectX9 textures in Dear ImGui. ImTextureID should contain a LPDIRECT3DTEXTURE9 pointer for DirectX9 rendering.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nDirectX9:\n- ImTextureID should contain a 'LPDIRECT3DTEXTURE9' (pointer).\n- See ImGui_ImplDX9_RenderDrawData() function in imgui_impl_dx9.cpp\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct and Incorrect Label Usage in Dear ImGui (C++)\nDESCRIPTION: This snippet shows incorrect usage of labels leading to ID conflicts, followed by two correct approaches: using '##' in labels and using PushID()/PopID() for scoping.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nImGui::Begin(\"Incorrect!\");\nImGui::DragFloat2(\"My value\", &objects[0]->pos.x);\nImGui::DragFloat2(\"My value\", &objects[1]->pos.x);\nImGui::DragFloat2(\"My value\", &objects[2]->pos.x);\nImGui::End();\n\nImGui::Begin(\"Correct!\");\nImGui::DragFloat2(\"My value\", &objects[0]->pos.x);\nImGui::DragFloat2(\"My value##2\", &objects[1]->pos.x);\nImGui::DragFloat2(\"My value##3\", &objects[2]->pos.x);\nImGui::End();\n\nImGui::Begin(\"Also Correct!\");\nfor (int n = 0; n < 3; n++)\n{\n    ImGui::PushID(n);\n    ImGui::DragFloat2(\"My value\", &objects[n]->pos.x);\n    ImGui::PopID();\n}\nImGui::End();\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Japanese Font in Dear ImGui\nDESCRIPTION: Demonstrates how to load a Japanese font and use it with UTF-8 encoded text in Dear ImGui.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nImGuiIO& io = ImGui::GetIO();\nio.Fonts->AddFontFromFileTTF(\"NotoSansCJKjp-Medium.otf\", 20.0f, nullptr, io.Fonts->GetGlyphRangesJapanese());\n```\n\nLANGUAGE: cpp\nCODE:\n```\nImGui::Text(u8\"こんにちは！テスト %d\", 123);\nif (ImGui::Button(u8\"ロード\"))\n{\n    // do stuff\n}\nImGui::InputText(\"string\", buf, IM_ARRAYSIZE(buf));\nImGui::SliderFloat(\"float\", &f, 0.0f, 1.0f);\n```\n\n----------------------------------------\n\nTITLE: Loading Fonts with Specific Glyph Ranges in Dear ImGui\nDESCRIPTION: Shows how to load fonts with specific glyph ranges for different languages in Dear ImGui.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Basic Latin, Extended Latin\nio.Fonts->AddFontFromFileTTF(\"font.ttf\", size_pixels, nullptr, io.Fonts->GetGlyphRangesDefault());\n\n// Default + Selection of 2500 Ideographs used by Simplified Chinese\nio.Fonts->AddFontFromFileTTF(\"font.ttf\", size_pixels, nullptr, io.Fonts->GetGlyphRangesChineseSimplifiedCommon());\n\n// Default + Hiragana, Katakana, Half-Width, Selection of 1946 Ideographs\nio.Fonts->AddFontFromFileTTF(\"font.ttf\", size_pixels, nullptr, io.Fonts->GetGlyphRangesJapanese());\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Encoding Example in ImGui\nDESCRIPTION: This snippet shows how to display UTF-8 encoded text using the u8 prefix in C++11 and later. It highlights the difference between explicitly UTF-8 encoded strings and strings that rely on compiler settings. It requires the ImGui library.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nImGui::Text(u8\"hello\");\nImGui::Text(u8\"こんにちは\");   // this will always be encoded as UTF-8\nImGui::Text(\"こんにちは\");     // the encoding of this is depending on compiler settings/flags and may be incorrect.\n```\n\n----------------------------------------\n\nTITLE: Loading Colored Emoji Fonts in Dear ImGui with FreeType (C++)\nDESCRIPTION: Example of loading fonts with colored emoji support using the FreeType builder. Demonstrates how to merge a regular font with an emoji font and set the necessary flags to enable color loading.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nio.Fonts->AddFontFromFileTTF(\"../../../imgui_dev/data/fonts/NotoSans-Regular.ttf\", 16.0f);\nstatic ImWchar ranges[] = { 0x1, 0x1FFFF, 0 };\nstatic ImFontConfig cfg;\ncfg.OversampleH = cfg.OversampleV = 1;\ncfg.MergeMode = true;\ncfg.FontBuilderFlags |= ImGuiFreeTypeBuilderFlags_LoadColor;\nio.Fonts->AddFontFromFileTTF(\"C:\\\\Windows\\\\Fonts\\\\seguiemj.ttf\", 16.0f, &cfg, ranges);\n```\n\n----------------------------------------\n\nTITLE: Including InputText() Wrappers for std::string in C++\nDESCRIPTION: Files imgui_stdlib.h and imgui_stdlib.cpp provide InputText() wrappers for the C++ standard library type std::string. This serves as an example for wrapping similar custom types.\nSOURCE: https://github.com/ocornut/imgui/blob/master/misc/cpp/README.txt#2025-04-20_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nimgui_stdlib.h + imgui_stdlib.cpp\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Glyph Ranges for Font Atlas in Dear ImGui (C++)\nDESCRIPTION: Demonstrates how to use ImFontGlyphRangesBuilder to create custom glyph ranges for fonts. This approach enables loading only necessary characters, which is useful for optimizing memory usage in specialized applications.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nImVector<ImWchar> ranges;\nImFontGlyphRangesBuilder builder;\nbuilder.AddText(\"Hello world\");                        // Add a string (here \"Hello world\" contains 7 unique characters)\nbuilder.AddChar(0x7262);                               // Add a specific character\nbuilder.AddRanges(io.Fonts->GetGlyphRangesJapanese()); // Add one of the default ranges\nbuilder.BuildRanges(&ranges);                          // Build the final result (ordered ranges with all the unique characters submitted)\n\nio.Fonts->AddFontFromFileTTF(\"myfontfile.ttf\", size_in_pixels, nullptr, ranges.Data);\nio.Fonts->Build();                                     // Build the atlas while 'ranges' is still in scope and not deleted.\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Font Configuration in Dear ImGui\nDESCRIPTION: Shows how to use advanced font configuration options when loading a font in Dear ImGui.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nImFontConfig config;\nconfig.RasterizerDensity = 2.0f;\nImFont* font = io.Fonts->AddFontFromFileTTF(\"font.ttf\", size_pixels, &config);\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Encoding in C++20\nDESCRIPTION: This snippet shows how to display UTF-8 encoded text using the u8 prefix in C++20, which returns a `const char8_t*` instead of `const char*`. It demonstrates the explicit casting required to use the string with functions expecting `const char*`. Requires the ImGui library and a C++20 compiler or later.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nImGui::Text((const char*)u8\"こんにちは\");\n```\n\n----------------------------------------\n\nTITLE: Casting Between ImTextureID and Various Texture Types in Dear ImGui\nDESCRIPTION: Shows examples of casting between ImTextureID and various texture types (GLuint and ID3D11ShaderResourceView*) in Dear ImGui. This demonstrates the flexibility of ImTextureID in storing different texture identifiers.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nGLuint my_tex = XXX;\nImTextureID my_imtexid;\nmy_imtexid = (ImTextureID)(intptr_t)my_tex;                     // cast a GLuint into a ImTextureID (we don't take its address! we just copy the address)\nmy_tex = (GLuint)(intptr_t)my_imtexid;                          // cast a ImTextureID into a GLuint\n\nID3D11ShaderResourceView* my_dx11_srv = XXX;\nImTextureID my_imtexid;\nmy_imtexid = (ImTextureID)(intptr_t)my_dx11_srv;                // cast a ID3D11ShaderResourceView* into an opaque ImTextureID\nmy_dx11_srv = (ID3D11ShaderResourceView*)(intptr_t)_my_imtexid; // cast a ImTextureID into a ID3D11ShaderResourceView*\n```\n\n----------------------------------------\n\nTITLE: Using ImTextureID with OpenGL in Dear ImGui\nDESCRIPTION: Demonstrates how to use ImTextureID with OpenGL textures in Dear ImGui. ImTextureID should contain a GLuint (GL texture identifier) for OpenGL rendering.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nOpenGL:\n- ImTextureID should contains 'GLuint' (GL texture identifier).\n- See ImGui_ImplOpenGL3_RenderDrawData() function in imgui_impl_opengl3.cpp\n```\n\n----------------------------------------\n\nTITLE: Using ImTextureID with DirectX11 in Dear ImGui\nDESCRIPTION: Illustrates how to use ImTextureID with DirectX11 textures in Dear ImGui. ImTextureID should contain an ID3D11ShaderResourceView* pointer for DirectX11 rendering.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nDirectX11:\n- ImTextureID should contain a 'ID3D11ShaderResourceView*' (pointer)\n- See ImGui_ImplDX11_RenderDrawData() function in imgui_impl_dx11.cpp\n```\n\n----------------------------------------\n\nTITLE: Using ImTextureID with DirectX12 in Dear ImGui\nDESCRIPTION: Demonstrates how to use ImTextureID with DirectX12 textures in Dear ImGui. ImTextureID should contain a D3D12_GPU_DESCRIPTOR_HANDLE for DirectX12 rendering.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nDirectX12:\n- ImTextureID should contain a 'D3D12_GPU_DESCRIPTOR_HANDLE' (always 64-bits)\n- See ImGui_ImplDX12_RenderDrawData() function in imgui_impl_dx12.cpp\n```\n\n----------------------------------------\n\nTITLE: Casting Custom Texture Type to ImTextureID in Dear ImGui\nDESCRIPTION: Shows how to cast a custom texture type to ImTextureID for use in Dear ImGui's Image function. This example uses a hypothetical MyTexture type.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\n// Cast our texture type to ImTextureID\nMyTexture* texture = g_CoffeeTableTexture;\nImGui::Image((ImTextureID)(intptr_t)texture, ImVec2(texture->Width, texture->Height));\n```\n\n----------------------------------------\n\nTITLE: Casting ImTextureID to Custom Texture Type in Dear ImGui Renderer\nDESCRIPTION: Demonstrates how to cast ImTextureID back to a custom texture type in a Dear ImGui renderer function. This example uses a hypothetical MyTexture type and MyEngineBindTexture2D function.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n// Cast ImTextureID stored in the draw command as our texture type\nMyTexture* texture = (MyTexture*)(intptr_t)pcmd->GetTexID();\nMyEngineBindTexture2D(texture);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Colorful Icons in Dear ImGui Font Atlas (C++)\nDESCRIPTION: Pseudo-code example showing how to register and use custom rectangles in the font atlas for custom colorful icons. This beta API allows manual drawing into the font texture to create custom colored glyphs.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// Add font, then register two custom 13x13 rectangles mapped to glyph 'a' and 'b' of this font\nImFont* font = io.Fonts->AddFontDefault();\nint rect_ids[2];\nrect_ids[0] = io.Fonts->AddCustomRectFontGlyph(font, 'a', 13, 13, 13+1);\nrect_ids[1] = io.Fonts->AddCustomRectFontGlyph(font, 'b', 13, 13, 13+1);\n\n// Build atlas\nio.Fonts->Build();\n\n// Retrieve texture in RGBA format\nunsigned char* tex_pixels = nullptr;\nint tex_width, tex_height;\nio.Fonts->GetTexDataAsRGBA32(&tex_pixels, &tex_width, &tex_height);\n\nfor (int rect_n = 0; rect_n < IM_ARRAYSIZE(rect_ids); rect_n++)\n{\n    int rect_id = rect_ids[rect_n];\n    if (const ImFontAtlasCustomRect* rect = io.Fonts->GetCustomRectByIndex(rect_id))\n    {\n        // Fill the custom rectangle with red pixels (in reality you would draw/copy your bitmap data here!)\n        for (int y = 0; y < rect->Height; y++)\n        {\n            ImU32* p = (ImU32*)tex_pixels + (rect->Y + y) * tex_width + (rect->X);\n            for (int x = rect->Width; x > 0; x--)\n                *p++ = IM_COL32(255, 0, 0, 255);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WebGPU Example Executable with Dear ImGui\nDESCRIPTION: Defines the executable target for the WebGPU example, including source files from Dear ImGui and its backends, and configures include directories and link libraries.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(example_glfw_wgpu\n  main.cpp\n  # backend files\n  ${IMGUI_DIR}/backends/imgui_impl_glfw.cpp\n  ${IMGUI_DIR}/backends/imgui_impl_wgpu.cpp\n  # Dear ImGui files\n  ${IMGUI_DIR}/imgui.cpp\n  ${IMGUI_DIR}/imgui_draw.cpp\n  ${IMGUI_DIR}/imgui_demo.cpp\n  ${IMGUI_DIR}/imgui_tables.cpp\n  ${IMGUI_DIR}/imgui_widgets.cpp\n)\nIF(NOT EMSCRIPTEN)\n  target_compile_definitions(example_glfw_wgpu PUBLIC\n    \"IMGUI_IMPL_WEBGPU_BACKEND_DAWN\"\n  )\nendif()\ntarget_include_directories(example_glfw_wgpu PUBLIC\n  ${IMGUI_DIR}\n  ${IMGUI_DIR}/backends\n)\n\ntarget_link_libraries(example_glfw_wgpu PUBLIC ${LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Basic ID Generation in Dear ImGui Windows (C++)\nDESCRIPTION: Demonstrates how IDs are generated for buttons within a window context, showing that identical labels in different windows don't conflict.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nBegin(\"MyWindow\");\nButton(\"OK\");          // Label = \"OK\",     ID = hash of (\"MyWindow\", \"OK\")\nButton(\"Cancel\");      // Label = \"Cancel\", ID = hash of (\"MyWindow\", \"Cancel\")\nEnd();\n```\n\n----------------------------------------\n\nTITLE: ID Generation with Tree Nodes in Dear ImGui (C++)\nDESCRIPTION: Shows how tree nodes contribute to the ID stack, creating unique IDs for nested elements.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nBegin(\"MyWindow\");\nif (TreeNode(\"MyTreeNode\"))\n{\n    Button(\"OK\");      // Label = \"OK\",     ID = hash of (\"MyWindow\", \"MyTreeNode\", \"OK\")\n    TreePop();\n}\nEnd();\n```\n\n----------------------------------------\n\nTITLE: Resolving ID Conflicts with '##' in Dear ImGui Labels (C++)\nDESCRIPTION: Demonstrates using '##' to add invisible components to labels, creating unique IDs while maintaining the same visible label.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nBegin(\"MyWindow\");\nButton(\"Play\");        // Label = \"Play\",   ID = hash of (\"MyWindow\", \"Play\")\nButton(\"Play##foo1\");  // Label = \"Play\",   ID = hash of (\"MyWindow\", \"Play##foo1\")\nButton(\"Play##foo2\");  // Label = \"Play\",   ID = hash of (\"MyWindow\", \"Play##foo2\")\nButton(\"##foo\");       // Label = \"\",       ID = hash of (\"MyWindow\", \"##foo\")\nEnd();\n```\n\n----------------------------------------\n\nTITLE: Stacking Multiple ID Prefixes in Dear ImGui (C++)\nDESCRIPTION: Shows how to stack multiple prefixes into the ID stack, creating more specific and unique IDs for nested elements.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nButton(\"Click\");       // Label = \"Click\",  ID = hash of (..., \"Click\")\nPushID(\"node\");\n  Button(\"Click\");     // Label = \"Click\",  ID = hash of (..., \"node\", \"Click\")\n  PushID(my_ptr);\n    Button(\"Click\");   // Label = \"Click\",  ID = hash of (..., \"node\", my_ptr, \"Click\")\n  PopID();\nPopID();\n```\n\n----------------------------------------\n\nTITLE: Implicit ID Scoping with Tree Nodes in Dear ImGui (C++)\nDESCRIPTION: Demonstrates how tree nodes automatically create ID scopes, simplifying ID management in hierarchical structures.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nButton(\"Click\");       // Label = \"Click\",  ID = hash of (..., \"Click\")\nif (TreeNode(\"node\"))  // <-- this function call will do a PushID() for you (unless instructed not to, with a special flag)\n{\n  Button(\"Click\");     // Label = \"Click\",  ID = hash of (..., \"node\", \"Click\")\n  TreePop();\n}\n```\n\n----------------------------------------\n\nTITLE: Building ImGui with Visual Studio CLI on Windows\nDESCRIPTION: Command-line instructions for building ImGui examples with SDL2 and OpenGL3 on Windows using Visual Studio's command-line interface. Includes both 32-bit and 64-bit compilation variants.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_sdl2_opengl3/README.md#2025-04-20_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset SDL2_DIR=path_to_your_sdl2_folder\ncl /Zi /MD /utf-8 /I.. /I..\\\\ /I%SDL2_DIR%\\include main.cpp ..\\\\..\\backends\\imgui_impl_sdl2.cpp ..\\\\..\\backends\\imgui_impl_opengl3.cpp ..\\\\..\\imgui*.cpp /FeDebug/example_sdl2_opengl3.exe /FoDebug/ /link /libpath:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib opengl32.lib /subsystem:console\n#                 ^^ include paths                  ^^ source files                                                                                    ^^ output exe                    ^^ output dir   ^^ libraries\n# or for 64-bit:\ncl /Zi /MD /utf-8 /I.. /I..\\\\ /I%SDL2_DIR%\\include main.cpp ..\\\\..\\backends\\imgui_impl_sdl2.cpp ..\\\\..\\backends\\imgui_impl_opengl3.cpp ..\\\\..\\imgui*.cpp /FeDebug/example_sdl2_opengl3.exe /FoDebug/ /link /libpath:%SDL2_DIR%\\lib\\x64 SDL2.lib SDL2main.lib opengl32.lib /subsystem:console\n```\n\n----------------------------------------\n\nTITLE: Loading Compressed Font Data in Dear ImGui (C++)\nDESCRIPTION: Code showing how to load fonts from compressed data embedded in source code. Two methods are demonstrated: loading from compressed TTF data directly or from Base85-encoded compressed data.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nImFont* font = io.Fonts->AddFontFromMemoryCompressedTTF(compressed_data, compressed_data_size, size_pixels, ...);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nImFont* font = io.Fonts->AddFontFromMemoryCompressedBase85TTF(compressed_data_base85, size_pixels, ...);\n```\n\n----------------------------------------\n\nTITLE: Building ImGui on macOS with SDL2 and OpenGL\nDESCRIPTION: Command-line instructions for building ImGui examples on macOS using SDL2 and OpenGL. Includes Homebrew instruction for SDL2 installation and links with appropriate macOS frameworks.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_sdl2_opengl3/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install sdl2\nc++ `sdl2-config --cflags` -I .. -I ../.. -I ../../backends\n  main.cpp ../../backends/imgui_impl_sdl2.cpp ../../backends/imgui_impl_opengl3.cpp ../../imgui*.cpp\n  `sdl2-config --libs` -framework OpenGl -framework CoreFoundation\n```\n\n----------------------------------------\n\nTITLE: Handling File Paths in Dear ImGui Font Loading (C++)\nDESCRIPTION: Examples demonstrating common issues and correct approaches when specifying file paths for font loading in Dear ImGui. Shows how to properly escape backslashes and use relative paths based on working directory.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nio.Fonts->AddFontFromFileTTF(\"MyFiles\\MyImage01.jpg\", ...);   // This is INCORRECT!!\nio.Fonts->AddFontFromFileTTF(\"MyFiles\\\\MyImage01.jpg\", ...);  // This is CORRECT\n```\n\nLANGUAGE: cpp\nCODE:\n```\nio.Fonts->AddFontFromFileTTF(\"MyImage01.jpg\", ...);       // Relative filename depends on your Working Directory when running your program!\nio.Fonts->AddFontFromFileTTF(\"../MyImage01.jpg\", ...);    // Load from the parent folder of your Working Directory\n```\n\n----------------------------------------\n\nTITLE: Building Dear ImGui with SDL3+OpenGL3 on Linux\nDESCRIPTION: Command-line instructions for building Dear ImGui with SDL3 and OpenGL3 backends on Linux and similar Unix systems. Uses sdl3-config to determine the appropriate compiler flags and includes necessary libraries.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_sdl3_opengl3/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nc++ `sdl3-config --cflags` -I .. -I ../.. -I ../../backends\n  main.cpp ../../backends/imgui_impl_sdl3.cpp ../../backends/imgui_impl_opengl3.cpp ../../imgui*.cpp\n  `sdl3-config --libs` -lGL -ldl\n```\n\n----------------------------------------\n\nTITLE: Implementing DirectX11 Clipping Rectangle Handling\nDESCRIPTION: Shows how to properly handle clipping rectangles in a DirectX11 rendering backend for Dear ImGui. Projects scissor/clipping rectangles into framebuffer space and applies them using D3D11 scissor rectangles.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#2025-04-20_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Project scissor/clipping rectangles into framebuffer space\nImVec2 clip_off = draw_data->DisplayPos;\nImVec2 clip_min(pcmd->ClipRect.x - clip_off.x, pcmd->ClipRect.y - clip_off.y);\nImVec2 clip_max(pcmd->ClipRect.z - clip_off.x, pcmd->ClipRect.w - clip_off.y);\nif (clip_max.x <= clip_min.x || clip_max.y <= clip_min.y)\n    continue;\n\n// Apply scissor/clipping rectangle\nconst D3D11_RECT r = { (LONG)clip_min.x, (LONG)clip_min.y, (LONG)clip_max.x, (LONG)clip_max.y };\nctx->RSSetScissorRects(1, &r);\n```\n\n----------------------------------------\n\nTITLE: Building ImGui with Emscripten\nDESCRIPTION: Command to build the ImGui project using Emscripten. This should be run in the example_glfw_wgpu/ directory and requires a recent version of Emscripten due to WGPU being a work-in-progress API.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake -f Makefile.emscripten\n```\n\n----------------------------------------\n\nTITLE: Displaying Correct and Incorrect UTF-8 Encoding\nDESCRIPTION: This snippet demonstrates how to display text with correct and incorrect UTF-8 encoding using ImGui::SeparatorText and ImGui::DebugTextEncoding.  It is used to confirm the correctness of UTF-8 strings. It relies on the ImGui library.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/FONTS.md#2025-04-20_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nImGui::SeparatorText(\"CORRECT\");\nImGui::DebugTextEncoding(u8\"こんにちは\");\n\nImGui::SeparatorText(\"INCORRECT\");\nImGui::DebugTextEncoding(\"こんにちは\");\n```\n\n----------------------------------------\n\nTITLE: Building ImGui with Allegro5 on Windows using MSVC\nDESCRIPTION: Commands to build the Allegro5 example on Windows using Microsoft Visual C++ compiler. Sets the Allegro directory path and compiles with specific configuration for imconfig and links with required libraries.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_allegro5/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bat\nCODE:\n```\nset ALLEGRODIR=path_to_your_allegro5_folder\ncl /Zi /MD /utf-8 /I %ALLEGRODIR%\\include /DIMGUI_USER_CONFIG=\\\"examples/example_allegro5/imconfig_allegro5.h\\\" /I .. /I ..\\.. /I ..\\..\\backends main.cpp ..\\..\\backends\\imgui_impl_allegro5.cpp ..\\..\\imgui*.cpp /link /LIBPATH:%ALLEGRODIR%\\lib allegro-5.0.10-monolith-md.lib user32.lib\n```\n\n----------------------------------------\n\nTITLE: Experimental RAII-style Wrappers for Dear ImGui in C++\nDESCRIPTION: The imgui_scoped.h file contains experimental RAII-style wrappers for common Dear ImGui functions. It is not currently in the main repository but can be tested by merging a pull request.\nSOURCE: https://github.com/ocornut/imgui/blob/master/misc/cpp/README.txt#2025-04-20_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nimgui_scoped.h\n```\n\n----------------------------------------\n\nTITLE: Configuring ImGui Android Example with CMake\nDESCRIPTION: A complete CMakeLists.txt file for setting up an ImGui-based Android application. It configures a shared library that includes ImGui core components, Android-specific implementations, and OpenGL ES3 rendering backend. The configuration sets C++11 as the standard, adds required include directories, and links against necessary Android and graphics libraries.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_android_opengl3/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.6)\n\nproject(ImGuiExample)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_library(${CMAKE_PROJECT_NAME} SHARED\n  ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../imgui.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../imgui_demo.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../imgui_draw.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../imgui_tables.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../imgui_widgets.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../backends/imgui_impl_android.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../backends/imgui_impl_opengl3.cpp\n  ${ANDROID_NDK}/sources/android/native_app_glue/android_native_app_glue.c\n)\n\nset(CMAKE_SHARED_LINKER_FLAGS\n  \"${CMAKE_SHARED_LINKER_FLAGS} -u ANativeActivity_onCreate\"\n)\n\ntarget_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE\n  IMGUI_IMPL_OPENGL_ES3\n)\n\ntarget_include_directories(${CMAKE_PROJECT_NAME} PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}/../..\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../backends\n  ${ANDROID_NDK}/sources/android/native_app_glue\n)\n\ntarget_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE\n  android\n  EGL\n  GLESv3\n  log\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Allegro5 with vcpkg on Windows\nDESCRIPTION: Commands to install Allegro5 on Windows using vcpkg package manager. Shows how to clone vcpkg, bootstrap it, and install Allegro for different architectures (x86 and x64).\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_allegro5/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\ngit clone https://github.com/Microsoft/vcpkg\ncd vcpkg\nbootstrap-vcpkg.bat\nvcpkg install allegro5 --triplet=x86-windows    ; for win32\nvcpkg install allegro5 --triplet=x64-windows    ; for win64\nvcpkg integrate install                         ; register include / libs in Visual Studio\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Project for ImGui with GLFW and Vulkan\nDESCRIPTION: This CMake configuration defines a project that integrates ImGui with GLFW and Vulkan. It sets the C++ standard to 11, enables Vulkan prototypes, configures GLFW as a dependency, and links everything together into an executable named 'example_glfw_vulkan'.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_vulkan/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Example usage:\n#  mkdir build\n#  cd build\n#  cmake -g \"Visual Studio 14 2015\" ..\n\ncmake_minimum_required(VERSION 2.8)\nproject(imgui_example_glfw_vulkan C CXX)\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Debug CACHE STRING \"\" FORCE)\nendif()\n\nset(CMAKE_CXX_STANDARD 11)\nset (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -DVK_PROTOTYPES\")\nset (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DVK_PROTOTYPES\")\n\n# GLFW\nif(NOT GLFW_DIR)\n   set(GLFW_DIR ../../../glfw) # Set this to point to an up-to-date GLFW repo\nendif()\noption(GLFW_BUILD_EXAMPLES \"Build the GLFW example programs\" OFF)\noption(GLFW_BUILD_TESTS \"Build the GLFW test programs\" OFF)\noption(GLFW_BUILD_DOCS \"Build the GLFW documentation\" OFF)\noption(GLFW_INSTALL \"Generate installation target\" OFF)\noption(GLFW_DOCUMENT_INTERNALS \"Include internals in documentation\" OFF)\nadd_subdirectory(${GLFW_DIR} binary_dir EXCLUDE_FROM_ALL)\ninclude_directories(${GLFW_DIR}/include)\n\n# Dear ImGui\nset(IMGUI_DIR ../../)\ninclude_directories(${IMGUI_DIR} ${IMGUI_DIR}/backends ..)\n\n# Libraries\nfind_package(Vulkan REQUIRED)\n#find_library(VULKAN_LIBRARY\n  #NAMES vulkan vulkan-1)\n#set(LIBRARIES \"glfw;${VULKAN_LIBRARY}\")\nset(LIBRARIES \"glfw;Vulkan::Vulkan\")\n\n# Use vulkan headers from glfw:\ninclude_directories(${GLFW_DIR}/deps)\n\nfile(GLOB sources *.cpp)\n\nadd_executable(example_glfw_vulkan ${sources} ${IMGUI_DIR}/backends/imgui_impl_glfw.cpp ${IMGUI_DIR}/backends/imgui_impl_vulkan.cpp ${IMGUI_DIR}/imgui.cpp ${IMGUI_DIR}/imgui_draw.cpp ${IMGUI_DIR}/imgui_demo.cpp ${IMGUI_DIR}/imgui_tables.cpp ${IMGUI_DIR}/imgui_widgets.cpp)\ntarget_link_libraries(example_glfw_vulkan ${LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dawn WebGPU Backend for Desktop Build\nDESCRIPTION: Sets up Dawn WebGPU implementation for desktop builds, disabling unnecessary Dawn components to optimize the build process.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n  # Dawn wgpu desktop\n  set(DAWN_FETCH_DEPENDENCIES ON)\n  set(IMGUI_DAWN_DIR CACHE PATH \"Path to Dawn repository\")\n  if (NOT IMGUI_DAWN_DIR)\n    message(FATAL_ERROR \"Please specify the Dawn repository by setting IMGUI_DAWN_DIR\")\n  endif()\n\n  option(DAWN_FETCH_DEPENDENCIES \"Use fetch_dawn_dependencies.py as an alternative to using depot_tools\" ON)\n\n  # Dawn builds many things by default - disable things we don't need\n  option(DAWN_BUILD_SAMPLES \"Enables building Dawn's samples\" OFF)\n  option(TINT_BUILD_CMD_TOOLS \"Build the Tint command line tools\" OFF)\n  option(TINT_BUILD_DOCS \"Build documentation\" OFF)\n  option(TINT_BUILD_TESTS \"Build tests\" OFF)\n  if (NOT APPLE)\n    option(TINT_BUILD_MSL_WRITER \"Build the MSL output writer\" OFF)\n  endif()\n  if(WIN32)\n    option(TINT_BUILD_SPV_READER \"Build the SPIR-V input reader\" OFF)\n    option(TINT_BUILD_WGSL_READER \"Build the WGSL input reader\" ON)\n    option(TINT_BUILD_GLSL_WRITER \"Build the GLSL output writer\" OFF)\n    option(TINT_BUILD_GLSL_VALIDATOR \"Build the GLSL output validator\" OFF)\n    option(TINT_BUILD_SPV_WRITER \"Build the SPIR-V output writer\" OFF)\n    option(TINT_BUILD_WGSL_WRITER \"Build the WGSL output writer\" ON)\n  endif()\n\n  add_subdirectory(\"${IMGUI_DAWN_DIR}\" \"${CMAKE_CURRENT_BINARY_DIR}/dawn\" EXCLUDE_FROM_ALL)\n\n  set(LIBRARIES webgpu_dawn webgpu_cpp webgpu_glfw glfw)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Project with Dear ImGui for WebGPU\nDESCRIPTION: Initializes the CMake project with C++17 standard required by Dawn and sets up paths to Dear ImGui.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10.2)\nproject(imgui_example_glfw_wgpu C CXX)\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Debug CACHE STRING \"\" FORCE)\nendif()\n\nset(CMAKE_CXX_STANDARD 17) # Dawn requires C++17\n\n# Dear ImGui\nset(IMGUI_DIR ../../)\n```\n\n----------------------------------------\n\nTITLE: Configuring Emscripten Build for WebGPU Example\nDESCRIPTION: Sets up the build configuration specifically for Emscripten targets, including GLFW implementation options based on Emscripten version.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(EMSCRIPTEN)\n  if(EMSCRIPTEN_VERSION VERSION_GREATER_EQUAL \"3.1.57\")\n    set(IMGUI_EMSCRIPTEN_GLFW3 \"--use-port=contrib.glfw3\" CACHE STRING \"Choose between --use-port=contrib.glfw3 and -sUSE_GLFW=3 for GLFW implementation (default to --use-port=contrib.glfw3)\")\n  else()\n    # cannot use contrib.glfw3 prior to 3.1.57\n    set(IMGUI_EMSCRIPTEN_GLFW3 \"-sUSE_GLFW=3\" CACHE STRING \"Use -sUSE_GLFW=3 for GLFW implementation\" FORCE)\n  endif()\n  set(LIBRARIES glfw)\n  add_compile_options(-sDISABLE_EXCEPTION_CATCHING=1 -DIMGUI_DISABLE_FILE_FUNCTIONS=1)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Assert Functionality in C++\nDESCRIPTION: This code snippet shows how to verify that asserts are enabled in a Dear ImGui project by adding an assertion that will always fail in the main function.\nSOURCE: https://github.com/ocornut/imgui/blob/master/docs/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nIM_ASSERT(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Emscripten-specific Build Settings for Web Output\nDESCRIPTION: Sets up specific Emscripten link options when targeting web builds, including WebGPU support, memory configuration, and HTML output handling.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Emscripten settings\nif(EMSCRIPTEN)\n  if(\"${IMGUI_EMSCRIPTEN_GLFW3}\" STREQUAL \"--use-port=contrib.glfw3\")\n    target_compile_options(example_glfw_wgpu PUBLIC\n        \"${IMGUI_EMSCRIPTEN_GLFW3}\"\n    )\n  endif()\n  message(STATUS \"Using ${IMGUI_EMSCRIPTEN_GLFW3} GLFW implementation\")\n  target_link_options(example_glfw_wgpu PRIVATE\n    \"-sUSE_WEBGPU=1\"\n    \"${IMGUI_EMSCRIPTEN_GLFW3}\"\n    \"-sWASM=1\"\n    \"-sALLOW_MEMORY_GROWTH=1\"\n    \"-sNO_EXIT_RUNTIME=0\"\n    \"-sASSERTIONS=1\"\n    \"-sDISABLE_EXCEPTION_CATCHING=1\"\n    \"-sNO_FILESYSTEM=1\"\n  )\n  set_target_properties(example_glfw_wgpu PROPERTIES OUTPUT_NAME \"index\")\n  # copy our custom index.html to build directory\n  add_custom_command(TARGET example_glfw_wgpu POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different \"${CMAKE_CURRENT_LIST_DIR}/web/index.html\" $<TARGET_FILE_DIR:example_glfw_wgpu>\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building ImGui on Linux with SDL2 and OpenGL\nDESCRIPTION: Command-line instructions for building ImGui examples on Linux using SDL2 and OpenGL. Uses sdl2-config to find the appropriate compiler flags and libraries.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_sdl2_opengl3/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nc++ `sdl2-config --cflags` -I .. -I ../.. -I ../../backends\n  main.cpp ../../backends/imgui_impl_sdl2.cpp ../../backends/imgui_impl_opengl3.cpp ../../imgui*.cpp\n  `sdl2-config --libs` -lGL -ldl\n```\n\n----------------------------------------\n\nTITLE: Building Dear ImGui with SDL3+OpenGL3 on Windows CLI\nDESCRIPTION: Command-line instructions for building Dear ImGui with SDL3 and OpenGL3 backends on Windows using Visual Studio's command-line tools. Includes commands for both 32-bit and 64-bit builds with detailed parameter explanations.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_sdl3_opengl3/README.md#2025-04-20_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset SDL3_DIR=path_to_your_sdl3_folder\ncl /Zi /MD /utf-8 /I.. /I..\\\\ /I%SDL3_DIR%\\include main.cpp ..\\\\..\\backends\\imgui_impl_sdl3.cpp ..\\\\..\\backends\\imgui_impl_opengl3.cpp ..\\\\..\\imgui*.cpp /FeDebug/example_sdl3_opengl3.exe /FoDebug/ /link /libpath:%SDL3_DIR%\\lib\\x86 SDL3.lib opengl32.lib /subsystem:console\n#                 ^^ include paths     ^^ source files                                                                                    ^^ output exe                    ^^ output dir   ^^ libraries\n# or for 64-bit:\ncl /Zi /MD /utf-8 /I.. /I..\\\\ /I%SDL3_DIR%\\include main.cpp ..\\\\..\\backends\\imgui_impl_sdl3.cpp ..\\\\..\\backends\\imgui_impl_opengl3.cpp ..\\\\..\\imgui*.cpp /FeDebug/example_sdl3_opengl3.exe /FoDebug/ /link /libpath:%SDL3_DIR%\\lib\\x64 SDL3.lib SDL2mainopengl32.lib /subsystem:console\n```\n\n----------------------------------------\n\nTITLE: Building Dear ImGui with SDL3+OpenGL3 on macOS\nDESCRIPTION: Command-line instructions for building Dear ImGui with SDL3 and OpenGL3 backends on macOS. Installs SDL3 via Homebrew and links against OpenGL and CoreFoundation frameworks.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_sdl3_opengl3/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install sdl3\nc++ `sdl3-config --cflags` -I .. -I ../.. -I ../../backends\n  main.cpp ../../backends/imgui_impl_sdl3.cpp ../../backends/imgui_impl_opengl3.cpp ../../imgui*.cpp\n  `sdl3-config --libs` -framework OpenGl -framework CoreFoundation\n```\n\n----------------------------------------\n\nTITLE: Compiling GLSL Shaders to SPIRV\nDESCRIPTION: Commands to compile vertex and fragment shaders from GLSL to SPIRV format using glslc.\nSOURCE: https://github.com/ocornut/imgui/blob/master/backends/sdlgpu3/build_instructions.txt#2025-04-20_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nglslc -o vertex.spv -c shader.vert\nglslc -o fragment.spv -c shader.frag\n```\n\n----------------------------------------\n\nTITLE: Building ImGui with Allegro5 on Ubuntu/macOS\nDESCRIPTION: Command to compile the Allegro5 example on Ubuntu 14.04+ and macOS. Uses g++ compiler with specific configuration to set the custom imconfig file for 32-bit indices support and links with required Allegro libraries.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_allegro5/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ng++ -DIMGUI_USER_CONFIG=\\\"examples/example_allegro5/imconfig_allegro5.h\\\" -I .. -I ../.. -I ../../backends main.cpp ../../backends/imgui_impl_allegro5.cpp ../../imgui*.cpp -lallegro -lallegro_main -lallegro_primitives -o allegro5_example\n```\n\n----------------------------------------\n\nTITLE: Serving ImGui Web Build Locally with Python 3\nDESCRIPTION: Command to serve the compiled ImGui web build using Python 3's built-in HTTP server. This allows you to access the build at http://localhost:8000.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake serve\n```\n\n----------------------------------------\n\nTITLE: Running ImGui Web Build with Emscripten's emrun\nDESCRIPTION: Command to run the compiled ImGui web build using Emscripten's emrun tool. This spawns a temporary local webserver and opens the application in Firefox.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nemrun web/example_glfw_wgpu.html --browser firefox\n```\n\n----------------------------------------\n\nTITLE: Serving ImGui Web Build with Python 3 HTTP Server\nDESCRIPTION: Alternative command to serve the ImGui web build using Python 3's built-in HTTP server. This serves the contents of the 'web' directory.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server -d web\n```\n\n----------------------------------------\n\nTITLE: Compiling SPIRV Shaders for DirectX 12\nDESCRIPTION: Commands to compile SPIRV shaders to DXBC format for DirectX 12 using SDL_shadercross.\nSOURCE: https://github.com/ocornut/imgui/blob/master/backends/sdlgpu3/build_instructions.txt#2025-04-20_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./shadercross vertex.spv -s SPIRV -d DXBC -t vertex -e main -o vertex.dxbc\n./shadercross fragment.spv -s SPIRV -d DXBC -t fragment -e main -o fragment.dxbc\n```\n\n----------------------------------------\n\nTITLE: Serving ImGui Web Build with Python 2 SimpleHTTPServer\nDESCRIPTION: Command to serve the ImGui web build using Python 2's SimpleHTTPServer. This serves the contents of the 'web' directory after changing to that directory.\nSOURCE: https://github.com/ocornut/imgui/blob/master/examples/example_glfw_wgpu/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd web && python -m SimpleHTTPServer\n```\n\n----------------------------------------\n\nTITLE: Compiling SPIRV Shaders for Metal\nDESCRIPTION: Commands to compile SPIRV shaders to Metal Shading Language (MSL) and then to Metal libraries using SDL_shadercross and Metal Developer Tools.\nSOURCE: https://github.com/ocornut/imgui/blob/master/backends/sdlgpu3/build_instructions.txt#2025-04-20_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./shadercross vertex.spv -s SPIRV -d MSL -t vertex -e main -o vertex.metal\n./shadercross fragment.spv -s SPIRV -d MSL -t fragment -e main -o fragment.metal\n\nxcrun -sdk macosx metal -o vertex.ir -c vertex.metal\nxcrun -sdk macosx metal -o fragment.ir -c fragment.metal\nxcrun -sdk macosx metallib -o vertex.metallib -c vertex.ir\nxcrun -sdk macosx metallib -o fragment.metallib -c fragment.ir\n```"
  }
]