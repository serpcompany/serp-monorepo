[
  {
    "owner": "solidjs",
    "repo": "solid-docs",
    "content": "TITLE: Configuring Basic Middleware in SolidStart\nDESCRIPTION: Example of a basic middleware configuration that logs request information and timing. It demonstrates both the onRequest and onBeforeResponse lifecycle events with time tracking stored in event.locals.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\n\nexport default createMiddleware({\n\tonRequest: (event) => {\n\t\tconsole.log(\"Request received:\", event.request.url);\n\n\t\tevent.locals.startTime = Date.now();\n\t},\n\tonBeforeResponse: (event) => {\n\t\tconst endTime = Date.now();\n\t\tconst duration = endTime - event.locals.startTime;\n\t\tconsole.log(`Request took ${duration}ms`);\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection Middleware in Solid.js\nDESCRIPTION: This middleware prevents Cross-Site Request Forgery attacks by validating Origin and Referer headers for non-safe methods (POST, PUT, etc.). It blocks requests from untrusted origins and handles various attack scenarios including HTTP man-in-the-middle attacks.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\nimport { json } from \"@solidjs/router\";\n\nconst SAFE_METHODS = [\"GET\", \"HEAD\", \"OPTIONS\", \"TRACE\"];\nconst TRUSTED_ORIGINS = [\"https://another-app.com\"];\n\nexport default createMiddleware({\n\tonRequest: (event) => {\n\t\tconst { request } = event;\n\n\t\tif (!SAFE_METHODS.includes(request.method)) {\n\t\t\tconst requestUrl = new URL(request.url);\n\t\t\tconst origin = request.headers.get(\"Origin\");\n\n\t\t\t// If we have an Origin header, check it against our allowlist.\n\t\t\tif (origin) {\n\t\t\t\tconst parsedOrigin = new URL(origin);\n\n\t\t\t\tif (\n\t\t\t\t\tparsedOrigin.origin !== requestUrl.origin &&\n\t\t\t\t\t!TRUSTED_ORIGINS.includes(parsedOrigin.host)\n\t\t\t\t) {\n\t\t\t\t\treturn json({ error: \"origin invalid\" }, { status: 403 });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are serving via TLS and have no Origin header, prevent against\n\t\t\t// CSRF via HTTP man-in-the-middle attacks by enforcing strict Referer\n\t\t\t// origin checks.\n\t\t\tif (!origin && requestUrl.protocol === \"https:\") {\n\t\t\t\tconst referer = request.headers.get(\"Referer\");\n\n\t\t\t\tif (!referer) {\n\t\t\t\t\treturn json({ error: \"referer not supplied\" }, { status: 403 });\n\t\t\t\t}\n\n\t\t\t\tconst parsedReferer = new URL(referer);\n\n\t\t\t\tif (parsedReferer.protocol !== \"https:\") {\n\t\t\t\t\treturn json({ error: \"referer invalid\" }, { status: 403 });\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tparsedReferer.host !== requestUrl.host &&\n\t\t\t\t\t!TRUSTED_ORIGINS.includes(parsedReferer.host)\n\t\t\t\t) {\n\t\t\t\t\treturn json({ error: \"referer invalid\" }, { status: 403 });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Event Handlers in SolidStart\nDESCRIPTION: Creates a WebSocket event handler that manages connection events. The handler implements four event types: open (when a connection is established), message (when a message is received), close (when a connection is closed), and error (when an error occurs).\n\nLANGUAGE: tsx\nCODE:\n```\nimport { eventHandler } from \"vinxi/http\";\n\nexport default eventHandler({\n  handler() {},\n  websocket: {\n    async open(peer) {\n      console.log(\"open\", peer.id, peer.url);\n    },\n    async message(peer, msg) {\n      const message = msg.text();\n      console.log(\"msg\", peer.id, peer.url, message);\n    },\n    async close(peer, details) {\n      console.log(\"close\", peer.id, peer.url);\n    },\n    async error(peer, error) {\n      console.log(\"error\", peer.id, peer.url, error);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Effects for Reactive Subscribers in Solid.js\nDESCRIPTION: Demonstrates using createEffect to create a subscriber that responds to changes in a signal. The effect logs the count value whenever it changes, showing how subscribers observe and respond to signal updates.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n\tconst [count, setCount] = createSignal(0);\n\tconst increment = () => setCount((prev) => prev + 1);\n\n\tcreateEffect(() => {\n\t\tconsole.log(count());\n\t});\n\t// the `createEffect` will trigger the console log every time `count` changes.\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive UI Updates in Solid.js Components\nDESCRIPTION: Shows how JSX creates a tracking scope that enables signals to be tracked within a component's return statement. When count changes, only the relevant part of the UI updates automatically.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n\tconst [count, setCount] = createSignal(0);\n\tconst increment = () => setCount((prev) => prev + 1);\n\n\treturn (\n\t\t<div>\n\t\t\t<span>Count: {count()}</span>{\" \"}\n\t\t\t{/* ✅ will update when `count()` changes. */}\n\t\t\t<button type=\"button\" onClick={increment}>\n\t\t\t\tIncrement\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic createResource Usage Examples in Solid.js\nDESCRIPTION: Demonstrates the two main ways to use createResource: either by passing just a fetcher function, or by passing a source signal and a fetcher. The returned resources provide data signals and utility functions for managing the async data.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [data, { mutate, refetch }] = createResource(fetchData)\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst [data, { mutate, refetch }] = createResource(source, fetchData)\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component with Reactive State in Solid.js\nDESCRIPTION: A simple counter component that demonstrates reactivity in Solid.js. It uses createSignal to manage state and updates only the count value when the increment button is clicked, without refreshing the entire component.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n\tconst [count, setCount] = createSignal(0);\n\tconst increment = () => setCount((prev) => prev + 1);\n\n\treturn (\n\t\t<div>\n\t\t\t<span>Count: {count()}</span>{\" \"}\n\t\t\t{/* Only `count()` is updated when the button is clicked. */}\n\t\t\t<button type=\"button\" onClick={increment}>\n\t\t\t\tIncrement\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Task Management App Using SolidJS Stores\nDESCRIPTION: A refactored version of the task management application using SolidJS stores instead of basic signals. It demonstrates store creation, state access, and making store updates with both setState and produce.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { For, createEffect, Show } from \"solid-js\"\nimport { createStore, produce } from \"solid-js/store\"\n\nconst App = () => {\n\tlet input // lets you target the input value\n\tconst [state, setState] = createStore({\n\t\ttasks: [],\n\t\tnumberOfTasks: 0,\n\t})\n\n\tconst addTask = (text) => {\n\t\tsetState(\"tasks\", state.tasks.length, {\n\t\t\tid: state.tasks.length,\n\t\t\ttext,\n\t\t\tcompleted: false,\n\t\t})\n\t}\n\n\tconst toggleTask = (id) => {\n\t\tsetState(\n\t\t\t\"tasks\",\n\t\t\t(tasks) => tasks.id === id,\n\t\t\tproduce((task) => {\n\t\t\t\ttask.completed = !task.completed\n\t\t\t})\n\t\t)\n\t}\n\n\tcreateEffect(() => {\n\t\tsetState(\"numberOfTasks\", state.tasks.length)\n\t})\n\n\treturn (\n\t\t<>\n\t\t\t<div>\n\t\t\t\t<h1>My Task List for Today</h1>\n\t\t\t\t<span>You have {state.numberOfTasks} task(s) for today!</span>\n\t\t\t</div>\n\t\t\t<input ref={input} />\n\t\t\t<button\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tif (!input.value.trim()) return\n\t\t\t\t\taddTask(input.value)\n\t\t\t\t\tinput.value = \"\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tAdd Task\n\t\t\t</button>\n\t\t\t<For each={state.tasks}>\n\t\t\t\t{(task) => {\n\t\t\t\t\tconst { id, text } = task\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={task.completed}\n\t\t\t\t\t\t\t\tonChange={() => toggleTask(task.id)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<span>{text}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t</For>\n\t\t</>\n\t)\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Creating Signals with Getters and Setters in Solid.js\nDESCRIPTION: Demonstrates how to create a signal using createSignal which returns a getter and setter function. The getter retrieves the current value, while the setter updates it.\n\nLANGUAGE: jsx\nCODE:\n```\nconst [count, setCount] = createSignal(0);\n//     ^ getter  ^ setter\n```\n\n----------------------------------------\n\nTITLE: Non-tracked Signal Access in Solid.js\nDESCRIPTION: Shows what happens when a signal is accessed outside a tracking scope. Without tracking, the signal update doesn't trigger a response, demonstrating the importance of reactive tracking contexts.\n\nLANGUAGE: jsx\nCODE:\n```\nconst [count, setCount] = createSignal(0);\n\nconsole.log(\"Count:\", count());\n\nsetCount(1);\n\n// Output: Count: 0\n\n// `count` is not being tracked, so the console log will not update when `count` changes.\n```\n\n----------------------------------------\n\nTITLE: Updating Signal Values in Solid.js\nDESCRIPTION: Shows how to update a signal value using the setter function. The setter can take a direct value or a function that receives the previous value.\n\nLANGUAGE: jsx\nCODE:\n```\nsetCount(count() + 1);\n\nconsole.log(count()); // output: 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Signal in Solid.js\nDESCRIPTION: Creates a signal using createSignal function imported from solid-js. This returns a getter and setter function pair that will be used to access and update the signal's value.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal } from \"solid-js\";\n\nconst [count, setCount] = createSignal(0);\n//       ^ getter  ^ setter\n```\n\n----------------------------------------\n\nTITLE: Using renderToStream with Node and Web Streams\nDESCRIPTION: Examples showing how to use renderToStream with both Node.js response objects and Web Streams API. The first example pipes directly to a Node response object, while the second uses TransformStream for web environments.\n\nLANGUAGE: typescript\nCODE:\n```\n// node\nrenderToStream(App).pipe(res)\n\n// web stream\nconst { readable, writable } = new TransformStream()\nrenderToStream(App).pipeTo(writable)\n```\n\n----------------------------------------\n\nTITLE: Using onMount for One-Time Effects in Solid.js\nDESCRIPTION: Shows how to use onMount for a side effect that should only run once, like fetching data. Unlike createEffect, onMount doesn't track dependencies and only runs when the component mounts.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { onMount } from \"solid-js\";\n\nfunction Component() {\n\tconst [data, setData] = createSignal(null);\n\n\tcreateEffect(() => {\n\t\tdata(); // will run every time data changes\n\t});\n\n\tonMount(async () => {\n\t\t// will run only once, when the component is mounted\n\t\tconst fetchedData = await fetch(\"https://example.com/data\");\n\t\tsetData(fetchedData);\n\t});\n\n\treturn <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Router for Server-Side Rendering in JSX\nDESCRIPTION: This snippet demonstrates how to conditionally configure the Solid Router component for server-side rendering by passing the server request URL when running on the server. It uses Solid's isServer utility to determine the execution environment.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { isServer } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\n<Router url={isServer ? req.url : \"\"} />;\n```\n\n----------------------------------------\n\nTITLE: Manipulating Request and Response Headers\nDESCRIPTION: Example of reading, setting, and modifying HTTP headers in middleware. This demonstrates how to access the user-agent and add custom headers to both requests and responses at different stages of the request lifecycle.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\n\nexport default createMiddleware({\n\tonRequest: (event) => {\n\t\t// Reading client metadata for later use\n\t\tconst userAgent = event.request.headers.get(\"user-agent\");\n\t\t// Adding custom headers to request/response\n\t\tevent.request.headers.set(\"x-custom-request-header\", \"hello\");\n\t\tevent.response.headers.set(\"x-custom-response-header1\", \"hello\");\n\t},\n\tonBeforeResponse: (event) => {\n\t\t// Finalizing response headers before sending to client\n\t\tevent.response.headers.set(\"x-custom-response-header2\", \"hello\");\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Multiple Updates With and Without produce in SolidJS\nDESCRIPTION: Shows how produce simplifies multiple store updates by allowing multiple properties to be modified in a single call compared to using batch with multiple setState calls.\n\nLANGUAGE: jsx\nCODE:\n```\n// without produce\nbatch(() => {\n\tsetState(0, \"text\", \"I'm updated text\")\n\tsetState(0, \"completed\", true)\n})\n\n// with produce\nsetState(\n\t0,\n\tproduce((task) => {\n\t\ttask.text = \"I'm updated text\";\n\t\ttask.completed = true;\n\t})\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Store in Solid.js\nDESCRIPTION: Initializes a store using createStore to manage complex state with nested objects and arrays. The store contains a userCount and an array of user objects with various properties.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createStore } from \"solid-js/store\"\n\n// Initialize store\nconst [store, setStore] = createStore({\n\tuserCount: 3,\n\tusers: [\n\t\t{\n\t\t\tid: 0,\n\t\t\tusername: \"felix909\",\n\t\t\tlocation: \"England\",\n\t\t\tloggedIn: false,\n\t\t},\n\t\t{\n\t\t\tid: 1,\n\t\t\tusername: \"tracy634\",\n\t\t\tlocation: \"Canada\",\n\t\t\tloggedIn: true,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\tusername: \"johny123\",\n\t\t\tlocation: \"India\",\n\t\t\tloggedIn: true,\n\t\t},\n\t],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactivity with Signals in a Solid.js Counter Component\nDESCRIPTION: Creates a Counter component that demonstrates reactivity in Solid.js. When the count signal changes, the component automatically updates to display the new value.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n\tconst [count, setCount] = createSignal(0);\n\tconst increment = () => setCount((prev) => prev + 1);\n\n\treturn (\n\t\t<div>\n\t\t\t<span>Count: {count()}</span> {/* Updates when `count` changes */}\n\t\t\t<button type=\"button\" onClick={increment}>\n\t\t\t\tIncrement\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Data Fetching with createResource in Solid.js\nDESCRIPTION: Demonstrates how to use createResource to fetch user data from an API. The example shows handling loading states, error conditions, and successful data fetching using Show and Switch/Match components.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createResource, Switch, Match, Show } from \"solid-js\";\n\nconst fetchUser = async (id) => {\n  const response = await fetch(`https://swapi.dev/api/people/${id}/`);\n  return response.json();\n}\n\nfunction App() {\n  const [userId, setUserId] = createSignal();\n  const [user] = createResource(userId, fetchUser);\n\n  return (\n    <div>\n      <input\n        type=\"number\"\n        min=\"1\"\n        placeholder=\"Enter Numeric Id\"\n        onInput={(e) => setUserId(e.currentTarget.value)}\n      />\n      <Show when={user.loading}>\n        <p>Loading...</p>\n      </Show>\n      <Switch>\n        <Match when={user.error}>\n          <span>Error: {user.error}</span>\n        </Match>\n        <Match when={user()}>\n          <div>{JSON.stringify(user())}</div>\n        </Match>\n      </Switch>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Accessing Signal Values in Solid.js\nDESCRIPTION: Demonstrates how to access the current value of a signal by calling the getter function without any arguments.\n\nLANGUAGE: jsx\nCODE:\n```\nconsole.log(count()); // output: 0\n```\n\n----------------------------------------\n\nTITLE: Creating a tRPC Router in SolidStart\nDESCRIPTION: Demonstrates how to define a tRPC router with procedures and input validation using valibot, which can be used by both the server and client for type-safe API calls.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { initTRPC } from \"@trpc/server\";\nimport { wrap } from \"@decs/typeschema\";\nimport { string } from \"valibot\";\n\nconst t = initTRPC.create();\n\nexport const appRouter = t.router({\n  hello: t.procedure.input(wrap(string())).query(({ input }) => {\n    return `hello ${input ?? \"world\"}`;\n  })\n});\n\nexport type AppRouter = typeof appRouter;\n```\n\n----------------------------------------\n\nTITLE: Comparing Effect vs Memo Approach for Derived State\nDESCRIPTION: Illustrates the difference between using an effect versus a memo for derived state. The memo approach is more efficient as it only runs when the actual output value changes.\n\nLANGUAGE: jsx\nCODE:\n```\n// effect - runs whenever `count` changes\ncreateEffect(() => {\n\tif (count() > 10) {\n\t\tsetMessage(\"Count is too high!\")\n\t} else {\n\t\tsetMessage(\"\")\n\t}\n})\n\n// memo - only runs when `count` changes to or from a value greater than 10\nconst message = createMemo(() => {\n\tif (count() > 10) {\n\t\treturn \"Count is too high!\"\n\t} else {\n\t\treturn \"\"\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Synchronous Reactivity with Derived Signals in Solid.js\nDESCRIPTION: Demonstrates synchronous reactivity with a derived signal. When count changes, the effect runs immediately to update double, ensuring double is always twice the current count value in a predictable, ordered manner.\n\nLANGUAGE: jsx\nCODE:\n```\nconst [count, setCount] = createSignal(0);\nconst [double, setDouble] = createSignal(0);\n\ncreateEffect(() => {\n\tsetDouble(count() * 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Task Management App Using Basic SolidJS Signals\nDESCRIPTION: An example of a task management application built with SolidJS using basic signals for state management. It demonstrates how multiple signals and memo values are used to track tasks, task count, and task completion status.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { For, createSignal, Show, createMemo } from \"solid-js\"\n\nconst App = () => {\n\tconst [tasks, setTasks] = createSignal([])\n\tconst [numberOfTasks, setNumberOfTasks] = createSignal(tasks.length)\n\tconst completedTasks = createMemo(() => tasks().filter((task) => task.completed))\n\tlet input\n\n\tconst addTask = (text) => {\n\t\tsetTasks([...tasks(), { id: tasks().length, text, completed: false }])\n\t\tsetNumberOfTasks(numberOfTasks() + 1)\n\t}\n\tconst toggleTask = (id) => {\n\t\tsetTasks(\n\t\t\ttasks().map((task) =>\n\t\t\t\ttask.id !== id ? task : { ...task, completed: !task.completed }\n\t\t\t)\n\t\t)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<h1>My list</h1>\n\t\t\t<span>You have {numberOfTasks()} task(s) today!</span>\n\t\t\t<div>\n\t\t\t\t<input ref={input} />\n\t\t\t\t<button\n\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\tif (!input.value.trim()) return\n\t\t\t\t\t\taddTask(input.value)\n\t\t\t\t\t\tinput.value = \"\"\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tAdd Task\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<For each={tasks()}>\n\t\t\t\t{(task) => {\n\t\t\t\t\tconst { id, text } = task\n\t\t\t\t\tconsole.log(`Creating ${text}`)\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={task.completed}\n\t\t\t\t\t\t\t\tonChange={[toggleTask, id]}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\"text-decoration\": task.completed ? \"line-through\" : \"none\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{text}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t</For>\n\t\t</>\n\t)\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styling with Conditional Class Names in Solid.js\nDESCRIPTION: This example demonstrates how to dynamically apply class names based on state using a signal. The class attribute value changes depending on the theme signal's value, enabling adaptive styling.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [theme, setTheme] = createSignal(\"light\");\n\n<div class={theme() === \"light\" ? \"light-theme\" : \"dark-theme\"}>\n\tThis div's theme is determined dynamically!\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Simple Component Tree Structure in Solid.js\nDESCRIPTION: Illustrates a basic component tree with the root App component and a child MyComponent. This JSON representation shows the hierarchy of components in a simple application.\n\nLANGUAGE: json\nCODE:\n```\nApp // primary application component\n└── MyComponent // child component\n```\n\n----------------------------------------\n\nTITLE: Using createEffect for Side Effects in Solid.js\nDESCRIPTION: Demonstrates how to use createEffect to respond to state changes. This example updates a doubleCount signal whenever the count signal changes, showing reactive dependencies in action.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createEffect } from \"solid-js\";\n\nfunction Counter() {\n\tconst [count, setCount] = createSignal(0);\n\tconst [doubleCount, setDoubleCount] = createSignal(0); // Initialize a new state for doubleCount\n\n\tconst increment = () => {\n\t\tsetCount((prev) => prev + 1);\n\t};\n\n\tcreateEffect(() => {\n\t\tsetDoubleCount(count() * 2); // Update doubleCount whenever count changes\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<div>Current count: {count()}</div>\n\t\t\t<div>Doubled count: {doubleCount()}</div> // Display the doubled count\n\t\t\t<button onClick={increment}>Increment</button>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fetcher Function for createResource in Solid.js\nDESCRIPTION: Shows how to implement a fetcher function that receives source data and information about the previous value and refetching state. This example demonstrates a complete createResource implementation with examples of accessing the returned data, loading state, and error handling.\n\nLANGUAGE: tsx\nCODE:\n```\nasync function fetchData(source, { value, refetching }) {\n\t// Fetch the data and return a value.\n\t//`source` tells you the current value of the source signal;\n\t//`value` tells you the last returned value of the fetcher;\n\t//`refetching` is true when the fetcher is triggered by calling `refetch()`,\n\t// or equal to the optional data passed: `refetch(info)`\n}\n\nconst [data, { mutate, refetch }] = createResource(getQuery, fetchData)\n\n// read value\ndata()\n\n// check if loading\ndata.loading\n\n// check if errored\ndata.error\n\n// directly set value without creating promise\nmutate(optimisticValue)\n\n// refetch the last request explicitly\nrefetch()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Component in Solid.js\nDESCRIPTION: Demonstrates how to create a simple component function that returns a JSX element. This is the most basic building block of a Solid application.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n\treturn <div>Hello World</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Updating Signals in SolidJS\nDESCRIPTION: Shows various ways to read signal values and update them. Includes examples of reading current values, creating derived computations, building tracking scopes, and updating signals with both direct values and function setters.\n\nLANGUAGE: tsx\nCODE:\n```\n// read signal's current value, and\n// depend on signal if in a tracking scope\n// (but nonreactive outside of a tracking scope):\nconst currentCount = count()\n\n// or wrap any computation with a function,\n// and this function can be used in a tracking scope:\nconst doubledCount = () => 2 * count()\n\n// or build a tracking scope and depend on signal:\nconst countDisplay = <div>{count()}</div>\n\n// write signal by providing a value:\nsetReady(true)\n\n// write signal by providing a function setter:\nconst newCount = setCount((prev) => prev + 1)\n```\n\n----------------------------------------\n\nTITLE: Nesting Components in Solid.js\nDESCRIPTION: Shows how to nest components within each other to create more complex applications. The App component contains the MyComponent as a child element.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<MyComponent />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Form Fields in SolidStart Actions\nDESCRIPTION: This example demonstrates form validation within SolidStart actions. It checks if the title field meets length requirements, returning validation errors when invalid. The component uses useSubmission to access and display these validation errors.\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/routes/index.tsx\nimport { Show } from \"solid-js\";\nimport { action, useSubmission } from \"@solidjs/router\";\n\nconst addPost = action(async (formData: FormData) => {\n\tconst title = formData.get(\"title\") as string;\n\tif (!title || title.length < 2) {\n\t\treturn {\n\t\t\terror: \"Title must be at least 2 characters\",\n\t\t};\n\t}\n\tawait fetch(\"https://my-api.com/posts\", {\n\t\tmethod: \"POST\",\n\t\tbody: JSON.stringify({ title }),\n\t});\n}, \"addPost\");\n\nexport default function Page() {\n\tconst submission = useSubmission(addPost);\n\treturn (\n\t\t<form action={addPost} method=\"post\">\n\t\t\t<input name=\"title\" />\n\t\t\t<Show when={submission.result?.error}>\n\t\t\t\t<p>{submission.result?.error}</p>\n\t\t\t</Show>\n\t\t\t<button>Add Post</button>\n\t\t</form>\n\t);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/routes/index.jsx\nimport { Show } from \"solid-js\";\nimport { action, useSubmission } from \"@solidjs/router\";\n\nconst addPost = action(async (formData) => {\n\tconst title = formData.get(\"title\");\n\tif (!title || title.length < 2) {\n\t\treturn {\n\t\t\terror: \"Title must be at least 2 characters\",\n\t\t};\n\t}\n\tawait fetch(\"https://my-api.com/posts\", {\n\t\tmethod: \"POST\",\n\t\tbody: JSON.stringify({ title }),\n\t});\n}, \"addPost\");\n\nexport default function Page() {\n\tconst submission = useSubmission(addPost);\n\treturn (\n\t\t<form action={addPost} method=\"post\">\n\t\t\t<input name=\"title\" />\n\t\t\t<Show when={submission.result?.error}>\n\t\t\t\t<p>{submission.result?.error}</p>\n\t\t\t</Show>\n\t\t\t<button>Add Post</button>\n\t\t</form>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Counter Component in Solid.js\nDESCRIPTION: Demonstrates a simple counter component using Solid.js's createSignal to manage state. The component renders the current count and provides a button to increment it.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal } from \"solid-js\";\n\nfunction Counter() {\n\tconst [count, setCount] = createSignal(0);\n\n\tconst increment = () => {\n\t\tsetCount((prev) => prev + 1);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div>Current count: {count()}</div>\n\t\t\t<button onClick={increment}>Increment</button>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Suspense Boundaries in Solid.js\nDESCRIPTION: Example of nested Suspense components where different resources trigger different suspense boundaries. This demonstrates how resources only trigger their closest suspense boundary.\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponent = () => {\n\tconst [title] = createResource(async () => { /* fetcher code here */ })\n\tconst [data] = createResource(async () => { /* fetcher code here */ })\n\t<Suspense>\n\t\t<h1>{title()}</h1>\n\t\t<Suspense>\n\t\t\t<DataComponent>{data()}</DataComponent>\n\t\t</Suspense>\n\t</Suspense>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Providing Context Values to Children\nDESCRIPTION: Shows how to pass values to the Provider component using the value prop. These values will be available to all descendant components.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext, useContext } from \"solid-js\";\nimport { MyContext } from \"./create\";\n\nconst Provider = (props) => (\n\t<MyContext.Provider value=\"new value\">{props.children}</MyContext.Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Context Provider Component\nDESCRIPTION: Shows how to create a reusable custom Provider component that encapsulates the context creation logic, making it easier to use throughout an application.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createContext, useContext } from \"solid-js\";\nimport { CounterContext } from \"~/context/counter\";\n\nexport function CounterProvider(props) {\n\treturn (\n\t\t<CounterContext.Provider value={props.count ?? 0}>\n\t\t\t{props.children}\n\t\t</CounterContext.Provider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context with Signals for State Management - App Component\nDESCRIPTION: Main application component that uses the CounterProvider to provide counter state to child components.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CounterProvider } from \"./Context\";\nimport { Child } from \"./Child\";\n\nexport function App() {\n\treturn (\n\t\t<CounterProvider count={1}>\n\t\t\t<h1>Welcome to Counter App</h1>\n\t\t\t<Child />\n\t\t</CounterProvider>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Signals with Effects in Solid.js\nDESCRIPTION: Demonstrates how to properly track signals by accessing them within a createEffect tracking scope. When the signal value changes, the effect re-runs and logs the updated value.\n\nLANGUAGE: jsx\nCODE:\n```\nconst [count, setCount] = createSignal(0);\n\ncreateEffect(() => {\n\tconsole.log(\"Count:\", count());\n});\n\nsetCount(1);\n\n// Output: Count: 0\n//         Count: 1\n```\n\n----------------------------------------\n\nTITLE: Signal Tracking in Different Contexts in Solid.js\nDESCRIPTION: Illustrates where signals are tracked in components. Signals accessed in the component body are only read once during initialization, while those in Effects or JSX are properly tracked and trigger updates when values change.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n\tconst [count, setCount] = createSignal(0);\n\tconst increment = () => setCount((prev) => prev + 1);\n\n\tconsole.log(\"Count:\", count()); // ❌ not tracked - only runs once during initialization.\n\n\tcreateEffect(() => {\n\t\tconsole.log(count()); // ✅ will update whenever `count()` changes.\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<span>Count: {count()}</span>{/* ✅ will update whenever `count()` changes. */}\n\t\t\t<button type=\"button\" onClick={increment}>\n\t\t\t\tIncrement\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with useSubmission in SolidJS Router\nDESCRIPTION: Shows how to handle errors during form submission using the useSubmission hook, including displaying error messages and implementing retry and clear functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Show } from \"solid-js\";\nimport { useSubmission } from \"@solidjs/router\";\n\nfunction Component() {\n  const submission = useSubmission(postNameAction);\n\n    return (\n      <>\n        <Show when={submission.error}>\n          {(error) => (\n            <div>\n              <p>Error: {error.message}</p>\n              <button onClick={() => submission.clear()}>\n                Clear\n              </button>\n              <button onClick={async () => submission.retry()}>\n               Retry\n              </button>\n            </div>\n          )}\n        </Show>\n\n        <form method=\"post\" action={sendData}>\n          <input type=\"text\" name=\"name\" required />\n          <button type=\"submit\" disabled={submission.pending}>\n            {submission.pending ? \"Submitting\" : \"Submit\"}\n          </button>\n        </form>\n      </>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Maintaining Prop Reactivity in Solid.js\nDESCRIPTION: Illustrates the correct and incorrect ways to handle props in Solid.js to maintain reactivity, showing how destructuring breaks reactivity and how to properly access props.\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyComponent(props) {\n\tconst { name } = props; // ❌: breaks reactivity and will not update when the prop value changes\n\tconst name = props.name; // ❌: another example of breaking reactivity\n\tconst name = () => props.name; // ✓: by wrapping `props.name` into a function, `name()` always retrieves its current value\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Stores in Solid.js\nDESCRIPTION: Shows an advanced technique for creating nested stores from existing store properties. Changes to the nested store will update the original store and vice versa.\n\nLANGUAGE: jsx\nCODE:\n```\n  const [store, setStore] = createStore({\n    userCount: 3,\n    users: [ ... ],\n  })\n\n  const [users, setUsers] = createStore(store.users)\n\n  setUsers((currentUsers) => [\n    ...currentUsers,\n    {\n      id: 3,\n      username: \"michael584\",\n      location: \"Nigeria\",\n      loggedIn: false,\n    },\n  ])\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Signals with Effects in Solid.js\nDESCRIPTION: Creates an effect that subscribes to a count signal and logs its value whenever it changes, demonstrating the automatic subscription mechanism.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createEffect } from \"solid-js\";\n\nconst [count, setCount] = createSignal(0);\n\ncreateEffect(() => {\n\tconsole.log(count()); // Logs current value of count whenever it changes\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useSubmissions in TypeScript\nDESCRIPTION: Demonstrates how to provide optimistic UI updates while a form submission is in progress, showing pending state feedback and displaying submitted data immediately before the server responds.\n\nLANGUAGE: tsx\nCODE:\n```\n// component.tsx\nimport { Show } from \"solid-js\";\nimport { useSubmissions } from \"@solidjs/router\";\n\nfunction Component() {\n  const submissions = useSubmissions(postNameAction);\n\n    return (\n      <form method=\"post\" action={postNameAction}>\n        <ul>\n          <For each={Array.from(submissions.entries())}>\n            {([attemptIndex, data]) => (\n                <Show when={data.input[0].entries().next()}>\n                    {(input) => {\n                        const name = (input().value as [string, string])[1]\n\n                        return (\n                            <li>Optimistic: {name}</li>\n                        )}}\n                </Show>\n            )}\n          </For>\n        </ul>\n        <input name=\"name\" type=\"text\" />\n        <button type=\"submit\">{submissions.pending ? \"sending\" : \"send\"}</button>\n      </form>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Signal Usage with Destructuring in SolidJS\nDESCRIPTION: Demonstrates how to create named signals by destructuring the return value of createSignal. Shows examples of creating number and boolean signals with initial values.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [count, setCount] = createSignal(0)\nconst [ready, setReady] = createSignal(false)\n```\n\n----------------------------------------\n\nTITLE: Creating a Provider Component for Context\nDESCRIPTION: Demonstrates how to create a provider component that wraps child components to give them access to the context values.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MyContext } from \"./create\";\n\nexport function Provider (props) {\n\treturn (\n\t\t<MyContext.Provider>\n\t\t\t{props.children}\n\t\t</MyContext.Provider>\n\t)\n};\n```\n\n----------------------------------------\n\nTITLE: Using Signal Getters and Setters in Solid.js\nDESCRIPTION: Shows how to use signal getters to access values and setters to update them. The example demonstrates reading a signal's value, updating it, and then reading the updated value.\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(count()); // `count()` is a getter that returns the current value of `count`, which is `0`.\n\nsetCount(1); // the setter, `setCount`, updates the value of `count`.\n\nconsole.log(count()); // the updated value of `count` is now `1`.\n```\n\n----------------------------------------\n\nTITLE: Updating Signal Values with Previous Value in Solid.js\nDESCRIPTION: Demonstrates using a function with the setter that receives the previous value of the signal, which is useful for updates that depend on the current state.\n\nLANGUAGE: jsx\nCODE:\n```\nsetCount((prevCount) => prevCount + 1);\n\nconsole.log(count()); // output: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Effect in Solid.js\nDESCRIPTION: Creates a simple effect that logs the count signal value whenever it changes. The effect automatically tracks the count signal as a dependency.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createEffect } from \"solid-js\";\n\nconst [count, setCount] = createSignal(0);\n\ncreateEffect(() => {\n\tconsole.log(count());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Typing Signals in SolidJS\nDESCRIPTION: Shows the function signature and type definitions for createSignal, which returns a getter and setter function pair. Includes the types Signal, Accessor, and Setter from SolidJS.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSignal } from \"solid-js\"\n\nfunction createSignal<T>(\n\tinitialValue: T,\n\toptions?: {\n\t\tequals?: false | ((prev: T, next: T) => boolean)\n\t\tname?: string\n\t\tinternal?: boolean\n\t}\n): [get: () => T, set: (v: T) => T]\n\n// available types for return value of createSignal:\nimport type { Signal, Accessor, Setter } from \"solid-js\"\ntype Signal<T> = [get: Accessor<T>, set: Setter<T>]\ntype Accessor<T> = () => T\ntype Setter<T> = (v: T | ((prev?: T) => T)) => T\n```\n\n----------------------------------------\n\nTITLE: Using Context with Signals for State Management - Context Implementation\nDESCRIPTION: Creates a counter context with signals and methods for incrementing and decrementing the count value. Shows how to create a provider that manages state.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, useContext } from \"solid-js\";\n\nexport function CounterProvider(props) {\n\tconst [count, setCount] = createSignal(props.initialCount || 0);\n\tconst counter = [\n\t\tcount,\n\t\t{\n\t\t\tincrement() {\n\t\t\tsetCount(prev => prev + 1);\n\t\t\t},\n\t\t\tdecrement() {\n\t\t\tsetCount(prev => prev - 1);\n\t\t\t}\n\t\t}\n\t];\n\n\treturn (\n\t\t<CounterContext.Provider value={counter}>\n\t\t\t{props.children}\n\t\t</CounterContext.Provider>\n\t);\n}\n\nexport function useCounter() { return useContext(CounterContext); }\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Solid Application with SolidStart\nDESCRIPTION: Command to initialize a new Solid application using the SolidStart starter, which will prompt you to choose templates and configuration options.\n\nLANGUAGE: bash\nCODE:\n```\nsolid@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense for Optimal Resource Loading in Solid.js\nDESCRIPTION: Using Suspense to handle asynchronous loading with optimal performance. This approach creates DOM nodes immediately but doesn't attach them until resources resolve.\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponentWithSuspense = () => {\n\tconst [profile] = createResource(async () => {\n\t\t/* fetcher code here */\n\t})\n\treturn (\n\t\t<Suspense fallback={<div>fetching user data</div>}>\n\t\t\t<div>{profile()?.name}</div>\n\t\t\t<div>{profile()?.email}</div>\n\t\t</Suspense>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Form Input List with <Index> in Solid.js\nDESCRIPTION: A complete component example showing how to manage a list of form inputs using the <Index> component. This demonstrates when to use <Index> for stable lists where the content changes.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, Index } from \"solid-js\"\n\nfunction FormList() {\n\tconst [inputs, setInputs] = createSignal(['input1','input2','input3'])\n\treturn(\n\t\t<form>\n\t\t\t<Index each={inputs()}>\n\t\t\t\t{(input, index) => (\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={input()}\n\t\t\t\t\t\tonInput={(e) => {\n\t\t\t\t\t\t\t// update the input value\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Index>\n\t\t</form>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating State with createSignal in Solid.js\nDESCRIPTION: Shows how to initialize state using createSignal, which returns a getter and setter pair. The initial value is passed as an argument to createSignal.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal } from \"solid-js\";\n\nconst [count, setCount] = createSignal(0);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of 'on' with createEffect\nDESCRIPTION: Example showing how to use the 'on' function with createEffect to make dependencies explicit. The second snippet shows the equivalent code without using 'on', demonstrating how it uses untrack internally.\n\nLANGUAGE: typescript\nCODE:\n```\ncreateEffect(on(a, (v) => console.log(v, b())));\n\n// is equivalent to:\ncreateEffect(() => {\n\tconst v = a();\n\tuntrack(() => console.log(v, b()));\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Component Tests in Solid\nDESCRIPTION: Example of a test file for a Counter component. It demonstrates rendering the component, interacting with it via user events, and making assertions about its behavior.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { test, expect } from \"vitest\"\nimport { render } from \"@solidjs/testing-library\"\nimport userEvent from \"@testing-library/user-event\"\nimport { Counter } from \"./Counter\"\n\nconst user = userEvent.setup()\n\ntest(\"increments value\", async () => {\n  const { getByRole } = render(() => <Counter />)\n  const counter = getByRole('button')\n  expect(counter).toHaveTextContent(\"1\")\n  await user.click(counter)\n  expect(counter).toHaveTextContent(\"2\")\n})\n```\n\n----------------------------------------\n\nTITLE: Named Signals for Debugging in SolidJS\nDESCRIPTION: Shows how to use the name option to give a signal a name, which is useful for debugging and will be displayed in the devtools.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [count, setCount] = createSignal(0, { name: \"count\" })\n```\n\n----------------------------------------\n\nTITLE: Creating a Type-Safe Context Hook with Error Handling\nDESCRIPTION: Shows how to create a custom context hook that performs runtime validation and throws a helpful error message when the context is undefined.\n\nLANGUAGE: ts\nCODE:\n```\nfunction useCounterContext() {\n\tconst context = useContext(CounterContext)\n\tif (!context) {\n\t\tthrow new Error(\"can't find CounterContext\")\n\t}\n\treturn context\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Context Values with useContext\nDESCRIPTION: Illustrates how to access context values in child components using the useContext hook. This example shows a complete pattern with provider and consumer components.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext, useContext } from \"solid-js\";\nimport { MyContext } from \"./create\";\n\nconst Provider = (props) => (\n\t<MyContext.Provider value=\"new value\">\n\t\t{props.children}\n\t</MyContext.Provider>\n);\n\nconst Child = () => {\n\tconst value = useContext(MyContext);\n\n\treturn (\n\t\t<span>\n\t\t\t{value}\n\t\t</span>\n\t);\n};\n\nexport const App = () => (\n\t<Provider>\n\t\t<Child />\n\t</Provider>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Delegated Mouse Events in SolidJS\nDESCRIPTION: Demonstrates using delegated event syntax for mouse movement events, where the event listener is added once to the document and handles all future events of that type.\n\nLANGUAGE: tsx\nCODE:\n```\n<div onMouseMove={handleCustomEvent} />\n```\n\n----------------------------------------\n\nTITLE: Basic usage of createMemo in SolidJS\nDESCRIPTION: A simple example demonstrating how to create and use a memoized value with createMemo. The expensive computation will only run when dependencies a() or b() change.\n\nLANGUAGE: ts\nCODE:\n```\nconst value = createMemo(() => computeExpensiveValue(a(), b()))\n\n//read the value\nvalue()\n```\n\n----------------------------------------\n\nTITLE: Modifying Store Values with Setter Function\nDESCRIPTION: Demonstrates how to update values in a Solid.js store using the setter function returned by createStore. This example adds a new user to the users array.\n\nLANGUAGE: jsx\nCODE:\n```\nconst [store, setStore] = createStore({\n\tuserCount: 3,\n\tusers: [ ... ],\n})\n\nsetStore(\"users\", (currentUsers) => [\n\t...currentUsers,\n\t{\n\t\tid: 3,\n\t\tusername: \"michael584\",\n\t\tlocation: \"Nigeria\",\n\t\tloggedIn: false,\n\t},\n])\n```\n\n----------------------------------------\n\nTITLE: Using the Solid.js render Function\nDESCRIPTION: Examples of how to use the render function to mount a Solid.js application. Shows two pattern variations and returns a dispose function that can be used to clean up the application.\n\nLANGUAGE: typescript\nCODE:\n```\nconst dispose = render(App, document.getElementById(\"app\"))\n// or\nconst dispose = render(() => <App />, document.getElementById(\"app\"))\n```\n\n----------------------------------------\n\nTITLE: Multiple Routes Definition in Solid Router\nDESCRIPTION: This example shows how to define multiple routes in a Solid application. It sets up three different routes: the root path, a hello-world path with an inline component, and an about path pointing to an imported component.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nimport Home from \"./routes/index.jsx\";\nimport About from \"./routes/about.jsx\";\n\nrender(\n    () => (\n        <Router>\n            <Route path=\"/\" component={Home} />\n            <Route path=\"/hello-world\" component={() => <h1>Hello World!</h1>} />\n            <Route path=\"/about\" component={About} />\n        </Router>\n    ),\n    document.getElementById(\"app\")\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Events with Native Event Syntax in SolidJS\nDESCRIPTION: Shows how to attach event listeners for custom events that aren't supported by SolidJS's event delegation system, such as events from custom elements.\n\nLANGUAGE: tsx\nCODE:\n```\n<div on:customEvent={handleCustomEvent} />\n```\n\n----------------------------------------\n\nTITLE: Basic <For> Component Usage in Solid.js\nDESCRIPTION: A simple example of using the <For> component to iterate over a data collection. The component takes an 'each' property containing the data and a callback function that receives the current item and index.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { For } from \"solid-js\"\n\n<For each={data()}>\n  {(item, index) =>\n    // rendering logic for each element\n  }\n</For>\n```\n\n----------------------------------------\n\nTITLE: Using createAsyncStore for Asynchronous Data Fetching in Solid.js\nDESCRIPTION: Creates a deeply reactive store for handling asynchronous data that requires fine-grained updates. Unlike createAsync, this provides reactivity throughout the entire data structure, making it ideal for large models that need partial updates.\n\nLANGUAGE: jsx\nCODE:\n```\nconst todos = createAsyncStore(() => getTodos());\n```\n\n----------------------------------------\n\nTITLE: String List Example with <For> in Solid.js\nDESCRIPTION: A complete component example showing how to create a list of strings using the <For> component. This includes a signal to track the list items and how to render each one.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, For } from \"solid-js\"\n\nfunction StringList() {\n\tconst [items, setItems] = createSignal([\"Item 1\", \"Item 2\", \"Item 3\"])\n\n\treturn (\n\t\t<ul>\n\t\t\t<input \n\t\t\t\ttype=\"text\"\n\t\t\t\tonInput={(e) => {\n\t\t\t\t\t// add the new item to the list\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<For each={items()}>\n\t\t\t\t{(item, index) => (\n\t\t\t\t\t<li> \n\t\t\t\t\t\t{item} - {index()}\n\t\t\t\t\t</li>\n\t\t\t\t)}\n\t\t\t</For>\n\t\t</ul>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Context in Solid.js\nDESCRIPTION: Shows how to create a context object using the createContext function from solid-js. The context object has a Provider property that can be used to wrap components.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from \"solid-js\";\n\nconst MyContext = createContext();\n```\n\n----------------------------------------\n\nTITLE: Fetching API Data with createResource in Solid.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to fetch data from an API endpoint on the client-side using Solid.js's createResource primitive. It handles loading states with Suspense and error states with ErrorBoundary, displaying a list of posts once the data is loaded.\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/index.tsx\nimport { createResource, ErrorBoundary, Suspense, For } from \"solid-js\";\n\nexport default function Page() {\n\tconst [posts] = createResource(async () => {\n\t\tconst posts = await fetch(\"https://my-api.com/posts\");\n\t\treturn await posts.json();\n\t});\n\treturn (\n\t\t<ul>\n\t\t\t<ErrorBoundary fallback={<div>Something went wrong!</div>}>\n\t\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t\t<For each={posts()}>{(post) => <li>{post.title}</li>}</For>\n\t\t\t\t</Suspense>\n\t\t\t</ErrorBoundary>\n\t\t</ul>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using createMemo for Efficient Derived Values in Solid.js\nDESCRIPTION: Demonstrates how to use createMemo to create memoized values that only recalculate when dependencies change. This approach is more efficient than derived signals when the value is accessed multiple times.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createMemo } from \"solid-js\"\n\nfunction Counter() {\n\tconst [count, setCount] = createSignal(0)\n\n\tconst increment = () => {\n\t\tsetCount((prev) => prev + 1);\n\t};\n\n\tconst doubleCount = () => {\n\t\tconsole.log('doubleCount called')\n\t\treturn count() * 2\n\t}\n\n\tconst doubleCountMemo = createMemo(() => {\n\t\tconsole.log('doubleCountMemo called')\n\t\treturn count() * 2\n\t})\n\n\treturn (\n\t\t<>\n\t\t\t<div>Current count: {count()}</div>\n\t\t\t<div>Doubled count: {doubleCount()}</div>\n\t\t\t<div>Doubled count: {doubleCount()}</div>\n\t\t\t<div>Doubled count: {doubleCount()}</div>\n\t\t\t<div>Doubled count: {doubleCountMemo()}</div>\n\t\t\t<div>Doubled count: {doubleCountMemo()}</div>\n\t\t\t<div>Doubled count: {doubleCountMemo()}</div>\n\t\t\t<button onClick={increment}>Increment</button>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Events with Native Event Syntax in SolidJS\nDESCRIPTION: Demonstrates how to bind custom events or events that shouldn't be delegated using the on: prefix in SolidJS.\n\nLANGUAGE: tsx\nCODE:\n```\n<button on:Custom-Event={handleClick}>Click me</button>\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation with useNavigate Primitive\nDESCRIPTION: This snippet demonstrates programmatic navigation using the useNavigate primitive from Solid Router. It shows how to navigate to a route after a login event, with the replace option to modify browser history.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate } from \"@solidjs/router\";\n\nfunction LoginPage() {\n\tconst navigate = useNavigate();\n\n\treturn (\n\t\t<button\n\t\t\tonClick={() => {\n\t\t\t\t// Login logic\n\t\t\t\tnavigate(\"/dashboard\", { replace: true });\n\t\t\t}}\n\t\t>\n\t\t\tLogin\n\t\t</button>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Re-evaluations in Derived Signals\nDESCRIPTION: Shows how derived signals are re-evaluated each time they are accessed. This example logs to the console each time doubleCount is called, revealing potential performance issues with derived signals used multiple times.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal } from \"solid-js\"\n\nfunction Counter() {\n\tconst [count, setCount] = createSignal(0)\n\n\tconst increment = () => {\n\t\tsetCount(count() + 1)\n\t}\n\n\tconst doubleCount = () => count() * 2\n\tconst doubleCount = () => {\n\t\tconsole.log('doubleCount called')\n\t\treturn count() * 2\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div>Current count: {count()}</div>\n\t\t\t<div>Doubled count: {doubleCount()}</div>\n\t\t\t<div>Doubled count: {doubleCount()}</div>\n\t\t\t<div>Doubled count: {doubleCount()}</div>\n\t\t\t<button onClick={increment}>Increment</button>\n\t\t</>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Equality Options for Signals in SolidJS\nDESCRIPTION: Shows practical examples of using the equals option, including allowing in-place object modification, creating trigger signals, and defining custom equality based on string length.\n\nLANGUAGE: tsx\nCODE:\n```\n// use { equals: false } to allow modifying object in-place;\n// normally this wouldn't be seen as an update because the\n// object has the same identity before and after change\nconst [object, setObject] = createSignal({ count: 0 }, { equals: false })\nsetObject((current) => {\n\tcurrent.count += 1\n\tcurrent.updated = new Date()\n\treturn current\n})\n\n// use { equals: false } to create a signal that acts as a trigger without storing a value:\nconst [depend, rerun] = createSignal(undefined, { equals: false })\n// now calling depend() in a tracking scope\n// makes that scope rerun whenever rerun() gets called\n\n// define equality based on string length:\nconst [myString, setMyString] = createSignal(\"string\", {\n\tequals: (newVal, oldVal) => newVal.length === oldVal.length,\n})\n\nsetMyString(\"string\") // considered equal to the last value and won't cause updates\nsetMyString(\"stranger\") // considered different and will cause updates\n```\n\n----------------------------------------\n\nTITLE: Show Component with Fallback in Solid.js\nDESCRIPTION: Shows how to use the Show component with a fallback property to render alternative content when the condition is false. This pattern is useful for loading states or conditional displays.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Show } from \"solid-js\"\n\n<Show when={!data.loading} fallback={<div>Loading...</div>}>\n\t<h1>Hi, I am {data().name}.</h1>\n</Show>\n```\n\n----------------------------------------\n\nTITLE: Using HTML Forms with Actions and Redirects\nDESCRIPTION: Shows how to connect actions to HTML forms for progressive enhancement, handle form data, and implement redirects based on submission results.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { action, redirect } from \"@solidjs/router\";\n\nconst isAdmin = action(async (formData: FormData) => {\n  await new Promise((resolve, reject) => setTimeout(resolve, 1000));\n\n  const username = formData.get(\"username\");\n\n  if (username === \"admin\") throw redirect(\"/admin\");\n  return new Error(\"Invalid username\");\n});\n\nexport function MyComponent() {\n\n  return (\n    <form action={isAdmin} method=\"post\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" name=\"username\" />\n      <input type=\"submit\" value=\"submit\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form Input Model Directive in SolidJS\nDESCRIPTION: Example of a 'model' directive that creates two-way data binding for an input element. It sets up an effect to update the input value when the signal changes and adds an event listener to update the signal when the input value changes.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [name, setName] = createSignal(\"\")\n\nfunction model(el, value) {\n\tconst [field, setField] = value()\n\tcreateRenderEffect(() => (el.value = field()))\n\tel.addEventListener(\"input\", (e) => setField(e.target.value))\n};\n\n<input type=\"text\" use:model={[name, setName]} />\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Memos in Solid.js\nDESCRIPTION: Demonstrates how to create a memo using createMemo to derive a boolean value based on a signal. This example shows how memos automatically update when their dependencies change.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createMemo, createSignal } from \"solid-js\"\n\nconst [count, setCount] = createSignal(0)\n\nconst isEven = createMemo(() => count() % 2 === 0)\n\nconsole.log(isEven()) // true\n\nsetCount(3)\nconsole.log(isEven()) // false\n```\n\n----------------------------------------\n\nTITLE: Importing and Using createRoot Function in Solid.js\nDESCRIPTION: The createRoot function creates a non-tracked owner scope that doesn't auto-dispose. It's useful for nested reactive scopes that shouldn't be released when the parent re-evaluates. This function is typically embedded in render entry functions.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoot } from \"solid-js\"\n\nfunction createRoot<T>(fn: (dispose: () => void) => T): T\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Context in Solid.js\nDESCRIPTION: Example of creating a counter context in its own module to avoid issues with Hot-Module Replacement. The context includes the initial count value and store setter functions.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createContext } from \"solid-js\";\n\nexport const INITIAL_COUNT = 0;\n\nconst INITIAL_STORE_SETTER = {\n\tincrement: () => {},\n\tdecrement: () => {}\n};\n\nexport const CounterContext = createContext([\n\t{ count: INITIAL_COUNT },\n\tINITIAL_STORE_SETTER\n]);\n```\n\n----------------------------------------\n\nTITLE: Type Signature for useContext in TypeScript\nDESCRIPTION: Provides the TypeScript type definition for the useContext function, showing it accepts a Context generic type and returns that same type.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Context } from \"solid-js\"\n\nfunction useContext<T>(context: Context<T>): T\n\n```\n\n----------------------------------------\n\nTITLE: Using Getters with createStore in SolidJS\nDESCRIPTION: Shows how to use getters in store objects to calculate derived values. The example demonstrates creating a full name from firstName and lastName properties.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [state, setState] = createStore({\n\tuser: {\n\t\tfirstName: \"John\",\n\t\tlastName: \"Smith\",\n\t\tget fullName() {\n\t\t\treturn `${this.firstName} ${this.lastName}`;\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Appending Values to Arrays in Stores\nDESCRIPTION: Demonstrates two different ways to append new values to arrays in Solid.js stores - using the spread operator with the array length as an index for direct targeting.\n\nLANGUAGE: jsx\nCODE:\n```\nsetStore(\"users\", (otherUsers) => [\n\t...otherUsers,\n\t{\n\t\tid: 3,\n\t\tusername: \"michael584\",\n\t\tlocation: \"Nigeria\",\n\t\tloggedIn: false,\n\t},\n])\n\n// can become\n\nsetStore(\"users\", store.users.length, {\n\tid: 3,\n\tusername: \"michael584\",\n\tlocation: \"Nigeria\",\n\tloggedIn: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Optimizing Data Loading with solid-router's query and createAsync\nDESCRIPTION: Example of improved data fetching in SolidStart using solid-router's query function and preload capability to create a data cache. This approach reduces waterfalls by hoisting data fetching to the route level and enabling preloading.\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/users.tsx\nimport { For } from \"solid-js\";\nimport { createAsync, query } from \"@solidjs/router\";\n\ntype User = { name: string; email: string };\n\nconst getUsers = query(async () => {\n\tconst response = await fetch(\"https://example.com/users\");\n\treturn (await response.json()) as User[];\n}, \"users\");\n\nexport const route = {\n\tpreload: () => getUsers(),\n};\n\nexport default function Page() {\n\tconst users = createAsync(() => getUsers());\n\n\treturn <For each={users()}>{(user) => <li>{user.name}</li>}</For>;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// /routes/users.jsx\nimport { For } from \"solid-js\";\nimport { createAsync, query } from \"@solidjs/router\";\n\nconst getUsers = query(async () => {\n\tconst response = await fetch(\"https://example.com/users\");\n\treturn (await response.json());\n}, \"users\");\n\nexport const route = {\n\tpreload: () => getUsers(),\n};\n\nexport default function Page() {\n\tconst users = createAsync(() => getUsers());\n\n\treturn <For each={users()}>{(user) => <li>{user.name}</li>}</For>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBeforeLeave Hook with Form Navigation Confirmation in Solid.js\nDESCRIPTION: This example demonstrates how to use the useBeforeLeave hook to prevent accidental navigation when a form has unsaved changes. It includes preventing the default navigation, displaying a confirmation dialog, and conditionally allowing navigation to proceed based on user confirmation.\n\nLANGUAGE: js\nCODE:\n```\nuseBeforeLeave((e: BeforeLeaveEventArgs) => {\n\tif (form.isDirty && !e.defaultPrevented) {\n\t\t// preventDefault to block immediately and prompt user async\n\t\te.preventDefault();\n\t\tsetTimeout(() => {\n\t\t\tif (window.confirm(\"Discard unsaved changes - are you sure?\")) {\n\t\t\t\t// user wants to proceed anyway so retry with force=true\n\t\t\t\te.retry(true);\n\t\t\t}\n\t\t}, 100);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Context Hook in TypeScript\nDESCRIPTION: Shows how to create a wrapper function for useContext that includes error handling when the context is not found.\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useCounterContext() {\n\tconst context = useContext(CounterContext)\n\n\tif (!context) {\n\t\tthrow new Error(\"useCounterContext: cannot find a CounterContext\")\n\t}\n\n\treturn context\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Context for State Sharing in SolidJS\nDESCRIPTION: Shows how to create a context in SolidJS for sharing state between components, which helps avoid prop drilling in complex applications.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from \"solid-js\"\n\nconst TaskContext = createContext()\n```\n\n----------------------------------------\n\nTITLE: Extracting Raw Data with unwrap in Solid Stores\nDESCRIPTION: Shows how to use the unwrap utility to transform a reactive store into a standard JavaScript object for use with third-party libraries or when a non-reactive snapshot is needed.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createStore, unwrap } from \"solid-js/store\"\n\nconst [data, setData] = createStore({\n\tanimals: [\"cat\", \"dog\", \"bird\", \"gorilla\"],\n})\n\nconst rawData = unwrap(data)\n```\n\n----------------------------------------\n\nTITLE: Filtering Values in Solid Stores\nDESCRIPTION: Shows how to update only elements that satisfy a specific condition by using a filter function that receives the old value and index as arguments.\n\nLANGUAGE: jsx\nCODE:\n```\nsetStore(\"users\", (user) => user.username.startsWith(\"t\"), \"loggedIn\", false)\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Signal Dependencies in Solid.js Effects\nDESCRIPTION: Demonstrates how an effect can track multiple signals (count and message) and run whenever any of them change, outputting the latest values of both.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createEffect } from \"solid-js\";\n\nconst [count, setCount] = createSignal(0);\nconst [message, setMessage] = createSignal(\"Hello\");\n\ncreateEffect(() => {\n\tconsole.log(count(), message());\n});\n\nsetCount(1); // Output: 1, \"Hello\"\nsetMessage(\"World\"); // Output: 1, \"World\"\n```\n\n----------------------------------------\n\nTITLE: Using Callback Refs in Solid\nDESCRIPTION: Demonstrates the callback form of the ref attribute, which provides access to the element before it's added to the DOM. The callback function receives the element as a parameter when it's created.\n\nLANGUAGE: jsx\nCODE:\n```\n<p ref={(el) => {\n\tmyElement = el // el is created but not yet added to the DOM\n\t}}>\n\tMy Element\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using onCleanup for Resource Management in Solid.js\nDESCRIPTION: Demonstrates using onCleanup to prevent memory leaks by cleaning up resources when a component unmounts. In this example, it clears an interval timer.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { onCleanup } from \"solid-js\";\n\nfunction App() {\n\tconst [count, setCount] = createSignal(0);\n\n\tconst timer = setInterval(() => {\n\t\tsetCount((prev) => prev + 1);\n\t}, 1000);\n\n\tonCleanup(() => {\n\t\tclearInterval(timer);\n\t});\n\n\treturn <div>Count: {count()}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Implementation of the Switch Component\nDESCRIPTION: A basic implementation of the Switch component that iterates through its children and returns the first Match component with a truthy 'when' prop. If no matches are found, it returns the fallback element.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Switch(props) {\n\tlet children = props.children\n\n\tif (!Array.isArray(children)) children = [children]\n\n\tfor (let i = 0; i < children.length; i++) {\n\t\tconst child = children[i]\n\t\tif (child.props.when) return child\n\t}\n\n\treturn props.fallback\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Store Values with createEffect\nDESCRIPTION: Shows how to keep related store values in sync by updating userCount whenever the users array changes using createEffect for reactive dependencies.\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n\tconst [store, setStore] = createStore({\n\t\tuserCount: 3,\n\t\tusers: [ ... ],\n\t})\n\n\tconst addUser = () => { ... }\n\n\tcreateEffect(() => {\n\t\tconsole.log(store.users.at(-1))\n\t\tsetStore(\"userCount\", store.users.length)\n\t})\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hello, {store.users[0].username}</h1>\n\t\t\t<p>User count: {store.userCount}</p>\n      <button onClick={addUser}>Add user</button>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Component Rendering Benchmarks with Vitest in Solid\nDESCRIPTION: A benchmark test that compares the rendering performance of two list rendering components (For and List) using Vitest's experimental bench function. The test renders 1000 items with each component and measures performance metrics.\n\nLANGUAGE: jsx\nCODE:\n```\ndescribe('list rendering', () => {\n  const ITEMS = 1000\n  const renderedFor = new Set()\n  const listFor = Array.from({ length: ITEMS }, (_, i) => i)\n  bench('For', () => new Promise((resolve) => {\n    const ItemFor = (props) => {\n      onMount(() => {\n        renderedFor.add(props.number)\n        if (renderedFor.size === ITEMS) { resolve() }\n      })\n      return <span>{props.number}</span>\n    }\n    render(() => <For each={listFor}>\n      {(item) => <ItemFor number={item} />}\n    </For>)\n  }))\n\n  const renderedList = new Set()\n  const listList = Array.from({ length: ITEMS }, (_, i) => i)\n  bench('List', () => new Promise((resolve) => {\n    const ItemList = (props) => {\n      onMount(() => {\n        renderedList.add(props.number)\n        if (renderedList.size === ITEMS) { resolve() }\n      })\n      return <span>{props.number}</span>\n    }\n    render(() => <List each={listList}>\n      {(item) => <ItemList number={item} />}\n    </List>)\n  }))\n})\n```\n\n----------------------------------------\n\nTITLE: Choosing a SolidStart Template via CLI Prompt\nDESCRIPTION: Terminal interface showing the template selection prompt when initializing a SolidStart application, with options like bare, hackernews, with-auth, etc.\n\nLANGUAGE: bash\nCODE:\n```\n? Which template do you want to use? › - Use arrow-keys. Return to submit.\n❯   bare\n    hackernews\n    with-auth\n    with-mdx\n    with-tailwindcss\n    with-vitest\n```\n\n----------------------------------------\n\nTITLE: Using ErrorBoundary with Fallback Function in Solid.js\nDESCRIPTION: Example of implementing the ErrorBoundary component to catch errors from an error-prone component and display a custom fallback UI with an error message and reset button.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ErrorBoundary } from \"solid-js\";\nimport { ErrorProne } from \"./components\";\n\nfunction Example() {\n\treturn (\n\t\t<ErrorBoundary\n\t\t\tfallback={(error, reset) => (\n\t\t\t\t<div>\n\t\t\t\t\t<p>{error.message}</p>\n\t\t\t\t\t<button onClick={reset}>Try Again</button>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t>\n\t\t\t<ErrorProne />\n\t\t</ErrorBoundary>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Action Results with useSubmission Hook\nDESCRIPTION: Demonstrates how to access and display the reactive results of an action using the useSubmission hook, showing how to handle multiple submissions.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { action, useAction, useSubmission } from \"@solidjs/router\";\n\nconst echo = action(async (message: string) => {\n  await new Promise((resolve, reject) => setTimeout(resolve, 1000));\n  return message;\n});\n\nexport function MyComponent() {\n  const myEcho = useAction(echo);\n  const echoing = useSubmission(echo);\n\n  myEcho(\"Hello from solid!\");\n\n  setTimeout(() => myEcho(\"This is a second submission!\"), 1500);\n\n  return <p>{echoing.result}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Directives in SolidJS\nDESCRIPTION: Demonstrates how to test directives using the renderDirective function from @solidjs/testing-library, which provides utilities to manipulate the directive's arguments and target element.\n\nLANGUAGE: ts\nCODE:\n```\nconst renderResult = renderDirective(directive, {\n  initialValue, // value initially added to the argument signal\n  targetElement, // opt. node name or element used as target for the directive\n  ...renderOptions, // see render options\n})\nconst {\n  arg, // getter for the directive's argument\n  setArg, // setter for the directive's argument\n  ...renderResults, // see render results\n} = renderResult\n```\n\n----------------------------------------\n\nTITLE: Basic Show Component Usage in Solid.js\nDESCRIPTION: A basic example of using the Show component in Solid.js for conditional rendering. It displays \"My Content\" when state.count is greater than 0, otherwise it shows the \"Loading...\" fallback.\n\nLANGUAGE: tsx\nCODE:\n```\n<Show when={state.count > 0} fallback={<div>Loading...</div>}>\n\t<div>My Content</div>\n</Show>\n```\n\n----------------------------------------\n\nTITLE: Multiple Named Imports in Solid.js\nDESCRIPTION: Demonstrates importing multiple named components from the same file. This allows for using several components from a single module in one import statement.\n\nLANGUAGE: tsx\nCODE:\n```\n// App.ts\nimport { MyComponent, MyOtherComponent } from \"./MyComponent\";\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<MyComponent />\n\t\t\t<MyOtherComponent />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic UI Updates with mutate in Solid.js\nDESCRIPTION: Demonstrates using the mutate method from createResource for optimistic UI updates. This allows immediate feedback to users while background server operations continue, ideal for task lists and interactive applications.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { For, createResource } from \"solid-js\"\n\nfunction TodoList() {\n  const [tasks, { mutate }] = createResource(fetchTasksFromServer);\n\n  return (\n    <>\n      <ul>\n        <For each={tasks()}>\n          {(task) => (\n            <li>{task.name}</li>\n          )}\n        </For>\n      </ul>\n      <button\n        onClick={() => {\n          mutate((todos) => [...todos, \"do new task\"]); // add todo for user\n          // make a call to send to database\n        }}\n      >\n        Add Task\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Only Component with DOM Access in SolidJS\nDESCRIPTION: This example shows how to create a component that directly accesses the DOM's window.document object, which needs to be client-only because the DOM is not available during server-side rendering.\n\nLANGUAGE: tsx\nCODE:\n```\nconst location = window.document.location;\n\nexport default function ClientOnlyComponent() {\n\treturn <div>{location.href}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic route nesting examples in Solid Router\nDESCRIPTION: Demonstrates two equivalent ways to define nested routes in Solid Router, showing both a flat path definition and a nested structure.\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/users/:id\" component={User} />\n\n// is equivalent to\n\n<Route path=\"/users\">\n\t<Route path=\"/:id\" component={User} />\n</Route>\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Signals in Solid.js\nDESCRIPTION: Demonstrates how to create derived state using a function that depends on another signal. This approach simplifies state management by calculating values on-the-fly rather than storing duplicate state.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal } from \"solid-js\"\n\nfunction Counter() {\n\tconst [count, setCount] = createSignal(0);\n\tconst [doubleCount, setDoubleCount] = createSignal(0);\n\n\tconst increment = () => {\n\t\tsetCount((prev) => prev + 1);\n\t};\n\n\tcreateEffect(() => {\n\t\tsetDoubleCount(count() * 2); // Update doubleCount whenever count changes\n\t});\n\n\tconst doubleCount = () => count() * 2\n\n\treturn (\n\t\t<>\n\t\t\t<div>Current count: {count()}</div>\n\t\t\t<div>Doubled count: {doubleCount()}</div>\n\t\t\t<button onClick={increment}>Increment</button>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Store in SolidJS\nDESCRIPTION: A basic example of creating a store in SolidJS using createStore to manage task-related state. The store contains an array of tasks and a count of the number of tasks.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createStore } from \"solid-js/store\"\n\nconst App = () => {\n\tconst [state, setState] = createStore({\n\t\ttasks: [],\n\t\tnumberOfTasks: 0,\n\t})\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Configuring MatchFilters with useMatch in TypeScript\nDESCRIPTION: Shows how to define MatchFilters for more granular path matching. Filters can include arrays of strings, regular expressions, or custom functions that evaluate parts of the route.\n\nLANGUAGE: typescript\nCODE:\n```\nconst filters: MatchFilters = {\n  parent: [\"mom\", \"dad\"]\n  id: /^\\d+$/,\n  withHtmlExtension: (v: string) => v.length > 5 && v.endsWith(\".html\")\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Paths with Route Component in JSX\nDESCRIPTION: This snippet demonstrates how to define a Route component with multiple paths using an array. This approach allows the component to remain mounted and not re-render when switching between matching paths like /login and /register.\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path={[\"/login\", \"/register\"]} component={Login} />\n```\n\n----------------------------------------\n\nTITLE: Basic Form Submission Handling with useSubmissions in SolidJS\nDESCRIPTION: Example demonstrating how to use the useSubmissions helper to retain a list of all submission results while providing feedback on the pending state of in-flight submissions.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSubmissions } from \"@solidjs/router\";\n\nfunction Component() {\n  const submissions = useSubmissions(postNameAction);\n\n    return (\n      <form method=\"post\" action={postNameAction}>\n        <ul>\n          <For each={Array.from(submissions.entries())}>\n            {([attemptIndex, data]) => (\n                <Show when={data.result}>\n                    { result => (\n                        <li>\n                            Backend {attemptIndex}: {result.name}\n                        </li>\n                    )}\n                </Show>\n              </>\n            )}\n          </For>\n        </ul>\n        <input name=\"name\" type=\"text\" />\n        <button type=\"submit\">{submissions.pending ? \"sending\" : \"send\"}</button>\n      </form>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Signal Type Definitions in Solid\nDESCRIPTION: TypeScript type definitions for Solid's signal primitives showing the underlying structure of Signal, Accessor, and Setter types.\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Signal, Accessor, Setter } from \"solid-js\";\ntype Signal<T> = [get: Accessor<T>, set: Setter<T>];\n```\n\n----------------------------------------\n\nTITLE: Reactive Store Access with createEffect\nDESCRIPTION: Shows how to properly establish reactive dependencies by accessing store values within a tracking scope like createEffect, ensuring updates when values change.\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n\tconst [store, setStore] = createStore({\n\t\tuserCount: 3,\n\t\tusers: [ ... ],\n\t})\n\n\tconst addUser = () => { ... }\n\n\tcreateEffect(() => {\n\t\tconsole.log(store.users.at(-1))\n\t})\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hello, {store.users[0].username}</h1>\n\t\t\t<p>User count: {store.userCount}</p>\n      <button onClick={addUser}>Add user</button>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Route Definition with Solid Router\nDESCRIPTION: This snippet demonstrates the simplest implementation of routing in a Solid application. It imports the Router and Route components from @solidjs/router and sets up a single route for the home page at the root path.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nimport Home from \"./routes/Home\";\n\nrender(\n    () => (\n        <Router>\n            <Route path=\"/\" component={Home} />\n        </Router>\n    ),\n    document.getElementById(\"app\")\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Data Fetching with Query and CreateAsync in SolidStart\nDESCRIPTION: Demonstrates a basic implementation of data fetching in SolidStart using the query and createAsync primitives from Solid Router. The example fetches posts from an API and renders a list of post titles.\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/index.tsx\nimport { For } from \"solid-js\";\nimport { query, createAsync } from \"@solidjs/router\";\n\nconst getPosts = query(async () => {\n\tconst posts = await fetch(\"https://my-api.com/posts\");\n\treturn await posts.json();\n}, \"posts\");\n\nexport default function Page() {\n\tconst posts = createAsync(() => getPosts());\n\treturn (\n\t\t<ul>\n\t\t\t<For each={posts()}>{(post) => <li>{post.title}</li>}</For>\n\t\t</ul>\n\t);\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// src/routes/index.jsx\nimport { For } from \"solid-js\";\nimport { query, createAsync } from \"@solidjs/router\";\n\nconst getPosts = query(async () => {\n\tconst posts = await fetch(\"https://my-api.com/posts\");\n\treturn await posts.json();\n}, \"posts\");\n\nexport default function Page() {\n\tconst posts = createAsync(() => getPosts());\n\treturn (\n\t\t<ul>\n\t\t\t<For each={posts()}>{(post) => <li>{post.title}</li>}</For>\n\t\t</ul>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Fullscreen Directive in SolidJS\nDESCRIPTION: Shows a practical example of testing a directive that handles the Fullscreen API using the renderDirective function and spying on the fullscreen method.\n\nLANGUAGE: ts\nCODE:\n```\nimport { test, expect, vi } from \"vitest\"\nimport { renderDirective } from \"@solidjs/testing-library\"\nimport { createFullScreen } from \"./fullscreen\"\n\ntest(\"toggles fullscreen\", () => {\n  const targetElement = document.createElement(\"div\")\n  const fs = vi.spyOn(targetElement, \"fullscreen\")\n  const [setArg, container] = renderDirective(createFullScreen, false)\n  setArg(true)\n  expect(fs).toHaveBeenCalled()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using createComputed in Solid.js\nDESCRIPTION: Shows the function signature of createComputed, which creates a computation that automatically tracks dependencies and reruns when they change. The function receives a tracking function and optional initial value.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createComputed } from \"solid-js\"\n\nfunction createComputed<T>(fn: (v: T) => T, value?: T): void\n\n```\n\n----------------------------------------\n\nTITLE: Context Interface and Type Definition in Solid.js\nDESCRIPTION: Type signature for the createContext function and Context interface in Solid.js. Shows the structure of the Context object and the function signature with optional default value.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Context<T> {\n\tid: symbol\n\tProvider: (props: { value: T; children: any }) => any\n\tdefaultValue: T\n}\n\nfunction createContext<T>(defaultValue?: T): Context<T | undefined>\n```\n\n----------------------------------------\n\nTITLE: Nested Show Components in Solid.js\nDESCRIPTION: Illustrates how to nest Show components to handle multiple conditions. This approach allows for hierarchical conditional rendering but can become complex with many conditions.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Show } from \"solid-js\"\n\n<Show when={data.loading}>\n  <div>Loading...</div>\n  <Show when={data.error}>\n    <div>Error: {data.error}</div>\n  </Show>\n</Show>\n```\n\n----------------------------------------\n\nTITLE: Parameter Validation with MatchFilters in SolidJS Router\nDESCRIPTION: Demonstrates how to validate dynamic route parameters using the matchFilters prop. The example shows validation for enum values, numeric patterns, and custom validation functions.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\nimport type { SegmentValidators } from \"./types\";\n\nconst User = lazy(() => import(\"./pages/User\"));\n\nconst filters: MatchFilters = {\n\tparent: [\"mom\", \"dad\"], // allow enum values\n\tid: /^\\d+$/, // only allow numbers\n\twithHtmlExtension: (v: string) => v.length > 5 && v.endsWith(\".html\"), // we want an `*.html` extension\n};\n\nrender(\n\t() => (\n\t\t<Router>\n\t\t\t<Route\n\t\t\t\tpath=\"/users/:parent/:id/:withHtmlExtension\"\n\t\t\t\tcomponent={User}\n\t\t\t\tmatchFilters={filters}\n\t\t\t/>\n\t\t</Router>\n\t),\n\tdocument.getElementById(\"app\")\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Ref Usage in Solid Components\nDESCRIPTION: Shows how to declare a variable and use it as a ref attribute to access a DOM element directly inside the JSX template. The ref assignment happens at creation time before the element is added to the DOM.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n\tlet myElement;\n\n\treturn (\n\t\t<div>\n\t\t\t<p ref={myElement}>My Element</p>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Value Assignment in Solid Stores\nDESCRIPTION: Demonstrates how to use a function to compute a new value based on the existing value, allowing for dynamic transformations like toggling a boolean.\n\nLANGUAGE: jsx\nCODE:\n```\nsetStore(\"users\", 3, \"loggedIn\" , (loggedIn) => !loggedIn)\n```\n\n----------------------------------------\n\nTITLE: Accessing Store Values in Components\nDESCRIPTION: Shows how to access store values in a Solid.js component's JSX template, comparing it with signal access patterns. Store values can be accessed directly while signals require function calls.\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n\tconst [mySignal, setMySignal] = createSignal(\"This is a signal.\")\n\tconst [store, setStore] = createStore({\n\t\tuserCount: 3,\n\t\tusers: [\n\t\t\t{\n\t\t\t\tid: 0,\n\t\t\t\tusername: \"felix909\",\n\t\t\t\tlocation: \"England\",\n\t\t\t\tloggedIn: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tusername: \"tracy634\",\n\t\t\t\tlocation: \"Canada\",\n\t\t\t\tloggedIn: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tusername: \"johny123\",\n\t\t\t\tlocation: \"India\",\n\t\t\t\tloggedIn: true,\n\t\t\t},\n\t\t],\n\t})\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hello, {store.users[0].username}</h1> {/* Accessing a store value */}\n\t\t\t<span>{mySignal()}</span> {/* Accessing a signal */}\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to Solid Router\nDESCRIPTION: Configuring routes using the Route component to specify paths and components to render when navigating to those paths.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nimport Home from \"./pages/Home\";\nimport Users from \"./pages/Users\";\n\nconst App = (props) => (\n\t<>\n\t\t<h1>Site Title</h1>\n\t\t{props.children}\n\t</>\n);\n\nrender(\n\t() => (\n\t\t<Router root={App}>\n\t\t\t<Route path=\"/\" component={Home} />\n\t\t\t<Route path=\"/users\" component={Users} />\n\t\t</Router>\n\t),\n\tdocument.getElementById(\"root\")\n);\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Expressions in JSX Components\nDESCRIPTION: A component that demonstrates how to use dynamic expressions with curly braces to render JavaScript variables within JSX. This example shows data from an object being displayed in a paragraph element.\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = () => {\n\tconst animal = { breed: \"cat\", name: \"Midnight\" }\n\n\treturn (\n\t\t<p>\n\t\t\tI have a {animal.breed} named {animal.name}!\n\t\t</p>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Access with Optional Chaining in Solid.js\nDESCRIPTION: Basic approach for handling asynchronous data using optional chaining. The component renders immediately with empty content until the resource resolves.\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponentWithOptionalChaining = () => {\n\tconst [profile] = createResource(async () => {\n\t\t/* fetcher code here */\n\t})\n\treturn (\n\t\t<>\n\t\t\t<div>{profile()?.name}</div>\n\t\t\t<div>{profile()?.email}</div>\n\t\t</>\n\t)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Parameters with useParams in Solid.js\nDESCRIPTION: This snippet demonstrates how to use the useParams hook to access route path parameters. It creates a reactive object containing route parameters and shows how to access a specific parameter value based on the route definition.\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = useParams();\n\n// Route path: /user/:id => /user/123\nconsole.log(params.id); // 123\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic JSX Element in SolidJS\nDESCRIPTION: A simple example showing how to create a JSX element in Solid. This demonstrates the basic syntax for creating an HTML heading element using JSX.\n\nLANGUAGE: jsx\nCODE:\n```\nconst element = <h1>I'm JSX!!</h1>\n```\n\n----------------------------------------\n\nTITLE: Basic Dynamic Route Setup in SolidJS Router\nDESCRIPTION: Demonstrates how to set up basic routes in SolidJS with dynamic parameters. The example shows route configuration for static paths ('/users', '/') and a dynamic path ('/users/:id') where ':id' can be any string value.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nconst Users = lazy(() => import(\"./pages/Users\"));\nconst User = lazy(() => import(\"./pages/User\"));\nconst Home = lazy(() => import(\"./pages/Home\"));\n\nrender(\n\t() => (\n\t\t<Router>\n\t\t\t<Route path=\"/users\" component={Users} />\n\t\t\t<Route path=\"/users/:id\" component={User} />\n\t\t\t<Route path=\"/\" component={Home} />\n\t\t</Router>\n\t),\n\tdocument.getElementById(\"app\")\n);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Context Provider\nDESCRIPTION: Demonstrates how to use a custom Provider component to wrap parts of the application, making context implementation cleaner and more maintainable.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CounterProvider } from \"./counterProvider\";\n\nexport function App() {\n\treturn (\n\t\t<CounterProvider count={1}>\n\t\t\t<h1>Welcome to Counter</h1>\n\t\t\t<NestedComponents />\n\t\t</CounterProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Files in Solid.js Components\nDESCRIPTION: This snippet shows how to import CSS files into Solid.js components. Once imported, the CSS classes are scoped to that component and its children, providing a structured approach to styling.\n\nLANGUAGE: jsx\nCODE:\n```\nimport \"./Card.css\";\n\nfunction Card() {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigate Component with Dynamic Path Function in Solid Router\nDESCRIPTION: This snippet demonstrates how to use the Navigate component in Solid Router to perform immediate navigation. It shows both a function approach for dynamic path generation and a route definition that uses the Navigate component to redirect users.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction getPath({ navigate, location }) {\n\t// navigate is the result of calling useNavigate(); location is the result of calling useLocation().\n\t// You can use those to dynamically determine a path to navigate to\n\treturn \"/some-path\";\n}\n\n// Navigating to /redirect will redirect you to the result of getPath\n<Route path=\"/redirect\" component={() => <Navigate href={getPath} />} />;\n```\n\n----------------------------------------\n\nTITLE: Modifying Multiple Object Properties with Path Syntax in Solid Stores\nDESCRIPTION: Shows how to set the loggedIn property for multiple specific object properties in a single efficient operation using path syntax with an array of property names.\n\nLANGUAGE: jsx\nCODE:\n```\nsetStore(\"users\", [\"me\", \"you\"], \"loggedIn\", false)\n// equivalent to (but more efficient than):\nsetStore(\"users\", [\"me\"], \"loggedIn\", false)\nsetStore(\"users\", [\"you\"], \"loggedIn\", false)\n```\n\n----------------------------------------\n\nTITLE: Sequential Updates to Mutable Store in Solid.js\nDESCRIPTION: Example showing sequential updates to multiple fields in a mutable store. This approach triggers reactive updates for each individual change, which may be inefficient.\n\nLANGUAGE: tsx\nCODE:\n```\nstate.user.firstName = \"Jane\";\nstate.user.lastName = \"Doe\";\n```\n\n----------------------------------------\n\nTITLE: Cleanup in createEffect in SolidJS\nDESCRIPTION: Shows how to use onCleanup inside an effect to clean up resources between effect executions, essential for event listeners and subscriptions.\n\nLANGUAGE: tsx\nCODE:\n```\n// listen to event dynamically given by eventName signal\ncreateEffect(() => {\n\tconst event = eventName()\n\tconst callback = (e) => console.log(e)\n\tref.addEventListener(event, callback)\n\tonCleanup(() => ref.removeEventListener(event, callback))\n})\n```\n\n----------------------------------------\n\nTITLE: Switch and Match with Fallback in Solid.js\nDESCRIPTION: Shows how to use Switch and Match components with a fallback property to handle the case when none of the conditions are met. This provides a default rendering option when all other conditions fail.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch, Match } from \"solid-js\"\n\n<Switch fallback={<p>Fallback content</p>}>\n\t<Match when={condition1}>\n\t\t<p>Outcome 1</p>\n\t</Match>\n\t<Match when={condition2}>\n\t\t<p>Outcome 2</p>\n\t</Match>\n</Switch>\n```\n\n----------------------------------------\n\nTITLE: Using produce for Mutable Updates in Solid Stores\nDESCRIPTION: Shows how to use the produce utility to make multiple changes to a store in a single operation by treating the data as if it were mutable.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { produce } from \"solid-js/store\"\n\n// without produce\nsetStore(\"users\", 0, \"username\", \"newUsername\")\nsetStore(\"users\", 0, \"location\", \"newLocation\")\n\n// with produce\nsetStore(\n\t\"users\",\n\t0,\n\tproduce((user) => {\n\t\tuser.username = \"newUsername\"\n\t\tuser.location = \"newLocation\"\n\t})\n)\n```\n\n----------------------------------------\n\nTITLE: Component Styling with Props in Solid.js\nDESCRIPTION: This snippet shows how to style components using props. The ThemedButton component applies different classes and text based on the theme prop passed to it, allowing for flexible styling based on component usage.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ThemedButton(props) {\n\treturn (\n\t\t<button class={props.theme}>\n\t\t\t{props.theme === \"light\" ? \"Light Button\" : \"Dark Button\"}\n\t\t</button>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed Signal in Solid\nDESCRIPTION: Example of creating a signal with explicit type annotation in Solid using TypeScript generics.\n\nLANGUAGE: typescript\nCODE:\n```\nconst [count, setCount] = createSignal<number>();\n```\n\n----------------------------------------\n\nTITLE: Accessing State Values from a SolidJS Store\nDESCRIPTION: Demonstrates how to access values from a SolidJS store. Values are accessed directly through the first value returned by createStore, in this case the state object.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createStore } from \"solid-js/store\"\n\nconst App = () => {\n\tconst [state, setState] = createStore({\n\t\ttasks: [],\n\t\tnumberOfTasks: 0,\n\t})\n\treturn (\n\t\t<>\n\t\t\t<h1>My Task List for Today</h1>\n\t\t\t<span>You have {state.numberOfTasks} task(s) for today!</span>\n\t\t</>\n\t)\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Configuration with SolidStart\nDESCRIPTION: Example of configuring Vite options including plugins in a SolidStart application using the defineConfig helper.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({\n\tvite: {\n\t\t// vite options\n\t\tplugins: [],\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using Actions with FormData in SolidJS Router\nDESCRIPTION: Shows how to handle form data with actions when not using the 'with' method. The example demonstrates accessing form values from the FormData object passed to the action.\n\nLANGUAGE: jsx\nCODE:\n```\nconst deleteTodo = action(async (formData: FormData) => {\n  const id = Number(formData.get(\"id\"))\n  await api.deleteTodo(id)\n})\n\n<form action={deleteTodo} method=\"post\">\n  <input type=\"hidden\" name=\"id\" value={todo.id} />\n  <button type=\"submit\">Delete</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Function-Level 'use server' Directive with Example Call\nDESCRIPTION: Demonstrates using the 'use server' directive at the function level, making only that specific function run on the server, while still being callable from client code.\n\nLANGUAGE: tsx\nCODE:\n```\nconst logHello = async (message: string) => {\n\t\"use server\";\n\tconsole.log(message);\n};\n\nlogHello(\"Hello\");\n```\n\n----------------------------------------\n\nTITLE: Using Case-Insensitive Delegated Events in SolidJS\nDESCRIPTION: Shows that delegated events in SolidJS are not case sensitive and can be written using either camelCase or lowercase.\n\nLANGUAGE: tsx\nCODE:\n```\n<button onclick={handleClick}>Click me</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of For Component with Static Array\nDESCRIPTION: A simple example showing how to use the For component to render a list of items with a loading fallback. It iterates through state.list and renders each item in a div.\n\nLANGUAGE: jsx\nCODE:\n```\n<For each={state.list} fallback={<div>Loading...</div>}>\n\t{(item) => <div>{item}</div>}\n</For>\n```\n\n----------------------------------------\n\nTITLE: Wildcard Routes in SolidJS Router\nDESCRIPTION: Demonstrates how to use wildcard routes with an asterisk to match any end of the path. The example shows both unnamed and named wildcard patterns.\n\nLANGUAGE: jsx\nCODE:\n```\n// Matches any path that begins with foo, including foo/, foo/a/, foo/a/b/c\n<Route path=\"foo/*\" component={Foo} />\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in a Solid Component\nDESCRIPTION: Shows how to import and use CSS styles in a Solid component. The example imports the Card.css file and applies the styles to a card component with title and text properties.\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./Card.css\";\n\nconst Card = (props) => {\n  return (\n    <div class=\"card\">\n      <h1>{props.title}</h1>\n      <p>{props.text}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Meta Tags in SolidJS Client Applications\nDESCRIPTION: This snippet demonstrates how to use the @solidjs/meta package to add dynamic meta tags to a SolidJS application. It shows importing the necessary components (MetaProvider, Title, Link, Meta), then wrapping the application with MetaProvider and declaring meta tags within the component tree.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MetaProvider, Title, Link, Meta } from \"@solidjs/meta\";\n\nconst App = () => (\n\t<MetaProvider>\n\t\t<div class=\"Home\">\n\t\t\t<Title>Title of page</Title>\n\t\t\t<Link rel=\"canonical\" href=\"http://solidjs.com/\" />\n\t\t\t<Meta name=\"example\" content=\"whatever\" />\n\t\t\t// ...\n\t\t</div>\n\t</MetaProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Reactive Dependencies Example in Solid.js\nDESCRIPTION: Demonstrates how to set up reactive dependencies using signals and a memo in Solid.js, with an effect to monitor when the memo is recomputed.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSignal, createMemo, createEffect } from \"solid-js\"\nconst [up1, setUp1] = createSignal(1)\nconst [up2, setUp2] = createSignal(2)\nconst [up3, setUp3] = createSignal(3)\nconst down = createMemo(() => up1() + up2() + up3())\n// For illustration, monitor when `down` gets recomputed:\ncreateEffect(() => console.log(down())) // outputs 6\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Layout Component in Solid.js\nDESCRIPTION: Demonstrates how to create a layout component that can be used for specific route groups. The PageWrapper component includes a heading and a navigation link back to the home page.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction PageWrapper(props) {\n\treturn (\n\t\t<div>\n\t\t\t<h1> We love our users! </h1>\n\t\t\t{props.children}\n\t\t\t<A href=\"/\">Back Home</A>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Basic Actions with Forms in SolidJS Router\nDESCRIPTION: Demonstrates how to create an action for data mutation and use it with HTML forms. Shows the basic syntax for importing action components, defining an action function, and connecting it to form elements.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { action, revalidate, redirect } from \"@solidjs/router\"\n\n// anywhere\nconst myAction = action(async (data) => {\n  await doMutation(data);\n  throw redirect(\"/\", { revalidate: getUser.keyFor(data.id) }); // throw a response to do a redirect\n});\n\n// in component\n<form action={myAction} method=\"post\" />\n\n//or\n<button type=\"submit\" formaction={myAction}></button>\n```\n\n----------------------------------------\n\nTITLE: Shallow Merging Objects in Solid Stores\nDESCRIPTION: Demonstrates how Solid's store setters automatically perform shallow merges when updating objects, eliminating the need to manually spread existing properties.\n\nLANGUAGE: jsx\nCODE:\n```\nsetStore(\"users\", 0, {\n\tid: 109,\n})\n\n// is equivalent to\n\nsetStore(\"users\", 0, (user) => ({\n\t...user,\n\tid: 109,\n}))\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Search Parameters in Solid Router\nDESCRIPTION: This example shows how to update multiple search parameters simultaneously using the setSearchParams function. It demonstrates setting both a username and page parameter in a single operation.\n\nLANGUAGE: jsx\nCODE:\n```\nsetSearchParams({\n\tusername: \"john\",\n\tpage: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Using mapArray to Create Reactive Mapped Objects in SolidJS\nDESCRIPTION: Example of using mapArray to create reactive mapped objects from a source array. The mapping function creates signals for each property that need to be reactive, demonstrating efficient caching behavior.\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapped = mapArray(source, (model) => {\n\tconst [name, setName] = createSignal(model.name)\n\tconst [description, setDescription] = createSignal(model.description)\n\n\treturn {\n\t\tid: model.id,\n\t\tget name() {\n\t\t\treturn name()\n\t\t},\n\t\tget description() {\n\t\t\treturn description()\n\t\t},\n\t\tsetName,\n\t\tsetDescription,\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Type Error with Component Props\nDESCRIPTION: Example showing a type error when passing a potentially undefined value to a component that requires a non-nullable type.\n\nLANGUAGE: tsx\nCODE:\n```\nreturn <UserPanel user={user()} />;\n//                        ^ Type 'undefined' is not assignable to type 'User'.\n```\n\n----------------------------------------\n\nTITLE: Non-Reactive vs Reactive Store Updates in SolidJS\nDESCRIPTION: Shows the difference between non-reactive and reactive store updates in SolidJS. Using createEffect creates a tracking scope that makes the update reactive.\n\nLANGUAGE: jsx\nCODE:\n```\n// not reactive\nsetState(\"numberOfTasks\", state.tasks.length)\n\n// reactive\ncreateEffect(() => {\n\tsetState(\"numberOfTasks\", state.tasks.length)\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Equality Check for Signals in SolidJS\nDESCRIPTION: Demonstrates setting a custom equality function with the equals option, which determines when dependents should be notified of changes based on comparing previous and next values.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [count, setCount] = createSignal(0, {\n\tequals: (prev, next) => prev === next,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Refs with Components in Solid.js\nDESCRIPTION: Shows how to use refs with Solid.js components. The ref needs to be attached to a DOM element within the component by passing it through props.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComp(props) {\n\treturn <div ref={props.ref} />\n}\n\nfunction App() {\n\tlet myDiv\n\tonMount(() => console.log(myDiv.clientWidth))\n\treturn <MyComp ref={myDiv} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Variants in Macaron Styled Components\nDESCRIPTION: Example demonstrating how to add variant styles to a button component, allowing different background colors to be selected via props.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from \"@macaron-css/solid\";\n\nconst Button = styled(\"button\", {\n\tbase: {\n\t\tbackgroundColor: \"red\",\n\t\tborderRadius: \"10px\",\n\t},\n\tvariants: {\n\t\tcolor: {\n\t\t\tviolet: {\n\t\t\t\tbackgroundColor: \"violet\",\n\t\t\t},\n\t\t\tgray: {\n\t\t\t\tbackgroundColor: \"gray\",\n\t\t\t},\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic HTTP Methods for API Routes in SolidStart\nDESCRIPTION: Shows how to export functions named after HTTP methods (GET, POST, PATCH, DELETE) to handle corresponding API requests in a SolidStart route file.\n\nLANGUAGE: tsx\nCODE:\n```\nexport function GET() {\n  // ...\n}\n\nexport function POST() {\n  // ...\n}\n\nexport function PATCH() {\n  // ...\n}\n\nexport function DELETE() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Single CSS Module Style in Solid Components\nDESCRIPTION: Demonstrates how to apply a single CSS module style to a component. This simplifies the syntax when only one style class is needed from the module.\n\nLANGUAGE: jsx\nCODE:\n```\n// component.jsx\nimport styles from \"styles.module.css\";\n\nfunction Component() {\n\treturn (\n\t\t<>\n\t\t\t<div class={styles.foo}>Hello, world!</div>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Styled Component with Macaron in Solid.js\nDESCRIPTION: Basic example of creating a styled button component using Macaron's styled API with no styles defined yet.\n\nLANGUAGE: jsx\nCODE:\n```\n// button.tsx\nimport { styled } from \"@macaron-css/solid\";\n\nconst Button = styled(\"button\", {});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using startTransition in Solid.js\nDESCRIPTION: The startTransition function allows marking updates as transitions without tracking pending state. It takes a function parameter that contains the state updates and returns a Promise that resolves when the transition completes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startTransition } from \"solid-js\"\n\nfunction startTransition: (fn: () => void) => Promise<void>\n\n```\n\n----------------------------------------\n\nTITLE: Typing Explicit Properties and Custom Attributes\nDESCRIPTION: Demonstrates how to type prop:, attr:, and bool: directives by extending the JSX namespace with appropriate interfaces.\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module \"solid-js\" {\n  namespace JSX {\n    interface ExplicitProperties {\n      count: number;\n      name: string;\n    }\n    interface ExplicitAttributes {\n      count: number;\n      name: string;\n    }\n    interface ExplicitBoolAttributes {\n      disabled: boolean;\n    }\n  }\n}\n\n// Usage\n<Input prop:name={name()} prop:count={count()}/>\n<my-web-component attr:name={name()} attr:count={count()} bool:disabled={true}/>\n```\n\n----------------------------------------\n\nTITLE: Testing a Counter Primitive in SolidJS\nDESCRIPTION: Demonstrates testing a counter primitive using renderHook to access and verify the counter's state and behavior.\n\nLANGUAGE: ts\nCODE:\n```\nimport { test, expect } from \"vitest\"\nimport { renderHook } from \"@solidjs/testing-library\"\nimport { createCounter } from \"./counter\"\n\ntest(\"increments count\", () => {\n  const { result } = renderHook(createCounter)\n  expect(result.count).toBe(0)\n  result.increment()\n  expect(result.count).toBe(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Binding Event Handlers with Arguments in SolidJS\nDESCRIPTION: Shows how to optimize event handlers by passing an array where the second item is supplied as the handler's first argument, avoiding the overhead of JavaScript's bind method.\n\nLANGUAGE: tsx\nCODE:\n```\nconst handler = (data, event) => {\n\tconsole.log(\"Data:\", data, \"Event:\", event);\n};\n\n<button onClick={[handler, \"Hello!\"]}>Click Me</button>;\n```\n\n----------------------------------------\n\nTITLE: Basic usage of the children helper in Solid.js\nDESCRIPTION: Shows how to use the children helper to create a memo of resolved children from props.children. This pattern prevents duplicate creation of children and ensures proper tracking.\n\nLANGUAGE: tsx\nCODE:\n```\nconst resolved = children(() => props.children)\n```\n\n----------------------------------------\n\nTITLE: SolidStart Project File Structure\nDESCRIPTION: Example of the default file structure for a SolidStart application, showing the organization of directories and key files that make up the application architecture.\n\nLANGUAGE: bash\nCODE:\n```\npublic/\nsrc/\n├── routes/\n│   ├── index.tsx\n├── entry-client.tsx\n├── entry-server.tsx\n├── app.tsx\n```\n\n----------------------------------------\n\nTITLE: Using mergeProps for Default Prop Values\nDESCRIPTION: Demonstrates how to use the mergeProps utility to set default values for props while maintaining reactivity of the properties.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeProps } from \"solid-js\";\n\nfunction MyComponent(props) {\n\t// Using mergeProps to set default values for props\n\tconst finalProps = mergeProps({ defaultName: \"Ryan Carniato\" }, props);\n\n\treturn <div>Hello {finalProps.defaultName}</div>;\n}\n\n// Usage: <MyComponent defaultName=\"Ryan Carniato\" />\n```\n\n----------------------------------------\n\nTITLE: Observable Function Signature in Solid.js\nDESCRIPTION: Function signature for the observable method that takes a signal function and returns an Observable of the same type. This allows Solid.js signals to be used with Observable-based libraries.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { observable } from \"solid-js\"\n\nfunction observable<T>(input: () => T): Observable<T>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Router with Root Layout Component in SolidJS\nDESCRIPTION: This example demonstrates how to use the Router component with a root layout component that wraps the entire application. The root layout component will not be updated when the page changes, providing a consistent application shell.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nconst App = (props) => (\n\t<>\n\t\t<h1>Root header</h1>\n\t\t{props.children}\n\t</>\n);\n\nrender(\n\t() => <Router root={App}>{/*... routes */}</Router>,\n\tdocument.getElementById(\"app\")\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Path Parameter in SolidJS\nDESCRIPTION: A basic example of defining a route with a path parameter in SolidJS. The :id parameter will capture any value that comes after /users/ in the URL.\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/users/:id\" component={User} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Function Signature for createUniqueId in solid-js\nDESCRIPTION: The function signature for createUniqueId which returns a string. This function is imported from the solid-js library.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createUniqueId } from \"solid-js\"\n\nfunction createUniqueId(): string\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal SolidStart Configuration with defineConfig\nDESCRIPTION: This snippet demonstrates how to create a basic configuration for a SolidStart application using the defineConfig helper function. It shows the minimal setup required for app.config.ts that applies default settings.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({});\n```\n\n----------------------------------------\n\nTITLE: Delegating Events with Value Binding in Solid TSX\nDESCRIPTION: An optimization technique for handling events in list items where a specific item ID is passed to the handler along with the event. This approach avoids creating additional closures for each list item.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction handler(itemId, e) {\n\t/*...*/\n}\n\n<ul>\n\t<For each={state.list}>{(item) => <li onClick={[handler, item.id]} />}</For>\n</ul>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Store Values Directly\nDESCRIPTION: Demonstrates how to access values from a Solid.js store using direct property access, similar to regular JavaScript objects.\n\nLANGUAGE: jsx\nCODE:\n```\nconsole.log(store.userCount) // Outputs: 3\n```\n\n----------------------------------------\n\nTITLE: Rendering API for Solid Component Testing\nDESCRIPTION: Example demonstrating the render function API from @solidjs/testing-library, showing its parameters and return values for testing Solid components.\n\nLANGUAGE: tsx\nCODE:\n```\nconst renderResult = render(\n  () => <MyComponent />, // @solidjs/testing-library requires a function\n  { // all options are optional\n    container, // manually set up your own container, will not be handled\n    baseElement, // parent of container in case it is not supplied\n    queries, // manually set up custom queries\n    hydrate, // set to `true` to use hydration\n    wrapper, // reusable wrapper component to supply context\n    location, // sets up a router pointed to the location if provided\n  }\n)\nconst {\n  asFragment, // function returning the contents of the container\n  baseElement, // the parent of the container\n  container, // the container in which the component is rendered\n  debug, // a function giving some helpful debugging output\n  unmount, // manually removing the component from the container\n  ...queries, // functions to select elements from the container\n} = renderResult\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Event Handlers with Props in SolidJS\nDESCRIPTION: Demonstrates how to work with non-reactive event handlers that call props, allowing for flexibility in function assignment without requiring reactivity.\n\nLANGUAGE: tsx\nCODE:\n```\n<div onClick={() => props.handleClick?.()} />\n```\n\n----------------------------------------\n\nTITLE: Implementing State Sharing Between Components in Solid.js\nDESCRIPTION: This example demonstrates lifting state up to a common ancestor component in Solid.js. It creates a counter application where the App component manages the state (count, doubleCount, squaredCount) and passes it down to child components Counter and DisplayCounts, allowing them to share and manipulate the same state.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createEffect, createMemo } from \"solid-js\";\n\nfunction App() {\n\tconst [count, setCount] = createSignal(0);\n\tconst [doubleCount, setDoubleCount] = createSignal(0);\n\tconst squaredCount = createMemo(() => count() * count());\n\n\tcreateEffect(() => {\n\t\tsetDoubleCount(count() * 2);\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<Counter count={count()} setCount={setCount} />\n\t\t\t<DisplayCounts\n\t\t\t\tcount={count()}\n\t\t\t\tdoubleCount={doubleCount()}\n\t\t\t\tsquaredCount={squaredCount()}\n\t\t\t/>\n\t\t</>\n\t);\n}\n\nfunction Counter(props) {\n\tconst increment = () => {\n\t\tprops.setCount((prev) => prev + 1);\n\t};\n\n\treturn <button onClick={increment}>Increment</button>;\n}\n\nfunction DisplayCounts(props) {\n\treturn (\n\t\t<div>\n\t\t\t<div>Current count: {props.count}</div>\n\t\t\t<div>Doubled count: {props.doubleCount}</div>\n\t\t\t<div>Squared count: {props.squaredCount}</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Defining the 'on' Function in Solid.js\nDESCRIPTION: Type signature for the 'on' function from Solid.js which makes dependencies explicit in computations. It accepts dependencies, a function to run when dependencies change, and optional configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { on } from \"solid-js\"\n\nfunction on<T extends Array<() => any> | (() => any), U>(\n\tdeps: T,\n\tfn: (input: T, prevInput: T, prevValue?: U) => U,\n\toptions: { defer?: boolean } = {}\n): (prevValue?: U) => U | undefined\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for reload Helper in SolidJS Router\nDESCRIPTION: This snippet shows the TypeScript type signatures for the reload helper function in SolidJS Router. It defines the ResponseOptions interface that extends native ResponseInit, and the reload function that returns a CustomResponse of never type.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResponseOptions & Omit<ResponseInit, \"body\"> {\n  revalidate?: string | string[];\n}\n\nreload(opt?: ResponseOptions): CustomResponse<never>;\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Routes with Parameters in Solid Router\nDESCRIPTION: Setting up routes with dynamic path parameters using colon syntax (:id) to handle unknown paths ahead of time.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nconst Users = lazy(() => import(\"./pages/Users\"));\nconst User = lazy(() => import(\"./pages/User\"));\nconst Home = lazy(() => import(\"./pages/Home\"));\n\nrender(\n\t() => (\n\t\t<Router>\n\t\t\t<Route path=\"/users\" component={Users} />\n\t\t\t<Route path=\"/users/:id\" component={User} />\n\t\t\t<Route path=\"/\" component={Home} />\n\t\t</Router>\n\t),\n\tdocument.getElementById(\"root\")\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using onMount Function in SolidJS\nDESCRIPTION: Shows the import syntax and function signature for the onMount method in SolidJS. The function accepts a callback that runs after elements are mounted.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { onMount } from \"solid-js\"\n\nfunction onMount(fn: () => void): void\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Props in Child Components\nDESCRIPTION: Shows how to access props passed to a component using the props object in the component function.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent(props) {\n\treturn <div>Hello {props.name}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @once decorator with component props in Solid.js\nDESCRIPTION: This example demonstrates how to use the @once decorator to prevent reactive wrapping of a prop value that won't update. This optimization reduces overhead by telling Solid's compiler not to create a getter for this expression.\n\nLANGUAGE: tsx\nCODE:\n```\n<MyComponent static={/*@once*/ state.wontUpdate} />\n```\n\n----------------------------------------\n\nTITLE: Using 'use server' at File Level in Solid.js\nDESCRIPTION: Shows how to make an entire file server-only by placing the 'use server' directive at the top of the file. All functions in the file will only run on the server.\n\nLANGUAGE: tsx\nCODE:\n```\n\"use server\";\n\nconst logHello = async (message: string) => {\n\tconsole.log(message);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Batch for Multiple Updates in Solid.js\nDESCRIPTION: Example demonstrating how to use the batch function to group multiple store updates together. This ensures that dependent computations are only updated once after all changes are applied.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { batch } from \"solid-js\"\n\nbatch(() => {\n\tstate.user.firstName = \"Jane\";\n\tstate.user.lastName = \"Doe\";\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Context-Based Data Access in Solid Router Components\nDESCRIPTION: Example showing how to recreate the useRouteData pattern in v0.10.0 by creating a custom context. This illustrates taking page props and providing them through context to allow data access in deeply nested components.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext, useContext } from \"solid-js\";\n\nconst UserContext = createContext();\n\nfunction User(props) {\n\t<UserContext.Provider value={props.data()}>\n\t\t{/* my component content that includes <UserDetails /> in any depth  */}\n\t</UserContext.Provider>;\n}\n\nfunction UserDetails() {\n\tconst user = useContext(UserContext);\n\t// render stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Data During Navigation in SolidStart\nDESCRIPTION: Shows how to optimize data fetching during navigation by preloading data using the route object with a preload function. The query is executed during navigation and then used normally in the component.\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/index.tsx\nimport { ErrorBoundary } from \"solid-js\";\nimport { query, createAsync, type RouteDefinition } from \"@solidjs/router\";\n\nconst getPosts = query(async () => {\n\tconst posts = await fetch(\"https://my-api.com/posts\");\n\treturn await posts.json();\n}, \"posts\");\n\nexport const route = {\n\tpreload: () => getPosts(),\n} satisfies RouteDefinition;\n\nexport default function Page() {\n\tconst post = createAsync(() => getPosts());\n\treturn (\n\t\t<div>\n\t\t\t<ErrorBoundary fallback={<div>Something went wrong!</div>}>\n\t\t\t\t<h1>{post().title}</h1>\n\t\t\t</ErrorBoundary>\n\t\t</div>\n\t);\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// src/routes/index.jsx\nimport { ErrorBoundary } from \"solid-js\";\nimport { query, createAsync } from \"@solidjs/router\";\n\nconst getPosts = query(async () => {\n\tconst posts = await fetch(\"https://my-api.com/posts\");\n\treturn await posts.json();\n}, \"posts\");\n\nexport const route = {\n\tpreload: () => getPosts(),\n};\n\nexport default function Page() {\n\tconst post = createAsync(() => getPosts());\n\treturn (\n\t\t<div>\n\t\t\t<ErrorBoundary fallback={<div>Something went wrong!</div>}>\n\t\t\t\t<h1>{post().title}</h1>\n\t\t\t</ErrorBoundary>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Components with Props in Solid.js\nDESCRIPTION: Shows how to type components that accept specific props using TypeScript generics. This example defines a counter component that accepts an initial value prop.\n\nLANGUAGE: tsx\nCODE:\n```\nconst InitCounter: Component<{ initial: number }> = (props) => {\n\tconst [count, setCount] = createSignal(props.initial);\n\treturn (\n\t\t<button onClick={() => setCount((prev) => prev + 1)}>{count()}</button>\n\t);\n};\n\n<InitCounter initial={5} />;\n```\n\n----------------------------------------\n\nTITLE: Solving Event Propagation with Native Events in SolidJS\nDESCRIPTION: Shows how to fix event propagation issues by switching from delegated to native events, allowing stopPropagation() to work as expected.\n\nLANGUAGE: tsx\nCODE:\n```\n<button\n\ton:click={(event) => {\n\t\tevent.stopPropagation();\n\t\tconsole.log(\"button\");\n\t}}\n>\n\tbutton\n</button>\n```\n\n----------------------------------------\n\nTITLE: Applying boolean attribute in Solid.js with bool:* directive\nDESCRIPTION: This example shows how to conditionally apply a boolean attribute to an element using the bool:* directive in Solid.js. The attribute will be added when the value is truthy and removed when falsy.\n\nLANGUAGE: tsx\nCODE:\n```\n<my-element bool:status={prop.value} />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitive Assignment with Refs\nDESCRIPTION: Shows how to use the definitive assignment assertion in TypeScript when working with refs, signaling to TypeScript that the variable will be assigned when the component renders.\n\nLANGUAGE: tsx\nCODE:\n```\nlet myElement!: HTMLDivElement;\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Search Parameters in Solid Router\nDESCRIPTION: This snippet demonstrates how to use the useSearchParams hook to retrieve and update URL query parameters in a Solid application. It shows how to read the current search parameter value and update it based on user input through a text field.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSearchParams } from \"@solidjs/router\";\n\nexport const App = () => {\n\tconst [searchParams, setSearchParams] = useSearchParams();\n\n\treturn (\n\t\t<div>\n\t\t\t<span>Username: {searchParams.username}</span>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tsetSearchParams({ username: e.target.value });\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Using produce for Simplified Store Updates in SolidJS\nDESCRIPTION: Demonstrates how to use the produce utility from solid-js/store to simplify state updates with a more intuitive, mutation-based syntax.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { produce } from \"solid-js/store\"\n\nconst toggleTask = (id) => {\n\tsetState(\n\t\t\"tasks\",\n\t\t(tasks) => tasks.id === id,\n\t\tproduce((task) => {\n\t\t\ttask.completed = !task.completed\n\t\t})\n\t)\n}\n\n// You can also rewrite the `addTask` function through produce\nconst addTask = (text) => {\n\tsetState(\n\t\t\"tasks\",\n\t\tproduce((task) => {\n\t\t\ttask.push({ id: state.tasks.length, text, completed: false })\n\t\t})\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Submission with useSubmission in SolidJS Router\nDESCRIPTION: Demonstrates the basic usage of useSubmission hook to handle form submissions and provide pending state feedback. Requires form method to be 'post' to work properly.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSubmission } from \"@solidjs/router\";\n\nfunction Component() {\n  const submission = useSubmission(postNameAction);\n\n    return (\n      <form action={postNameAction} method=\"post\">\n          <input type=\"text\" name=\"name\" />\n          <button type=\"submit\">\n              {submission.pending ? \"Adding...\" : \"Add\"}\n          </button>\n      </form>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in SolidStart Server Function\nDESCRIPTION: Example of a GET server function that returns a JSON response with a promise value and custom cache-control header. The function will have a return type of Promise<{ hello: string }>.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { json } from \"@solidjs/router\";\nimport { GET } from \"@solidjs/start\";\n\nconst hello = GET(async (name: string) => {\n\t\"use server\";\n\treturn json(\n\t\t{ hello: new Promise<string>((r) => setTimeout(() => r(name), 1000)) },\n\t\t{ headers: { \"cache-control\": \"max-age=60\" } }\n\t);\n});\n```\n\n----------------------------------------\n\nTITLE: Config-based route nesting in Solid Router\nDESCRIPTION: Illustrates how to implement nested routes using the configuration-based approach with the children property in route definition objects.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\nconst routes = {\n\tpath: \"/\",\n\tcomponent: lazy(() => import(\"/routes/index.js\")),\n\tchildren: [\n\t\t{\n\t\t\tpath: \"/users\",\n\t\t\tcomponent: lazy(() => import(\"/routes/users.js\")),\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\tpath: \"/:id\",\n\t\t\t\t\tcomponent: lazy(() => import(\"/routes/user.js\")),\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n\nrender(() => <Router>{routes}</Router>, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Named Actions for SSR Consistency in SolidJS Router\nDESCRIPTION: Shows how to create named actions for server-side rendering (SSR) compatibility, which ensures stable references across client and server environments.\n\nLANGUAGE: jsx\nCODE:\n```\nconst myAction = action(async (args) => {}, \"my-action\");\n```\n\n----------------------------------------\n\nTITLE: Using Optional Parameters with useMatch in JavaScript\nDESCRIPTION: Demonstrates how to define optional parameters in route patterns by adding a '?' at the end of the parameter name. This example matches paths with or without a project segment.\n\nLANGUAGE: javascript\nCODE:\n```\n\tconst isReference = useMatch(() => \"/:project?/reference/*?\", {\n\t\tproject: [\"solid-router\", \"solid-meta\", \"solid-start\"],\n\t});\n```\n\n----------------------------------------\n\nTITLE: Improved conditional rendering with children helper in Solid.js\nDESCRIPTION: A better approach to conditional rendering with the children helper that only evaluates props.children when the visible condition is true, preventing unnecessary DOM creation.\n\nLANGUAGE: tsx\nCODE:\n```\nconst resolved = children(() => visible() && props.children)\n```\n\n----------------------------------------\n\nTITLE: Using untrack Function in SolidJS TSX Component\nDESCRIPTION: Demonstrates how to use the untrack function to prevent a prop value from being tracked in the reactive system. This is useful when a certain property will never update and doesn't need to trigger reactivity.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { untrack } from \"solid-js\"\n\nexport function Component(props) {\n    const value = untrack(() => props.value)\n\n    return <div>{value}</div>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Macaron CSS-in-JS\nDESCRIPTION: Setup for integrating the Macaron plugin in a Vite configuration file. The plugin must be added before other plugins in the configuration.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { macaronVitePlugin } from \"@macaron-css/vite\";\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n\tplugins: [\n\t\tmacaronVitePlugin(),\n\t\t// other plugins\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a CatchAll (404) Route in Solid Router\nDESCRIPTION: Implementing a catchall route for handling pages not found at any nested level using the wildcard (*) syntax, which can optionally include a parameter name.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nimport Home from \"./pages/Home\";\nimport Users from \"./pages/Users\";\nimport NotFound from \"./pages/NotFound\";\n\nconst App = (props) => (\n\t<>\n\t\t<h1>Site Title</h1>\n\t\t{props.children}\n\t</>\n);\n\nrender(\n\t() => (\n\t\t<Router root={App}>\n\t\t\t<Route path=\"/\" component={Home} />\n\t\t\t<Route path=\"/users\" component={Users} />\n\t\t\t<Route path=\"*paramName\" component={NotFound} />\n\t\t</Router>\n\t),\n\tdocument.getElementById(\"root\")\n);\n```\n\n----------------------------------------\n\nTITLE: Using useLocation to access pathname in Solid Router\nDESCRIPTION: This snippet demonstrates how to use the useLocation primitive to access the current location object and create a reactive memo for the pathname. It shows the basic usage pattern for retrieving URL information.\n\nLANGUAGE: js\nCODE:\n```\nconst location = useLocation();\n\nconst pathname = createMemo(() => parsePath(location.pathname));\n```\n\n----------------------------------------\n\nTITLE: Types Signature for createStore in SolidJS\nDESCRIPTION: Defines the TypeScript type signature for the createStore function, which returns a tuple containing the store object and a setter function for updating it.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createStore } from \"solid-js/store\"\nimport type { StoreNode, Store, SetStoreFunction } from \"solid-js/store\"\n\nfunction createStore<T extends StoreNode>(\n\tstate: T | Store<T>\n): [get: Store<T>, set: SetStoreFunction<T>];\n\ntype Store<T> = T; // conceptually readonly, but not typed as such\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in a Solid Component\nDESCRIPTION: Shows how to properly import and use CSS modules in a Solid component. The example imports styles from a module file and applies them using the styles object to reference class names.\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from \"./Card.module.css\";\n\nconst Card = (props) => {\n  return (\n    <div class={styles.card}>\n      <h1>{props.title}</h1>\n      <p>{props.text}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP Middleware without Nonce in Solid.js\nDESCRIPTION: This middleware configures a Content Security Policy without using nonces. It runs during the onBeforeResponse event and sets CSP headers to restrict various resource origins and actions.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\n\nexport default createMiddleware({\n\tonBeforeResponse: (event) => {\n\t\tconst csp = `\n      default-src 'self';\n      font-src 'self'  ;\n      object-src 'none';\n      base-uri 'none';\n      frame-ancestors 'none';\n      form-action 'self';\n    `.replace(/\\s+/g, \" \");\n\n\t\tevent.response.headers.set(\"Content-Security-Policy\", csp);\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing UnoCSS Using Virtual Import\nDESCRIPTION: Alternative method of importing UnoCSS styles in the root index file using the virtual import alias, which is useful in certain build environments.\n\nLANGUAGE: jsx\nCODE:\n```\n/* @refresh reload */\nimport \"virtual:uno.css\"\nimport { render } from \"solid-js/web\"\nimport \"./index.css\"\nimport App from \"./App\"\n\nrender(() => <App />, document.getElementById('root') as HTMLElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing MemoryRouter with Custom History in SolidJS\nDESCRIPTION: Example showing how to use MemoryRouter with a custom memory history object. The code demonstrates creating a memory history instance, defining navigation functions, and incorporating the router into a SolidJS application with custom navigation buttons.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MemoryRouter, createMemoryHistory, A } from \"@solidjs/router\";\nimport { Suspense } from \"solid-js\";\n\nexport default function App() {\n\tconst history = createMemoryHistory();\n\n\tconst toHome = () => {\n\t\thistory.set({ value: \"/\" });\n\t};\n\tconst toAbout = () => {\n\t\thistory.set({ value: \"/about\" });\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<button onClick={toHome}>{\"\\\"/\\\"\"}</button>\n\t\t\t<button onClick={toAbout}>{\"\\\"/about\\\"\"}</button>\n\n\t\t\t<MemoryRouter\n\t\t\t\thistory={history}\n\t\t\t\troot={(props) => <Suspense>{props.children}</Suspense>}\n\t\t\t>\n\t\t\t\t{/*... routes */}\n\t\t\t</MemoryRouter>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Data Integration with reconcile in Solid Stores\nDESCRIPTION: Demonstrates how to use the reconcile utility to efficiently merge new data into an existing store by updating only the values that have actually changed.\n\nLANGUAGE: jsx\nCODE:\n```\nconst { createStore, reconcile } from \"solid-js/stores\"\n\nconst [data, setData] = createStore({\n\tanimals: ['cat', 'dog', 'bird', 'gorilla']\n})\n\nconst newData = getNewData() // eg. contains ['cat', 'dog', 'bird', 'gorilla', 'koala']\nsetData('animals', reconcile(newData))\n\n```\n\n----------------------------------------\n\nTITLE: Mounting a Solid.js Application with StartClient Component\nDESCRIPTION: Example of using the `mount` function to bootstrap a Solid.js application in an entry-client.tsx file. This code mounts the StartClient component to a DOM element with the ID 'app'.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mount, StartClient } from \"@solidjs/start/client\";\n\nmount(() => <StartClient />, document.getElementById(\"app\")!);\n```\n\n----------------------------------------\n\nTITLE: Basic Switch and Match Components in Solid.js\nDESCRIPTION: Demonstrates how to use Switch and Match components to handle multiple conditions in sequence. Similar to JavaScript's switch/case, the first matching condition renders its content.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch, Match } from \"solid-js\"\n\n<Switch>\n  <Match when={condition1}>\n    <p>Outcome 1</p>\n  </Match>\n  <Match when={condition2}>\n    <p>Outcome 2</p>\n  </Match>\n</Switch>\n```\n\n----------------------------------------\n\nTITLE: Importing Assets Directly in SolidStart Components\nDESCRIPTION: This snippet shows how to import static assets directly into Solid components using Vite's asset handling. This approach generates hashed filenames for better cache control.\n\nLANGUAGE: tsx\nCODE:\n```\nimport logo from \"./solid.png\";\n\nexport default function About() {\n  return (\n    <>\n      <h1>About</h1>\n      <img src={logo} alt=\"Solid logo\" />\n      // Renders\n      <img src=\"/assets/solid.2d8efhg.png\" alt=\"Solid logo\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling Basics in Solid.js with TypeScript\nDESCRIPTION: Shows how to type event handlers in Solid.js using JSX.EventHandler with appropriate element and event types. This ensures accurate typing for event properties like currentTarget and target.\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { JSX } from \"solid-js\"\n\n// Defining an event handler using the `EventHandler` type:\nconst onInput: JSX.EventHandler<HTMLInputElement, InputEvent> = (event) => {\n\tconsole.log(\"Input changed to\", event.currentTarget.value)\n}\n\n// Then attach handler to an input element:\n<input onInput={onInput} />\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in SolidStart Server Functions\nDESCRIPTION: Example of a server function that uses redirect responses for authentication handling. The function can return a User object or redirect to the login page based on session validation or database errors.\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function getUser() {\n\t\"use server\";\n\n\tconst session = await getSession();\n\tconst userId = session.data.userId;\n\tif (userId === undefined) return redirect(\"/login\");\n\n\ttry {\n\t\tconst user: User = await db.user.findUnique({ where: { id: userId } });\n\t\t// throwing can be awkward.\n\t\tif (!user) return redirect(\"/login\");\n\t\treturn user;\n\t} catch {\n\t\t// do stuff\n\t\tthrow redirect(\"/login\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Native Mouse Events for Occasional Events in SolidJS\nDESCRIPTION: Shows how to use native event syntax for events that happen infrequently, which is preferred over delegated events in these cases.\n\nLANGUAGE: tsx\nCODE:\n```\n<div on:mousemove={handleCustomEvent} />\n```\n\n----------------------------------------\n\nTITLE: Using classList Pseudo-attribute for Conditional Classes in Solid\nDESCRIPTION: Demonstration of the classList pseudo-attribute which accepts an object where keys are class names and values are boolean expressions determining if the class should be applied. This approach leverages element.classList.toggle under the hood.\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n\tclassList={{ active: state.active, editing: state.currentId === row.id }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP Middleware with Nonce in Solid.js\nDESCRIPTION: This code sets up a middleware that creates a cryptographically secure nonce and configures a strict Content Security Policy header. The nonce is stored in locals for use in the entry-server file to secure inline scripts.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\nimport { randomBytes } from \"crypto\";\n\nexport default createMiddleware({\n\tonRequest: (event) => {\n\t\tconst nonce = randomBytes(16).toString(\"base64\");\n\n\t\tevent.locals.nonce = nonce;\n\n\t\tconst csp = `\n      default-src 'self';\n      script-src 'nonce-${nonce}' 'strict-dynamic' 'unsafe-eval';\n      object-src 'none';\n      base-uri 'none';\n      frame-ancestors 'none';\n      form-action 'self';\n    `.replace(/\\s+/g, \" \");\n\n\t\tevent.response.headers.set(\"Content-Security-Policy\", csp);\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SolidStart App Component without Router\nDESCRIPTION: A minimal example of the App component without routing functionality. This bare implementation simply returns HTML content directly, suitable for simple applications that don't require navigation between multiple pages.\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n\treturn (\n\t\t<main>\n\t\t\t<h1>Hello world!</h1>\n\t\t</main>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using redirect in a SolidJS server action\nDESCRIPTION: Example demonstrating how to use the redirect function in a server action to navigate users to a new route after adding a user, with single-flight mutation optimization.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { action, redirect } from \"@solidjs/router\";\n\nconst addUser = action(async (user: User) => {\n  await postUser(user);\n  \n  return redirect(\"/users\");\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of createStore in SolidJS\nDESCRIPTION: Demonstrates how to initialize a store with nested objects and arrays. The example creates a store containing user information with count and details.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createStore } from \"solid-js/store\";\n\n// Initialize store\nconst [store, setStore] = createStore({\n\tuserCount: 3,\n\tusers: [\n\t\t{\n\t\t\tid: 0,\n\t\t\tusername: \"felix909\",\n\t\t\tlocation: \"England\",\n\t\t\tloggedIn: false,\n\t\t},\n\t\t{\n\t\t\tid: 1,\n\t\t\tusername: \"tracy634\",\n\t\t\tlocation: \"Canada\",\n\t\t\tloggedIn: true,\n\t\t},\n\t\t{\n\t\t\tid: 1,\n\t\t\tusername: \"johny123\",\n\t\t\tlocation: \"India\",\n\t\t\tloggedIn: true,\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Chained Middleware Functions in SolidJS Start\nDESCRIPTION: This code snippet demonstrates how to create and chain multiple middleware functions in a SolidJS Start application. It shows two middleware functions (middleware1 and middleware2) that set different custom headers, and how they are combined in an array within the createMiddleware function's onRequest option.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\nimport { type FetchEvent } from \"@solidjs/start/server\";\n\nfunction middleware1(event: FetchEvent) {\n\tevent.request.headers.set(\"x-custom-header1\", \"hello-from-middleware1\");\n}\n\nfunction middleware2(event: FetchEvent) {\n\tevent.request.headers.set(\"x-custom-header2\", \"hello-from-middleware2\");\n}\n\nexport default createMiddleware({\n\tonRequest: [middleware1, middleware2],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SolidStart App Component with Router\nDESCRIPTION: A basic example of the App component implementing navigation with SolidJS router. It sets up routes using FileRoutes from @solidjs/start/router and provides navigation links between pages with suspense for loading states.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { A, Router } from \"@solidjs/router\";\nimport { FileRoutes } from \"@solidjs/start/router\";\nimport { Suspense } from \"solid-js\";\n\nexport default function App() {\n\treturn (\n\t\t<Router\n\t\t\troot={(props) => (\n\t\t\t\t\t<A href=\"/\">Index</A>\n\t\t\t\t\t<A href=\"/about\">About</A>\n\t\t\t\t\t<Suspense>{props.children}</Suspense>\n\t\t\t)}\n\t\t>\n\t\t\t<FileRoutes />\n\t\t</Router>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Property Naming in Solid.js\nDESCRIPTION: Shows how Solid.js requires CSS property names to use lower-case, dash-separated format instead of camelCase. This differs from React and leads to better performance and consistency with SSR output.\n\nLANGUAGE: tsx\nCODE:\n```\n// string\n<div style={`color: green; background-color: ${state.color}; height: ${state.height}px`} />\n\n// object\n<div style={{\n  color: \"green\",\n  \"background-color\": state.color,\n  height: state.height + \"px\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Color Selector Example in Solid.js\nDESCRIPTION: This example demonstrates using the <Dynamic> component to render different colored divs based on user selection from a dropdown. It uses createSignal to track the selected color and For to generate the dropdown options.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, For } from \"solid-js\"\nimport { Dynamic } from \"solid-js/web\"\n\nconst RedDiv = () => <div style=\"color: red\">Red</div>\nconst GreenDiv = () => <div style=\"color: green\">Green</div>\nconst BlueDiv = () => <div style=\"color: blue\">Blue</div>\n\nconst options = {\n\tred: RedDiv,\n\tgreen: GreenDiv,\n\tblue: BlueDiv,\n}\n\nfunction App() {\n\tconst [selected, setSelected] = createSignal(\"red\")\n\n\treturn (\n\t\t<>\n\t\t\t<select\n\t\t\t\tvalue={selected()}\n\t\t\t\tonInput={(e) => setSelected(e.currentTarget.value)}\n\t\t\t>\n\t\t\t\t<For each={Object.keys(options)}>\n\t\t\t\t\t{(color) => <option value={color}>{color}</option>} \n\t\t\t\t</For>\n\t\t\t</select>\n\t\t\t<Dynamic component={options[selected()]} />\n\t\t</>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Responses from Middleware\nDESCRIPTION: Example of using Solid Router's json helper to create JSON responses for API requests. This demonstrates how to return a JSON error response when authorization is missing.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\nimport { json } from \"@solidjs/router\";\n\nexport default createMiddleware({\n\tonRequest: (event) => {\n\t\t// Rejecting unauthorized API requests with a JSON error\n\t\tconst authHeader = event.request.headers.get(\"Authorization\");\n\t\tif (!authHeader) {\n\t\t\treturn json({ error: \"Unauthorized\" }, { status: 401 });\n\t\t}\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Variables in Solid.js\nDESCRIPTION: Demonstrates how to set custom CSS variables using Solid's style attribute. This example shows setting a custom color theme variable that can be referenced elsewhere in CSS.\n\nLANGUAGE: tsx\nCODE:\n```\n// set css variable\n<div style={{ \"--my-custom-color\": state.themeColor }} />\n```\n\n----------------------------------------\n\nTITLE: Basic Setup of MetaProvider with Head Tag Components in Solid\nDESCRIPTION: Example demonstrating how to set up MetaProvider and use head tag components like Title, Link, and Meta in a Solid application. This shows the proper wrapping of an application with MetaProvider to enable head tag management.\n\nLANGUAGE: js\nCODE:\n```\nimport { MetaProvider, Title, Link, Meta } from \"@solidjs/meta\";\n\nconst App = () => (\n\t<MetaProvider>\n\t\t<div class=\"Home\">\n\t\t\t<Title>Title of page</Title>\n\t\t\t<Link rel=\"canonical\" href=\"http://solidjs.com/\" />\n\t\t\t<Meta name=\"example\" content=\"whatever\" />\n\t\t</div>\n\t</MetaProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in Middleware\nDESCRIPTION: Example of using Solid Router's redirect helper to create permanent redirects for legacy routes. This demonstrates how to map old paths to new ones with appropriate HTTP status codes.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\nimport { redirect } from \"@solidjs/router\";\n\nconst REDIRECT_MAP: Record<string, string> = {\n\t\"/signup\": \"/auth/signup\",\n\t\"/login\": \"/auth/login\",\n};\n\nexport default createMiddleware({\n\tonRequest: (event) => {\n\t\tconst { pathname } = new URL(event.request.url);\n\n\t\t// Redirecting legacy routes permanently to new paths\n\t\tif (pathname in REDIRECT_MAP) {\n\t\t\treturn redirect(REDIRECT_MAP[pathname], 301);\n\t\t}\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Flightcontrol for Solid Static Site Deployment\nDESCRIPTION: This JSON configuration file defines the deployment settings for a Solid static site using Flightcontrol. It specifies the production environment, build settings, output directory, and domain configuration. The file should be placed at the root of your repository.\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://app.flightcontrol.dev/schema.json\",\n\t\"environments\": [\n\t\t{\n\t\t\t\"id\": \"production\",\n\t\t\t\"name\": \"Production\",\n\t\t\t\"region\": \"us-west-2\",\n\t\t\t\"source\": {\n\t\t\t\t\"branch\": \"main\"\n\t\t\t},\n\t\t\t\"services\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"my-static-solid\",\n\t\t\t\t\t\"buildType\": \"nixpacks\",\n\t\t\t\t\t\"name\": \"My static solid site\",\n\t\t\t\t\t\"type\": \"static\",\n\t\t\t\t\t\"domain\": \"solid.yourapp.com\",\n\t\t\t\t\t\"outputDirectory\": \"dist\",\n\t\t\t\t\t\"singlePageApp\": true\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Path Parameters in SolidJS Router\nDESCRIPTION: Example of defining a route with an optional parameter using the ? syntax. This will match both /users and /users/123 paths.\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/users/:id?\" component={User} />\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Theme Session in TypeScript\nDESCRIPTION: Demonstrates how to create a server function to initialize and manage a user's theme preference session. This snippet includes creating a session with encryption, retrieving data, and providing default values.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSession } from \"vinxi/http\";\n\ntype SessionData = {\n\ttheme: \"light\" | \"dark\";\n};\n\nexport async function useThemeSession() {\n\t\"use server\";\n\tconst session = await useSession<SessionData>({\n\t\tpassword: process.env.SESSION_SECRET as string,\n\t\tname: \"theme\",\n\t});\n\n\tif (!session.data.theme) {\n\t\tawait session.update({\n\t\t\ttheme: \"light\",\n\t\t});\n\t}\n\n\treturn session;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Root Layout to Router in Solid\nDESCRIPTION: Setting up a root-level layout component that won't update on page change, ideal for top-level navigation and Context Providers.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\nconst App = (props) => (\n\t<>\n\t\t<h1>Site Title</h1>\n\t\t{props.children}\n\t</>\n);\n\nrender(() => <Router root={App} />, document.getElementById(\"root\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Routes in Solid Router\nDESCRIPTION: Using wildcard tokens (*) to match any descendant routes within a given path, allowing for more flexible routing patterns.\n\nLANGUAGE: jsx\nCODE:\n```\n// Will match any path beginning with foo (eg. foo/, foo/a/, foo/a/b/c)\n<Route path=\"foo/*\" component={Foo} />\n```\n\n----------------------------------------\n\nTITLE: Route-Specific SEO Meta Tags in SolidStart\nDESCRIPTION: Example showing how to add route-specific meta tags for SEO using the Meta component within a route component, which will override global meta tags.\n\nLANGUAGE: tsx\nCODE:\n```\nimport MySiteTitle from \"~/components/MySiteTitle\";\n\nexport default function About() {\n  return (\n    <>\n      <MySiteTitle>About</MySiteTitle>\n      <Meta name=\"description\" content=\"This is my content tag.\" />\n      <Meta\n        property=\"og:title\"\n        content=\"Welcome to my site!\"\n      />\n      <Meta\n        property=\"og:description\"\n        content=\"A website\"\n      />\n      <h1>About</h1>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Non-Null Assertions with Refs in Solid.js\nDESCRIPTION: Demonstrates using non-null assertions with refs in onMount callbacks, which runs after the component is rendered and the ref is assigned. This approach is safer than using assertions at initialization.\n\nLANGUAGE: typescript\nCODE:\n```\nonMount(() => {\n\tdivRef!.focus();\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Elements with Step Size in Solid Stores\nDESCRIPTION: Shows how to update array elements at regular intervals by specifying a step size (by) in the range object, allowing operations like updating only even-indexed elements.\n\nLANGUAGE: jsx\nCODE:\n```\nsetStore(\"users\", { from: 0, to: store.users.length - 1, by: 2 }, \"loggedIn\", false)\n// equivalent to (but more efficient than):\nfor (let i = 1; i <= store.users.length - 1; i += 2) {\n  setStore(\"users\", i, \"loggedIn\", false)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic usage of renderToString in Solid.js\nDESCRIPTION: A simple example showing how to use renderToString to convert a Solid component (App) into an HTML string.\n\nLANGUAGE: typescript\nCODE:\n```\nconst html = renderToString(App)\n```\n\n----------------------------------------\n\nTITLE: Toggling Task Completion with setState in SolidJS\nDESCRIPTION: An example of toggling a task's completion status in a SolidJS store using the setState function with path syntax targeting a specific task by ID.\n\nLANGUAGE: jsx\nCODE:\n```\nconst toggleTask = (id) => {\n\tconst currentCompletedStatus = state.tasks[id].completed\n\tsetState(\n\t\t\"tasks\",\n\t\t(task) => task.id === id,\n\t\t\"completed\",\n\t\t!currentCompletedStatus\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Routes in Solid Router Configuration\nDESCRIPTION: This example shows how to define multiple routes using an array of route definition objects with the Solid Router. It includes examples of lazy-loaded components and an inline component definition.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\nconst routes = [\n    {\n        path: \"/\",\n        component: lazy(() => import(\"/routes/index.js\")),\n    },\n    {\n        path: \"/hello-world\",\n        component: () => <h1>Hello, World!</h1>\n    },\n    {\n        path: \"/about\",\n        component: lazy(() => import(\"/routes/about.js\")),\n    }\n]\n\n\nrender(() => <Router>{routes}</Router>, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Declaring TypeScript interfaces for public environment variables\nDESCRIPTION: Creates TypeScript interfaces to make public environment variables type-safe. These interfaces enable autocomplete in TypeScript Language Service Providers (LSP).\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ImportMetaEnv {\n\treadonly VITE_USER_ID: string;\n\treadonly VITE_PUBLIC_ENDPOINT: string;\n}\n\ninterface ImportMeta {\n\treadonly env: ImportMetaEnv;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Show with Keyed Prop for Type Narrowing\nDESCRIPTION: Shows how to use the Show component with the keyed prop to prevent recreation of children while maintaining type safety.\n\nLANGUAGE: tsx\nCODE:\n```\nreturn (\n\t<div>\n\t\t<Show keyed when={user()}>\n\t\t\t{(nonNullishUser) => nonNullishUser.name}\n\t\t</Show>\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Component Type Checking Example with Counter Component\nDESCRIPTION: Illustrates type checking for components without props or children, showing how TypeScript prevents passing unnecessary props or children to components that don't accept them.\n\nLANGUAGE: tsx\nCODE:\n```\n// in counter.tsx\nconst Counter: Component = () => {\n\tconst [count, setCount] = createSignal(0);\n\treturn (\n\t\t<button onClick={() => setCount((prev) => prev + 1)}>{count()}</button>\n\t);\n};\n\n// in app.tsx\n<Counter />; // ✔️\n<Counter initial={5} />; // ❌: No 'initial' prop defined\n<Counter>hi</Counter>; // ❌: Children aren't expected\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL API Endpoint in SolidStart\nDESCRIPTION: Complete example of setting up a GraphQL API in SolidStart by defining a schema, resolvers, and a request handler that processes both GET and POST requests to execute GraphQL queries.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { buildSchema, graphql } from \"graphql\";\nimport type { APIEvent } from \"@solidjs/start/server\";\n\n// Define GraphQL Schema\nconst schema = buildSchema(`\n  type Message {\n      message: String\n  }\n\n  type Query {\n    hello(input: String): Message\n    goodbye: String\n  }\n`);\n\n// Define GraphQL Resolvers\nconst rootValue = {\n  hello: () => {\n    return {\n      message: \"Hello World\"\n    };\n  },\n  goodbye: () => {\n    return \"Goodbye\";\n  }\n};\n\n// request handler\nconst handler = async (event: APIEvent) => {\n  // get request body\n  const body = await new Response(event.request.body).json();\n\n  // pass query and save results\n  const result = await graphql({ rootValue, schema, source: body.query });\n\n  // send query result\n  return result;\n};\n\nexport const GET = handler;\n\nexport const POST = handler;\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading with Solid Router Configuration\nDESCRIPTION: This example demonstrates the best practice of using lazy loading with config-based routing in Solid Router. Lazy loading improves application performance by only loading components when they are needed.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\nconst routes = [\n    {\n        path: \"/\",\n        component: lazy(() => import(\"/routes/index.js\")),\n    },\n    {\n        path: \"/hello-world\",\n        component: () => <h1>Hello, World!</h1>\n    },\n    {\n        path: \"/about\",\n        component: lazy(() => import(\"/routes/about.js\")),\n    }\n]\n\n\nrender(() => <Router>{routes}</Router>, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Testing Routes in SolidJS\nDESCRIPTION: Demonstrates how to test routed components using the location option in the render function, which wraps the component in a router pointing to the specified location.\n\nLANGUAGE: tsx\nCODE:\n```\nconst { findByText } = render(\n  () => <Route path=\"/article/:id\" component={Article} />,\n  { location: \"/article/12345\" }\n);\nexpect(await findByText(\"Article 12345\")).toBeInTheDocument()\n```\n\n----------------------------------------\n\nTITLE: Lazy-Loading Route Components in Solid Router\nDESCRIPTION: Using the lazy function to postpone loading of components until they are navigated to, improving initial load performance.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nconst Users = lazy(() => import(\"./pages/Users\"));\nconst Home = lazy(() => import(\"./pages/Home\"));\n\nconst App = (props) => (\n\t<>\n\t\t<h1>Site Title</h1>\n\t\t{props.children}\n\t</>\n);\n\nrender(\n\t() => (\n\t\t<Router root={App}>\n\t\t\t<Route path=\"/users\" component={Users} />\n\t\t\t<Route path=\"/\" component={Home} />\n\t\t</Router>\n\t),\n\tdocument.getElementById(\"root\")\n);\n```\n\n----------------------------------------\n\nTITLE: Importing isServer from Solid.js\nDESCRIPTION: Shows how to import the isServer boolean constant from the Solid.js web package. This constant indicates whether the code is being executed in a server or browser environment.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isServer } from \"solid-js/web\"\n\nconst isServer: boolean\n\n```\n\n----------------------------------------\n\nTITLE: Combining CSS Module Styles with Regular Class Names in Solid\nDESCRIPTION: Shows how to combine CSS module styles with regular string class names. This allows using both scoped styles and global utility classes together.\n\nLANGUAGE: jsx\nCODE:\n```\n// component.jsx\nimport styles from \"styles.module.css\";\n\nfunction Component() {\n\treturn (\n\t\t<>\n\t\t\t<div class={`${styles.foo} container`}>Hello, world!</div>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vercel CLI Globally\nDESCRIPTION: Command to install the Vercel CLI globally using a package manager like npm or yarn, which is required for deploying projects via command line.\n\nLANGUAGE: bash\nCODE:\n```\nvercel\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Support in SolidStart Application\nDESCRIPTION: Sets up WebSocket support in a SolidStart application by enabling the experimental WebSocket feature and adding a WebSocket router. The configuration defines a WebSocket endpoint at the '/ws' path that uses a handler defined in './src/ws.ts'.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({\n\tserver: {\n\t\texperimental: {\n\t\t\twebsocket: true,\n\t\t},\n\t},\n}).addRouter({\n\tname: \"ws\",\n\ttype: \"http\",\n\thandler: \"./src/ws.ts\",\n\ttarget: \"server\",\n\tbase: \"/ws\",\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Submissions and Optimistic Updates with useSubmission\nDESCRIPTION: Shows the interface for useSubmission/useSubmissions hooks, which provide information about pending actions and support optimistic UI updates.\n\nLANGUAGE: jsx\nCODE:\n```\ntype Submission<T, U> = {\n  input: T;\n  result: U;\n  error: any;\n  pending: boolean\n  clear: () => {}\n  retry: () => {}\n}\n\nconst submissions = useSubmissions(action, (input) => filter(input));\nconst submission = useSubmission(action, (input) => filter(input));\n```\n\n----------------------------------------\n\nTITLE: Using splitProps to Destructure Props Safely\nDESCRIPTION: Shows how to use the splitProps utility to split a props object into multiple groups while maintaining reactivity, useful for passing specific props to child components.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { splitProps } from \"solid-js\";\n\nfunction ParentComponent(props) {\n\t// Splitting props into two groups: 'name' and 'age'\n\tconst [greetingProps, personalInfoProps, restProps] = splitProps(\n\t\tprops,\n\t\t[\"name\"],\n\t\t[\"age\"]\n\t);\n\n\t// Using greetingProps and personalInfoProps in the current component\n\treturn (\n\t\t<div>\n\t\t\t<Greeting {...greetingProps} />\n\t\t\t<PersonalInfo {...personalInfoProps} />\n\t\t\t{/* restProps can be passed down or used as needed */}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Single Handler for Multiple HTTP Methods in SolidStart\nDESCRIPTION: Demonstrates how to create a single handler function and export it for multiple HTTP methods to avoid duplicating code when the same logic applies to different methods.\n\nLANGUAGE: tsx\nCODE:\n```\nasync function handler() {\n  // ...\n}\n\nexport const GET = handler;\nexport const POST = handler;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using useResolvedPath for Path Resolution in Solid.js\nDESCRIPTION: Examples of using the useResolvedPath hook to resolve paths in different contexts. The hook returns a signal containing the resolved path based on the current route configuration and the provided path.\n\nLANGUAGE: js\nCODE:\n```\nconst path = useResolvedPath(() => '');\n\n// Parent Route path: /user/* \nconsole.log(path()); // /user\n\nconst path = useResolvedPath(() => 'a/b/c');\n\n// Parent Route path: /user/* \nconsole.log(path()); // /user/a/b/c\n\nconst path = useResolvedPath(() => '/a/b/c'); // Note: /\n\n// Parent Route path: /user/* \nconsole.log(path()); // a/b/c\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Module Styles in Solid Components\nDESCRIPTION: Demonstrates how to import styles from a CSS module into a Solid component file. This is the first step to applying scoped styles to components.\n\nLANGUAGE: jsx\nCODE:\n```\n// component.jsx\nimport styles from \"styles.module.css\";\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies for Solid Applications\nDESCRIPTION: Command to install the recommended testing packages for Solid applications, including Vitest as the testing framework, jsdom for DOM simulation, and various testing libraries for component testing and assertions.\n\nLANGUAGE: bash\nCODE:\n```\nvitest jsdom @solidjs/testing-library @testing-library/user-event @testing-library/jest-dom\n```\n\n----------------------------------------\n\nTITLE: Creating Signals with Default Values for Type Inference\nDESCRIPTION: Example demonstrating how to leverage TypeScript's type inference by providing default values to createSignal.\n\nLANGUAGE: typescript\nCODE:\n```\nconst [count, setCount] = createSignal(0);\nconst [name, setName] = createSignal(\"\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Catch-all Route with SolidJS Router\nDESCRIPTION: This code demonstrates how to implement a catch-all route using SolidJS Router. It defines two specific routes (/home and /about) and a catch-all route that renders a NotFound component when a user navigates to any undefined path. The asterisk (*) syntax is used to match any unmatched URL.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Router, Route } from \"@solidjs/router\";\n\nimport Home from \"./Home\";\nimport About from \"./About\";\nimport NotFound from \"./NotFound\";\n\nconst App = () => (\n  <Router>\n    <Route path=\"/home\" component={Home} />\n    <Route path=\"/about\" component={About} />\n    <Route path=\"*404\" component={NotFound} />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying SolidStart Application to AWS\nDESCRIPTION: Command to deploy the SolidStart application to AWS using SST. The --stage parameter specifies the deployment environment.\n\nLANGUAGE: bash\nCODE:\n```\nsst@latest deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Accessing CSS Module Classes with Dashes in Solid\nDESCRIPTION: Demonstrates how to access CSS module class names that contain dashes using bracket notation. This is necessary because dot notation cannot be used with property names containing special characters.\n\nLANGUAGE: jsx\nCODE:\n```\nconst className = styles[\"foo-with-dash\"];\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SolidStart Project\nDESCRIPTION: Command to install the dependencies for a newly created SolidStart application after selecting a template and configuration options.\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Adding Base Styles to a Macaron Styled Component\nDESCRIPTION: Example showing how to add default styles to a button component using the base property in Macaron's styled API.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from \"@macaron-css/solid\";\n\nconst Button = styled(\"button\", {\n\tbase: {\n\t\tbackgroundColor: \"red\",\n\t\tborderRadius: \"10px\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic User Page with Parameters\nDESCRIPTION: This code creates a dynamic route for user pages that extracts the user ID from the URL parameters. It uses the useParams hook from solid-router to access the dynamic segment defined in the file path.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from \"@solidjs/router\";\n\nexport default function UserPage() {\n\tconst params = useParams();\n\treturn <div>User {params.id}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Event Handlers in Solid.js\nDESCRIPTION: Demonstrates how inline event handlers in JSX automatically benefit from type inference, eliminating the need for explicit type annotations while still providing type checking.\n\nLANGUAGE: tsx\nCODE:\n```\n<input\n\tonInput={(event) => {\n\t\tconsole.log(\"Input changed to\", event.currentTarget.value);\n\t}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Polling Data with refetch in Solid.js\nDESCRIPTION: Shows how to implement real-time data polling using the refetch method from createResource. This pattern is useful for applications requiring frequent data updates, such as financial tickers or monitoring dashboards.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createResource, onCleanup } from \"solid-js\"\n\nfunction StockPriceTicker() {\n  const [prices, { refetch }] = createResource(fetchStockPrices);\n\n  const timer = setInterval(() => {\n    refetch()\n  }, 1000);\n  onCleanup(() => clearInterval(timer))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Style Attribute Usage in Solid.js\nDESCRIPTION: Demonstrates the two ways to provide CSS styles in Solid.js: using a string with CSS properties or using an object where keys are CSS property names. The example shows both approaches with reactive state values.\n\nLANGUAGE: tsx\nCODE:\n```\n// string\n<div style={`color: green; height: ${state.height}px`} />\n\n// object\n<div style={{\n  color: \"green\",\n  height: state.height + \"px\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Code Coverage Package for Vitest\nDESCRIPTION: Command to install the @vitest/coverage-v8 package as a dev dependency. This package is required to enable code coverage collection in Vitest for Solid projects.\n\nLANGUAGE: shell\nCODE:\n```\n@vitest/coverage-v8\n```\n\n----------------------------------------\n\nTITLE: Applying Nested Layouts to Route Groups in Solid.js\nDESCRIPTION: Shows how to apply a nested layout component to a specific group of routes by passing it as the component prop to the parent route and nesting child routes within it.\n\nLANGUAGE: jsx\nCODE:\n```\n<Router>\n    <Route path=\"/users\" component={PageWrapper}>\n        <Route path=\"/\" component={Users} />\n        <Route path=\"/:id\" component={User} />\n    </Route>\n</Router>\n```\n\n----------------------------------------\n\nTITLE: Component File Structure for CSS in SolidStart\nDESCRIPTION: Shows the recommended file structure for organizing component files and their associated CSS files. This example demonstrates placing a component file (Card.tsx) alongside its CSS file (Card.css) in the same directory.\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/\n├── components/\n│   ├── Card.tsx\n│   ├── Card.css\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Tables in Solid Documentation\nDESCRIPTION: Example of how to format tables using Markdown syntax in Solid documentation. The example shows a simple two-column table with month and day entries.\n\nLANGUAGE: markdown\nCODE:\n```\n| Month | Day |\n| --- | --- |\n| January | 1 |\n| February | 2 |\n| March | 3 |\n|April | 4 |\n```\n\n----------------------------------------\n\nTITLE: Adding Language to Collections Script for File Generation\nDESCRIPTION: Instructions for updating the collections script to include the new language so internal files are automatically created.\n\nLANGUAGE: javascript\nCODE:\n```\nAdd the language to the `array` in `./scripts/collections/index.mjs` so internal files are created.\n```\n\n----------------------------------------\n\nTITLE: Installing SASS as a Development Dependency\nDESCRIPTION: Command to install SASS as a development dependency in your project. The specific command syntax depends on your package manager (npm, yarn, pnpm, etc.).\n\nLANGUAGE: bash\nCODE:\n```\nsass\n```\n\n----------------------------------------\n\nTITLE: Creating Context with Default Values in Solid\nDESCRIPTION: Example showing how to create a context with default values to avoid undefined types in TypeScript.\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataContext = createContext({ count: 0, name: \"\" });\n```\n\n----------------------------------------\n\nTITLE: Using Optional Chaining with Solid Signals\nDESCRIPTION: Demonstrates the use of optional chaining and Show component with callbacks as alternatives to control flow narrowing in Solid.\n\nLANGUAGE: tsx\nCODE:\n```\nreturn <div>{user()?.name}</div>;\n\n// Using `<Show>`:\n\nreturn (\n\t<div>\n\t\t<Show when={user()}>\n\t\t\t{(nonNullishUser) => <>{nonNullishUser().name}</>}\n\t\t</Show>\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Running Code in Development Mode with SolidJS\nDESCRIPTION: Shows how to conditionally execute code only in development mode by checking if DEV is defined. It also uses isServer to ensure the code only runs on the client-side.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DEV } from \"solid-js\"\nimport { isServer } from \"solid-js/web\"\n\nif (DEV && !isServer) {\n  console.log(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Cache Revalidation in SolidJS Router\nDESCRIPTION: Shows how to manually trigger revalidation of cached functions outside of actions, including implementation of polling for data refreshes.\n\nLANGUAGE: jsx\nCODE:\n```\nrevalidate([getTodos.key, getTodoByID.keyFor(id)])\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoLayout(){\n\t\n\tconst todos = createAsync(() => getTodos())\n\t\n\tonMount(() => {\n\t\t//30 second polling\n\t\tconst interval = setInterval(() => revalidate(getTodos.key),1000 * 30)\n\t\tonCleanup(() => clearInterval(interval))\n\t})\n\t\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Code in Markdown\nDESCRIPTION: Example showing how to create inline code formatting in Markdown by surrounding text with single backticks.\n\nLANGUAGE: markdown\nCODE:\n```\n`npm`\n```\n\n----------------------------------------\n\nTITLE: Updating a SolidJS Fork via Command Line\nDESCRIPTION: These commands demonstrate how to update a fork of the SolidJS repository using Git command line operations. The process involves checking out the main branch, pulling updates from the upstream repository, and pushing them to your fork.\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream main\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Importing and Type Definition for Solid.js render Function\nDESCRIPTION: Type definition for the render function in Solid.js. It takes a function that returns a JSX element and a mountable DOM element, and returns a dispose function.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render } from \"solid-js/web\"\nimport type { JSX } from \"solid-js\"\nimport type { MountableElement } from \"solid-js/web\"\n\nfunction render(\n  code: () => JSX.Element,\n  element: MountableElement\n): () => void\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Using getRequestEvent in Solid.js\nDESCRIPTION: Demonstrates how to import and use the getRequestEvent function to access the RequestEvent type and retrieve request context on the server.\n\nLANGUAGE: js\nCODE:\n```\nimport { getRequestEvent } from \"solid-js/web\"\nimport type { RequestEvent } from \"solid-js/web\"\n\nfunction getRequestEvent(): RequestEvent | undefined\n```\n\n----------------------------------------\n\nTITLE: Implementing a Catch-all Route for Blog Posts\nDESCRIPTION: This snippet demonstrates how to implement a catch-all route for blog posts that can handle any number of URL segments. It uses the useParams hook to extract the post parameter which contains all segments after the last valid segment.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from \"@solidjs/router\";\n\nexport default function BlogPage() {\n\tconst params = useParams();\n\treturn <div>Blog {params.post}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Style Component Usage in SolidJS\nDESCRIPTION: A simple example showing how to use the Style component to add CSS styling to the document head. This adds a black background color to the body element.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Style } from \"@solidjs/meta\";\n\n<Style>\n\t{`\n    body {\n      background-color: #000;\n    }\n  `}\n</Style>;\n```\n\n----------------------------------------\n\nTITLE: Using Info Asides in Solid Documentation\nDESCRIPTION: Example of how to create an info aside in Solid documentation using the triple colon syntax. Asides serve as callout boxes for related but not directly relevant information.\n\nLANGUAGE: markdown\nCODE:\n```\n:::info\n    content here\n:::\n```\n\n----------------------------------------\n\nTITLE: Initializing SST for a SolidStart Project\nDESCRIPTION: Command to initialize SST in an existing SolidStart project. This detects your SolidStart application and prepares it for AWS deployment.\n\nLANGUAGE: bash\nCODE:\n```\nsst@latest init\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Request Event in Solid.js\nDESCRIPTION: Shows how to get the request event by calling the getRequestEvent function, which provides access to the current server request context.\n\nLANGUAGE: js\nCODE:\n```\nimport { getRequestEvent } from \"solid-js/web\"\n\nconst event = getRequestEvent()\n```\n\n----------------------------------------\n\nTITLE: Using the useNavigate Hook for Programmatic Navigation in SolidJS\nDESCRIPTION: This example demonstrates using the useNavigate hook to perform conditional navigation in a SolidJS application. It redirects unauthorized users to the login page, replacing the current history entry.\n\nLANGUAGE: javascript\nCODE:\n```\nconst navigate = useNavigate();\n\nif (unauthorized) {\n\tnavigate(\"/login\", { replace: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DEV Constant in SolidJS (TypeScript)\nDESCRIPTION: Demonstrates how to import the DEV constant from SolidJS. DEV is an object that is defined in development builds and undefined in production builds.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DEV } from \"solid-js\"\n\nconst DEV: object | undefined\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Module Configuration for SolidStart\nDESCRIPTION: Special configuration required for Cloudflare deployment to enable async local storage support in SolidStart applications.\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({\n\tserver: {\n\t\tpreset: \"cloudflare_module\",\n\t\trollupConfig: {\n\t\t\texternal: [\"__STATIC_CONTENT_MANIFEST\", \"node:async_hooks\"],\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Forcing Component Re-render with Show Component\nDESCRIPTION: Shows how to force a component to re-render when routes share the same path match by using a keyed Show component. This is useful for animation or transition effects between routes.\n\nLANGUAGE: jsx\nCODE:\n```\n<Show when={params.something} keyed>\n\t<MyComponent />\n</Show>\n```\n\n----------------------------------------\n\nTITLE: Adding Route Configuration with JavaScript\nDESCRIPTION: This code demonstrates how to add custom route configuration to a component using the route export in JavaScript. It includes a preload function and exports a component that creates a layout for user pages.\n\nLANGUAGE: jsx\nCODE:\n```\nexport const route = {\n  preload() {\n    // define preload function\n  }\n};\n\nexport default function UsersLayout(props) {\n  return (\n    <div>\n      <h1>Users</h1>\n      {props.children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Index Parameter with the Index Component\nDESCRIPTION: An example showing how to access and use the index parameter in the render function of the Index component. This allows displaying both the item and its position in the array.\n\nLANGUAGE: tsx\nCODE:\n```\n<Index each={state.list} fallback={<div>Loading...</div>}>\n  {(item, index) => (\n    <div>\n      #{index} {item()}\n    </div>\n  )}\n</Index>\n```\n\n----------------------------------------\n\nTITLE: Adding Images with Alt Text in HTML\nDESCRIPTION: Example of how to add images to Solid documentation using HTML syntax with proper alt text for accessibility.\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"IMAGE.png\" alt=\"alt text here\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Active Links with the A Component\nDESCRIPTION: An example showing how to apply active and inactive classes to A component links based on the current location, providing visual feedback for navigation state.\n\nLANGUAGE: jsx\nCODE:\n```\n<A href=\"/users\" activeClass=\"underlined\" inactiveClass=\"default\">\n\tUsers\n</A>\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Layout Component in TypeScript\nDESCRIPTION: This snippet shows how to create a nested layout for blog routes using TypeScript. The component receives route section props and renders children components within a container div.\n\nLANGUAGE: tsx\nCODE:\n```\n// routes/blog.tsx\nimport { RouteSectionProps } from \"@solidjs/router\";\n\nexport default function BlogLayout(props: RouteSectionProps) {\n\treturn <div>{props.children}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Using 'on' with Solid.js Stores\nDESCRIPTION: Examples showing the incorrect and correct ways to use the 'on' function with Solid.js stores. With stores, you need to use an arrow function to access store properties as dependencies.\n\nLANGUAGE: typescript\nCODE:\n```\nconst [state, setState] = createStore({ a: 1, b: 2 });\n\n// this will not work\ncreateEffect(on(state.a, (v) => console.log(v)));\n\nsetState({ a: 3 }); // logs nothing\n\n// instead, use an arrow function\ncreateEffect(\n\ton(\n\t\t() => state.a,\n\t\t(v) => console.log(v)\n\t)\n);\n\nsetState({ a: 4 }); // logs 4\n```\n\n----------------------------------------\n\nTITLE: Basic useContext Usage in TypeScript\nDESCRIPTION: Demonstrates the basic usage of useContext to retrieve state and methods from a CounterContext.\n\nLANGUAGE: typescript\nCODE:\n```\nconst [state, { increment, decrement }] = useContext(CounterContext)\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in Middleware\nDESCRIPTION: Example of reading and setting cookies using Vinxi's helper functions. This demonstrates how to retrieve a theme cookie and set a secure session cookie with an expiration date.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\nimport { getCookie, setCookie } from \"vinxi/http\";\n\nexport default createMiddleware({\n\tonRequest: (event) => {\n\t\t// Reading a cookie\n\t\tconst theme = getCookie(event.nativeEvent, \"theme\");\n\n\t\t// Setting a secure session cookie with expiration\n\t\tsetCookie(event.nativeEvent, \"session\", \"abc123\", {\n\t\t\thttpOnly: true,\n\t\t\tsecure: true,\n\t\t\tmaxAge: 60 * 60 * 24, // 1 day\n\t\t});\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using classList for Conditional Class Application in Solid.js\nDESCRIPTION: This example demonstrates how to use the classList attribute to conditionally apply classes. The object passed to classList contains class names as keys and boolean expressions as values. When a value is true, the class is applied; when false, it is removed.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [current, setCurrent] = createSignal(\"foo\");\n\n<button\n\tclassList={{ \"selected\" : current() === \"foo\" }}\n\tonClick={() => setCurrent(\"foo\")}\n>\n\tfoo\n</button>;\n```\n\n----------------------------------------\n\nTITLE: Formatting Markdown Headings in Solid Docs\nDESCRIPTION: Example demonstrating how to create heading levels in Markdown using hash symbols. Shows both H1 (page title) and H2 (section) headings.\n\nLANGUAGE: markdown\nCODE:\n```\n# Solid documentation\n\n## Introduction\n```\n\n----------------------------------------\n\nTITLE: Importing and Using HttpStatusCode Component in SolidJS\nDESCRIPTION: Basic example of importing the HttpStatusCode component from @solidjs/start and using it to set a 404 status code for a page response during server-side rendering.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HttpStatusCode } from \"@solidjs/start\";\n\n<HttpStatusCode code={404} />;\n```\n\n----------------------------------------\n\nTITLE: Adding Items to an Array in a SolidJS Store\nDESCRIPTION: Demonstrates how to add a new task to the tasks array in a SolidJS store using the setState function with path syntax.\n\nLANGUAGE: jsx\nCODE:\n```\nconst addTask = (text) => {\n\tsetState(\"tasks\", state.tasks.length, {\n\t\tid: state.tasks.length,\n\t\ttext,\n\t\tcompleted: false,\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Type Definition of Dynamic Component in Solid JS\nDESCRIPTION: This code snippet shows how to import the Dynamic component from Solid JS and defines its TypeScript interface. The Dynamic component accepts a generic type T for props and includes optional children and component properties.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dynamic } from \"solid-js/web\"\nimport type { JSX } from \"solid-js\"\n\nfunction Dynamic<T>(\n\tprops: T & {\n\t\tchildren?: any\n\t\tcomponent?: Component<T> | string | keyof JSX.IntrinsicElements\n\t}\n): () => JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Accessing event.locals in Route Components\nDESCRIPTION: Example of accessing middleware-stored data in a route component using getRequestEvent. This demonstrates server-side queries that can retrieve and use data stored in event.locals.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getRequestEvent } from \"solid-js/web\";\nimport { query, createAsync } from \"@solidjs/router\";\n\nconst getUser = query(async () => {\n\t\"use server\";\n\tconst event = getRequestEvent();\n\treturn {\n\t\tname: event?.locals?.user?.name,\n\t\tgreeting: event?.locals?.sayHello(),\n\t};\n}, \"user\");\n\nexport default function Page() {\n\tconst user = createAsync(() => getUser());\n\n\treturn (\n\t\t<div>\n\t\t\t<p>Name: {user()?.name}</p>\n\t\t\t<button onClick={() => alert(user()?.greeting)}>Say Hello</button>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Heading Hierarchy Guidelines for Solid Docs\nDESCRIPTION: Guidelines on how to use different heading levels (H1-H6) in Solid documentation with explanations of when to use each level.\n\nLANGUAGE: markdown\nCODE:\n```\nH1: Title\nH2: Main sections\nH3: Subsections\nH4: Small details you would like to call out\nH5/H6: Advanced concepts\n```\n\n----------------------------------------\n\nTITLE: Setting 404 Status Code for Missing Resources in Dynamic Routes\nDESCRIPTION: Complex example showing how to handle 404 status codes for missing resources in dynamic routes by combining HttpStatusCode with ErrorBoundary and deferStream. This pattern is useful when fetching data with a parameter that might not exist.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Show, ErrorBoundary } from \"solid-js\";\nimport { query, createAsync } from \"@solidjs/router\";\nimport { HttpStatusCode } from \"@solidjs/start\";\n\nconst getHouse = query(async (house: string) => {\n\tif (house != \"gryffindor\") {\n\t\tthrow new Error(\"House not found\");\n\t}\n\treturn house;\n}, \"house\");\n\nexport default function House(props: { name: string }) {\n\tconst house = createAsync(() => getHouse(props.name), { deferStream: true });\n\treturn (\n\t\t<ErrorBoundary\n\t\t\tfallback={(e) => (\n\t\t\t\t<Show when={e.message === \"House not found\"}>\n\t\t\t\t\t<HttpStatusCode code={404} />\n\t\t\t\t</Show>\n\t\t\t)}\n\t\t>\n\t\t\t<div>{house()}</div>\n\t\t</ErrorBoundary>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Query Revalidation with SolidJS Router\nDESCRIPTION: Example showing how to revalidate a getTodo query after updating a todo item. This snippet demonstrates using the revalidate function inside an action to invalidate a specific cache key.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { action, revalidate } from \"@solidjs/router\";\n\nconst updateTodo = action(async (todo: Todo) => {\n\tawait putTodo(todo.id, todo);\n\t\n  return revalidate(getTodo.keyFor());\n});\n```\n\n----------------------------------------\n\nTITLE: Using Signals as Refs in Solid\nDESCRIPTION: Demonstrates using signals as refs, which is useful when the element may not exist when the component first renders or might be removed from the DOM conditionally.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n\tconst [show, setShow] = createSignal(false)\n\tlet element!: HTMLParagraphElement\n\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={() => setShow((isShown) => !isShown)}>Toggle</button>\n\n\t\t\t<Show when={show()}>\n\t\t\t\t<p ref={element}>This is the ref element</p>\n\t\t\t</Show>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware for API Endpoints in Solid.js\nDESCRIPTION: This middleware implements Cross-Origin Resource Sharing (CORS) for API endpoints. It checks the origin against a trusted list and handles both preflight OPTIONS requests and normal requests by setting appropriate Access-Control headers.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\nimport { json } from \"@solidjs/router\";\n\nconst TRUSTED_ORIGINS = [\"https://my-app.com\", \"https://another-app.com\"];\n\nexport default createMiddleware({\n\tonBeforeResponse: (event) => {\n\t\tconst { request, response } = event;\n\n\t\tresponse.headers.append(\"Vary\", \"Origin, Access-Control-Request-Method\");\n\n\t\tconst origin = request.headers.get(\"Origin\");\n\t\tconst requestUrl = new URL(request.url);\n\t\tconst isApiRequest = requestUrl && requestUrl.pathname.startsWith(\"/api\");\n\n\t\tif (isApiRequest && origin && TRUSTED_ORIGINS.includes(origin)) {\n\t\t\t// Handle preflight requests.\n\t\t\tif (\n\t\t\t\trequest.method === \"OPTIONS\" &&\n\t\t\t\trequest.headers.get(\"Access-Control-Request-Method\")\n\t\t\t) {\n\t\t\t\t// Preflight requests are standalone, so we immediately send a response.\n\t\t\t\treturn json(null, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"Access-Control-Allow-Origin\": origin,\n\t\t\t\t\t\t\"Access-Control-Allow-Methods\": \"OPTIONS, POST, PUT, PATCH, DELETE\",\n\t\t\t\t\t\t\"Access-Control-Allow-Headers\": \"Authorization, Content-Type\",\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Handle normal requests.\n\t\t\tresponse.headers.set(\"Access-Control-Allow-Origin\", origin);\n\t\t}\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using redirect Function in Data Operations\nDESCRIPTION: This example shows how to use the redirect function to navigate within data operations. It creates a logout action that removes a token from localStorage and redirects to the home page.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { action, redirect } from \"@solidjs/router\";\n\nconst logout = action(async () => {\n\tlocalStorage.remove(\"token\");\n\tthrow redirect(\"/\");\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Solid Router with Package Manager\nDESCRIPTION: Command to install the Solid Router package using your preferred package manager.\n\nLANGUAGE: shell\nCODE:\n```\n@solidjs/router\n```\n\n----------------------------------------\n\nTITLE: Initializing Vercel Deployment via CLI\nDESCRIPTION: Command to start the Vercel deployment process from the command line. When executed in a project directory, this will prompt for configuration options and begin the deployment process.\n\nLANGUAGE: bash\nCODE:\n```\nvercel\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in SolidStart Config\nDESCRIPTION: Configuration to register middleware in SolidStart by specifying the middleware file path in app.config.ts. This is required for SolidStart to recognize and use the middleware.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({\n\tmiddleware: \"src/middleware/index.ts\",\n});\n```\n\n----------------------------------------\n\nTITLE: Guidelines for Approachable Writing in Solid Docs\nDESCRIPTION: Examples demonstrating the preferred direct approach to writing documentation with active voice and verb-first instructions for how-to content.\n\nLANGUAGE: markdown\nCODE:\n```\n- Do: Visit Solid's homepage.\n- Don't: We're going to visit Solid's homepage.\n```\n\n----------------------------------------\n\nTITLE: Accessing Items with <Index> Component in Solid.js\nDESCRIPTION: Example showing how to access item properties with the <Index> component. Note that the item is a signal that must be called as a function to retrieve its value.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Index } from \"solid-js\"\n\n<Index each={data()}>\n\t{(item, index) => (\n\t\t<li>\n\t\t\t{item().name} - {item().completed}\n\t\t</li>\n\t)}\n</Index>\n```\n\n----------------------------------------\n\nTITLE: Using For Component with Index Parameter\nDESCRIPTION: Demonstration of using the index function parameter in the render callback. This allows access to the current item's index in the array while maintaining reactivity.\n\nLANGUAGE: jsx\nCODE:\n```\n<For each={state.list} fallback={<div>Loading...</div>}>\n\t{(item, index) => (\n\t\t<div>\n\t\t\t#{index()} {item}\n\t\t</div>\n\t)}\n</For>\n```\n\n----------------------------------------\n\nTITLE: Comprehensive TypeScript Configuration for Solid\nDESCRIPTION: Complete tsconfig.json configuration optimized for Solid projects with TypeScript, including all necessary compiler options.\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"compilerOptions\": {\n\t\t\"strict\": true,\n\t\t\"target\": \"ESNext\",\n\t\t\"module\": \"ESNext\",\n\t\t\"moduleResolution\": \"node\",\n\t\t\"allowSyntheticDefaultImports\": true,\n\t\t\"esModuleInterop\": true,\n\t\t\"jsx\": \"preserve\",\n\t\t\"jsxImportSource\": \"solid-js\",\n\t\t\"types\": [\"vite/client\"],\n\t\t\"noEmit\": true,\n\t\t\"isolatedModules\": true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Styling A Component Links with Active States\nDESCRIPTION: This example shows how to style links based on their active state using the activeClass and inactiveClass props with the A component. It also demonstrates using the end prop to match exact routes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { A } from \"@solidjs/router\";\n\nfunction Navbar() {\n\treturn (\n\t\t<nav>\n\t\t\t<A href=\"/\" end={true}>\n\t\t\t\tHome\n\t\t\t</A>\n\t\t\t<A\n\t\t\t\thref=\"/login\"\n\t\t\t\tactiveClass=\"text-blue-900\"\n\t\t\t\tinactiveClass=\"text-blue-500\"\n\t\t\t>\n\t\t\t\tLogin\n\t\t\t</A>\n\t\t</nav>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Session Password with OpenSSL\nDESCRIPTION: Command to generate a secure, random 32-character password for session encryption. This password should be stored as an environment variable for security.\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: QuickLinks Component Usage in Solid\nDESCRIPTION: Example of using the QuickLinks component to create a responsive grid of resource links. The component displays links to the tutorial, templates, ecosystem, and contribution resources with titles, icons, and descriptions.\n\nLANGUAGE: jsx\nCODE:\n```\n<div class=\"flex flex-col md:grid md:grid-cols-2 md:grid-rows-2  gap-3\">\n\t<QuickLinks\n\t\ttitle=\"Tutorial\"\n\t\thref=\"https://www.solidjs.com/tutorial/introduction_basics\"\n\t\ticon=\"learn\"\n\t>\n\t\tLearn the basics of Solid through this interactive tutorial.\n\t</QuickLinks>\n\t<QuickLinks\n\t\ttitle=\"Templates\"\n\t\thref=\"https://github.com/solidjs/templates\"\n\t\ticon=\"template\"\n\t>\n\t\tStart your first project with a template that fits your needs.\n\t</QuickLinks>\n\t<QuickLinks\n\t\ttitle=\"Ecosystem\"\n\t\thref=\"https://www.solidjs.com/ecosystem\"\n\t\ticon=\"community\"\n\t>\n\t\tExplore the Solid ecosystem and find useful tools and libraries.\n\t</QuickLinks>\n\t<QuickLinks\n\t\ttitle=\"Contribute\"\n\t\thref=\"https://github.com/solidjs/solid-docs-next\"\n\t\ticon=\"learn\"\n\t>\n\t\tHelp improve Solid by contributing to the documentation.\n\t</QuickLinks>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using reload Helper to Revalidate Queries in SolidJS Router\nDESCRIPTION: This snippet demonstrates how to use the reload helper in a SolidJS action to invalidate and refire a query after updating data. It imports the action and reload functions, updates a todo item, and then revalidates the related query using its cache key.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { action, reload } from \"@solidjs/router\";\nimport { putTodo, getTodo } from \"../db\";\n\nconst updateTodo = action(async (todo: Todo) => {\n\tawait putTodo(todo.id, todo);\n\t\n  return reload({ revalidate: getTodo.keyFor(id) });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @solidjs/meta with Package Manager\nDESCRIPTION: Command to install the @solidjs/meta package using a preferred package manager like npm, yarn, or pnpm.\n\nLANGUAGE: bash\nCODE:\n```\n@solidjs/meta\n```\n\n----------------------------------------\n\nTITLE: Combining Suspense with Show in Solid.js\nDESCRIPTION: Example of using both Suspense and Show components together, which negates some of the performance benefits of Suspense since DOM nodes aren't created until the resource resolves.\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponentWithSuspenseAndShow = () => {\n\tconst [profile] = createResource(async () => {\n\t\t/* fetcher code here */\n\t})\n\treturn (\n\t\t<Suspense fallback={<div>fetching user data</div>}>\n\t\t\t<Show when={profile()}>\n\t\t\t\t<div>{profile().name}</div>\n\t\t\t\t<div>{profile().email}</div>\n\t\t\t</Show>\n\t\t</Suspense>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Route Data Files for Data Fetching Separation\nDESCRIPTION: Demonstrates how to create a dedicated [route].data.js file that exports preload functions and data wrappers, allowing importing data functions without loading route components.\n\nLANGUAGE: jsx\nCODE:\n```\n// src/pages/users/[id].data.js\nimport { query } from \"@solidjs/router\";\n\nexport const getUser = query(async (id) => {\n\treturn (await fetch(`https://swapi.tech/api/people/${id}/`)).json();\n}, \"getUser\");\n\nexport function preloadUser({ params, location, intent }) {\n\treturn getUser(params.id);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Page Components in JSX\nDESCRIPTION: JSX components for adding edit page and issue reporting links to the documentation page. These components help users contribute to documentation improvement.\n\nLANGUAGE: jsx\nCODE:\n```\n<EditPageLink />\n<PageIssueLink />\n```\n\n----------------------------------------\n\nTITLE: Directive Function Signature in Solid\nDESCRIPTION: Defines the function signature for custom directives in Solid. Directives operate at a lower level than props or attributes, providing fine-grained control over DOM elements and enabling multiple behaviors on a single element.\n\nLANGUAGE: typescript\nCODE:\n```\nfunction directive(element: Element, accessor: () => any): void\n\n```\n\n----------------------------------------\n\nTITLE: Basic Routing Example with Switch and Match\nDESCRIPTION: Example of using Switch and Match components to implement basic routing in a Solid.js application. It renders different components based on the current route state and shows a 'Not Found' fallback for unmatched routes.\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch fallback={<div>Not Found</div>}>\n\t<Match when={state.route === \"home\"}>\n\t\t<Home />\n\t</Match>\n\t<Match when={state.route === \"settings\"}>\n\t\t<Settings />\n\t</Match>\n</Switch>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of renderToStringAsync in Solid.js\nDESCRIPTION: A simple example showing how to use renderToStringAsync to render a Solid.js App component to string. The function returns a Promise that resolves to the rendered HTML string.\n\nLANGUAGE: typescript\nCODE:\n```\nconst html = await renderToStringAsync(App)\n```\n\n----------------------------------------\n\nTITLE: Configuring SolidStart for AWS Lambda Streaming\nDESCRIPTION: Configuration update for app.config.ts to set the server preset to AWS Lambda streaming, which is required for proper deployment to AWS Lambda.\n\nLANGUAGE: typescript\nCODE:\n```\nserver: {\n   preset: \"aws-lambda-streaming\"\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Bash command to change directory to the newly created project folder.\n\nLANGUAGE: bash\nCODE:\n```\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Routes for Pre-rendering in SolidStart\nDESCRIPTION: This snippet demonstrates how to configure SolidStart to pre-render specific routes at build time by providing an array of route paths to the routes option in the prerender configuration.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({\n  server: {\n    prerender: {\n      routes: [\"/\", \"/about\"]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Optional Parameters in SolidJS Router\nDESCRIPTION: Shows how to define optional parameters in routes by adding a question mark to the parameter name. The example matches both 'stories' and 'stories/123' paths.\n\nLANGUAGE: jsx\nCODE:\n```\n// Matches stories and stories/123 but not stories/123/comments\n<Route path=\"/stories/:id?\" component={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Using JSX as a Value in Solid\nDESCRIPTION: Demonstrates how JSX can be assigned to a variable and used like a DOM element created with document.createElement, allowing direct access to the element without waiting for it to be attached to the DOM.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n\tconst myElement = <p>My Element</p>\n\n\treturn <div>{myElement}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Session Data in Solid\nDESCRIPTION: Server function for removing all theme preference data from the session. This function calls the clear method to reset the session.\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function clearThemeSession() {\n\t\"use server\";\n\tconst session = await useThemeSession();\n\tawait session.clear();\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Re-render with Show Component in SolidJS Routes\nDESCRIPTION: Example of using the keyed Show component to force re-rendering when parameters change but the path remains the same.\n\nLANGUAGE: jsx\nCODE:\n```\n<Show when={params.something} keyed>\n  <MyComponent />\n</Show>\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Properties in Solid.js\nDESCRIPTION: Shows how to modify response headers and status code using the response property of the request event. This is used to control the server's HTTP response.\n\nLANGUAGE: js\nCODE:\n```\nimport { getRequestEvent } from \"solid-js/web\"\n\nconst event = getRequestEvent();\nif (event) {\n\tevent.response.headers.append(\"Set-Cookie\", \"foo=hello\");\n\tevent.response.status = 201;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Testing Solid Applications\nDESCRIPTION: TypeScript configuration that adds @testing-library/jest-dom to compiler options types to enable DOM-specific matchers in tests.\n\nLANGUAGE: json\nCODE:\n```\n  \"compilerOptions\": {\n    // ...\n    \"jsx\": \"preserve\",\n    \"jsxImportSource\": \"solid-js\",\n    \"types\": [\"vite/client\", \"@testing-library/jest-dom\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Module Files in Solid\nDESCRIPTION: Creates a CSS module file with scoped class names. CSS modules use the .module.css extension by default and allow styles to be encapsulated within components to prevent global conflicts.\n\nLANGUAGE: css\nCODE:\n```\n/* styles.module.css */\n.foo {\n\tcolor: red;\n}\n.bar {\n\tbackground-color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Signals Without Batching in Solid.js\nDESCRIPTION: Shows how updating signals individually without batch causes the downstream memo to recompute after each update, leading to multiple recalculations.\n\nLANGUAGE: typescript\nCODE:\n```\nsetUp1(4) // recomputes down, outputs 9\nsetUp2(5) // recomputes down, outputs 12\nsetUp3(6) // recomputes down, outputs 15\n```\n\n----------------------------------------\n\nTITLE: Updating HTML for TypeScript Entry Point\nDESCRIPTION: HTML modification to change the entry point from index.jsx to index.tsx in a Solid project that uses TypeScript.\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n\t<head>\n\t\t<!-- ... -->\n\t</head>\n\t<body>\n\t\t<noscript>You need to enable JavaScript to run this app.</noscript>\n\t\t<div id=\"root\"></div>\n\t\t<script src=\"/src/index.tsx\" type=\"module\"></script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Programmatically Invoking Actions with useAction in SolidJS\nDESCRIPTION: This example shows how to invoke actions programmatically in SolidJS without using a form element. It demonstrates using the useAction hook to call an action function directly in response to events like button clicks.\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/routes/index.tsx\nimport { createSignal } from \"solid-js\";\nimport { action, useAction } from \"@solidjs/router\";\n\nconst addPost = action(async (title: string) => {\n\tawait fetch(\"https://my-api.com/posts\", {\n\t\tmethod: \"POST\",\n\t\tbody: JSON.stringify({ title }),\n\t});\n}, \"addPost\");\n\nexport default function Page() {\n\tconst [title, setTitle] = createSignal(\"\");\n\tconst addPostAction = useAction(addPost);\n\treturn (\n\t\t<div>\n\t\t\t<input value={title()} onInput={(e) => setTitle(e.target.value)} />\n\t\t\t<button onClick={() => addPostAction(title())}>Add Post</button>\n\t\t</div>\n\t);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/routes/index.jsx\nimport { createSignal } from \"solid-js\";\nimport { action, useAction } from \"@solidjs/router\";\n\nconst addPost = action(async (title) => {\n\tawait fetch(\"https://my-api.com/posts\", {\n\t\tmethod: \"POST\",\n\t\tbody: JSON.stringify({ title }),\n\t});\n}, \"addPost\");\n\nexport default function Page() {\n\tconst [title, setTitle] = createSignal(\"\");\n\tconst addPostAction = useAction(addPost);\n\treturn (\n\t\t<div>\n\t\t\t<input value={title()} onInput={(e) => setTitle(e.target.value)} />\n\t\t\t<button onClick={() => addPostAction(title())}>Add Post</button>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Path Parameters in SolidJS Router\nDESCRIPTION: Complex example demonstrating parameter validation using matchFilters. Shows how to validate parameters against enum values, regular expressions, and custom functions.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nconst User = import(\"./pages/User\");\n\nconst filters = {\n  parent: [\"mom\", \"dad\"], // allow enum values\n  id: /^\\d+$/, // only allow numbers\n  withHtmlExtension: (v: string) => v.length > 5 && v.endsWith(\".html\"), // we want an `*.html` extension\n};\n\nrender(() => (\n  <Router>\n    <Route\n      path=\"/users/:parent/:id/:withHtmlExtension\"\n      component={User}\n      matchFilters={filters}\n    />\n  </Router>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using Variables in LESS\nDESCRIPTION: Example showing how to declare and use variables in LESS stylesheets. Variables help reduce redundancy and make style maintenance easier.\n\nLANGUAGE: less\nCODE:\n```\n//styles.less\n@plainred: red;\n@plainblue: blue;\n.foo {\n\tcolor: @plainred;\n}\n.bar {\n\tbackground-color: @plainblue;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Meta Component in Solid\nDESCRIPTION: Basic example of importing the Meta component from @solidjs/meta and using it to add a description meta tag to the page.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Meta } from \"@solidjs/meta\";\n\n<Meta name=\"description\" content=\"My site description\" />;\n```\n\n----------------------------------------\n\nTITLE: Testing Effects with testEffect in SolidJS\nDESCRIPTION: Shows how to test asynchronous effects using the testEffect function, which provides a done callback to signal when the test is complete and handles error propagation.\n\nLANGUAGE: ts\nCODE:\n```\nconst [value, setValue] = createSignal(0)\nreturn testEffect(done =>\n  createEffect((run: number = 0) => {\n    if (run === 0) {\n      expect(value()).toBe(0)\n      setValue(1)\n    } else if (run === 1) {\n      expect(value()).toBe(1)\n      done()\n    }\n    return run + 1\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring zerops.yml for SSR Solid Applications\nDESCRIPTION: YAML configuration for the zerops.yml file to build and deploy SSR Solid applications. It specifies build commands, files to deploy, and runtime configuration including the HTTP port.\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: nodejs@latest\n      buildCommands:\n        - pnpm i\n        - pnpm build\n      deployFiles:\n        - .output\n        - node_modules\n        - public\n        - package.json\n    run:\n      base: nodejs@latest\n      ports:\n        - port: 3000\n          httpSupport: true\n      start: pnpm start\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Query String with useLocation in Solid Router\nDESCRIPTION: This snippet demonstrates how to access the raw query string directly using the useLocation primitive from Solid Router. It retrieves the entire search string including the question mark prefix.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLocation } from \"@solidjs/router\";\n\nexport const App = () => {\n\tconst location = useLocation();\n\n\treturn (\n\t\t<div>\n\t\t\t<span>Query String: {location.search}</span>\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Using For Component with Signal Functions\nDESCRIPTION: Example showing how to use a function that returns a list as the each prop. This pattern is useful when the list depends on reactive state.\n\nLANGUAGE: jsx\nCODE:\n```\n<For each={stateSignal()}>{(item) => <div>{item}</div>}</For>\n```\n\n----------------------------------------\n\nTITLE: Independent Dependency Tracking in Nested Solid.js Effects\nDESCRIPTION: Demonstrates how nested effects track dependencies independently. When the count signal changes, only the inner effect runs, not the outer effect.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createEffect } from \"solid-js\";\n\nconst [count, setCount] = createSignal(0);\n\ncreateEffect(() => {\n\tconsole.log(\"Outer effect starts\");\n\tcreateEffect(() => console.log(count())); // when count changes, only this effect will run\n\tconsole.log(\"Outer effect ends\");\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Submissions with useSubmission in SolidJS Router\nDESCRIPTION: Demonstrates how to use the optional filter function parameter in useSubmission to conditionally process submissions based on form data content.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSubmission } from \"@solidjs/router\";\n\nfunction Component() {\n  const submission = useSubmission(postNameAction, ([formData]) => {\n    const name = formData.get(\"name\") ?? \"\";\n\n    return name === \"solid\";\n  });\n\n    return (\n      <form action={postNameAction} method=\"post\">\n          <input type=\"text\" name=\"name\" />\n          <button type=\"submit\">\n              {submission.pending ? \"Adding...\" : \"Add\"}\n          </button>\n      </form>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Defining the batch Function in Solid.js\nDESCRIPTION: Shows the API signature for the batch function, which takes a function as an argument and returns the result of that function while batching reactive updates.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { batch } from \"solid-js\"\n\nfunction batch<T>(fn: () => T): T\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML for Node.js SSR Deployment on Zerops\nDESCRIPTION: YAML configuration to create a Zerops project with a Node.js v20 service for SSR applications. This sets up a project with a Node.js service that is accessible via a subdomain.\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: recipe-solidjs\n\nservices:\n  - hostname: app\n    type: nodejs@20\n    enableSubdomainAccess: true\n```\n\n----------------------------------------\n\nTITLE: Configuring zerops.yml for Static Solid Applications\nDESCRIPTION: YAML configuration for the zerops.yml file to build and deploy static Solid applications. It specifies build commands and defines the dist directory for deployment on a static hosting service.\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: nodejs@latest\n      buildCommands:\n        - pnpm i\n        - pnpm build\n      deployFiles:\n        - dist/~\n    run:\n      base: static\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Components in Solid.js\nDESCRIPTION: Demonstrates how to create generic components in Solid.js. Since Component types cannot be used with generics, this example shows how to explicitly type generics for both arrow functions and function declarations.\n\nLANGUAGE: tsx\nCODE:\n```\n// For arrow functions, the syntax <T> by itself is invalid in TSX because it could be confused with JSX.\nconst MyGenericComponent = <T extends unknown>(\n\tprops: MyProps<T>\n): JSX.Element => {\n\t/* ... */\n};\n\n// Using a function declaration for a generic component\nfunction MyGenericComponent<T>(props: MyProps<T>): JSX.Element {\n\t/* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Typing Custom Directives with Directives Interface\nDESCRIPTION: Example of creating a custom directive and typing it using the Directives interface in Solid's JSX namespace.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction model(\n\telement: Element, // directives can be used on any HTML and SVG element\n\tvalue: Accessor<Signal<string>> // second param will always be an accessor in case value being reactive\n) {\n\tconst [field, setField] = value();\n\tcreateRenderEffect(() => (element.value = field()));\n\telement.addEventListener(\"input\", (e) => {\n\t\tconst value = (e.target as HTMLInputElement).value;\n\t\tsetField(value);\n\t});\n}\n\ndeclare module \"solid-js\" {\n\tnamespace JSX {\n\t\tinterface Directives {\n\t\t\tmodel: Signal<string>; // Corresponds to `use:model`\n\t\t}\n\t}\n}\n\n// Usage\nlet [name, setName] = createSignal(\"\");\n<input type=\"text\" use:model={[name, setName]} />;\n```\n\n----------------------------------------\n\nTITLE: Running Solid Docs Development Server\nDESCRIPTION: Command to start the local development server for the Solid documentation site, which will be accessible at localhost:3000 or the next available port.\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Nested routes with parent component limitation\nDESCRIPTION: Shows how nesting routes with a parent component works, demonstrating the limitation where only the innermost route becomes its own route.\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/users\" component={Users}>\n\t<Route path=\"/:id\" component={User} />\n</Route>\n```\n\n----------------------------------------\n\nTITLE: Importing and Defining createSelector Function in TypeScript\nDESCRIPTION: Function signature for createSelector which creates a parameterized derived boolean signal that compares keys against a source signal value.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSelector } from \"solid-js\"\n\nfunction createSelector<T, U>(\n\tsource: () => T,\n\tfn?: (a: U, b: T) => boolean\n): (key: U) => boolean\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Page Controls in JSX\nDESCRIPTION: This code snippet shows the implementation of page controls for the documentation site, including links to edit the current page and report issues with the page content.\n\nLANGUAGE: jsx\nCODE:\n```\n<EditPageLink />\n<PageIssueLink />\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in Solid.js Entry File\nDESCRIPTION: Code for importing the CSS file with Tailwind directives into the main Solid.js entry file.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\"\nimport App from \"./App\"\nimport \"./index.css\"\n\nrender(() => <App />, document.getElementById('root') as HTMLElement);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Context Consumer Hook\nDESCRIPTION: Shows how to create a custom hook for accessing context values, which improves code readability and helps with reuse across components.\n\nLANGUAGE: jsx\nCODE:\n```\nexport function useCounter() {\n\treturn useContext(CounterContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Project Default in .firebaserc\nDESCRIPTION: Configuration file that associates your local project with your Firebase project ID. Replace the placeholder with your actual Firebase project ID.\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"projects\": {\n    \"default\": \"<YOUR_FIREBASE_PROJECT_ID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM for Solid Docs\nDESCRIPTION: Command to install all dependencies for the Solid documentation project using the PNPM package manager.\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Nested routes with empty path for parent route\nDESCRIPTION: Shows how to use an empty path to define a parent route while maintaining a nested structure for related routes.\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/users\">\n  <Route path=\"/\" component={Users} />\n  <Route path=\"/:id\" component={User} />\n</Route>\n```\n\n----------------------------------------\n\nTITLE: Advanced Dynamic classList Usage in Solid\nDESCRIPTION: Examples of more complex classList usage patterns, including dynamic class names with signal expressions and managing a reactive class list with signals.\n\nLANGUAGE: tsx\nCODE:\n```\n// Dynamic class name and value\n<div classList={{ [className()]: classOn() }} />\n\n// Signal class list\nconst [classes, setClasses] = createSignal({})\nsetClasses((c) => ({ ...c, active: true }))\n<div classList={classes()} />\n```\n\n----------------------------------------\n\nTITLE: Basic useMatch Implementation in JavaScript\nDESCRIPTION: Demonstrates basic usage of useMatch function with a single path accessor. It creates a Memo that checks if the current path matches the provided href, used to toggle an active class on a div element.\n\nLANGUAGE: javascript\nCODE:\n```\nconst match = useMatch(() => props.href);\n\nreturn <div classList={{ active: Boolean(match()) }} />;\n```\n\n----------------------------------------\n\nTITLE: Using Inline Styling with Double Curly Braces in JSX\nDESCRIPTION: An example showing how to apply inline styles to a button element using double curly braces syntax. This allows passing JavaScript objects directly as style properties.\n\nLANGUAGE: jsx\nCODE:\n```\n<button style={{\n\tcolor: 'red',\n\tfont-size: '2rem',\n\t}}>\n  Click me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Separate Data Files for Preload Functions\nDESCRIPTION: Shows a pattern for better code organization by separating preload functions into dedicated data files, allowing imports of data functions without loading the entire route component.\n\nLANGUAGE: js\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { Route } from \"@solidjs/router\";\nimport preloadUser from \"./pages/users/[id].data.js\";\nconst User = lazy(() => import(\"/pages/users/[id].js\"));\n\n// In the Route definition\n<Route path=\"/users/:id\" component={User} preload={preloadUser} />;\n```\n\n----------------------------------------\n\nTITLE: Named Wildcard Routes in SolidJS Router\nDESCRIPTION: Shows how to expose the wild part of the path to the component as a named parameter using the asterisk notation.\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"foo/*any\" component={Foo} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Defining the For Component in TypeScript\nDESCRIPTION: TypeScript declaration for the For component, showing its generic type signature and interface definition. It takes an array to iterate over, an optional fallback element, and a render function for each item.\n\nLANGUAGE: ts\nCODE:\n```\nimport { For } from \"solid-js\"\nimport type { JSX } from \"solid-js\"\n\nfunction For<T, U extends JSX.Element>(props: {\n\teach: readonly T[]\n\tfallback?: JSX.Element\n\tchildren: (item: T, index: () => number) => U\n}): () => U[]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using catchError Function in Solid.js\nDESCRIPTION: This code demonstrates how to import and use the catchError function from Solid.js. The function wraps a try function with an error handler that fires when errors occur within that scope. Only the nearest error handler executes, and errors can be rethrown to trigger handlers higher in the component tree.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { catchError } from \"solid-js\"\n\nfunction catchError<T>(tryFn: () => T, onError: (err: any) => void): T\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Parameters in Solid Router\nDESCRIPTION: Defining optional route parameters by adding a question mark to the parameter name, allowing the route to match both with and without the parameter.\n\nLANGUAGE: jsx\nCODE:\n```\n// Matches stories and stories/123 but not stories/123/comments\n<Route path=\"/stories/:id?\" component={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Installing Zerops CLI on Windows\nDESCRIPTION: PowerShell command to install the Zerops CLI tool on Windows systems using the Invoke-RestMethod cmdlet and immediate execution.\n\nLANGUAGE: powershell\nCODE:\n```\nirm https://zerops.io/zcli/install.ps1 | iex\n```\n\n----------------------------------------\n\nTITLE: Defining the Suspense Component in Solid.js\nDESCRIPTION: Type definition for the Suspense component in Solid.js, which takes fallback and children props to handle asynchronous rendering states.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from \"solid-js\"\nimport type { JSX } from \"solid-js\"\n\nfunction Suspense(props: {\n\tfallback?: JSX.Element\n\tchildren: JSX.Element\n}): JSX.Element\n\n```\n\n----------------------------------------\n\nTITLE: Control Flow Narrowing with Standard JSX\nDESCRIPTION: Example of control flow-based narrowing in standard JSX where a conditional check refines the type of a value.\n\nLANGUAGE: tsx\nCODE:\n```\nconst user: User | undefined = maybeUser();\nreturn <div>{user && user.name}</div>;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SuspenseList with Suspense Components\nDESCRIPTION: Demonstrates how to use SuspenseList to coordinate multiple Suspense components. This example shows a profile page with details, timeline, and trivia sections that load with coordinated suspense states.\n\nLANGUAGE: tsx\nCODE:\n```\n<SuspenseList revealOrder=\"forwards\" tail=\"collapsed\">\n\t<ProfileDetails user={resource.user} />\n\t<Suspense fallback={<h2>Loading posts...</h2>}>\n\t\t<ProfileTimeline posts={resource.posts} />\n\t</Suspense>\n\t<Suspense fallback={<h2>Loading fun facts...</h2>}>\n\t\t<ProfileTrivia trivia={resource.trivia} />\n\t</Suspense>\n</SuspenseList>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Derived Signal in Solid.js\nDESCRIPTION: This example shows how to create a derived signal that depends on another signal named 'count'. The function 'double' will be re-executed whenever the 'count' signal changes, producing a new calculated value that is twice the count.\n\nLANGUAGE: javascript\nCODE:\n```\nconst double = () => count() * 2;\n```\n\n----------------------------------------\n\nTITLE: Multiple Paths in SolidJS Router\nDESCRIPTION: Demonstrates how to define multiple paths for a single route using an array. This allows a component to remain mounted when switching between matching locations.\n\nLANGUAGE: jsx\nCODE:\n```\n// Navigating from login to register does not cause the Login component to re-render\n<Route path={[\"login\", \"register\"]} component={Login} />\n```\n\n----------------------------------------\n\nTITLE: Registering Service Worker in SolidJS Entry Client\nDESCRIPTION: This code demonstrates how to register a service worker in a SolidJS application. The registration is added to the entry-client.tsx file and only runs in production mode. The service worker file should be placed in the public directory to be accessible at the root URL.\n\nLANGUAGE: tsx\nCODE:\n```\n// @refresh reload\nimport { mount, StartClient } from \"@solidjs/start/client\";\n\nmount(() => <StartClient />, document.getElementById(\"app\")!);\n\nif (\"serviceWorker\" in navigator && import.meta.env.PROD) {\n\twindow.addEventListener(\"load\", () => {\n\t\tnavigator.serviceWorker.register(\"/sw.js\");\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Implementation of the Index Component\nDESCRIPTION: A basic implementation example of the Index component that demonstrates how it works internally. It creates a signal for the items and maps over the array, providing a getter function for each item based on its index.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Index<T, U extends JSX.Element>(props: {\n  each: readonly T[];\n  fallback?: JSX.Element;\n  children: (item: () => T, index: number) => U;\n}) {\n  return () => {\n    const [items, setItems] = createSignal(props.each);\n    return props.each.map((_, i) => props.children(() => items()[i], i));\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using environment variables in a React component\nDESCRIPTION: Example of incorporating public environment variables within a React component. The variable value is inserted during compilation.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent() {\n\treturn (\n\t\t<div>\n\t\t\t<h2>\n\t\t\t\tComponent with environment variable used{\" \"}\n\t\t\t\t{import.meta.env.VITE_VARIABLE_NAME}\n\t\t\t\tthe value will be replaced during compilation time.\n\t\t\t</h2>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Path Matching in Solid Router\nDESCRIPTION: Defining multiple paths using an array to prevent a route from re-rendering when switching between matching locations.\n\nLANGUAGE: jsx\nCODE:\n```\n// Navigating from \"/login\" to \"/register\" will not cause the component to re-render\n<Route path={[\"login\", \"register\"]} component={Login} />\n```\n\n----------------------------------------\n\nTITLE: Railway CLI Login Command\nDESCRIPTION: Command to authenticate with Railway through the CLI. This is the first step needed before being able to deploy projects using the command line interface.\n\nLANGUAGE: bash\nCODE:\n```\nrailway login\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Breadcrumbs with useCurrentMatches in Solid.js\nDESCRIPTION: This snippet demonstrates how to use the useCurrentMatches hook to retrieve all current route matches and extract breadcrumb information from each route definition. It uses createMemo to derive breadcrumbs from the matched routes.\n\nLANGUAGE: javascript\nCODE:\n```\nconst matches = useCurrentMatches();\nconst breadcrumbs = createMemo(() =>\n\tmatches().map((m) => m.route.info.breadcrumb)\n);\n```\n\n----------------------------------------\n\nTITLE: Storing Functions in Signals in SolidJS\nDESCRIPTION: Explains how to store function values in signals. When updating a signal with a function, you need to wrap it, but initial values that are functions don't need special handling.\n\nLANGUAGE: tsx\nCODE:\n```\nsetValue(() => myFunction);\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Pre-rendering for All Routes in SolidStart\nDESCRIPTION: This snippet shows how to configure SolidStart to automatically pre-render all routes by setting the crawlLinks option to true in the prerender configuration.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({\n  server: {\n    prerender: {\n      crawlLinks: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Server-only Data Loading with 'use server' Directive\nDESCRIPTION: Example of leveraging server-only data fetching in SolidStart using the 'use server' directive. This creates an RPC that runs exclusively on the server, allowing direct database access or internal API calls without exposing them to the client.\n\nLANGUAGE: tsx\nCODE:\n```\n// /routes/users.tsx\nimport { For } from \"solid-js\";\nimport { createAsync, query } from \"@solidjs/router\";\n\ntype User = { name: string; email: string };\n\nconst getUsers = query(async () => {\n\t\"use server\";\n\treturn store.users.list();\n}, \"users\");\n\nexport const route = {\n\tpreload: () => getUsers(),\n};\n\nexport default function Page() {\n\tconst users = createAsync(() => getUsers());\n\n\treturn <For each={users()}>{(user) => <li>{user.name}</li>}</For>;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// /routes/users.jsx\nimport { For } from \"solid-js\";\nimport { createAsync, query } from \"@solidjs/router\";\n\nconst getUsers = query(async () => {\n\t\"use server\";\n\treturn store.users.list();\n}, \"users\");\n\nexport const route = {\n\tpreload: () => getUsers(),\n};\n\nexport default function Page() {\n\tconst users = createAsync(() => getUsers());\n\n\treturn <For each={users()}>{(user) => <li>{user.name}</li>}</For>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Vite Plugin\nDESCRIPTION: Command to install UnoCSS as a development dependency for a Solid project.\n\nLANGUAGE: bash\nCODE:\n```\nunocss\n```\n\n----------------------------------------\n\nTITLE: Adding Global SEO Meta Tags in Root Component\nDESCRIPTION: Example of adding site-wide SEO meta tags using the Meta component within the Head component of the root.tsx file, which will be applied across all routes.\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Root() {\n  return (\n    <Html lang=\"en\">\n      <Head>\n        <Meta\n          property=\"og:image\"\n          content=\"https://example.com/image.jpg\"\n        />\n        <Meta\n          property=\"og:image:alt\"\n          content=\"Welcome to my site\"\n        />\n        <Meta property=\"og:image:width\" content=\"1200\" />\n        <Meta property=\"og:image:height\" content=\"600\" />\n        <Meta property=\"og:site_name\" content=\"GitHub\" />\n      </Head>\n    </Html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ssrLoadFrom with createResource in Solid.js\nDESCRIPTION: Shows how to use the ssrLoadFrom option introduced in v1.5.0 to initialize a resource with prefetched data instead of fetching again during SSR. This allows embedding Solid in systems that fetch data before rendering.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [data, { mutate, refetch }] = createResource(() => params.id, fetchUser, {\n\tinitialValue: preloadedData,\n\tssrLoadFrom: \"initial\",\n})\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach Using Show with IIFE\nDESCRIPTION: An alternative to using createMemo, using an immediately invoked function expression within the Show component's when prop.\n\nLANGUAGE: tsx\nCODE:\n```\n<Show\n\twhen={(() => {\n\t\tconst u = user();\n\t\treturn u && u.type === \"admin\" ? u : undefined;\n\t})()}\n>\n\t{(admin) => <AdminPanel user={admin()} />}\n</Show>\n```\n\n----------------------------------------\n\nTITLE: Typing Request Event Locals in SolidStart\nDESCRIPTION: This code snippet shows how to add type declarations for event.locals in SolidStart applications. By extending the RequestEventLocals interface, you can ensure type safety when accessing custom properties added to the locals object throughout your application.\n\nLANGUAGE: tsx\nCODE:\n```\n/// <reference types=\"@solidjs/start/env\" />\ndeclare module App {\n  interface RequestEventLocals {\n    /**\n     * Declare your getRequestEvent().locals here\n     */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Dynamic Components in Solid.js\nDESCRIPTION: A simple example showing how to pass props to components rendered with the Dynamic component. Any props passed to Dynamic will be forwarded to the component specified in the component prop.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dynamic } from \"solid-js/web\"\n\nfunction App() {\n\treturn (\n\t\t<Dynamic component={someComponent} someProp=\"someValue\" />\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Lifecycle in a Reactive System with Conditional Dependencies\nDESCRIPTION: Demonstrates how dependency tracking works with conditional logic in a reactive system. The example shows how signals and effects interact when dependencies are conditionally included.\n\nLANGUAGE: jsx\nCODE:\n```\n// Temperature.jsx\nconsole.log(\"1. Initialize\");\nconst [temperature, setTemperature] = createSignal(72);\nconst [unit, setUnit] = createSignal(\"Fahrenheit\");\nconst [displayTemp, setDisplayTemp] = createSignal(true);\n\nconst displayTemperature = createMemo(() => {\n\tif (!displayTemp()) return \"Temperature display is off\";\n\treturn `${temperature()} degrees ${unit()}`;\n});\n\ncreateEffect(() => console.log(\"Current temperature is\", displayTemperature()));\n\nconsole.log(\"2. Turn off displayTemp\");\nsetDisplayTemp(false);\n\nconsole.log(\"3. Change unit\");\nsetUnit(\"Celsius\");\n\nconsole.log(\"4. Turn on displayTemp\");\nsetDisplayTemp(true);\n```\n\n----------------------------------------\n\nTITLE: Installing Zerops CLI via NPM\nDESCRIPTION: NPM command to install the Zerops CLI tool globally using the Node.js package manager.\n\nLANGUAGE: bash\nCODE:\n```\n@zerops/zcli\n```\n\n----------------------------------------\n\nTITLE: Type Casting for Narrowing\nDESCRIPTION: Using type casting as a solution for type narrowing, with a note on potential runtime errors.\n\nLANGUAGE: tsx\nCODE:\n```\nreturn <div>{user() && (user() as User).name}</div>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Router in Solid.js\nDESCRIPTION: This code snippet shows how to replace the default Router with MemoryRouter in a Solid.js application. MemoryRouter maintains routing state in memory without interacting with the browser's URL, making it particularly useful for testing purposes.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { \n    Router\n    MemoryRouter,\n    Route \n    } from \"@solidjs/router\";\n\nconst App = (props) => (\n    <>\n        <h1>Root header</h1>\n        {props.children}\n    </>\n);\n\nrender(\n    () => <Router root={App}>{/*... routes */}</Router>,\n    () => <MemoryRouter root={App}>{/*... routes */}</MemoryRouter>,\n    document.getElementById(\"app\")\n);\n\n```\n\n----------------------------------------\n\nTITLE: Importing and defining Portal component from Solid.js\nDESCRIPTION: Shows the import statement and type definition for the Portal component. The Portal component takes props including mount, useShadow, isSVG options, and children, and returns a Text node.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Portal } from \"solid-js/web\"\nimport type { JSX } from \"solid-js\"\n\nfunction Portal(props: {\n\tmount?: Node\n\tuseShadow?: boolean\n\tisSVG?: boolean\n\tchildren: JSX.Element\n}): Text\n```\n\n----------------------------------------\n\nTITLE: Logging into Wrangler CLI\nDESCRIPTION: Command to authenticate with Cloudflare using the Wrangler CLI.\n\nLANGUAGE: bash\nCODE:\n```\nwrangler login\n```\n\n----------------------------------------\n\nTITLE: Converting a Subscribable Object to a Signal with Solid.js\nDESCRIPTION: Example of using the 'from' function to convert an external observable (obsv$) into a Solid.js signal.\n\nLANGUAGE: tsx\nCODE:\n```\nconst signal = from(obsv$)\n```\n\n----------------------------------------\n\nTITLE: Using Context with Signals for State Management - Child Component\nDESCRIPTION: Child component that consumes the counter context and uses its values and methods to show count and provide controls for changing it.\n\nLANGUAGE: tsx\nCODE:\n```\n// /context/counter-component.tsx\nimport { useCounter } from \"./Context\";\n\nexport function Child(props) {\n\tconst [count, { increment, decrement }] = useCounter();\n\n\treturn (\n\t<>\n\t\t<div>{count()}</div>\n\t\t<button onClick={increment}>+</button>\n\t\t<button onClick={decrement}>-</button>\n\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Dynamic Component in Solid JS\nDESCRIPTION: This example demonstrates how to use the Dynamic component to render another component. It passes a component reference as the component prop, along with an additional property that will be forwarded to the rendered component.\n\nLANGUAGE: tsx\nCODE:\n```\n<Dynamic component={MyComponent} someProp={state.something} />\n```\n\n----------------------------------------\n\nTITLE: Building Solid Project\nDESCRIPTION: Command to build the Solid project using the package manager's run script.\n\nLANGUAGE: bash\nCODE:\n```\nbuild\n```\n\n----------------------------------------\n\nTITLE: Basic Portal Usage in Solid.js\nDESCRIPTION: Basic example of using the Portal component to render content at the end of the document body. This helps with rendering elements that need to break out of stacking contexts or avoid overflow issues.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Portal } from \"solid-js/web\"\n\n<Portal>\n\t<div class=\"popup\">...</div>\n</Portal>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of indexArray in Solid.js\nDESCRIPTION: A practical example showing how to use indexArray to create derived properties from source data. This example creates id, firstInitial, and fullName derived values from the mapped model.\n\nLANGUAGE: tsx\nCODE:\n```\nconst mapped = indexArray(source, (model) => {\n  return {\n    get id() {\n      return model().id\n    }\n    get firstInitial() {\n      return model().firstName[0];\n    },\n    get fullName() {\n      return `${model().firstName} ${model().lastName}`;\n    },\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using onCleanup to Remove Event Listeners in a Solid Component\nDESCRIPTION: A complete example of using onCleanup to remove document event listeners when a component unmounts. This prevents memory leaks by ensuring event handlers are properly cleaned up when the component is no longer needed.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSignal, onCleanup } from \"solid-js\"\n\nconst Component = () => {\n\tconst [count, setCount] = createSignal(0);\n\n\tconst handleClick = () => setCount((value) => value + 1);\n\n\tdocument.addEventListener(\"click\", handleClick);\n\n\t/**\n\t * Remove the event listener when the component is removed/unmounted from the page.\n\t */\n\tonCleanup(() => {\n\t\tdocument.removeEventListener(\"click\", handleClick);\n\t});\n\n\treturn <main>Document has been clicked {count()} times</main>;\n};\n```\n\n----------------------------------------\n\nTITLE: Style Component Within MetaProvider in SolidJS\nDESCRIPTION: An example showing how to use the Style component within a MetaProvider to add CSS that styles paragraph elements with a green color. Note that these styles are not scoped and will apply globally.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MetaProvider, Style } from \"@solidjs/meta\";\n\nexport default function Root() {\n\treturn (\n\t\t<MetaProvider>\n\t\t\t<Style>{`\n          p {\n            color: #26b72b;\n          }\n        `}</Style>\n\t\t</MetaProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using reconcile with Observable Subscription\nDESCRIPTION: Example showing how to use reconcile when subscribing to an observable data source. The function is used to efficiently update a state with new todo items while preserving referential integrity.\n\nLANGUAGE: ts\nCODE:\n```\n// subscribing to an observable\nconst unsubscribe = store.subscribe(({ todos }) => (\n  setState('todos', reconcile(todos));\n);\nonCleanup(() => unsubscribe());\n```\n\n----------------------------------------\n\nTITLE: Using redirect in a SolidJS query function\nDESCRIPTION: Example showing how to redirect a user to the login page when they are not authenticated, using the redirect function within a query.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { query, redirect } from \"@solidjs/router\";\nimport { getCurrentUser } from \"../auth\";\n\nconst getUser = query(() => {\n  const user = await getCurrentUser();\n  \n  if (!user) throw redirect(\"/login\");\n  \n  return user;\n}, \"get-user\")\n```\n\n----------------------------------------\n\nTITLE: Defining mapArray Function in SolidJS (TypeScript)\nDESCRIPTION: Function signature for mapArray, a reactive mapping utility that caches items by reference. It takes a source array getter and a mapping function that receives each value and an index signal.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mapArray } from \"solid-js\"\n\nfunction mapArray<T, U>(\n\tlist: () => readonly T[],\n\tmapFn: (v: T, i: () => number) => U\n): () => U[]\n```\n\n----------------------------------------\n\nTITLE: Accessing Signal Values Within a batch in Solid.js\nDESCRIPTION: Shows how accessing a signal or memo within a batch block will cause it to update if it is out of date, even before the batch completes.\n\nLANGUAGE: typescript\nCODE:\n```\nbatch(() => {\n  setUp1(11) // doesn't update down yet\n  setUp2(11) // doesn't update down yet\n  setUp3(11) // doesn't update down yet\n  console.log(down()) // recomputes down, outputs 33\n  setUp1(12) // doesn't update down yet\n  setUp2(12) // doesn't update down yet\n  setUp3(12) // doesn't update down yet\n}) // recomputes down, outputs 36\n```\n\n----------------------------------------\n\nTITLE: Creating a Factory Function for Context with TypeScript\nDESCRIPTION: Pattern for creating a typed context factory function in Solid using TypeScript's ReturnType utility.\n\nLANGUAGE: typescript\nCODE:\n```\nexport const makeCountNameContext = (initialCount = 0, initialName = \"\") => {\n\tconst [count, setCount] = createSignal(initialCount);\n\tconst [name, setName] = createSignal(initialName);\n\treturn [\n\t\t{ count, name },\n\t\t{ setCount, setName },\n\t] as const;\n};\n\ntype CountNameContextType = ReturnType<typeof makeCountNameContext>;\nexport const CountNameContext = createContext<CountNameContextType>();\n```\n\n----------------------------------------\n\nTITLE: Force Revalidation with SolidJS Router\nDESCRIPTION: Example showing how to force revalidation of a query by passing true as the second parameter to the revalidate function. This ensures the cache is immediately invalidated and fresh data is fetched.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { action, revalidate } from \"@solidjs/router\";\n\nconst updateTodo = action(async (todo: Todo) => {\n  await putTodo(todo.id, todo);\n  \n  return revalidate(getTodo.keyFor(), true);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Netlify CLI Globally\nDESCRIPTION: Command to install the Netlify Command Line Interface (CLI) tool globally using a package manager like npm or yarn. This tool is required for deploying Solid projects via the command line.\n\nLANGUAGE: shell\nCODE:\n```\nnetlify-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Railway CLI\nDESCRIPTION: Command to install the Railway CLI globally using a package manager. This tool is needed for deploying and managing Railway projects from the command line.\n\nLANGUAGE: bash\nCODE:\n```\n@railway/cli\n```\n\n----------------------------------------\n\nTITLE: Accessing environment variables in client code\nDESCRIPTION: Shows how to access public environment variables in client-side components using import.meta.env. The values are replaced during compilation time.\n\nLANGUAGE: jsx\nCODE:\n```\nconsole.log(import.meta.env.VITE_SECRET_KEY); // 123hello\nconsole.log(import.meta.env.DB_PASSWORD); // undefined\n```\n\n----------------------------------------\n\nTITLE: Installing LESS as a Development Dependency\nDESCRIPTION: Command to install LESS as a development dependency in a Solid application using npm or another package manager.\n\nLANGUAGE: package-install-dev\nCODE:\n```\nless\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Route Parameters in SolidStart API Routes\nDESCRIPTION: Example of an API route that uses dynamic parameters from the URL path to fetch products filtered by category and brand, demonstrating how to access the params object.\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { APIEvent } from \"@solidjs/start/server\";\nimport store from \"./store\";\n\nexport async function GET({ params }: APIEvent) {\n  console.log(`Category: ${params.category}, Brand: ${params.brand}`);\n  const products = await store.getProducts(params.category, params.brand);\n  return products;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Getters and Setters with createMutable in Solid.js\nDESCRIPTION: Demonstrates how to use getters and setters with createMutable for computed properties. This example shows a user object with firstName and lastName properties plus a computed fullName property with both getter and setter.\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = createMutable({\n\tfirstName: \"John\",\n\tlastName: \"Smith\",\n\tget fullName() {\n\t\treturn `${this.firstName} ${this.lastName}`;\n\t},\n\tset setFullName(value) {\n\t\t[this.firstName, this.lastName] = value.split(\" \");\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying a Range of Array Elements in Solid Stores\nDESCRIPTION: Demonstrates how to set values for a continuous range of array indices using an object with from and to properties that define an inclusive range.\n\nLANGUAGE: jsx\nCODE:\n```\nsetStore(\"users\", { from: 1, to: store.users.length - 1 }, \"loggedIn\", false)\n// equivalent to (but more efficient than):\nfor (let i = 1; i <= store.users.length - 1; i++) {\n  setStore(\"users\", i, \"loggedIn\", false)\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Keyed Show Component Usage in Solid.js\nDESCRIPTION: An example of using the Show component without the keyed property, where the argument of the child function is an accessor containing the item. This requires calling the function to access the value.\n\nLANGUAGE: tsx\nCODE:\n```\n<Show when={state.user} fallback={<div>Loading...</div>}>\n\t{(user) => <div>{user().firstName}</div>}\n</Show>\n```\n\n----------------------------------------\n\nTITLE: Importing and defining the children helper function in Solid.js\nDESCRIPTION: The function signature and import statement for the Solid.js children helper. The function accepts a function that returns a JSX element and returns a function that resolves to the evaluated children.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { children } from \"solid-js\";\nimport type { JSX, ResolvedChildren } from \"solid-js\";\n\nfunction children(fn: () => JSX.Element): () => ResolvedChildren\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI Tools Globally\nDESCRIPTION: Command to install the Firebase command-line tools globally using your preferred package manager.\n\nLANGUAGE: bash\nCODE:\n```\nfirebase-tools\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Solid Project\nDESCRIPTION: Command to clone the Solid JavaScript starter template using degit. This creates a new directory with the template files.\n\nLANGUAGE: package-exec\nCODE:\n```\ndegit solidjs/templates/js my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt for Solid Documentation\nDESCRIPTION: This robots.txt configuration allows search engines to crawl most of the Solid documentation website, disallows access to the internationalization status page, and provides the sitemap location. This helps search engines efficiently index the site while respecting privacy and resource constraints.\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-Agent: *\nAllow: /\nDisallow: /i18n-status/\nSitemap: https://docs.solidjs.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Using produce with createStore for Nested State Updates\nDESCRIPTION: Example showing how to use produce with createStore to update nested state. The code creates a store with user data and a list, then uses setState with produce to mutate the store directly, updating the user's name and adding an item to the list.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { produce } from \"solid-js/store\";\n\nconst [state, setState] = createStore({\n\tuser: {\n\t\tname: \"John\",\n\t\tage: 30,\n\t},\n\tlist: [\"book\", \"pen\"],\n});\n\nsetState(\n\tproduce((state) => {\n\t\tstate.user.name = \"Jane\";\n\t\tstate.list.push(\"pencil\");\n\t})\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing Assets from Public Directory in SolidStart\nDESCRIPTION: This snippet demonstrates how to reference a static image from the public directory using an absolute path. This approach provides stable, human-readable references to assets.\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function About() {\n  return (\n    <>\n      <h1>About</h1>\n      <img src=\"/images/logo.png\" alt=\"Solid logo\" />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fake Timers with User Events in SolidJS Tests\nDESCRIPTION: Shows how to configure fake timers with user events in SolidJS tests using vi.useFakeTimers() and the advanceTimers option, demonstrating various user interaction simulations.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { vi } from \"vitest\"\n\nconst user = userEvent.setup({ advanceTimers: vi.advanceTimersByTime })\n\nvi.useFakeTimers()\n\ndescribe(\"pre-login: sign-in\", () => {\n  const { getByRole, getByLabelText } = render(() => <User />)\n  const signUp = getByRole('button', { text: 'Sign-in' })\n  // use convenience API click:\n  user.click(signUp)\n  const name = getByLabelText('Name')\n  // use complex keyboard input:\n  user.keyboard(name, \"{Shift}test{Space}{Shift}user\")\n  const password = getByLabelText('Password')\n  user.keyboard(name, \"secret\")\n  const login = getByRole('button', { text: 'Login' })\n  // use touch event\n  user.pointer([\n    { keys: \"[TouchA]\" target: login },\n    { keys: \"[/TouchA]\", target: login }\n  ])\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Show Component in Solid.js\nDESCRIPTION: The TypeScript interface declaration for the Show component in Solid.js. It defines the props interface including when, keyed, fallback, and children properties, and specifies the return type as a function returning JSX.Element.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Show } from \"solid-js\"\nimport type { JSX } from \"solid-js\"\n\nfunction Show<T>(props: {\n\twhen: T | undefined | null | false\n\tkeyed?: boolean\n\tfallback?: JSX.Element\n\tchildren: JSX.Element | ((item: T | Accessor<T>) => JSX.Element)\n}): () => JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Attributes with attr:* Directive in Solid.js\nDESCRIPTION: This example demonstrates how to use the attr:* directive to set a property as an attribute on a Web Component. The directive forces the status prop to be set as an attribute instead of a property.\n\nLANGUAGE: tsx\nCODE:\n```\n<my-element attr:status={props.status} />\n```\n\n----------------------------------------\n\nTITLE: Basic Event Handler in Solid TSX\nDESCRIPTION: A simple example showing how to attach a click event handler to a div element in Solid. When clicked, this handler logs the currentTarget of the event.\n\nLANGUAGE: tsx\nCODE:\n```\n<div onClick={(e) => console.log(e.currentTarget)} />\n```\n\n----------------------------------------\n\nTITLE: Installing Wrangler CLI Globally\nDESCRIPTION: Command to install the Wrangler command-line tool globally using a package manager.\n\nLANGUAGE: bash\nCODE:\n```\nwrangler\n```\n\n----------------------------------------\n\nTITLE: Styling List Items with <For> in Solid.js\nDESCRIPTION: Example showing how to use the <For> component with dynamic styling based on the item index. This demonstrates accessing both the item properties and using the index signal to apply conditional styles.\n\nLANGUAGE: jsx\nCODE:\n```\n<For each={data()}>\n\t{(item, index) => (\n\t\t<li\n\t\t\tstyle={{\n\t\t\t\tcolor: index() % 2 === 0 ? \"red\" : \"blue\"\n\t\t\t}}\n\t\t>\n\t\t\t{item.name}\n\t\t</li>\n\t)}\n</For>\n```\n\n----------------------------------------\n\nTITLE: Importing and Function Signature of mergeProps in Solid.js\nDESCRIPTION: Shows how to import the mergeProps function from Solid.js and its TypeScript function signature. The function accepts multiple source objects and returns a merged object.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeProps } from \"solid-js\"\n\nfunction mergeProps(...sources: any): any\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Hosting in firebase.json\nDESCRIPTION: Configuration for Firebase hosting that specifies the 'dist' directory as the public directory to be deployed.\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"hosting\": {\n\t\t\"public\": \"dist\",\n\t\t\"ignore\": []\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Index Page for New Language\nDESCRIPTION: Instructions for adding at least the index page for a new language to make the translation visible in the site.\n\nLANGUAGE: markdown\nCODE:\n```\nAdd at least the index page `./src/routes/{locale}/index.mdx`, so others and yourself could see things in action.\n```\n\n----------------------------------------\n\nTITLE: Importing and Using produce Function in Solid.js\nDESCRIPTION: The produce function signature from Solid.js store module. It accepts a function that takes a state parameter which can be mutated, and returns a function that accepts and updates a store.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { produce } from \"solid-js/store\"\nimport type { NotWrappable, Store } from \"solid-js/store\"\n\nfunction produce<T>(\n\tfn: (state: T) => void\n): (\n\tstate: T extends NotWrappable ? T : Store<T>\n) => T extends NotWrappable ? T : Store<T>;\n```\n\n----------------------------------------\n\nTITLE: Router-Specific Vite Configuration in SolidStart\nDESCRIPTION: Advanced Vite configuration using a function that can be customized for each Vinxi router in SolidStart (server, client, and server-function).\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({\n\tvite({ router }) {\n\t\tif (router === \"server\") {\n\t\t} else if (router === \"client\") {\n\t\t} else if (router === \"server-function\") {\n\t\t}\n\t\treturn { plugins: [] };\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Hash Router in Solid.js\nDESCRIPTION: This code snippet demonstrates how to replace the default Router with HashRouter in a Solid.js application. HashRouter uses the hash portion of the URL for client-side only routing, allowing the application to navigate without server requests.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { \n    Router\n    HashRouter,\n    Route \n    } from \"@solidjs/router\";\n\nconst App = (props) => (\n    <>\n        <h1>Root header</h1>\n        {props.children}\n    </>\n);\n\nrender(\n    () => <Router root={App}>{/*... routes */}</Router>,\n    () => <HashRouter root={App}>{/*... routes */}</HashRouter>,\n    document.getElementById(\"app\")\n);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer Signal with Custom Producer in Solid.js\nDESCRIPTION: Example of creating a custom clock signal using the 'from' function with a producer function that increments a value every second and handles cleanup through the returned function.\n\nLANGUAGE: tsx\nCODE:\n```\nconst clock = from((set) => {\n\tconst interval = setInterval(() => {\n\t\tset((v) => v + 1)\n\t}, 1000)\n\n\treturn () => clearInterval(interval)\n})\n```\n\n----------------------------------------\n\nTITLE: Optional Event Handler with Nullish Coalescing in Solid TSX\nDESCRIPTION: A pattern for conditionally calling event handlers based on their existence. This example uses the optional chaining operator to safely call a prop-provided handler only if it's defined.\n\nLANGUAGE: tsx\nCODE:\n```\n// if defined, call it; otherwise don't.\n<div onClick={() => props.handleClick?.()} />\n```\n\n----------------------------------------\n\nTITLE: Example Counter Component Implementation\nDESCRIPTION: A simple Solid.js counter component that maintains a count state and increments it when clicked. Used as the component under test in the previous test example.\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Counter = () => {\n  const [count, setCount] = createSignal(1);\n  return (\n    <button onClick={() => setCount(count() + 1)}>\n      {count()}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Context Hook with Error Handling\nDESCRIPTION: Pattern for creating a safe context hook that throws a descriptive error when the context is used outside its provider.\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useCountNameContext = () => {\n\tconst countName = useContext(CountNameContext);\n\tif (!countName) {\n\t\tthrow new Error(\n\t\t\t\"useCountNameContext should be called inside its ContextProvider\"\n\t\t);\n\t}\n\treturn countName;\n};\n```\n\n----------------------------------------\n\nTITLE: Extending CustomEvents to Include Native Events\nDESCRIPTION: Methods to extend the CustomEvents interface to include all or specific native events from HTMLElementEventMap.\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module \"solid-js\" {\n\tnamespace JSX {\n\t\tinterface CustomEvents extends HTMLElementEventMap {}\n\t}\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module \"solid-js\" {\n\tnamespace JSX {\n\t\tinterface CustomEvents\n\t\t\textends Pick<HTMLElementEventMap, \"mousemove\" | \"pointermove\"> {}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useSubmission in SolidJS\nDESCRIPTION: Demonstrates how to implement optimistic updates using the useSubmission hook, showing both the optimistic value and final result when available.\n\nLANGUAGE: tsx\nCODE:\n```\n// component.tsx\nimport { Show } from \"solid-js\";\nimport { useSubmission } from \"@solidjs/router\";\n\nfunction Component() {\n  const submission = useSubmission(postNameAction);\n\n    return (\n      <>\n        <Show when={submission.input?.[0].get(\"name\")}>\n          {(name) => <div>Optimistic: {name() as string}</div>}\n        </Show>\n\n        <Show when={submission.result?.name}>\n          {(name) => <div>Result: {name()}</div>}\n        </Show>\n\n        <form method=\"post\" action={sendData}>\n          <input type=\"text\" name=\"name\" required />\n          <button type=\"submit\" disabled={submission.pending}>\n            {submission.pending ? \"Submitting\" : \"Submit\"}\n          </button>\n        </form>\n      </>\n    )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// component.jsx\nimport { Show } from \"solid-js\";\nimport { useSubmission } from \"@solidjs/router\";\n\nfunction Component() {\n  const submission = useSubmission(postNameAction);\n\n    return (\n      <>\n        <Show when={submission.input?.[0].get(\"name\")}>\n          {(name) => <div>Optimistic: {name()}</div>}\n        </Show>\n\n        <Show when={submission.result?.name}>\n          {(name) => <div>Result: {name()}</div>}\n        </Show>\n\n        <form method=\"post\" action={sendData}>\n          <input type=\"text\" name=\"name\" required />\n          <button type=\"submit\" disabled={submission.pending}>\n            {submission.pending ? \"Submitting\" : \"Submit\"}\n          </button>\n        </form>\n      </>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Language Information to Barrel File for i18n\nDESCRIPTION: Instructions for updating the index.ts barrel file to include the new language dictionary for the routing system and language dropdown.\n\nLANGUAGE: typescript\nCODE:\n```\nAdd the `import` and language information to the objects in the barrel file: `./src/i18n/dictionaries/index.ts`. So it will be identified by the routing system, and an entry its added to the language dropdown.\n```\n\n----------------------------------------\n\nTITLE: Named Exports of Components in Solid.js\nDESCRIPTION: Shows two ways to use named exports for Solid components: 1) exporting the function directly, or 2) defining the function first and then exporting it by name.\n\nLANGUAGE: typescript\nCODE:\n```\nexport function MyComponent() {\n\treturn <div>Hello World</div>\n}\n\n// or\n\nfunction MyComponent() {\n\treturn <div>Hello World</div>\n}\n\nexport { MyComponent }\n```\n\n----------------------------------------\n\nTITLE: Defining a SolidJS Custom Directive Function Signature in TypeScript\nDESCRIPTION: The basic signature for a SolidJS custom directive function. Directives are called at render time before the element is added to the DOM and can create signals, effects, and register cleanup.\n\nLANGUAGE: typescript\nCODE:\n```\nfunction directive(element: Element, accessor: () => any): void\n```\n\n----------------------------------------\n\nTITLE: Testing Portal Components in Solid\nDESCRIPTION: Example test for a Toast component that uses Solid's Portal. It demonstrates how to test components that render outside the normal DOM hierarchy.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { test, expect } from \"vitest\"\nimport { render, screen } from \"@solidjs/testing-library\"\nimport { Toast } from \"./Toast\"\n\ntest(\"increments value\", async () => {\n  render(() => <Toast><p>This is a toast</p></Toast>)\n  const toast = screen.getByRole(\"log\")\n  expect(toast).toHaveTextContent(\"This is a toast\")\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Context Wrappers in SolidJS Tests\nDESCRIPTION: Shows how to create higher-order components that generate context wrappers with different values for more concise tests.\n\nLANGUAGE: tsx\nCODE:\n```\nconst createWrapper = (value) => (props) =>\n  <DataContext value={value} {...props}/>\n```\n\n----------------------------------------\n\nTITLE: Preventing Import Removal for Directives\nDESCRIPTION: Technique to prevent TypeScript from removing imports for directives when they're imported from separate modules.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { directive } from \"./directives.js\"\n\ndirective // prevents TypeScript's tree-shaking\n\n<div use:directive />\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Show Component in Solid.js\nDESCRIPTION: Demonstrates the use of Solid's built-in Show component for conditional rendering. This creates a more readable way to conditionally display content based on the count value.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n\tconst [count, setCount] = createSignal(0)\n\n\treturn (\n\t\t<div>\n\t\t\t<Show\n\t\t\t\twhen={count() > 5}\n\t\t\t\tfallback={\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Count: {count()}</p>\n\t\t\t\t\t\t<button onClick={() => setCount((prev) => prev+1)}>Increment</button>\n\t\t\t\t\t</>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<div>Count limit reached</div>\n\t\t\t</Show>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Preload Function with Solid Router\nDESCRIPTION: Demonstrates how to define and use a preload function with a Route component. The function receives route parameters and location information for data preloading.\n\nLANGUAGE: js\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { Route } from \"@solidjs/router\";\n\nconst User = lazy(() => import(\"./pages/users/[id].js\"));\n\n// preload function\nfunction preloadUser({ params, location }) {\n\t// do preloading\n}\n\n// Pass it in the route definition\n<Route path=\"/users/:id\" component={User} preload={preloadUser} />;\n```\n\n----------------------------------------\n\nTITLE: Fullscreen Directive Implementation in SolidJS\nDESCRIPTION: Implements a fullscreen directive that toggles the fullscreen state of an element based on an accessor value.\n\nLANGUAGE: ts\nCODE:\n```\nimport { Accessor } from \"solid-js\"\n\nexport const fullscreen = (ref: HTMLElement, active: Accessor<boolean>) =>\n  createEffect(() => {\n    const isActive = document.fullscreenElement === ref\n    if (active() && !isActive) {\n      ref.requestFullScreen().catch(() => {})\n    } else if (!active() && isActive) {\n      document.exitFullScreen()\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Using A Component in Solid Router\nDESCRIPTION: This snippet demonstrates how to use the A component from Solid Router, which extends native anchor elements by automatically applying base URL paths and supporting relative paths.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { A } from \"@solidjs/router\";\n\nfunction DashboardPage() {\n\treturn (\n\t\t<main>\n\t\t\t<nav>\n\t\t\t\t<A href=\"/\">Home</a>\n\t\t\t</nav>\n\t\t\t{/* This is a relative path that, from /dashboard, links to /dashboard/users */}\n\t\t\t<A href=\"users\">Users</A>\n\t\t</main>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useAction Hook for Programmatic Submissions\nDESCRIPTION: Demonstrates how to use the useAction primitive to execute actions programmatically without forms, allowing direct function calls with proper arguments.\n\nLANGUAGE: jsx\nCODE:\n```\n// in component\nconst submit = useAction(myAction);\nsubmit(...args);\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useSubmissions in JavaScript\nDESCRIPTION: JavaScript version of the optimistic updates example, showing how to access form input data and display it immediately while the submission is pending.\n\nLANGUAGE: tsx\nCODE:\n```\n// component.jsx\nimport { Show } from \"solid-js\";\nimport { useSubmissions } from \"@solidjs/router\";\n\nfunction Component() {\n  const submissions = useSubmissions(postNameAction);\n\n    return (\n      <form method=\"post\" action={postNameAction}>\n        <ul>\n          <For each={Array.from(submissions.entries())}>\n            {([attemptIndex, data]) => (\n                <Show when={data.input[0].entries().next()}>\n                    {(input) => {\n                        const name = input().value[1]\n\n                        return (\n                            <li>Optimistic: {name}</li>\n                        )}}\n                </Show>\n            )}\n          </For>\n        </ul>\n        <input name=\"name\" type=\"text\" />\n        <button type=\"submit\">{submissions.pending ? \"sending\" : \"send\"}</button>\n      </form>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Example of environment variable naming and access\nDESCRIPTION: Demonstrates how only variables prefixed with VITE_ are exposed to client code. The example shows the DB_PASSWORD is undefined when trying to access it from client code.\n\nLANGUAGE: json\nCODE:\n```\nVITE_SECRET_KEY = 123hello\nDB_PASSWORD = foobar\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Ternary Operator in Solid.js\nDESCRIPTION: Shows how to implement conditional rendering within a Solid component using the ternary operator. The component displays different content based on whether the count value exceeds 5.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n\tconst [count, setCount] = createSignal(0);\n\treturn (\n\t\t<div>\n\t\t\t{count() > 5 ? (\n\t\t\t\t<div>Count limit reached</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<p>Count: {count()}</p>\n\t\t\t\t\t<button onClick={() => setCount((prev) => prev + 1)}>\n\t\t\t\t\t\tIncrement\n\t\t\t\t\t</button>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Preload Functions for Route Components\nDESCRIPTION: Shows how to import a lazy-loaded component and define a preload function that receives route information when the component is loaded or links are hovered.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { Route } from \"@solidjs/router\";\n\nconst User = lazy(() => import(\"./pages/users/[id].js\"));\n\n// preload function\nfunction preloadUser({ params, location }) {\n\t// do preload\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root-Level Layout in Solid.js Router\nDESCRIPTION: Shows how to define a root-level layout component and pass it to the Router's root prop. The layout wraps all routes with common header and footer elements while rendering the specific route content in between.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nimport Home from \"./pages/Home\";\n\nconst Layout = (props) => {\n    return (\n        <>\n            <header>Header</header>\n            {props.children}\n            <footer>Footer</footer>\n        </>\n    );\n};\n\nrender(\n    () => (\n        <Router root={Layout}>\n            <Route path=\"/\" component={Home} />\n            <Route path=\"/hello-world\" component={() => <div>Hello world!</div>} />\n        </Router>\n    ),\n    document.getElementById(\"app\")\n);\n```\n\n----------------------------------------\n\nTITLE: Component Initialization with Reactivity in Solid.js\nDESCRIPTION: Demonstrates the initialization of a Solid component with reactive state using createSignal. The component sets up a count signal and renders it, with an increment button that updates the count value.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n\tconst [count, setCount] = createSignal(0);\n\n\tconsole.log(count());\n\n\treturn (\n\t\t<div>\n\t\t\t<p>Count: {count()}</p>\n\t\t\t<button onClick={() => setCount((prev) => prev + 1)}>Increment</button>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Inside a Solid.js Route Component\nDESCRIPTION: Demonstrates how to use a cached query function with createAsync within a Solid.js route component to handle asynchronous data fetching.\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/users/[id].js\nimport { getUser } from ... // the cache function\n\nexport default function User(props) {\n  const user = createAsync(() => getUser(props.params.id));\n  return <h1>{user().name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Show Callback for Component Props\nDESCRIPTION: Solution for using the Show component's callback to ensure a non-nullable value is passed to a component.\n\nLANGUAGE: tsx\nCODE:\n```\nreturn (\n\t<Show when={user()}>\n\t\t{(nonNullishUser) => <UserPanel user={nonNullishUser()} />}\n\t</Show>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading with SolidJS Router in JSX\nDESCRIPTION: This code demonstrates how to implement lazy loading in a SolidJS application using the lazy function. It shows how to configure routes with lazily loaded components, which helps reduce the initial load time by loading components only when their routes are accessed.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { Router, Route } from \"@solidjs/router\";\n\nconst Home = lazy(() => import(\"./Home\"));\n\nconst Users = lazy(() => import(\"./Users\"));\n\nconst App = () => (\n  <Router>\n    <Route path=\"/\" component={Home} />\n    <Route path=\"/users\" component={Users} />\n  </Router>\n);\n```\n\n----------------------------------------\n\nTITLE: Portal Component Implementation in Solid\nDESCRIPTION: Implementation of a Toast component that uses Solid's Portal to render content outside of the normal DOM hierarchy, used in the Portal testing example.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Portal } from \"solid-js/web\";\n\nexport const Toast = (props) => {\n  return (\n    <Portal>\n      <div class=\"toast\" role={props.role ?? \"log\"}>\n        {props.children}\n      </div>\n    </Portal>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage with conditional rendering in Solid.js\nDESCRIPTION: This example shows an anti-pattern where the children helper always evaluates props.children regardless of the Show component's condition, potentially causing unnecessary renders.\n\nLANGUAGE: tsx\nCODE:\n```\nconst resolved = children(() => props.children)\n\nreturn <Show when={visible()}>{resolved()}</Show>\n```\n\n----------------------------------------\n\nTITLE: Using useIsRouting Hook in Solid.js\nDESCRIPTION: This snippet demonstrates how to use the useIsRouting hook to conditionally style components during route transitions. The hook returns a signal that becomes true when routing is in progress, allowing developers to apply visual feedback like greying out content.\n\nLANGUAGE: javascript\nCODE:\n```\nconst isRouting = useIsRouting();\n\nreturn (\n\t<div classList={{ \"grey-out\": isRouting() }}>\n\t\t<MyAwesomeContent />\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Assertion Syntax in Vitest\nDESCRIPTION: Shows the basic syntax pattern for assertions in Vitest, which follows the expect(subject)[assertion](value) format.\n\nLANGUAGE: tsx\nCODE:\n```\nexpect(subject)[assertion](value)\n```\n\n----------------------------------------\n\nTITLE: Default Import of a Component in Solid.js\nDESCRIPTION: Shows how to import a default-exported component. Unlike named imports, default imports don't use curly braces and can be assigned any name at the import site.\n\nLANGUAGE: tsx\nCODE:\n```\n// App.ts\nimport MyComponent from \"./MyComponent\";\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<MyComponent />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Submissions with useSubmissions in SolidJS\nDESCRIPTION: Example showing how to use the optional filter function with useSubmissions to only process submissions that match a specific condition, in this case only submitting if the name is \"solid\".\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSubmissions } from \"@solidjs/router\";\n\nfunction Component() {\n  const submissions = useSubmissions(postNameAction, ([formData]) => {\n    const name = formData.get(\"name\") ?? \"\";\n\n        return name === \"solid\";\n  });\n\n  return (\n    <form method=\"post\" action={postNameAction}>\n        <ul>\n            <For each={Array.from(submissions.entries())}>\n                {([attemptIndex, data]) => (\n                    <Show when={data.result}>\n                        { result => (\n                            <li>\n                                Backend {attemptIndex}: {result.name}\n                            </li>\n                        )}\n                    </Show>\n                </>\n                )}\n            </For>\n        </ul>\n        <input name=\"name\" type=\"text\" />\n        <button type=\"submit\">{submissions.pending ? \"sending\" : \"send\"}</button>\n      </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript signature for the redirect function\nDESCRIPTION: The TypeScript type definition for the redirect function, showing its parameters and return type. It extends ResponseInit and includes custom options like revalidation.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResponseOptions & Omit<ResponseInit, \"body\"> {\n  revalidate?: string | string[];\n} | number\n\nfunction redirect(url: string, opts = 302): CustomResponse<never>;\n```\n\n----------------------------------------\n\nTITLE: Portal Component Implementation in Solid\nDESCRIPTION: Implementation of a Toast component that uses Solid's Portal to render content outside of the normal DOM hierarchy, used in the Portal testing example.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Portal } from \"solid-js/web\";\n\nexport const Toast = (props) => {\n  return (\n    <Portal>\n      <div class=\"toast\" role={props.role ?? \"log\"}>\n        {props.children}\n      </div>\n    </Portal>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using lazy in Solid.js Components\nDESCRIPTION: Example of how to use the lazy function to dynamically import a component and then use it in JSX. The lazy-loaded component can receive props and will trigger Suspense boundaries.\n\nLANGUAGE: tsx\nCODE:\n```\n// wrap import\nconst ComponentA = lazy(() => import(\"./ComponentA\"));\n\n// use in JSX\n<ComponentA title={props.title} />\n```\n\n----------------------------------------\n\nTITLE: Comparing memoized and regular functions in SolidJS components\nDESCRIPTION: This example demonstrates how createMemo prevents redundant function calls when a value is used multiple times in a reactive context. The searchForUser function will only be called once per username change instead of once per usage.\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = createMemo(() => searchForUser(username()))\n// compare with: const user = () => searchForUser(username());\nreturn (\n\t<ul>\n\t\t<li>Your name is {user()?.name}</li>\n\t\t<li>\n\t\t\tYour email is <code>{user()?.email}</code>\n\t\t</li>\n\t</ul>\n)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with useSubmissions in SolidJS\nDESCRIPTION: Example showing how to handle errors during form submission, providing feedback to users and options to retry failed submissions or clear the data using the retry() and clear() methods.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Show } from \"solid-js\";\nimport { useSubmissions } from \"@solidjs/router\";\n\nfunction Component() {\n  const submissions = useSubmissions(postNameAction);\n\n    return (\n      <form method=\"post\" action={postNameAction}>\n        <ul>\n          <For each={Array.from(submissions.entries())}>\n            {([attempt, data]) => (\n              <Show when={data.error}>\n                <li>\n                  <p>Backend {attempt}: {data.error.message}</p>\n                  <button onClick={() => data.retry()}>retry</button>\n                  <button onClick={() => data.clear()}>clear</button>\n                </li>\n              </Show>\n            )}\n          </For>\n        </ul>\n        <input name=\"name\" type=\"text\" required autocomplete=\"off\" />\n        <button type=\"submit\">{submissions.pending ? \"sending\" : \"send\"}</button>\n      </form>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Title Component in SolidJS\nDESCRIPTION: Basic example of importing and using the Title component from @solidjs/meta to set a page title.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Title } from \"@solidjs/meta\";\n<Title>My Site</Title>;\n```\n\n----------------------------------------\n\nTITLE: Practical Example of onMount with Element References in SolidJS\nDESCRIPTION: Demonstrates how to use onMount to access a DOM element reference and modify it after mounting. The example shows disabling a button when the component is mounted.\n\nLANGUAGE: tsx\nCODE:\n```\n// example that shows how to use onMount to get a reference to an element\nimport { onMount } from \"solid-js\"\n\nfunction MyComponent() {\n\tlet ref: HTMLButtonElement\n\n\t// when the component is mounted, the button will be disabled\n\tonMount(() => {\n\t\tref.disabled = true\n\t})\n\treturn <button ref={ref}>Focus me!</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Effects in Solid.js\nDESCRIPTION: Shows how to nest effects within each other. Each effect independently tracks its dependencies, with inner effects not affecting outer effects.\n\nLANGUAGE: jsx\nCODE:\n```\ncreateEffect(() => {\n\tconsole.log(\"Outer effect starts\");\n\tcreateEffect(() => console.log(\"Inner effect\"));\n\tconsole.log(\"Outer effect ends\");\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Components with Context in SolidJS\nDESCRIPTION: Demonstrates how to test components that rely on context using the wrapper option in the render function from @solidjs/testing-library.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \"vitest\"\nimport { render } from \"@solidjs/testing-library\"\nimport { DataContext, DataConsumer } from \"./Data\"\n\nconst wrapper = (props) => <DataContext value=\"test\" {...props} />\n\ntest(\"receives data from context\", () => {\n  const { getByText } = render(() => <DataConsumer />, { wrapper })\n  expect(getByText(\"test\")).toBeInTheDocument()\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Macaron Dependencies for Solid.js\nDESCRIPTION: Command to install the required Macaron packages for use with Solid.js.\n\nLANGUAGE: package-install\nCODE:\n```\n@macaron-css/core @macaron-css/solid\n```\n\n----------------------------------------\n\nTITLE: Test Output Example for Solid Component\nDESCRIPTION: Example output of a successful test run for a Solid counter component, showing the test results in the terminal with passed status.\n\nLANGUAGE: ansi\nCODE:\n```\n[1;36m[RUN][0;36m v1.4.0[0;8m solid-app/src/components/Counter.test.tsx[0m\n\n[0;32m ✓ [0;8msrc/components/[1;1mCounter[0;8m.test.tsx (1)\n[0;32m   ✓ [0;8m[1;1m<Counter />[0;8m (1)\n[0;32m     ✓ [0;8m[1;1mincrements value[0;8m\n\n Test Files  [1;32m1 passed[0;8m (1)\n      Tests  [1;32m1 passed[0;8m (1)\n   Start at  [1;1m16:51:19[0;8m\n   Duration  [1;1m4.34s[0;8m (transform 1.01s, setup 205ms, collect 1.54s, tests 155ms,\nenvironment 880ms, prepare 212ms)\n\n```\n\n----------------------------------------\n\nTITLE: Protecting Resources with Server Functions in Solid\nDESCRIPTION: This code demonstrates how to use a server function to protect sensitive user data by checking authentication status before returning private posts. It validates user authentication and only returns private posts if the user is logged in.\n\nLANGUAGE: tsx\nCODE:\n```\n\"use server\"\n\nasync function getPrivatePosts() {\n\tconst user = await getUser()\n\tif(!user) {\n\t\treturn null  // or throw an error\n\t}\n\n\treturn db.getPosts({ userId: user.id, private: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS and Required Dependencies for Solid\nDESCRIPTION: Command to install Tailwind CSS and its dependencies as development dependencies in a Solid project.\n\nLANGUAGE: bash\nCODE:\n```\ntailwindcss @tailwindcss/postcss postcss\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with Actions in SolidStart\nDESCRIPTION: This code demonstrates how to handle form submissions using SolidStart actions. The example creates an action to add a new post by sending data to an API endpoint. The action is connected to a form and processes the submitted data using FormData.\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/routes/index.tsx\nimport { action } from \"@solidjs/router\";\n\nconst addPost = action(async (formData: FormData) => {\n\tconst title = formData.get(\"title\") as string;\n\tawait fetch(\"https://my-api.com/posts\", {\n\t\tmethod: \"POST\",\n\t\tbody: JSON.stringify({ title }),\n\t});\n}, \"addPost\");\n\nexport default function Page() {\n\treturn (\n\t\t<form action={addPost} method=\"post\">\n\t\t\t<input name=\"title\" />\n\t\t\t<button>Add Post</button>\n\t\t</form>\n\t);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/routes/index.jsx\nimport { action } from \"@solidjs/router\";\n\nconst addPost = action(async (formData) => {\n\tconst title = formData.get(\"title\");\n\tawait fetch(\"https://my-api.com/posts\", {\n\t\tmethod: \"POST\",\n\t\tbody: JSON.stringify({ title }),\n\t});\n}, \"addPost\");\n\nexport default function Page() {\n\treturn (\n\t\t<form action={addPost} method=\"post\">\n\t\t\t<input name=\"title\" />\n\t\t\t<button>Add Post</button>\n\t\t</form>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Session Data in Solid\nDESCRIPTION: Server function for updating theme preferences in the session. This function accepts new session data and uses the update method to save changes.\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function updateThemeSession(data: SessionData) {\n\t\"use server\";\n\tconst session = await useThemeSession();\n\tawait session.update(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Links Component in JSX for Solid Framework Documentation\nDESCRIPTION: This code snippet shows the implementation of a Quick Links section in JSX, featuring a responsive grid layout that displays four links to important Solid framework resources including the tutorial, templates, ecosystem, and contribution options.\n\nLANGUAGE: jsx\nCODE:\n```\n<div class=\"flex flex-col md:grid md:grid-cols-2 md:grid-rows-2  gap-3\">\n\t<QuickLinks\n\t\ttitle=\"Tutorial\"\n\t\thref=\"https://www.solidjs.com/tutorial/introduction_basics\"\n\t\ticon=\"learn\"\n\t>\n\t\tLearn the basics of Solid through this interactive tutorial.\n\t</QuickLinks>\n\t<QuickLinks\n\t\ttitle=\"Templates\"\n\t\thref=\"https://github.com/solidjs/templates\"\n\t\ticon=\"template\"\n\t>\n\t\tStart your first project with a template that fits your needs.\n\t</QuickLinks>\n\t<QuickLinks\n\t\ttitle=\"Ecosystem\"\n\t\thref=\"https://www.solidjs.com/ecosystem\"\n\t\ticon=\"community\"\n\t>\n\t\tExplore the Solid ecosystem and find useful tools and libraries.\n\t</QuickLinks>\n\t<QuickLinks\n\t\ttitle=\"Contribute\"\n\t\thref=\"https://github.com/solidjs/solid-docs-next\"\n\t\ticon=\"learn\"\n\t>\n\t\tHelp improve Solid by contributing to the documentation.\n\t</QuickLinks>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Layout Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a nested layout for blog routes using JavaScript. The component receives props and renders children components within a container div.\n\nLANGUAGE: jsx\nCODE:\n```\n// routes/blog.jsx\nexport default function BlogLayout(props) {\n\treturn <div>{props.children}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Path Matching Examples for useMatch Function\nDESCRIPTION: Shows a list of different URL paths that would match the pattern defined in the previous example, including paths with and without the optional project parameter and wildcard segments.\n\nLANGUAGE: text\nCODE:\n```\n/reference\n/solid-router/reference\n/solid-meta/reference\n/solid-start/reference\n\n/reference/...\n/solid-router/reference/...\n/solid-meta/reference/...\n/solid-start/reference/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Scripts in package.json\nDESCRIPTION: Adding a test script to package.json that calls Vitest to run tests for Solid applications.\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"test\": \"vitest\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing @solidjs/router Package\nDESCRIPTION: Command to install the Solid Router package which is not included by default in Solid applications.\n\nLANGUAGE: shell\nCODE:\n```\n@solidjs/router\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in SolidStart Actions\nDESCRIPTION: This example shows how to handle errors that occur within SolidStart actions. It uses the useSubmission hook to access the error property and conditionally displays an error message using Solid's Show component.\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/routes/index.tsx\nimport { Show } from \"solid-js\";\nimport { action, useSubmission } from \"@solidjs/router\";\n\nconst addPost = action(async (formData: FormData) => {\n\tconst title = formData.get(\"title\") as string;\n\tawait fetch(\"https://my-api.com/posts\", {\n\t\tmethod: \"POST\",\n\t\tbody: JSON.stringify({ title }),\n\t});\n}, \"addPost\");\n\nexport default function Page() {\n\tconst submission = useSubmission(addPost);\n\treturn (\n\t\t<form action={addPost} method=\"post\">\n\t\t\t<Show when={submission.error}>\n\t\t\t\t<p>{submission.error.message}</p>\n\t\t\t</Show>\n\t\t\t<input name=\"title\" />\n\t\t\t<button>Add Post</button>\n\t\t</form>\n\t);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/routes/index.jsx\nimport { Show } from \"solid-js\";\nimport { action, useSubmission } from \"@solidjs/router\";\n\nconst addPost = action(async (formData) => {\n\tconst title = formData.get(\"title\");\n\tawait fetch(\"https://my-api.com/posts\", {\n\t\tmethod: \"POST\",\n\t\tbody: JSON.stringify({ title }),\n\t});\n}, \"addPost\");\n\nexport default function Page() {\n\tconst submission = useSubmission(addPost);\n\treturn (\n\t\t<form action={addPost} method=\"post\">\n\t\t\t<Show when={submission.error}>\n\t\t\t\t<p>{submission.error.message}</p>\n\t\t\t</Show>\n\t\t\t<input name=\"title\" />\n\t\t\t<button>Add Post</button>\n\t\t</form>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Directive Usage Examples with Type Checking\nDESCRIPTION: Examples showing correct usage and type errors when using directives typed with the DirectiveFunctions interface.\n\nLANGUAGE: tsx\nCODE:\n```\n{/* This is correct */}\n<input use:model={createSignal('')} />\n\n{/* These will result in a type error */}\n<input use:model />\n<input use:model={7} />\n<div use:model={createSignal('')} />\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Utility Classes in Solid Components\nDESCRIPTION: Example of a Solid component that uses Tailwind CSS utility classes for styling instead of traditional CSS. This demonstrates how to apply various utility classes for layout, sizing, and visual styling.\n\nLANGUAGE: jsx\nCODE:\n```\n/* src/components/Card.jsx */\nfunction Card() {\n\treturn (\n\t\t<div class=\"grid place-items-center min-h-screen\">\n\t\t\t<div class=\"h-[160px] aspect aspect-[2] rounded-[16px] shadow-[0_0_0_4px_hsl(0_0%_0%_/_15%)]\">\n\t\t\t\tHello, world!\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Solid Core Functionality\nDESCRIPTION: Shows how to import Solid's core reactivity primitives from the main solid-js module. This example imports the createSignal function that's used for state management.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSignal } from \"solid-js\";\n```\n\n----------------------------------------\n\nTITLE: Mounting SolidJS Application in Browser\nDESCRIPTION: This code initializes a SolidJS application by mounting the StartClient component to the DOM element with id 'app'. The mount function takes two parameters: a function that returns the StartClient component and the DOM element where the application will be rendered.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mount, StartClient } from \"@solidjs/start/client\";\n\nmount(() => <StartClient />, document.getElementById(\"app\")!);\n```\n\n----------------------------------------\n\nTITLE: Combining useParams with createResource for Data Fetching\nDESCRIPTION: Example of using useParams with createResource to fetch data based on route parameters, creating dynamic behaviors that respond to route changes.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createResource } from \"solid-js\";\nimport { useParams } from \"@solidjs/router\";\n\nasync function fetchUser(id) {\n\tconst response = await fetch(\n\t\t`https://jsonplaceholder.typicode.com/users/${id}`\n\t);\n\treturn response.json();\n}\n\nconst User = () => {\n\tconst params = useParams();\n\tconst [data] = createResource(() => params.id, fetchUser); // Pass the id parameter to createResource\n\n\treturn (\n\t\t<div>\n\t\t\t<Show when={!data.loading} fallback={<p>Loading...</p>}>\n\t\t\t\t<div>\n\t\t\t\t\t<p>Name: {data().name}</p>\n\t\t\t\t\t<p>Email: {data().email}</p>\n\t\t\t\t\t<p>Phone: {data().phone}</p>\n\t\t\t\t</div>\n\t\t\t</Show>\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Responses from Middleware\nDESCRIPTION: Example of returning a custom Response object from middleware to immediately terminate request processing. This demonstrates how to return an unauthorized response.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddleware } from \"@solidjs/start/middleware\";\n\nexport default createMiddleware({\n\tonRequest: () => {\n\t\treturn new Response(\"Unauthorized\", { status: 401 });\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using Previous Value in createEffect in SolidJS\nDESCRIPTION: Shows how to use the previous value returned by an effect function to compare with new values, useful for memoization and tracking changes.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [a, setA] = createSignal(initialValue)\n\n// effect that depends on signal `a`\ncreateEffect((prevSum) => {\n\t// do something with `a` and `prevSum`\n\tconst sum = a() + b()\n\tif (sum !== prevSum) console.log(\"sum changed to\", sum)\n\treturn sum\n}, 0)\n// ^ the initial value of the effect is 0\n```\n\n----------------------------------------\n\nTITLE: Creating a Language Dictionary File in TypeScript for i18n\nDESCRIPTION: Instructions for creating a new language dictionary file for internationalization support. The file should be named following ISO language code conventions and placed in the appropriate directory structure.\n\nLANGUAGE: typescript\nCODE:\n```\nCreate a dictionary file in `src/i18n/dictionaries/{locale}/ui.ts`. The name should follow our locale convention.\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Routes with Solid Router\nDESCRIPTION: This code shows how to create protected routes in Solid by checking authentication during data fetching and redirecting unauthenticated users to the login page. It uses Solid Router and server functions to enforce route protection.\n\nLANGUAGE: tsx\nCODE:\n```\nconst getPrivatePosts = query(async function() {\n\t\"use server\"\n\tconst user = await getUser()\n\tif(!user) {\n\t\tthrow redirect(\"/login\");\n\t}\n\n\treturn db.getPosts({ userId: user.id, private: true })\n})\n\nexport default function Page() {\n\tconst posts = createAsync(() => getPrivatePosts());\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS with PostCSS for Solid.js\nDESCRIPTION: Installs Tailwind CSS v3, PostCSS, and Autoprefixer as development dependencies for a Solid.js project.\n\nLANGUAGE: bash\nCODE:\n```\ntailwindcss@3 postcss autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Solid.js\nDESCRIPTION: Demonstrates how to access the Request object properties such as headers from the request event. This example shows retrieving the Authorization header.\n\nLANGUAGE: js\nCODE:\n```\nimport { getRequestEvent } from \"solid-js/web\"\n\nconst event = getRequestEvent();\nif (event) {\n\tconst auth = event.request.headers.get(\"Authorization\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Utility Classes in Solid.js Components\nDESCRIPTION: Example of a Solid.js component using Tailwind CSS utility classes for styling instead of traditional CSS.\n\nLANGUAGE: jsx\nCODE:\n```\n/* src/components/Card.jsx */\nfunction Card() {\n\treturn (\n\t\t<div class=\"grid place-items-center min-h-screen\">\n\t\t\t<div class=\"h-[160px] aspect aspect-[2] rounded-[16px] shadow-[0_0_0_4px_hsl(0_0%_0%_/_15%)]\">\n\t\t\t\tHello, world!\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using previous value in createMemo for accumulation\nDESCRIPTION: This example shows how to use the previous value in the memo function to create an accumulator. The sum memo tracks a running total of all values that input() has had.\n\nLANGUAGE: tsx\nCODE:\n```\n// track the sum of all values taken on by input() as it updates\nconst sum = createMemo((prev) => input() + prev, 0)\n```\n\n----------------------------------------\n\nTITLE: Validating Routes with matchFilters in Solid Router\nDESCRIPTION: Using matchFilters to validate path parameters with complex conditions including enum values, regex patterns, and custom validation functions.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\nimport type { SegmentValidators } from \"./types\";\n\nconst User = lazy(() => import(\"./pages/User\"));\n\nconst filters: MatchFilters = {\n  parent: [\"mom\", \"dad\"], // allow enum values\n  id: /^\\d+$/, // only allow numbers\n  withHtmlExtension: (v: string) => v.length > 5 && v.endsWith(\".html\"), // only `*.html` extensions wanted\n};\n\nrender(() => (\n  <Router>\n    <Route\n      path=\"/users/:parent/:id/:withHtmlExtension\"\n      component={User}\n      matchFilters={filters}\n    />\n  </Router>\n), document.getElementById(\"root\"));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating createRenderEffect execution timing in Solid.js\nDESCRIPTION: Example showing how createRenderEffect runs immediately during rendering, compared to createEffect which waits for rendering to complete. It demonstrates the timing of execution and batching behavior with signals.\n\nLANGUAGE: typescript\nCODE:\n```\n// assume this code is in a component function, so is part of a rendering phase\nconst [count, setCount] = createSignal(0)\n\n// this effect prints count at the beginning and when it changes\ncreateRenderEffect(() => console.log(\"count =\", count()))\n// render effect runs immediately, printing `count = 0`\nconsole.log(\"hello\")\nsetCount(1) // effect won't run yet\nsetCount(2) // effect won't run yet\n\nqueueMicrotask(() => {\n\t// now `count = 2` will print\n\tconsole.log(\"microtask\")\n\tsetCount(3) // immediately prints `count = 3`\n\tconsole.log(\"goodbye\")\n})\n\n// --- overall output: ---\n// count = 0   [this is the only added line compared to createEffect]\n// hello\n// count = 2\n// microtask\n// count = 3\n// goodbye\n```\n\n----------------------------------------\n\nTITLE: Deploying Applications with Zerops CLI\nDESCRIPTION: Command to trigger a deployment using the Zerops CLI. This should be run from the root directory of your application where the zerops.yml file is located.\n\nLANGUAGE: bash\nCODE:\n```\nzcli push\n```\n\n----------------------------------------\n\nTITLE: Testing Primitives with renderHook in SolidJS\nDESCRIPTION: Shows how to use renderHook utility to test primitives or hooks without needing to render a component, providing access to the hook's result, cleanup function, and owner.\n\nLANGUAGE: ts\nCODE:\n```\nconst renderResult = renderHook(hook, {\n  initialProps, // an array with arguments being supplied to the hook\n  wrapper, // same as the wrapper optionss for `render`\n})\nconst {\n  result, // return value of the hook (mutable, destructuring fixes it)\n  cleanup, // manually remove the traces of the test from the DOM\n  owner, // the owner running the hook to use with `runWithOwner()`\n} = renderResult\n```\n\n----------------------------------------\n\nTITLE: Typing Custom Directives with DirectiveFunctions Interface\nDESCRIPTION: Advanced example of typing custom directives using the DirectiveFunctions interface, which provides more precise type checking for both element and value parameters.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction model(element: HTMLInputElement, value: Accessor<Signal<string>>) {\n\tconst [field, setField] = value();\n\tcreateRenderEffect(() => (element.value = field()));\n\telement.addEventListener(\"input\", (e) => setField(e.target.value));\n}\n\nfunction log(element: Element) {\n\tconsole.log(element);\n}\n\nlet num = 0;\nfunction count() {\n\tnum++;\n}\n\nfunction foo(comp: Element, args: Accessor<string[]>) {\n\t// function body\n}\n\ndeclare module \"solid-js\" {\n\tnamespace JSX {\n\t\tinterface DirectiveFunctions {\n\t\t\tmodel: typeof model;\n\t\t\tlog: typeof log;\n\t\t\tcount: typeof count;\n\t\t\tfoo: typeof foo;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding UnoCSS Plugin to Vite Configuration\nDESCRIPTION: Modified Vite configuration that includes both UnoCSS and Solid plugins. The UnoCSS plugin is placed before the Solid plugin to prevent edge cases.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport unocssPlugin from \"unocss/vite\";\nimport solidPlugin from \"vite-plugin-solid\";\n\nexport default defineConfig({\n\tplugins: [unocssPlugin(), solidPlugin()],\n\tserver: {\n\t\tport: 3000,\n\t},\n\tbuild: {\n\t\ttarget: \"esnext\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Preload Function to a Route Definition\nDESCRIPTION: Shows how to attach a preload function to a Route component by passing it as the preload prop, enabling data fetching to begin as soon as the route is loaded or a link is hovered.\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/users/:id\" component={User} preload={preloadUser} />\n```\n\n----------------------------------------\n\nTITLE: Using Database or ORM with Server-Only Actions in SolidJS\nDESCRIPTION: This example demonstrates safely interacting with a database or ORM in a SolidJS application using the 'use server' directive. This ensures database operations are only performed on the server for security and performance.\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/routes/index.tsx\nimport { action } from \"@solidjs/router\";\nimport { db } from \"~/lib/db\";\n\nconst addPost = action(async (formData: FormData) => {\n\t\"use server\";\n\tconst title = formData.get(\"title\") as string;\n\tawait db.insert(\"posts\").values({ title });\n}, \"addPost\");\n\nexport default function Page() {\n\treturn (\n\t\t<form action={addPost} method=\"post\">\n\t\t\t<input name=\"title\" />\n\t\t\t<button>Add Post</button>\n\t\t</form>\n\t);\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/routes/index.jsx\nimport { action } from \"@solidjs/router\";\nimport { db } from \"~/lib/db\";\n\nconst addPost = action(async (formData) => {\n\t\"use server\";\n\tconst title = formData.get(\"title\");\n\tawait db.insert(\"posts\").values({ title });\n}, \"addPost\");\n\nexport default function Page() {\n\treturn (\n\t\t<form action={addPost} method=\"post\">\n\t\t\t<input name=\"title\" />\n\t\t\t<button>Add Post</button>\n\t\t</form>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in Solid Project\nDESCRIPTION: CSS import statement to include Tailwind CSS in your project's main CSS file.\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Type Definition of SuspenseList in Solid.js\nDESCRIPTION: Shows how to import the SuspenseList component from Solid.js and defines its TypeScript type signature. The component requires children elements, a revealOrder prop, and optionally a tail prop.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SuspenseList } from \"solid-js\"\nimport type { JSX } from \"solid-js\"\n\nfunction SuspenseList(props: {\n\tchildren: JSX.Element\n\trevealOrder: \"forwards\" | \"backwards\" | \"together\"\n\ttail?: \"collapsed\" | \"hidden\"\n}): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Accessing Signal Values in Solid.js\nDESCRIPTION: Demonstrates how to access the current value of a signal by calling the getter function, which retrieves the current state value.\n\nLANGUAGE: jsx\nCODE:\n```\nconsole.log(count()); // 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware Path in SolidStart\nDESCRIPTION: This snippet shows how to configure the middleware path in app.config.ts using defineConfig. The middleware option specifies the path to the middleware file that exports the configuration created with createMiddleware.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({\n\tmiddleware: \"src/middleware/index.ts\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using @once decorator with component children in Solid.js\nDESCRIPTION: This example shows how to apply the @once decorator to component children content that won't change. This prevents Solid from creating unnecessary reactive wrappers for static content passed as children.\n\nLANGUAGE: tsx\nCODE:\n```\n<MyComponent>{/*@once*/ state.wontUpdate}</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Targeted Cache Revalidation with Action Responses\nDESCRIPTION: Shows how to selectively revalidate specific cached functions by using the json, reload, or redirect helpers with explicitly specified cache keys.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { action, json, reload, redirect } from \"@solidjs/router\"\n\nconst deleteTodo = action(async (formData: FormData) => {\n  const id = Number(formData.get(\"id\"))\n  await api.deleteTodo(id)\n  return json(\n  { deleted: id },\n  { revalidate: [\"getAllTodos\", getTodos.key, getTodoByID.keyFor(id)]}\n  )\n\n  //or\n  return reload({ revalidate: [\"getAllTodos\", getTodos.key, getTodoByID.keyFor(id)]})\n\n  //or\n  return redirect(\"/\", { revalidate: [\"getAllTodos\", getTodos.key, getTodoByID.keyFor(id)]})\n\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with Solid in tsconfig.json\nDESCRIPTION: Basic configuration for a tsconfig.json file to use TypeScript with Solid. This setup preserves JSX syntax and sets Solid as the JSX import source.\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"compilerOptions\": {\n\t\t\"jsx\": \"preserve\",\n\t\t\"jsxImportSource\": \"solid-js\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind CSS in Solid\nDESCRIPTION: PostCSS configuration that adds the Tailwind CSS plugin. This should be placed in a postcss.config.mjs file at the root of your project.\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tplugins: {\n\t\t\"@tailwindcss/postcss\": {},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Function Signature for SolidJS hydrate Method\nDESCRIPTION: The hydrate function signature with its import statements, showing the function's parameters and return type. It's used to rehydrate server-rendered DOM content in SolidJS applications.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hydrate } from \"solid-js/web\"\nimport type { JSX } from \"solid-js\"\nimport type { MountableElement } from \"solid-js/web\"\n\nfunction hydrate(\n  fn: () => JSX.Element,\n  node: MountableElement,\n  options?: { renderId?: string; owner?: unknown }\n): () => void\n```\n\n----------------------------------------\n\nTITLE: Rendering State in JSX with Solid.js\nDESCRIPTION: Shows how to render the current state value in the UI using JSX. The signal's getter function is called within curly braces to display the current count value.\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n\t<>\n\t\t<div>Current count: {count()}</div>\n\t\t<button onClick={increment}>Increment</button>\n\t</>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Component in Solid\nDESCRIPTION: Example of a simple TypeScript component in Solid with proper type annotations for the component function.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Component } from \"solid-js\";\n\nconst MyTsComponent: Component = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>This is a TypeScript component</h1>\n\t\t</div>\n\t);\n}\n\nexport default MyTsComponent;\n```\n\n----------------------------------------\n\nTITLE: Importing and Function Signature for createReaction in Solid.js\nDESCRIPTION: The function signature for createReaction which takes a callback function to be executed when tracked dependencies change. It returns a tracking function that initiates dependency tracking.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createReaction } from \"solid-js\"\n\nfunction createReaction(onInvalidate: () => void): (fn: () => void) => void\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Asynchronous Operation in Solid.js Effects\nDESCRIPTION: This code illustrates a potential issue in Solid.js reactivity system. When a signal getter is used inside an asynchronous callback within an effect, the dependency won't be properly tracked because the subscriber registration has already completed by the time the callback executes.\n\nLANGUAGE: jsx\nCODE:\n```\ncreateEffect(() => {\n\tsetTimeout(() => {\n\t\tconsole.log(count());\n\t}, 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Output of First Render in Solid.js Counter\nDESCRIPTION: Shows the initial HTML output of the counter component before any user interaction, displaying both the count and doubled count at their initial values of 0.\n\nLANGUAGE: html\nCODE:\n```\nCurrent count: 0 Doubled count: 0\n```\n\n----------------------------------------\n\nTITLE: Named Import of Components in Solid.js\nDESCRIPTION: Shows how to import a named component export into another file. The component is referenced by its exact name within curly braces from its module path.\n\nLANGUAGE: tsx\nCODE:\n```\n// App.ts\nimport { MyComponent } from \"./MyComponent\";\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<MyComponent />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind CSS Directives to CSS File\nDESCRIPTION: Essential Tailwind CSS directives that need to be added to the project's main CSS file to enable Tailwind's functionality.\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Importing Solid Additional Modules\nDESCRIPTION: Demonstrates how to import functionality from Solid's additional modules. Some utilities like createStore are exported from separate modules and need to be imported specifically.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createStore } from \"solid-js/store\";\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple CSS Module Styles in Solid Components\nDESCRIPTION: Shows how to apply multiple CSS module styles to a component using template literals. This technique allows combining multiple class names from the imported styles object.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Component() {\n\treturn (\n\t\t<>\n\t\t\t<div class={`${styles.foo} ${styles.bar}`}>Hello, world!</div>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting 404 Status Code for Not Found Pages in SolidJS\nDESCRIPTION: Example of creating a NotFound page component that uses HttpStatusCode to set a 404 status code for the response, which is important for caching and SEO purposes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HttpStatusCode } from \"@solidjs/start\";\n\nexport default function NotFound() {\n\treturn (\n\t\t<div>\n\t\t\t<HttpStatusCode code={404} />\n\t\t\t<h1>Page not found</h1>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining private environment variables\nDESCRIPTION: Example of setting up private environment variables for backend use without the VITE_ prefix. These variables are accessed via process.env in server code.\n\nLANGUAGE: jsx\nCODE:\n```\nDB_HOST=\"somedb://192.110.0\"\nDB_PASSWORD = super_secret_password_hash\n```\n\n----------------------------------------\n\nTITLE: Initializing Tailwind CSS Configuration Files\nDESCRIPTION: Generates both tailwind.config.js and postcss.config.js configuration files for Tailwind CSS setup.\n\nLANGUAGE: bash\nCODE:\n```\ntailwindcss init -p\n```\n\n----------------------------------------\n\nTITLE: Adding Event Handlers in SolidJS\nDESCRIPTION: Demonstrates how to add both delegated and native event handlers in SolidJS. Delegated events flow through the component tree, while native events flow through the DOM tree.\n\nLANGUAGE: tsx\nCODE:\n```\n// delegated event\n<button onClick={handleClick}>Click me</button>\n\n// native event\n<div on:scroll={handleScroll}>... very long text ...</div>\n```\n\n----------------------------------------\n\nTITLE: Default Revalidation Behavior for Actions\nDESCRIPTION: Explains the default behavior for revalidating cached data after an action completes, showing how action responses trigger revalidation of all cached functions.\n\nLANGUAGE: jsx\nCODE:\n```\nconst deleteTodo = action(async (formData: FormData) => {\n  const id = Number(formData.get(\"id\"))\n  await api.deleteTodo(id)\n  // ...\n  return new  Response(\"success\",  {  status:  200  });\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Event Propagation Issues with Delegated Events in SolidJS\nDESCRIPTION: Demonstrates an issue with event.stopPropagation() in delegated events, where stopping propagation doesn't work as expected because events are attached to the document.\n\nLANGUAGE: tsx\nCODE:\n```\nonMount(() => {\n\tref.addEventListener(\"click\", () => {\n\t\tconsole.log(\"div native\");\n\t});\n});\n<div ref={ref}>\n\t<button\n\t\tonClick={(event) => {\n\t\t\tevent.stopPropagation();\n\t\t\tconsole.log(\"button\");\n\t\t}}\n\t>\n\t\tbutton\n\t</button>\n</div>;\n```\n\n----------------------------------------\n\nTITLE: Using private environment variables in server code\nDESCRIPTION: Demonstrates accessing private environment variables in server-side code using process.env. The example shows connecting to a database using environment variables for credentials.\n\nLANGUAGE: jsx\nCODE:\n```\n\t\"use server\"\n\n\tconst client = new DB({\n\t\thost: process.env.DB_URL,\n\t\tpassword: process.env.DB_PASSWORD\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Event Propagation with Portals in SolidJS\nDESCRIPTION: Demonstrates how events propagate through Portals in SolidJS, following the component tree rather than the DOM tree, making them easier to use.\n\nLANGUAGE: tsx\nCODE:\n```\n<div class=\"container\" onInput={() => console.log(\"portal key press\")}>\n\t<Portal mount={document.body}>\n\t\t<input onInput={() => console.log(\"input key press\")} />\n\t</Portal>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers in 404 Not Found Routes in SolidJS\nDESCRIPTION: Shows how to implement a 404 Not Found page with custom HTTP headers and status code using HttpHeader and HttpStatusCode components. This example demonstrates setting both the HTTP status code and a custom header in a catch-all route.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HttpHeader, HttpStatusCode } from \"@solidjs/start\";\n\nexport default function NotFound() {\n\treturn (\n\t\t<div>\n\t\t\t<HttpStatusCode code={404} />\n\t\t\t<HttpHeader name=\"my-header\" value=\"header-value\" />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LESS Files in Solid Components\nDESCRIPTION: Example showing how to import LESS files into a Solid JSX component. Vite will automatically recognize and compile the LESS file to CSS on demand.\n\nLANGUAGE: jsx\nCODE:\n```\n//component.jsx\nimport \"./styles.less\";\n\nfunction Component() {\n\treturn (\n\t\t<>\n\t\t\t<div class=\"foo bar\">Hello, world!</div>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Components in Solid.js\nDESCRIPTION: Demonstrates how to pass a prop named 'name' from a parent component to a child component using JSX syntax.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n\t// Passing a prop named \"name\" to the MyComponent component\n\treturn (\n\t\t<div>\n\t\t\t<MyComponent name=\"Ryan Carniato\" />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json Scripts for Railway Deployment\nDESCRIPTION: Modification of package.json scripts to make them compatible with Railway deployment. The start command is updated to use http-server for the built application, while keeping the original dev command for local development.\n\nLANGUAGE: jsonl\nCODE:\n```\n\"scripts\": {\n  \"start\": \"npx http-server ./dist\",\n  \"dev\": \"vite\",\n  \"build\": \"vite build\",\n  \"serve\": \"vite preview\",\n  \"predeploy\": \"npm run build\",\n  \"deploy\": \"gh-pages -d build\"\n},\n```\n\n----------------------------------------\n\nTITLE: Using Show Component for Resource Loading States in Solid.js\nDESCRIPTION: Implementation using the Show component to display a fallback until a resource resolves. The DOM nodes are only created after the resource resolves.\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponentWithShow = () => {\n\tconst [profile] = createResource(async () => {\n\t\t/* fetcher code here */\n\t})\n\treturn (\n\t\t<Show when={profile()} fallback={<div>fetching user data</div>}>\n\t\t\t<div>{profile().name}</div>\n\t\t\t<div>{profile().email}</div>\n\t\t</Show>\n\t)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Queries in SolidStart\nDESCRIPTION: Demonstrates how to create a query that accepts parameters, such as an ID for fetching a specific post. The example shows both static parameter usage and retrieving parameters from route params.\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/posts/[id]/index.tsx\nimport { ErrorBoundary } from \"solid-js\";\nimport { query, createAsync, type RouteDefinition } from \"@solidjs/router\";\n\nconst getPost = query(async (id: string) => {\n\tconst post = await fetch(`https://my-api.com/posts/${id}`);\n\treturn await post.json();\n}, \"post\");\n\nexport const route = {\n\tpreload: ({ params }) => getPost(params.id),\n} satisfies RouteDefinition;\n\nexport default function Page() {\n\tconst postId = 1;\n\tconst post = createAsync(() => getPost(postId));\n\treturn (\n\t\t<div>\n\t\t\t<ErrorBoundary fallback={<div>Something went wrong!</div>}>\n\t\t\t\t<h1>{post().title}</h1>\n\t\t\t</ErrorBoundary>\n\t\t</div>\n\t);\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// src/routes/posts/[id]/index.jsx\nimport { ErrorBoundary } from \"solid-js\";\nimport { query, createAsync } from \"@solidjs/router\";\n\nconst getPost = query(async (id) => {\n\tconst post = await fetch(`https://my-api.com/posts/${id}`);\n\treturn await post.json();\n}, \"post\");\n\nexport const route = {\n\tpreload: ({ params }) => getPost(params.id),\n};\n\nexport default function Page() {\n\tconst postId = 1;\n\tconst post = createAsync(() => getPost(postId));\n\treturn (\n\t\t<div>\n\t\t\t<ErrorBoundary fallback={<div>Something went wrong!</div>}>\n\t\t\t\t<h1>{post().title}</h1>\n\t\t\t</ErrorBoundary>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SCSS in a Solid Component\nDESCRIPTION: Example of a Solid JSX component that imports a SCSS file and uses the defined classes. Vite automatically processes the SCSS file and converts it to CSS.\n\nLANGUAGE: jsx\nCODE:\n```\n// Card.jsx\nimport \"./card.scss\";\n\nfunction Card() {\n\treturn (\n\t\t<>\n\t\t\t<div class=\"grid grid-center screen\">\n\t\t\t\t<div class=\"card\">Hello, world!</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Handling of Children Props with children Helper\nDESCRIPTION: Demonstrates how to use the children helper function to safely access and render children props without unwanted side effects like repeated creation of components.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { children } from \"solid-js\";\n\nfunction ColoredList(props) {\n\tconst safeChildren = children(() => props.children);\n\n\treturn <>{safeChildren()}</>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using cache Inside a Route Component with createAsync\nDESCRIPTION: Example demonstrating how to use a cached function inside a route component with createAsync to efficiently manage asynchronous data fetching.\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/users/[id].js\nimport { getUser } from ... // the cache function\n\nexport default function User(props) {\n  const user = createAsync(() => getUser(props.params.id));\n  return <h1>{user().name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Query Function Key Management for Cache Invalidation\nDESCRIPTION: Shows how to use the key and keyFor methods of a query function for accessing and managing cache keys, which is useful for cache invalidation.\n\nLANGUAGE: ts\nCODE:\n```\nlet id = 5;\ngetUser.key; // returns \"users\"\ngetUser.keyFor(id); // returns \"users[5]\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Cached Server Function with GET in Solid.js\nDESCRIPTION: This snippet demonstrates how to use the GET function to create a server function that returns a streaming promise with a 60-second cache life. The function accepts a name parameter, creates a promise that resolves after 1 second, and sets the cache-control header.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { json } from \"@solidjs/router\";\nimport { GET } from \"@solidjs/start\";\n\nconst hello = GET(async (name: string) => {\n\t\"use server\";\n\treturn json(\n\t\t{ hello: new Promise<string>((r) => setTimeout(() => r(name), 1000)) },\n\t\t{ headers: { \"cache-control\": \"max-age=60\" } }\n\t);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and defining createMemo in SolidJS\nDESCRIPTION: The function signature for createMemo, which creates a readonly reactive value that only updates when dependencies change. It accepts a function, optional initial value, and optional equality comparison configuration.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMemo } from \"solid-js\"\n\nfunction createMemo<T>(\n\tfn: (v: T) => T,\n\tvalue?: T,\n\toptions?: { equals?: false | ((prev: T, next: T) => boolean) }\n): () => T\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Favicon with Link Component in SolidJS\nDESCRIPTION: Full example of adding a favicon to a SolidJS application using the Link component within a MetaProvider.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MetaProvider, Link } from \"@solidjs/meta\";\n\nexport default function Root() {\n\treturn (\n\t\t<MetaProvider>\n\t\t\t<Link rel=\"icon\" href=\"/favicon.ico\" />\n\t\t</MetaProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UnoCSS in Root File\nDESCRIPTION: Example of importing UnoCSS styles in the root index file of a Solid application using the direct import method.\n\nLANGUAGE: jsx\nCODE:\n```\n/* @refresh reload */\nimport \"uno.css\"\nimport { render } from \"solid-js/web\"\nimport \"./index.css\"\nimport App from \"./App\"\n\nrender(() => <App />, document.getElementById('root') as HTMLElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing Hydration Script in SolidJS\nDESCRIPTION: This code snippet shows the API for SolidJS's hydration script module. It provides both a generateHydrationScript function that returns an HTML string and a HydrationScript component for JSX usage. Both support nonce for CSP and custom eventNames for event capturing during hydration.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateHydrationScript, HydrationScript } from \"solid-js/web\"\nimport type { JSX } from \"solid-js\"\n\nfunction generateHydrationScript(options: {\n\tnonce?: string\n\teventNames?: string[]\n}): string\n\nfunction HydrationScript(props: {\n\tnonce?: string\n\teventNames?: string[]\n}): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Components without Using Component Types in Solid.js\nDESCRIPTION: Shows alternative ways to define components without using Solid's Component types. This approach allows more flexibility but requires explicit return type annotations.\n\nLANGUAGE: tsx\nCODE:\n```\n// arrow function\nconst MyComponent = (props: MyProps): JSX.Element => { ... }\n\n// function declaration\nfunction MyComponent(props: MyProps): JSX.Element { ... }\n\n// component which takes no props\nfunction MyComponent(): JSX.Element { ... }\n```\n\n----------------------------------------\n\nTITLE: Using batch for Efficient Updates in Solid.js\nDESCRIPTION: Demonstrates how using the batch function prevents intermediate recalculations, causing the downstream memo to update only once after all signals have been updated.\n\nLANGUAGE: typescript\nCODE:\n```\nbatch(() => {\n  setUp1(10) // doesn't update down yet\n  setUp2(10) // doesn't update down yet\n  setUp3(10) // doesn't update down yet\n}) // recomputes down, outputs 30\n```\n\n----------------------------------------\n\nTITLE: Importing StartServer from Solid.js\nDESCRIPTION: Demonstrates how to import the StartServer function from the @solidjs/start/server package for server-side document preparation.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StartServer } from \"@solidjs/start/server\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript type declarations for NodeJS environment variables\nDESCRIPTION: Creates TypeScript type declarations for process.env to enable type safety and autocomplete for private environment variables used in server-side code.\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace NodeJS {\n\tinterface ProcessEnv {\n\t\treadonly DB_URL: string\n\t\treadonly DB_PASSWORD: string\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HashRouter in a Solid.js Application\nDESCRIPTION: Example showing how to set up a HashRouter with a root layout component in a Solid.js application. The code demonstrates rendering the router with a root App component that wraps the routes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { HashRouter, Route } from \"@solidjs/router\";\n\nconst App = (props) => (\n\t<>\n\t\t<h1>Root header</h1>\n\t\t{props.children}\n\t</>\n);\n\nrender(\n\t() => <HashRouter root={App}>{/*... routes */}</HashRouter>,\n\tdocument.getElementById(\"app\")\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading UI with Suspense in SolidStart\nDESCRIPTION: Shows how to add a loading UI during data fetching by using the Suspense component from Solid. The fallback prop is used to display a loading message while data is being fetched.\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/index.tsx\nimport { Suspense, For } from \"solid-js\";\nimport { query, createAsync } from \"@solidjs/router\";\n\nconst getPosts = query(async () => {\n\tconst posts = await fetch(\"https://my-api.com/posts\");\n\treturn await posts.json();\n}, \"posts\");\n\nexport default function Page() {\n\tconst posts = createAsync(() => getPosts());\n\treturn (\n\t\t<ul>\n\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t<For each={posts()}>{(post) => <li>{post.title}</li>}</For>\n\t\t\t</Suspense>\n\t\t</ul>\n\t);\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// src/routes/index.jsx\nimport { Suspense, For } from \"solid-js\";\nimport { query, createAsync } from \"@solidjs/router\";\n\nconst getPosts = query(async () => {\n\tconst posts = await fetch(\"https://my-api.com/posts\");\n\treturn await posts.json();\n}, \"posts\");\n\nexport default function Page() {\n\tconst posts = createAsync(() => getPosts());\n\treturn (\n\t\t<ul>\n\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t<For each={posts()}>{(post) => <li>{post.title}</li>}</For>\n\t\t\t</Suspense>\n\t\t</ul>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Cache Revalidation for Actions\nDESCRIPTION: Demonstrates how to opt out of cache revalidation when returning from an action by passing a non-existent cache key to the revalidate option.\n\nLANGUAGE: jsx\nCODE:\n```\nconst deleteTodo = action(async (formData: FormData) => {\n  const id = Number(formData.get(\"id\"))\n  await api.deleteTodo(id)\n  // returns a `json` without revalidating the action.\n  return json(`deleted ${id}`,{ revalidate: \"nothing\" })\n\n  // or reload the route without revalidating the request.\n  return reload({ revalidate: \"nothing\" })\n\n // or redirect without revalidating\n return redirect(\"/\", { revalidate: \"nothing\" })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Base Component in SolidJS\nDESCRIPTION: A simple example showing how to import and use the Base component from @solidjs/meta to set a base URL and target for relative links.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Base } from \"@solidjs/meta\";\n\n<Base target=\"_blank\" href=\"https://docs.solidjs.com/\" />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Component in Solid.js Application\nDESCRIPTION: Basic setup for integrating the Router component into a Solid.js application. This code initializes the router by rendering it into a designated DOM element.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\nconst wrapper = document.getElementById(\"app\");\n\nif (!wrapper) {\n  throw new Error(\"Wrapper div not found\");\n}\n\nrender(() => <Router />, wrapper)\n```\n\n----------------------------------------\n\nTITLE: Complex Component Tree Structure in Solid.js\nDESCRIPTION: Shows a more complex component tree with multiple nested components. This JSON representation demonstrates how components can be organized in a larger application with headers, content sections, and nested post components.\n\nLANGUAGE: json\nCODE:\n```\nApp\n├── Header\n├── Sidebar\n├── Content\n│   ├── Post\n│   │   ├── PostHeader\n│   │   ├── PostContent\n│   │   └── PostFooter\n│   ├── Post\n│   │   ├── PostHeader\n│   │   ├── PostContent\n│   │   └── PostFooter\n│   └── Post\n│       ├── ...\n└── Footer\n```\n\n----------------------------------------\n\nTITLE: Setting Values in SolidJS Stores\nDESCRIPTION: Demonstrates different ways to update values in a store using setState. Changes can be direct object values or functions that receive the previous state and return new values.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [state, setState] = createStore({\n\tfirstName: \"John\",\n\tlastName: \"Miller\",\n});\n\nsetState({ firstName: \"Johnny\", middleName: \"Lee\" });\n// ({ firstName: 'Johnny', middleName: 'Lee', lastName: 'Miller' })\n\nsetState((state) => ({ preferredName: state.firstName, lastName: \"Milner\" }));\n// ({ firstName: 'Johnny', preferredName: 'Johnny', middleName: 'Lee', lastName: 'Milner' })\n```\n\n----------------------------------------\n\nTITLE: Basic Structure for Building a Reactive System\nDESCRIPTION: Outlines the basic structure for implementing a reactive system from scratch, with placeholder functions for createSignal and createEffect that will be implemented later.\n\nLANGUAGE: jsx\nCODE:\n```\nfunction createSignal() {}\n\nfunction createEffect() {}\n\nconst [count, setCount] = createSignal(0);\n\ncreateEffect(() => {\n\tconsole.log(\"The count is \" + count());\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters with useParams in Solid Router\nDESCRIPTION: Using the useParams primitive to access dynamic route parameters within components.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useParams } from \"@solidjs/router\";\n\nconst User = () => {\n\tconst params = useParams(); // Retrieve the dynamic route parameters\n\t// Now you can access the id parameter as params.id\n\n\treturn (\n\t\t<p>\n\t\t\tThis is the user with the id of <code>{params.id}</code>\n\t\t</p>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Avoiding Side Effects in Memos\nDESCRIPTION: Shows an anti-pattern where a memo contains a side effect that could lead to infinite loops. Memo functions should be pure without reactive side effects.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createMemo } from \"solid-js\"\n\nconst [count, setCount] = createSignal(0)\nconst [message, setMessage] = createSignal(\"\")\n\nconst badMemo = createMemo(() => {\n\tif (count() > 10) {\n\t\tsetMessage(\"Count is too high!\") //  side effect\n\t}\n\treturn count() % 2 === 0\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Site Title with MetaProvider in SolidJS\nDESCRIPTION: Example of setting a default application title using the Title component within a MetaProvider wrapper in a root component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MetaProvider, Title } from \"@solidjs/meta\";\nexport default function Root() {\n\treturn (\n\t\t<MetaProvider>\n\t\t\t<Title>Default Application Title</Title>\n\t\t</MetaProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests Command\nDESCRIPTION: Command to execute the tests for Solid.js applications using the configured test script.\n\nLANGUAGE: bash\nCODE:\n```\ntest\n```\n\n----------------------------------------\n\nTITLE: Implementing createSignal for a Reactive System\nDESCRIPTION: Shows how to implement the createSignal function for a reactive system. This basic implementation initializes a value and returns getter and setter functions, but doesn't include reactivity yet.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction createSignal(initialValue) {\n\tlet value = initialValue;\n\n\tfunction getter() {\n\t\treturn value;\n\t}\n\n\tfunction setter(newValue) {\n\t\tvalue = newValue;\n\t}\n\n\treturn [getter, setter];\n}\n\n// ..\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of mergeProps in Solid.js\nDESCRIPTION: Demonstrates three common use cases for mergeProps: setting default props when caller doesn't provide them, cloning props while preserving reactivity, and merging multiple props objects together.\n\nLANGUAGE: typescript\nCODE:\n```\n// default props\nprops = mergeProps({ name: \"Smith\" }, props)\n\n// clone props\nnewProps = mergeProps(props)\n\n// merge props\nprops = mergeProps(props, otherProps)\n```\n\n----------------------------------------\n\nTITLE: Integrating Server Functions with Solid.js Data APIs\nDESCRIPTION: Demonstrates using server functions with solid-router's data APIs for queries and actions. Shows how to create a server query for fetching data and an action for updating data with revalidation.\n\nLANGUAGE: tsx\nCODE:\n```\nconst getUser = query((id) => {\n  \"use server\";\n  return db.getUser(id);\n}, \"users\");\n\nconst updateUser = action(async (id, data) => {\n  \"use server\"\n  await db.setUser(id, data);\n  throw redirect(\"/\", { revalidate: getUser.keyFor(id) });\n});\n```\n\n----------------------------------------\n\nTITLE: Preventing Soft Navigation with Target Attribute\nDESCRIPTION: Code demonstrating how to prevent soft navigation for both <A /> and <a /> tags by adding the target=\"_self\" attribute.\n\nLANGUAGE: markdown\nCODE:\n```\nTo prevent, both `<A />` and `<a />` tags from soft navigating when JavaScript is present, pass a `target=\"_self\"` attribute.\n```\n\n----------------------------------------\n\nTITLE: Making a System Reactive with Signals and Effects\nDESCRIPTION: Demonstrates how to connect signals and effects to create a reactive system. It uses a currentSubscriber reference to track dependencies and notifies subscribers when signals change.\n\nLANGUAGE: jsx\nCODE:\n```\nlet currentSubscriber = null;\n\nfunction createSignal(initialValue) {\n\tlet value = initialValue;\n\tconst subscribers = new Set();\n\n\tfunction getter() {\n\t\tif (currentSubscriber) {\n\t\t\tsubscribers.add(currentSubscriber);\n\t\t}\n\t\treturn value;\n\t}\n\n\tfunction setter(newValue) {\n\t\tif (value === newValue) return; // if the new value is not different, do not notify dependent effects and memos\n\t\tvalue = newValue;\n\t\tfor (const subscriber of subscribers) {\n\t\t\tsubscriber(); //\n\t\t}\n\t}\n\n\treturn [getter, setter];\n}\n\n// creating an effect\nfunction createEffect(fn) {\n\tconst previousSubscriber = currentSubscriber; // Step 1\n\tcurrentSubscriber = fn;\n\tfn();\n\tcurrentSubscriber = previousSubscriber;\n}\n\n//..\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Configuration File\nDESCRIPTION: Command to initialize a TypeScript project by generating a tsconfig.json file.\n\nLANGUAGE: bash\nCODE:\n```\ntsc --init\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript as Development Dependency\nDESCRIPTION: Command to install TypeScript as a development dependency in a Solid project for migration from JavaScript.\n\nLANGUAGE: bash\nCODE:\n```\ntypescript\n```\n\n----------------------------------------\n\nTITLE: Validating a Reactive System with Interval Updates\nDESCRIPTION: Shows how to test a reactive system by incrementing a count signal at regular intervals. The effect automatically logs each new count value, demonstrating that the system is working.\n\nLANGUAGE: jsx\nCODE:\n```\n//.. \n\nconst [count, setCount] = createSignal(0);\n\ncreateEffect(() => {\n\tconsole.log(\"The count is \" + count());\n});\n\nsetInterval(() => {\n\tsetCount(count() + 1);\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Integrating Solid.js Signals with RxJS\nDESCRIPTION: Example showing how to convert a Solid signal to an RxJS Observable using observable and from. The signal is created, converted to an Observable, and then subscribed to with a console log callback.\n\nLANGUAGE: typescript\nCODE:\n```\n// How to integrate rxjs with a Solid signal\nimport { observable } from \"solid-js\"\nimport { from } from \"rxjs\"\n\nconst [s, set] = createSignal(0)\n\nconst obsv$ = from(observable(s))\n\nobsv$.subscribe((v) => console.log(v))\n```\n\n----------------------------------------\n\nTITLE: Basic Query Function Usage in JavaScript\nDESCRIPTION: Demonstrates how to create and use a cached function with the query higher-order function. The example shows caching behavior with different arguments and the cache expiration.\n\nLANGUAGE: js\nCODE:\n```\nconst getUser = query(\n\t(id, options = {}) =>\n\t\tfetch(`/api/users/${id}?summary=${options.summary || false}`).then((r) =>\n\t\t\tr.json()\n\t),\n\t\"usersById\"\n);\n\ngetUser(123); // Causes a GET request to /api/users/123?summary=false\ngetUser(123); // Does not cause a GET request\ngetUser(123, { summary: true }); // Causes a GET request to /api/users/123?summary=true\nsetTimeout(() => getUser(123, { summary: true }), 999000); // Eventually causes another GET request to /api/users/123?summary=true\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Route in Solid Router Configuration\nDESCRIPTION: This example demonstrates how to define a single route using a route definition object with the Solid Router. It shows the minimal configuration needed with a path property and a component property using lazy loading.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\nconst routes = {\n    path: \"/\",\n    component: lazy(() => import(\"/routes/index.js\")),\n}\n\n\nrender(() => <Router>{routes}</Router>, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting React JSX Import Source with Pragma Comment\nDESCRIPTION: File-level JSX import source override using a pragma comment for React in a mixed JSX project.\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsxImportSource react */\n```\n\n----------------------------------------\n\nTITLE: Typing Refs with Null Checks in Solid.js\nDESCRIPTION: Shows how to safely type ref variables in Solid.js with strict null checks. This approach acknowledges that the ref may initially be undefined and implements checks when accessing it.\n\nLANGUAGE: ts\nCODE:\n```\nlet divRef: HTMLDivElement | undefined\n// This would be flagged as an error during compilation\ndivRef.focus()\nonMount(() => {\n\tif (!divRef) return\n\tdivRef.focus()\n})\nreturn <div ref={divRef}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Signals in Solid.js\nDESCRIPTION: Demonstrates how to create and use signals in Solid.js. The example creates a count signal with an initial value of 1, reads its value, and then updates it using the setter function.\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSignal } from \"solid-js\";\n\nconst [count, setCount] = createSignal(1);\n\nconsole.log(count()); // prints \"1\"\n\nsetCount(0); // changes count to 0\n\nconsole.log(count()); // prints \"0\"\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Solid Project\nDESCRIPTION: Command to clone the Solid TypeScript starter template using degit. This creates a new directory with the TypeScript template files.\n\nLANGUAGE: package-exec\nCODE:\n```\ndegit solidjs/templates/ts my-app\n```\n\n----------------------------------------\n\nTITLE: Using deferStream Option with createResource in Solid.js\nDESCRIPTION: Demonstrates how to use the deferStream option introduced in v1.4.0 to control when the stream flushes in server-side rendering. With deferStream: true, the stream will wait for the resource to load before flushing.\n\nLANGUAGE: tsx\nCODE:\n```\n// fetches a user and streams content as soon as possible\nconst [user] = createResource(() => params.id, fetchUser)\n\n// fetches a user but only streams content after this resource has loaded\nconst [user] = createResource(() => params.id, fetchUser, {\n\tdeferStream: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Events in Solid JSX\nDESCRIPTION: Example of creating and typing custom events in Solid by extending the JSX namespace with a custom event definition.\n\nLANGUAGE: tsx\nCODE:\n```\nclass NameEvent extends CustomEvent {\n\ttype: \"Name\";\n\tdetail: { name: string };\n\n\tconstructor(name: string) {\n\t\tsuper(\"Name\", { detail: { name } });\n\t}\n}\n\ndeclare module \"solid-js\" {\n\tnamespace JSX {\n\t\tinterface CustomEvents {\n\t\t\tName: NameEvent; // Matches `on:Name`\n\t\t}\n\t}\n}\n\n// Usage\n<div on:Name={(event) => console.log(\"name is\", event.detail.name)} />;\n```\n\n----------------------------------------\n\nTITLE: Using Suspense with createResource in Solid.js\nDESCRIPTION: Shows how to combine Suspense with createResource to handle loading states for multiple async operations. Suspense displays a fallback UI while waiting for all async operations to complete.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createResource, Switch, Match, Suspense } from \"solid-js\";\n\nconst fetchUser = async (id) => {\n  const response = await fetch(`https://swapi.dev/api/people/${id}/`);\n  return response.json();\n}\n\nfunction App() {\n  const [userId, setUserId] = createSignal();\n  const [user] = createResource(userId, fetchUser);\n\n  return (\n    <div>\n    <input\n      type=\"number\"\n      min=\"1\"\n      placeholder=\"Enter Numeric Id\"\n      onInput={(e) => setUserId(e.currentTarget.value)}\n    />\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Match when={user.error}>\n            <span>Error: {user.error.message}</span>\n          </Match>\n          <Match when={user()}>\n            <div>{JSON.stringify(user())}</div>\n          </Match>\n        </Switch>\n      </Suspense>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Solid JSX Import Source with Pragma Comment\nDESCRIPTION: File-level JSX import source override using a pragma comment for projects with mixed JSX sources (Solid and React).\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsxImportSource solid-js */\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context Provider in Solid.js\nDESCRIPTION: Example of creating a CounterProvider component that uses the previously created context. The provider manages state with createStore and passes the counter data and methods through the context.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStore } from 'solid-js/store';\nimport { CounterContext, INITIAL_COUNT } from \"./counter.ts\";\n\nexport function CounterProvider(props) {\n    const [value, setValue] = createStore({ count: props.initialCount || INITIAL_COUNT })\n    \n    const counter = [\n        value,\n        {\n            increment() {\n                setValue(\"count\", currentCount => currentCount + 1)\n            },\n            decrement() {\n                setValue(\"count\", currentCount => currentCount - 1)\n            },\n        },\n    ]\n\n    return (\n        <CounterContext.Provider value={counter}>\n            {props.children}\n        </CounterContext.Provider>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and function signature of renderToString in Solid.js\nDESCRIPTION: The function signature for renderToString that synchronously renders Solid components to HTML strings. It accepts a function that returns a component and optional configuration for nonce and renderId.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderToString } from \"solid-js/web\"\n\nfunction renderToString<T>(\n\tfn: () => T,\n\toptions?: {\n\t\tnonce?: string\n\t\trenderId?: string\n\t}\n): string\n\n```\n\n----------------------------------------\n\nTITLE: Importing and using createRenderEffect in Solid.js\nDESCRIPTION: Shows the function signature for createRenderEffect, which creates a computation that runs immediately during rendering. The function takes a computation function and an optional initial value.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRenderEffect } from \"solid-js\"\n\nfunction createRenderEffect<T>(fn: (v: T) => T, value?: T): void\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Action in Solid Router\nDESCRIPTION: Demonstrates how to create a simple echo action using the action function that simulates an asynchronous operation with a delay before logging a message.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { action } from \"@solidjs/router\";\n\nconst echo = action(async (message: string) => {\n  // Simulates an asynchronous operation, such as an API call\n  await new Promise((resolve, reject) => setTimeout(resolve, 1000));\n  console.log(message);\n});\n```\n\n----------------------------------------\n\nTITLE: Using an Emoji as a Favicon in SolidJS\nDESCRIPTION: Complete example of using the emoji SVG function with the Link component to display an emoji as a favicon in a SolidJS application.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MetaProvider, Link } from \"@solidjs/meta\";\n\nexport default function Root() {\n\treturn (\n\t\t<MetaProvider>\n\t\t\t<Link rel=\"icon\" href={emojiSvg(\"😎\")} />\n\t\t</MetaProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Index Component Type Definition in Solid.js\nDESCRIPTION: The TypeScript type definition for the Index component, specifying its parameters and return type. It takes an array to iterate over, an optional fallback element, and a render function that receives a getter for the current item and its index.\n\nLANGUAGE: ts\nCODE:\n```\nimport { Index } from \"solid-js\"\nimport type { JSX } from \"solid-js\"\n\nfunction Index<T, U extends JSX.Element>(props: {\n  each: readonly T[];\n  fallback?: JSX.Element;\n  children: (item: () => T, index: number) => U;\n}): () => U[];\n```\n\n----------------------------------------\n\nTITLE: Publishing to Cloudflare Pages with Wrangler\nDESCRIPTION: Command to deploy the built Solid application to Cloudflare Pages using Wrangler CLI, specifying the dist directory as the build output.\n\nLANGUAGE: bash\nCODE:\n```\nwrangler pages publish dist\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Owner in SolidJS\nDESCRIPTION: The getOwner function returns the reactive scope that owns the currently running code. This is useful for passing ownership context to code that will run outside the current scope.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getOwner } from \"solid-js\"\nimport type { Owner } from \"solid-js\"\n\nfunction getOwner(): Owner\n\n```\n\n----------------------------------------\n\nTITLE: Using Actions with useAction Hook in Components\nDESCRIPTION: Shows how to use the useAction hook to invoke an action from within a component, allowing for programmatic data submission.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { action, useAction } from \"@solidjs/router\";\n\nconst echo = action(async (message: string) => {\n  await new Promise((resolve, reject) => setTimeout(resolve, 1000));\n  console.log(message);\n});\n\nexport function MyComponent() {\n  const myEcho = useAction(echo);\n\n  myEcho(\"Hello from Solid!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Portal component in Solid.js\nDESCRIPTION: Demonstrates how to use the Portal component by mounting content to a specific DOM element with ID 'modal'. This example shows the basic syntax for creating portals in a Solid.js application.\n\nLANGUAGE: tsx\nCODE:\n```\n<Portal mount={document.getElementById(\"modal\")}>\n\t<div>My Content</div>\n</Portal>\n```\n\n----------------------------------------\n\nTITLE: Internal Signals in SolidJS\nDESCRIPTION: Demonstrates using the internal flag to hide signals from the devtools, useful for signals that are used internally by a component and should not be exposed to users.\n\nLANGUAGE: tsx\nCODE:\n```\nconst [count, setCount] = createSignal(0, { internal: true })\n```\n\n----------------------------------------\n\nTITLE: Creating an Emoji Favicon Function in JavaScript\nDESCRIPTION: Function that generates a data URI containing an SVG with an emoji, which can be used as a favicon.\n\nLANGUAGE: jsx\nCODE:\n```\nconst emojiSvg = (emoji) => {\n\treturn (\n\t\t`data:image/svg+xml;utf8,` +\n\t\t`<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>${emoji}</text></svg>`\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Index Component in Solid.js\nDESCRIPTION: A basic usage example of the Index component showing how to render a list. Unlike the For component, the item is a signal because the Index component keys to the index rather than the item itself.\n\nLANGUAGE: tsx\nCODE:\n```\n<Index each={state.list} fallback={<div>Loading...</div>}>\n  {(item) => <div>{item()}</div>}\n</Index>\n```\n\n----------------------------------------\n\nTITLE: Using isServer for conditional code execution\nDESCRIPTION: Demonstrates how to use the isServer boolean for conditional code execution. Code inside the corresponding environment block will be included only in that environment's bundle, with bundlers eliminating unused code.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isServer } from \"solid-js/web\";\n\nif (isServer) {\n\t// I will never make it to the browser bundle\n} else {\n\t// won't be run on the server;\n}\n```\n\n----------------------------------------\n\nTITLE: Using getServerFunctionMeta for Stable Server Function Identification in SolidJS\nDESCRIPTION: This example demonstrates how to use getServerFunctionMeta to create a stable identifier for a server function. The function returns an object with an 'id' property that remains consistent across instances when server functions run in parallel, enabling per-function state tracking. Note that the id value changes between builds.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getServerFunctionMeta } from \"@solidjs/start\";\n\n// or some in-memory db\nconst appCache: any = globalThis;\n\nconst counter = async () => {\n\t\"use server\";\n\tconst { id } = getServerFunctionMeta()!;\n\tconst key = `counter_${id}`;\n\tappCache[key] = appCache[key] ?? 0;\n\tappCache[key]++;\n\n\treturn appCache[key] as number;\n};\n```\n\n----------------------------------------\n\nTITLE: Result of bool:* directive rendering in Solid.js\nDESCRIPTION: This example demonstrates the resulting HTML output when using the bool:* directive. When the value is truthy, the attribute is added without a value, and when falsy, the attribute is completely removed.\n\nLANGUAGE: tsx\nCODE:\n```\n// Assuming `prop.value` is `truthy`, then it becomes\n<my-element status />\n\n// And when `falsy`, then it becomes\n<my-element />\n\n```\n\n----------------------------------------\n\nTITLE: Running a SolidStart Application in Development Mode\nDESCRIPTION: Command to start the development server for a SolidStart application, which will make the application available at http://localhost:3000.\n\nLANGUAGE: bash\nCODE:\n```\ndev\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Component with MetaProvider in SolidJS\nDESCRIPTION: A complete example showing how to use the Base component within a MetaProvider to set the base URL for a SolidJS application.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MetaProvider, Base } from \"@solidjs/meta\";\n\nexport default function Root() {\n\treturn (\n\t\t<MetaProvider>\n\t\t\t<Base target=\"_blank\" href=\"https://docs.solidjs.com/\" />\n\t\t</MetaProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Context Data Type in Solid\nDESCRIPTION: Example of defining a custom data type for use with Solid's context system.\n\nLANGUAGE: typescript\nCODE:\n```\ntype Data = { count: number; name: string };\n```\n\n----------------------------------------\n\nTITLE: Accessing Cache Keys and Revalidation in Solid Router\nDESCRIPTION: Example showing how to access cache keys and use them for cache invalidation through the key, keyFor, and revalidate methods.\n\nLANGUAGE: ts\nCODE:\n```\nlet id = 5;\ngetUser.key; // returns \"users\"\ngetUser.keyFor(id); // returns \"users[5]\"\n```\n\n----------------------------------------\n\nTITLE: Using prop:* directive to set scrollTop property in Solid\nDESCRIPTION: This example demonstrates how to use the prop:* directive to set a DOM property (scrollTop) instead of an attribute. The directive ensures the value is assigned as a property on the element.\n\nLANGUAGE: tsx\nCODE:\n```\n<div prop:scrollTop={props.scrollPos + \"px\"} />\n```\n\n----------------------------------------\n\nTITLE: Using the 'with' Method for Type-Safe Actions in SolidJS Router\nDESCRIPTION: Demonstrates the 'with' method for actions which allows passing typed parameters directly to the action function, eliminating the need for hidden form fields and FormData handling.\n\nLANGUAGE: jsx\nCODE:\n```\nconst deleteTodo = action(async (id: number) => {\n  await api.deleteTodo(id)\n})\n\n<form action={deleteTodo} method=\"post\">\n  <input type=\"hidden\" name=\"id\" value={todo.id} />\n<form action={deleteTodo.with(todo.id)} method=\"post\">\n  <button type=\"submit\">Delete</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing a tRPC Server Endpoint in SolidStart\nDESCRIPTION: Creates an API route that handles tRPC requests using the fetch adapter, processing both GET and POST methods and connecting client requests to the defined router.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type APIEvent } from \"@solidjs/start/server\";\nimport { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\nimport { appRouter } from \"~/lib/router\";\n\nconst handler = (event: APIEvent) =>\n  fetchRequestHandler({\n    endpoint: \"/api/trpc\",\n    req: event.request,\n    router: appRouter,\n    createContext: () => ({})\n  });\n\nexport const GET = handler;\n\nexport const POST = handler;\n```\n\n----------------------------------------\n\nTITLE: HTML Output After Increment in Solid.js Counter\nDESCRIPTION: Shows the HTML output after incrementing the counter, displaying the updated count of 1 and the doubled count of 2, demonstrating reactivity in action.\n\nLANGUAGE: html\nCODE:\n```\nCurrent count: 1 Doubled count: 2\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Index Route in SolidStart\nDESCRIPTION: This code creates a simple index route component that will be rendered when users visit the root path of the application. The component returns a div with a welcome message.\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Index() {\n\treturn <div>Welcome to my site!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks in Markdown\nDESCRIPTION: Example of how to format a multi-line code block in Markdown using triple backticks. The example shows a bash command for npm installation.\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Default Variants in Macaron Styled Components\nDESCRIPTION: Example showing how to specify default variant values that will be applied unless overridden when using the component.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { styled } from \"@macaron-css/solid\";\n\nconst Button = styled(\"button\", {\n\tbase: {\n\t\tbackgroundColor: \"red\",\n\t\tborderRadius: \"10px\",\n\t},\n\tvariants: {\n\t\tcolor: {\n\t\t\tviolet: {\n\t\t\t\tbackgroundColor: \"violet\",\n\t\t\t},\n\t\t\tgray: {\n\t\t\t\tbackgroundColor: \"gray\",\n\t\t\t},\n\t\t},\n\t},\n\tdefaultVariants: {\n\t\tcolor: \"blue\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using Refs with DOM Elements in Solid.js\nDESCRIPTION: Demonstrates two ways to use refs in Solid.js: direct variable assignment and callback function. Use onMount or createEffect to access the ref after it's connected to the DOM.\n\nLANGUAGE: tsx\nCODE:\n```\n// variable assigned directly by ref\nlet myDiv;\n\n// use onMount or createEffect to read after connected to the DOM\nonMount(() => console.log(myDiv));\n\n<div ref={myDiv} />\n\n// Or, callback function (called before connected to the DOM)\n<div ref={el => console.log(el)} />\n```\n\n----------------------------------------\n\nTITLE: Using 'on' with Deferred Execution\nDESCRIPTION: Example demonstrating how to use the 'on' function with the defer option set to true, which prevents the computation from running immediately and only runs it when dependencies change.\n\nLANGUAGE: typescript\nCODE:\n```\n// doesn't run immediately\ncreateEffect(on(a, (v) => console.log(v), { defer: true }));\n\nsetA(\"new\"); // now it runs\n```\n\n----------------------------------------\n\nTITLE: Using createAsync with Suspense in Solid.js\nDESCRIPTION: Demonstrates how to implement the createAsync function to fetch user data asynchronously while handling the loading state with Suspense. The example shows proper integration with SolidStart and is better for use with the cache helper than createResource.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAsync } from \"@solidjs/router\";\nimport { Suspense } from \"solid-js\";\nimport { getUser } from \"./api\";\n\nexport function Component () => {\n\tconst user = createAsync(() => getUser(params.id));\n\n\treturn (\n\t\t<Suspense fallback=\"loading user...\">\n\t\t\t<p>{user()}</p>\n\t\t</Suspense>\n\t);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Styling in Solid.js using String and Object Syntax\nDESCRIPTION: This example demonstrates two ways to apply inline styling to elements in Solid.js: using a string value directly in the style attribute or using an object where keys represent CSS properties and values represent the corresponding values.\n\nLANGUAGE: tsx\nCODE:\n```\n// String\n<div style=\"color: red;\">This is a red div</div>\n\n// Object\n<div style={{ color: \"red\" }}>This is a red div</div>\n```\n\n----------------------------------------\n\nTITLE: Loading Data with createResource in Solid\nDESCRIPTION: Example of data fetching in a SolidStart route component using the createResource primitive, which integrates with Suspense and ErrorBoundary for managing loading states and errors. The code fetches user data from an external API and renders it in a list.\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/users.tsx\nimport { For, createResource } from \"solid-js\";\n\ntype User = { name: string; house: string };\n\nexport default function Page() {\n\tconst [users] = createResource(async () => {\n\t\tconst response = await fetch(\"https://example.com/users\");\n\t\treturn (await response.json()) as User[];\n\t});\n\n\treturn <For each={users()}>{(user) => <li>{user.name}</li>}</For>;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// src/routes/users.jsx\nimport { For, createResource } from \"solid-js\";\n\nexport default function Page() {\n\tconst [users] = createResource(async () => {\n\t\tconst response = await fetch(\"https://example.com/users\");\n\t\treturn (await response.json());\n\t});\n\n\treturn <For each={users()}>{(user) => <li>{user.name}</li>}</For>;\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Refs Between Parent and Child Components\nDESCRIPTION: Shows how to pass a ref from a parent component to a child component, allowing the parent to access DOM elements inside the child. The child receives the ref as a callback function through props.\n\nLANGUAGE: tsx\nCODE:\n```\n// Parent component\nimport { Canvas } from \"./Canvas.jsx\"\n\nfunction ParentComponent() {\n\tlet canvasRef\n\n\tconst animateCanvas = () => {\n\t\t// Manipulate the canvas using canvasRef...\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Canvas ref={canvasRef} />\n\t\t\t<button onClick={animateCanvas}>Animate Canvas</button>\n\t\t</div>\n\t)\n}\n\n// Child component\nfunction Canvas(props) {\n\treturn (\n\t\t<div className=\"canvas-container\">\n\t\t\t<canvas ref={props.ref} /> {/* Assign the ref to the canvas element */}\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Components with Children in Solid.js\nDESCRIPTION: Demonstrates using the ParentComponent type for components that need to accept child elements. This automatically includes the children prop in the component's props type.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ParentComponent } from \"solid-js\";\n\nconst CustomCounter: ParentComponent = (props) => {\n\tconst [count, setCount] = createSignal(0);\n\treturn (\n\t\t<button onClick={() => setCount((prev) => prev + 1)}>\n\t\t\t{count()}\n\t\t\t{props.children}\n\t\t</button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Properly Handling Side Effects with Effects Instead of Memos\nDESCRIPTION: Demonstrates the correct approach of using createEffect for side effects while keeping memos pure. This pattern prevents infinite loops and maintains clean separation of concerns.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createMemo, createEffect } from \"solid-js\"\n\nconst [count, setCount] = createSignal(0)\nconst [message, setMessage] = createSignal(\"\")\n\nconst isEven = createMemo(() => count() % 2 === 0)\n\ncreateEffect(() => {\n\tif (count() > 10) {\n\t\tsetMessage(\"Count is too high!\")\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Tests Output in Vitest\nDESCRIPTION: Sample output from running benchmark tests in Vitest, showing performance comparison metrics between 'For' and 'List' components. The output includes Hz values, min/max times, and relative performance differences.\n\nLANGUAGE: ansi\nCODE:\n```\n[1;36m[RUN][0;36m v1.4.0[0;8m solid-app/src/components/[0m\n\n[0;32m ✓ [0;8msrc/components/list.bench.jsx [0;31m(2)[0;8m 1364ms\n[0;32m   ✓ [0;8mbenchmark[0;31m (2)[0;8m 1360ms\n[1;37m     name       hz      min      max     mean      p75      p99     p995     p999      rme  samples\n[1;32m   · [0;37mFor   [0;36m60.5492  11.2355  47.9164  16.5155  15.4180  47.9164  47.9164  47.9164  [0;37m±13.60%       31   [0;32mfastest\n[1;32m   · [0;37mList  [0;36m49.7725  16.5441  69.3559  20.0914  18.0349  69.3559  69.3559  69.3559  [0;37m±21.37%       25\n\n[1;36m[BENCH][0;36m Summary\n\n[0;37mFor - src/components/list.bench.tsx > benchmark\n[0;32m    1.22x[0;8m faster than[0;37m List\n```\n\n----------------------------------------\n\nTITLE: Switch/Match Alternative for Dynamic Rendering in Solid.js\nDESCRIPTION: This example shows the equivalent functionality of the Dynamic component using Switch and Match components for conditional rendering. It demonstrates how Dynamic offers a more concise approach compared to explicit conditionals.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, Switch, Match, For } from \"solid-js\"\n\nconst RedDiv = () => <div style=\"color: red\">Red</div>\nconst GreenDiv = () => <div style=\"color: green\">Green</div>\nconst BlueDiv = () => <div style=\"color: blue\">Blue</div>\n\nconst options = {\n\tred: RedDiv,\n\tgreen: GreenDiv,\n\tblue: BlueDiv,\n}\n\nfunction App() {\n\tconst [selected, setSelected] = createSignal(\"red\")\n\n\treturn (\n\t\t<>\n\t\t\t<select\n\t\t\t\tvalue={selected()}\n\t\t\t\tonInput={(e) => setSelected(e.currentTarget.value)}\n\t\t\t>\n\t\t\t\t<For each={Object.keys(options)}>\n\t\t\t\t\t{(color) => <option value={color}>{color}</option>} \n\t\t\t\t</For>\n\t\t\t</select>\n\t\t\t<Switch fallback={<BlueDiv />}>\n\t\t\t\t<Match when={selected() === \"red\"}>\n\t\t\t\t\t<RedDiv />\n\t\t\t\t</Match>\n\t\t\t\t<Match when={selected() === \"green\"}>\n\t\t\t\t\t<GreenDiv />\n\t\t\t\t</Match>\n\t\t\t</Switch>\n\t\t</>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic LESS Styles\nDESCRIPTION: Basic example of LESS syntax showing class declarations that are similar to CSS styling. This demonstrates the fundamental structure of a LESS file.\n\nLANGUAGE: less\nCODE:\n```\n//styles.less\n.foo {\n\tcolor: red;\n}\n.bar {\n\tbackground-color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Including CSS in Solid's Root Component\nDESCRIPTION: Code for importing the main CSS file into your Solid application's entry point. This ensures Tailwind styles are loaded when the application starts.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\"\nimport App from \"./App\"\nimport \"./index.css\"\n\nrender(() => <App />, document.getElementById('root') as HTMLElement);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Solid.js\nDESCRIPTION: Basic Tailwind CSS configuration that specifies content paths for Solid.js project files to be processed by Tailwind.\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n\tcontent: [\"./index.html\", \"./src/**/*.{js,ts,jsx,tsx}\"],\n\ttheme: {\n\t\textend: {},\n\t},\n\tplugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Zerops CLI on Linux/MacOS\nDESCRIPTION: Bash command to install the Zerops CLI tool on Linux or MacOS systems using a curl download and shell execution.\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://zerops.io/zcli/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Using Show Component with Key for Route Transitions\nDESCRIPTION: Example of using the Show component with the keyed prop to force re-rendering of components when parameters change, useful for animations and transitions.\n\nLANGUAGE: jsx\nCODE:\n```\n<Show when={params.something} keyed>\n    <MyComponent>\n</Show>\n```\n\n----------------------------------------\n\nTITLE: Specifying Parent Routes with Explicit Path Definition\nDESCRIPTION: Demonstrates how to make a parent route its own route by specifying it separately, either as separate routes or using nested structure with explicit paths.\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/users\" component={Users} />\n<Route path=\"/users/:id\" component={User} />\n\n// or\n\n<Route path=\"/users\">\n  <Route path=\"/\" component={Users} />\n  <Route path=\"/:id\" component={User} />\n</Route>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Router with Preload Functions in Main Component\nDESCRIPTION: Shows how to import and use a preload function in the main application component, configuring routes with lazy-loaded components and preload functionality.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\nimport { preloadUser } from \"./pages/users/[id].data.js\";\n\nconst Home = lazy(() => import(\"./pages/Home\"));\nconst User = lazy(() => import(\"./pages/users/[id]\"));\n\nrender(\n\t() => (\n\t\t<Router>\n\t\t\t<Route path=\"/\" component={Home} />\n\t\t\t<Route path=\"/users/:id\" component={User} preload={preloadUser} />\n\t\t</Router>\n\t),\n\tdocument.getElementById(\"root\")\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects for SPAs on Netlify\nDESCRIPTION: The Netlify _redirects file configuration that routes all paths to index.html with a 200 status code. This ensures that client-side routing works properly for single page applications.\n\nLANGUAGE: sh\nCODE:\n```\n/*   /index.html   200\n```\n\n----------------------------------------\n\nTITLE: Configuring Rewrites for SPAs on Vercel\nDESCRIPTION: The Vercel JSON configuration that handles client-side routing by rewriting all requests to the index.html file. This is added to the vercel.json configuration file.\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"rewrites\": [\n\t\t{\n\t\t\t\"source\": \"/(.*)\",\n\t\t\t\"destination\": \"/index.html\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FileRoutes Component with solid-router in SolidStart\nDESCRIPTION: This example demonstrates how to implement the FileRoutes component within a SolidJS application using solid-router. The component automatically generates routes based on files in the /src/routes directory.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from \"solid-js\";\nimport { Router } from \"@solidjs/router\";\nimport { FileRoutes } from \"@solidjs/start/router\";\n\nexport default function App() {\n\treturn (\n\t\t<Router root={(props) => <Suspense>{props.children}</Suspense>}>\n\t\t\t<FileRoutes />\n\t\t</Router>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Router with FileRoutes in SolidStart\nDESCRIPTION: This snippet demonstrates how to set up a router in a SolidStart application using the FileRoutes component to automatically generate routes based on the file system. The code wraps the routes in a Suspense component to handle lazy-loading.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from \"solid-js\";\nimport { Router } from \"@solidjs/router\";\nimport { FileRoutes } from \"@solidjs/start/router\";\n\nexport default function App() {\n\treturn (\n\t\t<Router root={(props) => <Suspense>{props.children}</Suspense>}>\n\t\t\t<FileRoutes />\n\t\t</Router>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Edge Preset in SolidStart\nDESCRIPTION: Example of configuring SolidStart to use Netlify Edge deployment preset through the server configuration option.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({\n\tserver: {\n\t\tpreset: \"netlify_edge\",\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Wrangler Configuration for Node Compatibility\nDESCRIPTION: Required wrangler.toml configuration to enable Node.js compatibility when deploying SolidStart applications to Cloudflare.\n\nLANGUAGE: toml\nCODE:\n```\ncompatibility_flags = [ \"nodejs_compat\" ]\n```\n\n----------------------------------------\n\nTITLE: Installing @solidjs/meta Package for SolidStart\nDESCRIPTION: Command to install the @solidjs/meta package using npm, which provides components for managing document head metadata in SolidStart applications.\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @solidjs/meta\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Server with CSP Nonce in Solid.js\nDESCRIPTION: This snippet shows how to configure the Solid.js entry server to use the CSP nonce that was previously stored in the event.locals object. This passes the nonce to the client for script validation.\n\nLANGUAGE: tsx\nCODE:\n```\n// src/entry-server.tsx\n// @refresh reload\nimport { createHandler, StartServer } from \"@solidjs/start/server\";\n\nexport default createHandler(\n\t() => <StartServer /* ... */ />,\n\t(event) => ({ nonce: event.locals.nonce })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining onCleanup Function in TypeScript\nDESCRIPTION: The TypeScript signature for the onCleanup function from the solid-js library. This function takes a cleanup callback that will be executed when the current reactive scope is disposed or refreshed.\n\nLANGUAGE: ts\nCODE:\n```\nimport { onCleanup } from \"solid-js\"\n\nfunction onCleanup(fn: () => void): void;\n```\n\n----------------------------------------\n\nTITLE: Complex Example of splitProps with Multiple Property Groups\nDESCRIPTION: A more complex example showing how to split props into multiple groups. This demonstrates splitting six properties into three distinct objects: vowels, consonants, and leftovers.\n\nLANGUAGE: tsx\nCODE:\n```\n<MyComponent a={1} b={2} c={3} d={4} e={5} foo=\"bar\" />\n// ...\n\nfunction MyComponent(props) {\n\tconsole.log(props) // {a: 1, b: 2, c: 3, d: 4, e: 5, foo: \"bar\"}\n\tconst [vowels, consonants, leftovers] = splitProps(\n\t\tprops,\n\t\t[\"a\", \"e\"],\n\t\t[\"b\", \"c\", \"d\"]\n\t)\n\tconsole.log(vowels) // {a: 1, e: 5}\n\tconsole.log(consonants) // {b: 2, c: 3, d: 4}\n\tconsole.log(leftovers.foo) // bar\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SolidJS hydrate Method\nDESCRIPTION: A simple example showing how to use the hydrate method to rehydrate a server-rendered application. This attaches client-side functionality to existing DOM elements created during server rendering.\n\nLANGUAGE: typescript\nCODE:\n```\nconst dispose = hydrate(App, document.getElementById(\"app\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Deferred Readonly Signal in Solid.js (TypeScript)\nDESCRIPTION: The createDeferred function creates a readonly signal that only notifies downstream changes when the browser is idle. It accepts a source function and optional configuration including maximum timeout, equality checking function, and signal name.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDeferred } from \"solid-js\"\n\nfunction createDeferred<T>(\n\tsource: () => T,\n\toptions?: {\n\t\ttimeoutMs?: number\n\t\tequals?: false | ((prev: T, next: T) => boolean)\n\t\tname?: string\n\t}\n): () => T\n```\n\n----------------------------------------\n\nTITLE: Using runWithOwner with setTimeout in Solid.js\nDESCRIPTION: Demonstrates capturing the current owner with getOwner and using runWithOwner to restore it inside a setTimeout callback. This ensures that useContext and createEffect inside the async callback maintain access to the original reactive context.\n\nLANGUAGE: typescript\nCODE:\n```\nconst owner = getOwner()\nsetTimeout(() => {\n\t// This callback gets run without owner.\n\t// Restore owner via runWithOwner:\n\trunWithOwner(owner, () => {\n\t\tconst foo = useContext(FooContext)\n\t\tcreateEffect(() => {\n\t\t\tconsole.log(foo)\n\t\t})\n\t})\n}, 1000)\n```\n\n----------------------------------------\n\nTITLE: Defining useTransition Hook in Solid.js (TypeScript)\nDESCRIPTION: Type signature for the useTransition hook which returns a tuple containing a pending state function and a startTransition function that handles async operations.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTransition } from \"solid-js\"\n\nfunction useTransition(): [\n\tpending: () => boolean,\n\tstartTransition: (fn: () => void) => Promise<void>\n]\n```\n\n----------------------------------------\n\nTITLE: Using useTransition Hook in Solid.js (TypeScript)\nDESCRIPTION: Example of how to use the useTransition hook to check if a transition is pending and to wrap state updates in a transition. The hook is tied to Suspense boundaries for tracking resources.\n\nLANGUAGE: typescript\nCODE:\n```\nconst [isPending, start] = useTransition();\n\n// check if transitioning\nisPending();\n\n// wrap in transition\nstart(() => setSignal(newValue), () => /* transition is done */)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using createEffect in SolidJS\nDESCRIPTION: Shows the basic syntax of the createEffect function in SolidJS, which runs a function whenever tracked dependencies change.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createEffect } from \"solid-js\"\n\nfunction createEffect<T>(fn: (v: T) => T, value?: T): void\n\n```\n\n----------------------------------------\n\nTITLE: Creating Effects in Solid.js\nDESCRIPTION: Shows how to create and use effects in Solid.js. The effect automatically runs when any of its dependent signals change, in this case logging the count value whenever it changes.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSignal, createEffect } from \"solid-js\";\n\nconst [count, setCount] = createSignal(0);\n\ncreateEffect(() => {\n\tconsole.log(count());\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Function Signature for indexArray in Solid.js\nDESCRIPTION: Function signature for indexArray, which maps a list by index. The item is provided as a signal while the index is a constant value. This is the underlying helper for the <Index> control flow component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { indexArray } from \"solid-js\"\n\nfunction indexArray<T, U>(\n\tlist: () => readonly T[],\n\tmapFn: (v: () => T, i: number) => U\n): () => U[]\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all necessary npm dependencies for the Solid project.\n\nLANGUAGE: package-install-local\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating Links in Markdown for Solid Documentation\nDESCRIPTION: Examples showing how to create proper descriptive links in Markdown, with both recommended and discouraged approaches for accessibility.\n\nLANGUAGE: markdown\nCODE:\n```\nDo: Check the [Solid homepage](https://www.solidjs.com)\nDon't: Click [here](https://www.solidjs.com) to go to the Solid homepage.\n```\n\n----------------------------------------\n\nTITLE: Formatting Step-by-Step Instructions in Solid Docs\nDESCRIPTION: Examples showing the preferred style for writing step-by-step instructions in Solid documentation, using verb-first sentence structure.\n\nLANGUAGE: markdown\nCODE:\n```\n- Do: Download npm.\n- Don't: You will/should download npm.\n```"
  }
]