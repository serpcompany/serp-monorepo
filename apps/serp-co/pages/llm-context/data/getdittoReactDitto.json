[
  {
    "owner": "getditto",
    "repo": "react-ditto",
    "content": "TITLE: Setting up DittoProvider in a React application\nDESCRIPTION: Example of wrapping a React application with the DittoProvider to provide Ditto context to all child components. Shows error and loading state handling.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DittoProvider setup={createDittoInstance}>\n  {({ loading, error }) => {\n    if (loading) return <span>Loading Ditto...</span>\n    if (error)\n      return (\n        <span>There was an error loading Ditto. Error: {error.toString()}</span>\n      )\n    return <App />\n  }}\n</DittoProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Online Ditto Instance with Authentication in React\nDESCRIPTION: This snippet demonstrates how to set up a React root component with a single Ditto instance using a development connection. It utilizes the useOnlineIdentity hook for authentication and DittoProvider for context management.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n/** Example of a React root component setting up a single ditto instance that uses a development connection */\nimport { useEffect } from 'react'\n\nconst RootComponent = () => {\n  const { create, getAuthenticationRequired, getTokenExpiresInSeconds } =\n    useOnlineIdentity()\n\n  return (\n    <>\n      <DittoProvider\n        setup={() => {\n          const ditto = new Ditto(\n            create(\n              { appID: 'your-app-id', path: '/my-online-path' },\n              '/my-online-path',\n            ),\n          )\n          ditto.startSync()\n          return ditto\n        }}\n        /*initOptions={initOptions} */\n      >\n        {({ loading, error, ditto }) => {\n          if (loading) return <p>Loading</p>\n          if (error) return <p>{error.message}</p>\n          return <App />\n        }}\n      </DittoProvider>\n    </>\n  )\n}\n\nconst App = () => {\n  const ditto = useDitto()\n\n  useEffect(() => {\n    if (ditto) {\n      ditto.auth\n        .loginWithToken('token', 'provider')\n        .then(() => console.log('Login successful'))\n    }\n  }, [ditto])\n\n  return <div>Hello world!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Ditto with Vite in a Root Component\nDESCRIPTION: Example of setting up Ditto in a React application using Vite build tool, configuring the WebAssembly module path, and initializing an online playground Ditto instance.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// ... other imports from vite above\nimport { Ditto } from '@dittolive/ditto'\nimport {\n  DittoProvider,\n  useOnlinePlaygroundIdentity,\n} from '@dittolive/react-ditto'\n\n/**\n * This configuration is optional for web browser-based react applications. This\n * tells the `DittoProvider` where it should load the .wasm file. If no path is\n * provided (ie. initOptions is undefined), the wasm will be loaded from our\n * CDN. If you enable this, make sure to serve the `ditto.wasm` file with the\n * correct MIME type and CORS headers. See\n * https://www.npmjs.com/package/@dittolive/ditto#browser-environments for\n * details.\n **/\nconst initOptions = {\n  webAssemblyModule: '/ditto.wasm',\n}\n\n/** Example of a React root component setting up a single ditto instance that uses a development connection */\nconst RootComponent = () => {\n  const { create } = useOnlinePlaygroundIdentity()\n\n  return (\n    <DittoProvider\n      setup={async () => {\n        const ditto = new Ditto(\n          create({\n            // Create an app on https://portal.ditto.live/ and follow the\n            // instructions to get your token. Replace the placeholders below\n            // with your app id and token.\n            appID: 'your-app-id',\n            token: 'your-online-playground-token',\n          }),\n          'testing',\n        )\n        await ditto.disableSyncWithV3()\n        ditto.startSync()\n        return ditto\n      }}\n      /* initOptions={initOptions} */\n    >\n      {({ loading, error }) => {\n        if (loading) return <p>Loading</p>\n        if (error) return <p>{error.message}</p>\n        return <App />\n      }}\n    </DittoProvider>\n  )\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(\n  <React.StrictMode>\n    <RootComponent />\n  </React.StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Ditto Hooks in a React App Component\nDESCRIPTION: Example of using Ditto React hooks in an App component to fetch documents from a collection and perform mutations like adding and removing tasks.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePendingCursorOperation, useMutations } from '@dittolive/react-ditto'\n\nexport default function App() {\n  const { documents } = usePendingCursorOperation({\n    collection: 'tasks',\n  })\n\n  const { removeByID, upsert } = useMutations({ collection: 'tasks' })\n\n  return (\n    <>\n      <button onClick={() => upsert({ value: { text: 'Hello' } })}>\n        Add Task\n      </button>\n      <ul>\n        {documents.map((doc) => (\n          <li key={doc._id}>\n            {JSON.stringify(doc.value)}\n            <button onClick={() => removeByID({ _id: doc.id })}>remove</button>\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ditto instance with DittoProvider\nDESCRIPTION: Example of creating a Ditto instance for use with DittoProvider, including instantiation and starting synchronization.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst createDittoInstance = () => {\n  const ditto = new Ditto(createIdentity(), 'some-path')\n  ditto.startSync()\n  return ditto\n}\n\n;<DittoProvider setup={createDittoInstance}>\n  {({ loading, error }) => {\n    if (loading) return <span>Loading Ditto...</span>\n    if (error)\n      return (\n        <span>There was an error loading Ditto. Error: {error.toString()}</span>\n      )\n    return <App />\n  }}\n</DittoProvider>\n```\n\n----------------------------------------\n\nTITLE: Creating Online Identities with Authentication for Ditto\nDESCRIPTION: Example of using the useOnlineIdentity hook to create an online Ditto identity with authentication enabled, providing access to authentication status and token expiration.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst { create, getAuthenticationRequired, getTokenExpiresInSeconds } =\n  useOnlineIdentity()\n\nconst createDittoInstance = (forPath: string) => {\n  // Example of how to create an online instance with authentication enabled\n  const dittoOnline = new Ditto(\n    create(\n      {\n        // If you're using the Ditto cloud, this ID should be the app ID shown on your app settings page on the portal.\n        appID: uuidv4(),\n        enableDittoCloudSync: true,\n      },\n      forPath,\n    ),\n    forPath,\n  )\n  dittoOnline.startSync()\n  return dittoOnline\n}\n```\n\n----------------------------------------\n\nTITLE: Using DittoLazyProvider for dynamic Ditto instance creation\nDESCRIPTION: Example of using DittoLazyProvider to lazily create Ditto instances based on dynamic path requirements, with asynchronous identity creation.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst createDittoInstance = async (path) => {\n  let identity\n  if (path === 'path-1') {\n    identity = await getIdentityForPath1()\n  } else if (path === 'path-2') {\n    identity = await getIdentityForPath2()\n  }\n\n  if (identity) {\n    const ditto = new Ditto(createIdentity(), path)\n    ditto.startSync()\n    return ditto\n  } else {\n    return Promise.resolve(null)\n  }\n}\n\n;<DittoLazyProvider setup={createDittoInstance}>\n  {({ loading, error }) => {\n    if (loading) return <span>Loading Ditto...</span>\n    if (error)\n      return (\n        <span>There was an error loading Ditto. Error: {error.toString()}</span>\n      )\n    return <App />\n  }}\n</DittoLazyProvider>\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Ditto Hooks for On-Demand Queries\nDESCRIPTION: Example of using lazy variants of Ditto hooks to execute queries in response to user events instead of automatically on component mount.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLazyPendingCursorOperation } from '@dittolive/react-ditto'\n\nexport default function App() {\n  const { documents, exec } = useLazyPendingCursorOperation()\n\n  if (!documents?.length) {\n    return (\n      <button onClick={() => exec({ collection: 'tasks' })}>\n        Click to load!\n      </button>\n    )\n  }\n\n  return (\n    <ul>\n      {documents.map((doc) => (\n        <li key={doc._id}>{JSON.stringify(doc.value)}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Online Playground Identities for Ditto\nDESCRIPTION: Example of using the useOnlinePlaygroundIdentity hook to create an online playground identity with an authentication token for Ditto cloud synchronization.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst { create } = useOnlinePlaygroundIdentity()\n\nconst createDittoInstance = (forPath: string) => {\n  // Example of how to create an online playground instance\n  const dittoOnline = new Ditto(\n    create({\n      // If you're using the Ditto cloud, this ID should be the app ID shown on your app settings page on the portal.\n      appID: uuidv4(),\n      // If you're using the Ditto cloud, this token should be the Online Playground Authentication Token shown on your app settings page on the portal.\n      token: 'my-token',\n    }),\n    forPath,\n  )\n  dittoOnline.startSync()\n  return dittoOnline\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Offline Playground Identities for Ditto\nDESCRIPTION: Example of using the useOfflinePlaygroundIdentity hook to create an offline playground identity for Ditto, specifying app ID and site ID.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst { create } = useOfflinePlaygroundIdentity()\n\nconst createDittoInstance = (forPath: string) => {\n  // Example of how to create an offline playground instance\n  const dittoPlaygroundIdentity = new Ditto(\n    create({\n      // If you're using the Ditto cloud, this ID should be the app ID shown on your app settings page on the portal.\n      appID: uuidv4(),\n      siteID: 123,\n    }),\n    forPath,\n  )\n  dittoPlaygroundIdentity.startSync()\n  return dittoPlaygroundIdentity\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ditto React Library with npm or yarn\nDESCRIPTION: Commands to install the required Ditto packages using npm or yarn package managers.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @dittolive/ditto @dittolive/react-ditto\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @dittolive/ditto @dittolive/react-ditto\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Yarn\nDESCRIPTION: Command to start the application in development mode, which will run a local server on port 3000 and enable hot reloading for editing.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/examples/vite-typescript-example/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle with Yarn\nDESCRIPTION: Command to build the application for production deployment, creating optimized bundles in the dist folder.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/examples/vite-typescript-example/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Node OpenSSL Legacy Provider Flag\nDESCRIPTION: Command-line option to work around ERR_OSSL_EVP_UNSUPPORTED errors in newer Node versions by enabling legacy OpenSSL provider.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/examples/vite-typescript-example/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--openssl-legacy-provider\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Yarn\nDESCRIPTION: Command to launch the test runner in interactive watch mode, which will automatically re-run tests when files are changed.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/examples/vite-typescript-example/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Checking with Yarn\nDESCRIPTION: Command to run the TypeScript type checker separately from build process to verify type correctness.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/examples/vite-typescript-example/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn type-check\n```\n\n----------------------------------------\n\nTITLE: Running ESLint with Yarn\nDESCRIPTION: Command to execute ESLint to identify and automatically fix linting issues according to project configuration.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/examples/vite-typescript-example/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Version Changelog Entry Format\nDESCRIPTION: Changelog entry showing version number, comparison link, date, and categorized changes including features and bug fixes.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [0.11.2](https://github.com/getditto/react-ditto/compare/v0.11.1...v0.11.2) (2024-12-02)\n\n### [0.11.1](https://github.com/getditto/react-ditto/compare/v0.11.0...v0.11.1) (2024-05-22)\n\n### Features\n\n* add support for async setup functions ([78a7509](https://github.com/getditto/react-ditto/commit/78a7509eb241155e410b9e9bfe20c54983a3af29))\n* match supported browsers with the `@dittolive/ditto` package. see [Ditto's documentation](https://docs.ditto.live/compatibility/js-web) for details. ([35c29d4](https://github.com/getditto/react-ditto/commit/35c29d476e6579f4dcf2527b9908849dc0b781f9)), closes [#48](https://github.com/getditto/react-ditto/issues/48)\n\n### Bug Fixes\n\n* remove implicit dependency on `lodash` ([9b56f93](https://github.com/getditto/react-ditto/commit/9b56f9331de4e5718478717d0c9527dca2764d15))\n* throw when setup closure does not return a `Ditto` instance ([36d7e58](https://github.com/getditto/react-ditto/commit/36d7e58ea62c719ff44265716c4d09a46c85bd5b))\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Access Control for Web Crawlers in robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers to access all pages on the website. The configuration specifically sets no restrictions for any user-agent.\nSOURCE: https://github.com/getditto/react-ditto/blob/master/examples/vite-typescript-example/public/robots.txt#2025-04-19_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```"
  }
]