[
  {
    "owner": "inngest",
    "repo": "inngest",
    "content": "TITLE: Creating and Triggering a Durable Function with Inngest in TypeScript\nDESCRIPTION: This example demonstrates how to create a durable function with Inngest that processes product images. It includes concurrency control by user ID and two steps that are automatically retried on failure: copying images to S3 and resizing them. The code also shows how to trigger this function by sending an event.\nSOURCE: https://github.com/inngest/inngest/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"import-product-images\",\n    concurrency: {\n      key: \"event.data.userId\",\n      limit: 10\n    }\n  },\n  { event: \"shop/product.imported\" },\n  async ({ event, step }) => {\n    // Here goes the business logic\n    // By wrapping code in steps, each will be retried automatically on failure\n    const s3Urls = await step.run(\"copy-images-to-s3\", async () => {\n      return copyAllImagesToS3(event.data.imageURLs);\n    });\n    // You can include numerous steps in your function\n    await step.run(\"resize-images\", async () => {\n      await resizer.bulk({ urls: s3Urls, quality: 0.9, maxWidth: 1024 });\n    })\n  };\n);\n\n// Elsewhere in your code (e.g. in your API endpoint):\nawait inngest.send({\n  name: \"shop/product.imported\",\n  data: {\n    userId: \"01J8G44701QYGE0DH65PZM8DPM\",\n    imageURLs: [\n      \"https://useruploads.acme.com/q2345678/1094.jpg\",\n      \"https://useruploads.acme.com/q2345678/1095.jpg\"\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integration with net/http using zerolog\nDESCRIPTION: This snippet integrates zerolog with net/http handlers by using hlog package in combination with alice. It logs contextual HTTP request information.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\nlog := zerolog.New(os.Stdout).With().\n    Timestamp().\n    Str(\"role\", \"my-service\").\n    Str(\"host\", host).\n    Logger()\n\nc := alice.New()\n\n// Install the logger handler with default output on the console\nc = c.Append(hlog.NewHandler(log))\n\n// Install some provided extra handler to set some request's context fields.\n// Thanks to that handler, all our logs will come with some prepopulated fields.\nc = c.Append(hlog.AccessHandler(func(r *http.Request, status, size int, duration time.Duration) {\n    hlog.FromRequest(r).Info().\n        Str(\"method\", r.Method).\n        Stringer(\"url\", r.URL).\n        Int(\"status\", status).\n        Int(\"size\", size).\n        Dur(\"duration\", duration).\n        Msg(\"\")\n}))\nc = c.Append(hlog.RemoteAddrHandler(\"ip\"))\nc = c.Append(hlog.UserAgentHandler(\"user_agent\"))\nc = c.Append(hlog.RefererHandler(\"referer\"))\nc = c.Append(hlog.RequestIDHandler(\"req_id\", \"Request-Id\"))\n\n// Here is your final handler\nh := c.Then(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    // Get the logger from the request's context. You can safely assume it\n    // will be always there: if the handler is removed, hlog.FromRequest\n    // will return a no-op logger.\n    hlog.FromRequest(r).Info().\n        Str(\"user\", \"current user\").\n        Str(\"status\", \"ok\").\n        Msg(\"Something happened\")\n\n    // Output: {\"level\":\"info\",\"time\":\"2001-02-03T04:05:06Z\",\"role\":\"my-service\",\"host\":\"local-hostname\",\"req_id\":\"b4g0l5t6tfid6dtrapu0\",\"user\":\"current user\",\"status\":\"ok\",\"message\":\"Something happened\"}\n}))\nhttp.Handle(\"/\", h)\n\nif err := http.ListenAndServe(\":8080\", nil); err != nil {\n    log.Fatal().Err(err).Msg(\"Startup failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the standardized event payload structure used for communication with Inngest servers. Includes required fields like id, name, data and optional fields like user metadata.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  /**\n   * A unique ID used to idempotently process a given event payload.\n   *\n   * A developer can set this when sending events to ensure that the event is\n   * only processed once; if an event with the same ID is sent again, it will\n   * not trigger any functions.\n   */\n  id: string;\n\n  /**\n   * A unique ID for the type of event. We recommend using lowercase dot\n   * notation for names, prepending `prefixes/` with a slash for organization.\n   *\n   * e.g. `cloudwatch/alarms.triggered`, `cart/session.created`\n   */\n  name: string;\n\n  /**\n   * Any data pertinent to the event.\n   *\n   * Must be an object, in order to encourage evolving data.\n   */\n  data: { [key: string]: any };\n\n  /**\n   * Any user data associated with the event.\n   */\n  user?: { [key: string]: any };\n\n  /**\n   * An integer representing the milliseconds since the unix epoch at which this\n   * event occurred.\n   */\n  ts: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Structured Output Generation with OpenAI in Go\nDESCRIPTION: Shows how to generate structured JSON outputs from OpenAI chat completions using JSON schemas and custom Go structs for response parsing.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/sashabaranov/go-openai\"\n\t\"github.com/sashabaranov/go-openai/jsonschema\"\n)\n\nfunc main() {\n\tclient := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\ttype Result struct {\n\t\tSteps []struct {\n\t\t\tExplanation string `json:\"explanation\"`\n\t\t\tOutput      string `json:\"output\"`\n\t\t} `json:\"steps\"`\n\t\tFinalAnswer string `json:\"final_answer\"`\n\t}\n\tvar result Result\n\tschema, err := jsonschema.GenerateSchemaForType(result)\n\tif err != nil {\n\t\tlog.Fatalf(\"GenerateSchemaForType error: %v\", err)\n\t}\n\tresp, err := client.CreateChatCompletion(ctx, openai.ChatCompletionRequest{\n\t\tModel: openai.GPT4oMini,\n\t\tMessages: []openai.ChatCompletionMessage{\n\t\t\t{\n\t\t\t\tRole:    openai.ChatMessageRoleSystem,\n\t\t\t\tContent: \"You are a helpful math tutor. Guide the user through the solution step by step.\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tRole:    openai.ChatMessageRoleUser,\n\t\t\t\tContent: \"how can I solve 8x + 7 = -23\",\n\t\t\t},\n\t\t},\n\t\tResponseFormat: &openai.ChatCompletionResponseFormat{\n\t\t\tType: openai.ChatCompletionResponseFormatTypeJSONSchema,\n\t\t\tJSONSchema: &openai.ChatCompletionResponseFormatJSONSchema{\n\t\t\t\tName:   \"math_reasoning\",\n\t\t\t\tSchema: schema,\n\t\t\t\tStrict: true,\n\t\t\t},\n\t\t},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"CreateChatCompletion error: %v\", err)\n\t}\n\terr = schema.Unmarshal(resp.Choices[0].Message.Content, &result)\n\tif err != nil {\n\t\tlog.Fatalf(\"Unmarshal schema error: %v\", err)\n\t}\n\tfmt.Println(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic NATS Usage in Go\nDESCRIPTION: Demonstrates basic NATS operations including connecting, publishing, subscribing, and handling requests/replies.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/nats-io/nats.go\"\n\n// Connect to a server\nnc, _ := nats.Connect(nats.DefaultURL)\n\n// Simple Publisher\nnc.Publish(\"foo\", []byte(\"Hello World\"))\n\n// Simple Async Subscriber\nnc.Subscribe(\"foo\", func(m *nats.Msg) {\n    fmt.Printf(\"Received a message: %s\\n\", string(m.Data))\n})\n\n// Responding to a request message\nnc.Subscribe(\"request\", func(m *nats.Msg) {\n    m.Respond([]byte(\"answer is 42\"))\n})\n\n// Simple Sync Subscriber\nsub, err := nc.SubscribeSync(\"foo\")\nm, err := sub.NextMsg(timeout)\n\n// Channel Subscriber\nch := make(chan *nats.Msg, 64)\nsub, err := nc.ChanSubscribe(\"foo\", ch)\nmsg := <- ch\n\n// Unsubscribe\nsub.Unsubscribe()\n\n// Drain\nsub.Drain()\n\n// Requests\nmsg, err := nc.Request(\"help\", []byte(\"help me\"), 10*time.Millisecond)\n\n// Replies\nnc.Subscribe(\"help\", func(m *nats.Msg) {\n    nc.Publish(m.Reply, []byte(\"I can help!\"))\n})\n\n// Drain connection (Preferred for responders)\n// Close() not needed if this is called.\nnc.Drain()\n\n// Close connection\nnc.Close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Durable Functions with Inngest Go SDK\nDESCRIPTION: Complete example showing how to set up and implement durable functions using Inngest in Go. Includes client initialization, function creation, event handling, and workflow management with features like step execution, event waiting, and error handling.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/inngest/inngestgo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/inngest/inngestgo\"\n\t\"github.com/inngest/inngestgo/step\"\n)\n\nfunc main() {\n\tclient, err := inngestgo.NewClient(inngestgo.ClientOpts{\n\t\tAppID: \"core\",\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t_, err = inngestgo.CreateFunction(\n\t\tclient,\n\t\tinngestgo.FunctionOpts{\n\t\t\tID: \"account-created\",\n\t\t},\n\t\t// Run on every api/account.created event.\n\t\tinngestgo.EventTrigger(\"api/account.created\", nil),\n\t\tAccountCreated,\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\thttp.ListenAndServe(\":8080\", client.Serve())\n}\n\nfunc AccountCreated(\n\tctx context.Context,\n\tinput inngestgo.Input[AccountCreatedEventData],\n) (any, error) {\n\tstep.Sleep(ctx, \"initial-delay\", time.Second)\n\n\tresult, err := step.Run(ctx, \"on-user-created\", func(ctx context.Context) (bool, error) {\n\t\tresult, err := emails.Send(emails.Opts{})\n\t\treturn result, err\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t_ = result\n\n\tfn, err := step.WaitForEvent[FunctionCreatedEvent](\n\t\tctx,\n\t\t\"wait-for-activity\",\n\t\tstep.WaitForEventOpts{\n\t\t\tName:    \"Wait for a function to be created\",\n\t\t\tEvent:   \"api/function.created\",\n\t\t\tTimeout: time.Hour * 72,\n\t\t\tIf: inngestgo.StrPtr(\"event.data.user_id == async.data.user_id\"),\n\t\t},\n\t)\n\tif err == step.ErrEventNotReceived {\n\t\tstep.Run(ctx, \"follow-up-email\", func(ctx context.Context) (any, error) {\n\t\t\treturn true, nil\n\t\t})\n\t\treturn nil, nil\n\t}\n\n\tfmt.Println(fn.Data.FunctionID)\n\n\treturn nil, nil\n}\n\ntype AccountCreatedEvent inngestgo.GenericEvent[AccountCreatedEventData]\ntype AccountCreatedEventData struct {\n\tAccountID string\n}\n\ntype FunctionCreatedEvent inngestgo.GenericEvent[FunctionCreatedEventData]\ntype FunctionCreatedEventData struct {\n\tFunctionID string\n}\n```\n\n----------------------------------------\n\nTITLE: Continuous Message Polling in Go\nDESCRIPTION: Discusses continuous message retrieval patterns using `Messages()` and `Consume()`. The snippet exemplifies push-like behavior, subject filtering, and error handling, enhancing efficient message fetching and processing.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ncons, _ := js.CreateOrUpdateConsumer(\"ORDERS\", jetstream.ConsumerConfig{\n    AckPolicy: jetstream.AckExplicitPolicy,\n    // receive messages from ORDERS.A subject only\n    FilterSubject: \"ORDERS.A\"\n}))\n\nconsContext, _ := c.Consume(func(msg jetstream.Msg) {\n    fmt.Printf(\"Received a JetStream message: %s\\n\", string(msg.Data()))\n})\ndefer consContext.Stop()\n```\n\nLANGUAGE: go\nCODE:\n```\niter, _ := cons.Messages()\nfor {\n    msg, err := iter.Next()\n    // Next can return error, e.g. when iterator is closed or no heartbeats were received\n    if err != nil {\n        //handle error\n    }\n    fmt.Printf(\"Received a JetStream message: %s\\n\", string(msg.Data()))\n    msg.Ack()\n}\niter.Stop()\n```\n\n----------------------------------------\n\nTITLE: Redis Transaction Implementation with rueidiscompat.Adapter in Go\nDESCRIPTION: Demonstrates how to implement Redis transactions using rueidiscompat.Adapter with optimistic locking and automatic retry on conflicts.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/rueidiscompat/README.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/redis/rueidis\"\n\t\"github.com/redis/rueidis/rueidiscompat\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tclient, err := rueidis.NewClient(rueidis.ClientOption{InitAddress: []string{\"127.0.0.1:6379\"}})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\tkey := \"my_counter\"\n\trdb := rueidiscompat.NewAdapter(client)\n\ttxf := func(tx rueidiscompat.Tx) error {\n\t\tn, err := tx.Get(ctx, key).Int()\n\t\tif err != nil && err != rueidiscompat.Nil {\n\t\t\treturn err\n\t\t}\n\t\t// Operation is commited only if the watched keys remain unchanged.\n\t\t_, err = tx.TxPipelined(ctx, func(pipe rueidiscompat.Pipeliner) error {\n\t\t\tpipe.Set(ctx, key, n+1, 0)\n\t\t\treturn nil\n\t\t})\n\t\treturn err\n\t}\n\tfor {\n\t\terr := rdb.Watch(ctx, txf, key)\n\t\tif err == nil {\n\t\t\tbreak\n\t\t} else if err == rueidiscompat.TxFailedErr {\n\t\t\t// Optimistic lock lost. Retry if the key has been changed.\n\t\t\tcontinue\n\t\t}\n\t\tpanic(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: JetStream Basic Usage in Go\nDESCRIPTION: Shows how to use JetStream, NATS' built-in persistence system, including creating a context, accessing streams and consumers, and consuming messages.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// connect to nats server\nnc, _ := nats.Connect(nats.DefaultURL)\n\n// create jetstream context from nats connection\njs, _ := jetstream.New(nc)\n\nctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\ndefer cancel()\n\n// get existing stream handle\nstream, _ := js.Stream(ctx, \"foo\")\n\n// retrieve consumer handle from a stream\ncons, _ := stream.Consumer(ctx, \"cons\")\n\n// consume messages from the consumer in callback\ncc, _ := cons.Consume(func(msg jetstream.Msg) {\n    fmt.Println(\"Received jetstream message: \", string(msg.Data()))\n    msg.Ack()\n})\ndefer cc.Stop()\n```\n\n----------------------------------------\n\nTITLE: Processing an Ordered Stream Concurrently in Go\nDESCRIPTION: This snippet demonstrates how to process an ordered stream concurrently while maintaining order. The standard library version uses multiple goroutines and channels, while the conc version simplifies the process using the stream package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc mapStream(\n    in chan int,\n    out chan int,\n    f func(int) int,\n) {\n    tasks := make(chan func())\n    taskResults := make(chan chan int)\n\n    // Worker goroutines\n    var workerWg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        workerWg.Add(1)\n        go func() {\n            defer workerWg.Done()\n            for task := range tasks {\n                task()\n            }\n        }()\n    }\n\n    // Ordered reader goroutines\n    var readerWg sync.WaitGroup\n    readerWg.Add(1)\n    go func() {\n        defer readerWg.Done()\n        for result := range taskResults {\n            item := <-result\n            out <- item\n        }\n    }()\n\n    // Feed the workers with tasks\n    for elem := range in {\n        resultCh := make(chan int, 1)\n        taskResults <- resultCh\n        tasks <- func() {\n            resultCh <- f(elem)\n        }\n    }\n\n    // We've exhausted input.\n    // Wait for everything to finish\n    close(tasks)\n    workerWg.Wait()\n    close(taskResults)\n    readerWg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc mapStream(\n    in chan int,\n    out chan int,\n    f func(int) int,\n) {\n    s := stream.New().WithMaxGoroutines(10)\n    for elem := range in {\n        elem := elem\n        s.Go(func() stream.Callback {\n            res := f(elem)\n            return func() { out <- res }\n        })\n    }\n    s.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Validator in Go\nDESCRIPTION: This snippet outlines the key techniques used to implement an efficient JSON validator in Go. It includes using a single-pass parser, reducing function calls, implementing a state machine, and reusing memory to achieve zero allocations per validation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/design.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (p *Parser) Validate() bool {\n    // Implementation of single-pass parser\n    // State machine using switch statements\n    // Stack for tracking array and object nesting\n    // Zero allocations per validation\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context to Errors using errors.Wrap\nDESCRIPTION: Shows how to use the errors.Wrap function to add context to an error without destroying its original value. This example wraps an error from ioutil.ReadAll with additional context.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n_, err := ioutil.ReadAll(r)\nif err != nil {\n        return errors.Wrap(err, \"read failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Rueidis Client Usage in Go\nDESCRIPTION: Demonstrates initializing a Rueidis client and performing basic Redis operations like SET and HGETALL. Shows error handling and proper client cleanup.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/redis/rueidis\"\n)\n\nfunc main() {\n\tclient, err := rueidis.NewClient(rueidis.ClientOption{InitAddress: []string{\"127.0.0.1:6379\"}})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\tctx := context.Background()\n\t// SET key val NX\n\terr = client.Do(ctx, client.B().Set().Key(\"key\").Value(\"val\").Nx().Build()).Error()\n\t// HGETALL hm\n\thm, err := client.Do(ctx, client.B().Hgetall().Key(\"hm\").Build()).AsStrMap()\n}\n```\n\n----------------------------------------\n\nTITLE: Spawning Goroutines and Waiting for Completion in Go\nDESCRIPTION: This snippet demonstrates how to spawn a set of goroutines and wait for them to finish using both the standard library's sync.WaitGroup and the conc package's WaitGroup. The conc version simplifies error handling and reduces boilerplate code.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            // crashes on panic!\n            doSomething()\n        }()\n    }\n    wg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg conc.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Go(doSomething)\n    }\n    wg.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI ChatGPT Integration in Go\nDESCRIPTION: This snippet demonstrates how to use Azure OpenAI services for ChatGPT integration in Go. It sets up a client with Azure-specific configuration and creates a chat completion request.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tconfig := openai.DefaultAzureConfig(\"your Azure OpenAI Key\", \"https://your Azure OpenAI Endpoint\")\n\t// If you use a deployment name different from the model name, you can customize the AzureModelMapperFunc function\n\t// config.AzureModelMapperFunc = func(model string) string {\n\t// \tazureModelMapping := map[string]string{\n\t// \t\t\"gpt-3.5-turbo\": \"your gpt-3.5-turbo deployment name\",\n\t// \t}\n\t// \treturn azureModelMapping[model]\n\t// }\n\n\tclient := openai.NewClientWithConfig(config)\n\tresp, err := client.CreateChatCompletion(\n\t\tcontext.Background(),\n\t\topenai.ChatCompletionRequest{\n\t\t\tModel: openai.GPT3Dot5Turbo,\n\t\t\tMessages: []openai.ChatCompletionMessage{\n\t\t\t\t{\n\t\t\t\t\tRole:    openai.ChatMessageRoleUser,\n\t\t\t\t\tContent: \"Hello Azure OpenAI!\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\tfmt.Printf(\"ChatCompletion error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(resp.Choices[0].Message.Content)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using LRU Cache in Go\nDESCRIPTION: This snippet demonstrates how to create a new LRU cache with a specified size, add elements to it, and verify its length. It creates a cache with a capacity of 128 items, adds 256 items, and then checks if the length is correctly limited to 128.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/golang-lru/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nl, _ := New(128)\nfor i := 0; i < 256; i++ {\n    l.Add(i, nil)\n}\nif l.Len() != 128 {\n    panic(fmt.Sprintf(\"bad len: %v\", l.Len()))\n}\n```\n\n----------------------------------------\n\nTITLE: Chi Router Interface Definition in Go\nDESCRIPTION: Defines the Router interface used by Chi, showcasing all available routing methods and their signatures. This interface outlines the core functionality of the Chi router, including middleware handling, route grouping, and HTTP method-specific routing.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Router consisting of the core routing methods used by chi's Mux,\n// using only the standard net/http.\ntype Router interface {\n\thttp.Handler\n\tRoutes\n\n\t// Use appends one or more middlewares onto the Router stack.\n\tUse(middlewares ...func(http.Handler) http.Handler)\n\n\t// With adds inline middlewares for an endpoint handler.\n\tWith(middlewares ...func(http.Handler) http.Handler) Router\n\n\t// Group adds a new inline-Router along the current routing\n\t// path, with a fresh middleware stack for the inline-Router.\n\tGroup(fn func(r Router)) Router\n\n\t// Route mounts a sub-Router along a `pattern`` string.\n\tRoute(pattern string, fn func(r Router)) Router\n\n\t// Mount attaches another http.Handler along ./pattern/*\n\tMount(pattern string, h http.Handler)\n\n\t// Handle and HandleFunc adds routes for `pattern` that matches\n\t// all HTTP methods.\n\tHandle(pattern string, h http.Handler)\n\tHandleFunc(pattern string, h http.HandlerFunc)\n\n\t// Method and MethodFunc adds routes for `pattern` that matches\n\t// the `method` HTTP method.\n\tMethod(method, pattern string, h http.Handler)\n\tMethodFunc(method, pattern string, h http.HandlerFunc)\n\n\t// HTTP-method routing along `pattern`\n\tConnect(pattern string, h http.HandlerFunc)\n\tDelete(pattern string, h http.HandlerFunc)\n\tGet(pattern string, h http.HandlerFunc)\n\tHead(pattern string, h http.HandlerFunc)\n\tOptions(pattern string, h http.HandlerFunc)\n\tPatch(pattern string, h http.HandlerFunc)\n\tPost(pattern string, h http.HandlerFunc)\n\tPut(pattern string, h http.HandlerFunc)\n\tTrace(pattern string, h http.HandlerFunc)\n\n\t// NotFound defines a handler to respond whenever a route could\n\t// not be found.\n\tNotFound(h http.HandlerFunc)\n\n\t// MethodNotAllowed defines a handler to respond whenever a method is\n\t// not allowed.\n\tMethodNotAllowed(h http.HandlerFunc)\n}\n\n// Routes interface adds two methods for router traversal, which is also\n// used by the github.com/go-chi/docgen package to generate documentation for Routers.\ntype Routes interface {\n\t// Routes returns the routing tree in an easily traversable structure.\n\tRoutes() []Route\n\n\t// Middlewares returns the list of middlewares in use by the router.\n\tMiddlewares() Middlewares\n\n\t// Match searches the routing tree for a handler that matches\n\t// the method/path - similar to routing a http request, but without\n\t// executing the handler thereafter.\n\tMatch(rctx *Context, method, path string) bool\n}\n```\n\n----------------------------------------\n\nTITLE: Common Redis Command Patterns for Rueidis in Go\nDESCRIPTION: This set of examples illustrates various common Redis commands and how to parse their results using the Rueidis library in Go. It covers commands like GET, MGET, SET, INCR, HGET, and more. Each command is demonstrated with the appropriate parsing function that matches the expected type of response (e.g., ToString, AsInt64, ToArray).\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_15\n\nLANGUAGE: golang\nCODE:\n```\n// GET\nclient.Do(ctx, client.B().Get().Key(\"k\").Build()).ToString()\nclient.Do(ctx, client.B().Get().Key(\"k\").Build()).AsInt64()\n// MGET\nclient.Do(ctx, client.B().Mget().Key(\"k1\", \"k2\").Build()).ToArray()\n// SET\nclient.Do(ctx, client.B().Set().Key(\"k\").Value(\"v\").Build()).Error()\n// INCR\nclient.Do(ctx, client.B().Incr().Key(\"k\").Build()).AsInt64()\n// HGET\nclient.Do(ctx, client.B().Hget().Key(\"k\").Field(\"f\").Build()).ToString()\n// HMGET\nclient.Do(ctx, client.B().Hmget().Key(\"h\").Field(\"a\", \"b\").Build()).ToArray()\n// HGETALL\nclient.Do(ctx, client.B().Hgetall().Key(\"h\").Build()).AsStrMap()\n// EXPIRE\nclient.Do(ctx, client.B().Expire().Key(\"k\").Seconds(1).Build()).AsInt64()\n// HEXPIRE\nclient.Do(ctx, client.B().Hexpire().Key(\"h\").Seconds(1).Fields().Numfields(2).Field(\"f1\", \"f2\").Build()).AsIntSlice()\n// ZRANGE\nclient.Do(ctx, client.B().Zrange().Key(\"k\").Min(\"1\").Max(\"2\").Build()).AsStrSlice()\n// ZRANK\nclient.Do(ctx, client.B().Zrank().Key(\"k\").Member(\"m\").Build()).AsInt64()\n// ZSCORE\nclient.Do(ctx, client.B().Zscore().Key(\"k\").Member(\"m\").Build()).AsFloat64()\n// ZRANGE\nclient.Do(ctx, client.B().Zrange().Key(\"k\").Min(\"0\").Max(\"-1\").Build()).AsStrSlice()\nclient.Do(ctx, client.B().Zrange().Key(\"k\").Min(\"0\").Max(\"-1\").Withscores().Build()).AsZScores()\n// ZPOPMIN\nclient.Do(ctx, client.B().Zpopmin().Key(\"k\").Build()).AsZScore()\nclient.Do(ctx, client.B().Zpopmin().Key(\"myzset\").Count(2).Build()).AsZScores()\n// SCARD\nclient.Do(ctx, client.B().Scard().Key(\"k\").Build()).AsInt64()\n// SMEMBERS\nclient.Do(ctx, client.B().Smembers().Key(\"k\").Build()).AsStrSlice()\n// LINDEX\nclient.Do(ctx, client.B().Lindex().Key(\"k\").Index(0).Build()).ToString()\n// LPOP\nclient.Do(ctx, client.B().Lpop().Key(\"k\").Build()).ToString()\nclient.Do(ctx, client.B().Lpop().Key(\"k\").Count(2).Build()).AsStrSlice()\n// SCAN\nclient.Do(ctx, client.B().Scan().Cursor(0).Build()).AsScanEntry()\n// FT.SEARCH\nclient.Do(ctx, client.B().FtSearch().Index(\"idx\").Query(\"@f:v\").Build()).AsFtSearch()\n// GEOSEARCH\nclient.Do(ctx, client.B().Geosearch().Key(\"k\").Fromlonlat(1, 1).Bybox(1).Height(1).Km().Build()).AsGeosearch()\n\n```\n\n----------------------------------------\n\nTITLE: Concurrent Mapping of a Slice in Go\nDESCRIPTION: This example shows how to concurrently map a slice of integers. The standard library version uses atomic operations and sync.WaitGroup, while the conc version simplifies the process using the iter.Map function.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc concMap(\n    input []int,\n    f func(int) int,\n) []int {\n    res := make([]int, len(input))\n    var idx atomic.Int64\n\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n\n            for {\n                i := int(idx.Add(1) - 1)\n                if i >= len(input) {\n                    return\n                }\n\n                res[i] = f(input[i])\n            }\n        }()\n    }\n    wg.Wait()\n    return res\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc concMap(\n    input []int,\n    f func(*int) int,\n) []int {\n    return iter.Map(input, f)\n}\n```\n\n----------------------------------------\n\nTITLE: Watching and Re-reading Config Files with Viper\nDESCRIPTION: Example of how to set up Viper to watch for changes in the config file and automatically re-read it. This allows for live updates to configuration without restarting the application.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nviper.OnConfigChange(func(e fsnotify.Event) {\n\tfmt.Println(\"Config file changed:\", e.Name)\n})\nviper.WatchConfig()\n```\n\n----------------------------------------\n\nTITLE: INSERT Query with Record Structs\nDESCRIPTION: Shows how to create an INSERT query using Record structs with goqu. This example inserts multiple records into the 'user' table.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nds := goqu.Insert(\"user\").Rows(\n\tgoqu.Record{\"first_name\": \"Greg\", \"last_name\": \"Farley\"},\n\tgoqu.Record{\"first_name\": \"Jimmy\", \"last_name\": \"Stewart\"},\n\tgoqu.Record{\"first_name\": \"Jeff\", \"last_name\": \"Jeffers\"},\n)\ninsertSQL, args, _ := ds.ToSQL()\nfmt.Println(insertSQL, args)\n```\n\n----------------------------------------\n\nTITLE: Basic JetStream Usage in Go\nDESCRIPTION: Demonstrates core JetStream functionality including connecting to NATS, creating streams, publishing messages, and consuming messages using different methods. Shows stream creation, message publishing, and three different consumption patterns: fetch, callback, and iterator.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"strconv\"\n    \"time\"\n\n    \"github.com/nats-io/nats.go\"\n    \"github.com/nats-io/nats.go/jetstream\"\n)\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n    defer cancel()\n    nc, _ := nats.Connect(nats.DefaultURL)\n\n    js, _ := jetstream.New(nc)\n\n    s, _ := js.CreateStream(ctx, jetstream.StreamConfig{\n        Name:     \"ORDERS\",\n        Subjects: []string{\"ORDERS.*\"},\n    })\n\n    for i := 0; i < 100; i++ {\n        js.Publish(ctx, \"ORDERS.new\", []byte(\"hello message \"+strconv.Itoa(i)))\n        fmt.Printf(\"Published hello message %d\\n\", i)\n    }\n\n    c, _ := s.CreateOrUpdateConsumer(ctx, jetstream.ConsumerConfig{\n        Durable:   \"CONS\",\n        AckPolicy: jetstream.AckExplicitPolicy,\n    })\n\n    messageCounter := 0\n    msgs, err := c.Fetch(10)\n    if err != nil {\n        // handle error\n    }\n\t\n    for msg := range msgs.Messages() {\n        msg.Ack()\n        fmt.Printf(\"Received a JetStream message via fetch: %s\\n\", string(msg.Data()))\n        messageCounter++\n    }\n\t\n    fmt.Printf(\"received %d messages\\n\", messageCounter)\n\t\n    if msgs.Error() != nil {\n        fmt.Println(\"Error during Fetch(): \", msgs.Error())\n    }\n\n    cons, _ := c.Consume(func(msg jetstream.Msg) {\n        msg.Ack()\n        fmt.Printf(\"Received a JetStream message via callback: %s\\n\", string(msg.Data()))\n        messageCounter++\n    })\n    defer cons.Stop()\n\n    it, _ := c.Messages()\n    for i := 0; i < 10; i++ {\n        msg, _ := it.Next()\n        msg.Ack()\n        fmt.Printf(\"Received a JetStream message via iterator: %s\\n\", string(msg.Data()))\n        messageCounter++\n    }\n    it.Stop()\n\n    for messageCounter < 100 {\n        time.Sleep(10 * time.Millisecond)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Logging with Zerolog\nDESCRIPTION: Implementation of error logging with optional stacktrace support using pkg/errors integration.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/pkg/errors\"\n\t\"github.com/rs/zerolog/pkgerrors\"\n\n\t\"github.com/rs/zerolog\"\n\t\"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n\tzerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n\tzerolog.ErrorStackMarshaler = pkgerrors.MarshalStack\n\n\terr := outer()\n\tlog.Error().Stack().Err(err).Msg(\"\")\n}\n\nfunc inner() error {\n\treturn errors.New(\"seems we have an error here\")\n}\n\nfunc middle() error {\n\terr := inner()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc outer() error {\n\terr := middle()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Unmarshalling and Marshalling YAML in Go\nDESCRIPTION: This code snippet demonstrates how to unmarshal YAML data into a Go struct and a map, followed by marshalling these data structures back into YAML format. It showcases error handling and the requirement for public struct fields for successful unmarshalling.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/gopkg.in/yaml.v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Contextual Sub-Logger in Go with zerolog\nDESCRIPTION: Illustrates how to pass a sub-logger via context to enhance log entries with module-specific fields using zerolog.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nctx := log.With().Str(\"component\", \"module\").Logger().WithContext(ctx)\n\nlog.Ctx(ctx).Info().Msg(\"hello world\")\n\n// Output: {\"component\":\"module\",\"level\":\"info\",\"message\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Viper\nDESCRIPTION: Examples of how to set default values for configuration keys in Viper. This is useful for providing fallback values when a key hasn't been set through other means.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nviper.SetDefault(\"ContentDir\", \"content\")\nviper.SetDefault(\"LayoutDir\", \"layouts\")\nviper.SetDefault(\"Taxonomies\", map[string]string{\"tag\": \"tags\", \"category\": \"categories\"})\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in Go\nDESCRIPTION: Go code example showing how to run database migrations programmatically using golang-migrate library.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/postgres/TUTORIAL.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"log\"\n\n\t\"github.com/golang-migrate/migrate/v4\"\n\t_ \"github.com/golang-migrate/migrate/v4/database/postgres\"\n\t_ \"github.com/golang-migrate/migrate/v4/source/file\"\n)\n\nfunc main() {\n\tm, err := migrate.New(\n\t\t\"file://db/migrations\",\n\t\t\"postgres://postgres:postgres@localhost:5432/example?sslmode=disable\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := m.Up(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: SELECT Query with WHERE Clause\nDESCRIPTION: Shows how to create a SELECT query with a WHERE clause using goqu. This example selects from 'test' where 'd' is in a list of values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsql, _, _ := goqu.From(\"test\").Where(goqu.Ex{\n\t\"d\": []string{\"a\", \"b\", \"c\"},\n}).ToSQL()\nfmt.Println(sql)\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database using pgx in Go\nDESCRIPTION: Example code demonstrating how to establish a connection to PostgreSQL database using pgx driver, execute a query with parameters, and handle results. The code shows error handling, connection management, and basic query execution patterns.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jackc/pgx/v5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/jackc/pgx/v5\"\n)\n\nfunc main() {\n\t// urlExample := \"postgres://username:password@localhost:5432/database_name\"\n\tconn, err := pgx.Connect(context.Background(), os.Getenv(\"DATABASE_URL\"))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Unable to connect to database: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer conn.Close(context.Background())\n\n\tvar name string\n\tvar weight int64\n\terr = conn.QueryRow(context.Background(), \"select name, weight from widgets where id=$1\", 42).Scan(&name, &weight)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"QueryRow failed: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(name, weight)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Connect Client in Go\nDESCRIPTION: Shows how to create a Connect client in Go, including making requests, setting headers, and handling responses.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/connectrpc.com/connect/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"context\"\n  \"log\"\n  \"net/http\"\n\n  \"connectrpc.com/connect\"\n  pingv1 \"connectrpc.com/connect/internal/gen/connect/ping/v1\"\n  \"connectrpc.com/connect/internal/gen/connect/ping/v1/pingv1connect\"\n)\n\nfunc main() {\n  client := pingv1connect.NewPingServiceClient(\n    http.DefaultClient,\n    \"http://localhost:8080/\",\n  )\n  req := connect.NewRequest(&pingv1.PingRequest{\n    Number: 42,\n  })\n  req.Header().Set(\"Some-Header\", \"hello from connect\")\n  res, err := client.Ping(context.Background(), req)\n  if err != nil {\n    log.Fatalln(err)\n  }\n  log.Println(res.Msg)\n  log.Println(res.Header().Get(\"Some-Other-Header\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Publish with JetStream in Go\nDESCRIPTION: This snippet demonstrates how to publish messages synchronously using JetStream. It covers both publishing a `nats.Msg` and using the helper `Publish` method. It also shows how to set headers for the published message.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n```go\njs, _ := jetstream.New(nc)\n\n// Publish message on subject ORDERS.new\n// Given subject has to belong to a stream\nack, err := js.PublishMsg(ctx, &nats.Msg{\n    Data:    []byte(\"hello\"),\n    Subject: \"ORDERS.new\",\n})\nfmt.Printf(\"Published msg with sequence number %d on stream %q\", ack.Sequence, ack.Stream)\n\n// A helper method accepting subject and data as parameters\nack, err = js.Publish(ctx, \"ORDERS.new\", []byte(\"hello\"))\n```\n```\n\nLANGUAGE: go\nCODE:\n```\n```go\n// All 3 implementations are work identically \nack, err := js.PublishMsg(ctx, &nats.Msg{\n    Data:    []byte(\"hello\"),\n    Subject: \"ORDERS.new\",\n    Header: nats.Header{\n        \"Nats-Msg-Id\": []string{\"id\"},\n    },\n})\n\nack, err = js.PublishMsg(ctx, &nats.Msg{\n    Data:    []byte(\"hello\"),\n    Subject: \"ORDERS.new\",\n}, jetstream.WithMsgID(\"id\"))\n\nack, err = js.Publish(ctx, \"ORDERS.new\", []byte(\"hello\"), jetstream.WithMsgID(\"id\"))\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing concurrent.Executor in Go\nDESCRIPTION: Shows how to use concurrent.Executor to manage goroutines with explicit ownership and cancellation. It creates a goroutine that runs until the context is cancelled, demonstrating ticker usage and graceful shutdown.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexecutor := concurrent.NewUnboundedExecutor()\nexecutor.Go(func(ctx context.Context) {\n    everyMillisecond := time.NewTicker(time.Millisecond)\n    for {\n        select {\n        case <-ctx.Done():\n            fmt.Println(\"goroutine exited\")\n            return\n        case <-everyMillisecond.C:\n            // do something\n        }\n    }\n})\ntime.Sleep(time.Second)\nexecutor.StopAndWaitForever()\nfmt.Println(\"executor stopped\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing JetStream Consumers in Go\nDESCRIPTION: This snippet demonstrates CRUD operations on JetStream consumers using the `JetStream` interface. It covers creating durable and ephemeral consumers, updating consumer configurations, and deleting consumers. The operations are idempotent, returning errors if configurations differ for existing consumers.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\njs, _ := jetstream.New(nc)\n\n// create a consumer (this is an idempotent operation)\n// an error will be returned if consumer already exists and has different configuration.\ncons, _ := js.CreateConsumer(ctx, \"ORDERS\", jetstream.ConsumerConfig{\n    Durable: \"foo\",\n    AckPolicy: jetstream.AckExplicitPolicy,\n})\n\n// create an ephemeral pull consumer by not providing `Durable`\nephemeral, _ := js.CreateConsumer(ctx, \"ORDERS\", jetstream.ConsumerConfig{\n    AckPolicy: jetstream.AckExplicitPolicy,\n})\n\n\n// consumer can also be created using CreateOrUpdateConsumer\n// this method will either create a consumer if it does not exist\n// or update existing consumer (if possible)\ncons2 := js.CreateOrUpdateConsumer(ctx, \"ORDERS\", jetstream.ConsumerConfig{\n    Name: \"bar\",\n})\n\n// consumers can be updated\n// an error will be returned if consumer with given name does not exist\n// or an illegal property is to be updated (e.g. AckPolicy)\nupdated, _ := js.UpdateConsumer(ctx, \"ORDERS\", jetstream.ConsumerConfig{\n    AckPolicy: jetstream.AckExplicitPolicy,\n    Description: \"updated consumer\"\n})\n\n// get consumer handle\ncons, _ = js.Consumer(ctx, \"ORDERS\", \"foo\")\n\n// delete a consumer\njs.DeleteConsumer(ctx, \"ORDERS\", \"foo\")\n```\n\n----------------------------------------\n\nTITLE: Using DecodeSliceOfJSON for Struct Scanning in Go\nDESCRIPTION: This snippet shows how to use the DecodeSliceOfJSON function from the Rueidis library to scan array results into a slice of a specified struct in Go. It demonstrates setting JSON values in Redis and retrieving them using MGET, decoding them directly into a predefined struct type. Ensures consistency of JSON structure across values to prevent errors.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_16\n\nLANGUAGE: golang\nCODE:\n```\ntype User struct {\n\tName string `json:\"name\"`\n}\n\n// Set some values\nif err = client.Do(ctx, client.B().Set().Key(\"user1\").Value(`{\"name\": \"name1\"}`).Build()).Error(); err != nil {\n\treturn err\n}\nif err = client.Do(ctx, client.B().Set().Key(\"user2\").Value(`{\"name\": \"name2\"}`).Build()).Error(); err != nil {\n\treturn err\n}\n\n// Scan MGET results into []*User\nvar users []*User // or []User is also scannable\nif err := rueidis.DecodeSliceOfJSON(client.Do(ctx, client.B().Mget().Key(\"user1\", \"user2\").Build()), &users); err != nil {\n\treturn err\n}\n\nfor _, user := range users {\n\tfmt.Printf(\"%+v\\n\", user)\n}\n/*\n&{name:name1}\n&{name:name2}\n*/\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Item from CCache in Go\nDESCRIPTION: Shows how to retrieve an item from the cache using the Get method and handle potential nil results.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nitem := cache.Get(\"user:4\")\nif item == nil {\n  //handle\n} else {\n  user := item.Value().(*User)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Viper to Consul Remote Configuration in Go\nDESCRIPTION: Demonstrates how to configure Viper to read JSON configuration from a Consul key/value store.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"consul\", \"localhost:8500\", \"MY_CONSUL_KEY\")\nviper.SetConfigType(\"json\") // Need to explicitly set this to json\nerr := viper.ReadRemoteConfig()\n\nfmt.Println(viper.Get(\"port\")) // 8080\nfmt.Println(viper.Get(\"hostname\")) // myhostname.com\n```\n\n----------------------------------------\n\nTITLE: Implementing hash.Hash64 Interface in Go\nDESCRIPTION: This snippet demonstrates the key methods of the Digest type, which implements the hash.Hash64 interface. It includes Write for byte slices, WriteString for strings, and Sum64 to get the hash value.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic CLI Application in Go\nDESCRIPTION: This snippet shows the simplest possible CLI application using the cli package. It creates an empty App struct and runs it with command-line arguments.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t(&cli.App{}).Run(os.Args)\n}\n```\n\n----------------------------------------\n\nTITLE: App Structure and Configuration\nDESCRIPTION: This snippet defines the App struct which represents the main structure of a command-line application. It includes fields for configuration, available commands, flags, and custom logic, providing a comprehensive framework for building CLI applications.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype App struct {\n    Name string\n    HelpName string\n    Usage string\n    UsageText string\n    ArgsUsage string\n    Version string\n    Description string\n    DefaultCommand string\n    Commands []*Command\n    Flags []Flag\n    EnableBashCompletion bool\n    HideHelp bool\n    HideHelpCommand bool\n    HideVersion bool\n    BashComplete BashCompleteFunc\n    Before BeforeFunc\n    After AfterFunc\n    Action ActionFunc\n    CommandNotFound CommandNotFoundFunc\n    OnUsageError OnUsageErrorFunc\n    InvalidFlagAccessHandler InvalidFlagAccessFunc\n    Compiled time.Time\n    Authors []*Author\n    Copyright string\n    Reader io.Reader\n    Writer io.Writer\n    ErrWriter io.Writer\n    ExitErrHandler ExitErrHandlerFunc\n    Metadata map[string]interface{}\n    ExtraInfo func() map[string]string\n    CustomAppHelpTemplate string\n    SliceFlagSeparator string\n    DisableSliceFlagSeparator bool\n    UseShortOptionHandling bool\n    Suggest bool\n    AllowExtFlags bool\n    SkipFlagParsing bool\n}\n```\n\n----------------------------------------\n\nTITLE: ChatGPT API Integration Example\nDESCRIPTION: Complete example demonstrating how to create a ChatGPT client, send a message, and receive a response using the OpenAI API. Shows initialization of the client with an API token and sending a basic chat completion request.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tclient := openai.NewClient(\"your token\")\n\tresp, err := client.CreateChatCompletion(\n\t\tcontext.Background(),\n\t\topenai.ChatCompletionRequest{\n\t\t\tModel: openai.GPT3Dot5Turbo,\n\t\t\tMessages: []openai.ChatCompletionMessage{\n\t\t\t\t{\n\t\t\t\t\tRole:    openai.ChatMessageRoleUser,\n\t\t\t\t\tContent: \"Hello!\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t)\n\n\tif err != nil {\n\t\tfmt.Printf(\"ChatCompletion error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(resp.Choices[0].Message.Content)\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Transcription with OpenAI Whisper in Go\nDESCRIPTION: This snippet shows how to use the OpenAI API to transcribe audio using the Whisper model. It sets up a client, creates an audio request, and handles the transcription response.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tc := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\treq := openai.AudioRequest{\n\t\tModel:    openai.Whisper1,\n\t\tFilePath: \"recording.mp3\",\n\t}\n\tresp, err := c.CreateTranscription(ctx, req)\n\tif err != nil {\n\t\tfmt.Printf(\"Transcription error: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(resp.Text)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Accessing Multiple JSON Fields in Go with fastjson\nDESCRIPTION: Illustrates how to parse a JSON string and access multiple fields of different types using fastjson. This example includes error handling and demonstrates accessing string, integer, float, boolean, and array values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/valyala/fastjson/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar p fastjson.Parser\nv, err := p.Parse(`{\n        \"str\": \"bar\",\n        \"int\": 123,\n        \"float\": 1.23,\n        \"bool\": true,\n        \"arr\": [1, \"foo\", {}]\n}`)\nif err != nil {\n        log.Fatal(err)\n}\nfmt.Printf(\"foo=%s\\n\", v.GetStringBytes(\"str\"))\nfmt.Printf(\"int=%d\\n\", v.GetInt(\"int\"))\nfmt.Printf(\"float=%f\\n\", v.GetFloat64(\"float\"))\nfmt.Printf(\"bool=%v\\n\", v.GetBool(\"bool\"))\nfmt.Printf(\"arr.1=%s\\n\", v.GetStringBytes(\"arr\", \"1\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using FreeCache in Go\nDESCRIPTION: Demonstrates basic usage of FreeCache including cache initialization, setting values with expiration, retrieving values, and deleting entries. Shows how to configure cache size in megabytes and set garbage collection parameters.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/coocood/freecache/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// In bytes, where 1024 * 1024 represents a single Megabyte, and 100 * 1024*1024 represents 100 Megabytes.\ncacheSize := 100 * 1024 * 1024\ncache := freecache.NewCache(cacheSize)\ndebug.SetGCPercent(20)\nkey := []byte(\"abc\")\nval := []byte(\"def\")\nexpire := 60 // expire in 60 seconds\ncache.Set(key, val, expire)\ngot, err := cache.Get(key)\nif err != nil {\n    fmt.Println(err)\n} else {\n    fmt.Printf(\"%s\\n\", got)\n}\naffected := cache.Del(key)\nfmt.Println(\"deleted key \", affected)\nfmt.Println(\"entry count \", cache.EntryCount())\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with OpenAI API in Go\nDESCRIPTION: Creates text embeddings using OpenAI's API by initializing a client and calling the CreateEmbeddings endpoint. Returns a vector of 1536 dimensions using the Ada embedding model.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ninput := \"Text to vectorize\"\n\nclient := openai.NewClientWithConfig(config)\nresp, err := client.CreateEmbeddings(\n    context.Background(),\n    openai.EmbeddingRequest{\n        Input: []string{input},\n        Model: openai.AdaEmbeddingV2,\n    })\n\nif err != nil {\n    fmt.Printf(\"CreateEmbeddings error: %v\\n\", err)\n    return\n}\n\nvectors := resp.Data[0].Embedding // []float32 with 1536 dimensions\n\nfmt.Println(vectors[:10], \"...\", vectors[len(vectors)-10:])\n```\n\n----------------------------------------\n\nTITLE: Handling YAML Data with gopkg.in/yaml.v2 in Go\nDESCRIPTION: This Go code snippet demonstrates how to leverage the yaml package to unmarshal and marshal YAML data structures. You need to import the package using gopkg.in/yaml.v2. The snippet includes a struct definition with public fields necessary for unmarshalling. It shows marshaling to and from a map and a custom struct. The input is a YAML-formatted string, and the outputs include a struct and map representation of the data.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/gopkg.in/yaml.v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Chi Router Configuration with RESTful Routes\nDESCRIPTION: Illustrates a more complex Chi router setup with middleware stacks, RESTful routes, and subrouters. This example showcases various Chi features including middleware chaining, route groups, parameter handling, and mounting subrouters.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  //...\n  \"context\"\n  \"github.com/go-chi/chi/v5\"\n  \"github.com/go-chi/chi/v5/middleware\"\n)\n\nfunc main() {\n  r := chi.NewRouter()\n\n  // A good base middleware stack\n  r.Use(middleware.RequestID)\n  r.Use(middleware.RealIP)\n  r.Use(middleware.Logger)\n  r.Use(middleware.Recoverer)\n\n  // Set a timeout value on the request context (ctx), that will signal\n  // through ctx.Done() that the request has timed out and further\n  // processing should be stopped.\n  r.Use(middleware.Timeout(60 * time.Second))\n\n  r.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"hi\"))\n  })\n\n  // RESTy routes for \"articles\" resource\n  r.Route(\"/articles\", func(r chi.Router) {\n    r.With(paginate).Get(\"/\", listArticles)                           // GET /articles\n    r.With(paginate).Get(\"/{month}-{day}-{year}\", listArticlesByDate) // GET /articles/01-16-2017\n\n    r.Post(\"/\", createArticle)                                        // POST /articles\n    r.Get(\"/search\", searchArticles)                                  // GET /articles/search\n\n    // Regexp url parameters:\n    r.Get(\"/{articleSlug:[a-z-]+}\", getArticleBySlug)                // GET /articles/home-is-toronto\n\n    // Subrouters:\n    r.Route(\"/{articleID}\", func(r chi.Router) {\n      r.Use(ArticleCtx)\n      r.Get(\"/\", getArticle)                                          // GET /articles/123\n      r.Put(\"/\", updateArticle)                                       // PUT /articles/123\n      r.Delete(\"/\", deleteArticle)                                    // DELETE /articles/123\n    })\n  })\n\n  // Mount the admin sub-router\n  r.Mount(\"/admin\", adminRouter())\n\n  http.ListenAndServe(\":3333\", r)\n}\n\nfunc ArticleCtx(next http.Handler) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    articleID := chi.URLParam(r, \"articleID\")\n    article, err := dbGetArticle(articleID)\n    if err != nil {\n      http.Error(w, http.StatusText(404), 404)\n      return\n    }\n    ctx := context.WithValue(r.Context(), \"article\", article)\n    next.ServeHTTP(w, r.WithContext(ctx))\n  })\n}\n\nfunc getArticle(w http.ResponseWriter, r *http.Request) {\n  ctx := r.Context()\n  article, ok := ctx.Value(\"article\").(*Article)\n  if !ok {\n    http.Error(w, http.StatusText(422), 422)\n    return\n  }\n  w.Write([]byte(fmt.Sprintf(\"title:%s\", article.Title)))\n}\n\n// A completely separate router for administrator routes\nfunc adminRouter() http.Handler {\n  r := chi.NewRouter()\n  r.Use(AdminOnly)\n  r.Get(\"/\", adminIndex)\n  r.Get(\"/accounts\", adminListAccounts)\n  return r\n}\n\nfunc AdminOnly(next http.Handler) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    ctx := r.Context()\n    perm, ok := ctx.Value(\"acl.permission\").(YourPermissionType)\n    if !ok || !perm.IsAdmin() {\n      http.Error(w, http.StatusText(403), 403)\n      return\n    }\n    next.ServeHTTP(w, r)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ordered JetStream Consumers in Go\nDESCRIPTION: Demonstrates creating ordered consumers that guarantee message processing in the same order as storage. This snippet shows an idempotent operation that configures subject filters for precise message handling.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\njs, _ := jetstream.New(nc)\n\n// create a consumer (this is an idempotent operation)\ncons, _ := js.OrderedConsumer(ctx, \"ORDERS\", jetstream.OrderedConsumerConfig{\n    // Filter results from \"ORDERS\" stream by specific subject\n    FilterSubjects: []{\"ORDERS.A\"},\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring and Reading Config Files with Viper\nDESCRIPTION: Example of how to configure Viper to search for and read a configuration file. It demonstrates setting the config name, type, and search paths, as well as error handling.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nviper.SetConfigName(\"config\") // name of config file (without extension)\nviper.SetConfigType(\"yaml\") // REQUIRED if the config file does not have the extension in the name\nviper.AddConfigPath(\"/etc/appname/\")   // path to look for the config file in\nviper.AddConfigPath(\"$HOME/.appname\")  // call multiple times to add many search paths\nviper.AddConfigPath(\".\")               // optionally look for config in the working directory\nerr := viper.ReadInConfig() // Find and read the config file\nif err != nil { // Handle errors reading the config file\n\tpanic(fmt.Errorf(\"Fatal error config file: %w \\n\", err))\n}\n```\n\n----------------------------------------\n\nTITLE: NATS Authentication with Nkeys and User Credentials in Go\nDESCRIPTION: Demonstrates various authentication methods for NATS, including user credentials, JWT, and Nkeys.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nnc, err := nats.Connect(url, nats.UserCredentials(\"user.creds\"))\n\nnc, err := nats.Connect(url, nats.UserCredentials(\"user.jwt\", \"user.nk\"))\n\nnc, err := nats.Connect(url, nats.UserJWT(jwtCB, sigCB))\n\nopt, err := nats.NkeyOptionFromSeed(\"seed.txt\")\nnc, err := nats.Connect(serverUrl, opt)\n\n// Direct\nnc, err := nats.Connect(serverUrl, nats.Nkey(pubNkey, sigCB))\n```\n\n----------------------------------------\n\nTITLE: GPT-3 Completion in Go\nDESCRIPTION: This snippet shows how to use the OpenAI API to create a GPT-3 completion. It sets up a client, creates a completion request, and handles the response.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tc := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\treq := openai.CompletionRequest{\n\t\tModel:     openai.GPT3Babbage002,\n\t\tMaxTokens: 5,\n\t\tPrompt:    \"Lorem ipsum\",\n\t}\n\tresp, err := c.CreateCompletion(ctx, req)\n\tif err != nil {\n\t\tfmt.Printf(\"Completion error: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(resp.Choices[0].Text)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Messages with Anthropic Claude API in Go\nDESCRIPTION: This example demonstrates how to create a client and send a message request to the Anthropic Claude API. It includes error handling for API-specific errors.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/liushuangls/go-anthropic/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\n\t\"github.com/liushuangls/go-anthropic/v2\"\n)\n\nfunc main() {\n\tclient := anthropic.NewClient(\"your anthropic api key\")\n\tresp, err := client.CreateMessages(context.Background(), anthropic.MessagesRequest{\n\t\tModel: anthropic.ModelClaude3Haiku20240307,\n\t\tMessages: []anthropic.Message{\n\t\t\tanthropic.NewUserTextMessage(\"What is your name?\"),\n\t\t},\n\t\tMaxTokens: 1000,\n\t})\n\tif err != nil {\n\t\tvar e *anthropic.APIError\n\t\tif errors.As(err, &e) {\n\t\t\tfmt.Printf(\"Messages error, type: %s, message: %s\", e.Type, e.Message)\n\t\t} else {\n\t\t\tfmt.Printf(\"Messages error: %v\\n\", err)\n\t\t}\n\t\treturn\n\t}\n\tfmt.Println(resp.Content[0].GetText())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Standard JSON Marshal in Go\nDESCRIPTION: Example showing the standard Go JSON marshaling import and usage that users will replace.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"encoding/json\"\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Defining Application Object with Logger (Go)\nDESCRIPTION: This snippet defines an application object struct that includes a logr.Logger field and demonstrates how to use the logger within a method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype appObject struct {\n    // ... other fields ...\n    logger logr.Logger\n    // ... other fields ...\n}\n\nfunc (app *appObject) Run() {\n    app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n    // ... app code ...\n```\n\n----------------------------------------\n\nTITLE: Creating Span from Context in Go\nDESCRIPTION: Demonstrates how to create a new span from an existing context.Context object using StartSpanFromContext. Includes span finishing and logging fields.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    func xyz(ctx context.Context, ...) {\n        ...\n        span, ctx := opentracing.StartSpanFromContext(ctx, \"operation_name\")\n        defer span.Finish()\n        span.LogFields(\n            log.String(\"event\", \"soft error\"),\n            log.String(\"type\", \"cache timeout\"),\n            log.Int(\"waited.millis\", 1500))\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Streaming Messages with Anthropic Claude API in Go\nDESCRIPTION: This example shows how to use the streaming functionality of the Anthropic Claude API. It creates a client, sends a streaming message request, and handles the stream of responses.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/liushuangls/go-anthropic/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\n\t\"github.com/liushuangls/go-anthropic/v2\"\n)\n\nfunc main() {\n\tclient := anthropic.NewClient(\"your anthropic api key\")\n\tresp, err := client.CreateMessagesStream(context.Background(), anthropic.MessagesStreamRequest{\n\t\tMessagesRequest: anthropic.MessagesRequest{\n\t\t\tModel: anthropic.ModelClaude3Haiku20240307,\n\t\t\tMessages: []anthropic.Message{\n\t\t\t\tanthropic.NewUserTextMessage(\"What is your name?\"),\n\t\t\t},\n\t\t\tMaxTokens: 1000,\n\t\t},\n\t\tOnContentBlockDelta: func(data anthropic.MessagesEventContentBlockDeltaData) {\n\t\t\tfmt.Printf(\"Stream Content: %s\\n\", data.Delta.Text)\n\t\t},\n\t})\n\tif err != nil {\n\t\tvar e *anthropic.APIError\n\t\tif errors.As(err, &e) {\n\t\t\tfmt.Printf(\"Messages stream error, type: %s, message: %s\", e.Type, e.Message)\n\t\t} else {\n\t\t\tfmt.Printf(\"Messages stream error: %v\\n\", err)\n\t\t}\n\t\treturn\n\t}\n\tfmt.Println(resp.Content[0].GetText())\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming ChatGPT Completion in Go\nDESCRIPTION: This snippet demonstrates how to use the OpenAI API to create a streaming ChatGPT completion. It sets up a client, creates a chat completion request, and handles the streaming response.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tc := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\treq := openai.ChatCompletionRequest{\n\t\tModel:     openai.GPT3Dot5Turbo,\n\t\tMaxTokens: 20,\n\t\tMessages: []openai.ChatCompletionMessage{\n\t\t\t{\n\t\t\t\tRole:    openai.ChatMessageRoleUser,\n\t\t\t\tContent: \"Lorem ipsum\",\n\t\t\t},\n\t\t},\n\t\tStream: true,\n\t}\n\tstream, err := c.CreateChatCompletionStream(ctx, req)\n\tif err != nil {\n\t\tfmt.Printf(\"ChatCompletionStream error: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer stream.Close()\n\n\tfmt.Printf(\"Stream response: \")\n\tfor {\n\t\tresponse, err := stream.Recv()\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tfmt.Println(\"\\nStream finished\")\n\t\t\treturn\n\t\t}\n\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"\\nStream error: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Printf(response.Choices[0].Delta.Content)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inngest Function with Event Handling in Go\nDESCRIPTION: This snippet demonstrates how to define an Inngest function that handles a specific event. It includes error handling and uses the Inngest SDK's FunctionOpts and EventPayload types.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/inngest/inngestgo/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nsrv.Serve(\"my-function\", inngest.FunctionOpts{}, func(ctx context.Context, event *inngest.EventPayload) error {\n\t// Do something with the event\n\tif err := doSomething(event); err != nil {\n\t\treturn fmt.Errorf(\"failed to do something: %w\", err)\n\t}\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting HTTP Handler with Throttled in Go\nDESCRIPTION: Illustrates the usage of HTTPLimiter to rate-limit access to an HTTP handler, allowing 20 requests per path per minute with bursts of up to 5 additional requests.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/throttled/throttled/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/throttled/throttled/v2\"\n\t\"github.com/throttled/throttled/v2/store/memstore\"\n)\n\nfunc myHandlerFunc(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello, world\")\n}\n\nfunc main() {\n\tstore, err := memstore.NewCtx(65536)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tquota := throttled.RateQuota{\n\t\tMaxRate:  throttled.PerMin(20),\n\t\tMaxBurst: 5,\n\t}\n\trateLimiter, err := throttled.NewGCRARateLimiterCtx(store, quota)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\thttpRateLimiter := throttled.HTTPRateLimiterCtx{\n\t\tRateLimiter: rateLimiter,\n\t\tVaryBy:      &throttled.VaryBy{Path: true},\n\t}\n\n\thandler := http.HandlerFunc(myHandlerFunc)\n\thttp.ListenAndServe(\":8080\", httpRateLimiter.RateLimit(handler))\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Lua Script Execution - golang\nDESCRIPTION: This snippet illustrates how to execute Lua scripts with rueidis, using `EVALSHA` for optimized execution and falling back to `EVAL`. It highlights concurrent usage safety and provides understanding of handling Redis script responses.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_9\n\nLANGUAGE: golang\nCODE:\n```\nscript := rueidis.NewLuaScript(\"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}\")\n// the script.Exec is safe for concurrent call\nlist, err := script.Exec(ctx, client, []string{\"k1\", \"k2\"}, []string{\"a1\", \"a2\"}).ToArray()\n```\n\n----------------------------------------\n\nTITLE: Using JSON Iterator Unmarshal in Go\nDESCRIPTION: Example showing how to use json-iterator as a replacement for standard JSON unmarshaling with full compatibility.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Querying Inngest Function Run Data with GraphQL\nDESCRIPTION: Provides a GraphQL query to retrieve detailed history data for a specific function run, including attempt information, cancellation details, and wait results.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/utils/historyParser/testData/README.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  functionRun(query: { functionRunId: \"<run-id>\" }) {\n    history {\n      attempt\n      cancel {\n        eventID\n        expression\n        userID\n      }\n      createdAt\n      groupID\n      id\n      sleep {\n        until\n      }\n      stepName\n      type\n      url\n      waitForEvent {\n        eventName\n        expression\n        timeout\n      }\n      waitResult {\n        eventID\n        timeout\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning OpenAI Models in Go\nDESCRIPTION: Complete example of fine-tuning OpenAI models by uploading training data, creating and monitoring fine-tuning jobs, and using the resulting model.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tclient := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\tfile, err := client.CreateFile(ctx, openai.FileRequest{\n\t\tFilePath: \"training_prepared.jsonl\",\n\t\tPurpose:  \"fine-tune\",\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"Upload JSONL file error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfineTuningJob, err := client.CreateFineTuningJob(ctx, openai.FineTuningJobRequest{\n\t\tTrainingFile: file.ID,\n\t\tModel:        \"davinci-002\", // gpt-3.5-turbo-0613, babbage-002.\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"Creating new fine tune model error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfineTuningJob, err = client.RetrieveFineTuningJob(ctx, fineTuningJob.ID)\n\tif err != nil {\n\t\tfmt.Printf(\"Getting fine tune model error: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(fineTuningJob.FineTunedModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing and Using Skiplist in Go\nDESCRIPTION: This snippet demonstrates how to implement the required interface for the skiplist and use basic operations like insertion, finding, and deletion. It shows the creation of a custom Element type and its integration with the skiplist.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/MauriceGit/skiplist/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/MauriceGit/skiplist\"\n    \"fmt\"\n)\n\ntype Element int\n// Implement the interface used in skiplist\nfunc (e Element) ExtractKey() float64 {\n    return float64(e)\n}\nfunc (e Element) String() string {\n    return fmt.Sprintf(\"%03d\", e)\n}\n\nfunc main() {\n    list := New()\n\n    // Insert some elements\n    for i := 0; i < 100; i++ {\n        list.Insert(Element(i))\n    }\n\n    // Find an element\n    if e, ok := list.Find(Element(53)); ok {\n        fmt.Println(e)\n    }\n\n    // Delete all elements\n    for i := 0; i < 100; i++ {\n        list.Delete(Element(i))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Messages from Consumers in Go\nDESCRIPTION: Shows multiple methods of fetching messages from consumers, including single fetch with `Fetch` and `FetchNoWait`. Errors are handled with consideration for configuration options like `FetchMaxWait`. Performance caveats are discussed for these methods.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// receive up to 10 messages from the stream\nmsgs, err := c.Fetch(10)\nif err != nil {\n\t// handle error\n}\n\nfor msg := range msgs.Messages() {\n    fmt.Printf(\"Received a JetStream message: %s\\n\", string(msg.Data()))\n}\n\nif msgs.Error() != nil {\n    // handle error\n}\n\n// receive up to 1024 B of data\nmsgs, err := c.FetchBytes(1024)\nif err != nil {\n// handle error\n}\n\nfor msg := range msgs.Messages() {\n    fmt.Printf(\"Received a JetStream message: %s\\n\", string(msg.Data()))\n}\n\nif msgs.Error() != nil {\n    // handle error\n}\n\n```\n\nLANGUAGE: go\nCODE:\n```\n// FetchNoWait will not wait for new messages if the whole batch is not available at the time of sending request.\nmsgs, err := c.FetchNoWait(10)\nif err != nil {\n// handle error\n}\n\nfor msg := range msgs.Messages() {\n    fmt.Printf(\"Received a JetStream message: %s\\n\", string(msg.Data()))\n}\n\nif msgs.Error() != nil {\n    // handle error\n}\n\n```\n\n----------------------------------------\n\nTITLE: Table Style Configuration in Go\nDESCRIPTION: Shows how to customize table appearance using built-in styles and custom style configurations including box characters, colors, and formatting options.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n    t.SetStyle(table.Style{\n        Name: \"myNewStyle\",\n        Box: table.BoxStyle{\n            BottomLeft:       \"\\\\\",\n            BottomRight:      \"/\",\n            BottomSeparator:  \"v\",\n            Left:             \"[\",\n            LeftSeparator:    \"{\",\n            MiddleHorizontal: \"-\",\n            MiddleSeparator:  \"+\",\n            MiddleVertical:   \"|\",\n            PaddingLeft:      \"<\",\n            PaddingRight:     \">\",\n            Right:            \"]\",\n            RightSeparator:   \"}\",\n            TopLeft:          \"(\",\n            TopRight:         \")\",\n            TopSeparator:     \"^\",\n            UnfinishedRow:    \" ~~~\",\n        },\n        Color: table.ColorOptions{\n            IndexColumn:     text.Colors{text.BgCyan, text.FgBlack},\n            Footer:          text.Colors{text.BgCyan, text.FgBlack},\n            Header:          text.Colors{text.BgHiCyan, text.FgBlack},\n            Row:             text.Colors{text.BgHiWhite, text.FgBlack},\n            RowAlternate:    text.Colors{text.BgWhite, text.FgBlack},\n        },\n        Format: table.FormatOptions{\n            Footer: text.FormatUpper,\n            Header: text.FormatUpper,\n            Row:    text.FormatDefault,\n        },\n        Options: table.Options{\n            DrawBorder:      true,\n            SeparateColumns: true,\n            SeparateFooter:  true,\n            SeparateHeader:  true,\n            SeparateRows:    false,\n        },\n    })\n```\n\n----------------------------------------\n\nTITLE: Instantiating New Redis Client - golang\nDESCRIPTION: This snippet outlines various ways to instantiate a rueidis client for different Redis setups such as single nodes, clusters, and sentinels. It shows how to configure different addresses, read configurations, and connection options.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_11\n\nLANGUAGE: golang\nCODE:\n```\n// Connect to a single redis node:\nclient, err := rueidis.NewClient(rueidis.ClientOption{\n    InitAddress: []string{\"127.0.0.1:6379\"},\n})\n\n// Connect to a redis cluster\nclient, err := rueidis.NewClient(rueidis.ClientOption{\n    InitAddress: []string{\"127.0.0.1:7001\", \"127.0.0.1:7002\", \"127.0.0.1:7003\"},\n    ShuffleInit: true,\n})\n\n// Connect to a redis cluster and use replicas for read operations\nclient, err := rueidis.NewClient(rueidis.ClientOption{\n    InitAddress: []string{\"127.0.0.1:7001\", \"127.0.0.1:7002\", \"127.0.0.1:7003\"},\n    SendToReplicas: func(cmd rueidis.Completed) bool {\n        return cmd.IsReadOnly()\n    },\n})\n\n// Connect to sentinels\nclient, err := rueidis.NewClient(rueidis.ClientOption{\n    InitAddress: []string{\"127.0.0.1:26379\", \"127.0.0.1:26380\", \"127.0.0.1:26381\"},\n    Sentinel: rueidis.SentinelOption{\n        MasterSet: \"my_master\",\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Value Retrieval in Go using Viper\nDESCRIPTION: Demonstrates basic usage of Viper's GetString and GetBool methods for retrieving configuration values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nviper.GetString(\"logfile\") // case-insensitive Setting & Getting\nif viper.GetBool(\"verbose\") {\n\tfmt.Println(\"verbose enabled\")\n}\n```\n\n----------------------------------------\n\nTITLE: Buffer-based Decompression with Zstandard in Go\nDESCRIPTION: Example demonstrating how to decompress byte buffers using a cached Zstandard decoder. Creates a reusable decoder with concurrent decompression disabled for buffer operations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding S2 Compressed Stream in Go\nDESCRIPTION: This function demonstrates how to decompress data from an S2 compressed input reader to an output writer. It creates a new S2 reader and copies data from the decompressor to the destination.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc DecodeStream(src io.Reader, dst io.Writer) error {\n    dec := s2.NewReader(src)\n    _, err := io.Copy(dst, dec)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Logging with zerolog in Go\nDESCRIPTION: This snippet sets up human-friendly, colorized logging using zerolog.ConsoleWriter. It demonstrates basic logging with messages and field values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nlog.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})\n\nlog.Info().Str(\"foo\", \"bar\").Msg(\"Hello world\")\n\n// Output: 3:04PM INF Hello World foo=bar\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Publish with JetStream in Go\nDESCRIPTION: This snippet demonstrates how to publish messages asynchronously using JetStream. It shows how to use `PublishMsgAsync` and `PublishAsync`, and how to handle acknowledgements or errors from the publish operation using channels.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n```go\njs, _ := jetstream.New(nc)\n\n// publish message and do not wait for ack\nackF, err := js.PublishMsgAsync(ctx, &nats.Msg{\n    Data:    []byte(\"hello\"),\n    Subject: \"ORDERS.new\",\n})\n\n// block and wait for ack\nselect {\ncase ack := <-ackF.Ok():\n    fmt.Printf(\"Published msg with sequence number %d on stream %q\", ack.Sequence, ack.Stream)\ncase err := <-ackF.Err():\n    fmt.Println(err)\n}\n\n// similarly to synchronous publish, there is a helper method accepting subject and data\nackF, err = js.PublishAsync(\"ORDERS.new\", []byte(\"hello\"))\n```\n```\n\n----------------------------------------\n\nTITLE: Long-Running Goroutine Management in Go\nDESCRIPTION: Shows how to manage long-running goroutines using WaitGroup passed as parameter\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg conc.WaitGroup\n    defer wg.Wait()\n\n    startTheThing(&wg)\n}\n\nfunc startTheThing(wg *conc.WaitGroup) {\n    wg.Go(func() { ... })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Pool with Network Connections in Go\nDESCRIPTION: Demonstrates how to create and use a resource pool for managing TCP network connections. Shows pool initialization, resource acquisition, usage, and release patterns with error handling.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jackc/puddle/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/jackc/puddle/v2\"\n)\n\nfunc main() {\n\tconstructor := func(context.Context) (net.Conn, error) {\n\t\treturn net.Dial(\"tcp\", \"127.0.0.1:8080\")\n\t}\n\tdestructor := func(value net.Conn) {\n\t\tvalue.Close()\n\t}\n\tmaxPoolSize := int32(10)\n\n\tpool, err := puddle.NewPool(&puddle.Config[net.Conn]{Constructor: constructor, Destructor: destructor, MaxSize: maxPoolSize})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Acquire resource from the pool.\n\tres, err := pool.Acquire(context.Background())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Use resource.\n\t_, err = res.Value().Write([]byte{1})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Release when done.\n\tres.Release()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Middleware in Inngest Function Definition in Go\nDESCRIPTION: This snippet demonstrates how to use middleware when defining an Inngest function. It includes a custom middleware function that logs the event name and a function that handles the event.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/inngest/inngestgo/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nsrv.Serve(\"my-function\", inngest.FunctionOpts{}, inngest.Middleware(func(ctx context.Context, event *inngest.EventPayload) error {\n\tlog.Printf(\"Received event: %s\", event.Name)\n\treturn nil\n}), func(ctx context.Context, event *inngest.EventPayload) error {\n\t// Function logic here\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Log Sampling with zerolog in Go\nDESCRIPTION: Demonstrates advanced log sampling with BurstSampler and LevelSampler to control debug message logging per time period.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\n// Will let 5 debug messages per period of 1 second.\n// Over 5 debug message, 1 every 100 debug messages are logged.\n// Other levels are not sampled.\nsampled := log.Sample(zerolog.LevelSampler{\n    DebugSampler: &zerolog.BurstSampler{\n        Burst: 5,\n        Period: 1*time.Second,\n        NextSampler: &zerolog.BasicSampler{N: 100},\n    },\n})\nsampled.Debug().Msg(\"hello world\")\n\n// Output: {\"time\":1494567715,\"level\":\"debug\",\"message\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Consumers via Stream Interface in Go\nDESCRIPTION: Demonstrates consumer creation and management through the `Stream` interface. Use this approach to fetch stream handles, create consumers within a stream, and perform CRUD operations, allowing detailed interaction with the JetStream server.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Create a JetStream management interface\njs, _ := jetstream.New(nc)\n\n// get stream handle\nstream, _ := js.Stream(ctx, \"ORDERS\")\n\n// create consumer\ncons, _ := stream.CreateConsumer(ctx, jetstream.ConsumerConfig{\n    Durable:   \"foo\",\n    AckPolicy: jetstream.AckExplicitPolicy,\n})\n\n// get consumer handle\ncons, _ = stream.Consumer(ctx, \"ORDERS\", \"foo\")\n\n// delete a consumer\nstream.DeleteConsumer(ctx, \"foo\")\n```\n\n----------------------------------------\n\nTITLE: Handling CloudWatch Scheduled Events with Structured Data in Go\nDESCRIPTION: A Lambda function handler that processes CloudWatch Scheduled Events by defining a custom struct that matches the expected JSON payload structure. This approach provides type safety and direct access to the payload fields.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_CloudWatch_Events.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MyRequest struct {\n\tName string `json:\"name\"`\n}\n\nfunc handler(ctx context.Context, req MyRequest) {\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Redis Command Pipelining\nDESCRIPTION: Demonstrates how to manually pipeline multiple Redis commands using DoMulti() for batch operations and error handling.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncmds := make(rueidis.Commands, 0, 10)\nfor i := 0; i < 10; i++ {\n    cmds = append(cmds, client.B().Set().Key(\"key\").Value(\"value\").Build())\n}\nfor _, resp := range client.DoMulti(ctx, cmds...) {\n    if err := resp.Error(); err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to NATS Cluster with Multiple Servers\nDESCRIPTION: Demonstrates various connection strategies for connecting to a NATS server cluster, including server list configuration, reconnection options, and server pool management\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar servers = \"nats://localhost:1222, nats://localhost:1223, nats://localhost:1224\"\n\nnc, err := nats.Connect(servers)\n```\n\n----------------------------------------\n\nTITLE: Getting Index for Separate Storage for S2 Stream in Go\nDESCRIPTION: This snippet shows how to get the index for an S2 stream and store it separately. It creates a new S2 writer and copies the input to the writer. `CloseIndex()` is called to get the index for separate storage. `CloseIndex()` should only be called once, and `Close()` should not be called afterward.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\n\t// Get index for separate storage... \n\tenc := s2.NewWriter(w)\n\tio.Copy(enc, r)\n\tindex, err := enc.CloseIndex()\n```\n\n----------------------------------------\n\nTITLE: Fetching or Setting an Item in CCache with Go\nDESCRIPTION: Example of using the Fetch method to retrieve an item from the cache or set it if it doesn't exist, with a provided function to generate the value.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nitem, err := cache.Fetch(\"user:4\", time.Minute * 10, func() (interface{}, error) {\n  //code to fetch the data incase of a miss\n  //should return the data to cache and the error, if any\n})\n```\n\n----------------------------------------\n\nTITLE: Creating New Application Instance\nDESCRIPTION: This snippet defines a function for creating a new App instance with reasonable default configurations such as Name, Usage, Version, and Action, facilitating the initialization process of a CLI application.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc NewApp() *App\n    NewApp creates a new cli Application with some reasonable defaults for Name,\n    Usage, Version and Action.\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using LayeredCache in CCache with Go\nDESCRIPTION: Shows how to create and use a LayeredCache, which allows storing and retrieving values by both primary and secondary keys.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ncache := ccache.Layered(ccache.Configure())\n\ncache.Set(\"/users/goku\", \"type:json\", \"{value_to_cache}\", time.Minute * 5)\ncache.Set(\"/users/goku\", \"type:xml\", \"<value_to_cache>\", time.Minute * 5)\n\njson := cache.Get(\"/users/goku\", \"type:json\")\nxml := cache.Get(\"/users/goku\", \"type:xml\")\n\ncache.Delete(\"/users/goku\", \"type:json\")\ncache.Delete(\"/users/goku\", \"type:xml\")\n// OR\ncache.DeleteAll(\"/users/goku\")\n```\n\n----------------------------------------\n\nTITLE: Custom Error Type Implementation with errwrap in Go\nDESCRIPTION: Shows how to implement the Wrapper interface for custom error types to make them compatible with errwrap's functionality. Includes example of a custom AppError type and its usage.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AppError {\n  Code ErrorCode\n  Err  error\n}\n\nfunc (e *AppError) WrappedErrors() []error {\n  return []error{e.Err}\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nerr := &AppError{Err: fmt.Errorf(\"an error\")}\nif errwrap.ContainsType(err, fmt.Errorf(\"\")) {\n\t// This will work!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cognito Pre-Authentication Lambda Handler in Go\nDESCRIPTION: This Go code implements an AWS Lambda function that processes Cognito User Pools pre-authentication events. The handler logs the username of the authenticating user and returns the event unchanged. It utilizes the aws-lambda-go library to integrate with AWS Lambda.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Cognito_UserPools_PreAuthentication.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/aws/aws-lambda-go/lambda\"\n    \"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(event events.CognitoEventUserPoolsPreAuthentication) (events.CognitoEventUserPoolsPreAuthentication, error) {\n    fmt.Printf(\"PreAuthentication of user: %s\\n\", event.UserName)\n    return event, nil\n}\n\nfunc main() {\n  lambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying TOML Data in Go\nDESCRIPTION: Illustrates how to use go-toml's query functionality to retrieve specific elements from a TOML document without traversing the entire tree.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pelletier/go-toml/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// use a query to gather elements without walking the tree\nq, _ := query.Compile(\"$..[user,password]\")\nresults := q.Execute(config)\nfor ii, item := range results.Values() {\n    fmt.Printf(\"Query result %d: %v\\n\", ii, item)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Function with Parallel Steps\nDESCRIPTION: Shows how to create an Inngest function with parallel step execution using Promise.all.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/utils/historyParser/testData/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction({ name: 'Parallel steps' }, { event: 'foo' }, async ({ step }) => {\n  await step.run('a', () => {});\n  await Promise.all([step.run('b1', () => {}), step.run('b2', () => {})]);\n});\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes on a KeyValue Bucket in Go\nDESCRIPTION: This snippet demonstrates how to watch for changes on a JetStream KeyValue bucket or specific keys. It creates a watcher and receives updates on a channel. It highlights how initial values are sent first, followed by nil to signal the end of initial values, and then subsequent updates.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n```go\njs, _ := jetstream.New(nc)\nctx := context.Background()\nkv, _ := js.CreateKeyValue(ctx, jetstream.KeyValueConfig{Bucket: \"profiles\"})\n\nkv.Put(ctx, \"sue.color\", []byte(\"blue\"))\n\n// A watcher can be created to watch for changes on a given key or the whole bucket\n// By default, watcher will return most recent values for all matching keys.\n// Watcher can be configured to only return updates by using jetstream.UpdatesOnly() option.\nwatcher, _ := kv.Watch(ctx, \"sue.*\")\ndefer watcher.Stop()\n\nkv.Put(ctx, \"sue.age\", []byte(\"43\"))\nkv.Put(ctx, \"sue.color\", []byte(\"red\"))\n\n// First, the watcher sends most recent values for all matching keys.\n// In this case, it will send a single entry for `sue.color`.\nentry := <-watcher.Updates()\n// Prints `sue.color @ 1 -> \"blue\"`\nfmt.Printf(\"%s @ %d -> %q\\n\", entry.Key(), entry.Revision(), string(entry.Value()))\n\n// After all current values have been sent, watcher will send nil on the channel.\nentry = <-watcher.Updates()\nif entry != nil {\n    fmt.Println(\"Unexpected entry received\")\n}\n\n// After that, watcher will send updates when changes occur\n// In this case, it will send an entry for `sue.color` and `sue.age`.\n\nentry = <-watcher.Updates()\n// Prints `sue.age @ 2 -> \"43\"`\nfmt.Printf(\"%s @ %d -> %q\\n\", entry.Key(), entry.Revision(), string(entry.Value()))\n\nentry = <-watcher.Updates()\n// Prints `sue.color @ 3 -> \"red\"`\nfmt.Printf(\"%s @ %d -> %q\\n\", entry.Key(), entry.Revision(), string(entry.Value()))\n```\n```\n\n----------------------------------------\n\nTITLE: Processing Slice Elements with a Goroutine Pool in Go\nDESCRIPTION: This snippet demonstrates processing each element of a slice using a static pool of goroutines. The standard library version uses channels and sync.WaitGroup, while the conc version simplifies the process using the iter package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc process(values []int) {\n    feeder := make(chan int, 8)\n\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            for elem := range feeder {\n                handle(elem)\n            }\n        }()\n    }\n\n    for _, value := range values {\n        feeder <- value\n    }\n    close(feeder)\n    wg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(values []int) {\n    iter.ForEach(values, handle)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Processing with Blackfriday in Go\nDESCRIPTION: Demonstrates the simplest way to process Markdown input using Blackfriday. This snippet converts the input byte slice to HTML output with popular extensions enabled.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input)\n```\n\n----------------------------------------\n\nTITLE: Basic NKEYS API Usage in Go\nDESCRIPTION: Demonstrates core NKEYS functionality including creating key pairs, signing data, verifying signatures, and working with seeds and public keys. Shows how to create users from seeds and public keys, as well as generating keys from custom random data.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nkeys/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Create a new User KeyPair\nuser, _ := nkeys.CreateUser()\n\n// Sign some data with a full key pair user.\ndata := []byte(\"Hello World\")\nsig, _ := user.Sign(data)\n\n// Verify the signature.\nerr = user.Verify(data, sig)\n\n// Access the seed, the only thing that needs to be stored and kept safe.\n// seed = \"SUAKYRHVIOREXV7EUZTBHUHL7NUMHPMAS7QMDU3GTIUWEI5LDNOXD43IZY\"\nseed, _ := user.Seed()\n\n// Access the public key which can be shared.\n// publicKey = \"UD466L6EBCM3YY5HEGHJANNTN4LSKTSUXTH7RILHCKEQMQHTBNLHJJXT\"\npublicKey, _ := user.PublicKey()\n\n// Create a full User who can sign and verify from a private seed.\nuser, _ = nkeys.FromSeed(seed)\n\n// Create a User who can only verify signatures via a public key.\nuser, _ = nkeys.FromPublicKey(publicKey)\n\n// Create a User KeyPair with our own random data.\nvar rawSeed [32]byte\n_, err := io.ReadFull(rand.Reader, rawSeed[:])  // Or some other random source.\nuser2, _ := nkeys.FromRawSeed(PrefixByteUser, rawSeed)\n```\n\n----------------------------------------\n\nTITLE: Standard Logger Output with zerolog\nDESCRIPTION: Sets up zerolog as the standard logger output, integrating the structured logging format with functions that use the default logger.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nlog := zerolog.New(os.Stdout).With().\n    Str(\"foo\", \"bar\").\n    Logger()\n\nstdlog.SetFlags(0)\nstdlog.SetOutput(log)\n\nstdlog.Print(\"hello world\")\n\n// Output: {\"foo\":\"bar\",\"message\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages in Pub/Sub - golang\nDESCRIPTION: This snippet demonstrates how to use the `Receive()` method of a rueidis client to handle Pub/Sub messages. It describes how the method blocks until a certain condition occurs and highlights the importance of handling messages in separate goroutines to avoid blocking the client. Key considerations include handling unsubscribe messages and the need for dedicated connections to prevent message delays.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\nerr = client.Receive(context.Background(), client.B().Subscribe().Channel(\"ch1\", \"ch2\").Build(), func(msg rueidis.PubSubMessage) {\n    // Handle the message. Note that if you want to call another `client.Do()` here, you need to do it in another goroutine or the `client` will be blocked.\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for NATS in Go\nDESCRIPTION: Shows various methods of configuring TLS for secure NATS connections, including using self-signed certificates and client certificates.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// tls as a scheme will enable secure connections by default. This will also verify the server name.\nnc, err := nats.Connect(\"tls://nats.demo.io:4443\")\n\n// If you are using a self-signed certificate, you need to have a tls.Config with RootCAs setup.\n// We provide a helper method to make this case easier.\nnc, err = nats.Connect(\"tls://localhost:4443\", nats.RootCAs(\"./configs/certs/ca.pem\"))\n\n// If the server requires client certificate, there is an helper function for that too:\ncert := nats.ClientCert(\"./configs/certs/client-cert.pem\", \"./configs/certs/client-key.pem\")\nnc, err = nats.Connect(\"tls://localhost:4443\", cert)\n\n// You can also supply a complete tls.Config\n\ncertFile := \"./configs/certs/client-cert.pem\"\nkeyFile := \"./configs/certs/client-key.pem\"\ncert, err := tls.LoadX509KeyPair(certFile, keyFile)\nif err != nil {\n    t.Fatalf(\"error parsing X509 certificate/key pair: %v\", err)\n}\n\nconfig := &tls.Config{\n    ServerName: \topts.Host,\n    Certificates: \t[]tls.Certificate{cert},\n    RootCAs:    \tpool,\n    MinVersion: \ttls.VersionTLS12,\n}\n\nnc, err = nats.Connect(\"nats://localhost:4443\", nats.Secure(config))\nif err != nil {\n\tt.Fatalf(\"Got an error on Connect with Secure Options: %+v\\n\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Logging Implementation in Go\nDESCRIPTION: Basic example showing how to initialize and use zerolog for simple logging with Unix timestamp format.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/rs/zerolog\"\n    \"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n    // UNIX Time is faster and smaller than most timestamps\n    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n\n    log.Print(\"hello world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Viper Instances in Go\nDESCRIPTION: Demonstrates creating and working with multiple Viper instances for separate configurations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nx := viper.New()\ny := viper.New()\n\nx.SetDefault(\"ContentDir\", \"content\")\ny.SetDefault(\"ContentDir\", \"foobar\")\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Stream Listing and Enumeration in Go\nDESCRIPTION: Demonstrates how to list streams and stream names using the JetStream client. Includes error handling and iteration over stream information.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstreams := js.ListStreams(ctx)\nfor s := range streams.Info() {\n    fmt.Println(s.Config.Name)\n}\nif streams.Err() != nil {\n    fmt.Println(\"Unexpected error occurred\")\n}\n\nnames := js.StreamNames(ctx)\nfor name := range names.Name() {\n    fmt.Println(name)\n}\nif names.Err() != nil {\n    fmt.Println(\"Unexpected error occurred\")\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Aliases in Viper\nDESCRIPTION: Example of how to register and use aliases in Viper. Aliases allow a single value to be referenced by multiple keys, providing flexibility in configuration naming.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nviper.RegisterAlias(\"loud\", \"Verbose\")\n\nviper.Set(\"verbose\", true) // same result as next line\nviper.Set(\"loud\", true)   // same result as prior line\n\nviper.GetBool(\"loud\") // true\nviper.GetBool(\"verbose\") // true\n```\n\n----------------------------------------\n\nTITLE: Custom Reconnect Delay Handler for NATS Connection\nDESCRIPTION: Demonstrates how to implement a custom reconnection delay strategy using a backoff function when connecting to NATS servers\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nnc, err = nats.Connect(servers, nats.CustomReconnectDelay(func(attempts int) time.Duration {\n    return someBackoffFunction(attempts)\n}))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Online and Possible CPU Counts in Go\nDESCRIPTION: This snippet demonstrates how to use the numcpus package to get the number of online and possible CPUs in a system. It handles errors and prints the results to the console.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/tklauser/numcpus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/tklauser/numcpus\"\n)\n\nfunc main() {\n\tonline, err := numcpus.GetOnline()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GetOnline: %v\\n\", err)\n\t}\n\tfmt.Printf(\"online CPUs: %v\\n\", online)\n\n\tpossible, err := numcpus.GetPossible()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GetPossible: %v\\n\", err)\n\t}\n\tfmt.Printf(\"possible CPUs: %v\\n\", possible)\n}\n```\n\n----------------------------------------\n\nTITLE: INSERT Query with Multiple Rows\nDESCRIPTION: Demonstrates how to create an INSERT query with multiple rows using goqu. This example inserts into the 'user' table with column names specified.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nds := goqu.Insert(\"user\").\n\tCols(\"first_name\", \"last_name\").\n\tVals(\n\t\tgoqu.Vals{\"Greg\", \"Farley\"},\n\t\tgoqu.Vals{\"Jimmy\", \"Stewart\"},\n\t\tgoqu.Vals{\"Jeff\", \"Jeffers\"},\n\t)\ninsertSQL, args, _ := ds.ToSQL()\nfmt.Println(insertSQL, args)\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Instance Creation\nDESCRIPTION: Example showing how to create and configure custom logger instances with timestamps.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nlogger := zerolog.New(os.Stderr).With().Timestamp().Logger()\n\nlogger.Info().Str(\"foo\", \"bar\").Msg(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Executing CAS Transaction - golang\nDESCRIPTION: This example demonstrates how to perform a CAS transaction using rueidis with a dedicated connection, ensuring no write commands unintentionally occur between `WATCH` and `EXEC`. Using `Dedicate()` helps manage the connection lifecycle, though it recommends Lua scripts for higher throughput.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\nclient.Dedicated(func(c rueidis.DedicatedClient) error {\n    // watch keys first\n    c.Do(ctx, c.B().Watch().Key(\"k1\", \"k2\").Build())\n    // perform read here\n    c.Do(ctx, c.B().Mget().Key(\"k1\", \"k2\").Build())\n    // perform write with MULTI EXEC\n    c.DoMulti(\n        ctx,\n        c.B().Multi().Build(),\n        c.B().Set().Key(\"k1\").Value(\"1\").Build(),\n        c.B().Set().Key(\"k2\").Value(\"2\").Build(),\n        c.B().Exec().Build(),\n    )\n    return nil\n})\n```\n\nLANGUAGE: golang\nCODE:\n```\nc, cancel := client.Dedicate()\ndefer cancel()\n\nc.Do(ctx, c.B().Watch().Key(\"k1\", \"k2\").Build())\n```\n\n----------------------------------------\n\nTITLE: Calling Go Function from Lua with GopherLua\nDESCRIPTION: This snippet defines a Go function `Double` that can be called from Lua. It takes an integer argument from Lua, multiplies it by 2, and returns the result to Lua. The `main` function initializes a Lua state, registers the `Double` function as a global Lua function named \"double\", and then closes the Lua state.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc Double(L *lua.LState) int {\n    lv := L.ToInt(1)             /* get argument */\n    L.Push(lua.LNumber(lv * 2)) /* push result */\n    return 1                     /* number of results */\n}\n\nfunc main() {\n    L := lua.NewState()\n    defer L.Close()\n    L.SetGlobal(\"double\", L.NewFunction(Double)) /* Original lua_setglobal uses stack... */\n}\n```\n\n----------------------------------------\n\nTITLE: Using Miniredis in Go Unit Tests\nDESCRIPTION: Demonstrates how to use Miniredis in Go unit tests. It shows setting up a Miniredis instance, setting keys, running Redis commands, and checking values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/alicebob/miniredis/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    ...\n    \"github.com/alicebob/miniredis/v2\"\n    ...\n)\n\nfunc TestSomething(t *testing.T) {\n\ts := miniredis.RunT(t)\n\n\t// Optionally set some keys your code expects:\n\ts.Set(\"foo\", \"bar\")\n\ts.HSet(\"some\", \"other\", \"key\")\n\n\t// Run your code and see if it behaves.\n\t// An example using the redigo library from \"github.com/gomodule/redigo/redis\":\n\tc, err := redis.Dial(\"tcp\", s.Addr())\n\t_, err = c.Do(\"SET\", \"foo\", \"bar\")\n\n\t// Optionally check values in redis...\n\tif got, err := s.Get(\"foo\"); err != nil || got != \"bar\" {\n\t\tt.Error(\"'foo' has the wrong value\")\n\t}\n\t// ... or use a helper for that:\n\ts.CheckGet(t, \"foo\", \"bar\")\n\n\t// TTL and expiration:\n\ts.Set(\"foo\", \"bar\")\n\ts.SetTTL(\"foo\", 10*time.Second)\n\ts.FastForward(11 * time.Second)\n\tif s.Exists(\"foo\") {\n\t\tt.Fatal(\"'foo' should not have existed anymore\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Compressing and Decompressing Data with LZ4 in Go\nDESCRIPTION: Example demonstrating how to compress and decompress a string using LZ4 in Go. It uses io.Pipe for streaming and demonstrates proper closure of writers and pipes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pierrec/lz4/v4/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Compress and uncompress an input string.\ns := \"hello world\"\nr := strings.NewReader(s)\n\n// The pipe will uncompress the data from the writer.\npr, pw := io.Pipe()\nzw := lz4.NewWriter(pw)\nzr := lz4.NewReader(pr)\n\ngo func() {\n\t// Compress the input string.\n\t_, _ = io.Copy(zw, r)\n\t_ = zw.Close() // Make sure the writer is closed\n\t_ = pw.Close() // Terminate the pipe\n}()\n\n_, _ = io.Copy(os.Stdout, zr)\n\n// Output:\n// hello world\n```\n\n----------------------------------------\n\nTITLE: Listing Consumers and Consumer Names in Go\nDESCRIPTION: Illustrates how to list consumers and their names using the `ListConsumers` and `ConsumerNames` methods. Handles potential errors during listing and outputs consumer details by iterating through result channels.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// list consumers\nconsumers := s.ListConsumers(ctx)\nfor cons := range consumers.Info() {\n    fmt.Println(cons.Name)\n}\nif consumers.Err() != nil {\n    fmt.Println(\"Unexpected error occurred\")\n}\n\n// list consumer names\nnames := s.ConsumerNames(ctx)\nfor name := range names.Name() {\n    fmt.Println(name)\n}\nif names.Err() != nil {\n    fmt.Println(\"Unexpected error occurred\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Proto Parser in Go\nDESCRIPTION: This snippet demonstrates how to use the proto package to parse a .proto file and walk through its definition. It opens a file, creates a parser, and uses the Walk function to handle Service and Message elements.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/emicklei/proto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/emicklei/proto\"\n)\n\nfunc main() {\n\treader, _ := os.Open(\"test.proto\")\n\tdefer reader.Close()\n\n\tparser := proto.NewParser(reader)\n\tdefinition, _ := parser.Parse()\n\n\tproto.Walk(definition,\n\t\tproto.WithService(handleService),\n\t\tproto.WithMessage(handleMessage))\n}\n\nfunc handleService(s *proto.Service) {\n\tfmt.Println(s.Name)\n}\n\nfunc handleMessage(m *proto.Message) {\n\tfmt.Println(m.Name)\n}\n```\n\n----------------------------------------\n\nTITLE: Compressing Small Blocks with zstd in Go\nDESCRIPTION: This snippet shows how to efficiently compress small blocks of data using the zstd package. It demonstrates creating a reusable encoder and using the EncodeAll function for concurrent compression of individual blocks.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Accessing TOML Data in Go\nDESCRIPTION: Demonstrates how to load a TOML document and access its data using the Tree structure provided by go-toml.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pelletier/go-toml/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconfig, _ := toml.Load(`\n[postgres]\nuser = \"pelletier\"\npassword = \"mypassword\"`)\n// retrieve data directly\nuser := config.Get(\"postgres.user\").(string)\n\n// or using an intermediate object\npostgresConfig := config.Get(\"postgres\").(*toml.Tree)\npassword := postgresConfig.Get(\"password\").(string)\n```\n\n----------------------------------------\n\nTITLE: Initializing gqlgen in a Go project\nDESCRIPTION: Steps to set up a new Go module, add gqlgen as a dependency, and initialize the gqlgen config and models.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir example\ncd example\ngo mod init example\n```\n\nLANGUAGE: go\nCODE:\n```\nprintf '// +build tools\\npackage tools\\nimport (_ \"github.com/99designs/gqlgen\"\\n _ \"github.com/99designs/gqlgen/graphql/introspection\")' | gofmt > tools.go\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy\ngo run github.com/99designs/gqlgen init\ngo run server.go\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes in Etcd Configuration with Viper in Go\nDESCRIPTION: Shows how to set up a goroutine to continuously watch for changes in etcd configuration and update application state accordingly.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n// alternatively, you can create a new viper instance.\nvar runtime_viper = viper.New()\n\nruntime_viper.AddRemoteProvider(\"etcd\", \"http://127.0.0.1:4001\", \"/config/hugo.yml\")\nruntime_viper.SetConfigType(\"yaml\") // because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\n\n// read from remote config the first time.\nerr := runtime_viper.ReadRemoteConfig()\n\n// unmarshal config\nruntime_viper.Unmarshal(&runtime_conf)\n\n// open a goroutine to watch remote changes forever\ngo func(){\n\tfor {\n\t\ttime.Sleep(time.Second * 5) // delay after each request\n\n\t\t// currently, only tested with etcd support\n\t\terr := runtime_viper.WatchRemoteConfig()\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"unable to read remote config: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\t// unmarshal new config into our runtime config struct. you can also use channel\n\t\t// to implement a signal to notify the system of the changes\n\t\truntime_viper.Unmarshal(&runtime_conf)\n\t}\n}()\n```\n\n----------------------------------------\n\nTITLE: Processing S3 Events with AWS Lambda in Go\nDESCRIPTION: This Go code defines an AWS Lambda function that handles S3 event notifications. The handler function iterates through S3 event records and logs information about each event, including the event source, time, bucket name, and object key. The main function registers the handler with the AWS Lambda runtime.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_S3.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"context\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(ctx context.Context, s3Event events.S3Event) {\n  \tfor _, record := range s3Event.Records {\n      \t\ts3 := record.S3\n      \t\tfmt.Printf(\"[%s - %s] Bucket = %s, Key = %s \\n\", record.EventSource, record.EventTime, s3.Bucket.Name, s3.Object.Key)\n  \t}\n}\n\n\nfunc main() {\n\t// Make the handler available for Remote Procedure Call by AWS Lambda\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Using btree.BTreeG in Go with Custom Comparators\nDESCRIPTION: Example demonstrating the usage of btree.BTreeG with custom comparison functions. It shows how to create two trees sorted by different fields of a custom struct, insert items, and iterate over the trees.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/tidwall/btree/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/tidwall/btree\"\n)\n\ntype Item struct {\n\tKey, Val string\n}\n\n// byKeys is a comparison function that compares item keys and returns true\n// when a is less than b.\nfunc byKeys(a, b Item) bool {\n\treturn a.Key < b.Key\n}\n\n// byVals is a comparison function that compares item values and returns true\n// when a is less than b.\nfunc byVals(a, b Item) bool {\n\tif a.Val < b.Val {\n\t\treturn true\n\t}\n\tif a.Val > b.Val {\n\t\treturn false\n\t}\n\t// Both vals are equal so we should fall though\n\t// and let the key comparison take over.\n\treturn byKeys(a, b)\n}\n\nfunc main() {\n\t// Create a tree for keys and a tree for values.\n\t// The \"keys\" tree will be sorted on the Keys field.\n\t// The \"values\" tree will be sorted on the Values field.\n\tkeys := btree.NewBTreeG[Item](byKeys)\n\tvals := btree.NewBTreeG[Item](byVals)\n\n\t// Create some items.\n\tusers := []Item{\n\t\tItem{Key: \"user:1\", Val: \"Jane\"},\n\t\tItem{Key: \"user:2\", Val: \"Andy\"},\n\t\tItem{Key: \"user:3\", Val: \"Steve\"},\n\t\tItem{Key: \"user:4\", Val: \"Andrea\"},\n\t\tItem{Key: \"user:5\", Val: \"Janet\"},\n\t\tItem{Key: \"user:6\", Val: \"Andy\"},\n\t}\n\n\t// Insert each user into both trees\n\tfor _, user := range users {\n\t\tkeys.Set(user)\n\t\tvals.Set(user)\n\t}\n\n\t// Iterate over each user in the key tree\n\tkeys.Scan(func(item Item) bool {\n\t\tfmt.Printf(\"%s %s\\n\", item.Key, item.Val)\n\t\treturn true\n\t})\n\tfmt.Printf(\"\\n\")\n\n\t// Iterate over each user in the val tree\n\tvals.Scan(func(item Item) bool {\n\t\tfmt.Printf(\"%s %s\\n\", item.Key, item.Val)\n\t\treturn true\n\t})\n\n\t// Output:\n\t// user:1 Jane\n\t// user:2 Andy\n\t// user:3 Steve\n\t// user:4 Andrea\n\t// user:5 Janet\n\t// user:6 Andy\n\t//\n\t// user:4 Andrea\n\t// user:2 Andy\n\t// user:6 Andy\n\t// user:1 Jane\n\t// user:5 Janet\n\t// user:3 Steve\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CCache with Custom Options in Go\nDESCRIPTION: Demonstrates how to create a cache instance with custom configuration options using the chainable API.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar cache = ccache.New(ccache.Configure().MaxSize(1000).ItemsToPrune(100))\n```\n\n----------------------------------------\n\nTITLE: Connection Lifecycle Callbacks for NATS Client\nDESCRIPTION: Shows how to set up callbacks for handling disconnection, reconnection, and connection closure events in a NATS client\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nnc, err = nats.Connect(servers,\n\tnats.DisconnectErrHandler(func(nc *nats.Conn, err error) {\n\t\tfmt.Printf(\"Got disconnected! Reason: %q\\n\", err)\n\t}),\n\tnats.ReconnectHandler(func(nc *nats.Conn) {\n\t\tfmt.Printf(\"Got reconnected to %v!\\n\", nc.ConnectedUrl())\n\t}),\n\tnats.ClosedHandler(func(nc *nats.Conn) {\n\t\tfmt.Printf(\"Connection closed. Reason: %q\\n\", nc.LastError())\n\t})\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Resolver Function for Action Type Update in Go\nDESCRIPTION: Example of implementing a resolver function in Go for the updateActionType mutation. This function takes an UpdateActionType input and returns an ActionType or an error.\nSOURCE: https://github.com/inngest/inngest/blob/main/pkg/coreapi/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Replace w/ *queryResolver if it's a not a mutation\nfunc (r *mutationResolver) updateActionType(\n  ctx context.Context,\n  input models.UpdateActionType\n) (*models.ActionType, error) {\n  return nil, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Individual Flags with Viper in Go\nDESCRIPTION: Demonstrates how to bind a single flag from Cobra to Viper. This allows accessing flag values through Viper's configuration system.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nserverCmd.Flags().Int(\"port\", 1138, \"Port to run Application server on\")\nviper.BindPFlag(\"port\", serverCmd.Flags().Lookup(\"port\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Functional CLI Application in Go\nDESCRIPTION: This snippet demonstrates how to create a more functional CLI application with a name, usage description, and a simple action that prints a greeting.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tapp := &cli.App{\n\t\tName: \"greet\",\n\t\tUsage: \"say a greeting\",\n\t\tAction: func(c *cli.Context) error {\n\t\t\tfmt.Println(\"Greetings\")\n\t\t\treturn nil\n\t\t},\n\t}\n\n\tapp.Run(os.Args)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Span in Go\nDESCRIPTION: Shows how to create a root span with no parent or causal reference using StartSpan.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    func xyz() {\n        ...\n        sp := opentracing.StartSpan(\"operation_name\")\n        defer sp.Finish()\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Opening Subset of Lua Modules with GopherLua\nDESCRIPTION: This example demonstrates how to selectively open a subset of Lua's built-in modules in GopherLua. It initializes a new Lua state with `SkipOpenLibs: true` to prevent all libraries from being opened by default.  Then, it iterates through a list of module names and their corresponding open functions, calling each open function to register the desired modules, such as the package, base, and table libraries.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    L := lua.NewState(lua.Options{SkipOpenLibs: true})\n    defer L.Close()\n    for _, pair := range []struct {\n        n string\n        f lua.LGFunction\n    }{\n        {lua.LoadLibName, lua.OpenPackage}, // Must be first\n        {lua.BaseLibName, lua.OpenBase},\n        {lua.TabLibName, lua.OpenTable},\n    } {\n        if err := L.CallByParam(lua.P{\n            Fn:      L.NewFunction(pair.f),\n            NRet:    0,\n            Protect: true,\n        }, lua.LString(pair.n)); err != nil {\n            panic(err)\n        }\n    }\n    if err := L.DoFile(\"main.lua\"); err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Call Request Payload Structure in Inngest SDK\nDESCRIPTION: Outlines the structure of the JSON payload received in a Call Request from Inngest. This includes event data, memoized step data, and context information for function execution.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  event: Event;\n  events: Array<Event>;\n  steps: {\n    [stepId: string]: {\n          data: any;\n        } | {\n          error: {\n            name: string;\n            message: string;\n            stack?: string;\n          };\n        };\n  };\n  ctx: {\n    run_id: string;\n    attempt: number;\n    disable_immediate_execution: boolean;\n    use_api: boolean;\n    stack: {\n      stack: Array<string>;\n      current: number;\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using btree.Map in Go\nDESCRIPTION: Example demonstrating the usage of btree.Map for storing and manipulating key-value pairs. It shows how to create a map, add users, iterate over the map, and delete entries.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/tidwall/btree/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/tidwall/btree\"\n)\n\nfunc main() {\n\t// create a map\n\tvar users btree.Map[string, string]\n\n\t// add some users\n\tusers.Set(\"user:4\", \"Andrea\")\n\tusers.Set(\"user:6\", \"Andy\")\n\tusers.Set(\"user:2\", \"Andy\")\n\tusers.Set(\"user:1\", \"Jane\")\n\tusers.Set(\"user:5\", \"Janet\")\n\tusers.Set(\"user:3\", \"Steve\")\n\n\t// Iterate over the maps and print each user\n\tusers.Scan(func(key, value string) bool {\n\t\tfmt.Printf(\"%s %s\\n\", key, value)\n\t\treturn true\n\t})\n\tfmt.Printf(\"\\n\")\n\n\t// Delete a couple\n\tusers.Delete(\"user:5\")\n\tusers.Delete(\"user:1\")\n\n\t// print the map again\n\tusers.Scan(func(key, value string) bool {\n\t\tfmt.Printf(\"%s %s\\n\", key, value)\n\t\treturn true\n\t})\n\tfmt.Printf(\"\\n\")\n\n\t// Output:\n\t// user:1 Jane\n\t// user:2 Andy\n\t// user:3 Steve\n\t// user:4 Andrea\n\t// user:5 Janet\n\t// user:6 Andy\n\t//\n\t// user:2 Andy\n\t// user:3 Steve\n\t// user:4 Andrea\n\t// user:6 Andy\n}\n```\n\n----------------------------------------\n\nTITLE: Thread-Safe Logging with Diode Writer and zerolog\nDESCRIPTION: Uses diode.Writer with zerolog for non-blocking, thread-safe logging, suitable for high-performance applications. Requires code.cloudfoundry.org/go-diodes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nwr := diode.NewWriter(os.Stdout, 1000, 10*time.Millisecond, func(missed int) {\n\t\tfmt.Printf(\"Logger Dropped %d messages\", missed)\n\t})\nlog := zerolog.New(wr)\nlog.Print(\"test\")\n```\n\n----------------------------------------\n\nTITLE: Leveled Logging Configuration\nDESCRIPTION: Example showing how to implement leveled logging with command-line flag control for log levels.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"flag\"\n\n    \"github.com/rs/zerolog\"\n    \"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n    debug := flag.Bool(\"debug\", false, \"sets log level to debug\")\n\n    flag.Parse()\n\n    zerolog.SetGlobalLevel(zerolog.InfoLevel)\n    if *debug {\n        zerolog.SetGlobalLevel(zerolog.DebugLevel)\n    }\n\n    log.Debug().Msg(\"This message appears only when log level set to Debug\")\n    log.Info().Msg(\"This message appears when log level set to Debug or Info\")\n\n    if e := log.Debug(); e.Enabled() {\n        value := \"bar\"\n        e.Str(\"foo\", value).Msg(\"some debug message\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing CodeCommit Events in AWS Lambda using Go\nDESCRIPTION: This Go function handles AWS CodeCommit events within a Lambda function. It iterates through each record in the incoming CodeCommit event and prints it to standard output. The function uses the aws-lambda-go events package to work with the CodeCommit event structure.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_CodeCommit.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handleRequest(evt events.CodeCommitEvent) {\n    for _, record := range evt.Records {\n        fmt.Println(record)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Management Operations in Go\nDESCRIPTION: Shows CRUD operations for JetStream streams including creation, updating, retrieving, and deletion of streams. Demonstrates the basic stream management capabilities of the JetStream client.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\njs, _ := jetstream.New(nc)\n\ns, _ := js.CreateStream(ctx, jetstream.StreamConfig{\n    Name:     \"ORDERS\",\n    Subjects: []string{\"ORDERS.*\"},\n})\n\ns, _ = js.UpdateStream(ctx, jetstream.StreamConfig{\n    Name:        \"ORDERS\",\n    Subjects:    []string{\"ORDERS.*\"},\n    Description: \"updated stream\",\n})\n\ns, _ = js.Stream(ctx, \"ORDERS\")\n\njs.DeleteStream(ctx, \"ORDERS\")\n```\n\n----------------------------------------\n\nTITLE: Constructing Arbitrary Commands - golang\nDESCRIPTION: This snippet illustrates how to construct arbitrary Redis commands using rueidis's command builder. The code demonstrates creating a command with custom keys and arguments, emphasizing the capability to formulate commands not provided out of the box by the library.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_12\n\nLANGUAGE: golang\nCODE:\n```\n// This will result in [ANY CMD k1 k2 a1 a2]\nclient.B().Arbitrary(\"ANY\", \"CMD\").Keys(\"k1\", \"k2\").Args(\"a1\", \"a2\").Build()\n```\n\n----------------------------------------\n\nTITLE: Processing API Gateway Events with Go AWS Lambda\nDESCRIPTION: This code demonstrates a basic AWS Lambda function that handles API Gateway proxy events. It receives the request, logs information about the request ID, body size, and headers to CloudWatch Logs, and returns a response with the same body and a 200 status code.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_ApiGatewayEvent.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handleRequest(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\tfmt.Printf(\"Processing request data for request %s.\\n\", request.RequestContext.RequestID)\n\tfmt.Printf(\"Body size = %d.\\n\", len(request.Body))\n\n\tfmt.Println(\"Headers:\")\n\tfor key, value := range request.Headers {\n\t\tfmt.Printf(\"    %s: %s\\n\", key, value)\n\t}\n\n\treturn events.APIGatewayProxyResponse{Body: request.Body, StatusCode: 200}, nil\n}\n\nfunc main() {\n\tlambda.Start(handleRequest)\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced JMESPath Queries in Go\nDESCRIPTION: This snippet showcases more complex JMESPath queries, including selecting nested objects, filtering arrays, and using expressions with comparisons. It demonstrates the versatility of JMESPath in manipulating JSON data.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo.bar\", data)\nresult = { \"baz\": [ 0, 1, 2, 3, 4 ] }\n\n\nvar jsondata  = []byte(`{\"foo\": [{\"first\": \"a\", \"last\": \"b\"},\n                           {\"first\": \"c\", \"last\": \"d\"}]}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search({\"foo[*].first\", data)\nresult [ 'a', 'c' ]\n\n\nvar jsondata = []byte(`{\"foo\": [{\"age\": 20}, {\"age\": 25},\n                           {\"age\": 30}, {\"age\": 35},\n                           {\"age\": 40}]}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo[?age > `30`]\")\nresult = [ { age: 35 }, { age: 40 } ]\n```\n\n----------------------------------------\n\nTITLE: Struct Unmarshaling in Go\nDESCRIPTION: Example of unmarshaling Viper configuration into Go structs using mapstructure tags.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_30\n\nLANGUAGE: go\nCODE:\n```\ntype config struct {\n\tPort int\n\tName string\n\tPathMap string `mapstructure:\"path_map\"`\n}\n\nvar C config\n\nerr := viper.Unmarshal(&C)\nif err != nil {\n\tt.Fatalf(\"unable to decode into struct, %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware with Chi Router in Go\nDESCRIPTION: Example of setting up CORS middleware on a Chi router with customizable options including allowed origins, methods, headers, and credentials. The code demonstrates basic CORS configuration with common settings and includes a sample route handler.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/cors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  r := chi.NewRouter()\n\n  // Basic CORS\n  // for more ideas, see: https://developer.github.com/v3/#cross-origin-resource-sharing\n  r.Use(cors.Handler(cors.Options{\n    // AllowedOrigins:   []string{\"https://foo.com\"}, // Use this to allow specific origin hosts\n    AllowedOrigins:   []string{\"https://*\", \"http://*\"},\n    // AllowOriginFunc:  func(r *http.Request, origin string) bool { return true },\n    AllowedMethods:   []string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"},\n    AllowedHeaders:   []string{\"Accept\", \"Authorization\", \"Content-Type\", \"X-CSRF-Token\"},\n    ExposedHeaders:   []string{\"Link\"},\n    AllowCredentials: false,\n    MaxAge:           300, // Maximum value not ignored by any of major browsers\n  }))\n\n  r.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"welcome\"))\n  })\n\n  http.ListenAndServe(\":3000\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Pub/Sub Implementation with rueidiscompat.Adapter in Go\nDESCRIPTION: Shows how to implement publish/subscribe pattern using rueidiscompat.Adapter, including subscriber setup and continuous message publishing.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/rueidiscompat/README.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/redis/rueidis\"\n\t\"github.com/redis/rueidis/rueidiscompat\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tclient, err := rueidis.NewClient(rueidis.ClientOption{InitAddress: []string{\"127.0.0.1:6379\"}})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\trdb := rueidiscompat.NewAdapter(client)\n\tpubsub := rdb.Subscribe(ctx, \"mychannel1\")\n\tdefer pubsub.Close()\n\n\tgo func() {\n\t\tfor i := 0; ; i++ {\n\t\t\tif err := rdb.Publish(ctx, \"mychannel1\", strconv.Itoa(i)).Err(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tmsg, err := pubsub.ReceiveMessage(ctx)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfmt.Println(msg.Channel, msg.Payload)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a Custom Flag to Viper in Go\nDESCRIPTION: Demonstrates how to bind a custom flag implementation to Viper using the BindFlagValue method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nviper.BindFlagValue(\"my-flag-name\", myFlag{})\n```\n\n----------------------------------------\n\nTITLE: Implementing a TOKEN Authorizer in Go for AWS API Gateway\nDESCRIPTION: This Go code implements a TOKEN authorizer Lambda function for AWS API Gateway. It validates an authorization token against predefined values ('allow', 'deny', 'unauthorized') and generates appropriate IAM policies. The function returns custom context data and handles error cases with appropriate status codes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_ApiGatewayCustomAuthorizer.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"strings\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\n// Help function to generate an IAM policy\nfunc generatePolicy(principalId, effect, resource string) events.APIGatewayCustomAuthorizerResponse {\n\tauthResponse := events.APIGatewayCustomAuthorizerResponse{PrincipalID: principalId}\n\n\tif effect != \"\" && resource != \"\" {\n\t\tauthResponse.PolicyDocument = events.APIGatewayCustomAuthorizerPolicy{\n\t\t\tVersion: \"2012-10-17\",\n\t\t\tStatement: []events.IAMPolicyStatement{\n\t\t\t\t{\n\t\t\t\t\tAction:   []string{\"execute-api:Invoke\"},\n\t\t\t\t\tEffect:   effect,\n\t\t\t\t\tResource: []string{resource},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t}\n\n\t// Optional output with custom properties of the String, Number or Boolean type.\n\tauthResponse.Context = map[string]interface{}{\n\t\t\"stringKey\":  \"stringval\",\n\t\t\"numberKey\":  123,\n\t\t\"booleanKey\": true,\n\t}\n\treturn authResponse\n}\n\nfunc handleRequest(ctx context.Context, event events.APIGatewayCustomAuthorizerRequest) (events.APIGatewayCustomAuthorizerResponse, error) {\n\ttoken := event.AuthorizationToken\n\tswitch strings.ToLower(token) {\n\tcase \"allow\":\n\t\treturn generatePolicy(\"user\", \"Allow\", event.MethodArn), nil\n\tcase \"deny\":\n\t\treturn generatePolicy(\"user\", \"Deny\", event.MethodArn), nil\n\tcase \"unauthorized\":\n\t\treturn events.APIGatewayCustomAuthorizerResponse{}, errors.New(\"Unauthorized\") // Return a 401 Unauthorized response\n\tdefault:\n\t\treturn events.APIGatewayCustomAuthorizerResponse{}, errors.New(\"Error: Invalid token\")\n\t}\n}\n\nfunc main() {\n\tlambda.Start(handleRequest)\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive ChatGPT Conversation in Go\nDESCRIPTION: This snippet shows how to create an interactive ChatGPT conversation in Go. It sets up a client, maintains a conversation context, and continuously processes user input and ChatGPT responses.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tclient := openai.NewClient(\"your token\")\n\tmessages := make([]openai.ChatCompletionMessage, 0)\n\treader := bufio.NewReader(os.Stdin)\n\tfmt.Println(\"Conversation\")\n\tfmt.Println(\"---------------------\")\n\n\tfor {\n\t\tfmt.Print(\"-> \")\n\t\ttext, _ := reader.ReadString('\\n')\n\t\t// convert CRLF to LF\n\t\ttext = strings.Replace(text, \"\\n\", \"\", -1)\n\t\tmessages = append(messages, openai.ChatCompletionMessage{\n\t\t\tRole:    openai.ChatMessageRoleUser,\n\t\t\tContent: text,\n\t\t})\n\n\t\tresp, err := client.CreateChatCompletion(\n\t\t\tcontext.Background(),\n\t\t\topenai.ChatCompletionRequest{\n\t\t\t\tModel:    openai.GPT3Dot5Turbo,\n\t\t\t\tMessages: messages,\n\t\t\t},\n\t\t)\n\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"ChatCompletion error: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tcontent := resp.Choices[0].Message.Content\n\t\tmessages = append(messages, openai.ChatCompletionMessage{\n\t\t\tRole:    openai.ChatMessageRoleAssistant,\n\t\t\tContent: content,\n\t\t})\n\t\tfmt.Println(content)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Processing S3 Batch Job Events with AWS Lambda in Go\nDESCRIPTION: This Go function serves as an AWS Lambda handler for S3 batch job events. It receives S3 event record data, iterates through the tasks in the event, logs details about the event and tasks to CloudWatch, and returns an S3BatchJobResponse. The function demonstrates how to access properties of S3 batch events and responses.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_S3_Batch_Job.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"context\"\n    \"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(ctx context.Context, e events.S3BatchJobEvent) (response events.S3BatchJobResponse, err error) {\n    fmt.Printf(\"InvocationSchemaVersion: %s\\n\", e.InvocationSchemaVersion)\n\tfmt.Printf(\"InvocationID: %s\\n\", e.InvocationID)\n\tfmt.Printf(\"Job.ID: %s\\n\", e.Job.ID)\n\n\tfor _, task := range e.Tasks {\n\t\tfmt.Printf(\"TaskID: %s\\n\", task.TaskID)\n\t\tfmt.Printf(\"S3Key: %s\\n\", task.S3Key)\n\t\tfmt.Printf(\"S3VersionID: %s\\n\", task.S3VersionID)\n\t\tfmt.Printf(\"S3BucketARN: %s\\n\", task.S3BucketARN)\n\n\t}\n\n\tfmt.Printf(\"InvocationSchemaVersion: %s\\n\", response.InvocationSchemaVersion)\n\tfmt.Printf(\"TreatMissingKeysAs: %s\\n\", response.TreatMissingKeysAs)\n\tfmt.Printf(\"InvocationID: %s\\n\", response.InvocationID)\n\n\tfor _, result := range response.Results {\n\t\tfmt.Printf(\"TaskID: %s\\n\", result.TaskID)\n\t\tfmt.Printf(\"ResultCode: %s\\n\", result.ResultCode)\n\t\tfmt.Printf(\"ResultString: %s\\n\", result.ResultString)\n\t}\n\n\treturn\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSON Iterator Marshal in Go\nDESCRIPTION: Example showing how to use json-iterator as a replacement for standard JSON marshaling with full compatibility.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport jsoniter \"github.com/json-iterator/go\"\n\nvar json = jsoniter.ConfigCompatibleWithStandardLibrary\njson.Marshal(&data)\n```\n\n----------------------------------------\n\nTITLE: Calculating String Width in Go using go-runewidth\nDESCRIPTION: This snippet demonstrates how to use the go-runewidth package to calculate the display width of a Unicode string containing both Asian characters and special symbols. The StringWidth function returns the total width of the string.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/mattn/go-runewidth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrunewidth.StringWidth(\"つのだ☆HIRO\") == 12\n```\n\n----------------------------------------\n\nTITLE: Deserializing Span Context from HTTP Headers in Go\nDESCRIPTION: Demonstrates extracting span context from HTTP headers and creating a new server span.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n        var serverSpan opentracing.Span\n        appSpecificOperationName := ...\n        wireContext, err := opentracing.GlobalTracer().Extract(\n            opentracing.HTTPHeaders,\n            opentracing.HTTPHeadersCarrier(req.Header))\n        if err != nil {\n            // Optionally record something about err here\n        }\n\n        // Create the span referring to the RPC client if available.\n        // If wireContext == nil, a root span will be created.\n        serverSpan = opentracing.StartSpan(\n            appSpecificOperationName,\n            ext.RPCServerOption(wireContext))\n\n        defer serverSpan.Finish()\n\n        ctx := opentracing.ContextWithSpan(context.Background(), serverSpan)\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Copier Usage in Go\nDESCRIPTION: This code snippet showcases various use cases of the Copier library, including copying between structs, slices, and maps. It demonstrates field mapping, method copying, and handling of custom tags.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jinzhu/copier/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/jinzhu/copier\"\n)\n\ntype User struct {\n\tName        string\n\tRole        string\n\tAge         int32\n\tEmployeCode int64 `copier:\"EmployeNum\"` // specify field name\n\n\t// Explicitly ignored in the destination struct.\n\tSalary   int\n}\n\nfunc (user *User) DoubleAge() int32 {\n\treturn 2 * user.Age\n}\n\n// Tags in the destination Struct provide instructions to copier.Copy to ignore\n// or enforce copying and to panic or return an error if a field was not copied.\ntype Employee struct {\n\t// Tell copier.Copy to panic if this field is not copied.\n\tName      string `copier:\"must\"`\n\n\t// Tell copier.Copy to return an error if this field is not copied.\n\tAge       int32  `copier:\"must,nopanic\"`\n\n\t// Tell copier.Copy to explicitly ignore copying this field.\n\tSalary    int    `copier:\"-\"`\n\n\tDoubleAge int32\n\tEmployeId int64 `copier:\"EmployeNum\"` // specify field name\n\tSuperRole string\n}\n\nfunc (employee *Employee) Role(role string) {\n\temployee.SuperRole = \"Super \" + role\n}\n\nfunc main() {\n\tvar (\n\t\tuser      = User{Name: \"Jinzhu\", Age: 18, Role: \"Admin\", Salary: 200000}\n\t\tusers     = []User{{Name: \"Jinzhu\", Age: 18, Role: \"Admin\", Salary: 100000}, {Name: \"jinzhu 2\", Age: 30, Role: \"Dev\", Salary: 60000}}\n\t\temployee  = Employee{Salary: 150000}\n\t\temployees = []Employee{}\n\t)\n\n\tcopier.Copy(&employee, &user)\n\n\tfmt.Printf(\"%#v \\n\", employee)\n\t// Employee{\n\t//    Name: \"Jinzhu\",           // Copy from field\n\t//    Age: 18,                  // Copy from field\n\t//    Salary:150000,            // Copying explicitly ignored\n\t//    DoubleAge: 36,            // Copy from method\n\t//    EmployeeId: 0,            // Ignored\n\t//    SuperRole: \"Super Admin\", // Copy to method\n\t// }\n\n\t// Copy struct to slice\n\tcopier.Copy(&employees, &user)\n\n\tfmt.Printf(\"%#v \\n\", employees)\n\t// []Employee{\n\t//   {Name: \"Jinzhu\", Age: 18, Salary:0, DoubleAge: 36, EmployeId: 0, SuperRole: \"Super Admin\"}\n\t// }\n\n\t// Copy slice to slice\n\temployees = []Employee{}\n\tcopier.Copy(&employees, &users)\n\n\tfmt.Printf(\"%#v \\n\", employees)\n\t// []Employee{\n\t//   {Name: \"Jinzhu\", Age: 18, Salary:0, DoubleAge: 36, EmployeId: 0, SuperRole: \"Super Admin\"},\n\t//   {Name: \"jinzhu 2\", Age: 30, Salary:0, DoubleAge: 60, EmployeId: 0, SuperRole: \"Super Dev\"},\n\t// }\n\n \t// Copy map to map\n\tmap1 := map[int]int{3: 6, 4: 8}\n\tmap2 := map[int32]int8{}\n\tcopier.Copy(&map2, map1)\n\n\tfmt.Printf(\"%#v \\n\", map2)\n\t// map[int32]int8{3:6, 4:8}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sync Payload Structure in TypeScript\nDESCRIPTION: This code snippet defines the structure of the JSON payload that an Inngest SDK must send to the Inngest server during a sync operation. It includes details about the app, SDK, functions, and their configurations.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * The absolute URL that Inngest should make requests to\n   * when wanting to contact the App being Synced.\n   *\n   * This can also contain query string parameters in order\n   * to provide authorization, but MUST NOT contain a `deployId`.\n   */\n  url: string;\n\n  /**\n   * The string \"ping\".\n   */\n  deployType: \"ping\";\n\n  /**\n   * The ID of App being Synced. This will be used to organize\n   * Sync and the Functions within this App in the Inngest UI\n   * and when being called, as well as used as the `app_id` in the\n   * Composite ID for each Function. MUST NOT be an empty string.\n   */\n  appName: string;\n\n  /**\n   * MUST be same value as the `X-Inngest-Sdk` header, representing\n   * the SDK and version of that SDK being used for this\n   * particular Sync.\n   */\n  sdk: `${string}:v${string}`;\n\n  /**\n   * The string \"0.1\".\n   */\n  v: \"0.1\";\n\n  /**\n   * The name of the framework being used to expose the SDK's\n   * endpoint, such as \"lambda\" or \"nextjs\". Can be omitted.\n   */\n  framework?: string;\n\n  /**\n   * An array of objects, each representing a Function that can\n   * be executed by Inngest. Order is not important.\n   */\n  functions: Array<{\n    /**\n     * The Composite ID of the Function.\n     */\n    id: string;\n\n    /**\n     * May be specified as a display name for the Function in the Inngest\n     * Server's UI.\n     */\n    name?: string;\n\n    /**\n     * An array of possible triggers for the Function, defining either\n     * a cron schedule or an event name and optional expression.\n     */\n    triggers: Array<\n      | {\n          /**\n           * If an event, this is the name of the Event that will trigger the\n           * Function.\n           */\n          event: string;\n\n          /**\n           * An optional Expression can also be provided, where `event` is the Event\n           * that may trigger the Function.\n           */\n          expression?: string;\n        }\n      | {\n          /**\n           * If a cron, this is the cron schedule that will trigger the\n           * Function.\n           *\n           * It is defined as a unix cron string, such as `0 0 * * *` for\n           * midnight every day.\n           */\n          cron: string;\n        }\n    >;\n\n    steps: {\n      step: {\n        id: \"step\";\n        name: \"step\";\n        runtime: {\n          type: \"http\";\n\n          /**\n           * The URL that Inngest should make requests to when wanting to\n           * send a Call Request specifically to this Function.\n           *\n           * It MUST be the `url` defined above, with two query string\n           * parameters added:\n           *\n           *  - `stepId` with the value `step`\n           *  - `fnId` with the value of the Function's ID\n           */\n          url: string;\n        };\n\n        retries?: {\n          /**\n           * The number of times to attempt this step. If this object or\n           * property isn't defined, the default is `4` (which is 3 retries).\n           */\n          attempts?: number;\n        };\n      };\n    };\n\n    /**\n     * Allow the specification of an idempotency key using event data. If\n     * specified, this overrides the `rateLimit` object.\n     */\n    idempotency?: string;\n\n    /**\n     * batchEvents specifies the batch configuration on when this function\n     * should be invoked when one of the requirements is fulfilled.\n     */\n    batchEvents?: {\n      /**\n       * The maximum number of events to be consumed in one batch,\n       * Currently allowed max value is 100.\n       */\n      maxSize: number;\n\n      /**\n       * How long to wait before invoking the function with a list of events.\n       * If timeout is reached, the function will be invoked with a batch\n       * even if it's not filled up to `maxSize`.\n       *\n       * MUST be 1s to 60s.\n       */\n      timeout: string;\n    };\n\n    cancel?: Array<{\n      /**\n       * The name of the event that should cancel the function run.\n       */\n      event: string;\n\n      /**\n       * The expression that must evaluate to true in order to cancel the function run. There\n       * are two variables available in this expression:\n       * - event, referencing the original function's event trigger\n       * - async, referencing the new cancel event.\n       */\n      if?: string;\n\n      /**\n       * An optional timeout that the cancel is valid for.  If this isn't\n       * specified, cancellation triggers are valid for up to a year or until the\n       * function ends.\n       *\n       * The time to wait can be specified using a Time String or an ISO 8601\n       * date.\n       */\n      timeout?: string;\n    }>;\n\n    /**\n     * Rate limit workflows, only running them a given number of times (limit) per\n     * period. This can optionally include a `key`, which is used to further\n     * constrain throttling similar to idempotency.\n     */\n    rateLimit?: {\n      /**\n       * An optional key to use for rate limiting, similar to idempotency.\n       */\n      key?: string;\n\n      /**\n       * The number of times to allow the function to run per the given `period`.\n       */\n      limit: number;\n\n      /**\n       * The period of time to allow the function to run `limit` times.\n       */\n      period: TimeStr;\n    };\n\n    /**\n     * Debounce delays functions for the `period` specified. If an event is sent,\n     * the function will not run until at least `period` has elapsed.\n     *\n     * If any new events are received that match the same debounce `key`, the\n     * function is rescheduled for another `period` delay, and the triggering\n     * event is replaced with the latest event received.\n     */\n    debounce?: {\n      /**\n       * An optional key to use for debouncing.\n       */\n      key?: string;\n\n      /**\n       * The period of time to after receiving the last trigger to run the\n       * function.\n       */\n      period: TimeStr;\n\n      /**\n       * The maximum time that a debounce can be extended before running.\n       * If events are continually received within the given period, a function\n       * will always run after the given timeout period.\n       */\n      timeout?: TimeStr;\n    };\n\n    /**\n     * Configure how the priority of a function run is decided when multiple\n     * functions are triggered at the same time.\n     */\n    priority?: {\n      /**\n       * An expression to use to determine the priority of a function run. The\n       * expression can return a number between `-600` and `600`, where `600`\n       * declares that this run should be executed before any others enqueued in\n       * the last 600 seconds (10 minutes), and `-600` declares that this run\n       * should be executed after any others enqueued in the last 600 seconds.\n       */\n      run?: string;\n    };\n\n    /**\n     * Concurrency specifies a limit on the total number of concurrent steps that\n     * can occur across all runs of the function.  A value of 0 (or undefined) means\n     * use the maximum available concurrency.\n     *\n     * Specifying just a number means specifying only the concurrency limit. A\n     * maximum of two concurrency options can be specified.\n     */\n    concurrency?:\n      | number\n      | Array<{\n          /**\n           * The concurrency limit for this option, adding a limit on how many concurrent\n           * steps can execute at once.\n           */\n          limit: number;\n\n          /**\n           * An optional concurrency key, as an Expression.  The result of this expression is used to create new concurrency groups, or\n           * sub-queues, for each function run.\n           *\n           * The event is passed into this expression as \"event\".\n           *\n           * Examples:\n           * - `event.data.user_id`:  this evaluates to the user_id in the event.data object.\n           * - `event.data.user_id + \"-\" + event.data.account_id`: creates a new group per user/account\n           * - `\"ai\"`:  references a custom string\n           */\n          key?: string;\n\n          /**\n           * An optional scope for the concurrency group.  By default, concurrency limits are\n           * scoped to functions - one function's concurrency limits do not impact other functions.\n           *\n           * Changing this \"scope\" allows concurrency limits to work across environments (eg. production\n           * vs branch environments) or across your account (global).\n           */\n          scope?: \"fn\" | \"env\" | \"account\";\n        }>;\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Stream with S2 Compression in Go\nDESCRIPTION: This function demonstrates how to compress data from an input reader to an output writer using S2 compression. It creates a new S2 writer, copies data from the source to the encoder, and ensures proper closing of the encoder.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc EncodeStream(src io.Reader, dst io.Writer) error {\n    enc := s2.NewWriter(dst)\n    _, err := io.Copy(enc, src)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    // Blocks until compression is done.\n    return enc.Close() \n}\n```\n\n----------------------------------------\n\nTITLE: Calling Lua Function from Go with GopherLua\nDESCRIPTION: This Go code demonstrates how to call a Lua function from Go using GopherLua. It initializes a Lua state, executes a Lua file named \"double.lua\", retrieves the global Lua function named \"double\", calls it with the argument 10, retrieves the returned value, and then removes the returned value from the stack.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState()\ndefer L.Close()\nif err := L.DoFile(\"double.lua\"); err != nil {\n    panic(err)\n}\nif err := L.CallByParam(lua.P{\n    Fn: L.GetGlobal(\"double\"),\n    NRet: 1,\n    Protect: true,\n    }, lua.LNumber(10)); err != nil {\n    panic(err)\n}\nret := L.Get(-1) // returned value\nL.Pop(1)  // remove received value\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Glog in Go\nDESCRIPTION: Demonstrates basic usage of glog for logging information and fatal errors. The Info function is used for general logging, while Fatalf is used for logging fatal errors with formatting.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang/glog/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nglog.Info(\"Prepare to repel boarders\")\n\nglog.Fatalf(\"Initialization failed: %s\", err)\n```\n\n----------------------------------------\n\nTITLE: Accessing Single JSON Field in Go using fastjson\nDESCRIPTION: Demonstrates how to use fastjson to quickly access a single field from a JSON string. This one-liner example shows parsing and retrieving an integer value from a nested JSON structure.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/valyala/fastjson/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ns := []byte(`{\"foo\": [123, \"bar\"]}`)\nfmt.Printf(\"foo.0=%d\\n\", fastjson.GetInt(s, \"foo\", \"0\"))\n```\n\n----------------------------------------\n\nTITLE: Setting an Item in CCache with TTL in Go\nDESCRIPTION: Demonstrates how to add an item to the cache with a specified time-to-live (TTL) using the Set method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncache.Set(\"user:4\", user, time.Minute * 10)\n```\n\n----------------------------------------\n\nTITLE: Using bufio.Writer with gzip for stateless compression\nDESCRIPTION: This code snippet demonstrates how to use `bufio.Writer` in conjunction with `gzip.NewWriterLevel` and `gzip.StatelessCompression` to limit memory usage when using stateless gzip compression.  It initializes a gzip writer with stateless compression, wraps it with a buffered writer, and shows how to write data to the buffered writer, ensuring data is flushed to the underlying gzip writer.  The `ioutil.Discard` should be replaced with the desired output.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\n\t// replace 'ioutil.Discard' with your output.\n\tgzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gzw.Close()\n\n\tw := bufio.NewWriterSize(gzw, 4096)\n\tdefer w.Flush()\n\t\n\t// Write to 'w' \n```\n```\n\n----------------------------------------\n\nTITLE: Terminating Coroutine with Context in GopherLua\nDESCRIPTION: This code snippet showcases how to terminate a coroutine using context cancellation in GopherLua. It sets up a coroutine within the Lua state and a context that can be cancelled. When the context is cancelled, any subsequent attempt to resume the coroutine will result in an error, indicating that the child context was cancelled.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState()\ndefer L.Close()\nctx, cancel := context.WithCancel(context.Background())\nL.SetContext(ctx)\ndefer cancel()\nL.DoString(`\n\t    function coro()\n\t\t  local i = 0\n\t\t  while true do\n\t\t    coroutine.yield(i)\n\t\t\ti = i+1\n\t\t  end\n\t\t  return i\n\t    end\n\t`)\n\tco, cocancel := L.NewThread()\n\tdefer cocancel()\n\tfn := L.GetGlobal(\"coro\").(*LFunction)\n\n\t_, err, values := L.Resume(co, fn) // err is nil\n\n\tcancel() // cancel the parent context\n\n\t_, err, values = L.Resume(co, fn) // err is NOT nil : child context was canceled\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Data in Request Handler (Go)\nDESCRIPTION: This example shows how to create a request handler that reads user data from the request context. It assumes the data was set by a previous middleware, demonstrating the flow of data through the middleware chain.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// HTTP handler accessing data from the request context.\nfunc MyRequestHandler(w http.ResponseWriter, r *http.Request) {\n  // here we read from the request context and fetch out `\"user\"` key set in\n  // the MyMiddleware example above.\n  user := r.Context().Value(\"user\").(string)\n\n  // respond to the client\n  w.Write([]byte(fmt.Sprintf(\"hi %s\", user)))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering Styled Text in Go\nDESCRIPTION: This snippet demonstrates how to create a new Lip Gloss style, set various properties like bold text, colors, padding, and width, and then render text with the style.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/charmbracelet/lipgloss\"\n\nvar style = lipgloss.NewStyle().\n    Bold(true).\n    Foreground(lipgloss.Color(\"#FAFAFA\")).\n    Background(lipgloss.Color(\"#7D56F4\")).\n    PaddingTop(2).\n    PaddingLeft(4).\n    Width(22)\n\nfmt.Println(style.Render(\"Hello, kitty.\"))\n```\n\n----------------------------------------\n\nTITLE: Coroutine Usage with GopherLua\nDESCRIPTION: This code shows how to work with coroutines in GopherLua. It creates a new thread (coroutine), retrieves a function named \"coro\" from Lua, and then repeatedly resumes the coroutine, printing any values yielded. It also handles errors during the resume and breaks the loop when the coroutine finishes or encounters an error.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nco, _ := L.NewThread() /* create a new thread */\nfn := L.GetGlobal(\"coro\").(*lua.LFunction) /* get function from lua */\nfor {\n    st, err, values := L.Resume(co, fn)\n    if st == lua.ResumeError {\n        fmt.Println(\"yield break(error)\")\n        fmt.Println(err.Error())\n        break\n    }\n\n    for i, lv := range values {\n        fmt.Printf(\"%v : %v\\n\", i, lv)\n    }\n\n    if st == lua.ResumeOK {\n        fmt.Println(\"yield break(ok)\")\n        break\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic KeyValue Store Usage with JetStream in Go\nDESCRIPTION: This snippet demonstrates basic CRUD operations with JetStream KeyValue stores. It covers creating a bucket, setting, getting, updating, creating, and deleting key-value pairs.  It shows the usage of Put, Get, Update, Create and Delete functions and handles errors appropriately.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n```go\njs, _ := jetstream.New(nc)\nctx := context.Background()\n\n// Create a new bucket. Bucket name is required and has to be unique within a JetStream account.\nkv, _ := js.CreateKeyValue(ctx, jetstream.KeyValueConfig{Bucket: \"profiles\"})\n\n// Set a value for a given key\n// Put will either create or update a value for a given key\nkv.Put(ctx, \"sue.color\", []byte(\"blue\"))\n\n// Get an entry for a given key\n// Entry contains key/value, but also metadata (revision, timestamp, etc.)) \nentry, _ := kv.Get(ctx, \"sue.color\")\n\n// Prints `sue.color @ 1 -> \"blue\"`\nfmt.Printf(\"%s @ %d -> %q\\n\", entry.Key(), entry.Revision(), string(entry.Value()))\n\n// Update a value for a given key\n// Update will fail if the key does not exist or the revision has changed\nkv.Update(ctx, \"sue.color\", []byte(\"red\"), 1)\n\n// Create will fail if the key already exists\n_, err := kv.Create(ctx, \"sue.color\", []byte(\"purple\"))\nfmt.Println(err) // prints `nats: key exists`\n\n// Delete a value for a given key.\n// Delete is not destructive, it will add a delete marker for a given key\n// and all previous revisions will still be available\nkv.Delete(ctx, \"sue.color\")\n\n// getting a deleted key will return an error\n_, err = kv.Get(ctx, \"sue.color\")\nfmt.Println(err) // prints `nats: key not found`\n\n// A bucket can be deleted once it is no longer needed\njs.DeleteKeyValue(ctx, \"profiles\")\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Integers Using Cast in Go\nDESCRIPTION: Illustrates the usage of cast.ToInt() function to convert various data types to integers. It handles different input types including integers, floats, strings, booleans, and interfaces.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/cast/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncast.ToInt(8)                  // 8\ncast.ToInt(8.31)               // 8\ncast.ToInt(\"8\")                // 8\ncast.ToInt(true)               // 1\ncast.ToInt(false)              // 0\n\nvar eight interface{} = 8\ncast.ToInt(eight)              // 8\ncast.ToInt(nil)                // 0\n```\n\n----------------------------------------\n\nTITLE: Binding a Set of Flags with Viper in Go\nDESCRIPTION: Shows how to bind an entire pflag.FlagSet to Viper, allowing access to all defined flags through Viper's configuration interface.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npflag.Int(\"flagname\", 1234, \"help message for flagname\")\n\npflag.Parse()\nviper.BindPFlags(pflag.CommandLine)\n\ni := viper.GetInt(\"flagname\") // retrieve values from viper instead of pflag\n```\n\n----------------------------------------\n\nTITLE: Using gotenv.Must for Error Handling in Go\nDESCRIPTION: This example shows how to use gotenv.Must() to handle errors when loading environment variables. It will panic if an error occurs, such as when the specified file doesn't exist.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nerr := gotenv.Load(\".env-is-not-exist\")\nfmt.Println(\"error\", err)\n// error: open .env-is-not-exist: no such file or directory\n\ngotenv.Must(gotenv.Load, \".env-is-not-exist\")\n// it will throw a panic\n// panic: open .env-is-not-exist: no such file or directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for OpenAI API Client in Go\nDESCRIPTION: This snippet demonstrates how to configure a proxy for the OpenAI API client in Go. It sets up a custom HTTP transport with a proxy URL and creates a new client with the custom configuration.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nconfig := openai.DefaultConfig(\"token\")\nproxyUrl, err := url.Parse(\"http://localhost:{port}\")\nif err != nil {\n\tpanic(err)\n}\ntransport := &http.Transport{\n\tProxy: http.ProxyURL(proxyUrl),\n}\nconfig.HTTPClient = &http.Client{\n\tTransport: transport,\n}\n\nc := openai.NewClientWithConfig(config)\n```\n\n----------------------------------------\n\nTITLE: Processing Amazon Connect Events Using AWS Lambda in Go\nDESCRIPTION: This Go code implements an AWS Lambda function that receives Amazon Connect events, logs event details to CloudWatch, and returns a response. It extracts the ContactID from the event, prints all parameters received, and returns a success response with a new attribute.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Connect.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\nfunc handler(ctx context.Context, connectEvent events.ConnectEvent) (events.ConnectResponse, error) {\n\tfmt.Printf(\"Processing Connect event with ContactID %s.\\n\", connectEvent.Details.ContactData.ContactID)\n\n\tfmt.Printf(\"Invoked with %d parameters\\n\", len(connectEvent.Details.Parameters))\n\tfor k, v := range connectEvent.Details.Parameters {\n\t\tfmt.Printf(\"%s : %s\\n\", k, v)\n\t}\n\n\tresp := events.ConnectResponse{\n\t\t\"Result\":       \"Success\",\n\t\t\"NewAttribute\": \"NewValue\",\n\t}\n\n\treturn resp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: NATS Queue Groups in Go\nDESCRIPTION: Shows how to use queue groups in NATS for load balancing messages across multiple subscribers.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// All subscriptions with the same queue name will form a queue group.\n// Each message will be delivered to only one subscriber per queue group,\n// using queuing semantics. You can have as many queue groups as you wish.\n// Normal subscribers will continue to work as expected.\n\nnc.QueueSubscribe(\"foo\", \"job_workers\", func(_ *Msg) {\n  received += 1;\n})\n```\n\n----------------------------------------\n\nTITLE: Processing Kinesis Events with AWS Lambda in Go\nDESCRIPTION: This Go code implements an AWS Lambda function that handles Kinesis events. The handler function iterates through each record in the Kinesis event, extracts the binary data, converts it to text, and logs it to CloudWatch Logs. The main function starts the Lambda using the handler.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Kinesis.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, kinesisEvent events.KinesisEvent) error {\n    for _, record := range kinesisEvent.Records {\n        kinesisRecord := record.Kinesis\n        dataBytes := kinesisRecord.Data\n        dataText := string(dataBytes)\n\n        fmt.Printf(\"%s Data = %s \\n\", record.EventName, dataText) \n    }\n    \n    return nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced NATS Usage in Go\nDESCRIPTION: Demonstrates advanced NATS features including connection retry, flushing, auto-unsubscribe, and multiple connections.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Normally, the library will return an error when trying to connect and\n// there is no server running. The RetryOnFailedConnect option will set\n// the connection in reconnecting state if it failed to connect right away.\nnc, err := nats.Connect(nats.DefaultURL,\n    nats.RetryOnFailedConnect(true),\n    nats.MaxReconnects(10),\n    nats.ReconnectWait(time.Second),\n    nats.ReconnectHandler(func(_ *nats.Conn) {\n        // Note that this will be invoked for the first asynchronous connect.\n    }))\nif err != nil {\n    // Should not return an error even if it can't connect, but you still\n    // need to check in case there are some configuration errors.\n}\n\n// Flush connection to server, returns when all messages have been processed.\nnc.Flush()\nfmt.Println(\"All clear!\")\n\n// FlushTimeout specifies a timeout value as well.\nerr := nc.FlushTimeout(1*time.Second)\nif err != nil {\n    fmt.Println(\"All clear!\")\n} else {\n    fmt.Println(\"Flushed timed out!\")\n}\n\n// Auto-unsubscribe after MAX_WANTED messages received\nconst MAX_WANTED = 10\nsub, err := nc.Subscribe(\"foo\")\nsub.AutoUnsubscribe(MAX_WANTED)\n\n// Multiple connections\nnc1 := nats.Connect(\"nats://host1:4222\")\nnc2 := nats.Connect(\"nats://host2:4222\")\n\nnc1.Subscribe(\"foo\", func(m *Msg) {\n    fmt.Printf(\"Received a message: %s\\n\", string(m.Data))\n})\n\nnc2.Publish(\"foo\", []byte(\"Hello World!\"));\n```\n\n----------------------------------------\n\nTITLE: Embedding Semantic Similarity with OpenAI in Go\nDESCRIPTION: This snippet shows how to use OpenAI's embedding API to calculate semantic similarity between two pieces of text. It creates embeddings for a query and a target text, then calculates their similarity using dot product.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\topenai \"github.com/sashabaranov/go-openai\"\n\n)\n\nfunc main() {\n\tclient := openai.NewClient(\"your-token\")\n\n\t// Create an EmbeddingRequest for the user query\n\tqueryReq := openai.EmbeddingRequest{\n\t\tInput: []string{\"How many chucks would a woodchuck chuck\"},\n\t\tModel: openai.AdaEmbeddingV2,\n\t}\n\n\t// Create an embedding for the user query\n\tqueryResponse, err := client.CreateEmbeddings(context.Background(), queryReq)\n\tif err != nil {\n\t\tlog.Fatal(\"Error creating query embedding:\", err)\n\t}\n\n\t// Create an EmbeddingRequest for the target text\n\ttargetReq := openai.EmbeddingRequest{\n\t\tInput: []string{\"How many chucks would a woodchuck chuck if the woodchuck could chuck wood\"},\n\t\tModel: openai.AdaEmbeddingV2,\n\t}\n\n\t// Create an embedding for the target text\n\ttargetResponse, err := client.CreateEmbeddings(context.Background(), targetReq)\n\tif err != nil {\n\t\tlog.Fatal(\"Error creating target embedding:\", err)\n\t}\n\n\t// Now that we have the embeddings for the user query and the target text, we\n\t// can calculate their similarity.\n\tqueryEmbedding := queryResponse.Data[0]\n\ttargetEmbedding := targetResponse.Data[0]\n\n\tsimilarity, err := queryEmbedding.DotProduct(&targetEmbedding)\n\tif err != nil {\n\t\tlog.Fatal(\"Error calculating dot product:\", err)\n\t}\n\n\tlog.Printf(\"The similarity score between the query and the target is %f\", similarity)\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Go flags with pflag in Go\nDESCRIPTION: Demonstrates how to add Go's native flag package flags to the pflag flagset, useful for supporting third-party dependencies.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic WaitGroup Usage Example in Go\nDESCRIPTION: Demonstrates the basic usage of conc.WaitGroup for handling goroutines and panic recovery\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    var wg conc.WaitGroup\n    wg.Go(doSomethingThatMightPanic)\n    // panics with a nice stacktrace\n    wg.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Names in zerolog\nDESCRIPTION: This snippet customizes field names for timestamps, levels, and messages using zerolog. It allows for tailoring log format field names globally.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nzerolog.TimestampFieldName = \"t\"\nzerolog.LevelFieldName = \"l\"\nzerolog.MessageFieldName = \"m\"\n\nlog.Info().Msg(\"hello world\")\n\n// Output: {\"l\":\"info\",\"t\":1494567715,\"m\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Parameters in Chi Router (Go)\nDESCRIPTION: This snippet illustrates how to access URL parameters in a request handler when using Chi router. It shows how to retrieve both URL parameters and context values set by middleware.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// HTTP handler accessing the url routing parameters.\nfunc MyRequestHandler(w http.ResponseWriter, r *http.Request) {\n  // fetch the url parameter `\"userID\"` from the request of a matching\n  // routing pattern. An example routing pattern could be: /users/{userID}\n  userID := chi.URLParam(r, \"userID\")\n\n  // fetch `\"key\"` from the request context\n  ctx := r.Context()\n  key := ctx.Value(\"key\").(string)\n\n  // respond to the client\n  w.Write([]byte(fmt.Sprintf(\"hi %v, %v\", userID, key)))\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Application Help\nDESCRIPTION: Defines a function for displaying help for the application, including specific commands and their descriptions, providing users with guidance on how to use the CLI accurately.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc ShowAppHelp(cCtx *Context) error\n    ShowAppHelp is an action that displays the help.\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc ShowAppHelpAndExit(c *Context, exitCode int)\n    ShowAppHelpAndExit - Prints the list of subcommands for the app and exits\n    with exit code.\n```\n\n----------------------------------------\n\nTITLE: NATS Authentication Methods\nDESCRIPTION: Demonstrates various authentication strategies for connecting to NATS servers, including username/password and token-based authentication\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nnc, err = nats.Connect(\"nats://localhost:4222\", nats.UserInfo(\"foo\", \"bar\"))\n\nnc, err = nats.Connect(\"nats://localhost:4222\", nats.Token(\"S3cretT0ken\"))\n\nnc, err = nats.Connect(\"nats://localhost:4222\",\n    nats.UserInfo(\"foo\", \"bar\"),\n    nats.Token(\"S3cretT0ken\"))\n```\n\n----------------------------------------\n\nTITLE: Type Checking Lua Values in Go\nDESCRIPTION: Shows how to check the type of Lua values in Go using type assertions and the Type() method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlv := L.Get(-1) // get the value at the top of the stack\nif str, ok := lv.(lua.LString); ok {\n    // lv is LString\n    fmt.Println(string(str))\n}\nif lv.Type() != lua.LTString {\n    panic(\"string required.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Column Control in Go Table\nDESCRIPTION: This snippet demonstrates how to control various aspects of individual cells/columns in a table, including alignment, colorization, content transformation, visibility, and width.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\n    nameTransformer := text.Transformer(func(val interface{}) string {\n        return text.Bold.Sprint(val)\n    })\n\n    t.SetColumnConfigs([]ColumnConfig{\n        {\n            Name:              \"First Name\",\n            Align:             text.AlignLeft,\n            AlignFooter:       text.AlignLeft,\n            AlignHeader:       text.AlignLeft,\n            Colors:            text.Colors{text.BgBlack, text.FgRed},\n            ColorsHeader:      text.Colors{text.BgRed, text.FgBlack, text.Bold},\n            ColorsFooter:      text.Colors{text.BgRed, text.FgBlack},\n            Hidden:            false,\n            Transformer:       nameTransformer,\n            TransformerFooter: nameTransformer,\n            TransformerHeader: nameTransformer,\n            VAlign:            text.VAlignMiddle,\n            VAlignFooter:      text.VAlignTop,\n            VAlignHeader:      text.VAlignBottom,\n            WidthMin:          6,\n            WidthMax:          64,\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Compressing Input Stream to Output Stream in Go using zstd\nDESCRIPTION: This function demonstrates how to compress data from an input reader to an output writer using the zstd package. It creates a new writer, copies data from input to the encoder, and ensures proper closure of resources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Message Operations in Go\nDESCRIPTION: Demonstrates message-specific operations on a stream including retrieving messages by sequence number, getting the last message for a subject, and deleting messages.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmsg, _ := s.GetMsg(ctx, 100)\n\nmsg, _ = s.GetLastMsgForSubject(ctx, \"ORDERS.new\")\n\n_ = s.DeleteMsg(ctx, 100)\n```\n\n----------------------------------------\n\nTITLE: Handling AWS Config Events in Go Lambda Function\nDESCRIPTION: This Go function receives AWS Config event data as input and logs key information to CloudWatch Logs. It extracts and outputs the Config rule name, invoking event JSON, and event version using the AWS Lambda Go events package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Config.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"strings\"\n    \"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handleRequest(ctx context.Context, configEvent events.ConfigEvent) {\n    fmt.Printf(\"AWS Config rule: %s\\n\", configEvent.ConfigRuleName)\n    fmt.Printf(\"Invoking event JSON: %s\\n\", configEvent.InvokingEvent)\n    fmt.Printf(\"Event version: %s\\n\", configEvent.Version)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JetStream Operations in Go\nDESCRIPTION: Demonstrates core JetStream functionality including connecting to NATS, publishing messages synchronously and asynchronously, and setting up different types of consumers (async ephemeral, sync durable, and pull consumers).\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/legacy_jetstream.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/nats-io/nats.go\"\n\n// Connect to NATS\nnc, _ := nats.Connect(nats.DefaultURL)\n\n// Create JetStream Context\njs, _ := nc.JetStream(nats.PublishAsyncMaxPending(256))\n\n// Simple Stream Publisher\njs.Publish(\"ORDERS.scratch\", []byte(\"hello\"))\n\n// Simple Async Stream Publisher\nfor i := 0; i < 500; i++ {\n    js.PublishAsync(\"ORDERS.scratch\", []byte(\"hello\"))\n}\nselect {\ncase <-js.PublishAsyncComplete():\ncase <-time.After(5 * time.Second):\n    fmt.Println(\"Did not resolve in time\")\n}\n\n// Simple Async Ephemeral Consumer\njs.Subscribe(\"ORDERS.*\", func(m *nats.Msg) {\n    fmt.Printf(\"Received a JetStream message: %s\\n\", string(m.Data))\n})\n\n// Simple Sync Durable Consumer (optional SubOpts at the end)\nsub, err := js.SubscribeSync(\"ORDERS.*\", nats.Durable(\"MONITOR\"), nats.MaxDeliver(3))\nm, err := sub.NextMsg(timeout)\n\n// Simple Pull Consumer\nsub, err := js.PullSubscribe(\"ORDERS.*\", \"MONITOR\")\nmsgs, err := sub.Fetch(10)\n\n// Unsubscribe\nsub.Unsubscribe()\n\n// Drain\nsub.Drain()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic File System Watcher in Go\nDESCRIPTION: Example demonstrating how to create and use a basic file system watcher using FSNotify. Creates a watcher instance, sets up event handling in a goroutine, and monitors a directory for changes. Shows handling of both events and errors with proper cleanup.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fsnotify/fsnotify/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/fsnotify/fsnotify\"\n)\n\nfunc main() {\n    // Create new watcher.\n    watcher, err := fsnotify.NewWatcher()\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer watcher.Close()\n\n    // Start listening for events.\n    go func() {\n        for {\n            select {\n            case event, ok := <-watcher.Events:\n                if !ok {\n                    return\n                }\n                log.Println(\"event:\", event)\n                if event.Has(fsnotify.Write) {\n                    log.Println(\"modified file:\", event.Name)\n                }\n            case err, ok := <-watcher.Errors:\n                if !ok {\n                    return\n                }\n                log.Println(\"error:\", err)\n            }\n        }\n    }()\n\n    // Add a path.\n    err = watcher.Add(\"/tmp\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Block main goroutine forever.\n    <-make(chan struct{})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Function Waiting for Event\nDESCRIPTION: Demonstrates an Inngest function that waits for a specific event with a longer timeout. Requires manual sending of the event to fulfill the wait condition.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/utils/historyParser/testData/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Need to manually send the bar event to fulfill the waitForEvent.\ninngest.createFunction({ name: 'Waits for event' }, { event: 'foo' }, async ({ step }) => {\n  await step.waitForEvent('bar', '1m');\n});\n```\n\n----------------------------------------\n\nTITLE: Terminating a Running LState with Context in GopherLua\nDESCRIPTION: This Go code demonstrates how to terminate a running Lua state using a `context.Context` from the Go standard library. It creates a context with a timeout, sets the context to the Lua state, and then executes a Lua script that sleeps for 3 seconds. Because the context has a timeout of 1 second, the execution of the Lua script is interrupted, resulting in a \"context deadline exceeded\" error.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState()\ndefer L.Close()\nctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)\ndefer cancel()\n// set the context to our LState\nL.SetContext(ctx)\nerr := L.DoString(`\n      local clock = os.clock\n      function sleep(n)  -- seconds\n        local t0 = clock()\n        while clock() - t0 <= n do end\n      end\n      sleep(3)\n    `)\n// err.Error() contains \"context deadline exceeded\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Exact Error in go-multierror\nDESCRIPTION: This snippet demonstrates how to use the standard errors.Is function to check for the presence of a specific error value within a multierror. It shows checking for os.ErrNotExist in the error list.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\nif errors.Is(err, os.ErrNotExist) {\n\t// err contains os.ErrNotExist\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for OpenAI API in Go\nDESCRIPTION: Shows how to properly handle different types of API errors including authentication, rate limiting and server errors using error status codes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ne := &openai.APIError{}\nif errors.As(err, &e) {\n  switch e.HTTPStatusCode {\n    case 401:\n      // invalid auth or key (do not retry)\n    case 429:\n      // rate limiting or engine overload (wait and retry) \n    case 500:\n      // openai server error (retry)\n    default:\n      // unhandled\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron with Seconds Field\nDESCRIPTION: Example showing how to configure cron with a required seconds field using functional options pattern.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncron.New(cron.WithSeconds())\n```\n\n----------------------------------------\n\nTITLE: Implementing Postgres Query Handler\nDESCRIPTION: Complete implementation of the query handler for Postgres, including conversion to SQLite types using the ToSQLite helper function.\nSOURCE: https://github.com/inngest/inngest/blob/main/pkg/cqrs/base_cqrs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (q NormalizedQueries) NewExampleQuery(ctx context.Context, id uuid.UUID) (*sqlc_sqlite.App, error) {\n\tapp, err := q.db.NewExampleQuery(ctx, id)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn app.ToSQLite()\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Environment Variables in Go\nDESCRIPTION: This snippet compares the behavior of gotenv.Apply() and gotenv.OverApply(). It shows that OverApply() will override existing environment variables, while Apply() will not.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nos.Setenv(\"HELLO\", \"world\")\n\n// NOTE: using Apply existing value will be reserved\ngotenv.Apply(strings.NewReader(\"HELLO=universe\"))\nfmt.Println(os.Getenv(\"HELLO\"))\n// Output: \"world\"\n\n// NOTE: using OverApply existing value will be overridden\ngotenv.OverApply(strings.NewReader(\"HELLO=universe\"))\nfmt.Println(os.Getenv(\"HELLO\"))\n// Output: \"universe\"\n```\n\n----------------------------------------\n\nTITLE: Afero Testing Example in Go\nDESCRIPTION: Example of using Afero's memory-mapped filesystem for testing file operations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc TestExist(t *testing.T) {\n\tappFS := afero.NewMemMapFs()\n\t// create test files and directories\n\tappFS.MkdirAll(\"src/a\", 0755)\n\tafero.WriteFile(appFS, \"src/a/b\", []byte(\"file b\"), 0644)\n\tafero.WriteFile(appFS, \"src/c\", []byte(\"file c\"), 0644)\n\tname := \"src/c\"\n\t_, err := appFS.Stat(name)\n\tif os.IsNotExist(err) {\n\t\tt.Errorf(\"file \\\"%s\\\" does not exist.\\n\", name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Specific DynamoDB Attribute Types in Go\nDESCRIPTION: Example showing how to read specific attribute types (String and Number) from DynamoDB stream records. The function demonstrates accessing known attribute types using their respective accessor methods.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_DynamoDB.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handleRequest(ctx context.Context, e events.DynamoDBEvent) {\n\n\tfor _, record := range e.Records {\n\t\tfmt.Printf(\"Processing request data for event ID %s, type %s.\\n\", record.EventID, record.EventName)\n\n\t\t// Print new values for attributes name and age\n\t\tname := record.Change.NewImage[\"name\"].String()\n\t\tage, _ := record.Change.NewImage[\"age\"].Integer()\n\n\t\tfmt.Printf(\"Name: %s, age: %d\\n\", name, age)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: DALL-E 2 Image Generation in Go\nDESCRIPTION: This snippet shows how to use the OpenAI API to generate images using DALL-E 2. It demonstrates generating images both as URLs and base64-encoded data, and saving the generated image to a file.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\topenai \"github.com/sashabaranov/go-openai\"\n\t\"image/png\"\n\t\"os\"\n)\n\nfunc main() {\n\tc := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\t// Sample image by link\n\treqUrl := openai.ImageRequest{\n\t\tPrompt:         \"Parrot on a skateboard performs a trick, cartoon style, natural light, high detail\",\n\t\tSize:           openai.CreateImageSize256x256,\n\t\tResponseFormat: openai.CreateImageResponseFormatURL,\n\t\tN:              1,\n\t}\n\n\trespUrl, err := c.CreateImage(ctx, reqUrl)\n\tif err != nil {\n\t\tfmt.Printf(\"Image creation error: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(respUrl.Data[0].URL)\n\n\t// Example image as base64\n\treqBase64 := openai.ImageRequest{\n\t\tPrompt:         \"Portrait of a humanoid parrot in a classic costume, high detail, realistic light, unreal engine\",\n\t\tSize:           openai.CreateImageSize256x256,\n\t\tResponseFormat: openai.CreateImageResponseFormatB64JSON,\n\t\tN:              1,\n\t}\n\n\trespBase64, err := c.CreateImage(ctx, reqBase64)\n\tif err != nil {\n\t\tfmt.Printf(\"Image creation error: %v\\n\", err)\n\t\treturn\n\t}\n\n\timgBytes, err := base64.StdEncoding.DecodeString(respBase64.Data[0].B64JSON)\n\tif err != nil {\n\t\tfmt.Printf(\"Base64 decode error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tr := bytes.NewReader(imgBytes)\n\timgData, err := png.Decode(r)\n\tif err != nil {\n\t\tfmt.Printf(\"PNG decode error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfile, err := os.Create(\"example.png\")\n\tif err != nil {\n\t\tfmt.Printf(\"File creation error: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tif err := png.Encode(file, imgData); err != nil {\n\t\tfmt.Printf(\"PNG encode error: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"The image was saved as example.png\")\n}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling TOML to Go Struct\nDESCRIPTION: Shows how to unmarshal TOML data into a Go struct using the Unmarshal function provided by go-toml.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pelletier/go-toml/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Postgres struct {\n    User     string\n    Password string\n}\ntype Config struct {\n    Postgres Postgres\n}\n\ndoc := []byte(`\n[Postgres]\nUser = \"pelletier\"\nPassword = \"mypassword\"`)\n\nconfig := Config{}\ntoml.Unmarshal(doc, &config)\nfmt.Println(\"user=\", config.Postgres.User)\n```\n\n----------------------------------------\n\nTITLE: Importing pflag as a Replacement for Go's flag Package\nDESCRIPTION: Shows how to import pflag as a drop-in replacement for Go's native flag package. This allows existing code to continue functioning without changes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Basic Log Sampling with zerolog in Go\nDESCRIPTION: This snippet demonstrates simple log sampling using zerolog.BasicSampler to log every Nth event.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nsampled := log.Sample(&zerolog.BasicSampler{N: 10})\nsampled.Info().Msg(\"will be logged every 10 messages\")\n\n// Output: {\"time\":1494567715,\"level\":\"info\",\"message\":\"will be logged every 10 messages\"}\n```\n\n----------------------------------------\n\nTITLE: Generating Audio Captions with OpenAI Whisper in Go\nDESCRIPTION: This snippet demonstrates how to use the OpenAI API to generate audio captions using the Whisper model. It creates a transcription request, processes the response, and saves the captions to an SRT file.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tc := openai.NewClient(os.Getenv(\"OPENAI_KEY\"))\n\n\treq := openai.AudioRequest{\n\t\tModel:    openai.Whisper1,\n\t\tFilePath: os.Args[1],\n\t\tFormat:   openai.AudioResponseFormatSRT,\n\t}\n\tresp, err := c.CreateTranscription(context.Background(), req)\n\tif err != nil {\n\t\tfmt.Printf(\"Transcription error: %v\\n\", err)\n\t\treturn\n\t}\n\tf, err := os.Create(os.Args[1] + \".srt\")\n\tif err != nil {\n\t\tfmt.Printf(\"Could not open file: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer f.Close()\n\tif _, err := f.WriteString(resp.Text); err != nil {\n\t\tfmt.Printf(\"Error writing to file: %v\\n\", err)\n\t\treturn\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Lua for Sharing Bytecode with GopherLua\nDESCRIPTION: This Go code demonstrates how to compile a Lua script into bytecode and share it between multiple GopherLua states to save memory.  The `CompileLua` function reads a Lua file from disk, parses it, and compiles it into a `FunctionProto`. The `DoCompiledFile` function takes a `FunctionProto` and runs it in a given `LState`. The `Example` function shows how to load the compiled code once and execute it in multiple Lua VMs.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// CompileLua reads the passed lua file from disk and compiles it.\nfunc CompileLua(filePath string) (*lua.FunctionProto, error) {\n    file, err := os.Open(filePath)\n    defer file.Close()\n    if err != nil {\n        return nil, err\n    }\n    reader := bufio.NewReader(file)\n    chunk, err := parse.Parse(reader, filePath)\n    if err != nil {\n        return nil, err\n    }\n    proto, err := lua.Compile(chunk, filePath)\n    if err != nil {\n        return nil, err\n    }\n    return proto, nil\n}\n\n// DoCompiledFile takes a FunctionProto, as returned by CompileLua, and runs it in the LState. It is equivalent\n// to calling DoFile on the LState with the original source file.\nfunc DoCompiledFile(L *lua.LState, proto *lua.FunctionProto) error {\n    lfunc := L.NewFunctionFromProto(proto)\n    L.Push(lfunc)\n    return L.PCall(0, lua.MultRet, nil)\n}\n\n// Example shows how to share the compiled byte code from a lua script between multiple VMs.\nfunc Example() {\n    codeToShare := CompileLua(\"mylua.lua\")\n    a := lua.NewState()\n    b := lua.NewState()\n    c := lua.NewState()\n    DoCompiledFile(a, codeToShare)\n    DoCompiledFile(b, codeToShare)\n    DoCompiledFile(c, codeToShare)\n}\n```\n\n----------------------------------------\n\nTITLE: Using JWT Validator in Go\nDESCRIPTION: Example of creating and using a JWT Validator with custom leeway settings for claims validation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar v = jwt.NewValidator(jwt.WithLeeway(5*time.Second))\nv.Validate(myClaims)\n```\n\n----------------------------------------\n\nTITLE: Using concurrent.Map in Go\nDESCRIPTION: Demonstrates how to use concurrent.Map, a backport of sync.Map for Go versions below 1.9. It shows storing and loading values in a thread-safe manner.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/modern-go/concurrent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nm := concurrent.NewMap()\nm.Store(\"hello\", \"world\")\nelem, found := m.Load(\"hello\")\n// elem will be \"world\"\n// found will be true\n```\n\n----------------------------------------\n\nTITLE: Running Lua Script from String in Go\nDESCRIPTION: Shows how to execute a Lua script provided as a string using GopherLua.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState()\ndefer L.Close()\nif err := L.DoString(`print(\"hello\")`); err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Purge Operations in Go\nDESCRIPTION: Shows different ways to purge messages from a stream, including purging all messages, messages from specific subjects, up to a sequence number, or keeping a specified number of messages.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n_ = s.Purge(ctx)\n\n_ = s.Purge(ctx, jetstream.WithPurgeSubject(\"ORDERS.new\"))\n\n_ = s.Purge(ctx, jetstream.WithPurgeSequence(100))\n\n_ = s.Purge(ctx, jetstream.WithPurgeKeep(10))\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Formatting in go-multierror\nDESCRIPTION: This example shows how to customize the formatting of errors using a custom ErrorFormat function. It allows you to define how the Error() string function behaves for the multierror.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here, maybe using Append\n\nif result != nil {\n\tresult.ErrorFormat = func([]error) string {\n\t\treturn \"errors!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Kinesis Firehose Records with Go Lambda Function\nDESCRIPTION: AWS Lambda function that processes Kinesis Firehose events by converting record data to uppercase. The function receives KinesisFirehoseEvent objects, processes each record by transforming the data to uppercase, and returns a KinesisFirehoseResponse with the transformed records. It uses the aws-lambda-go SDK for handling Lambda events.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_KinesisFirehose.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handleRequest(evnt events.KinesisFirehoseEvent) (events.KinesisFirehoseResponse, error) {\n\n\tfmt.Printf(\"InvocationID: %s\\n\", evnt.InvocationID)\n\tfmt.Printf(\"DeliveryStreamArn: %s\\n\", evnt.DeliveryStreamArn)\n\tfmt.Printf(\"Region: %s\\n\", evnt.Region)\n\n\tvar response events.KinesisFirehoseResponse\n\n\tfor _, record := range evnt.Records {\n\t\tfmt.Printf(\"RecordID: %s\\n\", record.RecordID)\n\t\tfmt.Printf(\"ApproximateArrivalTimestamp: %s\\n\", record.ApproximateArrivalTimestamp)\n\n\t\t// Transform data: ToUpper the data\n\t\tvar transformedRecord events.KinesisFirehoseResponseRecord\n\t\ttransformedRecord.RecordID = record.RecordID\n\t\ttransformedRecord.Result = events.KinesisFirehoseTransformedStateOk\n\t\ttransformedRecord.Data = []byte(strings.ToUpper(string(record.Data)))\n\n\t\tresponse.Records = append(response.Records, transformedRecord)\n\t}\n\n\treturn response, nil\n}\n\nfunc main() {\n\tlambda.Start(handleRequest)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Field Methods in Structs Package\nDESCRIPTION: Demonstrates how to examine and manipulate individual fields of a struct using the Field methods provided by the Structs package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fatih/structs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ns := structs.New(server)\n\n// Get the Field struct for the \"Name\" field\nname := s.Field(\"Name\")\n\n// Get the underlying value,  value => \"gopher\"\nvalue := name.Value().(string)\n\n// Set the field's value\nname.Set(\"another gopher\")\n\n// Get the field's kind, kind =>  \"string\"\nname.Kind()\n\n// Check if the field is exported or not\nif name.IsExported() {\n\tfmt.Println(\"Name field is exported\")\n}\n\n// Check if the value is a zero value, such as \"\" for string, 0 for int\nif !name.IsZero() {\n\tfmt.Println(\"Name is initialized\")\n}\n\n// Check if the field is an anonymous (embedded) field\nif !name.IsEmbedded() {\n\tfmt.Println(\"Name is not an embedded field\")\n}\n\n// Get the Field's tag value for tag name \"json\", tag value => \"name,omitempty\"\ntagValue := name.Tag(\"json\")\n```\n\n----------------------------------------\n\nTITLE: Querying Terminal Color Profile in Go\nDESCRIPTION: Example of how to query the terminal's color profile using termenv.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nprofile := termenv.ColorProfile()\n```\n\n----------------------------------------\n\nTITLE: Checking Status of a JetStream Object Store in Go\nDESCRIPTION: The Go snippet demonstrates how to check the status of a JetStream bucket, showing its size and name. It requires the JetStream client library and context to be used.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\njs, _ := jetstream.New(nc)\nctx := context.Background()\nos, _ := js.CreateObjectStore(ctx, jetstream.ObjectStoreConfig{Bucket: \"configs\"})\n\nos.PutString(ctx, \"config-1\", \"cfg1\")\nos.PutString(ctx, \"config-2\", \"cfg1\")\nos.PutString(ctx, \"config-3\", \"cfg1\")\n\nstatus, _ := os.Status(ctx)\n\nfmt.Println(status.Bucket()) // prints `configs`\nfmt.Println(status.Size()) // prints the size of the bucket in bytes\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL and Executing a Query with pgconn in Go\nDESCRIPTION: This snippet demonstrates how to use pgconn to connect to a PostgreSQL database, execute a parameterized query, and process the results. It includes error handling and proper resource management.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jackc/pgx/v5/pgconn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npgConn, err := pgconn.Connect(context.Background(), os.Getenv(\"DATABASE_URL\"))\nif err != nil {\n\tlog.Fatalln(\"pgconn failed to connect:\", err)\n}\ndefer pgConn.Close(context.Background())\n\nresult := pgConn.ExecParams(context.Background(), \"SELECT email FROM users WHERE id=$1\", [][]byte{[]byte(\"123\")}, nil, nil, nil)\nfor result.NextRow() {\n\tfmt.Println(\"User 123 has email:\", string(result.Values()[0]))\n}\n_, err = result.Close()\nif err != nil {\n\tlog.Fatalln(\"failed reading result:\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Caching Implementation\nDESCRIPTION: Shows how to use server-assisted client-side caching with different TTLs for multiple commands using DoCache and DoMultiCache.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient.DoCache(ctx, client.B().Hmget().Key(\"mk\").Field(\"1\", \"2\").Cache(), time.Minute).ToArray()\nclient.DoMultiCache(ctx,\n    rueidis.CT(client.B().Get().Key(\"k1\").Cache(), 1*time.Minute),\n    rueidis.CT(client.B().Get().Key(\"k2\").Cache(), 2*time.Minute))\n```\n\n----------------------------------------\n\nTITLE: Appending Errors in Go using go-multierror\nDESCRIPTION: This snippet demonstrates how to use the Append function to create a list of errors. It shows how to accumulate errors from multiple steps into a single error value.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar result error\n\nif err := step1(); err != nil {\n\tresult = multierror.Append(result, err)\n}\nif err := step2(); err != nil {\n\tresult = multierror.Append(result, err)\n}\n\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Serializing Span Context to HTTP Headers in Go\nDESCRIPTION: Shows how to inject span context into HTTP headers for cross-process propagation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    func makeSomeRequest(ctx context.Context) ... {\n        if span := opentracing.SpanFromContext(ctx); span != nil {\n            httpClient := &http.Client{}\n            httpReq, _ := http.NewRequest(\"GET\", \"http://myservice/\", nil)\n\n            // Transmit the span's TraceContext as HTTP headers on our\n            // outbound request.\n            opentracing.GlobalTracer().Inject(\n                span.Context(),\n                opentracing.HTTPHeaders,\n                opentracing.HTTPHeadersCarrier(httpReq.Header))\n\n            resp, err := httpClient.Do(httpReq)\n            ...\n        }\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Using smetrics Functions in Go\nDESCRIPTION: This example demonstrates the usage of various string metric functions provided by the smetrics package, including WagnerFischer, Ukkonen, Jaro, JaroWinkler, Soundex, and Hamming.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/xrash/smetrics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/xrash/smetrics\"\n)\n\nfunc main() {\n\tsmetrics.WagnerFischer(\"POTATO\", \"POTATTO\", 1, 1, 2)\n\tsmetrics.WagnerFischer(\"MOUSE\", \"HOUSE\", 2, 2, 4)\n\n\tsmetrics.Ukkonen(\"POTATO\", \"POTATTO\", 1, 1, 2)\n\tsmetrics.Ukkonen(\"MOUSE\", \"HOUSE\", 2, 2, 4)\n\n\tsmetrics.Jaro(\"AL\", \"AL\")\n\tsmetrics.Jaro(\"MARTHA\", \"MARHTA\")\n\n\tsmetrics.JaroWinkler(\"AL\", \"AL\", 0.7, 4)\n\tsmetrics.JaroWinkler(\"MARTHA\", \"MARHTA\", 0.7, 4)\n\n\tsmetrics.Soundex(\"Euler\")\n\tsmetrics.Soundex(\"Ellery\")\n\n\tsmetrics.Hamming(\"aaa\", \"aaa\")\n\tsmetrics.Hamming(\"aaa\", \"aab\")\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Standard Library Flags with Viper in Go\nDESCRIPTION: Demonstrates how to use Go's standard library flags with Viper by importing them into pflag and then binding to Viper.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"github.com/spf13/pflag\"\n)\n\nfunc main() {\n\n\t// using standard library \"flag\" package\n\tflag.Int(\"flagname\", 1234, \"help message for flagname\")\n\n\tpflag.CommandLine.AddGoFlagSet(flag.CommandLine)\n\tpflag.Parse()\n\tviper.BindPFlags(pflag.CommandLine)\n\n\ti := viper.GetInt(\"flagname\") // retrieve value from viper\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Overlapping Configuration in Go\nDESCRIPTION: Demonstrates a pattern for handling configuration that is shared between multiple struct types. This approach uses specialized Option interfaces for different types while maintaining code reuse.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Context Support for NATS Requests and Subscriptions\nDESCRIPTION: Illustrates using Go context for timeout management in NATS client requests and synchronous subscriptions\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\ndefer cancel()\n\nnc, err := nats.Connect(nats.DefaultURL)\n\nmsg, err := nc.RequestWithContext(ctx, \"foo\", []byte(\"bar\"))\n\nsub, err := nc.SubscribeSync(\"foo\")\nmsg, err := sub.NextMsgWithContext(ctx)\n```\n\n----------------------------------------\n\nTITLE: Loading Lua Module in Go with GopherLua (mymain.go)\nDESCRIPTION: This Go code demonstrates how to load and use a custom Lua module (defined in `mymodule.go`) within a GopherLua environment. It initializes a new Lua state, preloads the \"mymodule\" module using the `PreloadModule` function, associating it with the `mymodule.Loader` function. Finally, it executes a Lua file named \"main.lua\", which utilizes the loaded module.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"./mymodule\"\n    \"github.com/yuin/gopher-lua\"\n)\n\nfunc main() {\n    L := lua.NewState()\n    defer L.Close()\n    L.PreloadModule(\"mymodule\", mymodule.Loader)\n    if err := L.DoFile(\"main.lua\"); err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing HTTP Metrics with httpsnoop\nDESCRIPTION: Example of wrapping an HTTP handler to capture and log metrics for every request. Shows how to measure response code, duration, and bytes written while maintaining all underlying http.ResponseWriter interfaces.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/felixge/httpsnoop/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in Go\nDESCRIPTION: Example of a WebSocket client implementation using the library. It dials a connection, writes JSON data, and closes the connection.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/coder/websocket/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithTimeout(context.Background(), time.Minute)\ndefer cancel()\n\nc, _, err := websocket.Dial(ctx, \"ws://localhost:8080\", nil)\nif err != nil {\n\t// ...\n}\ndefer c.CloseNow()\n\nerr = wsjson.Write(ctx, c, \"hi\")\nif err != nil {\n\t// ...\n}\n\nc.Close(websocket.StatusNormalClosure, \"\")\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from Multiple Files in Go\nDESCRIPTION: This snippet shows how to load environment variables from multiple files using gotenv.Load(). It will load the files in the specified order, with the first value set for a variable taking precedence.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngotenv.Load(\".env.production\", \"credentials\")\n```\n\n----------------------------------------\n\nTITLE: Customizing zerolog ConsoleWriter in Go\nDESCRIPTION: This snippet customizes the zerolog.ConsoleWriter configuration and formatting options. It demonstrates level, message, field name, and field value formatting\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\noutput := zerolog.ConsoleWriter{Out: os.Stdout, TimeFormat: time.RFC3339}\noutput.FormatLevel = func(i interface{}) string {\n    return strings.ToUpper(fmt.Sprintf(\"| %-6s|\", i))\n}\noutput.FormatMessage = func(i interface{}) string {\n    return fmt.Sprintf(\"***%s****\", i)\n}\noutput.FormatFieldName = func(i interface{}) string {\n    return fmt.Sprintf(\"%s:\", i)\n}\noutput.FormatFieldValue = func(i interface{}) string {\n    return strings.ToUpper(fmt.Sprintf(\"%s\", i))\n}\n\nlog := zerolog.New(output).With().Timestamp().Logger()\n\nlog.Info().Str(\"foo\", \"bar\").Msg(\"Hello World\")\n\n// Output: 2006-01-02T15:04:05Z07:00 | INFO  | ***Hello World**** foo:BAR\n```\n\n----------------------------------------\n\nTITLE: Setting and Accessing Environment Variables with Viper in Go\nDESCRIPTION: This example demonstrates how to use Viper's environment variable support. It shows setting a prefix, binding a key to an environment variable, and then retrieving the value from the configured environment variable.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nSetEnvPrefix(\"spf\") // will be uppercased automatically\nBindEnv(\"id\")\n\nos.Setenv(\"SPF_ID\", \"13\") // typically done outside of the app\n\nid := Get(\"id\") // 13\n```\n\n----------------------------------------\n\nTITLE: Installing goqu with Go Modules\nDESCRIPTION: Command to install goqu using Go modules. This is the recommended installation method for projects using Go modules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/doug-martin/goqu/v9\n```\n\n----------------------------------------\n\nTITLE: Configuring Panic Recovery\nDESCRIPTION: Example showing how to configure cron to recover from panics in jobs using the chain option.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncron.New(cron.WithChain(\n    cron.Recover(logger),  // or use cron.DefaultLogger\n))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Types by Name in Go using reflect2\nDESCRIPTION: Demonstrates how to use reflect2.TypeByName to retrieve a type by its fully qualified name. This function works similarly to Java's Class.forName.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// given package is github.com/your/awesome-package\ntype MyStruct struct {\n\t// ...\n}\n\n// will return the type\nreflect2.TypeByName(\"awesome-package.MyStruct\")\n// however, if the type has not been used\n// it will be eliminated by compiler, so we can not get it in runtime\n```\n\n----------------------------------------\n\nTITLE: Streaming GPT-3 Completion in Go\nDESCRIPTION: This snippet demonstrates how to use the OpenAI API to create a streaming GPT-3 completion. It sets up a client, creates a completion request with streaming enabled, and handles the streaming response.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\tc := openai.NewClient(\"your token\")\n\tctx := context.Background()\n\n\treq := openai.CompletionRequest{\n\t\tModel:     openai.GPT3Babbage002,\n\t\tMaxTokens: 5,\n\t\tPrompt:    \"Lorem ipsum\",\n\t\tStream:    true,\n\t}\n\tstream, err := c.CreateCompletionStream(ctx, req)\n\tif err != nil {\n\t\tfmt.Printf(\"CompletionStream error: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer stream.Close()\n\n\tfor {\n\t\tresponse, err := stream.Recv()\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tfmt.Println(\"Stream finished\")\n\t\t\treturn\n\t\t}\n\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Stream error: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\n\n\t\tfmt.Printf(\"Stream response: %v\\n\", response)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Text Formatting in Lip Gloss\nDESCRIPTION: This code shows how to apply various inline text formatting options such as bold, italic, faint, blink, strikethrough, underline, and reverse.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    Bold(true).\n    Italic(true).\n    Faint(true).\n    Blink(true).\n    Strikethrough(true).\n    Underline(true).\n    Reverse(true)\n```\n\n----------------------------------------\n\nTITLE: Function Definition using Go Structs\nDESCRIPTION: Demonstrates how to define OpenAI function schemas using Go structs and the jsonschema package instead of raw JSON.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nFunctionDefinition{\n  Name: \"get_current_weather\",\n  Parameters: jsonschema.Definition{\n    Type: jsonschema.Object,\n    Properties: map[string]jsonschema.Definition{\n      \"location\": {\n        Type: jsonschema.String,\n        Description: \"The city and state, e.g. San Francisco, CA\",\n      },\n      \"unit\": {\n        Type: jsonschema.String,\n        Enum: []string{\"celsius\", \"fahrenheit\"},\n      },\n    },\n    Required: []string{\"location\"},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: JSONPath Query Execution in Go using OjG\nDESCRIPTION: Shows how to use JSONPath expressions to query JSON data, specifically filtering array elements based on a condition and extracting values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/README.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\n    x, err := jp.ParseString(\"a[?(@.x > 1)].y\")\n    ys := x.Get(obj)\n    // returns [4]\n```\n\n----------------------------------------\n\nTITLE: UPDATE Query with SET Clause\nDESCRIPTION: Demonstrates how to create an UPDATE query with a SET clause using goqu. This example updates the 'items' table with new values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nsql, args, _ := goqu.Update(\"items\").Set(\n\tgoqu.Record{\"name\": \"Test\", \"address\": \"111 Test Addr\"},\n).ToSQL()\nfmt.Println(sql, args)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cognito Pre-Token Generation Handler in Go\nDESCRIPTION: AWS Lambda function that processes Cognito User Pools pre-token-gen events. The function logs the username to CloudWatch and modifies the token claims by suppressing the 'family_name' claim. Requires aws-lambda-go SDK.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Cognito_UserPools_PreTokenGen.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/aws/aws-lambda-go/lambda\"\n    \"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(event events.CognitoEventUserPoolsPreTokenGen) (events.CognitoEventUserPoolsPreTokenGen, error) {\n    fmt.Printf(\"PreTokenGen of user: %s\\n\", event.UserName)\n    event.Response.ClaimsOverrideDetails.ClaimsToSuppress = []string{\"family_name\"}\n    return event, nil\n}\n\nfunc main() {\n  lambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Processing SQS Events in AWS Lambda using Go\nDESCRIPTION: This Go code defines an AWS Lambda function that handles SQS events. It iterates through the SQS messages, logging the message ID, event source, and body to CloudWatch Logs. The function uses the aws-lambda-go library to interface with AWS Lambda.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_SQS.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, sqsEvent events.SQSEvent) error {\n\tfor _, message := range sqsEvent.Records {\n\t\tfmt.Printf(\"The message %s for event source %s = %s \\n\", message.MessageId, message.EventSource, message.Body)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Query with goqu\nDESCRIPTION: Demonstrates how to create a simple SELECT query using goqu. This example selects all columns from the 'test' table.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsql, _, _ := goqu.From(\"test\").ToSQL()\nfmt.Println(sql)\n```\n\n----------------------------------------\n\nTITLE: Listing Keys in a KeyValue Bucket with JetStream in Go\nDESCRIPTION: This snippet demonstrates how to list all keys in a JetStream KeyValue bucket using the `ListKeys` method. It shows how to iterate through the keys and print them.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n```go\njs, _ := jetstream.New(nc)\nctx := context.Background()\nkv, _ := js.CreateKeyValue(ctx, jetstream.KeyValueConfig{Bucket: \"profiles\"})\n\nkv.Put(ctx, \"sue.color\", []byte(\"blue\"))\nkv.Put(ctx, \"sue.age\", []byte(\"43\"))\nkv.Put(ctx, \"bucket\", []byte(\"profiles\"))\n\nkeys, _ := kv.ListKeys(ctx)\n\n// Prints all 3 keys\nfor key := range keys.Keys() {\n    fmt.Println(key)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Struct Fields with Structs Package\nDESCRIPTION: Demonstrates how to iterate over all fields of a struct using the Fields() method provided by the Structs package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fatih/structs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ns := structs.New(server)\n\nfor _, f := range s.Fields() {\n\tfmt.Printf(\"field name: %+v\\n\", f.Name())\n\n\tif f.IsExported() {\n\t\tfmt.Printf(\"value   : %+v\\n\", f.Value())\n\t\tfmt.Printf(\"is zero : %+v\\n\", f.IsZero())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ANSI Processing on Windows for termenv\nDESCRIPTION: This Go code snippet demonstrates how to enable ANSI processing for termenv on Windows platforms. It uses the EnableWindowsANSIConsole function and includes error handling and cleanup with a deferred call to RestoreWindowsConsole.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmode, err := termenv.EnableWindowsANSIConsole()\nif err != nil {\n    panic(err)\n}\ndefer termenv.RestoreWindowsConsole(mode)\n```\n\n----------------------------------------\n\nTITLE: Avoiding JSON Structure Errors with DecodeSliceOfJSON in Go\nDESCRIPTION: This snippet demonstrates a scenario to avoid when using the DecodeSliceOfJSON function in Go. It highlights the requirement for consistent JSON structures when decoding Redis responses into Go structs. Mismatches in expected JSON formats, such as setting a pure string value instead of a JSON object, will lead to decoding errors.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_17\n\nLANGUAGE: golang\nCODE:\n```\n// Set a pure string value\nif err = client.Do(ctx, client.B().Set().Key(\"user1\").Value(\"userName1\").Build()).Error(); err != nil {\n\treturn err\n}\n\n// Bad\nusers := make([]*User, 0)\nif err := rueidis.DecodeSliceOfJSON(client.Do(ctx, client.B().Mget().Key(\"user1\").Build()), &users); err != nil {\n\treturn err\n}\n// -> Error: invalid character 'u' looking for the beginning of the value\n// in this case, use client.Do(ctx, client.B().Mget().Key(\"user1\").Build()).AsStrSlice()\n\n```\n\n----------------------------------------\n\nTITLE: Handling Streaming Read - golang\nDESCRIPTION: This code snippet demonstrates how to use `DoMultiStream()` to handle large Redis responses by streaming directly to an `io.Writer`, thereby reducing memory allocation. Limitations include potential connection occupation and restricted response types. It recommends using regular methods for performance unless memory constraints dictate otherwise.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_10\n\nLANGUAGE: golang\nCODE:\n```\ns := client.DoMultiStream(ctx, client.B().Get().Key(\"a{slot1}\").Build(), client.B().Get().Key(\"b{slot1}\").Build())\nfor s.HasNext() {\n    n, err := s.WriteTo(io.Discard)\n    if rueidis.IsRedisNil(err) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying with Options in Go\nDESCRIPTION: This snippet demonstrates how to use the CopyWithOption function from the Copier library, allowing for more fine-grained control over the copying process, such as ignoring empty fields and performing deep copies.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jinzhu/copier/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncopier.CopyWithOption(&to, &from, copier.Option{IgnoreEmpty: true, DeepCopy: true})\n```\n\n----------------------------------------\n\nTITLE: Step Planned Operation Response Structure in TypeScript\nDESCRIPTION: Defines the structure for planning a Run step operation that will be executed in a separate Call Request. This structure includes the step ID, operation type declaration, and optional display name.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tid: string;\n\top: \"StepPlanned\";\n\tdisplayName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Afero File Operations in Go\nDESCRIPTION: Example showing how to replace standard OS file operations with Afero equivalents.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nos.Open('/tmp/foo')\n\nAppFs.Open('/tmp/foo')\n```\n\n----------------------------------------\n\nTITLE: Basic Table Creation and Rendering in Go\nDESCRIPTION: Demonstrates basic table creation with headers, rows, separators, and footer using the go-pretty library. Shows how to initialize a table writer, add content, and render to stdout.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"os\"\n\n    \"github.com/jedib0t/go-pretty/v6/table\"\n)\n\nfunc main() {\n    t := table.NewWriter()\n    t.SetOutputMirror(os.Stdout)\n    t.AppendHeader(table.Row{\"#\", \"First Name\", \"Last Name\", \"Salary\"})\n    t.AppendRows([]table.Row{\n        {1, \"Arya\", \"Stark\", 3000},\n        {20, \"Jon\", \"Snow\", 2000, \"You know nothing, Jon Snow!\"},\n    })\n    t.AppendSeparator()\n    t.AppendRow([]interface{}{300, \"Tyrion\", \"Lannister\", 5000})\n    t.AppendFooter(table.Row{\"\", \"\", \"Total\", 10000})\n    t.Render()\n```\n\n----------------------------------------\n\nTITLE: Generating URL Slugs with Go Slug Package\nDESCRIPTION: Example demonstrating various slug generation use cases including multi-language support, custom substitutions, and case preservation. Shows basic usage, language-specific handling, and custom character mappings.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/gosimple/slug/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gosimple/slug\"\n)\n\nfunc main() {\n\ttext := slug.Make(\"Hellö Wörld хелло ворлд\")\n\tfmt.Println(text) // Will print: \"hello-world-khello-vorld\"\n\n\tsomeText := slug.Make(\"影師\")\n\tfmt.Println(someText) // Will print: \"ying-shi\"\n\n\tenText := slug.MakeLang(\"This & that\", \"en\")\n\tfmt.Println(enText) // Will print: \"this-and-that\"\n\n\tdeText := slug.MakeLang(\"Diese & Dass\", \"de\")\n\tfmt.Println(deText) // Will print: \"diese-und-dass\"\n\n\tslug.Lowercase = false // Keep uppercase characters\n\tdeUppercaseText := slug.MakeLang(\"Diese & Dass\", \"de\")\n\tfmt.Println(deUppercaseText) // Will print: \"Diese-und-Dass\"\n\n\tslug.CustomSub = map[string]string{\n\t\t\"water\": \"sand\",\n\t}\n\ttextSub := slug.Make(\"water is hot\")\n\tfmt.Println(textSub) // Will print: \"sand-is-hot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Seconds Parser\nDESCRIPTION: Example showing how to configure cron with an optional seconds field and custom parser configuration.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncron.New(\n    cron.WithParser(\n        cron.SecondOptional | cron.Minute | cron.Hour | cron.Dom | cron.Month | cron.Dow | cron.Descriptor))\n```\n\n----------------------------------------\n\nTITLE: Processing CloudWatch Logs in AWS Lambda Go Function\nDESCRIPTION: This Go function serves as an AWS Lambda handler for CloudWatch Logs events. It parses the incoming log data and prints each log message to the console, which is then captured by Lambda's own CloudWatch Logs.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_CloudWatch_Logs.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(ctx context.Context, logsEvent events.CloudwatchLogsEvent) {\n\tdata, _ := logsEvent.AWSLogs.Parse()\n\tfor _, logEvent := range data.LogEvents {\n\t\tfmt.Printf(\"Message = %s\\n\", logEvent.Message)\n  \t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Chi Router Setup in Go\nDESCRIPTION: Demonstrates how to set up a simple Chi router with a single route and middleware. This example shows the basic structure of a Chi application, including importing the necessary packages, creating a router, adding middleware, and defining a route.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/go-chi/chi/v5/middleware\"\n)\n\nfunc main() {\n\tr := chi.NewRouter()\n\tr.Use(middleware.Logger)\n\tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"welcome\"))\n\t})\n\thttp.ListenAndServe(\":3000\", r)\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Rules in Lip Gloss\nDESCRIPTION: These snippets show how to enforce certain rendering rules, such as inline rendering and maximum width/height constraints.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Force rendering onto a single line, ignoring margins, padding, and borders.\nsomeStyle.Inline(true).Render(\"yadda yadda\")\n\n// Also limit rendering to five cells\nsomeStyle.Inline(true).MaxWidth(5).Render(\"yadda yadda\")\n\n// Limit rendering to a 5x5 cell block\nsomeStyle.MaxWidth(5).MaxHeight(5).Render(\"yadda yadda\")\n```\n\n----------------------------------------\n\nTITLE: Computing Levenshtein Distance in Go\nDESCRIPTION: Example code demonstrating how to calculate the Levenshtein distance between two strings using the library. Shows basic usage with ASCII strings and outputs the computed distance.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/agnivade/levenshtein/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/agnivade/levenshtein\"\n)\n\nfunc main() {\n\ts1 := \"kitten\"\n\ts2 := \"sitting\"\n\tdistance := levenshtein.ComputeDistance(s1, s2)\n\tfmt.Printf(\"The distance between %s and %s is %d.\\n\", s1, s2, distance)\n\t// Output:\n\t// The distance between kitten and sitting is 3.\n}\n```\n\n----------------------------------------\n\nTITLE: Log Caller Information with zerolog\nDESCRIPTION: Demonstrates how to add file and line number information to log entries using zerolog for tracing.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nlog.Logger = log.With().Caller().Logger()\nlog.Info().Msg(\"hello world\")\n\n// Output: {\"level\": \"info\", \"message\": \"hello world\", \"caller\": \"/go/src/your_project/some_file:21\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Metadata of Objects in JetStream with Go\nDESCRIPTION: This simple Go snippet demonstrates updating the metadata of an object in a JetStream bucket, specifically changing the name and adding a description. This requires the JetStream client library context in Go.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\njs, _ := jetstream.New(nc)\nctx := context.Background()\nos, _ := js.CreateObjectStore(ctx, jetstream.ObjectStoreConfig{Bucket: \"configs\"})\n\nos.PutString(ctx, \"config\", \"data\")\n\n// update metadata of the object to e.g. add a description\nos.UpdateMeta(ctx, \"config\", jetstream.ObjectMeta{Name: \"config\", Description: \"this is a config\"})\n\n// object can be moved under a new name (unless it already exists)\nos.UpdateMeta(ctx, \"config\", jetstream.ObjectMeta{Name: \"config-1\", Description: \"updated config\"})\n```\n\n----------------------------------------\n\nTITLE: Handling Amazon Lex Events in Go Lambda Function\nDESCRIPTION: This Go function serves as a Lambda handler for Amazon Lex events. It logs the current intent to CloudWatch, constructs a response message, and returns a LexResponse object to close the dialog and fulfill the intent.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Lex.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc Handler(ctx context.Context, event events.LexEvent) (*lex.LexResponse, error) {\n\tfmt.Printf(\"Received an input from Amazon Lex. Current Intent: %s\", event.CurrentIntent.Name)\n\n\tmessageContent := \"Hello from AWS Lambda!\"\n\n\treturn &LexResponse{\n\t\tSessionAttributes: event.SessionAttributes,\n\t\tDialogAction: events.LexDialogAction{\n\t\t\tType: \"Close\",\n\t\t\tMessage: map[string]string{\n\t\t\t\t\"content\":     messageContent,\n\t\t\t\t\"contentType\": \"PlainText\",\n\t\t\t},\n\t\t\tFulfillmentState: \"Fulfilled\",\n\t\t},\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Processing SES Events with AWS Lambda in Go\nDESCRIPTION: A Go implementation of an AWS Lambda function that handles Amazon SES events. The function iterates through event records, extracts SES mail and receipt information, and logs it to CloudWatch. Uses aws-lambda-go SDK for event handling.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_SES.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, sesEvent events.SimpleEmailEvent) error {\n  for _, record := range sesEvent.Records {\n      ses := record.SES\n      fmt.Printf(\"[%s - %s] Mail = %+v, Receipt = %+v \\n\", record.EventVersion, record.EventSource, ses.Mail, ses.Receipt)\n  }\n\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Error List in go-multierror\nDESCRIPTION: This snippet demonstrates how to access the list of errors from a multierror using type assertion. It shows how to check if an error is a multierror and access its Errors field.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif err := something(); err != nil {\n\tif merr, ok := err.(*multierror.Error); ok {\n\t\t// Use merr.Errors\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Naming Convention Examples\nDESCRIPTION: Example usage of the naming convention library showing various transformations including CamelCase, snake_case, and delimiter-separated strings.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pascaldekloe/name/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nname.CamelCase(\"pascal case\", true) // returns \"PascalCase\"\nname.CamelCase(\"snake_to_camel AND CamelToCamel?\", false) // returns \"snakeToCamelANDCamelToCamel\"\nname.Delimit(\"* All Hype is aGoodThing (TM)\", '-') // returns \"all-hype-is-a-good-thing-TM\"\nname.DotSeparated(\"WebCrawler#socketTimeout\") // returns \"web.crawler.socket.timeout\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Terminal Type using go-isatty in Go\nDESCRIPTION: This snippet demonstrates how to use the go-isatty library to check if the standard output is connected to a terminal, Cygwin/MSYS2 terminal, or neither. It imports the necessary packages and uses IsTerminal and IsCygwinTerminal functions to determine the output type.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/mattn/go-isatty/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/mattn/go-isatty\"\n\t\"os\"\n)\n\nfunc main() {\n\tif isatty.IsTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Terminal\")\n\t} else if isatty.IsCygwinTerminal(os.Stdout.Fd()) {\n\t\tfmt.Println(\"Is Cygwin/MSYS2 Terminal\")\n\t} else {\n\t\tfmt.Println(\"Is Not Terminal\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of NUID in Go\nDESCRIPTION: Demonstrates how to use the NUID library to generate unique identifiers. It shows using the global locked instance, creating a new instance, and randomizing the prefix.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nuid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Utilize the global locked instance\nnuid := nuid.Next()\n\n// Create an instance, these are not locked.\nn := nuid.New()\nnuid = n.Next()\n\n// Generate a new crypto/rand seeded prefix.\n// Generally not needed, happens automatically.\nn.RandomizePrefix()\n```\n\n----------------------------------------\n\nTITLE: Creating Lua Module in Go with GopherLua (mymodule.go)\nDESCRIPTION: This Go code defines a Lua module named \"mymodule\" using GopherLua.  The `Loader` function is the entry point for the module. It registers functions defined in the `exports` map to the module table, sets a field named \"name\" with a string value, and then pushes the module table onto the stack, returning 1 to indicate that one value (the module) is being returned.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage mymodule\n\nimport (\n    \"github.com/yuin/gopher-lua\"\n)\n\nfunc Loader(L *lua.LState) int {\n    // register functions to the table\n    mod := L.SetFuncs(L.NewTable(), exports)\n    // register other stuff\n    L.SetField(mod, \"name\", lua.LString(\"value\"))\n\n    // returns the module\n    L.Push(mod)\n    return 1\n}\n\nvar exports = map[string]lua.LGFunction{\n    \"myfunc\": myfunc,\n}\n\nfunc myfunc(L *lua.LState) int {\n    return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Config from io.Reader in Viper\nDESCRIPTION: Example of how to read configuration from an io.Reader interface in Viper. This allows for reading config from any source that can be represented as a byte stream.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nviper.SetConfigType(\"yaml\") // or viper.SetConfigType(\"YAML\")\n\n// any approach to require this configuration into your program.\nvar yamlExample = []byte(`\nHacker: true\nname: steve\nhobbies:\n- skateboarding\n- snowboarding\n- go\nclothing:\n  jacket: leather\n  trousers: denim\nage: 35\neyes : brown\nbeard: true\n`)\n\nviper.ReadConfig(bytes.NewBuffer(yamlExample))\n\nviper.Get(\"name\") // this would be \"steve\"\n```\n\n----------------------------------------\n\nTITLE: Blending Colors in Different Color Spaces (Go)\nDESCRIPTION: This snippet demonstrates how to blend colors in various color spaces (HSV, LUV, RGB, LAB, HCL) using the go-colorful library. It creates an image showing the blending results for each color space.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\nimport \"github.com/lucasb-eyer/go-colorful\"\nimport \"image\"\nimport \"image/draw\"\nimport \"image/png\"\nimport \"os\"\n\nfunc main() {\n    blocks := 10\n    blockw := 40\n    img := image.NewRGBA(image.Rect(0,0,blocks*blockw,200))\n\n    c1, _ := colorful.Hex(\"#fdffcc\")\n    c2, _ := colorful.Hex(\"#242a42\")\n\n    // Use these colors to get invalid RGB in the gradient.\n    //c1, _ := colorful.Hex(\"#EEEF61\")\n    //c2, _ := colorful.Hex(\"#1E3140\")\n\n    for i := 0 ; i < blocks ; i++ {\n        draw.Draw(img, image.Rect(i*blockw,  0,(i+1)*blockw, 40), &image.Uniform{c1.BlendHsv(c2, float64(i)/float64(blocks-1))}, image.Point{}, draw.Src)\n        draw.Draw(img, image.Rect(i*blockw, 40,(i+1)*blockw, 80), &image.Uniform{c1.BlendLuv(c2, float64(i)/float64(blocks-1))}, image.Point{}, draw.Src)\n        draw.Draw(img, image.Rect(i*blockw, 80,(i+1)*blockw,120), &image.Uniform{c1.BlendRgb(c2, float64(i)/float64(blocks-1))}, image.Point{}, draw.Src)\n        draw.Draw(img, image.Rect(i*blockw,120,(i+1)*blockw,160), &image.Uniform{c1.BlendLab(c2, float64(i)/float64(blocks-1))}, image.Point{}, draw.Src)\n        draw.Draw(img, image.Rect(i*blockw,160,(i+1)*blockw,200), &image.Uniform{c1.BlendHcl(c2, float64(i)/float64(blocks-1))}, image.Point{}, draw.Src)\n\n        // This can be used to \"fix\" invalid colors in the gradient.\n        //draw.Draw(img, image.Rect(i*blockw,160,(i+1)*blockw,200), &image.Uniform{c1.BlendHcl(c2, float64(i)/float64(blocks-1)).Clamped()}, image.Point{}, draw.Src)\n    }\n\n    toimg, err := os.Create(\"colorblend.png\")\n    if err != nil {\n        fmt.Printf(\"Error: %v\", err)\n        return\n    }\n    defer toimg.Close()\n\n    png.Encode(toimg, img)\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative PubSub Hooks - golang\nDESCRIPTION: This snippet shows how to utilize `SetPubSubHooks()` to define hooks for channel subscription management. It allows the client to handle messages and manage disconnections asynchronously. The provided `wait` channel helps detect disconnection reasons after subscription commands.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\nc, cancel := client.Dedicate()\ndefer cancel()\n\nwait := c.SetPubSubHooks(rueidis.PubSubHooks{\n\tOnMessage: func(m rueidis.PubSubMessage) {\n\t\t// Handle the message. Note that if you want to call another `c.Do()` here, you need to do it in another goroutine or the `c` will be blocked.\n\t}\n})\nc.Do(ctx, c.B().Subscribe().Channel(\"ch\").Build())\nerr := <-wait\n```\n\n----------------------------------------\n\nTITLE: Initializing Procfs and Reading Stats in Go\nDESCRIPTION: Example showing how to initialize the procfs filesystem mount point and read system statistics from /proc/stat.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfs, err := procfs.NewFS(\"/proc\")\nstats, err := fs.Stat()\n```\n\n----------------------------------------\n\nTITLE: Setting Overrides in Viper\nDESCRIPTION: Examples of how to set override values in Viper. These could come from command line flags or application logic and take precedence over other config sources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nviper.Set(\"Verbose\", true)\nviper.Set(\"LogFile\", LogFile)\n```\n\n----------------------------------------\n\nTITLE: Registering a Stats View in Go\nDESCRIPTION: Example of registering a view with distribution aggregation in OpenCensus Go.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := view.Register(&view.View{\n\tName:        \"example.com/video_size_distribution\",\n\tDescription: \"distribution of processed video size over time\",\n\tMeasure:     videoSize,\n\tAggregation: view.Distribution(1<<32, 2<<32, 3<<32),\n}); err != nil {\n\tlog.Fatalf(\"Failed to register view: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Purging Keys in a KeyValue Bucket with JetStream in Go\nDESCRIPTION: This snippet demonstrates how to purge keys from a JetStream KeyValue bucket using the `Purge` and `PurgeDeletes` methods. `Purge` removes all keys and their previous revisions, keeping the latest revision with a delete marker, while `PurgeDeletes` removes keys with delete markers.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n```go\njs, _ := jetstream.New(nc)\nctx := context.Background()\nkv, _ := js.CreateKeyValue(ctx, jetstream.KeyValueConfig{Bucket: \"profiles\"})\n\nkv.Put(ctx, \"sue.color\", []byte(\"blue\"))\nkv.Put(ctx, \"sue.age\", []byte(\"43\"))\nkv.Put(ctx, \"bucket\", []byte(\"profiles\"))\n\n// Purge will remove all keys from a bucket.\n// The latest revision of each key will be kept\n// with a delete marker, all previous revisions will be removed\n// permanently.\nkv.Purge(ctx)\n\n// PurgeDeletes will remove all keys from a bucket\n// with a delete marker.\nkv.PurgeDeletes(ctx)\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing DocGenerationFlag Interface in Go\nDESCRIPTION: Defines the DocGenerationFlag interface that extends the Flag interface with methods for documentation generation. It includes methods for checking if the flag takes a value, getting usage string, value, default text, and environment variables.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\ntype DocGenerationFlag interface {\n\tFlag\n\n\t// TakesValue returns true if the flag takes a value, otherwise false\n\tTakesValue() bool\n\n\t// GetUsage returns the usage string for the flag\n\tGetUsage() string\n\n\t// GetValue returns the flags value as string representation and an empty\n\t// string if the flag takes no value at all.\n\tGetValue() string\n\n\t// GetDefaultText returns the default text for this flag\n\tGetDefaultText() string\n\n\t// GetEnvVars returns the env vars for this flag\n\tGetEnvVars() []string\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Text in Lip Gloss\nDESCRIPTION: This snippet shows how to align paragraphs of text to the left, right, or center within a specified width.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    Width(24).\n    Align(lipgloss.Left).  // align it left\n    Align(lipgloss.Right). // no wait, align it right\n    Align(lipgloss.Center) // just kidding, align it in the center\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Flags in Go using pflag\nDESCRIPTION: Shows how to parse the command line into defined flags using pflag's Parse() function.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nflag.Parse()\n```\n\n----------------------------------------\n\nTITLE: Handling ALB Target Group Requests with AWS Lambda in Go\nDESCRIPTION: This Go function processes ALB Target Group requests by logging the trace ID, body size, and headers to CloudWatch Logs, then returns a response with the same body and a 200 status code. It demonstrates the basic request-response pattern for Lambda functions registered as ALB targets.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_ALBTargetGroupEvents.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handleRequest(ctx context.Context, request events.ALBTargetGroupRequest) (events.ALBTargetGroupResponse, error) {\n\tfmt.Printf(\"Processing request data for traceId %s.\\n\", request.Headers[\"x-amzn-trace-id\"])\n\tfmt.Printf(\"Body size = %d.\\n\", len(request.Body))\n\n\tfmt.Println(\"Headers:\")\n\tfor key, value := range request.Headers {\n\t\tfmt.Printf(\"    %s: %s\\n\", key, value)\n\t}\n\n\treturn events.ALBTargetGroupResponse{Body: request.Body, StatusCode: 200, StatusDescription: \"200 OK\", IsBase64Encoded: false, Headers: map[string]string{}}, nil\n}\n\nfunc main() {\n\tlambda.Start(handleRequest)\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Built Inngest CLI\nDESCRIPTION: Command to execute the locally built Inngest CLI. The path includes a placeholder for the system architecture, which needs to be replaced with the actual build output.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./dist/inngest_[system_arch]/inngest\n```\n\n----------------------------------------\n\nTITLE: Setting Interface Values in Go using reflect2\nDESCRIPTION: Shows how to use reflect2 to set interface{} values with type checking. This example demonstrates setting an integer value through reflection.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.Set(&i, &j)\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Using Unidecode for Unicode Transliteration in Go\nDESCRIPTION: Example demonstrating how to use the unidecode package to convert Unicode text to ASCII. Shows conversion of 'Łódź' to 'Lodz'.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/gosimple/unidecode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gosimple/unidecode\"\n)\n\nfunc main() {\n\tdecoded := unidecode.Unidecode(\"Łódź\")\n\tfmt.Println(decoded)\n\t// Output: Lodz\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Error from go-multierror\nDESCRIPTION: This example shows how to use the standard errors.As function to extract a specific error type from a multierror. It demonstrates checking for and extracting a RichErrorType from the error list.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Assume err is a multierror value\nerr := somefunc()\n\n// We want to know if \"err\" has a \"RichErrorType\" in it and extract it.\nvar errRich RichErrorType\nif errors.As(err, &errRich) {\n\t// It has it, and now errRich is populated.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Function URL Handler in Go\nDESCRIPTION: A Go implementation of a Lambda function that processes Function URL requests. The function logs request details to CloudWatch, including request ID, body size, and headers, then returns a response with the same body and 200 status code. Requires aws-lambda-go package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Lambda.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handleRequest(ctx context.Context, request events.LambdaFunctionURLRequest) (events.LambdaFunctionURLResponse, error) {\n\tfmt.Printf(\"Processing request data for request %s.\\n\", request.RequestContext.RequestID)\n\tfmt.Printf(\"Body size = %d.\\n\", len(request.Body))\n\n\tfmt.Println(\"Headers:\")\n\tfor key, value := range request.Headers {\n\t\tfmt.Printf(\"    %s: %s\\n\", key, value)\n\t}\n\n\treturn events.LambdaFunctionURLResponse{Body: request.Body, StatusCode: 200}, nil\n}\n\nfunc main() {\n\tlambda.Start(handleRequest)\n}\n```\n\n----------------------------------------\n\nTITLE: Processing CloudWatch Events in Go Lambda Function\nDESCRIPTION: A Go Lambda function that receives CloudWatch event data and logs the event detail to CloudWatch Logs using fmt.Printf. This demonstrates basic event handling in a Lambda function.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_CloudWatch_Events.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(ctx context.Context, event events.CloudWatchEvent) {\n\tfmt.Printf(\"Detail = %s\\n\", event.Detail)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Color Palettes (Go)\nDESCRIPTION: This snippet shows how to generate random color palettes using various methods provided by the go-colorful library. It includes examples of warm, happy, and soft palettes, as well as custom palette generation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npal1, err1 := colorful.WarmPalette(10)\npal2 := colorful.FastWarmPalette(10)\npal3, err3 := colorful.HappyPalette(10)\npal4 := colorful.FastHappyPalette(10)\npal5, err5 := colorful.SoftPalette(10)\n\nfunc isbrowny(l, a, b float64) bool {\n    h, c, L := colorful.LabToHcl(l, a, b)\n    return 10.0 < h && h < 50.0 && 0.1 < c && c < 0.5 && L < 0.5\n}\n// Since the above function is pretty restrictive, we set ManySamples to true.\nbrownies := colorful.SoftPaletteEx(10, colorful.SoftPaletteSettings{isbrowny, 50, true})\n```\n\n----------------------------------------\n\nTITLE: Parsing Environment Variables from io.Reader in Go\nDESCRIPTION: This snippet demonstrates how to use gotenv.Parse() and gotenv.StrictParse() to parse environment variables from an io.Reader. Parse() ignores invalid lines, while StrictParse() returns an error for invalid lines.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npairs := gotenv.Parse(strings.NewReader(\"FOO=test\\nBAR=$FOO\"))\n// gotenv.Env{\"FOO\": \"test\", \"BAR\": \"test\"}\n\nerr, pairs = gotenv.StrictParse(strings.NewReader(`FOO=\"bar\"`))\n// gotenv.Env{\"FOO\": \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Functional Options in Go\nDESCRIPTION: Shows how to use function closures to implement the Option interface. This approach provides flexibility for complex option setting logic.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Config File in Viper\nDESCRIPTION: Example of how to handle the specific case where no config file is found when using Viper. It demonstrates type assertion to check for a ConfigFileNotFoundError.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif err := viper.ReadInConfig(); err != nil {\n\tif _, ok := err.(viper.ConfigFileNotFoundError); ok {\n\t\t// Config file not found; ignore error if desired\n\t} else {\n\t\t// Config file was found but another error was produced\n\t}\n}\n\n// Config file found and successfully parsed\n```\n\n----------------------------------------\n\nTITLE: Deleting an Item from CCache in Go\nDESCRIPTION: Shows how to remove an item from the cache using the Delete method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ncache.Delete(\"user:4\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a resolver for the friends field\nDESCRIPTION: Go code example showing how to implement a resolver for the friends field of a User type.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *userResolver) Friends(ctx context.Context, obj *User) ([]*User, error) {\n  // select * from user where friendid = obj.ID\n  return friends,  nil\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Wrapping and Checking in Go\nDESCRIPTION: Demonstrates basic usage of errwrap package including wrapping errors with Wrapf, checking error contents with Contains/ContainsType, and extracting specific error types with GetType.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/errwrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A function that always returns an error, but wraps it, like a real\n// function might.\nfunc tryOpen() error {\n\t_, err := os.Open(\"/i/dont/exist\")\n\tif err != nil {\n\t\treturn errwrap.Wrapf(\"Doesn't exist: {{err}}\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\terr := tryOpen()\n\n\t// We can use the Contains helpers to check if an error contains\n\t// another error. It is safe to do this with a nil error, or with\n\t// an error that doesn't even use the errwrap package.\n\tif errwrap.Contains(err, \"does not exist\") {\n\t\t// Do something\n\t}\n\tif errwrap.ContainsType(err, new(os.PathError)) {\n\t\t// Do something\n\t}\n\n\t// Or we can use the associated `Get` functions to just extract\n\t// a specific error. This would return nil if that specific error doesn't\n\t// exist.\n\tperr := errwrap.GetType(err, new(os.PathError))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Hooks in zerolog\nDESCRIPTION: Creates a custom log hook to add severity level to log entries. The Run method does the custom processing.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\ntype SeverityHook struct{}\n\nfunc (h SeverityHook) Run(e *zerolog.Event, level zerolog.Level, msg string) {\n    if level != zerolog.NoLevel {\n        e.Str(\"severity\", level.String())\n    }\n}\n\nhooked := log.Hook(SeverityHook{})\nhooked.Warn().Msg(\"\")\n\n// Output: {\"level\":\"warn\",\"severity\":\"warn\"}\n```\n\n----------------------------------------\n\nTITLE: Contextual Logging with Zerolog\nDESCRIPTION: Example demonstrating how to add contextual key-value pairs to log messages using type-safe methods.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"github.com/rs/zerolog\"\n    \"github.com/rs/zerolog/log\"\n)\n\nfunc main() {\n    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix\n\n    log.Debug().\n        Str(\"Scale\", \"833 cents\").\n        Float64(\"Interval\", 833.09).\n        Msg(\"Fibonacci is everywhere\")\n    \n    log.Debug().\n        Str(\"Name\", \"Tom\").\n        Send()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Color Creation and Conversion in Go\nDESCRIPTION: Examples of creating a blue color using different color space constructors and accessing RGB values\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nc := colorful.Color{0.313725, 0.478431, 0.721569}\nc, err := colorful.Hex(\"#517AB8\")\nif err != nil {\n    log.Fatal(err)\n}\nc = colorful.Hsv(216.0, 0.56, 0.722)\nc = colorful.Xyz(0.189165, 0.190837, 0.480248)\nc = colorful.Xyy(0.219895, 0.221839, 0.190837)\nc = colorful.Lab(0.507850, 0.040585,-0.370945)\nc = colorful.Luv(0.507849,-0.194172,-0.567924)\nc = colorful.Hcl(276.2440, 0.373160, 0.507849)\nfmt.Printf(\"RGB values: %v, %v, %v\", c.R, c.G, c.B)\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP File Server with Afero\nDESCRIPTION: This snippet demonstrates how to create an HTTP file server using Afero's HTTP file system. It requires an existing Afero FileSystem and uses the `http.FileServer` to serve files from a specified path.  The snippet allows an Afero filesystem to serve files over HTTP.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nhttpFs := afero.NewHttpFs(<ExistingFS>)\nfileserver := http.FileServer(httpFs.Dir(<PATH>))\nhttp.Handle(\"/\", fileserver)\n```\n\n----------------------------------------\n\nTITLE: Applying Environment Variables from io.Reader in Go\nDESCRIPTION: This example demonstrates how to use gotenv.Apply() to load environment variables from any io.Reader, such as a string. This method does not override existing environment variables.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngotenv.Apply(strings.NewReader(\"APP_ID=1234567\"))\n\nlog.Println(os.Getenv(\"APP_ID\"))\n// Output: \"1234567\"\n```\n\n----------------------------------------\n\nTITLE: Using Structs Package Methods in Go\nDESCRIPTION: Shows how to use the Structs package methods by creating a new *structs.Struct instance for more control over struct manipulation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fatih/structs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Create a new struct type:\ns := structs.New(server)\n\nm := s.Map()              // Get a map[string]interface{}\nv := s.Values()           // Get a []interface{}\nf := s.Fields()           // Get a []*Field\nn := s.Names()            // Get a []string\nf := s.Field(name)        // Get a *Field based on the given field name\nf, ok := s.FieldOk(name)  // Get a *Field based on the given field name\nn := s.Name()             // Get the struct name\nh := s.HasZero()          // Check if any field is uninitialized\nz := s.IsZero()           // Check if all fields are uninitialized\n```\n\n----------------------------------------\n\nTITLE: Accessing Flag Values in Go using pflag\nDESCRIPTION: Demonstrates how to access the values of parsed flags, both as pointers and values, using pflag.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Sub-dictionary Logging with zerolog in Go\nDESCRIPTION: Demonstrates logging with a nested dictionary structure using zerolog. Offers a hierarchy of key-values using Dict.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nlog.Info().\n    Str(\"foo\", \"bar\").\n    Dict(\"dict\", zerolog.Dict().\n        Str(\"bar\", \"baz\").\n        Int(\"n\", 1),\n    ).Msg(\"hello world\")\n\n// Output: {\"level\":\"info\",\"time\":1494567715,\"foo\":\"bar\",\"dict\":{\"bar\":\"baz\",\"n\":1},\"message\":\"hello world\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Failing Inngest Function with Preceding Step\nDESCRIPTION: Illustrates an Inngest function that fails in the second step after successfully executing the first step.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/utils/historyParser/testData/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: 'Fails with preceding step', cancelOn: [{ event: 'foo' }] },\n  { event: 'foo' },\n  async ({ step }) => {\n    await step.run('First step', () => {});\n\n    await step.run('Second step', () => {\n      throw new Error('oh no');\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Storing with JSON, Raw Bytes and Vector Searches - golang\nDESCRIPTION: Demonstrates the use of rueidis helper functions for handling JSON and raw byte storage, as well as constructing vector similarity search queries in Redis. The example highlights binary-safe parameter usage and simplifies JSON string preparations for Redis operations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_13\n\nLANGUAGE: golang\nCODE:\n```\nclient.B().Set().Key(\"b\").Value(rueidis.BinaryString([]byte{...})).Build()\n```\n\nLANGUAGE: golang\nCODE:\n```\nclient.B().JsonSet().Key(\"j\").Path(\"$.myStrField\").Value(rueidis.JSON(\"str\")).Build()\n// equivalent to\nclient.B().JsonSet().Key(\"j\").Path(\"$.myStrField\").Value(`\"str\"`).Build()\n```\n\nLANGUAGE: golang\nCODE:\n```\ncmd := client.B().FtSearch().Index(\"idx\").Query(\"*=>[KNN 5 @vec $V]\").\n    Params().Nargs(2).NameValue().NameValue(\"V\", rueidis.VectorString64([]float64{...})).\n    Dialect(2).Build()\nn, resp, err := client.Do(ctx, cmd).AsFtSearch()\n```\n\n----------------------------------------\n\nTITLE: Implementing Cognito User Pools Pre-Signup Lambda Handler in Go\nDESCRIPTION: This code snippet defines a Lambda function handler for Cognito User Pools pre-signup events. It logs the username of the signing-up user and automatically confirms the user. The function uses the aws-lambda-go library to interface with AWS Lambda.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Cognito_UserPools_PreSignup.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\n// handler is the lambda handler invoked by the `lambda.Start` function call\nfunc handler(event events.CognitoEventUserPoolsPreSignup) (events.CognitoEventUserPoolsPreSignup, error) {\n\tfmt.Printf(\"PreSignup of user: %s\\n\", event.UserName)\n\tevent.Response.AutoConfirmUser = true\n\treturn event, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSONPath Expressions from Strings in Go\nDESCRIPTION: Shows how to parse a JSONPath expression from a string using the jp.ParseString function. This method is useful when working with pre-defined JSONPath expressions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/design.md#2025-04-22_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\nx, err := jp.ParseString(\"$..abc.*.xyz[3]\")\n// check err first\nfmt.Println(x.String())\n// $..abc.*.xyz[3]\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Messages Using Messages() in Go\nDESCRIPTION: This snippet demonstrates efficient fetching of messages one by one for work queue scenarios, avoiding the overhead of optimizations and pre-buffering to prevent message redelivery during slow processing cycles.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// PullMaxMessages determines how many messages will be sent to the client in a single pull request\niter, _ := cons.Messages(jetstream.PullMaxMessages(1))\nnumWorkers := 5\nsem := make(chan struct{}, numWorkers)\nfor {\n    sem <- struct{}{}\n    go func() {\n        defer func() {\n            <-sem\n        }()\n        msg, err := iter.Next()\n        if err != nil {\n            // handle err\n        }\n        fmt.Printf(\"Processing msg: %s\\n\", string(msg.Data()))\n        doWork()\n        msg.Ack()\n    }()\n}\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations on Object Store using JetStream in Go\nDESCRIPTION: This Go snippet demonstrates how to perform basic CRUD operations on an object store bucket using JetStream. It requires the JetStream client library and a Go-compatible context. Key operations include putting, getting, and deleting objects, along with retrieving them as strings, bytes, or files.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\njs, _ := jetstream.New(nc)\nctx := context.Background()\n\n// Create a new bucket. Bucket name is required and has to be unique within a JetStream account.\nos, _ := js.CreateObjectStore(ctx, jetstream.ObjectStoreConfig{Bucket: \"configs\"})\n\nconfig1 := bytes.NewBufferString(\"first config\")\n// Put an object in a bucket. Put expects an object metadata and a reader\n// to read the object data from.\nos.Put(ctx, jetstream.ObjectMeta{Name: \"config-1\"}, config1)\n\n// Objects can also be created using various helper methods\n\n// 1. As raw strings\nos.PutString(ctx, \"config-2\", \"second config\")\n\n// 2. As raw bytes\nos.PutBytes(ctx, \"config-3\", []byte(\"third config\"))\n\n// 3. As a file\nos.PutFile(ctx, \"config-4.txt\")\n\n// Get an object\n// Get returns a reader and object info\n// Similar to Put, Get can also be used with helper methods\n// to retrieve object data as a string, bytes or to save it to a file\nobject, _ := os.Get(ctx, \"config-1\")\ndata, _ := io.ReadAll(object)\ninfo, _ := object.Info()\n\n// Prints `configs.config-1 -> \"first config\"`\nfmt.Printf(\"%s.%s -> %q\\n\", info.Bucket, info.Name, string(data))\n\n// Delete an object.\n// Delete will remove object data from stream, but object metadata will be kept\n// with a delete marker.\nos.Delete(ctx, \"config-1\")\n\n// getting a deleted object will return an error\n_, err := os.Get(ctx, \"config-1\")\nfmt.Println(err) // prints `nats: object not found`\n\n// A bucket can be deleted once it is no longer needed\njs.DeleteObjectStore(ctx, \"configs\")\n```\n\n----------------------------------------\n\nTITLE: DELETE Query with WHERE Clause\nDESCRIPTION: Shows how to create a DELETE query with a WHERE clause using goqu. This example deletes from the 'test' table where 'c' is NULL.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nsql, _, _ := goqu.Delete(\"test\").Where(goqu.Ex{\n\t\t\"c\": nil\n\t}).ToSQL()\nfmt.Println(sql)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flags with Value Interface in Go\nDESCRIPTION: Demonstrates how to create custom flags that satisfy the Value interface and couple them to flag parsing using pflag.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Using User-Defined Types in Lua with GopherLua\nDESCRIPTION: This Lua code demonstrates how to use the user-defined `Person` type that has been registered from Go using GopherLua. It calls the `person.new` constructor to create a new `Person` object, then calls the `name` method to get and set the person's name. The output shows the initial name, the updated name after setting, and the final name after getting.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_16\n\nLANGUAGE: lua\nCODE:\n```\np = person.new(\"Steeve\")\nprint(p:name()) -- \"Steeve\"\np:name(\"Alice\")\nprint(p:name()) -- \"Alice\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware in Chi Router (Go)\nDESCRIPTION: This snippet demonstrates how to create a custom middleware that sets a user identifier on the request context. It uses the standard net/http middleware pattern and is compatible with Chi router.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// HTTP middleware setting a value on the request context\nfunc MyMiddleware(next http.Handler) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    // create new context from `r` request context, and assign key `\"user\"`\n    // to value of `\"123\"`\n    ctx := context.WithValue(r.Context(), \"user\", \"123\")\n\n    // call the next handler in the chain, passing the response writer and\n    // the updated request object with the new context value.\n    //\n    // note: context.Context values are nested, so any previously set\n    // values will be accessible as well, and the new `\"user\"` key\n    // will be accessible from this point forward.\n    next.ServeHTTP(w, r.WithContext(ctx))\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Information Retrieval in Go\nDESCRIPTION: Shows how to fetch and access stream information, including both real-time and cached stream information.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ninfo, _ := s.Info(ctx)\nfmt.Println(info.Config.Name)\n\ncachedInfo := s.CachedInfo()\nfmt.Println(cachedInfo.Config.Name)\n```\n\n----------------------------------------\n\nTITLE: NATS Wildcard Subscriptions in Go\nDESCRIPTION: Demonstrates the use of wildcard subscriptions in NATS, including the '*' token match and '>' multi-token match.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// \"*\" matches any token, at any level of the subject.\nnc.Subscribe(\"foo.*.baz\", func(m *Msg) {\n    fmt.Printf(\"Msg received on [%s] : %s\\n\", m.Subject, string(m.Data));\n})\n\nnc.Subscribe(\"foo.bar.*\", func(m *Msg) {\n    fmt.Printf(\"Msg received on [%s] : %s\\n\", m.Subject, string(m.Data));\n})\n\n// \">\" matches any length of the tail of a subject, and can only be the last token\n// E.g. 'foo.>' will match 'foo.bar', 'foo.bar.baz', 'foo.foo.bar.bax.22'\nnc.Subscribe(\"foo.>\", func(m *Msg) {\n    fmt.Printf(\"Msg received on [%s] : %s\\n\", m.Subject, string(m.Data));\n})\n\n// Matches all of the above\nnc.Publish(\"foo.bar.baz\", []byte(\"Hello World\"))\n```\n\n----------------------------------------\n\nTITLE: Defining and Declaring a Struct in Go\nDESCRIPTION: Example of defining a Server struct with various field types and tags, and declaring an instance of it.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fatih/structs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Server struct {\n\tName        string `json:\"name,omitempty\"`\n\tID          int\n\tEnabled     bool\n\tusers       []string // not exported\n\thttp.Server          // embedded\n}\n\nserver := &Server{\n\tName:    \"gopher\",\n\tID:      123456,\n\tEnabled: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Declared Type Options in Go\nDESCRIPTION: Demonstrates how to implement options for declared types. This pattern allows setting complex types as configuration options.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting KeyValue Bucket Status with JetStream in Go\nDESCRIPTION: This snippet demonstrates how to get the status of a JetStream KeyValue bucket using the `Status` method. It retrieves information such as the bucket name, the number of values, and the size of all values in bytes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n```go\njs, _ := jetstream.New(nc)\nctx := context.Background()\nkv, _ := js.CreateKeyValue(ctx, jetstream.KeyValueConfig{Bucket: \"profiles\"})\n\nkv.Put(ctx, \"sue.color\", []byte(\"blue\"))\nkv.Put(ctx, \"sue.age\", []byte(\"43\"))\nkv.Put(ctx, \"bucket\", []byte(\"profiles\"))\n\nstatus, _ := kv.Status(ctx)\n\nfmt.Println(status.Bucket()) // prints `profiles`\nfmt.Println(status.Values()) // prints `3`\nfmt.Println(status.Bytes()) // prints the size of all values in bytes\n```\n```\n\n----------------------------------------\n\nTITLE: Streaming Decompression with Zstandard in Go\nDESCRIPTION: Example showing how to decompress a streaming input using a Zstandard decoder. Creates a new reader, handles decompression through io.Copy, and ensures proper cleanup with defer Close().\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Using go-homedir to Get Home Directory and Expand Paths in Go\nDESCRIPTION: This snippet demonstrates the two main functions provided by the go-homedir library: Dir() to get the user's home directory, and Expand() to expand paths containing '~' to the full home directory path. These functions enable cross-compilation by avoiding the use of cgo.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/mitchellh/go-homedir/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nhomedir.Dir()\nhomedir.Expand()\n```\n\n----------------------------------------\n\nTITLE: Auto-Merging Cells in Go Table\nDESCRIPTION: This snippet demonstrates how to auto-merge cells horizontally and vertically in a table using RowConfig and ColumnConfig. It creates a table with node IP, pods, namespace, container, and RCE information.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\n    rowConfigAutoMerge := table.RowConfig{AutoMerge: true}\n\n    t := table.NewWriter()\n    t.AppendHeader(table.Row{\"Node IP\", \"Pods\", \"Namespace\", \"Container\", \"RCE\", \"RCE\"}, rowConfigAutoMerge)\n    t.AppendHeader(table.Row{\"\", \"\", \"\", \"\", \"EXE\", \"RUN\"})\n    t.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1A\", \"NS 1A\", \"C 1\", \"Y\", \"Y\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1A\", \"NS 1A\", \"C 2\", \"Y\", \"N\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1A\", \"NS 1B\", \"C 3\", \"N\", \"N\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1B\", \"NS 2\", \"C 4\", \"N\", \"N\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"1.1.1.1\", \"Pod 1B\", \"NS 2\", \"C 5\", \"Y\", \"N\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"2.2.2.2\", \"Pod 2\", \"NS 3\", \"C 6\", \"Y\", \"Y\"}, rowConfigAutoMerge)\n    t.AppendRow(table.Row{\"2.2.2.2\", \"Pod 2\", \"NS 3\", \"C 7\", \"Y\", \"Y\"}, rowConfigAutoMerge)\n    t.AppendFooter(table.Row{\"\", \"\", \"\", 7, 5, 3})\n    t.SetAutoIndex(true)\n    t.SetColumnConfigs([]table.ColumnConfig{\n        {Number: 1, AutoMerge: true},\n        {Number: 2, AutoMerge: true},\n        {Number: 3, AutoMerge: true},\n        {Number: 4, AutoMerge: true},\n        {Number: 5, Align: text.AlignCenter, AlignFooter: text.AlignCenter, AlignHeader: text.AlignCenter},\n        {Number: 6, Align: text.AlignCenter, AlignFooter: text.AlignCenter, AlignHeader: text.AlignCenter},\n    })\n    t.SetOutputMirror(os.Stdout)\n    t.SetStyle(table.StyleLight)\n    t.Style().Options.SeparateRows = true\n    fmt.Println(t.Render())\n```\n\n----------------------------------------\n\nTITLE: Initializing Afero Filesystem in Go\nDESCRIPTION: Examples of declaring filesystem backends using either memory-mapped or OS-native implementations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar AppFs = afero.NewMemMapFs()\n\nor\n\nvar AppFs = afero.NewOsFs()\n```\n\n----------------------------------------\n\nTITLE: Using errors.Cause for Error Type Assertion\nDESCRIPTION: Demonstrates how to use errors.Cause to retrieve the original error and perform type assertion for specific error handling. This pattern allows for targeted error handling based on the underlying error type.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nswitch err := errors.Cause(err).(type) {\ncase *MyError:\n        // handle specifically\ndefault:\n        // unknown error\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cardinality Limit Environment Variable in OpenTelemetry Go SDK\nDESCRIPTION: Examples demonstrating how to set the OTEL_GO_X_CARDINALITY_LIMIT environment variable to control the maximum number of metric streams per instrument.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_CARDINALITY_LIMIT=2000\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_CARDINALITY_LIMIT=-1\n```\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_CARDINALITY_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Handling Parse Errors with Rueidis in Go\nDESCRIPTION: This snippet demonstrates how to handle parsing errors using the Rueidis client in Go. It illustrates checking whether an error is a parsing error when using the ToArray function to process a Redis response. This approach helps identify mismatched parser functions and suggest corrections like using ToString or ToArray based on expected results.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_14\n\nLANGUAGE: golang\nCODE:\n```\n// Attempt to parse the response. If a parsing error occurs, check if the error is a parse error and handle it.\n// Normally, you should fix the code by choosing the correct parser function.\n// For instance, use ToString() if the expected response is a string, or ToArray() if the expected response is an array as follows:\nif err := client.Do(ctx, client.B().Get().Key(\"k\").Build()).ToArray(); IsParseErr(err) {\n    fmt.Println(\"Parsing error:\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Logger to Application Object (Go)\nDESCRIPTION: This code shows how to pass the logger to an application object and run the application.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\napp := createTheAppObject(logger)\napp.Run()\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Configuration Variables with go-sysconf in Go\nDESCRIPTION: This Go code snippet demonstrates using the go-sysconf package to access system configuration variables, specifically retrieving clock ticks using SC_CLK_TCK. The snippet imports the necessary package and handles any potential errors when calling the Sysconf function. The go-sysconf package is required as a dependency. The main function prints the retrieved value on success. No external binaries or cgo are required for accessing these system configurations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/tklauser/go-sysconf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/tklauser/go-sysconf\"\n)\n\nfunc main() {\n\t// get clock ticks, this will return the same as C.sysconf(C._SC_CLK_TCK)\n\tclktck, err := sysconf.Sysconf(sysconf.SC_CLK_TCK)\n\tif err == nil {\n\t\tfmt.Printf(\"SC_CLK_TCK: %v\\n\", clktck)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Object Store Changes with JetStream in Go\nDESCRIPTION: This Go snippet illustrates how to watch for changes to objects within a JetStream bucket. Watchers notify via channels on any object changes, and can be configured with options such as IncludeHistory, IgnoreDeletes, and UpdatesOnly for specific use cases.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\njs, _ := jetstream.New(nc)\nctx := context.Background()\nos, _ := js.CreateObjectStore(ctx, jetstream.ObjectStoreConfig{Bucket: \"configs\"})\n\nos.PutString(ctx, \"config-1\", \"first config\")\n\n// By default, watcher will return most recent values for all objects in a bucket.\n// Watcher can be configured to only return updates by using jetstream.UpdatesOnly() option.\nwatcher, _ := os.Watch(ctx)\ndefer watcher.Stop()\n\n// create a second object\nos.PutString(ctx, \"config-2\", \"second config\")\n\n// update metadata of the first object\nos.UpdateMeta(ctx, \"config-1\", jetstream.ObjectMeta{Name: \"config-1\", Description: \"updated config\"})\n\n// First, the watcher sends most recent values for all matching objects.\n// In this case, it will send a single entry for `config-1`.\nobject := <-watcher.Updates()\n// Prints `configs.config-1 -> \"\"`\nfmt.Printf(\"%s.%s -> %q\\n\", object.Bucket, object.Name, object.Description)\n\n// After all current values have been sent, watcher will send nil on the channel.\nobject = <-watcher.Updates()\nif object != nil {\n    fmt.Println(\"Unexpected object received\")\n}\n\n// After that, watcher will send updates when changes occur\n// In this case, it will send an entry for `config-2` and `config-1`.\nobject = <-watcher.Updates()\n// Prints `configs.config-2 -> \"\"`\nfmt.Printf(\"%s.%s -> %q\\n\", object.Bucket, object.Name, object.Description)\n\nobject = <-watcher.Updates()\n// Prints `configs.config-1 -> \"updated config\"`\nfmt.Printf(\"%s.%s -> %q\\n\", object.Bucket, object.Name, object.Description)\n```\n\n----------------------------------------\n\nTITLE: Client Side Caching with rueidiscompat.Adapter in Go\nDESCRIPTION: Demonstrates how to implement client-side caching using rueidiscompat.Adapter. Shows initialization of the Redis client and using the Cache() method with a TTL for caching operations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/rueidiscompat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"time\"\n\t\"github.com/redis/rueidis\"\n\t\"github.com/redis/rueidis/rueidiscompat\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tclient, err := rueidis.NewClient(rueidis.ClientOption{InitAddress: []string{\"127.0.0.1:6379\"}})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\tcompat := rueidiscompat.NewAdapter(client)\n\tok, _ := compat.SetNX(ctx, \"key\", \"val\", time.Second).Result()\n\n\t// with client side caching\n\tres, _ := compat.Cache(time.Second).Get(ctx, \"key\").Result()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Atomic Uint32 in Go\nDESCRIPTION: The Go snippet demonstrates basic operations on an atomic.Uint32 type, such as storing, subtracting, and comparing-and-swapping values. It is independent but requires the go.uber.org/atomic package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar atom atomic.Uint32\natom.Store(42)\natom.Sub(2)\natom.CAS(40, 11)\n```\n\n----------------------------------------\n\nTITLE: Auto Pipelining Benchmark Example\nDESCRIPTION: Shows how to implement a benchmark test that demonstrates automatic pipelining of Redis commands when executed concurrently across multiple goroutines.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc BenchmarkPipelining(b *testing.B, client rueidis.Client) {\n\t// the below client.Do() operations will be issued from\n\t// multiple goroutines and thus will be pipelined automatically.\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tfor pb.Next() {\n\t\t\tclient.Do(context.Background(), client.B().Get().Key(\"k\").Build()).ToString()\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Filename Format Pattern\nDESCRIPTION: Demonstrates the required naming pattern for migration files. Each migration requires two files - one for upgrading (up) and one for downgrading (down). The version can be any 64-bit unsigned integer.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/MIGRATIONS.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{version}_{title}.up.{extension}\\n{version}_{title}.down.{extension}\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Fields to Global Logger\nDESCRIPTION: This snippet adds contextual fields to the global logger using zerolog, enhancing structured log output.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nlog.Logger = log.With().Str(\"foo\", \"bar\").Logger()\n```\n\n----------------------------------------\n\nTITLE: Initializing CCache with Tracking Mode in Go\nDESCRIPTION: Shows how to create a cache instance with tracking mode enabled, which allows for manual release of items.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ncache = ccache.New(ccache.Configure().Track())\n```\n\n----------------------------------------\n\nTITLE: Using Encrypted Remote Configuration with Viper in Go\nDESCRIPTION: Demonstrates how to configure Viper to read encrypted configuration from a key/value store using GPG encryption.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nviper.AddSecureRemoteProvider(\"etcd\",\"http://127.0.0.1:4001\",\"/config/hugo.json\",\"/etc/secrets/mykeyring.gpg\")\nviper.SetConfigType(\"json\") // because there is no file extension in a stream of bytes,  supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Wrapping and Row Width Restriction in Go Table\nDESCRIPTION: This snippet shows how to restrict the maximum text width for a row in a table. It sets the allowed row length to 50 characters.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\n    t.SetAllowedRowLength(50)\n    t.Render()\n```\n\n----------------------------------------\n\nTITLE: Rendering Styled Text in Lip Gloss\nDESCRIPTION: These snippets demonstrate different ways to render styled text, including using the Render method and the Stringer interface.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(lipgloss.NewStyle().Bold(true).Render(\"Hello, kitty.\"))\n```\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().SetString(\"你好，猫咪。\").Bold(true)\n\nfmt.Printf(\"%s\\n\", style)\n```\n\n----------------------------------------\n\nTITLE: Implementing DataLoader with Batch Function in Go\nDESCRIPTION: Demonstrates how to set up and use a DataLoader instance with a batch function for efficient data loading. The example shows creating a loader, defining a batch function, and using the loader to fetch data with built-in caching.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/graph-gophers/dataloader/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// setup batch function\nbatchFn := func(ctx context.Context, keys dataloader.Keys) []*dataloader.Result {\n  var results []*dataloader.Result\n  // do some aync work to get data for specified keys\n  // append to this list resolved values\n  return results\n}\n\n// create Loader with an in-memory cache\nloader := dataloader.NewBatchedLoader(batchFn)\n\n/**\n * Use loader\n *\n * A thunk is a function returned from a function that is a\n * closure over a value (in this case an interface value and error).\n * When called, it will block until the value is resolved.\n */\nthunk := loader.Load(ctx.TODO(), dataloader.StringKey(\"key1\")) // StringKey is a convenience method that make wraps string to implement `Key` interface\nresult, err := thunk()\nif err != nil {\n  // handle data error\n}\n\nlog.Printf(\"value: %#v\", result)\n```\n\n----------------------------------------\n\nTITLE: Querying Database Using Dataset in Ex Expression\nDESCRIPTION: Example showing how to use a dataset directly in an Ex map or Eq expression without requiring the In operator. This demonstrates the new functionality added in v0.2.0.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/HISTORY.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ndb.From(\"test\").Where(goqu.Ex{\"a\": db.From(\"test\").Select(\"b\")})\n```\n\n----------------------------------------\n\nTITLE: Rendering Go Table as Markdown\nDESCRIPTION: This snippet shows how to render a table in Markdown format using the RenderMarkdown() method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_10\n\nLANGUAGE: golang\nCODE:\n```\n    t.RenderMarkdown()\n```\n\n----------------------------------------\n\nTITLE: Field Duplication Example in Zerolog\nDESCRIPTION: Demonstrates how zerolog handles field duplication, showing that using the same key multiple times creates duplicate entries in the final JSON output rather than de-duplicating them.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nlogger := zerolog.New(os.Stderr).With().Timestamp().Logger()\nlogger.Info().\n       Timestamp().\n       Msg(\"dup\")\n// Output: {\"level\":\"info\",\"time\":1494567715,\"time\":1494567715,\"message\":\"dup\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Successful Inngest Function with Two Steps\nDESCRIPTION: Illustrates an Inngest function that successfully executes two sequential steps.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/utils/historyParser/testData/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction({ name: 'Succeeds with 2 steps' }, { event: 'foo' }, async ({ step }) => {\n  await step.run('First step', () => {});\n  await step.run('Second step', async () => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Inngest Function\nDESCRIPTION: Demonstrates creating an Inngest function with no steps.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/utils/historyParser/testData/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction({ name: 'No steps' }, { event: 'foo' }, async ({ step }) => {});\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Blackfriday Output with Bluemonday in Go\nDESCRIPTION: Demonstrates how to use Blackfriday in combination with Bluemonday to process Markdown and sanitize the resulting HTML for safe user-generated content handling.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/microcosm-cc/bluemonday\"\n    \"github.com/russross/blackfriday/v2\"\n)\n\n// ...\nunsafe := blackfriday.Run(input)\nhtml := bluemonday.UGCPolicy().SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Running Lua Script from File in Go\nDESCRIPTION: Demonstrates how to execute a Lua script from a file using GopherLua.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState()\ndefer L.Close()\nif err := L.DoFile(\"hello.lua\"); err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying System Memory in Go\nDESCRIPTION: Example demonstrating how to query total and free system memory using the memory package. Uses Printf to display memory values returned by TotalMemory() and FreeMemory() functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pbnjay/memory/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"Total system memory: %d\\n\", memory.TotalMemory())\nfmt.Printf(\"Free memory: %d\\n\", memory.FreeMemory())\n```\n\n----------------------------------------\n\nTITLE: Creating JSONPath Expressions with Chained Functions in Go\nDESCRIPTION: Demonstrates how to create a JSONPath expression using chained function calls in Go. This approach allows for compact and readable code construction of JSONPath expressions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/design.md#2025-04-22_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\nx := jp.R().D().C(\"abc\").W().C(\"xyz\").N(3)\nfmt.Println(x.String())\n// $..abc.*.xyz[3]\n```\n\n----------------------------------------\n\nTITLE: Basic JWW Logger Usage in Go\nDESCRIPTION: Demonstrates basic usage of jWalterWeatherman logger with different severity levels (ERROR, WARN, INFO). Shows how to handle errors and log information with appropriate levels.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/jwalterweatherman/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    jww \"github.com/spf13/jwalterweatherman\"\n)\n\n...\n\nif err != nil {\n    // This is a pretty serious error and the user should know about\n    // it. It will be printed to the terminal as well as logged under the\n    // default thresholds.\n\n    jww.ERROR.Println(err)\n}\n\nif err2 != nil {\n    // This error isn't going to materially change the behavior of the\n    // application, but it's something that may not be what the user\n    // expects. Under the default thresholds, Warn will be logged, but\n    // not printed to the terminal. \n\n    jww.WARN.Println(err2)\n}\n\n// Information that's relevant to what's happening, but not very\n// important for the user. Under the default thresholds this will be\n// discarded.\n\njww.INFO.Printf(\"information %q\", response)\n```\n\n----------------------------------------\n\nTITLE: Creating a newConfig Function in Go\nDESCRIPTION: Implementation of a function that creates a new config instance with default values and applies provided options. This function handles initialization and validation of configuration options.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Floats without Trailing Zeros in Go\nDESCRIPTION: This snippet demonstrates the use of humanize.Ftoa function to format float64 values without trailing zeros.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"%f\", 2.24)                // 2.240000\nfmt.Printf(\"%s\", humanize.Ftoa(2.24)) // 2.24\nfmt.Printf(\"%f\", 2.0)                 // 2.000000\nfmt.Printf(\"%s\", humanize.Ftoa(2.0))  // 2\n```\n\n----------------------------------------\n\nTITLE: Channel Receiver Function in Go with GopherLua\nDESCRIPTION: Demonstrates receiving and handling channel operations using GopherLua's channel API with select-like functionality in Lua\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nfunc receiver(ch, quit chan lua.LValue) {\n    L := lua.NewState()\n    defer L.Close()\n    L.SetGlobal(\"ch\", lua.LChannel(ch))\n    L.SetGlobal(\"quit\", lua.LChannel(quit))\n    if err := L.DoString(`\n    local exit = false\n    while not exit do\n      channel.select(\n        {\"|<-\", ch, function(ok, v)\n          if not ok then\n            print(\"channel closed\")\n            exit = true\n          else\n            print(\"received:\", v)\n          end\n        end},\n        {\"|<-\", quit, function(ok, v)\n            print(\"quit\")\n            exit = true\n        end}\n      )\n    end\n  `); err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cognito Post-Confirmation Handler in Go\nDESCRIPTION: A Go-based AWS Lambda function that handles Cognito User Pools post-confirmation events. The function receives the confirmation event, logs the username to CloudWatch Logs via stdout, and returns the event. Requires aws-lambda-go SDK.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Cognito_UserPools_PostConfirmation.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/aws/aws-lambda-go/lambda\"\n    \"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(event events.CognitoEventUserPoolsPostConfirmation) (events.CognitoEventUserPoolsPostConfirmation, error) {\n    fmt.Printf(\"PostConfirmation for user: %s\\n\", event.UserName)\n    return event, nil\n}\n\nfunc main() {\n  lambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Objects in a JetStream Bucket using Go\nDESCRIPTION: This Go snippet shows how to list all objects in a JetStream bucket. The List method returns details about each object in the storage. Useful for managing and inspecting stored objects.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\njs, _ := jetstream.New(nc)\nctx := context.Background()\nos, _ := js.CreateObjectStore(ctx, jetstream.ObjectStoreConfig{Bucket: \"configs\"})\n\nos.PutString(ctx, \"config-1\", \"cfg1\")\nos.PutString(ctx, \"config-2\", \"cfg1\")\nos.PutString(ctx, \"config-3\", \"cfg1\")\n\n// List will return information about all objects in a bucket\nobjects, _ := os.List(ctx)\n\n// Prints all 3 objects\nfor _, object := range objects {\n    fmt.Println(object.Name)\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Uncompressed Bytes\nDESCRIPTION: Forward the stream by skipping unwanted uncompressed bytes to reach the exact desired offset\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nerr = dec.Skip(wantOffset - uncompressedOffset)\n```\n\n----------------------------------------\n\nTITLE: Rendering Go Table as HTML\nDESCRIPTION: This snippet demonstrates how to render a table as an HTML table with custom CSS class and styling options.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_9\n\nLANGUAGE: golang\nCODE:\n```\n    t.Style().HTML = table.HTMLOptions{\n        CSSClass:    \"game-of-thrones\",\n        EmptyColumn: \"&nbsp;\",\n        EscapeText:  true,\n        Newline:     \"<br/>\",\n    }\n    t.RenderHTML()\n```\n\n----------------------------------------\n\nTITLE: Basic ULID Generation in Go\nDESCRIPTION: Simple example of generating a ULID using the Make helper function.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nprintln(ulid.Make())\n// 01G65Z755AFWAKHE12NY0CQ9FH\n```\n\n----------------------------------------\n\nTITLE: Step Run Operation Response Structure in TypeScript\nDESCRIPTION: Defines the structure for responding with a successfully executed Run step operation. This includes the step ID, operation type, serialized result data, and an optional display name.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tid: string;\n\top: \"StepRun\";\n\tdata: any; // the serialized JSON returned from the Developer's code.\n\tdisplayName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Available Filesystem Methods in Afero\nDESCRIPTION: List of core filesystem methods available in Afero implementations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nChmod(name string, mode os.FileMode) : error\nChown(name string, uid, gid int) : error\nChtimes(name string, atime time.Time, mtime time.Time) : error\nCreate(name string) : File, error\nMkdir(name string, perm os.FileMode) : error\nMkdirAll(path string, perm os.FileMode) : error\nName() : string\nOpen(name string) : File, error\nOpenFile(name string, flag int, perm os.FileMode) : File, error\nRemove(name string) : error\nRemoveAll(path string) : error\nRename(oldname, newname string) : error\nStat(name string) : os.FileInfo, error\n```\n\n----------------------------------------\n\nTITLE: Processing Raw JSON from CloudWatch Scheduled Events in Go\nDESCRIPTION: A Lambda function handler that accepts CloudWatch Scheduled Events as raw JSON data. This approach gives flexibility when the JSON structure varies or when you need to dynamically parse the incoming data.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_CloudWatch_Events.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc handler(ctx context.Context, b json.RawMessage) {\n    // json.RawMessage is basically []byte which can be unmarshalled\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inngest Function with Custom Options in Go\nDESCRIPTION: This snippet shows how to define an Inngest function with custom options, including a specific event trigger and concurrency settings. It uses the Inngest SDK's FunctionOpts and TriggerEvent types.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/inngest/inngestgo/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nsrv.Serve(\"my-function\", inngest.FunctionOpts{\n\tTriggers: []inngest.TriggerEvent{{\n\t\tEvent: \"my.event\",\n\t}},\n\tConcurrency: 10,\n}, func(ctx context.Context, event *inngest.EventPayload) error {\n\t// Function logic here\n\treturn nil\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Error Response for Failed Sync in Inngest SDK\nDESCRIPTION: Specifies the JSON payload structure for responding to a failed sync operation. The SDK should return this payload with a 500 Internal Server Error status.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n{\n\tmessage: \"[message_from_response_error]\";\n\tmodified: false;\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Kinesis Data Analytics Output in Go Lambda Function\nDESCRIPTION: This AWS Lambda function handles Kinesis Data Analytics output delivery events. It processes each record in the input event, logs the data to CloudWatch, and returns a response with delivery status for each record. The function implements the required input and return data models per AWS documentation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_KinesisDataAnalytics.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, kinesisAnalyticsEvent events.KinesisAnalyticsOutputDeliveryEvent) (events.KinesisAnalyticsOutputDeliveryResponse, error) {\n\tvar err error\n\n\tvar responses events.KinesisAnalyticsOutputDeliveryResponse\n\tresponses.Records = make([]events.KinesisAnalyticsOutputDeliveryResponseRecord, len(kinesisAnalyticsEvent.Records))\n\n\tfor i, record := range kinesisAnalyticsEvent.Records {\n\t\tresponses.Records[i] = events.KinesisAnalyticsOutputDeliveryResponseRecord{\n\t\t\tRecordID: record.RecordID,\n\t\t\tResult:   events.KinesisAnalyticsOutputDeliveryOK,\n\t\t}\n\n\t\tdataBytes := record.Data\n\t\tdataText := string(dataBytes)\n\n\t\tfmt.Printf(\"%s Data = %s \\n\", record.RecordID, dataText)\n\t}\n\treturn responses, err\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Child Span in Go\nDESCRIPTION: Demonstrates creating a child span from an existing parent span using StartSpan with ChildOf option.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    func xyz(parentSpan opentracing.Span, ...) {\n        ...\n        sp := opentracing.StartSpan(\n            \"operation_name\",\n            opentracing.ChildOf(parentSpan.Context()))\n        defer sp.Finish()\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming JSON Parsing in Go\nDESCRIPTION: This snippet outlines the approach for implementing streaming JSON parsing, using a buffer and iterating over it with a range loop for better performance. It also mentions the use of a callback function for handling multiple JSON documents in a stream.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/design.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc (p *Parser) ParseStream(reader io.Reader, callback func(interface{}) error) error {\n    // Buffer reading and processing\n    // Use of range loop for better performance\n    // Callback function for handling parsed documents\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ReadSeeker with Forward Seeking\nDESCRIPTION: Create a ReadSeeker with forward-only seeking, automatically reading the index from the stream\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ndec := s2.NewReader(r)\nrs, err := dec.ReadSeeker(false, nil)\nrs.Seek(wantOffset, io.SeekStart)\n```\n\n----------------------------------------\n\nTITLE: Creating and Ending a Trace Span in Go\nDESCRIPTION: Example of starting and ending a span for tracing in OpenCensus Go.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx, span := trace.StartSpan(ctx, \"cache.Get\")\ndefer span.End()\n\n// Do work to get from cache.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Config Struct in Go\nDESCRIPTION: Defines the standard pattern for implementing a config struct to hold configuration options. The config struct should typically be unexported unless users need to extend it.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Context Cancellation Example\nDESCRIPTION: Shows how to implement timeout handling using context cancellation with Redis operations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithTimeout(context.Background(), time.Second)\ndefer cancel()\nclient.Do(ctx, client.B().Set().Key(\"key\").Value(\"val\").Nx().Build()).Error() == context.DeadlineExceeded\n```\n\n----------------------------------------\n\nTITLE: Manipulating Unsafe Pointers in Go using reflect2\nDESCRIPTION: Illustrates how to use reflect2 to set values using unsafe.Pointer without type checking. This approach provides low-level memory manipulation capabilities.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/modern-go/reflect2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvalType := reflect2.TypeOf(1)\ni := 1\nj := 10\nvalType.UnsafeSet(unsafe.Pointer(&i), unsafe.Pointer(&j))\n// i will be 10\n```\n\n----------------------------------------\n\nTITLE: Function Calling Schema Definition in JSON\nDESCRIPTION: Example JSON schema for defining functions that can be called by chat completion API. Shows how to specify function parameters, types and required fields.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\":\"get_current_weather\",\n  \"description\":\"Get the current weather in a given location\",\n  \"parameters\":{\n    \"type\":\"object\",\n    \"properties\":{\n        \"location\":{\n          \"type\":\"string\",\n          \"description\":\"The city and state, e.g. San Francisco, CA\"\n        },\n        \"unit\":{\n          \"type\":\"string\",\n          \"enum\":[\n              \"celsius\",\n              \"fahrenheit\"\n          ]\n        }\n    },\n    \"required\":[\n        \"location\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Output\nDESCRIPTION: Shows how to configure JWW to write logs to a custom io.Writer implementation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/jwalterweatherman/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\njww.SetLogOutput(customWriter)\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Device Statistics in Go\nDESCRIPTION: Demonstrates initialization of both proc and sys filesystems to access block device information using the blockdevice package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfs, err := blockdevice.NewFS(\"/proc\", \"/sys\")\nstats, err := fs.ProcDiskstats()\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Server in Go\nDESCRIPTION: Example of a WebSocket server implementation using the library. It accepts a connection, reads JSON data, and closes the connection.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/coder/websocket/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhttp.HandlerFunc(func (w http.ResponseWriter, r *http.Request) {\n\tc, err := websocket.Accept(w, r, nil)\n\tif err != nil {\n\t\t// ...\n\t}\n\tdefer c.CloseNow()\n\n\tctx, cancel := context.WithTimeout(r.Context(), time.Second*10)\n\tdefer cancel()\n\n\tvar v interface{}\n\terr = wsjson.Read(ctx, c, &v)\n\tif err != nil {\n\t\t// ...\n\t}\n\n\tlog.Printf(\"received: %v\", v)\n\n\tc.Close(websocket.StatusNormalClosure, \"\")\n})\n```\n\n----------------------------------------\n\nTITLE: Verify Auth Challenge Lambda Handler in Go\nDESCRIPTION: Lambda function that verifies authentication challenge responses for Cognito User Pools. Implements the Verify Auth Challenge trigger which validates the user's response to the authentication challenge.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Cognito_UserPools_CustomAuthLambdaTriggers.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(event *events.CognitoEventUserPoolsVerifyAuthChallenge) (*events.CognitoEventUserPoolsVerifyAuthChallenge, error) {\n\tfmt.Printf(\"Verify Auth Challenge: %+v\\n\", event)\n\treturn event, nil\n}\n\nfunc main() {\n\t lambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Paging in Go Table\nDESCRIPTION: This snippet shows how to implement paging in a table by limiting the number of lines rendered in a single page. It handles rows with multiple lines and sets the page size to 1.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\n    t.SetPageSize(1)\n    t.Render()\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Embeddings in Go\nDESCRIPTION: This snippet demonstrates how to use Azure OpenAI services for creating embeddings in Go. It sets up a client with Azure-specific configuration and includes an optional custom model mapping function.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\topenai \"github.com/sashabaranov/go-openai\"\n)\n\nfunc main() {\n\n\tconfig := openai.DefaultAzureConfig(\"your Azure OpenAI Key\", \"https://your Azure OpenAI Endpoint\")\n\tconfig.APIVersion = \"2023-05-15\" // optional update to latest API version\n\n\t//If you use a deployment name different from the model name, you can customize the AzureModelMapperFunc function\n\t//config.AzureModelMapperFunc = func(model string) string {\n\t//    azureModelMapping := map[string]string{\n\t//        \"gpt-3.5-turbo\":\"your gpt-3.5-turbo deployment name\",\n\t//    }\n```\n\n----------------------------------------\n\nTITLE: Creating Cancellable Inngest Function with Sleep\nDESCRIPTION: Demonstrates creating an Inngest function that can be cancelled and includes a sleep step.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/utils/historyParser/testData/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: 'Cancels', cancelOn: [{ event: 'foo' }] },\n  { event: 'foo' },\n  async ({ step }) => {\n    await step.sleep('1m');\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tags for Pre-releases\nDESCRIPTION: Examples of creating git tags for pre-release versions with beta, alpha, or rc suffixes. The suffix determines the tag used on npm for installation.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v1.2.23-beta.1\ngit tag v1.2.23-alpha.3\ngit tag v1.2.23-rc.1\n```\n\n----------------------------------------\n\nTITLE: Configuring NATS Connection Reconnection Parameters\nDESCRIPTION: Shows how to set maximum reconnection attempts, reconnection wait time, and add jitter to reconnection delays to prevent simultaneous reconnection attempts\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nnc, err = nats.Connect(servers, nats.MaxReconnects(5), nats.ReconnectWait(2 * time.Second))\n\nnc, err = nats.Connect(servers, nats.ReconnectJitter(500*time.Millisecond, 2*time.Second))\n```\n\n----------------------------------------\n\nTITLE: Defining ANSI Colors in Lip Gloss\nDESCRIPTION: These snippets show how to define colors using different color profiles in Lip Gloss, including ANSI 16 colors, ANSI 256 colors, and True Color.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.Color(\"5\")  // magenta\nlipgloss.Color(\"9\")  // red\nlipgloss.Color(\"12\") // light blue\n```\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.Color(\"86\")  // aqua\nlipgloss.Color(\"201\") // hot pink\nlipgloss.Color(\"202\") // orange\n```\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.Color(\"#0000FF\") // good ol' 100% blue\nlipgloss.Color(\"#04B575\") // a green\nlipgloss.Color(\"#3C3C3C\") // a dark gray\n```\n\n----------------------------------------\n\nTITLE: Using directives for inline Go model and field configuration\nDESCRIPTION: GraphQL schema with directives to specify Go model mappings and force resolvers for specific fields.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/README.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @goModel(model: String, models: [String!]) on OBJECT\n    | INPUT_OBJECT\n    | SCALAR\n    | ENUM\n    | INTERFACE\n    | UNION\n\ndirective @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION\n    | FIELD_DEFINITION\n\ntype User @goModel(model: \"github.com/you/pkg/model.User\") {\n    id: ID!         @goField(name: \"todoId\")\n    friends: [User!]!   @goField(forceResolver: true)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Index to S2 Stream in Go\nDESCRIPTION: This snippet demonstrates how to add an index to an S2 stream. It creates a new S2 writer with the `s2.WriterAddIndex()` option. The index will be automatically added to the stream when `Close()` is called, making it compatible with regular decoders.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\n\t// Add Index to stream...\n\tenc := s2.NewWriter(w, s2.WriterAddIndex())\n\tio.Copy(enc, r)\n\tenc.Close()\n```\n\n----------------------------------------\n\nTITLE: Installing JSON Iterator via Go Get\nDESCRIPTION: Command to install the json-iterator library using Go modules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/json-iterator/go\n```\n\n----------------------------------------\n\nTITLE: Fetching Consumer Info in Go\nDESCRIPTION: Shows how to retrieve the latest and cached consumer information using the `Consumer` interface. These operations provide up-to-date config data without constantly querying the server, aiding in efficient resource use.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/jetstream/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Fetches latest consumer info from server\ninfo, _ := cons.Info(ctx)\nfmt.Println(info.Config.Durable)\n\n// Returns the most recently fetched ConsumerInfo, without making an API call to the server\ncachedInfo := cons.CachedInfo()\nfmt.Println(cachedInfo.Config.Durable)\n```\n\n----------------------------------------\n\nTITLE: Checking Terminal Color Scheme in Go\nDESCRIPTION: Code snippets demonstrating how to query terminal colors and theme using termenv.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Returns terminal's foreground color\ncolor := termenv.ForegroundColor()\n\n// Returns terminal's background color\ncolor := termenv.BackgroundColor()\n\n// Returns whether terminal uses a dark-ish background\ndarkTheme := termenv.HasDarkBackground()\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging with Glog in Go\nDESCRIPTION: Illustrates conditional logging using glog's V-style logging. The first example checks if verbose logging at level 2 is enabled before logging. The second example directly logs at verbose level 2.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang/glog/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif glog.V(2) {\n\tglog.Info(\"Starting transaction...\")\n}\nglog.V(2).Infoln(\"Processed\", nItems, \"elements\")\n```\n\n----------------------------------------\n\nTITLE: Using go-str2duration for Parsing Duration Strings in Go\nDESCRIPTION: Example Go code demonstrating how to use the go-str2duration package to parse various duration string formats, including those with weeks and days. It also shows comparisons with expected durations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/xhit/go-str2duration/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\tstr2duration \"github.com/xhit/go-str2duration/v2\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\n    for i, tt := range []struct {\n            dur      string\n            expected time.Duration\n        }{\n            //This times are returned with time.Duration string\n            {\"1h\", time.Duration(time.Hour)},\n            {\"1m\", time.Duration(time.Minute)},\n            {\"1s\", time.Duration(time.Second)},\n            {\"1ms\", time.Duration(time.Millisecond)},\n            {\"1µs\", time.Duration(time.Microsecond)},\n            {\"1us\", time.Duration(time.Microsecond)},\n            {\"1ns\", time.Duration(time.Nanosecond)},\n            {\"4.000000001s\", time.Duration(4*time.Second + time.Nanosecond)},\n            {\"1h0m4.000000001s\", time.Duration(time.Hour + 4*time.Second + time.Nanosecond)},\n            {\"1h1m0.01s\", time.Duration(61*time.Minute + 10*time.Millisecond)},\n            {\"1h1m0.123456789s\", time.Duration(61*time.Minute + 123456789*time.Nanosecond)},\n            {\"1.00002ms\", time.Duration(time.Millisecond + 20*time.Nanosecond)},\n            {\"1.00000002s\", time.Duration(time.Second + 20*time.Nanosecond)},\n            {\"693ns\", time.Duration(693 * time.Nanosecond)},\n\n            //This times aren't returned with time.Duration string, but are easily readable and can be parsed too!\n            {\"1ms1ns\", time.Duration(time.Millisecond + 1*time.Nanosecond)},\n            {\"1s20ns\", time.Duration(time.Second + 20*time.Nanosecond)},\n            {\"60h8ms\", time.Duration(60*time.Hour + 8*time.Millisecond)},\n            {\"96h63s\", time.Duration(96*time.Hour + 63*time.Second)},\n\n            //And works with days and weeks!\n            {\"2d3s96ns\", time.Duration(48*time.Hour + 3*time.Second + 96*time.Nanosecond)},\n            {\"1w2d3s96ns\", time.Duration(168*time.Hour + 48*time.Hour + 3*time.Second + 96*time.Nanosecond)},\n\n            {\"10s1us693ns\", time.Duration(10*time.Second + time.Microsecond + 693*time.Nanosecond)},\n\n        } {\n            durationFromString, err := str2duration.ParseDuration(tt.dur)\n            if err != nil {\n                panic(err)\n\n            //Check if expected time is the time returned by the parser\n            } else if tt.expected != durationFromString {\n                 fmt.Println(fmt.Sprintf(\"index %d -> in: %s returned: %s\\tnot equal to %s\", i, tt.dur, durationFromString.String(), tt.expected.String()))\n            }else{\n                fmt.Println(fmt.Sprintf(\"index %d -> in: %s parsed succesfully\", i, tt.dur))\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Tracer in Go\nDESCRIPTION: Shows how to initialize the OpenTracing global tracer instance using the SetGlobalTracer function. This should be done as early as possible in the application startup.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    import \"github.com/opentracing/opentracing-go\"\n    import \".../some_tracing_impl\"\n\n    func main() {\n        opentracing.SetGlobalTracer(\n            // tracing impl specific:\n            some_tracing_impl.New(...),\n        )\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Custom Claims Implementation in Go\nDESCRIPTION: Example of implementing custom claims with additional validation logic using the new ClaimsValidator interface.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// MyCustomClaims includes all registered claims, plus Foo.\ntype MyCustomClaims struct {\n\tFoo string `json:\"foo\"`\n\tjwt.RegisteredClaims\n}\n\n// Validate can be used to execute additional application-specific claims\n// validation.\nfunc (m MyCustomClaims) Validate() error {\n\tif m.Foo != \"bar\" {\n\t\treturn errors.New(\"must be foobar\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Field Logging in Go\nDESCRIPTION: Shows how to conditionally log fields using log.Noop based on environment conditions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/opentracing/opentracing-go/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n    func Customer(order *Order) log.Field {\n        if os.Getenv(\"ENVIRONMENT\") == \"dev\" {\n            return log.String(\"customer\", order.Customer.ID)\n        }\n        return log.Noop()\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Flag Structure in Go\nDESCRIPTION: Definition of a boolean flag structure with various properties for flag management including name, category, usage, environment variables, and action handlers.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype BoolFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       bool\n\tDestination *bool\n\n\tAliases []string\n\tEnvVars []string\n\n\tCount *int\n\n\tDisableDefaultText bool\n\n\tAction func(*Context, bool) error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CopyOnWriteFs with Afero\nDESCRIPTION: This snippet demonstrates creating a `CopyOnWriteFs` using Afero. It combines a read-only base file system (ReadOnlyFs) with a writeable overlay (MemMapFs). Any modification attempts on files found only in the base layer will result in the file being copied to the overlay layer first. All write operations occur only in memory, leaving the original file system untouched.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n\tbase := afero.NewOsFs()\n\troBase := afero.NewReadOnlyFs(base)\n\tufs := afero.NewCopyOnWriteFs(roBase, afero.NewMemMapFs())\n\n\tfh, _ = ufs.Create(\"/home/test/file2.txt\")\n\tfh.WriteString(\"This is a test\")\n\tfh.Close()\n```\n\n----------------------------------------\n\nTITLE: Tailwind Color Token Usage Examples\nDESCRIPTION: Examples demonstrating correct and incorrect usage of color tokens in Tailwind CSS classes\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\n<div className=\"bg-canvasBase\">\n\n// Bad\n<div className=\"bg-white\">\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Input Source from Flag in Go\nDESCRIPTION: Function that returns a generator for YAML-based InputSourceContext. It creates a new input source from a file name defined by the specified flag.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_63\n\nLANGUAGE: go\nCODE:\n```\nfunc NewYamlSourceFromFlagFunc(flagFileName string) func(cCtx *cli.Context) (InputSourceContext, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Function with Sleep Step\nDESCRIPTION: Demonstrates an Inngest function that includes a sleep step for a specified duration.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/utils/historyParser/testData/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction({ name: 'Sleeps' }, { event: 'foo' }, async ({ step }) => {\n  await step.sleep('10s');\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Stream Elements with a Goroutine Pool in Go\nDESCRIPTION: This example shows how to process each element of a stream using a static pool of goroutines. The standard library version uses sync.WaitGroup, while the conc version utilizes the pool package for simpler goroutine management.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc process(stream chan int) {\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            for elem := range stream {\n                handle(elem)\n            }\n        }()\n    }\n    wg.Wait()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(stream chan int) {\n    p := pool.New().WithMaxGoroutines(10)\n    for elem := range stream {\n        elem := elem\n        p.Go(func() {\n            handle(elem)\n        })\n    }\n    p.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Button Size Variants Display in JSX\nDESCRIPTION: JSX markup that displays different button size variants (Small, Regular, Large) in a flex container with appropriate styling for the Storybook documentation.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/Button/NewVariations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  style={{ padding: '3rem' }}\n  className=\"bg-canvasBase flex items-center justify-center gap-1\"\n>\n  <Story of={ButtonStories.SmallSize} />\n  <Story of={ButtonStories.RegularSize} />\n  <Story of={ButtonStories.LargeSize} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering User-Defined Types in GopherLua\nDESCRIPTION: This code snippet demonstrates how to register user-defined types in GopherLua, allowing Go structs to be used from Lua. It defines a `Person` struct in Go and provides functions to create, check, and access its members from Lua. It registers the `Person` type with a metatable, a constructor, and methods for accessing the `Name` field.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype Person struct {\n    Name string\n}\n\nconst luaPersonTypeName = \"person\"\n\n// Registers my person type to given L.\nfunc registerPersonType(L *lua.LState) {\n    mt := L.NewTypeMetatable(luaPersonTypeName)\n    L.SetGlobal(\"person\", mt)\n    // static attributes\n    L.SetField(mt, \"new\", L.NewFunction(newPerson))\n    // methods\n    L.SetField(mt, \"__index\", L.SetFuncs(L.NewTable(), personMethods))\n}\n\n// Constructor\nfunc newPerson(L *lua.LState) int {\n    person := &Person{L.CheckString(1)}\n    ud := L.NewUserData()\n    ud.Value = person\n    L.SetMetatable(ud, L.GetTypeMetatable(luaPersonTypeName))\n    L.Push(ud)\n    return 1\n}\n\n// Checks whether the first lua argument is a *LUserData with *Person and returns this *Person.\nfunc checkPerson(L *lua.LState) *Person {\n    ud := L.CheckUserData(1)\n    if v, ok := ud.Value.(*Person); ok {\n        return v\n    }\n    L.ArgError(1, \"person expected\")\n    return nil\n}\n\nvar personMethods = map[string]lua.LGFunction{\n    \"name\": personGetSetName,\n}\n\n// Getter and setter for the Person#Name\nfunc personGetSetName(L *lua.LState) int {\n    p := checkPerson(L)\n    if L.GetTop() == 2 {\n        p.Name = L.CheckString(2)\n        return 0\n    }\n    L.Push(lua.LString(p.Name))\n    return 1\n}\n\nfunc main() {\n    L := lua.NewState()\n    defer L.Close()\n    registerPersonType(L)\n    if err := L.DoString(`\n            p = person.new(\"Steeve\")\n            print(p:name()) -- \"Steeve\"\n            p:name(\"Alice\")\n            print(p:name()) -- \"Alice\"\n        `); err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Strings Using Cast in Go\nDESCRIPTION: Demonstrates the usage of cast.ToString() function to convert various data types to strings. It handles different input types including strings, integers, floats, byte slices, and interfaces.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/cast/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncast.ToString(\"mayonegg\")         // \"mayonegg\"\ncast.ToString(8)                  // \"8\"\ncast.ToString(8.31)               // \"8.31\"\ncast.ToString([]byte(\"one time\")) // \"one time\"\ncast.ToString(nil)                // \"\"\n\nvar foo interface{} = \"one more time\"\ncast.ToString(foo)                // \"one more time\"\n```\n\n----------------------------------------\n\nTITLE: Using Viper Sub-trees in Go\nDESCRIPTION: Example of extracting and using Viper sub-trees for modular configuration.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\ncache1Config := viper.Sub(\"cache.cache1\")\nif cache1Config == nil { // Sub returns nil if the key cannot be found\n\tpanic(\"cache configuration not found\")\n}\n\ncache1 := NewCache(cache1Config)\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Colors from Databases (Go)\nDESCRIPTION: This snippet demonstrates how to use the HexColor type for storing and retrieving colors as strings in a database. It implements the database/sql.Scanner and database/sql/driver.Value interfaces for automatic type conversion.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nvar hc HexColor\n_, err := db.QueryRow(\"SELECT '#ff0000';\").Scan(&hc)\n// hc == HexColor{R: 1, G: 0, B: 0}; err == nil\n```\n\n----------------------------------------\n\nTITLE: Searching JSON Data with JMESPath in Go\nDESCRIPTION: This snippet demonstrates how to use the jmespath.Search function to query JSON data. It shows how to import the library, unmarshal JSON data, and perform a simple search operation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/jmespath/go-jmespath\"\n\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`) // your data\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.Search(\"foo.bar.baz[2]\", data)\nresult = 2\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Float64 Flag with Input Source Support in Go\nDESCRIPTION: Float64Flag type that wraps cli.Float64Flag to support alternative input sources. It includes methods for creation, application to flag sets, and applying float64 values from input sources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_67\n\nLANGUAGE: go\nCODE:\n```\ntype Float64Flag struct {\n\t*cli.Float64Flag\n\t// Has unexported fields.\n}\n\nfunc NewFloat64Flag(fl *cli.Float64Flag) *Float64Flag\n\nfunc (f *Float64Flag) Apply(set *flag.FlagSet) error\n\nfunc (f *Float64Flag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Color Space Conversions in Go\nDESCRIPTION: Examples of converting a color object to different color space representations\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nhex := c.Hex()\nh, s, v := c.Hsv()\nx, y, z := c.Xyz()\nx, y, Y := c.Xyy()\nl, a, b := c.Lab()\nl, u, v := c.Luv()\nh, c, l := c.Hcl()\n```\n\n----------------------------------------\n\nTITLE: Setting No Option Default Values for Flags in Go using pflag\nDESCRIPTION: Shows how to set a NoOptDefVal for a flag, which changes its behavior when the flag is set without an option on the command line.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Logging in gRPC-Go\nDESCRIPTION: Demonstrates how to enable logging in gRPC-Go by setting environment variables. No additional dependencies are required other than a Unix-like shell to export the variables. The verbosity level is set to 99, which is quite verbose.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport GRPC_GO_LOG_VERBOSITY_LEVEL=99\nexport GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Using Adaptive Colors in Lip Gloss\nDESCRIPTION: This snippet demonstrates how to specify adaptive colors that change based on the terminal's background color.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlipgloss.AdaptiveColor{Light: \"236\", Dark: \"248\"}\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration Example\nDESCRIPTION: Example JSON structure demonstrating a use case where dynamic decoding is needed based on a type field.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IntSlice in Go\nDESCRIPTION: IntSlice wraps []int to satisfy flag.Value. It includes methods for getting, setting, and serializing the slice.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\ntype IntSlice struct {\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: LState Pool Usage Example\nDESCRIPTION: Demonstrates how to use the LState pool in worker functions and manage goroutine-specific Lua states\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nfunc MyWorker() {\n   L := luaPool.Get()\n   defer luaPool.Put(L)\n   /* your code here */\n}\n\nfunc main() {\n    defer luaPool.Shutdown()\n    go MyWorker()\n    go MyWorker()\n    /* etc... */\n}\n```\n\n----------------------------------------\n\nTITLE: Step Error Operation Response Structure in TypeScript\nDESCRIPTION: Defines the structure for responding with a Run step that resulted in an error. Includes the step ID, error operation type, error details (name, message, optional stack trace), and optional display name.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tid: string;\n\top: \"StepError\";\n\terror: {\n\t\tname: string;\n\t\tmessage: string;\n\t\tstack?: string;\n\t};\n\tdisplayName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Options with Default True in Go\nDESCRIPTION: Shows how to implement boolean options that default to true. The WithoutOption function provides a user-friendly way to disable the option.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Client VPN Connection Handler in Go\nDESCRIPTION: This Lambda function validates AWS Client VPN connection requests by checking if the source IP address is on an allowlist. It logs detailed information about each connection attempt and returns appropriate responses with error messages for unauthorized connections.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_ClientVPN.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"encoding/json\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nvar (\n\tAllowedIPs = map[string]bool{\n\t\t\"10.11.12.13\": true,\n\t}\n)\n\nfunc handler(request events.ClientVPNConnectionHandlerRequest) (events.ClientVPNConnectionHandlerResponse, error) {\n\trequestJson, _ := json.MarshalIndent(request, \"\", \"  \")\n\tlog.Printf(\"REQUEST: %s\", requestJson)\n\n\tsourceIP := request.PublicIP\n\tif net.ParseIP(sourceIP) == nil {\n\t\treturn events.ClientVPNConnectionHandlerResponse{}, fmt.Errorf(\"Invalid parameter PublicIP passed in request: %q\", sourceIP)\n\t}\n\n\tlog.Printf(\"SOURCE IP: %q\", sourceIP)\n\n\tif allowed, ok := AllowedIPs[sourceIP]; ok && allowed {\n\t\tlog.Printf(\"Allowing access from: %q\", sourceIP)\n\t\treturn events.ClientVPNConnectionHandlerResponse{\n\t\t\tAllow: true,\n\t\t\tErrorMsgOnFailedPostureCompliance: \"\",\n\t\t\tPostureComplianceStatuses: []string{},\n\t\t\tSchemaVersion: \"v1\",\n\t\t}, nil\n\t}\n\n\tlog.Printf(\"Blocking access from: %q\", sourceIP)\n\treturn events.ClientVPNConnectionHandlerResponse{\n\t\tAllow: false,\n\t\tErrorMsgOnFailedPostureCompliance: \"You're trying to connect from an IP address that is not allowed.\",\n\t\tPostureComplianceStatuses: []string{\"BlockedSourceIP\"},\n\t\tSchemaVersion: \"v1\",\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Connect Server in Go\nDESCRIPTION: Demonstrates how to create a Connect server in Go, including handling requests, setting headers, and configuring HTTP/2 support.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/connectrpc.com/connect/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"context\"\n  \"log\"\n  \"net/http\"\n\n  \"connectrpc.com/connect\"\n  pingv1 \"connectrpc.com/connect/internal/gen/connect/ping/v1\"\n  \"connectrpc.com/connect/internal/gen/connect/ping/v1/pingv1connect\"\n  \"golang.org/x/net/http2\"\n  \"golang.org/x/net/http2/h2c\"\n)\n\ntype PingServer struct {\n  pingv1connect.UnimplementedPingServiceHandler // returns errors from all methods\n}\n\nfunc (ps *PingServer) Ping(\n  ctx context.Context,\n  req *connect.Request[pingv1.PingRequest],\n) (*connect.Response[pingv1.PingResponse], error) {\n  // connect.Request and connect.Response give you direct access to headers and\n  // trailers. No context-based nonsense!\n  log.Println(req.Header().Get(\"Some-Header\"))\n  res := connect.NewResponse(&pingv1.PingResponse{\n    // req.Msg is a strongly-typed *pingv1.PingRequest, so we can access its\n    // fields without type assertions.\n    Number: req.Msg.Number,\n  })\n  res.Header().Set(\"Some-Other-Header\", \"hello!\")\n  return res, nil\n}\n\nfunc main() {\n  mux := http.NewServeMux()\n  // The generated constructors return a path and a plain net/http\n  // handler.\n  mux.Handle(pingv1connect.NewPingServiceHandler(&PingServer{}))\n  err := http.ListenAndServe(\n    \"localhost:8080\",\n    // For gRPC clients, it's convenient to support HTTP/2 without TLS. You can\n    // avoid x/net/http2 by using http.ListenAndServeTLS.\n    h2c.NewHandler(mux, &http2.Server{}),\n  )\n  log.Fatalf(\"listen failed: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Remapping ID type in gqlgen.yml\nDESCRIPTION: YAML configuration to change the underlying Go type for GraphQL ID fields.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/README.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  ID:\n    model:\n      - github.com/99designs/gqlgen/graphql.IntID\n      - github.com/99designs/gqlgen/graphql.ID\n```\n\n----------------------------------------\n\nTITLE: Creating a CacheOnReadFs with Afero\nDESCRIPTION: This snippet demonstrates the creation of a `CacheOnReadFs` using Afero.  It initializes a base file system (OsFs) and an overlay file system (MemMapFs), then combines them into a `CacheOnReadFs` that caches accessed files from the base in the overlay for a specified duration. This allows for faster subsequent access to frequently used files.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nbase := afero.NewOsFs()\nlayer := afero.NewMemMapFs()\nufs := afero.NewCacheOnReadFs(base, layer, 100 * time.Second)\n```\n\n----------------------------------------\n\nTITLE: Formatting Word Series in Go\nDESCRIPTION: These examples show how to use english.WordSeries and english.OxfordWordSeries functions to format comma-separated word lists with conjunctions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nenglish.WordSeries([]string{\"foo\"}, \"and\") // foo\nenglish.WordSeries([]string{\"foo\", \"bar\"}, \"and\") // foo and bar\nenglish.WordSeries([]string{\"foo\", \"bar\", \"baz\"}, \"and\") // foo, bar and baz\n\nenglish.OxfordWordSeries([]string{\"foo\", \"bar\", \"baz\"}, \"and\") // foo, bar, and baz\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL schema with a recursive User type\nDESCRIPTION: Example of a GraphQL schema definition for a User type with a recursive friends field.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/README.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID!\n  name: String!\n  friends: [User!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Clockwork Interface Implementation Example in Go\nDESCRIPTION: Improved version using dependency injection with the clockwork.Clock interface, making the code more testable.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jonboulle/clockwork/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc myFunc(clock clockwork.Clock) {\n\tclock.Sleep(3 * time.Second)\n\tdoSomething()\n}\n```\n\n----------------------------------------\n\nTITLE: Cache-Aside Pattern Implementation\nDESCRIPTION: Demonstrates implementing the cache-aside pattern using rueidisaside to cache database query results with Redis and client-side caching.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient, err := rueidisaside.NewClient(rueidisaside.ClientOption{\n    ClientOption: rueidis.ClientOption{InitAddress: []string{\"127.0.0.1:6379\"}},\n})\nif err != nil {\n    panic(err)\n}\nval, err := client.Get(context.Background(), time.Minute, \"mykey\", func(ctx context.Context, key string) (val string, err error) {\n    if err = db.QueryRowContext(ctx, \"SELECT val FROM mytab WHERE id = ?\", key).Scan(&val); err == sql.ErrNoRows {\n        val = \"_nil_\" // cache nil to avoid penetration.\n        err = nil     // clear err in case of sql.ErrNoRows.\n    }\n    return\n})\n```\n\n----------------------------------------\n\nTITLE: Deprecating Flags in Go using pflag\nDESCRIPTION: Shows how to deprecate a flag or its shorthand, which hides it from help text and prints a usage message when used.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Context in Go\nDESCRIPTION: Example of adding tags to a context using the tag package in OpenCensus Go.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx, err := tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Upsert(userIDKey, \"cde36753ed\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Go Table by Multiple Columns\nDESCRIPTION: This snippet demonstrates how to sort a table by multiple columns. It sorts the rows first by 'First Name' and then by 'Last Name' in ascending order.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\n    t.SortBy([]table.SortBy{\n\t    {Name: \"First Name\", Mode: table.Asc},\n\t    {Name: \"Last Name\", Mode: table.Asc},\n    })\n```\n\n----------------------------------------\n\nTITLE: Using EWMA Library in Go\nDESCRIPTION: Example demonstrating how to use both SimpleEWMA and VariableEWMA implementations to calculate moving averages from a sample dataset. Shows initialization, adding values, and retrieving the calculated average.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/VividCortex/ewma/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/VividCortex/ewma\"\n\nfunc main() {\n\tsamples := [100]float64{\n\t\t4599, 5711, 4746, 4621, 5037, 4218, 4925, 4281, 5207, 5203, 5594, 5149,\n\t}\n\n\te := ewma.NewMovingAverage()  //=> Returns a SimpleEWMA if called without params\n\ta := ewma.NewMovingAverage(5) //=> returns a VariableEWMA with a decay of 2 / (5 + 1)\n\n\tfor _, f := range samples {\n\t\te.Add(f)\n\t\ta.Add(f)\n\t}\n\n\te.Value() //=> 13.577404704631077\n\ta.Value() //=> 1.5806140565521463e-12\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multierror Only If Errors Exist\nDESCRIPTION: This example shows how to use the ErrorOrNil function to return an error implementation only if there are actual errors in the multierror. It returns nil if no errors were added.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/go-multierror/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar result *multierror.Error\n\n// ... accumulate errors here\n\n// Return the `error` only if errors were added to the multierror, otherwise\n// return nil since there are no errors.\nreturn result.ErrorOrNil()\n```\n\n----------------------------------------\n\nTITLE: Defining Command Suggestion Function Type in Go\nDESCRIPTION: Type definition for a function that suggests alternative commands based on user input, useful for providing helpful error messages when users mistype commands.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_44\n\nLANGUAGE: go\nCODE:\n```\ntype SuggestCommandFunc func(commands []*Command, provided string) string\n```\n\n----------------------------------------\n\nTITLE: Implementing SliceFlag in Go\nDESCRIPTION: SliceFlag extends implementations like StringSliceFlag and IntSliceFlag with support for using slices directly, as Value and/or Destination.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_35\n\nLANGUAGE: go\nCODE:\n```\ntype SliceFlag[T SliceFlagTarget[E], S ~[]E, E any] struct {\n\tTarget      T\n\tValue       S\n\tDestination *S\n}\n```\n\n----------------------------------------\n\nTITLE: Using Structs Package Global Functions in Go\nDESCRIPTION: Demonstrates the usage of various global functions provided by the Structs package to manipulate and analyze struct data.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fatih/structs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Convert a struct to a map[string]interface{}\n// => {\"Name\":\"gopher\", \"ID\":123456, \"Enabled\":true}\nm := structs.Map(server)\n\n// Convert the values of a struct to a []interface{}\n// => [\"gopher\", 123456, true]\nv := structs.Values(server)\n\n// Convert the names of a struct to a []string\n// (see \"Names methods\" for more info about fields)\nn := structs.Names(server)\n\n// Convert the values of a struct to a []*Field\n// (see \"Field methods\" for more info about fields)\nf := structs.Fields(server)\n\n// Return the struct name => \"Server\"\nn := structs.Name(server)\n\n// Check if any field of a struct is initialized or not.\nh := structs.HasZero(server)\n\n// Check if all fields of a struct is initialized or not.\nz := structs.IsZero(server)\n\n// Check if server is a struct or a pointer to struct\ni := structs.IsStruct(server)\n```\n\n----------------------------------------\n\nTITLE: Creating Subcommand Help Template\nDESCRIPTION: This snippet specifies a text template for rendering help for subcommands within the CLI application. It utilizes the text/template package to allow customization of the help output shown to users.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar SubcommandHelpTemplate = `NAME:\n   {{template \"helpNameTemplate\" .}}\n\nUSAGE:\n   {{if .UsageText}}{{wrap .UsageText 3}}{{else}}{{.HelpName}} {{if .VisibleFlags}}command [command options]{{end}} {{if .ArgsUsage}}{{.ArgsUsage}}{{else}}[arguments...]{{end}}{{end}}{{if .Description}}\n\nDESCRIPTION:\n   {{template \"descriptionTemplate\" .}}{{end}}{{if .VisibleCommands}}\n\nCOMMANDS:{{template \"visibleCommandTemplate\" .}}{{end}}{{if .VisibleFlagCategories}}\n\nOPTIONS:{{template \"visibleFlagCategoryTemplate\" .}}{{else if .VisibleFlags}}\n\nOPTIONS:{{template \"visibleFlagTemplate\" .}}{{end}}\n`\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from .env File in Go\nDESCRIPTION: This example demonstrates how to load environment variables from a .env file using gotenv.Load() in the init() function, and then access these variables using os.Getenv(). It assumes a .env file with APP_ID and APP_SECRET variables.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/subosito/gotenv\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc init() {\n\tgotenv.Load()\n}\n\nfunc main() {\n\tlog.Println(os.Getenv(\"APP_ID\"))     // \"1234567\"\n\tlog.Println(os.Getenv(\"APP_SECRET\")) // \"abcdef\"\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Config Files with Viper\nDESCRIPTION: Examples of how to write the current Viper configuration to files. It demonstrates various methods including safe writes that don't overwrite existing files.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nviper.WriteConfig() // writes current config to predefined path set by 'viper.AddConfigPath()' and 'viper.SetConfigName'\nviper.SafeWriteConfig()\nviper.WriteConfigAs(\"/path/to/my/.config\")\nviper.SafeWriteConfigAs(\"/path/to/my/.config\") // will error since it has already been written\nviper.SafeWriteConfigAs(\"/path/to/my/.other_config\")\n```\n\n----------------------------------------\n\nTITLE: Package Installation with Go Get\nDESCRIPTION: Command to install the uint128 package using Go module system, enabling developers to integrate the high-performance 128-bit unsigned integer type into their projects\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/lukechampine.com/uint128/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get lukechampine.com/uint128\n```\n\n----------------------------------------\n\nTITLE: Applying Text Styles in Go with termenv\nDESCRIPTION: Demonstration of applying various text styles using termenv's chainable syntax.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ns := termenv.String(\"foobar\")\n\n// Text styles\ns.Bold()\ns.Faint()\ns.Italic()\ns.CrossOut()\ns.Underline()\ns.Overline()\n\n// Reverse swaps current fore- & background colors\ns.Reverse()\n\n// Blinking text\ns.Blink()\n\n// Combine multiple options\ns.Bold().Underline()\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with SI Notation in Go\nDESCRIPTION: This example shows how to use the humanize.SI function to format numbers using SI notation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nhumanize.SI(0.00000000223, \"M\") // 2.23 nM\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration with migrate CLI\nDESCRIPTION: This command creates a new migration file for creating a users table using the migrate CLI tool. It specifies the file extension, directory, and sequence for the migration.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/GETTING_STARTED.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmigrate create -ext sql -dir db/migrations -seq create_users_table\n```\n\n----------------------------------------\n\nTITLE: Converting Zstandard Dictionary to S2 Dictionary in Go\nDESCRIPTION: This snippet shows how to convert a Zstandard dictionary to an S2 dictionary. It first inspects the Zstandard dictionary content. It then creates an S2 dictionary using `s2.MakeDict` from the Zstandard content and an optional common starting sequence. The dictionary can be saved and reloaded for later use, and then used for encoding and decoding.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\n    // Decode the Zstandard dictionary.\n    insp, err := zstd.InspectDictionary(zdict)\n    if err != nil {\n        panic(err)\n    }\n\t\n    // We are only interested in the contents.\n    // Assume that files start with \"// Copyright (c) 2023\".\n    // Search for the longest match for that.\n    // This may save a few bytes.\n    dict := s2.MakeDict(insp.Content(), []byte(\"// Copyright (c) 2023\"))\n\n    // b := dict.Bytes() will provide a dictionary that can be saved\n    // and reloaded with s2.NewDict(b).\n\n    // We can now encode using this dictionary\n    encodedWithDict := dict.Encode(nil, payload)\n\n    // To decode content:\n    decoded, err := dict.Decode(nil, encodedWithDict)\n```\n\n----------------------------------------\n\nTITLE: Multiple Log Outputs with zerolog\nDESCRIPTION: Utilizes zerolog.MultiLevelWriter to direct logs to multiple outputs, such as ConsoleWriter and os.Stdout, for diversified log strategies.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n\tconsoleWriter := zerolog.ConsoleWriter{Out: os.Stdout}\n\n\tmulti := zerolog.MultiLevelWriter(consoleWriter, os.Stdout)\n\n\tlogger := zerolog.New(multi).With().Timestamp().Logger()\n\n\tlogger.Info().Msg(\"Hello World!\")\n}\n\n// Output (Line 1: Console; Line 2: Stdout)\n// 12:36PM INF Hello World!\n// {\"level\":\"info\",\"time\":\"2019-11-07T12:36:38+03:00\",\"message\":\"Hello World!\"}\n```\n\n----------------------------------------\n\nTITLE: Running Migrations with migrate CLI\nDESCRIPTION: This command runs the migrations using the migrate CLI tool. It requires specifying the database URL and the path to the migrations directory. The 'up' argument indicates that the migrations should be applied to update the database schema.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/GETTING_STARTED.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmigrate -database YOUR_DATABASE_URL -path PATH_TO_YOUR_MIGRATIONS up\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Request to Connect API using cURL\nDESCRIPTION: Demonstrates how to make a request to a Connect API endpoint using cURL with JSON payload.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/connectrpc.com/connect/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"sentence\": \"I feel happy.\"}' \\\n    https://demo.connectrpc.com/connectrpc.eliza.v1.ElizaService/Say\n```\n\n----------------------------------------\n\nTITLE: Creating Decoder without Stream Identifier\nDESCRIPTION: Initialize an S2 reader that ignores the stream identifier, useful for manual stream forwarding\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ndec := s2.NewReader(r, s2.ReaderIgnoreStreamIdentifier())\n```\n\n----------------------------------------\n\nTITLE: Adding Commas to Numbers in Go\nDESCRIPTION: This example shows how to use the humanize.Comma function to format a number with comma separators for improved readability.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"You owe $%s.\\n\", humanize.Comma(6582491)) // You owe $6,582,491.\n```\n\n----------------------------------------\n\nTITLE: Simple Style Modification in Go\nDESCRIPTION: Demonstrates how to modify an existing table style with custom colors and formatting options.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    t.SetStyle(table.StyleLight)\n    t.Style().Color.Header = text.Colors{text.BgHiCyan, text.FgBlack}\n    t.Style().Color.IndexColumn = text.Colors{text.BgHiCyan, text.FgBlack}\n    t.Style().Format.Footer = text.FormatLower\n    t.Style().Options.DrawBorder = false\n```\n\n----------------------------------------\n\nTITLE: Creating Repeated Blocks in HCL\nDESCRIPTION: Shows how to create lists of objects using repeated blocks in HCL. This structure is an alternative to using arrays for lists of objects.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/hcl/README.md#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nservice {\n    key = \"value\"\n}\n\nservice {\n    key = \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Values from a Key/Value Store using crypt Command Line\nDESCRIPTION: Shows how to use the crypt command line tool to fetch values from a key/value store.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ crypt get -plaintext /config/hugo.json\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Float64Slice Flag with Input Source Support in Go\nDESCRIPTION: Float64SliceFlag type that wraps cli.Float64SliceFlag to support alternative input sources. It includes methods for creation, application to flag sets, and applying float64 slice values from input sources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_68\n\nLANGUAGE: go\nCODE:\n```\ntype Float64SliceFlag struct {\n\t*cli.Float64SliceFlag\n\t// Has unexported fields.\n}\n\nfunc NewFloat64SliceFlag(fl *cli.Float64SliceFlag) *Float64SliceFlag\n\nfunc (f *Float64SliceFlag) Apply(set *flag.FlagSet) error\n\nfunc (f *Float64SliceFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Adding Borders in Lip Gloss\nDESCRIPTION: These snippets show various ways to add borders to styled text blocks, including predefined border styles and custom borders.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Add a purple, rectangular border\nvar style = lipgloss.NewStyle().\n    BorderStyle(lipgloss.NormalBorder()).\n    BorderForeground(lipgloss.Color(\"63\"))\n\n// Set a rounded, yellow-on-purple border to the top and left\nvar anotherStyle = lipgloss.NewStyle().\n    BorderStyle(lipgloss.RoundedBorder()).\n    BorderForeground(lipgloss.Color(\"228\")).\n    BorderBackground(lipgloss.Color(\"63\")).\n    BorderTop(true).\n    BorderLeft(true)\n\n// Make your own border\nvar myCuteBorder = lipgloss.Border{\n    Top:         \"._.:*:\",\n    Bottom:      \"._.:*:\",\n    Left:        \"|*\",\n    Right:       \"|*\",\n    TopLeft:     \"*\",\n    TopRight:    \"*\",\n    BottomLeft:  \"*\",\n    BottomRight: \"*\",\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// Add a thick border to the top and bottom\nlipgloss.NewStyle().\n    Border(lipgloss.ThickBorder(), true, false)\n\n// Add a thick border to the right and bottom sides. Rules are set clockwise\n// from top.\nlipgloss.NewStyle().\n    Border(lipgloss.DoubleBorder(), true, false, false, true)\n```\n\n----------------------------------------\n\nTITLE: Importing go-toml Library in Go\nDESCRIPTION: Shows how to import the go-toml library in a Go program.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pelletier/go-toml/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/pelletier/go-toml\"\n```\n\n----------------------------------------\n\nTITLE: JSON Input Source Initialization Functions in Go\nDESCRIPTION: Collection of functions to create JSON-based input sources from various sources including raw bytes, files, and io.Reader. These provide JSON configuration data to CLI flags.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_71\n\nLANGUAGE: go\nCODE:\n```\nfunc NewJSONSource(data []byte) (InputSourceContext, error)\nfunc NewJSONSourceFromFile(f string) (InputSourceContext, error)\nfunc NewJSONSourceFromReader(r io.Reader) (InputSourceContext, error)\n```\n\n----------------------------------------\n\nTITLE: Reading Proc Filesystem in Go\nDESCRIPTION: Example of reading and parsing files from the /proc filesystem using bufio.Scanner and utility functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n    data, err := util.ReadFileNoStat(\"/proc/cpuinfo\")\n    if err != nil {\n        return err\n    }\n    reader := bytes.NewReader(data)\n    scanner := bufio.NewScanner(reader)\n```\n\n----------------------------------------\n\nTITLE: Encoding Buffer with S2 Compression in Go\nDESCRIPTION: This function shows how to compress a single buffer of data as an S2 stream. It creates a new S2 writer, encodes the buffer, and ensures proper closing of the encoder. This method is slightly more efficient for single blocks of data.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc EncodeStream(src []byte, dst io.Writer) error {\n    enc := s2.NewWriter(dst)\n    // The encoder owns the buffer until Flush or Close is called.\n    err := enc.EncodeBuffer(buf)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    // Blocks until compression is done.\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: TOML and YAML Input Source Functions in Go\nDESCRIPTION: Functions to create TOML and YAML based input sources from files. These allow for configuration to be loaded from these formats for use with CLI flags.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_72\n\nLANGUAGE: go\nCODE:\n```\nfunc NewTomlSourceFromFile(file string) (InputSourceContext, error)\nfunc NewYamlSourceFromFile(file string) (InputSourceContext, error)\n```\n\n----------------------------------------\n\nTITLE: Creating S2 Dictionary Using Sample File in Go\nDESCRIPTION: This snippet demonstrates how to create an S2 dictionary using a sample file. It reads the sample file, creates a dictionary using `s2.MakeDict`, encodes the input file, and then decodes it using the created dictionary. The dictionary can be saved and reloaded for later use.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\n    // Read a sample\n    sample, err := os.ReadFile(\"sample.json\")\n\n    // Create a dictionary.\n    dict := s2.MakeDict(sample, nil)\n\t\n    // b := dict.Bytes() will provide a dictionary that can be saved\n    // and reloaded with s2.NewDict(b).\n\t\n    // To encode:\n    encoded := dict.Encode(nil, file)\n\n    // To decode:\n    decoded, err := dict.Decode(nil, file)\n```\n\n----------------------------------------\n\nTITLE: Implementing UintFlag for CLI Applications in Go\nDESCRIPTION: Definition of UintFlag struct for handling unsigned integer values in command-line interfaces. It includes properties for flag configuration and methods for interacting with the flag value in different contexts.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_54\n\nLANGUAGE: go\nCODE:\n```\ntype UintFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       uint\n\tDestination *uint\n\n\tAliases []string\n\tEnvVars []string\n\n\tBase int\n\n\tAction func(*Context, uint) error\n\t// Has unexported fields.\n}\n    UintFlag is a flag with type uint\n```\n\n----------------------------------------\n\nTITLE: Running Commands and Handling Actions\nDESCRIPTION: This snippet contains multiple functions responsible for processing commands and managing actions within the CLI application, including error handling and command completion.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc HandleAction(action interface{}, cCtx *Context) (err error)\n    HandleAction attempts to figure out which Action signature was used.\n    If it's an ActionFunc or a func with the legacy signature for Action,\n    the func is run!\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc ShowCompletions(cCtx *Context)\n    ShowCompletions prints the lists of commands within a given context\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc ShowSubcommandHelp(cCtx *Context) error\n    ShowSubcommandHelp prints help for the given subcommand\n```\n\n----------------------------------------\n\nTITLE: Creating DELETE dataset in goqu v8.0.0\nDESCRIPTION: Example of creating a DELETE dataset using the new API in goqu v8.0.0. This shows the new dedicated entry point for DELETE statements.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/HISTORY.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngoqu.Delete(\"table\")\n```\n\n----------------------------------------\n\nTITLE: Traditional Error Handling in Go\nDESCRIPTION: Demonstrates the conventional error handling pattern in Go, which can lead to error reports lacking context or debugging information.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements in JSON Configuration\nDESCRIPTION: Example showing how to access array elements in JSON configuration using indexed paths.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"host\": {\n        \"address\": \"localhost\",\n        \"ports\": [\n            5799,\n            6029\n        ]\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with FakeClock in Go\nDESCRIPTION: Example test function demonstrating how to use FakeClock to test time-dependent code, including synchronization and time advancement.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jonboulle/clockwork/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMyFunc(t *testing.T) {\n\tc := clockwork.NewFakeClock()\n\n\t// Start our sleepy function\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tmyFunc(c)\n\t\twg.Done()\n\t}()\n\n\t// Ensure we wait until myFunc is sleeping\n\tc.BlockUntil(1)\n\n\tassertState()\n\n\t// Advance the FakeClock forward in time\n\tc.Advance(3 * time.Second)\n\n\t// Wait until the function completes\n\twg.Wait()\n\n\tassertState()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ReadSeeker with Random Seeking\nDESCRIPTION: Create a ReadSeeker supporting random seeking with a custom index, requiring the input to support io.Seeker\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ndec := s2.NewReader(r)\nrs, err := dec.ReadSeeker(true, index)\nrs.Seek(wantOffset, io.SeekStart)\n```\n\n----------------------------------------\n\nTITLE: Rendering Go Table as CSV\nDESCRIPTION: This snippet shows how to render a table in CSV format using the RenderCSV() method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jedib0t/go-pretty/v6/table/README.md#2025-04-22_snippet_8\n\nLANGUAGE: golang\nCODE:\n```\n    t.RenderCSV()\n```\n\n----------------------------------------\n\nTITLE: Using Fast Approximation for Color Space Conversion in Go\nDESCRIPTION: Example of how to use the FastLinearRgb approximation for faster color space conversions. This approach is roughly 5x faster than standard conversions and offers precision up to approximately 0.5%, though accuracy decreases significantly for input values outside the 0-1 range.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ncol := // Get your color somehow\nl, a, b := XyzToLab(LinearRgbToXyz(col.LinearRgb()))\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Sync Response in Inngest SDK\nDESCRIPTION: Defines the JSON response structure for a successful sync operation. This payload indicates whether the sync modified any functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n{\n\tok: true;\n\tmodified?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: StringSliceFlag Type and Methods in Go\nDESCRIPTION: Definition and implementation of StringSliceFlag type that wraps cli.StringSliceFlag with additional functionality\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_81\n\nLANGUAGE: go\nCODE:\n```\ntype StringSliceFlag struct {\n\t*cli.StringSliceFlag\n\t// Has unexported fields.\n}\n\nfunc NewStringSliceFlag(fl *cli.StringSliceFlag) *StringSliceFlag\nfunc (f *StringSliceFlag) Apply(set *flag.FlagSet) error\nfunc (f *StringSliceFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Joining Paragraphs in Lip Gloss\nDESCRIPTION: These snippets show how to join paragraphs horizontally and vertically with different alignment options.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Horizontally join three paragraphs along their bottom edges\nlipgloss.JoinHorizontal(lipgloss.Bottom, paragraphA, paragraphB, paragraphC)\n\n// Vertically join two paragraphs along their center axes\nlipgloss.JoinVertical(lipgloss.Center, paragraphA, paragraphB)\n\n// Horizontally join three paragraphs, with the shorter ones aligning 20%\n// from the top of the tallest\nlipgloss.JoinHorizontal(0.2, paragraphA, paragraphB, paragraphC)\n```\n\n----------------------------------------\n\nTITLE: Printing Application Version\nDESCRIPTION: This snippet defines a function variable for printing the version of the application, making it easy to retrieve and display the current version when needed.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nvar VersionPrinter = printVersion\n    VersionPrinter prints the version for the App\n```\n\n----------------------------------------\n\nTITLE: Implementing Float64Slice in Go\nDESCRIPTION: Float64Slice wraps []float64 to satisfy flag.Value interface. It provides methods for getting, setting, and serializing float64 slice values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\ntype Float64Slice struct {\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Define Auth Challenge Lambda Handler in Go\nDESCRIPTION: Lambda function that defines authentication challenges for Cognito User Pools. Implements the Define Auth Challenge trigger which determines the next challenge in the custom authentication flow.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Cognito_UserPools_CustomAuthLambdaTriggers.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(event *events.CognitoEventUserPoolsDefineAuthChallenge) (*events.CognitoEventUserPoolsDefineAuthChallenge, error) {\n\tfmt.Printf(\"Define Auth Challenge: %+v\\n\", event)\n\treturn event, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing CCache in Go\nDESCRIPTION: Example of importing the CCache package and creating a new cache instance with default configuration.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/karlseguin/ccache/v2\"\n)\n\nvar cache = ccache.New(ccache.Configure())\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Source Handling for CLI Flags in Go\nDESCRIPTION: Functions for applying values from alternative input sources to CLI flags. ApplyInputSourceValues iterates over flags and applies alternative input values, while InitInputSource sets up an input source context for a command.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_59\n\nLANGUAGE: go\nCODE:\n```\nfunc ApplyInputSourceValues(cCtx *cli.Context, inputSourceContext InputSourceContext, flags []cli.Flag) error\n    ApplyInputSourceValues iterates over all provided flags and executes\n    ApplyInputSourceValue on flags implementing the FlagInputSourceExtension\n    interface to initialize these flags to an alternate input source.\n\nfunc InitInputSource(flags []cli.Flag, createInputSource func() (InputSourceContext, error)) cli.BeforeFunc\n    InitInputSource is used to to setup an InputSourceContext on a cli.Command\n    Before method. It will create a new input source based on the func provided.\n    If there is no error it will then apply the new input source to any flags\n    that are supported by the input source\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Random Color Generation Functions (Go)\nDESCRIPTION: This snippet demonstrates the usage of built-in functions in the go-colorful library for generating random warm and happy colors. It includes both regular and fast versions of these functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ncolorful.WarmColor()\ncolorful.HappyColor()\ncolorful.FastWarmColor()\ncolorful.FastHappyColor()\n```\n\n----------------------------------------\n\nTITLE: Generating Error Response for Function Execution in Inngest SDK\nDESCRIPTION: Defines the JSON payload structure for responding to Inngest when a function execution results in an error. This includes error name, message, and optional stack trace.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n{\n\tname: string;\n\tmessage: string;\n\tstack?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Resolver with GraphQL Directive\nDESCRIPTION: Demonstrates how to use the @entityResolver directive to enable 'GetMany' semantics for a federated entity in GraphQL schema.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/plugin/federation/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @entityResolver(multi: Boolean) on OBJECT\n\ntype MultiHello @key(fields: \"name\") @entityResolver(multi: true) {\n    name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating INSERT dataset in goqu v8.0.0\nDESCRIPTION: Example of creating an INSERT dataset using the new API in goqu v8.0.0. This shows how INSERT statements now have their own dedicated entry point.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/HISTORY.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngoqu.Insert(\"table\")\n```\n\n----------------------------------------\n\nTITLE: Defining the causer Interface for Error Cause Retrieval\nDESCRIPTION: Defines the causer interface used by errors.Cause to recursively retrieve the original cause of an error. This interface allows for inspection of wrapped errors.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pkg/errors/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype causer interface {\n        Cause() error\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced ULID Generation in Go\nDESCRIPTION: Example of generating a ULID with custom entropy source and timestamp.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nentropy := rand.New(rand.NewSource(time.Now().UnixNano()))\nms := ulid.Timestamp(time.Now())\nprintln(ulid.New(ms, entropy))\n// 01G65Z755AFWAKHE12NY0CQ9FH\n```\n\n----------------------------------------\n\nTITLE: Configuring GopherLua Registry Size\nDESCRIPTION: Demonstrates how to configure the registry size, maximum size, and growth step for a GopherLua VM.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState(lua.Options{\n   RegistrySize: 1024 * 20,         // this is the initial size of the registry\n   RegistryMaxSize: 1024 * 80,      // this is the maximum size that the registry can grow to. If set to `0` (the default) then the registry will not auto grow\n   RegistryGrowStep: 32,            // this is how much to step up the registry by each time it runs out of space. The default is `32`.\n})\ndefer L.Close()\n```\n\n----------------------------------------\n\nTITLE: Creating UPDATE dataset in goqu v8.0.0\nDESCRIPTION: Example of creating an UPDATE dataset using the new API in goqu v8.0.0. This illustrates the dedicated entry point for UPDATE statements.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/HISTORY.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngoqu.Update(\"table\")\n```\n\n----------------------------------------\n\nTITLE: Using Standard JSON Unmarshal in Go\nDESCRIPTION: Example showing the standard Go JSON unmarshaling import and usage that users will replace.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/json-iterator/go/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"encoding/json\"\njson.Unmarshal(input, &data)\n```\n\n----------------------------------------\n\nTITLE: Marking Flags as Hidden in Go using pflag\nDESCRIPTION: Demonstrates how to mark a flag as hidden, making it function normally but not appear in usage/help text.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Benchmark Performance Results for Arithmetic Operations\nDESCRIPTION: Performance benchmarks demonstrating the efficiency of uint128 arithmetic operations, showing nanosecond-level performance with zero memory allocations across various operations like addition, subtraction, multiplication, and bit shifts\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/lukechampine.com/uint128/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkArithmetic/Add-4              2000000000    0.45 ns/op    0 B/op      0 allocs/op\nBenchmarkArithmetic/Sub-4              2000000000    0.67 ns/op    0 B/op      0 allocs/op\nBenchmarkArithmetic/Mul-4              2000000000    0.42 ns/op    0 B/op      0 allocs/op\nBenchmarkArithmetic/Lsh-4              2000000000    1.06 ns/op    0 B/op      0 allocs/op\nBenchmarkArithmetic/Rsh-4              2000000000    1.06 ns/op    0 B/op      0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Installing Google UUID Package for Go\nDESCRIPTION: This command installs the Google UUID package using Go's package management system. It fetches the package from the specified GitHub repository.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/google/uuid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Connecting Viper to Etcd Remote Configuration in Go\nDESCRIPTION: Shows how to configure Viper to read configuration from an etcd key/value store.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"etcd\", \"http://127.0.0.1:4001\",\"/config/hugo.json\")\nviper.SetConfigType(\"json\") // because there is no file extension in a stream of bytes, supported extensions are \"json\", \"toml\", \"yaml\", \"yml\", \"properties\", \"props\", \"prop\", \"env\", \"dotenv\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Traditional Panic Handling in Go\nDESCRIPTION: Shows the traditional way of handling panics in goroutines using stdlib\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype caughtPanicError struct {\n    val   any\n    stack []byte\n}\n\nfunc (e *caughtPanicError) Error() string {\n    return fmt.Sprintf(\n        \"panic: %q\\n%s\",\n        e.val,\n        string(e.stack)\n    )\n}\n\nfunc main() {\n    done := make(chan error)\n    go func() {\n        defer func() {\n            if v := recover(); v != nil {\n                done <- &caughtPanicError{\n                    val: v,\n                    stack: debug.Stack()\n                }\n            } else {\n                done <- nil\n            }\n        }()\n        doSomethingThatMightPanic()\n    }()\n    err := <-done\n    if err != nil {\n        panic(err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int64SliceFlag Structure in Go\nDESCRIPTION: Int64SliceFlag is a flag with type *Int64Slice. It includes methods for applying, getting, and manipulating slice flag values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_30\n\nLANGUAGE: go\nCODE:\n```\ntype Int64SliceFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       *Int64Slice\n\tDestination *Int64Slice\n\n\tAliases []string\n\tEnvVars []string\n\n\tAction func(*Context, []int64) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Parsing in Go using OjG\nDESCRIPTION: Demonstrates basic JSON string parsing using the oj package to parse a nested JSON object containing an array of objects.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\n    obj, err := oj.ParseString(`{\n        \"a\":[\n            {\"x\":1,\"y\":2,\"z\":3},\n            {\"x\":2,\"y\":4,\"z\":6}\n        ]\n    }`)\n```\n\n----------------------------------------\n\nTITLE: Pre-compiling JMESPath Queries in Go\nDESCRIPTION: This snippet illustrates how to pre-compile a JMESPath query for improved performance when running multiple searches. It shows the process of compiling the query and then using it to search JSON data.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": \"bar\"}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nprecompiled, err := Compile(\"foo\")\nif err != nil{\n  // ... handle the error\n}\nresult, err := precompiled.Search(data)\nresult = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Implementing GenericFlag Structure in Go\nDESCRIPTION: GenericFlag is a flag with type Generic. It includes methods for applying, getting, and manipulating generic flag values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\ntype GenericFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       Generic\n\tDestination Generic\n\n\tAliases []string\n\tEnvVars []string\n\n\tTakesFile bool\n\n\tAction func(*Context, interface{}) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Processing DynamoDB Stream Events in Go Lambda Function\nDESCRIPTION: Sample Lambda function that processes DynamoDB event data and logs record information to CloudWatch. The function iterates through event records and prints string attribute values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_DynamoDB.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handleRequest(ctx context.Context, e events.DynamoDBEvent) {\n\n\tfor _, record := range e.Records {\n\t\tfmt.Printf(\"Processing request data for event ID %s, type %s.\\n\", record.EventID, record.EventName)\n\n\t\t// Print new values for attributes of type String\n\t\tfor name, value := range record.Change.NewImage {\n\t\t\tif value.DataType() == events.DataTypeString {\n\t\t\t\tfmt.Printf(\"Attribute name: %s, value: %s\\n\", name, value.String())\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetMany Entity Resolver in Go\nDESCRIPTION: Shows the structure of a Go function for resolving multiple entities at once, using the generated 'GetMany' resolver function.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/plugin/federation/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *entityResolver) FindManyMultiHellosByName(ctx context.Context, reps []*generated.ManyMultiHellosByNameInput) ([]*generated.MultiHello, error) {\n  /// <Your code to resolve the list of items>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Command Structure in Go\nDESCRIPTION: Comprehensive command structure definition including properties for name, aliases, usage, flags, subcommands, and various handler functions for command execution and completion.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype Command struct {\n\tName string\n\tAliases []string\n\tUsage string\n\tUsageText string\n\tDescription string\n\tArgsUsage string\n\tCategory string\n\tBashComplete BashCompleteFunc\n\tBefore BeforeFunc\n\tAfter AfterFunc\n\tAction ActionFunc\n\tOnUsageError OnUsageErrorFunc\n\tSubcommands []*Command\n\tFlags []Flag\n\tSkipFlagParsing bool\n\tHideHelp bool\n\tHideHelpCommand bool\n\tHidden bool\n\tUseShortOptionHandling bool\n\tHelpName string\n\tCustomHelpTemplate string\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Colors in Different Color Spaces (Go)\nDESCRIPTION: This snippet shows how to generate random colors in different color spaces (HCL, HSV) using the go-colorful library. It includes examples of creating random blue shades, dark colors, and light colors.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nrandom_blue := colorful.Hcl(180.0+rand.Float64()*50.0, 0.2+rand.Float64()*0.8, 0.3+rand.Float64()*0.7)\nrandom_dark := colorful.Hcl(rand.Float64()*360.0, rand.Float64(), rand.Float64()*0.4)\nrandom_light := colorful.Hcl(rand.Float64()*360.0, rand.Float64(), 0.6+rand.Float64()*0.4)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Properties in Go\nDESCRIPTION: This snippet demonstrates various ways to load properties from files, maps, strings, and URLs. It also shows how to access values and decode properties into structs.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/magiconair/properties/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"flag\"\n\t\"github.com/magiconair/properties\"\n)\n\nfunc main() {\n\t// init from a file\n\tp := properties.MustLoadFile(\"${HOME}/config.properties\", properties.UTF8)\n\n\t// or multiple files\n\tp = properties.MustLoadFiles([]string{\n\t\t\t\"${HOME}/config.properties\",\n\t\t\t\"${HOME}/config-${USER}.properties\",\n\t\t}, properties.UTF8, true)\n\n\t// or from a map\n\tp = properties.LoadMap(map[string]string{\"key\": \"value\", \"abc\": \"def\"})\n\n\t// or from a string\n\tp = properties.MustLoadString(\"key=value\\nabc=def\")\n\n\t// or from a URL\n\tp = properties.MustLoadURL(\"http://host/path\")\n\n\t// or from multiple URLs\n\tp = properties.MustLoadURL([]string{\n\t\t\t\"http://host/config\",\n\t\t\t\"http://host/config-${USER}\",\n\t\t}, true)\n\n\t// or from flags\n\tp.MustFlag(flag.CommandLine)\n\n\t// get values through getters\n\thost := p.MustGetString(\"host\")\n\tport := p.GetInt(\"port\", 8080)\n\n\t// or through Decode\n\ttype Config struct {\n\t\tHost    string        `properties:\"host\"`\n\t\tPort    int           `properties:\"port,default=9000\"`\n\t\tAccept  []string      `properties:\"accept,default=image/png;image;gif\"`\n\t\tTimeout time.Duration `properties:\"timeout,default=5s\"`\n\t}\n\tvar cfg Config\n\tif err := p.Decode(&cfg); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flag Suggestion Function Type in Go\nDESCRIPTION: Type definition for a function that suggests alternative flags based on user input, useful for providing helpful error messages when users mistype flag names.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_45\n\nLANGUAGE: go\nCODE:\n```\ntype SuggestFlagFunc func(flags []Flag, provided string, hideHelp bool) string\n```\n\n----------------------------------------\n\nTITLE: Implementing B-trees with Custom Sorting in Go\nDESCRIPTION: This example demonstrates creating dual B-trees with custom sorting criteria using the tidwall/btree package. It defines an Item struct with key-value pairs, implements comparison functions for sorting by keys and values, and shows how to populate and traverse the trees.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/tidwall/btree/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/tidwall/btree\"\n)\n\ntype Item struct {\n\tKey, Val string\n}\n\n// byKeys is a comparison function that compares item keys and returns true\n// when a is less than b.\nfunc byKeys(a, b interface{}) bool {\n\ti1, i2 := a.(*Item), b.(*Item)\n\treturn i1.Key < i2.Key\n}\n\n// byVals is a comparison function that compares item values and returns true\n// when a is less than b.\nfunc byVals(a, b interface{}) bool {\n\ti1, i2 := a.(*Item), b.(*Item)\n\tif i1.Val < i2.Val {\n\t\treturn true\n\t}\n\tif i1.Val > i2.Val {\n\t\treturn false\n\t}\n\t// Both vals are equal so we should fall though\n\t// and let the key comparison take over.\n\treturn byKeys(a, b)\n}\n\nfunc main() {\n\t// Create a tree for keys and a tree for values.\n\t// The \"keys\" tree will be sorted on the Keys field.\n\t// The \"values\" tree will be sorted on the Values field.\n\tkeys := btree.New(byKeys)\n\tvals := btree.New(byVals)\n\n\t// Create some items.\n\tusers := []*Item{\n\t\t&Item{Key: \"user:1\", Val: \"Jane\"},\n\t\t&Item{Key: \"user:2\", Val: \"Andy\"},\n\t\t&Item{Key: \"user:3\", Val: \"Steve\"},\n\t\t&Item{Key: \"user:4\", Val: \"Andrea\"},\n\t\t&Item{Key: \"user:5\", Val: \"Janet\"},\n\t\t&Item{Key: \"user:6\", Val: \"Andy\"},\n\t}\n\n\t// Insert each user into both trees\n\tfor _, user := range users {\n\t\tkeys.Set(user)\n\t\tvals.Set(user)\n\t}\n\n\t// Iterate over each user in the key tree\n\tkeys.Ascend(nil, func(item interface{}) bool {\n\t\tkvi := item.(*Item)\n\t\tfmt.Printf(\"%s %s\\n\", kvi.Key, kvi.Val)\n\t\treturn true\n\t})\n\n\tfmt.Printf(\"\\n\")\n\t// Iterate over each user in the val tree\n\tvals.Ascend(nil, func(item interface{}) bool {\n\t\tkvi := item.(*Item)\n\t\tfmt.Printf(\"%s %s\\n\", kvi.Key, kvi.Val)\n\t\treturn true\n\t})\n\n\t// Output:\n\t// user:1 Jane\n\t// user:2 Andy\n\t// user:3 Steve\n\t// user:4 Andrea\n\t// user:5 Janet\n\t// user:6 Andy\n\t//\n\t// user:4 Andrea\n\t// user:2 Andy\n\t// user:6 Andy\n\t// user:1 Jane\n\t// user:5 Janet\n\t// user:3 Steve\n}\n```\n\n----------------------------------------\n\nTITLE: Color Distance Comparison Program\nDESCRIPTION: Complete example demonstrating color distance calculations between pairs of colors using different metrics\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\nimport \"github.com/lucasb-eyer/go-colorful\"\n\nfunc main() {\n\tc1a := colorful.Color{150.0 / 255.0, 10.0 / 255.0, 150.0 / 255.0}\n\tc1b := colorful.Color{53.0 / 255.0, 10.0 / 255.0, 150.0 / 255.0}\n\tc2a := colorful.Color{10.0 / 255.0, 150.0 / 255.0, 50.0 / 255.0}\n\tc2b := colorful.Color{99.9 / 255.0, 150.0 / 255.0, 10.0 / 255.0}\n\n\tfmt.Printf(\"DistanceRgb:       c1: %v\\tand c2: %v\\n\", c1a.DistanceRgb(c1b), c2a.DistanceRgb(c2b))\n\tfmt.Printf(\"DistanceLab:       c1: %v\\tand c2: %v\\n\", c1a.DistanceLab(c1b), c2a.DistanceLab(c2b))\n\tfmt.Printf(\"DistanceLuv:       c1: %v\\tand c2: %v\\n\", c1a.DistanceLuv(c1b), c2a.DistanceLuv(c2b))\n\tfmt.Printf(\"DistanceCIE76:     c1: %v\\tand c2: %v\\n\", c1a.DistanceCIE76(c1b), c2a.DistanceCIE76(c2b))\n\tfmt.Printf(\"DistanceCIE94:     c1: %v\\tand c2: %v\\n\", c1a.DistanceCIE94(c1b), c2a.DistanceCIE94(c2b))\n\tfmt.Printf(\"DistanceCIEDE2000: c1: %v\\tand c2: %v\\n\", c1a.DistanceCIEDE2000(c1b), c2a.DistanceCIEDE2000(c2b))\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Text in Whitespace with Lip Gloss\nDESCRIPTION: These snippets show how to place text blocks within larger areas of whitespace, with various alignment options.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Center a paragraph horizontally in a space 80 cells wide. The height of\n// the block returned will be as tall as the input paragraph.\nblock := lipgloss.PlaceHorizontal(80, lipgloss.Center, fancyStyledParagraph)\n\n// Place a paragraph at the bottom of a space 30 cells tall. The width of\n// the text block returned will be as wide as the input paragraph.\nblock := lipgloss.PlaceVertical(30, lipgloss.Bottom, fancyStyledParagraph)\n\n// Place a paragraph in the bottom right corner of a 30x80 cell space.\nblock := lipgloss.Place(30, 80, lipgloss.Right, lipgloss.Bottom, fancyStyledParagraph)\n```\n\n----------------------------------------\n\nTITLE: Copying Styles in Lip Gloss\nDESCRIPTION: This snippet demonstrates how to create a copy of a style to modify it without affecting the original.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().Foreground(lipgloss.Color(\"219\"))\n\nvar wildStyle = style.Copy().Blink(true)\n```\n\n----------------------------------------\n\nTITLE: Creating SELECT dataset in goqu v8.0.0\nDESCRIPTION: Example of creating a SELECT dataset using the new API in goqu v8.0.0. This demonstrates the separation of concerns between different SQL statement types.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/HISTORY.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngoqu.From(\"table\")\n```\n\n----------------------------------------\n\nTITLE: Installing CCache Go Package\nDESCRIPTION: Command to download and install the CCache package using Go's package manager.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo get github.com/karlseguin/ccache/v2\n```\n\n----------------------------------------\n\nTITLE: Converting CamelCase to snake_case in Go\nDESCRIPTION: Example showing how to use the go-strcase package to convert a CamelCase string to snake_case format. Demonstrates basic package import and usage.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/stoewer/go-strcase/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/stoewer/go-strcase\"\n\nvar snake = strcase.SnakeCase(\"CamelCase\")\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mutation for Updating Action Type\nDESCRIPTION: Example of adding a new GraphQL mutation for updating an action type. This snippet demonstrates the structure of a mutation definition including input and output types.\nSOURCE: https://github.com/inngest/inngest/blob/main/pkg/coreapi/README.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  updateActionType(input: UpdateActionType): ActionType\n}\ninput UpdateActionType { ... }\ntype ActionType { ... }\n```\n\n----------------------------------------\n\nTITLE: Managing Dependencies with Go Modules\nDESCRIPTION: Commands for adding and updating dependencies using Go modules, including picking specific versions and latest releases.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Processing AWS Auto Scaling Events in Lambda with Go\nDESCRIPTION: This code shows how to implement an AWS Lambda function in Go that receives Auto Scaling events and extracts the EC2 instance ID. The function logs the instance ID through stdout, which gets captured in CloudWatch Logs. It uses the aws-lambda-go library to handle Lambda integration.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_AutoScaling.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, autoScalingEvent events.AutoScalingEvent) {\n\tfmt.Printf(\"Instance-Id available in event is %s \\n\", autoScalingEvent.Detail[\"EC2InstanceId\"])\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Step Hashing Format in Inngest SDK Version 1\nDESCRIPTION: The format used for hashing steps in version 1 of the Inngest SDK. Steps are hashed by combining the step ID and index with a colon separator using sprintf.\nSOURCE: https://github.com/inngest/inngest/blob/main/pkg/execution/state/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Sprintf(\"%s:%d\", stepID, idx)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Generic Flag with Input Source Support in Go\nDESCRIPTION: GenericFlag type that wraps cli.GenericFlag to support alternative input sources. It includes methods for creation, application to flag sets, and applying generic values from input sources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_69\n\nLANGUAGE: go\nCODE:\n```\ntype GenericFlag struct {\n\t*cli.GenericFlag\n\t// Has unexported fields.\n}\n\nfunc NewGenericFlag(fl *cli.GenericFlag) *GenericFlag\n\nfunc (f *GenericFlag) Apply(set *flag.FlagSet) error\n\nfunc (f *GenericFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Global JWW Notepad Instance\nDESCRIPTION: Shows how to create a non-global instance of JWW logger using NewNotepad function with custom threshold levels and output destinations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/jwalterweatherman/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nnotepad = jww.NewNotepad(jww.LevelInfo, jww.LevelTrace, os.Stdout, ioutil.Discard, \"\", log.Ldate|log.Ltime)\nnotepad.WARN.Println(\"Some warning\"\")\n```\n\n----------------------------------------\n\nTITLE: Defining Command Help Template in Go CLI Package\nDESCRIPTION: This snippet defines the CommandHelpTemplate variable, which is a text template for the command help topic in the cli package. It uses text/template to render customizable help text for individual commands in CLI applications.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar CommandHelpTemplate = `NAME:\n   {{template \"helpNameTemplate\" .}}\n\nUSAGE:\n   {{template \"usageTemplate\" .}}{{if .Category}}\n\nCATEGORY:\n   {{.Category}}{{end}}{{if .Description}}\n\nDESCRIPTION:\n   {{template \"descriptionTemplate\" .}}{{end}}{{if .VisibleFlagCategories}}\n\nOPTIONS:{{template \"visibleFlagCategoryTemplate\" .}}{{else if .VisibleFlags}}\n\nOPTIONS:{{template \"visibleFlagTemplate\" .}}{{end}}\n`\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-line Strings in HCL\nDESCRIPTION: Demonstrates how to create multi-line strings in HCL using here documents. The syntax starts with <<EOF at the end of a line and ends with EOF on its own line.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/hcl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n<<FOO\nhello\nworld\nFOO\n```\n\n----------------------------------------\n\nTITLE: Using termenv Template Helpers in Go\nDESCRIPTION: Example of using termenv's template helpers for text styling in Go templates.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// load template helpers\nf := termenv.TemplateFuncs(termenv.ColorProfile())\ntpl := template.New(\"tpl\").Funcs(f)\n\n// apply bold style in a template\nbold := `{{ Bold \"Hello World\" }}`\n\n// examples for colorized templates\ncol := `{{ Color \"#ff0000\" \"#0000ff\" \"Red on Blue\" }}`\nfg := `{{ Foreground \"#ff0000\" \"Red Foreground\" }}`\nbg := `{{ Background \"#0000ff\" \"Blue Background\" }}`\n\n// wrap styles\nwrap := `{{ Bold (Underline \"Hello World\") }}`\n\n// parse and render\ntpl, err = tpl.Parse(bold)\n\nvar buf bytes.Buffer\ntpl.Execute(&buf, nil)\nfmt.Println(&buf)\n```\n\n----------------------------------------\n\nTITLE: Go Enum Usage Examples\nDESCRIPTION: Shows practical examples of using the generated enum methods including string conversion and JSON handling.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dmarkham/enumer/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Convert any Pill value to string\nvar aspirinString string = Aspirin.String()\n// (or use it in any place where a Stringer is accepted)\nfmt.Println(\"I need \", Paracetamol) // Will print \"I need Paracetamol\"\n\n// Convert a string with the enum name to the corresponding enum value\npill, err := PillString(\"Ibuprofen\") // \"ibuprofen\" will also work.\nif err != nil {\n    fmt.Println(\"Unrecognized pill: \", err)\n    return\n}\n// Now pill == Ibuprofen\n\n// Get all the values of the string\nallPills := PillValues()\nfmt.Println(allPills) // Will print [Placebo Aspirin Ibuprofen Paracetamol]\n\n// Check if a value belongs to the Pill enum values\nvar notAPill Pill = 42\nif (notAPill.IsAPill()) {\n\tfmt.Println(notAPill, \"is not a value of the Pill enum\")\n}\n\n// Marshal/unmarshal to/from json strings, either directly or automatically when\n// the enum is a field of a struct\npillJSON := Aspirin.MarshalJSON()\n// Now pillJSON == `\"Aspirin\"`\n```\n\n----------------------------------------\n\nTITLE: Generated Go Enum Methods\nDESCRIPTION: Shows the method signatures that Enumer generates for an enum type including String(), marshaling, and utility functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dmarkham/enumer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (i Pill) String() string {\n\t//...\n}\n\nfunc PillString(s string) (Pill, error) {\n\t//...\n}\n\nfunc PillValues() []Pill {\n\t//...\n}\n\nfunc PillStrings() []string {\n\t//...\n}\n\nfunc (i Pill) IsAPill() bool {\n\t//...\n}\n\nfunc (i Pill) MarshalJSON() ([]byte, error) {\n\t//...\n}\n\nfunc (i *Pill) UnmarshalJSON(data []byte) error {\n\t//...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Concurrent Stream Decompression Scaling in Markdown\nDESCRIPTION: This markdown table demonstrates the scaling of concurrent stream decompression for S2 and Snappy across different CPU core counts on an AMD Ryzen 3950X processor.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Input                                     | `-cpu=1`   | `-cpu=2`   | `-cpu=4`   | `-cpu=8`   | `-cpu=16`   |\n|-------------------------------------------|------------|------------|------------|------------|-------------|\n| enwik10.snappy                            | 1098.6MB/s | 1819.8MB/s | 3625.6MB/s | 6910.6MB/s | 10818.2MB/s |\n| enwik10.s2                                | 1303.5MB/s | 2606.1MB/s | 4847.9MB/s | 8878.4MB/s | 9592.1MB/s  |\n| sofia-air-quality-dataset.tar.snappy      | 1302.0MB/s | 2165.0MB/s | 4244.5MB/s | 8241.0MB/s | 12920.5MB/s |\n| sofia-air-quality-dataset.tar.s2          | 1399.2MB/s | 2463.2MB/s | 5196.5MB/s | 9639.8MB/s | 11439.5MB/s |\n| sofia-air-quality-dataset.tar.s2 (no asm) | 837.5MB/s  | 1652.6MB/s | 3183.6MB/s | 5945.0MB/s | 9620.7MB/s  |\n```\n\n----------------------------------------\n\nTITLE: Sleep Step Operation Response Structure in TypeScript\nDESCRIPTION: Defines the structure for a Sleep step that pauses execution for a specified duration. The duration can be specified as an ISO 8601 date or a time string with units (e.g., \"300ms\", \"2h45m\").\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tid: string;\n\top: \"Sleep\";\n\topts: {\n\t\tduration: \"[time_string_or_stringified_ISO_date]\";\n\t};\n\tdisplayName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Objects in HCL\nDESCRIPTION: Illustrates how to create objects and nested objects in HCL. This example defines a variable 'ami' with a description.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/hcl/README.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"ami\" {\n    description = \"the AMI to use\"\n}\n```\n\n----------------------------------------\n\nTITLE: Wait For Event Step Operation Response Structure in TypeScript\nDESCRIPTION: Defines the structure for a Wait For Event step that pauses execution until a specific event is received. It includes the event name, timeout duration, and an optional conditional expression.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tid: string;\n\top: \"WaitForEvent\";\n\topts: {\n\t\tevent: string;\n\t\ttimeout: \"[time_string]\";\n\t\tif?: \"[cel_expression]\";\n\t};\n\tdisplayName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TRUNCATE dataset in goqu v8.0.0\nDESCRIPTION: Example of creating a TRUNCATE dataset using the new API in goqu v8.0.0. This demonstrates the new dedicated entry point for TRUNCATE statements.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/HISTORY.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngoqu.Truncate(\"table\")\n```\n\n----------------------------------------\n\nTITLE: Replacing an Item in CCache without Renewing TTL in Go\nDESCRIPTION: Demonstrates how to update the value of an existing item in the cache without changing its TTL or position in the LRU list.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ncache.Replace(\"user:4\", user)\n```\n\n----------------------------------------\n\nTITLE: Defining Core xxHash Functions in Go\nDESCRIPTION: This snippet shows the main functions provided by the xxhash package. It includes Sum64 for byte slices, Sum64String for strings, and a Digest struct with a New() constructor.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Installing JWT-Go Package in Go\nDESCRIPTION: Command to add jwt-go as a dependency in a Go program using the go get command.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/golang-jwt/jwt/v5\n```\n\n----------------------------------------\n\nTITLE: Building Inngest CLI with Make\nDESCRIPTION: Command to build the Inngest CLI using the provided Makefile. This compiles the CLI for the local system architecture.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Create Auth Challenge Lambda Handler in Go\nDESCRIPTION: Lambda function that creates authentication challenges for Cognito User Pools. Implements the Create Auth Challenge trigger which generates the challenge that will be presented to the user.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Cognito_UserPools_CustomAuthLambdaTriggers.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(event *events.CognitoEventUserPoolsCreateAuthChallenge) (*events.CognitoEventUserPoolsCreateAuthChallenge, error) {\n\tfmt.Printf(\"Create Auth Challenge: %+v\\n\", event)\n\treturn event, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Using btree.Set in Go\nDESCRIPTION: Example showing how to use btree.Set for storing and manipulating unique string values. It demonstrates inserting names, iterating over the set, and deleting entries.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/tidwall/btree/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/tidwall/btree\"\n)\n\nfunc main() {\n\t// create a set\n\tvar names btree.Set[string]\n\n\t// add some names\n\tnames.Insert(\"Jane\")\n\tnames.Insert(\"Andrea\")\n\tnames.Insert(\"Steve\")\n\tnames.Insert(\"Andy\")\n\tnames.Insert(\"Janet\")\n\tnames.Insert(\"Andy\")\n\n\t// Iterate over the maps and print each user\n\tnames.Scan(func(key string) bool {\n\t\tfmt.Printf(\"%s\\n\", key)\n\t\treturn true\n\t})\n\tfmt.Printf(\"\\n\")\n\n\t// Delete a couple\n\tnames.Delete(\"Steve\")\n\tnames.Delete(\"Andy\")\n\n\t// print the map again\n\tnames.Scan(func(key string) bool {\n\t\tfmt.Printf(\"%s\\n\", key)\n\t\treturn true\n\t})\n\tfmt.Printf(\"\\n\")\n\n\t// Output:\n\t// Andrea\n\t// Andy\n\t// Jane\n\t// Janet\n\t// Steve\n\t//\n\t// Andrea\n\t// Jane\n\t// Janet\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSlice Methods in Go\nDESCRIPTION: Method implementations for StringSlice including creation with default values, getting and setting values, and string representation for usage defaults.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_41\n\nLANGUAGE: go\nCODE:\n```\nfunc NewStringSlice(defaults ...string) *StringSlice\n    NewStringSlice creates a *StringSlice with default values\n\nfunc (s *StringSlice) Get() interface{}\n    Get returns the slice of strings set by this flag\n\nfunc (s *StringSlice) Serialize() string\n    Serialize allows StringSlice to fulfill Serializer\n\nfunc (s *StringSlice) Set(value string) error\n    Set appends the string value to the list of values\n\nfunc (s *StringSlice) String() string\n    String returns a readable representation of this value (for usage defaults)\n\nfunc (s *StringSlice) Value() []string\n    Value returns the slice of strings set by this flag\n\nfunc (s *StringSlice) WithSeparatorSpec(spec separatorSpec)\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Markdown with Blackfriday\nDESCRIPTION: Demonstrates how to create simple tables using Blackfriday's table syntax extension. The example shows a table with two columns: Name and Age.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nName    | Age\n--------|------\nBob     | 27\nAlice   | 23\n```\n\n----------------------------------------\n\nTITLE: Importing Miniredis in Go\nDESCRIPTION: Shows how to import the Miniredis library in a Go project. It's important to use the v2 version of the package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/alicebob/miniredis/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/alicebob/miniredis/v2\"\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Args Interface in Go\nDESCRIPTION: Interface definition for handling command-line arguments with methods for accessing individual args, checking presence, and manipulating the argument slice.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ntype Args interface {\n\t// Get returns the nth argument, or else a blank string\n\tGet(n int) string\n\t// First returns the first argument, or else a blank string\n\tFirst() string\n\t// Tail returns the rest of the arguments (not the first one)\n\t// or else an empty string slice\n\tTail() []string\n\t// Len returns the length of the wrapped slice\n\tLen() int\n\t// Present checks if there are any arguments present\n\tPresent() bool\n\t// Slice returns a copy of the internal slice\n\tSlice() []string\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Block-Level Formatting in Lip Gloss\nDESCRIPTION: These snippets demonstrate how to set padding and margins for block-level elements, including shorthand syntax similar to CSS.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Padding\nvar style = lipgloss.NewStyle().\n    PaddingTop(2).\n    PaddingRight(4).\n    PaddingBottom(2).\n    PaddingLeft(4)\n\n// Margins\nvar style = lipgloss.NewStyle().\n    MarginTop(2).\n    MarginRight(4).\n    MarginBottom(2).\n    MarginLeft(4)\n```\n\nLANGUAGE: go\nCODE:\n```\n// 2 cells on all sides\nlipgloss.NewStyle().Padding(2)\n\n// 2 cells on the top and bottom, 4 cells on the left and right\nlipgloss.NewStyle().Margin(2, 4)\n\n// 1 cell on the top, 4 cells on the sides, 2 cells on the bottom\nlipgloss.NewStyle().Padding(1, 4, 2)\n\n// Clockwise, starting from the top: 2 cells on the top, 4 on the right, 3 on\n// the bottom, and 1 on the left\nlipgloss.NewStyle().Margin(2, 4, 3, 1)\n```\n\n----------------------------------------\n\nTITLE: Working with Nested Structs in Structs Package\nDESCRIPTION: Shows how to access and manipulate fields of nested structs using the Structs package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fatih/structs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\naddrField := s.Field(\"Server\").Field(\"Addr\")\n\n// Get the value for addr\na := addrField.Value().(string)\n\n// Or get all fields\nhttpServer := s.Field(\"Server\").Fields()\n```\n\n----------------------------------------\n\nTITLE: Fenced Code Blocks with Language Specification in Blackfriday\nDESCRIPTION: Shows how to use fenced code blocks in Blackfriday, including specifying the language for syntax highlighting. The example demonstrates a Go function.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```go\nfunc getTrue() bool {\n    return true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Upgrading DataLoader Methods from v1 to v2\nDESCRIPTION: Changes showing the addition of context.Context parameter to Load and LoadMany methods.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/graph-gophers/dataloader/MIGRATE.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- loader.Load(key string) Thunk\n+ loader.Load(ctx context.Context, key string) Thunk\n- loader.LoadMany(keys []string) ThunkMany\n+ loader.LoadMany(ctx context.Context, keys []string) ThunkMany\n```\n\n----------------------------------------\n\nTITLE: Measuring Text Blocks in Lip Gloss\nDESCRIPTION: This snippet demonstrates how to measure the width and height of styled text blocks.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nvar block string = lipgloss.NewStyle().\n    Width(40).\n    Padding(2).\n    Render(someLongString)\n\n// Get the actual, physical dimensions of the text block.\nwidth := lipgloss.Width(block)\nheight := lipgloss.Height(block)\n\n// Here's a shorthand function.\nw, h := lipgloss.Size(block)\n```\n\n----------------------------------------\n\nTITLE: Benchmark Performance Results for Division Operations\nDESCRIPTION: Detailed benchmarks showing division performance across different scenarios, highlighting the efficiency of uint128 compared to native and big.Int implementations for 64-bit and 128-bit divisions\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/lukechampine.com/uint128/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkDivision/native_64/64-4       2000000000    0.39 ns/op    0 B/op      0 allocs/op\nBenchmarkDivision/Div_128/64-4         2000000000    6.28 ns/op    0 B/op      0 allocs/op\nBenchmarkDivision/Div_128/128-4        30000000      45.2 ns/op    0 B/op      0 allocs/op\nBenchmarkDivision/big.Int_128/64-4     20000000      98.2 ns/op    8 B/op      1 allocs/op\nBenchmarkDivision/big.Int_128/128-4    30000000      53.4 ns/op    48 B/op     1 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Optimizing JSON Parser in Go\nDESCRIPTION: This snippet describes the optimization techniques applied to the JSON parser, including efficient handling of null, true, false, and number values, as well as specialized processing for strings, objects, and arrays to minimize allocations and improve performance.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/design.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (p *Parser) Parse() (interface{}, error) {\n    // Efficient handling of null, true, false\n    // Direct integer and float parsing without intermediate buffer\n    // Optimized string parsing with byte map\n    // Efficient object and array handling with stack\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Fenced Code Block Classes with Bluemonday HTML Sanitizer\nDESCRIPTION: Demonstrates how to use the Bluemonday HTML sanitizer to preserve classes of fenced code blocks generated by Blackfriday. This is useful for maintaining syntax highlighting.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\np := bluemonday.UGCPolicy()\np.AllowAttrs(\"class\").Matching(regexp.MustCompile(\"^language-[a-zA-Z0-9]+$\")).OnElements(\"code\")\nhtml := p.SanitizeBytes(unsafe)\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregations for Stats Views in Go\nDESCRIPTION: Examples of creating different types of aggregations for stats views in OpenCensus Go.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndistAgg := view.Distribution(1<<32, 2<<32, 3<<32)\ncountAgg := view.Count()\nsumAgg := view.Sum()\n```\n\n----------------------------------------\n\nTITLE: Using SecondaryCache in CCache's LayeredCache with Go\nDESCRIPTION: Demonstrates how to retrieve and use a SecondaryCache, which allows operations on the secondary portion of a LayeredCache entry.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ncache := ccache.Layered(ccache.Configure())\nsCache := cache.GetOrCreateSecondaryCache(\"/users/goku\")\nsCache.Set(\"type:json\", \"{value_to_cache}\", time.Minute * 5)\n```\n\n----------------------------------------\n\nTITLE: Formatting File Size in Go\nDESCRIPTION: This snippet demonstrates how to use the humanize.Bytes function to convert a file size in bytes to a human-readable string representation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"That file is %s.\", humanize.Bytes(82854982)) // That file is 83 MB.\n```\n\n----------------------------------------\n\nTITLE: Defining App Help Template in Go CLI Package\nDESCRIPTION: This snippet defines the AppHelpTemplate variable, which is a text template for the default help topic in the cli package. It uses text/template to render customizable help text for CLI applications.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar AppHelpTemplate = `NAME:\n   {{template \"helpNameTemplate\" .}}\n\nUSAGE:\n   {{if .UsageText}}{{wrap .UsageText 3}}{{else}}{{.HelpName}} {{if .VisibleFlags}}[global options]{{end}}{{if .Commands}} command [command options]{{end}} {{if .ArgsUsage}}{{.ArgsUsage}}{{else}}[arguments...]{{end}}{{end}}{{if .Version}}{{if not .HideVersion}}\n\nVERSION:\n   {{.Version}}{{end}}{{end}}{{if .Description}}\n\nDESCRIPTION:\n   {{template \"descriptionTemplate\" .}}{{end}}\n{{- if len .Authors}}\n\nAUTHOR{{template \"authorsTemplate\" .}}{{end}}{{if .VisibleCommands}}\n\nCOMMANDS:{{template \"visibleCommandCategoryTemplate\" .}}{{end}}{{if .VisibleFlagCategories}}\n\nGLOBAL OPTIONS:{{template \"visibleFlagCategoryTemplate\" .}}{{else if .VisibleFlags}}\n\nGLOBAL OPTIONS:{{template \"visibleFlagTemplate\" .}}{{end}}{{if .Copyright}}\n\nCOPYRIGHT:\n   {{template \"copyrightTemplate\" .}}{{end}}\n`\n```\n\n----------------------------------------\n\nTITLE: Initializing ReadSeeker with Custom Index\nDESCRIPTION: Create a ReadSeeker using a custom index for forward-only seeking, with the index specified explicitly\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ndec := s2.NewReader(r)\nrs, err := dec.ReadSeeker(false, index)\nrs.Seek(wantOffset, io.SeekStart)\n```\n\n----------------------------------------\n\nTITLE: English Pluralization in Go\nDESCRIPTION: These snippets demonstrate the use of english.PluralWord and english.Plural functions for simple English pluralization.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nenglish.PluralWord(1, \"object\", \"\") // object\nenglish.PluralWord(42, \"object\", \"\") // objects\nenglish.PluralWord(2, \"bus\", \"\") // buses\nenglish.PluralWord(99, \"locus\", \"loci\") // loci\n\nenglish.Plural(1, \"object\", \"\") // 1 object\nenglish.Plural(42, \"object\", \"\") // 42 objects\nenglish.Plural(2, \"bus\", \"\") // 2 buses\nenglish.Plural(99, \"locus\", \"loci\") // 99 loci\n```\n\n----------------------------------------\n\nTITLE: Configuring JWW Thresholds\nDESCRIPTION: Demonstrates how to configure logging thresholds for both log output and stdout, useful for implementing verbose mode in applications.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/jwalterweatherman/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    jww \"github.com/spf13/jwalterweatherman\"\n)\n\nif Verbose {\n    jww.SetLogThreshold(jww.LevelTrace)\n    jww.SetStdoutThreshold(jww.LevelInfo)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UintSliceFlag for CLI Applications in Go\nDESCRIPTION: Definition of UintSliceFlag struct for handling arrays of uint values in command-line interfaces. It includes properties for flag configuration and methods for interacting with the flag value in different contexts.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_56\n\nLANGUAGE: go\nCODE:\n```\ntype UintSliceFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       *UintSlice\n\tDestination *UintSlice\n\n\tAliases []string\n\tEnvVars []string\n\n\tAction func(*Context, []uint) error\n\t// Has unexported fields.\n}\n    UintSliceFlag is a flag with type *UintSlice\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Data Types in Go\nDESCRIPTION: This code defines the basic types used for generic data representation in the gen package. It shows how simple Go types are used to create efficient, type-safe JSON-compatible data structures.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/design.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Node any\ntype Int int64\ntype Array []Node\n```\n\n----------------------------------------\n\nTITLE: Production Clock Usage in Go\nDESCRIPTION: Example showing how to use the real clock implementation in production code.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jonboulle/clockwork/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmyFunc(clockwork.NewRealClock())\n```\n\n----------------------------------------\n\nTITLE: Forcing Database Version with migrate CLI\nDESCRIPTION: This command forces the database to a specific version using the migrate CLI tool. It's used when the database is marked as 'dirty' due to a failed migration. The command requires the path to migrations, database URL, and the version to force.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/GETTING_STARTED.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmigrate -path PATH_TO_YOUR_MIGRATIONS -database YOUR_DATABASE_URL force VERSION\n```\n\n----------------------------------------\n\nTITLE: Converting Between RGB and Linear RGB (Go)\nDESCRIPTION: This snippet demonstrates how to convert colors between RGB and Linear RGB color spaces using the go-colorful library. It includes an example of the fast conversion method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nr, g, b := colorful.Hex(\"#FF0000\").FastLinearRgb()\n```\n\n----------------------------------------\n\nTITLE: Processing ECS Container Instance Events in Go Lambda Function\nDESCRIPTION: This Go code defines a Lambda function handler that receives ECS Container Instance state change events. It marshals the event data to JSON and prints it, which will be logged to CloudWatch Logs. The main function sets up the Lambda handler.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_ECS_ContainerInstance.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, ecsEvent events.ECSContainerInstanceEvent) {\n\toutputJSON, _ := json.MarshalIndent(ecsEvent, \"\", \" \")\n\tfmt.Printf(\"Data = %s\", outputJSON)\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra Library in Go\nDESCRIPTION: This command installs the latest version of the Cobra library using Go's package manager.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Declaring ParseAccept Function Signature in Go\nDESCRIPTION: This function parses an Accept Header string and returns a sorted list of Accept clauses.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/common/internal/bitbucket.org/ww/goautoneg/README.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc ParseAccept(header string) (accept []Accept)\n```\n\n----------------------------------------\n\nTITLE: Implementing Postgres Query Interface\nDESCRIPTION: Initial implementation of the normalized query interface for Postgres, providing a placeholder function that needs to be completed.\nSOURCE: https://github.com/inngest/inngest/blob/main/pkg/cqrs/base_cqrs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (q NormalizedQueries) NewExampleQuery(ctx context.Context, id uuid.UUID) (*sqlc_sqlite.App, error) {\n\treturn nil, fmt.Errorf(\"not implemented\")\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Decompression Speed Comparison Table in Markdown\nDESCRIPTION: This markdown table compares the decompression speed of S2 and Snappy across various file types. It includes throughput measurements and relative performance metrics.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| File                                                                                                | S2 Throughput | vs. Snappy | Better Throughput | vs. Snappy |\n|-----------------------------------------------------------------------------------------------------|---------------|------------|-------------------|------------|\n| [rawstudio-mint14.tar](https://files.klauspost.com/compress/rawstudio-mint14.7z)                    | 2117 MB/s     | 1.14x      | 1738 MB/s         | 0.94x      |\n| [github-june-2days-2019.json](https://files.klauspost.com/compress/github-june-2days-2019.json.zst) | 2401 MB/s     | 1.25x      | 2307 MB/s         | 1.20x      |\n| [github-ranks-backup.bin](https://files.klauspost.com/compress/github-ranks-backup.bin.zst)         | 2075 MB/s     | 0.98x      | 1764 MB/s         | 0.83x      |\n| [consensus.db.10gb](https://files.klauspost.com/compress/consensus.db.10gb.zst)                     | 2967 MB/s     | 1.05x      | 2885 MB/s         | 1.02x      |\n| [adresser.json](https://files.klauspost.com/compress/adresser.json.zst)                             | 4141 MB/s     | 1.07x      | 4184 MB/s         | 1.08x      |\n| [gob-stream](https://files.klauspost.com/compress/gob-stream.7z)                                    | 2264 MB/s     | 1.12x      | 2185 MB/s         | 1.08x      |\n| [10gb.tar](http://mattmahoney.net/dc/10gb.html)                                                     | 1525 MB/s     | 1.03x      | 1347 MB/s         | 0.91x      |\n| sharnd.out.2gb                                                                                      | 3813 MB/s     | 0.79x      | 3900 MB/s         | 0.81x      |\n| [enwik9](http://mattmahoney.net/dc/textdata.html)                                                   | 1246 MB/s     | 1.29x      | 967 MB/s          | 1.00x      |\n| [silesia.tar](http://sun.aei.polsl.pl/~sdeor/corpus/silesia.zip)                                    | 1433 MB/s     | 1.12x      | 1203 MB/s         | 0.94x      |\n| [enwik10](https://encode.su/threads/3315-enwik10-benchmark-results)                                 | 1284 MB/s     | 1.32x      | 1010 MB/s         | 1.04x      |\n```\n\n----------------------------------------\n\nTITLE: Equivalent JSON Representation of HCL Object\nDESCRIPTION: Provides the JSON equivalent of the HCL object structure shown in the previous example. This demonstrates HCL's JSON compatibility.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/hashicorp/hcl/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variable\": {\n      \"ami\": {\n          \"description\": \"the AMI to use\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using IntSlice Flag with Input Source Support in Go\nDESCRIPTION: IntSliceFlag type that wraps cli.IntSliceFlag to support alternative input sources. It includes methods for creation, application to flag sets, and applying int slice values from input sources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_76\n\nLANGUAGE: go\nCODE:\n```\ntype IntSliceFlag struct {\n\t*cli.IntSliceFlag\n\t// Has unexported fields.\n}\n\nfunc NewIntSliceFlag(fl *cli.IntSliceFlag) *IntSliceFlag\n\nfunc (f *IntSliceFlag) Apply(set *flag.FlagSet) error\n\nfunc (f *IntSliceFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Lua Channel Select Example\nDESCRIPTION: Shows different ways of using channel.select in Lua with GopherLua, including receiving from multiple channels and handling channel states\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nlocal idx, recv, ok = channel.select(\n  {\"|<-\", ch1},\n  {\"|<-\", ch2}\n)\nif not ok then\n    print(\"closed\")\nelseif idx == 1 then -- received from ch1\n    print(recv)\nelseif idx == 2 then -- received from ch2\n    print(recv)\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nchannel.select(\n  {\"|<-\", ch1, function(ok, data)\n    print(ok, data)\n  end},\n  {\"<-|\", ch2, \"value\", function(data)\n    print(data)\n  end},\n  {\"default\", function()\n    print(\"default action\")\n  end}\n)\n```\n\n----------------------------------------\n\nTITLE: Formatting Ordinal Numbers in Go\nDESCRIPTION: This snippet demonstrates the use of the humanize.Ordinal function to convert a number into its ordinal form.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"You're my %s best friend.\", humanize.Ordinal(193)) // You are my 193rd best friend.\n```\n\n----------------------------------------\n\nTITLE: Installing LZ4 Command Line Tool in Go\nDESCRIPTION: Command to install the LZ4 command line interface tool for compressing and decompressing LZ4 files.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pierrec/lz4/v4/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/pierrec/lz4/v4/cmd/lz4c@latest\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Cluster Configuration\nDESCRIPTION: Creates and configures a new PostgreSQL database cluster with SSL support and custom settings.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jackc/pgx/v5/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninitdb --locale=en_US -E UTF-8 --username=postgres .testdb/$POSTGRESQL_DATA_DIR\n\necho \"listen_addresses = '127.0.0.1'\" >> .testdb/$POSTGRESQL_DATA_DIR/postgresql.conf\necho \"port = $PGPORT\" >> .testdb/$POSTGRESQL_DATA_DIR/postgresql.conf\ncat testsetup/postgresql_ssl.conf >> .testdb/$POSTGRESQL_DATA_DIR/postgresql.conf\ncp testsetup/pg_hba.conf .testdb/$POSTGRESQL_DATA_DIR/pg_hba.conf\n\ncd .testdb\n\n# Generate CA, server, and encrypted client certificates.\ngo run ../testsetup/generate_certs.go\n\n# Copy certificates to server directory and set permissions.\ncp ca.pem $POSTGRESQL_DATA_DIR/root.crt\ncp localhost.key $POSTGRESQL_DATA_DIR/server.key\nchmod 600 $POSTGRESQL_DATA_DIR/server.key\ncp localhost.crt $POSTGRESQL_DATA_DIR/server.crt\n\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Upgrading Cache Interface from v3 to v4\nDESCRIPTION: Changes to Cache interface methods to use interface{} instead of string for keys.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/graph-gophers/dataloader/MIGRATE.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n// cache interface now allows interface{} as key instead of string\ntype Cache interface {\n-\tGet(context.Context, string) (Thunk, bool)\n+\tGet(context.Context, interface{}) (Thunk, bool)\n-\tSet(context.Context, string, Thunk)\n+\tSet(context.Context, interface{}, Thunk)\n-\tDelete(context.Context, string) bool\n+\tDelete(context.Context, interface{}) bool\n\tClear()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Input Source from Flag in Go\nDESCRIPTION: Function that returns a generator for JSON-based InputSourceContext. It uses a file name defined by the specified flag to load JSON configuration data.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_61\n\nLANGUAGE: go\nCODE:\n```\nfunc NewJSONSourceFromFlagFunc(flag string) func(c *cli.Context) (InputSourceContext, error)\n```\n\n----------------------------------------\n\nTITLE: PathFlag Type and Methods in Go\nDESCRIPTION: Definition and implementation of PathFlag type that wraps cli.PathFlag with additional functionality\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_79\n\nLANGUAGE: go\nCODE:\n```\ntype PathFlag struct {\n\t*cli.PathFlag\n\t// Has unexported fields.\n}\n\nfunc NewPathFlag(fl *cli.PathFlag) *PathFlag\nfunc (f *PathFlag) Apply(set *flag.FlagSet) error\nfunc (f *PathFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Function with Event Timeout\nDESCRIPTION: Shows an Inngest function that waits for an event with a timeout, potentially timing out if the event doesn't occur.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/utils/historyParser/testData/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: 'Times out waiting for event' },\n  { event: 'foo' },\n  async ({ step }) => {\n    await step.waitForEvent('bar', '10s');\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Uint64Flag Structure in Go\nDESCRIPTION: Definition of the Uint64Flag structure representing a flag with an unsigned 64-bit integer value, including fields for name, usage, value, and flag characteristics.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_50\n\nLANGUAGE: go\nCODE:\n```\ntype Uint64Flag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       uint64\n\tDestination *uint64\n\n\tAliases []string\n\tEnvVars []string\n\n\tBase int\n\n\tAction func(*Context, uint64) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Afero Package in Go\nDESCRIPTION: Basic import statement to include Afero in a Go application.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/afero\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom White Reference Points for Color Conversion (Go)\nDESCRIPTION: This snippet shows how to use custom white reference points when converting colors between different color spaces using the go-colorful library.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nc := colorful.LabWhiteRef(0.507850, 0.040585,-0.370945, colorful.D50)\nl, a, b := c.LabWhiteRef(colorful.D50)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking CPU Usage for JSON vs CBOR Encoding in Go\nDESCRIPTION: This code snippet shows benchmark results comparing the CPU usage of JSON and CBOR encoding for various logging operations. It demonstrates significant performance improvements with CBOR for most operations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/internal/cbor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nname                                    JSON time/op    CBOR time/op   delta\nInfo-32                                   15.3ns ± 1%    11.7ns ± 3%  -23.78%  (p=0.000 n=9+10)      \nContextFields-32                          16.2ns ± 2%    12.3ns ± 3%  -23.97%  (p=0.000 n=9+9)       \nContextAppend-32                          6.70ns ± 0%    6.20ns ± 0%   -7.44%  (p=0.000 n=9+9)       \nLogFields-32                              66.4ns ± 0%    24.6ns ± 2%  -62.89%  (p=0.000 n=10+9)      \nLogArrayObject-32                          911ns ±11%     768ns ± 6%  -15.64%  (p=0.000 n=10+10)     \nLogFieldType/Floats-32                    70.3ns ± 2%    29.5ns ± 1%  -57.98%  (p=0.000 n=10+10)     \nLogFieldType/Err-32                       14.0ns ± 3%    12.1ns ± 8%  -13.20%  (p=0.000 n=8+10)      \nLogFieldType/Dur-32                       17.2ns ± 2%    13.1ns ± 1%  -24.27%  (p=0.000 n=10+9)      \nLogFieldType/Object-32                    54.3ns ±11%    52.3ns ± 7%     ~     (p=0.239 n=10+10)     \nLogFieldType/Ints-32                      20.3ns ± 2%    15.1ns ± 2%  -25.50%  (p=0.000 n=9+10)      \nLogFieldType/Interfaces-32                 642ns ±11%     621ns ± 9%     ~     (p=0.118 n=10+10)     \nLogFieldType/Interface(Objects)-32         635ns ±13%     632ns ± 9%     ~     (p=0.592 n=10+10)     \nLogFieldType/Times-32                      294ns ± 0%      27ns ± 1%  -90.71%  (p=0.000 n=10+9)      \nLogFieldType/Durs-32                       121ns ± 0%      33ns ± 2%  -72.44%  (p=0.000 n=9+9)       \nLogFieldType/Interface(Object)-32         56.6ns ± 8%    52.3ns ± 8%   -7.54%  (p=0.007 n=10+10)     \nLogFieldType/Errs-32                      17.8ns ± 3%    16.1ns ± 2%   -9.71%  (p=0.000 n=10+9)      \nLogFieldType/Time-32                      40.5ns ± 1%    12.7ns ± 6%  -68.66%  (p=0.000 n=8+9)       \nLogFieldType/Bool-32                      12.0ns ± 5%    10.2ns ± 2%  -15.18%  (p=0.000 n=10+8)      \nLogFieldType/Bools-32                     17.2ns ± 2%    12.6ns ± 4%  -26.63%  (p=0.000 n=10+10)     \nLogFieldType/Int-32                       12.3ns ± 2%    11.2ns ± 4%   -9.27%  (p=0.000 n=9+10)      \nLogFieldType/Float-32                     16.7ns ± 1%    12.6ns ± 2%  -24.42%  (p=0.000 n=7+9)       \nLogFieldType/Str-32                       12.7ns ± 7%    11.3ns ± 7%  -10.88%  (p=0.000 n=10+9)      \nLogFieldType/Strs-32                      20.3ns ± 3%    18.2ns ± 3%  -10.25%  (p=0.000 n=9+10)      \nLogFieldType/Interface-32                  183ns ±12%     175ns ± 9%     ~     (p=0.078 n=10+10)     \n```\n```\n\n----------------------------------------\n\nTITLE: UintFlag Type and Methods in Go\nDESCRIPTION: Definition and implementation of UintFlag type that wraps cli.UintFlag with additional functionality\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_83\n\nLANGUAGE: go\nCODE:\n```\ntype UintFlag struct {\n\t*cli.UintFlag\n\t// Has unexported fields.\n}\n\nfunc NewUintFlag(fl *cli.UintFlag) *UintFlag\nfunc (f *UintFlag) Apply(set *flag.FlagSet) error\nfunc (f *UintFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Installing NATS Go Client and Server\nDESCRIPTION: Commands to install the NATS Go client and server using Go modules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Go client\ngo get github.com/nats-io/nats.go/\n\n# Server\ngo get github.com/nats-io/nats-server\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Go client latest or explicit version\ngo get github.com/nats-io/nats.go/@latest\ngo get github.com/nats-io/nats.go/@v1.37.0\n\n# For latest NATS Server, add /v2 at the end\ngo get github.com/nats-io/nats-server/v2\n\n# NATS Server v1 is installed otherwise\n# go get github.com/nats-io/nats-server\n```\n\n----------------------------------------\n\nTITLE: Importing GopherLua Package in Go\nDESCRIPTION: Demonstrates how to import the GopherLua package in a Go program.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/yuin/gopher-lua\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Flag Interface for Viper in Go\nDESCRIPTION: Shows how to implement the FlagValue interface to bind custom flag implementations to Viper.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype myFlag struct {}\nfunc (f myFlag) HasChanged() bool { return false }\nfunc (f myFlag) Name() string { return \"my-flag-name\" }\nfunc (f myFlag) ValueString() string { return \"my-flag-value\" }\nfunc (f myFlag) ValueType() string { return \"string\" }\n```\n\n----------------------------------------\n\nTITLE: Installing OjG using Go Get\nDESCRIPTION: Commands for installing the OjG library and command line tool using go get.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ohler55/ojg\ngo get github.com/ohler55/ojg/cmd/oj\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Boolean Flag with Input Source Support in Go\nDESCRIPTION: BoolFlag type that wraps cli.BoolFlag to support alternative input sources. It includes methods for creation, application to flag sets, and applying values from input sources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_64\n\nLANGUAGE: go\nCODE:\n```\ntype BoolFlag struct {\n\t*cli.BoolFlag\n\t// Has unexported fields.\n}\n\nfunc NewBoolFlag(fl *cli.BoolFlag) *BoolFlag\n\nfunc (f *BoolFlag) Apply(set *flag.FlagSet) error\n\nfunc (f *BoolFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Running Linter and Tests in Go Project\nDESCRIPTION: Commands for running the linter and test suite, with options to specify database and source tests.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngolangci-lint run\nmake test-short\nmake test\nmake test-short SOURCE='file go_bindata' DATABASE='postgres cassandra'\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Flag in Go using pflag\nDESCRIPTION: Demonstrates how to define an integer flag named 'flagname' with a default value and help message using pflag.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Signing Key Header Example in Bash\nDESCRIPTION: Demonstrates the process of creating an authorization header from an Inngest signing key, including the original key, hashed version, and final header format.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# original signing key (hex-encoded)\nsignkey-prod-12345678\n\n# hashed signing key\nsignkey-prod-b2ed992186a5cb19f6668aade821f502c1d00970dfd0e35128d51bac4649916c\n\n# header\nAuthorization: Bearer signkey-prod-b2ed992186a5cb19f6668aade821f502c1d00970dfd0e35128d51bac4649916c\n```\n\n----------------------------------------\n\nTITLE: Updating Testing Dependencies in go_test.mod\nDESCRIPTION: This command updates the testing dependencies using go_test.mod file to avoid changing the main go.mod in a pull request.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy -modfile=go_test.mod\n```\n\n----------------------------------------\n\nTITLE: Running Inngest CLI in Development Mode\nDESCRIPTION: This command starts the Inngest CLI in development mode, specifying a local API endpoint.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dev-server-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo run ./cmd/main.go dev -u http://localhost:3000/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Docker Container\nDESCRIPTION: This Docker command starts a PostgreSQL container and exposes port 5432 for testing purposes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --expose 5432:5432 postgres\n```\n\n----------------------------------------\n\nTITLE: Displaying Expected Go Runtime Dependency in go.mod\nDESCRIPTION: Demonstrates the expected and more intuitive way the Go runtime dependency should appear in go.mod files, which is achieved by using this separate repository.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/antlr4-go/antlr/v4/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nrequire (\n    github.com/antlr/antlr4/runtime/Go/antlr/v4 v4.13.0\n)\n```\n\n----------------------------------------\n\nTITLE: Processing Cognito Sync Events with Go Lambda Function\nDESCRIPTION: A Go-based AWS Lambda function that receives Cognito Sync events and logs dataset changes. The function iterates through dataset records and prints event type, dataset name, old value, operation type, and new value to CloudWatch Logs. Uses aws-lambda-go SDK for handling Lambda events.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_Cognito.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/aws/aws-lambda-go/lambda\"\n    \"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handler(cognitoEvent events.CognitoEvent) error {\n    for datasetName, datasetRecord := range cognitoEvent.DatasetRecords {\n        fmt.Printf(\"[%s -- %s] %s -> %s -> %s \\n\",\n            cognitoEvent.EventType,\n            datasetName,\n            datasetRecord.OldValue,\n            datasetRecord.Op,\n            datasetRecord.NewValue)\n    }\n    return nil\n}\n\nfunc main() {\n    lambda.Start(handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Uint64Flag Methods in Go\nDESCRIPTION: Method implementations for Uint64Flag including applying to a flag set, getting values and metadata, and checking flag state.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_51\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *Uint64Flag) Apply(set *flag.FlagSet) error\n    Apply populates the flag given the flag set and environment\n\nfunc (f *Uint64Flag) Get(ctx *Context) uint64\n    Get returns the flag's value in the given Context.\n\nfunc (f *Uint64Flag) GetCategory() string\n    GetCategory returns the category for the flag\n\nfunc (f *Uint64Flag) GetDefaultText() string\n```\n\n----------------------------------------\n\nTITLE: Installing Go OpenAI Package\nDESCRIPTION: Command to install the go-openai package using Go modules\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/sashabaranov/go-openai\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Connection URL\nDESCRIPTION: Exports database connection URL with credentials and SSL configuration.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/postgres/TUTORIAL.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport POSTGRESQL_URL='postgres://postgres:password@localhost:5432/example?sslmode=disable'\n```\n\n----------------------------------------\n\nTITLE: Calling Go Function Double in Lua\nDESCRIPTION: This Lua snippet demonstrates calling the Go function `double` which has been registered in the Go code using GopherLua. It calls `double` with the argument 20 and prints the returned value. The expected output is 40.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nprint(double(20)) -- > \"40\"\n```\n\n----------------------------------------\n\nTITLE: Go Generate Command Example\nDESCRIPTION: Shows how to use go:generate to run Enumer in a module-aware Go project.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dmarkham/enumer/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n//go:generate go run github.com/dmarkham/enumer -type=YOURTYPE\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmarks\nDESCRIPTION: This command shows how to run the benchmark suite as part of the tests using the Go test command with the bench flag.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -bench .\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Performance Benchmarks in Go\nDESCRIPTION: Raw benchmark results showing performance metrics for different logging operations including empty logs, disabled logs, info logs, context fields, and log fields. All operations are allocation free and include JSON encoding.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkLogEmpty-8        100000000    19.1 ns/op     0 B/op       0 allocs/op\nBenchmarkDisabled-8        500000000    4.07 ns/op     0 B/op       0 allocs/op\nBenchmarkInfo-8            30000000     42.5 ns/op     0 B/op       0 allocs/op\nBenchmarkContextFields-8   30000000     44.9 ns/op     0 B/op       0 allocs/op\nBenchmarkLogFields-8       10000000     184 ns/op      0 B/op       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Importing Cron v3 Package in Go\nDESCRIPTION: Import statement for including the cron v3 package in a Go program. Requires Go 1.11 or later due to Go Modules usage.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/robfig/cron/v3\"\n```\n\n----------------------------------------\n\nTITLE: Generating Command Builders with go generate\nDESCRIPTION: This snippet provides the command to generate command builders using Go's `go generate` based on predefined command definitions in a specific directory. This aids in automating the creation of boilerplate code for redis command construction.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/README.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ngo generate\n```\n\n----------------------------------------\n\nTITLE: Example JSON Configuration for Consul Key/Value Store\nDESCRIPTION: An example JSON configuration that would be stored in Consul under a specific key.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"port\": 8080,\n    \"hostname\": \"myhostname.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Connection String Format\nDESCRIPTION: Demonstrates the basic format for SQLite connection strings used in database migrations. The connection string includes the path to the database file and optional query parameters.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/sqlite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsqlite://path/to/database?query\n```\n\n----------------------------------------\n\nTITLE: Binding Flag to Variable in Go using pflag\nDESCRIPTION: Shows how to bind a flag to a variable using the Var() functions in pflag. This example binds an integer flag to a variable.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wire CLI Tool\nDESCRIPTION: Command to install the Wire code generation tool using Go's package manager. Requires adding $GOPATH/bin to system PATH.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/google/wire/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/google/wire/cmd/wire@latest\n```\n\n----------------------------------------\n\nTITLE: Importing OjG Packages in Go\nDESCRIPTION: Example of importing various OjG packages in Go source files.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/README.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\nimport (\n    \"github.com/ohler55/ojg/alt\"\n    \"github.com/ohler55/ojg/asm\"\n    \"github.com/ohler55/ojg/gen\"\n    \"github.com/ohler55/ojg/jp\"\n    \"github.com/ohler55/ojg/oj\"\n    \"github.com/ohler55/ojg/sen\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Exit Functionality in Go\nDESCRIPTION: This snippet defines a variable for exiting the application, defaulting to the standard os.Exit function unless overridden. This is essential for gracefully terminating an application.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar OsExiter = os.Exit\n    OsExiter is the function used when the app exits. If not set defaults to\n    os.Exit.\n```\n\n----------------------------------------\n\nTITLE: Invoke Function Step Operation Response Structure in TypeScript\nDESCRIPTION: Defines the structure for an Invoke step that triggers another Inngest function and waits for its response. It specifies the function to invoke via its Composite ID and the payload event to send.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tid: string;\n\top: \"InvokeFunction\";\n\topts: {\n\t\tfunction_id: string;\n\t\tpayload: Event;\n\t};\n\tdisplayName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Package Variables in Go\nDESCRIPTION: This snippet defines package-level variables used for suggestion functionality and templates in the cli package. It includes functions for suggesting flags and commands, as well as a template for suggestions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\tSuggestFlag               SuggestFlagFunc    = suggestFlag\n\tSuggestCommand            SuggestCommandFunc = suggestCommand\n\tSuggestDidYouMeanTemplate string             = suggestDidYouMeanTemplate\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Claims Interface in Go\nDESCRIPTION: New Claims interface definition that represents JWT claims as a list of getters to retrieve values with specific meanings. This replaces the previous Valid() error implementation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Claims interface {\n\tGetExpirationTime() (*NumericDate, error)\n\tGetIssuedAt() (*NumericDate, error)\n\tGetNotBefore() (*NumericDate, error)\n\tGetIssuer() (string, error)\n\tGetSubject() (string, error)\n\tGetAudience() (ClaimStrings, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Sender Function in Go with GopherLua\nDESCRIPTION: Demonstrates sending values through channels using GopherLua's channel API and Go channel operations\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nfunc sender(ch, quit chan lua.LValue) {\n    L := lua.NewState()\n    defer L.Close()\n    L.SetGlobal(\"ch\", lua.LChannel(ch))\n    L.SetGlobal(\"quit\", lua.LChannel(quit))\n    if err := L.DoString(`\n    ch:send(\"1\")\n    ch:send(\"2\")\n  `); err != nil {\n        panic(err)\n    }\n    ch <- lua.LString(\"3\")\n    quit <- lua.LTrue\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Configuration Structure in JSON\nDESCRIPTION: Example JSON configuration file showing nested configuration structure for host and datastore settings.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"host\": {\n        \"address\": \"localhost\",\n        \"port\": 5799\n    },\n    \"datastore\": {\n        \"metric\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 3099\n        },\n        \"warehouse\": {\n            \"host\": \"198.0.0.1\",\n            \"port\": 2112\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbose Logging\nDESCRIPTION: Example showing how to configure verbose logging using a custom logger wrapper.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ncron.New(\n    cron.WithLogger(cron.VerbosePrintfLogger(logger)))\n```\n\n----------------------------------------\n\nTITLE: Using Tracking Mode in CCache with Go\nDESCRIPTION: Demonstrates how to use tracking mode to retrieve and release items, preventing automatic purging until explicitly released.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/karlseguin/ccache/v2/readme.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nitem := cache.TrackingGet(\"user:4\")\nuser := item.Value()   //will be nil if \"user:4\" didn't exist in the cache\nitem.Release()  //can be called even if item.Value() returned nil\n```\n\n----------------------------------------\n\nTITLE: Markdown Processing with No Extensions in Go\nDESCRIPTION: Shows how to process Markdown input using Blackfriday without any extensions, adhering strictly to the basic Markdown specification.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/russross/blackfriday/v2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\noutput := blackfriday.Run(input, blackfriday.WithNoExtensions())\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Duration Flag with Input Source Support in Go\nDESCRIPTION: DurationFlag type that wraps cli.DurationFlag to support alternative input sources. It includes methods for creation, application to flag sets, and applying duration values from input sources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_65\n\nLANGUAGE: go\nCODE:\n```\ntype DurationFlag struct {\n\t*cli.DurationFlag\n\t// Has unexported fields.\n}\n\nfunc NewDurationFlag(fl *cli.DurationFlag) *DurationFlag\n\nfunc (f *DurationFlag) Apply(set *flag.FlagSet) error\n\nfunc (f *DurationFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Checking Windows Explorer Process Launch in Go\nDESCRIPTION: Function signature for detecting if the current process was started by Windows Explorer double-click. Returns a boolean indicating the launch method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/inconshreveable/mousetrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Implementing Int64Slice in Go\nDESCRIPTION: Int64Slice wraps []int64 to satisfy flag.Value interface. It provides methods for getting, setting, and serializing int64 slice values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\ntype Int64Slice struct {\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Applying OpenCensus Tags as Profiler Labels in Go\nDESCRIPTION: Example of applying OpenCensus tags as profiler labels for Go 1.9 and above.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx, err = tag.New(ctx,\n\ttag.Insert(osKey, \"macOS-10.12.5\"),\n\ttag.Insert(userIDKey, \"fff0989878\"),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\ntag.Do(ctx, func(ctx context.Context) {\n\t// Do work.\n\t// When profiling is on, samples will be\n\t// recorded with the key/values from the tag map.\n})\n```\n\n----------------------------------------\n\nTITLE: Running Inngest Dev Server with CLI\nDESCRIPTION: Command to run the Inngest Dev Server using the Inngest CLI. The Dev Server provides a local development environment with production parity for testing Inngest functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx inngest-cli@latest dev\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection String Format\nDESCRIPTION: Standard PostgreSQL connection string format showing the basic structure with optional parameters. Supports both postgres:// and postgresql:// protocols.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/postgres/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\npostgres://user:password@host:port/dbname?query\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flag Value from FlagSet in Go using pflag\nDESCRIPTION: Shows how to use helper functions to get the value stored in a Flag when working with a FlagSet in pflag.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading Interface Methods from v4 to v5\nDESCRIPTION: Changes to method signatures replacing interface{} with custom Key type.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/graph-gophers/dataloader/MIGRATE.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n// dataloader.Interface as now allows interace{} as key rather than string\n- loader.Load(context.Context, key interface{}) Thunk\n+ loader.Load(ctx context.Context, key Key) Thunk\n- loader.LoadMany(context.Context, key []interface{}) ThunkMany\n+ loader.LoadMany(ctx context.Context, keys Keys) ThunkMany\n- loader.Prime(context.Context, key interface{}, value interface{}) Interface\n+ loader.Prime(ctx context.Context, key Key, value interface{}) Interface\n- loader.Clear(context.Context, key interface{}) Interface\n+ loader.Clear(ctx context.Context, key Key) Interface\n```\n\n----------------------------------------\n\nTITLE: Forcing GraphQL Codegen Execution\nDESCRIPTION: This command manually triggers the GraphQL Codegen process for updating query hooks.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dev-server-ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev:codegen\n```\n\n----------------------------------------\n\nTITLE: Map-based Input Source Implementation in Go\nDESCRIPTION: MapInputSource implements the InputSourceContext interface using a map data structure. It provides methods to extract various typed values from the underlying map for use with CLI flags.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_77\n\nLANGUAGE: go\nCODE:\n```\ntype MapInputSource struct {\n\t// Has unexported fields.\n}\n\nfunc NewMapInputSource(file string, valueMap map[interface{}]interface{}) *MapInputSource\n\nfunc (fsm *MapInputSource) Bool(name string) (bool, error)\nfunc (fsm *MapInputSource) Duration(name string) (time.Duration, error)\nfunc (fsm *MapInputSource) Float64(name string) (float64, error)\nfunc (fsm *MapInputSource) Float64Slice(name string) ([]float64, error)\nfunc (fsm *MapInputSource) Generic(name string) (cli.Generic, error)\nfunc (fsm *MapInputSource) Int(name string) (int, error)\nfunc (fsm *MapInputSource) Int64(name string) (int64, error)\nfunc (fsm *MapInputSource) Int64Slice(name string) ([]int64, error)\n```\n\n----------------------------------------\n\nTITLE: LState Pool Pattern Implementation\nDESCRIPTION: Creates a thread-safe pool mechanism for managing Lua state instances across multiple goroutines using sync.Pool\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\ntype lStatePool struct {\n    m     sync.Mutex\n    saved []*lua.LState\n}\n\nfunc (pl *lStatePool) Get() *lua.LState {\n    pl.m.Lock()\n    defer pl.m.Unlock()\n    n := len(pl.saved)\n    if n == 0 {\n        return pl.New()\n    }\n    x := pl.saved[n-1]\n    pl.saved = pl.saved[0 : n-1]\n    return x\n}\n\nfunc (pl *lStatePool) New() *lua.LState {\n    L := lua.NewState()\n    // setting the L up here.\n    // load scripts, set global variables, share channels, etc...\n    return L\n}\n\nfunc (pl *lStatePool) Put(L *lua.LState) {\n    pl.m.Lock()\n    defer pl.m.Unlock()\n    pl.saved = append(pl.saved, L)\n}\n\nfunc (pl *lStatePool) Shutdown() {\n    for _, L := range pl.saved {\n        L.Close()\n    }\n}\n\n// Global LState pool\nvar luaPool = &lStatePool{\n    saved: make([]*lua.LState, 0, 4),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Writer in Go CLI Package\nDESCRIPTION: This snippet defines the ErrWriter variable, which is used to write errors to the user in the cli package. It defaults to os.Stderr but can be set to any io.Writer implementation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar ErrWriter io.Writer = os.Stderr\n```\n\n----------------------------------------\n\nTITLE: Using Lua Module in Lua (main.lua)\nDESCRIPTION: This Lua script demonstrates how to use a custom Lua module that has been preloaded into the Lua state from Go code. It requires the module named \"mymodule\", calls the `myfunc` function within the module, and prints the value of the `name` field of the module.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal m = require(\"mymodule\")\nm.myfunc()\nprint(m.name)\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Geohash Implementation in Go\nDESCRIPTION: This snippet defines constants used in the geohash algorithm implementation. It includes the maximum and minimum latitude and longitude values, as well as the base32 encoding alphabet.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/alicebob/miniredis/v2/geohash/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n\tmaxLat  = 85.0511287798\n\tminLat  = -85.0511287798\n\tmaxLng  = 180.0\n\tminLng  = -180.0\n\n\tencodeChars = \"0123456789bcdefghjkmnpqrstuvwxyz\"\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Sync Failure Response in Inngest SDK\nDESCRIPTION: Defines the JSON response structure for a failed sync operation in an Inngest SDK. This structure is used when the sync fails with a 400 Bad Request status.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n{\n\terror: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GopherLua Callstack Size\nDESCRIPTION: Shows how to set the callstack size and enable auto-resizing for a GopherLua VM.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nL := lua.NewState(lua.Options{\n    CallStackSize: 120,                 // this is the maximum callstack size of this LState\n    MinimizeStackMemory: true,          // Defaults to `false` if not specified. If set, the callstack will auto grow and shrink as needed up to a max of `CallStackSize`. If not set, the callstack will be fixed at `CallStackSize`.\n})\ndefer L.Close()\n```\n\n----------------------------------------\n\nTITLE: Applying Colors to Text in Go with termenv\nDESCRIPTION: Example of applying foreground and background colors to text using termenv, with support for different color formats.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ns := termenv.String(\"Hello World\")\n\n// Retrieve color profile supported by terminal\np := termenv.ColorProfile()\n\n// Supports hex values\n// Will automatically degrade colors on terminals not supporting RGB\ns.Foreground(p.Color(\"#abcdef\"))\n// but also supports ANSI colors (0-255)\ns.Background(p.Color(\"69\"))\n// ...or the color.Color interface\ns.Foreground(p.FromColor(color.RGBA{255, 128, 0, 255}))\n\n// Combine fore- & background colors\ns.Foreground(p.Color(\"#ffffff\")).Background(p.Color(\"#0000ff\"))\n\n// Supports the fmt.Stringer interface\nfmt.Println(s)\n```\n\n----------------------------------------\n\nTITLE: Defining Float64SliceFlag Structure in Go\nDESCRIPTION: Float64SliceFlag is a flag with type *Float64Slice. It includes methods for applying, getting, and manipulating slice flag values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\ntype Float64SliceFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       *Float64Slice\n\tDestination *Float64Slice\n\n\tAliases []string\n\tEnvVars []string\n\n\tAction func(*Context, []float64) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining xxhash API Functions in Go\nDESCRIPTION: This snippet shows the main API functions provided by the xxhash package. It includes functions for calculating hash sums and a Digest struct for streaming hashing.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Flag Input Source Extension Interface in Go\nDESCRIPTION: Interface that extends cli.Flag to support setting values from external input sources. Implementing types must provide a method to apply input source values to parsed flags.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_66\n\nLANGUAGE: go\nCODE:\n```\ntype FlagInputSourceExtension interface {\n\tcli.Flag\n\tApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Terminal Cursor Position\nDESCRIPTION: Uses ANSI escape sequence to request the current cursor position. The terminal should respond with the position information.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033[6n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Flag Interface in Go\nDESCRIPTION: Defines the Flag interface which is a common interface for parsing flags in CLI. It includes methods for applying flag settings, getting names, and checking if the flag is set.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\ntype Flag interface {\n\tfmt.Stringer\n\t// Apply Flag settings to the given flag set\n\tApply(*flag.FlagSet) error\n\tNames() []string\n\tIsSet() bool\n}\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for xxHash in Go\nDESCRIPTION: This snippet shows the commands used to run benchmarks comparing the pure Go and assembly implementations of Sum64. It uses the go test command with specific flags to generate performance statistics.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Sequential Integer Migration Filename Example\nDESCRIPTION: Example of migration files using sequential integer versioning scheme.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/MIGRATIONS.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1_initialize_schema.down.sql\\n1_initialize_schema.up.sql\\n2_add_table.down.sql\\n2_add_table.up.sql\n```\n\n----------------------------------------\n\nTITLE: Defining Flags with Shorthands in Go using pflag\nDESCRIPTION: Demonstrates how to define flags with one-letter shorthands using pflag's 'P' suffix functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Go Code for HTTP JSON Error Schema\nDESCRIPTION: This shell command regenerates the protobuf Go code for the error.proto file. It requires a local copy of googleapis, the protoc compiler, the Go protobuf plugin, and the goimports tool.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/googleapis/gax-go/v2/apierror/internal/proto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nprotoc -I $GOOGLEAPIS -I. --go_out=. --go_opt=module=github.com/googleapis/gax-go/v2/apierror/internal/proto error.proto\ngoimports -w .\n```\n\n----------------------------------------\n\nTITLE: Disabling interface getters in gqlgen.yml\nDESCRIPTION: YAML configuration to disable the generation of getters for interface fields.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nomit_getters: true\n```\n\n----------------------------------------\n\nTITLE: MapInputSource Method Implementations in Go\nDESCRIPTION: Implementations of various getter methods for MapInputSource type that retrieve values from a map with type conversion\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_78\n\nLANGUAGE: go\nCODE:\n```\nfunc (fsm *MapInputSource) IntSlice(name string) ([]int, error)\nfunc (fsm *MapInputSource) Source() string\nfunc (fsm *MapInputSource) String(name string) (string, error)\nfunc (fsm *MapInputSource) StringSlice(name string) ([]string, error)\nfunc (fsm *MapInputSource) Uint(name string) (uint, error)\nfunc (fsm *MapInputSource) Uint64(name string) (uint64, error)\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Grapheme Clusters in Go\nDESCRIPTION: This snippet demonstrates how to use the uniseg package to iterate over grapheme clusters in a string. It creates a Graphemes object from a string containing emoji and text, then prints the Unicode code points for each grapheme cluster.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rivo/uniseg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage uniseg\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/rivo/uniseg\"\n)\n\nfunc main() {\n\tgr := uniseg.NewGraphemes(\"👍🏼!\")\n\tfor gr.Next() {\n\t\tfmt.Printf(\"%x \", gr.Runes())\n\t}\n\t// Output: [1f44d 1f3fc] [21]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Go Repository in Shell\nDESCRIPTION: Command to clone the OpenTelemetry Go SDK repository using Git.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: Starting Inngest UI in Development Mode\nDESCRIPTION: This command runs the Inngest UI in development mode, concurrently executing Next.js and GraphQL codegen.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dev-server-ui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Benchmarking chi HTTP Router in Go\nDESCRIPTION: This benchmark suite measures the performance of the chi HTTP router across various scenarios, such as parameter handling and static routing, using Go 1.15.5 on a Linux AMD 3950x setup. It provides metrics like the number of operations per second (ns/op), bytes allocated per operation (B/op), and number of allocations per operation (allocs/op).\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nBenchmarkChi_Param          \t3075895        \t384 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_Param5         \t2116603        \t566 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_Param20        \t964117       \t1227 ns/op     \t400 B/op      2 allocs/op\nBenchmarkChi_ParamWrite     \t2863413        \t420 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_GithubStatic   \t3045488        \t395 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_GithubParam    \t2204115        \t540 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_GithubAll      \t 10000      \t113811 ns/op    \t81203 B/op    406 allocs/op\nBenchmarkChi_GPlusStatic    \t3337485        \t359 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_GPlusParam     \t2825853        \t423 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_GPlus2Params   \t2471697        \t483 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_GPlusAll       \t 194220       \t5950 ns/op     \t5200 B/op     26 allocs/op\nBenchmarkChi_ParseStatic    \t3365324        \t356 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_ParseParam     \t2976614        \t404 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_Parse2Params   \t2638084        \t439 ns/op      \t400 B/op      2 allocs/op\nBenchmarkChi_ParseAll       \t 109567      \t11295 ns/op    \t10400 B/op     52 allocs/op\nBenchmarkChi_StaticAll      \t  16846      \t71308 ns/op    \t62802 B/op    314 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Sync Process Flow Diagram\nDESCRIPTION: Mermaid sequence diagram showing the sync process between an initiator, SDK, and Inngest server, including success and failure paths.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\nparticipant ?\nparticipant SDK\nparticipant Inngest\n\n?->>+SDK: 1. PUT\nSDK->>+Inngest: 2. POST<br/>Sync Endpoint\nalt 3. Failure\n    Inngest-->>SDK: 500\n    SDK-->>?: 500\nelse 4. Success\n    Inngest-->>-SDK: 200\n    SDK-->>-?: 200\nend\n```\n\n----------------------------------------\n\nTITLE: Instantiating Objects with Options in Go\nDESCRIPTION: Shows the standard pattern for instantiating objects using the options configuration pattern. The NewT function accepts variadic options for flexible configuration.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc NewT(options ...Option) T {…}\n```\n\n----------------------------------------\n\nTITLE: Inheriting Styles in Lip Gloss\nDESCRIPTION: This code shows how styles can inherit rules from other styles, with only unset rules being inherited.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar styleA = lipgloss.NewStyle().\n    Foreground(lipgloss.Color(\"229\")).\n    Background(lipgloss.Color(\"63\"))\n\n// Only the background color will be inherited here, because the foreground\n// color will have been already set:\nvar styleB = lipgloss.NewStyle().\n    Foreground(lipgloss.Color(\"201\")).\n    Inherit(styleA)\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Methods in Go\nDESCRIPTION: Method implementations for Timestamp including creation, getting and setting values, string representation, and handling time formats and locations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_47\n\nLANGUAGE: go\nCODE:\n```\nfunc NewTimestamp(timestamp time.Time) *Timestamp\n    Timestamp constructor\n\nfunc (t *Timestamp) Get() interface{}\n    Get returns the flag structure\n\nfunc (t *Timestamp) Set(value string) error\n    Parses the string value to timestamp\n\nfunc (t *Timestamp) SetLayout(layout string)\n    Set the timestamp string layout for future parsing\n\nfunc (t *Timestamp) SetLocation(loc *time.Location)\n    Set perceived timezone of the to-be parsed time string\n\nfunc (t *Timestamp) SetTimestamp(value time.Time)\n    Set the timestamp value directly\n\nfunc (t *Timestamp) String() string\n    String returns a readable representation of this value (for usage defaults)\n\nfunc (t *Timestamp) Value() *time.Time\n    Value returns the timestamp value stored in the flag\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Source Context for CLI Commands in Go\nDESCRIPTION: Function that sets up an InputSourceContext on a cli.Command's Before method. It creates a new input source based on the provided function and applies it to supported flags.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_60\n\nLANGUAGE: go\nCODE:\n```\nfunc InitInputSourceWithContext(flags []cli.Flag, createInputSource func(cCtx *cli.Context) (InputSourceContext, error)) cli.BeforeFunc\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Cursor Color using ANSI Escape Sequences\nDESCRIPTION: Uses ANSI escape sequence to change the terminal cursor color to red (#ff0000). The command uses OSC 12 for cursor color modification.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]12;#ff0000\\007\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in Main Function (Go)\nDESCRIPTION: This snippet demonstrates how to create a root logger in the main function of a Go application using a hypothetical 'logimpl' implementation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-logr/logr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // ... other setup code ...\n\n    // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n    // which takes some initial parameters and returns a logr.Logger.\n    logger := logimpl.New(param1, param2)\n\n    // ... other setup code ...\n```\n\n----------------------------------------\n\nTITLE: Setting Values in a Key/Value Store using crypt Command Line\nDESCRIPTION: Shows how to use the crypt command line tool to set values in a key/value store like etcd for use with Viper.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/bketelsen/crypt/bin/crypt\n$ crypt set -plaintext /config/hugo.json /Users/hugo/settings/config.json\n```\n\n----------------------------------------\n\nTITLE: Implementing petname in Golang\nDESCRIPTION: A Go program that uses the golang-petname library to generate pet names. It demonstrates setting up command-line flags for customizing the output.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustinkirkland/golang-petname/README.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n        \"flag\"\n        \"fmt\"\n        \"math/rand\"\n        \"time\"\n        \"github.com/dustinkirkland/golang-petname\"\n)\n\nvar (\n        words = flag.Int(\"words\", 2, \"The number of words in the pet name\")\n        separator = flag.String(\"separator\", \"-\", \"The separator between words in the pet name\")\n)\n\nfunc init() {\n        rand.Seed(time.Now().UTC().UnixNano())\n}\n\nfunc main() {\n        flag.Parse()\n        rand.Seed(time.Now().UnixNano())\n        fmt.Println(petname.Generate(*words, *separator))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Query Definition\nDESCRIPTION: Defines a new example query in SQLite syntax to select an app by ID. This serves as the base query that other storage layers must implement.\nSOURCE: https://github.com/inngest/inngest/blob/main/pkg/cqrs/base_cqrs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- name: NewExampleQuery :one\nSELECT * FROM apps WHERE id = ? LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Go Enum Type Definition Example\nDESCRIPTION: Demonstrates how to define an enum type in Go using the Pill example with iota for automatic value assignment.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dmarkham/enumer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Pill int\n\nconst (\n\tPlacebo Pill = iota\n\tAspirin\n\tIbuprofen\n\tParacetamol\n\tAcetaminophen = Paracetamol\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linters for go-strcase\nDESCRIPTION: Commands for running code analysis, linting, and tests for the go-strcase package using golangci-lint and go test.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/stoewer/go-strcase/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngolangci-lint run --config .golangci.yml ./...\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL User Creation\nDESCRIPTION: Creates a superuser postgres role for testing purposes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jackc/pgx/v5/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncreateuser -s postgres\n```\n\n----------------------------------------\n\nTITLE: Defining Countable Interface in Go\nDESCRIPTION: Defines the Countable interface for detecting flag values that support repetitive flags. It includes a single method Count() that returns an integer.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\ntype Countable interface {\n\tCount() int\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Int Flag with Input Source Support in Go\nDESCRIPTION: IntFlag type that wraps cli.IntFlag to support alternative input sources. It includes methods for creation, application to flag sets, and applying int values from input sources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_75\n\nLANGUAGE: go\nCODE:\n```\ntype IntFlag struct {\n\t*cli.IntFlag\n\t// Has unexported fields.\n}\n\nfunc NewIntFlag(fl *cli.IntFlag) *IntFlag\n\nfunc (f *IntFlag) Apply(set *flag.FlagSet) error\n\nfunc (f *IntFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: ID Naming Convention Example\nDESCRIPTION: Example showing the correct and incorrect ways to name ID variables according to backend conventions\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dashboard/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\nconst environmentID = '';\n\n// Bad\nconst environmentId = '';\n```\n\n----------------------------------------\n\nTITLE: Recording Stats Measurement in Go\nDESCRIPTION: Example of recording a measurement for a stat in OpenCensus Go.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstats.Record(ctx, videoSize.M(102478))\n```\n\n----------------------------------------\n\nTITLE: Benchmarking JSON Parsing Performance in Go\nDESCRIPTION: This code snippet shows the benchmark results for parsing different JSON files using various methods in Go. It compares the performance of standard library JSON parsing with fastjson library across different file sizes and parsing strategies.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/valyala/fastjson/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n$ GOMAXPROCS=1 go test github.com/valyala/fastjson -bench='Parse$'\ngoos: linux\ngoarch: amd64\npkg: github.com/valyala/fastjson\nBenchmarkParse/small/stdjson-map         \t  200000\t      7305 ns/op\t  26.01 MB/s\t     960 B/op\t      51 allocs/op\nBenchmarkParse/small/stdjson-struct      \t  500000\t      3431 ns/op\t  55.37 MB/s\t     224 B/op\t       4 allocs/op\nBenchmarkParse/small/stdjson-empty-struct         \t  500000\t      2273 ns/op\t  83.58 MB/s\t     168 B/op\t       2 allocs/op\nBenchmarkParse/small/fastjson                     \t 5000000\t       347 ns/op\t 547.53 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkParse/small/fastjson-get                 \t 2000000\t       620 ns/op\t 306.39 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkParse/medium/stdjson-map                 \t   30000\t     40672 ns/op\t  57.26 MB/s\t   10196 B/op\t     208 allocs/op\nBenchmarkParse/medium/stdjson-struct              \t   30000\t     47792 ns/op\t  48.73 MB/s\t    9174 B/op\t     258 allocs/op\nBenchmarkParse/medium/stdjson-empty-struct        \t  100000\t     22096 ns/op\t 105.40 MB/s\t     280 B/op\t       5 allocs/op\nBenchmarkParse/medium/fastjson                    \t  500000\t      3025 ns/op\t 769.90 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkParse/medium/fastjson-get                \t  500000\t      3211 ns/op\t 725.20 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkParse/large/stdjson-map                  \t    2000\t    614079 ns/op\t  45.79 MB/s\t  210734 B/op\t    2785 allocs/op\nBenchmarkParse/large/stdjson-struct               \t    5000\t    298554 ns/op\t  94.18 MB/s\t   15616 B/op\t     353 allocs/op\nBenchmarkParse/large/stdjson-empty-struct         \t    5000\t    268577 ns/op\t 104.69 MB/s\t     280 B/op\t       5 allocs/op\nBenchmarkParse/large/fastjson                     \t   50000\t     35210 ns/op\t 798.56 MB/s\t       5 B/op\t       0 allocs/op\nBenchmarkParse/large/fastjson-get                 \t   50000\t     35171 ns/op\t 799.46 MB/s\t       5 B/op\t       0 allocs/op\nBenchmarkParse/canada/stdjson-map                 \t      20\t  68147307 ns/op\t  33.03 MB/s\t12260502 B/op\t  392539 allocs/op\nBenchmarkParse/canada/stdjson-struct              \t      20\t  68044518 ns/op\t  33.08 MB/s\t12260123 B/op\t  392534 allocs/op\nBenchmarkParse/canada/stdjson-empty-struct        \t     100\t  17709250 ns/op\t 127.11 MB/s\t     280 B/op\t       5 allocs/op\nBenchmarkParse/canada/fastjson                    \t     300\t   4182404 ns/op\t 538.22 MB/s\t  254902 B/op\t     381 allocs/op\nBenchmarkParse/canada/fastjson-get                \t     300\t   4274744 ns/op\t 526.60 MB/s\t  254902 B/op\t     381 allocs/op\nBenchmarkParse/citm/stdjson-map                   \t      50\t  27772612 ns/op\t  62.19 MB/s\t 5214163 B/op\t   95402 allocs/op\nBenchmarkParse/citm/stdjson-struct                \t     100\t  14936191 ns/op\t 115.64 MB/s\t    1989 B/op\t      75 allocs/op\nBenchmarkParse/citm/stdjson-empty-struct          \t     100\t  14946034 ns/op\t 115.56 MB/s\t     280 B/op\t       5 allocs/op\nBenchmarkParse/citm/fastjson                      \t    1000\t   1879714 ns/op\t 918.87 MB/s\t   17628 B/op\t      30 allocs/op\nBenchmarkParse/citm/fastjson-get                  \t    1000\t   1881598 ns/op\t 917.94 MB/s\t   17628 B/op\t      30 allocs/op\nBenchmarkParse/twitter/stdjson-map                \t     100\t  11289146 ns/op\t  55.94 MB/s\t 2187878 B/op\t   31266 allocs/op\nBenchmarkParse/twitter/stdjson-struct             \t     300\t   5779442 ns/op\t 109.27 MB/s\t     408 B/op\t       6 allocs/op\nBenchmarkParse/twitter/stdjson-empty-struct       \t     300\t   5738504 ns/op\t 110.05 MB/s\t     408 B/op\t       6 allocs/op\nBenchmarkParse/twitter/fastjson                   \t    2000\t    774042 ns/op\t 815.86 MB/s\t    2541 B/op\t       2 allocs/op\nBenchmarkParse/twitter/fastjson-get               \t    2000\t    777833 ns/op\t 811.89 MB/s\t    2541 B/op\t       2 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Defining Float64Flag Structure in Go\nDESCRIPTION: Float64Flag is a flag with type float64. It includes fields for name, category, usage, and methods for applying, getting, and manipulating the flag value.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\ntype Float64Flag struct {\n\t// Fields omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Negotiate Function Signature in Go\nDESCRIPTION: This function negotiates the most appropriate content type given the accept header and a list of alternatives.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/common/internal/bitbucket.org/ww/goautoneg/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc Negotiate(header string, alternatives []string) (content_type string)\n```\n\n----------------------------------------\n\nTITLE: Connecting Viper to Firestore Remote Configuration in Go\nDESCRIPTION: Shows how to configure Viper to read configuration from a Google Cloud Firestore document.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nviper.AddRemoteProvider(\"firestore\", \"google-cloud-project-id\", \"collection/document\")\nviper.SetConfigType(\"json\") // Config's format: \"json\", \"toml\", \"yaml\", \"yml\"\nerr := viper.ReadRemoteConfig()\n```\n\n----------------------------------------\n\nTITLE: Importing smetrics Package in Go\nDESCRIPTION: This snippet shows how to import the smetrics package in a Go program.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/xrash/smetrics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/xrash/smetrics\"\n```\n\n----------------------------------------\n\nTITLE: Showing Import Path for Versioned Go Module\nDESCRIPTION: This snippet illustrates how to properly import a package from a Go module with a major version of v2 or higher. It demonstrates the inclusion of the major version in the import path.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport \"go.opentelemetry.io/otel/v2/trace\"\n```\n\n----------------------------------------\n\nTITLE: Input Source Context Interface in Go\nDESCRIPTION: Interface that defines methods for retrieving various typed values from input sources. It abstracts the actual source implementation, allowing for multiple source types like JSON, TOML, and YAML.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_70\n\nLANGUAGE: go\nCODE:\n```\ntype InputSourceContext interface {\n\tSource() string\n\n\tInt(name string) (int, error)\n\tInt64(name string) (int64, error)\n\tUint(name string) (uint, error)\n\tUint64(name string) (uint64, error)\n\tDuration(name string) (time.Duration, error)\n\tFloat64(name string) (float64, error)\n\tString(name string) (string, error)\n\tStringSlice(name string) ([]string, error)\n\tIntSlice(name string) ([]int, error)\n\tInt64Slice(name string) ([]int64, error)\n\tFloat64Slice(name string) ([]float64, error)\n\tGeneric(name string) (cli.Generic, error)\n\tBool(name string) (bool, error)\n\n\t// Has unexported methods.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing termenv Go Library\nDESCRIPTION: Command to install the termenv library using Go's package manager.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/muesli/termenv\n```\n\n----------------------------------------\n\nTITLE: Generating Success Response for Sync in Inngest SDK\nDESCRIPTION: Specifies the JSON payload structure for responding to a successful sync operation. The SDK should include the 'modified' value from Inngest's response.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n{\n\tmessage: \"Successfully synced.\",\n\tmodified: true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing petname in Python\nDESCRIPTION: A Python script that uses the petname library to generate pet names. It sets up command-line arguments for customizing the output, similar to the Go version.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustinkirkland/golang-petname/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/python\nimport argparse\nimport petname\nimport sys\n\nparser = argparse.ArgumentParser(description='Generate human readable random names')\nparser.add_argument('-w', '--words', help='Number of words in name, default=2', default=2)\nparser.add_argument('-l', '--letters', help='Maximum number of letters per word, default=6', default=6)\nparser.add_argument('-s', '--separator', help='Separator between words, default=\"-\"', default=\"-\")\nparser.options = parser.parse_args()\nsys.stdout.write(petname.Generate(int(parser.options.words), parser.options.separator, int(parser.options.letters)) + \"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Sync Response Interface Definition\nDESCRIPTION: TypeScript interface defining the required JSON response format for sync requests, containing message and modified status.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tmessage: string;\n\tmodified: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Tidying Go Dependencies\nDESCRIPTION: Commands for managing go.mod, go.sum files and vendoring dependencies in the Prometheus project.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.\nGO111MODULE=on go mod tidy\n\nGO111MODULE=on go mod vendor\n```\n\n----------------------------------------\n\nTITLE: Comparing JSON Parsing Performance in Go\nDESCRIPTION: Benchmark results comparing the performance of OjG's JSON parsing functions against Go's standard json package. The results show improvements in parsing speed and memory usage.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/design.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nParse JSON\njson.Unmarshal:           7104 ns/op (1.00x)    4808 B/op (1.00x)      90 allocs/op (1.00x)\n  oj.Parse:               4518 ns/op (1.57x)    3984 B/op (1.21x)      86 allocs/op (1.05x)\n  oj.GenParse:            4623 ns/op (1.54x)    3984 B/op (1.21x)      86 allocs/op (1.05x)\n\njson.Marshal:             2616 ns/op (1.00x)     992 B/op (1.00x)      22 allocs/op (1.00x)\n  oj.JSON:                 436 ns/op (6.00x)     131 B/op (7.57x)       4 allocs/op (5.50x)\n  oj.Write:                455 ns/op (5.75x)     131 B/op (7.57x)       4 allocs/op (5.50x)\n```\n\n----------------------------------------\n\nTITLE: Removing Mood Column and Enum Type\nDESCRIPTION: Transaction to remove the mood column and its enum type from the database.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/postgres/TUTORIAL.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n\nALTER TABLE users DROP COLUMN mood;\nDROP TYPE enum_mood;\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Go Slug Package\nDESCRIPTION: Commands for running and comparing benchmarks of the slug package using benchstat.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/gosimple/slug/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run=NONE -bench=. -benchmem -count=6 ./... > old.txt\n# make changes\ngo test -run=NONE -bench=. -benchmem -count=6 ./... > new.txt\n\ngo install golang.org/x/perf/cmd/benchstat@latest\n\nbenchstat old.txt new.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres Query Definition\nDESCRIPTION: Defines the equivalent query in Postgres syntax, using the appropriate parameter placeholder ($1 instead of ?).\nSOURCE: https://github.com/inngest/inngest/blob/main/pkg/cqrs/base_cqrs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- name: NewExampleQuery :one\nSELECT * FROM apps WHERE id = $1 LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Language Convention Example\nDESCRIPTION: Example showing the correct English(US) spelling in function names\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dashboard/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\nfunction analyzeStats() {\n  console.log(foo);\n}\n\n// Bad\nfunction analyseStats() {\n  console.log(foo);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Event Operations in Go\nDESCRIPTION: Demonstrates the new Event.Has() method for checking event operations, which simplifies event checking compared to the previous bitwise operation approach.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nif event.Has(Write) && !event.Has(Remove) {\n    // Handle write event\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TOML Input Source from Flag in Go\nDESCRIPTION: Function that returns a generator for TOML-based InputSourceContext. It creates a new input source from a file name defined by the specified flag.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_62\n\nLANGUAGE: go\nCODE:\n```\nfunc NewTomlSourceFromFlagFunc(flagFileName string) func(cCtx *cli.Context) (InputSourceContext, error)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking ULID Operations in Go\nDESCRIPTION: This code snippet shows benchmark results for various ULID operations including creation, parsing, marshaling, and comparison. The benchmarks were run on an Intel Core i7 Ivy Bridge 2.7 GHz, MacOS 10.12.1, and Go 1.8.0beta1.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkNew/WithCryptoEntropy-8      2000000        771 ns/op      20.73 MB/s   16 B/op   1 allocs/op\nBenchmarkNew/WithEntropy-8            20000000      65.8 ns/op     243.01 MB/s   16 B/op   1 allocs/op\nBenchmarkNew/WithoutEntropy-8         50000000      30.0 ns/op     534.06 MB/s   16 B/op   1 allocs/op\nBenchmarkMustNew/WithCryptoEntropy-8  2000000        781 ns/op      20.48 MB/s   16 B/op   1 allocs/op\nBenchmarkMustNew/WithEntropy-8        20000000      70.0 ns/op     228.51 MB/s   16 B/op   1 allocs/op\nBenchmarkMustNew/WithoutEntropy-8     50000000      34.6 ns/op     462.98 MB/s   16 B/op   1 allocs/op\nBenchmarkParse-8                      50000000      30.0 ns/op     866.16 MB/s    0 B/op   0 allocs/op\nBenchmarkMustParse-8                  50000000      35.2 ns/op     738.94 MB/s    0 B/op   0 allocs/op\nBenchmarkString-8                     20000000      64.9 ns/op     246.40 MB/s   32 B/op   1 allocs/op\nBenchmarkMarshal/Text-8               20000000      55.8 ns/op     286.84 MB/s   32 B/op   1 allocs/op\nBenchmarkMarshal/TextTo-8             100000000     22.4 ns/op     714.91 MB/s    0 B/op   0 allocs/op\nBenchmarkMarshal/Binary-8             300000000     4.02 ns/op    3981.77 MB/s    0 B/op   0 allocs/op\nBenchmarkMarshal/BinaryTo-8           2000000000    1.18 ns/op   13551.75 MB/s    0 B/op   0 allocs/op\nBenchmarkUnmarshal/Text-8             100000000     20.5 ns/op    1265.27 MB/s    0 B/op   0 allocs/op\nBenchmarkUnmarshal/Binary-8           300000000     4.94 ns/op    3240.01 MB/s    0 B/op   0 allocs/op\nBenchmarkNow-8                        100000000     15.1 ns/op     528.09 MB/s    0 B/op   0 allocs/op\nBenchmarkTimestamp-8                  2000000000    0.29 ns/op   27271.59 MB/s    0 B/op   0 allocs/op\nBenchmarkTime-8                       2000000000    0.58 ns/op   13717.80 MB/s    0 B/op   0 allocs/op\nBenchmarkSetTime-8                    2000000000    0.89 ns/op    9023.95 MB/s    0 B/op   0 allocs/op\nBenchmarkEntropy-8                    200000000     7.62 ns/op    1311.66 MB/s    0 B/op   0 allocs/op\nBenchmarkSetEntropy-8                 2000000000    0.88 ns/op   11376.54 MB/s    0 B/op   0 allocs/op\nBenchmarkCompare-8                    200000000     7.34 ns/op    4359.23 MB/s    0 B/op   0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Generic Node Usage in Go\nDESCRIPTION: This snippet shows how generic nodes were initially planned to be used, allowing type-safe operations on JSON-like data structures. However, this approach was later abandoned due to Go's package import restrictions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/design.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    var n gen.Node\n    n = gen.Int(123)\n    i, ok := n.AsInt()\n```\n\n----------------------------------------\n\nTITLE: Binding a Custom FlagSet to Viper in Go\nDESCRIPTION: Demonstrates how to bind a custom flag set implementation to Viper using the BindFlagValues method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfSet := myFlagSet{\n\tflags: []myFlag{myFlag{}, myFlag{}},\n}\nviper.BindFlagValues(\"my-flags\", fSet)\n```\n\n----------------------------------------\n\nTITLE: Running Inngest Dev Server with Local Build\nDESCRIPTION: This command runs the Inngest dev server using a local build with discovery disabled.\nSOURCE: https://github.com/inngest/inngest/blob/main/TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo run ./cmd/main.go dev --no-discovery\n```\n\n----------------------------------------\n\nTITLE: Defining VisibleFlag Interface for CLI Flags in Go\nDESCRIPTION: Implementation of the VisibleFlag interface that extends the base Flag interface with the IsVisible method. This interface is used to determine if a flag should be shown in help text or other user-facing displays.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_57\n\nLANGUAGE: go\nCODE:\n```\ntype VisibleFlag interface {\n\tFlag\n\n\t// IsVisible returns true if the flag is not hidden, otherwise false\n\tIsVisible() bool\n}\n    VisibleFlag is an interface that allows to check if a flag is visible\n```\n\n----------------------------------------\n\nTITLE: Installing conc Library in Go\nDESCRIPTION: Command to install the conc library using go get\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sourcegraph/conc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/sourcegraph/conc\n```\n\n----------------------------------------\n\nTITLE: Disabling Flag Sorting in Go using pflag\nDESCRIPTION: Shows how to disable sorting of flags for help and usage messages in pflag.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for MkDocs Documentation\nDESCRIPTION: This snippet lists the required Python packages and their version constraints for a documentation project. It includes MkDocs, MkDocs Material theme, and plugins for git revision date and material extensions. The tilde (~) is used to specify compatible release versions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/mkdocs-requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs-git-revision-date-localized-plugin~=1.0\nmkdocs-material-extensions~=1.0\nmkdocs-material~=8.2\nmkdocs~=1.3\npygments~=2.12\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Git Tags for Stable Releases\nDESCRIPTION: Commands for creating a new stable release by tagging the main branch with a version number prefixed with 'v' using SemVer, and pushing the tag to trigger the release process.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v1.2.22\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Go OLE Example\nDESCRIPTION: Instructions for installing the Go OLE package and running an example Excel program. This snippet demonstrates how to get the package, run tests, and execute a sample application.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-ole/go-ole/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/go-ole/go-ole\ncd /path/to/go-ole/\ngo test\n\ncd /path/to/go-ole/example/excel\ngo run excel.go\n```\n\n----------------------------------------\n\nTITLE: Setting Width and Height in Lip Gloss\nDESCRIPTION: This code demonstrates how to set a minimum width and height for a styled text block.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar str = lipgloss.NewStyle().\n    Width(24).\n    Height(32).\n    Foreground(lipgloss.Color(\"63\")).\n    Render(\"What's for lunch?\")\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Compute Metadata Package in Go\nDESCRIPTION: Command to install the Google Cloud Compute metadata library using the Go package manager. This package allows Go applications to interact with the Google Cloud metadata service.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/cloud.google.com/go/compute/metadata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/compute/metadata\n```\n\n----------------------------------------\n\nTITLE: Timestamp Migration Filename Example\nDESCRIPTION: Example of migration files using timestamp-based versioning scheme.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/MIGRATIONS.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1500360784_initialize_schema.down.sql\\n1500360784_initialize_schema.up.sql\\n1500445949_add_table.down.sql\\n1500445949_add_table.up.sql\n```\n\n----------------------------------------\n\nTITLE: Running Go unit tests\nDESCRIPTION: Command to run all Go unit tests in the project to ensure changes do not break existing functionality.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v ./...\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Documentation Template in Go CLI Package\nDESCRIPTION: This snippet defines the MarkdownDocTemplate variable, which is a template for generating Markdown documentation for CLI applications built with the cli package. It includes sections for name, synopsis, description, usage, global options, and commands.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar MarkdownDocTemplate = `{{if gt .SectionNum 0}}% {{ .App.Name }} {{ .SectionNum }}\n\n{{end}}# NAME\n\n{{ .App.Name }}{{ if .App.Usage }} - {{ .App.Usage }}{{ end }}\n\n# SYNOPSIS\n\n{{ .App.Name }}\n{{ if .SynopsisArgs }}\n` + \"`\" + `\n{{ range $v := .SynopsisArgs }}{{ $v }}{{ end }}` + \"`\" + `\n{{ end }}{{ if .App.Description }}\n# DESCRIPTION\n\n{{ .App.Description }}\n{{ end }}\n**Usage**:\n\n` + \"`\" + `{{ if .App.UsageText }}\n{{ .App.UsageText }}\n{{ else }}\n{{ .App.Name }} [GLOBAL OPTIONS] command [COMMAND OPTIONS] [ARGUMENTS...]\n{{ end }}` + \"`\" + `\n{{ if .GlobalArgs }}\n# GLOBAL OPTIONS\n{{ range $v := .GlobalArgs }}\n{{ $v }}{{ end }}\n{{ end }}{{ if .Commands }}\n`\n```\n\n----------------------------------------\n\nTITLE: Chi Router Version History in Markdown\nDESCRIPTION: Markdown formatted changelog documenting version history from v1.5.0 through v5.0.10, including breaking changes, new features, bug fixes and migration notes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## v5.0.10 (2023-07-13)\n\n- Fixed small edge case in tests of v5.0.9 for older Go versions\n- History of changes: see https://github.com/go-chi/chi/compare/v5.0.8...v5.0.10\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra-CLI Generator\nDESCRIPTION: This command installs the Cobra-CLI generator, which is used to bootstrap Cobra-based applications and generate command files.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Defining DurationFlag Struct in Go\nDESCRIPTION: Defines the DurationFlag struct which represents a flag with type time.Duration. It includes various fields for flag properties and an Action function.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\ntype DurationFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       time.Duration\n\tDestination *time.Duration\n\n\tAliases []string\n\tEnvVars []string\n\n\tAction func(*Context, time.Duration) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Terminal Color Scheme Settings\nDESCRIPTION: Uses ANSI escape sequences to query the current foreground and background color settings. Returns the active color scheme values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]10;?\\033\\\\\"\\necho -ne \"\\033]11;?\\033\\\\\"\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSliceFlag Structure in Go\nDESCRIPTION: Definition of the StringSliceFlag structure representing a flag with a StringSlice value, allowing multiple string values to be specified for a single flag.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_42\n\nLANGUAGE: go\nCODE:\n```\ntype StringSliceFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       *StringSlice\n\tDestination *StringSlice\n\n\tAliases []string\n\tEnvVars []string\n\n\tTakesFile bool\n\n\tAction func(*Context, []string) error\n\n\tKeepSpace bool\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Structured changelog entries documenting version history, feature additions, and bug fixes for a Go-based COM interface library. Includes details about compatibility changes, new features, and implementation updates.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-ole/go-ole/ChangeLog.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Version 1.x.x\n\n* **Add more test cases and reference new test COM server project.** (Placeholder for future additions)\n\n# Version 1.2.0-alphaX\n\n**Minimum supported version is now Go 1.4. Go 1.1 support is deprecated, but should still build.**\n\n * Added CI configuration for Travis-CI and AppVeyor.\n * Added test InterfaceID and ClassID for the COM Test Server project.\n * Added more inline documentation (#83).\n * Added IEnumVARIANT implementation (#88).\n * Added IEnumVARIANT test cases (#99, #100, #101).\n * Added support for retrieving `time.Time` from VARIANT (#92).\n * Added test case for IUnknown (#64).\n * Added test case for IDispatch (#64).\n * Added test cases for scalar variants (#64, #76).\n\n# Version 1.1.1\n\n * Fixes for Linux build.\n * Fixes for Windows build.\n\n# Version 1.1.0\n\nThe change to provide building on all platforms is a new feature. The increase in minor version reflects that and allows those who wish to stay on 1.0.x to continue to do so. Support for 1.0.x will be limited to bug fixes.\n\n * Move GUID out of variables.go into its own file to make new documentation available.\n * Move OleError out of ole.go into its own file to make new documentation available.\n * Add documentation to utility functions.\n * Add documentation to variant receiver functions.\n * Add documentation to ole structures.\n * Make variant available to other systems outside of Windows.\n * Make OLE structures available to other systems outside of Windows.\n\n## New Features\n\n * Library should now be built on all platforms supported by Go. Library will NOOP on any platform that is not Windows.\n * More functions are now documented and available on godoc.org.\n\n# Version 1.0.1\n\n 1. Fix package references from repository location change.\n\n# Version 1.0.0\n\nThis version is stable enough for use. The COM API is still incomplete, but provides enough functionality for accessing COM servers using IDispatch interface.\n\nThere is no changelog for this version. Check commits for history.\n```\n\n----------------------------------------\n\nTITLE: Installing Mapstructure using Go Get\nDESCRIPTION: Command to install the mapstructure library using Go's package manager.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Transaction Wrapper Example\nDESCRIPTION: Example of transaction syntax for wrapping multiple SQL statements in migrations using BEGIN and COMMIT statements.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/postgres/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN/COMMIT\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Colorful Package\nDESCRIPTION: Command to install the go-colorful library using go get\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lucasb-eyer/go-colorful/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/lucasb-eyer/go-colorful\n```\n\n----------------------------------------\n\nTITLE: Command Line JSON Filtering using OjG\nDESCRIPTION: Example of using the oj command line tool to filter JSON content using JSONPath expressions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ oj -m \"(@.name == 'Pete')\" myfile.json\n```\n\n----------------------------------------\n\nTITLE: Adding Release Tags to OpenTelemetry Go Modules\nDESCRIPTION: Command to add release tags to OpenTelemetry Go modules. It uses the add-tags make target and requires specifying the module set and optionally the commit hash.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Attribute Package\nDESCRIPTION: This code snippet displays a badge linking to the Go package documentation for the OpenTelemetry attribute package. It uses Markdown syntax to create an image link.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/attribute/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/attribute)](https://pkg.go.dev/go.opentelemetry.io/otel/attribute)\n```\n\n----------------------------------------\n\nTITLE: Implementing Flag Name Normalization in Go using pflag\nDESCRIPTION: Demonstrates how to set a custom flag name normalization function to handle different flag name formats consistently.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/pflag/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table Schema\nDESCRIPTION: SQL schema for creating a users table with id, username, password, and email fields.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/postgres/TUTORIAL.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS users(\n   user_id serial PRIMARY KEY,\n   username VARCHAR (50) UNIQUE NOT NULL,\n   password VARCHAR (50) NOT NULL,\n   email VARCHAR (300) UNIQUE NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Benchmark Performance Results for String Conversion\nDESCRIPTION: Comparison of string conversion performance between Uint128 and big.Int, demonstrating the efficiency of uint128's string representation methods\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/lukechampine.com/uint128/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nBenchmarkString/Uint128-4              10000000      173 ns/op     48 B/op     1 allocs/op\nBenchmarkString/big.Int-4              5000000       350 ns/op     144 B/op    3 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Installing go-httpstat Package\nDESCRIPTION: Command to install the go-httpstat package using Go's package manager.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/inngest/go-httpstat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/tcnksm/go-httpstat\n```\n\n----------------------------------------\n\nTITLE: File Interface Methods in Afero\nDESCRIPTION: Available methods for file interfaces in Afero implementations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/afero/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nio.Closer\nio.Reader\nio.ReaderAt\nio.Seeker\nio.Writer\nio.WriterAt\n\nName() : string\nReaddir(count int) : []os.FileInfo, error\nReaddirnames(n int) : []string, error\nStat() : os.FileInfo, error\nSync() : error\nTruncate(size int64) : error\nWriteString(s string) : ret int, err error\n```\n\n----------------------------------------\n\nTITLE: Old Event Checking Method in Go\nDESCRIPTION: Shows the previous method of checking event operations using bitwise operations, which is more verbose compared to the new Event.Has() method.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fsnotify/fsnotify/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nif event.Op&Write == Write && !(event.Op&Remove == Remove) {\n    // Handle write event\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Overview\nDESCRIPTION: Directory structure showing the organization of apps and packages in the UI monorepo\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/ui\n  ├── apps/\n    ├── dashboard/      // Inngest Cloud\n    ├── dev-server-ui/  // Inngest Dev Server\n  ├── packages/\n    ├── components/     // Shared UI components\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Resource Semantic Conventions\nDESCRIPTION: This code snippet demonstrates how to enable experimental resource semantic conventions in the OpenTelemetry Go SDK. It sets the `OTEL_GO_X_RESOURCE` environment variable to `true`, activating the feature. This allows resource detectors to add experimental semantic conventions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"export OTEL_GO_X_RESOURCE=true\"\n```\n\n----------------------------------------\n\nTITLE: Handling Help Output Functionality\nDESCRIPTION: Defines variables for printing help output, including custom implementations, which can be overridden for tailored help display in the CLI application.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar HelpPrinter helpPrinter = printHelp\n    HelpPrinter is a function that writes the help output. If not set\n    explicitly, this calls HelpPrinterCustom using only the default template\n    functions.\n```\n\nLANGUAGE: go\nCODE:\n```\nvar HelpPrinterCustom helpPrinterCustom = printHelpCustom\n    HelpPrinterCustom is a function that writes the help output. It is used as\n    the default implementation of HelpPrinter, and may be called directly if the\n    ExtraInfo field is set on an App.\n```\n\n----------------------------------------\n\nTITLE: Displaying Other Go Compressors Comparison in Markdown\nDESCRIPTION: This markdown table compares the compression performance of other Go compressors like Zstd and Deflate on the same mixed content dataset, showing input/output sizes, reduction percentages, and compression speeds.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| *                 | Input      | Output     | Reduction | MB/s   |\n|-------------------|------------|------------|-----------|--------|\n| Zstd Fastest (Go) | 4014735833 | 794608518  | 80.21%    | 236.04 |\n| Zstd Best (Go)    | 4014735833 | 704603356  | 82.45%    | 35.63  |\n| Deflate (Go) l1   | 4014735833 | 871294239  | 78.30%    | 214.04 |\n| Deflate (Go) l9   | 4014735833 | 730389060  | 81.81%    | 41.17  |\n```\n\n----------------------------------------\n\nTITLE: Implementing SliceFlag Methods in Go\nDESCRIPTION: Methods for the SliceFlag generic type that provide standard flag functionality like checking if the flag is required, set, or visible, getting names, setting destinations and values, and string representation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nfunc (x *SliceFlag[T, S, E]) IsRequired() bool\n\nfunc (x *SliceFlag[T, S, E]) IsSet() bool\n\nfunc (x *SliceFlag[T, S, E]) IsVisible() bool\n\nfunc (x *SliceFlag[T, S, E]) Names() []string\n\nfunc (x *SliceFlag[T, S, E]) SetDestination(slice S)\n\nfunc (x *SliceFlag[T, S, E]) SetValue(slice S)\n\nfunc (x *SliceFlag[T, S, E]) String() string\n\nfunc (x *SliceFlag[T, S, E]) TakesValue() bool\n```\n\n----------------------------------------\n\nTITLE: Sending gRPC Request to Connect API using buf curl\nDESCRIPTION: Shows how to use the buf tool to send a gRPC request to a Connect API endpoint.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/connectrpc.com/connect/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/bufbuild/buf/cmd/buf@latest\nbuf curl --protocol grpc \\\n    --data '{\"sentence\": \"I feel happy.\"}' \\\n    https://demo.connectrpc.com/connectrpc.eliza.v1.ElizaService/Say\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Test Environment Variables\nDESCRIPTION: Sets up required environment variables for test database connections and authentication methods.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jackc/pgx/v5/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PGPORT=5015\nexport PGUSER=postgres\nexport PGDATABASE=pgx_test\nexport POSTGRESQL_DATA_DIR=postgresql\n\nexport PGX_TEST_DATABASE=\"host=127.0.0.1 database=pgx_test user=pgx_md5 password=secret\"\nexport PGX_TEST_UNIX_SOCKET_CONN_STRING=\"host=/private/tmp database=pgx_test\"\nexport PGX_TEST_TCP_CONN_STRING=\"host=127.0.0.1 database=pgx_test user=pgx_md5 password=secret\"\nexport PGX_TEST_SCRAM_PASSWORD_CONN_STRING=\"host=127.0.0.1 user=pgx_scram password=secret database=pgx_test\"\nexport PGX_TEST_MD5_PASSWORD_CONN_STRING=\"host=127.0.0.1 database=pgx_test user=pgx_md5 password=secret\"\nexport PGX_TEST_PLAIN_PASSWORD_CONN_STRING=\"host=127.0.0.1 user=pgx_pw password=secret\"\nexport PGX_TEST_TLS_CONN_STRING=\"host=localhost user=pgx_ssl password=secret sslmode=verify-full sslrootcert=`pwd`/.testdb/ca.pem\"\nexport PGX_SSL_PASSWORD=certpw\nexport PGX_TEST_TLS_CLIENT_CONN_STRING=\"host=localhost user=pgx_sslcert sslmode=verify-full sslrootcert=`pwd`/.testdb/ca.pem database=pgx_test sslcert=`pwd`/.testdb/pgx_sslcert.crt sslkey=`pwd`/.testdb/pgx_sslcert.key\"\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Character Translation Table\nDESCRIPTION: Command for regenerating the character translation table after making changes to table.txt.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/gosimple/unidecode/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo run ./make_table.go\n```\n\n----------------------------------------\n\nTITLE: FSE Error Handling Table\nDESCRIPTION: Table showing the possible error values returned by the FSE Compress function and their descriptions\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/fse/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Error               | Description                                                                 |\n|---------------------|-----------------------------------------------------------------------------|\n| `<nil>`             | Everything ok, output is returned                                           |\n| `ErrIncompressible` | Returned when input is judged to be too hard to compress                    |\n| `ErrUseRLE`         | Returned from the compressor when the input is a single byte value repeated |\n| `(error)`           | An internal error occurred.                                                 |\n```\n\n----------------------------------------\n\nTITLE: Adding Fork Remote to OpenTelemetry Go Repository in Shell\nDESCRIPTION: Command to add a remote for your fork of the OpenTelemetry Go SDK repository.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Updating Test Fixtures with Bash Commands\nDESCRIPTION: Shell commands for removing existing test fixtures and regenerating them for testing purposes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/procfs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf testdata/fixtures\nmake test\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OpenTelemetry Go Codes Package\nDESCRIPTION: This markdown snippet displays a badge that links to the pkg.go.dev documentation for the OpenTelemetry Go Codes package. It provides a visual indicator of the package's documentation status and a quick link for developers.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/codes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/codes)](https://pkg.go.dev/go.opentelemetry.io/otel/codes)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom FlagSet Interface for Viper in Go\nDESCRIPTION: Shows how to implement the FlagValueSet interface to bind a group of custom flags to Viper.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype myFlagSet struct {\n\tflags []myFlag\n}\n\nfunc (f myFlagSet) VisitAll(fn func(FlagValue)) {\n\tfor _, flag := range flags {\n\t\tfn(flag)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mood Enum Type and Column\nDESCRIPTION: Transaction to create an enum type for mood and add it as a column to users table.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/postgres/TUTORIAL.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n\nCREATE TYPE enum_mood AS ENUM (\n\t'happy',\n\t'sad',\n\t'neutral'\n);\nALTER TABLE users ADD COLUMN mood enum_mood;\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Implementing System Call Dispatch Functions in Assembly\nDESCRIPTION: These three assembly function signatures serve as entry points for system calls in the sys/unix package. They handle different parameter counts and scheduling behaviors, with RawSyscall specifically designed for low-level use by ForkExec.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/golang.org/x/sys/unix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Creating Failing Inngest Function without Steps\nDESCRIPTION: Shows an Inngest function that fails immediately without executing any steps.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/utils/historyParser/testData/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: 'Fails without steps', cancelOn: [{ event: 'foo' }] },\n  { event: 'foo' },\n  async ({ step }) => {\n    throw new Error('oh no');\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Contributing to Cobra\nDESCRIPTION: Step-by-step git commands for forking, cloning, and submitting changes to the Cobra project. Includes branch creation, committing changes, and pushing to remote repository.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/cobra/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://github.com/your_username/cobra && cd cobra\n```\n\nLANGUAGE: git\nCODE:\n```\ngit checkout -b my-new-feature\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\nLANGUAGE: git\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: git\nCODE:\n```\ngit commit -m 'Add some feature'\n```\n\nLANGUAGE: git\nCODE:\n```\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Window Title\nDESCRIPTION: Uses ANSI escape sequence to set the terminal window title to \"Test\". Includes a sleep command to maintain the title for 10 seconds.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]2;Test\\007\" && sleep 10\n```\n\n----------------------------------------\n\nTITLE: Unsetting Rules in Lip Gloss\nDESCRIPTION: This snippet demonstrates how to unset previously defined style rules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/charmbracelet/lipgloss/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nvar style = lipgloss.NewStyle().\n    Bold(true).                        // make it bold\n    UnsetBold().                       // jk don't make it bold\n    Background(lipgloss.Color(\"227\")). // yellow background\n    UnsetBackground()                  // never mind\n```\n\n----------------------------------------\n\nTITLE: Basic PostgreSQL Database Setup\nDESCRIPTION: Creates and configures a test database with required extensions and user roles for pgx testing.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jackc/pgx/v5/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nexport PGDATABASE=pgx_test\ncreatedb\npsql -c 'create extension hstore;'\npsql -c 'create domain uint64 as numeric(20,0);'\n```\n\n----------------------------------------\n\nTITLE: Implementing IntFlag in Go\nDESCRIPTION: IntFlag is a flag with type int. It includes methods for applying the flag, getting its value, and other utility functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\ntype IntFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       int\n\tDestination *int\n\n\tAliases []string\n\tEnvVars []string\n\n\tBase int\n\n\tAction func(*Context, int) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Tags for OpenTelemetry Go\nDESCRIPTION: Commands to push the new release tags to the upstream remote repository for the main module and all submodules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: Declaring goautoneg Package in Go\nDESCRIPTION: This snippet declares the goautoneg package and imports the necessary dependency from Bitbucket.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/common/internal/bitbucket.org/ww/goautoneg/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage goautoneg\nimport \"bitbucket.org/ww/goautoneg\"\n```\n\n----------------------------------------\n\nTITLE: Installing go-str2duration Package in Go\nDESCRIPTION: Command to download and install the go-str2duration package using Go modules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/xhit/go-str2duration/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/xhit/go-str2duration/v2\n```\n\n----------------------------------------\n\nTITLE: Running Local Go Documentation Server in Shell\nDESCRIPTION: Commands to install and run a local Go documentation server using pkgsite.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Using Chi URL Parameter Access - v0.9.0\nDESCRIPTION: Example showing the API change for accessing URL parameters in Chi v0.9.0. Changed from using map access to a function call pattern.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Old way - pre v0.9.0\nchi.URLParams(ctx)[\"id\"]\n\n// New way - v0.9.0+\nchi.URLParam(ctx, \"id\")\n```\n\n----------------------------------------\n\nTITLE: Updating Version Constant in connect.go for Release\nDESCRIPTION: Shows how to update the Version constant in connect.go when preparing for a new release by removing the -dev suffix.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/connectrpc.com/connect/RELEASE.md#2025-04-22_snippet_0\n\nLANGUAGE: patch\nCODE:\n```\n-const Version = \"1.14.0-dev\"\n+const Version = \"1.14.0\"\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenTelemetry README Markdown\nDESCRIPTION: Markdown documentation for an OpenTelemetry metric exporter, displaying package information and status via a GitHub-style badge.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/exporters/stdout/stdoutmetric/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# STDOUT Metric Exporter\n\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/stdout/stdoutmetric)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/stdout/stdoutmetric)\n```\n\n----------------------------------------\n\nTITLE: Using blas64 for Vector operations in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the blas64 package from Gonum to perform vector operations. It creates a float64 vector, sets its parameters, and then calculates its Euclidean norm using the Nrm2 function, printing the result to the console.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/gonum.org/v1/gonum/blas/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"gonum.org/v1/gonum/blas/blas64\"\n)\n\nfunc main() {\n\tv := blas64.Vector{Inc: 1, Data: []float64{1, 1, 1}}\n\tv.N = len(v.Data)\n\tfmt.Println(\"v has length:\", blas64.Nrm2(v))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Inngest E2E Tests\nDESCRIPTION: This command executes the end-to-end tests for Inngest with specific environment variables set for the signing key, API URL, and SDK URL.\nSOURCE: https://github.com/inngest/inngest/blob/main/TESTING.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nINNGEST_SIGNING_KEY=test API_URL=http://127.0.0.1:8288 SDK_URL=http://127.0.0.1:3000/api/inngest go test ./tests -v -count=1\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Custom PostgreSQL Configuration\nDESCRIPTION: This command demonstrates how to run Go tests with a custom PostgreSQL host configuration using an environment variable.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPGHOST=/run/postgresql go test\n```\n\n----------------------------------------\n\nTITLE: Best Compression Mode Performance Benchmarks\nDESCRIPTION: Performance comparison of S2 compression modes on large datasets, showing compression ratios and throughput across different file types\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n* enwik10\nDefault... 10000000000 -> 4759950115 [47.60%]; 1.03s, 9263.0MB/s\nBetter...  10000000000 -> 4084706676 [40.85%]; 2.16s, 4415.4MB/s\nBest...    10000000000 -> 3615520079 [36.16%]; 42.259s, 225.7MB/s\n```\n\n----------------------------------------\n\nTITLE: Handling CodeDeploy Events in AWS Lambda using Go\nDESCRIPTION: This Go function is designed to handle CodeDeploy events in an AWS Lambda environment. It imports the necessary AWS Lambda event types and uses fmt for logging. The function simply prints the received event to standard output.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-lambda-go/events/README_CodeDeploy.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"github.com/aws/aws-lambda-go/events\"\n)\n\nfunc handleRequest(evt events.CodeDeployEvent) {\n\tfmt.Println(evt)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Background Color using ANSI Escape Sequences\nDESCRIPTION: Uses ANSI escape sequence to change the terminal background color to green (#00ff00). The command uses OSC 11 for background color modification.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]11;#00ff00\\007\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Option Interface in Go\nDESCRIPTION: Creates an Option interface that will be used to modify configuration values. The unexported apply method ensures the interface cannot be implemented externally.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Token Struct Definition in Go\nDESCRIPTION: Updated Token struct definition showing the new signature field type and structure for JWT tokens.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Token struct {\n\tRaw       string                 // Raw contains the raw token\n\tMethod    SigningMethod          // Method is the signing method used or to be used\n\tHeader    map[string]interface{} // Header is the first segment of the token in decoded form\n\tClaims    Claims                 // Claims is the second segment of the token in decoded form\n\tSignature []byte                 // Signature is the third segment of the token in decoded form\n\tValid     bool                   // Valid specifies if the token is valid\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Cache Interface from v4 to v5\nDESCRIPTION: Changes to Cache interface methods to use Key type instead of interface{}.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/graph-gophers/dataloader/MIGRATE.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n// cache interface now allows interface{} as key instead of string\ntype Cache interface {\n-\tGet(context.Context, interface{}) (Thunk, bool)\n+\tGet(context.Context, Key) (Thunk, bool)\n-\tSet(context.Context, interface{}, Thunk)\n+\tSet(context.Context, Key, Thunk)\n-\tDelete(context.Context, interface{}) bool\n+\tDelete(context.Context, Key) bool\n\tClear()\n}\n```\n\n----------------------------------------\n\nTITLE: StringFlag Type and Methods in Go\nDESCRIPTION: Definition and implementation of StringFlag type that wraps cli.StringFlag with additional functionality\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_80\n\nLANGUAGE: go\nCODE:\n```\ntype StringFlag struct {\n\t*cli.StringFlag\n\t// Has unexported fields.\n}\n\nfunc NewStringFlag(fl *cli.StringFlag) *StringFlag\nfunc (f *StringFlag) Apply(set *flag.FlagSet) error\nfunc (f *StringFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: JetStream Stream and Consumer Management in Go\nDESCRIPTION: Shows how to perform administrative tasks in JetStream including creating and updating streams, managing consumers, and cleaning up resources. Demonstrates stream configuration and consumer management operations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/legacy_jetstream.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/nats-io/nats.go\"\n\n// Connect to NATS\nnc, _ := nats.Connect(nats.DefaultURL)\n\n// Create JetStream Context\njs, _ := nc.JetStream()\n\n// Create a Stream\njs.AddStream(&nats.StreamConfig{\n    Name:     \"ORDERS\",\n    Subjects: []string{\"ORDERS.*\"},\n})\n\n// Update a Stream\njs.UpdateStream(&nats.StreamConfig{\n    Name:     \"ORDERS\",\n    MaxBytes: 8,\n})\n\n// Create a Consumer\njs.AddConsumer(\"ORDERS\", &nats.ConsumerConfig{\n    Durable: \"MONITOR\",\n})\n\n// Delete Consumer\njs.DeleteConsumer(\"ORDERS\", \"MONITOR\")\n\n// Delete Stream\njs.DeleteStream(\"ORDERS\")\n```\n\n----------------------------------------\n\nTITLE: Original Time Package Usage Example in Go\nDESCRIPTION: Example showing direct usage of time.Sleep from the time package, which is harder to test.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jonboulle/clockwork/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc myFunc() {\n\ttime.Sleep(3 * time.Second)\n\tdoSomething()\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Go Repository Directly in Shell\nDESCRIPTION: Alternative command to clone the OpenTelemetry Go SDK repository using Git.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Setting up GraphQL Integration Environment\nDESCRIPTION: Commands for setting up and running the integration environment for testing GraphQL schema generation. Involves generating code, running the server, and executing the GraphQL code generator to compare schema outputs.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd integration\ngo generate ./...\ngo run ./server/server.go\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd integration\nnpm install\n./node_modules/.bin/graphql-codegen\n```\n\n----------------------------------------\n\nTITLE: Code Formatting Command\nDESCRIPTION: Command to run Prettier formatter on all project files\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dashboard/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm format\n```\n\n----------------------------------------\n\nTITLE: Manually Loading S2 Index\nDESCRIPTION: Load an S2 index manually from byte data to enable advanced stream manipulation\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nvar index s2.Index\n_, err = index.Load(idxBytes)\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-release Versions from npm\nDESCRIPTION: Commands for installing specific pre-release versions or the latest version of a specific release type using npx. Shows how to target a specific version or use the general beta tag.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/RELEASING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Use a specific release\nnpx inngest-cli@v1.2.23-beta.1 dev\n# Use the latest beta release\nnpx inngest-cli@beta dev\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go Module Versioning in go.mod Files\nDESCRIPTION: This snippet shows how to include the major version in module paths for Go modules version v2 or higher in go.mod files. It demonstrates the correct format for module declaration and dependency requirements.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule go.opentelemetry.io/otel/v2\nrequire go.opentelemetry.io/otel/v2 v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Implementing StringFlag Structure in Go\nDESCRIPTION: Definition of the StringFlag structure which represents a CLI flag with a string value. It includes fields for name, usage, value, destination, and various flag characteristics like visibility and requirement status.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_38\n\nLANGUAGE: go\nCODE:\n```\ntype StringFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       string\n\tDestination *string\n\n\tAliases []string\n\tEnvVars []string\n\n\tTakesFile bool\n\n\tAction func(*Context, string) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IntSliceFlag in Go\nDESCRIPTION: IntSliceFlag is a flag with type *IntSlice. It includes methods for applying the flag, getting its value, and other utility functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_33\n\nLANGUAGE: go\nCODE:\n```\ntype IntSliceFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       *IntSlice\n\tDestination *IntSlice\n\n\tAliases []string\n\tEnvVars []string\n\n\tAction func(*Context, []int) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Uint64SliceFlag for CLI Applications in Go\nDESCRIPTION: Definition of Uint64SliceFlag struct for handling arrays of uint64 values in command-line interfaces. It includes properties for flag configuration and methods for interacting with the flag value in different contexts.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_53\n\nLANGUAGE: go\nCODE:\n```\ntype Uint64SliceFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       *Uint64Slice\n\tDestination *Uint64Slice\n\n\tAliases []string\n\tEnvVars []string\n\n\tAction func(*Context, []uint64) error\n\t// Has unexported fields.\n}\n    Uint64SliceFlag is a flag with type *Uint64Slice\n```\n\n----------------------------------------\n\nTITLE: Building and Documentation Commands\nDESCRIPTION: Commands for building CLI, generating documentation, and managing external dependencies.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake html-coverage\nmake build-cli\nmake list-external-deps\nmake docs && make open-docs\nmake kill-docs\n```\n\n----------------------------------------\n\nTITLE: Handling I/O Timeout with Go Modules\nDESCRIPTION: Provides commands to use Go modules to work around I/O timeouts by replacing imports with GitHub aliases. Assumes Go module support is enabled in your project, and these commands should be executed in your project's directory. This approach requires handling all transitive dependencies.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Uint64Flag Type and Methods in Go\nDESCRIPTION: Definition and implementation of Uint64Flag type that wraps cli.Uint64Flag with additional functionality\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_82\n\nLANGUAGE: go\nCODE:\n```\ntype Uint64Flag struct {\n\t*cli.Uint64Flag\n\t// Has unexported fields.\n}\n\nfunc NewUint64Flag(fl *cli.Uint64Flag) *Uint64Flag\nfunc (f *Uint64Flag) Apply(set *flag.FlagSet) error\nfunc (f *Uint64Flag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Installing Gonum LAPACK packages\nDESCRIPTION: Command for installing all Gonum LAPACK packages using Go's package manager. This will download and install the LAPACK API definition and implementations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/gonum.org/v1/gonum/lapack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  go get gonum.org/v1/gonum/lapack/...\n```\n\n----------------------------------------\n\nTITLE: Disabling Experimental Resource Semantic Conventions\nDESCRIPTION: This code snippet demonstrates how to disable experimental resource semantic conventions in the OpenTelemetry Go SDK. It unsets the `OTEL_GO_X_RESOURCE` environment variable, effectively deactivating the feature. This prevents resource detectors from adding experimental semantic conventions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"unset OTEL_GO_X_RESOURCE\"\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenCensus Go Repository\nDESCRIPTION: Command to clone the OpenCensus Go repository to the local GOPATH. This is the first step in setting up the development environment.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -d go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Installing Viper using Go Modules\nDESCRIPTION: Command to install Viper using Go's module system. This is the recommended way to add Viper as a dependency to your Go project.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/spf13/viper\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using npm, yarn, or pnpm. This allows developers to run the project locally for development and testing purposes.\nSOURCE: https://github.com/inngest/inngest/blob/main/tests/js/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Product Nomenclature Example\nDESCRIPTION: Example demonstrating the correct terminology usage according to product nomenclature guidelines\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dashboard/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Good - terminology we use for external comms\nconst environment = '';\n\n// Bad - deprecated terminology\nconst workspace = '';\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for JSON Operations in Go\nDESCRIPTION: Comprehensive benchmark results comparing various JSON operations across different Go packages and methods. The results include metrics for parsing, unmarshaling, tokenizing, validation, and JSON generation, along with memory allocation and operation counts.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/benchmarks.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nParse string/[]byte\n       json.Unmarshal           55916 ns/op    17776 B/op    334 allocs/op\n         oj.Parse               39570 ns/op    18488 B/op    429 allocs/op\n   oj-reuse.Parse               17881 ns/op     5691 B/op    364 allocs/op\n        gen.Parse               28670 ns/op    18488 B/op    429 allocs/op\n  gen-reuse.Parse               19619 ns/op     5691 B/op    364 allocs/op\n        sen.Parse               30486 ns/op    18488 B/op    431 allocs/op\n  sen-reuse.Parse               20018 ns/op     5708 B/op    366 allocs/op\n\n   oj-reuse.Parse        █████████████████████▉ 3.13\n  gen-reuse.Parse        ███████████████████▉ 2.85\n  sen-reuse.Parse        ███████████████████▌ 2.79\n        gen.Parse        █████████████▋ 1.95\n        sen.Parse        ████████████▊ 1.83\n         oj.Parse        █████████▉ 1.41\n       json.Unmarshal    ▓▓▓▓▓▓▓ 1.00\n\nUnmarshal []byte to type\n       json.Unmarshal           44513 ns/op     5944 B/op    122 allocs/op\n         oj.Unmarshal           41010 ns/op     9705 B/op    457 allocs/op\n        sen.Unmarshal           41763 ns/op     9690 B/op    457 allocs/op\n\n         oj.Unmarshal    ███████▌ 1.09\n        sen.Unmarshal    ███████▍ 1.07\n       json.Unmarshal    ▓▓▓▓▓▓▓ 1.00\n\nTokenize\n       json.Decode              77026 ns/op    22600 B/op   1175 allocs/op\n         oj.Tokenize             7883 ns/op     1976 B/op    156 allocs/op\n        sen.Tokenize             8347 ns/op     1976 B/op    158 allocs/op\n\n         oj.Tokenize     ████████████████████████████████████████████████████████████████████▍ 9.77\n        sen.Tokenize     ████████████████████████████████████████████████████████████████▌ 9.23\n       json.Decode       ▓▓▓▓▓▓▓ 1.00\n\nParse io.Reader\n       json.Decode              63029 ns/op    32449 B/op    344 allocs/op\n         oj.ParseReader         34289 ns/op    22583 B/op    430 allocs/op\n   oj-reuse.ParseReader         25094 ns/op     9788 B/op    365 allocs/op\n        gen.ParseReder          43859 ns/op    22585 B/op    430 allocs/op\n  gen-reuse.ParseReder          23066 ns/op     9788 B/op    365 allocs/op\n        sen.ParseReader         36991 ns/op    22585 B/op    432 allocs/op\n  sen-reuse.ParseReader         23363 ns/op     9788 B/op    367 allocs/op\n         oj.TokenizeLoad        13610 ns/op     6072 B/op    157 allocs/op\n        sen.TokenizeLoad        12485 ns/op     6072 B/op    159 allocs/op\n\n        sen.TokenizeLoad ███████████████████████████████████▎ 5.05\n         oj.TokenizeLoad ████████████████████████████████▍ 4.63\n  gen-reuse.ParseReder   ███████████████████▏ 2.73\n  sen-reuse.ParseReader  ██████████████████▉ 2.70\n   oj-reuse.ParseReader  █████████████████▌ 2.51\n         oj.ParseReader  ████████████▊ 1.84\n        sen.ParseReader  ███████████▉ 1.70\n        gen.ParseReder   ██████████  1.44\n       json.Decode       ▓▓▓▓▓▓▓ 1.00\n\nParse chan interface{}\n       json.Parse-chan          47625 ns/op    17790 B/op    335 allocs/op\n         oj.Parse               34403 ns/op    18489 B/op    429 allocs/op\n        gen.Parse               32320 ns/op    18487 B/op    429 allocs/op\n        sen.Parse               35632 ns/op    18472 B/op    431 allocs/op\n\n        gen.Parse        ██████████▎ 1.47\n         oj.Parse        █████████▋ 1.38\n        sen.Parse        █████████▎ 1.34\n       json.Parse-chan   ▓▓▓▓▓▓▓ 1.00\n\nValidate string/[]byte\n       json.Valid               12056 ns/op        0 B/op      0 allocs/op\n         oj.Valdate              3801 ns/op        0 B/op      0 allocs/op\n\n         oj.Valdate      ██████████████████████▏ 3.17\n       json.Valid        ▓▓▓▓▓▓▓ 1.00\n\nValidate io.Reader\n       json.Decode              72646 ns/op    32449 B/op    344 allocs/op\n         oj.Valdate              7029 ns/op     4096 B/op      1 allocs/op\n\n         oj.Valdate      ████████████████████████████████████████████████████████████████████████▎ 10.34\n       json.Decode       ▓▓▓▓▓▓▓ 1.00\n\nto JSON\n       json.Marshal             48864 ns/op    17559 B/op    345 allocs/op\n         oj.JSON                 6667 ns/op        0 B/op      0 allocs/op\n        sen.SEN                  8167 ns/op        0 B/op      0 allocs/op\n\n         oj.JSON         ███████████████████████████████████████████████████▎ 7.33\n        sen.SEN          █████████████████████████████████████████▉ 5.98\n       json.Marshal      ▓▓▓▓▓▓▓ 1.00\n\nto JSON with indentation\n       json.Marshal             78762 ns/op    26978 B/op    352 allocs/op\n         oj.JSON                 7662 ns/op        0 B/op      0 allocs/op\n        sen.Bytes                9053 ns/op        0 B/op      0 allocs/op\n     pretty.JSON                62868 ns/op    36112 B/op    445 allocs/op\n     pretty.SEN                 55533 ns/op    31160 B/op    396 allocs/op\n\n         oj.JSON         ███████████████████████████████████████████████████████████████████████▉ 10.28\n        sen.Bytes        ████████████████████████████████████████████████████████████▉ 8.70\n     pretty.SEN          █████████▉ 1.42\n     pretty.JSON         ████████▊ 1.25\n       json.Marshal      ▓▓▓▓▓▓▓ 1.00\n\nto JSON with indentation and sorted keys\n         oj.JSON                13883 ns/op     2216 B/op     62 allocs/op\n        sen.Bytes               15564 ns/op     2216 B/op     62 allocs/op\n     pretty.JSON                85521 ns/op    36112 B/op    445 allocs/op\n     pretty.SEN                 64236 ns/op    31160 B/op    396 allocs/op\n\n         oj.JSON         ▓▓▓▓▓▓▓ 1.00\n        sen.Bytes        ██████▏ 0.89\n     pretty.SEN          █▌ 0.22\n     pretty.JSON         █▏ 0.16\n\nWrite indented JSON\n       json.Encode              86428 ns/op    28039 B/op    353 allocs/op\n         oj.Write                7523 ns/op        0 B/op      0 allocs/op\n        sen.Write                8950 ns/op        0 B/op      0 allocs/op\n     pretty.WriteJSON           43611 ns/op    22544 B/op    441 allocs/op\n     pretty.WriteSEN            47348 ns/op    19896 B/op    392 allocs/op\n\n         oj.Write        ████████████████████████████████████████████████████████████████████████████████▍ 11.49\n        sen.Write        ███████████████████████████████████████████████████████████████████▌ 9.66\n     pretty.WriteJSON    █████████████▊ 1.98\n     pretty.WriteSEN     ████████████▊ 1.83\n       json.Encode       ▓▓▓▓▓▓▓ 1.00\n\nMarshal Struct\n       json.Marshal             11960 ns/op     3457 B/op      1 allocs/op\n         oj.Marshal              8310 ns/op     1712 B/op     44 allocs/op\n\n         oj.Marshal      ██████████  1.44\n       json.Marshal      ▓▓▓▓▓▓▓ 1.00\n\nConvert or Alter\n        alt.Generify             3275 ns/op     1664 B/op     25 allocs/op\n        alt.Alter                1695 ns/op      912 B/op     17 allocs/op\n\n        alt.Alter        █████████████▌ 1.93\n        alt.Generify     ▓▓▓▓▓▓▓ 1.00\n\nJSONPath Get $..a[2].c\n         jp.Get                239469 ns/op    19288 B/op   2227 allocs/op\n\n         jp.Get          ▓▓▓▓▓▓▓ 1.00\n\nJSONPath First  $..a[2].c\n         jp.First               22625 ns/op     2880 B/op    233 allocs/op\n\n         jp.First        ▓▓▓▓▓▓▓ 1.00\n```\n\n----------------------------------------\n\nTITLE: Library Performance Comparisons\nDESCRIPTION: Comparative benchmark results between different Levenshtein Distance implementations, showing performance across various character sets.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/agnivade/levenshtein/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nname                     time/op\nLeven/ASCII/agniva-4      353ns ± 1%\nLeven/ASCII/arbovm-4      485ns ± 1%\nLeven/ASCII/dgryski-4     395ns ± 0%\nLeven/French/agniva-4     648ns ± 1%\nLeven/French/arbovm-4     791ns ± 0%\nLeven/French/dgryski-4    682ns ± 0%\nLeven/Nordic/agniva-4    1.28µs ± 1%\nLeven/Nordic/arbovm-4    1.52µs ± 1%\nLeven/Nordic/dgryski-4   1.32µs ± 1%\nLeven/Tibetan/agniva-4   1.12µs ± 1%\nLeven/Tibetan/arbovm-4   1.31µs ± 0%\nLeven/Tibetan/dgryski-4  1.16µs ± 0%\n```\n\n----------------------------------------\n\nTITLE: Listing External Dependencies and Licenses in Markdown\nDESCRIPTION: This code snippet presents a Markdown table that lists the external dependencies used in the repository along with their corresponding licenses. It includes Go and various GitHub repositories with their licensing information.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Dependency                        | License      |\n|-----------------------------------|--------------|\\n| Go                                | BSD 3-Clause |\n| github.com/golang/protobuf/proto  | BSD-3-Clause |\n| github.com/klauspost/compress     | BSD-3-Clause |\n| github.com/nats-io/nats-server/v2 | Apache-2.0   |\n| github.com/nats-io/nkeys          | Apache-2.0   |\n| github.com/nats-io/nuid           | Apache-2.0   |\n| go.uber.org/goleak                | MIT          |\n| golang.org/x/text                 | BSD-3-Clause |\n| google.golang.org/protobuf        | BSD-3-Clause |\n```\n\n----------------------------------------\n\nTITLE: Implementing StringFlag Methods in Go\nDESCRIPTION: Method implementations for StringFlag including applying to a flag set, getting values and metadata, checking flag state, and running actions when the flag is set.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *StringFlag) Apply(set *flag.FlagSet) error\n    Apply populates the flag given the flag set and environment\n\nfunc (f *StringFlag) Get(ctx *Context) string\n    Get returns the flag's value in the given Context.\n\nfunc (f *StringFlag) GetCategory() string\n    GetCategory returns the category for the flag\n\nfunc (f *StringFlag) GetDefaultText() string\n    GetDefaultText returns the default text for this flag\n\nfunc (f *StringFlag) GetEnvVars() []string\n    GetEnvVars returns the env vars for this flag\n\nfunc (f *StringFlag) GetUsage() string\n    GetUsage returns the usage string for the flag\n\nfunc (f *StringFlag) GetValue() string\n    GetValue returns the flags value as string representation and an empty\n    string if the flag takes no value at all.\n\nfunc (f *StringFlag) IsRequired() bool\n    IsRequired returns whether or not the flag is required\n\nfunc (f *StringFlag) IsSet() bool\n    IsSet returns whether or not the flag has been set through env or file\n\nfunc (f *StringFlag) IsVisible() bool\n    IsVisible returns true if the flag is not hidden, otherwise false\n\nfunc (f *StringFlag) Names() []string\n    Names returns the names of the flag\n\nfunc (f *StringFlag) RunAction(c *Context) error\n    RunAction executes flag action if set\n\nfunc (f *StringFlag) String() string\n    String returns a readable representation of this value (for usage defaults)\n\nfunc (f *StringFlag) TakesValue() bool\n    TakesValue returns true of the flag takes a value, otherwise false\n```\n\n----------------------------------------\n\nTITLE: Defining UintSlice Type for CLI Flags in Go\nDESCRIPTION: Implementation of UintSlice type that wraps []uint to satisfy the flag.Value interface. It provides methods for getting, setting, and serializing uint slice values for command-line flags.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_55\n\nLANGUAGE: go\nCODE:\n```\ntype UintSlice struct {\n\t// Has unexported fields.\n}\n    UintSlice wraps []int to satisfy flag.Value\n\nfunc NewUintSlice(defaults ...uint) *UintSlice\n    NewUintSlice makes an *UintSlice with default values\n\nfunc (i *UintSlice) Get() interface{}\n    Get returns the slice of ints set by this flag\n\nfunc (i *UintSlice) Serialize() string\n    Serialize allows UintSlice to fulfill Serializer\n\nfunc (i *UintSlice) Set(value string) error\n    Set parses the value into an integer and appends it to the list of values\n\nfunc (i *UintSlice) SetUint(value uint)\n    TODO: Consistently have specific Set function for Int64 and Float64 ? SetInt\n    directly adds an integer to the list of values\n\nfunc (i *UintSlice) String() string\n    String returns a readable representation of this value (for usage defaults)\n\nfunc (i *UintSlice) Value() []uint\n    Value returns the slice of ints set by this flag\n\nfunc (i *UintSlice) WithSeparatorSpec(spec separatorSpec)\n```\n\n----------------------------------------\n\nTITLE: Running JS SDK for Inngest\nDESCRIPTION: This command navigates to the JS tests directory and runs the development server for the JS SDK.\nSOURCE: https://github.com/inngest/inngest/blob/main/TESTING.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd tests/js && yarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Structs Package with Go Get\nDESCRIPTION: Command to install the Structs package using Go's package manager.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fatih/structs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/fatih/structs\n```\n\n----------------------------------------\n\nTITLE: Upgrading Interface Methods from v3 to v4\nDESCRIPTION: Changes to method signatures replacing string keys with interface{} for more flexibility.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/graph-gophers/dataloader/MIGRATE.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n// dataloader.Interface as now allows interace{} as key rather than string\n- loader.Load(context.Context, key string) Thunk\n+ loader.Load(ctx context.Context, key interface{}) Thunk\n- loader.LoadMany(context.Context, key []string) ThunkMany\n+ loader.LoadMany(ctx context.Context, keys []interface{}) ThunkMany\n- loader.Prime(context.Context, key string, value interface{}) Interface\n+ loader.Prime(ctx context.Context, key interface{}, value interface{}) Interface\n- loader.Clear(context.Context, key string) Interface\n+ loader.Clear(ctx context.Context, key interface{}) Interface\n```\n\n----------------------------------------\n\nTITLE: Replacing Legacy Import Path in Go Modules\nDESCRIPTION: This shell snippet shows how to use the `go mod edit` command to replace an old import path with a new one for compatibility with Go modules. It targets a specific version.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go mod edit -replace github.com/uber-go/atomic=github.com/uber-go/atomic@v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Implementing TimestampFlag Structure in Go\nDESCRIPTION: Definition of the TimestampFlag structure representing a flag with a Timestamp value, allowing date and time values to be specified for a flag.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_48\n\nLANGUAGE: go\nCODE:\n```\ntype TimestampFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       *Timestamp\n\tDestination *Timestamp\n\n\tAliases []string\n\tEnvVars []string\n\n\tLayout string\n\n\tTimezone *time.Location\n\n\tAction func(*Context, *time.Time) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Running fsnotify Tests\nDESCRIPTION: Command for running the test suite for fsnotify. Tests can be run with the -short flag to expedite stress tests. CI runs these tests across all supported platforms.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/fsnotify/fsnotify/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint for Go code linting\nDESCRIPTION: Instructions for installing and running golangci-lint to check for syntax and style issues in Go code.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ngolangci-lint run --out-format=github-actions\n```\n\n----------------------------------------\n\nTITLE: Installing Zerolog Package in Go\nDESCRIPTION: Command to install the zerolog logging package using go get.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/rs/zerolog/log\n```\n\n----------------------------------------\n\nTITLE: Installing OjG Command Line Tool\nDESCRIPTION: Commands for installing the oj command line application using go install or brew.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo install ./...\n\nbrew install oj\n```\n\n----------------------------------------\n\nTITLE: Copy Case Convention Examples\nDESCRIPTION: Examples showing correct sentence case usage in UI elements\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\n<button>Click me</button>;\n\n// Bad\n<button>Click Me</button>;\n```\n\n----------------------------------------\n\nTITLE: Enumer CLI Usage Example\nDESCRIPTION: Shows the command-line interface help output for the Enumer tool, including all available flags and options for code generation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dmarkham/enumer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./enumer --help\nEnumer is a tool to generate Go code that adds useful methods to Go enums (constants with a specific type).\nUsage of ./enumer:\n        Enumer [flags] -type T [directory]\n        Enumer [flags] -type T files... # Must be a single package\nFor more information, see:\n        http://godoc.org/github.com/dmarkham/enumer\nFlags:\n  -addprefix string\n        transform each item name by adding a prefix. Default: \"\"\n  -comment value\n        comments to include in generated code, can repeat. Default: \"\"\n  -gqlgen\n        if true, GraphQL marshaling methods for gqlgen will be generated. Default: false\n  -json\n        if true, json marshaling methods will be generated. Default: false\n  -linecomment\n        use line comment text as printed text when present\n  -output string\n        output file name; default srcdir/<type>_string.go\n  -sql\n        if true, the Scanner and Valuer interface will be implemented.\n  -text\n        if true, text marshaling methods will be generated. Default: false\n  -transform string\n        enum item name transformation method. Default: noop (default \"noop\")\n  -trimprefix string\n        transform each item name by removing a prefix. Default: \"\"\n  -type string\n        comma-separated list of type names; must be set\n  -values\n    \tif true, alternative string values method will be generated. Default: false\n  -yaml\n        if true, yaml marshaling methods will be generated. Default: false\n```\n\n----------------------------------------\n\nTITLE: Levenshtein Distance Benchmarks\nDESCRIPTION: Benchmark results showing performance metrics for different types of string inputs including ASCII, French, Nordic, and Tibetan characters.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/agnivade/levenshtein/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nname              time/op\nSimple/ASCII-4     330ns ± 2%\nSimple/French-4    617ns ± 2%\nSimple/Nordic-4   1.16µs ± 4%\nSimple/Tibetan-4  1.05µs ± 1%\n\nname              alloc/op\nSimple/ASCII-4     96.0B ± 0%\nSimple/French-4     128B ± 0%\nSimple/Nordic-4     192B ± 0%\nSimple/Tibetan-4    144B ± 0%\n\nname              allocs/op\nSimple/ASCII-4      1.00 ± 0%\nSimple/French-4     1.00 ± 0%\nSimple/Nordic-4     1.00 ± 0%\nSimple/Tibetan-4    1.00 ± 0%\n```\n\n----------------------------------------\n\nTITLE: Illustrating Migration File Structure in Plaintext\nDESCRIPTION: Demonstrates the relationship between Next/Previous and Up/Down migration files, showing the naming convention and directional flow.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/FAQ.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1_first_migration.up.extension           next ->  2_second_migration.up.extension      ...\n1_first_migration.down.extension  <- previous     2_second_migration.down.extension    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSliceFlag Methods in Go\nDESCRIPTION: Method implementations for StringSliceFlag including applying to a flag set, getting values and metadata, checking flag state, running actions, and setting values and destinations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_43\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *StringSliceFlag) Apply(set *flag.FlagSet) error\n    Apply populates the flag given the flag set and environment\n\nfunc (f *StringSliceFlag) Get(ctx *Context) []string\n    Get returns the flag's value in the given Context.\n\nfunc (f *StringSliceFlag) GetCategory() string\n    GetCategory returns the category for the flag\n\nfunc (f *StringSliceFlag) GetDefaultText() string\n    GetDefaultText returns the default text for this flag\n\nfunc (f *StringSliceFlag) GetDestination() []string\n\nfunc (f *StringSliceFlag) GetEnvVars() []string\n    GetEnvVars returns the env vars for this flag\n\nfunc (f *StringSliceFlag) GetUsage() string\n    GetUsage returns the usage string for the flag\n\nfunc (f *StringSliceFlag) GetValue() string\n    GetValue returns the flags value as string representation and an empty\n    string if the flag takes no value at all.\n\nfunc (f *StringSliceFlag) IsRequired() bool\n    IsRequired returns whether or not the flag is required\n\nfunc (f *StringSliceFlag) IsSet() bool\n    IsSet returns whether or not the flag has been set through env or file\n\nfunc (f *StringSliceFlag) IsSliceFlag() bool\n    IsSliceFlag implements DocGenerationSliceFlag.\n\nfunc (f *StringSliceFlag) IsVisible() bool\n    IsVisible returns true if the flag is not hidden, otherwise false\n\nfunc (f *StringSliceFlag) Names() []string\n    Names returns the names of the flag\n\nfunc (f *StringSliceFlag) RunAction(c *Context) error\n    RunAction executes flag action if set\n\nfunc (f *StringSliceFlag) SetDestination(slice []string)\n\nfunc (f *StringSliceFlag) SetValue(slice []string)\n\nfunc (f *StringSliceFlag) String() string\n    String returns a readable representation of this value (for usage defaults)\n\nfunc (f *StringSliceFlag) TakesValue() bool\n    TakesValue returns true of the flag takes a value, otherwise false\n\nfunc (f *StringSliceFlag) WithSeparatorSpec(spec separatorSpec)\n```\n\n----------------------------------------\n\nTITLE: Step Not Found Operation Response Structure in TypeScript\nDESCRIPTION: Defines the structure for responding when a specific step cannot be found during execution. This simply includes the step ID and a StepNotFound operation type.\nSOURCE: https://github.com/inngest/inngest/blob/main/docs/SDK_SPEC.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tid: string;\n\top: \"StepNotFound\";\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Cache Interface from v2 to v3\nDESCRIPTION: Changes to Cache interface methods to include context.Context parameter.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/graph-gophers/dataloader/MIGRATE.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n// cache interface as added context.Context to methods\ntype Cache interface {\n-\tGet(string) (Thunk, bool)\n+\tGet(context.Context, string) (Thunk, bool)\n-\tSet(string, Thunk)\n+\tSet(context.Context, string, Thunk)\n-\tDelete(string) bool\n+\tDelete(context.Context, string) bool\n\tClear()\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Go Modules Configuration\nDESCRIPTION: Command to enable Go Modules mode, which resolves package installation issues by properly managing dependency versions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/TROUBLESHOOTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Implementing StringSlice Structure in Go\nDESCRIPTION: Definition of the StringSlice structure that wraps a []string to satisfy the flag.Value interface, allowing it to be used as a value for command line flags.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_40\n\nLANGUAGE: go\nCODE:\n```\ntype StringSlice struct {\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Frand Package in Go\nDESCRIPTION: Demonstrates how to install the frand package using Go package management. This command downloads the package from the specified repository.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/lukechampine.com/frand/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get lukechampine.com/frand\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Inngest E2E Tests\nDESCRIPTION: This command runs a specific test or set of tests matching the provided test name pattern, using the same environment variables as the full test run.\nSOURCE: https://github.com/inngest/inngest/blob/main/TESTING.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nINNGEST_SIGNING_KEY=test API_URL=http://127.0.0.1:8288 SDK_URL=http://127.0.0.1:3000/api/inngest go test ./tests -v -count=1 -test.run TestSDKCancelNotReceived\n```\n\n----------------------------------------\n\nTITLE: Running goimports for Go code formatting\nDESCRIPTION: Instructions for installing and running goimports to format Go code according to the project's style guidelines.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install golang.org/x/tools/cmd/goimports@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ngoimports -w .\n```\n\n----------------------------------------\n\nTITLE: Installing Go Slug Package\nDESCRIPTION: Command to install the slug package using Go modules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/gosimple/slug/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/gosimple/slug\n```\n\n----------------------------------------\n\nTITLE: Installing the B-tree Package in Go\nDESCRIPTION: Command to install the B-tree package using Go's package manager. This is the first step to start using the package in a Go project.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/tidwall/btree/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get github.com/tidwall/btree\n```\n\n----------------------------------------\n\nTITLE: Using petname CLI in Bash\nDESCRIPTION: Examples of using the petname command-line interface with various options to generate pet names.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustinkirkland/golang-petname/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ petname\nwiggly-yellowtail\n\n$ petname --words 1\nrobin\n\n$ petname --words 3\nprimly-lasting-toucan\n\n$ petname --words 4\nangrily-impatiently-sage-longhorn\n\n$ petname --separator \":\"\ncool:gobbler\n\n$ petname --separator \"\" --words 3\ncomparablyheartylionfish\n\n$ petname --ubuntu\namazed-asp\n\n$ petname --complexity 0\nmassive-colt\n```\n\n----------------------------------------\n\nTITLE: Installing Gorilla WebSocket Package\nDESCRIPTION: Command to install the Gorilla WebSocket package using Go package manager.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/gorilla/websocket/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/gorilla/websocket\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database\nDESCRIPTION: Creates a new PostgreSQL database named 'example' using psql command line tool.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/postgres/TUTORIAL.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npsql -h localhost -U postgres -w -c \"create database example;\"\n```\n\n----------------------------------------\n\nTITLE: SEN Document Example\nDESCRIPTION: Demonstrates a valid SEN document format showing key features like optional commas, unquoted strings, and array syntax.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/sen.md#2025-04-22_snippet_1\n\nLANGUAGE: sen\nCODE:\n```\n{\n  one: 1\n  two: 2\n  array: [a b c]\n  yes: true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TimestampFlag Methods in Go\nDESCRIPTION: Method implementations for TimestampFlag including applying to a flag set, getting values and metadata, checking flag state, and running actions when the flag is set.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_49\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *TimestampFlag) Apply(set *flag.FlagSet) error\n    Apply populates the flag given the flag set and environment\n\nfunc (f *TimestampFlag) Get(ctx *Context) *time.Time\n    Get returns the flag's value in the given Context.\n\nfunc (f *TimestampFlag) GetCategory() string\n    GetCategory returns the category for the flag\n\nfunc (f *TimestampFlag) GetDefaultText() string\n    GetDefaultText returns the default text for this flag\n\nfunc (f *TimestampFlag) GetEnvVars() []string\n    GetEnvVars returns the env vars for this flag\n\nfunc (f *TimestampFlag) GetUsage() string\n    GetUsage returns the usage string for the flag\n\nfunc (f *TimestampFlag) GetValue() string\n    GetValue returns the flags value as string representation and an empty\n    string if the flag takes no value at all.\n\nfunc (f *TimestampFlag) IsRequired() bool\n    IsRequired returns whether or not the flag is required\n\nfunc (f *TimestampFlag) IsSet() bool\n    IsSet returns whether or not the flag has been set through env or file\n\nfunc (f *TimestampFlag) IsVisible() bool\n    IsVisible returns true if the flag is not hidden, otherwise false\n\nfunc (f *TimestampFlag) Names() []string\n    Names returns the names of the flag\n\nfunc (f *TimestampFlag) RunAction(c *Context) error\n    RunAction executes flag action if set\n\nfunc (f *TimestampFlag) String() string\n    String returns a readable representation of this value (for usage defaults)\n\nfunc (f *TimestampFlag) TakesValue() bool\n    TakesValue returns true of the flag takes a value, otherwise false\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Options with Default False in Go\nDESCRIPTION: Shows how to implement boolean options that default to false. The WithOption function provides a user-friendly way to enable the option.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing gqlgen Release Script with Version Parameter in Bash\nDESCRIPTION: Runs the release script for gqlgen with the new version as a parameter. This is the first step in the release process before updating the changelog and regenerating files.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/RELEASE-CHECKLIST.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/release $NEW_VERSION\n```\n\n----------------------------------------\n\nTITLE: Running Pre-release Process for OpenTelemetry Go Modules\nDESCRIPTION: Command to execute the pre-release process for a specific module set. This creates a new branch with version updates for the release.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\n```\n\n----------------------------------------\n\nTITLE: Fetching OpenTelemetry Go Package in Go\nDESCRIPTION: Command to fetch the OpenTelemetry Go SDK package using Go get.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Interface in Go\nDESCRIPTION: Generic is an interface for a generic parseable type identified by a specific flag. It requires Set and String methods.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\ntype Generic interface {\n\tSet(value string) error\n\tString() string\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terminal Foreground Color using ANSI Escape Sequences\nDESCRIPTION: Uses ANSI escape sequence to change the terminal foreground text color to blue (#0000ff). The command uses OSC 10 for foreground color modification.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/muesli/termenv/ansi_compat.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"\\033]10;#0000ff\\007\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with go_test.mod\nDESCRIPTION: This command runs tests using the go_test.mod file for managing dependencies. It can be used directly or by setting the GOFLAGS environment variable.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/nats-io/nats.go/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./... -modfile=go_test.mod\n```\n\n----------------------------------------\n\nTITLE: Upgrading Interface Methods from v2 to v3\nDESCRIPTION: Addition of context.Context parameter to Prime and Clear methods in the Interface.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/graph-gophers/dataloader/MIGRATE.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n// dataloader.Interface as added context.Context to methods\n- loader.Prime(key string, value interface{}) Interface\n+ loader.Prime(ctx context.Context, key string, value interface{}) Interface\n- loader.Clear(key string) Interface\n+ loader.Clear(ctx context.Context, key string) Interface\n```\n\n----------------------------------------\n\nTITLE: Installing Cron v3 Package in Go\nDESCRIPTION: Command to download and install the specific tagged v3.0.0 release of the cron package using Go modules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/robfig/cron/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/robfig/cron/v3@v3.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for Unidecode\nDESCRIPTION: Shell commands for running benchmarks, comparing performance between versions, and analyzing results using benchstat.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/gosimple/unidecode/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run=NONE -bench=. -benchmem -count=6 ./... > old.txt\n# make changes\ngo test -run=NONE -bench=. -benchmem -count=6 ./... > new.txt\n\ngo install golang.org/x/perf/cmd/benchstat@latest\n\nbenchstat old.txt new.txt\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Library with Go\nDESCRIPTION: Command to install the WebSocket library using Go's package manager.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/coder/websocket/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/coder/websocket\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure in Plaintext\nDESCRIPTION: Shows the high-level directory structure of the Migrate project, including the main package, CLI wrapper, database and source drivers.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/FAQ.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/          package migrate (the heart of everything)\n/cli       the CLI wrapper\n/database  database driver and sub directories have the actual driver implementations\n/source    source driver and sub directories have the actual driver implementations\n```\n\n----------------------------------------\n\nTITLE: Token Grammar Definition in EBNF\nDESCRIPTION: Defines the EBNF grammar rules for valid tokens in SEN, including token start characters, continuation characters, letters, and digits.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/sen.md#2025-04-22_snippet_0\n\nLANGUAGE: ebnf\nCODE:\n```\ntoken         = tokenStart [{tokenContinue}]\ntokenStart    = letter | \"_\" | \"^\" | \".\"\ntokenContinue = tokenStart | digit | \"-\"\nletter        = [A-Za-z_^~.] | U+0080 - U+FFFFFFFF\ndigit         = [0-9]\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Docker PostgreSQL Configuration\nDESCRIPTION: This command demonstrates how to run Go tests with specific PostgreSQL connection parameters for a Docker-based setup.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lib/pq/TESTS.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPGHOST=localhost PGPORT=5432 PGUSER=postgres PGSSLMODE=disable PGDATABASE=postgres go test\n```\n\n----------------------------------------\n\nTITLE: Installing PQ PostgreSQL Driver - Go\nDESCRIPTION: Command to install the PostgreSQL driver package using Go's package management system.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/lib/pq/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/lib/pq\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCensus Go Library\nDESCRIPTION: Command to install the OpenCensus Go library using go get.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u go.opencensus.io\n```\n\n----------------------------------------\n\nTITLE: Main Contributing Guidelines Document\nDESCRIPTION: Markdown document outlining the contribution process, including pull request guidelines and coding style references for the Inngest project.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/oklog/ulid/v2/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing\n\nWe use GitHub to manage reviews of pull requests.\n\n* If you have a trivial fix or improvement, go ahead and create a pull\n  request, addressing (with `@...`) one or more of the maintainers\n  (see [AUTHORS.md](AUTHORS.md)) in the description of the pull request.\n\n* If you plan to do something more involved, first propose your ideas\n  in a Github issue. This will avoid unnecessary work and surely give\n  you and us a good deal of inspiration.\n\n* Relevant coding style guidelines are the [Go Code Review\n  Comments](https://code.google.com/p/go-wiki/wiki/CodeReviewComments)\n  and the _Formatting and style_ section of Peter Bourgon's [Go: Best\n  Practices for Production\n  Environments](http://peter.bourgon.org/go-in-production/#formatting-and-style).\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Server Start Command\nDESCRIPTION: Starts the PostgreSQL server using the configured data directory.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jackc/pgx/v5/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npostgres -D .testdb/$POSTGRESQL_DATA_DIR\n```\n\n----------------------------------------\n\nTITLE: Handling Compression Errors in Go\nDESCRIPTION: This snippet shows the possible error values returned by the Huff0 compression functions. It includes errors for incompressible data, RLE-suitable data, oversized input, and internal errors.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/huff0/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n| Error               | Description                                                                 |\n|---------------------|-----------------------------------------------------------------------------|\n| `<nil>`             | Everything ok, output is returned                                           |\n| `ErrIncompressible` | Returned when input is judged to be too hard to compress                    |\n| `ErrUseRLE`         | Returned from the compressor when the input is a single byte value repeated |\n| `ErrTooBig`         | Returned if the input block exceeds the maximum allowed size (128 Kib)      |\n| `(error)`           | An internal error occurred.                                                 |\n```\n\n----------------------------------------\n\nTITLE: Production Build and Start Commands\nDESCRIPTION: Commands for building and running the application in production mode\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dashboard/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Build the app for production usage\n$ pnpm build\n\n# Start the app in production mode\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Feature Branch\nDESCRIPTION: Git commands to create a new feature branch, make changes, commit them, and push the branch to the user's fork. This is the workflow for contributing new features or fixes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b feature\n# edit files\n$ git commit\n$ git push fork feature\n```\n\n----------------------------------------\n\nTITLE: Illustrating Go Get Command with Versioned Module\nDESCRIPTION: This example demonstrates how to use the go get command to fetch a specific version of a module that includes the major version in its path. It shows the correct syntax for modules version v2 or higher.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/VERSIONING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get go.opentelemetry.io/otel/v2@v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing the opt package in Go\nDESCRIPTION: This snippet provides the command to install the 'opt' package for command-line flag parsing in Go. It uses the Go package manager to fetch the package from the specified repository.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/modernc.org/opt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get [-u] modernc.org/opt\n```\n\n----------------------------------------\n\nTITLE: Installing CC Compiler Front End using Go\nDESCRIPTION: This snippet provides the command to install the CC package, which serves as a C99 compiler front end. It uses the Go programming language to fetch the package. Users are required to have Go installed on their system to execute the command successfully.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/modernc.org/cc/v3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n$ go get -u modernc.org/cc/v3\n```\n\n----------------------------------------\n\nTITLE: Cache Configuration in YAML\nDESCRIPTION: Example YAML configuration for multiple cache instances.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/README.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ncache:\n  cache1:\n    max-items: 100\n    item-size: 64\n  cache2:\n    max-items: 200\n    item-size: 80\n```\n\n----------------------------------------\n\nTITLE: Installing go-anthropic Library in Go\nDESCRIPTION: This snippet shows how to install the go-anthropic library using the go get command. It requires Go version 1.21 or greater.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/liushuangls/go-anthropic/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/liushuangls/go-anthropic/v2\n```\n\n----------------------------------------\n\nTITLE: Go Package Not Found Error Example\nDESCRIPTION: Example error message when trying to install Viper package without proper Go modules configuration. The error occurs when Go attempts to find dependencies in GOPATH mode instead of using Go Modules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/viper/TROUBLESHOOTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncannot find package \"github.com/hashicorp/hcl/tree/hcl1\" in any of:\n/usr/local/Cellar/go/1.15.7_1/libexec/src/github.com/hashicorp/hcl/tree/hcl1 (from $GOROOT)\n/Users/user/go/src/github.com/hashicorp/hcl/tree/hcl1 (from $GOPATH)\n```\n\n----------------------------------------\n\nTITLE: ID Naming Convention Examples\nDESCRIPTION: Examples showing correct and incorrect ID naming conventions following backend standards\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\nconst environmentID = '';\n\n// Bad\nconst environmentId = '';\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Changelog for Throttled Project\nDESCRIPTION: This markdown snippet shows the changelog for the Throttled project, detailing version updates, pull requests, and changes made over time. It includes version numbers, dates, and brief descriptions of updates.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/throttled/throttled/v2/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unreleased\n\n## 2.11.0 - 2023-04-06\n* [#84](https://github.com/throttled/throttled/pull/84) Add store for `redis-go` v8\n\n## 2.10.0 - 2023-03-25\n* [#83](https://github.com/throttled/throttled/pull/83) Introduce `context.Context` in function signatures\n\n## 2.9.1 - 2022-02-15\n* [`4739991`](https://github.com/throttled/throttled/commit/47399910777c4780f3f48a8a5aa305318d9798ae) Upgrade `golang.org/x/text` to 0.3.7 to address security vulnerability\n\n## 2.9.0 - 2021-07-17\n* [#90](https://github.com/throttled/throttled/pull/90) Allow `maxCASAttempts` to be configurable\n\n## 2.8.0 - 2021-06-11\n* [#88](https://github.com/throttled/throttled/pull/88) Make `redigostore` compatible with `redisc.Cluster`\n\n## 2.7.2 - 2021-05-18\n* [#87](https://github.com/throttled/throttled/pull/87) Upgrade Redigo dependency to 1.8.4\n\n## 2.7.1 - 2020-11-12\n* [#81](https://github.com/throttled/throttled/pull/81) Fix statistics calculation when quantity exceeds max burst\n\n## 2.7.0 - 2020-10-09\n* [#80](https://github.com/throttled/throttled/pull/80) In `goredisstore`, use `UniversalClient` interface instead of `*Client` implementation (this is backwards compatible)\n\n## 2.6.0 - 2020-08-04\n* [#64](https://github.com/throttled/throttled/pull/64) Add `SetTimeNow` to override getting current time to memstore driver\n* [#66](https://github.com/throttled/throttled/pull/66) Add `PerDuration` function for getting a perfectly customized `Rate`\n\n## 2.5.0 - 2020-08-02\n* [#79](https://github.com/throttled/throttled/pull/79) Import Throttle with `/v2` suffix in the package path\n\n## 2.4.0 - 2020-08-01\n* [#78](https://github.com/throttled/throttled/pull/78) Revert upgrade to go-redis V8 (now back on V6)\n\n## 2.3.0 - 2020-08-01\n* [#76](https://github.com/throttled/throttled/pull/76) Add basic support for Go Modules\n\n## 2.2.5 - 2020-08-01\n* [#67](https://github.com/throttled/throttled/pull/67) Bug fix: Fix TTL in `SetIfNotExistsWithTTL`\n* [#74](https://github.com/throttled/throttled/pull/74) Bug fix: Always select DB for Redigo store, even when DB is configured to 0\n\n## 2.2.4 - 2018-11-19\n* [#52](https://github.com/throttled/throttled/pull/52) Handle the possibility of `RemoteAddr` without port in `VaryBy`\n\n## 2.2.3 - 2018-11-13\n* [#49](https://github.com/throttled/throttled/pull/49) Handle the possibility of an empty `RemoteAddr` in `VaryBy`\n\n## 2.2.2 - 2018-10-18\n* [#47](https://github.com/throttled/throttled/pull/47) Don't include origin port in the identifier when using `throttled.VaryBy{RemoteAddr: true}`\n\n## 2.2.1 - 2018-03-21\n* [#40](https://github.com/throttled/throttled/pull/40) Replace unmaintained `garyburd/redigo` with `gomodule/redigo`\n\n## 2.2.0 - 2018-03-19\n* [#37](https://github.com/throttled/throttled/pull/37) Add `go-redis` support\n\n## 2.1.0 - 2017-10-23\n* [#27](https://github.com/throttled/throttled/pull/27) Never assign a Redis key's TTL to zero\n* [#32](https://github.com/throttled/throttled/pull/32) Stop using `gopkg.in`\n\n## 2.0.3 - 2015-09-09\n* [#15](https://github.com/throttled/throttled/pull/15) Use non-HTTP example for `GCRARateLimiter`\n\n## 2.0.2 - 2015-09-07\n* [#14](https://github.com/throttled/throttled/pull/14) Add example demonstrating granular use of `RateLimit`\n\n## 2.0.1 - 2015-09-01\n* [#12](https://github.com/throttled/throttled/pull/12) Fix parsing of `TIME` in `redigostore`\n\n## 2.0.0 - 2015-08-28\n* [#9](https://github.com/throttled/throttled/pull/9) Substantially rebuild the APIs and implementation of the `throttled` package (wholly not backwards compatible)\n\n(There are other versions, but this is the beginning of `CHANGELOG.md`.)\n\n<!--\n# vim: set tw=0:\n-->\n```\n\n----------------------------------------\n\nTITLE: Benchmarking JSON Validation Performance in Go\nDESCRIPTION: This code snippet shows the benchmark results for validating different JSON files using standard library and fastjson implementations in Go. It compares the performance across various file sizes.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/valyala/fastjson/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n$ GOMAXPROCS=1 go test github.com/valyala/fastjson -bench='Validate$'\ngoos: linux\ngoarch: amd64\npkg: github.com/valyala/fastjson\nBenchmarkValidate/small/stdjson \t 2000000\t       955 ns/op\t 198.83 MB/s\t      72 B/op\t       2 allocs/op\nBenchmarkValidate/small/fastjson         \t 5000000\t       384 ns/op\t 493.60 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkValidate/medium/stdjson         \t  200000\t     10799 ns/op\t 215.66 MB/s\t     184 B/op\t       5 allocs/op\nBenchmarkValidate/medium/fastjson        \t  300000\t      3809 ns/op\t 611.30 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkValidate/large/stdjson          \t   10000\t    133064 ns/op\t 211.31 MB/s\t     184 B/op\t       5 allocs/op\nBenchmarkValidate/large/fastjson         \t   30000\t     45268 ns/op\t 621.14 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkValidate/canada/stdjson         \t     200\t   8470904 ns/op\t 265.74 MB/s\t     184 B/op\t       5 allocs/op\nBenchmarkValidate/canada/fastjson        \t     500\t   2973377 ns/op\t 757.07 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkValidate/citm/stdjson           \t     200\t   7273172 ns/op\t 237.48 MB/s\t     184 B/op\t       5 allocs/op\nBenchmarkValidate/citm/fastjson          \t    1000\t   1684430 ns/op\t1025.39 MB/s\t       0 B/op\t       0 allocs/op\nBenchmarkValidate/twitter/stdjson        \t     500\t   2849439 ns/op\t 221.63 MB/s\t     312 B/op\t       6 allocs/op\nBenchmarkValidate/twitter/fastjson       \t    2000\t   1036796 ns/op\t 609.10 MB/s\t       0 B/op\t       0 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Running Go integration tests with OpenAI API\nDESCRIPTION: Command to run integration tests against the production OpenAI API, requiring an API token set as an environment variable.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/sashabaranov/go-openai/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nOPENAI_TOKEN=XXX go test -v -tags=integration ./api_integration_test.go\n```\n\n----------------------------------------\n\nTITLE: Downloading Chi Source Code and Changing Directory in Bash\nDESCRIPTION: These commands fetch the Chi project source code using go get and change the working directory to the project folder. This is a prerequisite step for contributing to the project.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u -d github.com/go-chi/chi\ncd $GOPATH/src/github.com/go-chi/chi\n```\n\n----------------------------------------\n\nTITLE: Installing Module using go get Command\nDESCRIPTION: This snippet demonstrates how to install the Go package \\'netdb\\' from the repository honnef.co using the go get command. This command fetches the package and installs it into the workspace. The installed package can then be used in Go projects.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/modernc.org/libc/honnef.co/go/netdb/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get honnef.co/go/netdb\n```\n\n----------------------------------------\n\nTITLE: Formatting Relative Time in Go\nDESCRIPTION: This example shows how to use the humanize.Time function to convert a time.Time instance into a human-readable relative time string.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/dustin/go-humanize/README.markdown#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfmt.Printf(\"This was touched %s.\", humanize.Time(someTimeInstance)) // This was touched 7 hours ago.\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Index Creation Example\nDESCRIPTION: Example of a concurrent index creation statement that must be run outside of a transaction block.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/postgres/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX CONCURRENTLY\n```\n\n----------------------------------------\n\nTITLE: Documentation link for opt package\nDESCRIPTION: This snippet contains a link to the documentation for the 'opt' package, which can be accessed for further details on usage and functionality.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/modernc.org/opt/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[godoc.org/modernc.org/opt](http://godoc.org/modernc.org/opt)\n```\n\n----------------------------------------\n\nTITLE: Installing multierr package using go get\nDESCRIPTION: Command to install the multierr package from go.uber.org. This installs the latest version of the package using the Go module system.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.uber.org/multierr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u go.uber.org/multierr@latest\n```\n\n----------------------------------------\n\nTITLE: Displaying S2 Decompression Speed Without Assembly in Markdown\nDESCRIPTION: This markdown table shows S2 decompression speed without assembly optimizations, comparing it to the standard S2 implementation across various file types.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| File                           | S2 Throughput | S2 throughput |\n|--------------------------------|---------------|---------------|\n| consensus.db.10gb.s2           | 1.84x         | 2289.8 MB/s   |\n| 10gb.tar.s2                    | 1.30x         | 867.07 MB/s   |\n| rawstudio-mint14.tar.s2        | 1.66x         | 1329.65 MB/s  |\n| github-june-2days-2019.json.s2 | 2.36x         | 1831.59 MB/s  |\n| github-ranks-backup.bin.s2     | 1.73x         | 1390.7 MB/s   |\n| enwik9.s2                      | 1.67x         | 681.53 MB/s   |\n| adresser.json.s2               | 3.41x         | 4230.53 MB/s  |\n| silesia.tar.s2                 | 1.52x         | 811.58        |\n```\n\n----------------------------------------\n\nTITLE: S2SX Command Line Usage\nDESCRIPTION: Command line interface documentation for s2sx tool, showing available options for creating self-extracting archives. Includes parameters for specifying target OS/architecture, compression settings, and output handling.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUsage: s2sx [options] file1 file2\n\nCompresses all files supplied as input separately.\nIf files have '.s2' extension they are assumed to be compressed already.\nOutput files are written as 'filename.s2sx' and with '.exe' for windows targets.\nIf output is big, an additional file with \".more\" is written. This must be included as well.\nBy default output files will be overwritten.\n\nWildcards are accepted: testdir/*.txt will compress all files in testdir ending with .txt\nDirectories can be wildcards as well. testdir/*/*.txt will match testdir/subdir/b.txt\n\nOptions:\n  -arch string\n        Destination architecture (default \"amd64\")\n  -c    Write all output to stdout. Multiple input files will be concatenated\n  -cpu int\n        Compress using this amount of threads (default 32)\n  -help\n        Display help\n  -max string\n        Maximum executable size. Rest will be written to another file. (default \"1G\")\n  -os string\n        Destination operating system (default \"windows\")\n  -q    Don't write any output to terminal, except errors\n  -rm\n        Delete source file(s) after successful compression\n  -safe\n        Do not overwrite output files\n  -untar\n        Untar on destination\n```\n\n----------------------------------------\n\nTITLE: Go Benchmark Results\nDESCRIPTION: Performance benchmarks for the naming convention library measured on Go 1.15 with an Intel i5-7500, showing timing, memory allocation, and operation counts for various transformations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pascaldekloe/name/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nname                                                            time/op\nCases/a2B/CamelCase-4                                           38.9ns ± 5%\nCases/a2B/snake_case-4                                          41.1ns ± 1%\nCases/foo-bar/CamelCase-4                                       58.0ns ± 6%\nCases/foo-bar/snake_case-4                                      67.0ns ± 1%\nCases/ProcessHelperFactoryConfig#defaultIDBuilder/CamelCase-4    272ns ± 6%\nCases/ProcessHelperFactoryConfig#defaultIDBuilder/snake_case-4   324ns ± 1%\n\nname                                                            alloc/op\nCases/a2B/CamelCase-4                                            3.00B ± 0%\nCases/a2B/snake_case-4                                           4.00B ± 0%\nCases/foo-bar/CamelCase-4                                        8.00B ± 0%\nCases/foo-bar/snake_case-4                                       16.0B ± 0%\nCases/ProcessHelperFactoryConfig#defaultIDBuilder/CamelCase-4    48.0B ± 0%\nCases/ProcessHelperFactoryConfig#defaultIDBuilder/snake_case-4   64.0B ± 0%\n\nname                                                            allocs/op\nCases/a2B/CamelCase-4                                             1.00 ± 0%\nCases/a2B/snake_case-4                                            1.00 ± 0%\nCases/foo-bar/CamelCase-4                                         1.00 ± 0%\nCases/foo-bar/snake_case-4                                        1.00 ± 0%\nCases/ProcessHelperFactoryConfig#defaultIDBuilder/CamelCase-4     1.00 ± 0%\nCases/ProcessHelperFactoryConfig#defaultIDBuilder/snake_case-4    1.00 ± 0%\n```\n\n----------------------------------------\n\nTITLE: Product Nomenclature Examples\nDESCRIPTION: Examples showing correct and incorrect terminology following product nomenclature guidelines\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Good - terminology we use for external comms\nconst environment = '';\n\n// Bad - deprecated terminology\nconst workspace = '';\n```\n\n----------------------------------------\n\nTITLE: Forcing resolver generation for specific fields\nDESCRIPTION: YAML configuration to explicitly require a resolver for certain fields in the GraphQL schema.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  User:\n    fields:\n      friends:\n        resolver: true\n```\n\n----------------------------------------\n\nTITLE: Importing JWT-Go Package in Go Code\nDESCRIPTION: Go code snippet showing how to import the jwt-go package in a Go program.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-jwt/jwt/v5/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/golang-jwt/jwt/v5\"\n```\n\n----------------------------------------\n\nTITLE: Storybook Button Component Documentation Layout in JSX\nDESCRIPTION: JSX markup that structures the Storybook documentation page for the Button component, organizing button variants by kind (Primary, Secondary, Danger) and showing different appearance types with stories.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/Button/NewVariations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={ButtonStories} />\n\n# Button\n\n## By Kind\n\n<div style={{ padding: '3rem 1rem' }} className=\"bg-canvasBase\">\n  <p className=\"text-basis font-semibold\">Primary</p>\n  <div className=\"align-center items-center flex gap-1 pb-4\">\n    <p className=\"text-basis pr-2\">Solid appearance:</p>\n    <Story of={ButtonStories.PrimarySolid} />\n    <Story of={ButtonStories.PrimarySolidWithIcon} />\n    <Story of={ButtonStories.PrimarySolidOnlyIcon} />\n    <Story of={ButtonStories.PrimarySolidLoading} />\n    <Story of={ButtonStories.PrimarySolidWithShortcut} />\n    <Story of={ButtonStories.PrimarySolidDisabled} />\n  </div>\n  <div className=\"align-center items-center flex gap-1 pb-4\">\n    <p className=\"text-basis pr-2\">Outlined appearance:</p>\n    <Story of={ButtonStories.PrimaryOutlined} />\n    <Story of={ButtonStories.PrimaryOutlinedWithIcon} />\n    <Story of={ButtonStories.PrimaryOutlinedOnlyIcon} />\n    <Story of={ButtonStories.PrimaryOutlinedLoading} />\n    <Story of={ButtonStories.PrimaryOutlinedWithShortcut} />\n    <Story of={ButtonStories.PrimaryOutlinedDisabled} />\n  </div>\n  <div className=\"align-center items-center flex gap-1 pb-4\">\n    <p className=\"text-basis pr-2\">Ghost appearance:</p>\n    <Story of={ButtonStories.PrimaryGhost} />\n    <Story of={ButtonStories.PrimaryGhostWithIcon} />\n    <Story of={ButtonStories.PrimaryGhostOnlyIcon} />\n    <Story of={ButtonStories.PrimaryGhostLoading} />\n    <Story of={ButtonStories.PrimaryGhostWithShortcut} />\n    <Story of={ButtonStories.PrimaryGhostDisabled} />\n  </div>\n  <p className=\"text-basis font-semibold\">Secondary</p>\n  <div className=\"align-center items-center flex gap-1\">\n    <p className=\"text-basis pr-2\">Outlined appearance:</p>\n    <Story of={ButtonStories.SecondaryOutlined} />\n    <Story of={ButtonStories.SecondaryOutlinedWithIcon} />\n    <Story of={ButtonStories.SecondaryOutlinedOnlyIcon} />\n    <Story of={ButtonStories.SecondaryOutlinedLoading} />\n    <Story of={ButtonStories.SecondaryOutlinedWithShortcut} />\n    <Story of={ButtonStories.SecondaryOutlinedDisabled} />\n  </div>\n  <div className=\"align-center items-center flex gap-1 pb-4\">\n    <p className=\"text-basis pr-2\">Ghost appearance:</p>\n    <Story of={ButtonStories.SecondaryGhost} />\n    <Story of={ButtonStories.SecondaryGhostWithIcon} />\n    <Story of={ButtonStories.SecondaryGhostOnlyIcon} />\n    <Story of={ButtonStories.SecondaryGhostLoading} />\n    <Story of={ButtonStories.SecondaryGhostWithShortcut} />\n    <Story of={ButtonStories.SecondaryGhostDisabled} />\n  </div>\n  <p className=\"text-basis font-semibold\">Danger</p>\n  <div className=\"align-center items-center flex gap-1 pb-4\">\n    <p className=\"text-basis pr-2\">Solid appearance:</p>\n    <Story of={ButtonStories.DangerSolid} />\n    <Story of={ButtonStories.DangerSolidWithIcon} />\n    <Story of={ButtonStories.DangerSolidOnlyIcon} />\n    <Story of={ButtonStories.DangerSolidLoading} />\n    <Story of={ButtonStories.DangerSolidWithShortcut} />\n    <Story of={ButtonStories.DangerSolidDisabled} />\n  </div>\n  <div className=\"align-center items-center flex gap-1 pb-4\">\n    <p className=\"text-basis pr-2\">Outlined appearance:</p>\n    <Story of={ButtonStories.DangerOutlined} />\n    <Story of={ButtonStories.DangerOutlinedWithIcon} />\n    <Story of={ButtonStories.DangerOutlinedOnlyIcon} />\n    <Story of={ButtonStories.DangerOutlinedLoading} />\n    <Story of={ButtonStories.DangerOutlinedWithShortcut} />\n    <Story of={ButtonStories.DangerOutlinedDisabled} />\n  </div>\n  <div className=\"align-center items-center flex gap-1 pb-4\">\n    <p className=\"text-basis pr-2\">Ghost appearance:</p>\n    <Story of={ButtonStories.DangerGhost} />\n    <Story of={ButtonStories.DangerGhostWithIcon} />\n    <Story of={ButtonStories.DangerGhostOnlyIcon} />\n    <Story of={ButtonStories.DangerGhostLoading} />\n    <Story of={ButtonStories.DangerGhostWithShortcut} />\n    <Story of={ButtonStories.DangerGhostDisabled} />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing ULID Package in Go\nDESCRIPTION: Command to install the ULID package using Go modules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/oklog/ulid/v2\n```\n\n----------------------------------------\n\nTITLE: Installing goqu without Go Modules\nDESCRIPTION: Command to install goqu without using Go modules. This is for projects not using Go modules and Go versions above 1.10.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/doug-martin/goqu/v9/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/doug-martin/goqu\n```\n\n----------------------------------------\n\nTITLE: Changelog Document Structure - Markdown\nDESCRIPTION: A structured changelog documenting version history, improvements, bug fixes and features across multiple releases of the compress package. The changelog is organized by date and version number.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# changelog\n\n* Sep 23rd, 2024 - [1.17.10](https://github.com/klauspost/compress/releases/tag/v1.17.10)\n\t* gzhttp: Add TransportAlwaysDecompress option. https://github.com/klauspost/compress/pull/978\n\t* gzhttp: Add supported decompress request body by @mirecl in https://github.com/klauspost/compress/pull/1002\n\t* s2: Add EncodeBuffer buffer recycling callback https://github.com/klauspost/compress/pull/982\n\t* zstd: Improve memory usage on small streaming encodes https://github.com/klauspost/compress/pull/1007\n\t* flate: read data written with partial flush by @vajexal in https://github.com/klauspost/compress/pull/996\n```\n\n----------------------------------------\n\nTITLE: Displaying PkgGoDev Badge for OTLP Metric gRPC Exporter in Markdown\nDESCRIPTION: This snippet shows how to display a PkgGoDev badge for the OTLP Metric gRPC Exporter package using Markdown syntax. The badge links to the package documentation on pkg.go.dev.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc)\n```\n\n----------------------------------------\n\nTITLE: Updating Version Constant in connect.go for Post-Release Development\nDESCRIPTION: Shows how to update the Version constant after a release is published by incrementing the minor version and adding the -dev suffix for ongoing development.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/connectrpc.com/connect/RELEASE.md#2025-04-22_snippet_1\n\nLANGUAGE: patch\nCODE:\n```\n-const Version = \"1.14.0\"\n+const Version = \"1.15.0-dev\"\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC in Go\nDESCRIPTION: Illustrates the import statement needed to use gRPC in a Go project. Requires the Go programming language and assumes you are working with one of the two latest major releases. Adding this import allows Go to automatically handle dependencies during build, run, or test operations.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/google.golang.org/grpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Mixed Content Block Compression Comparison in Markdown\nDESCRIPTION: This markdown table compares the compression performance of S2, Snappy, and LZ4 on mixed content blocks, showing input/output sizes, reduction percentages, and compression speeds.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| *                 | Input      | Output     | Reduction  | MB/s       |\n|-------------------|------------|------------|------------|------------|\n| S2                | 4014735833 | 1059723369 | 73.60%     | **936.73** |\n| S2 Better         | 4014735833 | 961580539  | 76.05%     | 451.10     |\n| S2 Best           | 4014735833 | 899182886  | **77.60%** | 46.84      |\n| Snappy            | 4014735833 | 1128706759 | 71.89%     | 790.15     |\n| S2, Snappy Output | 4014735833 | 1093823291 | 72.75%     | 936.60     |\n| LZ4               | 4014735833 | 1063768713 | 73.50%     | 452.02     |\n```\n\n----------------------------------------\n\nTITLE: Implementing PathFlag in Go\nDESCRIPTION: PathFlag is a flag with type Path (which is an alias for string). It includes methods for applying the flag, getting its value, and other utility functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_34\n\nLANGUAGE: go\nCODE:\n```\ntype PathFlag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       Path\n\tDestination *Path\n\n\tAliases []string\n\tEnvVars []string\n\n\tTakesFile bool\n\n\tAction func(*Context, Path) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Running ULID Tests\nDESCRIPTION: Command to run the test suite for the ULID package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Configuring custom models in gqlgen.yml\nDESCRIPTION: YAML configuration for specifying custom Go models to be used by gqlgen instead of generated ones.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/99designs/gqlgen/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  User:\n    model: github.com/you/pkg/model.User\n```\n\n----------------------------------------\n\nTITLE: Defining Int64Flag Structure in Go\nDESCRIPTION: Int64Flag is a flag with type int64. It includes fields for name, category, usage, and methods for applying, getting, and manipulating the flag value.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\ntype Int64Flag struct {\n\tName string\n\n\tCategory    string\n\tDefaultText string\n\tFilePath    string\n\tUsage       string\n\n\tRequired   bool\n\tHidden     bool\n\tHasBeenSet bool\n\n\tValue       int64\n\tDestination *int64\n\n\tAliases []string\n\tEnvVars []string\n\n\tBase int\n\n\tAction func(*Context, int64) error\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fish Completion Template in Go CLI Package\nDESCRIPTION: This snippet defines the FishCompletionTemplate variable, which is a template for generating fish shell completion scripts for CLI applications built with the cli package.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar FishCompletionTemplate = `# {{ .App.Name }} fish shell completion\n\nfunction __fish_{{ .App.Name }}_no_subcommand --description 'Test if there has been any subcommand yet'\n    for i in (commandline -opc)\n        if contains -- $i{{ range $v := .AllCommands }} {{ $v }}{{ end }}\n            return 1\n        end\n    end\n    return 0\nend\n\n{{ range $v := .Completions }}{{ $v }}\n{{ end }}`\n```\n\n----------------------------------------\n\nTITLE: Running OjG Benchmarks in Go\nDESCRIPTION: Command to execute the benchmarks from the ojg/cmd/benchmark directory. This runs all Go files in the directory to perform various JSON-related benchmarks.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/benchmarks.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo run *.go\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Prometheus\nDESCRIPTION: Command to compile and test changes before committing and pushing to the repository.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test         # Make sure all the tests pass before you commit and push :)\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra in Go Application\nDESCRIPTION: This code snippet shows how to import the Cobra library in a Go application.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/spf13/cobra/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component and Storybook Tools in JSX\nDESCRIPTION: Code that imports the Button component from Inngest's component library and various Storybook utilities for documentation purposes.\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/packages/components/src/Button/NewVariations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from '@inngest/components/Button';\nimport { Canvas, Meta, Story } from '@storybook/blocks';\n\nimport * as ButtonStories from './Button.stories';\n```\n\n----------------------------------------\n\nTITLE: Installing IAM API Go Client Library\nDESCRIPTION: Command to install the IAM API Go Client Library using go get. This will download and install the library in your Go workspace.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/cloud.google.com/go/iam/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/iam\n```\n\n----------------------------------------\n\nTITLE: S2 Index Entry Decoding Algorithm\nDESCRIPTION: Detailed algorithm for decoding uncompressed and compressed entries in the S2 index format\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// Uncompressed entries decoding\nfor each entry {\n    uOff = 0\n    if HasUncompressedOffsets == 1 {\n        uOff = ReadVarInt\n    }\n    \n    if entryNum == 0 {\n        entry[entryNum].UncompressedOffset = uOff\n        continue\n    }\n    \n    entry[entryNum].UncompressedOffset = entry[entryNum-1].UncompressedOffset + EstBlockSize + uOff\n}\n\n// Compressed entries decoding\nCompressGuess := EstBlockSize / 2\nfor each entry {\n    cOff = ReadVarInt\n    \n    if entryNum == 0 {\n        entry[entryNum].CompressedOffset = cOff\n        continue\n    }\n    \n    entry[entryNum].CompressedOffset = entry[entryNum-1].CompressedOffset + CompressGuess + cOff\n    CompressGuess += cOff/2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SliceFlagTarget Interface in Go\nDESCRIPTION: Generic interface that models a target implementation for SliceFlag. It defines methods for setting values, setting destinations, and getting destinations to propagate values between the flag and its target.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_37\n\nLANGUAGE: go\nCODE:\n```\ntype SliceFlagTarget[E any] interface {\n\tFlag\n\tRequiredFlag\n\tDocGenerationFlag\n\tVisibleFlag\n\tCategorizableFlag\n\n\t// SetValue should propagate the given slice to the target, ideally as a new value.\n\t// Note that a nil slice should nil/clear any existing value (modelled as ~[]E).\n\tSetValue(slice []E)\n\t// SetDestination should propagate the given slice to the target, ideally as a new value.\n\t// Note that a nil slice should nil/clear any existing value (modelled as ~*[]E).\n\tSetDestination(slice []E)\n\t// GetDestination should return the current value referenced by any destination, or nil if nil/unset.\n\tGetDestination() []E\n}\n```\n\n----------------------------------------\n\nTITLE: Importing gotenv Package in Go\nDESCRIPTION: This snippet shows how to import the gotenv package in a Go file. This is the first step to use the package's functionality in your Go application.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/subosito/gotenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/subosito/gotenv\"\n```\n\n----------------------------------------\n\nTITLE: Installing Gonum BLAS with go get\nDESCRIPTION: This command retrieves the Gonum BLAS package and its dependencies using the go get command. It downloads the package from the specified repository and installs it in the Go workspace.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/gonum.org/v1/gonum/blas/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n  go get gonum.org/v1/gonum/blas/...\n\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Specification\nDESCRIPTION: This snippet specifies the version of the `codespell` dependency used in the project. It indicates that version 2.3.0 of `codespell` is required.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"codespell==2.3.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing ULID Command Line Tool\nDESCRIPTION: Commands to install the ULID command-line tool in a temporary directory.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/oklog/ulid/v2/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd $(mktemp -d)\nenv GOPATH=$(pwd) GO111MODULE=on go get -v github.com/oklog/ulid/v2/cmd/ulid\n```\n\n----------------------------------------\n\nTITLE: Running Development Server Command\nDESCRIPTION: Command to start the application in development mode with hot-reload functionality\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dashboard/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Structure in Go\nDESCRIPTION: Definition of the Timestamp structure that wraps a time.Time value to satisfy Go's flag interface, allowing timestamps to be used as flag values.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_46\n\nLANGUAGE: go\nCODE:\n```\ntype Timestamp struct {\n\t// Has unexported fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a New Branch in OpenTelemetry Go Repository\nDESCRIPTION: Series of commands to create a new branch, make changes, run checks, and push to your fork.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Installing GopherLua Package in Go\nDESCRIPTION: Shows how to install the GopherLua package using the go get command.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/yuin/gopher-lua/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/yuin/gopher-lua\n```\n\n----------------------------------------\n\nTITLE: Dropping Users Table\nDESCRIPTION: SQL command to drop the users table if it exists.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/golang-migrate/migrate/v4/database/postgres/TUTORIAL.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS users;\n```\n\n----------------------------------------\n\nTITLE: Defining Uint64Slice Type for CLI Flags in Go\nDESCRIPTION: Implementation of Uint64Slice type that wraps []uint64 to satisfy the flag.Value interface. It provides methods for getting, setting, and serializing uint64 slice values for command-line flags.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_52\n\nLANGUAGE: go\nCODE:\n```\ntype Uint64Slice struct {\n\t// Has unexported fields.\n}\n    Uint64Slice wraps []int64 to satisfy flag.Value\n\nfunc NewUint64Slice(defaults ...uint64) *Uint64Slice\n    NewUint64Slice makes an *Uint64Slice with default values\n\nfunc (i *Uint64Slice) Get() interface{}\n    Get returns the slice of ints set by this flag\n\nfunc (i *Uint64Slice) Serialize() string\n    Serialize allows Uint64Slice to fulfill Serializer\n\nfunc (i *Uint64Slice) Set(value string) error\n    Set parses the value into an integer and appends it to the list of values\n\nfunc (i *Uint64Slice) String() string\n    String returns a readable representation of this value (for usage defaults)\n\nfunc (i *Uint64Slice) Value() []uint64\n    Value returns the slice of ints set by this flag\n\nfunc (i *Uint64Slice) WithSeparatorSpec(spec separatorSpec)\n```\n\n----------------------------------------\n\nTITLE: Installing LZ4 Package in Go\nDESCRIPTION: Command to install the LZ4 package using Go's package management system.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pierrec/lz4/v4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/pierrec/lz4/v4\n```\n\n----------------------------------------\n\nTITLE: Reading Sys Filesystem in Go\nDESCRIPTION: Example of reading single values from /sys filesystem files using utility functions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n    data, err := util.SysReadFile(\"/sys/class/power_supply/BAT0/capacity\")\n```\n\n----------------------------------------\n\nTITLE: Defining VisibleFlagCategory Interface for CLI Flag Groups in Go\nDESCRIPTION: Implementation of the VisibleFlagCategory interface for organizing related flags into categories. It provides methods to get the category name and retrieve a sorted list of visible flags within the category.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_58\n\nLANGUAGE: go\nCODE:\n```\ntype VisibleFlagCategory interface {\n\t// Name returns the category name string\n\tName() string\n\t// Flags returns a slice of VisibleFlag sorted by name\n\tFlags() []VisibleFlag\n}\n    VisibleFlagCategory is a category containing flags.\n```\n\n----------------------------------------\n\nTITLE: JSON Type Conversion Matrix in Markdown Table Format\nDESCRIPTION: Detailed markdown table showing conversion rules and examples for different JSON data types to destination types. Includes specific examples and edge cases for boolean, integer, unsigned integer, float, and string conversions.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/json-iterator/go/fuzzy_mode_convert_table.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| json type \\ dest type | bool | int | uint | float |string|\n| --- | --- | --- | --- |--|--|\n| number | positive => true <br/> negative => true <br/> zero => false| 23.2 => 23 <br/> -32.1 => -32| 12.1 => 12 <br/> -12.1 => 0|as normal|same as origin|\n| string | empty string => false <br/> string \"0\" => false <br/> other strings => true | \"123.32\" => 123 <br/> \"-123.4\" => -123 <br/> \"123.23xxxw\" => 123 <br/>  \"abcde12\" => 0 <br/> \"-32.1\" => -32| 13.2 => 13 <br/> -1.1 => 0 |12.1 => 12.1 <br/> -12.3 => -12.3<br/> 12.4xxa => 12.4 <br/> +1.1e2 =>110 |same as origin|\n| bool | true => true <br/> false => false| true => 1 <br/> false => 0 | true => 1 <br/> false => 0 |true => 1 <br/>false => 0|true => \"true\" <br/> false => \"false\"|\n| object | true | 0 | 0 |0|originnal json|\n| array | empty array => false <br/> nonempty array => true| [] => 0 <br/> [1,2] => 1 | [] => 0 <br/> [1,2] => 1 |[] => 0<br/>[1,2] => 1|original json|\n```\n\n----------------------------------------\n\nTITLE: Installing Unidecode Package via Go Get\nDESCRIPTION: Shell command for installing the unidecode package using Go modules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/gosimple/unidecode/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/gosimple/unidecode\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Setup Script\nDESCRIPTION: Creates and configures the test database using a setup script.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/jackc/pgx/v5/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncreatedb\npsql --no-psqlrc -f testsetup/postgresql_setup.sql\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Int64 Flag with Input Source Support in Go\nDESCRIPTION: Int64Flag type that wraps cli.Int64Flag to support alternative input sources. It includes methods for creation, application to flag sets, and applying int64 values from input sources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_73\n\nLANGUAGE: go\nCODE:\n```\ntype Int64Flag struct {\n\t*cli.Int64Flag\n\t// Has unexported fields.\n}\n\nfunc NewInt64Flag(fl *cli.Int64Flag) *Int64Flag\n\nfunc (f *Int64Flag) Apply(set *flag.FlagSet) error\n\nfunc (f *Int64Flag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Upgrading BatchFunc Signature from v1 to v2\nDESCRIPTION: Changes to BatchFunc type definition to include context.Context parameter.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/graph-gophers/dataloader/MIGRATE.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- type BatchFunc func([]string) []*Result\n+ type BatchFunc func(context.Context, []string) []*Result\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Installing Tools\nDESCRIPTION: Commands to install necessary tools (only for the first time) and run tests for the OpenCensus Go project. This ensures that the development environment is set up correctly.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make install-tools  # Only first time.\n$ make\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Int64Slice Flag with Input Source Support in Go\nDESCRIPTION: Int64SliceFlag type that wraps cli.Int64SliceFlag to support alternative input sources. It includes methods for creation, application to flag sets, and applying int64 slice values from input sources.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/urfave/cli/v2/godoc-current.txt#2025-04-22_snippet_74\n\nLANGUAGE: go\nCODE:\n```\ntype Int64SliceFlag struct {\n\t*cli.Int64SliceFlag\n\t// Has unexported fields.\n}\n\nfunc NewInt64SliceFlag(fl *cli.Int64SliceFlag) *Int64SliceFlag\n\nfunc (f *Int64SliceFlag) Apply(set *flag.FlagSet) error\n\nfunc (f *Int64SliceFlag) ApplyInputSourceValue(cCtx *cli.Context, isc InputSourceContext) error\n```\n\n----------------------------------------\n\nTITLE: Testing Command\nDESCRIPTION: Command to run tests on all packages in the project.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/google/wire/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Running Tests Command for go-toml\nDESCRIPTION: Command to run all tests in the go-toml project using Go's built-in test tool.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/pelletier/go-toml/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: AWS SDK Go v2 Changelog Entry\nDESCRIPTION: Version history entries documenting changes including dependency updates, new features for credential providers, and bug fixes. Notable features include Duration and Policy options for WebIdentityRoleProvider, SourceIdentity support for AssumeRoleProvider, and FIPS/DualStack endpoint configuration.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-sdk-go-v2/credentials/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# v1.12.19 (2022-09-14)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n\n# v1.12.18 (2022-09-02)\n\n* **Dependency Update**: Updated to the latest SDK module versions\n```\n\n----------------------------------------\n\nTITLE: Copy Convention Example\nDESCRIPTION: Example showing the correct title case usage in UI elements\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dashboard/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\n<button>Click Me</button>;\n\n// Bad\n<button>Click me</button>;\n\n// Bad\n<button>click me</button>;\n```\n\n----------------------------------------\n\nTITLE: Finding Stream Offsets with Index\nDESCRIPTION: Use the index to determine compressed and uncompressed offsets for a specific target offset\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/s2/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ncompressedOffset, uncompressedOffset, err := index.Find(wantOffset)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Log Message in Go\nDESCRIPTION: This snippet shows an example of a JSON-formatted log message containing an error level, fault code, timestamp, and message. It is used to compare file sizes between JSON and CBOR encoding.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/rs/zerolog/internal/cbor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{\"level\":\"error\",\"Fault\":41650,\"time\":\"2018-04-01T15:18:19-07:00\",\"message\":\"Some Message\"}\n```\n\n----------------------------------------\n\nTITLE: Equivalent JSON Example\nDESCRIPTION: Shows the equivalent JSON representation of the SEN example, highlighting the differences in syntax requirements.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/ohler55/ojg/sen.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"one\": 1,\n  \"two\": 2,\n  \"array\": [\"a\", \"b\", \"c\"],\n  \"yes\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Code Linting Command\nDESCRIPTION: Command to run ESLint on all project files\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dashboard/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm lint\n```\n\n----------------------------------------\n\nTITLE: Configuring Exemplars in OpenTelemetry Go SDK\nDESCRIPTION: Examples showing how to enable the exemplars feature and set different exemplar filters using environment variables in the OpenTelemetry Go SDK.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_EXEMPLAR=true\n```\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_EXEMPLAR\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=always_on\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=always_off\n```\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=trace_based\n```\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_METRICS_EXEMPLAR_FILTER\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Management Commands\nDESCRIPTION: Vercel CLI commands for managing project environment variables\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/apps/dashboard/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Link the project on Vercel\n$ pnpm vercel link -p ui # and follow the steps\n\n# Download development environment variables for running the app locally\n$ pnpm env:pull\n\n# Add a new environment variable\n$ pnpm env:add\n\n# Remove an environment variable\n$ pnpm env:rm\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice template for applying the Apache License 2.0 to a software project. Includes placeholders for copyright year and owner information.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-sdk-go-v2/feature/ec2/imds/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Branch Management\nDESCRIPTION: Git commands recommended for incorporating changes from master branch in pull requests.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/google/wire/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit merge\ngit rebase\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice for applying the Apache 2.0 License to software projects. Includes copyright notice and license terms that should be included in project files.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-sdk-go-v2/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Language Convention Examples\nDESCRIPTION: Examples demonstrating correct English(US) spelling in code\nSOURCE: https://github.com/inngest/inngest/blob/main/ui/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Good\nfunction analyzeStats() {\n  console.log(foo);\n}\n\n// Bad\nfunction analyseStats() {\n  console.log(foo);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Uber Atomic Package in Go\nDESCRIPTION: The shell snippet demonstrates how to install the go.uber.org/atomic package using the `go get` command with the appropriate version tag. Ensure you are using Go modules for proper installation.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.uber.org/atomic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u go.uber.org/atomic@v1\n```\n\n----------------------------------------\n\nTITLE: Redis Pipeline Operations with rueidiscompat.Adapter in Go\nDESCRIPTION: Shows how to perform pipeline operations using rueidiscompat.Adapter. Demonstrates batch processing of multiple Set and Get operations in a single pipeline.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/rueidiscompat/README.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/redis/rueidis\"\n\t\"github.com/redis/rueidis/rueidiscompat\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tclient, err := rueidis.NewClient(rueidis.ClientOption{InitAddress: []string{\"127.0.0.1:6379\"}})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\trdb := rueidiscompat.NewAdapter(client)\n\tcmds, err := rdb.Pipelined(ctx, func(pipe rueidiscompat.Pipeliner) error {\n\t\tfor i := 0; i < 100; i++ {\n\t\t\tpipe.Set(ctx, fmt.Sprintf(\"key%d\", i), i, 0)\n\t\t\tpipe.Get(ctx, fmt.Sprintf(\"key%d\", i))\n\t\t}\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, cmd := range cmds {\n\t\tfmt.Println(cmd.(*rueidiscompat.StringCmd).Val())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Lua Script Execution with rueidiscompat.Adapter in Go\nDESCRIPTION: Demonstrates how to define and execute Lua scripts using rueidiscompat.Adapter, including script creation and parameter passing.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/redis/rueidis/rueidiscompat/README.md#2025-04-22_snippet_4\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/redis/rueidis\"\n\t\"github.com/redis/rueidis/rueidiscompat\"\n)\n\nvar incrBy = rueidiscompat.NewScript(`\nlocal key = KEYS[1]\nlocal change = ARGV[1]\nlocal value = redis.call(\"GET\", key)\nif not value then\n  value = 0\nend\nvalue = value + change\nredis.call(\"SET\", key, value)\nreturn value\n`)\n\nfunc main() {\n\tctx := context.Background()\n\tclient, err := rueidis.NewClient(rueidis.ClientOption{InitAddress: []string{\"127.0.0.1:6379\"}})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer client.Close()\n\n\trdb := rueidiscompat.NewAdapter(client)\n\tkeys := []string{\"my_counter\"}\n\tvalues := []interface{}{+1}\n\tfmt.Println(incrBy.Run(ctx, rdb, keys, values...).Int())\n}\n```\n\n----------------------------------------\n\nTITLE: Git Command for Push Restriction\nDESCRIPTION: Git command that should not be used when submitting pull requests to preserve review comments.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/google/wire/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit push --force\n```\n\n----------------------------------------\n\nTITLE: Generating Semantic Conventions for OpenTelemetry Go\nDESCRIPTION: Commands to generate new versions of the semconv package based on OpenTelemetry Semantic Conventions. It involves pulling the latest semconvgen Docker image and running the semconv-generate make target.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.21.0\" # Change to the release version you are generating.\nexport OTEL_SEMCONV_REPO=\"/absolute/path/to/opentelemetry/semantic-conventions\"\ndocker pull otel/semconvgen:latest\nmake semconv-generate # Uses the exported TAG and OTEL_SEMCONV_REPO.\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry-Go Jaeger Exporter using Go\nDESCRIPTION: This command installs the OpenTelemetry-Go Jaeger Exporter module. However, it's important to note that this module is deprecated and no longer supported.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/exporters/jaeger/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u go.opentelemetry.io/otel/exporters/jaeger\n```\n\n----------------------------------------\n\nTITLE: Version Release Entries in Markdown\nDESCRIPTION: Formatted changelog entries using markdown headers and bullet points to document version updates, fixes and features\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/googleapis/gax-go/v2/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## [2.13.0](https://github.com/googleapis/gax-go/compare/v2.12.5...v2.13.0) (2024-07-22)\n\n### Features\n\n* **iterator:** add package to help work with new iter.Seq types ([#358](https://github.com/googleapis/gax-go/issues/358)) ([6bccdaa](https://github.com/googleapis/gax-go/commit/6bccdaac011fe6fd147e4eb533a8e6520b7d4acc))\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for xxhash in Go\nDESCRIPTION: This snippet shows the commands used to run benchmarks for the xxhash package. It demonstrates how to compare the pure Go and assembly implementations using the benchstat tool.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Adding Fork as Remote Origin\nDESCRIPTION: Commands to navigate to the OpenCensus Go directory in GOPATH and add the user's fork as a remote origin. This allows pushing changes to the fork.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opencensus.io/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $(go env GOPATH)/src/go.opencensus.io\ngit remote add fork git@github.com:YOUR_GITHUB_USERNAME/opencensus-go.git\n```\n\n----------------------------------------\n\nTITLE: Implementing Digest Methods in Go\nDESCRIPTION: This snippet demonstrates the key methods of the Digest type, which implements the hash.Hash64 interface. It includes methods for writing data and calculating the hash sum.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/klauspost/compress/zstd/internal/xxhash/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Go Runtime Dependency in go.mod\nDESCRIPTION: Shows how the Go runtime dependency is currently resolved in go.mod files, highlighting the issue with version resolution when using the main ANTLR4 repository.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/antlr4-go/antlr/v4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrequire (\n\tgithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230219212500-1f9a474cc2dc\n)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice template to be included in software projects using the Apache License 2.0. The template includes placeholders for year and copyright owner information.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-sdk-go-v2/internal/ini/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Chi Router Pattern Syntax - v3.0.0\nDESCRIPTION: Examples showing the updated URL parameter syntax in Chi v3.0.0, changing from colon prefix to curly braces.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/go-chi/chi/v5/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Old syntax - pre v3.0.0\nr.Get(\"/:id\", handler)\n\n// New syntax - v3.0.0+\nr.Get(\"/{id}\", handler)\nr.Get(\"/articles/{month}-{day}-{year}-{slug}\", handler)\nr.Get(\"/articles/{name:[a-z]+}\", handler)\n```\n\n----------------------------------------\n\nTITLE: Defining Accept Struct in Go\nDESCRIPTION: This struct represents a clause in an HTTP Accept Header, including the type, subtype, quality factor, and additional parameters.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/prometheus/common/internal/bitbucket.org/ww/goautoneg/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype Accept struct {\n    Type, SubType string\n    Q             float32\n    Params        map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Badge for Go Package Documentation\nDESCRIPTION: Displays a documentation badge for the OpenTelemetry STDOUT trace exporter package, linking to the official Go package reference\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/go.opentelemetry.io/otel/exporters/stdout/stdouttrace/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/stdout/stdouttrace)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/stdout/stdouttrace)\n```\n\n----------------------------------------\n\nTITLE: Importing Throttled Package in Go\nDESCRIPTION: Demonstrates how to import the throttled package in a Go project using Go Modules.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/throttled/throttled/v2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/throttled/throttled/v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using go bug Command\nDESCRIPTION: Command for filing bug reports with system information template.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/google/wire/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo bug\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard copyright and license notice template to be included in project files. Includes placeholders for copyright year and owner information, along with the standard Apache 2.0 license text and conditions reference.\nSOURCE: https://github.com/inngest/inngest/blob/main/vendor/github.com/aws/aws-sdk-go-v2/service/internal/presigned-url/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
  }
]