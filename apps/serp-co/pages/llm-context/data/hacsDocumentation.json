[
  {
    "owner": "hacs",
    "repo": "documentation",
    "content": "TITLE: Displaying Valid Repository Structure for HACS Integration\nDESCRIPTION: This code snippet shows the correct file structure for a HACS integration repository. It includes the necessary files and directories in their proper locations.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/integration.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom_components/awesome/__init__.py\ncustom_components/awesome/sensor.py\ncustom_components/awesome/manifest.json\nREADME.md\nhacs.json\n```\n\n----------------------------------------\n\nTITLE: hacs.json Configuration with Home Assistant Version Requirements\nDESCRIPTION: Example of a hacs.json configuration that specifies minimum Home Assistant version requirements along with a persistent directory that will be preserved during upgrades.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/start.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My awesome thing\",\n  \"country\": \"NO\",\n  \"homeassistant\": \"0.99.9\",\n  \"persistent_directory\": \"userfiles\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading HACS Using wget Script\nDESCRIPTION: Command to download and execute the HACS installation script for Container and Core installations of Home Assistant. The script is fetched from get.hacs.xyz and executed directly using bash.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/use/download/download.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -O - https://get.hacs.xyz | bash -\n```\n\n----------------------------------------\n\nTITLE: Starting Local HACS Development Environment\nDESCRIPTION: This command starts a local instance of Home Assistant with HACS for development and testing purposes. It runs within the devcontainer environment.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/contribute/backend.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscripts/develop\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Development in HACS\nDESCRIPTION: Command to start the frontend development environment after spinning up the devcontainer.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/contribute/frontend.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscript/develop\n```\n\n----------------------------------------\n\nTITLE: Configuring HACS Validation GitHub Action\nDESCRIPTION: This YAML workflow configuration sets up automated HACS validation for your repository. It runs on push events, pull requests, daily at midnight, and on manual triggers. You need to specify the correct category for your repository type.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/action.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Validate\n\non:\n  push: \n  pull_request:\n  schedule:\n    - cron: \"0 0 * * *\"\n  workflow_dispatch:\n\njobs:\n  validate-hacs:\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - name: HACS validation\n        uses: \"hacs/action@main\"\n        with:\n          category: \"CHANGE_ME!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for HACS in YAML\nDESCRIPTION: YAML configuration to enable debug logging for HACS. This snippet shows how to set the default logging level to info while setting debug level specifically for HACS components and aiogithubapi.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/use/troubleshooting/logs.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  default: info\n  logs:\n    custom_components.hacs: debug\n    aiogithubapi: debug\n```\n\n----------------------------------------\n\nTITLE: Enabling Themes in Home Assistant YAML Configuration\nDESCRIPTION: This YAML configuration snippet enables themes in Home Assistant by including the 'frontend' integration and specifying the themes directory. It uses the '!include_dir_merge_named' directive to merge all theme files from the 'themes' directory.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/use/repositories/type/theme.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfrontend:\n  themes: !include_dir_merge_named themes\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Python Script Repository Structure\nDESCRIPTION: This snippet shows the correct file structure for a Python Script repository. The Python script should be located in the 'python_scripts' directory at the root of the repository, with only one Python file per repository.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/python_script.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npython_scripts/awesome.py\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Enabling Python Scripts in Home Assistant Configuration\nDESCRIPTION: This YAML configuration snippet shows how to enable the Python Script integration in Home Assistant by adding the 'python_script:' line to the configuration.yaml file.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/use/repositories/type/python_script.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npython_script:\n```\n\n----------------------------------------\n\nTITLE: Proper AppDaemon Repository Structure Example\nDESCRIPTION: This example shows the correct file structure for an AppDaemon app repository that meets HACS requirements, with Python app files located under ROOT_OF_THE_REPO/apps/APP_NAME/.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/appdaemon.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napps/awesome/awesome.py\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Showing Valid Repository Structure for HACS Custom Templates\nDESCRIPTION: A valid example of how files should be structured in a HACS custom template repository. The example shows the required files (awesome.jinja, hacs.json, and README.md) in the root directory.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/template.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nawesome.jinja\nhacs.json\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid Theme Repository Structure\nDESCRIPTION: Shows the correct file structure for a theme repository with theme configuration file located in themes/ directory\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/theme.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nthemes/awesome.yaml\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Basic hacs.json Configuration with Content in Root\nDESCRIPTION: Example of a hacs.json configuration file that specifies a custom name, indicates content is in the root directory, defines a specific filename, and lists multiple country codes for regional relevance.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/start.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My awesome thing\",\n  \"content_in_root\": true,\n  \"filename\": \"my_super_awesome_thing.js\",\n  \"country\": [\"NO\", \"SE\", \"DK\"]\n}\n```\n\n----------------------------------------\n\nTITLE: hacs.json Configuration with Home Assistant Beta Support\nDESCRIPTION: Example of a hacs.json configuration that allows Home Assistant beta versions by appending 'b0' to the version requirement, while also specifying country code and persistent directory.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/start.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My awesome thing\",\n  \"country\": \"NO\",\n  \"homeassistant\": \"2021.12.0b0\",\n  \"persistent_directory\": \"userfiles\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Development Frontend to Integration Instance\nDESCRIPTION: Command to connect the development frontend to a development integration instance using the -f flag to specify the frontend directory path.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/contribute/frontend.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscripts/develop -f <path to the development frontend directory>\n```\n\n----------------------------------------\n\nTITLE: Starting Local Documentation Server in Bash\nDESCRIPTION: Command to start a local web server for previewing the documentation. The server automatically reloads to reflect any changes.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/contribute/documentation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscripts/develop\n```\n\n----------------------------------------\n\nTITLE: Adding YAML Header to Documentation Pages\nDESCRIPTION: YAML header template for new documentation pages, including title and description fields.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/contribute/documentation.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: A title for the page, this will also be used in the sidebar. For example, Feature.\ndescription: \"A summary of the contents of this page\"\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Links in Markdown\nDESCRIPTION: Example of how to create a relative link to another page within the HACS documentation.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/contribute/documentation.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Features](/docs/contribute/features.md)\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in Markdown\nDESCRIPTION: Example of how to create a link to an external website in the HACS documentation.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/contribute/documentation.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[mkdocs-material](https://squidfunk.github.io/mkdocs-material/)\n```\n\n----------------------------------------\n\nTITLE: Referencing Images in Markdown\nDESCRIPTION: Example of how to reference and display an image in the HACS documentation using Markdown syntax.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/contribute/documentation.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![image](/assets/images/features.png)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Naming Convention for HACS Plugins\nDESCRIPTION: This example shows the relationship between the repository name and the expected JavaScript file name for HACS plugins, particularly when the repository name starts with 'lovelace-'.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nRepository name: \"lovelace-awesome-card\"\nFile name of one of the files: \"awesome-card.js\"\n```\n\n----------------------------------------\n\nTITLE: Template Storage Path Reference in HACS\nDESCRIPTION: Specifies the file path where HACS stores downloaded custom templates in the Home Assistant configuration directory.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/use/repositories/type/template.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncustom_templates/\n```\n\n----------------------------------------\n\nTITLE: Template Reload Service Reference\nDESCRIPTION: Service call that HACS automatically executes when templates are downloaded or updated.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/use/repositories/type/template.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhomeassistant.reload_custom_templates\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Path for HACS Data Generation\nDESCRIPTION: Path to the GitHub Actions workflow file responsible for generating HACS data in the hacs/integration repository.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/faq/data_sources.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n//docs.github/workflows/generate-hacs-data.yml\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Paths for R2 Upload in hacs/default\nDESCRIPTION: Paths to the GitHub Actions workflow files responsible for uploading critical and removed files to Cloudflare R2 buckets from the hacs/default repository.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/faq/data_sources.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n//docs.github/workflows/upload-critical.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n//docs.github/workflows/upload-removed.yml\n```\n\n----------------------------------------\n\nTITLE: Defining MkDocs dependencies with specific versions\nDESCRIPTION: Lists the required MkDocs extensions with pinned versions for consistent documentation building. Includes MkDocs Material with imaging feature at version 9.6.12 and the MkDocs Macros Plugin at version 1.3.7.\nSOURCE: https://github.com/hacs/documentation/blob/main/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs-material[imaging]==9.6.12\nmkdocs-macros-plugin==1.3.7\n```\n\n----------------------------------------\n\nTITLE: Displaying Critical Repository Warning in HACS UI\nDESCRIPTION: This code snippet shows the markdown for displaying an image of the critical repository warning card in the HACS UI. It includes a description of the actions users can take when encountering this warning.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/contribute/maintainer.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![critical](/assets/images/critical.png)\n```\n\n----------------------------------------\n\nTITLE: Including External Content with Markdown Include Syntax\nDESCRIPTION: This snippet uses the MkDocs markdown-include syntax to insert content from another file. Specifically, it includes content starting from line 5 of the 'highlights.md' file located in the source/docs/faq directory.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"source/docs/faq/highlights.md:5\"\n```\n\n----------------------------------------\n\nTITLE: Displaying HACS Update Path in Home Assistant UI\nDESCRIPTION: This code snippet uses a custom syntax to display the path to HACS updates in the Home Assistant user interface. It references core UI elements and panel configurations.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/use/update.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- hacs:my updates title=\"**{{coreui('panel.config')}}** > **{{coreui('ui.panel.config.updates.caption')}}**\" -->\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter for FAQ Page\nDESCRIPTION: YAML front matter metadata for a documentation page defining the title, description and generated status.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/faq/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Frequently Asked Questions\ndescription: \"Everything might not be frequently asked, but it's a good dumping ground for various information.\"\ngenerated: true\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Repository Structure (Example 1) for HACS Integration\nDESCRIPTION: This code snippet illustrates an incorrect file structure for a HACS integration repository. The custom_components directory is missing, which is required for proper integration.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/integration.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nawesome/__init__.py\nawesome/sensor.py\nawesome/manifest.json\nawesome/hacs.json\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Repository Structure (Example 2) for HACS Integration\nDESCRIPTION: This code snippet shows another incorrect file structure for a HACS integration repository. The files are in the root directory instead of within a custom_components subdirectory.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/integration.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n__init__.py\nsensor.py\nmanifest.json\nREADME.md\nhacs.json\n```\n\n----------------------------------------\n\nTITLE: Illustrating Incorrect Python Script Repository Structure\nDESCRIPTION: This snippet demonstrates an incorrect file structure for a Python Script repository. The Python script is placed directly in the root directory, which does not meet the requirements for HACS management.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/python_script.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nawesome.py\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Theme Repository Structure\nDESCRIPTION: Shows an incorrect file structure where theme file is not in the proper themes/ directory\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/theme.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nawesome.py\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Showing Invalid Repository Structure for HACS Custom Templates\nDESCRIPTION: An invalid example of file structure for a HACS custom template repository. This example incorrectly places the jinja template in a subdirectory, which doesn't meet HACS requirements.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/template.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncustom_template/awesome.jinja\nhacs.json\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Invalid AppDaemon Repository Structure Example 1\nDESCRIPTION: This example shows an incorrect repository structure where the app files are not in the expected apps directory, causing HACS to not recognize it properly.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/appdaemon.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nawesome/awesome.py\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Invalid AppDaemon Repository Structure Example 2\nDESCRIPTION: This example shows another incorrect repository structure where the Python file is in the root directory instead of within an apps/APP_NAME directory structure.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/publish/appdaemon.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nawesome.py\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Example of a Bad Issue Report: Empty Issue\nDESCRIPTION: An example of an unhelpful issue report that contains no actual information, only having a header 'CCH Settings' with the body left completely empty.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/help/issues.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Example of a Bad Issue Report: Template Only with 'Blows up on update' Header\nDESCRIPTION: An example of an unhelpful issue report where the user only included the issue template without filling it in, with only a header indicating 'Blows up on update.'\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/help/issues.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nVersion of HACS\nDescribe the bug\nA clear and concise description of what the bug is.\n\nDebug log\n\nAdd your logs here.\n```\n\n----------------------------------------\n\nTITLE: Example of a Bad Issue Report: Template Only with 'zod' Header\nDESCRIPTION: An example of an unhelpful issue report where the user only included the issue template without filling it in, with only a header indicating 'zod'.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/help/issues.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nVersion of HACS\nDescribe the bug\nA clear and concise description of what the bug is.\n\nDebug log\n\nAdd your logs here.\n```\n\n----------------------------------------\n\nTITLE: Example of a Bad Issue Report: Minimal Information\nDESCRIPTION: An example of an unhelpful issue report that provides very minimal information about a JSON parsing error, with insufficient context for troubleshooting.\nSOURCE: https://github.com/hacs/documentation/blob/main/source/docs/help/issues.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[Expecting value: line 1 column 1 (char 0)] Restore Failed!\n11:51 AM custom_components/hacs/hacsbase/data.py (CRITICAL)\nI checked and it exactly how its supposed to be\neven replaced the whole hacs folder with a fresh download\n```"
  }
]