[
  {
    "owner": "widgetti",
    "repo": "solara",
    "content": "TITLE: Creating a Simple Reactive Button Component in Solara\nDESCRIPTION: This example demonstrates how to create a basic Solara application with a reactive button that tracks clicks. It showcases Solara's reactive state management and component-based architecture, essential for building interactive data applications.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/01-introduction.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\nclicks = solara.reactive(0)\n\n\n@solara.component\ndef Page():\n    def increase_clicks():\n        clicks.value += 1\n\n    solara.Button(label=f\"Clicked {clicks} times\", on_click=increase_clicks)\n\n# in the Jupyter notebook, uncomment the next line:\n# display(Page())\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Solara App with Reactive Variables and Components\nDESCRIPTION: This snippet demonstrates how to create a basic Solara application using reactive variables and a custom component. It includes a slider for setting a word limit, an input field for entering text, and dynamic messages based on word count.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/00-quickstart.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n# Declare reactive variables at the top level. Components using these variables\n# will be re-executed when their values change.\nsentence = solara.reactive(\"Solara makes our team more productive.\")\nword_limit = solara.reactive(10)\n\n\n@solara.component\ndef Page():\n    # Calculate word_count within the component to ensure re-execution when reactive variables change.\n    word_count = len(sentence.value.split())\n\n    solara.SliderInt(\"Word limit\", value=word_limit, min=2, max=20)\n    solara.InputText(label=\"Your sentence\", value=sentence, continuous_update=True)\n\n    # Display messages based on the current word count and word limit.\n    if word_count >= int(word_limit.value):\n        solara.Error(f\"With {word_count} words, you passed the word limit of {word_limit.value}.\")\n    elif word_count >= int(0.8 * word_limit.value):\n        solara.Warning(f\"With {word_count} words, you are close to the word limit of {word_limit.value}.\")\n    else:\n        solara.Success(\"Great short writing!\")\n\n\n# The following line is required only when running the code in a Jupyter notebook:\nPage()\n```\n\n----------------------------------------\n\nTITLE: Managing State with Reactive Variables in Solara\nDESCRIPTION: This example shows how to use solara.reactive() to create reactive variables that can manage component state and trigger automatic updates when values change.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/10-components.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\ncounter = solara.reactive(0)\n\n\ndef increment():\n    counter.value += 1\n\n\n@solara.component\ndef CounterDisplay():\n    solara.Info(f\"Counter: {counter.value}\")\n\n\n@solara.component\ndef IncrementButton():\n    solara.Button(\"Increment\", on_click=increment)\n\n\n@solara.component\ndef Page():\n    IncrementButton()\n    CounterDisplay()\n```\n\n----------------------------------------\n\nTITLE: Implementing TodoStore Class in Python with Solara\nDESCRIPTION: This class manages todo items using Solara's reactive properties. It provides methods for adding, removing, and tracking the status of todo items.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass TodoStore:\n    def __init__(self, items: list[TodoItem]):\n        # we keep the items as a protected attribute\n        self._items = solara.reactive(items)\n        self.add_item_text = solara.reactive(\"\")\n\n    @property\n    def items(self):\n        # and make the items read only for a property\n        return self._items.value\n\n    def add_item(self, item):\n        self._items.value = [*self._items.value, item]\n        # reset the new text after adding a new item\n        self.add_item_text.value = \"\"\n\n    def add(self):\n        self.add_item(TodoItem(text=self.add_item_text.value))\n\n    def remove(self, item: TodoItem):\n        self._items.value = [k for k in self.items if k._uuid.value != item._uuid.value]\n\n    @property\n    def done_count(self):\n        return len([k for k in self.items if k.done.value])\n\n    @property\n    def done_percentage(self):\n        if len(self.items) == 0:\n            return 0\n        else:\n            return self.done_count / len(self.items) * 100\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Solara Component with Reactive Variables\nDESCRIPTION: This example demonstrates creating a simple Solara component that uses reactive variables to track state. The counter component displays a button that increments a count value when clicked, showcasing how Solara's reactive programming model works.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/00-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n@solara.component\ndef Page():\n    count, set_count = solara.use_state(0)\n    \n    # This function will be called when the button is clicked\n    def increment():\n        set_count(count + 1)\n    \n    solara.Button(label=f\"Clicked {count} times\", on_click=increment)\n```\n\n----------------------------------------\n\nTITLE: Implementing Solara Button Component in Python\nDESCRIPTION: This Python script defines a Solara component with a reactive button that changes color based on the number of clicks.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/20-web-app.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\nclicks = solara.reactive(0)\n\n\n@solara.component\ndef Page():\n    color = \"green\"\n    if clicks.value >= 5:\n        color = \"red\"\n\n    def increment():\n        clicks.value += 1\n        print(\"clicks\", clicks)\n\n    solara.Button(label=f\"Clicked: {clicks}\", on_click=increment, color=color)\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Counter Component in Solara\nDESCRIPTION: Creates a button component that tracks the number of clicks using Solara's state management. The component demonstrates basic state handling and event callbacks in Solara/Reacton framework.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/12-reacton-basics.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n@solara.component\ndef ClickButton():\n    clicks, set_clicks = solara.use_state(0)\n\n    def my_click_hander():\n        set_clicks(clicks + 1)\n\n    return solara.Button(label=f\"Clicked: {clicks}\", on_click=my_click_hander)\n\nPage = ClickButton\n```\n\n----------------------------------------\n\nTITLE: Todo Store Implementation\nDESCRIPTION: Demonstrates creating a store class for managing todo items with reactive attributes.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_6\n\nLANGUAGE: solara\nCODE:\n```\nimport uuid\nfrom typing import Callable\n\nimport solara\n\nclass TodoItem:\n    def __init__(self, text: str, done: bool = False):\n        self.text = solara.reactive(text)\n        self.done = solara.reactive(done)\n        self._uuid = solara.reactive(str(uuid.uuid4()))\n        self._dirty = solara.reactive(True)\n\n    def __str__(self) -> str:\n        return f\"{self.text.value} ({'done' if self.done else 'not done'})\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lazy Rendering in Solara Components\nDESCRIPTION: This example illustrates Solara's lazy rendering approach. It defines multiple components, including a counter with a button to increment its value, a display for the counter, and a component that generates random text. It showcases how only relevant components are re-rendered when state changes.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/10-components.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\ncounter = solara.reactive(0)\n\n@solara.component\ndef CounterDisplay():\n    solara.Info(f\"Counter: {counter.value}\")\n\n@solara.component\ndef IncrementButton():\n    def increment():\n        counter.value += 1\n\n    solara.Button(\"Increment\", on_click=increment)\n\n@solara.component\ndef RandomText():\n    import random\n    solara.Info(f\"Random number: {random.random()}\")\n\n@solara.component\ndef Page():\n    IncrementButton()\n    CounterDisplay()\n    RandomText()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Button Component in Solara\nDESCRIPTION: This example demonstrates how to create a basic Solara component using the @solara.component decorator to display a button with text.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/10-components.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n@solara.component\ndef MyButton():\n    solara.Button(\"Click me!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing TodoApp Component in Python with Solara\nDESCRIPTION: This component renders the main Todo application. It displays all todo items, provides an input for adding new items, and shows a progress bar for completed items.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef TodoApp(store: TodoStore = default_store):\n    for item in store.items:\n        TodoItemCard(item, on_remove=store.remove)\n\n    with solara.Card(\"New item\"):\n        solara.InputText(label=\"Text\", value=store.add_item_text)\n        solara.Button(\"Add new\", on_click=store.add)\n    solara.ProgressLinear(value=store.done_percentage)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Click Button in Solara\nDESCRIPTION: Demonstrates a simple Solara component that implements a clickable button with a counter. Uses solara.use_state for state management and returns a single Button component.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/18-containers.md#2025-04-23_snippet_0\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n@solara.component\ndef ClickButton():\n    clicks, set_clicks = solara.use_state(0)\n\n    def my_click_hander():\n        set_clicks(clicks + 1)\n\n    # We return a single component\n    return solara.Button(label=f\"Clicked: {clicks}\", on_click=my_click_hander)\n\nPage = ClickButton\n```\n\n----------------------------------------\n\nTITLE: Solara Component with Interactive X-axis Selection\nDESCRIPTION: Complete component that renders a scatter plot with a select dropdown to control which column is used for the x-axis, demonstrating reactive state management.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncolumns = list(df.columns)\nx_axis = solara.reactive(\"sepal_length\")\n\n\n@solara.component\ndef Page():\n    # Create a scatter plot by passing \"x_axis.value\" to px.scatter\n    # This will automatically make the component listen to changes in x_axis\n    # and re-execute this function when x_axis value changes\n    fig = px.scatter(df, x_axis.value, \"sepal_width\")\n    solara.FigurePlotly(fig)\n\n    # Pass x_axis to Select component\n    # The select will control the x_axis reactive variable\n    solara.Select(label=\"X-axis\", value=x_axis, values=columns)\n```\n\n----------------------------------------\n\nTITLE: Basic Solara Layout Structure\nDESCRIPTION: Demonstrates the core layout components in Solara including Column, Sidebar, Card, Columns, and ColumnsResponsive. Shows how to organize content with relative and responsive column sizing.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/20-layout.md#2025-04-23_snippet_0\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n@solara.component\ndef Page():\n    with solara.Column():\n        solara.Title(\"I'm in the browser tab and the toolbar\")\n        with solara.Sidebar():\n            solara.Markdown(\"## I am in the sidebar\")\n            solara.SliderInt(label=\"Ideal for placing controls\")\n        solara.Info(\"I'm in the main content area, put your main content here\")\n        with solara.Card(\"Use solara.Columns([1, 2]) to create relatively sized columns\"):\n            with solara.Columns([1, 2]):\n                solara.Success(\"I'm in the first column\")\n                solara.Warning(\"I'm in the second column, I am twice as wide\")\n                solara.Info(\"I am like the first column\")\n\n        with solara.Card(\"Use solara.Column() to create a full width column\"):\n            with solara.Column():\n                solara.Success(\"I'm first in this full with column\")\n                solara.Warning(\"I'm second in this full with column\")\n                solara.Error(\"I'm third in this full with column\")\n\n        with solara.Card(\"Use solara.ColumnsResponsive(6, large=4) to response to screen size\"):\n            with solara.ColumnsResponsive(6, large=4):\n                for i in range(6):\n                    solara.Info(\"two per column on small screens, three per column on large screens\")\n```\n\n----------------------------------------\n\nTITLE: Equivalent Solara Implementation in Python\nDESCRIPTION: Translation of the Streamlit example to Solara, demonstrating reactive state management and component-based structure.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/40-streamlit.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\nx = solara.reactive(2)\n\n@solara.component\ndef Page():\n    x_squared = x.value**2\n\n    with solara.Sidebar():\n        solara.Markdown(\"## My First Solara app ☀️\")\n        solara.SliderInt(label=\"x\", value=x)\n    solara.Markdown(f\"{x.value} squared = {x_squared}\")\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Solara Button Component without Browser\nDESCRIPTION: Demonstrates how to test a basic Solara button component using pytest without requiring a browser. Shows component rendering, widget tree inspection, and event handling.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nimport ipyvuetify as v\n\n\ndef test_docs_no_browser_simple():\n    clicks = solara.reactive(0)\n\n    @solara.component\n    def ClickButton():\n        def increment():\n            clicks.value += 1\n\n        solara.Button(label=f\"Clicked: {clicks}\", on_click=increment)\n\n    # rc is short for render context\n    box, rc = solara.render(ClickButton(), handle_error=False)\n    button = box.children[0]\n    assert isinstance(button, v.Btn)\n    assert button.children[0] == \"Clicked: 0\"\n    # trigger the click event handler without a browser\n    button.click()\n    assert clicks.value == 1\n    assert button.children[0] == \"Clicked: 1\"\n```\n\n----------------------------------------\n\nTITLE: Solara Component with X and Y Axis Selection\nDESCRIPTION: Enhanced component with two dropdown selectors to control both x and y axes of the scatter plot using reactive variables.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ny_axis = solara.reactive(\"sepal_width\")\n\n\n@solara.component\ndef Page():\n    fig = px.scatter(df, x_axis.value, y_axis.value)\n    solara.FigurePlotly(fig)\n    solara.Select(label=\"X-axis\", value=x_axis, values=columns)\n    solara.Select(label=\"Y-axis\", value=y_axis, values=columns)\n```\n\n----------------------------------------\n\nTITLE: Creating Components with Arguments in Solara\nDESCRIPTION: This example demonstrates how to create a component that accepts arguments, making it more customizable and reusable.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/10-components.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n@solara.component\ndef MyButton(text):\n    solara.Button(text)\n```\n\n----------------------------------------\n\nTITLE: Local State Management with use_reactive\nDESCRIPTION: Shows how to implement component-specific state using solara.use_reactive hook, creating reusable components with isolated state.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_1\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n@solara.component\ndef ReusableComponent():\n    color = solara.use_reactive(\"red\")  # local state (instead of top level solara.reactive)\n    solara.Select(label=\"Color\",values=[\"red\", \"green\", \"blue\", \"orange\"],\n                  value=color)\n    solara.Markdown(\"### Solara is awesome\", style={\"color\": color.value})\n\n@solara.component\ndef Page():\n    # this component is used twice, but each instance has its own state\n    ReusableComponent()\n    ReusableComponent()\n\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Component and Module in Solara\nDESCRIPTION: This snippet demonstrates how to manually define routes in Solara by creating a list of Route objects with components and modules. It shows defining a Home and About component, and importing a calculator module for routing.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/40-routing.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nfrom solara.website.pages.examples.utilities import calculator\n\n\n@solara.component\ndef Home():\n    solara.Markdown(\"Home\")\n\n\n@solara.component\ndef About():\n    solara.Markdown(\"About\")\n\n\nroutes = [\n    solara.Route(path=\"/\", component=Home, label=\"Home\"),\n    # the calculator module should have a Page component\n    solara.Route(path=\"calculator\", module=calculator, label=\"Calculator\"),\n    solara.Route(path=\"about\", component=About, label=\"About\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Using Breakpoints in Solara Components with PDB\nDESCRIPTION: This example demonstrates how to implement a breakpoint in a Solara application. It creates a button component that increments a reactive counter and triggers the Python debugger when clicked. The button changes color to red after being clicked 5 times.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/31-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\nclicks = solara.reactive(0)\n\n\n@solara.component\ndef Page():\n    color = \"green\"\n    if clicks.value >= 5:\n        color = \"red\"\n\n    def increment():\n        clicks.value += 1\n        # this will trigger the debugger\n        breakpoint()\n        print(\"clicks\", clicks)  # noqa\n\n    solara.Button(label=f\"Clicked: {clicks}\", on_click=increment, color=color)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Button Component with Reacton-ipyvuetify in Solara\nDESCRIPTION: Demonstrates how to create a stateful button component using Solara and reacton-ipyvuetify wrapper. The component tracks click counts and updates the button text accordingly using React-style state management.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/06-ipyvuetify.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n# rv is the reacton-ipyvuetify wrapper for Reacton/Solara\nimport reacton.ipyvuetify as rv\n\n\n@solara.component\ndef Page():\n    clicks, set_clicks = solara.use_state(0)\n    def my_click_handler(*ignore_args):\n        # trigger a new render with a new value for clicks\n        set_clicks(clicks+1)\n    button = rv.Btn(children=[f\"Clicked {clicks} times\"])\n    rv.use_event(button, 'click', my_click_handler)\n    return button\n```\n\n----------------------------------------\n\nTITLE: Using Solara's useEffect for Side Effects\nDESCRIPTION: This code snippet demonstrates how to implement side effects in Solara components using the useEffect hook. The example shows how to run code when a component mounts and when dependency values change, similar to React's useEffect.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/00-overview.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n@solara.component\ndef DataLoader():\n    data, set_data = solara.use_state(None)\n    loading, set_loading = solara.use_state(True)\n    \n    # This effect runs when the component mounts\n    @solara.use_effect\n    def load_data():\n        set_loading(True)\n        # Simulate a data loading operation\n        import time\n        time.sleep(1)  # In a real app, this would be an API call\n        set_data({\"result\": \"Some data\"})\n        set_loading(False)\n    \n    # Display different UI based on loading state\n    if loading:\n        return solara.Text(\"Loading...\")\n    else:\n        return solara.Text(f\"Data: {data}\")\n```\n\n----------------------------------------\n\nTITLE: Integrating Solara Components with ipywidgets\nDESCRIPTION: An extended example that combines classic ipywidgets with Solara components using the .widget() method, creating a vertically stacked layout with a button and a file download component.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/30-ipywidgets.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\n\nimport solara\n\nclicks = 0\n\n\ndef on_click(button):\n    global clicks\n    clicks += 1\n    button.description = f\"Clicked {clicks} times\"\n\n\nbutton = widgets.Button(description=\"Clicked 0 times\")\nbutton.on_click(on_click)\n\npage = widgets.VBox(\n    [\n        button,\n        # using .widget(..) we can create a classic ipywidget from a solara component\n        solara.FileDownload.widget(data=\"some text data\", filename=\"solara-demo.txt\"),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Filtering Component with Multiple States\nDESCRIPTION: This example shows a more complex Solara component that demonstrates filtering data based on user input. It illustrates how to manage multiple state variables and how to implement conditional rendering based on those states.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/00-overview.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nimport pandas as pd\n\n@solara.component\ndef DataFilter():\n    # Sample data\n    df = pd.DataFrame({\n        \"name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n        \"age\": [25, 30, 35, 40],\n        \"city\": [\"New York\", \"Boston\", \"Chicago\", \"Boston\"]\n    })\n    \n    # State for filter\n    filter_city, set_filter_city = solara.use_state(\"\")\n    \n    # Filtered data based on city\n    filtered_df = df[df[\"city\"].str.contains(filter_city)] if filter_city else df\n    \n    # UI Components\n    solara.Text(\"Filter by city:\")\n    solara.InputText(value=filter_city, on_value=set_filter_city)\n    \n    # Display results\n    solara.DataFrame(filtered_df)\n```\n\n----------------------------------------\n\nTITLE: Creating Container Components with Multiple Children in Solara\nDESCRIPTION: Shows how to create a component that contains multiple child components using solara.Row as a container. Implements a fancy click button with increment and reset functionality.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/18-containers.md#2025-04-23_snippet_1\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n@solara.component\ndef FancyClickButton():\n    clicks, set_clicks = solara.use_state(0)\n\n    def increase_count():\n        set_clicks(clicks + 1)\n\n    def reset_count():\n        set_clicks(0)\n\n    button_increase = solara.Button(label=f\"Clicked: {clicks}\", on_click=increase_count)\n    button_reset = solara.Button(label=\"Reset\", on_click=reset_count)\n\n    return solara.Row(children=[button_increase,\n                                 button_reset,\n                                 ])\n\nPage = FancyClickButton\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Solara Application with Reactive Variables\nDESCRIPTION: A complete example of a simple Solara application that demonstrates reactive variables, component definition, and UI elements including sliders, text input, and conditional messages based on word count.\nSOURCE: https://github.com/widgetti/solara/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n# Declare reactive variables at the top level. Components using these variables\n# will be re-executed when their values change.\nsentence = solara.reactive(\"Solara makes our team more productive.\")\nword_limit = solara.reactive(10)\n\n\n@solara.component\ndef Page():\n    # Calculate word_count within the component to ensure re-execution when reactive variables change.\n    word_count = len(sentence.value.split())\n\n    solara.SliderInt(\"Word limit\", value=word_limit, min=2, max=20)\n    solara.InputText(label=\"Your sentence\", value=sentence, continuous_update=True)\n\n    # Display messages based on the current word count and word limit.\n    if word_count >= int(word_limit.value):\n        solara.Error(f\"With {word_count} words, you passed the word limit of {word_limit.value}.\")\n    elif word_count >= int(0.8 * word_limit.value):\n        solara.Warning(f\"With {word_count} words, you are close to the word limit of {word_limit.value}.\")\n    else:\n        solara.Success(\"Great short writing!\")\n\n\n# The following line is required only when running the code in a Jupyter notebook:\nPage()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Solara Component with Plotly Visualization\nDESCRIPTION: Defines a Solara Page component that renders a scatter plot of sepal length vs sepal width using Plotly Express and displays it with FigurePlotly.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nimport solara\n\ndf = px.data.iris()\n\n\n@solara.component\ndef Page():\n    fig = px.scatter(df, \"sepal_length\", \"sepal_width\")\n    solara.FigurePlotly(fig)\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click Events in Solara\nDESCRIPTION: This example shows how to create an interactive button component that responds to click events by defining a callback function.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/10-components.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\ndef on_button_click(event):\n    print(\"Button clicked!\")\n\n@solara.component\ndef MyInteractiveButton():\n    solara.Button(\"Click me!\", on_click=on_button_click)\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Routing with Solara use_router Hook\nDESCRIPTION: Demonstrates how to use solara.use_router() to access the current path, split it into components, and conditionally render content based on URL segments. The example shows basic path manipulation and displays the current path and its parts using Markdown.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/40-routing.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    router = solara.use_router()\n    path = router.path\n    parts = path.split(\"/\")\n    solara.Markdown(f\"Path = {path!r}, and split up into {parts!r}\")\n    # now you can do anything with path or parts.\n    # e.g.\n    # if parts[0] == \"docs\":\n    #   solara.Markdown(\"You are in the docs section\")\n```\n\n----------------------------------------\n\nTITLE: Implementing First Level Child Component for Routing\nDESCRIPTION: This code shows how to implement a component that handles the first level of routing in a Solara application. It uses use_route and use_route_level to determine the current route and render the appropriate component.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/40-routing.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef MyFirstLevelChildComponent():\n    level = solara.use_route_level()  # returns 1\n    route_current, routes_current_level = solara.use_route()\n    # route_current is routes[1].children[0], i.e. solara.Route(path=\"basics\", children=[...])\n    # routes_current_level is [routes[1].children[0], routes[1].children[1]], i.e.:\n    #    [solara.Route(path=\"basics\", children=[...]), solara.Route(path=\"advanced\")]\n    if route_current is None: # no matching route\n        return solara.Error(\"oops, page not found\")\n    else:\n        # we could render some mid level navigation here based on route_current_level and route_current\n        return MySecondLevelChildComponent()\n```\n\n----------------------------------------\n\nTITLE: Assembling the Final Dashboard with Solara\nDESCRIPTION: Creates the final Solara component that combines the Controls and View components into a complete dashboard.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_jupyter_dashboard_1.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef Page():\n    with solara.Sidebar():\n        Controls()\n    View()\n\n\nPage()\n```\n\n----------------------------------------\n\nTITLE: Using Context Managers for Clean Container Layout in Solara\nDESCRIPTION: Demonstrates the use of Python context managers (with statement) to create cleaner container layouts in Solara. Shows how to automatically add children to containers using context managers.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/18-containers.md#2025-04-23_snippet_2\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n@solara.component\ndef FancyClickButton():\n    clicks, set_clicks = solara.use_state(0)\n\n    def increase_count():\n        set_clicks(clicks + 1)\n\n    def reset_count():\n        set_clicks(0)\n\n    with solara.Row() as main:\n        solara.Button(label=f\"Clicked: {clicks}\", on_click=increase_count)\n        solara.Button(label=\"Reset\", on_click=reset_count)\n    return main\n\nPage = FancyClickButton\n```\n\n----------------------------------------\n\nTITLE: Global State Management with solara.reactive\nDESCRIPTION: Demonstrates creating global state using solara.reactive that can be accessed across components. Shows implementation of a color selector component that affects global state.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_0\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\ncolor = solara.reactive(\"red\")\n\n@solara.component\ndef SomeAppSpecificComponent():\n    solara.Select(label=\"Color\", values=[\"red\", \"green\", \"blue\", \"orange\"], value=color)\n    solara.Markdown(\"### Solara is awesome\", style={\"color\": color.value})\n\n@solara.component\ndef Page():\n    SomeAppSpecificComponent()\n\n```\n\n----------------------------------------\n\nTITLE: Creating Map with ipyleaflet in Solara\nDESCRIPTION: Demonstrates how to create a map and add a marker using ipyleaflet in Solara. It shows how to use the .element() method and handle layers in Solara's React-like API.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/50-ipywidget_libraries.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport ipyleaflet\nimport solara\n\nurl = ipyleaflet.basemaps.OpenStreetMap.Mapnik[\"url\"]\n\n@solara.component\ndef Page():\n    marker = ipyleaflet.Marker.element(location=(52.1, 10.1), draggable=True)\n    map = ipyleaflet.Map.element(\n        center=(52, 10),\n        zoom=8,\n        layers=[\n            ipyleaflet.TileLayer.element(url=url),\n            marker,\n        ],\n    )\n```\n\n----------------------------------------\n\nTITLE: Testing Python State Changes with Polling in Solara\nDESCRIPTION: This snippet demonstrates how to test state changes on the Python side that don't directly affect the frontend using a polling technique. It includes a helper function for polling and a test function that uses Playwright to interact with a button and verify state changes.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\nimport playwright.sync_api\nfrom IPython.display import display\nfrom typing import Callable\nimport time\n\n\ndef assert_equals_poll(getter: Callable, expected, timeout=2, iteration_delay=0.01):\n    start = time.time()\n    while time.time() - start < timeout:\n        if getter() == expected:\n            return\n        time.sleep(iteration_delay)\n    assert getter() == expected\n    return False\n\n\ndef test_event_with_polling(solara_test, page_session: playwright.sync_api.Page):\n    button = widgets.Button(description=\"Append data\")\n    # some data that will change due to a button click\n    click_data = []\n\n    def on_click(button):\n        # change the data when the button is clicked\n        # this will be called from the thread the websocket is in\n        # so we can block/poll from the main thread (that pytest is running in)\n        click_data.append(42)\n\n    button.on_click(on_click)\n    display(button)\n    button_sel = page_session.locator(\"text=Append data\")\n    button_sel.click()\n\n    # we block/poll until the condition is met.\n    assert_equals_poll(lambda: click_data, [42])\n```\n\n----------------------------------------\n\nTITLE: Embedding Solara in Flask Application\nDESCRIPTION: Example of integrating a Solara application into an existing Flask application using Flask Blueprints. This allows Solara to run under a specific URL prefix while maintaining the rest of the Flask app.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/07-deploying/10-self-hosted.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nimport solara.server.flask\n\napp = Flask(__name__)\napp.register_blueprint(solara.server.flask.blueprint, url_prefix=\"/solara/\")\n\n@app.route(\"/\")\ndef hello_world():\n    return \"<p>Hello, World!</p>\"\n```\n\n----------------------------------------\n\nTITLE: Complete Interactive Data Exploration Component\nDESCRIPTION: Advanced Solara component that combines all functionality: axis selection, point clicking, highlighting selected points, and displaying nearest neighbors in a table.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclick_data = solara.reactive(None)\n\n\ndef find_nearest_neighbours(df, xcol, ycol, x, y, n=10):\n    df = df.copy()\n    df[\"distance\"] = ((df[xcol] - x) ** 2 + (df[ycol] - y) ** 2) ** 0.5\n    return df.sort_values(\"distance\")[1 : n + 1]\n\n\n@solara.component\ndef Page():\n    fig = px.scatter(df, x_axis.value, y_axis.value, color=\"species\", custom_data=[df.index])\n\n    if click_data.value is not None:\n        x = click_data.value[\"points\"][\"xs\"][0]\n        y = click_data.value[\"points\"][\"ys\"][0]\n\n        # add an indicator\n        fig.add_trace(px.scatter(x=[x], y=[y], text=[\"⭐️\"]).data[0])\n        df_nearest = find_nearest_neighbours(df, x_axis.value, y_axis.value, x, y, n=3)\n    else:\n        df_nearest = None\n\n    solara.FigurePlotly(fig, on_click=click_data.set)\n    solara.Select(label=\"X-axis\", value=x_axis, values=columns)\n    solara.Select(label=\"Y-axis\", value=y_axis, values=columns)\n    if df_nearest is not None:\n        solara.Markdown(\"## Nearest 3 neighbours\")\n        solara.DataFrame(df_nearest)\n    else:\n        solara.Info(\"Click to select a point\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component with Internal State in Solara\nDESCRIPTION: This example demonstrates how to use the use_reactive hook to manage internal state in a Solara component. It creates a Counter component with a button to increment the count and display the current value.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/10-components.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n@solara.component\ndef Counter():\n    count = solara.use_reactive(0)\n\n    def increment():\n        count.value += 1\n\n    solara.Button(\"Increment\", on_click=increment)\n    solara.Info(f\"Counter: {count.value}\")\n\n@solara.component\ndef Page():\n    Counter()\n```\n\n----------------------------------------\n\nTITLE: Custom Navigation Layout in Solara\nDESCRIPTION: Implements a custom layout with navigation buttons for each route. Creates a row of buttons at the top that highlight the current route and display the page content below.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/20-layout.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef Layout(children=[]):\n    # Note that children being passed here for this example will be a Page() element.\n    route_current, routes_all = solara.use_route()\n    with solara.Column():\n        # put all buttons in a single row\n        with solara.Row():\n            for route in routes_all:\n                with solara.Link(route):\n                    solara.Button(route.path, color=\"red\" if route_current == route else None)\n        # under the navigation buttons, we add our children (the single Page())\n        solara.Column(children=children)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Component with URL Parameter\nDESCRIPTION: Example of a dynamic Page component that accepts a 'name' parameter from the URL, allowing creation of dynamic routes like '/tabular/foo' that pass 'foo' as an argument to the Page component.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/10-multipage.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef Page(name: str = \"foo\"):\n    subpages = [\"foo\", \"bar\", \"solara\", \"react-ipywidgets\"]\n    solara.Markdown(f\"You are at: {name}\")\n    # bunch of buttons which navigate to our dynamic route\n    with solara.Row():\n        for subpage in subpages:\n            with solara.Link(subpage):\n                solara.Button(label=f\"Go to: {subpage}\")\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Multi-page App\nDESCRIPTION: The expected directory structure for a basic multi-page Solara application, showing the organization of script files.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/10-multipage.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmultipage-demo\n├── 01-click-button.py\n└── 02-markdown-editor.py\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Color Picker with Dynamic Feedback using ipywidgets in Python\nDESCRIPTION: This code creates a color picker widget that updates an HTML display when a new color is selected. It demonstrates how to set up widget observation with callback functions and how to structure a simple UI with VBox layout.\nSOURCE: https://github.com/widgetti/solara/blob/master/tests/unit/solara_test_apps/multipage-widgets/04-color.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\n\ncolor = widgets.ColorPicker(value=\"red\", description=\"Pick a color\")\ninfo = widgets.HTML(value=\"Pick a color \")\n\n\ndef on_color_change(change):\n    info.value = f'<span style=\"color: {change.new}\"> You picked {change.new}</span>'\n\n\ncolor.observe(on_color_change, names=\"value\")\npage = widgets.VBox([color, info])\npage\n```\n\n----------------------------------------\n\nTITLE: Browser-Based Widget Testing Example\nDESCRIPTION: Shows how to test widgets using Solara server and Playwright for browser interaction, including event handling and UI updates.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\nimport playwright.sync_api\nfrom IPython.display import display\n\ndef test_widget_button_solara(solara_test, page_session: playwright.sync_api.Page):\n    # The test code runs in the same process as solara-server (which runs in a separate thread)\n    # Note: this test uses ipywidgets directly, not solara components.\n    button = widgets.Button(description=\"Click Me!\")\n\n    def change_description(obj):\n        button.description = \"Tested event\"\n\n    button.on_click(change_description)\n    display(button)\n    button_sel = page_session.locator(\"text=Click Me!\")\n    button_sel.wait_for()\n    button_sel.click()\n    page_session.locator(\"text=Tested event\").wait_for()\n```\n\n----------------------------------------\n\nTITLE: Testing Python State Changes with Futures in Solara\nDESCRIPTION: This snippet shows how to test state changes on the Python side using a Future object. It demonstrates a more efficient way to wait for state changes compared to polling, especially when the state change emits an event that can be captured.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\nfrom concurrent.futures import Future\nimport playwright.sync_api\nfrom IPython.display import display\n\n\ndef future_trait_change(widget, attribute):\n    \"\"\"Returns a future that will be set when the trait changes.\"\"\"\n    future = Future()  # type: ignore\n\n    def on_change(change):\n        # set_result will cause the .result() call below to resume\n        future.set_result(change[\"new\"])\n        widget.unobserve(on_change, attribute)\n\n    widget.observe(on_change, attribute)\n    return future\n\n\ndef test_event_with_polling(solara_test, page_session: playwright.sync_api.Page):\n    button = widgets.Button(description=\"Reset slider\")\n    slider = widgets.IntSlider(value=42)\n\n    def on_click(button):\n        # change the slider value trait when the button is clicked\n        # this will be called from the thread the websocket from solara-server\n        # is running in, so we can block from the main thread (that pytest is running in)\n        slider.value = 0\n\n    button.on_click(on_click)\n    display(button)\n    # we could display the slider, but it's not necessary for this test\n    # since we are only testing if the value changes on the Python side\n    # display(slider)\n    button_sel = page_session.locator(\"text=Reset slider\")\n\n    # create the future with the attached observer *before* clicking the button\n    slider_value = future_trait_change(slider, \"value\")\n    # trigger the click event handler via the frontend, this makes sure that\n    # the event handler (on_click) gets executed in a separate thread\n    # (the one that the websocket from solara-server is running in)\n    button_sel.click()\n\n    # .result() blocks until the value changes or the timeout condition is met.\n    # If no value is set, the test will fail due to a TimeoutError\n    assert slider_value.result(timeout=2) == 0\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Routing Tree in Solara\nDESCRIPTION: This snippet shows how to define a nested routing structure in Solara with multiple levels of routes. It creates a hierarchical navigation structure with paths like '/docs/basics/react' and demonstrates how routes are organized.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/40-routing.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\nroutes = [\n    # route level == 0\n    solara.Route(path=\"/\"),  # matches empty path ''\n    solara.Route(\n        # route level == 1\n        path=\"docs\",  # matches '/docs'\n        children=[\n            # route level == 2\n            solara.Route(path=\"basics\", children=[  # matches '/docs/basics'\n                # route level == 3\n                solara.Route(path=\"react\"),      # matches '/docs/basics/react'\n                solara.Route(path=\"ipywidgets\"), # matches '/docs/basics/ipywidgets'\n                solara.Route(path=\"solara\"),     # matches '/docs/basics/solara'\n            ]),\n            solara.Route(path=\"advanced\")  # matches '/docs/advanced'\n        ],\n    ),\n    solara.Route(\n        path=\"blog\",\n        # route level == 1\n        children=[\n            solara.Route(path=\"/\"),   # matches '/blog'\n            solara.Route(path=\"foo\"), # matches '/blog/foo'\n            solara.Route(path=\"bar\"), # matches '/blog/bar'\n        ],\n    ),\n    solara.Route(path=\"contact\")  # matches '/contact'\n]\n\n# Lets assume our pathname is `/docs/basics/react`,\n@solara.component\ndef Page():\n    level = solara.use_route_level()  # returns 0\n    route_current, routes_current_level = solara.use_route()\n    # route_current is routes[1], i.e. solara.Route(path=\"docs\", children=[...])\n    # routes_current_level is [routes[0], routes[1], routes[2], routes[3]], i.e.:\n    #    [solara.Route(path=\"/\"), solara.Route(path=\"docs\", children=[...]),\n    #     solara.Route(path=\"blog\", children=[...]), solara.Route(path=\"contact\")]\n    if route_current is None: # no matching route\n        return solara.Error(\"oops, page not found\")\n    else:\n        # we could render some top level navigation here based on route_current_level and route_current\n        return MyFirstLevelChildComponent()\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Variable in Plotly Chart Creation\nDESCRIPTION: Uses the reactive x_axis variable to dynamically update the scatter plot when the selected column changes.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfig = px.scatter(df, x_axis.value, \"sepal_width\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple ipywidget Button in Solara\nDESCRIPTION: A basic example that creates an ipywidget button that counts clicks. The script demonstrates global state management and how Solara executes the code for each page request.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/30-ipywidgets.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\n\nclicks = 0\n\nprint(\"I get run at startup, and for every page request\")\n\ndef on_click(button):\n    global clicks\n    clicks += 1\n    button.description = f\"Clicked {clicks} times\"\n\n\nbutton = widgets.Button(description=\"Clicked 0 times\")\nbutton.on_click(on_click)\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth in Application Controlled Mode\nDESCRIPTION: Solara component demonstrating how to implement OAuth in application controlled mode. It shows login/logout buttons and user information based on authentication status.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/30-enterprise/10-oauth.md#2025-04-23_snippet_2\n\nLANGUAGE: solara\nCODE:\n```\n@solara.component\ndef Page():\n    if not auth.user.value:\n        # `get_login_url` should automatically redirect the user back to the current page.\n        # The URL argument is only used here as an example.\n        solara.Button(\"Login\", icon_name=\"mdi-login\", href=auth.get_login_url(\"documentation/advanced/enterprise/oauth\"))\n    else:\n        userinfo = auth.user.value['userinfo']\n        if 'name' in userinfo:\n            solara.Markdown(f\"### Welcome {userinfo['name']}\")\n        # See above comment\n        solara.Button(\"Logout\", icon_name=\"mdi-logout\", href=auth.get_logout_url(\"documentation/advanced/enterprise/oauth\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Second Level Child Component for Routing\nDESCRIPTION: This code demonstrates a component that handles the second level of routing in a Solara application. It decides which content component to render based on the current route path after checking route matches at this level.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/40-routing.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef MySecondLevelChildComponent():\n    level = solara.use_route_level()  # returns 2\n    route_current, routes_current_level = solara.use_route()\n    # route_current is routes[1].children[0].children[0], i.e. solara.Route(path=\"react\")\n    # routes_current_level is [routes[1].children[0].children[0], routes[1].children[0].children[1], routes[1].children[0].children[2]], i.e.\n    #    [solara.Route(path=\"react\"), solara.Route(path=\"ipywidgets\"), solara.Route(path=\"solara\")]\n    if route_current is None: # no matching route\n        return solara.Error(\"oops, page not found\")\n    else:\n        # we could render some mid level navigation here based on route_current_level and route_current\n        if route_current.path == \"react\":\n            return DocsBasicReact()  # render the actual content\n        elif route_current.path == \"ipywidgets\":\n            return DocsBasicIpyWidgets()\n        elif route_current.path == \"solara\":\n            return DocsBasicSolara()\n        else:\n            return solara.Error(\"oops, not possible!\")\n```\n\n----------------------------------------\n\nTITLE: DataFrame Mutation Example\nDESCRIPTION: Shows proper handling of Pandas DataFrame mutations with reactive variables.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nimport pandas as pd\n\nreactive_df = solara.reactive(pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]}))\n# reactive_df.value.append({\"a\": 4, \"b\": 7})  # BAD: mutating a DataFrame is not observable in Python\ndf_copy = reactive_df.value.copy(deep=True)  # for Pandas 3, deep=True is not necessary\ndf_copy = df_copy.append({\"a\": 4, \"b\": 7}, ignore_index=True)\nreactive_df.value = df_copy  # GOOD: re-assign a new DataFrame\n```\n\n----------------------------------------\n\nTITLE: Creating Links Between Routes in Solara\nDESCRIPTION: This code demonstrates how to create links between routes using resolve_path to generate the full URL and the solara.Link component to create a navigation element. This ensures proper routing without hardcoding paths.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/40-routing.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef LinkToIpywidgets():\n    route_ipywidgets = routes.children[1].children[0].children[1]\n    # route_ipywidgets.path == \"ipywidgets\"\n    path = solara.resolve_path(route_ipywidgets)\n    # path == '/docs/basics/ipywidgets\n    with solara.Link(path) as main:\n        solara.Button(\"read about ipywidgets\")\n    return main\n```\n\n----------------------------------------\n\nTITLE: Creating TodoItemCard Component in Python with Solara\nDESCRIPTION: This component renders a single todo item as a card. It includes the item's text, a done switch, and a remove button.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef TodoItemCard(item: TodoItem, on_remove: Callable[[TodoItem], None]):\n    with solara.Card():\n        solara.InputText(\"\", value=item.text)\n        solara.Switch(label=\"Done\", value=item.done)\n        solara.Button(\"Remove\", on_click=lambda: on_remove(item))\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Solara Application\nDESCRIPTION: Example of a simple Solara application with a button component that changes color based on click count. This demonstrates the reactive programming model in Solara.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/07-deploying/10-self-hosted.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\nclicks = solara.reactive(0)\n\n\n@solara.component\ndef Page():\n    color = \"green\"\n    if clicks.value >= 5:\n        color = \"red\"\n\n    def increment():\n        clicks.value += 1\n        print(\"clicks\", clicks)  # noqa\n\n    solara.Button(label=f\"Clicked: {clicks}\", on_click=increment, color=color)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous UI Testing Example\nDESCRIPTION: Demonstrates testing asynchronous UI updates using solara.lab.task and wait_for methods to handle delayed UI changes.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nimport solara.lab\nimport ipyvuetify as v\nimport time\n\n\ndef test_docs_no_browser_api_thread():\n    clicks = solara.reactive(0)\n\n    @solara.component\n    def ClickButton():\n        @solara.lab.task\n        def increment():\n            # now we will wait for 0.3 seconds before updating the UI\n            time.sleep(0.3)\n            clicks.value += 1\n\n        with solara.Card(\"Button in a card\"):\n            with solara.Column():\n                solara.Button(label=f\"Clicked: {clicks}\", on_click=increment)\n\n    # rc is short for render context\n    box, rc = solara.render(ClickButton(), handle_error=False)\n    finder = rc.find(v.Btn)\n    button = finder.widget\n    finder.assert_single()\n    finder.assert_not_empty()\n    assert button.children[0] == \"Clicked: 0\"\n\n    # clicking will now start a thread, so we have to wait/poll for the UI to update\n    button.click()\n\n    button_after_delayed_click = rc.find(v.Btn, children=[\"Clicked: 1\"])\n    button_after_delayed_click.wait_for(timeout=2.5)\n```\n\n----------------------------------------\n\nTITLE: Using Wrapped ipywidgets in Solara\nDESCRIPTION: Demonstrates how to use the wrapped version of ipywidgets in Solara. This approach provides better type safety and auto-completion in IDEs.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/50-ipywidget_libraries.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport reacton.ipywidgets as w\nbutton_element = w.Button(description=\"Click me)\n```\n\n----------------------------------------\n\nTITLE: Using Reacton's State Management in Solara\nDESCRIPTION: Example showing that Reacton's functionality is accessible through the Solara namespace, allowing developers to use either 'solara.use_state' or 'reacton.use_state' interchangeably for the same functionality.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/10-reacton.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsolara.use_state\n```\n\nLANGUAGE: python\nCODE:\n```\nreacton.use_state\n```\n\n----------------------------------------\n\nTITLE: Nested Layout Implementation in Solara\nDESCRIPTION: Demonstrates how to create nested layouts using multiple containers (Column and Row) with context managers in Solara.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/18-containers.md#2025-04-23_snippet_4\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n@solara.component\ndef FancyClickButton():\n    clicks, set_clicks = solara.use_state(0)\n\n    def increase_count():\n        set_clicks(clicks + 1)\n\n    def reset_count():\n        set_clicks(0)\n\n    with solara.Column() as main:\n        with solara.Row():\n            solara.Button(label=f\"Clicked: {clicks}\", on_click=increase_count)\n            solara.Button(label=\"Reset\", on_click=reset_count)\n        solara.Text(\"I am a child of a VBox\")\n    return main\n\nPage = FancyClickButton\n```\n\n----------------------------------------\n\nTITLE: Creating UI Controls with Solara\nDESCRIPTION: Defines a Solara component that creates UI controls for filtering the crime data.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_jupyter_dashboard_1.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef Controls():\n    solara.SelectMultiple(\"District\", all_values=[str(k) for k in df_crime[\"PdDistrict\"].unique().tolist()], values=districts)\n    solara.SelectMultiple(\"Category\", all_values=[str(k) for k in df_crime[\"Category\"].unique().tolist()], values=categories)\n    solara.Text(\"Maximum number of rows to show on map\")\n    solara.SliderInt(\"\", value=limit, min=1, max=1000)\n\n\nControls()\n```\n\n----------------------------------------\n\nTITLE: Loop Hook Error Example (SH103)\nDESCRIPTION: Demonstrates a loop hook error where use_state is called inside a variable-length loop, which could result in an inconsistent number of hook calls between renders.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/17-rules-of-hooks.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    for i in range(x):\n        solara.use_state(1)  # will cause the use_state to not always be a constant number of times\n    solara.Text(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Custom AppLayout Implementation\nDESCRIPTION: Shows how to create a custom Layout component that replicates the default AppLayout behavior. This component would be placed in the __init__.py file of the app directory to override the default layout.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/20-layout.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef Layout(children=[]):\n    print(\"I get called before the Page component gets rendered\")\n    return solara.AppLayout(children=children)\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive View Component with Solara\nDESCRIPTION: Defines a Solara component that creates a reactive view of the crime data, including a map and charts.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_jupyter_dashboard_1.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef View():\n    dff = crime_filter(df_crime, districts.value, categories.value)\n    row_count = len(dff)\n    if row_count > limit.value:\n        solara.Warning(f\"Only showing the first {limit.value} of {row_count:,} crimes on map\")\n    crime_map(dff.iloc[: limit.value])\n    if row_count > 0:\n        crime_charts(dff)\n    else:\n        solara.Warning(\"You filtered out all the data, no charts shown\")\n\n\nView()\n```\n\n----------------------------------------\n\nTITLE: Initializing Default TodoStore in Python\nDESCRIPTION: This code creates a default TodoStore instance with predefined todo items. It can be used as a starting point for the TodoApp component.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndefault_store = TodoStore(\n    [\n        TodoItem(text=\"Write a blog post\", done=False),\n        TodoItem(text=\"Take out the trash\", done=True),\n        TodoItem(text=\"Do the laundry\", done=False),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Solara Implementation of Color-Changing Markdown\nDESCRIPTION: Equivalent Solara implementation using server-side state management with reactive variables and declarative components.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/50-dash.md#2025-04-23_snippet_1\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\ncolor = solara.reactive(\"red\")\n\n\n@solara.component\ndef Page():\n    solara.Select(label=\"Color\", values=[\"red\", \"green\", \"blue\", \"orange\"], value=color)\n    solara.Markdown(\"## Hello World\", style={\"color\": color.value})\n```\n\n----------------------------------------\n\nTITLE: Exception Hook Error Example (SH106)\nDESCRIPTION: Shows an exception hook error where use_state is called in a try block, meaning it might not be called if an exception occurs, violating the rules of hooks.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/17-rules-of-hooks.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    try:\n        this_might_fail()\n        solara.use_state(1)  # will use_state always be called? Difficult to analyze, so don't do it\n    except:\n        pass\n    solara.Text(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Creating Button Element with ipywidgets in Solara\nDESCRIPTION: Demonstrates how to create a button element using ipywidgets in Solara. The .element() method is used to create elements for existing widgets.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/50-ipywidget_libraries.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets\nbutton_element = ipywidgets.Button.element(description=\"Click me\")\n```\n\n----------------------------------------\n\nTITLE: Creating Map with ipyleaflet Using Classical ipywidget API\nDESCRIPTION: Shows how to create a map and add a marker using ipyleaflet with the classical ipywidget API. This is provided as a contrast to the Solara approach.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/50-ipywidget_libraries.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ipyleaflet\n\nmap = ipyleaflet.Map(center=(52, 10), zoom=8)\n\nmarker = Marker(location=(52.1, 10.1), draggable=True)\nm.add_layer(marker)\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler with use_effect\nDESCRIPTION: Example showing how to use use_effect to attach and clean up event handlers on a Solara input component. Demonstrates proper event binding and cleanup pattern.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/api/hooks/use_effect.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef use_event(el: solara.Element, callback: Callable):\n    def add_event_handler():\n        def on_enter(widget, event, data):\n            callback(widget.v_model)\n\n        widget = cast(ipyvue.VueWidget, solara.get_widget(el))\n        widget.on_event(\"keyup.enter\", on_enter)\n\n        def cleanup():\n            widget.on_event(\"keyup.enter\", on_enter, remove=True)\n\n        return cleanup\n\n    solara.use_effect(add_event_handler, dependencies=[])\n\n@solara.component\ndef Page():\n    def function():\n        #Do something...\n\n    input = solara.InputText():\n    use_event(input, function)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding Click Interactivity to Plotly Chart\nDESCRIPTION: Adds a click event handler to the scatter plot that stores click data in a reactive variable and displays it as raw data in a Markdown component.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclick_data = solara.reactive(None)\n\n\n@solara.component\ndef Page():\n    fig = px.scatter(df, x_axis.value, y_axis.value)\n    solara.FigurePlotly(fig, on_click=click_data.set)\n    solara.Select(label=\"X-axis\", value=x_axis, values=columns)\n    solara.Select(label=\"Y-axis\", value=y_axis, values=columns)\n    # display it pre-formatted using the backticks `` using Markdown\n    solara.Markdown(f\"`{click_data}`\")\n```\n\n----------------------------------------\n\nTITLE: Running Solara with Jupyter Notebooks via Command Line\nDESCRIPTION: Commands demonstrating how to execute Solara applications from Jupyter notebook files. Shows both basic notebook execution and accessing nested widgets within notebooks.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/90-notebook-support.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ solara run myapp.ipynb\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ solara run myapp.ipynb:myobject.nested_widget\n```\n\n----------------------------------------\n\nTITLE: Testing IPyWidget Button Click Event\nDESCRIPTION: Example test case demonstrating how to test a button widget click event using Playwright and the solara_test fixture. Shows widget creation, event handling, and interaction verification using page locators.\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/pytest-ipywidgets/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\nimport playwright.sync_api\nfrom IPython.display import display\n\ndef test_widget_button_solara(solara_test, page_session: playwright.sync_api.Page):\n    # this all runs in-process\n    button = widgets.Button(description=\"Click Me!\")\n\n    def change_description(obj):\n        button.description = \"Tested event\"\n\n    button.on_click(change_description)\n    display(button)\n    button_sel = page_session.locator(\"text=Click Me!\")\n    button_sel.wait_for()\n    button_sel.click()\n    page_session.locator(\"text=Tested event\").wait_for()\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Usage in Solara\nDESCRIPTION: Demonstrates basic usage of Solara's cache storage object for storing and retrieving data\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/95-caching.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nsolara.cache.storage[\"my-key\"] = expensive_function_call()\nassert \"my-key\" in solara.cache.storage\n```\n\n----------------------------------------\n\nTITLE: Using Components in a Solara Application\nDESCRIPTION: This snippet shows how to use custom components within a Solara application by creating multiple instances of a component.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/10-components.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n@solara.component\ndef MyApp():\n    MyButton()\n    MyButton()\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in a Single Script for Multi-page App\nDESCRIPTION: Python code showing how to define multiple pages (Home and About) in a single script using Solara routes, which creates a multi-page application without separate files.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/10-multipage.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Home():\n    solara.Markdown(\"Home\")\n\n\n@solara.component\ndef About():\n    solara.Markdown(\"About\")\n\n\nroutes = [\n    solara.Route(path=\"/\", component=Home, label=\"home\"),\n    solara.Route(path=\"about\", component=About, label=\"about\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Slider Component with Solara and ipyvuetify\nDESCRIPTION: This code snippet defines a Solara page component that renders a slider UI element. It imports the necessary components from reacton.ipyvuetify and solara, then creates a function decorated with @solara.component that returns a slider with a 'Language' label.\nSOURCE: https://github.com/widgetti/solara/blob/master/tests/unit/solara_test_apps/multipage/05-and-notebooks.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport reacton.ipyvuetify as v\nimport solara\n\n\n@solara.component\ndef Page():\n    return v.Slider(label=\"Language\")\n```\n\n----------------------------------------\n\nTITLE: Running a Solara Application from Command Line\nDESCRIPTION: Command to launch a Solara application from the command line. This starts the Solara server which serves the application at the specified URL.\nSOURCE: https://github.com/widgetti/solara/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run sol.py\nSolara server is starting at http://localhost:8765\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode for Debugging Solara Applications\nDESCRIPTION: This JSON configuration for VSCode's launch.json allows debugging Solara applications directly from the editor. It specifies the path to the Solara executable and configures it to run the currently open file when the debugger is launched.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/31-debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Solara: Launch\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"/Users/maartenbreddels/miniconda3/envs/dev/bin/solara\",\n            \"args\": [\n                \"run\",\n                \"${file}\"\n            ],\n            \"console\": \"integratedTerminal\",\n            \"justMyCode\": true,\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Color-Changing Markdown Component in Solara\nDESCRIPTION: Solara implementation of a reusable component using local state management with use_state hook and proper component composition.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/50-dash.md#2025-04-23_snippet_3\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef MarkdownWithColor(markdown_text : str):\n    # color = solara.use_reactive()  # another possibility\n    color, set_color = solara.use_state(\"red\")  # local state\n    solara.Select(label=\"Color\",values=[\"red\", \"green\", \"blue\", \"orange\"],\n                    value=color, on_value=set_color)\n    solara.Markdown(markdown_text, style={\"color\": color})\n\n\n@solara.component\ndef Page():\n    with solara.Columns():\n        MarkdownWithColor(\"## Reuse is simple\")\n        MarkdownWithColor(\"## With solara\")\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Solara Components in Python\nDESCRIPTION: Demonstrates how to create reusable components in Solara using local state management with use_state hook.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/40-streamlit.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n@solara.component\ndef Square(name: str):\n    # x = solara.use_reactive(2)  # another possibility\n    x, set_x = solara.use_state(2)\n    y = x**2\n    with solara.Sidebar():\n        solara.SliderInt(label=name, value=x, on_value=set_x)\n    solara.Markdown(f'{name}: {x} squared = {y}')\n\n@solara.component\ndef Page():\n    Square('a')\n    Square('b')\n```\n\n----------------------------------------\n\nTITLE: Running Solara with Extra Asset Locations\nDESCRIPTION: Shows how to set the SOLARA_ASSETS_EXTRA_LOCATIONS environment variable to specify additional directories for asset files when running the Solara server.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/41-asset-files.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export SOLARA_ASSETS_EXTRA_LOCATIONS=/path/to/assets,my_package.assets\n$ solara run solara.website.pages\nSolara server is starting at http://localhost:8765...\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-page App with Solara CLI\nDESCRIPTION: Use the Solara CLI to create multiple script files that will automatically be detected as different pages in a multi-page application.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/10-multipage.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ solara create button multipage-demo/01-click-button.py\nWrote:  /mypath/multipage-demo/01-click-button.py\n...\n$ solara create markdown multipage-demo/02-markdown-editor.py\nWrote:  /mypath/multipage-demo/02-markdown-editor.py\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Routes in Solara\nDESCRIPTION: This snippet shows how to add metadata to routes using the label and component attributes. This allows for dynamic UI generation based on route data and enables features like automatic page titles.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/40-routing.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nroutes = [\n    solara.Route(\"/\", component=Home, label=\"What is Solara ☀️?\"),\n    solara.Route(\"docs\", component=docs.App, label=\"Docs\", children=docs.routes),\n    solara.Route(\n        \"demo\",\n        component=demo.Demo,\n        children=demo.routes,\n        label=\"Demo\",\n    ),\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Crime Data Based on District and Category\nDESCRIPTION: Defines a function to filter the crime dataframe based on selected districts and categories, and demonstrates its usage.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_jupyter_dashboard_1.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef crime_filter(df, district_values, category_values):\n    df_dist = df.loc[df[\"PdDistrict\"].isin(district_values)]\n    df_category = df_dist.loc[df_dist[\"Category\"].isin(category_values)]\n    return df_category\n\n\ndff_crime = crime_filter(df_crime, [\"Bayview\", \"Northern\"], [\"Vandalism\", \"Assault\", \"Robbery\"])\n```\n\n----------------------------------------\n\nTITLE: Multi-level Cache Configuration\nDESCRIPTION: Setup of multi-level caching combining memory, disk, and Redis caches\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/95-caching.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nsolara.cache.configure(\"memory,disk,redis\")\n# or more explicit\nimport solara_enterprise.cache.multi_level\nimport solara_enterprise.cache.disk\nimport solara_enterprise.cache.redis\nl1 = solara.cache.Memory()\nl2 = solara_enterprise.cache.disk.Disk()\nl3 = solara_enterprise.cache.redis.Redis()\nsolara.cache.storage = solara_enterprise.cache.multi_level.MultiLevel(\n    l1, l2, l3\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Search Component in Solara\nDESCRIPTION: This code snippet demonstrates how to import and incorporate the Search component within a Solara application. The Search component is placed inside a toolbar to provide search functionality to the application.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/70-search.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nfrom solara_enterprise.search.search import Search\n\n\n@solara.component\ndef Page():\n    with MyToolbar():\n        ...\n        Search()\n```\n\n----------------------------------------\n\nTITLE: Displaying Static Images in Solara Components\nDESCRIPTION: This code demonstrates how to create a Solara page component that displays an image from the static public directory. The image is served from the ../public directory and accessed via the /static/public/ URL path.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/40-static_files.md#2025-04-23_snippet_0\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    image_url = \"/static/public/beach.jpeg\"\n    with solara.Card(title=\"The following image is served from the ../public directory\"):\n        solara.Image(image_url)\n\n```\n\n----------------------------------------\n\nTITLE: List Mutation Example\nDESCRIPTION: Shows proper way to handle list mutations with reactive variables to ensure component re-rendering.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\nreactive_list = solara.reactive([1, 2, 3])\n# Instead, re-assign a new value\nreactive_list.value = [*reactive_list.value, 4]  # GOOD: re-assign a new list\n```\n\n----------------------------------------\n\nTITLE: Parsing Click Data from Plotly Event\nDESCRIPTION: Extracts specific information (row index, x and y coordinates) from the click event data and displays it in a formatted message.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclick_data = solara.reactive(None)\n\n\n@solara.component\ndef Page():\n    fig = px.scatter(df, x_axis.value, y_axis.value)\n    solara.FigurePlotly(fig, on_click=click_data.set)\n    solara.Select(label=\"X-axis\", value=x_axis, values=columns)\n    solara.Select(label=\"Y-axis\", value=y_axis, values=columns)\n    # display it pre-formatted using the backticks `` using Markdown\n    if click_data.value:\n        row_index = click_data.value[\"points\"][\"point_indexes\"][0]\n        x = click_data.value[\"points\"][\"xs\"][0]\n        y = click_data.value[\"points\"][\"ys\"][0]\n        solara.Markdown(f\"`Click on index={row_index} x={x} y={y}`\")\n```\n\n----------------------------------------\n\nTITLE: Installing Solara Server with pip\nDESCRIPTION: Commands to install the Solara server and its dependencies using pip. The first command installs the core server with Starlette support, while the second installs all Solara packages.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/50-solara-server.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"solara-server[starlette]\"\n$ # pip install solara # to get all solara packages\n```\n\n----------------------------------------\n\nTITLE: Modifying Solara Button Component in Python\nDESCRIPTION: This code snippet shows a modification to the original Solara button component, changing the label based on the number of clicks.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/20-web-app.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    label = \"Not clicked yet\" if clicks.value == 0 else f\"Clicked: {clicks}\"\n    solara.Button(label=label, on_click=increment, color=color)\n```\n\n----------------------------------------\n\nTITLE: Testing Solara Components in Multiple Jupyter Environments\nDESCRIPTION: This snippet demonstrates how to test a Solara component across different Jupyter environments (Notebook, Lab, Voila, and Solara) using the ipywidgets_runner fixture. It includes a sample test that creates a button component and verifies its behavior.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\nimport playwright.sync_api\nfrom IPython.display import display\n\n\ndef test_solara_button_all(ipywidgets_runner, page_session: playwright.sync_api.Page, assert_solara_snapshot):\n    # this function (or rather its lines) will be executed in the kernel\n    # voila, lab, classic notebook and solara will all execute it\n    def kernel_code():\n        import solara\n\n        @solara.component\n        def Button():\n            text, set_text = solara.use_state(\"Click Me!\")\n\n            def on_click():\n                set_text(\"Tested event\")\n\n            solara.Button(text, on_click=on_click)\n\n        display(Button())\n\n    ipywidgets_runner(kernel_code)\n    button_sel = page_session.locator(\"button >> text=Click Me!\")\n    assert_solara_snapshot(button_sel.screenshot())\n    button_sel.wait_for()\n    button_sel.click()\n    page_session.locator(\"button >> text=Tested event\").wait_for()\n    page_session.wait_for_timeout(1000)\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Solara Component in Jupyter Notebook\nDESCRIPTION: This code snippet shows how to import a Solara component from a Python file and display it in a Jupyter notebook. It enables reuse of Solara code in interactive environments.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/00-quickstart.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sol import Page\ndisplay(Page())\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Environment Variables for Solara\nDESCRIPTION: Environment variable settings required to configure Auth0 as the OAuth provider for Solara. Includes client ID, client secret, and API base URL.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/30-enterprise/10-oauth.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# required if you don't use the default test account\nSOLARA_SESSION_SECRET_KEY=\"change me\"\n# found in the Auth0 dashboard Applications->Applications->Client ID\nSOLARA_OAUTH_CLIENT_ID=\"cW7owP5Q52YHMZAnJwT8FPlH2ZKvvL3U\"\n# found in the Auth0 dashboard Applications->Applications->Client secret\nSOLARA_OAUTH_CLIENT_SECRET=\"zxITXxoz54OjuSmdn-PluQgAwbeYyoB7ALlnLoodftvAn81usDXW0quchvoNvUYD\"\n# found in the Auth0 dashboard Applications->Applications->Domain\nSOLARA_OAUTH_API_BASE_URL=\"dev-y02f02f2bpr8skxu785.us.auth0.com\"\n```\n\n----------------------------------------\n\nTITLE: Widget Tree Navigation Test Example\nDESCRIPTION: Shows how to find specific widgets in a complex widget tree using the render context's find method with various search criteria and meta references.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nimport ipyvuetify as v\n\n\ndef test_docs_no_browser_api_find():\n    clicks = solara.reactive(0)\n\n    @solara.component\n    def ClickButton():\n        def increment():\n            clicks.value += 1\n\n        with solara.Card(\"Button in a card\"):\n            with solara.Column().meta(ref=\"my_column\"):\n                solara.Button(label=f\"Clicked: {clicks}\", on_click=increment)\n            with solara.Column():\n                solara.Button(label=\"Not the button we need\")\n\n    # rc is short for render context\n    box, rc = solara.render(ClickButton(), handle_error=False)\n    # this find will make the .widget fail, because it matches two buttons\n    # finder = rc.find(v.Btn)\n    # We can refine our search by adding constraints to attributes of the widget\n    button_locator = rc.find(v.Btn, children=[\"Clicked: 0\"])\n    # basics asserts are supported, like assert_single(), assert_empty(), assert_not_empty()\n    button_locator.assert_single()\n    button = button_locator.widget\n    # .find calls can also be nested, and can use the meta_ref to find the right widget\n    # finder = rc.find(meta_ref=\"my_column\").find(v.Btn)\n    button.click()\n    assert clicks.value == 1\n    rc.find(v.Btn, children=[\"Clicked: 1\"]).assert_single()\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Variables with Solara\nDESCRIPTION: Initializes reactive variables using Solara for districts, categories, and row limit.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_jupyter_dashboard_1.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\ndistricts = solara.reactive([\"Bayview\", \"Northern\"])\ncategories = solara.reactive([\"Vandalism\", \"Assault\", \"Robbery\"])\nlimit = solara.reactive(100)\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Button Component with Solara\nDESCRIPTION: Implements a Solara component for a clickable button that changes color based on the number of clicks. It uses state management to track clicks and updates the button's label and color accordingly.\nSOURCE: https://github.com/widgetti/solara/blob/master/tests/unit/solara_test_apps/multipage/03-some-markdown.md#2025-04-23_snippet_1\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef ClickButton():\n    clicks, set_clicks = solara.use_state(0)\n\n    color = \"green\"\n    if clicks >= 5:\n        color = \"red\"\n\n    def on_click():\n        set_clicks(clicks + 1)\n        print(\"clicks\", clicks)\n\n    return solara.Button(label=f\"Clicked: {clicks}\", on_click=on_click, color=color)\n\n\napp = ClickButton()\n```\n\n----------------------------------------\n\nTITLE: Reusable Color-Changing Markdown Component in Dash\nDESCRIPTION: Advanced Dash implementation creating a reusable All-in-One component with isolated state using unique IDs.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/50-dash.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nfrom dash import MATCH, Dash, Input, Output, State, callback, dcc, html\n\n\nclass MarkdownWithColorAIO(html.Div):\n    class ids:\n        dropdown = lambda aio_id: {\"component\": \"MarkdownWithColorAIO\", \"subcomponent\": \"dropdown\", \"aio_id\": aio_id}\n        markdown = lambda aio_id: {\"component\": \"MarkdownWithColorAIO\", \"subcomponent\": \"markdown\", \"aio_id\": aio_id}\n\n    ids = ids\n\n    def __init__(self, text, colors=None, markdown_props=None, dropdown_props=None, aio_id=None):\n        colors = colors if colors else [\"red\", \"green\", \"blue\", \"orange\"]\n\n        if aio_id is None:\n            aio_id = str(uuid.uuid4())\n\n        dropdown_props = dropdown_props.copy() if dropdown_props else {}\n        if \"options\" not in dropdown_props:\n            dropdown_props[\"options\"] = [{\"label\": i, \"value\": i} for i in colors]\n        dropdown_props[\"value\"] = dropdown_props[\"options\"][0][\"value\"]\n\n        markdown_props = markdown_props.copy() if markdown_props else {}\n        if \"style\" not in markdown_props:\n            markdown_props[\"style\"] = {\"color\": dropdown_props[\"value\"]}\n        if \"children\" not in markdown_props:\n            markdown_props[\"children\"] = text\n        super().__init__([dcc.Dropdown(id=self.ids.dropdown(aio_id), **dropdown_props), dcc.Markdown(id=self.ids.markdown(aio_id), **markdown_props)])\n\n    @callback(\n        Output(ids.markdown(MATCH), \"style\"),\n        Input(ids.dropdown(MATCH), \"value\"),\n        State(ids.markdown(MATCH), \"style\"),\n    )\n    def update_markdown_style(color, existing_style):\n        existing_style[\"color\"] = color\n        return existing_style\n\n\napp = Dash(__name__)\n\napp.layout = html.Div(\n    children=[\n        MarkdownWithColorAIO(\"## Hello World1\"),\n        MarkdownWithColorAIO(\"## Hello World2\"),\n    ]\n)\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Default Memory Cache Configuration\nDESCRIPTION: Shows how to configure the default LRU memory cache in Solara with a maximum size limit\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/95-caching.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsolara.cache.storage = solara.cache.Memory(maxsize=128)\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Implementation\nDESCRIPTION: Examples of implementing custom cache solutions including infinite cache and FIFO cache using cachetools\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/95-caching.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsolara.cache.storage = {}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport cachetools\nimport solara\nsolara.cache.storage = cachetools.FIFOCache(maxsize=100)\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Map with Folium\nDESCRIPTION: Defines a function to create an interactive map using Folium, displaying crime locations as markers.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_jupyter_dashboard_1.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport folium\nimport folium.plugins\n\n\ndef crime_map(df):\n    latitude = 37.77\n    longitude = -122.42\n\n    sanfran_map = folium.Map(location=[latitude, longitude], zoom_start=12)\n\n    incidents = folium.plugins.MarkerCluster().add_to(sanfran_map)\n\n    # loop through the dataframe and add each data point to the mark cluster\n    for (\n        lat,\n        lng,\n        label,\n    ) in zip(df.Y, df.X, df.Category):\n        folium.Marker(\n            location=[lat, lng],\n            icon=None,\n            popup=label,\n        ).add_to(incidents)\n\n    # show map\n    display(sanfran_map)\n\n\ncrime_map(dff_crime.iloc[0:50, :])\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Variable for X-axis Selection\nDESCRIPTION: Creates a reactive variable to store the selected x-axis column, which will be used for dynamic UI updates when the selection changes.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nx_axis = solara.reactive(\"sepal_length\")\n```\n\n----------------------------------------\n\nTITLE: Memory Size-Based Cache Configuration\nDESCRIPTION: Configuration of byte size-based memory cache in Solara Enterprise\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/95-caching.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nsolara.cache.configure(\"memory-size\")\n# or more explicit\nimport solara_enterprise.cache.memory_size\nsolara.cache.storage = solara_enterprise.cache.memory_size.MemorySize(\n    max_size=\"1GB\"  # already the default\n)\n```\n\n----------------------------------------\n\nTITLE: Redis Cache Configuration\nDESCRIPTION: Implementation of Redis-based cache for distributed storage across multiple nodes\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/95-caching.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nsolara.cache.configure(\"redis\")\n# or more explicit\nimport solara_enterprise.cache.redis\n# optionally pass in a redis.Client object\nsolara.cache.storage = solara_enterprise.cache.redis.Redis()\n```\n\n----------------------------------------\n\nTITLE: Creating a Select Component for X-axis Configuration\nDESCRIPTION: Creates a Select component that allows users to choose which column to use for the x-axis from the dataframe columns.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncolumns = list(df.columns)\nsolara.Select(label=\"X-axis\", values=columns, value=x_axis)\n```\n\n----------------------------------------\n\nTITLE: Running Solara Server from Command Line\nDESCRIPTION: This command demonstrates how to run a Solara script using the Solara server. It starts the server and provides a local URL to access the application in a web browser.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/00-quickstart.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run sol.py\nSolara server is starting at http://localhost:8765\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Charts for Crime Data Visualization\nDESCRIPTION: Defines a function to create bar charts using Matplotlib, showing crime counts by category and district.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_jupyter_dashboard_1.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\n\ndef crime_charts(df):\n    cat_unique = df[\"Category\"].value_counts()\n    cat_unique = cat_unique.reset_index()\n\n    dist_unique = df[\"PdDistrict\"].value_counts()\n    dist_unique = dist_unique.reset_index()\n\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\n\n    ax1.bar(cat_unique[\"Category\"], cat_unique[\"count\"])\n    ax1.set_title(\"Amount of Criminal Case Based on Category\")\n    ax2.bar(dist_unique[\"PdDistrict\"], dist_unique[\"count\"])\n    ax2.set_title(\"Amount of Criminal Case in Selected District\")\n\n    display(fig)\n    plt.close(fig)\n\n\ncrime_charts(dff_crime)\n```\n\n----------------------------------------\n\nTITLE: Running a Multi-page Solara App\nDESCRIPTION: Command to run a multi-page Solara application by providing the directory path, which starts a local development server.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/10-multipage.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run ./multipage-demo\nSolara server is starting at http://localhost:8765\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of Reacton Component Lifecycle\nDESCRIPTION: Detailed sequence diagram showing the interaction flow between user actions, frontend, IPyWidgets, Reacton, and Solara components during component initialization and state updates.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/12-reacton-basics.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor You\n    participant Frontend as Frontend\n    participant ipywidgets as IPyWidgets\n    participant react as Reacton\n    participant component as ButtonClick\n    participant app as Solara\n\n    app->>component: el=ButtonClick()\n    app->>react: render(el)\n\n    activate react\n    react->>component: render()\n    component->>react: use_state(0)<br>(returns 0)\n\n    react->>react: reconsolidate()\n    react->>ipywidgets: create Button<br>description=\"Clicked: 0\"\n    deactivate react\n    ipywidgets--)Frontend: create Button view\n\n    You->>Frontend: clicks button\n\n    Frontend--)ipywidgets: Button clicked\n    ipywidgets->>component: on_click\n    activate component\n    component->>react: set_clicks(1)\n    activate react\n    deactivate component\n    react->>+component: render()\n    component->>-react: use_state(0)<br> (now returns 1)\n    react->>react: reconsolidate()\n    react->>ipywidgets: update Button<br>description=\"Clicked 1\"\n    deactivate react\n    ipywidgets--)Frontend: update Button<br>description=\"Clicked 1\"\n```\n\n----------------------------------------\n\nTITLE: Automatic Container Implementation in Solara\nDESCRIPTION: Shows how to use Solara's automatic container feature where multiple elements are automatically wrapped in a Column container when no explicit return value is provided.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/18-containers.md#2025-04-23_snippet_5\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n@solara.component\ndef ClickButton():\n    clicks, set_clicks = solara.use_state(0)\n\n    def my_click_hander():\n        set_clicks(clicks + 1)\n\n    solara.Button(label=f\"Clicked: {clicks}\", on_click=my_click_hander)\n    solara.Button(label=f\"Reset\", on_click=lambda: set_clicks(0))\n\nPage = ClickButton\n```\n\n----------------------------------------\n\nTITLE: Running Solara with a Python Script\nDESCRIPTION: This snippet demonstrates how to run a Solara application using a Python script. Solara detects file changes and automatically reloads the page in the browser.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/faq/content/99-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ solara myapp.py\nSolara server is starting at http://localhost:8766\n... file change detected ...\n(server refreshes, your page will reload)\n```\n\n----------------------------------------\n\nTITLE: Running Solara with SSG During Deployment\nDESCRIPTION: Command to run Solara server with SSG enabled, generating static content in the background\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/60-static-site-generation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run our.awesome.app --ssg\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Scatter Plot with Plotly Express\nDESCRIPTION: Creates a scatter plot using Plotly Express by specifying the dataframe and column names for x and y axes.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfig = px.scatter(df, \"sepal_length\", \"sepal_width\")\n```\n\n----------------------------------------\n\nTITLE: Defining use_effect Hook in Solara\nDESCRIPTION: Definition of use_effect hook that takes an effect callback and optional dependencies. The effect is executed after page render and can include cleanup logic.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/api/hooks/use_effect.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef use_effect(\n    effect: EffectCallable,\n    dependencies: Any | None = None\n) -> None\n    ...\n```\n\n----------------------------------------\n\nTITLE: Generating Solara Script File with Button Component\nDESCRIPTION: This bash command creates a new Solara script file named 'sol.py' with a basic button component.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/20-web-app.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ solara create button\nWrote:  /Users/maartenbreddels/github/widgetti/solara/sol.py\nRun as:\n         $ solara run /Users/maartenbreddels/github/widgetti/solara/sol.py\n```\n\n----------------------------------------\n\nTITLE: Running Solara SSG Pre-deployment\nDESCRIPTION: Command to generate static site content before deployment, saving to the ../build directory\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/60-static-site-generation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ solara ssg your.awesome.app\n```\n\n----------------------------------------\n\nTITLE: Disk Cache Configuration\nDESCRIPTION: Setup of disk-based cache for persistent storage across multiple processes\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/95-caching.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nsolara.cache.configure(\"disk\")\n# or more explicit\nimport solara_enterprise.cache.disk\nsolara.cache.storage = solara_enterprise.cache.disk.Disk(\n    max_size=\"10GB\", path=\"/home/maarten/.solara/cache\"  # already the default\n)\n```\n\n----------------------------------------\n\nTITLE: Assigning HTML IDs for Section Linking in Solara\nDESCRIPTION: This snippet shows how to assign HTML ID attributes to ipyvuetify components for section linking within a page. It demonstrates creating a button with an ID and explains how to link to specific page elements.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/40-routing.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsolara.v.Btn(attributes={\"id\": \"my-id\"}, ...)\n```\n\n----------------------------------------\n\nTITLE: Basic Streamlit Example in Python\nDESCRIPTION: A simple Streamlit application that creates a sidebar with a slider and displays the square of the slider value.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/40-streamlit.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nwith st.sidebar:\n    st.markdown(\"## My First Solara tutorial ☀️\")\n    x = st.slider(\"x\")\nx_squared = x**2\nst.markdown(f\"{x} squared = {x_squared}\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing use_thread State Diagram with Mermaid\nDESCRIPTION: A state diagram showing the possible states and transitions for the Result[T] object returned by use_thread. States include STARTING, WAITING, RUNNING, ERROR, FINISHED, and CANCELLED.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/api/hooks/use_thread.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    INITIAL-- \"Thread.start()\" -->STARTING;\n    STARTING-- \"previous thread running\" -->WAITING;\n    STARTING-- \"no previous thread\" -->RUNNING;\n    WAITING-- \"thread.join()\" -->RUNNING;\n    RUNNING-- \"on exception\" -->ERROR\n    RUNNING-- \"work finished\" -->FINISHED\n    RUNNING-- \"cancel()\" -->CANCELLED\n```\n\n----------------------------------------\n\nTITLE: Running Solara with Ignored Notebook Extensions\nDESCRIPTION: A bash command demonstrating how to run Solara while ignoring specific notebook extensions. It uses the SOLARA_SERVER_IGNORE_NBEXTENSIONS environment variable to specify extensions to ignore.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/50-solara-server.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ SOLARA_SERVER_IGNORE_NBEXTENSIONS=\"dash/main,foo/bar\" solara run nogit/sol.py -a\n```\n\n----------------------------------------\n\nTITLE: Configuring Fief OAuth Provider for Solara\nDESCRIPTION: Environment variable settings required to configure Fief as the OAuth provider for Solara. Includes client ID, client secret, API base URL, and logout path.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/30-enterprise/10-oauth.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSOLARA_SESSION_SECRET_KEY=\"change me\"  # required if you don't use the default test account\nSOLARA_OAUTH_CLIENT_ID=\"x2np62qgwp6hnEGTP4JYUE3igdZWhT-AvjpjwwDyKXU\"  # found in the Auth0 dashboard Clients->General Tab->ID\nSOLARA_OAUTH_CLIENT_SECRET=\"XQlByE1pVIz5h2SBN2GYDwT_ziqArHJgLD3KqMlCHjg\" # found in the Auth0 dashboard Clients->General Tab->Secret\nSOLARA_OAUTH_API_BASE_URL=\"solara-dev.fief.dev\"  # found in the Fief dashboard Tenants->Base URL\n # different from Solara's default\nSOLARA_OAUTH_LOGOUT_PATH=\"logout\"\n```\n\n----------------------------------------\n\nTITLE: Dictionary Mutation Example\nDESCRIPTION: Demonstrates correct approaches for mutating dictionaries with reactive variables.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\nreactive_dict = solara.reactive({\"a\": 1, \"b\": 2})\nreactive_dict.value = {**reactive_dict.value, \"c\": 3}  # GOOD: re-assign a new dictionary\n# deleting a key\nreactive_dict.value = {k: v for k, v in reactive_dict.value.items() if k != \"a\"}  # GOOD: re-assign a new dictionary\n# deleting a key (method 2)\ndict_copy = reactive_dict.value.copy()\ndel dict_copy[\"b\"]\nreactive_dict.value = dict_copy  # GOOD: re-assign a new dictionary\n```\n\n----------------------------------------\n\nTITLE: Integrating Solara with Panel\nDESCRIPTION: Example of embedding a Solara component in a Panel application. This demonstrates how to render a Solara/Reacton component as a widget that Panel can display and serve.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/07-deploying/10-self-hosted.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport panel as pn\nimport solara\n\n\n@solara.component\ndef ButtonClick(label=\"Hi\"):\n    clicks, set_clicks = solara.use_state(0)\n    def increment():\n        set_clicks(clicks + 1)\n    return solara.Button(f\"{label}: Clicked {clicks} times\", on_click=increment)\n\n# this creates just an element, Panel doesn't know what to do with that\nelement = ButtonClick(\"Solara+Panel\")\n# we explicitly ask Reacton to render it, and give us the widget\nbutton_widget, render_context = reacton.render_fixed(element)\n# mark this panel to be served by the panel server\npn.panel(button_widget).servable()\n```\n\n----------------------------------------\n\nTITLE: Querying Solara Server Resource Information\nDESCRIPTION: A curl command to retrieve resource usage information from the Solara server. It sends a GET request to the /resourcez endpoint with the verbose parameter to include detailed CPU and memory usage data.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/50-solara-server.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:8765/resourcez\\?verbose\n```\n\n----------------------------------------\n\nTITLE: Embedding Solara in Starlette Application\nDESCRIPTION: Example of integrating Solara into an existing Starlette application using route mounting. This approach allows Solara to be served under a specific URL path within the Starlette app.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/07-deploying/10-self-hosted.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Mount, Route\n\nimport solara.server.starlette\n\n\ndef myroot(request: Request):\n    return JSONResponse({\"framework\": \"solara\"})\n\n\nroutes = [\n    Route(\"/\", endpoint=myroot),\n    Mount(\"/solara/\", routes=solara.server.starlette.routes),\n]\n\napp = Starlette(routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Memoizing Function Results in Solara Components with use_memo\nDESCRIPTION: The use_memo function stores (memoizes) a function's return value on first render and only re-executes when dependencies change. Dependencies can be automatically detected from nonlocal variables when None is passed, or the function can be executed just once when an empty list is provided.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/api/hooks/use_memo.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef use_memo(\n    f: Any,\n    dependencies: Any | None = None,\n    debug_name: str = None\n) -> Any:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Solara with a Python Package\nDESCRIPTION: This snippet shows how to run a Solara application using a Python package instead of a single file. This is useful for larger applications that require more structure.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/faq/content/99-faq.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ solara mystartup.killerapp --dev\n....\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Page for Embedding Solara via iframe\nDESCRIPTION: This HTML snippet demonstrates how to create a simple webpage that embeds a Solara application using an iframe. The iframe source is set to a localhost address where the Solara app is running.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/40-embed.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n    <h1>This is on the main page</h1>\n    <iframe src=\"http://localhost:8765\" width=\"100%\" height=\"100%\"></iframe>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Checking Solara Server Readiness\nDESCRIPTION: A curl command to check if the Solara server is ready to accept requests. It sends a GET request to the /readyz endpoint, which should return a 200 OK status if the server is ready.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/50-solara-server.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:8765/readyz\ncurl -I localhost:8765\n\nHTTP/1.1 200 OK\n...\n```\n\n----------------------------------------\n\nTITLE: Embedding Solara in FastAPI Application\nDESCRIPTION: Example of integrating Solara into an existing FastAPI application by mounting the Solara app at a specific URL path. FastAPI is built on Starlette, so the integration is similar.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/07-deploying/10-self-hosted.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nimport solara.server.fastapi\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\napp.mount(\"/solara/\", app=solara.server.fastapi.app)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Nearest Neighbors Function\nDESCRIPTION: Creates a function to find the n nearest neighbors to a given point in 2D space based on Euclidean distance.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef find_nearest_neighbours(df, xcol, ycol, x, y, n=10):\n    df = df.copy()\n    df[\"distance\"] = ((df[xcol] - x)**2 + (df[ycol] - y)**2)**0.5\n    return df.sort_values('distance')[1:n+1]\n```\n\n----------------------------------------\n\nTITLE: Deploying Solara App via CLI\nDESCRIPTION: Command line example showing how to deploy a Solara application using the integrated cloud solution.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/07-deploying/20-cloud-hosted.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ solara deploy\n...\nYour app is live on awesomeapp-mystartup-gh.solara.run\n```\n\n----------------------------------------\n\nTITLE: Running Browser-Based Tests Command\nDESCRIPTION: Command to run browser-based tests using pytest with optional headed mode.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/ui/test_widget_button.py --headed # remove --headed to run headless\n```\n\n----------------------------------------\n\nTITLE: Using Video Widget in Solara\nDESCRIPTION: Shows how to use the Video widget from ipywidgets in Solara. Since there's no direct Solara component for Video, it demonstrates how to manually set the value.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/50-ipywidget_libraries.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport solara\nimport ipywidgets\n\nurl = 'https://user-images.githubusercontent.com/1765949/240697327-25b296bd-72c6-4412-948b-2d37e8196260.mp4'\n\n\n@solara.component\ndef Page():\n    ipywidgets.Video.element(value=url.encode('utf8'),\n        format='url',\n        width=500\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Solara Portal Project\nDESCRIPTION: Use the Solara CLI to generate a starter portal project with a complete package structure for larger applications, which includes components, pages, and data organization.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/10-multipage.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ solara create portal solara-test-portal\nWrote:  /Users/maartenbreddels/github/widgetti/solara/solara-test-portal\nInstall as:\n         $ (cd solara-test-portal; pip install -e .)\nRun as:\n         $ solara run solara_test_portal.pages\n```\n\n----------------------------------------\n\nTITLE: Creating Page Component in Python with Solara\nDESCRIPTION: This component represents the main page of the application. It simply renders the TodoApp component.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef Page():\n    TodoApp()\n```\n\n----------------------------------------\n\nTITLE: Suppressing Hook Validation Warning in Line\nDESCRIPTION: Demonstrates how to suppress a specific hook validation warning by adding the 'noqa: SH103' comment to the line with the hook call in a loop.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/17-rules-of-hooks.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    for i in range(10):\n        solara.use_state(1)  # noqa: SH103\n\n    solara.Text(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Adding Asset Locations Programmatically in Solara Libraries\nDESCRIPTION: Demonstrates how to programmatically add asset locations in a library built on top of Solara, by appending to the extra_locations list in the server settings.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/41-asset-files.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport solara.server.settings\nimport my_package.assets\n\n\npath = my_package.assets.__path__[0]\n# append at the end, so SOLARA_ASSETS_EXTRA_LOCATIONS can override\nsolara.server.settings.assets.extra_locations.append(path)\n```\n\n----------------------------------------\n\nTITLE: Creating Color-Changing Markdown in Dash\nDESCRIPTION: Basic Dash application that creates a dropdown color selector to change markdown text color using callbacks. Shows Dash's browser-side state management approach.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/50-dash.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dash import Dash, Input, Output, callback, dcc, html\n\napp = Dash(__name__)\n\napp.layout = html.Div(\n    children=[\n        dcc.Dropdown(id=\"dropdown\", options=[\"red\", \"green\", \"blue\", \"orange\"]),\n        dcc.Markdown(id=\"markdown\", children=[\"## Hello World\"]),\n    ]\n)\n\n\n@callback(\n    Output(\"markdown\", \"style\"),\n    Input(\"dropdown\", \"value\"),\n)\ndef update_markdown_style(color):\n    return {\"color\": color}\n\n\nif __name__ == \"__main__\":\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Loading Iris Dataset with Plotly Express\nDESCRIPTION: Imports plotly.express and loads the Iris flower dataset which contains measurements of three Iris species.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\ndf = px.data.iris()\n```\n\n----------------------------------------\n\nTITLE: Suppressing Hook Validation Warning at Component Level\nDESCRIPTION: Shows how to suppress all hook validation warnings for an entire component by adding the 'noqa: SH103' comment to the component function definition.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/17-rules-of-hooks.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():  # noqa: SH103\n    for i in range(10):\n        solara.use_state(1)\n\n    solara.Text(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Solara Project Assets\nDESCRIPTION: Demonstrates the typical directory layout for a Solara project, including the location of asset files and pages.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/41-asset-files.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n├── pages\n│   ├── 01-landing-page.md\n│   ├── 02-some_app.py\n└── public\n    └── beach.jpeg\n└── assets\n    ├── custom.css\n    ├── custom.js\n    ├── theme.js\n    └── favicon.png\n```\n```\n\n----------------------------------------\n\nTITLE: Streamlit Example of Multiple Components\nDESCRIPTION: Demonstrates creating multiple instances of a function in Streamlit, highlighting potential naming conflicts.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/40-streamlit.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\ndef square(name):\n    with st.sidebar:\n        x = st.slider(name)\n    x_squared = x**2\n    st.markdown(f\"{name}: {x} squared = {x_squared}\")\n\nsquare(\"x\")\nsquare(\"y\")\n```\n\n----------------------------------------\n\nTITLE: Installing Solara with Pre-installed Assets\nDESCRIPTION: Command to install Solara with bundled assets (CSS, JavaScript, fonts) for environments where CDN access is restricted. This avoids needing to fetch assets dynamically at runtime.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/02-installing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"solara[assets]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Solara with OAuth Support\nDESCRIPTION: Command to install Solara with OAuth support using pip. This installs both Solara and the Solara Enterprise package with authentication features.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/30-enterprise/10-oauth.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install solara solara-enterprise[auth]\n```\n\n----------------------------------------\n\nTITLE: Running Solara Server Command\nDESCRIPTION: Command to start the Solara server from the command line, which will serve the application at the specified localhost port\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/solara-meta/main.README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run sol.py\n```\n\n----------------------------------------\n\nTITLE: Disabling Layout in Solara\nDESCRIPTION: Demonstrates how to disable the default layout system by creating a Layout component that directly returns the Page component without any wrapping elements.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/20-layout.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@solara.component\ndef Layout(children=[]):\n    # there will only be 1 child, which is the Page()\n    return children[0]\n```\n\n----------------------------------------\n\nTITLE: Configuring Solara Docker Container\nDESCRIPTION: Basic Dockerfile configuration for running a Solara application. Sets the command to run the Solara app with production settings and binds to all network interfaces (0.0.0.0) to allow external access.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/07-deploying/10-self-hosted.md#2025-04-23_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ....\n\n...\nCMD [\"solara\", \"run\", \"sol.py\", \"--host=0.0.0.0\", \"--production\"]\n```\n\n----------------------------------------\n\nTITLE: Running Solara Script with Solara Server\nDESCRIPTION: This bash command runs the Solara script using the Solara server, which starts a local web server to host the app.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/20-web-app.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run sol.py\nSolara server is starting at http://localhost:8765\n```\n\n----------------------------------------\n\nTITLE: Enabling Private Mode for OAuth in Solara\nDESCRIPTION: Environment variable setting to enable private mode in Solara, which restricts access to pages and resources without authentication.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/30-enterprise/10-oauth.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSOLARA_OAUTH_PRIVATE=True\n```\n\n----------------------------------------\n\nTITLE: Running a Solara Application\nDESCRIPTION: This command demonstrates how to run a Solara application using the 'solara run' command followed by the Python script filename.\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/solara-server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run myapp.py\n```\n\n----------------------------------------\n\nTITLE: Installing Solara via pip\nDESCRIPTION: Simple pip command to install the Solara package. This is the basic installation method for getting started with Solara development.\nSOURCE: https://github.com/widgetti/solara/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install solara\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as Reverse Proxy for Solara\nDESCRIPTION: Example Nginx configuration for serving a Solara application through a reverse proxy. Includes required settings for WebSocket support and header forwarding.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/07-deploying/10-self-hosted.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nserver {\n    server_name widgetti.io;\n    listen 80\n    location / {\n            # the local solara server (could be using Starlette/uvicorn)\n            proxy_pass http://localhost:8765/;\n\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_read_timeout 86400;\n    }\n\n    # If you do not host solara on the root path, you can use the following\n    # location /solara/ {\n    #        ...\n    #        proxy_set_header X-Script-Name /solara;  # informs solara to produce correct urls\n    #        ...\n    # }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Secret Key for Solara OAuth\nDESCRIPTION: Python command to generate a secure secret key for use with Solara OAuth configuration. This key is used to set the SOLARA_SESSION_SECRET_KEY environment variable.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/30-enterprise/10-oauth.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ python -c \"import secrets; print(secrets.token_urlsafe(32))\"\nZgrzSLUyft-JvnNMNJ2LgbCFVqcxPOatANAQhMD5EYU\n```\n\n----------------------------------------\n\nTITLE: Installing Solara Server with Additional Dependencies\nDESCRIPTION: This command installs the Solara server package along with Starlette and development dependencies using pip.\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/solara-server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install solara-server[starlette,dev]\n```\n\n----------------------------------------\n\nTITLE: Local State Management with use_state\nDESCRIPTION: Demonstrates using solara.use_state hook for local state management, though this approach is not recommended over use_reactive.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/05-fundamentals/50-state-management.md#2025-04-23_snippet_2\n\nLANGUAGE: solara\nCODE:\n```\nimport solara\n\n@solara.component\ndef ReusableComponent():\n    # color = solara.use_reactive(\"red\")  # instead of use_reactive (not recommended)\n    color, set_color = solara.use_state(\"red\")  # local state\n    solara.Select(label=\"Color\",values=[\"red\", \"green\", \"blue\", \"orange\"],\n                    value=color, on_value=set_color)\n    solara.Markdown(\"### Solara is awesome\", style={\"color\": color})\n\n@solara.component\ndef Page():\n    # this component is used twice, but each instance has its own state\n    ReusableComponent()\n    ReusableComponent()\n\n```\n\n----------------------------------------\n\nTITLE: Air-gapped Installation Process for Solara\nDESCRIPTION: Complete script for installing Solara in an air-gapped environment without internet access. Downloads necessary wheels, packages them, transfers to the isolated server, and installs locally.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/02-installing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Download the required wheels from pypi.\n$ pip wheel --wheel-dir solara-air-gapped \"solara[assets]\"\n# Zip them in a tarball.\n$ tar zcfv solara-air-gapped.tar.gz solara-air-gapped\n# Copy the tarball to your server.\n$ scp solara-air-gapped.tar.gz yourusername@youmachine:~/solara-air-gapped.tar.gz\n# ssh into your server.\n$ ssh yourusername@yourmachine\n...\n#  Unzip the tarball.\n$ tar zxfv solara-air-gapped.tar.gz\n# Install all wheels.\n$ pip install solara-air-gapped/*.whl\n```\n\n----------------------------------------\n\nTITLE: Optional OAuth Scope Configuration for Solara\nDESCRIPTION: Optional environment variable setting to define the OAuth scope for Solara applications.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/30-enterprise/10-oauth.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSOLARA_OAUTH_SCOPE = \"openid profile email\"\n```\n\n----------------------------------------\n\nTITLE: Installing Solara SSG Dependencies\nDESCRIPTION: Command for installing Solara Enterprise with SSG support and Playwright dependency\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/60-static-site-generation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip solara-enterprise[ssg]\n$ playwright install\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Command\nDESCRIPTION: Command to run the Solara component test using pytest.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/unit/test_docs_no_browser_simple.py\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Solara Dashboard\nDESCRIPTION: Commands to install the necessary Python packages (pandas, matplotlib, folium, solara) using pip in the shell or within a Jupyter notebook.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_jupyter_dashboard_1.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pandas matplotlib folium solara\n```\n\nLANGUAGE: python\nCODE:\n```\n%pip install pandas matplotlib folium solara\n```\n\n----------------------------------------\n\nTITLE: Running Solara Unit Tests (Bash)\nDESCRIPTION: Execute unit tests for quick development checks and test-driven development in Solara.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/10-setup.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ py.test tests/unit\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-ipywidgets Package\nDESCRIPTION: Command to install pytest-ipywidgets with all optional dependencies including notebook, jupyterlab and voila.\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/pytest-ipywidgets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"pytest-ipywidgets[all]\"\n```\n\n----------------------------------------\n\nTITLE: Browser Testing Installation Commands\nDESCRIPTION: Commands to install required packages for browser-based testing using pytest-ipywidgets and Playwright.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"pytest-ipywidgets[solara]\"  # or \"pytest-ipywidgets[all]\" if you also want to test with Jupyter Lab, Jupyter Notebook and Voila.\n$ playwright install chromium\n```\n\n----------------------------------------\n\nTITLE: Running a Solara ipywidgets App from Command Line\nDESCRIPTION: Command line instruction for running a Solara application with ipywidgets, specifying the script and the widget variable to render.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/30-ipywidgets.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run sol-ipywidgets.py:button\nSolara server is starting at http://localhost:8765\nI get run at startup, and for every page request\n...\n# your browser opens http://localhost:8765\nI get run at startup, and for every page request\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Solara Data Science App\nDESCRIPTION: Command to install the necessary Python packages (plotly and pandas) for the tutorial using pip.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_data_science.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install plotly pandas\n```\n\n----------------------------------------\n\nTITLE: Upgrading Solara for Hot Reloading Fix\nDESCRIPTION: Command to upgrade Solara to version 1.14.0 or higher to fix issues with hot reloading.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/80-reloading.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"solara>=1.14.0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks for Solara Development (Bash)\nDESCRIPTION: Install pre-commit hooks to run linters, formatters, and mypy before each commit. This ensures code quality standards are maintained.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/10-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Running Solara Server for Embedded Application\nDESCRIPTION: This bash command starts the Solara server, running a specific Solara application. It serves the Solara app on port 8765, which should match the iframe source in the HTML.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/40-embed.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run my-solara-app.py\nSolara server is starting at http://localhost:8765\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Solara Command Not Found\nDESCRIPTION: This snippet shows how to reinstall the solara-server package to fix issues with the 'solara' command not being recognized after upgrading from an older version.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/faq/content/99-faq.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install solara-server --force-reinstall\n```\n\n----------------------------------------\n\nTITLE: Configuring Solara Application Wait Timeout\nDESCRIPTION: Environment variable setting to modify the default 10-second timeout period for browser-server connection during testing. Useful for slower systems that need more time to establish connections.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nPYTEST_IPYWIDGETS_SOLARA_APP_WAIT_TIMEOUT=20\n```\n\n----------------------------------------\n\nTITLE: Installing Solara from GitHub Repository (Bleeding Edge)\nDESCRIPTION: Command to install an unreleased version of Solara directly from GitHub repository. This is useful when you need features that were recently merged but not yet released.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/02-installing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"solara @ git+https://github.com/widgetti/solara\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running a Solara Portal\nDESCRIPTION: Commands to install a Solara portal project in development mode and run it, which makes the app available on a local development server.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/10-multipage.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ (cd solara-test-portal; pip install -e .)\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run solara_test_portal.pages\nSolara server is starting at http://localhost:8765\n```\n\n----------------------------------------\n\nTITLE: Installing Solara for Development (Bash)\nDESCRIPTION: Clone the Solara repository and install development dependencies using pip. This sets up the development environment for Solara.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/10-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:widgetti/solara.git\n$ cd solara\n$ pip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: CSS for Smooth Scrolling in Section Links\nDESCRIPTION: This CSS snippet shows how to enable smooth scrolling behavior when using section links within a Solara application. It applies the smooth scrolling effect to the HTML element containing linked elements.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/40-routing.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nhtml {\n    scroll-behaviour: smooth;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Solara with pip\nDESCRIPTION: Basic pip installation command for the Solara framework\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/solara-meta/main.README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install solara\n```\n\n----------------------------------------\n\nTITLE: Loading and Preprocessing Crime Data with Pandas\nDESCRIPTION: Loads a CSV file containing San Francisco crime data, either from a local path or a URL, and converts certain columns to title case.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/_jupyter_dashboard_1.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom pathlib import Path\nimport solara\n\nROOT = Path(solara.__file__).parent / \"website\" / \"pages\" / \"docs\" / \"content\" / \"04-tutorial\"\npath = ROOT / Path(\"SF_crime_sample.csv.gz\")\nurl = \"https://github.com/widgetti/solara/raw/master/solara/website/pages/documentation/getting_started/content/04-tutorials/SF_crime_sample.csv.gz\"\n\nif path.exists():\n    df_crime = pd.read_csv(path)\nelse:\n    df_crime = pd.read_csv(url)\n\ndf_crime[\"Category\"] = df_crime[\"Category\"].str.title()\ndf_crime[\"PdDistrict\"] = df_crime[\"PdDistrict\"].str.title()\ndf_crime\n```\n\n----------------------------------------\n\nTITLE: Running Solara Server in Auto-Restart Mode (Bash)\nDESCRIPTION: Start the Solara server with auto-restart functionality for development purposes. This command will automatically restart the server when source code changes are detected.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/10-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run myscript.py -a\n```\n\n----------------------------------------\n\nTITLE: Context Manager Examples in Python\nDESCRIPTION: Shows two different ways to use context managers in Python, demonstrating both anonymous and named context manager usage.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/18-containers.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith some_anonymous_context_manager():\n    print(\"some code\")\n\nwith some_named_context_manager() as this_is_my_name:\n    print(\"some other code\")\n```\n\n----------------------------------------\n\nTITLE: Early Return Hook Error Example (SH101)\nDESCRIPTION: Demonstrates an early return error where a hook might not be called due to an early return statement, violating the rules of hooks.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/17-rules-of-hooks.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n     solara.Text(\"Done\")\n    if x < 10:\n        return  # will cause the below use_state to not always be called\n    solara.use_state(1)\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Solara Dev Environment\nDESCRIPTION: Commands for setting up a development environment for Solara, including installing dependencies, building the bundle, and linking it for local development use with the Solara CDN proxy.\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/solara-vuetify3-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install\n$ npm run build\n$ npm run devlink\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright for Solara Integration Tests (Bash)\nDESCRIPTION: Install Playwright, a browser automation tool, for running integration tests in Solara development.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/10-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ playwright install\n```\n\n----------------------------------------\n\nTITLE: Running a Solara App with Default Page Variable\nDESCRIPTION: Command line instruction for running a Solara application that automatically renders the 'page' variable without explicitly specifying it.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/04-tutorials/30-ipywidgets.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run sol-ipywidgets.py\n```\n\n----------------------------------------\n\nTITLE: Portal Project Directory Structure\nDESCRIPTION: The directory structure generated for a Solara portal project, showing organization of components, pages, content, and project configuration files.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/10-multipage.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n├── LICENSE\n├── Procfile # will make it run on heroku\n├── mypy.ini # adds strict type checking\n├── pyproject.toml  # make it installable with pip/hatch etc\n└── solara_test_portal  # Python package containing all code\n    ├── __init__.py\n    ├── components # contains general react components\n    │   ├── __init__.py\n    │   ├── header.py\n    │   └── layout.py\n    ├── content  # contains content (markdown articles in this case)\n    │   └── articles\n    │       ├── 7-reasons-why-i-love-vaex-for-data-science.md\n    │       └── a-hybrid-apache-arrow-numpy-dataframe-with-vaex-version-4.md\n    ├── data.py  # here is where we store shared data or application state\n    └── pages  # contains the pages\n        ├── __init__.py\n        ├── article\n        │   └── __init__.py\n        ├── tabular.py\n        └── viz\n            ├── __init__.py\n            └── overview.py\n```\n\n----------------------------------------\n\nTITLE: Conditional Hook Error Example (SH102)\nDESCRIPTION: Shows a conditional hook error where use_state is called inside an if statement, meaning it might not be called on every render.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/17-rules-of-hooks.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    if x < 10:\n        solara.use_state(1)  # will cause the use_state to not always be called\n    solara.Text(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Hook Example in Solara\nDESCRIPTION: This example demonstrates incorrect hook usage by conditionally calling use_state, which creates unpredictable state behavior when the value of x changes between renders.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/17-rules-of-hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    x, set_x = solara.use_state(1)  # state 'slot' 1\n    if x < 10:\n        y, set_y = solara.use_state(2)  # state 'slot' 2\n    else:\n        y, set_y = solara.use_state(\"foo\") # *also* state 'slot' 2\n    solara.Text(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Running Solara Integration Tests (Bash)\nDESCRIPTION: Execute integration tests using Playwright to test the Solara server with a real browser.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/10-setup.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ py.test tests/integration\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Solara Server Static Assets for Development\nDESCRIPTION: This snippet shows the commands to install dependencies, build the static asset bundle, and set up a development link for the Solara CDN proxy to use the local bundle.\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/solara-vuetify-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ npm run build\n$ npm run devlink\n```\n\n----------------------------------------\n\nTITLE: Nested Function Hook Error Example (SH104)\nDESCRIPTION: Shows a nested function hook error where use_state is called inside a nested function, making it difficult to analyze whether the hook will always be called.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/17-rules-of-hooks.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    def inner():\n        solara.use_state(1)  # will use_state always be called? Difficult to analyze, so don't do it\n    inner()\n    solara.Text(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Running the Solara documentation website locally\nDESCRIPTION: Command to run the Solara documentation website locally during development. This allows contributors to preview documentation changes before submission.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/01-contribute.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run solara.website.pages\n```\n\n----------------------------------------\n\nTITLE: Defining use_thread Function in Python\nDESCRIPTION: Function signature for use_thread, which takes a callback function, intrusive_cancel flag, and dependencies. It returns a Result[T] object.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/api/hooks/use_thread.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef use_thread(\n    callback=Union[\n        Callable[[threading.Event], T],\n        Iterator[Callable[[threading.Event], T]],\n        Callable[[], T],\n        Iterator[Callable[[], T]],\n    ],\n    intrusive_cancel=True,\n    dependencies=[],\n) -> Result[T]:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Testing Solara-Vuetify-App Release Process\nDESCRIPTION: Shell commands for bumping version, building assets, and manually handling CDN files for a new solara-vuetify-app release. Process includes version bumping, archive extraction, and rebuilding assets.\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/solara-assets/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd packages/solara-vuetify-app\n$ bump2version --verbose major\n$ cd ../assets\n$ batch build\n# will fail downloading from cdn, so we fill the directory manually\n$ tar zxfv ../solara-vuetify-app/widgetti-solara-vuetify-app-2.0.0.tgz  --strip-components=1 --directory cdn/@widgetti/solara-vuetify-app@2.0.0/\n# build again\n$ batch build\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment Hook Error Example (SH105)\nDESCRIPTION: Demonstrates a variable assignment hook error where use_state is assigned to a variable and then called, making it difficult to analyze whether the hook will always be called.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/17-rules-of-hooks.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    x = solara.use_state\n    x(1)  # will use_state always be called? Difficult to analyze, so don't do it\n    solara.Text(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remotes for Solara Contribution (Bash)\nDESCRIPTION: Set up Git remotes for contributing to Solara, renaming the original repository as upstream and adding your fork as the origin.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/10-setup.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# rename origin to upstream\n$ git remote rename origin upstream\n# add your fork as origin\n$ git remote add origin https://github.com/yourusername/solara.git\n```\n\n----------------------------------------\n\nTITLE: Checking Python Executable Path in Jupyter\nDESCRIPTION: This snippet demonstrates how to identify which Python executable is being used by your Jupyter kernel. This is useful for diagnosing environment mismatches between the Jupyter server and kernel.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/90-troubleshoot.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import sys\n>>> sys.executable\n'/home/ec2-user/anaconda3/envs/python3/bin/python'\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies for Solara Project\nDESCRIPTION: Specifies the package dependencies and structure for the Solara project, including the main package and its subpackages (server, enterprise, and meta).\nSOURCE: https://github.com/widgetti/solara/blob/master/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.[all]\n./packages/solara-server[all]\n./packages/solara-enterprise[all]\n./packages/solara-meta[all]\n```\n\n----------------------------------------\n\nTITLE: Hook in Loop Validation Warning Example\nDESCRIPTION: Shows what happens when you call hooks inside a loop in a Solara component. This will trigger a validation warning since hooks cannot be called from inside loops.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/20-understanding/17-rules-of-hooks.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    for i in range(10):\n        solara.use_state(1)\n    solara.Text(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Installing Solara Enterprise Package\nDESCRIPTION: This command installs the solara-enterprise package which is required to use the Search feature in Solara applications.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/15-reference/70-search.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install solara-enterprise\n```\n\n----------------------------------------\n\nTITLE: Initializing IPyWidgets Button\nDESCRIPTION: Creates a basic interactive button widget using the IPyWidgets library. The button is initialized with a description text that will be displayed on the button face.\nSOURCE: https://github.com/widgetti/solara/blob/master/tests/unit/solara_test_apps/notebookapp_widget.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets\n\napp = ipywidgets.Button(description=\"Click me\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries in Jupyter Server Environment\nDESCRIPTION: This command installs the ipyvue and ipyvuetify libraries in the Python environment used by the Jupyter server. This resolves the common issue where these libraries are installed in the kernel environment but not in the server environment.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/90-troubleshoot.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n!/home/ec2-user/anaconda3/envs/JupyterSystemEnv/bin/python3.7 -m pip install ipyvue ipyvuetify\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for widgetti/solara\nDESCRIPTION: This configuration specifies the installation of the main project and its subpackages with all their dependencies. It includes the core project, solara-server, solara-enterprise, pytest-ipywidgets, and solara-meta packages.\nSOURCE: https://github.com/widgetti/solara/blob/master/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .[all]\n-e ./packages/solara-server[all]\n-e ./packages/solara-enterprise[all]\n-e ./packages/pytest-ipywidgets[all]\n-e ./packages/solara-meta[all]\n```\n\n----------------------------------------\n\nTITLE: Disabling Vuetify Warmup in Solara Tests\nDESCRIPTION: Command line and environment variable options to disable the default Vuetify warmup phase during testing. This is useful when testing pure ipywidgets or third-party libraries that don't require Vuetify assets.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/30-testing.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n--no-solara-vuetify-warmup\n```\n\nLANGUAGE: bash\nCODE:\n```\nSOLARA_TEST_VUETIFY_WARMUP=0\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Solara Page Component with Button\nDESCRIPTION: This code defines a Solara page component that renders a simple button with the text 'Click me'. It uses the @solara.component decorator to create a reusable UI component that can be included in a Solara application.\nSOURCE: https://github.com/widgetti/solara/blob/master/tests/unit/solara_test_apps/notebookapp_component.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n\n@solara.component\ndef Page():\n    return solara.Button(\"Click me\")\n```\n\n----------------------------------------\n\nTITLE: Enabling State Mutation Detection in Solara 1.41.0+\nDESCRIPTION: Sets an environment variable to enable state mutation detection, which will be the default behavior in Solara 2.0.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/roadmap/roadmap.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSOLARA_STORAGE_MUTATION_DETECTION=1\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version for widgetti/solara Project\nDESCRIPTION: This snippet defines the exact Python version (3.9.13) required for the widgetti/solara project. It ensures compatibility and consistency across development environments.\nSOURCE: https://github.com/widgetti/solara/blob/master/runtime.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-3.9.13\n```\n\n----------------------------------------\n\nTITLE: Installing Qt Dependencies for Solara App\nDESCRIPTION: This command installs the necessary Qt dependencies (qtpy and PySide6) for running Solara as a standalone application.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/00-quickstart.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install qtpy PySide6\n```\n\n----------------------------------------\n\nTITLE: Initializing Solara Button Component in Python\nDESCRIPTION: This code creates a basic Solara button component with the label 'Click me'. It imports the Solara library and uses the Button class to instantiate a new button object.\nSOURCE: https://github.com/widgetti/solara/blob/master/tests/unit/solara_test_apps/notebookapp_element.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\napp = solara.Button(\"Click me\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Reactive Variables in Boolean Comparisons for Solara 1.42.0+\nDESCRIPTION: Sets an environment variable to disable the use of reactive variables in boolean comparisons, which will raise an error in Solara 2.0.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/roadmap/roadmap.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSOLARA_ALLOW_REACTIVE_BOOLEAN=0\n```\n\n----------------------------------------\n\nTITLE: Running Solara as Standalone Qt Application\nDESCRIPTION: This command demonstrates how to run a Solara script as a standalone Qt application, providing a desktop-like experience for the Solara app.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/00-quickstart.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ solara run sol.py --qt\n```\n\n----------------------------------------\n\nTITLE: Fixing inotify Watch Limit Issue\nDESCRIPTION: This snippet provides a solution for the 'inotify watch limit reached' error by modifying the system configuration file and applying the changes.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/faq/content/99-faq.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfs.inotify.max_user_watches=524288\n```\n\n----------------------------------------\n\nTITLE: Setting Default Container to Fragment in Solara 1.42.0+\nDESCRIPTION: Sets an environment variable to use reacton.Fragment as the default container for unwrapped sibling elements, which will be the default behavior in Solara 2.0.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/roadmap/roadmap.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nSOLARA_DEFAULT_CONTAINER=\"Fragment\"\n```\n\n----------------------------------------\n\nTITLE: Building and Versioning Solara Enterprise Package\nDESCRIPTION: These commands demonstrate how to manually create a new major release of the Solara Enterprise package. It uses bump2version to increment the version number and hatch to build the package.\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/solara-enterprise/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd packages/solara-enterprise\n$ bump2version --verbose major\n$ hatch build\n```\n\n----------------------------------------\n\nTITLE: Creating a Pull Request for Solara (Bash)\nDESCRIPTION: Steps to create a new branch, make changes, commit them, and push to create a pull request for Solara contribution.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/40-development/10-setup.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# create a branch\n$ git checkout -b fix_some_thing\n# add whatever changes you want to make\n$ git add -p\n# commit your changes\n$ git commit -m \"fix: some thing\"\n# push your changes\n$ git push\n# click the link that is printed to open a PR\n```\n\n----------------------------------------\n\nTITLE: Adding Solara to Requirements.txt (Bleeding Edge)\nDESCRIPTION: Line to add to requirements.txt file to install Solara directly from GitHub master branch. This allows dependency management tools to install the latest development version.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/02-installing.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsolara @ https://github.com/widgetti/solara/package/archive/master.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Starting Python HTTP Server for Hosting Embed Page\nDESCRIPTION: This bash command starts a standard Python HTTP server to host the HTML page containing the iframe. It serves the content on port 8000.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/advanced/content/10-howto/40-embed.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m http.server\nServing HTTP on :: port 8000 (http://[::]:8000/) ...\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.45.0\nDESCRIPTION: Documents changes in version 1.45.0 including bug fixes, documentation updates, and breaking changes\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/changelog/changelog.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Version 1.45.0\n\n   * Bug Fix: Correctly handle expected websocket errors instead of logging them. [#1013]\n   * Bug Fix: Ensure component re-renders correctly when a reactive variable is updated from another thread during rendering. [#1030]\n   * Bug Fix: Allow calling async tasks from within threaded tasks. [#1029]\n   * Bug Fix: Replace deprecated `use_side_effect` calls with `use_effect`. [#1026]\n   * Bug Fix(pytest-ipywidgets): Support `pytest-playwright` version 0.7.0. [#1006]\n   * Docs: Ensure Twitter/OpenGraph meta tags are present on documentation pages. [#998]\n   * Breaking change: Drop support for Python 3.6 due to CI runner deprecation. [#1032]\n```\n\n----------------------------------------\n\nTITLE: Basic Solara Component Example\nDESCRIPTION: Demonstrates creating a basic Solara application with reactive variables, a slider input, text input, and conditional messaging based on word count. Shows core concepts of component creation and reactive state management.\nSOURCE: https://github.com/widgetti/solara/blob/master/packages/solara-meta/main.README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport solara\n\n# Declare reactive variables at the top level. Components using these variables\n# will be re-executed when their values change.\nsentence = solara.reactive(\"Solara makes our team more productive.\")\nword_limit = solara.reactive(10)\n\n\n@solara.component\ndef Page():\n    # Calculate word_count within the component to ensure re-execution when reactive variables change.\n    word_count = len(sentence.value.split())\n\n    solara.SliderInt(\"Word limit\", value=word_limit, min=2, max=20)\n    solara.InputText(label=\"Your sentence\", value=sentence, continuous_update=True)\n\n    # Display messages based on the current word count and word limit.\n    if word_count >= int(word_limit.value):\n        solara.Error(f\"With {word_count} words, you passed the word limit of {word_limit.value}.\")\n    elif word_count >= int(0.8 * word_limit.value):\n        solara.Warning(f\"With {word_count} words, you are close to the word limit of {word_limit.value}.\")\n    else:\n        solara.Success(\"Great short writing!\")\n\n\n# The following line is required only when running the code in a Jupyter notebook:\nPage()\n```\n\n----------------------------------------\n\nTITLE: Navigation Links in Markdown\nDESCRIPTION: List of navigation links to different ipywidget demos, including record views, likes, volume control, and color selection implementations.\nSOURCE: https://github.com/widgetti/solara/blob/master/tests/unit/solara_test_apps/multipage-widgets/00-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Multi page app using regular ipywidget\n\n * [Record views (widget based)](/views)\n * [Record likes (widget based)](/likes)\n * [Volume (uses component)](/volume)\n * [Color (uses widget in notebook)](/color)\n```\n\n----------------------------------------\n\nTITLE: Mailchimp Signup Form Initialization\nDESCRIPTION: JavaScript initialization code for Mailchimp signup form validation and field configuration.\nSOURCE: https://github.com/widgetti/solara/blob/master/solara/website/pages/documentation/getting_started/content/07-deploying/20-cloud-hosted.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='ADDRESS';ftypes[3]='address';fnames[4]='PHONE';ftypes[4]='phone';fnames[5]='BIRTHDAY';ftypes[5]='birthday';fnames[6]='USECASE';ftypes[6]='text';fnames[7]='COMPANY';ftypes[7]='text';fnames[8]='POSITION';ftypes[8]='text';}(jQuery));var $mcj = jQuery.noConflict(true);\n```\n\n----------------------------------------\n\nTITLE: Assigning String in Python\nDESCRIPTION: A simple Python code snippet demonstrating string assignment.\nSOURCE: https://github.com/widgetti/solara/blob/master/tests/unit/solara_test_apps/multipage/03-some-markdown.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nthis = \"renders to highlighted Python code\n```"
  }
]