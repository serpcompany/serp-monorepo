[
  {
    "owner": "tbxark",
    "repo": "chatgpt-telegram-workers",
    "content": "TITLE: Command Line Deployment Steps\nDESCRIPTION: Terminal commands for deploying the ChatGPT Telegram bot using the command line interface. Includes steps for configuration file setup and deployment using pnpm package manager.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/DEPLOY.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmv wrangler-example.toml wrangler.toml\npnpm install\npnpm run deploy:dist\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Commands in TOML\nDESCRIPTION: TOML configuration for setting up custom shortcut commands that simplify longer commands into single-word commands. Includes configurations for switching between different AI providers and models.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/CONFIG.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nCUSTOM_COMMAND_azure= '/setenvs {\"AI_PROVIDER\": \"azure\"}'\nCUSTOM_COMMAND_workers = '/setenvs {\"AI_PROVIDER\": \"workers\"}'\nCUSTOM_COMMAND_gpt3 = '/setenvs {\"AI_PROVIDER\": \"openai\", \"OPENAI_CHAT_MODEL\": \"gpt-3.5-turbo\"}'\nCUSTOM_COMMAND_gpt4 = '/setenvs {\"AI_PROVIDER\": \"openai\", \"OPENAI_CHAT_MODEL\": \"gpt-4\"}'\nCUSTOM_COMMAND_cn2en = '/setenvs {\"SYSTEM_INIT_MESSAGE\": \"You are a translator. Please translate everything I say below into English.\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Server and Database Settings in JSON (ChatGPT Telegram Workers)\nDESCRIPTION: This JSON configuration snippet sets up the database type, server settings, proxy, and operational mode for the ChatGPT Telegram Workers project. It includes options for database storage, server hostname and port, base URL, proxy settings, and the choice between webhook and polling modes.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/LOCAL.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"database\": {\n    \"type\": \"local\",// memory, local, sqlite, redis\n    \"path\": \"/app/data.json\" // your database path\n  },\n  \"server\": { //  server configuration for webhook mode\n    \"hostname\": \"0.0.0.0\",\n    \"port\": 3000, // must 8787 when using docker\n    \"baseURL\": \"https://example.com\"\n  },\n  'proxy': 'http://127.0.0.1:7890', // proxy for telegram api\n  \"mode\": \"webhook\", // webhook, polling\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin System Types in TypeScript\nDESCRIPTION: TypeScript interface and type definitions for the plugin system, including template input types, body types, response types, and output types for request handling.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/PLUGINS.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type TemplateInputType = 'json' | 'space-separated' | 'comma-separated' | 'text';\n\nexport type TemplateBodyType = 'json' | 'form' | 'text';\n\nexport type TemplateResponseType = 'json' | 'text';\n\nexport type TemplateOutputType = 'text' | 'image' | 'html' | 'markdown';\n\nexport interface RequestTemplate {\n    url: string;\n    method: string;\n    headers: { [key: string]: string };\n    input: {\n        type: TemplateInputType;\n        required: boolean;\n    };\n    query: { [key: string]: string };\n    body: {\n        type: TemplateBodyType;\n        content: { [key: string]: string } | string;\n    };\n    response: {\n        content: {\n            input_type: TemplateResponseType;\n            output_type: TemplateOutputType;\n            output: string;\n        };\n        error: {\n            input_type: TemplateResponseType;\n            output_type: TemplateOutputType;\n            output: string;\n        };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Running ChatGPT Telegram Workers Docker Container\nDESCRIPTION: This Docker command runs the ChatGPT Telegram Workers container, mapping the necessary ports and mounting configuration files. It demonstrates how to use volume mounts to provide the required JSON and TOML configuration files to the container.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/LOCAL.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8787:8787 -v $(pwd)/config.json:/app/config.json:ro -v $(pwd)/wrangler.toml:/app/config.toml:ro chatgpt-telegram-workers:latest\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment Commands for ChatGPT Telegram Workers on Vercel\nDESCRIPTION: Commands for manually deploying the ChatGPT Telegram Workers project to Vercel. The process requires installing dependencies and running the deploy script, followed by configuring environment variables in the Vercel console.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/VERCEL.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm deploy:vercel\n```\n\n----------------------------------------\n\nTITLE: Running ChatGPT Telegram Workers Locally with npm\nDESCRIPTION: These shell commands demonstrate how to install dependencies and start the ChatGPT Telegram Workers project locally using npm. Two methods are provided: a simple start command and a more detailed build and start process with configuration file paths specified.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/LOCAL.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run start:local\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run build:local\nCONFIG_PATH=./config.json TOML_PATH=./wrangler.toml pnpm run start:dist\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for Deployment with Node.js Compatibility\nDESCRIPTION: Instructions for modifying the wrangler.toml configuration file to deploy the Next version of ChatGPT Telegram Workers. This requires changing the main entry point and adding Node.js compatibility flags.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/packages/apps/workers-next/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nmain = \"./src/entry/next/gen-vercel-env.ts\"\ncompatibility_flags = [ \"nodejs_compat_v2\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Descriptions in TOML\nDESCRIPTION: TOML configuration for adding help information and descriptions for custom commands that can be viewed using the /help command.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/CONFIG.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nCOMMAND_DESCRIPTION_azure = 'Switch AI provider to Azure.'\nCOMMAND_DESCRIPTION_workers = 'Switch AI provider to Workers'\nCOMMAND_DESCRIPTION_gpt3 = 'Switch AI provider to OpenAI GPT-3.5 Turbo.'\nCOMMAND_DESCRIPTION_gpt4 = 'Switch AI provider to OpenAI GPT-4.'\nCOMMAND_DESCRIPTION_cn2en = 'Translate the conversation content into English.'\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for ChatGPT Telegram Workers\nDESCRIPTION: These commands show how to build a Docker image for the ChatGPT Telegram Workers project. Two methods are provided: using a standard Docker build command and using a custom npm script that utilizes locally built results for faster image creation.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/LOCAL.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t chatgpt-telegram-workers:latest .\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build:docker # Faster (directly use the locally built results to create the image)\n```\n\n----------------------------------------\n\nTITLE: Deploying ChatGPT Telegram Workers with Docker Compose\nDESCRIPTION: This command uses Docker Compose to deploy the ChatGPT Telegram Workers project. It requires manual modification of the configuration file paths in the docker-compose.yml file before running.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/LOCAL.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up # edit the docker-compose.yml to change the config file path\n```\n\n----------------------------------------\n\nTITLE: Using Docker Hub Image for ChatGPT Telegram Workers\nDESCRIPTION: These commands demonstrate how to pull and run the ChatGPT Telegram Workers image from Docker Hub. It includes pulling the latest image and running a container with the necessary port mappings and configuration file mounts.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/LOCAL.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull ghcr.io/tbxark/chatgpt-telegram-workers:latest\ndocker run -d -p 8787:8787 -v $(pwd)/config.json:/app/config.json:ro -v $(pwd)/wrangler.toml:/app/config.toml:ro ghcr.io/tbxark/chatgpt-telegram-workers:latest\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in TOML\nDESCRIPTION: Example of plugin configuration using environment variables in TOML format, showing command binding and description setup.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/PLUGINS.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nPLUGIN_COMMAND_dns = \"https://raw.githubusercontent.com/TBXark/ChatGPT-Telegram-Workers/dev/plugins/dns.json\"\nPLUGIN_DESCRIPTION_dns = \"DNS query /dns <type> <domain>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for Automatic Repository Synchronization with YAML\nDESCRIPTION: This YAML configuration sets up a GitHub Action that automatically syncs your forked repository with the original ChatGPT-Telegram-Workers repository on a daily schedule. It uses the github-sync action to pull changes from the source repository to keep your fork updated.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/ACTION.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Sync\non:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n    sync:\n        runs-on: ubuntu-latest\n        steps:\n        - name: Sync\n            uses: repo-sync/github-sync@v2\n            with:\n            source_repo: 'https://github.com/TBXark/ChatGPT-Telegram-Workers'\n            target_repo: 'Fill in your repository address'\n            github_token: ${{ secrets.GITHUB_TOKEN }} \n            source_branch: 'master'\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin System Types and Interface in TypeScript\nDESCRIPTION: TypeScript definitions for the plugin system including template types for input, body, response, and output data. The RequestTemplate interface provides the structure for defining plugin HTTP requests with support for interpolation.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/cn/PLUGINS.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * TemplateInputType: 输入数据的类型,将Telegram输入的数据转换为对应的数据类型\n * json: JSON格式\n * space-separated: 以空格分隔的字符串\n * comma-separated: 以逗号分隔的字符串\n * text: 文本,不分割(默认值)\n */\nexport type TemplateInputType = 'json' | 'space-separated' | 'comma-separated' | 'text';\n\n/**\n * TemplateBodyType: 请求体的类型\n * json: JSON格式, 此时对于content字段的值应该为一个对象,其中的key为固定值,Value支持插值\n * form: 表单格式, 此时对于content字段的值应该为一个对象,其中的key为固定值,Value支持插值\n * text: 文本格式, 此时对于content字段的值应该为一个字符串,支持插值\n */\nexport type TemplateBodyType = 'json' | 'form' | 'text';\n\n/**\n * TemplateResponseType: 响应体的类型\n * json: JSON格式, 此时会将响应体解析为JSON格式交给下一个模板渲染\n * text: 文本格式, 此时会将响应体解析为文本格式交给下一个模板渲染\n * blob: 二进制格式, 此时会将响应体直接返回\n */\nexport type TemplateResponseType = 'json' | 'text' | 'blob';\n\n/**\n * TemplateOutputType: 输出数据的类型\n * text: 文本格式, 将渲染结果作为纯文本发送到telegram\n * image: 图片格式, 将渲染结果作为图片url发送到telegram\n * html: HTML格式, 将渲染结果作为HTML格式发送到telegram\n * markdown: Markdown格式, 将渲染结果作为Markdown格式发送到telegram\n */\nexport type TemplateOutputType = 'text' | 'image' | 'html' | 'markdown';\n\nexport interface RequestTemplate {\n    url: string; // 必选, 支持插值\n    method: string; // 必选, 固定值\n    headers: { [key: string]: string }; // 可选, Key为固定值，Value支持插值\n    input: {\n        type: TemplateInputType;\n        required: boolean; // 必选, 是否必须输入\n    };\n    query: { [key: string]: string }; // 可选, Key为固定值，Value支持插值\n    body: {\n        type: TemplateBodyType;\n        content: { [key: string]: string } | string; // content为对象时Key为固定值，Value支持插值。content为字符串时支持插值\n    };\n    response: {\n        content: { // 必选, 当请求成功时的处理\n            input_type: TemplateResponseType;\n            output_type: TemplateOutputType;\n            output: string;\n        };\n        error: { // 必选, 当请求失败时的处理\n            input_type: TemplateResponseType;\n            output_type: TemplateOutputType;\n            output: string;\n        };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Commands in TOML Format\nDESCRIPTION: Example of environment variable configuration in TOML format for a DNS lookup plugin. Shows how to define the plugin command, description, and optional scope for Telegram menu integration.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/cn/PLUGINS.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nPLUGIN_COMMAND_dns = \"https://raw.githubusercontent.com/TBXark/ChatGPT-Telegram-Workers/dev/plugins/dns.json\"\nPLUGIN_DESCRIPTION_dns = \"DNS查询 /dns <类型> <域名>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Locked User Configuration Keys in Markdown\nDESCRIPTION: Defines the default value for LOCK_USER_CONFIG_KEYS, which is a string array containing the base URLs of various AI APIs. This configuration prevents users from replacing API base URLs to avoid token leakage.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/CONFIG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nOPENAI_API_BASE,GOOGLE_COMPLETIONS_API,MISTRAL_API_BASE,COHERE_API_BASE,ANTHROPIC_API_BASE,AZURE_COMPLETIONS_API,AZURE_DALLE_API\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Locked User Configuration Keys in Markdown\nDESCRIPTION: This snippet demonstrates the default value for LOCK_USER_CONFIG_KEYS, which is a string array containing API base URLs that are locked to prevent token leakage.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/cn/CONFIG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nOPENAI_API_BASE,GOOGLE_COMPLETIONS_API,MISTRAL_API_BASE,COHERE_API_BASE,ANTHROPIC_API_BASE,AZURE_COMPLETIONS_API,AZURE_DALLE_API\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for Repository Sync in YAML\nDESCRIPTION: This YAML configuration sets up a GitHub Action to automatically sync a forked repository with the original ChatGPT-Telegram-Workers repository on a daily schedule. It uses the github-sync action to perform the synchronization.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/cn/ACTION.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Sync\non:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Sync\n      uses: repo-sync/github-sync@v2\n      with:\n        source_repo: 'https://github.com/TBXark/ChatGPT-Telegram-Workers'\n        target_repo: 'https://github.com/YOUR_NAME/ChatGPT-Telegram-Workers'\n        github_token: ${{ secrets.GITHUB_TOKEN }} \n        source_branch: 'master'\n```\n\n----------------------------------------\n\nTITLE: Interpolation Template Example in HTML\nDESCRIPTION: HTML template example demonstrating interpolation syntax with conditionals and loops for dynamic content rendering.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/PLUGINS.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n  <b>{{title}}</b>\n  <b>\n  {{#each item in items}}\n    {{#each:item i in item}}\n      {{i.value}}\n      {{#if i.enable}}\n        {{#if:sub i.subEnable}}\n          sub enable\n        {{#else:sub}}\n          sub disable\n        {{/if:sub}}\n      {{#else}}\n        disable\n      {{/if}}\n    {{/each:item}}\n  {{/each}}\n  </b>\n```\n\n----------------------------------------\n\nTITLE: Plugin Data Structure in JSON\nDESCRIPTION: Default JSON data structure for plugin interpolation, showing the basic structure with DATA and ENV objects.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/PLUGINS.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DATA\": [],\n  \"ENV\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Environment Variables in TOML\nDESCRIPTION: Example of setting plugin-specific environment variables using TOML configuration.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/PLUGINS.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nPLUGIN_ENV_access_token = \"xxxx\"\n```\n\n----------------------------------------\n\nTITLE: Interpolation Template Example in HTML\nDESCRIPTION: An HTML template example demonstrating the interpolation syntax used in the plugin system. Shows variable substitution, array iteration with #each, conditional logic with #if/#else, and nested operations with namespaces.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/cn/PLUGINS.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n  <b>{{title}}</b>\n  <b>\n  {{#each item in items}}\n    {{#each:item i in item}}\n      {{i.value}}\n      {{#if i.enable}}\n        {{#if:sub i.subEnable}}\n          sub enable\n        {{#else:sub}}\n          sub disable\n        {{/if:sub}}\n      {{#else}}\n        disable\n      {{/if}}\n    {{/each:item}}\n  {{/each}}\n  </b>\n```\n\n----------------------------------------\n\nTITLE: Plugin Environment Variables JSON Structure\nDESCRIPTION: The default JSON data structure passed to interpolation templates, showing the DATA array for user input and ENV object for environment variables. Plugin environment variables are isolated from global ones.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/cn/PLUGINS.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DATA\": [],\n  \"ENV\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Environment Variables Example with Token\nDESCRIPTION: TOML example showing how to define a plugin-specific environment variable (access_token) and its corresponding JSON structure after parsing. Variables must be prefixed with PLUGIN_ENV_ to be included in the plugin environment.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/cn/PLUGINS.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nPLUGIN_ENV_access_token = \"xxxx\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"DATA\": [],\n    \"ENV\": {\n      \"access_token\": \"xxxx\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Config Generation Function in JavaScript\nDESCRIPTION: JavaScript utility function that stringifies objects for environment variable configuration, with special handling for nested JSON structures.\nSOURCE: https://github.com/tbxark/chatgpt-telegram-workers/blob/master/doc/en/CONFIG.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction stringify(obj) {\n\tconst res = {}\n\tfor(const key of Object.keys(obj)) {\n\t\tres[key] = JSON.stringify(obj[key])\n\t}\n\treturn JSON.stringify(res)\n}\n\nconsole.log(`/setenvs ${stringify(\n\t{\n\t\t\"AI_PROVIDER\": \"openai\",\n\t\t\"OPENAI_CHAT_MODELS_LIST\": [\"gpt4\", \"gpt3\", \"gpt2\", \"gpt1\"]\n\t}\n)}\")\n```"
  }
]