[
  {
    "owner": "instaloader",
    "repo": "instaloader",
    "content": "TITLE: Initializing and Authenticating Instaloader in Python\nDESCRIPTION: This snippet demonstrates how to create an Instaloader instance and authenticate with Instagram using different methods including direct login, interactive terminal login, or loading a saved session.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/as-module.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport instaloader\n\n# Get instance\nL = instaloader.Instaloader()\n\n# Optionally, login or load session\nL.login(USER, PASSWORD)        # (login)\nL.interactive_login(USER)      # (ask password on terminal)\nL.load_session_from_file(USER) # (load session created w/\n                               #  `instaloader -l USERNAME`)\n```\n\n----------------------------------------\n\nTITLE: Identifying Inactive Followers (Ghost Followers) using Instaloader in Python\nDESCRIPTION: This script uses Instaloader to identify inactive followers (ghost followers) by comparing a user's followers list with those who have liked their posts. It requires logging in to access private data.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/codesnippets.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport instaloader\n\n# Get instance\nL = instaloader.Instaloader()\n\n# Login or load session\nusername = \"<profile name>\"\nL.load_session_from_file(username)\n\n# Obtain profile metadata\nprofile = instaloader.Profile.from_username(L.context, username)\n\n# Print list of followees\nfollowers = set(profile.get_followers())\n\n# Obtain set of users who liked one of the last 12 posts\nlikes = set()\nfor post in profile.get_posts():\n    likes = likes | set(post.get_likes())\n    if len(likes) > 50:\n        break\n\n# Print list of followers which are not likers\nprint(\"Followers who don't like your posts:\")\nfor follower in (followers - likes):\n    print(follower.username)\n```\n\n----------------------------------------\n\nTITLE: Downloading Instagram Posts in a Specific Time Period using Python and Instaloader\nDESCRIPTION: This snippet demonstrates how to download Instagram posts within a specific date range using Instaloader. It utilizes itertools.dropwhile and takewhile to filter posts based on their timestamp.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/codesnippets.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport instaloader\nfrom datetime import datetime\nfrom itertools import dropwhile, takewhile\n\nL = instaloader.Instaloader()\n\nposts = instaloader.Profile.from_username(L.context, \"instagram\").get_posts()\n\nSTART_DATE = datetime(2015, 5, 1)\nEND_DATE = datetime(2015, 6, 1)\n\nfor post in takewhile(lambda p: p.date > START_DATE, dropwhile(lambda p: p.date > END_DATE, posts)):\n    print(post.date)\n    L.download_post(post, \"instagram\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Instaloader Usage Command\nDESCRIPTION: Comprehensive command showing various options for downloading different types of Instagram content including comments, geotags, stories, highlights, and more. Demonstrates the full range of download capabilities.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader [--comments] [--geotags]\n            [--stories] [--highlights] [--tagged] [--reels] [--igtv]\n            [--login YOUR-USERNAME] [--fast-update]\n            profile | \"#hashtag\" | %location_id |\n            :stories | :feed | :saved\n```\n\n----------------------------------------\n\nTITLE: Tracking Deleted Instagram Posts with Instaloader in Python\nDESCRIPTION: This script compares the list of currently online Instagram posts with previously downloaded posts to identify newly added and deleted posts. It uses Instaloader to fetch current posts and compares them with locally stored post information.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/codesnippets.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport instaloader\nimport os\nfrom glob import glob\n\nPROFILE = \"<profile>\"\n\nL = instaloader.Instaloader()\n\n# Download all posts if not found online\nif not os.path.isdir(PROFILE):\n    print(\"Downloading all posts to local folder ...\")\n    L.download_profile(PROFILE)\n\n# Load all posts from local folder and store their IDs in a set\nlocal_posts = set()\nfor filename in glob(PROFILE + \"/*.json.xz\"):\n    post = instaloader.load_structure_from_file(L.context, filename)\n    local_posts.add(post.shortcode)\n\n# Load all posts from online and store their IDs in a set\nonline_posts = set()\nprofile = instaloader.Profile.from_username(L.context, PROFILE)\nfor post in profile.get_posts():\n    online_posts.add(post.shortcode)\n\n# Compare online to local posts and print the difference\nnon_archived = online_posts - local_posts\ndeleted = local_posts - online_posts\n\nprint(\"Posts online but not offline:\")\nfor shortcode in non_archived:\n    print(\"instagram.com/p/{}\".format(shortcode))\n\nprint(\"Posts offline but not online:\")\nfor shortcode in deleted:\n    print(\"instagram.com/p/{}\".format(shortcode))\n```\n\n----------------------------------------\n\nTITLE: Downloading Top X Most-Liked Posts of a User with Instaloader in Python\nDESCRIPTION: This script downloads the X most-liked posts of a specified Instagram user. It fetches all posts, sorts them by the number of likes, and then downloads the top X posts.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/codesnippets.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport instaloader\n\nL = instaloader.Instaloader()\n\n# Login or load session\nL.load_session_from_file(\"USER\")\n\nprofile = instaloader.Profile.from_username(L.context, \"USER\")\n\nposts = profile.get_posts()\n\n# download the 10 most-liked posts\nfor post in sorted(posts, key=lambda p: p.likes, reverse=True)[:10]:\n    L.download_post(post, \"USER_likes\")\n```\n\n----------------------------------------\n\nTITLE: Downloading Hashtag Posts with Instaloader in Python\nDESCRIPTION: This snippet shows how to iterate through posts associated with a specific hashtag and download them to a target directory. It demonstrates using the Hashtag class to retrieve posts.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/as-module.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor post in instaloader.Hashtag.from_name(L.context, 'cat').get_posts():\n    # post is an instance of instaloader.Post\n    L.download_post(post, target='#cat')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Hashtag Data with Instaloader in Python\nDESCRIPTION: This code snippet shows how to retrieve historical hashtag data using Instaloader, accounting for posts that may not be in exact chronological order. It uses a sliding window approach to handle up to k older posts inserted into an otherwise chronological feed.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/codesnippets.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport instaloader\nfrom datetime import datetime\n\nL = instaloader.Instaloader()\n\nHASHTAG = \"<your-hashtag>\"\nSINCE = datetime(2020, 3, 1)\nUNTIL = datetime(2020, 9, 1)\n\nk = 500\ncount = 0\nwindow = []\n\nfor post in L.get_hashtag_posts(HASHTAG):\n    window.append(post)\n    \n    while len(window) > k:\n        oldest = min(window, key=lambda p: p.date)\n        if oldest.date > UNTIL:\n            window.remove(oldest)\n            continue\n        elif oldest.date < SINCE:\n            break\n        else:\n            L.download_post(oldest, target=\"#\" + HASHTAG)\n            count += 1\n            window.remove(oldest)\n    \n    if len(window) <= k and min(window, key=lambda p: p.date).date < SINCE:\n        break\n\nprint(\"Number of posts:\", count)\n```\n\n----------------------------------------\n\nTITLE: Downloading Instagram Profile Content with Instaloader\nDESCRIPTION: Basic command to download all pictures, videos, and profile picture from one or more Instagram profiles.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader profile [profile ...]\n```\n\n----------------------------------------\n\nTITLE: Creating Instaloader Session File (Command-line)\nDESCRIPTION: This command demonstrates how to create a session file for Instaloader, which is useful for running it as a cronjob. It logs in with the specified username and saves the session.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --login=your_username\n```\n\n----------------------------------------\n\nTITLE: Downloading One Post per User from a Hashtag Feed using Instaloader in Python\nDESCRIPTION: This script downloads only the most recent post from each unique user within a hashtag feed. It uses a set to keep track of users whose posts have already been downloaded, ensuring only one post per user is saved.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/codesnippets.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport instaloader\n\nHASHTAG = '<hashtag>'\n\nL = instaloader.Instaloader()\n\nposts = L.get_hashtag_posts(HASHTAG)\nusers_with_downloaded_post = set()\n\nfor post in posts:\n    if post.owner_profile not in users_with_downloaded_post:\n        L.download_post(post, target='#'+HASHTAG)\n        users_with_downloaded_post.add(post.owner_profile)\n```\n\n----------------------------------------\n\nTITLE: Running Instaloader as a Cronjob (Command-line)\nDESCRIPTION: This command shows how to run Instaloader as a cronjob, using a previously saved session file. It logs in with the specified username, runs quietly, and downloads the specified targets.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --login=your_username --quiet target [...]\n```\n\n----------------------------------------\n\nTITLE: Basic Instaloader Command Invocation (Bash)\nDESCRIPTION: Shows the basic syntax for invoking Instaloader from the command line, where target can be a profile, hashtag, location ID, or special feed indicators.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/cli-options.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ instaloader [options] target [target ...]\n```\n\n----------------------------------------\n\nTITLE: Downloading Private Instagram Profiles with Authentication\nDESCRIPTION: Command to download content from private Instagram profiles by logging in with a username.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --login=your_username profile [profile ...]\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Objects in Python with Instaloader\nDESCRIPTION: This snippet shows how to create a Profile object from a username, which provides access to a user's profile data and methods for interacting with it.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/as-module.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprofile = Profile.from_username(L.context, USERNAME)\n```\n\n----------------------------------------\n\nTITLE: Creating Post Objects from Shortcode in Python\nDESCRIPTION: This snippet demonstrates how to create a Post object by using a post's shortcode, which is part of the post's URL. This allows direct access to a specific Instagram post's data.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/as-module.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npost = Post.from_shortcode(L.context, SHORTCODE)\n```\n\n----------------------------------------\n\nTITLE: Downloading Single Instagram Post by Shortcode\nDESCRIPTION: Command to download a specific Instagram post using its shortcode identifier.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader -- -B_K4CykAOtf\n```\n\n----------------------------------------\n\nTITLE: Installing Instaloader via pip\nDESCRIPTION: This command installs Instaloader using pip, the recommended Python package installer. It requires Python 3.8 or later and pip to be installed on the system.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install instaloader\n```\n\n----------------------------------------\n\nTITLE: Filtering Instagram Posts by Likes and User Interaction\nDESCRIPTION: Command to download Instagram posts that have either been liked by the user or have over 100 likes.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --login=your_username --post-filter=\"likes>100 or viewer_has_liked\" profile\n```\n\n----------------------------------------\n\nTITLE: Filtering Instagram Posts by Hashtag in Caption\nDESCRIPTION: Example of downloading Instagram posts that contain a specific hashtag in the caption.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --post-filter=\"'cute' in caption_hashtags\" \"#kitten\"\n```\n\n----------------------------------------\n\nTITLE: Saving Post Likes Count with Instaloader (Command-line)\nDESCRIPTION: This snippet demonstrates how to use Instaloader to save the current number of likes for each post instead of the post's caption. It uses the --post-metadata-txt option to specify the output format.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --post-metadata-txt=\"{likes} likes.\" <target>\n```\n\n----------------------------------------\n\nTITLE: Exporting Post Likes and Comments Count with Instaloader (Command-line)\nDESCRIPTION: This example shows how to use Instaloader to export both the number of likes and comments for previously downloaded posts. It reimports JSON files and uses the --post-metadata-txt option to specify the output format.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --post-metadata-txt=\"{likes} likes, {comments} comments.\" <target>/*.json.xz\n```\n\n----------------------------------------\n\nTITLE: Full Instaloader Command Syntax\nDESCRIPTION: Complete command syntax showing various options for downloading different types of Instagram content including comments, geotags, stories, and more\nSOURCE: https://github.com/instaloader/instaloader/blob/master/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ninstaloader [--comments] [--geotags]\n                [--stories] [--highlights] [--tagged] [--reels] [--igtv]\n                [--login YOUR-USERNAME] [--fast-update]\n                profile | \"#hashtag\" | :stories | :feed | :saved\n```\n\n----------------------------------------\n\nTITLE: Filtering Instagram Posts by Date with Instaloader\nDESCRIPTION: Example of using a post filter to download only Instagram posts created before a specific date.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --post-filter=\"date_utc <= datetime(2018, 5, 31)\" target\n```\n\n----------------------------------------\n\nTITLE: Filtering Out Video Posts from Instagram Downloads\nDESCRIPTION: Command demonstrating how to exclude video posts when downloading Instagram content.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --post-filter=\"not is_video\" target\n```\n\n----------------------------------------\n\nTITLE: Downloading Liked Posts from Instagram Feed\nDESCRIPTION: Command to download only posts from the user's Instagram feed that they have liked.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --login=your_username --post-filter=viewer_has_liked :feed\n```\n\n----------------------------------------\n\nTITLE: Looking Up Instagram Username from User ID in Python\nDESCRIPTION: This code demonstrates how to convert an Instagram user ID to a username by creating a Profile object from the ID and accessing its username attribute.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/as-module.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nProfile.from_id(L.context, USERID).username\n```\n\n----------------------------------------\n\nTITLE: Customizing Instagram Download Filenames with Date and Profile\nDESCRIPTION: Command demonstrating how to customize filenames of downloaded Instagram content using date and profile name.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --filename-pattern={date_utc}_UTC_{profile} \"#hashtag\"\n```\n\n----------------------------------------\n\nTITLE: Organizing Instagram Downloads by Profile and Year\nDESCRIPTION: Command showing how to organize downloaded Instagram content into directories by profile name and year.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --dirname-pattern={profile} --filename-pattern={date_utc:%Y}/{shortcode} <target> ...\n```\n\n----------------------------------------\n\nTITLE: Example Arguments File for Instaloader\nDESCRIPTION: An example of what an args.txt file would contain for use with the +args.txt option. This file demonstrates how to specify login credentials, enable fast-update option, and list profiles to download.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/cli-options.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n--login=MYUSERNAME\n--password=MYPASSWORD\n--fast-update\nprofile1\nprofile2\n```\n\n----------------------------------------\n\nTITLE: Installing Instaloader via pip\nDESCRIPTION: Basic installation command for Instaloader using pip package manager\nSOURCE: https://github.com/instaloader/instaloader/blob/master/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install instaloader\n```\n\n----------------------------------------\n\nTITLE: Basic Profile Download Command\nDESCRIPTION: Simple command to download content from one or more Instagram profiles\nSOURCE: https://github.com/instaloader/instaloader/blob/master/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader profile [profile ...]\n```\n\n----------------------------------------\n\nTITLE: Fast Update Profile Download\nDESCRIPTION: Command to update local copies of profiles using fast update mode which stops at first already-downloaded picture\nSOURCE: https://github.com/instaloader/instaloader/blob/master/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ninstaloader --fast-update profile [profile ...]\n```\n\n----------------------------------------\n\nTITLE: Latest Stamps Profile Download\nDESCRIPTION: Command to download only newer media since last download using timestamps\nSOURCE: https://github.com/instaloader/instaloader/blob/master/README.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ninstaloader --latest-stamps -- profile [profile ...]\n```\n\n----------------------------------------\n\nTITLE: Private Profile Download\nDESCRIPTION: Command to download content from private profiles by logging in with user credentials\nSOURCE: https://github.com/instaloader/instaloader/blob/master/README.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ninstaloader --login=your_username profile [profile ...]\n```\n\n----------------------------------------\n\nTITLE: Updating Local Copy of Instagram Profiles with Fast Update\nDESCRIPTION: Command to quickly update previously downloaded Instagram profiles, stopping at the first already-downloaded picture.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --fast-update profile [profile ...]\n```\n\n----------------------------------------\n\nTITLE: Updating Instagram Profiles with Latest Timestamps\nDESCRIPTION: Command to update Instagram profiles by downloading only content newer than the last download timestamp.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/basic-usage.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --latest-stamps -- profile [profile ...]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Instaloader to the latest version\nDESCRIPTION: This command upgrades an existing Instaloader installation to the most recent version available on PyPI using pip.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --upgrade instaloader\n```\n\n----------------------------------------\n\nTITLE: Installing pre-release version of Instaloader\nDESCRIPTION: This command installs the latest pre-release version of Instaloader, which may include new features or bug fixes that are not yet part of a stable release.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --pre instaloader\n```\n\n----------------------------------------\n\nTITLE: Help Command (Bash)\nDESCRIPTION: Command to display all available flags, abbreviations, and descriptions for Instaloader options\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/cli-options.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninstaloader --help\n```\n\n----------------------------------------\n\nTITLE: Importing Firefox Session Cookies for Instaloader Login (Python)\nDESCRIPTION: This script imports Instagram session cookies from Firefox to bypass Instaloader's login process. It helps users who experience login issues by creating a session file that Instaloader can use for authentication.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/troubleshooting.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport browser_cookie3\nimport pickle\nimport sys\n\ndef import_session(username,\n                  sessionfile=\"~/.config/instaloader/session-{}\",\n                  cookiefile=None):\n    print(\"Importing session from Firefox\")\n    cookiejar = browser_cookie3.firefox(cookie_file=cookiefile)\n    instaloader_cookies = []\n    for cookie in cookiejar:\n        if cookie.domain.endswith(\".instagram.com\"):\n            instaloader_cookies.append(cookie)\n    if not instaloader_cookies:\n        raise SystemError(\"No cookies found. Are you logged in to Instagram in Firefox?\")\n    sessionfile = sessionfile.format(username)\n    print(\"Imported {} cookies for {}\".format(len(instaloader_cookies), username))\n    print(\"Storing to {}\".format(sessionfile))\n    with open(sessionfile, \"wb\") as f:\n        pickle.dump(instaloader_cookies, f)\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 1:\n        print(\"Usage: {} USERNAME [SESSIONFILE] [FIREFOXCOOKIEFILE]\".format(sys.argv[0]))\n        print(\"(default SESSIONFILE: ~/.config/instaloader/session-USERNAME)\")\n    elif len(sys.argv) == 2:\n        import_session(sys.argv[1])\n    elif len(sys.argv) == 3:\n        import_session(sys.argv[1], sessionfile=sys.argv[2])\n    elif len(sys.argv) == 4:\n        import_session(sys.argv[1], sessionfile=sys.argv[2], cookiefile=sys.argv[3])\n```\n\n----------------------------------------\n\nTITLE: Running Pylint and Mypy for Code Analysis in Python\nDESCRIPTION: Commands to run Pylint for error and syntax checking, and Mypy for type checking on the Instaloader source code.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npylint instaloader\nmypy -m instaloader\n```\n\n----------------------------------------\n\nTITLE: Building Sphinx Documentation for Instaloader\nDESCRIPTION: Command to build the Instaloader documentation locally using Sphinx version 2.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/contributing.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake -C docs html\n```\n\n----------------------------------------\n\nTITLE: Building Instaloader Documentation with Sphinx\nDESCRIPTION: Commands to install required dependencies and build the HTML documentation for Instaloader using Sphinx. This requires first installing the dependencies from requirements.txt and then running the make command to generate HTML output.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r requirements.txt\nmake html\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies in requirements.txt\nDESCRIPTION: Lists the Python package dependencies for the instaloader project. Includes 'requests' for HTTP operations and 'sphinx' version 2.3 or compatible for documentation generation.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests\nsphinx~=2.3\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting Instaloader Class in Python\nDESCRIPTION: This snippet demonstrates how to import and document the Instaloader class using Sphinx documentation syntax. It sets up the module context and configures the documentation style for the class.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/module/instaloader.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: instaloader\n   :no-index:\n\n.. highlight:: python\n\n.. autoclass:: Instaloader\n   :no-show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Python Module Configuration for InstaloaderContext\nDESCRIPTION: Module configuration directives for the Instaloader package documentation, specifying Python highlighting and content structure.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/module/instaloadercontext.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. module:: instaloader\n   :no-index:\n\n.. highlight:: python\n\n.. contents::\n   :backlinks: none\n```\n\n----------------------------------------\n\nTITLE: InstaloaderContext Class Documentation Directive\nDESCRIPTION: Sphinx documentation directive for the InstaloaderContext class, hiding inheritance information.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/module/instaloadercontext.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: InstaloaderContext\n   :no-show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RateController Class Documentation Directive\nDESCRIPTION: Sphinx documentation directive for the RateController class, introduced in version 4.5, hiding inheritance information.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/module/instaloadercontext.rst#2025-04-21_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: RateController\n   :no-show-inheritance:\n\n   .. versionadded:: 4.5\n```\n\n----------------------------------------\n\nTITLE: Importing Instaloader Module for Resumable Iterations in Python\nDESCRIPTION: This snippet shows how to import the Instaloader module for using resumable iterations. It sets up the module and highlights Python as the language for code examples.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/module/nodeiterator.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: instaloader\n   :no-index:\n\n.. highlight:: python\n```\n\n----------------------------------------\n\nTITLE: Exception Class Documentation in ReStructuredText\nDESCRIPTION: RST documentation defining various Instaloader exception classes including connection, authentication, and API response exceptions. Notable exceptions include InstaloaderException, ConnectionException, LoginException, and TwoFactorAuthRequiredException.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/module/exceptions.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: instaloader\n   :no-index:\n\n.. highlight:: python\n\n.. currentmodule:: instaloader.exceptions\n\n.. autoexception:: InstaloaderException\n   :no-show-inheritance:\n\n.. autoexception:: ConnectionException\n\n.. currentmodule:: instaloader\n\n.. autoexception:: QueryReturnedBadRequestException\n\n.. autoexception:: QueryReturnedForbiddenException\n\n.. autoexception:: ProfileNotExistsException\n\n.. autoexception:: ProfileHasNoPicsException\n\n.. autoexception:: PrivateProfileNotFollowedException\n\n.. autoexception:: LoginRequiredException\n\n.. autoexception:: LoginException\n\n   .. versionadded:: 4.12\n\n.. autoexception:: TwoFactorAuthRequiredException\n\n   .. versionadded:: 4.2\n\n   .. versionchanged:: 4.12\n      Inherits LoginException\n\n.. autoexception:: InvalidArgumentException\n\n.. autoexception:: BadResponseException\n\n.. autoexception:: BadCredentialsException\n\n   .. versionchanged:: 4.12\n      Inherits LoginException\n\n.. autoexception:: PostChangedException\n\n.. autoexception:: QueryReturnedNotFoundException\n\n   .. versionchanged:: 4.3\n      QueryReturnedNotFoundException now inherits ConnectionException\n      to retry on 404 errors.\n\n\n.. autoexception:: TooManyRequestsException\n\n.. autoexception:: AbortDownloadException\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Instaloader\nDESCRIPTION: Basic commands to install Instaloader via pip and run it to download profile content. Shows the minimal setup required to start using the tool.\nSOURCE: https://github.com/instaloader/instaloader/blob/master/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip3 install instaloader\n\n$ instaloader profile [profile ...]\n```"
  }
]