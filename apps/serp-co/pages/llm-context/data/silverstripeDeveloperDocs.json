[
  {
    "owner": "silverstripe",
    "repo": "developer-docs",
    "content": "TITLE: Custom Escaping in PHP for SilverStripe\nDESCRIPTION: Shows manual escaping techniques in PHP using SilverStripe's Convert class when preparing HTML outputs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Core\\Convert;\nuse SilverStripe\\ORM\\FieldType\\DBHTMLText;\nuse SilverStripe\\ORM\\FieldType\\DBText;\n\nclass MyController extends Controller\n{\n    private static $allowed_actions = ['search'];\n\n    public function search($request)\n    {\n        $htmlTitle = '<p>Your results for:' . Convert::raw2xml($request->getVar('Query')) . '</p>';\n        return $this->customise([\n            'Query' => DBText::create($request->getVar('Query')),\n            'HTMLTitle' => DBHTMLText::create($htmlTitle),\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Removing Scaffolded has_one Fields in SilverStripe\nDESCRIPTION: Example showing how to remove automatically scaffolded form fields for has_one relationships.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Company extends DataObject\n{\n    // ...\n\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n        $fields->removeByName(['ManagerID', 'CleanerID']);\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller-Level Permission Checks in Silverstripe\nDESCRIPTION: Demonstrates how to implement controller-level permission checks using the init() method. This checks permissions before any action is executed, allowing you to restrict access to the entire controller.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/03_Access_Control.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Security\\Permission;\n\nclass MyController extends Controller\n{\n    // ...\n\n    public function init()\n    {\n        parent::init();\n\n        // Only allow administrators to perform ANY action (including index) on this controller via HTTP requests\n        if (!Permission::check('ADMIN')) {\n            return $this->httpError(403);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Hosts with Environment Variable in Silverstripe CMS\nDESCRIPTION: Sets up a comma-separated list of allowed hostnames to protect against host header injection attacks using the SS_ALLOWED_HOSTS environment variable.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nSS_ALLOWED_HOSTS=\"example.com,www.example.com,subdomain.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships in SilverStripe Data Objects\nDESCRIPTION: This PHP snippet showcases how to define various types of relationships within a SilverStripe DataObject class, including many-to-many and has-many relationships. It also demonstrates the use of cascade_duplicates configuration to specify which relationships should be duplicated when invoking the duplicate() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass ParentObject extends DataObject\n{\n    private static $many_many = [\n        'ManyManyExamples' => ManyManyExample::class,\n    ];\n\n    private static $has_many = [\n        'HasManyExamples' => HasManyExample::class,\n    ];\n\n    private static $has_one = [\n        'HasOneExample' => HasOneExample::class,\n    ];\n\n    private static $cascade_duplicates = [\n        'ManyManyExamples',\n        'HasManyExamples',\n        'HasOneExample',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Headers in Silverstripe CMS (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to use the Silverstripe CMS framework to add security headers to HTTP responses. It includes adding cache control headers to prevent caching of sensitive information, as well as using the `Strict-Transport-Security` header to enforce HTTPS connections. The snippet requires Silverstripe CMS and has dependencies on `SilverStripe\\Control\\Controller` and `SilverStripe\\Control\\HTTP`. The key function `init()` is overridden to configure the headers appropriately.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTP;\n\nclass MySecureController extends Controller\n{\n    public function init()\n    {\n        parent::init();\n\n        // Add cache headers to ensure sensitive content isn't cached.\n        $this->response->addHeader('Cache-Control', 'max-age=0, must-revalidate, no-transform');\n        // for HTTP 1.0 support\n        $this->response->addHeader('Pragma', 'no-cache');\n\n        HTTP::set_cache_age(0);\n        HTTP::add_cache_headers($this->response);\n\n        // Add HSTS header to force TLS for document content\n        $this->response->addHeader('Strict-Transport-Security', 'max-age=86400; includeSubDomains');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SQLSelect for complex database queries in Silverstripe\nDESCRIPTION: Creates and configures an SQLSelect object for complex database queries with joins, field selection, and conditions. Demonstrates how to get table names, add columns, join tables, apply filters, and execute the query.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/08_SQL_Select.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$schema = DataObject::getSchema();\n$playerTableName = DB::get_conn()->escapeIdentifier($schema->baseDataTable(Player::class));\n\n$sqlQuery = new SQLSelect();\n$sqlQuery->setFrom($playerTableName);\n\n// Add a column to the `SELECT ()` clause\n$sqlQuery->selectField('FieldName');\n// You can pass an alias for the field in as the second argument\n$sqlQuery->selectField('YEAR(\"Birthday\")', 'Birthyear');\n\n// Join another table onto the query\n$teamIdField = $schema->sqlColumnForField(Player::class, 'TeamID');\n$idField = $schema->sqlColumnForField(Team::class, 'ID');\n$joinOnClause = \"$teamIdField = $idField\";\n$sqlQuery->addLeftJoin($teamTableName, $joinOnClause);\n\n// Combine another query using a union\n$sqlQuery->addUnion($anotherSqlSelect, SQLSelect::UNION_ALL);\n\n// There are methods for most SQL clauses, such as WHERE, ORDER BY, GROUP BY, etc\n$sqlQuery->addWhere(['YEAR(\"Birthday\") = ?' => 1982]);\n// $sqlQuery->setOrderBy(...);\n// $sqlQuery->setGroupBy(...);\n// $sqlQuery->setHaving(...);\n// $sqlQuery->setLimit(...);\n// $sqlQuery->setDistinct(true);\n\n// Get the raw SQL (optional) and parameters\n$rawSQL = $sqlQuery->sql($parameters);\n\n// Execute and return a Query object\n$result = $sqlQuery->execute();\n\n// Iterate over results\nforeach ($result as $row) {\n    echo $row['BirthYear'];\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Records in Silverstripe\nDESCRIPTION: Comprehensive examples of filtering records using exact matches, multiple conditions, arrays of values, and search filter modifiers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filter([\n    'FirstName' => 'Sam',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filter([\n    'FirstName' => 'Sam',\n    'LastName' => 'MinnÃ©e',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filter('FirstName', 'Sam');\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filter('FirstName', ['Sam', 'Sig']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filter([\n    'FirstName:StartsWith' => 'S',\n    'PlayerNumber:GreaterThan' => '10',\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form in a Silverstripe CMS Controller\nDESCRIPTION: Shows a practical example of creating a form in a Silverstripe CMS controller, including form fields, actions, and submission handling.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/src/PageType/MyFormPageController.php\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\RequiredFields;\nuse SilverStripe\\Forms\\TextField;\n\nclass MyFormPageController extends PageController\n{\n    private static $allowed_actions = [\n        'getHelloForm',\n    ];\n\n    private static $url_handlers = [\n        'HelloForm' => 'getHelloForm',\n    ];\n\n    public function getHelloForm()\n    {\n        $fields = FieldList::create(\n            TextField::create('Name', 'Your Name')\n        );\n\n        $actions = FieldList::create(\n            FormAction::create('doSayHello')->setTitle('Say hello')\n        );\n\n        $required = RequiredFields::create('Name');\n\n        $form = Form::create($this, 'HelloForm', $fields, $actions, $required);\n\n        return $form;\n    }\n\n    public function doSayHello($data, Form $form)\n    {\n        $form->sessionMessage('Hello ' . $data['Name'], 'success');\n\n        return $this->redirectBack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataExtension for Member Class in PHP\nDESCRIPTION: Creates a DataExtension class that adds a DateOfBirth field and greeting method to the Member class. Shows basic extension structure with database field definition and custom method implementation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\ORM\\DataExtension;\n\nclass MyMemberExtension extends DataExtension\n{\n    private static $db = [\n        'DateOfBirth' => 'DBDatetime',\n    ];\n\n    public function getGreeting()\n    {\n        // $this->owner refers to the instance being extended - in this case a `Member` record.\n        return \"Hi {$this->owner->Name}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Rate Limit Middleware in Silverstripe CMS\nDESCRIPTION: Defines a custom rate limit middleware with configurable settings for maximum attempts and decay period. The ExtraKey property ensures isolation from other rate limiters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/06_Rate_Limiting.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  MyRateLimitMiddleware:\n    class: SilverStripe\\Control\\Middleware\\RateLimitMiddleware\n    properties:\n      ExtraKey: 'mylimiter' # this isolates your rate limiter from others\n      MaxAttempts: 10 # how many attempts are allowed in a decay period\n      Decay: 1 # how long the decay period is in minutes\n```\n\n----------------------------------------\n\nTITLE: Using Parameterised Queries in Silverstripe CMS\nDESCRIPTION: Examples of parameterised queries for secure database operations in Silverstripe. Shows various methods to safely query records using prepared statements which separate query logic from parameter values.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\Queries\\SQLSelect;\n\n$records = DB::prepared_query('SELECT * FROM \"MyClass\" WHERE \"ID\" = ?', [3]);\n$records = MyClass::get()->where(['\"ID\" = ?' => 3]);\n$records = MyClass::get()->where(['\"ID\"' => 3]);\n$records = DataObject::get_by_id('MyClass', 3);\n$records = DataObject::get_one('MyClass', ['\"ID\" = ?' => 3]);\n$records = MyClass::get()->byID(3);\n$records = SQLSelect::create()->addWhere(['\"ID\"' => 3])->execute();\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Admin Credentials in Silverstripe CMS\nDESCRIPTION: Sets up a default admin username and password for initial CMS access using environment variables in the .env file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/03_Authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Configure a default username and password to access the CMS on all sites in this environment.\nSS_DEFAULT_ADMIN_USERNAME=\"admin\"\nSS_DEFAULT_ADMIN_PASSWORD=\"password\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Permission Methods in Silverstripe DataObject\nDESCRIPTION: A basic implementation of the four permission methods (canView, canEdit, canDelete, canCreate) that grants access to users with the CMS_ACCESS_CMSMain permission code, which allows access to the Pages section.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/07_Permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Security\\Permission;\n\nclass MyDataObject extends DataObject\n{\n    public function canView($member = null)\n    {\n        return Permission::check('CMS_ACCESS_CMSMain', 'any', $member);\n    }\n\n    public function canEdit($member = null)\n    {\n        return Permission::check('CMS_ACCESS_CMSMain', 'any', $member);\n    }\n\n    public function canDelete($member = null)\n    {\n        return Permission::check('CMS_ACCESS_CMSMain', 'any', $member);\n    }\n\n    public function canCreate($member = null, $context = [])\n    {\n        return Permission::check('CMS_ACCESS_CMSMain', 'any', $member);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FixtureFactory in SilverStripe Test Class\nDESCRIPTION: Example showing how to set up a FixtureFactory in a test class, define object blueprints with default values, and create test objects with custom properties. The code demonstrates initialization of the factory, blueprint definition, and object creation with both default and custom values.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/How_Tos/02_FixtureFactories.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Test;\n\nuse App\\Model\\MyObject;\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\Dev\\SapphireTest;\n\nclass MyObjectTest extends SapphireTest\n{\n    protected FixtureFactory $factory;\n\n    public function __construct()\n    {\n        parent::__construct();\n\n        $factory = Injector::inst()->create(FixtureFactory::class);\n\n        // Defines a \"blueprint\" for new objects\n        $factory->define(MyObject::class, [\n            'MyProperty' => 'My Default Value',\n        ]);\n\n        $this->factory = $factory;\n    }\n\n    public function testSomething()\n    {\n        $MyObjectObj = $this->factory->createObject(\n            MyObject::class,\n            ['MyOtherProperty' => 'My Custom Value']\n        );\n\n        echo $MyObjectObj->MyProperty;\n        // returns \"My Default Value\"\n\n        echo $MyObjectObj->MyOtherProperty;\n        // returns \"My Custom Value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with Injector in PHP\nDESCRIPTION: Demonstrates how to use the Injector class to create new objects of a specified type. This snippet shows basic usage, creating multiple instances, and passing constructor arguments.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MyClient;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n$object = Injector::inst()->create(MyClient::class);\n$object2 = Injector::inst()->create(MyClient::class);\n\n// resolves to false\n$object === $object2;\n\n$object = Injector::inst()->create(MyClient::class, $arg1, $arg2);\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying DataObjects in PHP\nDESCRIPTION: Examples of creating new Player records and querying existing records using Silverstripe's ORM methods including filtering and sorting.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$player = Player::create();\n$player->FirstName = 'Sam';\n$player->PlayerNumber = 07;\n$player->write();\n\n// Querying examples\n$players = Player::get();\n$firstPlayer = $players->first();\n$lastPlayer = $players->last();\n$player = Player::get()->byID(2);\n$members = Player::get()->filter([\n    'FirstName' => 'Sam',\n])->sort('Surname');\n```\n\n----------------------------------------\n\nTITLE: Manual Data Escaping in Form Processing\nDESCRIPTION: Example of manual data escaping in a form handler. Shows how to properly escape raw form data using Convert::raw2sql() with the quote parameter set to true for secure database queries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form;\n\nuse App\\Model\\Player;\nuse SilverStripe\\Core\\Convert;\nuse SilverStripe\\Forms\\Form;\n\nclass MyForm extends Form\n{\n    public function save($RAW_data, $form)\n    {\n        // Pass true as the second parameter of raw2sql to quote the value safely\n        // works recursively on an array\n        $SQL_data = Convert::raw2sql($RAW_data, true);\n        $objs = Player::get()->where('Name = ' . $SQL_data['name']);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Safe URLs in PHP\nDESCRIPTION: Describes how to safely create URLs containing query strings in a SilverStripe controller by employing urlencode.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\ORM\\FieldType\\DBText;\n\nclass MyController extends Controller\n{\n    private static $allowed_actions = ['search'];\n\n    public function search($request)\n    {\n        $rssRelativeLink = '/rss?Query=' . urlencode($_REQUEST['query']) . '&sortOrder=asc';\n        $rssLink = Controller::join_links($this->Link(), $rssRelativeLink);\n        return $this->customise([\n            'RSSLink' => DBText::create($rssLink),\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining DataObject Model in PHP\nDESCRIPTION: Example of creating a Player model class that extends DataObject. Demonstrates defining database fields and table configuration using Silverstripe's ORM conventions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/Player.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $class_description = 'Sports player';\n\n    private static $table_name = 'Player';\n\n    private static $db = [\n        'PlayerNumber' => 'Int',\n        'FirstName' => 'Varchar(255)',\n        'LastName' => 'Text',\n        'Birthday' => 'Date',\n        'Status' => 'Varchar(255)',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Data Escaping in Silverstripe CMS\nDESCRIPTION: Examples of Silverstripe's automatic data escaping for secure queries. Shows how filter methods safely handle user input by automatically escaping values to prevent SQL injection.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Security\\Member;\n\n// automatically escaped/quoted\n$members = Member::get()->filter('Name', $_GET['name']);\n// automatically escaped/quoted\n$members = Member::get()->filter(['Name' => $_GET['name']]);\n// parameterised condition\n$members = Member::get()->where(['\"Name\" = ?' => $_GET['name']]);\n// needs to be escaped and quoted manually (note raw2sql called with the $quote parameter set to true)\n$members = Member::get()->where(sprintf('\"Name\" = %s', Convert::raw2sql($_GET['name'], true)));\n```\n\n----------------------------------------\n\nTITLE: Filesystem Security Structure - Text\nDESCRIPTION: Example showing recommended filesystem structure for securing Silverstripe CMS applications, demonstrating proper webroot configuration and file placement.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n.htaccess <- fallback, shouldn't be used\npublic/ <- this should be your webroot\n  .htaccess\n  index.php\napp/\n  _config/\n    secrets.yml <- your webserver shouldn't be able to serve this, as it's outside of the public/ folder\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom GraphQL Logging Middleware in PHP\nDESCRIPTION: A complete implementation of a custom middleware that logs GraphQL queries as they are executed. It retrieves the user from the context and logs the query with user information before passing execution to the next middleware.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/06_extending/adding_middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Middleware;\n\nuse GraphQL\\Type\\Schema;\nuse SilverStripe\\GraphQL\\Middleware\\QueryMiddleware;\nuse SilverStripe\\GraphQL\\QueryHandler\\UserContextProvider;\n// ...\n\nclass LoggingMiddleware implements QueryMiddleware\n{\n    public function process(Schema $schema, string $query, array $context, array $vars, callable $next)\n    {\n        $member = UserContextProvider::get($context);\n\n        Injector::inst()->get(LoggerInterface::class)\n            ->info(sprintf(\n                'Query executed: %s by %s',\n                $query,\n                $member ? $member->Title : '<anonymous>';\n            ));\n\n        // Hand off execution to the next middleware\n        return $next($schema, $query, $context, $vars);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Secure Cookies in PHP for Silverstripe CMS\nDESCRIPTION: Example of setting a secure cookie in PHP code with the secure and HTTPOnly flags to protect cookies from being transmitted in clear text or accessed via JavaScript.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Cookie;\n\nCookie::set(\n    'cookie-name',\n    'chocolate-chip',\n    $expiry = 30,\n    $path = null,\n    $domain = null,\n    $secure = true,\n    $httpOnly = false\n);\n```\n\n----------------------------------------\n\nTITLE: Using Cache in PHP\nDESCRIPTION: Shows how to use the configured cache service in PHP code. It demonstrates getting the cache instance, setting and getting values, and checking for existence of cache items.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/01_Caching.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\SimpleCache\\CacheInterface;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n$cache = Injector::inst()->get(CacheInterface::class . '.myCache');\n\n\n// create a new item by trying to get it from the cache\n$myValue = $cache->get('myCacheKey');\n\n// set a value and save it via the adapter\n$cache->set('myCacheKey', 1234);\n\n// retrieve the cache item\nif (!$cache->has('myCacheKey')) {\n    // ... item does not exists in the cache\n}\n```\n\n----------------------------------------\n\nTITLE: Defining belongs_to Relationship in Silverstripe CMS PHP\nDESCRIPTION: Demonstrates how to define a belongs_to relationship in Silverstripe CMS. This is used in conjunction with a has_one relationship on the related object.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Coach extends DataObject\n{\n    private static $belongs_to = [\n        'Team' => Team::class . '.Coach',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Table Creation Schema\nDESCRIPTION: SQL statement showing how Silverstripe automatically creates the database table structure for the Player model, including default system fields like ID, ClassName, Created, and LastEdited.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `Player` (\n    `ID` int(11) NOT NULL AUTO_INCREMENT,\n    `ClassName` enum('Player') DEFAULT 'Player',\n    `LastEdited` datetime DEFAULT NULL,\n    `Created` datetime DEFAULT NULL,\n    `PlayerNumber` int(11) NOT NULL DEFAULT '0',\n    `FirstName` varchar(255) DEFAULT NULL,\n    `LastName` mediumtext,\n    `Birthday` datetime DEFAULT NULL,\n    `Status` varchar(255) DEFAULT NULL,\n\n    PRIMARY KEY (`ID`),\n    KEY `ClassName` (`ClassName`)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sudo Mode Verification in Controller Endpoints\nDESCRIPTION: PHP code demonstrating how to implement sudo mode verification in a controller action to protect sensitive operations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/04_Sudo_Mode.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\Security\\SudoMode\\SudoModeServiceInterface;\n\nclass MyController extends Controller\n{\n    // ...\n\n    public function myAction(HTTPRequest $request): HTTPResponse\n    {\n        $service = Injector::inst()->get(SudoModeServiceInterface::class);\n        if (!$service->check($request->getSession())) {\n            return $this->httpError(403, 'Sudo mode is required for this action');\n        }\n        // ... continue with sensitive operations\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Join Operations in SilverStripe\nDESCRIPTION: Examples of different join types (left, right, inner) with and without aliases in SilverStripe ORM.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// Without an alias\n$members = Member::get()\n    ->leftJoin(\"Group_Members\", '\"Group_Members\".\"MemberID\" = \"Member\".\"ID\"');\n$members = Member::get()\n    ->rightJoin(\"Group_Members\", '\"Group_Members\".\"MemberID\" = \"Member\".\"ID\"');\n$members = Member::get()\n    ->innerJoin(\"Group_Members\", '\"Group_Members\".\"MemberID\" = \"Member\".\"ID\"');\n\n// With an alias \"Rel\"\n$members = Member::get()\n    ->leftJoin(\"Group_Members\", '\"Rel\".\"MemberID\" = \"Member\".\"ID\"', \"Rel\");\n$members = Member::get()\n    ->rightJoin(\"Group_Members\", '\"Rel\".\"MemberID\" = \"Member\".\"ID\"', \"Rel\");\n$members = Member::get()\n    ->innerJoin(\"Group_Members\", '\"Rel\".\"MemberID\" = \"Member\".\"ID\"', \"Rel\");\n```\n\n----------------------------------------\n\nTITLE: Filtering Relations in SilverStripe\nDESCRIPTION: This PHP snippet shows how to filter relations within a SilverStripe DataObject to retrieve a list of active players, leveraging the ORM's filter method on DataLists.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Team extends DataObject\n{\n    private static $has_many = [\n        'Players' => Player::class,\n    ];\n\n    public function getActivePlayers()\n    {\n        return $this->Players()->filter('Status', 'Active');\n    }\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Silverstripe CMS\nDESCRIPTION: Core environment variables used to configure Silverstripe CMS including database connections, environment types, admin credentials, email settings, and security parameters. These variables control fundamental aspects of the CMS functionality and behavior.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/03_Environment_Management.md#2025-04-21_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nSS_DATABASE_CLASS=MySQLDatabase\nSS_DATABASE_SERVER=localhost\nSS_DATABASE_USERNAME=\nSS_DATABASE_PASSWORD=\nSS_DATABASE_PORT=\nSS_DATABASE_SUFFIX=\nSS_DATABASE_PREFIX=\nSS_DATABASE_NAME=\nSS_DATABASE_CHOOSE_NAME=\nSS_DATABASE_SSL_KEY=\nSS_DATABASE_SSL_CERT=\nSS_DATABASE_SSL_CA=\nSS_DATABASE_SSL_CIPHER=\nSS_DATABASE_TIMEZONE=\nSS_DEPRECATION_ENABLED=\nSS_DEPRECATION_SHOW_HTTP=false\nSS_DEPRECATION_SHOW_CLI=true\nSS_ENVIRONMENT_TYPE=\nSS_DEFAULT_ADMIN_USERNAME=\nSS_DEFAULT_ADMIN_PASSWORD=\nSS_USE_BASIC_AUTH=\nSS_SEND_ALL_EMAILS_TO=\nSS_SEND_ALL_EMAILS_FROM=\nSS_ERROR_LOG=\nSS_PROTECTED_ASSETS_PATH=\nSS_DATABASE_MEMORY=\nSS_TRUSTED_PROXY_IPS=\nSS_ALLOWED_HOSTS=\nSS_MANIFESTCACHE=\nSS_IGNORE_DOT_ENV=\nSS_BASE_URL=\nSS_FLUSH_ON_DEPLOY=false\nSS_TEMP_PATH=\n```\n\n----------------------------------------\n\nTITLE: HTTPApplication Implementation in Silverstripe CMS (PHP)\nDESCRIPTION: This code shows a basic HTTPApplication implementation in Silverstripe CMS. It creates a request, instantiates a CoreKernel and HTTPApplication, adds middleware, handles the request, and outputs the response.  It relies on the autoloader and several Silverstripe classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/16_Execution_Pipeline/03_App_Object_and_Kernel.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SilverStripe\\Control\\HTTPApplication;\nuse SilverStripe\\Control\\HTTPRequestBuilder;\nuse SilverStripe\\Core\\CoreKernel;\nuse SilverStripe\\Core\\Startup\\ErrorControlChainMiddleware;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n// Build request and detect flush\n$request = HTTPRequestBuilder::createFromEnvironment();\n\n// Default application\n$kernel = new CoreKernel(BASE_PATH);\n$app = new HTTPApplication($kernel);\n$app->addMiddleware(new ErrorControlChainMiddleware($app));\n$response = $app->handle($request);\n$response->output();\n\n```\n\n----------------------------------------\n\nTITLE: Querying Versioned Records with SilverStripe ORM\nDESCRIPTION: This snippet demonstrates how to retrieve the first 10 live records of a versioned DataObject using SilverStripe's Versioned class. It requires SilverStripe's ORM and Versioned modules. The query filters records by their creation date in ascending order and returns a DataList object.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Versioned\\Versioned;\n$records = Versioned::get_by_stage(MyRecord::class, Versioned::LIVE)->limit(10)->sort('Created', 'ASC');\n```\n\n----------------------------------------\n\nTITLE: Session-based Form Validation in Silverstripe CMS\nDESCRIPTION: Demonstrates how to implement form validation using session storage for validation results and form data persistence.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Forms\\EmailField;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\ORM\\ValidationResult;\nuse SilverStripe\\Security\\Member;\n\nclass MyFormPageController extends PageController\n{\n    // ...\n\n    public function getMyForm()\n    {\n        $fields = FieldList::create(\n            TextField::create('Name'),\n            EmailField::create('Email')\n        );\n\n        $actions = FieldList::create(\n            FormAction::create('doSubmitForm', 'Submit')\n        );\n\n        $form = Form::create($this, 'MyForm', $fields, $actions);\n\n        return $form;\n    }\n\n    public function doSubmitForm($data, $form)\n    {\n        // At this point, RequiredFields->isValid() will have been called already,\n        // so we can assume that the values exist. Say we want to make sure that email hasn't already been used.\n\n        $check = Member::get()->filter('Email', $data['Email'])->first();\n\n        if ($check) {\n            $validationResult = ValidationResult::create();\n            $validationResult->addFieldError('Email', 'This email already exists');\n            $form->setSessionValidationResult($validationResult);\n            $form->setSessionData($form->getData());\n            return $this->redirectBack();\n        }\n\n\n        $form->sessionMessage('You have been added to our mailing list', 'good');\n\n        return $this->redirectBack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters for the /teams/players/1 Route in SilverStripe\nDESCRIPTION: Example of accessing route parameters when a user visits the /teams/players/1 URL, showing how both 'Action' and 'ID' parameters are populated, and demonstrating how to retrieve a single parameter.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$params = $this->getRequest()->params();\n\n// returns the following array:\n$params = [\n    'Action' => 'players',\n    'ID' => 1,\n    'Name' => null,\n];\n\n// You can also fetch one parameter at a time:\n$id = $this->getRequest()->param('ID');\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Actions in Silverstripe Controller\nDESCRIPTION: This code shows how to implement form actions in a Silverstripe controller. It includes creating form fields and actions, handling form submission, and modifying the form's action list.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\n\nclass MyFormPageController extends PageController\n{\n    private static $allowed_actions = [\n        'getMyForm',\n    ];\n\n    private static $url_handlers = [\n        'MyForm' => 'getMyForm',\n    ];\n\n    public function getMyForm()\n    {\n        $fields = FieldList::create(/* .. */);\n\n        $actions = FieldList::create(\n            FormAction::create('doSubmitForm', 'Submit')\n        );\n\n        $form = Form::create($controller, 'MyForm', $fields, $actions);\n\n        // Get the actions\n        $actions = $form->Actions();\n\n        // As actions is a FieldList, push, insertBefore, removeByName and other\n        // methods described for `Fields` also work for actions.\n\n        $actions->push(\n            FormAction::create('doSecondaryFormAction', 'Another Button')\n        );\n\n        $actions->removeByName('doSubmitForm');\n        $form->setActions($actions);\n\n        return $form\n    }\n\n    public function doSubmitForm($data, $form)\n    {\n        // ...\n    }\n\n    public function doSecondaryFormAction($data, $form)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Adapter in YAML\nDESCRIPTION: Shows how to configure Silverstripe CMS to use Memcached as the caching backend. It sets up a Memcached client and configures the cache factory to use Memcached.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/01_Caching.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nAfter: '#versionedcache'\n---\nSilverStripe\\Core\\Injector\\Injector:\n  MemcachedClient:\n    class: 'Memcached'\n    calls:\n      - [ addServer, [ 'localhost', 11211 ] ]\n  MemcachedCacheFactory:\n    class: 'SilverStripe\\Core\\Cache\\MemcachedCacheFactory'\n    constructor:\n      client: '%$MemcachedClient'\n  SilverStripe\\Core\\Cache\\CacheFactory: '%$MemcachedCacheFactory'\n```\n\n----------------------------------------\n\nTITLE: Using limit() Method in SilverStripe ORM - PHP\nDESCRIPTION: Shows how to limit the number of records returned and use offset with the limit() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Security\\Member;\n$members = Member::get()->limit(5);\n```\n\nLANGUAGE: php\nCODE:\n```\n// Return 10 members with an offset of 4 (starting from the 5th result).\n$members = Member::get()->sort('Surname')->limit(10, 4);\n```\n\n----------------------------------------\n\nTITLE: Enhanced FieldPlugin with Resolver Afterware for String Truncation\nDESCRIPTION: Improved implementation of the Truncator plugin that includes both argument definition and resolver afterware. This version validates that the field is a String and adds the actual truncation functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/02_writing_a_simple_plugin.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Plugin;\n\nuse SilverStripe\\GraphQL\\Schema\\Field\\Field;\nuse SilverStripe\\GraphQL\\Schema\\Interfaces\\FieldPlugin;\nuse SilverStripe\\GraphQL\\Schema\\Schema;\n\nclass Truncator implements FieldPlugin\n{\n    public function apply(Field $field, Schema $schema, array $config = [])\n    {\n        // Sanity check\n        Schema::invariant(\n            $field->getType() === 'String',\n            'Field %s is not a string. Cannot truncate.',\n            $field->getName()\n        );\n\n        $field->addArg('truncate', 'Int');\n        $field->addResolverAfterware([static::class, 'truncate']);\n    }\n\n    public static function truncate(string $result, array $args): string\n    {\n        $limit = $args['truncate'] ?? null;\n        if ($limit) {\n            return substr($result, 0, $limit);\n        }\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging In User in SilverStripe FunctionalTest\nDESCRIPTION: Logs in a specified user and sets the current session. This method should be used instead of directly setting the current user to ensure proper execution of login authenticator logic.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/01_Functional_Testing.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->logInAs($member);\n```\n\n----------------------------------------\n\nTITLE: Using getByLink Plugin to Query SilverStripe DataObjects by URL\nDESCRIPTION: GraphQL query example demonstrating the getByLink plugin functionality, which allows querying SiteTree objects by their URL path. This plugin is automatically available when the silverstripe/cms module is installed.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nreadOneSiteTree(link: \"/about-us\" ) {\n  title\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Silverstripe using Composer in Bash\nDESCRIPTION: This command uses Composer to create a new Silverstripe project. It installs the Silverstripe installer package and sets up the initial project structure.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project silverstripe/installer my-project\n```\n\n----------------------------------------\n\nTITLE: Registering LDAP IdentityStore in Silverstripe CMS\nDESCRIPTION: Demonstrates how to register a custom LDAP IdentityStore and configure authentication handlers using YAML in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/03_Authentication.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  App\\LDAP\\Authenticator\\LDAPAuthenticator:\n    properties:\n      LDAPSettings:\n        - URL: https://my-ldap-location.com\n      CascadeInTo: '%$SilverStripe\\Security\\MemberAuthenticator\\SessionAuthenticationHandler'\n  SilverStripe\\Security\\AuthenticationHandler:\n    class: SilverStripe\\Security\\RequestAuthenticationHandler\n    properties:\n      Handlers:\n        ldap: '%$App\\LDAP\\Authenticator\\LDAPAuthenticator'\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies into React Components using inject() HOC\nDESCRIPTION: Demonstrates how to use the inject() higher-order component to add dependencies to a React component. It shows the basic usage and a more complex example with context and prop mapping.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ninject([dependencies], mapDependenciesToProps, getContext)(Component);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyInjectedComponent = inject(\n   ['Dependency1', 'Dependency2']\n)(MyComponent);\n// MyComponent now has access to props.Dependency1 and props.Dependency2\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/components/Gallery.js\nimport React from 'react';\nimport { inject } from 'lib/Injector';\n\nclass Gallery extends React.Component {\n  render() {\n    const { SearchComponent, ItemComponent } = this.props;\n    return (\n      <div>\n        <SearchComponent />\n        {this.props.items.map(item => (\n          <ItemComponent title={item.title} image={item.image} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default inject(\n  ['GalleryItem', 'SearchBar'],\n  (GalleryItem, SearchBar) => ({\n    ItemComponent: GalleryItem,\n    SearchComponent: SearchBar\n  }),\n  () => 'Gallery.Search'\n)(Gallery);\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Actions in Silverstripe Controller\nDESCRIPTION: Shows how to declare allowed actions with various permission levels in a Silverstripe controller. Demonstrates different permission types including unrestricted access, ADMIN privilege, CMS access, and custom permission checks via callback methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/03_Access_Control.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n\nclass MyController extends Controller\n{\n    private static $allowed_actions = [\n        // someaction can be accessed by anyone, any time\n        'someaction',\n\n        // So can otheraction\n        'otheraction' => true,\n\n        // restrictedaction can only be people with ADMIN privilege\n        'restrictedaction' => 'ADMIN',\n\n        // restricted to uses that have the 'CMS_ACCESS_CMSMain' access\n        'cmsrestrictedaction' => 'CMS_ACCESS_CMSMain',\n\n        // complexaction can only be accessed if $this->canComplexAction() returns true.\n        'complexaction' => '->canComplexAction',\n\n        // complexactioncheck can only be accessed if $this->canComplexAction(\"MyRestrictedAction\", false, 42) is true.\n        'complexactioncheck' => '->canComplexAction(\"MyRestrictedAction\", false, 42)',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic in Silverstripe CMS Templates\nDESCRIPTION: Shows various examples of using conditional logic in Silverstripe CMS templates, including if, else, else_if, and boolean operators.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_3\n\nLANGUAGE: ss\nCODE:\n```\n<% if $CurrentMember %>\n    <p>You are logged in as $CurrentMember.FirstName $CurrentMember.Surname.</p>\n<% end_if %>\n\n<% if $MyDinner == \"kipper\" %>\n    Yummy, kipper for tea.\n<% end_if %>\n\n<% if $MyDinner == \"kipper\" %>\n    Yummy, kipper for tea\n<% else %>\n    I wish I could have kipper :-(\n<% end_if %>\n\n<% if $MyDinner == \"quiche\" %>\n    I don't like quiche\n<% else_if $MyDinner == $YourDinner %>\n    We both have good taste\n<% else %>\n    Can I have some of your chips?\n<% end_if %>\n\n<% if not $DinnerInOven %>\n    I'm going out for dinner tonight.\n<% end_if %>\n\n<% if $MyDinner != \"quiche\" %>\n    Lets go out\n<% end_if %>\n\n<% if $MyDinner == \"kipper\" || $MyDinner == \"salmon\" %>\n    yummy, fish for tea\n<% end_if %>\n\n<% if $MyDinner == \"quiche\" && $YourDinner == \"kipper\" %>\n    Lets swap dinners\n<% end_if %>\n\n<% if $Number >= 5 && $Number <= 10 %>\n    Number between 5 and 10\n<% end_if %>\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Limits in Silverstripe\nDESCRIPTION: YAML configuration example for setting file upload size limits for different file types\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/01_File_Management.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Assets\\Upload_Validator:\n  default_max_file_size:\n    '[image]': '500k' # Allow images up to 500KB\n    'doc': '2m' # Allow .doc files up to 2MB\n    '*' : '1m' # Allow everything else up to 1MB\n```\n\n----------------------------------------\n\nTITLE: Advanced exclude() and excludeAny() Usage in SilverStripe - PHP\nDESCRIPTION: Shows advanced exclusion patterns using multiple exclude() calls and excludeAny() method, including SearchFilters usage.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// SELECT * FROM Player WHERE FirstName != 'Sam' AND LastName != 'MinnÃ©e'\n$players = Player::get()->exclude('FirstName', 'Sam')->exclude('Surname', 'MinnÃ©e');\n$players = Player::get()->excludeAny([\n    'FirstName' => 'Sam',\n    'Surname' => 'MinnÃ©e',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// SELECT * FROM Player WHERE (\"FirstName\" NOT IN ('Sam','Sig) OR \"Age\" NOT IN ('17', '43'));\n$players = Player::get()->exclude([\n    'FirstName' => ['Sam', 'Sig'],\n    'Age' => [17, 43],\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->exclude([\n    'FirstName:EndsWith' => 'S',\n    'PlayerNumber:LessThanOrEqual' => '10',\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Form Validation with RequiredFields in Silverstripe CMS\nDESCRIPTION: Demonstrates setting up a basic form with required field validation using the RequiredFields validator class. Shows both constructor and setter methods for applying validation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Forms\\EmailField;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\RequiredFields;\nuse SilverStripe\\Forms\\TextField;\n\nclass MyFormPageController extends PageController\n{\n    private static $allowed_actions = [\n        'getMyForm',\n    ];\n\n    private static $url_handlers = [\n        'MyForm' => 'getMyForm',\n    ];\n\n    public function getMyForm()\n    {\n        $fields = FieldList::create(\n            TextField::create('Name'),\n            EmailField::create('Email')\n        );\n\n        $actions = FieldList::create(\n            FormAction::create('doSubmitForm', 'Submit')\n        );\n\n        // the fields 'Name' and 'Email' are required.\n        $required = RequiredFields::create([\n            'Name', 'Email',\n        ]);\n\n        // $required can be set as an argument\n        $form = Form::create($controller, 'MyForm', $fields, $actions, $required);\n\n        // Or, through a setter.\n        $form->setValidator($required);\n\n        return $form;\n    }\n\n    public function doSubmitForm($data, $form)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing and Version Management for DataObjects in Silverstripe\nDESCRIPTION: This code demonstrates two approaches to updating versioned DataObjects: creating new versions with write() and updating existing versions with writeWithoutVersion().\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// This will retrieve the latest draft version of record ID 99.\n$record = MyRecord::get()->byID(99);\n// This will output the version ID. Let's assume it's 13.\necho $record->Version;\n\n\n$record->Title = \"Foo Bar\";\n// This will create a new version of record ID 99.\n$record->write();\n// Will output 14 (because a new version was created).\necho $record->Version;\n\n$record->Title = \"FOO BAR\";\n// This will edit the latest version of record ID 99.\n$record->writeWithoutVersion();\n// Will still output 14 (because we edited the existing version).\necho $record->Version;\n```\n\n----------------------------------------\n\nTITLE: Using exclude() Method in SilverStripe ORM - PHP\nDESCRIPTION: Demonstrates how to exclude records from a DataList using various exclude() method patterns. Shows single value, multiple value, and combined condition exclusions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// SELECT * FROM Player WHERE FirstName != 'Sam'\n$players = Player::get()->exclude('FirstName', 'Sam');\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->exclude([\n    'FirstName' => ['Sam', 'Sig'],\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n// SELECT * FROM Player WHERE (FirstName != 'Sam' OR LastName != 'MinnÃ©e')\n$players = Player::get()->exclude([\n    'FirstName' => 'Sam',\n    'Surname' => 'MinnÃ©e',\n]);\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions in Silverstripe CMS\nDESCRIPTION: Code references showing how to implement permission checks using Permission::check method and handle permission failures. This is used in admin controllers like LeftAndMain to control access to CMS areas.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/01_Access_Control.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPermission::check()\nSecurity::permissionFailure()\n```\n\n----------------------------------------\n\nTITLE: Switching Reading Modes for Versioned Objects\nDESCRIPTION: Demonstrates how to save, overwrite, and restore the reading modes for versioned DataObjects in SilverStripe. It involves the use of the Versioned class to switch between stages and is important for temporal operations that require stage-specific data retrieval.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// save current mode\n$origMode = Versioned::get_reading_mode();\n// returns 'Live' records\n$obj = MyRecord::getComplexObjectRetrieval();\n// temporarily overwrite mode\nVersioned::set_reading_mode(Versioned::DRAFT);\n// returns 'Stage' records\n$obj = MyRecord::getComplexObjectRetrieval();\n// reset current mode\nVersioned::set_reading_mode($origMode);\n```\n\n----------------------------------------\n\nTITLE: Validating Values with Symfony Constraints in Silverstripe CMS\nDESCRIPTION: Demonstrates how to use the ConstraintValidator class to validate values against symfony/validator constraints in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/09_Validation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\Validation\\ConstraintValidator;\n\n/**\n * @var \\Symfony\\Component\\Validator\\Constraint $constraint\n * @var \\SilverStripe\\ORM\\ValidationResult $result\n */\n$result = ConstraintValidator::validate($valueToValidate, $constraint);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Database Columns in Silverstripe\nDESCRIPTION: Example showing how to set default values for database fields in a Car DataObject. This includes default values for Int, Enum, and Varchar field types using different syntax approaches.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Car extends DataObject\n{\n    private static $db = [\n        'Wheels' => 'Int(4)',\n        'Condition' => 'Enum(\"New,Fair,Junk\", \"Fair\")',\n        'Make' => 'Varchar([\"default\" => \"Honda\"])',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Configuration Changes\nDESCRIPTION: Shows how to modify configuration values during unit testing using withConfig method and data providers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Test\\Service;\n\nuse App\\Service\\MyService;\nuse SilverStripe\\Config\\Collections\\MutableConfigCollectionInterface;\nuse SilverStripe\\Core\\Config\\Config;\nuse SilverStripe\\Dev\\SapphireTest;\n\nclass MyServiceTest extends SapphireTest\n{\n    /**\n     * @dataProvider testValuesProvider\n     * @param string $value\n     * @param string $expected\n     */\n    public function testConfigValues($value, $expected)\n    {\n        $result = Config::withConfig(function (MutableConfigCollectionInterface $config) use ($value) {\n            // update your config\n            $config->set(MyService::class, 'some_setting', $value);\n\n            // your test code goes here and it runs with your changed config\n            return MyService::singleton()->executeSomeFunction();\n        });\n\n        // your config change no longer applies here as it's outside of callback\n\n        // assertions can be done here but also inside the callback function\n        $this->assertEquals($expected, $result);\n    }\n\n    public function testValuesProvider(): array\n    {\n        return [\n            ['test value 1', 'expected value 1'],\n            ['test value 2', 'expected value 2'],\n            ['test value 3', 'expected value 3'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SSL in All Environments in Silverstripe CMS\nDESCRIPTION: Configures the CanonicalURLMiddleware to force HTTPS connections in multiple environment types including test and dev environments.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_25\n\nLANGUAGE: yml\nCODE:\n```\n---\nAfter: '#canonicalurls'\n---\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Middleware\\CanonicalURLMiddleware:\n    properties:\n      # ...\n      EnabledEnvs:\n        - test\n        - dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Caching in Silverstripe Templates\nDESCRIPTION: Demonstrates how to use conditional caching in Silverstripe templates to optimize cache usage and prevent cluttering with redundant data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/00_Partial_Caching.md#2025-04-21_snippet_0\n\nLANGUAGE: silverstripe\nCODE:\n```\n<% cached $MenuItem.ID if $MenuItem.ID > 0 %>\n```\n\nLANGUAGE: silverstripe\nCODE:\n```\n<% cached unless $CurrentUser %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux State Management\nDESCRIPTION: Example of Redux implementation showing a counter reducer, store creation, subscription to actions, and action dispatch.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// reducer\nfunction counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    case 'DECREMENT':\n      return state - 1;\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(counter);\n// subscribe to an action\nstore.subscribe(() => {\n  const state = store.g.etState();\n  // ... do something with the state here\n});\n\n// Call an action - in this case increment the state from 0 to 1\nstore.dispatch({ type: 'INCREMENT' });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating N+1 Query Problem in PHP\nDESCRIPTION: Illustrates the N+1 query problem when querying nested relationships inside a loop using the ORM, and shows how to use eager loading to optimize queries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Team extends DataObject\n{\n    private static $has_many = [\n        'Players' => Player::class,\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$teams = Team::get();\n\nforeach ($teams as $team) {\n    foreach ($team->Players() as $player) {\n        echo $player->FirstName;\n    }\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\n# Retrieve all the teams\n# Note this is not the exact SQL that would generated it is just for demonstration\nSELECT * FROM Team;\n\n# Retrieve the players for all the teams in 20 separate queries:\nSELECT * FROM Player WHERE TeamID = 1\nSELECT * FROM Player WHERE TeamID = 2\nSELECT * FROM Player WHERE TeamID = 3\nSELECT * FROM Player WHERE TeamID = ...\n```\n\nLANGUAGE: php\nCODE:\n```\n$teams = Team::get()->eagerLoad('Players');\n```\n\nLANGUAGE: sql\nCODE:\n```\n# Retrieve all the teams\nSELECT * FROM Team\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Checks in a Silverstripe Extension\nDESCRIPTION: An example of implementing permission checks through an Extension class, which can be applied to any DataObject. This implementation denies access if the user doesn't have the CMS_ACCESS_CMSMain permission.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/07_Permissions.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\nuse SilverStripe\\Security\\Permission;\n\nclass PermissionsExtension extends Extension\n{\n    public function canView()\n    {\n        if (!Permission::check('CMS_ACCESS_CMSMain', 'any', $member)) {\n            return false;\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DataObject Inheritance Example\nDESCRIPTION: Demonstration of class inheritance in SilverStripe DataObjects with Product hierarchy.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject\n{\n    private static $table_name = 'Product';\n\n    private static $db = [\n        'SKU' => 'Text',\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nclass DigitalProduct extends Product\n{\n    private static $table_name = 'Product_Digital';\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nclass Computer extends DigitalProduct\n{\n    private static $table_name = 'Product_Digital_Computer';\n\n    private static $db = [\n        'IsPreBuilt' => 'Boolean',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Players with StartsWith and GreaterThan in PHP\nDESCRIPTION: Demonstrates how to use SearchFilter modifiers to filter players based on their first name and player number.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/06_SearchFilters.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// fetch any player whose first name starts with the letter 'S' and has a PlayerNumber greater than 10\n$players = Player::get()->filter([\n    'FirstName:StartsWith' => 'S',\n    'PlayerNumber:GreaterThan' => '10',\n]);\n\n// fetch any player whose name contains the letter 'z'\n$players = Player::get()->filterAny([\n    'FirstName:PartialMatch' => 'z',\n    'LastName:PartialMatch' => 'z',\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying Versioned Extension to DataObject in YAML\nDESCRIPTION: Shows how to add the Versioned extension to a DataObject model using YAML configuration. This enables versioning with stages (draft and published versions).\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Model\\MyStagedModel:\n  extensions:\n    - SilverStripe\\Versioned\\Versioned\n```\n\n----------------------------------------\n\nTITLE: Parameterised Inserts and Updates in Silverstripe CMS\nDESCRIPTION: Examples of parameterised insert and update operations in Silverstripe. Demonstrates how to safely insert or update data using SQLInsert and prepared queries with parameters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\Queries\\SQLInsert;\n\nSQLInsert::create('\"MyClass\"')\n    ->assign('\"Name\"', 'Daniel')\n    ->addAssignments([\n        '\"Position\"' => 'Accountant',\n        '\"Age\"' => [\n            'GREATEST(0,?,?)' => [24, 28],\n        ],\n    ])\n    ->assignSQL('\"Created\"', 'NOW()')\n    ->execute();\nDB::prepared_query(\n    'INSERT INTO \"MyClass\" (\"Name\", \"Position\", \"Age\", \"Created\") VALUES(?, ?, GREATEST(0,?,?), NOW())'\n    ['Daniel', 'Accountant', 24, 28]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Application-Wide Rate Limiting\nDESCRIPTION: Configures rate limiting middleware to be applied across all routes in the application.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/06_Rate_Limiting.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Director:\n    properties:\n      Middlewares:\n        SiteWideRateLimitMiddleware: '%$SiteWideRateLimitMiddleware'\n```\n\n----------------------------------------\n\nTITLE: Using many_many Relationships in PHP\nDESCRIPTION: Shows how to use many_many relationships in PHP, including retrieving related objects, adding objects to the relation, and setting extra fields data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$team = Team::get()->byId(1);\n\n/** @var MayManyList|ManyManyThroughList $supporters */\n$supporters = $team->Supporters();\n```\n\nLANGUAGE: php\nCODE:\n```\n$team = Team::get()->byId(1);\n$supporter = Supporter::get()->first();\n$team->Supporters()->add($supporter);\n```\n\nLANGUAGE: php\nCODE:\n```\n$team = Team::get()->byId(1);\n$supporter = Supporter::get()->first();\n$team->Supporters()->add($supporter, ['Ranking' => 1]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$team = Team::get()->byId(1);\n$supporter = Supporter::get()->first();\n$team->Supporters()->add($supporter);\n$team->Supporters()->setExtraData($supporter->ID, ['Ranking' => 2]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$team = Team::get()->byId(1);\n$supporter = Supporter::get()->first();\n$team->Supporters()->add($supporter);\n\n$joinRecord = TeamSupporter::get()->filter(['TeamID' => $team->Id, 'SupporterID' => $supporter->ID])->first();\n$joinRecord->Ranking = 2;\n$joinRecord->write();\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Fields in PHP\nDESCRIPTION: Define searchable fields for a DataObject, including specifying form fields and search filters. This example shows various ways to configure searchable fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\NumericField;\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    private static $searchable_fields = [\n       'Name' => [\n          'field' => TextField::class,\n          'filter' => 'PartialMatchFilter',\n       ],\n       'ProductCode' => [\n           'title' => 'Product code #',\n           'field' => NumericField::class,\n           'filter' => 'PartialMatchFilter',\n       ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Casting in Silverstripe Player Class\nDESCRIPTION: Demonstrates how to implement type casting for a Name property in a Player DataObject using the $casting configuration. The getName() method concatenates FirstName and LastName fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $casting = [\n        'Name' => 'Varchar',\n    ];\n\n    public function getName()\n    {\n        return $this->FirstName . ' ' . $this->LastName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing DataObjects with GraphQL\nDESCRIPTION: This GraphQL mutation publishes a SiteTree object identified by its ID. It is part of the versioned operations enabled for DataObjects in SilverStripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/05_versioning.md#2025-04-21_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation publishSiteTree(id: 123) {\\n  id\\n  title\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Injection in PHP\nDESCRIPTION: Illustrates basic dependency injection by registering and replacing services dynamically using the Injector API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MyClient;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n// A default client singleton is created and registered - could be in core code\nInjector::inst()->registerService(new ReadClient(), MyClient::class);\n$client = Injector::inst()->get(MyClient::class);\n// $client is an instance of ReadClient\n\n// somewhere later, perhaps in some application code, a new singleton is registered to replace the old one\nInjector::inst()->registerService(new WriteClient(), MyClient::class);\n$client = Injector::inst()->get(MyClient::class);\n// $client is now an instance of WriteClient\n```\n\n----------------------------------------\n\nTITLE: Duplicating DataObject with Cascade Duplicates\nDESCRIPTION: This PHP snippet illustrates how to duplicate a DataObject in SilverStripe, showing how to control the relationships that should be cascade-duplicated using the duplicate() method by passing specific values to its second argument.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$parent = ParentObject::get()->first();\n\n// Only duplicate the `$parent` record\n$dupe = $parent->duplicate(relations: false);\n\n// Duplicate the `$parent` record, and cascade duplicate the \"Children\" relation\n// (ignoring any cascade_duplicates configuration)\n$dupe = $parent->duplicate(relations: ['Children']);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Global Limits in SilverStripe YAML\nDESCRIPTION: This snippet demonstrates how to set global limits for max query nodes, depth, and complexity in SilverStripe's GraphQL configurations using a YAML file. It requires the SilverStripe framework and should be placed in the app/_config directory.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/05_recursive_or_complex_queries.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# app/_config/graphql.yml\n---\nAfter: 'graphql-schema-global'\n---\nSilverStripe\\GraphQL\\Schema\\Schema:\n  schemas:\n    '*':\n      config:\n        max_query_nodes: 250 # default 500\n        max_query_depth: 20 # default 15\n        max_query_complexity: 100 # default unlimited\n```\n\n----------------------------------------\n\nTITLE: Defining DataObject with Relations in SilverStripe PHP\nDESCRIPTION: This snippet demonstrates how to define a DataObject class with database fields and a has_one relation. It also shows how to set up summary fields using dot notation for related objects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass OtherObject extends DataObject\n{\n    private static $db = [\n        'Title' => 'Varchar',\n    ];\n}\n\nclass MyDataObject extends DataObject\n{\n    private static $db = [\n        'Name' => 'Text',\n        'Description' => 'HTMLText',\n    ];\n\n    private static $has_one = [\n        'OtherObject' => 'OtherObject',\n    ];\n\n    private static $summary_fields = [\n        'Name' => 'Name',\n        'Description.Summary' => 'Description (summary)',\n        'OtherObject.Title' => 'Other Object Title',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Properties in YAML for Silverstripe CMS\nDESCRIPTION: Demonstrates how to set configuration options for a class using YAML syntax in a configuration file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/app.yml\nApp\\MyClass:\n  option_one: false\n  option_two:\n    - Bar\n    - Baz\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Codes for Files\nDESCRIPTION: This YAML configuration snippet modifies the response codes for different file access situations in Silverstripe CMS. It allows customization for denied, missing, and redirection responses to enhance security and user experience.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_10\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Filesystem\\Flysystem\\FlysystemAssetStore:\n  denied_response_code: 403 # The default for this is 404\n  missing_response_code: 404\n  redirect_response_code: 302\n  permanent_redirect_response_code: 301\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeWrite Hook for Player DataObject in PHP\nDESCRIPTION: This snippet demonstrates how to use the onBeforeWrite hook to ensure a Player has a valid and unique player number when being assigned to a team. It checks if the record is new or if the team has changed, and assigns a new number if necessary.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/05_Extending_DataObjects.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $db = [\n        // ...\n        'Number' => 'Int',\n    ];\n\n    private static $has_one = [\n        'Team' => Team::class,\n    ];\n\n    public function onBeforeWrite()\n    {\n        // Use $this->isInDb() to check if the record is being written to the database for the first time\n        if (!$this->isInDb() && $this->Team()->exists()) {\n            $this->Number = $this->Team()->getAvailablePlayerNumber();\n        }\n\n        // If the player changed teams\n        if ($this->isChanged('TeamID') && $this->Team()->exists()) {\n            // If the player's number is already used by someone else on this team\n            if (in_array($this->Number, $this->Team()->Players()->exclude('ID', $this->ID)->column('Number'))) {\n                // Assign a new player number\n                $this->Number = $this->Team()->getAvailablePlayerNumber();\n            }\n        }\n\n        // CAUTION: You are required to call parent::onBeforeWrite(), otherwise\n        // SilverStripe will not execute the request.\n        parent::onBeforeWrite();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TinyMCE Options in Silverstripe CMS (PHP)\nDESCRIPTION: This code demonstrates how to set TinyMCE configuration options in Silverstripe CMS. It specifically shows how to modify the 'extended_valid_elements' option to allow additional HTML tags and attributes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\n\n// Add start and type attributes for <ol>, add <embed> with all attributes.\nTinyMCEConfig::get('cms')->setOption(\n    'extended_valid_elements',\n    'img[class|src|alt|title|hspace|vspace|width|height|align|name|usemap|data*],' .\n    'iframe[src|name|width|height|align|frameborder|marginwidth|marginheight|scrolling],' .\n    'object[width|height|data|type],' .\n    'embed[src|type|pluginspage|width|height|autoplay],' .\n    'param[name|value],' .\n    'map[class|name|id],' .\n    'area[shape|coords|href|target|alt],' .\n    'ol[start|type]'\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing PermissionProvider in PageController\nDESCRIPTION: This snippet demonstrates how to implement the PermissionProvider interface in a PageController class. It defines a custom permission 'VIEW_SITE' and checks for this permission in the init() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/02_Permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace {\n    use SilverStripe\\Security\\Permission;\n    use SilverStripe\\Security\\PermissionProvider;\n    use SilverStripe\\Security\\Security;\n\n    class PageController implements PermissionProvider\n    {\n        public function init()\n        {\n            parent::init();\n            if (!Permission::check('VIEW_SITE')) {\n                Security::permissionFailure();\n            }\n        }\n\n        public function providePermissions()\n        {\n            return [\n                'VIEW_SITE' => 'Access the site',\n            ];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining has_one Relationship in Silverstripe CMS PHP\nDESCRIPTION: Demonstrates how to define a has_one relationship from Player to Team in Silverstripe CMS. This creates a TeamID column in the Player table.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $has_one = [\n        'Team' => Team::class,\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with PSR-3 Logger in Silverstripe\nDESCRIPTION: Examples of basic logging operations using the PSR-3 compatible LoggerInterface accessed via Injector. Shows logging at different severity levels.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LoggerInterface;\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\Security\\Security;\n\nInjector::inst()->get(LoggerInterface::class)->info('User has logged in: ID #' . Security::getCurrentUser()->ID);\nInjector::inst()->get(LoggerInterface::class)->debug('Query executed: ' . $sql);\nInjector::inst()->get(LoggerInterface::class)->error('Something went wrong, but let\\'s continue on...');\n```\n\n----------------------------------------\n\nTITLE: Using Debug Utilities in Silverstripe CMS - PHP\nDESCRIPTION: Demonstrates the usage of Debug and Backtrace classes for advanced debugging in Silverstripe CMS. Shows how to inspect variables, print debug messages, and generate call stacks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Dev\\Backtrace;\nuse SilverStripe\\Dev\\Debug;\n\nDebug::show($myVariable);\n// similar to print_r($myVariable) but shows it in a more useful format.\n\nDebug::message(\"Wow, that's great\");\n// prints a short debugging message.\n\nBacktrace::backtrace();\n// prints a calls-stack\n```\n\n----------------------------------------\n\nTITLE: Custom Application Actions in Silverstripe CMS (PHP)\nDESCRIPTION: This example demonstrates how to execute custom application actions using the `Application::execute()` method in Silverstripe CMS.  It sets up a request, session, and controller, but leaves the application in a 'ready' state without performing any routing. Dependencies include CLIRequestBuilder, TestKernel, HTTPApplication, HTTPRequest and Controller.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/16_Execution_Pipeline/03_App_Object_and_Kernel.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$request = CLIRequestBuilder::createFromEnvironment();\n$kernel = new TestKernel(BASE_PATH);\n$app = new HTTPApplication($kernel);\n$app->execute($request, function (HTTPRequest $request) {\n    // Start session and execute\n    $request->getSession()->init();\n\n    // Set dummy controller\n    $controller = Controller::create();\n    $controller->setRequest($request);\n    $controller->pushCurrent();\n    $controller->doInit();\n}, true);\n\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Silverstripe CMS in PHP\nDESCRIPTION: Illustrates the PHP bootstrapping process to set up Silverstripe CMS, including setting constants, constructing core objects, and passing requests to the application. This snippet highlights the inclusion of composer autoload, setting up the Kernel and HTTPApplication, and middleware considerations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/16_Execution_Pipeline/index.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\\nrequire 'vendor/autoload.php';\\n\\nuse SilverStripe\\Control\\HTTPRequest;\\nuse SilverStripe\\Control\\Director;\\nuse SilverStripe\\Core\\Kernel;\\n\\n// Construct HTTPRequest\\n$request = new HTTPRequest();\\n\\n// Construct Kernel and HTTPApplication\\n$kernel = new Kernel();\\n$app = new HTTPApplication($kernel);\\n\\n// Add middleware and handle request\\n$response = $app->handle($request);\\n$response->output();\n```\n\n----------------------------------------\n\nTITLE: Setting Asset Visibility During File Storage in Silverstripe CMS\nDESCRIPTION: Code snippet demonstrating how to write content to a protected asset store in Silverstripe CMS. This example uses the AssetStore singleton to set content from a string with protected visibility.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$store = singleton(AssetStore::class);\n$store->setFromString('My protected content', 'my-folder/my-file.jpg', null, null, [\n    'visibility' => AssetStore::VISIBILITY_PROTECTED,\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Controller Redirection in SilverStripe\nDESCRIPTION: Demonstrates various redirection methods in a SilverStripe controller including local path redirects, absolute URL redirects, and back redirects. Shows how to return HTTPResponse objects for different redirection scenarios.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/04_Redirection.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPResponse;\n\nclass MyController extends Controller\n{\n    // ...\n\n    public function someMethod(): HTTPResponse\n    {\n        // redirect to Page::goherenow(), i.e.on the contact-us page this will redirect to /contact-us/goherenow/\n        return $this->redirect($this->Link('goherenow'));\n\n        // redirect to the URL on www.example.com/goherenow/ assuming your website is hosted at www.example.com\n        // (note the leading slash)\n        return $this->redirect('/goherenow');\n\n        // redirect to https://example.com (assuming that is an external website URL)\n        return $this->redirect('https://example.com');\n\n        // go back to the previous page\n        return $this->redirectBack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling during File Conversion in PHP\nDESCRIPTION: This PHP snippet demonstrates exception handling during the file conversion process. It catches exceptions from the Intervention Image library and wraps them in a `FileConverterException` to provide a consistent error handling mechanism.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    // ...\n} catch (ImageException $e) {\n    throw new FileConverterException('Failed to convert: ' . $e->getMessage(), $e->getCode(), $e);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Preview Mode in SilverStripe CMS using JavaScript\nDESCRIPTION: This JavaScript snippet shows how to retrieve the current preview mode in SilverStripe CMS using the entwine API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n$('.cms-container').entwine('.ss').getLayoutOptions().mode;\n```\n\n----------------------------------------\n\nTITLE: Configuring Silverstripe environment variables in Bash\nDESCRIPTION: This snippet shows the content of a .env file for Silverstripe. It includes database connection details, admin credentials, and environment type. Users should replace placeholders with their specific values.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSS_DATABASE_CLASS=\"MySQLDatabase\"\nSS_DATABASE_NAME=\"<database>\"\nSS_DATABASE_SERVER=\"localhost\"\nSS_DATABASE_USERNAME=\"<user>\"\nSS_DATABASE_PASSWORD=\"<password>\"\nSS_DEFAULT_ADMIN_USERNAME=\"admin\"\nSS_DEFAULT_ADMIN_PASSWORD=\"password\"\nSS_ENVIRONMENT_TYPE=\"<dev|test|live>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing CSV Import Controller in SilverStripe PHP\nDESCRIPTION: This code snippet defines a custom controller class 'MyController' that extends SilverStripe's Controller. It creates a form for CSV file upload and processes the uploaded file using CsvBulkLoader. The controller handles form submission, imports data, and provides feedback on the import process.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/How_Tos/Import_CSV_through_a_Controller.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse App\\Model\\MyDataObject;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Dev\\CsvBulkLoader;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\FieldsValidator;\nuse SilverStripe\\Forms\\FileField;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\n\nclass MyController extends Controller\n{\n    private static $url_segment = 'my_controller';\n\n    private static $allowed_actions = [\n        'getForm',\n    ];\n\n    private static $url_handlers = [\n        'Form' => 'getForm',\n    ];\n\n    protected $template = 'BlankPage';\n\n    public function getForm()\n    {\n        $form = Form::create(\n            $this,\n            'Form',\n            FieldList::create(\n                FileField::create('CsvFile', false)\n            ),\n            FieldList::create(\n                FormAction::create('doUpload', 'Upload')\n            ),\n            FieldsValidator::create()\n        );\n        return $form;\n    }\n\n    public function doUpload($data, $form)\n    {\n        $loader = CsvBulkLoader::create(MyDataObject::class);\n        $results = $loader->load($_FILES['CsvFile']['tmp_name']);\n        $messages = [];\n\n        if ($results->CreatedCount()) {\n            $messages[] = sprintf('Imported %d items', $results->CreatedCount());\n        }\n\n        if ($results->UpdatedCount()) {\n            $messages[] = sprintf('Updated %d items', $results->UpdatedCount());\n        }\n\n        if ($results->DeletedCount()) {\n            $messages[] = sprintf('Deleted %d items', $results->DeletedCount());\n        }\n\n        if (!$messages) {\n            $messages[] = 'No changes';\n        }\n\n        $form->sessionMessage(implode(', ', $messages), 'good');\n\n        return $this->redirectBack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Special YAML Syntax for Injector\nDESCRIPTION: Demonstrates the use of the %$ prefix in YAML to fetch items via the Injector, allowing for easy configuration of dependencies and constructor arguments.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  App\\Services\\MediumQueuedJobService:\n    properties:\n      queueRunner: '%$App\\Tasks\\Engines\\MediumQueueAsyncRunner'\n\n  League\\Flysystem\\Filesystem.protected:\n    class: League\\Flysystem\\Filesystem\n    constructor:\n      FilesystemAdapter: '%$SilverStripe\\Assets\\Flysystem\\ProtectedAdapter'\n```\n\n----------------------------------------\n\nTITLE: Customizing Versioned DataObject Permissions\nDESCRIPTION: Demonstrates how to customize permissions for a versioned DataObject by overriding the canViewVersioned method. This example restricts viewing of non-live records to admins only.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Security\\Permission;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass MyObject extends DataObject\n{\n    private static $extensions = [\n        Versioned::class,\n    ];\n\n    public function canViewVersioned($member = null)\n    {\n        // Check if site is live\n        $mode = $this->getSourceQueryParam('Versioned.mode');\n        $stage = $this->getSourceQueryParam('Versioned.stage');\n        if ($mode === 'stage' && $stage === Versioned::LIVE) {\n            return true;\n        }\n\n        // Only admins can view non-live records\n        return Permission::checkMember($member, 'ADMIN');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes in Silverstripe CMS DataObject\nDESCRIPTION: Demonstrates various ways to define indexes on a DataObject in Silverstripe CMS, including simple column indexes and complex multi-column indexes with different types.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/12_Indexes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    private static $indexes = [\n        '<column-name>' => true,\n        '<index-name>' => [\n            'type' => '<type>',\n            'columns' => ['<column-name>', '<other-column-name>'],\n        ],\n        '<index-name>' => ['<column-name>', '<other-column-name>'],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Team Class with Relationships in PHP\nDESCRIPTION: Shows the definition of a Team class extending DataObject with has_many relationships to Players and Fans.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Team extends DataObject\n{\n    private static $has_many = [\n        'Players' => Player::class,\n        'Fans' => Fan::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Versions of Versioned DataObjects in Silverstripe\nDESCRIPTION: This code demonstrates how to fetch a specific historical version of a versioned DataObject by ID and version number using the Versioned class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Versioned\\Versioned;\n\n// the \"id\" parameter is the ID of the record, and the \"version\" parameter is the specific version number to fetch\n$historicalRecord = Versioned::get_version(MyRecord::class, id: 5, version: 6);\n```\n\n----------------------------------------\n\nTITLE: Modifying FormFields in Silverstripe CMS\nDESCRIPTION: Demonstrates various ways to modify form fields in a Silverstripe CMS Form, including adding, inserting, and removing fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\Tab;\nuse SilverStripe\\Forms\\TextField;\n\n$fields = $form->Fields();\n\n// add a field\n$fields->push(TextField::create(/* ... */));\n\n// insert a field before another one\n$fields->insertBefore('Email', TextField::create(/* ... */));\n\n// insert a field after another one\n$fields->insertAfter('Name', TextField::create(/* ... */));\n\n// insert a tab before the main content tab (used to position tabs in the CMS)\n$fields->insertBefore('Main', Tab::create(/* ... */));\n// Note: you need to create and position the new tab prior to adding fields via addFieldToTab()\n\n$email = $form->Fields()->dataFieldByName('Email');\n$email->setTitle('Your Email Address');\n\n$form->getFields()->removeByName('Email');\n```\n\n----------------------------------------\n\nTITLE: Adding Database Fields via Extension\nDESCRIPTION: Example of adding additional database fields and relationships through a DataExtension.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Assets\\Image;\nuse SilverStripe\\ORM\\DataExtension;\n\nclass MyMemberExtension extends DataExtension\n{\n    private static $db = [\n        'Position' => 'Varchar',\n    ];\n\n    private static $has_one = [\n        'Image' => Image::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Shortcode Provider in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom shortcode provider class in Silverstripe. It shows the method signature for a shortcode handler, including the expected parameters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\ShortCode;\n\nuse SilverStripe\\View\\Parsers\\ShortcodeParser;\n\nclass MyShortCodeProvider\n{\n    public static function myCustomShortCode(\n        array $arguments,\n        ?string $content,\n        ShortcodeParser $parser,\n        string $tagName\n    ) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RequiredFields Whitespace Configuration\nDESCRIPTION: Shows how to configure RequiredFields validation behavior for whitespace-only values using both global and instance-specific settings.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_10\n\nLANGUAGE: yml\nCODE:\n```\n# global configuration\nSilverStripe\\Forms\\RequiredFields:\n  allow_whitespace_only: false\n```\n\n----------------------------------------\n\nTITLE: Forcing SSL/HTTPS in Silverstripe CMS\nDESCRIPTION: Configures the CanonicalURLMiddleware to force HTTPS connections for improved security. By default, this only applies to the LIVE environment.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_24\n\nLANGUAGE: yml\nCODE:\n```\n---\nAfter: '#canonicalurls'\n---\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Middleware\\CanonicalURLMiddleware:\n    properties:\n      ForceSSL: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Pattern with Injector in PHP\nDESCRIPTION: Shows how to use the Injector API for the singleton pattern. It demonstrates fetching the same instance multiple times and passing constructor arguments to singletons.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MyClient;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n// Fetches MyClient as a singleton\n$object = Injector::inst()->get(MyClient::class);\n$object2 = Injector::inst()->get(MyClient::class);\n\n// resolves to true\n$object === $object2;\n\n// sets up MyClient as a singleton\n$object = Injector::inst()->get(MyClient::class, constructorArgs: [$arg1, $arg2]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Eager Loaded Nested Relationships in PHP\nDESCRIPTION: Illustrates how to access eager loaded nested relationships using nested foreach loops.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nforeach ($teams as $team) {\n    foreach ($team->Players() as $player) {\n        foreach ($player->Games() as $game) {\n            foreach ($game->Officials() as $official) {\n                // Everything will have been eager loaded at this point\n                echo $official->FirstName;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Form Factory Extension\nDESCRIPTION: PHP class extending FileFormFactory to add custom fields to the CMS interface\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/01_File_Management.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\TextareaField;\n\nclass MyFormFactoryExtension extends Extension\n{\n    public function updateFormFields(FieldList $fields)\n    {\n        $fields->insertAfter(\n            'Title',\n            TextareaField::create('Description', 'Description')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Upload Field Validator Limits\nDESCRIPTION: PHP code example showing how to set maximum file size limits on an individual UploadField\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/01_File_Management.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$field = UploadField::create('Banner');\n$validator = $field->getValidator();\n$validator->setAllowedMaxFileSize('2m');\n```\n\n----------------------------------------\n\nTITLE: Using Eager Loading in Silverstripe ORM\nDESCRIPTION: Demonstrates how to use the new eagerLoad() method to solve N+1 query problems when fetching related data. The example shows Teams and Players relationships with performance improvements over traditional ORM usage.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Regular ORM usage without eager loading\n// This would result in 21 SQL SELECT queries, 1 for Teams and 20 for Players\n$teams = Team::get();\n\n// Using the `eagerLoad()` method to eager load data from nested models (up to 3 relations deep)\n// This will result in only 2 SQL SELECT queries, 1 for Teams and 1 for Players\n$teams = Team::get()->eagerLoad('Players');\n\nforeach ($teams as $team) {\n    foreach ($team->Players() as $player) {\n        echo $player->FirstName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom FormField Validation in Silverstripe CMS\nDESCRIPTION: Example of implementing custom validation logic in a FormField subclass, demonstrating how to validate numeric input with specific constraints.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\Field;\n\nuse SilverStripe\\Forms\\NumericField;\n\nclass CustomNumberField extends NumericField\n{\n    // ...\n\n    public function validate($validator)\n    {\n        if ((int) $this->Value() === 10) {\n            $validator->validationError($this->Name(), 'This value cannot be 10');\n            return $this->extendValidationResult(false, $validator);\n        }\n\n        return $this->extendValidationResult(true, $validator);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing GridFieldConfig in PHP\nDESCRIPTION: Shows how to create a custom GridFieldConfig, add components to it, and use it to create a new GridField instance. This example demonstrates adding and configuring individual components.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\CMS\\Model\\SiteTree;\nuse SilverStripe\\Forms\\GridField\\GridField;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig;\nuse SilverStripe\\Forms\\GridField\\GridFieldDataColumns;\n\n// ...\n\n// `GridFieldConfig::create()` will create an empty configuration (no components).\n$config = GridFieldConfig::create();\n\n// add a component\n$config->addComponent(GridFieldDataColumns::create());\n\n// Update the GridField with our custom configuration\n$gridField->setConfig($config);\n// Or, more likely, create a new gridfield using our custom configuration\n$gridField = GridField::create('Pages', 'All pages', SiteTree::get(), $config);\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in SilverStripe PHP\nDESCRIPTION: Demonstrates how to execute both direct SQL queries and prepared statements using DB::query() and DB::prepared_query(). Shows proper table and column name escaping using DataObject::getSchema() and includes example of result processing.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/08_SQL_Select.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\CMS\\Model\\SiteTree;\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\DataObject;\n\n$schema = DataObject::getSchema();\n$siteTreeBaseTable = DB::get_conn()->escapeIdentifier($schema->baseDataTable(SiteTree::class));\n$showInMenusField = $schema->sqlColumnForField(SiteTree::class, 'ShowInMenus');\n\n// Use DB::query() if you don't need to pass in any parameters (values)\n$count = DB::query('SELECT COUNT(*) FROM ' . $siteTreeBaseTable)->value();\n\n// Use DB::prepared_query() if you need to pass in some parameters (values) e.g. for WHERE clauses\n$results = DB::prepared_query('DELETE FROM ' . $siteTreeBaseTable . ' WHERE ' . $showInMenusField . ' = ?', [0]);\nforeach ($results as $row) {\n    // $row is an array representing the database row, just like with SQLSelect.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Index in Silverstripe CMS DataObject\nDESCRIPTION: Shows how to create a simple index on multiple columns in a Silverstripe CMS DataObject. This example defines an index named 'MyIndexName' on the 'MyField' and 'MyOtherField' columns.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/12_Indexes.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/src/MyTestObject.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyTestObject extends DataObject\n{\n    private static $db = [\n        'MyField' => 'Varchar',\n        'MyOtherField' => 'Varchar',\n    ];\n\n    private static $indexes = [\n        'MyIndexName' => ['MyField', 'MyOtherField'],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Nested Injector Instances\nDESCRIPTION: Demonstrates how to use nest() and unnest() for temporary service overrides in test scenarios. Shows service registration and management.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\LiveService;\nuse App\\MyService;\nuse App\\TestingService;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n// Setup default service\nInjector::inst()->registerService(new LiveService(), MyService::class);\n\n// Test substitute service temporarily\nInjector::nest();\n\nInjector::inst()->registerService(new TestingService(), MyService::class);\n$service = Injector::inst()->get(MyService::class);\n// ... do something with $service\n\n// revert changes\nInjector::unnest();\n```\n\n----------------------------------------\n\nTITLE: CMS Validation Implementation\nDESCRIPTION: Demonstrates implementing custom validation in the CMS using CompositeValidator and RequiredFields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\Forms\\CompositeValidator;\nuse SilverStripe\\Forms\\RequiredFields;\nuse SilverStripe\\Forms\\TextField;\n\nclass MyPage extends Page\n{\n    private static $db = [\n        'MyRequiredField' => 'Text',\n    ];\n\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n\n        $fields->addFieldToTab(\n            'Root.Main',\n            TextField::create('MyRequiredField')->setCustomValidationMessage('You missed me.')\n        );\n    }\n\n    public function getCMSCompositeValidator(): CompositeValidator\n    {\n        $validator = parent::getCMSCompositeValidator();\n        $validator->addValidator(RequiredFields::create([\n            'MyRequiredField',\n        ]));\n        return $validator;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating GridFieldConfig Components in PHP\nDESCRIPTION: Demonstrates various ways to manipulate GridFieldConfig components, including adding components before others, adding multiple components, removing components, and fetching components for modification.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridFieldDataColumns;\nuse SilverStripe\\Forms\\GridField\\GridFieldFilterHeader;\nuse SilverStripe\\Forms\\GridField\\GridFieldToolbarHeader;\nuse SilverStripe\\Forms\\GridField\\GridFieldDeleteAction;\n\n// ...\n\n$config->addComponent(GridFieldFilterHeader::create(), GridFieldDataColumns::class);\n\n$config->addComponents(\n    GridFieldDataColumns::create(),\n    GridFieldToolbarHeader::create()\n);\n\n$config->removeComponentsByType(GridFieldDeleteAction::class);\n// or if we have a specific instance to remove:\n$config->removeComponent($componentInstance);\n\n$component = $config->getComponentByType(GridFieldFilterHeader::class)\n```\n\n----------------------------------------\n\nTITLE: Chaining List Methods in SilverStripe Templates\nDESCRIPTION: Shows how to chain multiple list methods together, filtering and then sorting the results in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_10\n\nLANGUAGE: ss\nCODE:\n```\n<ul>\n    <% loop $Children.Filter('School', 'College').Sort('Score', 'DESC') %>\n        <li>$Title</li>\n    <% end_loop %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Middleware\nDESCRIPTION: Adds middleware to the logging service to send critical errors to a third-party logger. It checks the error type and sends the message if it's critical, then calls the next middleware in the chain.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport thirdPartyLogger from 'third-party-logger';\n\nconst addLoggingMiddleware = (next) => (error) => {\n  if (error.type === LoggingService.CRITICAL) {\n    thirdpartyLogger.send(error.message);\n  }\n  return next(error);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Versioned Banner DataObject\nDESCRIPTION: Demonstrates how to set up a Banner class with versioning support and ownership of Image objects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse App\\PageType\\MyPage;\nuse SilverStripe\\Assets\\Image;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass Banner extends DataObject\n{\n    private static $extensions = [\n        Versioned::class,\n    ];\n\n    private static $has_one = [\n        'Parent' => MyPage::class,\n        'Image' => Image::class,\n    ];\n\n    private static $owns = [\n        'Image',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Logging with Silverstripe (YAML)\nDESCRIPTION: This snippet illustrates how to set different logging configurations for development and live environments in Silverstripe CMS using YML. It defines dependency injection settings for handlers like 'DisplayErrorHandler' and 'LogFileHandler'. Key parameters include 'environment' for conditional configuration and handlers with their respective formatters. The configuration relies on the Monolog library for formatting and streaming logs. It requires Silverstripe CMS with dependency injecting enabled.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\n---\\nName: dev-errors\\nOnly:\\n  environment: dev\\n---\\nSilverStripe\\Core\\Injector\\Injector:\\n  Psr\\Log\\LoggerInterface.errorhandler:\\n    calls:\\n      pushMyDisplayErrorHandler: [ pushHandler, [ '%$DisplayErrorHandler' ]]\\n  DisplayErrorHandler:\\n    class: SilverStripe\\Logging\\HTTPOutputHandler\\n    constructor:\\n      - \"notice\"\\n    properties:\\n      Formatter: '%$SilverStripe\\Logging\\DetailedErrorFormatter'\\n      CLIFormatter: '%$SilverStripe\\Logging\\DetailedErrorFormatter'\\n---\\nName: live-errors\\nExcept:\\n  environment: dev\\n---\\nSilverStripe\\Core\\Injector\\Injector:\\n  # Default logger implementation for general purpose use\\n  Psr\\Log\\LoggerInterface:\\n    calls:\\n      # Save system logs to file\\n      pushFileLogHandler: [ pushHandler, [ '%$LogFileHandler' ]]\\n  # Core error handler for system use\\n  Psr\\Log\\LoggerInterface.errorhandler:\\n    calls:\\n      # Save errors to file\\n      pushFileLogHandler: [ pushHandler, [ '%$LogFileHandler' ]]\\n      # Format and display errors in the browser/CLI\\n      pushMyDisplayErrorHandler: [ pushHandler, [ '%$DisplayErrorHandler' ]]\\n  # Custom handler to log to a file\\n  LogFileHandler:\\n    class: Monolog\\Handler\\StreamHandler\\n    constructor:\\n      - \"/var/www/silverstripe.log\"\\n      - \"notice\"\\n    properties:\\n      Formatter: '%$Monolog\\Formatter\\HtmlFormatter'\\n      ContentType: text/html\\n  # Handler for displaying errors in the browser or CLI\\n  DisplayErrorHandler:\\n    class: SilverStripe\\Logging\\HTTPOutputHandler\\n    constructor:\\n      - \"error\"\\n    properties:\\n      Formatter: '%$SilverStripe\\Logging\\DebugViewFriendlyErrorFormatter'\\n  # Configuration for the \"friendly\" error formatter\\n  SilverStripe\\Logging\\DebugViewFriendlyErrorFormatter:\\n    class: SilverStripe\\Logging\\DebugViewFriendlyErrorFormatter\\n    properties:\\n      Title: \"There has been an error\"\\n      Body: \"The website server has not been able to respond to your request\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Templates for Forms and Fields in Silverstripe CMS\nDESCRIPTION: This snippet demonstrates how to set custom templates for both Form and FormField instances using the setTemplate method. This allows developers to customize the HTML output of forms and form fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/03_Form_Templates.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$form = Form::create(/* ... */);\n$form->setTemplate('MyCustomFormTemplate');\n\n// or, just a field\n$field = TextField::create(/* ... */);\n$field->setTemplate('MyCustomTextField');\n```\n\n----------------------------------------\n\nTITLE: Checking CMS Access Permission\nDESCRIPTION: This snippet shows how to check if a user has access to the CMS by using the Permission::checkMember() method with the 'CMS_ACCESS' permission code.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/02_Permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Security\\Permission;\n\nif (Permission::checkMember($member, 'CMS_ACCESS')) {\n    //user can access the CMS\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Defining CMS Fields in Silverstripe (PHP)\nDESCRIPTION: This example demonstrates how to manually define CMS fields for a DataObject in Silverstripe CMS without using scaffolding. It uses the mainTabOnly option and defines custom form fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\CheckboxSetField;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\Forms\\TextareaField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    // ...\n\n    private static array $scaffold_cms_fields_settings = [\n        'mainTabOnly' => true,\n    ];\n\n    public function getCMSFields()\n    {\n        $this->beforeUpdateCMSFields(function (FieldList $fields) {\n            $fields->addFieldsToTab('Root.Main', [\n                CheckboxSetField::create('IsActive', 'Is active?'),\n                TextField::create('Title'),\n                TextareaField::create('Content')->setRows(5),\n            ]);\n        });\n\n        return parent::getCMSFields();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ValidationException in Form Actions\nDESCRIPTION: Shows how to handle validation errors that occur during form processing by throwing ValidationException with custom error messages.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\ORM\\ValidationException;\n\nclass MyController extends Controller\n{\n    public function doSave($data, $form)\n    {\n        $success = $this->sendEmail($data);\n\n        // Example error handling\n        if (!$success) {\n            throw new ValidationException('Sorry, we could not email to that address');\n        }\n\n        // If success\n        return $this->redirect($this->Link('success'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Form Submission with Custom Events in Silverstripe\nDESCRIPTION: This client-side JavaScript code involves submitting form data via AJAX and handling the AJAX response. It uses jQuery for DOM manipulation and event handling, particularly focusing on dynamically loading and displaying data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n$(\\'.autocomplete input\\').on(\\'change\\', function () {\\n  const resultsEl = $(this).siblings(\\'.results\\');\\n  resultsEl.load(\\n    // get form action, using the jQuery.metadata plugin\\n    $(this).parent().metadata().url,\\n    // submit all form values\\n    $(this.form).serialize(),\\n    // callback after data is loaded\\n    (data, status) => {\\n      resultsEl.show();\\n      // get all record IDs from the new HTML\\n      const ids = jQuery(\\'.results\\').find(\\'li\\').map(\\n        () => $(this).attr(\\'id\\').replace(/Record\\-/, \\'\\')\\n      );\\n    }\\n  );\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing GridField Form View\nDESCRIPTION: Implementation of CMS fields for viewing data in a form within GridField, including field definitions and form components setup.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/07_Using_GridField_With_Arbitrary_Data.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Data;\n\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\HiddenField;\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\View\\ViewableData;\n\nclass DataRepresentation extends ViewableData\n{\n    // ...\n\n    public function getCMSFields()\n    {\n        return FieldList::create([\n            HiddenField::create('ID'),\n            TextField::create('FieldName', 'View Field Label'),\n        ]);\n    }\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridFieldDetailForm;\nuse SilverStripe\\Forms\\GridField\\GridFieldViewButton;\n\n$gridField->getConfig()->addComponents([\n    GridFieldViewButton::create(),\n    GridFieldDetailForm::create(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring GridFieldConfig_RelationEditor in PHP\nDESCRIPTION: Demonstrates how to set up a GridFieldConfig_RelationEditor for handling record relationships in SilverStripe GridField.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig_RelationEditor;\n\n// ...\n\n$config = GridFieldConfig_RelationEditor::create();\n$gridField->setConfig($config);\n```\n\n----------------------------------------\n\nTITLE: Querying Page Types Using GraphQL Unions with Inline Fragments\nDESCRIPTION: Example GraphQL query demonstrating how to use inline fragments to query different fields across multiple page types in a union.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readPages {\n    nodes {\n      ... on PageInterface {\n        id # in theory, this common field could be done on DataObjectInterface, but that gets a bit verbose\n        title\n        content\n      }\n      ... on EventsPageInterface {\n        numberOfTickets\n      }\n      ... on BlogPage {\n        date\n      }\n      ... on WebinarPage {\n        zoomLink\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Fields in a Silverstripe DataObject\nDESCRIPTION: Example of defining a Player DataObject with various field types including Int, Varchar, Text, and Date. This demonstrates the basic structure for defining database columns in a Silverstripe CMS model.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Player.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $db = [\n        'PlayerNumber' => 'Int',\n        'FirstName' => 'Varchar(255)',\n        'LastName' => 'Text',\n        'Birthday' => 'Date',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SilverStripe DataObject with Versioning Capabilities\nDESCRIPTION: This class defines a MyObject DataObject in SilverStripe, utilizing the Versioned extension to manage versioning stages. It includes methods for generating different URL links, ensuring URL stage consistency, and demonstrates injecting controllers to handle link generation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/MyObject.php\nnamespace App\\Model;\n\nuse App\\Control\\MyObjectController;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass MyObject extends DataObject\n{\n    private static $extensions = [\n        Versioned::class,\n    ];\n    // ...\n\n    public function Link()\n    {\n        return $this->getController()->Link($this->ID);\n    }\n\n    public function CustomLink()\n    {\n        $link = Controller::join_links('custom-route', $this->ID, '?rand=' . rand());\n        // Calls VersionedStateExtension->updateLink() which ensures the correct stage is included if necessary\n        // updates $link by reference\n        $this->extend('updateLink', $link);\n        return $link;\n    }\n\n    public function LiveLink()\n    {\n        // Force live link even when current view is in draft mode\n        return Controller::join_links($this->getController()->Link($this->ID), '?stage=Live');\n    }\n\n    public function getController()\n    {\n        return Injector::inst()->get(MyObjectController::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing SQL SELECT in SilverStripe ORM\nDESCRIPTION: Demonstrates how to use SQLSelect to perform a SELECT operation, joining tables and counting related records. It shows how to construct a query to count players in a team.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/08_SQL_Select.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\Queries\\SQLSelect;\n\n$schema = DataObject::getSchema();\n$playerTableName = DB::get_conn()->escapeIdentifier($schema->baseDataTable(Player::class));\n$teamTableName = DB::get_conn()->escapeIdentifier($schema->baseDataTable(Team::class));\n$playerIdField = $schema->sqlColumnForField(Player::class, 'ID');\n$playerTeamIdField = $schema->sqlColumnForField(Player::class, 'TeamID');\n$teamIdField = $schema->sqlColumnForField(Team::class, 'ID');\n\n$sqlQuery = new SQLSelect();\n$sqlQuery->setFrom($playerTableName);\n$sqlQuery->addSelect('COUNT(' . $playerIdField . ')');\n$sqlQuery->addWhere([$teamIdField => 99]);\n$sqlQuery->addLeftJoin('Team', $teamIdField ' = ' . $playerTeamIdField);\n$count = $sqlQuery->execute()->value();\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in SilverStripe Controllers\nDESCRIPTION: Examples showing how to access URL parameters from the request object within a controller for different URL patterns. Demonstrates retrieving all parameters as an array or individual parameters by name.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$params = $this->getRequest()->params();\n\n// returns the following array:\n$params = [\n    'Action' => null,\n    'ID' => null,\n    'Name' => null,\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Properties with Callbacks in SilverStripe FixtureFactory\nDESCRIPTION: Demonstrates how to use anonymous functions to dynamically set property values based on other data or generate random values. Functions receive the object, data, and fixtures as parameters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Security\\Member;\n\n$factory->define(\n    Member::class,\n    [\n        'Email' => function ($obj, $data, $fixtures) {\n            if (isset($data['FirstName'])) {\n                $obj->Email = strtolower($data['FirstName']) . '@example.com';\n            }\n        },\n        'Score' => function ($obj, $data, $fixtures) {\n            $obj->Score = rand(0, 10);\n        },\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Defining has_many Relationship in Silverstripe CMS PHP\nDESCRIPTION: Shows how to define a has_many relationship from Team to Player in Silverstripe CMS. This does not create a new database column but provides a method to access related Players.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Team extends DataObject\n{\n    private static $db = [\n        'Title' => 'Varchar',\n    ];\n\n    private static $has_many = [\n        'Players' => Player::class,\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom validation for form fields - React\nDESCRIPTION: In this snippet, a custom validation logic is added based on the value of 'Country'. It validates that the postal code meets specific length requirements depending on whether the country is 'US' or not.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Forms.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform(\n  'my-validation',\n  (updater) => {\n    updater.form.addValidation(\n      'AssetAdmin.*',\n      (values, errors) => {\n        const requiredLength = values.Country === 'US' ? 5 : 4;\n        if (!values.Country || !values.PostalCode) {\n          return null;\n        }\n        return {\n          ...errors,\n          PostalCode: values.PostalCode.length !== requiredLength ? 'Invalid postal code' : null,\n        };\n      }\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Routing for SilverStripe Controllers\nDESCRIPTION: This YAML configuration file sets up URL routing for the MyObjectController in SilverStripe. It associates the custom URL 'my-objects/$ID' with the controller, allowing dynamic routing based on object IDs. Requires SilverStripe to read YAML configurations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_28\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/routes.yml\nSilverStripe\\Control\\Director:\n  rules:\n    'my-objects/$ID': 'App\\Control\\MyObjectController'\n```\n\n----------------------------------------\n\nTITLE: Adding FormFields to a Silverstripe CMS Form\nDESCRIPTION: Shows how to create and add form fields to a Silverstripe CMS Form instance.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\EmailField;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\TextField;\n\n$fields = FieldList::create(\n    TextField::create('Name'),\n    EmailField::create('Email')\n);\n\n$form = Form::create($controller, 'MethodName', $fields, ...);\n\n// or use `setFields`\n$form->setFields($fields);\n\n// to fetch the current fields..\n$fields = $form->getFields();\n```\n\n----------------------------------------\n\nTITLE: Default composer.json Configuration for Silverstripe CMS Project\nDESCRIPTION: This snippet shows the default structure of a composer.json file for a Silverstripe CMS project. It includes required dependencies, development dependencies, project files, and configuration settings.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"silverstripe/installer\",\n    \"type\": \"silverstripe-recipe\",\n    \"description\": \"The SilverStripe Framework Installer\",\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"silverstripe/recipe-plugin\": \"^2\",\n        \"silverstripe/vendor-plugin\": \"^2\",\n        \"silverstripe/recipe-cms\": \"~5.0.0@stable\",\n        \"silverstripe-themes/simple\": \"~3.2.0\",\n        \"silverstripe/login-forms\": \"~5.0.0@stable\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.5\"\n    },\n    \"extra\": {\n        \"project-files-installed\": [\n            \".htaccess\",\n            \"app/.htaccess\",\n            \"app/_config.php\",\n            \"app/_config/mimevalidator.yml\",\n            \"app/_config/mysite.yml\",\n            \"app/src/Page.php\",\n            \"app/src/PageController.php\"\n        ],\n        \"public-files-installed\": [\n            \".htaccess\",\n            \"index.php\",\n            \"web.config\"\n        ]\n    },\n    \"config\": {\n        \"process-timeout\": 600,\n        \"allow-plugins\": {\n            \"composer/installers\": true,\n            \"silverstripe/recipe-plugin\": true,\n            \"silverstripe/vendor-plugin\": true\n        }\n    },\n    \"prefer-stable\": true,\n    \"minimum-stability\": \"dev\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Model Fields in GraphQL\nDESCRIPTION: Defines GraphQL schema configuration for a Product model, including custom field types and resolvers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/01_adding_dataobjects_to_the_schema.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Model\\Product:\n  fields:\n    title:\n      type: String\n      resolver: ['App\\GraphQL\\Resolver\\ProductResolver', 'resolveSpecialTitle']\n    'price(currency: String = \"NZD\")': true\n```\n\n----------------------------------------\n\nTITLE: Testing Email Assertions in Silverstripe CMS\nDESCRIPTION: Example showing how to use SapphireTest's assertEmailSent method to verify that emails are sent with correct parameters. Demonstrates both exact string matching and regular expression pattern matching.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/How_Tos/03_Testing_Email.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->assertEmailSent($to, $from, $subject, $body);\n\n// to assert that the email is sent to the correct person\n$this->assertEmailSent('someone@example.com', null, '/th.*e$/');\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Versions of a DataObject in Silverstripe\nDESCRIPTION: This snippet shows how to retrieve all versions of a specific DataObject record as specialized Versioned_Version objects, which include additional version metadata.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// stage doesn't matter here\n$record = MyRecord::get()->byID(99);\n$versions = $record->allVersions();\n// instance of Versioned_Version\n$version = $versions->First()->Version;\n```\n\n----------------------------------------\n\nTITLE: Redeclaring Parent Action Methods in Silverstripe Controller\nDESCRIPTION: Demonstrates how to redeclare an action method in a subclass when adding access checks for actions declared in a parent class. This is necessary when the parent class doesn't declare access checks for that action.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/03_Access_Control.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass MyController extends Controller\n{\n    // ...\n\n    public function someAction(HTTPRequest $request)\n    {\n        return parent::someAction($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a New Authenticator in Silverstripe CMS\nDESCRIPTION: Demonstrates how to register a custom authenticator using YAML configuration in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/03_Authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Security\\Security:\n    properties:\n      Authenticators:\n        myauthenticator: '%$App\\Authenticator\\MyAuthenticator'\n```\n\n----------------------------------------\n\nTITLE: Configuring Scaffolding Options in Silverstripe (PHP)\nDESCRIPTION: This snippet demonstrates how to configure scaffolding options for CMS fields in a Silverstripe DataObject. It shows how to exclude fields, specify custom field classes, and disable relation scaffolding.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\HiddenField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    // ...\n\n    private static array $scaffold_cms_fields_settings = [\n        'includeRelations' => false,\n        'ignoreFields' => [\n            'MyDataOnlyField',\n        ],\n        'fieldClasses' => [\n            'MyHiddenField' => HiddenField::class,\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Versioned DataObjects in Silverstripe\nDESCRIPTION: This snippet shows how to roll back versioned DataObjects to previous states, either to a specific version or to the live version, using rollbackSingle() and rollbackRecursive() methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Versioned\\Versioned;\n\n$record = MyRecord::get()->byID(99);\n\n// This will take the current live version of a record - and all it's associated (owned) records - and copy it to the\n// \"Stage\" stage. This is equivalent to dismissing any draft work and reverting to what was last published.\n$record->rollbackRecursive(Versioned::LIVE);\n\n// This will restore a specific version of the record to \"Stage\" without affecting any owned records.\n$versionToRestore = 10;\n$record->rollbackSingle($versionToRestore);\n\n// The live version of the record won't be affected unless you publish the record again.\n$record->publishRecursive();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom URL Handlers in SilverStripe PHP Controller\nDESCRIPTION: Demonstrates how to define custom URL handlers within a controller class to handle multiple route mappings.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Control/TeamController.php\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n\nclass TeamController extends Controller\n{\n    private static $url_segment = 'teams';\n\n    private static $allowed_actions = [\n        'payroll',\n    ];\n\n    private static $url_handlers = [\n        'staff/$ID/$Name' => 'payroll',\n        'coach/$ID/$Name' => 'payroll',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SilverStripe Controller with Versioned Links\nDESCRIPTION: Defines a MyObjectController in SilverStripe to manage routing for MyObject instances. It includes logic for generating view links and ensures versioned URLs are accurate through extension hooks. It assumes use of SilverStripe's Controller and HTTPRequest classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Control/MyObjectController.php\nnamespace App\\Control;\n\nuse App\\Model\\MyObject;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass MyObjectController extends Controller\n{\n    private static $url_segment = 'my-objects';\n\n    public function index(HTTPRequest $request)\n    {\n        $obj = MyObject::get()->byID($request->param('ID'));\n        if (!$obj) {\n            return $this->httpError(404);\n        }\n\n        // Construct view\n        $html = sprintf('<a href=\"%s\">%s</a>', $obj->Link(), $obj->ID);\n\n        return $html;\n    }\n\n    public function Link($action = null)\n    {\n        // Construct link with graceful handling of GET parameters\n        $link = Controller::join_links('my-objects', $action);\n\n        // Allow Versioned and other extension to update $link by reference.\n        // Calls VersionedStateExtension->updateLink() which ensures the correct stage is included if necessary\n        $this->extend('updateLink', $link, $action);\n\n        return $link;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Field-Level Resolution Logic in MyResolver\nDESCRIPTION: This PHP snippet shows how to handle field-level resolution in the MyResolver class using the ResolveInfo parameter. It identifies the field name and executes conditional logic to determine what data to return.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/03_resolver_discovery.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Resolver;\n\nuse GraphQL\\Type\\Definition\\ResolveInfo;\n\nclass MyResolver\n{\n    // ...\n\n    public static function resolveCountryFields($obj, $args, $context, ResolveInfo $info)\n    {\n        $fieldName = $info->fieldName;\n        if ($fieldName === 'image') {\n            return $obj->getImage()->getURL();\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SecurityToken Hidden Field in HTML\nDESCRIPTION: Shows the rendered HTML for the SecurityToken hidden field in a Silverstripe CMS form. This field is automatically added to protect against CSRF attacks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/04_Form_Security.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" name=\"SecurityID\" value=\"c443076989a7f24cf6b35fe1360be8683a753e2c\" class=\"hidden\"  />\n```\n\n----------------------------------------\n\nTITLE: Querying Polymorphic Types with GraphQL\nDESCRIPTION: Demonstrates how to query polymorphic types in GraphQL when dealing with inheritance in DataObject models. Interfaces and inline fragments are used to handle fields specific to certain types. Common fields are queried without special syntax while specific fields require inline fragments.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readPages {\n    nodes {\n      title\n      content\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readPages {\n    nodes {\n      title\n      content\n      date # fails!\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readPages {\n    nodes { # <--- [PageInterface]\n      title\n      content\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readPages {\n    nodes {\n      title # Common field\n      content # Common field\n      ... on HomePage {\n        heroImage {\n          url\n        }\n      }\n      ... on BlogPage {\n        date\n        author {\n          firstName\n        }\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readPages {\n    nodes {\n      title # Common to all types\n      content # Common to all types\n      ... on EventPageInterface {\n        # Common fields for WebinarPage, ConferencePage, EventPage\n        numberOfTickets\n        featuredSpeaker {\n          firstName\n          email\n        }\n      }\n      ... on WebinarPage {\n        zoomLink\n      }\n      ... on ConferencePage {\n        venueSize\n      }\n      ... on BlogPage {\n        date\n        author {\n          firstName\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HistoryViewerField to DataObject CMS Fields in SilverStripe\nDESCRIPTION: PHP code showing how to add a HistoryViewerField to a model's CMS interface. This field provides a UI for viewing and interacting with the version history of the object.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\VersionedAdmin\\Forms\\HistoryViewerField;\n\npublic function getCMSFields()\n{\n    $fields = parent::getCMSFields();\n    $fields->addFieldToTab('Root.History', HistoryViewerField::create('MyObjectHistory'));\n    return $fields;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Search Form in a SilverStripe Controller\nDESCRIPTION: This snippet shows a complex form definition within a controller class. It creates a search form with various field types and form actions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/01_Encapsulate_Forms.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/PageType/SearchPageController.php\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Forms\\CheckboxSetField;\nuse SilverStripe\\Forms\\CompositeField;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\HeaderField;\nuse SilverStripe\\Forms\\NumericField;\nuse SilverStripe\\Forms\\OptionsetField;\nuse SilverStripe\\Forms\\RequiredFields;\n\nclass SearchPageController extends PageController\n{\n    // ...\n\n    public function searchForm()\n    {\n        $fields = FieldList::create(\n            HeaderField::create('Header', 'Step 1. Basics'),\n            OptionsetField::create('Type', '', [\n                'foo' => 'Search Foo',\n                'bar' => 'Search Bar',\n                'baz' => 'Search Baz',\n            ]),\n            CompositeField::create(\n                HeaderField::create('Header2', 'Step 2. Advanced '),\n                CheckboxSetField::create('Foo', 'Select Option', [\n                    'qux' => 'Search Qux',\n                ]),\n                CheckboxSetField::create('Category', 'Category', [\n                    'Foo' => 'Foo',\n                    'Bar' => 'Bar',\n                ]),\n                NumericField::create('Minimum', 'Minimum'),\n                NumericField::create('Maximum', 'Maximum')\n            )\n        );\n\n        $actions = FieldList::create(\n            FormAction::create('doSearchForm', 'Search')\n        );\n\n        $required = RequiredFields::create([\n            'Type',\n        ]);\n\n        $form = Form::create($this, __FUNCTION__, $fields, $actions, $required);\n        $form->setFormMethod('GET');\n\n        $form->addExtraClass('no-action-styles');\n        $form->disableSecurityToken();\n\n        return $form;\n    }\n\n    public function doSearchForm(array $data, Form $form)\n    {\n        // Do something with the data, return results, or redirect\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolver Method for a GraphQL Union\nDESCRIPTION: This PHP snippet contains a resolver method `resolveArticleUnion` defined in the `MyResolver` class. It determines the type of an `Article` object based on its category, returning 'Blog' or 'NewsStory' accordingly. The method ensures that articles are correctly classified into their specific type at runtime.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/07_enums_unions_and_interfaces.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\GraphQL\\Resolver;\n\nuse App\\Model\\Article;\n\nclass MyResolver\n{\n    public static function resolveArticleUnion(Article $object): string\n    {\n        if ($object->category === 'blogs') {\n            return 'Blog';\n        }\n        if ($object->category === 'news') {\n            return 'NewsStory';\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Instance in Silverstripe CMS\nDESCRIPTION: Demonstrates how to create a Form instance with fields, actions, and a validator in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\Form;\n\n$form = Form::create(\n    // the Controller to render this form on\n    $controller,\n    // name of the method that returns this form on the controller\n    $name,\n    // FieldList of FormField instances\n    $fields,\n    // FieldList of FormAction instances\n    $actions,\n    // optional use of Validator object\n    $validator\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Session Cookies in Silverstripe CMS\nDESCRIPTION: Sets session cookie security options including the SameSite attribute to 'Strict' and enabling the secure flag to prevent cookies from being sent over non-HTTPS connections.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_26\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Session:\n  cookie_samesite: 'Strict'\n  cookie_secure: true\n```\n\n----------------------------------------\n\nTITLE: Naming Component Middleware for Debugging\nDESCRIPTION: Illustrates how to name component middleware using the third parameter of `updater.component`. This is beneficial for debugging, as it reveals the names of each enhancement in the React Dev Tools.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// module-a/js/main.js\n(updater) => updater.component('TextField', CharacterCounter, 'CharacterCounter');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// module-b/js/main.js\n(updater) => updater.component('TextField', TextLengthChecker, 'TextLengthChecker');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TeamPageController in SilverStripe\nDESCRIPTION: Example of a controller implementation with URL segment configuration and the ability to generate relative URLs through the Link() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/01_Introduction.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n\nclass TeamPageController extends Controller\n{\n    private static $url_segment = 'teams';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Casting User Input in Silverstripe CMS Controller - PHP\nDESCRIPTION: Example demonstrating how to safely cast URL parameters and GET variables to integers in a Silverstripe CMS page controller. Shows proper type casting for database queries and calculations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse App\\Model\\CaseStudy;\nuse Page;\nuse SilverStripe\\Control\\Director;\n\nclass CaseStudyPage extends Page\n{\n    public function getCaseStudies()\n    {\n        // cast an ID from URL parameters e.g. (example.com/home/action/ID)\n        $anotherID = (int) Director::urlParam['ID'];\n\n        // perform a calculation, the prerequisite being $anotherID must be an integer\n        $calc = $anotherID + (5 - 2) / 2;\n\n        // cast the 'category' GET variable as an integer\n        $categoryID = (int) $_GET['category'];\n\n        // perform a byID(), which ensures the ID is an integer before querying\n        return CaseStudy::get()->byID($categoryID);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Different approaches to COUNT query in Silverstripe CMS\nDESCRIPTION: Demonstrates three equivalent ways to perform a simple COUNT operation: using raw SQL, the SQLSelect abstraction layer, and the ORM. Includes table name escaping for database compatibility.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/08_SQL_Select.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\Queries\\SQLSelect;\nuse SilverStripe\\Security\\Member;\n\n// Get the table for the \"Member\" class with ANSI quotes\n$memberTable = DB::get_conn()->escapeIdentifier(\n    DataObject::getSchema()->tableName(Member::class)\n);\n\n// Through raw SQL.\n$count = DB::query('SELECT COUNT(*) FROM ' . $memberTable)->value();\n\n// Through SQLSelect abstraction layer.\n$count = SQLSelect::create('COUNT(*)', $memberTable)->execute()->value();\n\n// Through the ORM.\n$count = Member::get()->count();\n```\n\n----------------------------------------\n\nTITLE: Validating URLs with Symfony Constraints in Silverstripe CMS\nDESCRIPTION: Shows how to use the ConstraintValidator class with a specific Symfony constraint (Url) to validate a URL in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/09_Validation.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\Validation\\ConstraintValidator;\nuse Symfony\\Component\\Validator\\Constraints\\Url;\n\n$isValid = ConstraintValidator::validate($url, new Url())->isValid();\n```\n\n----------------------------------------\n\nTITLE: Disabling Lazy Loading in Silverstripe Templates\nDESCRIPTION: This snippet demonstrates how to selectively disable or enable lazy loading for images within a Silverstripe template. It shows how to use the `LazyLoad()` method to control the loading attribute of an image based on a boolean value, including dynamically setting it based on a template variable.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/02_Images.md#2025-04-21_snippet_3\n\nLANGUAGE: ss\nCODE:\n```\n\"<%-- Image will be lazy loaded --%>\n$Logo\n\n<%-- Image will NOT be lazy loaded --%>\n$Logo.LazyLoad(false)\n\n<%-- We're allowing content authors to choose if the image is eager loaded--%>\n$Logo.LazyLoad($LogoLoading)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing SchemaUpdater Interface in PHP\nDESCRIPTION: This PHP code snippet shows the implementation of the `SchemaUpdater` interface. The `updateSchema` method is where you define the logic to modify the GraphQL schema. The `Schema` object provides methods for adding types, queries, mutations, and more.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/04_using_procedural_code.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"// app/src/GraphQL/MySchema.php\nnamespace App\\GraphQL;\n\nuse SilverStripe\\GraphQL\\Schema\\Interfaces\\SchemaUpdater;\nuse SilverStripe\\GraphQL\\Schema\\Schema;\n\nclass MySchema implements SchemaUpdater\n{\n    public static function updateSchema(Schema $schema): void\n    {\n        // update here\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Manually Whitelisting Protected Files in Silverstripe Controller\nDESCRIPTION: PHP code for a PageController that manually whitelists protected files for the current user in the init method. This ensures files are accessible even when caching mechanisms might prevent automatic whitelisting.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace {\n    use SilverStripe\\CMS\\Controllers\\ContentController;\n\n    class PageController extends ContentController\n    {\n        public function init()\n        {\n            parent::init();\n\n            // Whitelist the protected files on this page for the current user\n            $file = $this->File();\n            if ($file->canView()) {\n                $file->grantFile();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Nested Relationships in PHP\nDESCRIPTION: Shows how to eager load nested relationships up to three levels deep using dot notation in the eagerLoad() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$teams = Team::get()->eagerLoad('Players.Games.Officials');\n```\n\n----------------------------------------\n\nTITLE: Providing Context with provideContext HOC\nDESCRIPTION: Illustrates how to use the provideContext higher-order component to set the context for dependency injection, as an alternative to using the getContext parameter in inject().\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/components/ContextualSection.js\nimport React, { Component } from 'react';\nimport { provideContext, inject } from 'lib/Injector';\n\nclass MySection extends Component {\n  // ... section code here ...\n}\n\nexport default compose(\n  provideContext('Gallery.Search'),\n  inject(['Gallery'])\n)(MySection);\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed File Extensions in Silverstripe\nDESCRIPTION: This YAML configuration snippet is used to specify and whitelist additional file extensions allowed for upload in a Silverstripe CMS project. Adding extensions here ensures they can be stored in the asset management system.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/06_Allowed_file_types.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Assets\\File:\n  allowed_extensions:\n    - 7zip\n    - xzip\n```\n\n----------------------------------------\n\nTITLE: Manual Data Escaping in Controller Actions\nDESCRIPTION: Example of manual data escaping in a controller action. Demonstrates how to safely handle URL parameters by escaping them before using in database queries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse App\\Model\\Player;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Core\\Convert;\n\nclass MyController extends Controller\n{\n    private static $allowed_actions = ['myurlaction'];\n\n    public function myurlaction($RAW_urlParams)\n    {\n        // Pass true as the second parameter of raw2sql to quote the value safely\n        // works recursively on an array\n        $SQL_urlParams = Convert::raw2sql($RAW_urlParams, true);\n        $objs = Player::get()->where('Name = ' . $SQL_data['OtherID']);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bundled GridFieldConfig Classes in PHP\nDESCRIPTION: Shows how to use pre-configured GridFieldConfig classes like GridFieldConfig_Base, GridFieldConfig_RecordViewer, and GridFieldConfig_RecordEditor. These classes provide common configurations for different use cases.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig_Base;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig_RecordViewer;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig_RecordEditor;\n\n$config = GridFieldConfig_Base::create();\n$gridField->setConfig($config);\n\n$config = GridFieldConfig_RecordViewer::create();\n$gridField->setConfig($config);\n\n$config = GridFieldConfig_RecordEditor::create();\n$gridField->setConfig($config);\n```\n\n----------------------------------------\n\nTITLE: Initializing HTMLEditorField in Silverstripe CMS (PHP)\nDESCRIPTION: This snippet demonstrates how to add an HTMLEditorField to a DataObject in Silverstripe CMS. It creates a 'Content' field of type 'HTMLText' and adds it to the CMS fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/MyObject.php\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\HTMLEditor\\HTMLEditorField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    private static $db = [\n        'Content' => 'HTMLText',\n    ];\n\n    public function getCMSFields()\n    {\n        return FieldList::create(\n            HTMLEditorField::create('Content')\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Notes Component\nDESCRIPTION: Example of creating a React component with GraphQL integration for displaying notes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { graphql } from '@apollo/client/react/hoc';\n\nexport const Notes = ({ notes }) => (\n  <ul className=\"notes\">\n    {notes.map(note => <li key={note.id}>{note.content}</li>)}\n  </ul>\n);\n\nconst getNotesQuery = gql`\nquery ReadNotes {\n  readNotes {\n    id\n    content\n  }\n}\n`;\n\nconst apolloConfig = {\n  props({ data: { readNotes } }) {\n    return {\n      notes: readNotes || []\n    };\n  }\n};\n\nconst NotesWithData = graphql(getNotesQuery, apolloConfig)(Notes);\n\nexport default NotesWithData;\n```\n\n----------------------------------------\n\nTITLE: Restoring Archived DataObjects in Silverstripe\nDESCRIPTION: This code demonstrates how to restore archived (soft-deleted) DataObjects by retrieving them with get_including_deleted() and then writing them back to the Stage stage.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\MyRecord;\nuse SilverStripe\\Versioned\\Versioned;\n\n// This script will restore all archived entries for MyRecord.\n$allMyRecords = Versioned::get_including_deleted(MyRecord::class);\nforeach ($allMyRecords as $myRecord) {\n    if ($myRecord->isArchived()) {\n        $myRecord->write();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact Match by Selector in SilverStripe FunctionalTest\nDESCRIPTION: Asserts that the most recently queried page contains exact matches of specified content within tags matching a CSS selector. The assertion fails if any expected match is not found.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/01_Functional_Testing.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$this->assertExactMatchBySelector('#MyForm_ID p.error', [\n    'That email address is invalid.',\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Search Parameters to ModelAdmin\nDESCRIPTION: Implements a custom search context with a checkbox to filter expensive products in the ModelAdmin interface\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse App\\Model\\Product;\nuse SilverStripe\\Admin\\ModelAdmin;\nuse SilverStripe\\Forms\\CheckboxField;\n\nclass MyAdmin extends ModelAdmin\n{\n    public function getSearchContext()\n    {\n        $context = parent::getSearchContext();\n\n        if ($this->modelClass == Product::class) {\n            $context->getFields()->push(\n                CheckboxField::create('q[ExpensiveOnly]', 'Only expensive stuff')\n            );\n        }\n\n        return $context;\n    }\n\n    public function getList()\n    {\n        $list = parent::getList();\n        $params = $this->getRequest()->requestVar('q');\n\n        if ($this->modelClass == Product::class && \n            isset($params['ExpensiveOnly']) && $params['ExpensiveOnly']) {\n            $list = $list->exclude('Price:LessThan', '100');\n        }\n\n        return $list;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query for History Viewer in JavaScript\nDESCRIPTION: This JavaScript snippet defines a GraphQL query for reading versions of a MyVersionedObject, including configuration for Apollo Client integration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from '@apollo/client/react/hoc';\nimport gql from 'graphql-tag';\n\nconst query = gql`\nquery ReadHistoryViewerMyVersionedObject ($id: ID!, $limit: Int!, $offset: Int!) {\n    readOneMyVersionedObject(\n      versioning: {\n        mode: ALL_VERSIONS\n      },\n      filter: {\n        id: { eq: $id }\n      }\n    ) {\n      id\n      versions (limit: $limit, offset: $offset, sort: {\n        version: DESC\n      }) {\n        pageInfo {\n          totalCount\n        }\n        nodes {\n          version\n          author {\n            firstName\n            surname\n          }\n          publisher {\n            firstName\n            surname\n          }\n          deleted\n          draft\n          published\n          liveVersion\n          latestDraftVersion\n          lastEdited\n        }\n      }\n    }\n  }\n`;\n\nconst config = {\n  options({ recordId, limit, page }) {\n    return {\n      variables: {\n        limit,\n        offset: ((page || 1) - 1) * limit,\n        id: recordId,\n        fetchPolicy: 'network-only',\n      }\n    };\n  },\n  props({\n    data: {\n      error,\n      refetch,\n      readOneMyVersionedObject,\n      loading: networkLoading,\n    },\n    ownProps: {\n      actions = {\n        versions: {}\n      },\n      limit,\n      recordId,\n    },\n  }) {\n    const versions = readOneMyVersionedObject || null;\n\n    const errors = error && error.graphQLErrors &&\n      error.graphQLErrors.map((graphQLError) => graphQLError.message);\n\n    return {\n      loading: networkLoading || !versions,\n      versions,\n      graphQLErrors: errors,\n      actions: {\n        ...actions,\n        versions: {\n          ...versions,\n          goToPage(page) {\n            refetch({\n              offset: ((page || 1) - 1) * limit,\n              limit,\n              id: recordId,\n            });\n          }\n        },\n      },\n    };\n  },\n};\n\nexport { query, config };\n\nexport default graphql(query, config);\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Query Example in Silverstripe ORM\nDESCRIPTION: Demonstrates lazy loading behavior of Silverstripe ORM where the query is only executed when results are accessed. Shows how filtering and sorting are combined into a single efficient query.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filter([\n    'FirstName' => 'Sam',\n]);\n\n$players = $players->sort('Surname');\n\n// executes the following single query\n// SELECT * FROM Player WHERE FirstName = 'Sam' ORDER BY Surname\n```\n\n----------------------------------------\n\nTITLE: Querying Related Players in SQL\nDESCRIPTION: Demonstrates how to retrieve all players for multiple teams using a single SQL query with the IN clause.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Player WHERE TeamID IN (1, 2, 3, ...)\n```\n\n----------------------------------------\n\nTITLE: ModelAdmin Extension for GridField Customization\nDESCRIPTION: Creates a reusable extension to modify GridField configuration, demonstrating a flexible approach to customizing admin interfaces\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig;\nuse SilverStripe\\Forms\\GridField\\GridFieldFilterHeader;\n\nclass ModelAdminExtension extends Extension\n{\n    public function updateGridFieldConfig(GridFieldConfig &$config)\n    {\n        $config->addComponent(GridFieldFilterHeader::create());\n    }\n}\n```\n\nLANGUAGE: yml\nCODE:\n```\nApp\\Admin\\MyAdmin:\n  extensions:\n    - App\\Extension\\ModelAdminExtension\n```\n\n----------------------------------------\n\nTITLE: Using Constants and Environment Variables in Injector YAML\nDESCRIPTION: Shows how to include core constants or environment variables in Injector configuration using backticks, allowing for dynamic configuration based on the environment.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  CachingService:\n    class: SilverStripe\\Cache\\CacheProvider\n    properties:\n      CacheDir: '`TEMP_DIR`'\n\n  App\\Services\\MyService:\n    class: App\\Services\\MyService\n    constructor:\n      baseURL: '`SS_API_URI`'\n    credentials:\n      id: '`SS_API_CLIENT_ID`'\n      secret: '`SS_API_CLIENT_SECRET`'\n\n  App\\Services\\MyService:\n    properties:\n      SingleVariableProperty: '`ENV_VAR_ONE`'\n      MultiVariableProperty: '`ENV_VAR_ONE` and `ENV_VAR_TWO`'\n      ThisWillNotSubstitute: 'lorem `REGULAR_TEXT` ipsum'\n```\n\n----------------------------------------\n\nTITLE: Configuring Prototype Services in YAML\nDESCRIPTION: Demonstrates how to configure a service as a prototype in YAML, ensuring a new instance is created each time it's requested, even when using the singleton method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  App\\MyClient:\n    type: 'prototype'\n```\n\n----------------------------------------\n\nTITLE: Defining Product Model in Silverstripe CMS\nDESCRIPTION: Creates a Product model extending DataObject with properties for name, product code, price, and a relationship to Category.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/Product.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject\n{\n    private static $db = [\n        'Name' => 'Varchar',\n        'ProductCode' => 'Varchar',\n        'Price' => 'Currency',\n    ];\n\n    private static $has_one = [\n        'Category' => Category::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Layout Template in Silverstripe CMS\nDESCRIPTION: Shows how to render a layout template into the $Layout section of a page template in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/04_Rendering_Templates.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyModel extends DataObject\n{\n    // ...\n\n    public function getRenderedMessageAsPage()\n    {\n        $data = [\n            'Title' => 'Message from the Head Coach',\n        ];\n\n        return $this->customise([\n            'Layout' => $this\n                        ->customise($data)\n                        ->renderWith(['Layout/Coach_Message']),\n        ])->renderWith(['Page']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Confirming Form Button Higher-Order Component\nDESCRIPTION: This component adds a confirmation dialog to form actions and changes the button style when in loading state. It intercepts the handleClick event to show a confirmation dialog before proceeding with the original action.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/components/ConfirmingFormButton.js\nimport React from 'react';\n\nexport default (FormAction) => (props) => {\n  const newProps = {\n    ...props,\n    data: {\n      ...props.data,\n      buttonStyle: props.loading ? 'danger' : props.data.buttonStyle\n    },\n    handleClick(e) {\n      /* eslint-disable-next-line no-alert */\n      if (window.confirm('Did you really mean to click this?')) {\n        props.handleClick(e);\n      }\n    }\n  };\n\n  return <FormAction {...newProps} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Components in Separate Files\nDESCRIPTION: This snippet demonstrates how to define different components of your GraphQL schema (config, types, models, queries, mutations, enums) in separate YAML files within the source directory. The `schema.yml` file in the `app/_graphql` folder would look like this.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/02_configuring_your_schema.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/schema.yml\n\n# no schema key needed. it's implied!\nconfig:\n  # your schema config here\ntypes:\n  # your generic types here\nmodels:\n  # your DataObjects here\nbulkLoad:\n  # your bulk loader directives here\nqueries:\n  # your queries here\nmutations:\n  # your mutations here\nenums:\n  # your enums here\"\n```\n\n----------------------------------------\n\nTITLE: Paginated GraphQL Query Example\nDESCRIPTION: This GraphQL query demonstrates using the pagination feature with `limit` and `offset` arguments. It retrieves the `name` of the `nodes` from the countries starting from offset 4 and limiting the result to 3 items.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/05_adding_pagination.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readCountries(limit:3, offset:4) {\n    nodes {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascading Deletions in PHP\nDESCRIPTION: Demonstrates how to configure cascading deletions for related objects using the cascade_deletes configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass ParentObject extends DataObject\n{\n    private static $has_one = [\n        'Child' => ChildObject::class,\n    ];\n\n    private static $cascade_deletes = [\n        'Child',\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a FormField Validation Extension in Silverstripe CMS\nDESCRIPTION: Shows how to create an extension to add custom validation logic to form fields, specifically validating email addresses against a blacklist domain.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\nuse SilverStripe\\Forms\\Validator;\n\nclass FormFieldValidationExtension extends Extension\n{\n    public function updateValidationResult(bool &$result, Validator $validator)\n    {\n        if (str_ends_with($this->owner->Value(), '@example.com')) {\n            $validator->validationError($this->owner->Name(), 'Please provide a valid email address');\n            $result = false;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller Actions with Different Response Types\nDESCRIPTION: Demonstrates various ways to handle responses in controller actions, including returning arrays for template rendering, creating custom HTTP responses, setting status codes, and returning JSON data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/01_Introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Control/TeamController.php\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n// ...\n\nclass TeamController extends Controller\n{\n    // ...\n\n    /**\n     * Return some additional data to the current response that is waiting to go out, this makes $Title set to\n     * 'My Team Name' and continues on with generating the response.\n     */\n    public function index(HTTPRequest $request)\n    {\n        // ...\n    }\n\n    /**\n     * We can manually create a response and return that to ignore any previous data or modifications to the request.\n     */\n    public function someaction(HTTPRequest $request)\n    {\n        $this->setResponse(new HTTPResponse());\n        $this->getResponse()->setStatusCode(400);\n        $this->getResponse()->setBody('invalid');\n\n        return $this->getResponse();\n    }\n\n    /**\n     * Or, we can modify the response that is waiting to go out.\n     */\n    public function anotheraction(HTTPRequest $request)\n    {\n        $this->getResponse()->setStatusCode(400);\n\n        return $this->getResponse();\n    }\n\n    /**\n     * We can render HTML and leave Silverstripe CMS to set the response code and body.\n     */\n    public function htmlaction()\n    {\n        return $this->customise(ArrayData::create([\n            'Title' => 'HTML Action',\n        ]))->renderWith('MyCustomTemplate');\n    }\n\n    /**\n     * We can send stuff to the browser which isn't HTML\n     */\n    public function ajaxaction()\n    {\n        $this->getResponse()->addHeader('Content-type', 'application/json');\n\n        return json_encode([\n            'json' => true,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Relations in SilverStripe\nDESCRIPTION: This YAML configuration snippet shows how to enable and configure the RelationValidationService in SilverStripe to validate object relations according to best practices through dev/build output and specific allow and deny rules. It can also ignore certain relations if necessary.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_36\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Dev\\Validation\\RelationValidationService:\n  output_enabled: true\n  allow_rules:\n    app: 'MyApp'\n    - 'MyOrg'\n    - 'AnotherOrg\\MyModule'\n  deny_rules:\n    - 'MyApp\\SpecialCases'\n  deny_relations:\n    - 'App\\Model\\Player.Teams'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Service in YAML\nDESCRIPTION: Demonstrates how to configure a cache service using YAML configuration and Silverstripe's dependency injection system. It sets up a PSR-16 compatible cache with a custom namespace.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/01_Caching.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  Psr\\SimpleCache\\CacheInterface.myCache:\n    factory: SilverStripe\\Core\\Cache\\CacheFactory\n    constructor:\n      namespace: \"myCache\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with Silverstripe in PHP\nDESCRIPTION: This snippet demonstrates how to set a cookie using the Silverstripe framework's Cookie class. Dependencies include the SilverStripe\\Control\\Cookie class, and it allows configuration of the expiration, path, domain, security, and HttpOnly settings. The default expiration is set to 90 days, and it accepts a cookie name and value as input. A consideration is that the cookie expiration must be a positive integer or a decimal to represent fractions of a day.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/01_Cookies.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse SilverStripe\\Control\\Cookie;\n\nCookie::set($name, $value, $expiry = 90, $path = null, $domain = null, $secure = false, $httpOnly = false);\n\n// Cookie::set('MyApplicationPreference', 'Yes');\n```\n\n----------------------------------------\n\nTITLE: Creating Custom EditForm in Silverstripe CMS using PHP\nDESCRIPTION: This code snippet demonstrates how to create a custom 'EditForm' in a CMS controller subclass. It uses Silverstripe's Form API to set up form fields, actions, and custom request handling. The form is designed to handle editing operations within the CMS, adhering to specific layout and functionality requirements.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Admin;\n\nuse SilverStripe\\Admin\\LeftAndMain;\nuse SilverStripe\\Admin\\LeftAndMainFormRequestHandler;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\Tab;\nuse SilverStripe\\Forms\\TabSet;\nuse SilverStripe\\Forms\\TextField;\n\nclass MyAdmin extends LeftAndMain\n{\n    public function getEditForm()\n    {\n        return Form::create(\n            $this,\n            'EditForm',\n            FieldList::create(\n                TabSet::create(\n                    'Root',\n                    Tab::create(\n                        'Main',\n                        TextField::create('MyText')\n                    )\n                )->setTemplate('CMSTabset')\n            ),\n            FieldList::create(\n                FormAction::create('doSubmit')\n            )\n        )\n            // Use a custom request handler\n            ->setRequestHandler(\n                LeftAndMainFormRequestHandler::create($form)\n            )\n            // JS and CSS use this identifier\n            ->setHTMLID('Form_EditForm')\n            // Render correct responses on validation errors\n            ->setResponseNegotiator($this->getResponseNegotiator());\n            // Required for correct CMS layout\n            ->addExtraClass('cms-edit-form')\n            ->setTemplate($this->getTemplatesWithSuffix('_EditForm'));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Image File Converter in PHP\nDESCRIPTION: This PHP snippet demonstrates the implementation of a custom file converter for image formats. It implements the `supportsConversion()` and `convert()` methods from the `FileConverter` interface. The `convert()` method uses `manipulateExtension()` and retrieves the `Image_Backend` for image manipulation using the Intervention Image library. Exceptions during conversion are caught and re-thrown as `FileConverterException`.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Conversion;\n\nuse Intervention\\Image\\Exception\\ImageException;\nuse SilverStripe\\Assets\\Conversion\\FileConverter;\nuse SilverStripe\\Assets\\Conversion\\FileConverterException;\nuse SilverStripe\\Assets\\File;\nuse SilverStripe\\Assets\\Storage\\AssetStore;\nuse SilverStripe\\Assets\\Storage\\DBFile;\n\nclass ImageFileConverter implements FileConverter\n{\n    public function supportsConversion(string $fromExtension, string $toExtension, array $options = []): bool\n    {\n        $supported = true;\n        /* some logic here to check if this conversion is supported */\n        return $supported;\n    }\n\n    public function convert(DBFile|File $from, string $toExtension, array $options = []): DBFile\n    {\n        $from = $this->getOwner();\n        try {\n            return $from->manipulateExtension(\n                $toExtension,\n                function (AssetStore $store, string $filename, string $hash, string $variant) use ($from) {\n                    $backend = $from->getImageBackend();\n                    $config = ['conflict' => AssetStore::CONFLICT_USE_EXISTING];\n                    $tuple = $backend->writeToStore($store, $filename, $hash, $variant, $config);\n                    return [$tuple, $backend];\n                }\n            );\n        } catch (ImageException $e) {\n            throw new FileConverterException('Failed to convert: ' . $e->getMessage(), $e->getCode(), $e);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Properties in Silverstripe CMS\nDESCRIPTION: Shows different methods to access configuration properties using the Config class or the config() method on classes using the Configurable trait.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$config = Config::inst()->get(MyClass::class, 'property');\n\n$config = MyClass::config()->get('property');\n$config = static::config()->get('property');\n```\n\n----------------------------------------\n\nTITLE: Escaping Variables in SilverStripe Templates\nDESCRIPTION: Shows various methods of escaping variables and special characters in SilverStripe templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_14\n\nLANGUAGE: ss\nCODE:\n```\n$Foopx <%-- returns \"\" (as it looks for a `Foopx` variable) -%>\n{$Foo}px  <%-- returns \"3px\" -%>\n\n$$Foo <%-- returns \"\" -%>\n${$Foo} <%-- returns \"$3\" -%>\n\n$Foo <%-- returns \"3\" -%>\n\\$Foo <%-- returns \"$Foo\" -%>\n```\n\n----------------------------------------\n\nTITLE: Customizing Chunk Size in SilverStripe's chunkedFetch\nDESCRIPTION: Example of using chunkedFetch() with a custom chunk size of 10, applied to a filtered and sorted Member list to optimize memory usage.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/03_Lists.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Each query will only return 10 results at a time\n$members = Member::get()\n    ->filter('Email:PartialMatch', 'silverstripe.com')\n    ->sort('Email')\n    ->chunkedFetch(10);\nforeach ($members as $member) {\n    echo $member->Email;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing forTemplate Method in SilverStripe\nDESCRIPTION: Demonstrates how to implement a forTemplate() method in a PHP class to provide a default template for an object in SilverStripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// app/src/PageType/HomePage.php\nnamespace App\\PageType;\n\nuse Page;\n\nclass HomePage extends Page\n{\n    public function forTemplate()\n    {\n        // We can also render a template here using $this->renderWith()\n        return 'Page: ' . $this->Title;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Formatting Hints to DateField in SilverStripe\nDESCRIPTION: This code shows two ways to provide formatting hints for a DateField: setting a description with the current format, or using a placeholder attribute. This helps users understand the expected date format.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/02_DateField.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\DateField;\n\n$dateField = DateField::create('MyDate');\n\n// Show long format as text below the field\n$dateField->setDescription(_t(\n    'FormField.Example',\n    'e.g. {format}',\n    [ 'format' => $dateField->getDateFormat() ]\n));\n\n// Alternatively, set short format as a placeholder in the field\n$dateField->setAttribute('placeholder', $dateField->getDateFormat());\n```\n\n----------------------------------------\n\nTITLE: Sending Combined HTML and Plain Text Emails\nDESCRIPTION: Implementation for sending emails with both HTML and plain text content separately specified.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/10_Email/index.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Email\\Email;\n\n$email = Email::create('from@mydomain.com', 'to@example.com', 'My subject');\n$email->html('<p>My HTML email content</p>');\n$email->text('My plain text email content');\n$email->send();\n```\n\n----------------------------------------\n\nTITLE: Enabling Sudo Mode for DataObject Models in PHP\nDESCRIPTION: PHP implementation example showing how to enable sudo mode protection for a custom DataObject model by setting the require_sudo_mode configuration property to true.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/04_Sudo_Mode.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject\n{\n    // ...\n    private static bool $require_sudo_mode = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Injectable Trait Methods\nDESCRIPTION: Demonstrates the simplified object instantiation syntax provided by the Injectable trait compared to full Injector syntax.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MyClass;\n\n// instantiate a new instance of App\\MyClass via Injector\n$object = MyClass::create();\n// or fetch App\\MyClass as a singleton\n$singletonObject = MyClass::singleton();\n```\n\n----------------------------------------\n\nTITLE: Overriding Classes with Injector in YAML\nDESCRIPTION: Shows how to use YAML configuration to override classes using the Injector, allowing for easy substitution of core or third-party classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/class-overrides.yml\nSilverStripe\\Core\\Injector\\Injector:\n  App\\MyClient:\n    class: App\\MyBetterClient\n```\n\n----------------------------------------\n\nTITLE: Making AJAX POST Request using Silverstripe Backend Helper\nDESCRIPTION: Illustrates how to use the backend helper, a wrapper around fetch(), to make a POST request with JSON data. This snippet includes error handling for different HTTP status codes and demonstrates how to pass security tokens in headers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/07_CMS_JSON_APIs.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport backend from 'lib/Backend';\nimport Config from 'lib/Config';\n\nconst section = 'App\\\\Controller\\\\MySomethingController';\nconst endpoint = `${Config.getSection(section).myForm.myEndpointUrl}`;\nconst data = { somekey: 123 };\nconst headers = { 'X-SecurityID': Config.get('SecurityID') };\nbackend.post(endpoint, data, headers)\n  .then(() => {\n    // handle 200-299 status code response here\n  })\n  .catch(() => {\n    // handle 400-500 status code response here\n  });\n```\n\n----------------------------------------\n\nTITLE: Proper Timing for Data Escaping in Silverstripe CMS\nDESCRIPTION: Example showing the best practice for escaping data as close to the query as possible. Demonstrates how to avoid premature escaping when passing data through multiple functions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Core\\Convert;\nuse SilverStripe\\ORM\\DB;\n\nclass MyController extends Controller\n{\n    /**\n    * @param array $RAW_data All names in an indexed array (not SQL-safe)\n    */\n    public function saveAllNames($RAW_data)\n    {\n        // $SQL_data = Convert::raw2sql($RAW_data); // premature escaping\n        foreach ($RAW_data as $item) {\n            $this->saveName($item);\n        }\n    }\n\n    public function saveName($RAW_name)\n    {\n        $SQL_name = Convert::raw2sql($RAW_name, true);\n        DB::query(\"UPDATE Player SET Name = {$SQL_name}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable GridField Data\nDESCRIPTION: Complete implementation of editable data records including write, delete, and permission methods required for GridField editing functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/07_Using_GridField_With_Arbitrary_Data.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Data;\n\nuse LogicException;\nuse SilverStripe\\ORM\\DataObjectInterface;\nuse SilverStripe\\View\\ViewableData;\n\nclass DataRepresentation extends ViewableData implements DataObjectInterface\n{\n    // ...\n\n    public function write()\n    {\n        // Do whatever you need to write the record - e.g. send it to a web API\n\n        // You MUST set the ID on newly created records\n        if (!$this->ID) {\n            $this->ID = $idFromApi;\n        }\n    }\n\n    public function delete()\n    {\n        if (!$this->ID) {\n            throw new LogicException('delete() called on a record without an ID');\n        }\n\n        // Do whatever you need to delete the record - e.g. send a deletion request to a web API\n\n        $this->ID = 0;\n    }\n\n    public function setCastedField($fieldName, $val)\n    {\n        $this->$fieldName = $val;\n    }\n\n    public function canEdit()\n    {\n        return true;\n    }\n\n    public function canCreate()\n    {\n        return true;\n    }\n\n    public function canDelete()\n    {\n        return true;\n    }\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridFieldEditButton;\n$gridField->getConfig()->addComponent(GridFieldEditButton::create());\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridField;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig_RecordEditor;\n$gridField = GridField::create('MyData', 'My data', $list, GridFieldConfig_RecordEditor::create());\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Fields to a Tab in Silverstripe CMS\nDESCRIPTION: Adds multiple fields at once to the 'Content' tab using the addFieldsToTab method with an array of field objects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/06_Tabbed_Forms.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$fields->addFieldsToTab('Root.Content', [\n    TextField::create('Name'),\n    TextField::create('Email'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Handlers in SilverStripe YAML\nDESCRIPTION: Shows how to set up basic URL routing rules in SilverStripe's YAML configuration file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'teams': 'App\\Control\\TeamController'\n```\n\n----------------------------------------\n\nTITLE: Using Aggregates for Cache Invalidation in Silverstripe Templates\nDESCRIPTION: Shows how to use DataList aggregate methods to invalidate cache when any object in a set changes or when objects in a relationship change.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/00_Partial_Caching.md#2025-04-21_snippet_1\n\nLANGUAGE: silverstripe\nCODE:\n```\n<% cached\n     'navigation',\n     $List('SilverStripe\\CMS\\Model\\SiteTree').max('LastEdited'),\n     $List('SilverStripe\\CMS\\Model\\SiteTree').count()\n%>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Member Extension in PHP\nDESCRIPTION: Demonstrates how to create a custom Member extension that modifies the validator by adding a required field.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Extension/MyMemberExtension.php\nnamespace App\\Extension;\n\nuse SilverStripe\\ORM\\DataExtension;\n\nclass MyMemberExtension extends DataExtension\n{\n    public function updateValidator($validator)\n    {\n        // we want to make date of birth required for each member\n        $validator->addRequiredField('DateOfBirth');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic has_one Relationship in Silverstripe CMS PHP\nDESCRIPTION: Demonstrates how to define a polymorphic has_one relationship in Silverstripe CMS. This creates FanOfID and FanOfClass columns to identify the associated object.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Fan extends DataObject\n{\n    // Generates columns FanOfID and FanOfClass\n    // The actual class of objects returned by $fan->FanOf() will vary\n    private static $has_one = [\n        'FanOf' => DataObject::class,\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in SilverStripe YAML Configuration\nDESCRIPTION: Example of defining routing rules in a YAML configuration file to map URL patterns to controllers. The example demonstrates routing to different controllers based on URL patterns with parameter placeholders.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/routes.yml\n---\nName: approutes\nAfter:\n  - '#rootroutes'\n  - '#coreroutes'\n---\nSilverStripe\\Control\\Director:\n  rules:\n    'teams//$Action/$ID/$Name': 'App\\Control\\TeamController'\n    'player/': 'App\\Control\\PlayerController'\n    '': 'App\\Control\\HomeController'\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Level Navigation Menu in SilverStripe Templates\nDESCRIPTION: Template code for generating a two-tier navigation menu using SilverStripe's Menu() method. The snippet creates an unordered list with primary navigation items and nested secondary navigation for items with children. Includes styling classes for current and section states.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/How_Tos/01_Navigation_Menu.md#2025-04-21_snippet_0\n\nLANGUAGE: silverstripe\nCODE:\n```\n<%-- app/templates/Page.ss --%>\n<ul>\n    <% loop $Menu(1) %>\n        <li>\n            <a href=\"$Link\" title=\"Go to the $Title page\" class=\"<% if $isCurrent %>current<% else_if $isSection %>section<% end_if %>\">\n                $MenuTitle\n            </a>\n\n            <% if $isSection %>\n                <% if $Children.exists %>\n                    <ul class=\"secondary\">\n                        <% loop $Children %>\n                            <li class=\"<% if $isCurrent %>current<% else_if $isSection %>section<% end_if %>\"><a href=\"$Link\">$MenuTitle</a></li>\n                        <% end_loop %>\n                    </ul>\n                <% end_if %>\n            <% end_if %>\n        </li>\n    <% end_loop %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolver Method for a GraphQL Interface\nDESCRIPTION: This PHP code snippet defines a resolver method `resolvePersonType` within the `MyResolver` class. The method determines the type of a `Person` object, returning 'Actor' for `Actor` instances and 'Chef' for `Chef` instances. It operates based on the runtime type of the provided object.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/07_enums_unions_and_interfaces.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\GraphQL\\Resolver;\n\nuse App\\Model\\Actor;\nuse App\\Model\\Chef;\n\nclass MyResolver\n{\n    public static function resolvePersonType($object): string\n    {\n        if ($object instanceof Actor) {\n            return 'Actor';\n        }\n        if ($object instanceof Chef) {\n            return 'Chef';\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing CSS files in composer.json\nDESCRIPTION: This JSON snippet demonstrates how to expose CSS files located under `app/css` folder to the public-facing paths by defining `expose` configuration under `extra` section. It allows the frontend to access those CSS files. The `composer vendor-expose` command is required to publish these files.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"extra\": {\n        \"expose\": [\n            \"app/css\"\n        ]\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Cache Key Generation in PHP\nDESCRIPTION: Demonstrates creating dynamic cache keys based on object properties to ensure automatic cache invalidation when related data changes. This example caches a member's group names.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/01_Caching.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\SimpleCache\\CacheInterface;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n$cache = Injector::inst()->get(CacheInterface::class . '.myCache');\n\n// Automatically changes when any group is edited\n$cacheKey = implode(['groupNames', $member->ID, Group::get()->max('LastEdited')]);\n$cache->set($cacheKey, $member->Groups()->column('Title'));\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Services in Custom Authenticator\nDESCRIPTION: Illustrates the interface method for specifying supported authentication services in a custom Silverstripe CMS authenticator.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/03_Authentication.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nconst LOGIN = 1;\nconst LOGOUT = 2;\nconst CHANGE_PASSWORD = 4;\nconst RESET_PASSWORD = 8;\nconst CMS_LOGIN = 16;\n\n/**\n * Returns the services supported by this authenticator\n *\n * The number should be a bitwise-OR of 1 or more of the following constants:\n * Authenticator::LOGIN, Authenticator::LOGOUT, Authenticator::CHANGE_PASSWORD,\n * Authenticator::RESET_PASSWORD, or Authenticator::CMS_LOGIN\n *\n * @return int\n */\npublic function supportedServices();\n```\n\n----------------------------------------\n\nTITLE: Performing SQL UPDATE in SilverStripe ORM\nDESCRIPTION: Demonstrates how to use SQLUpdate to perform an UPDATE operation on the SiteTree table. It shows various ways to assign values, including lists, single values, parameterized expressions, and SQL expressions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/08_SQL_Select.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\CMS\\Model\\SiteTree;\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\Queries\\SQLUpdate;\n\n$schema = DataObject::getSchema();\n$siteTreeTable = DB::get_conn()->escapeIdentifier($schema->baseDataTable(SiteTree::class));\n\n$update = SQLUpdate::create($siteTreeTable)->addWhere(['\"ID\"' => 3]);\n\n// assigning a list of items\n$update->addAssignments([\n    '\"Title\"' => 'Our Products',\n    '\"MenuTitle\"' => 'Products',\n]);\n\n// Assigning a single value\n$update->assign('\"MenuTitle\"', 'Products');\n\n// Assigning a value using parameterised expression\n$title = 'Products';\n$update->assign('\"MenuTitle\"', [\n    'CASE WHEN LENGTH(\"MenuTitle\") > LENGTH(?) THEN \"MenuTitle\" ELSE ? END' =>\n        [$title, $title],\n]);\n\n// Assigning a value using a pure SQL expression\n$update->assignSQL('\"Date\"', 'NOW()');\n\n// Perform the update\n$update->execute();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context-Aware Pagination Resolver in PHP\nDESCRIPTION: This PHP code defines a context-aware resolver function (`paginateCountries`) that handles pagination logic. It takes an array of countries, offset, and limit as input and uses `array_slice` to limit the result set.  It then uses the `PaginationPlugin` to format the output with `edges`, `nodes`, and `pageInfo`.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/05_adding_pagination.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Resolver;\n\nuse Closure;\nuse SilverStripe\\GraphQL\\Schema\\Plugin\\PaginationPlugin;\n\nclass MyResolver\n{\n    public static function paginateCountries(array $context): Closure\n    {\n        $maxLimit = $context['maxLimit'];\n        return function (array $countries, array $args) use ($maxLimit) {\n            $offset = $args['offset'];\n            $limit = $args['limit'];\n            $total = count($countries);\n            if ($limit > $maxLimit) {\n                $limit = $maxLimit;\n            }\n\n            $limitedList = array_slice($countries, $offset, $limit);\n\n            return PaginationPlugin::createPaginationResult($total, $limitedList, $limit, $offset);\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom GridField Action Class in PHP\nDESCRIPTION: A complete implementation of a custom GridField action class that adds a new button to GridField rows. The class implements GridField_ColumnProvider and GridField_ActionProvider interfaces to handle both the display and functionality of the custom action.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/04_Create_a_GridField_ActionProvider.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\GridField;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Forms\\GridField\\AbstractGridFieldComponent;\nuse SilverStripe\\Forms\\GridField\\GridField;\nuse SilverStripe\\Forms\\GridField\\GridField_ActionProvider;\nuse SilverStripe\\Forms\\GridField\\GridField_ColumnProvider;\nuse SilverStripe\\Forms\\GridField\\GridField_FormAction;\n\nclass GridFieldCustomAction extends AbstractGridFieldComponent implements\n    GridField_ColumnProvider,\n    GridField_ActionProvider\n{\n    public function augmentColumns($gridField, &$columns)\n    {\n        if (!in_array('Actions', $columns)) {\n            $columns[] = 'Actions';\n        }\n    }\n\n    public function getColumnAttributes($gridField, $record, $columnName)\n    {\n        return ['class' => 'grid-field__col-compact'];\n    }\n\n    public function getColumnMetadata($gridField, $columnName)\n    {\n        if ($columnName === 'Actions') {\n            return ['title' => ''];\n        }\n        return [];\n    }\n\n    public function getColumnsHandled($gridField)\n    {\n        return ['Actions'];\n    }\n\n    public function getColumnContent($gridField, $record, $columnName)\n    {\n        if (!$record->hasMethod('canEdit') || !$record->canEdit()) {\n            return null;\n        }\n\n        $field = GridField_FormAction::create(\n            $gridField,\n            'CustomAction' . $record->ID,\n            'Custom Action',\n            'docustomaction',\n            ['RecordID' => $record->ID]\n        );\n        $field->addExtraClass('btn btn-outline-dark');\n\n        return $field->Field();\n    }\n\n    public function getActions($gridField)\n    {\n        return ['docustomaction'];\n    }\n\n    public function handleAction(GridField $gridField, $actionName, $arguments, $data)\n    {\n        if ($actionName !== 'docustomaction') {\n            return;\n        }\n        Controller::curr()->getResponse()\n            ->setStatusCode(200)\n            ->addHeader('X-Status', 'Do Custom Action Done.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Filtering in Silverstripe\nDESCRIPTION: Shows advanced filtering techniques including OR conditions, null handling, and aggregate filtering.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filterAny([\n    'FirstName' => 'Sam',\n    'Age' => 17,\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filter('FirstName:not', 'Sam');\n```\n\nLANGUAGE: php\nCODE:\n```\n$teams = Team::get()->filter('Players.Count():GreaterThan', 10);\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filterByCallback(function ($record, $list) {\n    return ($record->Age() > 10);\n});\n```\n\n----------------------------------------\n\nTITLE: Extending LoginSession Permissions in Silverstripe\nDESCRIPTION: This PHP snippet defines a DataExtension that customizes permissions for LoginSession objects in Silverstripe. By altering the permission logic, it allows specific users to view and delete sessions based on their permissions to the associated member. Dependencies include Silverstripe ORM and Membership modules. Expected inputs are member objects for permission checking with no outputs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/03_Managing_Sessions.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace My\\App;\n\nuse SilverStripe\\ORM\\DataExtension;\n\nclass LoginSessionExtension extends DataExtension\n{\n    /**\n     * @param Member $member\n     */\n    public function canView($member)\n    {\n        if ($this->getOwner()->Member()->canView($member)) {\n            // If you can view a Member, you can also view their sessions.\n            // This does not allow you to terminate their session.\n            return true;\n        };\n    }\n\n    /**\n     * @param Member $member\n     */\n    public function canDelete($member)\n    {\n        if ($this->getOwner()->Member()->canEdit($member)) {\n            // If you can edit a Member, you can also log them out of a session.\n            // This action is aligned to canDelete, because logging a user out is\n            // equivalent to deleting the LoginSession.\n            return true;\n        };\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Resulting GraphQL Union Types from Page Inheritance\nDESCRIPTION: Shows the union types automatically created from the page type hierarchy. Only types with exposed descendants create unions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nunion PageInheritanceUnion = Page | BlogPage | EventsPage | ConferencePage | WebinarPage\nunion EventsPageInheritanceUnion = EventsPage | ConferencePage | WebinarPage\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Silverstripe CMS with PHP\nDESCRIPTION: Demonstrates how to set environment variables programmatically using the Environment::setEnv() method in Silverstripe CMS. This is useful for configuring environment variables at runtime.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/03_Environment_Management.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\Environment;\nEnvironment::setEnv('API_KEY', 'AABBCCDDEEFF012345');\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation-Exempt Actions in Silverstripe Forms\nDESCRIPTION: Shows how to configure form actions to bypass validation using either direct action configuration or form-level exemption lists.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\n\nclass MyFormPageController extends PageController\n{\n    // ...\n\n    public function getMyForm()\n    {\n        // ...\n\n        $actions = FieldList::create(\n            $action = FormAction::create('doSubmitForm', 'Submit')\n        );\n\n        $form = Form::create($this, 'MyForm', $fields, $actions);\n        // Disable actions on the form action themselves\n        $action->setValidationExempt(true);\n        // Alternatively, you can whitelist individual actions on the form object by name\n        $form->setValidationExemptActions(['doSubmitForm']);\n\n        return $form;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Page Content in Silverstripe CMS Template\nDESCRIPTION: Shows how to display the main content of a page using the Content variable in a Silverstripe CMS template. This typically represents the content from a WYSIWYG editor.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_3\n\nLANGUAGE: ss\nCODE:\n```\n$Content\n```\n\n----------------------------------------\n\nTITLE: Implementing AbsoluteLink Method for DataObjects in PHP\nDESCRIPTION: This snippet shows how to implement the AbsoluteLink method for a DataObject to enable its use in RSS feeds.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/02_RSSFeed.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\Director;\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    public function AbsoluteLink()\n    {\n        // assumes players can be accessed at www.example.com/players/2\n        return Controller::join_links(\n            Director::absoluteBaseUrl(),\n            'players',\n            $this->ID\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Dates for DateField in SilverStripe\nDESCRIPTION: This snippet demonstrates how to set minimum and maximum allowed date values for a DateField using the setMinDate and setMaxDate methods. It accepts ISO format or strtotime() compatible strings.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/02_DateField.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\DateField;\n\nDateField::create('MyDate')\n    ->setMinDate('-7 days')\n    ->setMaxDate('2012-12-31')\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Files Based on Permissions in Silverstripe Templates\nDESCRIPTION: Template code for conditionally displaying file download links based on user permissions. This checks if the user can view each file and either displays a download link or a permission denied message.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"files\">\n    <% loop $File %>\n        <% if $canView %>\n            <li><a href=\"$URL\">Download $Title</a></li>\n        <% else %>\n            <li>Permission denied for $Title</li>\n        <% end_if %>\n    <% end_loop >\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Category Model in Silverstripe CMS\nDESCRIPTION: Creates a Category model extending DataObject with a title property and a has_many relationship to Products.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/Category.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Category extends DataObject\n{\n    private static $db = [\n        'Title' => 'Text',\n    ];\n\n    private static $has_many = [\n        'Products' => Product::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Versioning a many_many Relation in SilverStripe\nDESCRIPTION: Demonstrates how to version a many_many relationship using a 'through' DataObject. This allows tracking versions of the relationship data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject\n{\n    private static $db = [\n        'Title' => 'Varchar(100)',\n        'Price' => 'Currency',\n    ];\n\n    private static $many_many = [\n        'Categories' => [\n            'through' => 'ProductCategory',\n            'from' => 'Product',\n            'to' => 'Category',\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Eager Loading Queries in PHP\nDESCRIPTION: Demonstrates how to manipulate eager loading queries by passing callbacks to filter or sort the data before it's loaded.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DataList;\n\n$teams = Team::get()->eagerLoad([\n    'Players' => fn (DataList $list) => $list->filter(['Age:GreaterThan' => 18]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom GridField Components with Fragments\nDESCRIPTION: Examples of creating custom GridField components that define and use custom fragment areas.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\GridField;\n\nuse SilverStripe\\Forms\\GridField\\AbstractGridFieldComponent;\nuse SilverStripe\\Forms\\GridField\\GridField_HTMLProvider;\n\nclass MyAreaComponent extends AbstractGridFieldComponent implements GridField_HTMLProvider\n{\n    public function getHTMLFragments($gridField)\n    {\n        return [\n            'before' => '<div class=\"my-area\">$DefineFragment(my-area)</div>',\n        ];\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\GridField;\n\nuse SilverStripe\\Forms\\GridField\\AbstractGridFieldComponent;\nuse SilverStripe\\Forms\\GridField\\GridField_HTMLProvider;\n\nclass MyShareLinkComponent extends AbstractGridFieldComponent implements GridField_HTMLProvider\n{\n    public function getHTMLFragments($gridField)\n    {\n        return [\n            'my-area' => '<a href>...</a>',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing GraphQL Schema Limits in SilverStripe YAML\nDESCRIPTION: This snippet outlines how to configure query limits specifically for a custom schema in SilverStripe using a YAML configuration file. It should be placed in the app/_graphql directory and assumes SilverStripe is correctly set up.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/05_recursive_or_complex_queries.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# app/_graphql/config.yml\nmax_query_nodes: 250\nmax_query_depth: 20\nmax_query_complexity: 100\n```\n\n----------------------------------------\n\nTITLE: Customizing ModelAdmin Managed Models in Silverstripe CMS\nDESCRIPTION: Demonstrates advanced configuration of managed models in ModelAdmin, including custom URLs, tab labels, and filtering.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse App\\Model\\Category;\nuse App\\Model\\Product;\nuse SilverStripe\\Admin\\ModelAdmin;\n\nclass MyAdmin extends ModelAdmin\n{\n    private static $managed_models = [\n        Product::class,\n        Category::class => [\n            'title' => 'All categories',\n        ],\n        'product-category' => [\n            'dataClass' => Category::class,\n            'title' => 'Product categories',\n        ],\n    ];\n\n    private static $url_segment = 'products';\n\n    private static $menu_title = 'My Product Admin';\n\n    public function getList()\n    {\n        $list = parent::getList();\n        if ($this->modelTab === 'product-category') {\n            $list = $list->filter('IsProductCategory', true);\n        }\n        return $list;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UploadField in Silverstripe Page Type\nDESCRIPTION: Example showing how to add an image upload field to a Landing Page type using UploadField component from asset-admin module\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/01_File_Management.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\AssetAdmin\\Forms\\UploadField;\nuse SilverStripe\\Assets\\Image;\n\nclass LandingPage extends Page\n{\n    private static $has_one = [\n        'Banner' => Image::class,\n    ];\n\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n        $fields->addFieldToTab('Root.Main', UploadField::create('Banner', 'Page Banner'), 'Content');\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event-Driven Form Validation in jQuery\nDESCRIPTION: This JavaScript snippet demonstrates form validation using jQuery. It triggers a custom 'validationfailed' event on form submission for input fields that are not filled. Custom event listeners are used to handle validation failures.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n$(\\'form\\').on(\\'submit\\', function (e) {\\n  // $(this) refers to form\\n  $(this).find(\\':input\\').each(function () {\\n    // $(this) in here refers to input field\\n    if (!$(this).val()) {\\n      $(this).trigger(\\'validationfailed\\');\\n    }\\n  });\\n\\n  return false;\\n});\\n\\n// listen to custom event on each <input> field\\n$(\\'form :input\\').on(\\'validationfailed\\', function (e) {\\n  // $(this) refers to input field\\n  const fieldName = $(this).attr(\\'name\\');\\n});\n```\n\n----------------------------------------\n\nTITLE: Shorthand Syntax for ExactMatch Filter in PHP\nDESCRIPTION: Shows the shorthand syntax for using the ExactMatch filter with different case sensitivity options.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/06_SearchFilters.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Default DB engine behaviour\n$players = Player::get()->filter('FirstName', 'Sam');\n// case-sensitive\n$players = Player::get()->filter('FirstName:case', 'Sam');\n// NOT case-sensitive\n$players = Player::get()->filter('FirstName:nocase', 'Sam');\n```\n\n----------------------------------------\n\nTITLE: Multiple Recipients Email Configuration\nDESCRIPTION: Example showing how to send emails to multiple recipients with display names.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/10_Email/index.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Email\\Email;\n\n$from = [\n  'from@mysite.exmaple.com' => 'Friendly business',\n];\n$to = [\n  'person.a@customer.example.com' => 'Person A',\n  'person.b@customer.example.com' => 'Person B',\n  'person.c@customer.example.com',\n]\n$email = Email::create($from, $to, $subject, $body);\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Default Values in SilverStripe DataObject\nDESCRIPTION: Example showing how to set static default values for a DataObject using the $defaults property. Demonstrates setting a default 'Bark' value for a Dog class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Dynamic_Default_Fields.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Dog extends DataObject\n{\n    private static $db = [\n        'Bark' => 'Varchar(10)',\n    ];\n\n    private static $defaults = [\n        'Bark' => 'Woof',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Controller for CSV Import\nDESCRIPTION: Implementation of a custom controller with form handling for CSV file uploads.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/00_CSV_Import.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse App\\Model\\MyDataObject;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Dev\\CsvBulkLoader;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\FileField;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\n\nclass MyController extends Controller\n{\n    private static $url_segment = 'my_controller';\n\n    private static $allowed_actions = [\n        'getForm',\n    ];\n\n    private static $url_handlers = [\n        'Form' => 'getForm',\n    ];\n\n    protected $template = 'BlankPage';\n\n    public function getForm()\n    {\n        $form = Form::create(\n            $this,\n            'Form',\n            FieldList::create(\n                FileField::create('CsvFile', false)\n            ),\n            FieldList::create(\n                FormAction::create('doUpload', 'Upload')\n            )\n        );\n        return $form;\n    }\n\n    public function doUpload($data, $form)\n    {\n        $loader = CsvBulkLoader::create(MyDataObject::class);\n        $results = $loader->load($_FILES['CsvFile']['tmp_name']);\n        $messages = [];\n        if ($results->CreatedCount()) {\n            $messages[] = sprintf('Imported %d items', $results->CreatedCount());\n        }\n        if ($results->UpdatedCount()) {\n            $messages[] = sprintf('Updated %d items', $results->UpdatedCount());\n        }\n        if ($results->DeletedCount()) {\n            $messages[] = sprintf('Deleted %d items', $results->DeletedCount());\n        }\n        if (!$messages) {\n            $messages[] = 'No changes';\n        }\n        $form->sessionMessage(implode(', ', $messages), 'good');\n\n        return $this->redirectBack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Versioned DataObject Permissions\nDESCRIPTION: Shows how to extend permissions for a versioned DataObject using an Extension class. This example adds a check for a 'DRAFT_STATUS' permission when viewing non-live records.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\ORM\\DataExtension;\nuse SilverStripe\\Security\\Permission;\n\nclass MyObjectExtension extends DataExtension\n{\n    public function canViewNonLive($member = null)\n    {\n        if (!Permission::check($member, 'DRAFT_STATUS')) {\n            return false;\n        }\n\n        // Defer to the result of the main canViewVersioned() permission checks\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Relation Scaffolding in Silverstripe (PHP)\nDESCRIPTION: This example shows how to customize the scaffolding of relation fields in Silverstripe CMS. It demonstrates overriding default scaffolding methods for has_one, has_many, and many_many relations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse App\\Form\\MyCustomField;\nuse SilverStripe\\Forms\\FormField;\nuse SilverStripe\\Forms\\GridField\\GridFieldAddExistingAutocompleter;\nuse SilverStripe\\Forms\\SearchableMultiDropdownField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyChild extends DataObject\n{\n    // ...\n    public function scaffoldFormFieldForHasOne(\n        string $fieldName,\n        ?string $fieldTitle,\n        string $relationName,\n        DataObject $ownerRecord\n    ): FormField {\n        // Return a form field that should be used for selecting this model type for has_one relations.\n        return MyCustomField::create($fieldName, $fieldTitle);\n    }\n\n    public function scaffoldFormFieldForHasMany(\n        string $relationName,\n        ?string $fieldTitle,\n        DataObject $ownerRecord,\n        bool &$includeInOwnTab\n    ): FormField {\n        // If this should be in its own tab, set $includeInOwnTab to true, otherwise set it to false.\n        $includeInOwnTab = false;\n        // Return a form field that should be used for selecting this model type for has_many relations.\n        return SearchableMultiDropdownField::create($relationName, $fieldTitle, static::get());\n    }\n\n    public function scaffoldFormFieldForManyMany(\n        string $relationName,\n        ?string $fieldTitle,\n        DataObject $ownerRecord,\n        bool &$includeInOwnTab\n    ): FormField {\n        // The default implementation for this method returns a GridField, which we can modify.\n        $gridField = parent::scaffoldFormFieldForManyMany($relationName, $fieldTitle, $ownerRecord, $includeInOwnTab);\n        $gridField->getConfig()->removeComponentsByType(GridFieldAddExistingAutocompleter::class);\n        return $gridField;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redefining Allowed Actions in Subclasses in Silverstripe\nDESCRIPTION: Shows how to properly redefine allowed actions in subclasses when overwriting methods from parent classes. Access control must be redefined even if the parent class already defined it.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/03_Access_Control.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass MyController extends Controller\n{\n    // ...\n\n    private static $allowed_actions = [\n        'action',\n    ];\n\n    public function action(HTTPRequest $request)\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass MyChildController extends MyController\n{\n    // ...\n\n    private static $allowed_actions = [\n        // required as we are redefining the action\n        'action',\n    ];\n\n    public function action(HTTPRequest $request)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Data to a Silverstripe Template in PHP\nDESCRIPTION: Demonstrates how to use the renderWith() method to render data into a Silverstripe template from a DataObject subclass.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/04_Rendering_Templates.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\View\\ArrayData;\n\nclass MyModel extends DataObject\n{\n    // ...\n\n    public function getRenderedMessage()\n    {\n        $arrayData = ArrayData::create([\n            'Name' => 'John',\n            'Role' => 'Head Coach',\n        ]);\n\n        // renders \"<strong>John</strong> is the Head Coach on our team.\"\n        return $arrayData->renderWith('Coach_Message');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Cache in PHP\nDESCRIPTION: Demonstrates different methods of invalidating cache in PHP, including clearing the entire cache, deleting specific items, and setting expiration times for cache entries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/01_Caching.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\SimpleCache\\CacheInterface;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n$cache = Injector::inst()->get(CacheInterface::class . '.myCache');\n\n// remove all items in this (namespaced) cache\n$cache->clear();\n\n// remove the cache item\n$cache->delete('myCacheKey');\n\n// set a cache item with an expiry\n// cache for 300 seconds\n$cache->set('myCacheKey', 'myValue', 300);\n```\n\n----------------------------------------\n\nTITLE: Querying Read Countries with Argument - GraphQL\nDESCRIPTION: This GraphQL query example demonstrates how to call the `readCountries` query with a required `limit` argument set to 5. The response will contain the names and codes of the countries based on this limit.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/04_adding_arguments.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readCountries(limit: 5) {\n    name\n    code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Injector to Create Instances\nDESCRIPTION: Demonstrates how to use Silverstripe's Injector to instantiate objects with configured dependencies.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Control\\MyController;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n$object = Injector::inst()->get(MyController::class);\n\n// prints 'ThirdParty\\PermissionService'\necho get_class($object->permissions);\n\n// prints 'This will just be assigned as a string'\necho $object->getDefaultText();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Model Validation in Silverstripe CMS\nDESCRIPTION: Demonstrates how to implement custom validation logic in a DataObject subclass using the validate() method in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/09_Validation.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    private static $db = [\n        'Country' => 'Varchar',\n        'Postcode' => 'Varchar',\n    ];\n\n    public function validate()\n    {\n        $result = parent::validate();\n\n        // This will add a field specific error to the ValidationResult\n        if (strlen($this->Postcode) > 10) {\n            $result->addFieldError('Postcode', 'Postcode is too long');\n        }\n\n        // This will add a general error to the ValidationResult\n        if ($this->Country == 'DE' && $this->Postcode && strlen($this->Postcode) !== 5) {\n            $result->addError('Need five digits for German postcodes');\n        }\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Default Authenticator in Silverstripe CMS\nDESCRIPTION: Shows how to replace the default MemberAuthenticator with a custom authenticator using YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/03_Authentication.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n---\nName: MyAuth\nAfter:\n  - '#coresecurity'\n---\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Security\\Security:\n    properties:\n      Authenticators:\n        default: '%$App\\Authenticator\\MyAuthenticator'\n```\n\n----------------------------------------\n\nTITLE: Creating and Storing Files in Silverstripe PHP\nDESCRIPTION: Demonstrates how to create a new File record in Silverstripe, store content from a string, and write it to the database. Dependencies include Silverstripe's File API and its Storage AssetStore. The input is a file name and content string, and output is a stored file record. Assumes asset storage configuration is appropriately set.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Assets\\File;\n\n// Store a file named \"example-file.txt\".\n$fileRecord = File::create();\n$fileRecord->setFromString('This is some file content', 'example-file.txt');\n$fileRecord->write();\n```\n\n----------------------------------------\n\nTITLE: Declaring Pluralizations with i18nEntityProvider in PHP\nDESCRIPTION: This snippet shows how to declare pluralizations for a DataObject in Silverstripe using the `i18nEntityProvider` interface. It defines plural forms with 'one' and 'other' keys, adhering to CLDR standards for the default `en` language. This method ensures correct pluralization within the application.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject implements i18nEntityProvider\n{\n    public function provideI18nEntities()\n    {\n        return [\n            __CLASS__ . '.SINGULARNAME' => 'object',\n            __CLASS__ . '.PLURALNAME' => 'objects',\n            __CLASS__ . '.PLURALS' => [\n                'one' => 'An object',\n                'other' => '{count} objects',\n            ],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using setUpBeforeClass and tearDownAfterClass in Silverstripe CMS Tests\nDESCRIPTION: Shows how to implement setUpBeforeClass and tearDownAfterClass methods in a Silverstripe CMS test case for one-time setup and teardown operations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/00_Unit_Testing.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Test;\n\nuse SilverStripe\\Dev\\SapphireTest;\n\nclass PageTest extends SapphireTest\n{\n    public static function setUpBeforeClass(): void\n    {\n        parent::setUpBeforeClass();\n\n        // ...\n    }\n\n    public static function tearDownAfterClass(): void\n    {\n        parent::tearDownAfterClass();\n\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Form in Silverstripe CMS Template\nDESCRIPTION: Demonstrates how to render a form in a Silverstripe CMS template file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: ss\nCODE:\n```\n<%-- app/templates/App/PageType/MyFormPage.ss --%>\n$HelloForm\n```\n\n----------------------------------------\n\nTITLE: Defining Player and Team DataObjects in SilverStripe\nDESCRIPTION: This snippet defines two DataObject classes, Player and Team, with their respective database fields and relationships. It demonstrates how to set up has_one and many_many relationships in SilverStripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/06_Handle_Nested_data.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $db = [\n        'Name' => 'Varchar',\n    ];\n\n    private static $has_one = [\n        'HometownTeam' => Team::class,\n    ];\n\n    private static $many_many = [\n        'Teams' => Team::class,\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Team extends DataObject\n{\n    private static $db = [\n        'Name' => 'Varchar',\n    ];\n\n    private static $belongs_many_many = [\n        'Players' => Player::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Versioned Records by Stage\nDESCRIPTION: Demonstrates different methods for reading versioned records from specific stages.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Versioned\\Versioned;\n\n// Fetching multiple records\n$stageRecords = Versioned::get_by_stage(MyRecord::class, Versioned::DRAFT);\n$liveRecords = Versioned::get_by_stage(MyRecord::class, Versioned::LIVE);\n\n// Fetching a single record\n$stageRecord = Versioned::get_by_stage(MyRecord::class, Versioned::DRAFT)->byID(99);\n$liveRecord = Versioned::get_by_stage(MyRecord::class, Versioned::LIVE)->byID(99);\n```\n\n----------------------------------------\n\nTITLE: Customizing Cookie Backend with Silverstripe in PHP\nDESCRIPTION: Illustrates how to use a custom Cookie_Backend in Silverstripe by registering a new CookieJar instance using SilverStripe\\Control\\CookieJar and the Injector class. It requires instantiation of CookieJar and registration of the service with the 'Cookie_Backend' identifier. This customization allows for manipulation of cookie logic within an application.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/01_Cookies.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse SilverStripe\\Control\\Cookie;\nuse SilverStripe\\Control\\CookieJar;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n$myCookies = [\n    'cookie1' => 'value1',\n];\n\n$newBackend = new CookieJar($myCookies);\n\nInjector::inst()->registerService($newBackend, 'Cookie_Backend');\n\nCookie::get('cookie1');\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview States for Versioned DataObjects\nDESCRIPTION: Example showing how to enable draft and live preview states for versioned DataObjects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\CMSPreviewable;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyModel extends DataObject implements CMSPreviewable\n{\n    private static $show_stage_link = true;\n    private static $show_live_link = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Silverstripe CMS Themes in YAML\nDESCRIPTION: YAML configuration to set the theme order in Silverstripe CMS. This determines the priority for template and resource resolution, allowing for cascading themes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/06_Themes.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/themes.yml\nSilverStripe\\View\\SSViewer:\n  themes:\n    - '$public'\n    - theme_name\n    - '$default'\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex URL Handlers in SilverStripe PHP Controller\nDESCRIPTION: Demonstrates how to handle complex URL patterns with multiple parameters in a SilverStripe controller class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\CMS\\Controllers\\ContentController;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass FeedController extends ContentController\n{\n    private static $url_segment = 'feed';\n\n    private static $allowed_actions = [\n        'go',\n    ];\n\n    private static $url_handlers = [\n        'go/$UserName/$Timestamp/$OutputType/$DeleteMode' => 'go',\n    ];\n\n    public function go(HTTPRequest $request)\n    {\n        $user = $this->getUserByName($this->getRequest()->param('UserName'));\n        /* more processing goes here */\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using many_many in SilverStripe Templates\nDESCRIPTION: Demonstrates how to use many_many relationships in SilverStripe templates, including accessing join records and extra fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_16\n\nLANGUAGE: ss\nCODE:\n```\n<% with $Supporter %>\n    <% loop $Supports %>\n        Supports $Title (rank $Ranking)\n    <% end_loop %>\n<% end_with %>\n```\n\nLANGUAGE: ss\nCODE:\n```\n<% with $Supporter %>\n    <% loop $Supports %>\n        Access extrafields directly: $Ranking\n        Access extrafields using getJoin: $Join.Ranking\n        Access extrafields using the somewhat-magic join-class selector: $TeamSupporter.Ranking\n    <% end_loop %>\n<% end_with %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Specific Rate Limiting\nDESCRIPTION: Applies rate limiting to a specific route section using custom controller configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/06_Rate_Limiting.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    special/section:\n      Controller: '%$MyRateLimitedController'\n```\n\n----------------------------------------\n\nTITLE: Using chunkedFetch for Memory-Efficient Iteration in SilverStripe\nDESCRIPTION: Demonstration of how to use chunkedFetch() to iterate over large datasets while minimizing memory usage by splitting the database query into smaller chunks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/03_Lists.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Without using chunked fetch, all of the data for all of the Member records will be fetched from the database\n// in a single query\n$members = Member::get();\nforeach ($members as $member) {\n    echo $member->Email;\n}\n\n// This call will produce the same output, but it will use less memory and run more queries against the database\n$members = Member::get()->chunkedFetch();\nforeach ($members as $member) {\n    echo $member->Email;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Actions in Extensions for Silverstripe Controllers\nDESCRIPTION: Shows how to define allowed actions in Extension classes applied to a controller. Includes both the YAML configuration to apply the extension and the PHP extension class with allowed actions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/03_Access_Control.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nVendor\\Module\\Control\\SomeModuleController:\n  extensions:\n    - 'App\\Extension\\MyExtension'\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\n\nclass MyExtension extends Extension\n{\n    private static $allowed_actions = [\n        'myCustomAction',\n    ];\n\n    public function myCustomAction()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Silverstripe CMS Template Structure\nDESCRIPTION: Demonstrates the basic structure of a Silverstripe CMS template, including variables, conditionals, loops, and includes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n<%-- app/templates/Page.ss --%>\n<html>\n    <head>\n        <% base_tag %>\n        <title>$Title</title>\n        $MetaTags(false)\n        <% require themedCSS(\"screen\") %>\n    </head>\n    <body>\n        <header>\n            <h1>Bob's Chicken Shack</h1>\n        </header>\n\n        <% with $CurrentMember %>\n            <p>Welcome $FirstName $Surname.</p>\n        <% end_with %>\n\n        <% if $Dishes %>\n        <ul>\n            <% loop $Dishes %>\n                <li>$Title ($Price.Nice)</li>\n            <% end_loop %>\n        </ul>\n        <% end_if %>\n\n        <% include Footer %>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Combining CSS Files with Media Specificity in Silverstripe CMS\nDESCRIPTION: This PHP code demonstrates how to combine multiple CSS files into a single media-specific stylesheet using the Requirements class in Silverstripe CMS. It uses the ThemeResourceLoader to find themed CSS files and combines them for print media.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\View\\Requirements;\nuse SilverStripe\\View\\SSViewer;\nuse SilverStripe\\View\\ThemeResourceLoader;\n\n$loader = ThemeResourceLoader::inst();\n$themes = SSViewer::get_themes();\n\n$printStylesheets = [\n    $loader->findThemedCSS('print_HomePage.css', $themes),\n    $loader->findThemedCSS('print_Page.css', $themes),\n];\n\nRequirements::combine_files('print.css', $printStylesheets, 'print');\n```\n\n----------------------------------------\n\nTITLE: Generating Code Coverage Report in Silverstripe CMS\nDESCRIPTION: PHPUnit command to generate an HTML code coverage report for Silverstripe CMS tests, useful for identifying gaps in test coverage.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit --coverage-html <output-folder> <optional-tests-folder>\n```\n\n----------------------------------------\n\nTITLE: Configuring MyISAM Storage Engine for Fulltext Search\nDESCRIPTION: Sets up a DataObject to use MyISAM storage engine required for MySQL fulltext search functionality. Adds necessary table creation options to enable fulltext search capabilities.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/12_Search/02_FulltextSearch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\Connect\\MySQLSchemaManager;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    private static $create_table_options = [\n        MySQLSchemaManager::ID => 'ENGINE=MyISAM',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Base Tag in HTML Head\nDESCRIPTION: Demonstrates how to insert the base tag in the HTML head section of a Silverstripe CMS template. The base tag ensures proper relative linking for images and CSS files.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n<head>\n    <% base_tag %>\n    ...\n</head>\n```\n\n----------------------------------------\n\nTITLE: Adding a DateField to a SilverStripe Page\nDESCRIPTION: This snippet demonstrates how to add a DateField to a custom Page type in SilverStripe. It includes defining the database field and adding the form field to the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/02_DateField.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/PageType/MyPage.php\nnamespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\Forms\\DateField;\n\nclass MyPage extends Page\n{\n    private static $db = [\n        'MyDate' => 'Date',\n    ];\n\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n\n        $fields->addFieldToTab(\n            'Root.Main',\n            DateField::create('MyDate', 'Enter a date')\n        );\n\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelTypePlugin for Exposing Lat/Lon Fields in PHP\nDESCRIPTION: This snippet defines a ModelTypePlugin that adds latitude and longitude fields to geocodable DataObjects in the GraphQL schema.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/03_writing_a_complex_plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Plugin;\n\nuse App\\Geo\\GeocodableExtension;\nuse SilverStripe\\GraphQL\\Schema\\Interfaces\\ModelTypePlugin;\nuse SilverStripe\\GraphQL\\Schema\\Schema;\nuse SilverStripe\\GraphQL\\Schema\\Type\\ModelType;\n// ...\n\nclass GeocodableModelPlugin implements ModelTypePlugin\n{\n    public function getIdentifier(): string\n    {\n        return 'geocode';\n    }\n\n    public function apply(ModelType $type, Schema $schema, array $config = []): void\n    {\n        $class = $type->getModel()->getSourceClass();\n\n        // sanity check that this is a DataObject\n        Schema::invariant(\n            is_subclass_of($class, DataObject::class),\n            'The %s plugin can only be applied to types generated by %s models',\n            __CLASS__,\n            DataObject::class\n        );\n\n        // only apply the plugin to geocodable DataObjects\n        if (!ViewableData::has_extension($class, GeocodableExtension::class)) {\n            return;\n        }\n\n        $type->addField('Lat')\n            ->addField('Lon');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Layout with $Layout Variable in Silverstripe CMS\nDESCRIPTION: Demonstrates how to use the $Layout variable to create nested layouts in Silverstripe CMS templates. Shows examples for a base Page template and specific Layout templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/05_Template_Inheritance.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<%-- app/templates/Page.ss --%>\n<html>\n<head>\n    ..\n</head>\n\n<body>\n    <% include Header %>\n    <% include Navigation %>\n\n    $Layout\n\n    <% include Footer %>\n</body>\n```\n\nLANGUAGE: html\nCODE:\n```\n<%-- app/templates/Layout/Page.ss --%>\n\n<p>You are on a $ClassName.ShortName page</p>\n\n$Content\n```\n\nLANGUAGE: html\nCODE:\n```\n<%-- app/templates/App/PageType/Layout/HomePage.ss --%>\n<h1>This is the homepage!</h1>\n\n<strong>Hi!</strong>\n```\n\n----------------------------------------\n\nTITLE: Using i18n::_t in PHP Files\nDESCRIPTION: This example showcases the usage of `i18n::_t` in PHP files for string translation, variable injection, and pluralization. It demonstrates how to translate simple strings, inject variables into translated strings, and invoke plural forms using a pipe delimiter and a {count} argument. The snippet also shows referencing the current class name.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Simple string translation\n_t('SilverStripe\\\\Admin\\\\LeftAndMain.FILESIMAGES', 'Files & Images');\n\n// Using injection to add variables into the translated strings.\n_t(\n    'SilverStripe\\\\CMS\\\\Controllers\\\\CMSMain.RESTORED',\n    'Restored {value} successfully',\n    ['value' => $itemRestored]\n);\n\n// Plurals are invoked via a `|` pipe-delimeter with a {count} argument\n_t('MyObject.PLURALS', 'An object|{count} objects', [ 'count' => $count ]);\n\n// You can use __CLASS__ or self::class to reference the current (early bound) class name\n_t(self::class . '.GREETING', 'Welcome!');\n_t(__CLASS__ . '.GREETING', 'Welcome!');\n```\n\n----------------------------------------\n\nTITLE: Defining many_many Relationships with Extra Fields in SilverStripe\nDESCRIPTION: Example showing how to define many_many relationships with extra fields and their corresponding belongs_many_many relationship.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Team extends DataObject\n{\n    private static $many_many = [\n        'Supporters' => Supporter::class,\n    ];\n\n    private static $many_many_extraFields = [\n        'Supporters' => [\n          'Ranking' => 'Int',\n        ],\n    ];\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Supporter extends DataObject\n{\n    private static $belongs_many_many = [\n        'Supports' => Team::class,\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing CLI Processes with Sake in BASH\nDESCRIPTION: This command shows how to manage long-running processes created via a CLI controller using Sake, demonstrating both starting and stopping the process.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/17_CLI/index.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsake -start my_process\nsake -stop my_process\n```\n\n----------------------------------------\n\nTITLE: Navigating has_many Relationships in SilverStripe\nDESCRIPTION: Example demonstrating how to navigate and use has_many relationships through the ORM.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$team = Team::get()->first();\n\n/** @var HasManyList $players */\n$players = $team->Players();\n\n/** @var int $numPlayers */\n$numPlayers = $players->Count();\n\nforeach ($players as $player) {\n    echo $player->FirstName;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Components and Reducers with Injector\nDESCRIPTION: Registers React components and reducers with the Injector API, making them available for customization.  It uses `Injector.component.register` and `Injector.reducer.register` to register the components and reducers, respectively.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// my-public-module/js/main.js\nimport Injector from 'lib/Injector';\n\nInjector.component.register('MyComponent', MyComponent);\nInjector.reducer.register('myCustom', MyReducer);\n```\n\n----------------------------------------\n\nTITLE: Advanced Permission Methods with Extension and Parent Class Support\nDESCRIPTION: An implementation that respects both parent class permissions and extension-based permissions. It demonstrates using extendedCan() to check if extensions modify permissions and also validates parent class permissions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/07_Permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model\\MyDataObject;\n\nuse SilverStripe\\Security\\Permission;\n\nclass MyDataObject extends SomeParentObject\n{\n    public function canView($member = null)\n    {\n        // If any extension returns false, the result will be false\n        // otherwise if any extension returns true, the result will be true\n        $extended = $this->extendedCan(__FUNCTION__, $member);\n        // The line below is checking that there is any value other than null, but depending on your\n        // use case you may want to explicitly check for a `false` value instead, and ignore any true values,\n        // e.g. if you don't want extensions saying members CAN perform this action before you've done your own checks.\n        if ($extended !== null) {\n            return $extended;\n        }\n\n        // If no extensions return true or false, check for a specific permission here.\n        return Permission::check('CMS_ACCESS_CMSMain', 'any', $member);\n    }\n\n    public function canEdit($member = null)\n    {\n        // If the parent class says the member can't perform this action, don't let them do it.\n        // Be careful though - if the parent class doesn't explicitly implement canEdit(), you will end up\n        // only allowing ADMIN's access by calling the implementation in the DataObject class.\n        if (!parent::canEdit($member)) {\n            return false;\n        }\n\n        // If the parent object doesn't say the member can't perform the action, do our own checks.\n        return Permission::check('CMS_ACCESS_CMSMain', 'any', $member);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Query Debugging in Silverstripe CMS\nDESCRIPTION: This code snippet illustrates how to enable SQL query debugging in Silverstripe CMS by setting the 'showqueries' URL parameter. It allows developers to view all executed SQL queries, with options for inline parameter replacement and backtrace display.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/02_URL_Variable_Tools.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (isset($_GET['showqueries'])) {\n    $showQueriesValue = $_GET['showqueries'];\n    if ($showQueriesValue === '1' || $showQueriesValue === 'inline' || $showQueriesValue === 'backtrace') {\n        // Enable query debugging based on the value\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Teams for a Player using Array Notation in SilverStripe Form\nDESCRIPTION: This snippet shows how to use array notation in SilverStripe forms to create multiple new teams for an existing player. It demonstrates handling of array-based form data and manual creation of related objects during form submission.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/06_Handle_Nested_data.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse App\\Model\\Player;\nuse App\\Model\\Team;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\HiddenField;\nuse SilverStripe\\Forms\\RequiredFields;\nuse SilverStripe\\Forms\\TextField;\n\nclass MyController extends Controller\n{\n    private static $url_segment = 'MyController';\n\n    private static $allowed_actions = [\n        'getForm',\n    ];\n\n    private static $url_handlers = [\n        'Form' => 'getForm',\n    ];\n\n    public function getForm()\n    {\n        $player = Player::get()->byID(1);\n        return Form::create(\n            $this,\n            'Form',\n            FieldList::create([\n                TextField::create('Name'),\n                // The UI could duplicate this field to allow creating multiple fields\n                TextField::create('NewTeams[]', 'New Teams'),\n                HiddenField::create('ID'),\n            ]),\n            FieldList::create([\n                FormAction::create('doSubmitForm', 'Submit'),\n            ]),\n            RequiredFields::create([\n                'Name',\n                'MyTeams[]',\n                'ID',\n            ])\n        )->loadDataFrom($player);\n    }\n\n    public function doSubmitForm($data, $form)\n    {\n        $player = Player::get()->byID($data['ID']);\n\n        // Only works for updating existing records\n        if (!$player) {\n            return false;\n        }\n\n        // Check permissions for the current user.\n        // if (!$player->canEdit()) {\n        //     return false;\n        // }\n\n        $form->saveInto($player);\n\n        // Manually create teams based on provided data\n        foreach ($data['NewTeams'] as $teamName) {\n            // Caution: Requires data validation on model\n            $team = Team::create()->update(['Name' => $teamName]);\n            $team->write();\n            $player->Teams()->add($team);\n        }\n\n        $form->sessionMessage('Saved!', 'good');\n\n        return $this->redirectBack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Protected File\nDESCRIPTION: This PHP snippet demonstrates how to publish a file from the protected store to the public store using SilverStripe's AssetStore. This operation allows a previously protected file to be accessed directly via its public URL without additional PHP requests.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SilverStripe\\Assets\\Storage\\AssetStore;\n\n$store = singleton(AssetStore::class);\n$store->publish('NewCompanyLogo.gif', 'a870de278b475cb75f5d9f451439b2d378e13af1');\n```\n\n----------------------------------------\n\nTITLE: Implementing setUp and tearDown Methods in Silverstripe CMS Tests\nDESCRIPTION: Demonstrates how to use setUp and tearDown methods in a Silverstripe CMS test case. It creates test data, configures settings, and shows proper parent method calls.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/00_Unit_Testing.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Test;\n\nuse SilverStripe\\Core\\Config\\Config;\nuse SilverStripe\\Dev\\SapphireTest;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass PageTest extends SapphireTest\n{\n    protected $usesDatabase = true;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        // create 100 pages\n        for ($i = 0; $i < 100; $i++) {\n            $page = new Page(['Title' => \"Page $i\"]);\n            $page->write();\n            $page->copyVersionToStage(Versioned::DRAFT, Versioned::LIVE);\n        }\n\n        // set custom configuration for the test.\n        Config::modify()->update('Foo', 'bar', 'Hello!');\n    }\n\n    public function testMyMethod()\n    {\n        // ...\n    }\n\n    public function testMySecondMethod()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Lifetime in YAML\nDESCRIPTION: Shows how to configure the default lifetime for cache items using YAML configuration. This example sets the default lifetime to 3600 seconds (1 hour) for a specific cache service.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/01_Caching.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nName: my-project-cache\nAfter: '#corecache'\n---\nSilverStripe\\Core\\Injector\\Injector:\n  Psr\\SimpleCache\\CacheInterface.cacheblock:\n    constructor:\n      defaultLifetime: 3600\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Demonstrates configuration based on environment variables and constants.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n---\nOnly:\n  envorconstant:\n    TEST_ENV: 'example'\n    TEST_CONST: true\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Objects in Silverstripe CMS Template\nDESCRIPTION: Shows how to access and display related objects in Silverstripe CMS templates. This example checks if a Player has a Team and displays the Team's title.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_3\n\nLANGUAGE: ss\nCODE:\n```\n<% with $Player %>\n    <% if $Team.exists %>\n        Plays for $Team.Title\n    <% end_if %>\n<% end_with %>\n```\n\n----------------------------------------\n\nTITLE: Advanced Dynamic Value Setting in SilverStripe\nDESCRIPTION: Demonstrates setting dynamic values based on relations using onBeforeWrite() and setter methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Dynamic_Default_Fields.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Dog extends DataObject\n{\n    // ...\n\n    public function onBeforeWrite()\n    {\n        // Only do this if the record hasn't been written to the database yet (optional)\n        if (!$this->isInDb()) {\n            $parent = $this->Parent();\n            // Set the FullTitle based on the parent, if one exists\n            if ($parent->exists()) {\n                $this->FullTitle = $parent->Title . ': ' . $this->Title;\n            } else {\n                $this->FullTitle = $this->Title;\n            }\n        }\n    }\n\n    // or\n\n    public function setFullTitle($value): static\n    {\n        $parent = $this->Parent();\n        // Set the FullTitle based on the parent, if one exists\n        if ($parent->exists()) {\n            $value = $parent->Title . ': ' . $value;\n        }\n        return $this->setField('FullTitle', $value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Shortcode\nDESCRIPTION: PHP code to register a custom shortcode with the ShortcodeParser.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse App\\ShortCode\\MyShortCodeProvider;\nuse SilverStripe\\View\\Parsers\\ShortcodeParser;\n\nShortcodeParser::get('default')->register('my_shortcode', [MyShortCodeProvider::class, 'parseMyShortCode']);\n```\n\n----------------------------------------\n\nTITLE: Adding Callbacks to Fixture Blueprints in SilverStripe\nDESCRIPTION: Demonstrates how to add callbacks to a FixtureBlueprint to perform actions after an object is created, such as publishing a page. Shows available callback points in the object creation lifecycle.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$blueprint = Injector::inst()->create('FixtureBlueprint', 'Member');\n\n$blueprint->addCallback('afterCreate', function ($obj, $identifier, $data, $fixtures) {\n    $obj->copyVersionToStage(Versioned::DRAFT, Versioned::LIVE);\n});\n\n$page = $factory->define(Page::class, $blueprint);\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Fields for Product Model in Silverstripe CMS\nDESCRIPTION: Defines searchable fields for the Product model to customize the search functionality in ModelAdmin.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/Product.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject\n{\n    // ...\n\n    private static $searchable_fields = [\n      'Name',\n      'ProductCode',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: List Iteration in Silverstripe\nDESCRIPTION: Demonstrates how to iterate over DataList results in PHP, showing basic loop operations and existence checking.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get();\n\nforeach ($players as $player) {\n    echo $player->FirstName;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get();\n\nif ($players->exists()) {\n    // do something here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Formatted Output with DBField in Silverstripe\nDESCRIPTION: Implementation of a getName() method that returns a formatted full name as a DBVarchar field. This allows template access to the combined name property with additional formatting capabilities.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/Player.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\FieldType\\DBField;\n\nclass Player extends DataObject\n{\n    public function getName()\n    {\n        return DBField::create_field('Varchar', $this->FirstName . ' ' . $this->LastName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Caching with Aggregates in SilverStripe Templates\nDESCRIPTION: Shows an efficient way to cache looped content using aggregates in SilverStripe templates, avoiding nesting issues with loop blocks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_7\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $LastEdited %>\n    <% cached $LastEdited, $AllChildren.max('LastEdited') %>\n        <% loop $Children %>\n            $Name\n        <% end_loop %>\n    <% end_cached %>\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Testing HomePage Controller with FunctionalTest in PHP\nDESCRIPTION: Example of a functional test class that demonstrates testing a homepage view, form submission, and user authentication. It includes tests for HTTP status codes, login form validation, and authenticated user content verification.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/How_Tos/01_Write_a_FunctionalTest.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/tests/HomePageTest.php\nnamespace App\\Test;\n\nuse SilverStripe\\Security\\Member;\n\nclass HomePageTest extends FunctionalTest\n{\n    /**\n     * Test generation of the view\n     */\n    public function testViewHomePage()\n    {\n        $page = $this->get('home/');\n\n        // Home page should load..\n        $this->assertEquals(200, $page->getStatusCode());\n\n        // We should see a login form\n        $login = $this->submitForm('LoginFormID', null, [\n            'Email' => 'test@example.com',\n            'Password' => 'wrongpassword',\n        ]);\n\n        // wrong details, should now see an error message\n        $this->assertExactHTMLMatchBySelector('#LoginForm p.error', [\n            'That email address is invalid.',\n        ]);\n\n        // If we login as a user we should see a welcome message\n        $me = Member::get()->first();\n\n        $this->logInAs($me);\n        $page = $this->get('home/');\n\n        $this->assertExactHTMLMatchBySelector('#Welcome', [\n            'Welcome back',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Nested React Route in JavaScript\nDESCRIPTION: This code snippet demonstrates how to register a nested URL under the `sectionConfig.reactRoutePath` using `ReactRouteRegister`. The `path` property specifies the relative path of the nested route, and the second argument to `add` specifies the parent route path.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Register a nested url under `sectionConfig.reactRoutePath`\nconst sectionConfig = ConfigHelpers.getSection('MyAdmin');\nreactRouteRegister.add({\n  path: 'nested',\n  component: NestedComponent,\n}, [sectionConfig.reactRoutePath]);\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelAdmin Preview Link Generation\nDESCRIPTION: Example showing how to generate preview links for DataObjects in ModelAdmin context.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse App\\Admin\\MyAdmin;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\ORM\\CMSPreviewable;\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject implements CMSPreviewable\n{\n    // ...\n\n    public function PreviewLink($action = null)\n    {\n        if (!$this->isInDB()) {\n            return null;\n        }\n        $admin = MyAdmin::singleton();\n        $link = Controller::join_links(\n            $admin->getLinkForModelClass(static::class),\n            'cmsPreview',\n            $this->ID\n        );\n        $this->extend('updatePreviewLink', $link, $action);\n        return $link;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Caching for Specific Controller Action in Silverstripe CMS\nDESCRIPTION: This example demonstrates how to disable caching for a particular controller action that relies on session data or other conditional output.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/02_HTTP_Cache_Headers.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace {\n\n    use SilverStripe\\CMS\\Controllers\\ContentController;\n    use SilverStripe\\Control\\Middleware\\HTTPCacheControlMiddleware;\n\n    class PageController extends ContentController\n    {\n        public function myprivateaction($request)\n        {\n            HTTPCacheControlMiddleware::singleton()\n            ->disableCache();\n\n            return $this->myPrivateResponse();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting File Visibility for Existing Files in Silverstripe CMS\nDESCRIPTION: PHP code showing how to modify the visibility of existing files in Silverstripe CMS. This example demonstrates how to make one file protected (requiring grant) and another file public.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// This will make the file available only when a user calls `->grant()`\n$object->SecretFile->protectFile();\n\n// This file will be available to everyone with the URL\n$object->PublicFile->publishFile();\n```\n\n----------------------------------------\n\nTITLE: Adding confirm state to form action - React\nDESCRIPTION: This snippet defines a ConfirmingFormAction wrapper that provides a confirmation step for form actions. It manages state to show confirm and cancel buttons based on user interaction.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Forms.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/src/ConfirmingFormAction.js\nimport React from 'react';\n\nexport default (FormAction) => {\n  class ConfirmingFormAction extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { confirming: false };\n      this.confirm = this.confirm.bind(this);\n      this.cancel = this.cancel.bind(this);\n      this.preClick = this.preClick.bind(this);\n    }\n\n    confirm(e) {\n      this.props.handleClick(e, this.props.name || this.props.id);\n      this.setState({ confirming: false });\n    }\n\n    cancel() {\n      this.setState({ confirming: false });\n    }\n\n    preClick(event) {\n      event.preventDefault();\n      this.setState({ confirming: true });\n    }\n\n    render() {\n      const { confirmText, cancelText } = this.props;\n      const buttonProps = {\n        ...this.props,\n        extraClass: 'ss-ui-action-constructive',\n        attributes: {\n          ...this.props.attributes,\n          type: 'button'\n        },\n      };\n      delete buttonProps.name;\n      delete buttonProps.type;\n\n      const hideStyle = {\n        display: this.state.confirming ? null : 'none'\n      };\n\n      return (\n        <div>\n          <FormAction {...buttonProps} handleClick={this.preClick} />\n          <button style={hideStyle} key=\"confirm\" type=\"submit\" name={this.props.name} onClick={this.confirm}>\n            {confirmText}\n          </button>\n          <button style={hideStyle} key=\"cancel\" type=\"button\" onClick={this.cancel}>{cancelText}</button>\n        </div>\n      );\n    }\n  }\n\n  return ConfirmingFormAction;\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Validation Integration Example\nDESCRIPTION: Shows how to integrate Parsley.js validation library with Silverstripe forms by adding data attributes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Forms\\Form;\n\nclass MyFormPageController extends PageController\n{\n    // ...\n\n    public function getMyForm()\n    {\n        // ...\n\n        $form = Form::create($this, 'MyForm', $fields, $actions);\n        $form->setAttribute('data-parsley-validate', true);\n\n        $field = $fields->dataFieldByName('Name');\n        $field->setAttribute('required', true);\n        $field->setAttribute('data-parsley-mincheck', '2');\n\n        return $form;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MyAdminExtension with SilverStripe PHP\nDESCRIPTION: Defines a PHP class MyAdminExtension that extends SilverStripe\\Core\\Extension to modify ModelAdmin interfaces. The primary focus is to append fields to the edit form using the updateEditForm method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extending_An_Existing_ModelAdmin.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\n\nclass MyAdminExtension extends Extension\n{\n    public function updateEditForm($form)\n    {\n        $form->Fields()->push(/* ... */)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Shortcodes in PHP\nDESCRIPTION: Demonstrates how to parse shortcodes in a text string using the ShortcodeParser class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$text = '<h1>My Map</h1>[map]'\n\n// Will output\n// <h1>My Map</h1><iframe ... ></iframe>\n```\n\n----------------------------------------\n\nTITLE: Defining a Versioned DataObject in PHP\nDESCRIPTION: This snippet shows how to create a simple versioned DataObject called MyVersionedObject with a Title field and the Versioned extension.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass MyVersionedObject extends DataObject\n{\n    private static $table_name = 'App_MyVersionedObject';\n\n    private static $db = [\n        'Title' => 'Varchar',\n    ];\n\n    private static $extensions = [\n        Versioned::class,\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Redirection Rules in SilverStripe YAML\nDESCRIPTION: Demonstrates the explicit syntax for configuring URL redirection rules in SilverStripe's YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/04_Redirection.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'about':\n      Redirect: 'about-us'\n```\n\n----------------------------------------\n\nTITLE: Implementing Member Login Tracking Extension in PHP\nDESCRIPTION: Creates a DataExtension class that adds LastVisited and NumVisit fields to Member records. Includes hooks for login events and CMS field updates, with methods to log visit timestamps and increment visit counts.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/How_Tos/03_Track_member_logins.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\ReadonlyField;\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\DataExtension;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Security\\Member;\nuse SilverStripe\\Security\\Security;\n\nclass MyMemberExtension extends DataExtension\n{\n    private static $db = [\n        'LastVisited' => 'Datetime',\n        'NumVisit' => 'Int',\n    ];\n\n    /**\n     * This extension hook is called every time a member is logged in\n     */\n    public function afterMemberLoggedIn()\n    {\n        $this->logVisit();\n    }\n\n    /**\n     * This extension hook is called when a member's session is restored from \"remember me\" cookies\n     */\n    public function memberAutoLoggedIn()\n    {\n        $this->logVisit();\n    }\n\n    public function updateCMSFields(FieldList $fields)\n    {\n        $fields->addFieldsToTab('Root.Main', [\n            ReadonlyField::create('LastVisited', 'Last visited'),\n            ReadonlyField::create('NumVisit', 'Number of visits'),\n        ]);\n    }\n\n    protected function logVisit()\n    {\n        if (!Security::database_is_ready()) {\n            return;\n        }\n\n        $lastVisitedTable = DataObject::getSchema()->tableForField(Member::class, 'LastVisited');\n\n        DB::query(sprintf(\n            'UPDATE \"' . $lastVisitedTable . '\" SET \"LastVisited\" = %s, \"NumVisit\" = \"NumVisit\" + 1 WHERE \"ID\" = %d',\n            DB::get_conn()->now(),\n            $this->owner->ID\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Records in Silverstripe\nDESCRIPTION: Shows various methods for sorting records including single field sorting, multi-field sorting, and random sorting.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Sort can either be Ascending (ASC) or Descending (DESC)\n$players = Player::get()->sort('FirstName', 'ASC');\n\n// Ascending is implied\n$players = Player::get()->sort('FirstName');\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->sort('FirstName', 'DESC');\n\n// or..\n$players = Player::get()->sort('FirstName', 'ASC')->reverse();\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Players::get()->sort([\n    'FirstName' => 'ASC',\n    'LastName' => 'ASC',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->shuffle();\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxy IP Subnets in Silverstripe CMS\nDESCRIPTION: Shows how to configure trusted proxy IP subnets in CIDR notation when exact IPs are not known, such as when using cloud provider load balancers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nSS_TRUSTED_PROXY_IPS=\"10.10.0.0/24,10.10.1.0/24,10.10.2.0/24\"\n```\n\n----------------------------------------\n\nTITLE: Creating Maps from SilverStripe Lists\nDESCRIPTION: Example of generating a key-value map from a Member list using the map() method, with ID as the key and FirstName as the value.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/03_Lists.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$members = Member::get()->map('ID', 'FirstName');\n\nforeach ($members as $id => $firstName) {\n    // Do something here with that data\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling a form field - React\nDESCRIPTION: This snippet defines a reusable HideableComponent that conditionally renders a component based on the shouldHide prop. It allows form fields to be shown or hidden based on the state of another field.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Forms.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/src/HideableComponent.js\nimport React from 'react';\n\nconst HideableComponent = ({ Component, ...props }) => (\n  props.shouldHide ? null : <Component {...props} />\n);\n\nHideableComponent.propTypes = {\n  shouldHide: PropTypes.boolean\n};\n\nHideableComponent.defaultProps = {\n  shouldHide: false\n};\n\nexport default (Component) => (props) => (\n  props.shouldHide ? null : <Component {...props} />\n);\n```\n\n----------------------------------------\n\nTITLE: Intercepting File Response\nDESCRIPTION: This PHP snippet demonstrates how to create a Silverstripe extension to intercept and modify the HTTP response for files before they are sent to the client. It allows for additional logic to be applied to the response.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Extension;\n\nuse SilverStripe\\Control\\HTTPResponse;\nuse SilverStripe\\Core\\Extension;\n\nclass AssetStoreExtension extends Extension\n{\n    /**\n     * @param HTTPResponse $response Update this object to modify the response\n     * @param string $asset Path of the request minus the `assets` prefix\n     * @param array $context This array contains some resolution information from\n     *   FlysystemAssetStore. It may be empty. It may contain a `visibility` key\n     *   to say if we are serving a public or protected file. It may contain a\n     *   `parsedFileID` detailing how FlysystemAssetStore has resolved $asset.\n     */\n    public function updateResponse(\n        HTTPResponse $response,\n        string $asset,\n        array $context\n    ): void {\n        // Do something to the response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Transformations to Specific Component Contexts\nDESCRIPTION: This example demonstrates how to apply a transformation only to a specific context (TextField in AssetAdmin.FileEditForm) rather than globally to all TextField components.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/main.js\nimport Injector from 'lib/Injector';\nimport TextLengthChecker from './components/TextLengthChecker';\n\nInjector.transform('text-length-transform', (updater) => {\n  updater.component('TextField.AssetAdmin.FileEditForm', TextLengthChecker);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying schema transformation for toggling - React\nDESCRIPTION: This snippet shows how to alter the form schema to determine whether to hide the 'State' field based on the value of 'Country'. It incorporates dynamic updates to the form's structure.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Forms.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform(\n  'my-toggle',\n  (updater) => {\n    updater.form.alterSchema(\n      'AssetAdmin.*',\n      (form) =>\n        form\n          .updateField('State', {\n            shouldHide: form.getValue('Country') !== 'US'\n          })\n          .getState()\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Root URL Handlers in SilverStripe PHP Controller\nDESCRIPTION: Demonstrates how to handle root URL requests with custom methods in a SilverStripe controller class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n\nclass BreadAPIController extends Controller\n{\n    private static $allowed_actions = [\n        'getBreads',\n        'createBread',\n    ];\n\n    private static $url_handlers = [\n        'GET /' => 'getBreads',\n        'POST /' => 'createBread',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests in Silverstripe CMS\nDESCRIPTION: Examples of command-line instructions for running various types of PHPUnit tests in a Silverstripe CMS project, including running all tests, tests for a specific module, and tests with optional parameters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit\nvendor/bin/phpunit vendor/silverstripe/framework/tests/\nvendor/bin/phpunit vendor/silverstripe/framework/tests/filesystem\nvendor/bin/phpunit vendor/silverstripe/framework/tests/filesystem/FolderTest.php\nvendor/bin/phpunit vendor/silverstripe/framework/tests '' flush=1\n```\n\n----------------------------------------\n\nTITLE: Creating a CharacterCounter Higher-Order Component in React\nDESCRIPTION: This code creates a higher-order component that wraps a TextField component to display a character count below the field. It passes all original props to the wrapped component and adds a small text showing the character count.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/components/CharacterCounter.js\nimport React from 'react';\n\nconst CharacterCounter = (TextField) => (props) => (\n  <div>\n    <TextField {...props} />\n    <small>Character count: {props.value.length}</small>\n  </div>\n);\n\nexport default CharacterCounter;\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Schemas with Injector Transformations\nDESCRIPTION: Shows how to use Injector transformations to customize form schemas, including updating field properties and adding custom props to form fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform(\n  'my-custom-form',\n  (updater) => {\n    updater.form.alterSchema(\n      'AssetAdmin.*',\n      (form) =>\n        form.updateField('Title', {\n          myCustomProp: true\n        })\n          .getState()\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using beforeExtending in a Custom Model Constructor\nDESCRIPTION: Demonstrates how to use beforeExtending to control default values during object initialization before extensions are called.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyModel extends DataObject\n{\n    private static $db = [\n        'MyField' => 'Text',\n    ];\n\n    public function __construct()\n    {\n        $this->beforeExtending('populateDefaults', function () {\n            if (empty($this->MyField)) {\n                $this->MyField = 'Value we want as a default if not specified in $defaults, but set before extensions';\n            }\n        });\n\n        parent::__construct();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing $@ Wildcard URL Handler in SilverStripe PHP Controller\nDESCRIPTION: Shows how to implement a controller that handles the '$@' wildcard URL pattern, allowing access to numbered URL parameters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass StaffController extends Controller\n{\n    private static $url_handlers = [\n        '$@' => 'index',\n    ];\n\n    public function index(HTTPRequest $request)\n    {\n        // GET /staff/managers/bob\n        // \"managers\"\n        $request->latestParam('$1');\n        // \"bob\"\n        $request->latestParam('$2');\n        // [\"managers\", \"bob\"]\n        $request->latestParams();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Types in YAML\nDESCRIPTION: This snippet demonstrates how to add descriptions to GraphQL types and fields to enhance the schema's readability and documentation. The 'Country' type is defined with fields 'code' and 'name', each having a specific type and description. This requires a YAML configuration with type definitions and string descriptions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/06_adding_descriptions.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# app/_graphql/schema.yml\ntypes:\n  Country:\n    description: A record that describes one of the world\\'s sovereign nations\n    fields:\n      code:\n        type: String!\n        description: The unique two-letter country code\n      name:\n        type: String!\n        description: The canonical name of the country, in English\n```\n\n----------------------------------------\n\nTITLE: Updating CMS Fields with DataExtension in PHP\nDESCRIPTION: Shows how to use a DataExtension to add custom fields to the CMS interface for a Member object.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\AssetAdmin\\Forms\\UploadField;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\ORM\\DataExtension;\n\nclass MyMemberExtension extends DataExtension\n{\n    private static $db = [\n        'Position' => 'Varchar',\n    ];\n\n    private static $has_one = [\n        'Image' => 'Image',\n    ];\n\n    public function updateCMSFields(FieldList $fields)\n    {\n        $fields->push(TextField::create('Position'));\n        $fields->push($upload = UploadField::create('Image', 'Profile Image'));\n        $upload->setAllowedFileCategories('image/supported');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cookie Values in PHP\nDESCRIPTION: Shows how to retrieve the value of a cookie using Silverstripe. This requires the SilverStripe\\Control\\Cookie class. By providing the cookie name, it fetches the corresponding value. If the cookie doesn't exist, it will return null.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/01_Cookies.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nCookie::get($name);\n\n// Cookie::get('MyApplicationPreference');\n// returns 'Yes'\n```\n\n----------------------------------------\n\nTITLE: Implementing BackURL Redirection in SilverStripe\nDESCRIPTION: Shows how to implement BackURL parameter handling for redirections, particularly useful for authentication flows. Demonstrates constructing URLs with BackURL parameters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/04_Redirection.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Security\\Security;\n\n$args = ['BackURL' => $this->Link('someAction')];\n$this->redirect(Controller::join_links(Security::login_url(), '?' . http_build_query($args)));\n```\n\n----------------------------------------\n\nTITLE: Configuring Member Extension in Silverstripe CMS\nDESCRIPTION: YAML configuration to add a custom extension to the Member class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/00_Member.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Security\\Member:\n  extensions:\n    - App\\Extension\\MyMemberExtension\n```\n\n----------------------------------------\n\nTITLE: Creating Custom SiteConfig Extension\nDESCRIPTION: Shows how to create a custom extension for SiteConfig to add additional configuration fields like FooterContent.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/01_SiteConfig.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Extension/CustomSiteConfig.php\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\HTMLEditor\\HTMLEditorField;\n\nclass CustomSiteConfig extends Extension\n{\n    private static $db = [\n        'FooterContent' => 'HTMLText',\n    ];\n\n    public function updateCMSFields(FieldList $fields)\n    {\n        $fields->addFieldToTab('Root.Main', HTMLEditorField::create('FooterContent', 'Footer Content'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring belongs_many_many Relationships in PHP\nDESCRIPTION: Shows how to set up belongs_many_many relationships in PHP, including using dot notation for multiple relationships between the same classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Category extends DataObject\n{\n    private static $many_many = [\n        'Products' => Product::class,\n        'FeaturedProducts' => Product::class,\n    ];\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject\n{\n    private static $belongs_many_many = [\n        'Categories' => Category::class . '.Products',\n        'FeaturedInCategories' => Category::class . '.FeaturedProducts',\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Composer JSON for a Silverstripe CMS Module\nDESCRIPTION: This JSON snippet shows the structure of a composer.json file for a Silverstripe CMS module. It includes the module name, description, type, and dependencies.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/00_Modules.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"my_vendor/module_name\",\n    \"description\": \"Short module description\",\n    \"type\": \"silverstripe-vendormodule\",\n    \"require\": {\n        \"silverstripe/framework\": \"^5.0\",\n        \"silverstripe/cms\": \"^5.0\",\n        \"silverstripe/blog\": \"^5.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascading Deletions for many_many Relations in PHP\nDESCRIPTION: Shows how to configure cascading deletions for many_many relations using a through table and has_many relation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Team extends DataObject\n{\n    // Define the many-to-many relationship using a custom relation table\n    private static array $many_many = [\n        'Supporters' => [\n            'through' => TeamSupporter::class,\n            'from' => 'Team',\n            'to' => 'Supporter',\n        ],\n    ];\n\n    // Add a different perspective of the relationship data\n    private static array $has_many = [\n        'SupportersRelation' => TeamSupporter::class . '.Team',\n    ];\n\n    // Unlink the relationship when the parent object is deleted\n    private static array $cascade_deletes = [\n        'SupportersRelation',\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Polymorphic many_many Relation in PHP\nDESCRIPTION: Demonstrates how to set up a polymorphic many_many relation between SomeObject and Tags using a through table. Includes configuration for the main object, the related object (Tag), and the join table (TagMapping).\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass SomeObject extends DataObject\n{\n    // This same many_many may also exist on other classes\n    private static $many_many = [\n        'Tags' => [\n            'through' => TagMapping::class,\n            'from' => 'Parent',\n            'to' => 'Tag',\n        ],\n    ];\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Tag extends DataObject\n{\n    // has_many works, but belongs_many_many will not\n    // note that we are explicitly declaring the join class \"TagMapping\" here instead of the \"SomeObject\" class.\n    private static $has_many = [\n        'TagMappings' => TagMapping::class,\n    ];\n\n    /**\n     * Example iterator placeholder for belongs_many_many.\n     * This is a list of arbitrary types of objects\n     * @return Generator\n     */\n    public function getTaggedObjects()\n    {\n        foreach ($this->TagMappings() as $mapping) {\n            yield $mapping->Parent();\n        }\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass TagMapping extends DataObject\n{\n    private static $has_one = [\n        // Polymorphic has_one\n        'Parent' => DataObject::class,\n        'Tag' => Tag::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a React Route in JavaScript\nDESCRIPTION: This code snippet shows how to register a React route on the client side using the `reactRouteRegister` component. The route registration is triggered on the `DOMContentLoaded` event to ensure routes are registered before window.load is invoked. The `path` is retrieved from the section config.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport ConfigHelpers from 'lib/Config';\nimport reactRouteRegister from 'lib/ReactRouteRegister';\nimport MyAdmin from './MyAdmin';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const sectionConfig = ConfigHelpers.getSection('MyAdmin');\n\n  reactRouteRegister.add({\n    path: sectionConfig.reactRoutePath,\n    component: MyAdminComponent,\n    childRoutes: [\n      { path: 'form/:id/:view', component: MyAdminComponent },\n    ],\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Custom RSS Feed Template in PHP\nDESCRIPTION: This snippet demonstrates how to set a custom template for the RSS feed output in a Silverstripe CMS HomePage class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/02_RSSFeed.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// app/src/PageType/HomePage.php\nnamespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\Control\\RSS\\RSSFeed;\n\nclass HomePage extends Page\n{\n    public function players()\n    {\n        $rss = RSSFeed::create(\n            Player::get(),\n            $this->Link('players'),\n            'Players'\n        );\n\n        $rss->setTemplate('PlayersRss');\n\n        return $rss->outputToBrowser();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customising CMS Help Menu Links in Silverstripe\nDESCRIPTION: This YAML configuration demonstrates how to edit, add, or remove links from the CMS help menu in the south toolbar by configuring the help_links property of LeftAndMain.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Menu.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/config.yml\nSilverStripe\\Admin\\LeftAndMain:\n  help_links:\n    # Edit an existing link\n    'CMS User help': 'https://www.example.com'\n    # Add a new link\n    'Additional link': 'https://example.org'\n    # Remove an existing link\n    'Feedback': ''\n```\n\n----------------------------------------\n\nTITLE: Sending Email Example in Silverstripe CMS\nDESCRIPTION: Example showing how to create and send an email using Silverstripe's Email class. This demonstrates setting up basic email properties like To, Subject, and Body before sending.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/How_Tos/03_Testing_Email.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Email\\Email;\n\npublic function MyMethod()\n{\n    $e = new Email();\n    $e->To = 'someone@example.com';\n    $e->Subject = 'Hi there';\n    $e->Body = 'I just really wanted to email you and say hi.';\n    $e->send();\n}\n```\n\n----------------------------------------\n\nTITLE: Unpublishing and Archiving Versioned DataObjects in Silverstripe\nDESCRIPTION: This code demonstrates how to unpublish or archive versioned DataObjects. Unpublishing removes a record from the 'Live' stage, while archiving also removes it from the 'Stage' stage (soft deletion).\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$record = MyRecord::get()->byID(99);\n\n// Visitors to the site won't be able to see this record anymore, but editors can\n// still edit it and re-publish it.\n$record->doUnpublish();\n\n\n// Editors won't be able to see this record anymore, but its version history will\n// still be in the database and may be restored.\n$record->delete();\n// or\n$record->doArchive();\n```\n\n----------------------------------------\n\nTITLE: Catching Email Send Failures with Symfony Mailer in PHP\nDESCRIPTION: This PHP snippet demonstrates handling email send failures using a try/catch block. It catches the Symfony Mailer TransportExceptionInterface to handle exceptions during email sending. Before attempting to send an email using the Silverstripe 'Email' class, ensure proper instantiation with valid addresses to avoid RfcComplianceException. Required dependencies include the 'SilverStripe\\Control\\Email\\Email' and 'Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface'. No additional parameters are needed, and the expected output is either a successful email send action or a caught exception. One limitation is ensuring valid email addresses to prevent address-related exceptions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/10_Email/index.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Email\\Email;\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\n\n$email = Email::create('from@example.com', 'to@example.com', 'My subject');\n$email->text('My plain text email content');\ntry {\n    $email->send();\n} catch (TransportExceptionInterface $e) {\n    // handle exception\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Casting Types for Custom Object in Silverstripe CMS\nDESCRIPTION: This snippet demonstrates how to define casting types for a custom object in Silverstripe CMS. It shows the usage of the $casting array to specify the type of content returned by a method, ensuring proper handling in templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/09_Casting.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Data;\n\nuse SilverStripe\\View\\ViewableData;\n\nclass MyTemplatedObject extends ViewableData\n{\n    private static $casting = [\n        'Header' => 'HTMLText',\n    ];\n\n    public function getHeader()\n    {\n        return '<h1>This is my header</h1>';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instance-specific RequiredFields Configuration\nDESCRIPTION: Demonstrates how to configure whitespace validation behavior for specific instances of RequiredFields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\Forms\\CompositeValidator;\nuse SilverStripe\\Forms\\RequiredFields;\n\nclass MyPage extends Page\n{\n    // ...\n\n    public function getCMSCompositeValidator(): CompositeValidator\n    {\n        $validator = parent::getCMSCompositeValidator();\n        $requiredFields = RequiredFields::create(['MyRequiredField']);\n        // per instance configuration, will override global configuration\n        $requiredFields->setAllowWhitespaceOnly(false);\n        $validator->addValidator($requiredFields);\n        return $validator;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Complex Cache Key in SilverStripe Controller\nDESCRIPTION: Demonstrates how to create a method in a controller to generate a complex cache key for a slider component, considering relationships and last edit times.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\n\nclass MyPageController extends PageController\n{\n    // ...\n\n    public function SliderCacheKey()\n    {\n        $fragments = [\n            'Page-Slides',\n            $this->ID,\n            // identify which objects are in the list and their sort order\n            implode('-', $this->Slides()->Column('ID')),\n            // identify if any objects are updated - works for both has_many and many_many relationships\n            $this->Slides()->max('LastEdited'),\n        ];\n        return implode('-_-', $fragments);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Action to GridFieldConfig in PHP\nDESCRIPTION: Code examples showing how to add the custom GridField action to a GridFieldConfig, either when creating a new GridField or adding to an existing one.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/04_Create_a_GridField_ActionProvider.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// option 1: creating a new GridField with the CustomAction\n$config = GridFieldConfig::create();\n$config->addComponent(GridFieldCustomAction::create());\n\n$gridField = GridField::create('Teams', 'Teams', $this->Teams(), $config);\n\n// option 2: adding the CustomAction to an existing GridField\n$gridField->getConfig()->addComponent(GridFieldCustomAction::create());\n```\n\n----------------------------------------\n\nTITLE: Configuring General Search Filter Globally in YAML\nDESCRIPTION: Set the general search filter globally using YAML configuration. This example shows how to use a specific filter class or disable the filter entirely.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\n# use a specific filter\nSilverStripe\\ORM\\DataObject:\n  general_search_field_filter: 'SilverStripe\\ORM\\Filters\\EndsWithFilter'\n\n# or disable the filter to fall back on individual fields' filters\nSilverStripe\\ORM\\DataObject:\n  general_search_field_filter: ''\n```\n\n----------------------------------------\n\nTITLE: Renaming Files in Silverstripe PHP\nDESCRIPTION: Shows renaming files in Silverstripe using ORM methods. Requires Silverstripe's File class and handles updates during the draft stage. Outputs an updated file name record, keeping variants consistent.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Assets\\File;\n\n$file = File::get()->filter('Name', 'oldname.jpg')->first();\nif ($file) {\n    // The below will move 'oldname.jpg' and 'oldname__variant.jpg'\n    // to 'newname.jpg' and 'newname__variant.jpg' respectively\n    $file->Name = 'newname.jpg';\n    $file->write();\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Logger in Silverstripe (YAML)\nDESCRIPTION: This snippet shows how to replace the default Monolog logger in Silverstripe CMS with a custom PSR-3 compliant logger. The custom logger 'Logging\\Logger' is injected into 'SilverStripe\\Logging\\ErrorHandler', allowing users to provide their own log handling mechanisms. It requires Silverstripe CMS and PSR-3 compliant logging libraries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\\n  SilverStripe\\Logging\\ErrorHandler:\\n    class: Logging\\Logger\\n    constructor:\\n     - 'alternative-logger'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Paginated List in a SilverStripe Controller\nDESCRIPTION: Creates a method in a controller that returns a paginated list of all pages. The method gets a list of Page objects and wraps it in a PaginatedList, passing the current request to enable pagination.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/How_Tos/02_Pagination.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/PageType/MyPageController.php\nnamespace App\\PageType;\n\nuse Page;\nuse PageController;\nuse SilverStripe\\ORM\\PaginatedList;\n\nclass MyPageController extends PageController\n{\n    // ...\n\n    /**\n     * Returns a paginated list of all pages in the site.\n     */\n    public function getPaginatedPages()\n    {\n        $list = Page::get();\n\n        return PaginatedList::create($list, $this->getRequest());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Includes in Silverstripe CMS Templates\nDESCRIPTION: Demonstrates how to use includes in Silverstripe CMS templates, including passing arguments to included templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_4\n\nLANGUAGE: ss\nCODE:\n```\n<% include SideBar %> <!-- chooses templates/Includes/Sidebar.ss -->\n<% include MyNamespace/SideBar %> <!-- chooses templates/MyNamespace/Includes/Sidebar.ss -->\n\n<% if $CurrentMember %>\n    <% include MembersOnlyInclude %>\n<% end_if %>\n\n<% with $CurrentMember %>\n    <% include MemberDetails Top=$Top, Name=$Name %>\n<% end_with %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Combined File Storage in Silverstripe CMS\nDESCRIPTION: This YAML configuration sets up a custom storage backend for combined files in Silverstripe CMS. It customizes the file storage location, enables combining in dev mode, and configures various other options for handling combined files.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nName: myrequirements\n---\nSilverStripe\\View\\Requirements:\n  disable_flush_combined: true\nSilverStripe\\View\\Requirements_Backend:\n  combine_in_dev: true\n  combine_hash_querystring: true\n  default_combined_files_folder: 'combined'\n  resolve_relative_css_refs: true\nSilverStripe\\Core\\Injector\\Injector:\n  # Create adapter that points to the custom directory root\n  SilverStripe\\Assets\\Flysystem\\PublicAdapter.custom-adapter:\n    class: SilverStripe\\Assets\\Flysystem\\PublicAssetAdapter\n    constructor:\n      Root: ./app/javascript\n  # Set flysystem filesystem that uses this adapter\n  League\\Flysystem\\Filesystem.custom-filesystem:\n    class: 'League\\Flysystem\\Filesystem'\n    constructor:\n      Adapter: '%$SilverStripe\\Assets\\Flysystem\\PublicAdapter.custom-adapter'\n  # Create handler to generate assets using this filesystem\n  SilverStripe\\Assets\\Storage\\GeneratedAssetHandler.custom-generated-assets:\n    class: SilverStripe\\Assets\\Flysystem\\GeneratedAssets\n    properties:\n      Filesystem: '%$League\\Flysystem\\Filesystem.custom-filesystem'\n  # Assign this generator to the requirements builder\n  SilverStripe\\View\\Requirements_Backend:\n    properties:\n      AssetHandler: '%$SilverStripe\\Assets\\Storage\\GeneratedAssetHandler.custom-generated-assets'\n```\n\n----------------------------------------\n\nTITLE: User Error Handling in Silverstripe DataObject\nDESCRIPTION: Implementation of user_error handling in a DataObject class showing notice and warning level error handling.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    // ...\n\n    public function delete()\n    {\n        if ($this->alreadyDelete) {\n            user_error('Delete called on already deleted object', E_USER_NOTICE);\n            return;\n        }\n        // ...\n    }\n\n    public function getRelatedObject()\n    {\n        if (!$this->RelatedObjectID) {\n            user_error(\"Can't find a related object\", E_USER_WARNING);\n            return;\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Objects in Silverstripe CMS PHP\nDESCRIPTION: Demonstrates how to access related objects using the ORM in Silverstripe CMS. This example shows accessing a Player's Team and its properties.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$player = Player::get()->byId(1);\n\n$team = $player->Team();\n// returns a 'Team' instance.\n\necho $player->Team()->Title;\n// returns the 'Title' column on the 'Team' or `getTitle` if it exists.\n```\n\n----------------------------------------\n\nTITLE: Controlling Lazy Loading via CMS Fields in Silverstripe\nDESCRIPTION: This code snippet shows how to allow content authors to control the lazy loading attribute of an image through the Silverstripe CMS. It defines a `HomePage` class with a `LogoLoading` field and a `Logo` image field, adding them to the CMS fields with a dropdown to select between lazy and eager loading. This allows content authors to choose whether an image should be lazy loaded or not.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/02_Images.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"namespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\AssetAdmin\\Forms\\UploadField;\nuse SilverStripe\\Assets\\Image;\nuse SilverStripe\\Forms\\DropdownField;\n\nclass HomePage extends Page\n{\n    private static $db = [\n        'LogoLoading' => 'Boolean',\n    ];\n\n    private static $has_one = [\n        'Logo' => Image::class,\n    ];\n\n    private static $defaults = [\n        'LogoLoading' => true,\n    ];\n\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n\n        $loadingSource = [\n            true => 'Lazy (Default)',\n            false => 'Eager',\n        ];\n\n        $fields->addFieldsToTab(\n            'Root.Main',\n            [\n                UploadField::create('Logo'),\n                DropdownField::create('LogoLoading', 'Loading', $loadingSource),\n            ]\n        );\n\n        return $fields;\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Using ArrayList in SilverStripe\nDESCRIPTION: Example of creating an ArrayList to wrap PHP arrays in the SS_List interface, adding Member objects and counting the items in the list.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/03_Lists.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$sam = Member::get()->byId(5);\n$sig = Member::get()->byId(6);\n\n$list = new ArrayList();\n$list->push($sam);\n$list->push($sig);\n\n// returns '2'\n$numItems = $list->Count();\n```\n\n----------------------------------------\n\nTITLE: Custom CSV Bulk Loader Implementation\nDESCRIPTION: Advanced implementation of CsvBulkLoader with custom column mapping and relation handling.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/00_CSV_Import.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse App\\Model\\FootballTeam;\nuse SilverStripe\\Dev\\CsvBulkLoader;\n\nclass PlayerCsvBulkLoader extends CsvBulkLoader\n{\n    public function __construct($objectClass)\n    {\n        $this->columnMap = [\n            'Number' => 'PlayerNumber',\n            'Name' => '->importFirstAndLastName',\n            'Birthday' => 'Birthday',\n            'Team' => 'Team.Title',\n        ];\n\n        $this->duplicateChecks = [\n            'Number' => 'PlayerNumber',\n        ];\n\n        $this->relationCallbacks = [\n            'Team.Title' => [\n                'relationname' => 'Team',\n                'callback' => 'getTeamByTitle',\n            ],\n        ];\n\n        parent::construct($objectClass);\n    }\n\n    public static function importFirstAndLastName(&$obj, $val, $record)\n    {\n        $parts = explode(' ', $val);\n        if (count($parts) != 2) {\n            return false;\n        }\n        $obj->FirstName = $parts[0];\n        $obj->LastName = $parts[1];\n    }\n\n    public static function getTeamByTitle(&$obj, $val, $record)\n    {\n        return FootballTeam::get()->filter('Title', $val)->First();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Menu Icon to ModelAdmin in Silverstripe CMS\nDESCRIPTION: Demonstrates how to add a custom menu icon to a ModelAdmin subclass using the built-in icon font.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse SilverStripe\\Admin\\ModelAdmin;\n\nclass NewsAdmin extends ModelAdmin\n{\n    private static $menu_icon_class = 'font-icon-news';\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Items Per Page in a SilverStripe PaginatedList\nDESCRIPTION: Shows how to customize the number of items displayed per page by using the setPageLength() method on a PaginatedList.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/How_Tos/02_Pagination.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$pages = new PaginatedList(Page::get(), $this->getRequest());\n$pages->setPageLength(25);\n```\n\n----------------------------------------\n\nTITLE: Shift Point in SilverStripe URL Patterns\nDESCRIPTION: Example demonstrating the shift point (//) functionality in routing rules, where variable parsing begins after a specific point in the URL pattern.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'admin/help//$Action/$ID': 'App\\Control\\AdminHelpController'\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Status Codes for Redirection in SilverStripe\nDESCRIPTION: Demonstrates how to specify HTTP status codes (301 or 302) when performing redirections.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/04_Redirection.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// go back to the homepage, don't cache that this page has moved\n$this->redirect('/', 302);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Structure\nDESCRIPTION: Demonstrates a GraphQL query for fetching user data with nested blog posts and comments, along with the corresponding JSON response structure.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetUser($ID: Int!) {\n    user {\n        name\n        email\n        blogPosts {\n            title\n            comments(Limit: 5) {\n                author\n                comment\n            }\n        }\n\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"user\": {\n        \"name\": \"Test user\",\n        \"email\": \"test@example.com\",\n        \"blogPosts\": [\n            {\n                \"title\": \"How to be awesome at GraphQL\",\n                \"comments\": [\n                    {\n                        \"author\": \"Uncle Cheese\",\n                        \"comment\": \"Nice stuff, bro\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying SiteConfig Extension\nDESCRIPTION: YAML configuration to apply the custom SiteConfig extension to the Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/01_SiteConfig.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/extensions.yml\nSilverstripe\\SiteConfig\\SiteConfig:\n  extensions:\n    - App\\Extension\\CustomSiteConfig\n```\n\n----------------------------------------\n\nTITLE: Displaying URLs Without Granting Access in Silverstripe Templates\nDESCRIPTION: Template code showing how to generate a URL for a file without automatically granting access permissions. This is useful for displaying links that will be denied if the user doesn't have permission.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<% if not $canView %>\n    <%-- The user will be denied if they follow this url --%>\n    <li><a href=\"$getURL(0)\">Access to $Title is denied</a></li>\n<% else %>\n    ...\n<% end_if %>\n```\n\n----------------------------------------\n\nTITLE: Changing Image Manipulation Driver to Imagick in Silverstripe\nDESCRIPTION: This YAML configuration demonstrates how to switch the image manipulation driver from GD to Imagick in Silverstripe. This involves modifying the `Intervention\\Image\\ImageManager` constructor arguments within the `SilverStripe\\Core\\Injector\\Injector` configuration. By specifying `driver: imagick`, the application will use Imagick for image processing, potentially improving performance and image quality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/02_Images.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\n\"SilverStripe\\Core\\Injector\\Injector:\n  Intervention\\Image\\ImageManager:\n    constructor:\n      - { driver: imagick }\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Middleware in PHP\nDESCRIPTION: Demonstrates how to create a custom HTTP middleware class by implementing the HTTPMiddleware interface. The example shows request modification, conditional execution, and response alteration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/05_Middlewares.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Middleware/CustomMiddleware.php\nnamespace App\\Middleware;\n\nuse SilverStripe\\Control\\HTTPRequest;\nuse SilverStripe\\Control\\HTTPResponse;\nuse SilverStripe\\Control\\Middleware\\HTTPMiddleware;\n\nclass CustomMiddleware implements HTTPMiddleware\n{\n    private string $secret = '';\n\n    public function setSecret(string $secret): static\n    {\n        $this->secret = $secret;\n        return $this;\n    }\n\n    public function process(HTTPRequest $request, callable $delegate)\n    {\n        // You can break execution by not calling $delegate.\n        if ($request->getHeader('X-Special-Header') !== $this->secret) {\n            return new HTTPResponse('You missed the special header', 400);\n        }\n\n        // You can modify the request before passing it on to be processed\n        // For example, this might force JSON responses\n        $request->addHeader('Accept', 'application/json');\n\n        // If you want normal behaviour to occur, make sure you call $delegate($request)\n        $response = $delegate($request);\n\n        // You can modify the response after it has been generated\n        $response->addHeader('X-Middleware-Applied', 'CustomMiddleware');\n\n        // Don't forget to the return the response!\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cache Backend in Silverstripe YAML\nDESCRIPTION: Demonstrates how to configure a custom cache backend (Memcached in this example) for partial template caching in Silverstripe using YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/00_Partial_Caching.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/cache.yml\n---\nName: app-cache\nAfter:\n  - 'corecache'\n---\nSilverStripe\\Core\\Injector\\Injector:\n  Psr\\SimpleCache\\CacheInterface.cacheblock: '%$App\\Cache\\Service.memcached'\n```\n\n----------------------------------------\n\nTITLE: Configuring Access-Control-Allow-Methods in SilverStripe GraphQL (YAML)\nDESCRIPTION: Defines the HTTP methods allowed for CORS requests to the SilverStripe GraphQL server. Default methods are 'GET', 'PUT', and 'OPTIONS'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/02_cors.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nAllow-Methods: 'GET, PUT, DELETE, OPTIONS'\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Properties in PHP for Silverstripe CMS\nDESCRIPTION: Demonstrates how to define configuration properties as private static variables in a PHP class using the Configurable trait.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse SilverStripe\\Core\\Config\\Configurable;\n\nclass MyClass\n{\n    use Configurable;\n\n    private static $option_one = true;\n\n    private static $option_two = ['Foo'];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination Plugin in YAML\nDESCRIPTION: This YAML configuration shows how to add the `paginate` plugin to the `readCountries` query. It specifies the plugin and links it to a resolver function (`paginateCountries`) defined in the `App\\GraphQL\\Resolver\\MyResolver` class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/05_adding_pagination.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/schema.yml\nqueries:\n  readCountries:\n    type: '[Country]'\n    plugins:\n      paginate:\n        resolver: ['App\\GraphQL\\Resolver\\MyResolver', 'paginateCountries']\n```\n\n----------------------------------------\n\nTITLE: Custom GridField Configuration for Versioned Items\nDESCRIPTION: Example of manually enabling versioned GridField functionality for a specific GridField instance.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nnamespace {\n\n    use SilverStripe\\CMS\\Model\\SiteTree;\n    use SilverStripe\\Forms\\GridField\\GridField;\n    use SilverStripe\\Forms\\GridField\\GridFieldConfig_RelationEditor;\n    use SilverStripe\\Forms\\GridField\\GridFieldDetailForm;\n    use SilverStripe\\Versioned\\VersionedGridFieldItemRequest;\n\n    class Page extends SiteTree\n    {\n        public function getCMSFields()\n        {\n            $fields = parent::getCMSFields();\n\n            $config = GridFieldConfig_RelationEditor::create();\n            $config\n                ->getComponentByType(GridFieldDetailForm::class)\n                ->setItemRequestClass(VersionedGridFieldItemRequest::class);\n            $gridField = GridField::create('Items', 'Items', $this->Items(), $config);\n            $fields->addFieldToTab('Root.Items', $gridField);\n\n            return $fields;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PHP resolver for the custom query\nDESCRIPTION: This PHP code defines a resolver class that implements the 'resolveCountries' function, returning an array of countries fetched using SilverStripe's Injector and Locales components. It serves as the backend logic for the defined query.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/02_building_a_custom_query.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/src/GraphQL/Resolver/MyResolver.php\nnamespace App\\GraphQL\\Resolver;\n\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\i18n\\Data\\Locales;\n\nclass MyResolver\n{\n    public static function resolveCountries(): array\n    {\n        $results = [];\n        $countries = Injector::inst()->get(Locales::class)->getCountries();\n        foreach ($countries as $code => $name) {\n            $results[] = [\n                'code' => $code,\n                'name' => $name,\n            ];\n        }\n\n        return $results;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shortcode with Content Example\nDESCRIPTION: This example shows how enclosed content within a shortcode is handled. It demonstrates that both attributes and content can be processed simultaneously.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[my_shortcode,attribute=\"foo\"]content[/my_shortcode]\n$attributes      => ['attribute' => 'foo']\n$enclosedContent => 'content'\n$parser          => ShortcodeParser instance\n$tagName         => 'my_shortcode'\n```\n\n----------------------------------------\n\nTITLE: Converting FieldList to Read-only in SilverStripe\nDESCRIPTION: Demonstrates how to make all fields within a FieldList read-only while preserving button functionality\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/05_Form_Transformations.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\FieldList;\n\n$fields = FieldList::create(/* ... */);\n$fields = $fields->makeReadonly();\n```\n\n----------------------------------------\n\nTITLE: Getting Session Instance in a Controller (PHP)\nDESCRIPTION: This code snippet demonstrates how to retrieve the `Session` object within a Silverstripe controller. It accesses the session through the `HTTPRequest` object associated with the controller. The `getSession()` method retrieves the session instance.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/02_Sessions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n\nclass MyController extends Controller\n{\n    public function getSession()\n    {\n        return $this->getRequest()->getSession();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Extension Hook in PHP\nDESCRIPTION: Shows how to implement an Extension Hook in a core SilverStripe class (Member) to allow modifications to the validator.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// silverstripe/framework/src/Security/Member.php\nnamespace SilverStripe\\Security;\n\nuse SilverStripe\\ORM\\DataObject;\n// ...\n\nclass Member extends DataObject\n{\n    // ...\n    public function getValidator()\n    {\n        // ...\n        $this->extend('updateValidator', $validator);\n        // ...\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting SQLSelect to SQLDelete in Silverstripe\nDESCRIPTION: Shows how to transform an existing SQLSelect query into a delete operation using the toDelete() method. Useful for when you already have a SELECT query that identifies the records you want to delete.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/08_SQL_Select.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\CMS\\Model\\SiteTree;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\Queries\\SQLSelect;\n\n$schema = DataObject::getSchema();\n$siteTreeTable = DB::get_conn()->escapeIdentifier($schema->baseDataTable(SiteTree::class));\n\n$query = SQLSelect::create()\n    ->setFrom($siteTreeTable)\n    ->setWhere([$schema->sqlColumnForField(SiteTree::class, 'ShowInMenus') => 0])\n    ->toDelete();\n$query->execute();\n```\n\n----------------------------------------\n\nTITLE: Creating FormAction in Silverstripe PHP\nDESCRIPTION: This snippet demonstrates how to create a FormAction object in Silverstripe. FormAction objects are used to create buttons or input elements for form submission.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\FormAction;\n\nFormAction::create($action, $title);\n```\n\n----------------------------------------\n\nTITLE: Accessing Security Token in JavaScript\nDESCRIPTION: Demonstrates how to access the CSRF security token in JavaScript using the Config module from silverstripe/admin.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/07_CMS_JSON_APIs.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Config from 'lib/Config';\n\nconst securityID = Config.get('SecurityID');\n```\n\n----------------------------------------\n\nTITLE: Defining Test Fixtures in YAML for Silverstripe\nDESCRIPTION: This YAML file defines test fixtures for Pages in Silverstripe. It specifies sample data for different page types that will be used in unit tests.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/How_Tos/00_Write_a_SapphireTest.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# app/tests/SiteTreeTest.yml\nPage:\n    home:\n      Title: Home\n    staff:\n      Title: My Staff\n    about:\n      Title: About Us\n    staffduplicate:\n      Title: My Staff\n```\n\n----------------------------------------\n\nTITLE: Template Image Manipulation Methods in SilverStripe\nDESCRIPTION: Examples of various image manipulation methods available in SilverStripe templates for scaling, cropping, padding and accessing metadata.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/02_Images.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n// Scaling functions\n$Image.ScaleWidth(150) // Returns a 150x75px image\n$Image.ScaleMaxWidth(100) // Returns a 100x50px image (like ScaleWidth but prevents up-sampling)\n$Image.ScaleHeight(150) // Returns a 300x150px image (up-sampled. Try to avoid doing this)\n$Image.ScaleMaxHeight(150) // Returns a 200x100px image (like ScaleHeight but prevents up-sampling)\n$Image.Fit(300,300) // Returns an image that fits within a 300x300px boundary, resulting in a 300x150px image (up-sampled)\n$Image.FitMax(300,300) // Returns a 200x100px image (like Fit but prevents up-sampling)\n\n// Warning: This method can distort images that are not the correct aspect ratio\n$Image.ResizedImage(200, 300) // Forces dimensions of this image to the given values.\n\n// Cropping functions\n$Image.Fill(150,150) // Returns a 150x150px image resized and cropped to fill specified dimensions (up-sampled)\n$Image.FillMax(150,150) // Returns a 100x100px image (like Fill but prevents up-sampling)\n$Image.CropWidth(150) // Returns a 150x100px image (trims excess pixels off the x axis from the center)\n$Image.CropHeight(50) // Returns a 200x50px image (trims excess pixels off the y axis from the center)\n\n// Padding functions (add space around an image)\n$Image.Pad(100,100) // Returns a 100x100px padded image, with white bars added at the top and bottom\n$Image.Pad(100, 100, CCCCCC) // Same as above but with a grey background\n\n// Metadata\n$Image.Width // Returns width of image\n$Image.Height // Returns height of image\n$Image.Orientation // Returns Orientation\n$Image.Title // Returns the friendly file name\n$Image.Name // Returns the actual file name\n$Image.FileName // Returns the actual file name including directory path from web root\n$Image.Link // Returns relative URL path to image\n$Image.AbsoluteLink // Returns absolute URL path to image\n```\n\n----------------------------------------\n\nTITLE: Addition of AbsoluteLink Method to RequestHandler\nDESCRIPTION: New AbsoluteLink method added to RequestHandler class in Silverstripe framework v5.1.0-rc1 to generate absolute URLs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nRequestHandler->AbsoluteLink()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Factory\nDESCRIPTION: Example of creating a custom factory class that implements Silverstripe's Factory interface for complex service instantiation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// app/src/MyFactory.php\nnamespace App;\n\nuse SilverStripe\\Core\\Injector\\Factory;\n\nclass MyFactory implements Factory\n{\n    public function create($service, array $params = [])\n    {\n        return new MyServiceImplementation(...$params);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Form in SilverStripe FunctionalTest\nDESCRIPTION: Submits a form with the given ID on the current page and returns the HTTPResponse. Optional parameters include the button to click and form data to submit.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/01_Functional_Testing.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$submit = $this->submitForm($formID, $button = null, $data = []);\n```\n\n----------------------------------------\n\nTITLE: Adding a GridField to CMS Fields in a Page Type\nDESCRIPTION: Shows how to add a GridField to the CMS fields of a custom page type. This example creates a GridField that displays all SiteTree pages under a new 'Pages' tab in the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/src/PageType/MyPage.php\nnamespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\CMS\\Model\\SiteTree;\nuse SilverStripe\\Forms\\GridField\\GridField;\n\nclass MyPage extends Page\n{\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n\n        $fields->addFieldToTab(\n            'Root.Pages',\n            GridField::create('Pages', 'All pages', SiteTree::get())\n        );\n\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resolver for Read Countries - PHP\nDESCRIPTION: This PHP class implements a resolver for the `readCountries` query. It retrieves a list of countries limited by the provided argument and structures the data for the response.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/04_adding_arguments.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Resolver;\n\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\i18n\\Data\\Locales;\n\nclass MyResolver\n{\n    public static function resolveReadCountries($obj, array $args = [])\n    {\n        $limit = $args['limit'];\n        $results = [];\n        $countries = Injector::inst()->get(Locales::class)->getCountries();\n        $countries = array_slice($countries, 0, $limit);\n\n        foreach ($countries as $code => $name) {\n            $results[] = [\n                'code' => $code,\n                'name' => $name,\n            ];\n        }\n\n        return $results;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Immediate File Renaming with Versioned Mode in Silverstripe PHP\nDESCRIPTION: Illustrates using Versioned reading mode to immediately rename files. Requires Silverstripe's File and Versioned classes and allows immediate effect of renaming without waiting for a CMS publish.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Assets\\File;\nuse SilverStripe\\Versioned\\Versioned;\n\n$file = File::get()->filter('Name', 'oldname.jpg')->first();\nif ($file) {\n    // The below will immediately move 'oldname.jpg' and 'oldname__variant.jpg'\n    // to 'newname.jpg' and 'newname__variant.jpg' respectively\n    $file->Name = 'newname.jpg';\n    Versioned::withVersionedMode(function () use ($file) {\n        Versioned::set_reading_mode('Stage.' . Versioned::DRAFT);\n        $file->write();\n        $file->publishSingle();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Encapsulating a Search Form in a Dedicated SilverStripe Form Class\nDESCRIPTION: This snippet demonstrates how to refactor the search form into its own class, extending the Form class. It encapsulates all form-related logic and configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/01_Encapsulate_Forms.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Form/SearchForm.php\nnamespace App\\Form;\n\nuse SilverStripe\\Forms\\CheckboxSetField;\nuse SilverStripe\\Forms\\CompositeField;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\HeaderField;\nuse SilverStripe\\Forms\\NumericField;\nuse SilverStripe\\Forms\\OptionsetField;\nuse SilverStripe\\Forms\\RequiredFields;\n\nclass SearchForm extends Form\n{\n    /**\n     * Our constructor only requires the controller and the name of the form\n     * method. We'll create the fields and actions in here.\n     */\n    public function __construct($controller, $name)\n    {\n        $fields = FieldList::create(\n            HeaderField::create('Header', 'Step 1. Basics'),\n            OptionsetField::create('Type', '', [\n                'foo' => 'Search Foo',\n                'bar' => 'Search Bar',\n                'baz' => 'Search Baz',\n            ]),\n            CompositeField::create(\n                HeaderField::create('Header2', 'Step 2. Advanced '),\n                CheckboxSetField::create('Foo', 'Select Option', [\n                    'qux' => 'Search Qux',\n                ]),\n                CheckboxSetField::create('Category', 'Category', [\n                    'Foo' => 'Foo',\n                    'Bar' => 'Bar',\n                ]),\n                NumericField::create('Minimum', 'Minimum'),\n                NumericField::create('Maximum', 'Maximum')\n            )\n        );\n\n        $actions = FieldList::create(\n            FormAction::create('doSearchForm', 'Search')\n        );\n\n        $required = RequiredFields::create([\n            'Type',\n        ]);\n\n        // now we create the actual form with our fields and actions defined\n        // within this class\n        parent::__construct($controller, $name, $fields, $actions, $required);\n\n        // any modifications we need to make to the form.\n        $this->setFormMethod('GET');\n\n        $this->addExtraClass('no-action-styles');\n        $this->disableSecurityToken();\n    }\n\n    /**\n     * This method could be on the controller, but putting it here means we get the same\n     * behaviour regardless of which controller uses this form.\n     */\n    public function doSearchForm(array $data, Form $form)\n    {\n        // Do something with the data, return results, or redirect\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields to Files - Configuration\nDESCRIPTION: YAML configuration for extending File and FileFormFactory classes\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/01_File_Management.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Assets\\File:\n  extensions:\n    - App\\Extension\\MyFileExtension\n\nSilverStripe\\AssetAdmin\\Forms\\FileFormFactory:\n  extensions:\n    - App\\Extension\\MyFormFactoryExtension\n```\n\n----------------------------------------\n\nTITLE: Defining Page Types with Interface Implementation in GraphQL\nDESCRIPTION: Example showing how to define different page types in GraphQL schema that implement various interfaces, demonstrating interface inheritance patterns.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ntype Page implements PageInterface {}\ntype BlogPage implements BlogPageInterface & PageInterface {}\ntype EventsPage implements EventsPageInterface & PageInterface {}\ntype ConferencePage implements ConferencePageInterface & EventsPageInterface & PageInterface {}\ntype WebinarPage implements WebinarPageInterface & EventsPageInterface & PageInterface {}\n```\n\n----------------------------------------\n\nTITLE: Multiple Key Caching in SilverStripe\nDESCRIPTION: Template caching using multiple keys to create unique cache entries for different key combinations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_12\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $KeyA, $KeyB %>\n    Cached separately for every combination of $KeyA and $KeyB\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Customising an Extension in PHP\nDESCRIPTION: Shows how to create a customised version of an existing extension by extending it and overriding methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Extension/CustomisedSomeExtension.php\nnamespace App\\Extension;\n\nuse Company\\Vendor\\SomeExtension;\n\nclass CustomisedSomeExtension extends SomeExtension\n{\n    public function someMethod()\n    {\n        $result = parent::someMethod();\n        // modify result;\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing TinyMCE Options in Silverstripe CMS (PHP)\nDESCRIPTION: This snippet shows how to modify an existing TinyMCE configuration option in Silverstripe CMS. It demonstrates adding new elements to the 'extended_valid_elements' option without overwriting the entire configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\n\n// Add start and type attributes for <ol>, add <embed> with all attributes - without redeclaring everything else\n$editor = TinyMCEConfig::get('cms');\n$validElements = $editor->getOption('extended_valid_elements') . ',' .\n    'embed[src|type|pluginspage|width|height|autoplay],' .\n    'ol[start|type]';\n$validElements = str_replace('iframe[', 'iframe[data-*|');\n$editor->setOption('extended_valid_elements', $validElements);\n```\n\n----------------------------------------\n\nTITLE: Using Convert() in SS Template\nDESCRIPTION: This Silverstripe template code shows how to use the `Convert()` method in templates, chaining it with other image manipulation methods like `ScaleWidth()`. It assumes that the page has a relation called `MyImage` to an `Image` record.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_14\n\nLANGUAGE: ss\nCODE:\n```\n$MyImage.Convert('webp').ScaleWidth(150)\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Schema in Silverstripe GraphQL\nDESCRIPTION: Example YAML configuration that demonstrates how to define a global schema (designated by '*') that will be merged with all other schemas in the project. The example shows how to add an enum 'VersionedStage' to all schemas.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/06_extending/global_schema.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/graphql.yml\nSilverStripe\\GraphQL\\Schema\\Schema:\n  schemas:\n    '*':\n      enums:\n        VersionedStage:\n          DRAFT: DRAFT\n          LIVE: LIVE\n```\n\n----------------------------------------\n\nTITLE: Page Model GraphQL Configuration\nDESCRIPTION: Shows how to configure fields and operations for a Page model, including field exclusions and operation customization.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/01_adding_dataobjects_to_the_schema.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nPage:\n  fields:\n    '*': true # Get everything\n    sensitiveData: false # hide this field\n    'content(summaryLength: Int)': true # add an argument to this field\n  operations:\n    '*': true\n    read:\n      plugins:\n        paginateList: false # don't paginate the read operation\n```\n\n----------------------------------------\n\nTITLE: Setting TinyMCE Image Size Presets via PHP\nDESCRIPTION: PHP code to programmatically configure image size presets for TinyMCE editor including small, best fit and original size options.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\n\nTinyMCEConfig::get('cms')->setOption('image_size_presets', [\n    [\n        'width' => 300,\n        'text' => 'Small fit',\n        'name' => 'smallfit',\n        'default' => true,\n    ],\n    [\n        'width' => 600,\n        'i18n' => TinyMCEConfig::class . '.BEST_FIT',\n        'text' => 'Best fit',\n        'name' => 'bestfit',\n    ],\n    [\n        'i18n' => TinyMCEConfig::class . '.ORIGINAL_SIZE',\n        'text' => 'Original size',\n        'name' => 'originalsize',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Where Clause in SilverStripe\nDESCRIPTION: Demonstrates how to use raw SQL WHERE clause with proper escaping for cross-database compatibility.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$members = Member::get()->where(\"\\\"FirstName\\\" = 'Sam'\");\n```\n\n----------------------------------------\n\nTITLE: Using beforeUpdateCMSFields in getCMSFields Method\nDESCRIPTION: Shows how to use beforeUpdateCMSFields to intervene in the process of extending CMS fields before calling parent::getCMSFields().\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyModel extends DataObject\n{\n    // ...\n\n    public function getCMSFields()\n    {\n        $this->beforeUpdateCMSFields(function ($fields) {\n            // Include field which must be present when updateCMSFields is called on extensions\n            $fields->addFieldToTab('Root.Main', TextField::create('Detail', 'Details', null, 255));\n        });\n\n        $fields = parent::getCMSFields();\n        // ... additional fields here\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Kernel in Silverstripe CMS (PHP)\nDESCRIPTION: This example illustrates how to nest the Kernel to modify global application state temporarily. It creates a new Kernel instance nested from the old one, modifies configuration, and then activates the old Kernel to revert the changes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/16_Execution_Pipeline/03_App_Object_and_Kernel.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$oldKernel = Injector::inst()->get(Kernel::class);\ntry {\n    // Injector::inst() / Config::inst() are automatically updated to the new kernel\n    $newKernel = $oldKernel->nest();\n    Config::modify()->set(Director::class, 'alternate_base_url', '/myurl');\n} finally {\n    // Any changes to config (or other application state) have now been reverted\n    $oldKernel->activate();\n}\n\n```\n\n----------------------------------------\n\nTITLE: File Conversion to Different Formats in Silverstripe PHP\nDESCRIPTION: Demonstrates converting files to different formats, using the Convert method if a converter is available. Relies on Silverstripe's File and DBFile classes, and their inherent conversion traits. Supports formats compatible with registered converters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Convert an image to webp format and apply the FitMax manipulation to the result\n$result = $this->MyImage()->Convert('webp')->FitMax(100, 100);\n```\n\nLANGUAGE: ss\nCODE:\n```\n<%-- Convert an image to webp format and apply the FitMax manipulation to the result --%>\n$MyImage.Convert('webp').FitMax(100, 100)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Route for Rate Limited Controller\nDESCRIPTION: Configures routing rules to apply rate limiting to specific controller actions and routes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/06_Rate_Limiting.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nDirector:\n  rules:\n    'MyController//$Action/$ID/$OtherID': '%$MyRateLimitedController'\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching for Page Content in Silverstripe CMS\nDESCRIPTION: This snippet shows how to enable caching for all page content by modifying the PageController class. It sets a max age of 60 seconds for the cache.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/02_HTTP_Cache_Headers.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace {\n\n    use SilverStripe\\CMS\\Controllers\\ContentController;\n    use SilverStripe\\Control\\Middleware\\HTTPCacheControlMiddleware;\n\n    class PageController extends ContentController\n    {\n        public function init()\n        {\n            HTTPCacheControlMiddleware::singleton()\n            ->enableCache()\n            // 1 minute\n            ->setMaxAge(60);\n\n            parent::init();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing a FormAction into an existing CompositeField in Silverstripe\nDESCRIPTION: This PHP snippet demonstrates how to add a button to an existing button group (`CompositeField`) within a FieldList.  It retrieves the 'MajorActions' field by name and pushes a new `FormAction` labeled 'New group button' into it.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$fields->fieldByName('MajorActions')->push(FormAction::create('grouped', 'New group button'));\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Filter Query Example\nDESCRIPTION: Shows a GraphQL query using the filter plugin with multiple comparators and conditions\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readPages (\n    filter: {\n      title: { ne: \"Home\" },\n      created: { gt: \"2020-06-01\", lte: \"2020-09-01\" }\n    }\n  ) {\n    nodes {\n      title\n      created\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Shortcode Provider\nDESCRIPTION: PHP class defining a custom shortcode provider with a parsing method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// app/src/ShortCode/MyShortCodeProvider.php\nnamespace App\\ShortCode;\n\nclass MyShortCodeProvider\n{\n    public static function parseMyShortCode($arguments, $content = null, $parser = null, $tagName = null)\n    {\n        return '<em>' . $tagName . '</em> ' . $content . '; ' . count($arguments) . ' arguments.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Disposal Behavior\nDESCRIPTION: This PHP snippet defines a DataObject in Silverstripe that retains assets when the object is archived. It allows for better management of assets associated with versioned objects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass MyVersionedObject extends DataObject\n{\n    /** Ensure assets are archived along with the DataObject */\n    private static $keep_archived_assets = true;\n\n    private static $extensions = [\n        Versioned::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Interfaces\nDESCRIPTION: This YAML snippet illustrates how to declare a `Person` interface in the GraphQL schema with fields such as `firstName`, `surname`, and `age`. It also specifies a custom type resolver method `resolvePersonType` to determine the actual type of the object implementing this interface.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/07_enums_unions_and_interfaces.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# app/_graphql/schema.yml\ninterfaces:\n  Person:\n    fields:\n      firstName: String!\n      surname: String!\n      age: Int!\n    resolveType: [ 'App\\GraphQL\\Resolver\\MyResolver', 'resolvePersonType' ]\n```\n\n----------------------------------------\n\nTITLE: MyResolver Class for Resolving Country Data\nDESCRIPTION: In this PHP snippet, the MyResolver class is defined to include a static resolve method. This method retrieves and returns a list of country codes and names using SilverStripe's Locales service. The results are used to resolve GraphQL fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/03_resolver_discovery.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Resolver;\n\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\i18n\\Data\\Locales;\n\nclass MyResolver\n{\n    public static function resolveReadCountries()\n    {\n        $results = [];\n        $countries = Injector::inst()->get(Locales::class)->getCountries();\n        foreach ($countries as $code => $name) {\n            $results[] = [\n                'code' => $code,\n                'name' => $name,\n            ];\n        }\n\n        return $results;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Method and Strict Checking in PHP\nDESCRIPTION: Shows how to set the form method and disable strict form method checking in Silverstripe CMS. This allows forms to be submitted via different HTTP methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/04_Form_Security.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$form = Form::create(/* ... */);\n\n$form->setFormMethod('POST');\n$form->setStrictFormMethodCheck(false);\n\n// or alternative short notation..\n$form->setFormMethod('POST', false);\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Directory for Schema Source\nDESCRIPTION: This example shows how to specify a module's directory as a source for GraphQL schema definitions. It uses the `vendor/module: _graphql` syntax to reference the `_graphql` directory within the specified module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/02_configuring_your_schema.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_config/graphql.yml\nSilverStripe\\GraphQL\\Schema\\Schema:\n  schemas:\n    default:\n      src:\n        - app/_graphql\n        - module/_graphql\n        # The next line would map to `vendor/somevendor/somemodule/_graphql`\n        - 'somevendor/somemodule: _graphql'\"\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration with Externals\nDESCRIPTION: Example webpack configuration showing how to use Silverstripe CMS externals in custom modules.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/06_Build_Tooling.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  entry: {\n    bundle: 'mymodule/client/src/js/bundle.js',\n  },\n  output: {\n    path: './client/dist',\n    filename: 'js/[name].js',\n  },\n  externals: {\n    'components/FormBuilder/FormBuilder': 'FormBuilder',\n    jQuery: 'jQuery',\n    react: 'react',\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Extensions with YAML Configuration\nDESCRIPTION: Demonstrates how to override an extension class using the Injector in YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  Company\\Vendor\\SomeExtension:\n    class: App\\Extension\\CustomisedSomeExtension\n```\n\n----------------------------------------\n\nTITLE: Modifying DataQuery with Union Operation in PHP\nDESCRIPTION: Example showing how to modify the underlying DataQuery to perform a union operation with another query using alterDataQuery().\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$members = Member::get()->alterDataQuery(function (DataQuery $query) {\n    return $query->union($anotherQuery);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Inheritance in YAML\nDESCRIPTION: Demonstrates how to configure service inheritance using references in YAML. Shows how to set up service definitions with properties and class specifications.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_12\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  App\\JSONServiceDefinition:\n    class: App\\JSONServiceImplementor\n    properties:\n      Serialiser: App\\JSONSerialiser\n  App\\GZIPJSONProvider: '%$App\\JSONServiceDefinition'\n```\n\n----------------------------------------\n\nTITLE: Using Injector with SilverStripe Routes\nDESCRIPTION: Example of using the dependency injection container with routing rules to instantiate a controller with additional setup requirements through a service.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'player/': '%$SpecialInjectedController'\n```\n\n----------------------------------------\n\nTITLE: Configuring Samesite Attribute for Session Cookie (YAML)\nDESCRIPTION: This YAML configuration snippet shows how to change the `samesite` attribute for the session cookie.  The `cookie_samesite` option can be set to 'Strict', 'Lax', or 'None'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/02_Sessions.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Session:\n  cookie_samesite: 'Strict'\n```\n\n----------------------------------------\n\nTITLE: Unpublishing DataObjects with GraphQL\nDESCRIPTION: This GraphQL mutation unpublishes a SiteTree object by ID, demonstrating how to remove a versioned object from publication in SilverStripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/05_versioning.md#2025-04-21_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation unpublishSiteTree(id: 123) {\\n  id\\n  title\\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Asset Storage in Silverstripe PHP\nDESCRIPTION: Illustrates direct usage of the AssetStore class to store content. Requires Silverstripe's AssetStore, File, Injector, and DBField classes. Demonstrates setting content directly into a DBFile without using a File model.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Assets\\File;\nuse SilverStripe\\Assets\\Storage\\AssetStore;\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\ORM\\FieldType\\DBField;\n\n// Store a file named \"example-file.txt\".\n$store = Injector::inst()->get(AssetStore::class);\n$result = $store->setFromString('This is some file content', 'example-file.txt');\n\n// Save a database record that points to the stored file.\n// Note that we pull the file name from the result because the asset store might have renamed it.\n$dbFile = DBField::create_field('DBFile', $result);\n$fileRecord = File::create(['Name' => $result['Filename'], 'File' => $dbFile]);\n$fileRecord->write();\n```\n\n----------------------------------------\n\nTITLE: Resolving Resource URLs and Paths in PHP\nDESCRIPTION: Demonstrates how to use ModuleResourceLoader and ThemeResourceLoader in PHP to resolve URLs and file paths for resources, including module-specific and themed resources.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\Manifest\\ModuleResourceLoader;\nuse SilverStripe\\View\\ThemeResourceLoader;\n\n// Get the URL or relative file path for an image in the silverstripe/admin module\n$fileUrl = ModuleResourceLoader::singleton()->resolveURL('silverstripe/admin:client/dist/images/spinner.gif');\n$filePath = ModuleResourceLoader::singleton()->resolvePath('silverstripe/admin:client/dist/images/spinner.gif');\n\n// Get the URL or relative file path for an image in a theme, using cascading themes\n$themeFileUrl = ThemeResourceLoader::themedResourceURL('images/spinner.gif');\n$themeFilePath = ThemeResourceLoader::inst()->findThemedResource('images/spinner.gif');\n```\n\n----------------------------------------\n\nTITLE: Configuring the custom operation in SilverStripe GraphQL schema\nDESCRIPTION: YAML configuration to register the duplicate operation creator for all DataObject models in the GraphQL schema, making it available application-wide.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/06_extending/adding_a_custom_operation.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/config.yml\nmodelConfig:\n  DataObject:\n    operations:\n      duplicate:\n        class: 'App\\GraphQL\\DuplicateCreator'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Date Format for DateField in SilverStripe\nDESCRIPTION: This code shows how to set a custom date format for a DateField, opting out of the built-in browser localization. It uses the setDateFormat method to specify the format.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/02_DateField.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\DateField;\n\n// will display a date in the following format: 31/06/2012\nDateField::create('MyDate')\n    ->setHTML5(false)\n    ->setDateFormat('dd/MM/yyyy');\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple MIME Types for File Extensions in Silverstripe\nDESCRIPTION: This YAML configuration allows the specification of multiple MIME types for a single file extension, enabling broader support for various file types during uploads in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/06_Allowed_file_types.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\MimeValidator\\MimeUploadValidator:\n  MimeTypes:\n    ics:\n      - 'text/plain'\n      - 'text/calendar'\n```\n\n----------------------------------------\n\nTITLE: Manipulating File Extensions in PHP\nDESCRIPTION: This PHP snippet showcases the usage of the `manipulateExtension()` method.  It highlights how to pass in the desired file extension for conversion. This method also makes sure that a callback function is called only if a variant file doesn't exist yet.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn $from->manipulateExtension($toExtension /* ... */);\n```\n\n----------------------------------------\n\nTITLE: Implementing $* Wildcard URL Handler in SilverStripe PHP Controller\nDESCRIPTION: Demonstrates how to use the '$*' wildcard URL pattern to match all URL parameters without collecting them individually.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass StaffController extends Controller\n{\n    private static $url_handlers = [\n        '$*' => 'index',\n    ];\n\n    public function index(HTTPRequest $request)\n    {\n        // GET /staff/managers/bob/hobbies\n        // \"managers/bob/hobbies\"\n        $request->remaining();\n\n        // returns \"managers\", and removes that from the list of remaining params\n        $nextParam = $request->shift();\n\n        // returns [\"bob\", \"hobbies\"] and removes those from the list of remaining params\n        $moreParams = $request->shift(2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ModelAdmin Configuration for CSV Import\nDESCRIPTION: Configuration of ModelAdmin class to enable CSV import functionality for Player model.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/00_CSV_Import.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse App\\Model\\Player;\nuse SilverStripe\\Admin\\ModelAdmin;\nuse SilverStripe\\Dev\\CsvBulkLoader;\n\nclass PlayerAdmin extends ModelAdmin\n{\n    private static $managed_models = [\n      Player::class,\n    ];\n\n    private static $model_importers = [\n      Player::class => CsvBulkLoader::class,\n    ];\n\n    private static $url_segment = 'players';\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Versioned Extension Without Staging in PHP\nDESCRIPTION: Demonstrates how to add the Versioned extension to a DataObject model without staging, using PHP configuration. This tracks version history without separate draft and published stages.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass VersionedModel extends DataObject\n{\n    private static $extensions = [\n        Versioned::class . '.versioned',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Validating CSRF Token in PHP Controller\nDESCRIPTION: Shows how to validate the CSRF security token in a PHP controller method using SecurityToken::checkRequest().\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/07_CMS_JSON_APIs.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Security\\SecurityToken;\n// ...\nif (!SecurityToken::inst()->checkRequest($this->getRequest())) {\n    $this->jsonError(400);\n}\n```\n\n----------------------------------------\n\nTITLE: Default Values Configuration in DataObject\nDESCRIPTION: Example of setting default values for database fields in a Player DataObject class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    // ...\n    private static $defaults = [\n        'Status' => 'Active',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Shortcode with Attributes Example\nDESCRIPTION: This example demonstrates how attributes are parsed and passed to the shortcode handler. It shows multiple attributes being captured in the $attributes array.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n[my_shortcode,attribute=\"foo\",other=\"bar\"]\n$attributes      => ['attribute' => 'foo', 'other' => 'bar']\n$enclosedContent => null\n$parser          => ShortcodeParser instance\n$tagName         => 'my_shortcode'\n```\n\n----------------------------------------\n\nTITLE: Replacing Error Handler in Silverstripe (YAML)\nDESCRIPTION: This snippet demonstrates how to substitute the default error handler in Silverstripe with a custom one using the Injector service 'ErrorHandlerLoader'. It sets up a custom error handler 'MyApp\\CustomErrorHandlerLoader', which the application must start using a 'start()' method. This allows for flexible error handling with any PSR-3 logging implementation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\\n  SilverStripe\\Logging\\ErrorHandler:\\n    class: MyApp\\CustomErrorHandlerLoader\n```\n\n----------------------------------------\n\nTITLE: Implementing CMSEditLinkExtension in a Child Model\nDESCRIPTION: This snippet demonstrates how to configure a model class to use CMSEditLinkExtension. It sets up the cms_edit_owner property to point to its parent relation and applies the extension to enable the CMSEditLink() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/13_Managing_Records.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/MyModel.php\nnamespace App\\Model;\n\nuse SilverStripe\\Admin\\CMSEditLinkExtension;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyModel extends DataObject\n{\n    private static string $cms_edit_owner = 'Parent';\n\n    private static $has_one = [\n        'Parent' => MyParentModel::class,\n    ];\n\n    private static $extensions = [\n        CMSEditLinkExtension::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Eager Loading in SilverStripe Templates\nDESCRIPTION: Shows how to use eager loading in SilverStripe templates to efficiently loop through related data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_27\n\nLANGUAGE: silverstripe\nCODE:\n```\n<% loop $MyTeams.eagerLoad('Players') %>\n    <% loop $Players %>\n        <p>Player first name is $FirstName</p>\n    <% end_loop %>\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Implementing RSS Feed for Recently Updated Pages in PHP\nDESCRIPTION: This example demonstrates how to create an RSS feed of the 10 most recently updated pages in a Silverstripe CMS HomePageController.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/02_RSSFeed.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// app/src/PageType/HomePageController.php\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Control\\RSS\\RSSFeed;\n\nclass HomePageController extends PageController\n{\n    private static $allowed_actions = [\n        'rss',\n    ];\n\n    public function init()\n    {\n        parent::init();\n\n        RSSFeed::linkToFeed($this->Link('rss'), '10 Most Recently Updated Pages');\n    }\n\n    public function rss()\n    {\n        $rss = RSSFeed::create(\n            $this->getLatestUpdates(),\n            $this->Link(),\n            '10 Most Recently Updated Pages',\n            'Shows a list of the 10 most recently updated pages.'\n        );\n\n        return $rss->outputToBrowser();\n    }\n\n    public function getLatestUpdates()\n    {\n        return HomePage::get()->sort('LastEdited', 'DESC')->limit(10);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Action-Level Permission Checks in Silverstripe\nDESCRIPTION: Shows how to implement custom permission checks within controller action methods to conditionally handle responses based on request data, such as checking for API keys.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/03_Access_Control.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass MyController extends Controller\n{\n    // ...\n\n    private static $allowed_actions = [\n        'myAction',\n    ];\n\n    public function myaction(HTTPRequest $request)\n    {\n        if (!$request->getVar('apikey')) {\n            return $this->httpError(403, 'No API key provided');\n        }\n\n        return 'valid';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RSS Feed for DataObjects in PHP\nDESCRIPTION: This example demonstrates how to create an RSS feed for Player DataObjects in a Silverstripe CMS HomePageController.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/02_RSSFeed.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse App\\Model\\Player;\nuse PageController;\nuse SilverStripe\\Control\\RSS\\RSSFeed;\n\nclass HomePageController extends PageController\n{\n    private static $allowed_actions = [\n        'players',\n    ];\n\n    public function init()\n    {\n        parent::init();\n\n        RSSFeed::linkToFeed($this->Link('players'), 'Players');\n    }\n\n    public function players()\n    {\n        $rss = RSSFeed::create(\n            Player::get(),\n            $this->Link('players'),\n            'Players'\n        );\n\n        return $rss->outputToBrowser();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Session Instance Outside a Controller (PHP)\nDESCRIPTION: This code snippet shows how to get the `Session` object when you're not in a controller context. It uses the `Injector` to retrieve the `HTTPRequest` service, and then calls `getSession()` on the request object to access the session.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/02_Sessions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\HTTPRequest;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n$request = Injector::inst()->get(HTTPRequest::class);\n$session = $request->getSession();\n```\n\n----------------------------------------\n\nTITLE: Basic DBField Value Conversion in Silverstripe\nDESCRIPTION: Shows how to use DBField for simple value conversions, such as rounding a number. This demonstrates the basic functionality of DBField outside of a DataObject context.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\FieldType\\DBField;\n// returns 1.23\nDBField::create_field('Double', 1.23456)->Round(2);\n```\n\n----------------------------------------\n\nTITLE: Defining Scaffolded Form Fields for Relations in PHP\nDESCRIPTION: Example of implementing scaffoldFormFieldForHasOne() on a DataObject class to define custom form fields for has_one relations. This allows modules to pre-define form fields for their custom models, reducing boilerplate code in getCMSFields() implementations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.3.0-rc1.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyParent extends DataObject\n{\n    // ...\n    private static array $has_one = [\n        'MyChild' => MyChild::class,\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\FormField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyChild extends DataObject\n{\n    // ...\n\n    public function scaffoldFormFieldForHasOne(\n        string $fieldName,\n        ?string $fieldTitle,\n        string $relationName,\n        DataObject $ownerRecord\n    ): FormField {\n        return /* instantiate some FormField here */;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Syntax for Cached Blocks in SilverStripe\nDESCRIPTION: Provides the complete syntax definition for cached and uncached blocks in SilverStripe templates, including optional cache keys and conditions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_9\n\nLANGUAGE: ss\nCODE:\n```\n<% [un]cached [$CacheKey[, ...]] [(if|unless) $CacheCondition] %>\n  $CacheContent\n<% end_[un]cached %>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Method for Cache Key Generation in PHP\nDESCRIPTION: Shows how to create a custom method in a PHP class to generate a cache key that changes at a specified interval.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/00_Partial_Caching.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    // ...\n\n    public function getBlogStatisticsCount()\n    {\n        // Returns a new number every five minutes\n        return (int)(time() / 60 / 5);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Final Application Mounting with Injector Awareness\nDESCRIPTION: Demonstrates how to mount the React application with full Injector integration, ensuring all dependencies and transformations are applied before rendering\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport React from 'react';\nimport { ApolloProvider } from '@apollo/client';\nimport Injector, { provideInjector } from 'lib/Injector';\nimport registerDependencies from './boot/registerDependencies';\nimport App from './App';\n\nregisterDependencies();\n\nInjector.ready(() => {\n  const { apolloClient, store } = window.ss;\n  const MyApp = () => (\n    <ApolloProvider client={apolloClient} store={store}>\n      <App />\n    </ApolloProvider>\n  );\n  const MyAppWithInjector = provideInjector(MyApp);\n\n  $('#notes-app').entwine({\n    ReactRoot: null,\n\n    onmatch() {\n      const root = createRoot(this[0]);\n      this.setReactRoot(root);\n      root.render(<MyAppWithInjector />);\n    },\n\n    onunmatch() {\n      const root = this.getReactRoot();\n      if (root) {\n        root.unmount();\n        this.setReactRoot(null);\n      }\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing Versioned DataObjects in Silverstripe\nDESCRIPTION: This snippet shows how to publish versioned DataObjects using publishRecursive(), which publishes the record and its dependencies to make changes visible publicly.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$record = MyRecord::get()->byID(99);\n$record->MyField = 'changed';\n\n// Will create a new revision in \"Stage\". Editors will be able to see this revision,\n// but unauthenticated visitors to the website will not see it.\n$record->write();\n\n// This will publish the changes so they are visible publicly.\n$record->publishRecursive();\n```\n\n----------------------------------------\n\nTITLE: Attaching Events to DOM elements with Entwine\nDESCRIPTION: Demonstrates how to attach event handlers to DOM elements using Entwine. Event handlers with names starting with 'on' are bound to events, and only the most specific definition is used.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n$('div').entwine({\n  onclick() {\n    this.css({ backgroundColor: 'blue' });\n  },\n});\n\n$('.green').entwine({\n  onclick() {\n    this.css({ color: 'green' });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client with Factory Methods\nDESCRIPTION: Example of configuring a HTTP Client service using factory methods and middleware in YAML.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/services.yml\nSilverStripe\\Core\\Injector\\Injector:\n  App\\LogMiddleware:\n    factory: 'GuzzleHttp\\Middleware'\n    factory_method: 'log'\n    constructor:\n      - '%$Psr\\Log\\LoggerInterface'\n      - '%$GuzzleHttp\\MessageFormatter'\n      - 'info'\n  GuzzleHttp\\HandlerStack:\n    factory: 'GuzzleHttp\\HandlerStack'\n    factory_method: 'create'\n    calls:\n      - [push, ['%$App\\LogMiddleware']]\n  GuzzleHttp\\Client:\n    constructor:\n      -\n        handler: '%$GuzzleHttp\\HandlerStack'\n```\n\n----------------------------------------\n\nTITLE: Caching Templates with Locale Switching\nDESCRIPTION: This snippet demonstrates how to cache templates with locale switching by adding the `$CurrentLocale` to the cache key. This ensures that locale changes are properly reflected in the cached content when using `<% loop %>` or `<% with %>` with `<%t params %>`.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_10\n\nLANGUAGE: ss\nCODE:\n```\n<% cached 'MyIdentifier', $CurrentLocale %>\n    <% loop $Students %>\n        $Name\n    <% end_loop %>\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Multiple Relationships in PHP\nDESCRIPTION: Demonstrates how to eager load multiple relationships (Players and Fans) on Team objects using the eagerLoad() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$teams = Team::get()->eagerLoad('Players', 'Fans');\n```\n\n----------------------------------------\n\nTITLE: Adding Application Middleware in PHP\nDESCRIPTION: Demonstrates how to add an application-level middleware that runs before Silverstripe CMS is fully bootstrapped. This is done by modifying the entry point file (public/index.php).\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/05_Middlewares.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\n\nuse App\\Middleware\\MyApplicationMiddleware;\nuse SilverStripe\\Control\\HTTPApplication;\nuse SilverStripe\\Core\\CoreKernel;\n\n// ...\n\n$kernel = new CoreKernel(BASE_PATH);\n$app = new HTTPApplication($kernel);\n$app->addMiddleware(new MyApplicationMiddleware());\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Custom DataObject Ownership Example - Parent Class\nDESCRIPTION: Demonstrates implementation of custom ownership relationships for a parent class without standard database relations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass MyParent extends DataObject\n{\n    private static $extensions = [\n        Versioned::class,\n    ];\n\n    private static $owns = [\n        'ChildObjects',\n    ];\n\n    public function ChildObjects()\n    {\n        return MyChild::get();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing GET Request in SilverStripe FunctionalTest\nDESCRIPTION: Executes a GET request on a specified URL and retrieves the HTTPResponse. This also updates the current page to the response value.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/01_Functional_Testing.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$page = $this->get($url);\n```\n\n----------------------------------------\n\nTITLE: Creating a Form to Select Teams for a Player in SilverStripe\nDESCRIPTION: This snippet shows how to create a form in SilverStripe that allows selecting teams for an existing player. It uses CheckboxSetField to handle the many_many relationship and demonstrates form creation, data loading, and submission handling.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/06_Handle_Nested_data.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse App\\Model\\Player;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Forms\\CheckboxSetField;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\HiddenField;\nuse SilverStripe\\Forms\\RequiredFields;\nuse SilverStripe\\Forms\\TextField;\n\nclass MyController extends Controller\n{\n    private static $url_segment = 'MyController';\n\n    private static $allowed_actions = [\n        'getForm',\n    ];\n\n    private static $url_handlers = [\n        'Form' => 'getForm',\n    ];\n\n    public function getForm()\n    {\n        $player = Player::get()->byID(1);\n        return Form::create(\n            $this,\n            __FUNCTION__,\n            FieldList::create([\n                TextField::create('Name'),\n                CheckboxSetField::create('Teams')\n                    ->setSource(Team::get()->map()),\n                HiddenField::create('ID'),\n            ]),\n            FieldList::create([\n                FormAction::create('doSubmitForm', 'Submit'),\n            ]),\n            RequiredFields::create([\n                'Name',\n                'Teams',\n                'ID',\n            ])\n        )->loadDataFrom($player);\n    }\n\n    public function doSubmitForm($data, $form)\n    {\n        $player = Player::get()->byID($data['ID']);\n\n        // Only works for updating existing records\n        if (!$player) {\n            return false;\n        }\n\n        // Check permissions for the current user.\n        if (!$player->canEdit()) {\n            return false;\n        }\n\n        // Automatically writes Teams() relationship\n        $form->saveInto($player);\n\n        $form->sessionMessage('Saved!', 'good');\n\n        return $this->redirectBack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for a Controller in Silverstripe CMS\nDESCRIPTION: YAML configuration that defines custom routes for a TeamController. This route will allow access to the controller via URLs like 'teams/' and 'teams/players/'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/01_Introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/routes.yml\n---\nName: approutes\nAfter: '#coreroutes'\n---\nSilverStripe\\Control\\Director:\n  rules:\n    'teams//$Action/$ID/$Name': 'App\\Control\\TeamController'\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Response Headers for State Management in Silverstripe CMS\nDESCRIPTION: This snippet demonstrates how to set custom HTTP response headers in a Silverstripe CMS controller to communicate state changes without affecting the response body. It shows setting the X-Controller header to indicate a change in the active controller.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Admin\\LeftAndMain;\n\nclass MyController extends LeftAndMain\n{\n    // ...\n\n    public function myaction()\n    {\n        // ...\n        $this->getResponse()->addHeader('X-Controller', MyOtherController::class);\n        return $html;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Style Formats Configuration\nDESCRIPTION: Comprehensive PHP configuration for custom style formats including headings and misc styles with detailed formatting options.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/05_Typography.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\n\n$formats = [\n    [ 'title' => 'Headings', 'items' => [\n            ['title' => 'Heading 1', 'block' => 'h1' ],\n            ['title' => 'Heading 2', 'block' => 'h2' ],\n            ['title' => 'Heading 3', 'block' => 'h3' ],\n            ['title' => 'Heading 4', 'block' => 'h4' ],\n            ['title' => 'Heading 5', 'block' => 'h5' ],\n            ['title' => 'Heading 6', 'block' => 'h6' ],\n            [\n                'title' => 'Subtitle',\n                'selector' => 'p',\n                'classes' => 'title-sub',\n            ],\n        ],\n    ],\n    [\n        'title' => 'Misc Styles', 'items' => [\n            [\n                'title' => 'Style 1',\n                'selector' => 'ul',\n                'classes' => 'style1',\n                'wrapper' => true,\n                'merge_siblings' => false,\n            ],\n            [\n                'title' => 'Button red',\n                'inline' => 'span',\n                'classes' => 'btn-red',\n                'merge_siblings' => true,\n            ],\n        ],\n    ],\n];\n\nTinyMCEConfig::get('cms')\n    ->addButtonsToLine(1, 'styles')\n    ->setOptions([\n        'importcss_append' => true,\n        'style_formats' => $formats,\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Fields in PHP\nDESCRIPTION: Define summary fields for a DataObject to display quick overviews of record data, commonly used in table columns in the CMS interface.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    private static $db = [\n        'Name' => 'Text',\n        'OtherProperty' => 'Text',\n        'ProductCode' => 'Int',\n    ];\n\n    private static $summary_fields = [\n        'Name',\n        'ProductCode',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Segregating Cache by Version Stage in SilverStripe - PHP\nDESCRIPTION: This PHP snippet demonstrates how cache behavior changes with version stage transitions in SilverStripe. It relies on the 'silverstripe/versioned' module. The cache holds draft content until the stage is set back to live, at which point the draft content is not exposed. Ensure the 'versioned' module is part of your SilverStripe setup for this to apply.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/01_Caching.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Before:\n$cache = Injector::inst()->get(CacheInterface::class . '.myapp');\nVersioned::set_stage(Versioned::DRAFT);\n$cache->set('my_key', 'Some draft content. Not for public viewing yet.');\nVersioned::set_stage(Versioned::LIVE);\n// 'Some draft content. Not for public viewing yet'\n$cache->get('my_key');\n\n// After:\n$cache = Injector::inst()->get(CacheInterface::class . '.myapp');\nVersioned::set_stage(Versioned::DRAFT);\n$cache->set('my_key', 'Some draft content. Not for public viewing yet.');\nVersioned::set_stage(Versioned::LIVE);\n// null\n$cache->get('my_key');\n```\n\n----------------------------------------\n\nTITLE: Populating a Default GraphQL Schema\nDESCRIPTION: This snippet demonstrates how to populate a pre-configured schema named \"default\" with different sections for configuration, types, models, queries, mutations, and enums. Each section allows you to define the respective components of your GraphQL schema.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/02_configuring_your_schema.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_config/graphql.yml\nSilverStripe\\GraphQL\\Schema\\Schema:\n  schemas:\n    default:\n      config:\n        # general schema config here\n      types:\n        # your generic types here\n      models:\n        # your DataObjects here\n      queries:\n        # your queries here\n      mutations:\n        # your mutations here\n      enums:\n        # your enums here\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Property Examples\nDESCRIPTION: Shows how to define and merge configuration properties between base classes and extensions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Data;\n\nuse SilverStripe\\View\\ViewableData;\n\nclass MyDataClass extends ViewableData\n{\n    private static array $my_configuration_property = [\n        'key1' => 'value1',\n        'key2' => 'value2',\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\n\nclass MyDataClassConfigExtension extends Extension\n{\n    private static array $my_configuration_property = [\n        'key1' => 'not overridden',\n        'key3' => 'value3',\n    ];\n\n    private static bool $new_config_property = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract GraphQL Query Configuration\nDESCRIPTION: Creates a flexible GraphQL query configuration using Injector's template system, supporting dynamic query generation with configurable fields\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphqlTemplates } from 'lib/Injector';\n\nconst { READ } = graphqlTemplates;\n\nconst query = {\n  apolloConfig: {\n    props({ data: { readNotes } }) {\n      return {\n        notes: readNotes || [],\n      };\n    }\n  },\n  templateName: READ,\n  pluralName: 'Notes',\n  pagination: false,\n  params: {},\n  fields: [\n    'id',\n    'content',\n  ],\n};\n\nexport default query;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies with YAML\nDESCRIPTION: Shows how to override and configure dependencies using YAML configuration files.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/services.yml\nSilverStripe\\Core\\Injector\\Injector:\n  ThirdParty\\PermissionService:\n    class: App\\MyCustomPermissionService\n  App\\Control\\MyController:\n    properties:\n      defaultText: 'Replaces the old text'\n```\n\n----------------------------------------\n\nTITLE: Using Dot-separated Accessors for Properties\nDESCRIPTION: This snippet illustrates the use of dot syntax to access nested fields such as 'Author.FirstName' for the 'authorName' property. It is part of a configuration for a Blog page type.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/06_property_mapping.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n\"# app/_graphql/models.yml\\nApp\\PageType\\Blog:\\n  fields:\\n    title: true\\n    authorName:\\n      type: String\\n      property: 'Author.FirstName'\"\n```\n\n----------------------------------------\n\nTITLE: Fetching All Cookies via Cookie Backend in PHP\nDESCRIPTION: Illustrates how to access all cookies at once using the Cookie_Backend in Silverstripe. By calling Cookie::get_inst()->getAll(), developers can retrieve all current process cookies; or by specifying false, only cookies from the request can be retrieved.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/01_Cookies.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n//returns all the cookies including ones set during the current process\nCookie::get_inst()->getAll();\n\n//returns all the cookies in the request\nCookie::get_inst()->getAll(false);\n```\n\n----------------------------------------\n\nTITLE: Getting Session Values (PHP)\nDESCRIPTION: These code snippets demonstrate how to retrieve values from the session using the `get()` method. It shows examples of retrieving simple values, arrays, and unserializing objects. The object needs to be unserialized to use the retrieved value.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/02_Sessions.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\necho $session->get('MyValue');\n// returns 6\n\n$data = $session->get('MyArrayOfValues');\n// $data = [1,2,3]\n\n$object = unserialize($session->get('MyObject', $object));\n// $object = Object()\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension via YAML\nDESCRIPTION: YAML configuration to apply the MyMemberExtension to the Member class using Silverstripe's Configuration API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Security\\Member:\n  extensions:\n    - App\\Extension\\MyMemberExtension\n```\n\n----------------------------------------\n\nTITLE: Passing PHP Values to Global JavaScript in Silverstripe Controller\nDESCRIPTION: Demonstrates how to override the getClientConfig() method in a Silverstripe controller to pass values from PHP to global JavaScript. This method is used for component configuration and includes adding endpoint URLs to the client configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/07_CMS_JSON_APIs.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Controllers/MySomethingController.php\nnamespace App\\Controllers;\n\nuse SilverStripe\\Admin\\LeftAndMain;\n\nclass MySomethingController extends LeftAndMain\n{\n    // ...\n    private static array $url_handlers = [\n        'my-endpoint' => 'apiEndpoint',\n    ];\n\n    public function getClientConfig()\n    {\n        $clientConfig = parent::getClientConfig();\n        $clientConfig['myForm'] = [\n            'myEndpointUrl' => $this->Link('my-endpoint'),\n        ];\n        return $clientConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DataObject Table Mapping in SilverStripe - PHP\nDESCRIPTION: Demonstrates how to map DataObject classes to database tables and use DataObjectSchema for table name handling.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace SilverStripe\\BannerManager;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass BannerImage extends DataObject\n{\n    private static $table_name = 'BannerImage';\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\Queries\\SQLSelect;\n\npublic function countDuplicates($model, $fieldToCheck)\n{\n    $table = DataObject::getSchema()->tableForField($model, $field);\n    $query = SQLSelect::create();\n    $query->setFrom(\"\\\"{$table}\\\"\");\n    $query->setWhere([\"\\\"{$table}\\\".\\\"{$field}\\\"\" => $model->$fieldToCheck]);\n    return $query->count();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GridField Data Filtering in PHP\nDESCRIPTION: Example of implementing search context and filter fields for GridField filtering functionality using BasicSearchContext and custom field definitions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/07_Using_GridField_With_Arbitrary_Data.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Data;\n\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\HiddenField;\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\ORM\\Search\\BasicSearchContext;\nuse SilverStripe\\View\\ViewableData;\n\nclass DataRepresentation extends ViewableData\n{\n    // ...\n\n    public function getDefaultSearchContext()\n    {\n        return BasicSearchContext::create(static::class);\n    }\n\n    public function scaffoldSearchFields()\n    {\n        return FieldList::create([\n            HiddenField::create(BasicSearchContext::config()->get('general_search_field_name')),\n            TextField::create('Title', 'Title'),\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and executing SQLDelete queries in Silverstripe\nDESCRIPTION: Demonstrates how to create a SQLDelete object for deleting records from a database table. Shows proper table name handling with schema functions and setting WHERE conditions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/08_SQL_Select.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\CMS\\Model\\SiteTree;\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\Queries\\SQLDelete;\n\n$schema = DataObject::getSchema();\n$siteTreeTable = DB::get_conn()->escapeIdentifier($schema->baseDataTable(SiteTree::class));\n\n$query = SQLDelete::create()\n    ->setFrom($siteTreeTable)\n    ->setWhere([$schema->sqlColumnForField(SiteTree::class, 'ShowInMenus') => 0]);\n$query->execute();\n```\n\n----------------------------------------\n\nTITLE: Registering the TextLengthChecker with Injector\nDESCRIPTION: This code applies the TextLengthChecker higher-order component to TextField components using the Injector API. It's registered under a different transform name 'text-length-transform'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/main.js\nimport Injector from 'lib/Injector';\nimport TextLengthChecker from './components/TextLengthChecker';\n\nInjector.transform('text-length-transform', (updater) => {\n  updater.component('TextField', TextLengthChecker);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Permissions for Category Model in Silverstripe CMS\nDESCRIPTION: Adds custom permission checks to the Category model for viewing, editing, deleting, and creating records.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/Category.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Security\\Permission;\n\nclass Category extends DataObject\n{\n    // ...\n\n    public function canView($member = null)\n    {\n        return Permission::check('CMS_ACCESS_Company\\Website\\MyAdmin', 'any', $member);\n    }\n\n    public function canEdit($member = null)\n    {\n        return Permission::check('CMS_ACCESS_Company\\Website\\MyAdmin', 'any', $member);\n    }\n\n    public function canDelete($member = null)\n    {\n        return Permission::check('CMS_ACCESS_Company\\Website\\MyAdmin', 'any', $member);\n    }\n\n    public function canCreate($member = null)\n    {\n        return Permission::check('CMS_ACCESS_Company\\Website\\MyAdmin', 'any', $member);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unit Test for Silverstripe CMS Page Class Method\nDESCRIPTION: Shows how to create a unit test for the 'myMethod' in the Page class using SapphireTest. It asserts that the method returns the expected value of 2.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/00_Unit_Testing.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/tests/PageTest.php\nnamespace App\\Test;\n\nuse Page;\nuse SilverStripe\\Dev\\SapphireTest;\n\nclass PageTest extends SapphireTest\n{\n    public function testMyMethod()\n    {\n        $this->assertEquals(2, Page::myMethod());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Last Modified Date in Silverstripe CMS\nDESCRIPTION: This example shows how to set the modification date for HTTP caching purposes using the HTTP class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/02_HTTP_Cache_Headers.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\HTTP;\nHTTP::register_modification_date('2014-10-10');\n```\n\n----------------------------------------\n\nTITLE: Registering a React Component Transform with Injector\nDESCRIPTION: This code applies the CharacterCounter higher-order component to all TextField components using the Injector API. The transform is named 'character-count-transform' for reference in dependency ordering.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/main.js\nimport Injector from 'lib/Injector';\nimport CharacterCounter from './components/CharacterCounter';\n\nInjector.transform('character-count-transform', (updater) => {\n  updater.component('TextField', CharacterCounter);\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Field Blacklist Configuration\nDESCRIPTION: Configuration for globally blacklisting sensitive fields from GraphQL schemas.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/01_adding_dataobjects_to_the_schema.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\CMS\\Model\\SiteTree:\n  graphql_blacklisted_fields:\n    myPreviewTokenField: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo Mode Lifetime in Silverstripe CMS\nDESCRIPTION: YAML configuration for setting the lifetime of sudo mode in minutes using the SudoModeService class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/04_Sudo_Mode.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Security\\SudoMode\\SudoModeService:\n  lifetime_minutes: 25\n```\n\n----------------------------------------\n\nTITLE: Handling Lazy Loading Events with jQuery and Entwine in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use jQuery and Entwine to listen for a custom `lazyload` event on elements with the `lazy-loadable` class. It demonstrates applying event handlers when the elements enter the DOM and ensures the event is triggered only once. Developers should provide their own logic for what happens when the event is triggered.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\njQuery('input.myfield.lazy-loadable').entwine({\n  // Use onmatch so we apply the event handler as soon as the element enters the DOM\n  onmatch(e) {\n    // Use the one() function so the lazyload only happens once for this field\n    this.one('lazyload', () => {\n      // Some init code here\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Resolver function signature pattern for SilverStripe GraphQL\nDESCRIPTION: Shows the standard signature pattern for resolver functions in SilverStripe GraphQL that use context. The static resolve method returns a Closure that will handle the actual GraphQL resolution.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/06_extending/adding_a_custom_operation.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Resolvers;\n\nuse Closure;\n\nclass MyResolver\n{\n    public static function resolve(array $context): Closure\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination Controls in a SilverStripe Template\nDESCRIPTION: Implements pagination controls with next/previous navigation and page numbers using PaginationSummary in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/How_Tos/02_Pagination.md#2025-04-21_snippet_2\n\nLANGUAGE: ss\nCODE:\n```\n<%-- app/templates/App/PageType/Layout/MyPage.ss --%>\n<% if $PaginatedPages.MoreThanOnePage %>\n    <% if $PaginatedPages.NotFirstPage %>\n        <a class=\"prev\" href=\"$PaginatedPages.PrevLink\">Prev</a>\n    <% end_if %>\n    <% loop $PaginatedPages.PaginationSummary %>\n        <% if $CurrentBool %>\n            $PageNum\n        <% else %>\n            <% if $Link %>\n                <a href=\"$Link\">$PageNum</a>\n            <% else %>\n                ...\n            <% end_if %>\n        <% end_if %>\n    <% end_loop %>\n    <% if $PaginatedPages.NotLastPage %>\n        <a class=\"next\" href=\"$PaginatedPages.NextLink\">Next</a>\n    <% end_if %>\n<% end_if %>\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Blueprints for the Same Class in SilverStripe\nDESCRIPTION: Shows how to create different blueprint variations for the same base class, allowing different default properties and behaviors. Demonstrates creating regular members versus admin members.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\Dev\\FixtureBlueprint;\nuse SilverStripe\\Security\\Group;\nuse SilverStripe\\Security\\Member;\n\n$memberBlueprint = Injector::inst()->create(FixtureBlueprint::class, 'Member', Member::class);\n\n$adminBlueprint = Injector::inst()->create(FixtureBlueprint::class, 'AdminMember', Member::class);\n\n$adminBlueprint->addCallback('afterCreate', function ($obj, $identifier, $data, $fixtures) {\n    if (isset($fixtures['Group']['admin'])) {\n        $adminGroup = Group::get()->byId($fixtures['Group']['admin']);\n        $obj->Groups()->add($adminGroup);\n    }\n});\n\n// not in admin group\n$member = $factory->createObject('Member');\n\n// in admin group\n$admin = $factory->createObject('AdminMember');\n```\n\n----------------------------------------\n\nTITLE: Initializing React Application Container Component\nDESCRIPTION: Defines a basic React application container with a header and Notes component, serving as the main entry point for the application\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport Notes from './components/Notes';\n\nconst App = () => (\n  <div>\n    <h3>Notes</h3>\n    <Notes />\n  </div>\n);\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a SilverStripe DataList with PHP\nDESCRIPTION: Example of retrieving a list of Member objects from the database and iterating through them using a foreach loop.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/03_Lists.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Security\\Member;\n\n$members = Member::get();\n\nforeach ($members as $member) {\n    echo $member->Name;\n}\n```\n\n----------------------------------------\n\nTITLE: Using obj() Method for Casting\nDESCRIPTION: Shows how to explicitly get casted DBField instances using the obj() method, allowing access to DBField helper methods in PHP code.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$player = Player::get()->byId(1);\n// returns string\n$player->getName();\n// returns string\n$player->Name;\n// returns DBVarchar instance\n$player->obj('Name');\n// returns string\n$player->obj('Name')->LimitCharacters(2);\n```\n\n----------------------------------------\n\nTITLE: Converting Files Using the New High-level API in PHP\nDESCRIPTION: Example of using the new high-level file conversion API in PHP code to convert an image to webp format and apply the FitMax manipulation to the result.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.3.0-rc1.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Convert an image to webp format and apply the FitMax manipulation to the result\n$this->MyImage()->Convert('webp')->FitMax(100, 100);\n```\n\n----------------------------------------\n\nTITLE: Installing a Silverstripe CMS Module with Composer\nDESCRIPTION: This command installs the 'blog' module for Silverstripe CMS using Composer. It fetches the latest compatible stable version of the module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/00_Modules.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require silverstripe/blog\n```\n\n----------------------------------------\n\nTITLE: Nesting Entwine Namespaces\nDESCRIPTION: This snippet shows how to nest namespace declarations in Entwine.  It defines functions within the 'zap' and 'zap.pow' namespaces demonstrating the creation of a nested namespace structure.  This creates `$().entwine('zap').bar()` and `$().entwine('zap.pow').baz()`.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n```js\njQuery.entwine('zap', ($) => {\n  $('div').entwine({\n    bar() {\n      // Some logic here\n    },\n  });\n\n  $.entwine('pow', ($jq) => {\n    $jq('div').entwine({\n      baz() {\n        // Some logic here\n      },\n    });\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating Scope in SilverStripe Templates\nDESCRIPTION: Demonstrates how to navigate scope using $Up and $Top in nested loops within a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_15\n\nLANGUAGE: ss\nCODE:\n```\n<h1>Children of '$Title'</h1>\n\n<% loop $Children %>\n    <p>Page '$Title' is a child of '$Up.Title'</p>\n\n    <% loop $Children %>\n        <p>Page '$Title' is a grandchild of '$Up.Up.Title'</p>\n    <% end_loop %>\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Rolling Back DataObjects to Previous Versions with GraphQL\nDESCRIPTION: This mutation rolls back a SiteTree object to a specified version. This operation is useful for reverting to a previous state of a DataObject.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/05_versioning.md#2025-04-21_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation rollbackSiteTree(id: 123, toVersion: 5) {\\n  id\\n  title\\n}\n```\n\n----------------------------------------\n\nTITLE: Providing an Extension Hook in a Custom Model\nDESCRIPTION: Demonstrates how to provide an extension hook in a custom model to allow other code to modify its behavior.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyModel extends DataObject\n{\n    // ...\n\n    public function getFoo()\n    {\n        $foo = '';\n\n        $this->extend('updateFoo', $foo);\n\n        return $foo;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Silverstripe CMS project for development\nDESCRIPTION: Use Composer to create a new Silverstripe CMS project for development purposes, keeping the version control system files.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/01_Code.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project --keep-vcs silverstripe/installer ./your-website-folder 5.1.x-dev\n```\n\n----------------------------------------\n\nTITLE: Conditionally adding a CSS class to a form field - React\nDESCRIPTION: This snippet modifies the schema for the form to conditionally apply a CSS class 'danger' to the 'Price' field if the 'TicketsRemaining' value is less than 10.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Forms.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform(\n  'my-css',\n  (updater) => {\n    updater.form.alterSchema(\n      'AssetAdmin.*',\n      (form) =>\n        form\n          .setFieldClass('Price', 'danger', (form.getValue('TicketsRemaining') < 10))\n          .getState()\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing OperationCreator for DataObject duplication in SilverStripe GraphQL\nDESCRIPTION: Creates a custom GraphQL operation creator class that implements the OperationCreator interface to add a 'duplicate' operation for DataObjects. The class configures the mutation type, required arguments, and sets up the resolver.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/06_extending/adding_a_custom_operation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL;\n\nuse SilverStripe\\GraphQL\\Schema\\Field\\ModelMutation;\nuse SilverStripe\\GraphQL\\Schema\\Interfaces\\ModelOperation;\nuse SilverStripe\\GraphQL\\Schema\\Interfaces\\OperationCreator;\nuse SilverStripe\\GraphQL\\Schema\\Interfaces\\SchemaModelInterface;\nuse SilverStripe\\GraphQL\\Schema\\SchemaConfig;\n\nclass DuplicateCreator implements OperationCreator\n{\n    public function createOperation(\n        SchemaModelInterface $model,\n        string $typeName,\n        array $config = []\n    ): ?ModelOperation {\n        $mutationName = 'duplicate' . ucfirst(SchemaConfig::pluralise($typeName));\n\n        return ModelMutation::create($model, $mutationName)\n            ->setType($typeName)\n            ->addArg('id', 'ID!')\n            ->setDefaultResolver([static::class, 'resolve'])\n            ->setResolverContext([\n                'dataClass' => $model->getSourceClass(),\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Requirements Initialization\nDESCRIPTION: Example of initializing CSS and JavaScript requirements in a Silverstripe controller's init() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\View\\Requirements;\n\nclass MyCustomController extends Controller\n{\n    protected function init()\n    {\n        parent::init();\n\n        Requirements::javascript('<my-module-dir>/javascript/some_file.js');\n        Requirements::css('<my-module-dir>/css/some_file.css');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Samesite Attribute for Cookies in YAML\nDESCRIPTION: This YAML snippet sets the default Samesite attribute for cookies to 'Strict' in the Silverstripe Cookie configuration. This setting, configurable in SilverStripe\\Control\\Cookie class, impacts how cookies are sent with cross-site requests unless specified otherwise in individual cookie settings.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/01_Cookies.md#2025-04-21_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nSilverStripe\\Control\\Cookie:\n  default_samesite: 'Strict'\n```\n\n----------------------------------------\n\nTITLE: Modifying TinyMCE Buttons in Silverstripe CMS (PHP)\nDESCRIPTION: These snippets demonstrate how to add and remove buttons from the TinyMCE editor toolbar in Silverstripe CMS. It shows adding a 'ssmacron' button and removing 'tablecontrols', 'blockquote', and 'hr' buttons.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\nTinyMCEConfig::get('cms')->insertButtonsAfter('charmap', 'ssmacron');\n\n// app/_config.php\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\nTinyMCEConfig::get('cms')->removeButtons('tablecontrols', 'blockquote', 'hr');\n```\n\n----------------------------------------\n\nTITLE: Implementing the resolver method for duplicate operation in SilverStripe GraphQL\nDESCRIPTION: Adds the resolve method to the DuplicateCreator class that retrieves a DataObject by ID and calls its duplicate method. The resolver utilizes context to access the correct DataObject class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/06_extending/adding_a_custom_operation.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL;\n\nuse Closure;\n// ...\nuse SilverStripe\\ORM\\DataObject;\n\nclass DuplicateCreator implements OperationCreator\n{\n    // ...\n\n    public static function resolve(array $context = []): Closure\n    {\n        $dataClass = $context['dataClass'] ?? null;\n        return function ($obj, array $args) use ($dataClass) {\n            if (!$dataClass) {\n                return null;\n            }\n            return DataObject::get_by_id($dataClass, $args['id'])\n                ->duplicate();\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Formatting Methods in Silverstripe CMS Templates\nDESCRIPTION: This snippet shows examples of using formatting methods in Silverstripe CMS templates. It demonstrates how to access and format various field types, including HTMLText and Datetime fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/09_Casting.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<%-- app/src/Page.ss --%>\n\n<%-- prints the result of DBHtmlText::FirstParagragh() --%>\n$Content.FirstParagraph\n\n<%-- prints the result of DBDatetime::Format(\"d/m/Y\") --%>\n$LastEdited.Format(\"d/m/Y\")\n```\n\n----------------------------------------\n\nTITLE: Implementing CMSEditLink with CMSEditLinkExtension in PHP\nDESCRIPTION: Example showing how to implement CMSEditLink using the CMSEditLinkExtension for a DataObject class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse App\\Admin\\MyModelAdmin;\nuse SilverStripe\\Admin\\CMSEditLinkExtension;\nuse SilverStripe\\ORM\\CMSPreviewable;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyParentModel extends DataObject implements CMSPreviewable\n{\n    private static string $cms_edit_owner = MyModelAdmin::class;\n\n    private static $extensions = [\n        CMSEditLinkExtension::class,\n    ];\n\n    public function CMSEditLink()\n    {\n        // Get the value returned by the extension\n        return $this->extend('CMSEditLink')[0];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Validator for Individual Upload Fields in Silverstripe\nDESCRIPTION: This PHP code snippet creates an UploadField instance and sets the MimeUploadValidator to it, ensuring that only files matching the allowed MIME types can be uploaded.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/06_Allowed_file_types.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$field = UploadField::create();\n$field->setValidator(MimeUploadValidator::create());\n```\n\n----------------------------------------\n\nTITLE: Common Table Expressions (CTE) in SilverStripe - PHP\nDESCRIPTION: Shows how to use Common Table Expressions for complex and recursive queries using DataQuery::with().\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\ObjectWithParent;\nuse SilverStripe\\Core\\Convert;\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\DataQuery;\n\n// Only use the CTE functionality if it is supported by the current database\nif (DB::get_conn()->supportsCteQueries(true)) {\n    $ancestors = ObjectWithParent::get()->alterDataQuery(function (DataQuery $baseQuery) use ($someRecord) {\n        $schema = DataObject::getSchema();\n        $parentIdField = $schema->sqlColumnForField(ObjectWithParent::class, 'ParentID');\n        $idField = $schema->sqlColumnForField(ObjectWithParent::class, 'ID');\n        $cteIdField = Convert::symbol2sql('hierarchy_cte.ParentID');\n\n        $cteQuery = new DataQuery(ObjectWithParent::class);\n        $cteQuery->where([\n            \"$parentIdField > 0\",\n            $idField => $someRecord->ID,\n        ]);\n        $recursiveQuery = new DataQuery(ObjectWithParent::class);\n        $recursiveQuery->innerJoin('hierarchy_cte', \"$idField = $cteIdField\")\n            ->where(\"$parentIdField > 0\")\n            // MySQL doesn't support ORDER BY or DISTINCT in the recursive portion of a CTE\n            ->sort(null)\n            ->distinct(false);\n        $cteQuery->union($recursiveQuery);\n        $baseQuery->with('hierarchy_cte', $cteQuery, [], true);\n        $baseQuery->innerJoin('hierarchy_cte', \"$idField = $cteIdField\");\n        // This query result will include only the ancestors of whatever record is stored in the $someRecord variable.\n        return $baseQuery;\n    });\n} else {\n    // provide an alternative implementation, e.g. a recursive PHP method which runs a query at each iteration\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a SapphireTest for Page URL Generation in PHP\nDESCRIPTION: This code snippet demonstrates how to create a SapphireTest class to test URL generation for Pages in Silverstripe. It includes a fixture file definition, a test method for URL generation, and uses assertions to verify expected results.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/How_Tos/00_Write_a_SapphireTest.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/tests/PageTest.php\nnamespace App\\Test;\n\nuse Page;\nuse SilverStripe\\Dev\\SapphireTest;\n\nclass PageTest extends SapphireTest\n{\n    /**\n     * Defines the fixture file to use for this test class\n     * @var string $fixture_file\n     */\n    protected static $fixture_file = 'SiteTreeTest.yml';\n\n    /**\n     * Test generation of the URLSegment values.\n     *\n     * Makes sure to:\n     *  - Turn things into lowercase-hyphen-format\n     *  - Generates from Title by default, unless URLSegment is explicitly set\n     *  - Resolves duplicates by appending a number\n     */\n    public function testURLGeneration()\n    {\n        $expectedURLs = [\n            'home' => 'home',\n            'staff' => 'my-staff',\n            'about' => 'about-us',\n            'staffduplicate' => 'my-staff-2',\n        ];\n\n        foreach ($expectedURLs as $fixture => $urlSegment) {\n            $obj = $this->objFromFixture(Page::class, $fixture);\n\n            $this->assertEquals($urlSegment, $obj->URLSegment);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginated Items in a SilverStripe Template\nDESCRIPTION: Renders a list of pages with links in a SilverStripe template by looping through the paginated list returned by the controller.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/How_Tos/02_Pagination.md#2025-04-21_snippet_1\n\nLANGUAGE: ss\nCODE:\n```\n<%-- app/templates/App/PageType/Layout/MyPage.ss --%>\n<ul>\n    <% loop $PaginatedPages %>\n        <li><a href=\"$Link\">$Title</a></li>\n    <% end_loop %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object IDs from FixtureFactory in SilverStripe\nDESCRIPTION: Demonstrates how to get the database ID of a previously created fixture object using the getId() method with the class name and identifier.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Test\\Team;\n\n$databaseId = $factory->getId(Team::class, 'hurricanes');\n```\n\n----------------------------------------\n\nTITLE: Accessing Global State in Transformer\nDESCRIPTION: Example showing how to access global state within a transformer using the getGlobalState parameter.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (originalReducer) => (getGlobalState) => (state, { type, payload }) => {\n  const baseUrl = globalState.config.baseUrl;\n\n  switch (type) {\n    /* ... cases here ... */\n    default: {\n      // ...\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sandbox iframe Attributes\nDESCRIPTION: YAML configuration for customizing sandboxed iframe attributes in oEmbed.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\View\\Shortcodes\\EmbedShortcodeProvider:\n  sandboxed_iframe_attributes:\n    allow: 'fullscreen'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cookie Backend with YAML in Silverstripe\nDESCRIPTION: Defines how to implement a custom Cookie_Backend in Silverstripe using YAML configuration. The custom backend class must implement the Cookie_Backend interface. YAML is used to define the new class to be used by the 'Cookie_Backend' injector.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/01_Cookies.md#2025-04-21_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n---\nName: mycookie\nAfter: '#cookie'\n---\nSilverStripe\\Core\\Injector\\Injector:\n  Cookie_Backend:\n    class: MyCookieJar\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limited Controller Handler in Silverstripe\nDESCRIPTION: Sets up a request handler middleware adapter to apply rate limiting to a specific controller. Links the previously defined rate limit middleware with the target controller.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/06_Rate_Limiting.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  MyRateLimitedController:\n    class: SilverStripe\\Control\\Middleware\\RequestHandlerMiddlewareAdapter\n    properties:\n      RequestHandler: '%$MyController' # the fully qualified class name of your controller\n      Middlewares:\n        - '%$MyRateLimitMiddleware' # the rate limiter we just defined in the last step\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Storage in SilverStripe YAML\nDESCRIPTION: Demonstrates how to configure the cache storage backend for partial template caching, setting the default lifetime to one hour.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/cache.yml\n---\nName: app-cache\nAfter:\n  - 'corecache'\n---\nSilverStripe\\Core\\Injector\\Injector:\n  Psr\\SimpleCache\\CacheInterface.cacheblock:\n    constructor:\n      defaultLifetime: 3600\n```\n\n----------------------------------------\n\nTITLE: Complex Caching with Mixed Content\nDESCRIPTION: Advanced caching example using multiple keys, conditions, and uncached blocks within cached content.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_16\n\nLANGUAGE: ss\nCODE:\n```\n<% cached 'contentblock', $LastEdited, $CurrentMember.ID if $CurrentMember && not $CurrentMember.isAdmin %>\n  <%--\n       Hash of this content block is also included\n       into the final Cache Key value along with\n       SilverStripe\\View\\SSViewer::$global_key\n  --%>\n  <% uncached %>\n      This text is always dynamic (never cached)\n  <% end_uncached %>\n  <%-- This bit is cached again --%>\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Loading a PJAX Panel in JavaScript\nDESCRIPTION: This code snippet demonstrates how to load a PJAX panel using the `loadPanel` method. The `pjax` data option specifies the view to be loaded.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// You can use this if you use @silverstripe/webpack-config\nimport { joinUrlPaths } from 'lib/urls';\n\n$('.cms-container').loadPanel(joinUrlPaths(ss.config.adminUrl, 'pages'), null, { pjax: 'Content' });\n```\n```\n\n----------------------------------------\n\nTITLE: Clearing and Blocking Requirements in Silverstripe CMS\nDESCRIPTION: These PHP code snippets demonstrate how to clear all defined requirements or specific ones, and how to block certain requirements from being included using the Requirements class in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\View\\Requirements;\n\nRequirements::clear();\n\nRequirements::clear('modulename/javascript/some-lib.js');\n\nRequirements::block('some/module:client/dist/jquery.js');\n```\n\n----------------------------------------\n\nTITLE: Filtering List Items in SilverStripe Templates\nDESCRIPTION: Demonstrates how to filter a list of children to only show items with 'School' set to 'College' using the Filter method in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_9\n\nLANGUAGE: ss\nCODE:\n```\n<ul>\n    <% loop $Children.Filter('School', 'College') %>\n        <li>$Title</li>\n    <% end_loop %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Item in a SilverStripe List\nDESCRIPTION: Demonstration of using the find() method to locate a specific Member by ID and access its FirstName property.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/03_Lists.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$members = Member::get();\n\n// returns a string e.g. 'Sam'\necho $members->find('ID', 4)->FirstName;\n```\n\n----------------------------------------\n\nTITLE: Using Configuration Masks in Silverstripe CMS\nDESCRIPTION: Shows how to use configuration masks to exclude inherited or extension-applied configuration when retrieving values.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\Config\\Config;\n\n$actionsWithoutExtra = $this->config()->get(\n    'allowed_actions',\n    Config::UNINHERITED\n);\n```\n\n----------------------------------------\n\nTITLE: Using the Encapsulated Search Form in a SilverStripe Controller\nDESCRIPTION: This snippet shows how to use the encapsulated SearchForm class within a controller, significantly reducing the amount of code in the controller.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/01_Encapsulate_Forms.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// app/src/PageType/SearchPageController.php\nnamespace App\\PageType;\n\nuse App\\Form\\SearchForm;\nuse PageController;\n\nclass SearchPageController extends PageController\n{\n    private static $allowed_actions = [\n        'searchForm',\n    ];\n\n    public function searchForm()\n    {\n        return SearchForm::create($this, __FUNCTION__);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Default Values in SilverStripe\nDESCRIPTION: Shows how to set dynamic default values by overriding the populateDefaults() method. Example sets the current date as a default value.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Dynamic_Default_Fields.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Dog extends DataObject\n{\n    // ...\n\n    /**\n     * Sets the Date field to the current date.\n     */\n    public function populateDefaults()\n    {\n        $this->Date = date('Y-m-d');\n        parent::populateDefaults();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Transport in Silverstripe YML\nDESCRIPTION: YAML configuration for setting up the email transport interface with a custom DSN.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/10_Email/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/mailer-project.yml\n---\nName: mailer-project\nAfter: 'mailer'\n---\nSilverStripe\\Core\\Injector\\Injector:\n  Symfony\\Component\\Mailer\\Transport\\TransportInterface:\n    constructor:\n      dsn: '<my-dsn>'\n```\n\n----------------------------------------\n\nTITLE: Configuring oEmbed URL Restrictions\nDESCRIPTION: YAML configuration for setting up whitelists and blacklists for oEmbed URLs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_12\n\nLANGUAGE: yml\nCODE:\n```\n---\nName: oembed-restrictions\n---\nSilverStripe\\AssetAdmin\\Forms\\RemoteFileFormFactory:\n  fileurl_scheme_whitelist:\n    - https\n    - http\n  fileurl_scheme_blacklist:\n    - ftp\n  fileurl_domain_whitelist:\n    - google.com\n  fileurl_domain_blacklist:\n    - localhost\n  fileurl_port_whitelist:\n    - 80\n    - 443\n  fileurl_port_blacklist:\n    - 23\n```\n\n----------------------------------------\n\nTITLE: Using <%t params %> in Template Files\nDESCRIPTION: This snippet illustrates how to use the `<%t params %>` syntax in Silverstripe template files for string translation, variable injection, and pluralization. It shows how parameters are space-separated, original language strings and comments are separated by ` on `, and the array parameter is passed as a space-separated list of key-value pairs.  `$Name` and `$Greeting` must be available in the current template scope.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_9\n\nLANGUAGE: ss\nCODE:\n```\n<%-- Simple string translation --%>\n<%t Namespace.Entity \"String to translate\" %>\n\n<%-- Using injection to add variables into the translated strings (note that $Name and $Greeting must be available in the current template scope). --%>\n<%t Header.Greeting \"Hello {name} {greeting}\" name=$Name greeting=$Greeting %>\n\n<%-- Plurals follow the same convention, required a `|` and `{count}` in the default string --%>\n<%t MyObject.PLURALS 'An item|{count} items' count=$Count %>\n```\n\n----------------------------------------\n\nTITLE: Customizing FormField Behavior in Silverstripe CMS\nDESCRIPTION: Shows how to customize FormField behavior and HTML markup in Silverstripe CMS using method chaining.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\TextField;\n\n$field = TextField::create(/* ... */)\n    ->setMaxLength(100)\n    ->setAttribute('placeholder', 'Enter a value..')\n    ->setTitle('');\n```\n\n----------------------------------------\n\nTITLE: Using Position Indicators in SilverStripe Templates\nDESCRIPTION: Demonstrates the use of various position indicators like $IsFirst, $EvenOdd, and $Pos in a SilverStripe template loop.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_11\n\nLANGUAGE: ss\nCODE:\n```\n<ul>\n    <% loop $Children.Reverse %>\n        <% if $IsFirst %>\n            <li>My Favourite</li>\n        <% end_if %>\n\n        <li class=\"$EvenOdd\">Child $Pos of $TotalItems - $Title</li>\n    <% end_loop %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Triggering CMS Layout Redraw in JavaScript\nDESCRIPTION: Simple example showing how to trigger a redraw of the CMS layout container to update positioning and sizing of all child elements.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/03_CMS_Layout.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$('.cms-container').redraw();\n```\n\n----------------------------------------\n\nTITLE: Creating React Components with JSX\nDESCRIPTION: Demonstrates how to create a React photo component using JSX syntax, showing both the JSX code and its rendered HTML output.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n// ...\n\n  <PhotoItem size={200} caption=\"Angkor Wat\" onSelect={openLightbox}>\n    <img alt=\"\" src=\"path/to/image.jpg\" />\n  </PhotoItem>;\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"photo-item\">\n    <div class=\"photo\" style=\"width:200px;height:200px;\">\n        <img src=\"path/to/image.jpg\">\n    </div>\n    <div class=\"photo-caption\">\n        <h3><a>Angkor Wat/a></h3>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom SearchFilter in YAML\nDESCRIPTION: Demonstrates how to register a custom SearchFilter using YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/06_SearchFilters.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  DataListFilter.CustomMatch:\n    class: MyVendor\\Search\\CustomMatchFilter\n```\n\n----------------------------------------\n\nTITLE: Configuring Themes in Silverstripe CMS\nDESCRIPTION: YAML configuration example for setting up themes in Silverstripe CMS. Demonstrates how to specify theme order, including the default theme.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/05_Template_Inheritance.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/themes.yml\n---\nName: mytheme\n---\nSilverStripe\\View\\SSViewer:\n  themes:\n    - theme_name\n    - '$default'\n```\n\n----------------------------------------\n\nTITLE: Using ExactMatch Filter with Case Sensitivity in PHP\nDESCRIPTION: Demonstrates how to use the ExactMatch filter with different case sensitivity options.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/06_SearchFilters.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Fetch players that their FirstName is exactly 'Sam'\n// Caution: This might be case in-sensitive if MySQL or MSSQL is used\n$players = Player::get()->filter([\n    'FirstName:ExactMatch' => 'Sam',\n]);\n\n// Fetch players that their FirstName is exactly 'Sam' (force case-sensitive)\n$players = Player::get()->filter([\n    'FirstName:ExactMatch:case' => 'Sam',\n]);\n\n// Fetch players that their FirstName is exactly 'Sam' (force NOT case-sensitive)\n$players = Player::get()->filter([\n    'FirstName:ExactMatch:nocase' => 'Sam',\n]);\n```\n\n----------------------------------------\n\nTITLE: Combining JavaScript Files with Attributes in Silverstripe CMS\nDESCRIPTION: This PHP code shows how to combine multiple JavaScript files into a single file and add 'async' and 'defer' attributes to the combined script using the Requirements class in Silverstripe CMS. It uses the ThemeResourceLoader to find themed JavaScript files.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\View\\Requirements;\nuse SilverStripe\\View\\SSViewer;\nuse SilverStripe\\View\\ThemeResourceLoader;\n\n$loader = ThemeResourceLoader::inst();\n$themes = SSViewer::get_themes();\n\n$scripts = [\n    $loader->findThemedJavascript('some_script.js', $themes),\n    $loader->findThemedJavascript('some_other_script.js', $themes),\n];\n\nRequirements::combine_files('scripts.js', $scripts, ['async' => true, 'defer' => true]);\n```\n\n----------------------------------------\n\nTITLE: Defining Model Properties in PHP\nDESCRIPTION: Demonstrates creating a SilverStripe DataObject with properties that auto-escape HTML for safe output.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    private static $db = [\n        // Example value: <b>not bold</b>\n        'MyEscapedValue' => 'Text',\n        // Example value: <b>bold</b>\n        'MyUnescapedValue' => 'HTMLText',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Injecting toggleable field functionality - React\nDESCRIPTION: This snippet uses Injector to modify the ReduxFormField component to make it toggleable by applying the HideableComponent. This way, certain fields can be hidden or shown based on conditions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Forms.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/main.js\nInjector.transform(\n  'toggle-field',\n  (updater) => {\n    updater.component('ReduxFormField', HideableComponentCreator);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling TinyMCE Plugins in Silverstripe CMS (PHP)\nDESCRIPTION: This snippet shows how to enable additional plugins for the TinyMCE editor in Silverstripe CMS. It specifically enables the 'emoticons' plugin for the 'cms' configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse SilverStripe\\Forms\\HTMLEditor\\HTMLEditorConfig;\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\n\n$editorConfig = HTMLEditorConfig::get('cms');\nif ($editorConfig instanceof TinyMCEConfig) {\n    $editorConfig->enablePlugins('emoticons');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GroupedList in ModulePage\nDESCRIPTION: Creates a ModulePage class that returns grouped modules sorted by title using GroupedList.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Grouping_DataObject_Sets.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse App\\Model\\Module;\nuse Page;\nuse SilverStripe\\ORM\\GroupedList;\n\nclass ModulePage extends Page\n{\n    /**\n     * Returns all modules, sorted by their title.\n     * @return GroupedList\n     */\n    public function getGroupedModules()\n    {\n        return GroupedList::create(Module::get()->sort('Title'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a File Converter in YML Configuration\nDESCRIPTION: This YML snippet demonstrates how to register a custom file converter with the `FileConverterManager`. The `converters` list is used to specify the class names of the converters. The `Before: '#assetsconversion'` directive sets the priority of the converter higher than the default `assetsconversion` configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\n---\nBefore: '#assetsconversion'\n---\nSilverStripe\\Assets\\Conversion\\FileConverterManager:\n  converters:\n    - 'App\\Conversion\\MyImageFileConverter'\n```\n\n----------------------------------------\n\nTITLE: Adding Types, Queries, and Models in PHP\nDESCRIPTION: This PHP code snippet provides an example of how to add a type, a query, and a model to the GraphQL schema using the procedural API. It demonstrates the use of the `$schema` object to add these elements and how to define fields and arguments.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/04_using_procedural_code.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"namespace App\\GraphQL;\n\nuse App\\Model\\MyDataObject;\nuse SilverStripe\\GraphQL\\Schema\\Field\\Query;\nuse SilverStripe\\GraphQL\\Schema\\Interfaces\\SchemaUpdater;\nuse SilverStripe\\GraphQL\\Schema\\Schema;\nuse SilverStripe\\GraphQL\\Schema\\Type\\Type;\n\nclass MySchema implements SchemaUpdater\n{\n    public static function updateSchema(Schema $schema): void\n    {\n        $countryType = Type::create('Country')\n            ->addField('name', 'String')\n            ->addField('code', 'String');\n        $schema->addType($countryType);\n\n        $countriesQuery = Query::create('readCountries', '[Country]!')\n            ->addArg('limit', 'Int');\n        $schema->addQuery($countriesQuery);\n\n        $myModel = $schema->createModel(MyDataObject::class)\n            ->addAllFields()\n            ->addAllOperations();\n        $schema->addModel($myModel);\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Typehints in Specific Page Controllers in PHP\nDESCRIPTION: Example of extending the generic PageController for a specific page type. This allows IDEs to correctly type-hint methods like data() and properties like $dataRecord in page controllers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\n\n/**\n * @extends PageController<HomePage>\n */\nclass HomepageController extends PageController\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Template Variables in PHP\nDESCRIPTION: Shows how to define custom methods in PHP that can be used as variables in Silverstripe CMS templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/MyObject.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    // ...\n\n    public function UsersIpAddress()\n    {\n        return $this->getRequest()->getIP();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the ConfirmingFormButton Component Transform\nDESCRIPTION: This code applies the ConfirmingFormButton higher-order component to all FormAction components using the Injector API. It includes a name parameter to identify this specific transformation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/main.js\nimport ConfirmingFormButton from './components/ConfirmingFormButton';\n\nInjector.transform('confirming-button-transform', (updater) => {\n  updater.component('FormAction', ConfirmingFormButton, 'ConfirmingFormButton');\n});\n```\n\n----------------------------------------\n\nTITLE: Eager Loading DataList Filtering in PHP\nDESCRIPTION: Demonstrates how to filter eager loaded relations using a callback function on a DataList, providing performance optimization for relation queries\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DataList;\n\n$teams = Team::get()->eagerLoad([\n    'Players' => fn (DataList $list) => $list->filter(['Age:GreaterThan' => 18]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation to Forms\nDESCRIPTION: Demonstrates how to add custom validation rules to forms using the Injector's form validation system, which integrates with redux-form.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform(\n  'my-validation',\n  (updater) => {\n    updater.form.addValidation(\n      'AssetAdmin.*',\n      (values, validator) => {\n        if (values.PostalCode.length !== 5) {\n          validator.addError('PostalCode', 'Invalid postal code');\n        }\n      }\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Redux State Data with Injector Transformations\nDESCRIPTION: Explains how to use Injector transformations to customize Redux state data, including intercepting and modifying actions and payloads.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform('customisationName', (updater) => {\n  updater.reducer('assetAdmin', MyReducerTransformer);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic File Converter in PHP\nDESCRIPTION: This PHP snippet presents a generic file converter that handles conversions to PDF and images. It uses `manipulateExtension()` and third-party libraries (not included in snippet) for actual conversions. It uses the AssetStore API to store the converted files. The converter also instantiates a new `Image_Backend` when converting to images.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Conversion;\n\nuse SilverStripe\\Assets\\Conversion\\FileConverter;\nuse SilverStripe\\Assets\\Conversion\\FileConverterException;\nuse SilverStripe\\Assets\\File;\nuse SilverStripe\\Assets\\Image_Backend;\nuse SilverStripe\\Assets\\Storage\\AssetStore;\nuse SilverStripe\\Assets\\Storage\\DBFile;\nuse SilverStripe\\Core\\Injector\\Injector;\n\nclass MyFileConverter implements FileConverter\n{\n    public function supportsConversion(string $fromExtension, string $toExtension, array $options = []): bool\n    {\n        $supported = true;\n        /* some validation here to check if this conversion is supported */\n        return $supported;\n    }\n\n    public function convert(DBFile|File $from, string $toExtension, array $options = []): DBFile\n    {\n        $fromExtension = $from->getExtension();\n        if (!$this->supportsConversion($fromExtension, $toExtension, $options)) {\n            throw new FileConverterException(\n                \"Conversion from '$fromExtension' to '$toExtension with those options is not supported.\"\n            );\n        }\n\n        // Handle conversion to PDF\n        if (strtolower($toExtension) === 'pdf') {\n            return $from->manipulateExtension(\n                $toExtension,\n                function (AssetStore $store, string $filename, string $hash, string $variant) {\n                    $tmpFilePath = /* some conversion logic goes here */;\n                    $config = ['conflict' => AssetStore::CONFLICT_USE_EXISTING];\n                    $tuple = $store->setFromLocalFile($tmpFilePath, $filename, $hash, $variant, $config);\n                    return [$tuple, null];\n                }\n            );\n        }\n\n        // Handle conversion to image\n        return $from->manipulateExtension(\n            $toExtension,\n            function (AssetStore $store, string $filename, string $hash, string $variant) {\n                $tmpFilePath = /* some conversion logic goes here */;\n                $backend = Injector::inst()->create(Image_Backend::class);\n                $backend->loadFrom($tmpFilePath);\n                $config = ['conflict' => AssetStore::CONFLICT_USE_EXISTING];\n                $tuple = $backend->writeToStore($store, $filename, $hash, $variant, $config);\n                return [$tuple, $backend];\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Eager Loading Query Manipulation in PHP\nDESCRIPTION: Shows how to apply complex filtering and sorting to multiple levels of eager loaded relationships.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DataList;\n\n$teams = Team::get()->eagerLoad([\n    'Players' => fn (DataList $list) => $list->filter(['Age:GreaterThan' => 18]),\n    'Players.Fans' => fn (DataList $list) => $list->filter(['Name:PartialMatch:nocase' => 'Sam']),\n    'Players.Fans.Events' => fn (DataList $list) => $list->filter(['DollarCost:LessThan' => 200]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy-Loading Tabs in Silverstripe CMS\nDESCRIPTION: This HTML snippet shows how to implement lazy-loading tabs in the Silverstripe CMS. It demonstrates the use of cms-tabset class for base behavior and cms-panel-link class for triggering AJAX loading of tab content.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"my-tab-id\" class=\"cms-tabset\" data-ignore-tab-state=\"true\">\n    <ul>\n        <li class=\"<% if MyActiveCondition %> ui-tabs-active<% end_if %>\">\n            <a href=\"$AdminURL('mytabs/tab1')\" class=\"cms-panel-link\">\n                Tab1\n            </a>\n        </li>\n        <li class=\"<% if MyActiveCondition %> ui-tabs-active<% end_if %>\">\n            <a href=\"$AdminURL('mytabs/tab2')\" class=\"cms-panel-link\">\n                Tab2\n            </a>\n        </li>\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Redux Transformer Structure\nDESCRIPTION: Demonstrates the basic structure of a Redux transformer using currying to handle state transformations with access to original reducer, global state, and payload.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyReducerTransformer = (originalReducer) => (globalState) => (state, { type, payload }) => {\n  switch (type) {\n    case 'EXISTING_ACTION': {\n      // recommended to call and return the originalReducer with the payload changed by the transformer\n      return originalReducer(/* ... */);\n    }\n\n    case 'OVERRIDE_EXISTING_ACTION': {\n      // could omit the originalReducer to enforce your change or cancel the originalREducer's change\n      return originalReducer(/* ... */);\n    }\n\n    default: {\n      // it is important to return the originalReducer with original redux parameters.\n      return originalReducer(state, { type, payload });\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for Silverstripe CMS Tests\nDESCRIPTION: Example of a PHPUnit XML configuration file for Silverstripe CMS tests. It sets the bootstrap file, enables colored output, defines test suites, and excludes certain test groups.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/00_Unit_Testing.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- phpunit.xml -->\n<phpunit bootstrap=\"vendor/silverstripe/framework/tests/bootstrap.php\" colors=\"true\">\n    <testsuites>\n        <testsuite name=\"Default\">\n            <directory>app/tests</directory>\n        </testsuite>\n    </testsuites>\n    <groups>\n        <exclude>\n            <group>sanitychecks</group>\n        </exclude>\n    </groups>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with FixtureFactory in SilverStripe\nDESCRIPTION: Demonstrates how to instantiate a FixtureFactory and create a basic object using it. The factory automatically handles blueprint creation for DataObject subclasses.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Test\\Team;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n$factory = Injector::inst()->create('FixtureFactory');\n\n$obj = $factory->createObject(Team::class, 'hurricanes');\n```\n\n----------------------------------------\n\nTITLE: Entwine Method Definition Example\nDESCRIPTION: Defines two methods, `foo`, attached to DOM elements with class `internal_text` and `attribute_text` respectively. These methods log different content based on the selected element.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n$('.internal_text').entwine({\n  foo() {\n    // eslint-disable-next-line no-console\n    console.log(this.text());\n  },\n});\n\n$('.attribute_text').entwine({\n  foo() {\n    // eslint-disable-next-line no-console\n    console.log(this.attr('rel'));\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Proxy Headers in Silverstripe CMS\nDESCRIPTION: Customizes which HTTP headers are used by the TrustedProxyMiddleware to find proxy information for hostname, scheme, and IP address.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_23\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\TrustedProxyMiddleware:\n  properties:\n    ProxyHostHeaders: X-Forwarded-Host\n    ProxySchemeHeaders: X-Forwarded-Protocol\n    ProxyIPHeaders: X-Forwarded-Ip\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Paths and User Agents for Trailing Slash Redirects in YML\nDESCRIPTION: This YAML configuration instructs the CanonicalURLMiddleware to ignore specific paths and user agents from trailing slash redirects, allowing for tailored behavior in specific scenarios.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Middleware\\CanonicalURLMiddleware:\n    properties:\n      enforceTrailingSlashConfigIgnorePaths:\n        - 'my-ajax-controller/'\n      enforceTrailingSlashConfigIgnoreUserAgents:\n        - 'my-dev-user-agent'\n```\n\n----------------------------------------\n\nTITLE: Fetching Services with Injector\nDESCRIPTION: Demonstrates how to fetch registered services using the `Injector.component.get` method. This allows retrieving and using the registered components.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = Injector.component.get('MyComponent');\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Specific Middleware in YAML\nDESCRIPTION: Shows how to apply middlewares to a specific route using the RequestHandlerMiddlewareAdapter class. This configuration allows for route-specific middleware processing.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/05_Middlewares.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/middlewares.yml\nSilverStripe\\Core\\Injector\\Injector:\n  SpecialRouteMiddleware:\n    class: SilverStripe\\Control\\Middleware\\RequestHandlerMiddlewareAdapter\n    properties:\n      RequestHandler: '%$App\\Control\\MyController'\n      Middlewares:\n        - '%$App\\Middleware\\CustomMiddleware'\n        - '%$App\\Middleware\\AnotherMiddleware'\nSilverStripe\\Control\\Director:\n  rules:\n    special/section:\n      Controller: '%$SpecialRouteMiddleware'\n```\n\n----------------------------------------\n\nTITLE: Implementing Purposely Stale Data Caching in Silverstripe\nDESCRIPTION: Demonstrates how to implement caching for data that can be slightly outdated, improving performance by reducing update frequency.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/00_Partial_Caching.md#2025-04-21_snippet_2\n\nLANGUAGE: silverstripe\nCODE:\n```\n<% cached 'blogstatistics', $Blog.ID %>\n```\n\nLANGUAGE: silverstripe\nCODE:\n```\n<% cached 'blogstatistics', $Blog.ID, $BlogStatisticsCount %>\n```\n\n----------------------------------------\n\nTITLE: Performing POST Request in SilverStripe FunctionalTest\nDESCRIPTION: Executes a POST request on a specified URL and retrieves the HTTPResponse. This also updates the current page to the response value.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/01_Functional_Testing.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$page = $this->post($url);\n```\n\n----------------------------------------\n\nTITLE: Manually Validating Relations in PHP\nDESCRIPTION: This PHP snippet demonstrates how to invoke the RelationValidationService in SilverStripe to validate object relations outside of the dev/build context, showing how to validate relations for all classes or specific classes using validateRelations() and inspectClasses() methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SilverStripe\\Dev\\Validation\\RelationValidationService;\n\n$messages = RelationValidationService::singleton()->validateRelations();\n\n// Inspect specific classes\n$messages = RelationValidationService::singleton()->inspectClasses([Team::class, Player::class]);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GridField Display Fields\nDESCRIPTION: Sets up GridField display configuration by specifying which fields should be shown and their column headers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/07_Using_GridField_With_Arbitrary_Data.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridField;\nuse SilverStripe\\Forms\\GridField\\GridFieldDataColumns;\n\n$gridField = GridField::create('MyData', 'My data', $list);\n$columns = $gridField->getConfig()->getComponentByType(GridFieldDataColumns::class);\n$columns->setDisplayFields([\n    'FieldName' => 'Column Header Label',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Root URL Handler in SilverStripe YAML\nDESCRIPTION: Shows how to set up a routing rule for a root URL handler in SilverStripe's YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'bread': 'App\\Control\\BreadAPIController'\n```\n\n----------------------------------------\n\nTITLE: Performing Custom HTTP Request in SilverStripe FunctionalTest\nDESCRIPTION: Executes a custom HTTP request (e.g., PUT, PATCH, DELETE) on a specified URL and retrieves the HTTPResponse. This also updates the current page to the response value.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/01_Functional_Testing.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$page = $this->sendRequest('PUT', $url);\n```\n\n----------------------------------------\n\nTITLE: Loading Custom JavaScript in SilverStripe CMS via YAML Configuration\nDESCRIPTION: This YAML configuration snippet shows how to load a custom JavaScript file in the SilverStripe CMS by adding it to the LeftAndMain.extra_requirements_javascript configuration value.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Admin\\LeftAndMain:\n  extra_requirements_javascript:\n    - app/javascript/MyLeftAndMain.Preview.js\n```\n\n----------------------------------------\n\nTITLE: Localising Field Labels in SilverStripe YAML\nDESCRIPTION: This YAML configuration demonstrates how to localize field labels for a DataObject. It uses prefixes like 'db_' and 'has_one_' to identify the type of field being localized.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# app/lang/en.yml\nen:\n  App\\Model\\MyDataObject:\n    db_Name: \"Name\"\n    has_one_HeroImage: \"Hero Image\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic FieldPlugin Interface in PHP for String Truncation\nDESCRIPTION: Basic implementation of a GraphQL plugin that adds a 'truncate' argument to String fields. This initial implementation only adds the argument without handling the actual truncation logic.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/02_writing_a_simple_plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Plugin;\n\nuse SilverStripe\\GraphQL\\Schema\\Field\\Field;\nuse SilverStripe\\GraphQL\\Schema\\Interfaces\\FieldPlugin;\nuse SilverStripe\\GraphQL\\Schema\\Schema;\n\nclass Truncator implements FieldPlugin\n{\n    public function getIdentifier(): string\n    {\n        return 'truncate';\n    }\n\n    public function apply(Field $field, Schema $schema, array $config = [])\n    {\n        $field->addArg('truncate', 'Int');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Uncached Blocks in SilverStripe Templates\nDESCRIPTION: Demonstrates how to use uncached blocks within cached content in SilverStripe templates, allowing for dynamic content within cached sections.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_6\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $PageKey %>\n  <%-- Header goes here --%>\n\n  <% uncached %>\n    <%-- Body goes here --%>\n  <% end_uncached %>\n\n  <%-- Footer goes here --%>\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Schema Configuration\nDESCRIPTION: This snippet shows the initial setup for a GraphQL schema configuration file in Silverstripe. It defines the `schemas` key under `SilverStripe\\GraphQL\\Schema\\Schema`, where you can define your schemas.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/02_configuring_your_schema.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_config/graphql.yml\nSilverStripe\\GraphQL\\Schema\\Schema:\n  schemas:\n    # your schemas here\"\n```\n\n----------------------------------------\n\nTITLE: Loading Content into DBFile in PHP\nDESCRIPTION: This code snippet demonstrates how to load content into a DBFile field from a temporary file on the local filesystem. It shows the process of creating a Banner object and setting its Image field from a local file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/04_File_Storage.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\Banner;\n\n// Image could be assigned in other parts of the code using the below\n$banner = Banner::create();\n$banner->Image->setFromLocalFile($tempfile['path'], 'my-folder/my-file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Handling Paginated Results in Resolver Afterware in PHP\nDESCRIPTION: This snippet shows how to handle paginated results in the resolver afterware for proximity filtering.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/03_writing_a_complex_plugin.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// app/src/GraphQL/Resolver/MyResolver.php\nnamespace App\\GraphQL\\Resolver;\n\nuse App\\Geo\\Proximity;\n\nclass MyResolver\n{\n    public static function applyRadius($result, array $args)\n    {\n        $results = [];\n        // imaginary class\n        $proximity = new Proximity($args['unit'], $args['lat'], $args['lon']);\n        foreach ($result['nodes'] as $record) {\n            if ($proximity->isWithin($args['proximity'], $record->Lat, $record->Lon)) {\n                $results[] = $record;\n            }\n        }\n\n        return [\n            'edges' => $results,\n            'nodes' => $results,\n            'pageInfo' => $result['pageInfo'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard URL Pattern for SilverStripe Routing\nDESCRIPTION: A common URL routing pattern in SilverStripe that maps all URLs starting with 'teams' to a controller, passing optional action, ID, and other ID parameters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'teams//$Action/$ID/$OtherID': 'App\\Control\\TeamController'\n\n# /teams/\n# /teams/players/\n# /teams/players/1\n# /teams/players/1/13\n```\n\n----------------------------------------\n\nTITLE: Accessing SiteConfig in Silverstripe CMS Template\nDESCRIPTION: Demonstrates how to access global settings stored in SiteConfig from a Silverstripe CMS template. This example shows how to display the site title.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_4\n\nLANGUAGE: ss\nCODE:\n```\n$SiteConfig.Title\n```\n\n----------------------------------------\n\nTITLE: Transforming Services with Injector\nDESCRIPTION: Shows how to transform services using the `Injector.transform` method. This allows developers to customize existing services by providing an updater function that can modify components and reducers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// someone-elses-module/js/main.js\nInjector.transform(\n  'my-transformation',\n  (updater) => {\n    updater.component('MyComponent', MyCustomComponent);\n    updater.reducer('myCustom', MyCustomReducer);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Team DataObject Class Definition\nDESCRIPTION: Example Team class implementing TestOnly interface with database fields and relationships.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Test;\n\nuse SilverStripe\\Dev\\TestOnly;\nuse SilverStripe\\ORM\\DataObject;\n\nclass Team extends DataObject implements TestOnly\n{\n    private static $db = [\n        'Name' => 'Varchar(255)',\n        'Origin' => 'Varchar(255)',\n    ];\n\n    private static $has_many = [\n        'Players' => Player::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Custom GraphQL Server Controller\nDESCRIPTION: This YAML configuration sets up a new controller to handle requests for a custom GraphQL schema in SilverStripe, allowing the creation of an additional GraphQL endpoint.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/01_activating_the_server.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  # ...\n  SilverStripe\\GraphQL\\Controller.myNewSchema:\n    class: SilverStripe\\GraphQL\\Controller\n    constructor:\n      schemaKey: myNewSchema\n```\n\n----------------------------------------\n\nTITLE: Conditional Caching with If Statement\nDESCRIPTION: Caching implementation that only caches content when a condition evaluates to true.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_13\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $Key if $Cond %>\n    Cached only if $Cond == true\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Namespacing GraphQL Configuration by Directory Name\nDESCRIPTION: This snippet demonstrates how to namespace your GraphQL configuration by organizing your YAML files into directories named after the schema keywords (config, types, models, enums, bulkLoad).  Any `.yml` file in `app/_graphql/config/` will be implicitly added to `SilverStripe\\GraphQL\\Schema\\Schema.schemas.default.config`.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/02_configuring_your_schema.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/config/config.yml\n\n# my config here\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/types/types.yml\n\n# my types here\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/models/models.yml\n\n# my models here\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/enums/enums.yml\n\n# my enums here\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/bulkLoad/bulkLoad.yml\n\n# my bulk loader directives here\"\n```\n\n----------------------------------------\n\nTITLE: Managing Config and Injector in Silverstripe CMS Tests\nDESCRIPTION: Illustrates how to safely update Config settings in Silverstripe CMS tests, demonstrating the nesting feature to prevent leakage between tests.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/00_Unit_Testing.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Test;\n\nuse SilverStripe\\Core\\Config\\Config;\nuse SilverStripe\\Dev\\SapphireTest;\n\nclass MyTest extends SapphireTest\n{\n    public static function setUpBeforeClass(): void\n    {\n        parent::setUpBeforeClass();\n        //this will remain for the whole suite and be removed for any other tests\n        Config::inst()->update('ClassName', 'var_name', 'var_value');\n    }\n\n    public function testFeatureDoesAsExpected()\n    {\n        //this will be reset to 'var_value' at the end of this test function\n        Config::inst()->update('ClassName', 'var_name', 'new_var_value');\n    }\n\n    public function testAnotherFeatureDoesAsExpected()\n    {\n        // this will be 'var_value'\n        Config::inst()->get('ClassName', 'var_name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting File Visibility During Upload in Silverstripe CMS\nDESCRIPTION: PHP code example demonstrating how to set file visibility during upload by specifying the visibility parameter. This example shows setting a file to protected visibility when creating it from a local file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$object->MyFile->setFromLocalFile($tmpFile['Path'], $filename, null, null, [\n    'visibility' => AssetStore::VISIBILITY_PROTECTED,\n]);\n```\n\n----------------------------------------\n\nTITLE: Template Usage of Casted Properties\nDESCRIPTION: Demonstrates how to use casted properties in Silverstripe templates, showing both basic output and transformation using helper methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_8\n\nLANGUAGE: ss\nCODE:\n```\n<% with $player %>\n    <%-- prints out the name, e.g. Sam MinnÃ©e -%>\n    $Name\n    <%-- prints out the name in all caps, e.g. SAM MINNÃE -%>\n    $Name.UpperCase\n<% end_with %>\n```\n\n----------------------------------------\n\nTITLE: Basic Partial Caching Syntax in SilverStripe Templates\nDESCRIPTION: Demonstrates the basic syntax for implementing partial template caching in SilverStripe. It includes placeholders for the cache key, condition, and content.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $CacheKey if $CacheCondition %>\n  $CacheableContent\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Disabling Versioning in SilverStripe Schema Using YAML\nDESCRIPTION: This YAML configuration disables versioning for DataObjects in a GraphQL schema by setting specific plugins and operations to false in the modelConfig section.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/05_versioning.md#2025-04-21_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n# app/_graphql/config.yml\\nmodelConfig:\\n  DataObject:\\n    plugins:\\n      versioning: false\\n    operations:\\n      read:\\n        plugins:\\n          readVersion: false\\n      readOne:\\n        plugins:\\n          readVersion: false\\n      delete:\\n        plugins:\\n          unpublishOnDelete: false\n```\n\n----------------------------------------\n\nTITLE: Using URLSegment in Silverstripe CMS Templates\nDESCRIPTION: Shows how to use the URLSegment variable in Silverstripe CMS templates to access the current page's URL segment for creating CSS classes or IDs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_11\n\nLANGUAGE: ss\nCODE:\n```\n<%-- prints <div id=\"section-offices\"> --%>\n<div id=\"section-$URLSegment\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Named Variable Injection with inject() in Silverstripe i18n\nDESCRIPTION: Shows how to use inject() for named variable substitution in translations. The function replaces {varName} placeholders with values from a provided object, allowing variables to be used in any order.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// MYMODULE.MYENTITY contains \"Really delete {count} articles by {author}?\"\n// The myText variable contains: \"Really delete 42 articles by Douglas Adams?\"\nconst myText = ss.i18n.inject(\n  ss.i18n._t('MYMODULE.MYENTITY'),\n  { count: 42, author: 'Douglas Adams' }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring MyAdminExtension in YAML\nDESCRIPTION: Illustrates how to enable MyAdminExtension in the SilverStripe config.yml file. It demonstrates the attachment of the extension to a ModelAdmin class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extending_An_Existing_ModelAdmin.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nMyAdmin:\n  extensions:\n    - App\\Extension\\MyAdminExtension\n```\n\n----------------------------------------\n\nTITLE: Extending HomepageController for Specific Page Type\nDESCRIPTION: This snippet extends 'PageController' for a specific page type, 'HomePage', using PHP generics to provide precise type information to the IDE, simplifying development with 'PageController'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\n\n/**\n * @extends PageController<HomePage>\n */\nclass HomepageController extends PageController\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entwine Namespace\nDESCRIPTION: This snippet demonstrates how to define a namespace in Entwine using `jQuery.entwine()`. It creates a namespace called 'foo.bar' and defines a function 'baz' within the scope of that namespace for the 'div' selector. The `$` argument is passed to the callback function and represents the namespace object, not the global jQuery object.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$.entwine('foo.bar', ($) => {\n  $('div').entwine({\n    baz() {\n      // Some logic here\n    }\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Mounting React Application with Entwine and Apollo Provider\nDESCRIPTION: Sets up React application mounting using Entwine, with Apollo Client and Redux store integration, including proper component lifecycle management\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport React from 'react';\nimport { ApolloProvider } from '@apollo/client';\nimport Injector from 'lib/Injector';\nimport App from './App';\n\nInjector.ready(() => {\n  const { apolloClient, store } = window.ss;\n\n  $('#notes-app').entwine({\n    ReactRoot: null,\n\n    onmatch() {\n      const root = createRoot(this[0]);\n      this.setReactRoot(root);\n      root.render(\n        <ApolloProvider client={apolloClient} store={store}>\n          <App />\n        </ApolloProvider>\n      );\n    },\n\n    onunmatch() {\n      const root = this.getReactRoot();\n      if (root) {\n        root.unmount();\n        this.setReactRoot(null);\n      }\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Translating Text with _t() Function\nDESCRIPTION: Shows the basic usage of the _t() translation function in Silverstripe CMS, comparing non-internationalized and internationalized string outputs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// without i18n\necho 'This is a string';\n// with i18n\necho _t('Namespace.Entity', 'This is a string');\n```\n\n----------------------------------------\n\nTITLE: Children Loop in SilverStripe Templates\nDESCRIPTION: Demonstrates how to loop over child pages of the current page context in SilverStripe templates. Children are pages that sit under the current page in the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_13\n\nLANGUAGE: ss\nCODE:\n```\n<% loop $Children %>\n\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Checking for Extensions on an Object in PHP\nDESCRIPTION: Shows how to check if an object has a specific extension or iterate through all its extensions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$member = Security::getCurrentUser();\n\nif ($member->hasExtension(MyCustomMemberExtension::class)) {\n    // ...\n}\n\nforeach ($member->getExtensionInstances() as $extension) {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Explicitly Revoking File Access in Silverstripe Controller\nDESCRIPTION: PHP code showing how to explicitly revoke access to files in a PageController. This example grants access if the user has view permissions, otherwise revokes any historical grants.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace {\n    use SilverStripe\\CMS\\Controllers\\ContentController;\n\n    class PageController extends ContentController\n    {\n        public function init()\n        {\n            parent::init();\n\n            // Whitelist the protected files on this page for the current user\n            $file = $this->File();\n            if ($file->canView()) {\n                $file->grantFile();\n            } else {\n                // Will revoke any historical grants\n                $file->revokeFile();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Template Types for FormFields in Silverstripe CMS\nDESCRIPTION: This snippet shows how to set different template types for a FormField, including the main field template, field holder template, and small field holder template. Each template serves a different purpose in the rendering hierarchy.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/03_Form_Templates.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$field = TextField::create();\n\n// Sets the template for the <input> tag. i.e.'<input $AttributesHTML />'\n$field->setTemplate('CustomTextField');\n\n// Sets the template for the wrapper around the text field. i.e.\n//    '<div class=\"text\">'\n//\n// The actual FormField is rendered into the holder via the `$Field`\n// variable.\n//\n// setFieldHolder() is used in most `Form` instances and needs to output\n// labels, error messages and the like.\n$field->setFieldHolderTemplate('CustomTextField_Holder');\n\n// Sets the template for the wrapper around the text field.\n//\n// The difference here is the small field holder template is used when the\n// field is embedded within another field. For example, if the field is\n// part of a `FieldGroup` or `CompositeField` alongside other fields.\n$field->setSmallFieldHolderTemplate('CustomTextField_Holder_Small');\n```\n\n----------------------------------------\n\nTITLE: Changing ClassName Column to Varchar in Silverstripe YAML\nDESCRIPTION: Modifies the ClassName column type from enum to varchar to improve dev/build performance on large tables. This configuration increases database size but reduces build times by avoiding ALTER TABLE operations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/06_ORM.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\ORM\\DataObject:\n  fixed_fields:\n    ClassName: DBClassNameVarchar\n\nSilverStripe\\ORM\\FieldType\\DBPolymorphicForeignKey:\n  composite_db:\n    Class: \"DBClassNameVarchar('SilverStripe\\\\ORM\\\\DataObject', ['index' => false])\"\n```\n\n----------------------------------------\n\nTITLE: Making Individual FormFields Read-only in SilverStripe\nDESCRIPTION: Shows multiple approaches to make individual form fields read-only using performReadonlyTransformation(), setReadonly(), or accessing fields by name\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/05_Form_Transformations.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\TextField;\n\n$field = TextField::create(/* ... */);\n$field = $field->performReadonlyTransformation();\n\n$fields = FieldList::create(\n    $field\n);\n\n// Or,\n$field = TextField::create(/* ... */);\n$field->setReadonly(true);\n\n$fields = FieldList::create(\n    $field\n);\n\n// Or,\n$fields->dataFieldByName('myField')->setReadonly(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic and Parameterized Translations in SilverStripe Templates\nDESCRIPTION: Examples showing how to use the translation syntax in SilverStripe templates. Demonstrates both simple translation strings and complex translations with named placeholders for dynamic content insertion.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/08_Translations.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n<%t Foo.BAR 'Bar' %>\n\n<%t Member.WELCOME 'Welcome {name} to {site}' name=$Member.Name site=\"Foobar.com\" %>\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Menu Title for ModelAdmin in Silverstripe CMS\nDESCRIPTION: This snippet demonstrates how to set a custom title for a ModelAdmin menu entry using the $menu_title static property. If not defined, the CMS uses the controller class name without the 'Admin' suffix.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Menu.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse SilverStripe\\Admin\\ModelAdmin;\n\nclass ProductAdmin extends ModelAdmin\n{\n    // ...\n\n    private static $menu_title = 'My Custom Admin';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Shortcode Syntax Examples\nDESCRIPTION: Shows various valid syntaxes for shortcodes, including simple, parameterized, and content-wrapping versions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# The most simple shortcodes don't need any parameters or wrap any content\n[my_shortcode]\n\n# A closing slash is allowed for legacy reasons\n[my_shortcode /]\n\n# Parameters can be included like so:\n[my_shortcode,myparameter=\"value\"]\n\n# If you wrap any content in a shortcode, you need to have a closing tag\n[my_shortcode,myparameter=\"value\"]Enclosed Content[/my_shortcode]\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Placeholders for Integer IDs in SilverStripe\nDESCRIPTION: YAML configuration to force the use of SQL placeholders for integer ID filtering operations, even when dealing with primary and foreign keys where it's not strictly necessary for security.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/08_SQL_Placeholders.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\ORM\\DataList:\n  use_placeholders_for_integer_ids: true\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Cache Headers in Dev Mode for Silverstripe CMS\nDESCRIPTION: This YAML configuration snippet shows how to enable HTTP Cache Headers in development mode for testing purposes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/02_HTTP_Cache_Headers.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nName: 'app_httpconfig'\nAfter: '#httpconfig-dev'\nOnly:\n  environment: dev\n---\nSilverStripe\\Control\\Middleware\\HTTPCacheControlMiddleware:\n  defaultState: 'enabled'\n  defaultForcingLevel: 0\n```\n\n----------------------------------------\n\nTITLE: Accessing SecurityToken Value in PHP\nDESCRIPTION: Demonstrates how to retrieve the SecurityToken value from a Form instance in Silverstripe CMS. This token is used to protect against CSRF attacks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/04_Form_Security.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\Form;\n\n$form = Form::create(/* ... */);\necho $form->getSecurityToken()->getValue();\n\n// 'c443076989a7f24cf6b35fe1360be8683a753e2c'\n```\n\n----------------------------------------\n\nTITLE: Ordering Component Transforms with Dependencies in Module A\nDESCRIPTION: This code applies the CharacterCounter transformation with the constraint that it runs after the 'text-length-transform'. This ensures proper ordering when multiple transformations are applied to the same component.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// module-a/js/main.js\nimport Injector from 'lib/Injector';\nimport CharacterCounter from './components/CharacterCounter';\n\nInjector.transform(\n  'character-count-transform',\n  (update) => update.component('TextField', CharacterCounter),\n  { after: 'text-length-transform' }\n);\n```\n\n----------------------------------------\n\nTITLE: Converting Files Using the New High-level API in Templates\nDESCRIPTION: Example of using the new high-level file conversion API in Silverstripe templates to convert an image to webp format and apply the FitMax manipulation to the result.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.3.0-rc1.md#2025-04-21_snippet_1\n\nLANGUAGE: silverstripe\nCODE:\n```\n<%-- Convert an image to webp format and apply the FitMax manipulation to the result --%>\n$MyImage.Convert('webp').FitMax(100, 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring DataObject Read Operations in SilverStripe GraphQL\nDESCRIPTION: Basic configuration for DataObject read operations in SilverStripe's GraphQL implementation. This snippet disables the sort plugin for read operations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmodelConfig:\n  DataObject:\n    operations:\n      read:\n        plugins:\n          sort: false\n```\n\n----------------------------------------\n\nTITLE: Creating Extensible Notes Add Form Component\nDESCRIPTION: Develops a reusable React component for adding new notes with input and submission handling\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_41\n\nLANGUAGE: js\nCODE:\n```\n// my-module/client/src/components/AddForm.js\nimport React, { useRef } from 'react';\n\nconst AddForm = ({ onAdd }) => {\n  const inputRef = useRef(null);\n  return (\n    <div>\n      <label>New note</label>\n      <input type=\"text\" ref={inputRef}/>\n      <button onClick={(e) => {\n        e.preventDefault();\n        onAdd(inputRef && inputRef.value);\n      }}\n      >Add</button>\n    </div>\n  );\n};\n\nexport default AddForm;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom GridField Action Menu Item in PHP\nDESCRIPTION: Shows how to create a custom GridField action that appears in the action menu dropdown. Implements GridField_ActionMenuItem interface along with required methods for handling titles, extra data, and grouping. Includes fallback handling for when GridField_ActionMenu is not available.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/04_Create_a_GridField_ActionProvider.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\GridField;\n\nuse SilverStripe\\Forms\\GridField\\AbstractGridFieldComponent;\nuse SilverStripe\\Forms\\GridField\\GridField_ActionMenuItem;\nuse SilverStripe\\Forms\\GridField\\GridField_ActionProvider;\nuse SilverStripe\\Forms\\GridField\\GridField_ColumnProvider;\nuse SilverStripe\\Forms\\GridField\\GridField_FormAction;\n\nclass GridFieldCustomAction extends AbstractGridFieldComponent implements\n    GridField_ColumnProvider,\n    GridField_ActionProvider,\n    GridField_ActionMenuItem\n{\n    public function getTitle($gridField, $record, $columnName)\n    {\n        return 'Custom action';\n    }\n\n    public function getExtraData($gridField, $record, $columnName)\n    {\n        $field = $this->getCustomAction($gridField, $record);\n        if ($field) {\n            return array_merge($field->getAttributes(), [\n                'classNames' => 'font-icon-circle-star action-detail',\n            ]);\n        }\n\n        return [];\n    }\n\n    public function getGroup($gridField, $record, $columnName)\n    {\n        return GridField_ActionMenuItem::DEFAULT_GROUP;\n    }\n\n    public function getColumnContent()\n    {\n        return $this->getCustomAction()?->Field();\n    }\n\n    private function getCustomAction($gridField, $record)\n    {\n        if (!$record->hasMethod('canEdit') || !$record->canEdit()) {\n            return;\n        }\n\n        return GridField_FormAction::create(\n            $gridField,\n            'CustomAction' . $record->ID,\n            'Custom action',\n            'docustomaction',\n            ['RecordID' => $record->ID]\n        )->addExtraClass(\n            'action-menu--handled btn btn-outline-dark'\n        );\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Awesome Support for TinyMCE in PHP\nDESCRIPTION: PHP configuration to enable Font Awesome icon support in the TinyMCE editor after the removal of the Font Awesome plugin in cwp/agency-extensions. This ensures existing Font Awesome icons in content remain visible.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\n\nTinyMCEConfig::get('cwp')->setOption(\n    'extended_valid_elements',\n    $cwpEditor->getOption('extended_valid_elements')\n    . ',span[class|align|style|aria-hidden]'\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Localisable Field Labels in SilverStripe PHP\nDESCRIPTION: This code overrides the fieldLabels() method to make custom field labels localisable. It uses the _t() function to translate labels defined in the $field_labels static property.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    // ...\n\n    public function fieldLabels($includerelations = true)\n    {\n        $labels = parent::fieldLabels($includerelations);\n        $customLabels = static::config()->get('field_labels');\n\n        foreach ($customLabels as $name => $label) {\n            $labels[$name] = _t(__CLASS__ . '.' . $name, $label);\n        }\n\n        return $labels;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Loop in SilverStripe Templates\nDESCRIPTION: Shows how to create menu navigation using different levels. Menu(1) returns top-level menu, Menu(2) creates sub-menu, etc.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_16\n\nLANGUAGE: ss\nCODE:\n```\n<% loop $Menu(1) %>\n    ...\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller URL Segment in SilverStripe\nDESCRIPTION: Demonstrates how to declare the url_segment configuration property in a SilverStripe controller class. This defines the base URL segment for the controller's routing.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/01_Introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n\nclass TeamController extends Controller\n{\n    private static $url_segment = 'teams';\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Date and Time Formats Globally\nDESCRIPTION: Demonstrates how to set global date and time formats using the i18n configuration, utilizing ICU date formatting standards.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\i18n\\i18n;\n\ni18n::config()\n    ->set('date_format', 'dd.MM.yyyy')\n    ->set('time_format', 'HH:mm');\n```\n\n----------------------------------------\n\nTITLE: Setting Locale in PHP\nDESCRIPTION: Demonstrates how to set the locale for internationalization in Silverstripe CMS using the i18n class. Supports setting locales for different languages and regions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse SilverStripe\\i18n\\i18n;\n\n// Setting the locale to German (Germany)\ni18n::set_locale('de_DE');\n// Setting to Catalan (Andorra)\ni18n::set_locale('ca_AD');\n```\n\n----------------------------------------\n\nTITLE: Enabling Template Source Comments in SilverStripe YML Config\nDESCRIPTION: Configuration snippet to enable source file comments in SilverStripe's template engine during development. This setting helps developers identify which template is responsible for rendering specific HTML blocks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/03_Template_debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n---\nOnly:\n  environment: 'dev'\n---\nSilverStripe\\View\\SSViewer:\n  source_file_comments: true\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Button Components to GridField\nDESCRIPTION: Shows how to add custom buttons to specific areas of a GridField using fragments.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridFieldButtonRow;\nuse SilverStripe\\Forms\\GridField\\GridFieldPrintButton;\n\n// ...\n$config->addComponent(GridFieldButtonRow::create('after'));\n$config->addComponent(GridFieldPrintButton::create('buttons-after-right'));\n```\n\n----------------------------------------\n\nTITLE: Changing Preview Size in SilverStripe CMS using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to programmatically change the preview size in SilverStripe CMS using the entwine API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n$('.cms-preview').entwine('.ss.preview').changeSize('auto');\n```\n\n----------------------------------------\n\nTITLE: Defining a custom GraphQL query in YAML\nDESCRIPTION: This YAML snippet defines a custom query named 'readCountries' that retrieves a list of Country objects. It is essential for configuring the schema of the GraphQL API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/02_building_a_custom_query.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_graphql/schema.yml\nqueries:\n  readCountries: '[Country]'\n```\n\n----------------------------------------\n\nTITLE: Defining Fields with Relationships and Aggregates\nDESCRIPTION: This YAML configuration for a Blog page type demonstrates how to handle 'has_many' or 'many_many' relationships and defines aggregate fields such as 'Products.Count()' and 'Products.Avg(Price)'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/06_property_mapping.md#2025-04-21_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n\"# app/_graphql/models.yml\\nApp\\PageType\\Blog:\\n  fields:\\n    title: true\\n    categoryTitles:\\n      type: '[String]'\\n      property: 'Categories.Title'\\n    authorsFavourites:\\n      type: '[String]'\\n      property: 'Author.FavouritePosts.Title'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard URL Pattern in SilverStripe YAML\nDESCRIPTION: Demonstrates how to set up a wildcard URL pattern using the '$@' syntax in SilverStripe's YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'staff': 'App\\Control\\StaffController'\n```\n\n----------------------------------------\n\nTITLE: Displaying Title and Menu Title in Silverstripe CMS Template\nDESCRIPTION: Illustrates how to output the Title and MenuTitle variables in a Silverstripe CMS template. These variables typically represent the main title and a shorter version for menus.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_2\n\nLANGUAGE: ss\nCODE:\n```\n$Title\n$MenuTitle\n```\n\n----------------------------------------\n\nTITLE: Customizing ModelAdmin Result Filtering\nDESCRIPTION: Demonstrates how to customize result lists by excluding products without prices and implementing conditional filtering in the ModelAdmin\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse App\\Model\\Product;\nuse SilverStripe\\Admin\\ModelAdmin;\n\nclass MyAdmin extends ModelAdmin\n{\n    public function getList()\n    {\n        $list = parent::getList();\n\n        if ($this->modelClass == Product::class) {\n            $list = $list->exclude('Price', '0');\n        }\n\n        return $list;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NewsPage Class with Author Relationship\nDESCRIPTION: Defines a NewsPage class that extends the base Page class and includes a has_one relationship with Member for authorship.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Pages_List.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\Security\\Member;\n\nclass NewsPage extends Page\n{\n    private static $has_one = [\n        'Author' => Member::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Flushable implementation with filesystem cleanup in PHP\nDESCRIPTION: This snippet demonstrates how to implement the Flushable interface to delete temporary files from a directory within the assets folder when a flush request is triggered. It uses the glob() function to find all JPG files in the specified directory and then unlinks each file using the unlink() function. This example is useful for cleaning up cached images.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/16_Execution_Pipeline/01_Flushable.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Core\\Flushable;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyClass extends DataObject implements Flushable\n{\n    public static function flush()\n    {\n        foreach (glob(ASSETS_PATH . '/_tempfiles/*.jpg') as $file) {\n            unlink($file);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Class with Month Grouping\nDESCRIPTION: Extends Module class with method to get month created for grouping by date.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Grouping_DataObject_Sets.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Module extends DataObject\n{\n    /**\n     * Returns the month name this news item was posted in.\n     * @return string\n     */\n    public function getMonthCreated()\n    {\n        return date('F', strtotime($this->Created));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LoginSession Extension in Silverstripe\nDESCRIPTION: This YAML snippet adds the custom LoginSessionExtension to the Silverstripe project configuration. It ensures that the defined DataExtension is applied to LoginSession models. This is required to activate the permission logic defined in the extension.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/03_Managing_Sessions.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nSilverStripe\\SessionManager\\Models\\LoginSession:\n  extensions:\n    - My\\App\\LoginSessionExtension\n\n```\n\n----------------------------------------\n\nTITLE: File Storage Conflict Resolution in Silverstripe PHP\nDESCRIPTION: Explains handling file name conflicts using AssetStore constants. Dependencies include Silverstripe's File and AssetStore classes. Shows setting a conflict resolution policy when storing a file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Assets\\File;\nuse SilverStripe\\Assets\\Storage\\AssetStore;\n\n// Store a file named \"example-file.txt\".\n$fileRecord = File::create();\n$fileRecord->setFromString(\n    'This is some file content',\n    'example-file.txt',\n    // If a file with that name already exists, let the file store rename this one.\n    config: ['conflict' => AssetStore::CONFLICT_RENAME]\n);\n$fileRecord->write();\n```\n\n----------------------------------------\n\nTITLE: Defining jQuery Entwine Rules\nDESCRIPTION: This example of jQuery.entwine usage illustrates exposing custom methods and properties on the entwine API, supporting events like 'ajaxsubmit' and 'reloadeditform' in Silverstripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n/**\\n\\n * Available Custom Events:\\n * <ul>\\n * <li>ajaxsubmit</li>\\n * <li>validate</li>\\n * <li>reloadeditform</li>\\n * </ul>\\n *\\n * @class Main LeftAndMain interface with some control panel and an edit form.\\n * @name ss.LeftAndMain\\n */\\n$(\\'.LeftAndMain\\').entwine({\\n  /**\\n   * Reference to some property\\n   * @type Number\\n   */\\n  MyProperty: 123,\\n\\n  /**\\n   * Renders the provided data into an unordered list.\\n   *\\n   * @param {Object} data\\n   * @param {String} status\\n   * @return {String} HTML unordered list\\n   */\\n  publicMethod(data, status) {\\n    return \\'<ul> ... </ul>\\';\\n  },\\n\\n  /**\\n   * Won\\'t show in documentation, but still worth documenting.\\n   *\\n   * @return {String} Something else.\\n   */\\n  _privateMethod() {\\n    // ...\\n  }\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom HTMLVarchar Field with Shortcodes\nDESCRIPTION: YAML configuration to create a new field type that processes shortcodes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  HTMLVarcharWithShortcodes:\n    class: SilverStripe\\ORM\\FieldType\\DBHTMLVarchar\n    properties:\n      ProcessShortcodes: true\n```\n\n----------------------------------------\n\nTITLE: Defining NewsPageHolder Class in PHP\nDESCRIPTION: Creates a NewsPageHolder page type that can only contain NewsPage children using the allowed_children configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Pages_List.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse Page;\n\nclass NewsPageHolder extends Page\n{\n    private static $allowed_children = [\n        NewsPage::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Timeout in Silverstripe\nDESCRIPTION: The YAML configuration sets the default session lifetime to 3600 seconds (1 hour). This applies to non-persisted login sessions, ensuring proper session expiry after inactivity. It relies on Silverstripe's SessionManager model configuration capabilities.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/03_Managing_Sessions.md#2025-04-21_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nSilverStripe\\SessionManager\\Models\\LoginSession:\n  default_session_lifetime: 3600 # Default value: 1 hour in seconds\n\n```\n\n----------------------------------------\n\nTITLE: Applying Versioned Extension Without Staging in YAML\nDESCRIPTION: Shows how to add the Versioned extension to a DataObject model without staging, using YAML configuration. This tracks version history without separate draft and published stages.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Model\\MyStagedModel:\n  extensions:\n    - SilverStripe\\Versioned\\Versioned.versioned\n```\n\n----------------------------------------\n\nTITLE: Registering a LeftAndMainExtension in Silverstripe configuration\nDESCRIPTION: This YAML configuration snippet registers the `CustomActionsExtension` for the `LeftAndMain` class in Silverstripe. This is required to make the custom controller actions defined in the extension available to the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Admin\\LeftAndMain:\n  extensions:\n    - App\\Extension\\CustomActionsExtension\n\n```\n\n----------------------------------------\n\nTITLE: Handling PJAX Fragment Events with Entwine\nDESCRIPTION: This code snippet shows how to hook up a response handler for PJAX fragment loading using Entwine.  This allows for custom logic to be executed after a fragment has been successfully loaded.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$(someSelector).entwine({\n  'from .cms-container': {\n    onafterloadfragment(event, data) {\n      // The value of the status variable here is 'success'\n    }\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying Meta Tags in Silverstripe CMS\nDESCRIPTION: Shows how to override the MetaComponents method in a Page subclass to customize meta tag output in Silverstripe CMS, including setting a custom title and default description.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse Page;\n\nclass MyPage extends Page\n{\n    // ...\n\n    public function MetaComponents()\n    {\n        $tags = parent::MetaComponents();\n        // Override the content of the Title tag (needs to be html)\n        if ($this->MetaTitle) {\n            $tags['title']['content'] = $this->obj('MetaTitle')->forTemplate();\n        }\n        // Provide a default Meta Description\n        if (!$tags['description']['attributes']['content']) {\n            // provide raw text as attributes will be escaped later\n            $tags['description']['attributes']['content']\n                = $this->dbObject('Content')->LimitCharactersToClosestWord(300);\n        }\n        return $tags;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Type Formatter Implementation\nDESCRIPTION: PHP implementation of a custom type formatter for GraphQL types.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/01_adding_dataobjects_to_the_schema.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL;\n\nclass Formatter\n{\n    public static function formatType(string $className): string\n    {\n        $parts = explode('\\\\', $className);\n        if (count($parts) === 1) {\n            return $className;\n        }\n        $first = reset($parts);\n        $last = end($parts);\n\n        return $first . $last;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Note Mutation Template\nDESCRIPTION: Configures a GraphQL mutation template for creating new notes with Apollo configuration\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_42\n\nLANGUAGE: js\nCODE:\n```\n// my-module/client/src/state/createNote.js\nimport { graphqlTemplates } from 'lib/Injector';\n\nconst { CREATE } = graphqlTemplates;\nconst mutation = {\n  apolloConfig: {\n    props({ mutate }) {\n      return {\n        onAdd: (content) => {\n          mutate({\n            variables: {\n              input: {\n                content,\n              }\n            }\n          });\n        }\n      };\n    }\n  },\n  templateName: CREATE,\n  singularName: 'Note',\n  pagination: false,\n  fields: [\n    'content',\n    'id'\n  ],\n};\n\nexport default mutation;\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Configuration Structure in Silverstripe\nDESCRIPTION: Demonstrates the basic structure of a YAML configuration file with document separators, naming, and routing rules.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nName: adminroutes\nAfter:\n    - '#rootroutes'\n    - '#coreroutes'\n---\nSilverStripe\\Control\\Director:\n  rules:\n    'admin': 'SilverStripe\\Admin\\AdminRootController'\n---\n```\n\n----------------------------------------\n\nTITLE: Injectable Trait Implementation\nDESCRIPTION: Shows how to implement the Injectable trait in a class to enable Injector functionality and convenience methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse SilverStripe\\Core\\Injector\\Injectable;\n\nclass MyClass\n{\n    use Injectable;\n}\n```\n\n----------------------------------------\n\nTITLE: Element Type Class Reference Update in Elemental Module\nDESCRIPTION: Updates BaseElement::getType() to use static::class instead of __CLASS__ for better default type handling in the Elemental module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nstatic::class\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Multiple Nested Relations in PHP\nDESCRIPTION: Demonstrates how to eager load multiple nested relations with multiple arguments to the eagerLoad() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$teams = Team::get()->eagerLoad(\n    'Players.Games.Officials',\n    'Players.Games.Sponsors'\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Rendering for Preview\nDESCRIPTION: Example showing how to implement template rendering for preview display.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\CMSPreviewable;\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject implements CMSPreviewable\n{\n    // ...\n\n    public function forTemplate()\n    {\n        // If the template for this DataObject is not an \"Include\" template, use the appropriate type here\n        // e.g. \"Layout\".\n        return $this->renderWith(['type' => 'Includes', self::class]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Logged-in Member in Silverstripe CMS Template\nDESCRIPTION: Shows how to check if a member is currently logged in and display a personalized welcome message using the CurrentMember variable in a Silverstripe CMS template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_1\n\nLANGUAGE: ss\nCODE:\n```\n<% if $CurrentMember %>\n  Welcome back, $CurrentMember.FirstName\n<% end_if %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page-Controller Association in SilverStripe\nDESCRIPTION: Shows how to associate a page class with a specific controller using the controller_name configuration property.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/01_Introduction.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse App\\Control\\TeamPageController;\nuse Page;\n\nclass TeamPage extends Page\n{\n    private static $controller_name = TeamPageController::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Site Report in PHP\nDESCRIPTION: Implement a custom site report by extending the Report class. This example creates a report listing all pages on the site, demonstrating how to define report title, source records, and displayed columns.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_Site_Reports.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Report;\n\nuse Page;\nuse SilverStripe\\Reports\\Report;\n\nclass CustomSiteReport extends Report\n{\n    public function title()\n    {\n        return 'All Pages';\n    }\n\n    public function sourceRecords($params = null)\n    {\n        return Page::get()->sort('Title');\n    }\n\n    public function columns()\n    {\n        $fields = [\n            'Title' => 'Title',\n        ];\n\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelAdmin Export Fields\nDESCRIPTION: Demonstrates how to customize exported CSV columns by implementing the getExportFields method in a ModelAdmin subclass\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse SilverStripe\\Admin\\ModelAdmin;\n\nclass MyAdmin extends ModelAdmin\n{\n    public function getExportFields()\n    {\n        return [\n            'Name' => 'Name',\n            'ProductCode' => 'Product Code',\n            'Category.Title' => 'Category',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing Form Fields with Date and Time\nDESCRIPTION: Demonstrates how to set locale and specific date formats for form fields like DateField in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\DateField;\n\n$field = new DateField();\n// set Austrian/German locale, defaulting format to dd.MM.y\n$field->setLocale('de_AT');\n// set a more specific date format (single digit day/month)\n$field->setDateFormat('d.M.y');\n```\n\n----------------------------------------\n\nTITLE: Globally Disabling Lazy Loading in Silverstripe\nDESCRIPTION: This YAML configuration snippet demonstrates how to globally disable lazy loading for images in a Silverstripe project. By setting `lazy_loading_enabled` to `false` under `SilverStripe\\Assets\\Image`, the default lazy loading behavior is overridden, and all images will be eager loaded. This is useful for projects with custom lazy loading implementations or when lazy loading is not desired.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/02_Images.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\n\"SilverStripe\\Assets\\Image:\n  lazy_loading_enabled: false\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Resolver Strategy in PHP\nDESCRIPTION: This PHP snippet demonstrates the creation of a custom resolver strategy function. It defines a static method to determine the resolver method name using the class name, type name, and Field instance. This allows flexible strategy implementation for field resolution.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/03_resolver_discovery.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Resolver;\n\nuse SilverStripe\\GraphQL\\Schema\\Field\\Field;\n\nclass Strategy\n{\n    public static function getResolverMethod(string $className, ?string $typeName = null, ?Field $field = null): ?string\n    {\n        // strategy logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Silverstripe Project with Installer Recipe\nDESCRIPTION: Command to create a new Silverstripe CMS project using the installer recipe, which includes recipe-cms and adds a default theme for the front-end.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/05_Recipes.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project silverstripe/installer myproject ^5\n```\n\n----------------------------------------\n\nTITLE: Chainable Setters in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use chainable setters when adding fields and arguments to a GraphQL type or query. It shows how to invoke a callback function on the fly to update the field or argument configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/04_using_procedural_code.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"$countryType = Type::create('Country')\n    ->addField('name', 'String', function (Field $field) {\n        // Must be a callable. No inline closures allowed!\n        $field->setResolver([MyResolverClass::class, 'countryResolver'])\n            ->addArg('myArg', 'String!');\n    })\n    ->addField('code', 'String');\n$schema->addType($countryType);\n\n$countriesQuery = Query::create('readCountries', '[Country]!')\n    ->addArg('limit', 'Int', function (Argument $arg) {\n        $arg->setDefaultValue(20);\n    });\n$schema->addQuery($countriesQuery);\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to GitHub for Pull Request - Bash\nDESCRIPTION: This snippet demonstrates how to push your branch to your GitHub fork when preparing to create a pull request. It ensures your changes are backed up during development and ready for submission.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/01_Code.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd vendor/<org>/<module>\ngit push pr <your-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Template Method Arguments\nDESCRIPTION: Numeric, boolean, and null values passed to methods in templates now preserve their type, resolving the previous limitation where all values were cast to strings. This allows for more accurate type handling in template logic.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Configuring PJAX Response Negotiator in PHP\nDESCRIPTION: This code snippet shows how to configure a PJAX response negotiator in a Silverstripe CMS subclass. A new callback is registered to handle a specific view (`MyRecordInfo`).  This callback renders a template to provide the content of the PJAX fragment.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n```php\n// app/src/Admin/MyAdmin.php\nnamespace App\\Admin;\n\nuse SilverStripe\\Admin\\LeftAndMain;\n\nclass MyAdmin extends LeftAndMain\n{\n    private static $url_segment = 'myadmin';\n\n    public function getResponseNegotiator()\n    {\n        $negotiator = parent::getResponseNegotiator();\n        $controller = $this;\n        // Register a new callback\n        $negotiator->setCallback('MyRecordInfo', function () use (&$controller) {\n            return $controller->getMyRecordInfo();\n        });\n\n        return $negotiator;\n    }\n\n    public function getMyRecordInfo()\n    {\n        return $this->renderWith('MyRecordInfo');\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeDelete Hook for Player DataObject in PHP\nDESCRIPTION: This snippet shows how to use the onBeforeDelete hook to perform cleanup operations before deleting a Player record. It provides a placeholder for custom cleanup logic specific to the project.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/05_Extending_DataObjects.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    // ...\n\n    public function onBeforeDelete()\n    {\n        /* Do some cleanup here relevant to your project before deleting the actual database record */\n\n        // CAUTION: You are required to call parent::onBeforeDelete(), otherwise\n        // SilverStripe will not execute the request.\n        parent::onBeforeDelete();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flushable implementation with cache clearing in PHP\nDESCRIPTION: This snippet demonstrates how to implement the Flushable interface to clear a specific cache when a flush request is triggered. It uses the Injector to retrieve a CacheInterface instance and clears the cache using the clear() method. The code also shows how to retrieve and set values in the cache.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/16_Execution_Pipeline/01_Flushable.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse Psr\\SimpleCache\\CacheInterface;\nuse SilverStripe\\Core\\Flushable;\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyClass extends DataObject implements Flushable\n{\n    public static function flush()\n    {\n        Injector::inst()->get(CacheInterface::class . '.mycache')->clear();\n    }\n\n    public function getMyCachedContent()\n    {\n        $cache = Injector::inst()->get(CacheInterface::class . '.mycache')\n        $something = $cache->get('mykey');\n        if (!$something) {\n            $something = 'value to be cached';\n            $cache->set('mykey', $something);\n        }\n        return $something;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with Custom Icon in Silverstripe CMS\nDESCRIPTION: This HTML snippet shows how to create a button with a custom icon using Silverstripe CMS's extended jQuery UI button style. It demonstrates the use of the ss-ui-button class and data-icon attribute for icon specification.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"...\" class=\"ss-ui-button\" data-icon=\"add\" />Button text</a>\n```\n\n----------------------------------------\n\nTITLE: Adding a FormAction to a Tab in Silverstripe\nDESCRIPTION: This PHP snippet demonstrates how to add a `FormAction` to a specific tab within a `TabSet`.  It adds a 'Minor action' button to the 'ActionMenus.MoreOptions' tab, which is typically a drop-up menu for less frequently used actions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$fields->addFieldToTab('ActionMenus.MoreOptions', FormAction::create('minor', 'Minor action'));\n\n```\n\n----------------------------------------\n\nTITLE: Generating Controller Action Links in SilverStripe\nDESCRIPTION: Shows how to generate relative URLs for controller actions using the Link() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/01_Introduction.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$indexLink = $teamController::Link();\n$playersActionLink = $teamController::Link('players');\n```\n\n----------------------------------------\n\nTITLE: Expiring Cookies with Silverstripe in PHP\nDESCRIPTION: This snippet is used to expire a cookie using the Silverstripe Cookie class. It accepts the cookie name, path, and domain as parameters. Once called, it effectively removes the specified cookie by setting its expiration date to a past date.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/01_Cookies.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nCookie::force_expiry($name, $path = null, $domain = null);\n\n// Cookie::force_expiry('MyApplicationPreference')\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxy IPs with YAML in Silverstripe CMS\nDESCRIPTION: Alternative method to configure trusted proxy IP addresses using YAML configuration instead of environment variables.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_22\n\nLANGUAGE: yml\nCODE:\n```\n---\nafter: requestprocessors\n---\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Middleware\\TrustedProxyMiddleware:\n    properties:\n      TrustedProxyIPs:\n        - '127.0.0.1'\n        - '192.168.0.1'\n```\n\n----------------------------------------\n\nTITLE: Creating and Outputting an RSS Feed in PHP\nDESCRIPTION: This snippet demonstrates how to create an RSSFeed object and output it to the browser in a Silverstripe CMS controller.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/02_RSSFeed.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\RSS\\RSSFeed;\n\n$feed = RSSFeed::create(\n    $list,\n    $link,\n    $title,\n    $description,\n    $titleField,\n    $descriptionField,\n    $authorField,\n    $lastModifiedTime,\n    $etag\n);\n\n$feed->outputToBrowser();\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Caching Ignoring Session in Silverstripe CMS\nDESCRIPTION: This advanced example shows how to enable caching globally while ignoring session data. It forces caching and sets a max age of 60 seconds.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/02_HTTP_Cache_Headers.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace {\n\n    use SilverStripe\\CMS\\Controllers\\ContentController;\n    use SilverStripe\\Control\\Middleware\\HTTPCacheControlMiddleware;\n\n    class PageController extends ContentController\n    {\n        public function init()\n        {\n            HTTPCacheControlMiddleware::singleton()\n            // DANGER ZONE\n            ->enableCache($force = true)\n            // 1 minute\n            ->setMaxAge(60);\n\n            parent::init();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apache .htaccess Configuration for SilverStripe Assets\nDESCRIPTION: Apache rewrite rules to handle non-existent file requests by routing them to the main index.php handler while serving existing files directly.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n# Non existent files passed to requesthandler\nRewriteCond %{REQUEST_URI} ^(.*)$\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule .* ../index.php [QSA]\n```\n\n----------------------------------------\n\nTITLE: Adding Lazy Loadable Fields to SilverStripe Tabs in PHP\nDESCRIPTION: This PHP snippet demonstrates how to add a field with the `myfield` and `lazy-loadable` CSS classes to a specific tab in SilverStripe using the TextField class. It specifies how to associate the field with a tab so that when the tab is activated, any lazy loading logic tied to these classes is executed.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nuse SilverStripe\\Forms\\TextField;\n$fields->addFieldToTab('Root.AnyTab', TextField::create('MyField')->addExtraClass('myfield lazy-loadable'));\n```\n\n----------------------------------------\n\nTITLE: Adding Export and Print Components to GridField\nDESCRIPTION: Configuration for adding export and print functionality to a GridField by including the necessary button components.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/07_Using_GridField_With_Arbitrary_Data.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridFieldExportButton;\nuse SilverStripe\\Forms\\GridField\\GridFieldPrintButton;\n$gridField->getConfig()->addComponents([\n    GridFieldExportButton::create('buttons-before-left'),\n    GridFieldPrintButton::create('buttons-before-left'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Project Directory in Silverstripe CMS using YAML\nDESCRIPTION: This YAML configuration snippet shows how to reconfigure the default project folder from 'app' to 'myspecialapp' by setting the ModuleManifest project value. This allows for arbitrary directory names as long as they don't conflict with existing modules or core directories.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/04_Directory_Structure.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# myspecialapp/_config/config.yml\n---\nName: myspecialapp\n---\nSilverStripe\\Core\\Manifest\\ModuleManifest:\n    project: 'myspecialapp'\n```\n\n----------------------------------------\n\nTITLE: Running a Database Rebuild via CLI in PHP\nDESCRIPTION: This snippet demonstrates how to execute a database rebuild command from the command line using Silverstripe's CLI script. It requires access to the Silverstripe framework and the appropriate PHP environment.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/17_CLI/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd your-project-root/\nphp vendor/silverstripe/framework/cli-script.php dev/build\n```\n\n----------------------------------------\n\nTITLE: Overriding getCMSFields in Silverstripe CMS Member Subclass\nDESCRIPTION: Demonstrates how to customize the CMS fields for a Member subclass by overriding the getCMSFields() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/00_Member.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Security;\n\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\Security\\Member;\n\nclass MyMember extends Member\n{\n    // ...\n\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n        $fields->insertBefore('HTMLEmail', TextField::create('Age'));\n        $fields->removeByName('JobTitle');\n        $fields->removeByName('Organisation');\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission in Silverstripe PHP\nDESCRIPTION: This code demonstrates how to handle form submission in a Silverstripe controller. It shows how to access submitted data, interact with form fields, and set form messages.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Forms\\EmailField;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\TextField;\n\nclass MyFormPageController extends PageController\n{\n    private static $allowed_actions = [\n        'getMyForm',\n    ];\n\n    private static $url_handlers = [\n        'MyForm' => 'getMyForm',\n    ];\n\n    public function getMyForm()\n    {\n        $fields = FieldList::create(\n            TextField::create('Name'),\n            EmailField::create('Email')\n        );\n\n        $actions = FieldList::create(\n            FormAction::create('doSubmitForm', 'Submit')\n        );\n\n        $form = Form::create($controller, 'MyForm', $fields, $actions);\n\n        return $form\n    }\n\n    public function doSubmitForm($data, $form)\n    {\n        // Submitted data is available as a map.\n        echo $data['Name'];\n        echo $data['Email'];\n\n        // You can also fetch the value from the field.\n        echo $form->Fields()->dataFieldByName('Email')->Value();\n\n        // Using the Form instance you can get / set status such as error messages.\n        $form->sessionMessage('Successful!', 'good');\n\n        // After dealing with the data you can redirect the user back.\n        return $this->redirectBack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Middleware Service in YAML\nDESCRIPTION: Demonstrates how to configure a custom middleware service with specific properties using YAML configuration. This allows for more detailed configuration of the middleware.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/05_Middlewares.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/middlewares.yml\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Director:\n    properties:\n      Middlewares:\n        CustomMiddleware: '%$ConfiguredMiddleware'\n  ConfiguredMiddleware:\n    class: 'App\\Middleware\\CustomMiddleware'\n    properties:\n      Secret: \"DIFFERENT-ONE\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Caching with Unless Statement\nDESCRIPTION: Template caching that only caches content when a condition evaluates to false using unless.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_14\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $Key unless $Cond %>\n    Cached only if $Cond == false\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Count Query Optimization in Silverstripe\nDESCRIPTION: Shows how Silverstripe ORM optimizes count operations into efficient SELECT COUNT queries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filter([\n    'FirstName' => 'Sam',\n])->sort('Surname');\n\n// This will create an single SELECT COUNT query\n// SELECT COUNT(*) FROM Player WHERE FirstName = 'Sam'\necho $players->Count();\n```\n\n----------------------------------------\n\nTITLE: Defining Game Class with Relationships in PHP\nDESCRIPTION: Defines the Game class extending DataObject with has_many relationships to Officials and Sponsors.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Game extends DataObject\n{\n    private static $has_many = [\n        'Officials' => Official::class,\n        'Sponsors' => Sponsor::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom GridField FormAction State Storage in SilverStripe\nDESCRIPTION: YAML configuration example that changes the default GridField form action state storage from session-based to attribute-based using the Injector system. This overrides the default StateStore with AttributeStore class which stores form action state in the DOM rather than in the session.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_12\n\nLANGUAGE: yml\nCODE:\n```\nName: mysitegridfieldconfig\nAfter: gridfieldconfig\n---\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Forms\\GridField\\FormAction\\StateStore:\n    class: SilverStripe\\Forms\\GridField\\FormAction\\AttributeStore\n```\n\n----------------------------------------\n\nTITLE: Combining Modifiers in PHP\nDESCRIPTION: Demonstrates how to combine multiple modifiers like :not and :nocase in a single filter.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/06_SearchFilters.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filter([\n    'FirstName:StartsWith:nocase:not' => 'S',\n]);\n$players = Player::get()->filter([\n    'FirstName:StartsWith:not:nocase' => 'S',\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Controller with Specific Version Stage\nDESCRIPTION: In this controller, SilverStripe's Versioned::set_stage function is used to force a specific stage upon initialization, ensuring content matches required versioning state instantly on load. Requires importing SilverStripe's Versioned and Controller classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Control/MyController.php\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n\nclass MyController extends Controller\n{\n    // ...\n\n    public function init()\n    {\n        parent::init();\n        Versioned::set_stage(Versioned::DRAFT);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookies with Backend in PHP\nDESCRIPTION: This snippet shows how to determine if a cookie was sent by the process or received from the browser using Silverstripe's Cookie_Backend. By checking the flag in Cookie::get, developers can retrieve either the set value or the value from the incoming request.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/01_Cookies.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nCookie::set('CookieName', 'CookieVal');\n\n//gets the cookie as we set it\nCookie::get('CookieName');\n\n//will return the cookie as it was when it was sent in the request\nCookie::get('CookieName', false);\n```\n\n----------------------------------------\n\nTITLE: Calling Namespaced Function\nDESCRIPTION: This snippet calls the `bar` function, which is defined in the 'foo' namespace, on a div element. Calling `$('div').bar()` would result in an error, because bar is only accessible through the namespace.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$('div').entwine('foo').bar();\n```\n```\n\n----------------------------------------\n\nTITLE: Transforming Notes List Item Component in JavaScript\nDESCRIPTION: Creates a React component that transforms the notes list item to include priority rendering\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_40\n\nLANGUAGE: js\nCODE:\n```\n// app/client/src/transformNotesListItem.js\nimport React from 'react';\n\nconst transformNotesListItem = () => ({ note: { content, priority } }) => (\n  <li className={`priority-${priority}`}>{content} [PRIORITY: {['Low', 'Medium', 'High'][priority]}]</li>\n);\n\nexport default transformNotesListItem;\n```\n\n----------------------------------------\n\nTITLE: Creating Searchable DataObject with Fulltext Index\nDESCRIPTION: Defines a DataObject with fulltext search capabilities by setting up the database schema, including fulltext indexes on specific fields and MyISAM engine configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/12_Search/02_FulltextSearch.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\Connect\\MySQLSchemaManager;\nuse SilverStripe\\ORM\\DataObject;\n\nclass SearchableDataObject extends DataObject\n{\n    private static $db = [\n        'Title' => 'Varchar(255)',\n        'Content' => 'HTMLText',\n    ];\n\n    private static $indexes = [\n        'SearchFields' => [\n            'type' => 'fulltext',\n            'columns' => ['Title', 'Content'],\n        ],\n    ];\n\n    private static $create_table_options = [\n        MySQLSchemaManager::ID => 'ENGINE=MyISAM',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Dist Table in Javascript i18n\nDESCRIPTION: This snippet shows the structure of a distribution table (e.g., `en.js`) for i18n in JavaScript.  It defines a fallback dictionary for the default locale, adding translations to the `ss.i18n` object using `ss.i18n.addDictionary`.  It also includes an error check to ensure the `ss.i18n` object is defined.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nif (typeof (ss) === 'undefined' || typeof (ss.i18n) === 'undefined') {\n  /* eslint-disable-next-line no-console */\n  console.error('Class ss.i18n not defined');\n} else {\n  ss.i18n.addDictionary('en', {\n    'MYMODULE.MYENTITY': 'Really delete these articles?'\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Long-Running PHP CLI Process\nDESCRIPTION: This PHP class utilizes the Silverstripe Controller to create a long-running process that manages tasks via the CLI. The implementation includes memory usage conditions and sleep intervals to optimize performance and avoid memory leaks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/17_CLI/index.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\CLI;\n\nuse SilverStripe\\Control\\Controller;\n\nclass MyProcess extends Controller\n{\n    private static $url_segment = 'my_process';\n\n    private static $allowed_actions = [\n        'index',\n    ];\n\n    public function index()\n    {\n        // This isn't allowed to be accessed via the browser\n        if (!Director::is_cli()) {\n            $this->httpError(401);\n        }\n\n        set_time_limit(0);\n\n        while (memory_get_usage() < 32 * 1024 * 1024) {\n            if ($this->somethingToDo()) {\n                $this->doSomething();\n                sleep(1);\n            } else {\n                sleep(300);\n            }\n        }\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Acting as Another User in Silverstripe CMS\nDESCRIPTION: Shows how to temporarily assume the identity of another user, such as an administrator, for specific tasks using Member::actAs().\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/00_Member.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Task;\n\nuse App\\Model\\DataRecord;\nuse BadMethodCallException;\nuse SilverStripe\\Control\\Director;\nuse SilverStripe\\Dev\\BuildTask;\nuse SilverStripe\\Security\\Member;\nuse SilverStripe\\Security\\Security;\n\nclass CleanRecordsTask extends BuildTask\n{\n    public function run($request)\n    {\n        if (!Director::is_cli()) {\n            throw new BadMethodCallException('This task only runs on CLI');\n        }\n        $admin = Security::findAnAdministrator();\n        Member::actAs($admin, function () {\n            DataRecord::get()->filter('Dirty', true)->removeAll();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Context-Based Transformations\nDESCRIPTION: Demonstrates how to apply context-based transformations using `Injector.transform`.  It shows how to target specific components based on their context within the application.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform('my-transform', (updater) => {\n  // Applies to all text fields in AssetAdmin\n  updater.component('TextField.AssetAdmin', MyTextField);\n\n  // Applies to all text fields in AssetAdmin editform\n  updater.component('TextField.AssetAdmin.FileEditForm', MyTextField);\n\n  // Applies to any textfield named \"Title\" in AssetAdmin\n  updater.component('TextField.AssetAdmin.*.Title', MyTextField);\n\n  // Applies to any textfield named \"Title\" in any admin\n  updater.component('TextField.*.*.Title', MyTextField);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Team Class with has_many Relationship in SilverStripe\nDESCRIPTION: Example showing how to define a Team class with a has_many relationship to Players.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Team extends DataObject\n{\n    private static $db = [\n        'Title' => 'Varchar',\n    ];\n\n    private static $has_many = [\n        'Players' => Player::class,\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelQueryPlugin for Adding 'within' Parameter in PHP\nDESCRIPTION: This snippet defines a ModelQueryPlugin that adds a 'within' parameter to read queries for geocodable DataObjects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/03_writing_a_complex_plugin.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Plugin;\n\n// ...\n\nclass GeocodableQueryPlugin implements ModelQueryPlugin\n{\n    public function getIdentifier(): string\n    {\n        return 'geocodableQuery';\n    }\n\n    public function apply(ModelQuery $query, Schema $schema, array $config = []): void\n    {\n        $class = $query->getModel()->getSourceClass();\n        // Only apply to geocodable objects\n        if (!ViewableData::has_extension($class, GeocodableExtension::class)) {\n            return;\n        }\n\n        $query->addArg('within', 'SearchRadiusInput');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Relational Has One Configuration\nDESCRIPTION: Shows how to configure a multi-relational has_one relation in a SilverStripe DataObject, enabling polymorphic relationships with multiple has_many relations\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\DataObjectSchema;\n\nclass MyExample extends DataObject\n{\n    private static array $has_one = [\n        'MyMultiRelationalRelation' => [\n            'class' => DataObject::class,\n            DataObjectSchema::HAS_ONE_MULTI_RELATIONAL => true,\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Remember Me Cookies in Silverstripe CMS\nDESCRIPTION: Configures the CookieAuthenticationHandler to use secure cookies for the remember-me functionality. This configuration excludes the dev environment.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_27\n\nLANGUAGE: yml\nCODE:\n```\n---\nName: secure-alc\nExcept:\n  environment: dev\n---\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Security\\MemberAuthenticator\\CookieAuthenticationHandler:\n    properties:\n      TokenCookieSecure: true\n```\n\n----------------------------------------\n\nTITLE: Reversing List Order in SilverStripe Templates\nDESCRIPTION: Illustrates how to reverse the order of items in a list using the Reverse method in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_8\n\nLANGUAGE: ss\nCODE:\n```\n<ul>\n    <% loop $Children.Reverse %>\n        <li>$Title</li>\n    <% end_loop %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating a DataExtension in Silverstripe\nDESCRIPTION: This PHP snippet creates a DataExtension to add an 'IsBookmarked' boolean field to the SiteTree object in Silverstripe.  It adds a checkbox to the CMS interface for each page.  Requires enabling the extension in the configuration file and running a dev/build.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Forms\\CheckboxField;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\ORM\\DataExtension;\n\nclass BookmarkedPageExtension extends DataExtension\n{\n    private static $db = [\n        'IsBookmarked' => 'Boolean',\n    ];\n\n    public function updateCMSFields(FieldList $fields)\n    {\n        $fields->addFieldToTab(\n            'Root.Main',\n            new CheckboxField('IsBookmarked', 'Show in CMS bookmarks?')\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying a CORS Configuration to All GraphQL Endpoints (YAML)\nDESCRIPTION: Applies a comprehensive CORS configuration to all GraphQL endpoints in SilverStripe, setting origin, headers, methods, credentials, and max-age.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/02_cors.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\GraphQL\\Controller:\\n  cors:\\n    Enabled: true\\n    Allow-Origin: 'https://silverstripe.org'\\n    Allow-Headers: 'Authorization, Content-Type'\\n    Allow-Methods:  'GET, POST, OPTIONS'\\n    Allow-Credentials: 'true'\\n    Max-Age: 600 # 600 seconds = 10 minutes.\n```\n\n----------------------------------------\n\nTITLE: Registering the Generic File Converter in YML\nDESCRIPTION: This YML snippet shows how to register the `MyFileConverter` with the `FileConverterManager`.  This makes the generic file converter available via the `Convert()` method on any file record.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_16\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Assets\\Conversion\\FileConverterManager:\n  converters:\n    - 'App\\Conversion\\MyFileConverter'\n```\n\n----------------------------------------\n\nTITLE: Creating ArrayList with ArrayData for GridField\nDESCRIPTION: Creates a list of ArrayData objects to be used in a GridField, with each record containing an ID and FieldName.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/07_Using_GridField_With_Arbitrary_Data.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\ArrayList;\nuse SilverStripe\\View\\ArrayData;\n\n$list = ArrayList::create([\n    ArrayData::create([\n        'ID' => 1,\n        'FieldName' => 'This is an item',\n    ]),\n    ArrayData::create([\n        'ID' => 2,\n        'FieldName' => 'This is a different item',\n    ]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Escaped Values in SilverStripe Template\nDESCRIPTION: Shows how to render escaped and unescaped values within the SilverStripe template engine.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_8\n\nLANGUAGE: SS\nCODE:\n```\n <ul>\n    <li>$MyEscapedValue</li> <%-- output: &lt;b&gt;not bold&lt;b&gt; --%>\n    <li>$MyUnescapedValue</li> <%-- output: <b>bold</b> --%>\n</ul>\n\n```\n\n----------------------------------------\n\nTITLE: Invoking Sake Command Wrapper in BASH\nDESCRIPTION: This command illustrates how to install and invoke Sake, a command line wrapper for CLI operations in Silverstripe. It requires a UNIX-like environment and the presence of the php-cli package.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/17_CLI/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd your-project-root/\nsudo ./vendor/bin/sake installsake\n```\n\n----------------------------------------\n\nTITLE: Using Unless Condition in SilverStripe Cached Blocks\nDESCRIPTION: Demonstrates the use of the 'unless' keyword as an alternative to 'if not' in SilverStripe cached blocks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_8\n\nLANGUAGE: ss\nCODE:\n```\n<% cached unless $Key %>\n  \"unless $Cond\" === \"if not $Cond\"\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-Many Relationships with Extra Fields\nDESCRIPTION: Complete example showing how to implement many-many relationships with extra fields in DataObjects and GridField configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Team extends DataObject\n{\n    private static $db = [\n        'Name' => 'Varchar',\n    ];\n\n    private static $belongs_many_many = [\n        'Players' => Player::class,\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\GridField\\GridField;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig_RelationEditor;\nuse SilverStripe\\Forms\\GridField\\GridFieldDataColumns;\nuse SilverStripe\\Forms\\GridField\\GridFieldDetailForm;\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $db = [\n        'Name' => 'Varchar',\n    ];\n\n    private static $many_many = [\n        'Teams' => Team::class,\n    ];\n\n    private static $many_many_extraFields = [\n        'Teams' => [\n            'Position' => 'Varchar',\n        ],\n    ];\n\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n\n        if ($this->ID) {\n            $singletonTeam = singleton(Team::class);\n            $teamEditFields = $singletonTeam->getCMSFields();\n            $teamEditFields->addFieldToTab(\n                'Root.Main',\n                // The \"ManyMany[<extradata-name>]\" convention is necessary here, because this will be passed\n                // into the GridFieldDetailForm\n                TextField::create('ManyMany[Position]', 'Current Position')\n            );\n\n            // For summary fields, the \"ManyMany[<extradata-name>]\" convention won't work (and isn't necessary),\n            // since this isn't passed into the GridFieldDetailForm\n            $teamSummaryFields = array_merge($singletonTeam->summaryFields(), ['Position' => 'Current Position']);\n\n            $config = GridFieldConfig_RelationEditor::create();\n            $config->getComponentByType(GridFieldDetailForm::class)->setFields($teamEditFields);\n            $config->getComponentByType(GridFieldDataColumns::class)->setDisplayFields($teamSummaryFields);\n\n            $gridField = GridField::create('Teams', 'Teams', $this->Teams(), $config);\n            $fields->findOrMakeTab('Root.Teams')->replaceField('Teams', $gridField);\n        }\n\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Message Implementation\nDESCRIPTION: Demonstrates how to set a custom validation message for a TextField using setCustomValidationMessage method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\TextField;\n\n$field = TextField::create(/* .. */);\n$field->setCustomValidationMessage('Whoops, looks like you have missed me!');\n```\n\n----------------------------------------\n\nTITLE: Configuring Autologin Token Regeneration\nDESCRIPTION: YAML configuration to disable token regeneration during session renewal in SilverStripe's remember me functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.3.0-beta1.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Security\\RememberLoginHash:\n  replace_token_during_session_renewal: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic CMSPreviewable Interface\nDESCRIPTION: Example showing implementation of CMSPreviewable interface with preview link generation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\CMSPreviewable;\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject implements CMSPreviewable\n{\n    private static $show_unversioned_preview_link = true;\n    // ...\n\n    public function PreviewLink($action = null)\n    {\n        $link = null;\n        $this->extend('updatePreviewLink', $link, $action);\n        return $link;\n    }\n\n    public function CMSEditLink()\n    {\n        return null;\n    }\n\n    public function getMimeType()\n    {\n        return 'text/html';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Preview State in SilverStripe CMS using JavaScript\nDESCRIPTION: This JavaScript snippet shows how to retrieve the current preview state name in SilverStripe CMS using the entwine API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n$('.cms-preview').entwine('.ss.preview').getCurrentStateName();\n```\n\n----------------------------------------\n\nTITLE: Configuring Support for Additional Image Types in Silverstripe\nDESCRIPTION: This YAML snippet configures the Silverstripe CMS project to recognize and properly handle additional image formats like AVIF, including setting the allowed extensions, app categories, and the class for file extension.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/06_Allowed_file_types.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\n---\nName: myproject-assetsfiletypes\nAfter: '#assetsfiletypes'\n---\nSilverStripe\\Assets\\File:\n  file_types:\n    avif: 'AVIF Image'\n  allowed_extensions:\n    - avif\n  app_categories:\n    image:\n      - avif\n    image/supported:\n      - avif\n  class_for_file_extension:\n    avif: SilverStripe\\Assets\\Image\n\nSilverStripe\\Assets\\Storage\\DBFile:\n  supported_images:\n    - image/avif\n\n---\nName: myproject-mimevalidator\nAfter: '#mimevalidator'\nOnly:\n  moduleexists: silverstripe/mimevalidator\n---\nSilverStripe\\MimeValidator\\MimeUploadValidator:\n  MimeTypes:\n    avif:\n      - image/avif\n```\n\n----------------------------------------\n\nTITLE: Defining Player Class with Relationships in PHP\nDESCRIPTION: Illustrates the Player class extending DataObject with has_one and many_many relationships to Team and Game respectively.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $has_one = [\n        'Team' => Team::class,\n    ];\n\n    private static $many_many = [\n        'Games' => Game::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Enable save buttons on content changes (JavaScript)\nDESCRIPTION: This JavaScript code uses Entwine to enable the save and publish buttons in the CMS when changes are detected in the content. It listens for the `changed` class to be added to the form (by jQuery.changetracker) and then sets the `showingAlternate` option of the save and publish buttons to `true` using jQuery UI.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/CMS_Alternating_Button.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Enable save buttons upon detecting changes to content.\n * \"changed\" class is added by jQuery.changetracker.\n */\n$('.cms-edit-form .changed').entwine({\n  // This will execute when the class is added to the element.\n  onmatch(e) {\n    const form = this.closest('.cms-edit-form');\n    form.find('#Form_EditForm_action_save').button({ showingAlternate: true });\n    form.find('#Form_EditForm_action_publish').button({ showingAlternate: true });\n    this._super(e);\n  },\n  // Entwine requires us to define this, even if we don't use it.\n  onunmatch(e) {\n    this._super(e);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Session Values (PHP)\nDESCRIPTION: These code snippets demonstrate how to remove values from the session.  `clear()` removes a specific value, while `clearAll()` removes all values, including those used internally by Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/02_Sessions.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$session->clear('MyValue');\n```\n\nLANGUAGE: php\nCODE:\n```\n$session->clearAll();\n```\n\n----------------------------------------\n\nTITLE: Setting Description for a Form Field using SilverStripe PHP\nDESCRIPTION: This code snippet demonstrates how to add a descriptive tooltip to a text field in the CMS using the `setDescription()` method. The method is designed to accept unescaped HTML content, enabling rich text descriptions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/CMS_Formfield_Help_Text.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\TextField;\n\nTextField::create('MyText', 'My Text Label')\n    ->setDescription('More <strong>detailed</strong> help');\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller Methods in SilverStripe Templates\nDESCRIPTION: Demonstrates how to access controller methods within a SilverStripe template file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/01_Introduction.md#2025-04-21_snippet_8\n\nLANGUAGE: ss\nCODE:\n```\n<%-- TeamPage.ss -%>\n<p>{$getExample}</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Property Mapping in GraphQL\nDESCRIPTION: This YAML snippet shows how to map a property 'content' from the DataObject to a GraphQL field 'pageContent'. The explicit mapping requires a defined type.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/06_property_mapping.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"# app/_graphql/models.yml\\nPage:\\n  fields:\\n    pageContent:\\n      type: String\\n      property: Content\"\n```\n\n----------------------------------------\n\nTITLE: Callback Function for File Conversion in PHP\nDESCRIPTION: This PHP snippet presents a callback function to be used with `manipulateExtension()`. It defines parameters such as `$store`, `$filename`, `$hash`, and `$variant` to handle file storage and conversion. The original file record is accessed to use its `Image_Backend` for conversion and storage.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction (AssetStore $store, string $filename, string $hash, string $variant) use ($from) {\n    $backend = $from->getImageBackend();\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Plugins in SilverStripe GraphQL Schema\nDESCRIPTION: This YAML configuration shows how to register custom plugins to the PluginRegistry via the Injector in SilverStripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/01_overview.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\GraphQL\\Schema\\Registry\\PluginRegistry:\n    constructor:\n      - 'App\\GraphQL\\Plugin\\MyPlugin'\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Placement in Silverstripe CMS\nDESCRIPTION: These PHP code snippets show how to configure the placement of JavaScript files in the HTML document using the Requirements class in Silverstripe CMS. It demonstrates forcing JavaScript to the bottom of the page and placing it in the <head> tag.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\View\\Requirements;\n\nRequirements::set_force_js_to_bottom(true);\n\nRequirements::set_write_js_to_body(false);\n```\n\n----------------------------------------\n\nTITLE: Adding Sudo Mode Components in Silverstripe Admin\nDESCRIPTION: Implements sudo mode related components and controllers in the Silverstripe admin module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd HOC to provide sudo mode to child components\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd new circular loading react component\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdd sudo mode controller\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Image Settings\nDESCRIPTION: Configuration settings for image extensions, resampling, and quality control in SilverStripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/02_Images.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Assets\\Image:\n  extensions:\n    - App\\Extension\\ImageExtension\nSilverStripe\\Assets\\Storage\\DBFile:\n  extensions:\n    - App\\Extension\\ImageExtension\n```\n\nLANGUAGE: yml\nCODE:\n```\n---\nName: resamplefiles\n---\nSilverStripe\\Assets\\File:\n  force_resample: true\nSilverStripe\\Assets\\Storage\\DBFile:\n  force_resample: true\n```\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Assets\\Image_Backend:\n    properties:\n      Quality: 90\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Cache Key in SilverStripe YAML\nDESCRIPTION: Shows how to override the global cache key using YAML configuration. This example adds the current locale to the default key.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/view.yml\nSilverStripe\\View\\SSViewer:\n  global_key: '$CurrentReadingMode, $CurrentUser.ID, $CurrentLocale'\n```\n\n----------------------------------------\n\nTITLE: Configuring File Archiving in YAML\nDESCRIPTION: This YAML configuration enables the retention of archived assets in Silverstripe CMS. When set to true, the system will keep file contents for replaced or removed files, which is useful for version control but may increase storage usage.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/04_File_Storage.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Assets\\File:\n  keep_archived_assets: true\n```\n\n----------------------------------------\n\nTITLE: Overriding Getter and Setter Methods\nDESCRIPTION: Example of overriding default getter and setter methods in a Product class to handle currency conversion between cents and dollars.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\n/**\n * @property float $Cost\n */\nclass Product extends DataObject\n{\n    private static $db = [\n        'Title' => 'Varchar(255)',\n        //cost in pennies/cents\n        'Cost' => 'Int',\n    ];\n\n    public function getCost()\n    {\n        return $this->getField('Cost') / 100;\n    }\n\n    public function setCost($value)\n    {\n        return $this->setField('Cost', $value * 100);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FootballTeam DataObject Model Definition in PHP\nDESCRIPTION: PHP class definition for the FootballTeam DataObject, which stores team information and establishes a has_many relationship with Player objects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/How_Tos/custom_csvbulkloader.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/FootballTeam.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass FootballTeam extends DataObject\n{\n    private static $db = [\n      'Title' => 'Text',\n    ];\n\n    private static $has_many = [\n      'Players' => Player::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required Argument to GraphQL Query - YAML\nDESCRIPTION: This YAML snippet defines a GraphQL query called `readCountries` that expects a required integer argument `limit`. The argument is non-nullable, enforcing that it must be provided in calls to this query.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/04_adding_arguments.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/schema.yml\nqueries:\n  'readCountries(limit: Int!)': '[Country]'\n```\n\n----------------------------------------\n\nTITLE: Customizing ModelAdmin GridField Configuration\nDESCRIPTION: Shows how to modify GridField configuration by adding components like GridFieldFilterHeader for specific or all managed models\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse App\\Model\\Product;\nuse App\\Model\\Category;\nuse SilverStripe\\Admin\\ModelAdmin;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig;\nuse SilverStripe\\Forms\\GridField\\GridFieldFilterHeader;\n\nclass MyAdmin extends ModelAdmin\n{\n    private static $managed_models = [\n        Product::class,\n        Category::class,\n    ];\n\n    private static $url_segment = 'my-admin';\n\n    protected function getGridFieldConfig(): GridFieldConfig\n    {\n        $config = parent::getGridFieldConfig();\n\n        if ($this->modelClass === Product::class) {\n            $config->addComponent(GridFieldFilterHeader::create());\n        }\n\n        return $config;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating URLs with Symfony Validator in PHP\nDESCRIPTION: This example checks if a URL is valid using the ConstraintValidator::validate method with the Url constraint from symfony/validator. It requires SilverStripe\\Core\\Validation\\ConstraintValidator and Symfony\\Component\\Validator\\Constraints\\Url as dependencies. The main purpose is to verify the validity of URLs, and the expected output is a boolean indicating validity.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.2.0-beta1.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse SilverStripe\\Core\\Validation\\ConstraintValidator;\nuse Symfony\\Component\\Validator\\Constraints\\Url;\n\n$isValid = ConstraintValidator::validate($url, new Url())->isValid();\n```\n\n----------------------------------------\n\nTITLE: Adding BackURL Parameter to Links in SilverStripe\nDESCRIPTION: Shows how to add a BackURL parameter to existing links using the addBackURLParam helper method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/04_Redirection.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$linkWithBackURL = $this->addBackURLParam($this->Link('someAction'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Resolver Afterware for Proximity Filtering in PHP\nDESCRIPTION: This snippet adds resolver afterware to the GeocodableQueryPlugin for filtering results by proximity.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/03_writing_a_complex_plugin.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Plugin;\n\nuse App\\Geo\\Proximity;\n// ...\n\nclass GeocodableQueryPlugin implements ModelQueryPlugin, SchemaUpdater\n{\n    // ...\n\n    public function apply(ModelQuery $query, Schema $schema, array $config = []): void\n    {\n        $class = $query->getModel()->getSourceClass();\n        // Only apply to geocodable objects\n        if (!ViewableData::has_extension($class, GeocodableExtension::class)) {\n            return;\n        }\n\n        $query->addArg('within', 'SearchRadiusInput');\n        $query->addResolverAfterware([static::class, 'applyRadius']);\n    }\n\n    public static function applyRadius($result, array $args): array\n    {\n        $results = [];\n        $proximity = new Proximity($args['unit'], $args['lat'], $args['lon']);\n        foreach ($result as $record) {\n            if ($proximity->isWithin($args['proximity'], $record->Lat, $record->Lon)) {\n                $results[] = $record;\n            }\n        }\n\n        return $results;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Values (PHP)\nDESCRIPTION: These code snippets illustrate how to store values in the session using the `set()` method. It shows examples of storing simple values, arrays, and serialized objects. Note that serialized objects need to be unserialized when retrieved.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/02_Sessions.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$session->set('MyValue', 6);\n```\n\nLANGUAGE: php\nCODE:\n```\n// saves an array\n$session->set('MyArrayOfValues', ['1','2','3']);\n\n// saves an object (you'll have to unserialize it back)\n$object = new Object();\n$session->set('MyObject', serialize($object));\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tabset Template in Silverstripe CMS\nDESCRIPTION: This Silverstripe template snippet demonstrates how to create a custom tabset template without tab navigation. It's used for rendering tabsets in the CMS, allowing for flexible tab content loading and layout.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div $AttributesHTML>\n    <% loop Tabs %>\n        <% if Tabs %>\n            $FieldHolder\n        <% else %>\n            <div $AttributesHTML>\n                <% loop Fields %>\n                    $FieldHolder\n                <% end_loop %>\n            </div>\n        <% end_if %>\n    <% end_loop %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Performing SQL INSERT in SilverStripe ORM\nDESCRIPTION: Shows how to use SQLInsert to perform an INSERT operation on the SiteTree table. It demonstrates adding multiple rows, adjusting assignments, and retrieving column names.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/08_SQL_Select.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\CMS\\Model\\SiteTree;\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\Queries\\SQLInsert;\n\n$schema = DataObject::getSchema();\n$siteTreeTable = DB::get_conn()->escapeIdentifier($schema->baseDataTable(SiteTree::class));\n\n$insert = SQLInsert::create($siteTreeTable);\n\n// Add multiple rows in a single call. Note that column names do not need to be symmetric\n$insert->addRows([\n    ['\"Title\"' => 'Home', '\"Content\"' => '<p>This is our home page</p>'],\n    ['\"Title\"' => 'About Us', '\"ClassName\"' => 'AboutPage'],\n]);\n\n// Adjust an assignment on the last row\n$insert->assign('\"Content\"', '<p>This is about us</p>');\n\n// Add another row\n$insert->addRow(['\"Title\"' => 'Contact Us']);\n\n// $columns will be ['\"Title\"', '\"Content\"', '\"ClassName\"'];\n$columns = $insert->getColumns();\n\n$insert->execute();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Sort Query Example\nDESCRIPTION: Demonstrates a GraphQL query using the sort plugin with sorting on multiple fields\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readPages (\n    sort: { created: DESC }\n  ) {\n    nodes {\n      title\n      created\n      hasManyFilesField (sort: { parentFolderID: DESC, title: ASC }) {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure FormAction with alternate state (PHP)\nDESCRIPTION: This code snippet demonstrates how to create and configure a FormAction button with an alternate state in PHP. It sets the default icon, and then defines the alternate icon and text that will be displayed when the button is in the alternate state. The button is added to the MajorActions field in the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/CMS_Alternating_Button.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    // ...\n\n    public function getCMSActions()\n    {\n        $fields = parent::getCMSActions();\n\n        $fields->fieldByName('MajorActions')->push(\n            $cleanupAction = FormAction::create('cleanup', 'Cleaned')\n                // Set up an icon for the neutral state that will use the default text.\n                ->setAttribute('data-icon', 'accept')\n                // Initialise the alternate constructive state.\n                ->setAttribute('data-icon-alternate', 'addpage')\n                ->setAttribute('data-text-alternate', 'Clean-up now')\n        );\n\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure custom JS for CMS (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to add a custom JavaScript file (`app/javascript/CMSMain.CustomActionsExtension.js`) to the CMS.  It uses the `extra_requirements_javascript` setting in the `SilverStripe\\Admin\\LeftAndMain` configuration to include the file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/CMS_Alternating_Button.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Admin\\LeftAndMain:\n  extra_requirements_javascript:\n    - app/javascript/CMSMain.CustomActionsExtension.js\n```\n\n----------------------------------------\n\nTITLE: Versioning a Through Object for many_many Relations\nDESCRIPTION: Shows how to apply versioning to a 'through' DataObject used in a many_many relationship, enabling version tracking for the relationship data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass ProductCategory extends DataObject\n{\n    private static $db = [\n        'SortOrder' => 'Int',\n    ];\n\n    private static $has_one = [\n        'Product' => Product::class,\n        'Category' => Category::class,\n    ];\n\n    private static $extensions = [\n        Versioned::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies with PHP Class Properties\nDESCRIPTION: Example of declaring dependencies in a Silverstripe controller class using the $dependencies array property. Shows how to configure both service and primitive dependencies.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse ThirdParty\\PermissionService;\n\nclass MyController extends Controller\n{\n    /**\n     * Properties matching the array keys in $dependencies will be automatically\n     * set by the injector on object creation.\n     */\n    // phpcs:ignore SlevomatCodingStandard.Classes.ForbiddenPublicProperty.ForbiddenPublicProperty\n    public $textProperty;\n\n    /**\n     * Private properties must have an associated setter method for the injector\n     * to call. In this case setDefaultText()\n     */\n    private $defaultText = '';\n\n    /**\n     * Services using the '%$' prefix will use the appropriate singleton, anything\n     * else will be treated as a primitive.\n     */\n    private static $dependencies = [\n        'permissions' => '%$' . PermissionService::class,\n        'defaultText' => 'This will just be assigned as a string',\n    ];\n\n    public function setDefaultText(string $text)\n    {\n        $this->defaultText = $text;\n    }\n\n    public function getDefaultText(): string\n    {\n        return $this->defaultText;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Preview State in SilverStripe CMS using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to programmatically change the preview state in SilverStripe CMS using the entwine API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n$('.cms-preview').entwine('.ss.preview').changeState('StageLink');\n```\n\n----------------------------------------\n\nTITLE: Configuring Model-Specific Settings\nDESCRIPTION: This snippet demonstrates how to configure settings for specific models within the GraphQL schema using the `modelConfig` section.  This example configures the `DataObject` model to enable inheritance and disable specific plugins and operations for the read operation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/02_configuring_your_schema.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/config.yml\nmodelConfig:\n  DataObject:\n    plugins:\n      inheritance: true\n    operations:\n      read:\n        plugins:\n          readVersion: false\n          paginateList: false\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Search Results with Silverstripe\nDESCRIPTION: This Server-Side template renders a list of results using a loop in Silverstripe template syntax. It allows integration with other elements and uses data provided by the PHP backend.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_7\n\nLANGUAGE: ss\nCODE:\n```\n<ul>\\n<% loop $Results %>\\n  <li id=\\\"Result-$ID\\\">$Title</li>\\n<% end_loop %>\\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Images in Summary Fields in SilverStripe PHP\nDESCRIPTION: This code shows how to include image fields in summary fields for a DataObject. It demonstrates using the CMSThumbnail method for displaying images in summaries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    private static $db = [\n        'Name' => 'Text',\n    ];\n\n    private static $has_one = [\n        'HeroImage' => 'Image',\n    ];\n\n    private static $summary_fields = [\n        'Name' => 'Name',\n        'HeroImage.CMSThumbnail' => 'Hero Image',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Sorted Version Lists with GraphQL\nDESCRIPTION: This GraphQL query fetches a list of version objects for pages, sorted by version number. It is useful for accessing historical version data using the sort parameter.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/05_versioning.md#2025-04-21_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery readPages {\\n  nodes {\\n    title\\n    versions(sort: { version: DESC }) {\\n      author {\\n        firstname\\n      }\\n      published\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Specific Page Access in SilverStripe Templates\nDESCRIPTION: Demonstrates how to access a specific page by its URL segment using the Page() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_17\n\nLANGUAGE: ss\nCODE:\n```\n<% with $Page('my-page') %>\n    $Title\n<% end_with %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Member Class in Silverstripe CMS\nDESCRIPTION: YAML configuration to ensure all new members are created using a custom Member subclass.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/00_Member.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Security\\Member:\n    class: App\\Security\\MyMemberClass\n```\n\n----------------------------------------\n\nTITLE: Overriding Form Actions for a Specific GridField Instance\nDESCRIPTION: This PHP snippet demonstrates how to override form action visibility for a specific GridField instance by passing parameters to the GridFieldConfig_RecordEditor constructor.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Menu.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$grid = GridField::create(\n    'pages',\n    'All Pages',\n    SiteTree::get(),\n    GridFieldConfig_RecordEditor::create(null, false, false)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a new Tab with a FormAction in Silverstripe\nDESCRIPTION: This PHP snippet demonstrates how to create a new tab within a `TabSet` and add a `FormAction` to it. It adds a 'Minor action in a new drop-up' button to a new tab named 'ActionMenus.MyDropUp'. Empty tabs are automatically removed.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$fields->addFieldToTab('ActionMenus.MyDropUp', FormAction::create('minor', 'Minor action in a new drop-up'));\n\n```\n\n----------------------------------------\n\nTITLE: Adding quotes to YAML configuration in queuedjobs module\nDESCRIPTION: Adds missing quotes around a value in a YAML configuration file to ensure proper parsing.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_35\n\nLANGUAGE: YAML\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  Symbiote\\QueuedJobs\\Services\\QueuedJobService:\n    properties:\n      queueRunner: '%$QueuedJobRunner'\n```\n\n----------------------------------------\n\nTITLE: Accessing PHP Values in JavaScript using Silverstripe Config\nDESCRIPTION: Shows how to access the values passed from PHP to JavaScript using the Config module in Silverstripe. This snippet demonstrates retrieving the endpoint URL from the client configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/07_CMS_JSON_APIs.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Config from 'lib/Config';\n\nconst endpointUrl = Config.getSection('App\\\\Controller\\\\MySomethingController').myForm.myEndpointUrl;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GridField Instance in PHP\nDESCRIPTION: Demonstrates how to create a basic GridField instance using the create method. This snippet shows the minimal setup required for a GridField, including the name, title, and data list.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridField;\n// ...\n\n$field = GridField::create($name, $title, $list);\n```\n\n----------------------------------------\n\nTITLE: Form Display in SilverStripe Templates\nDESCRIPTION: Shows how to display forms in templates using the Form variable. Usually placed below Content.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_22\n\nLANGUAGE: ss\nCODE:\n```\n$Form\n```\n\n----------------------------------------\n\nTITLE: Custom Email Template Implementation\nDESCRIPTION: Example of using custom templates for HTML emails with template variables.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/10_Email/index.md#2025-04-21_snippet_5\n\nLANGUAGE: ss\nCODE:\n```\n<%-- app/templates/Email/MyCustomEmail.ss --%>\n<h1>Hi $Member.FirstName</h1>\n<p>You can go to $Link.</p>\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Email\\Email;\nuse SilverStripe\\Security\\Security;\n\n$email = Email::create()\n    ->setHTMLTemplate('Email\\\\MyCustomEmail')\n    ->setData([\n        'Member' => Security::getCurrentUser(),\n        'Link' => $link,\n    ])\n    ->from($from)\n    ->to($to)\n    ->subject($subject);\n\n$email->send();\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated Class with Suppressed Notice in PHP\nDESCRIPTION: Example of how to properly deprecate a class using docblock annotations and Deprecation::notice with suppressed warnings when no replacement functionality exists.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/20_Deprecations/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\n/**\n * @deprecated 4.12.0 Will be removed without equivalent functionality\n */\nclass MyDeprecatedClass extends AnotherClass\n{\n    public function __construct()\n    {\n        Deprecation::withSuppressedNotice(function () {\n            Deprecation::notice(\n                '4.12.0',\n                'Will be removed without equivalent functionality',\n                Deprecation::SCOPE_CLASS\n            );\n        });\n        parent::__construct();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Key Caching in SilverStripe\nDESCRIPTION: Caching implementation using a single key variable for distinct cache entries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_11\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $Key %>\n    Cached separately for every distinct $Key value\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Setting Max Age for HTTP Cache in Silverstripe CMS\nDESCRIPTION: This snippet demonstrates how to set the max age for HTTP caching using the HTTPCacheControlMiddleware class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/02_HTTP_Cache_Headers.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Middleware\\HTTPCacheControlMiddleware;\nHTTPCacheControlMiddleware::singleton()\n    ->setMaxAge(60)\n```\n\n----------------------------------------\n\nTITLE: Creating a TextLengthChecker Higher-Order Component in React\nDESCRIPTION: This component wraps a TextField to add validation when text exceeds a specified length limit. It shows a red warning message when the input text is longer than the provided limit prop.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/components/TextLengthChecker.js\nimport React from 'react';\n// ...\n\nconst TextLengthCheker = (TextField) => (props) => {\n  const { limit, value } = props;\n  const invalid = limit !== undefined && value.length > limit;\n\n  return (\n    <div>\n      <TextField {...props} />\n      {invalid &&\n        <span style={{ color: 'red' }}>\n          {`Text is too long! Must be ${limit} characters`}\n        </span>\n      }\n    </div>\n  );\n};\n\nexport default TextLengthChecker;\n```\n\n----------------------------------------\n\nTITLE: Implementing scaffoldFormFieldForHasOne for Custom Form Fields in DataObject Relations\nDESCRIPTION: Example of implementing the scaffoldFormFieldForHasOne method on a child class to define custom form fields for has_one relations. This lets modules pre-define the form field to use for their custom models, reducing boilerplate code in getCMSFields() implementations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.3.0.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyParent extends DataObject\n{\n    // ...\n    private static array $has_one = [\n        'MyChild' => MyChild::class,\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\FormField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyChild extends DataObject\n{\n    // ...\n\n    public function scaffoldFormFieldForHasOne(\n        string $fieldName,\n        ?string $fieldTitle,\n        string $relationName,\n        DataObject $ownerRecord\n    ): FormField {\n        return /* instantiate some FormField here */;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Change Tracking with CSS Properties\nDESCRIPTION: Implementation of form change tracking using CSS classes to prevent submission of unchanged data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$('form :input').bind('change', function (event) {\n  $(this.form).addClass('isChanged');\n});\n\n$('form').bind('submit', function (event) {\n  if ($(this).hasClass('isChanged')) {\n    event.preventDefault();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Changing General Search Field Name Globally in YAML\nDESCRIPTION: Configure the general search field name globally using YAML configuration. This snippet sets the field name to 'my_general_field_name' for all DataObjects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\ORM\\DataObject:\n  general_search_field_name: 'my_general_field_name'\n```\n\n----------------------------------------\n\nTITLE: Checking Section in Silverstripe CMS Templates\nDESCRIPTION: Demonstrates how to use the InSection method in Silverstripe CMS templates to check if the current page is within a specific section of the site.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_10\n\nLANGUAGE: ss\nCODE:\n```\n<% if $InSection('about-us') %>\n    <p>You are viewing the about us section</p>\n<% end_if %>\n```\n\n----------------------------------------\n\nTITLE: Storing Converted File in PHP\nDESCRIPTION: This PHP snippet demonstrates storing the converted file using the `writeToStore()` method of the `$backend` object, which is an instance of `Image_Backend` (typically `InterventionBackend`). It utilizes the `CONFLICT_USE_EXISTING` conflict resolution strategy to avoid regenerating existing variant files.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$config = ['conflict' => AssetStore::CONFLICT_USE_EXISTING];\n$tuple = $backend->writeToStore($store, $filename, $hash, $variant, $config);\n```\n\n----------------------------------------\n\nTITLE: Customising Page Icons with Custom Images in Silverstripe CMS\nDESCRIPTION: PHP code demonstrating how to set a custom image icon for a page type in Silverstripe CMS. This uses the $icon property to specify a path to an SVG image file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Tree.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse Page;\n\nclass HomePage extends Page\n{\n    private static $icon = 'app/images/homepage-icon.svg';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Module Priority in i18n\nDESCRIPTION: This snippet demonstrates how to customize the module loading priority for i18n strings.  It shows how to use a config fragment to insert custom module ordering either before or after the default `basei18n` and `defaulti18n` blocks. The `i18n.module_priority` config option is a list of module names, where `other_modules` serves as a placeholder.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\n---\nName: customi18n\nBefore: '#defaulti18n'\n---\nSilverStripe\\i18n\\i18n:\n  module_priority:\n    - module1\n    - module2\n    - module3\n```\n\n----------------------------------------\n\nTITLE: Initializing Entwine with a jQuery Selector\nDESCRIPTION: Attaches entwine logic to DOM nodes by calling the `entwine` function on a jQuery selector object and passing an object that details properties, methods, or event handlers to apply to matching DOM nodes. Definitions are not bound at declaration time but applied later.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n$('div').entwine({\n  // properties, methods, and event handlers go here\n});\n```\n\n----------------------------------------\n\nTITLE: Making Form Field Description Togglable using SilverStripe PHP\nDESCRIPTION: This code snippet shows how to make a form field's description togglable, allowing for a cleaner UI by hiding extra information until requested. It adds an extra class to the text field that provides the togglable functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/CMS_Formfield_Help_Text.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nTextField::create('MyText', 'My Text Label')\n    ->setDescription('More <strong>detailed</strong> help')\n    ->addExtraClass('cms-description-toggle');\n```\n\n----------------------------------------\n\nTITLE: Advanced DBField Formatting with TimeDiff in Silverstripe\nDESCRIPTION: Example of a more advanced DBField formatting helper, showing how to calculate and display a human-readable time difference between a date and the current time.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\FieldType\\DBField;\n// returns \"30 years ago\"\nDBField::create_field('Date', '1982-01-01')->TimeDiff();\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-relational has_one in Silverstripe CMS PHP\nDESCRIPTION: Shows how to define a multi-relational has_one relationship in Silverstripe CMS. This creates additional columns to manage multiple has_many relations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\DataObjectSchema;\n\nclass Fan extends DataObject\n{\n    // ...\n\n    private static array $has_one = [\n        'FanOf' => [\n            // The class here is the class for the has_one - it must be polymorphic.\n            'class' => DataObject::class,\n            // Setting this to true is what defines this has_one relation as multi-relational\n            DataObjectSchema::HAS_ONE_MULTI_RELATIONAL => true,\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Config Module Method Signature Changes\nDESCRIPTION: Changes to return types and parameter types in the Config module collections and interfaces. Methods affected include merge(), remove(), set() with stricter type definitions replacing dynamic types.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\ninterface MutableConfigCollectionInterface {\n    public function merge(string $class, string $name, array $value): static;\n    public function remove(string $class, string|null $name): static;\n    public function set(string $class, string|null $name, mixed $value, array $metadata): static;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a UsedOnTable Extension in PHP for Silverstripe CMS\nDESCRIPTION: This PHP code demonstrates how to create an extension for the UsedOnTable class to customize file usage behavior. It includes methods to exclude specific DataObject classes, modify individual DataObjects, and link ancestor DataObjects to provide context in the 'Used on' table.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/07_File_Usage.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace My\\App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\nuse SilverStripe\\ORM\\DataObject;\n\nclass UsedOnTableExtension extends Extension\n{\n    // This extension hook will prevent type(s) of DataObjects from showing on the Used on tab in the Files section\n    // This will prevent a MyDataObjectToExclude::get() call from being executed\n    public function updateUsageExcludedClasses(array &$excludedClasses)\n    {\n        $excludedClasses[] = MyDataObjectToExclude::class;\n    }\n\n    // This extension hook will alter a DataObject after it was fetched via MyDataObject::get()\n    // This allows a greater level of flexibility to exclude or modify individual DataObjects\n    // It is less efficient to use this extension hook that `updateUsageExcludedClasses()` above\n    public function updateUsageDataObject(?DataObject &$dataObject)\n    {\n        if (!($dataObject instanceof MyDataObject)) {\n            return;\n        }\n        // Exclude DataObject from showing\n        if ($dataObject->Title == 'lorem ipsum') {\n            $dataObject = null;\n        }\n        // Show the DataObject's Parent() instead\n        $dataObject = $dataObject->Parent();\n    }\n\n    // This extension hook is used to to show ancestor DataObjects in the used on table alongside the\n    // DataObject the File is used on.  This is useful for two reasons:\n    // - It gives context more context, for instance if File is used on a Content block, it can be used to show the\n    //   Page that Content Block is used on\n    // - The DataObject may not have a `CMSEditLink()` implementation, though the ancestor DataObject does.\n    //   The CMS frontend will fallback to using the Ancestor `CMSEditLink()` for when a user clicks on a row on\n    //   the used on table\n    public function updateUsageAncestorDataObjects(array &$ancestorDataObjects, DataObject $dataObject)\n    {\n        if (!($dataObject instanceof MyDataObjectThatIWantToLink)) {\n            return;\n        }\n        $parentObjectIWantToIgnore = $dataObject->MyParentComponent();\n        $grandParentObjectIWantToLink = $parentObjectIWantToIgnore->MyParentComponent();\n        // Add $grandParentObjectIWantToLink to ancestors, but not $parentObjectIWantToIgnore\n        $ancestorDataObjects[] = $grandParentIWantToLink;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Service Property Inheritance Example\nDESCRIPTION: Shows a basic service configuration where properties are inherited between services without explicit class specifications.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_13\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  App\\Connector:\n    properties:\n      AsString: true\n  App\\ServiceConnector: '%$Connector'\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Request Handlers in SilverStripe PHP Controllers\nDESCRIPTION: Demonstrates how to implement nested request handlers using multiple controller classes in SilverStripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Control/RequestHandlerOne.php\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass RequestHandlerOne extends Controller\n{\n    // ...\n    private static $allowed_actions = [\n        'two',\n    ];\n\n    public function two(HTTPRequest $request)\n    {\n        return RequestHandlerTwo::create();\n    }\n}\n\n// app/src/Control/RequestHandlerTwo.php\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\nuse SilverStripe\\Control\\HTTPResponse;\n\nclass RequestHandlerTwo extends Controller\n{\n    // ...\n    private static $allowed_actions = [\n        'hello',\n    ];\n\n    public function hello(HTTPRequest $request)\n    {\n        return HTTPResponse::create()->setBody('hello');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Version Information with GraphQL\nDESCRIPTION: This GraphQL query retrieves the title and version information of pages, including author details and publication status. It operates using the versioning fields applied by the VersionedDataObject class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/05_versioning.md#2025-04-21_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery readPages {\\n  nodes {\\n    title\\n    version {\\n      author {\\n        firstname\\n      }\\n      published\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Admin URL in PHP\nDESCRIPTION: PHP code examples showing how to retrieve the configured admin URL using AdminRootController.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Admin\\AdminRootController;\n\nAdminRootController::admin_url()\n// This method can take an argument:\nAdminRootController::admin_url('more/path/here')\n```\n\n----------------------------------------\n\nTITLE: Specifying HTMLEditorConfig in Silverstripe CMS (PHP)\nDESCRIPTION: This code shows how to specify different HTMLEditorConfig instances for multiple HTMLEditorFields in a single DataObject. It demonstrates using the default 'CMS' config and a custom 'myConfig' for different fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\HTMLEditor\\HTMLEditorField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    private static $db = [\n        'Content' => 'HTMLText',\n        'OtherContent' => 'HTMLText',\n    ];\n\n    public function getCMSFields()\n    {\n        return FieldList::create([\n            HTMLEditorField::create('Content'),\n            HTMLEditorField::create('OtherContent', 'Other content', $this->OtherContent, 'myConfig'),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Requests with Custom Templates in Silverstripe CMS\nDESCRIPTION: Shows how to use renderWith() to provide an AJAX version of a template in a Silverstripe controller.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/04_Rendering_Templates.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Control\\Director;\n\nclass MyPageController extends PageController\n{\n    private static $allowed_actions = [\n        'iwantmyajax',\n    ];\n\n    public function iwantmyajax()\n    {\n        if (Director::is_ajax()) {\n            return $this->renderWith('AjaxTemplate');\n        } else {\n            return $this->httpError(404);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed GraphQL Query Using Inline Fragments\nDESCRIPTION: Corrected query using inline fragments to properly access fields from both the interface and specific implementations in the union.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readProducts {\n    nodes {\n      ... on ProductInterface {\n        price\n      }\n      ... on DigitalProduct {\n        downloadUrl\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Labels in SilverStripe PHP\nDESCRIPTION: This snippet illustrates how to use the $field_labels static property to customize labels for fields in a DataObject. It affects the output of fieldLabels() and fieldLabel() methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    private static $db = [\n        'Name' => 'Text',\n    ];\n\n    private static $has_one = [\n        'HeroImage' => Image::class,\n    ];\n\n    private static $summary_fields = [\n        'Name',\n        'HeroImage.CMSThumbnail',\n    ];\n\n    private static $field_labels = [\n        'Name' => 'Name',\n        'HeroImage.CMSThumbnail' => 'Hero',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSV Data Structure Example\nDESCRIPTION: Example CSV data structure for importing Member records with basic fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/00_CSV_Import.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFirstName,LastName,Email\nDonald,Duck,donald@disney.com\nDaisy,Duck,daisy@disney.com\n```\n\n----------------------------------------\n\nTITLE: Resetting and Setting Array Configuration in YAML for Silverstripe CMS\nDESCRIPTION: Demonstrates how to override an indexed array configuration by first setting it to null and then providing a new array.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nName: arrayreset\n---\nClass\\With\\Array\\Config:\n  an_array: null\n---\nName: array\nAfter: arrayreset\n---\nClass\\With\\Array\\Config:\n  an_array: ['value_a', 'value_b']\n```\n\n----------------------------------------\n\nTITLE: Registering GraphQL Middleware via YAML Configuration\nDESCRIPTION: YAML configuration that registers the custom middleware with the GraphQL query handler. This adds the middleware to the execution pipeline, allowing it to intercept and process GraphQL queries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/06_extending/adding_middleware.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\GraphQL\\QueryHandler\\QueryHandlerInterface.default:\n    class: SilverStripe\\GraphQL\\QueryHandler\\QueryHandler\n    properties:\n      Middlewares:\n        logging: '%$App\\GraphQL\\Middleware\\LoggingMiddleware'\n```\n\n----------------------------------------\n\nTITLE: Creating LeftAndMainExtension in Silverstripe\nDESCRIPTION: This PHP snippet creates a LeftAndMainExtension to add a method for retrieving bookmarked pages. It queries the database for pages where the 'IsBookmarked' field is true. Requires enabling the extension in the configuration file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Admin\\LeftAndMainExtension;\n\nclass BookmarkedPagesLeftAndMainExtension extends LeftAndMainExtension\n{\n    public function getBookmarkedPages()\n    {\n        return Page::get()->filter('IsBookmarked', 1);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Default Server-side Validation Message Example\nDESCRIPTION: Shows the default validation error message format for required fields in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/01_Validation.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n'$Name' is required\n```\n\n----------------------------------------\n\nTITLE: Implementing CMSEditLink for ModelAdmin\nDESCRIPTION: Example showing how to implement CMSEditLink for DataObjects managed by ModelAdmin.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse App\\Admin\\MyAdmin;\nuse SilverStripe\\ORM\\CMSPreviewable;\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject implements CMSPreviewable\n{\n    // ...\n\n    public function CMSEditLink()\n    {\n        $admin = MyAdmin::singleton();\n        return $admin->getCMSEditLinkForManagedDataObject($this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flattening Blog Model Definition in YAML\nDESCRIPTION: This snippet illustrates an alternative, flattened representation of the `Blog` model and its related types in YAML for SilverStripe. It includes `Author` and `Categories` as simple boolean fields, separating the definition of `Member` and `BlogCategory`. Dependencies include the SilverStripe framework.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/07_nested_definitions.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n\"# app/_graphql/models.yml\\nApp\\PageType\\Blog:\\n  fields:\\n    title: true\\n    author: true\\n    categories: true\\nSilverStripe\\Security\\Member:\\n  fields:\\n    firstName: true\\n    surname: true\\n    email: true\\nApp\\Model\\BlogCategory:\\n  fields: '*'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default Properties for Fixtures in SilverStripe\nDESCRIPTION: Shows how to override a blueprint to set default values for properties that aren't explicitly defined when creating objects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Test\\Team;\n\n$factory->define(Team::class, [\n    'Name' => 'Unknown Team',\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing CMSEditLinkExtension in a Parent Model\nDESCRIPTION: This code shows how to configure a parent model to use CMSEditLinkExtension. It sets the cms_edit_owner to a ModelAdmin class and establishes the reciprocal has_many relationship required for proper functioning of the edit links.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/13_Managing_Records.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/MyParentModel.php\nnamespace App\\Model;\n\nuse App\\Admin\\MyModelAdmin;\nuse SilverStripe\\Admin\\CMSEditLinkExtension;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyParentModel extends DataObject\n{\n    private static string $cms_edit_owner = MyModelAdmin::class;\n\n    private static $has_many = [\n        'Children' => MyModel::class,\n    ];\n\n    private static $extensions = [\n        CMSEditLinkExtension::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LastAccessed Threshold for LoginSession in YAML\nDESCRIPTION: YAML configuration to set the threshold for updating the LastAccessed field in LoginSession. This reduces database writes by only updating after a specified time interval.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.1.0.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\SessionManager\\Models\\LoginSession:\n  last_accessed_threshold: 150\n```\n\n----------------------------------------\n\nTITLE: Adding Enums to GraphQL Schema\nDESCRIPTION: This YAML snippet demonstrates how to define an enum type in a GraphQL schema configuration. The example provided here sets up a `SortDirection` enum with possible values of `DESC` for descending order and `ASC` for ascending order.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/07_enums_unions_and_interfaces.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# app/_graphql/schema.yml\nenums:\n  SortDirection:\n    values:\n      DESC: Descending order\n      ASC: Ascending order\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Priority Rules\nDESCRIPTION: Shows how to specify priority rules for configuration sections using Before and After directives.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\nName: adminroutes\nBefore: '*'\nAfter:\n    - '#rootroutes'\n---\nSilverStripe\\Control\\Director:\n  rules:\n    'admin': 'SilverStripe\\Admin\\AdminRootController'\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling SecurityToken in PHP\nDESCRIPTION: Demonstrates how to disable the SecurityToken for a Form in Silverstripe CMS. This should only be done for safe operations like GET requests that don't modify data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/04_Form_Security.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$form = Form::create(/* ... */);\n$form->disableSecurityToken();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type and Interface Generation\nDESCRIPTION: This snippet shows how GraphQL interfaces and types are generated for a hierarchy of DataObject models. Each type and its fields are linked through interfaces that represent the ancestry, enabling structured and type-safe queries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Page {\n  id: ID! # always exposed\n  title: String\n  content: String\n  urlSegment: String\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninterface PageInterface {\n  id: ID!\n  title: String\n  content: String\n}\n\ninterface BlogPageInterface {\n  id: ID!\n  title: String\n  content: String\n  date: String\n}\n\ninterface EventsPageInterface {\n  id: ID!\n  title: String\n  content: String\n  numberOfTickets: Int\n}\n\ninterface ConferencePageInterface {\n  id: ID!\n  title: String\n  content: String\n  numberOfTickets: Int\n  venueSize: Int\n  venurAddress: String\n}\n\ninterface WebinarPageInterface {\n  id: ID!\n  title: String\n  content: String\n  numberOfTickets: Int\n  zoomLink: String\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Page implements PageInterface {}\ntype BlogPage implements BlogPageInterface & PageInterface {}\ntype EventsPage implements EventsPageInterface & PageInterface {}\ntype ConferencePage implements ConferencePageInterface & EventsPageInterface & PageInterface {}\ntype WebinarPage implements WebinarPageInterface & EventsPageInterface & PageInterface {}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninterface DataObjectInterface {\n  id: ID!\n  # Any other fields you\\'ve explicitly exposed in config.modelConfig.DataObject.base_fields\n}\n\ntype Page implements PageInterface & DataObjectInterface {}\n```\n\n----------------------------------------\n\nTITLE: Changing Tab Order in Silverstripe CMS Forms\nDESCRIPTION: Changes the order of tabs in a TabSet by specifying the desired order of tabs. Tabs not included in the order array will be added after the explicitly included tabs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/06_Tabbed_Forms.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$fields->fieldByName('Root')->changeTabOrder(['FirstTab', 'SecondTab']);\n```\n\n----------------------------------------\n\nTITLE: Entwine Namespace Usage\nDESCRIPTION: This snippet shows an alternative usage of Entwine namespaces using a function. Passing a function to `entwine` allows subsequent calls to functions declared in the namespace without repeatedly calling `entwine('foo')`.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$('div').entwine('foo', function ($) {\n  this.bar();\n  this.bar();\n  this.bar();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Object with Caching in SilverStripe PHP\nDESCRIPTION: Demonstrates how object caching affects method return values in templates. Shows a counter implementation where the value is cached after first access, resulting in unexpected behavior when accessed multiple times in templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/07_Caching.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    // ...\n\n    private $counter = 0;\n\n    public function getCounter()\n    {\n        $this->counter += 1;\n\n        return $this->counter;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Controller in Silverstripe CMS\nDESCRIPTION: Example of a simple TeamController that extends the base Controller class with a custom action called 'players'. The controller defines allowed actions and demonstrates handling an HTTP request.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/01_Introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Control/TeamController.php\nnamespace App\\Control;\n\nuse App\\Model\\Team;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass TeamController extends Controller\n{\n    private static $allowed_actions = [\n        'players',\n    ];\n\n    public function players(HTTPRequest $request)\n    {\n        $this->renderWith(Team::class . '_PlayerList');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Return Types in SilverStripe GraphQL Schema Logger\nDESCRIPTION: Changes return types for various logging methods in the GraphQL Schema Logger class to void.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::alert(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::critical(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::debug(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::emergency(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::error(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::info(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::log(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::notice(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::warning(): void\n```\n\n----------------------------------------\n\nTITLE: Moving a Field Between Tabs in Silverstripe CMS\nDESCRIPTION: Moves the 'Content' field from the 'Main' tab to 'MyContent' tab. This requires first retrieving the field by name, removing it from its original location, and adding it to the new tab.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/06_Tabbed_Forms.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$content = $fields->dataFieldByName('Content');\n\n$fields->removeFieldFromTab('Root.Main', 'Content');\n$fields->addFieldToTab('Root.MyContent', $content);\n```\n\n----------------------------------------\n\nTITLE: Full Injector Syntax Example\nDESCRIPTION: Shows the traditional verbose Injector syntax for comparison with Injectable trait methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/05_Injector.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MyClass;\nuse SilverStripe\\Core\\Injector\\Injector;\n\n// instantiate a new instance of App\\MyClass via Injector\n$object = Injector::inst()->create(MyClass::class);\n// or fetch App\\MyClass as a singleton\n$singletonObject = Injector::inst()->get(MyClass::class);\n```\n\n----------------------------------------\n\nTITLE: Chaining Method Calls in Silverstripe CMS Templates\nDESCRIPTION: This snippet illustrates how to chain method calls in Silverstripe CMS templates. It shows examples of accessing nested properties and applying multiple formatting methods to template variables.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/09_Casting.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<%-- prints the first paragraph of content for the first item in the list --%>\n$MyList.First.Content.FirstParagraph\n\n<%-- prints \"Copyright 2023\" --%>\n<p>Copyright {$Now.Year}</p>\n\n<%-- prints <div class=\"about-us\"> --%>\n<div class=\"$URLSegment.LowerCase\">\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Limit Argument - YAML\nDESCRIPTION: This YAML snippet modifies the `readCountries` query to include a default value for the `limit` argument, allowing it to be optional. If no limit is provided, the default value of 20 will be used.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/04_adding_arguments.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/schema.yml\nqueries:\n  'readCountries(limit: Int = 20)': '[Country]'\n```\n\n----------------------------------------\n\nTITLE: Database Schema Structure\nDESCRIPTION: YAML representation of the database schema for Product inheritance hierarchy.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_20\n\nLANGUAGE: yml\nCODE:\n```\nProduct:\n  ID: Int\n  ClassName: Enum('Sport', 'BallSport', 'Tennis')\n  Created: Datetime\n  LastEdited: Datetime\n  SKU: Text\nProduct_Digital_Computer:\n  ID: Int\n  IsPreBuilt: 'Boolean'\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Case Sensitivity in YAML\nDESCRIPTION: Shows how to set the default case sensitivity for SearchFilters and ArrayList using YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/06_SearchFilters.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\ORM\\Filters\\SearchFilter:\n  default_case_sensitive: false\n\nSilverStripe\\ORM\\ArrayList:\n  default_case_sensitive: false\n```\n\n----------------------------------------\n\nTITLE: Defining a Silverstripe Template\nDESCRIPTION: Example of a simple Silverstripe template file that displays a coach's name and role.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/04_Rendering_Templates.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n<%-- app/templates/Coach_Message.ss --%>\n<strong>$Name</strong> is the $Role on our team.\n```\n\n----------------------------------------\n\nTITLE: Customising Page Icons with Font Icons in Silverstripe CMS\nDESCRIPTION: PHP code showing how to set a custom font icon for a page type in Silverstripe CMS. This uses the $icon_class property to specify a Fontastic icon for the HomePage class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Tree.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse Page;\n\nclass HomePage extends Page\n{\n    private static $icon_class = 'font-icon-p-home';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Combining JavaScript Files\nDESCRIPTION: Example of combining multiple JavaScript files into a single file for improved performance.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\View\\Requirements;\n\nRequirements::combine_files(\n    'foobar.js',\n    [\n        '<my-module-dir>/javascript/foo.js',\n        '<my-module-dir>/javascript/bar.js',\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a List in SilverStripe Templates\nDESCRIPTION: Example of iterating through a Members list in a SilverStripe template using the loop control structure.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/03_Lists.md#2025-04-21_snippet_1\n\nLANGUAGE: silverstripe\nCODE:\n```\n<%-- Assuming there is a \"getMembers()\" method or a \"Members\" relation --%>\n<% loop $Members %>\n    $Name\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Jobs to Run Tasks in BASH\nDESCRIPTION: This command exemplifies how to configure a cron job on a UNIX machine to run a Silverstripe BuildTask using Sake, enabling automated scheduled executions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/17_CLI/index.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * /your/site/folder/vendor/bin/sake dev/tasks/MyTask\n```\n\n----------------------------------------\n\nTITLE: Copying DataObjects to Different Stages with GraphQL\nDESCRIPTION: This mutation copies a SiteTree object from the DRAFT stage to the LIVE stage. It utilizes the copyToStage operation available for versioned DataObjects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/05_versioning.md#2025-04-21_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation copySiteTreeToStage(id: 123, fromStage: DRAFT, toStage: LIVE) {\\n  id\\n  title\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LastAccessed Threshold for LoginSession in Silverstripe\nDESCRIPTION: Configuration to set the threshold time (in seconds) before updating the LastAccessed field in the LoginSession. This reduces database writes by only updating this value when the time since the last update exceeds the threshold.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\SessionManager\\Models\\LoginSession:\n  last_accessed_threshold: 150\n```\n\n----------------------------------------\n\nTITLE: Implementing GridField_ActionMenu Configuration\nDESCRIPTION: Shows how to configure a GridField with ActionMenu and related components for handling grid actions through a dropdown interface.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig;\nuse SilverStripe\\Forms\\GridField\\GridFieldDataColumns;\nuse SilverStripe\\Forms\\GridField\\GridFieldEditButton;\nuse SilverStripe\\Forms\\GridField\\GridField_ActionMenu;\n\n// `GridFieldConfig::create()` will create an empty configuration (no components).\n$config = GridFieldConfig::create();\n\n// add a component\n$config->addComponent();\n\n$config->addComponents(\n    GridFieldDataColumns::create(),\n    GridFieldEditButton::create(),\n    GridField_ActionMenu::create()\n);\n\n// Update the GridField with our custom configuration\n$gridField->setConfig($config);\n```\n\n----------------------------------------\n\nTITLE: Handling Deprecated Code in Unit Tests\nDESCRIPTION: Example of how to properly handle deprecated code in unit tests by skipping tests when deprecation warnings are enabled.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/20_Deprecations/index.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace SilverStripe\\Test;\n\nuse SilverStripe\\Dev\\Deprecation;\nuse SilverStripe\\Dev\\SapphireTest;\n\nclass MyTest extends SapphireTest\n{\n    public function testSomething()\n    {\n        if (Deprecation::isEnabled()) {\n            $this->markTestSkipped('Test calls deprecated code');\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CsvBulkLoader Implementation\nDESCRIPTION: Simple implementation of CsvBulkLoader for importing Member data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/00_CSV_Import.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Dev\\CsvBulkLoader;\n\n$loader = CsvBulkLoader::create('Member');\n$result = $loader->load('<my-file-path>');\n```\n\n----------------------------------------\n\nTITLE: Asserting Partial HTML Match by Selector in SilverStripe FunctionalTest\nDESCRIPTION: Asserts that the most recently queried page contains specified HTML content within tags matching a CSS selector. The assertion fails if any expected match is not found. Note that &nbsp; characters are stripped from the content.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/01_Functional_Testing.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->assertPartialHTMLMatchBySelector('#MyForm_ID p.error', [\n    'That email address is invalid.',\n]);\n```\n\n----------------------------------------\n\nTITLE: Extending File Types in Silverstripe CMS\nDESCRIPTION: Shows YAML configuration for extending recognized file types in Silverstripe. Adjusts the file type descriptions using Silverstripe's configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Assets\\File:\n  file_types:\n    ai: 'Adobe Illustrator'\n    psd: 'Adobe Photoshop File'\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Regeneration in Static Publish Queue for Silverstripe\nDESCRIPTION: Configuration to control how related pages are regenerated after publishing or unpublishing a page when using Static Publish Queue. Options allow for regenerating parent and child pages recursively or only direct relationships.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\CMS\\Model\\SiteTree:\n  regenerate_children: recursive\n  regenerate_parents: recursive\n```\n\n----------------------------------------\n\nTITLE: Creating Links in Silverstripe CMS Templates\nDESCRIPTION: Demonstrates how to create links in Silverstripe CMS templates using the Link and AbsoluteLink methods, which return relative and absolute URLs respectively.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_8\n\nLANGUAGE: ss\nCODE:\n```\n<a href=\"$Link\">..</a>\n\n<%-- prints /about-us/offices/ --%>\n$Link\n\n<%-- prints https://www.example.com/about-us/offices/ --%>\n$AbsoluteLink\n```\n\n----------------------------------------\n\nTITLE: Accessing Owner in Extension\nDESCRIPTION: Demonstrates how to access the extended object through the owner property within an Extension class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\ORM\\DataExtension;\n\nclass MyMemberExtension extends DataExtension\n{\n    public function updateFoo($foo)\n    {\n        // outputs the class name of the object being extended\n        var_dump(get_class($this->owner));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DataExtension in Silverstripe Configuration\nDESCRIPTION: This YAML configuration snippet enables the `BookmarkedPageExtension` for the `SiteTree` class in Silverstripe.  It allows the extension to add custom fields and logic to pages.  Requires a dev/build to update the database schema.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\CMS\\Model\\SiteTree:\n  extensions:\n    - App\\Extension\\BookmarkedPageExtension\n\n```\n\n----------------------------------------\n\nTITLE: Defining a PJAX Fragment Template in SS\nDESCRIPTION: This code snippet demonstrates a simple template for a PJAX fragment.  The `data-pjax-fragment` attribute identifies the element as a PJAX fragment, allowing the server to update this specific part of the page via AJAX.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_10\n\nLANGUAGE: ss\nCODE:\n```\n```ss\n<%-- MyRecordInfo.ss --%>\n<div data-pjax-fragment=\"MyRecordInfo\">\n    Current Record: $currentPage.Title\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Removing a Field from a Tab in Silverstripe CMS\nDESCRIPTION: Removes the 'Content' field from the 'Main' tab under the 'Root' TabSet in a Silverstripe form.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/06_Tabbed_Forms.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$fields->removeFieldFromTab('Root.Main', 'Content');\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Address Anonymization for Session Manager in YAML\nDESCRIPTION: YAML configuration to enable anonymization of stored IP addresses in the Session Manager module. This enhances privacy and compliance by not storing full IP addresses.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.1.0.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\SessionManager\\Models\\LoginSession:\n  anonymize_ip: true\n```\n\n----------------------------------------\n\nTITLE: jQuery.Entwine Highlighter Implementation\nDESCRIPTION: Example of implementing a button highlighter using jQuery.Entwine with customizable foreground and background colors.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function ($) {\n  $(':button').entwine({\n    Foreground: 'red',\n    Background: 'yellow',\n    highlight() {\n      this.css('background', this.getBackground());\n      this.css('color', this.getForeground());\n    }\n  });\n}(jQuery));\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for SilverStripe Routing Rules\nDESCRIPTION: An alternative, more explicit syntax for defining routing rules in SilverStripe, using a nested array structure with 'Controller' as the key.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'teams//$Action/$ID/$Name':\n      Controller: 'App\\Control\\TeamController'\n    'player/':\n      Controller: '%$SpecialInjectedController'\n```\n\n----------------------------------------\n\nTITLE: Enhanced CharacterCounter with Remaining Characters Display\nDESCRIPTION: This updated version of the CharacterCounter component shows characters remaining instead of total count. It uses the limit prop and only displays when the character count approaches the limit based on warningBuffer.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/components/CharacterCounter.js\nimport React from 'react';\n\nconst CharacterCounter = (TextField) => (props) => {\n  const { warningBuffer, limit, value: { length } } = props;\n  const remainingChars = limit - length;\n  const showWarning = length + warningBuffer >= limit;\n  return (\n    <div>\n      <TextField {...props} />\n      {showWarning &&\n        <small>Characters remaining: {remainingChars}</small>\n            }\n    </div>\n  );\n};\n\nexport default CharacterCounter;\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Caching in SilverStripe Templates\nDESCRIPTION: Shows the syntax for implementing partial caching in templates using cache keys and conditions. Allows caching specific portions of a template as a single string value.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/07_Caching.md#2025-04-21_snippet_2\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $CacheKey if $CacheCondition %>\n    $CacheableContent\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Removed PHP API Methods - Versioned Module\nDESCRIPTION: List of deprecated methods removed from the Silverstripe Versioned module in version 5.0.0-alpha1, primarily focusing on versioning and publishing functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/alpha/5.0.0-alpha1.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Removed versioned methods\nSilverStripe\\Versioned\\Versioned::doPublish()\nSilverStripe\\Versioned\\Versioned::doRollbackTo()\nSilverStripe\\Versioned\\Versioned::migrateVersion()\nSilverStripe\\Versioned\\Versioned::onAfterRevertToLive()\nSilverStripe\\Versioned\\Versioned::onAfterRollback()\nSilverStripe\\Versioned\\Versioned::publish()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Status Flags to Silverstripe SiteTree Nodes\nDESCRIPTION: PHP code demonstrating how to add new status flags to SiteTree pages. This example adds a 'Scheduled To Publish' flag by extending the getStatusFlags method of the Page class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Tree.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace {\n    use SilverStripe\\CMS\\Model\\SiteTree;\n\n    class Page extends SiteTree\n    {\n        public function getScheduledToPublish()\n        {\n            // return either true or false\n        }\n\n        public function getStatusFlags($cached = true)\n        {\n            $flags = parent::getStatusFlags($cached);\n            $flags['scheduledtopublish'] = 'Scheduled To Publish';\n            return $flags;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Versioned GridField Extensions in PHP\nDESCRIPTION: Shows how to disable versioned GridField extensions for a specific model.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyBanner extends DataObject\n{\n    private static $versioned_gridfield_extensions = false;\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Visibility Requirements for Allowed Actions in Silverstripe\nDESCRIPTION: Demonstrates that only public methods can be made accessible as allowed actions in Silverstripe controllers. Protected or private methods cannot be exposed as allowed actions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/03_Access_Control.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass MyController extends Controller\n{\n    // ...\n\n    private static $allowed_actions = [\n        'secure',\n        // secureaction won't work as it's protected.\n    ];\n\n    public function secure(HTTPRequest $request)\n    {\n        // ...\n    }\n\n    protected function secureaction()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Signature\nDESCRIPTION: Illustrates the basic structure of a middleware function. It takes a `next` function (the next middleware in the chain) and returns a function that accepts arguments to be processed.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst middleware = (next) => (args) => next(args);\n```\n\n----------------------------------------\n\nTITLE: Required Parameter URL Pattern in SilverStripe\nDESCRIPTION: An example of a routing rule requiring both Action and ID parameters to be present for the route to match, causing requests to the base 'teams/' URL to result in a 404 error.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'teams//$Action!/$ID!': 'App\\Control\\TeamController'\n```\n\n----------------------------------------\n\nTITLE: Template Requirements API Usage\nDESCRIPTION: Example of requiring CSS and JavaScript resources in a Silverstripe template file using the require template statement.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_1\n\nLANGUAGE: ss\nCODE:\n```\n<%-- <my-module-dir>/templates/SomeTemplate.ss --%>\n<% require css(\"<my-module-dir>/css/some_file.css\") %>\n<% require themedCSS(\"some_themed_file\") %>\n<% require javascript(\"<my-module-dir>/javascript/some_file.js\") %>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Resolver Strategy Configuration in YAML\nDESCRIPTION: This YAML snippet configures the custom resolver strategy for the SilverStripe GraphQL schema. The strategy is assigned to the resolverStrategy property, linking it with the Strategy class defined earlier.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/03_resolver_discovery.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nresolverStrategy: [ 'App\\GraphQL\\Resolver\\Strategy', 'getResolverMethod' ]\n```\n\n----------------------------------------\n\nTITLE: Performing Fulltext Search Query\nDESCRIPTION: Demonstrates how to perform a fulltext search query using the FulltextFilter on a DataList.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/12_Search/02_FulltextSearch.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\SearchableDataOBject;\n\nSearchableDataObject::get()->filter('SearchFields:Fulltext', 'search term');\n```\n\n----------------------------------------\n\nTITLE: Using themedResourceURL() in SilverStripe Templates\nDESCRIPTION: Demonstrates how to use the themedResourceURL() helper method in SilverStripe templates to inject links to resources using cascading themes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_10\n\nLANGUAGE: ss\nCODE:\n```\n<img src=\"$themedResourceURL('images/my-image.jpg')\">\n<img src=\"$themedResourceURL('images')/$Image.jpg\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Entwine Property\nDESCRIPTION: This snippet shows how to access and modify a property defined within Entwine using the automatically generated getter and setter methods. It first retrieves the initial value, then sets a new value, and finally retrieves the updated value.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$('div').getMyProperty(); // returns 'some value'\n$('div').setMyProperty(32);\n$('div').getMyProperty(); // returns 32\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Limiting for Custom Paginated Lists in SilverStripe\nDESCRIPTION: Demonstrates how to disable automatic limiting in PaginatedList when using pre-limited lists to prevent breaking pagination functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/How_Tos/02_Pagination.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\PaginatedList;\n\n$myPreLimitedList = Page::get()->limit(10, $somePageOffset);\n\n$pages = new PaginatedList($myPreLimitedList, $this->getRequest());\n$pages->setLimitItems(false);\n```\n\n----------------------------------------\n\nTITLE: Template Counter Display with Caching\nDESCRIPTION: Shows how cached values are displayed in SilverStripe templates. Demonstrates that multiple calls to the same method return the cached value rather than recalculating.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/07_Caching.md#2025-04-21_snippet_1\n\nLANGUAGE: ss\nCODE:\n```\n$Counter, $Counter, $Counter\n\n// returns 1, 1, 1\n```\n\n----------------------------------------\n\nTITLE: Enabling LeftAndMainExtension in Silverstripe Configuration\nDESCRIPTION: This YAML configuration snippet enables the `BookmarkedPagesLeftAndMainExtension` for the `LeftAndMain` class in Silverstripe. This adds a function to retrieve bookmark pages.  This is required to make the `getBookmarkedPages()` method available in the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Admin\\LeftAndMain:\n  extensions:\n    - App\\Extension\\BookmarkedPagesLeftAndMainExtension\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Elemental Search Performance in Silverstripe CMS\nDESCRIPTION: Configuration to disable rendering of elements during CMS search, which can significantly improve performance. When set to false, the system simply extracts database contents from text and HTML fields rather than rendering all content blocks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nDNADesign\\Elemental\\Controllers\\ElementSiteTreeFilterSearch:\n  render_elements: false\n```\n\n----------------------------------------\n\nTITLE: Built-in Shortcode Examples\nDESCRIPTION: Examples of built-in shortcodes for internal links, images, and media embedding.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n <a href=\"[sitetree_link,id=99]\">...</a>\n\n <a href=\"[file_link,id=99]\">...</a>\n\n[image id=\"99\" alt=\"My text\"]\n\n[embed width=480 height=270 class=left thumbnail=https://i1.ytimg.com/vi/lmWeD-vZAMY/hqdefault.jpg?r=8767]\n  https://www.youtube.com/watch?v=lmWeD-vZAMY\n[/embed]\n```\n\n----------------------------------------\n\nTITLE: Defining Relations in SilverStripe Fixtures\nDESCRIPTION: Shows how to express model relations in fixtures using the '=>' prefix to reference other fixture objects, similar to the YAML fixture format.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Test\\Team;\n\n$obj = $factory->createObject(Team::class, 'hurricanes', [\n    'MyHasManyRelation' => '=>App\\Test\\Player.john,=>App\\Test\\Player.joe',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Fields in Silverstripe (PHP)\nDESCRIPTION: This snippet demonstrates how to configure searchable fields for a DataObject in Silverstripe CMS. It shows how to specify which fields should be searchable and how to exclude fields from the general search.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    private static $searchable_fields = [\n        'Name',\n        'ProductCode',\n        'BirthDate' => [\n            'general' => false,\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Create New Silverstripe Project\nDESCRIPTION: Creates a new Silverstripe CMS project using the installer template with latest stable version\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project silverstripe/installer my-project\n```\n\n----------------------------------------\n\nTITLE: Inserting Meta Tags in Silverstripe CMS Template\nDESCRIPTION: Shows how to insert meta tags in a Silverstripe CMS template using the MetaTags variable. This includes options for excluding the title tag and customizing the output.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_5\n\nLANGUAGE: ss\nCODE:\n```\n$MetaTags\n\n$MetaTags(false)\n<title>$Title - Bob's Fantasy Football</title>\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Publish Queue Page Regeneration\nDESCRIPTION: YAML configuration to control how related pages are regenerated after publishing or unpublishing in the Static Publish Queue module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.1.0-beta1.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\CMS\\Model\\SiteTree:\n  regenerate_children: recursive\n  regenerate_parents: recursive\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Authenticators in Silverstripe GraphQL\nDESCRIPTION: This YAML snippet demonstrates how to configure a custom authenticator in Silverstripe's GraphQL authentication handler. It registers the BasicAuthAuthenticator class with a priority setting to determine the order of authenticator usage.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/01_authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\GraphQL\\Auth\\Handler:\n  authenticators:\n    - class: SilverStripe\\GraphQL\\Auth\\BasicAuthAuthenticator\n      priority: 10\n```\n\n----------------------------------------\n\nTITLE: Custom ModelAdmin with PlayerCsvBulkLoader\nDESCRIPTION: ModelAdmin configuration using custom PlayerCsvBulkLoader for Player model.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/00_CSV_Import.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse SilverStripe\\Admin\\ModelAdmin;\n\nclass PlayerAdmin extends ModelAdmin\n{\n    private static $managed_models = [\n      'Player',\n    ];\n\n    private static $model_importers = [\n      'Player' => PlayerCsvBulkLoader::class,\n    ];\n\n    private static $url_segment = 'players';\n}\n```\n\n----------------------------------------\n\nTITLE: Globally Enabling MIME Type Validation\nDESCRIPTION: This YAML configuration snippet is to be added into the `app/_config/config.yml` file to globally enable the MimeUploadValidator for file uploads across the Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/06_Allowed_file_types.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Assets\\Upload_Validator:\n    class: SilverStripe\\MimeValidator\\MimeUploadValidator\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Country Names\nDESCRIPTION: This GraphQL snippet outlines a query for reading a list of countries with their names. It serves as an example for testing resolver discovery methods for querying data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/03_resolver_discovery.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readCountries {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Parsing Shortcodes in PHP\nDESCRIPTION: Shows how to manually parse shortcodes in a text string using the ShortcodeParser class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\View\\Parsers\\ShortcodeParser;\n\n$text = 'My awesome [my_shortcode] is here.';\nShortcodeParser::get_active()->parse($text);\n```\n\n----------------------------------------\n\nTITLE: Handling PJAX Fragment Events with jQuery Deferred\nDESCRIPTION: This code snippet shows how to handle PJAX fragment events using the jQuery deferred API.  This provides another way to execute custom logic after a fragment has been successfully loaded, including access to the status and XHR objects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// You can use this if you use @silverstripe/webpack-config\nimport { joinUrlPaths } from 'lib/urls';\n\n$('.cms-container')\n  .loadFragment(joinUrlPaths(ss.config.adminUrl, 'foobar/'), 'Fragment1')\n  .success((data, status, xhr) => {\n    // Say 'success'!\n    // eslint-disable-next-line no-alert\n    alert(status);\n  });\n```\n```\n\n----------------------------------------\n\nTITLE: Transforming Redux Action Types\nDESCRIPTION: Example of transforming one action type to another before passing to the original reducer.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (originalReducer) => (getGlobalState) => (state, { type, payload }) => {\n  switch (type) {\n    case 'REMOVE_ERROR': {\n      // we'd like to archive errors instead of removing them\n      return originalReducer(state, {\n        type: 'ARCHIVE_ERROR',\n        payload,\n      });\n    }\n    default: {\n      return state;\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Applying confirm action state to form - React\nDESCRIPTION: This snippet integrates the ConfirmingFormAction component into the form schema, adding confirmation messaging for a delete action. It allows users to confirm or cancel before proceeding.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Forms.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform(\n  'my-confirm',\n  (updater) => {\n    updater.form.alterSchema(\n      'AssetAdmin.*',\n      (form) =>\n        form\n          .updateField('action_delete', {\n            confirmText: 'Are you sure you want to delete?',\n            cancelText: 'No!! Cancel!!!!'\n          })\n          .getState()\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Changes in CMSPageAddController\nDESCRIPTION: Changes to parameter types in CMSPageAddController methods from dynamic types to array and Form types.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\CMS\\Controllers\\CMSPageAddController::doAdd($data: array, $form: Form)\nSilverStripe\\CMS\\Controllers\\CMSPageAddController::doCancel($data: array, $form: Form)\n```\n\n----------------------------------------\n\nTITLE: Adding an External Link to the CMS Menu with LeftAndMainExtension\nDESCRIPTION: This snippet shows how to create a LeftAndMainExtension that adds an external link to the CMS menu. It uses CMSMenu::add_link() to add a link with a unique identifier, title, URL, priority, and custom attributes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Menu.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse SilverStripe\\Admin\\CMSMenu;\nuse SilverStripe\\Admin\\LeftAndMainExtension;\n\nclass CustomLeftAndMain extends LeftAndMainExtension\n{\n    // ...\n\n    public function init()\n    {\n        // unique identifier for this item. Will have an ID of Menu-$ID\n        $id = 'LinkToExample';\n\n        // your 'nice' title\n        $title = 'Example Site';\n\n        // the link you want to item to go to\n        $link = 'https://www.example.com';\n\n        // priority controls the ordering of the link in the stack. The\n        // lower the number, the lower in the list\n        $priority = -2;\n\n        // Add your own attributes onto the link. In our case, we want to\n        // open the link in a new window (not the original)\n        $attributes = [\n            'target' => '_blank',\n        ];\n\n        CMSMenu::add_link($id, $title, $link, $priority, $attributes);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing General Search Filter in PHP\nDESCRIPTION: Configure the general search filter for a specific DataObject class using PHP. This example sets the filter to EndsWithFilter.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\Filters\\EndsWithFilter;\n\nclass MyDataObject extends DataObject\n{\n    private static string $general_search_field_filter = EndsWithFilter::class;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Middleware Interface Definition in PHP\nDESCRIPTION: The abstract method signature for the QueryMiddleware interface that all middleware implementations must follow. Middleware processes GraphQL queries and passes execution to the next middleware in the chain.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/06_extending/adding_middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse GraphQL\\Type\\Schema;\n\npublic abstract function process(Schema $schema, string $query, array $context, array $vars, callable $next);\n```\n\n----------------------------------------\n\nTITLE: Alternative Namespace Closure\nDESCRIPTION: This snippet demonstrates an alternative way to write a namespace closure in Entwine. This highlights that the `$` argument passed to the callback function represents the namespace object, which is distinct from the global jQuery object represented by `jQuery`.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js\njQuery.entwine('foo.bar', ($) => {\n  $('div').entwine({\n    // declarations here\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Sort Plugin in YML\nDESCRIPTION: Shows how to configure sort plugin for a specific model in the GraphQL schema\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/models.yml\nPage:\n  operations:\n    read:\n      plugins:\n        sort:\n          before: paginateList\n          fields:\n            created: true\n  fields:\n    title: true\n    created: true\n    hasManyFilesField:\n      fields:\n        name: true\n      plugins:\n        sorter:\n          fields:\n            title: true\n            parentFolderID: true\n```\n\n----------------------------------------\n\nTITLE: Configuring DataObject Fields and Operations in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure fields and operations for a DataObject model in Silverstripe GraphQL. It shows how to expose all fields and enable a read operation for the MyModel class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/08_architecture_diagrams.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Model\\MyModel:\n  fields:\n    '*': true\n  operations:\n    read: true\n```\n\n----------------------------------------\n\nTITLE: Using ClassName in Silverstripe CMS Templates\nDESCRIPTION: Demonstrates how to use the ClassName variable in Silverstripe CMS templates to access the current page's class name, which can be useful for CSS styling or JavaScript behavior.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_12\n\nLANGUAGE: ss\nCODE:\n```\n<%-- prints <body class=\"HomePage\">, or <body class=\"BlogPage\"> --%>\n<body class=\"$ClassName.ShortName\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo Mode for Custom DataObject in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to enable sudo mode for a custom DataObject subclass named 'Player'. Setting the 'require_sudo_mode' property to true activates sudo mode protection for this class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSomeModule\\Model\\Player:\n  require_sudo_mode: true\n```\n\n----------------------------------------\n\nTITLE: FootballTeam Model Definition\nDESCRIPTION: DataObject class definition for FootballTeam with relationships.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/00_CSV_Import.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass FootballTeam extends DataObject\n{\n    private static $db = [\n      'Title' => 'Text',\n    ];\n\n    private static $has_many = [\n      'Players' => Player::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Template Loop Scope Update\nDESCRIPTION: `<% loop %>` and `<% with %>` now result in only one new scope level. Adjust template code using `$Up.Up` to use `$Up` instead to align with the new scope structure.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Overriding CMS template in Silverstripe\nDESCRIPTION: This snippet demonstrates how to override a CMS template by placing a file with the same name in the application template directory.  It customizes the `LeftAndMain_MenuList.ss` template to add hardcoded links to the CMS menu. A flush is required to see changes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n\n...\n<ul class=\"cms-menu-list\">\n    <!-- ... -->\n    <li class=\"bookmarked-link first\">\n        <a href=\"$AdminURL('pages/edit/show/1')\">Edit \"My popular page\"</a>\n    </li>\n    <li class=\"bookmarked-link last\">\n        <a href=\"$AdminURL('pages/edit/show/99')\">Edit \"My other page\"</a>\n    </li>\n</ul>\n...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Banner DataObject with DBFile in PHP\nDESCRIPTION: This code snippet defines a Banner DataObject class with a DBFile field for storing image data. It demonstrates how to set up a database field for file storage in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/04_File_Storage.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Banner extends DataObject\n{\n    private static $db = [\n        'Image' => 'DBFile',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Shortcode Parsing for HTMLVarchar Fields\nDESCRIPTION: YAML configuration to enable shortcode parsing for all HTMLVarchar fields globally.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  HTMLVarchar:\n    properties:\n      ProcessShortcodes: true\n```\n\n----------------------------------------\n\nTITLE: Logging Out User in SilverStripe FunctionalTest\nDESCRIPTION: Logs out the current user and destroys the current session.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/01_Functional_Testing.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->logOut();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Pagination Query Example\nDESCRIPTION: Demonstrates a GraphQL query using pagination plugin with nodes, edges, and page info fields\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readPages(limit: 10, offset: 20) {\n    nodes {\n      title\n    }\n    edges {\n        node {\n            title\n        }\n    }\n    pageInfo {\n        totalCount\n        hasNextPage\n        hasPrevPage\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Union Types to GraphQL Schema\nDESCRIPTION: This YAML snippet demonstrates the addition of a union type `Article` in a GraphQL schema, which can resolve to either 'Blog' or 'NewsStory'. It also specifies the `resolveArticleUnion` method needed to ascertain the actual type.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/07_enums_unions_and_interfaces.md#2025-04-21_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n# app/_graphql/schema.yml\nunions:\n  Article:\n    types: [ 'Blog', 'NewsStory' ]\n    typeResolver: [ 'App\\GraphQL\\Resolver\\MyResolver', 'resolveArticleUnion' ]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tab in Silverstripe CMS Form\nDESCRIPTION: Creates a new tab named 'MyNewTab' under the 'Root' TabSet and adds a TextField to it.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/06_Tabbed_Forms.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$fields->addFieldToTab('Root.MyNewTab', TextField::create(/* ... */));\n```\n\n----------------------------------------\n\nTITLE: Configuring Elemental CMS Search Performance in YAML\nDESCRIPTION: Shows how to configure the Elemental module to optimize CMS search performance by disabling the default behavior of rendering all content blocks and instead extracting database contents directly.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.1.0-beta1.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nDNADesign\\Elemental\\Controllers\\ElementSiteTreeFilterSearch:\n  render_elements: false\n\nApp\\MyElement:\n  fields_excluded_from_cms_search:\n    - MyFieldToExclude\n    - AnotherFieldToExclude\n```\n\n----------------------------------------\n\nTITLE: Describing Query Arguments in YAML\nDESCRIPTION: This code snippet illustrates the process of adding descriptions to GraphQL query arguments in a YAML schema configuration. The 'readCountries' query retrieves all countries with an optional 'limit' argument, which is described in detail to improve clarity for API consumers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/06_adding_descriptions.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# app/_graphql/schema.yml\nqueries:\n  readCountries:\n    type: '[Country]'\n    description: Get all the countries in the world\n    args:\n      limit:\n        type: Int = 20\n        description: The limit that is applied to the result set\n```\n\n----------------------------------------\n\nTITLE: Level Access in SilverStripe Templates\nDESCRIPTION: Shows how to access pages at specific levels in the current page hierarchy using the Level() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_18\n\nLANGUAGE: ss\nCODE:\n```\n<% with $Level(1) %>\n    $Title\n<% end_with %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Icon for ModelAdmin in Silverstripe CMS\nDESCRIPTION: This snippet shows how to define a custom icon for a ProductAdmin class that extends ModelAdmin. The icon is specified using the $menu_icon static property pointing to a 16x16 PNG image.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Menu.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Admin;\n\nuse SilverStripe\\Admin\\ModelAdmin;\n\nclass ProductAdmin extends ModelAdmin\n{\n    // ...\n\n    private static $menu_icon = 'app/images/product-icon.png';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Shortcode Usage Example\nDESCRIPTION: This example shows the parameter values for a basic shortcode without attributes or content. It illustrates how the shortcode parser handles a simple tag.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n[my_shortcode]\n$attributes      => [];\n$content         => null;\n$parser          => ShortcodeParser instance,\n$tagName         => 'my_shortcode'\n```\n\n----------------------------------------\n\nTITLE: Activating the Default GraphQL Server with Director\nDESCRIPTION: This YAML configuration activates the default public-facing GraphQL server that comes pre-packaged with the SilverStripe GraphQL module by adding an access rule to the Director.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/01_activating_the_server.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'graphql': '%$SilverStripe\\GraphQL\\Controller.default'\n```\n\n----------------------------------------\n\nTITLE: Adding i18n Javascript Requirements\nDESCRIPTION: This example shows how to add the necessary JavaScript requirements for i18n in Silverstripe.  It includes the stand-alone i18n JS file and adds the language files using `Requirements::add_i18n_javascript`. It demonstrates adding language files from both a module directory and the public resources folder using the resource syntax.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\View\\Requirements;\n\nRequirements::javascript('silverstripe/admin:client/dist/js/i18n.js');\nRequirements::add_i18n_javascript('<my-module-dir>/javascript/lang');\n```\n\nLANGUAGE: php\nCODE:\n```\nRequirements::add_i18n_javascript('vendor/module:path/to/lang');\n```\n\n----------------------------------------\n\nTITLE: Dynamic Property Handling\nDESCRIPTION: Silverstripe CMS 5 handles dynamic properties in `SilverStripe\\View\\ViewableData` using magic methods (`__get()`, `__set()`) to maintain backward compatibility with PHP 8.2's deprecation of dynamic properties. These methods simulate dynamic properties by storing values in a private property array.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Configuring GridField Components in PHP\nDESCRIPTION: Demonstrates how to configure GridField components, specifically modifying the GridFieldDataColumns component to customize the displayed fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// app/src/PageType/MyPage.php\nnamespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\CMS\\Model\\SiteTree;\nuse SilverStripe\\Forms\\GridField\\GridField;\nuse SilverStripe\\Forms\\GridField\\GridFieldDataColumns;\n\nclass MyPage extends Page\n{\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n\n        $fields->addFieldToTab(\n            'Root.Pages',\n            $grid = GridField::create('Pages', 'All pages', SiteTree::get())\n        );\n\n        // GridField configuration\n        $config = $grid->getConfig();\n\n        // Modification of existing components can be done by fetching that component.\n        // Consult the API documentation for each component to determine the configuration\n        // you can do.\n        $dataColumns = $config->getComponentByType(GridFieldDataColumns::class);\n\n        $dataColumns->setDisplayFields([\n            'Title' => 'Title',\n            'Link' => 'URL',\n            'LastEdited' => 'Changed',\n        ]);\n\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Permissions in Silverstripe Controllers\nDESCRIPTION: Demonstrates the correct way to handle form permissions in Silverstripe controllers. The form method should be included in allowed_actions, but the form action methods should not be included.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/03_Access_Control.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Forms\\Form;\n\nclass MyController extends Controller\n{\n    // ...\n\n    private static $allowed_actions = [\n        // use the Form method, not the action\n        'contactForm',\n    ];\n\n    public function contactForm()\n    {\n        return Form::create(/* ... */);\n    }\n\n    public function doContactForm($data, $form)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: File Logger Configuration in Silverstripe\nDESCRIPTION: YAML configuration for setting up file logging using Monolog's StreamHandler.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  Psr\\Log\\LoggerInterface:\n    calls:\n      LogFileHandler: [ pushHandler, [ '%$LogFileHandler' ] ]\n  LogFileHandler:\n    class: Monolog\\Handler\\StreamHandler\n    constructor:\n      - \"/var/www/silverstripe.log\"\n      - \"info\"\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Request Handler in PHP Controller\nDESCRIPTION: Shows how to set up a GET request handler for viewing a single record in a Silverstripe controller, including URL handling and permission checks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/07_CMS_JSON_APIs.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Controllers/MySomethingController.php\nnamespace App\\Controllers;\n\nuse SilverStripe\\Admin\\LeftAndMain;\nuse SilverStripe\\Control\\HTTPResponse;\n\nclass MySomethingController extends LeftAndMain\n{\n    // ...\n    private static array $url_handlers = [\n        'GET view/$ItemID' => 'apiView',\n    ];\n\n    private static array $allowed_actions = [\n        'apiView',\n    ];\n\n    public function apiView(): HTTPResponse\n    {\n        $itemID = $request->param('ItemID');\n        // Note: would normally validate that $itemID is a valid integer and that $obj exists\n        $obj = MyDataObject::get()->byID($itemID);\n        $data = ['ID' => $obj->ID, 'Title' => $obj->Title];\n        return $this->jsonSuccess(200, $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Template Caching in SilverStripe\nDESCRIPTION: Simple caching example that uses the template code hash with global key for caching.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_10\n\nLANGUAGE: ss\nCODE:\n```\n<% cached %>\n  The key is: hash of the template code within the block with $global_key.\n  This content is always cached.\n<% end_cache %>\n```\n\n----------------------------------------\n\nTITLE: Shortcode Location Attribute Usage\nDESCRIPTION: Demonstrates the use of the location attribute in shortcodes to comply with HTML lexical rules.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"#\">Head [figure,location=\"left\",src=\"assets/a.jpg\",caption=\"caption\"] Tail</a></p>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Variables in Silverstripe CMS Templates\nDESCRIPTION: Demonstrates how to use custom variables defined in PHP within Silverstripe CMS templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_2\n\nLANGUAGE: ss\nCODE:\n```\n<!-- app/templates/App/Model/MyObject.ss -->\n<p>You are coming from $UsersIpAddress.</p>\n```\n\n----------------------------------------\n\nTITLE: Disabling FormFields in SilverStripe\nDESCRIPTION: Demonstrates how to disable a FormField by setting the disabled property, which adds the disabled attribute to the HTML input element\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/05_Form_Transformations.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$field = TextField::create(/* ... */);\n$field->setDisabled(true);\n\n// prints '<input type=\"text\" class=\"text\" .. disabled=\"disabled\" />'\necho $field->forTemplate();\n```\n\n----------------------------------------\n\nTITLE: Template for Grouped Modules Display\nDESCRIPTION: SilverStripe template code for displaying modules grouped by first letter of title.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Grouping_DataObject_Sets.md#2025-04-21_snippet_2\n\nLANGUAGE: silverstripe\nCODE:\n```\n<%-- Modules list grouped by TitleFirstLetter --%>\n<h2>Modules</h2>\n<% loop $GroupedModules.GroupedBy(\"TitleFirstLetter\") %>\n    <h3>$TitleFirstLetter</h3>\n    <ul>\n        <% loop $Children %>\n            <li>$Title</li>\n        <% end_loop %>\n    </ul>\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Nested Cached Blocks in SilverStripe Templates\nDESCRIPTION: Illustrates how nested cache blocks are processed independently in SilverStripe templates, showing a header, body, and footer structure.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_5\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $PageKey %>\n  <%-- Header goes here --%>\n\n  <% cached $BodyKey %>\n    <%-- Body goes here --%>\n  <% end_cached %>\n\n  <%-- Footer goes here --%>\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Control button state from backend (PHP)\nDESCRIPTION: This PHP snippet shows how to control the state of the FormAction button from the backend by adding the `ss-ui-alternate` class. It checks a condition (`$this->needsCleaning()`) and, if true, adds the class to the button. This initializes the button in the alternate state upon page load or CMS action.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/CMS_Alternating_Button.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyObject extends DataObject\n{\n    // ...\n\n    public function getCMSActions()\n    {\n        // ...\n        if ($this->needsCleaning()) {\n            // Will initialise the button into alternate state.\n            $cleanupAction->addExtraClass('ss-ui-alternate');\n        }\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: This GraphQL query demonstrates a simple query for a `Country` type called `readCountries` that takes a `limit` argument.  It retrieves the name and code fields of each country, limiting the results to 5.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/05_adding_pagination.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readCountries(limit: 5) {\n    name\n    code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Anchor Rewriting for Specific Controllers in SilverStripe\nDESCRIPTION: This PHP code snippet shows how to disable anchor link rewriting for specific controllers in SilverStripe. It extends PageController and uses the setRewriteHashLinksDefault method in the init function.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/How_Tos/03_Disable_Anchor_Links.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\View\\SSViewer;\n\nclass ExamplePageController extends PageController\n{\n    protected function init()\n    {\n        parent::init();\n        SSViewer::setRewriteHashLinksDefault(false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding domains from oEmbed sandboxing in Silverstripe CMS\nDESCRIPTION: YAML configuration to exclude specific domains from oEmbed HTML content sandboxing. This allows certain trusted domains like YouTube to be exempted from the default iframe sandboxing security measures.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\View\\Shortcodes\\EmbedShortcodeProvider:\n  domains_excluded_from_sandboxing:\n    - 'youtube.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Request Handler in SilverStripe YAML\nDESCRIPTION: Shows how to set up a routing rule for a nested request handler in SilverStripe's YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/routes.yml\nSilverStripe\\Control\\Director:\n  rules:\n    'one': 'App\\Control\\RequestHandlerOne'\n```\n\n----------------------------------------\n\nTITLE: Accessing Casted Properties in PHP\nDESCRIPTION: Shows different ways to access player name properties in PHP code, demonstrating the difference between raw values and casted values.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$player = Player::get()->byId(1);\n\n// returns the string \"Sam MinnÃ©e\"\n$name = $player->Name;\n\n// returns the string \"Sam MinnÃ©e\"\n$name = $player->getName();\n\n// throws an exception, since `getName()` returns a string, not a `DBVarchar` instance\n$name = $player->getName()->LimitCharacters(2);\n```\n\n----------------------------------------\n\nTITLE: PHP Image Extension Implementation\nDESCRIPTION: Custom PHP extension class for adding new image manipulation functions including square cropping and blur effects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/02_Images.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Assets\\Image_Backend;\nuse SilverStripe\\Core\\Extension;\n\nclass ImageExtension extends Extension\n{\n    public function getSquare($width)\n    {\n        $variant = $this->owner->variantName(__FUNCTION__, $width);\n        return $this->owner->manipulateImage($variant, function (Image_Backend $backend) use ($width) {\n            $clone = clone $backend;\n            $resource = clone $backend->getImageResource();\n            $resource->fit($width);\n            $clone->setImageResource($resource);\n            return $clone;\n        });\n    }\n\n    public function getBlur($amount = null)\n    {\n        $variant = $this->owner->variantName(__FUNCTION__, $amount);\n        return $this->owner->manipulateImage($variant, function (Image_Backend $backend) use ($amount) {\n            $clone = clone $backend;\n            $resource = clone $backend->getImageResource();\n            $resource->blur($amount);\n            $clone->setImageResource($resource);\n            return $clone;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Access-Control-Allow-Origin in SilverStripe GraphQL (YAML)\nDESCRIPTION: Defines which domains are allowed to access GraphQL API in SilverStripe. Can be configured to deny all, allow any, or specify one or multiple domains.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/02_cors.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nAllow-Origin:\n```\n\nLANGUAGE: yml\nCODE:\n```\nAllow-Origin: '*'\n```\n\nLANGUAGE: yml\nCODE:\n```\nAllow-Origin: 'https://my.domain.com'\n```\n\nLANGUAGE: yml\nCODE:\n```\nAllow-Origin:\\n  - 'https://my.domain.com'\\n  - 'https://your.domain.org'\n```\n\n----------------------------------------\n\nTITLE: Checking for Logged-In Users in Silverstripe CMS\nDESCRIPTION: Demonstrates how to use Security::getCurrentUser() to retrieve the current logged-in member and perform conditional actions based on login status.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/00_Member.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Security\\Security;\n\n$member = Security::getCurrentUser()\nif ($member) {\n    // Work with $member\n} else {\n    // Do non-member stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Usage for Integer IDs in Silverstripe ORM\nDESCRIPTION: Configuration to enable the use of placeholders for integer IDs in DataList queries. By default, this optimization is disabled, but can be enabled when needed for specific use cases.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\ORM\\DataList:\n  use_placeholders_for_integer_ids: true\n```\n\n----------------------------------------\n\nTITLE: Registering GraphQL Resolver in YAML\nDESCRIPTION: This YAML snippet showcases how to register a resolver class in SilverStripe's GraphQL config. The class should contain static functions that resolve one or more fields. The discovery of functions relies on the resolver strategy.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/03_resolver_discovery.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nresolvers:\n  - App\\GraphQL\\Resolver\\MyResolver\n```\n\n----------------------------------------\n\nTITLE: Including custom CSS in Silverstripe CMS\nDESCRIPTION: This snippet shows how to include custom CSS in the Silverstripe CMS by creating a CSS file and configuring `extra_requirements_css`.  It styles the bookmarked links added in the previous step. Requires exposing the css directory and running composer vendor-expose.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.bookmarked-link.first {margin-top: 1em;}\n\n```\n\n----------------------------------------\n\nTITLE: Creating CMS List View Extension\nDESCRIPTION: Implements a LeftAndMain extension to customize the GridField display for NewsPageHolder, adding custom sorting and an author column.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Pages_List.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\n// ...\n\nclass NewsPageHolderCMSMainExtension extends Extension\n{\n    public function updateListView($listView)\n    {\n        $parentId = $listView->getController()->getRequest()->requestVar('ParentID');\n        $parent = ($parentId) ? Page::get()->byId($parentId) : Page::create();\n\n        // Only apply logic for this page type\n        if ($parent && $parent instanceof NewsPageHolder) {\n            $gridField = $listView->Fields()->dataFieldByName('Page');\n            if ($gridField) {\n                // Sort by created\n                $list = $gridField->getList();\n                $gridField->setList($list->sort('Created', 'DESC'));\n                // Add author to columns\n                $cols = $gridField->getConfig()->getComponentByType('GridFieldDataColumns');\n                if ($cols) {\n                    $fields = $cols->getDisplayFields($gridField);\n                    $fields['Author.Title'] = 'Author';\n                    $cols->setDisplayFields($fields);\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Nested Shortcodes Limitation Example\nDESCRIPTION: This HTML snippet illustrates a limitation of the shortcode parser, which cannot handle nested shortcodes correctly due to its simple regex-based implementation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n[shortcode]\n[shortcode][/shortcode]\n[/shortcode]\n```\n\n----------------------------------------\n\nTITLE: Accessing SiteConfig in PHP\nDESCRIPTION: Demonstrates how to access SiteConfig variables in PHP code using the current_site_config() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/01_SiteConfig.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Silverstripe\\SiteConfig\\SiteConfig;\n\n$config = SiteConfig::current_site_config();\n\n// prints \"Website Name\"\necho $config->Title;\n```\n\n----------------------------------------\n\nTITLE: Basic Javascript i18n Usage\nDESCRIPTION: This snippet demonstrates the basic usage of i18n in JavaScript using the `ss.i18n._t` function.  It retrieves a translated string for a specific entity.  The return value is assigned to a constant.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst myText = ss.i18n._t('MYMODULE.MYENTITY');\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Logging for Deprecation Warnings in Silverstripe CMS\nDESCRIPTION: Sets up a StreamHandler to log deprecation warnings to a file using YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/07_Deprecations.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  ErrorLogFileHandler:\n    class: Monolog\\Handler\\StreamHandler\n    constructor:\n      - \"/var/www/silverstripe.log\"\n      - \"warning\" # warning is the level deprecation warnings are logged as\n  Psr\\Log\\LoggerInterface:\n    calls:\n      ErrorLogFileHandler: [ pushHandler, [ '%$ErrorLogFileHandler' ] ]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ModelAdmin for Product and Category Management\nDESCRIPTION: Extends ModelAdmin to create a custom admin interface for managing Product and Category models, with a custom URL segment and menu title.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Admin/MyAdmin.php\nnamespace App\\Admin;\n\nuse App\\Model\\Category;\nuse App\\Model\\Product;\nuse SilverStripe\\Admin\\ModelAdmin;\n\nclass MyAdmin extends ModelAdmin\n{\n    private static $managed_models = [\n        Product::class,\n        Category::class,\n    ];\n\n    private static $url_segment = 'products';\n\n    private static $menu_title = 'My Product Admin';\n}\n```\n\n----------------------------------------\n\nTITLE: Listing API Changes for Silverstripe Modules\nDESCRIPTION: This markdown snippet lists API changes for various Silverstripe modules, including commit hashes, dates, and brief descriptions of the changes. It covers deprecations, new features, and modifications across different modules.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.3.0.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Api changes {#changelog-api-changes}\n\n- silverstripe/framework (5.2.0 -> 5.3.0)\n  - 2024-08-20 [743fe245a](https://github.com/silverstripe/silverstripe-framework/commit/743fe245aa7a1f06a1083e511cddf77300c758bc) Deprecate DataExtension (Steve Boyd)\n  - 2024-07-03 [724e813b8](https://github.com/silverstripe/silverstripe-framework/commit/724e813b8fe0367601b918276fbf376855967983) Make token regeneration optional during autologin session renewal (Garion Herman)\n  - 2024-06-12 [049e54624](https://github.com/silverstripe/silverstripe-framework/commit/049e546247ac6957885f862124d23cc50daf5dc9) Deprecate references to installation tool (#11275) (Guy Sartorelli)\n  - 2024-05-14 [0ba85bc1d](https://github.com/silverstripe/silverstripe-framework/commit/0ba85bc1d00281c79f8623186b2e5ba6a3ec2929) Deprecate passing non-arrays to FieldList methods (Steve Boyd)\n\n- silverstripe/admin (2.2.0 -> 2.3.0)\n  - 2024-08-20 [611dc588](https://github.com/silverstripe/silverstripe-admin/commit/611dc588e0c4138ff74a07b896db54d951c03058) Deprecate LeftAndMainExtension (Steve Boyd)\n\n- silverstripe/asset-admin (2.2.0 -> 2.3.0)\n  - 2024-08-22 [ae7c21eb](https://github.com/silverstripe/silverstripe-asset-admin/commit/ae7c21eb4c6d1da8d0b889f87437a9c2459a1747) Deprecate extension to be replaced with config (#1489) (Guy Sartorelli)\n  - 2024-08-18 [81b03208](https://github.com/silverstripe/silverstripe-asset-admin/commit/81b0320809f5a55a578d4c46869c490110e3e3c7) Deprecate GraphQL (Steve Boyd)\n\n- silverstripe/campaign-admin (2.2.0 -> 2.3.0)\n  - 2024-08-22 [af19bc1](https://github.com/silverstripe/silverstripe-campaign-admin/commit/af19bc100146d4776e5b3eae0a724e04ee7b3ab8) Deprecate extension to be replaced with config (#325) (Guy Sartorelli)\n\n- silverstripe/cms (5.2.0 -> 5.3.0)\n  - 2024-08-20 [5e3e8479](https://github.com/silverstripe/silverstripe-cms/commit/5e3e8479980da2bda81290783fd8c5c0a5af0727) Deprecate SiteTreeExtension (Steve Boyd)\n  - 2024-08-18 [391c1cea](https://github.com/silverstripe/silverstripe-cms/commit/391c1cea0ca3811ae32a05f34fe932320b790bdf) Deprecate GraphQL (Steve Boyd)\n  - 2024-06-12 [8fa7bffd](https://github.com/silverstripe/silverstripe-cms/commit/8fa7bffd78279c0125a3b103845987e534565885) Deprecate references to installation tool (#2962) (Guy Sartorelli)\n\n- silverstripe/versioned (2.2.0 -> 2.3.0)\n  - 2024-08-18 [812d1a1](https://github.com/silverstripe/silverstripe-versioned/commit/812d1a1a776e3866909d9a0dc00ea351c2d5e737) Deprecate GraphQL (Steve Boyd)\n  - 2024-08-15 [4bc9abd](https://github.com/silverstripe/silverstripe-versioned/commit/4bc9abdfa9a1b41b194b61606bbbc997b3205906) Deprecate Versioned::canArchive() (#461) (Guy Sartorelli)\n\n- silverstripe/session-manager (2.2.0 -> 2.3.0)\n  - 2024-08-19 [8c23041](https://github.com/silverstripe/silverstripe-session-manager/commit/8c23041c63cb119d9574bb82f5a12e4ee6181dbb) Use symfony for IPUtils (Steve Boyd)\n\n- silverstripe/blog (4.2.0 -> 4.3.0)\n  - 2024-08-20 [7ad58bb](https://github.com/silverstripe/silverstripe-blog/commit/7ad58bb9a0c9e3897bf3afa7abbd167f0a2f980c) Deprecate widget classes (Steve Boyd)\n\n- colymba/gridfield-bulk-editing-tools (4.0.2 -> 4.1.0)\n  - 2024-08-19 [13809b9](https://github.com/colymba/GridFieldBulkEditingTools/commit/13809b999ab76f7c446c9fc78bddf81c47b97c65) Added fileID and record variables to onBulkUpload hook (Benjamin Blake)\n\n- silverstripe/sharedraftcontent (3.2.0 -> 3.3.0)\n  - 2024-08-22 [9453721](https://github.com/silverstripe/silverstripe-sharedraftcontent/commit/94537216366201a766e6463a6b30f06121263d78) Deprecate extension to be replaced with config (#255) (Guy Sartorelli)\n\n- dnadesign/silverstripe-elemental (5.2.0 -> 5.3.0)\n  - 2024-08-22 [35e3eb9](https://github.com/silverstripe/silverstripe-elemental/commit/35e3eb9ce645a78a9dc93492077be62143fcc990) Deprecate extension to be replaced with config (#1243) (Guy Sartorelli)\n  - 2024-08-19 [c3f3660](https://github.com/silverstripe/silverstripe-elemental/commit/c3f3660b70bcaa3338ce1323f2acfb3fb6fb7170) Deprecate GraphQL (Steve Boyd)\n  - 2024-05-29 [35c723d](https://github.com/silverstripe/silverstripe-elemental/commit/35c723d79458a766d6153f101d4c839cb92dae26) Deprecate BaseElement::getDescription() (#1196) (Guy Sartorelli)\n\n- silverstripe/auditor (3.1.0 -> 3.2.0)\n  - 2024-04-28 [5fe202e](https://github.com/silverstripe/silverstripe-auditor/commit/5fe202ec9d20f2188213af21f12d659d9f3ad17e) Deprecate ProxyDBExtension (Steve Boyd)\n\n- tractorcow/silverstripe-fluent (7.1.0 -> 7.2.0)\n  - 2023-02-17 [43dc86d](https://github.com/tractorcow-farm/silverstripe-fluent/commit/43dc86d3ba361cd5e55737022335e1ff04f316c3) Standardise deprecations (Guy Sartorelli)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination Limit in YML\nDESCRIPTION: Demonstrates how to set maximum limit for pagination in a specific model's GraphQL schema\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/models.yml\nMyProject\\Models\\ProductCategory:\n  operations:\n    read:\n      plugins:\n        paginateList:\n          maximumLimit: 10\n```\n\n----------------------------------------\n\nTITLE: CLI Commands for GraphQL Schema Deployment\nDESCRIPTION: Key command-line instructions for building and managing GraphQL schemas in Silverstripe CMS deployment scenarios\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/05_deploying_the_schema.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndev/build\n```\n\nLANGUAGE: bash\nCODE:\n```\ndev/graphql/build\n```\n\n----------------------------------------\n\nTITLE: Custom File Extension Class\nDESCRIPTION: PHP class extending DataExtension to add custom fields to File objects\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/01_File_Management.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\ORM\\DataExtension;\n\nclass MyFileExtension extends DataExtension\n{\n    private static $db = [\n        'Description' => 'Text',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Sequential String Formatting with sprintf() in Silverstripe i18n\nDESCRIPTION: Demonstrates how to use sprintf() for sequential string substitution in translations. The function replaces %s placeholders in order with provided arguments.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// MYMODULE.MYENTITY contains \"Really delete %s articles by %s?\"\n// The myText variable contains: \"Really delete 42 articles by Douglas Adams?\"\nconst myText = ss.i18n.sprintf(\n  ss.i18n._t('MYMODULE.MYENTITY'),\n  42,\n  'Douglas Adams'\n);\n```\n\n----------------------------------------\n\nTITLE: Asserting Partial Match by Selector in SilverStripe FunctionalTest\nDESCRIPTION: Asserts that the most recently queried page contains specified content within tags matching a CSS selector. The assertion fails if any expected match is not found.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/01_Functional_Testing.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->assertPartialMatchBySelector('p.good', [\n    'Test save was successful',\n]);\n```\n\n----------------------------------------\n\nTITLE: Toggle alternate button state (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to toggle the alternate state of a button using jQuery UI's `button('toggleAlternate')` method. It targets the button with the ID `Form_EditForm_action_cleanup` within the CMS edit form's button toolbar.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/CMS_Alternating_Button.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njQuery('.cms-edit-form .btn-toolbar #Form_EditForm_action_cleanup').button('toggleAlternate');\n```\n\n----------------------------------------\n\nTITLE: Scheduling LoginSessionGarbageCollectionTask via Cron in SilverStripe\nDESCRIPTION: This snippet shows how to set up a cron job to run the LoginSessionGarbageCollectionTask every 5 minutes. This task is responsible for garbage collection of login sessions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/03_Managing_Sessions.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n*/5 * * * * /path/to/webroot/vendor/bin/sake dev/tasks/LoginSessionGarbageCollectionTask\n```\n\n----------------------------------------\n\nTITLE: Setting Environment-Specific Variables in Silverstripe CMS\nDESCRIPTION: This YAML configuration sets different values for 'myvar' in MyClass based on whether the environment is live or test. It's typically added to the app/_config/app.yml file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/00_Environment_Types.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/app.yml\n---\nOnly:\n  environment: 'live'\n---\nMyClass:\n  myvar: live_value\n---\nOnly:\n  environment: 'test'\n---\nMyClass:\n  myvar: test_value\n```\n\n----------------------------------------\n\nTITLE: Rendering Safe Links in SilverStripe Template\nDESCRIPTION: Illustrates how to output a safe link in a SilverStripe template using a properly escaped variable.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_12\n\nLANGUAGE: SS\nCODE:\n```\n<a href=\"$RSSLink.ATT\">RSS feed</a>\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Injected Dependencies in Parent Components\nDESCRIPTION: Shows how a parent component can override dependencies injected into a child component, demonstrating the flexibility of the inject() system.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/components/PreviewSection.js\nimport React from 'react';\nimport { inject } from 'lib/Injector';\n\nclass PreviewSection extends React.Component {\n  render() {\n    const { Gallery, PreviewItem } = this.props;\n    return (\n      <div className=\"preview-section\">\n        <div className=\"preview-sidebar\">Sidebar here</div>\n        <Gallery ItemComponent={PreviewItem}/>\n      </div>\n    );\n  }\n}\n\nexport default inject(\n  ['Gallery', 'PreviewItem']\n)(PreviewSection);\n```\n\n----------------------------------------\n\nTITLE: Setting Email DSN Environment Variable in Silverstripe\nDESCRIPTION: Configure the mailer DSN (Data Source Name) using environment variables for email transport settings.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/10_Email/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nMAILER_DSN=\"<my-dsn>\"\n```\n\n----------------------------------------\n\nTITLE: Disabling DataObject Query Permissions in YAML\nDESCRIPTION: This snippet demonstrates how to disable the `canView` plugin for `read` and `readOne` operations on a `Page` DataObject within a GraphQL schema configuration file. This effectively disables query permissions, allowing all users to access the data, which is generally not recommended. The configuration is done in `app/_graphql/models.yml`\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/03_permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/models.yml\nPage:\n  operations:\n    read:\n      plugins:\n        canView: false\n    readOne:\n      plugins:\n        canView: false\"\n```\n\n----------------------------------------\n\nTITLE: Setting Controller-Specific HTTP Headers in Silverstripe CMS\nDESCRIPTION: This PHP snippet illustrates how to set controller-specific HTTP headers in a Silverstripe CMS controller response. It shows setting the X-Controller header to indicate the current controller, which is used for menu highlighting.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n\nclass MyController extends Controller\n{\n    // ...\n\n    public function mycontrollermethod()\n    {\n        // ... logic here\n        $this->getResponse()->addHeader('X-Controller', 'AssetAdmin');\n        return 'my response';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Shortcodes for Specific HTMLVarchar Fields\nDESCRIPTION: PHP method to enable shortcode processing for a specific HTMLVarchar field.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/04_Shortcodes.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function getMyHtmlVarcharField()\n{\n    $field = $this->dbObject('MyHtmlVarcharField');\n    $field->setProcessShortcodes(true);\n    return $field;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing RSS Feed Template in XML\nDESCRIPTION: This XML template shows how to customize the RSS feed output to include additional fields like a player's team.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/02_RSSFeed.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- app/templates/PlayersRss.ss -->\n<?xml version=\"1.0\"?>\n<rss version=\"2.0\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n    <channel>\n        <title>$Title</title>\n        <link>$Link</link>\n        <atom:link href=\"$Link\" rel=\"self\" type=\"application/rss+xml\" />\n        <description>$Description.XML</description>\n\n        <% loop $Entries %>\n        <item>\n            <title>$Title.XML</title>\n            <team>$Team.Title</team>\n        </item>\n        <% end_loop %>\n    </channel>\n</rss>\n```\n\n----------------------------------------\n\nTITLE: Creating a FormAction with a handler in Silverstripe\nDESCRIPTION: This PHP snippet creates a `FormAction` and associates it with a handler. It creates a button labelled 'Perform Sample Action' which, when clicked, will trigger the `sampleAction` method defined in the `CustomActionsExtension`.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$fields->push(FormAction::create('sampleAction', 'Perform Sample Action'));\n\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to CLI Commands in BASH\nDESCRIPTION: These commands illustrate how to pass parameters to the Silverstripe CLI script and Sake command, with the parameters being available in the $_GET array.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/17_CLI/index.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd your-project-root/\nphp vendor/silverstripe/framework/cli-script.php myurl myparam=1 myotherparam=2\n\nvendor/bin/sake myurl \"myparam=1&myotherparam=2\"\n```\n\n----------------------------------------\n\nTITLE: Hiding CMS Form Actions Globally with YAML Configuration\nDESCRIPTION: This YAML configuration shows how to globally hide the Previous, Next, and Add actions on CMS edit forms by setting formActions properties on the GridFieldDetailForm_ItemRequest class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Menu.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Forms\\GridField\\GridFieldDetailForm_ItemRequest:\n  formActions:\n    showPagination: false\n    showAdd: false\n```\n\n----------------------------------------\n\nTITLE: Disabling Trailing Slash Redirection in Silverstripe CMS\nDESCRIPTION: YML configuration to disable the CanonicalURLMiddleware from redirecting traffic based on trailing slash configuration. This prevents automatic redirects from '/about-us/' to '/about-us'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Middleware\\CanonicalURLMiddleware:\n    properties:\n      enforceTrailingSlashConfig: false\n```\n\n----------------------------------------\n\nTITLE: jQuery Element Collection Handling\nDESCRIPTION: Example of properly handling jQuery element collections using .each() to ensure code works with multiple elements.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$('div.MyGridField').each(function () {\n  // This is the over code for the tr elements inside a GridField.\n  $(this).find('tr').hover(\n    // ...\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Hosts with YAML in Silverstripe CMS\nDESCRIPTION: Alternative method to configure allowed hostnames using YAML configuration, useful when environment variables can't be easily modified.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_19\n\nLANGUAGE: yml\nCODE:\n```\n---\nafter: requestprocessors\n---\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Middleware\\AllowedHostsMiddleware:\n    properties:\n      AllowedHosts:\n        - 'example.com'\n        - 'www.example.com'\n        - 'subdomain.example.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring Access-Control-Allow-Credentials in SilverStripe GraphQL (YAML)\nDESCRIPTION: Determines whether credentials are included with CORS requests to SilverStripe's GraphQL server. Default is empty, indicating credentials are not included.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/02_cors.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nAllow-Credentials: 'true'\n```\n\n----------------------------------------\n\nTITLE: Example DOM Structure for Entwine\nDESCRIPTION: Illustrates a basic DOM structure used in examples to demonstrate how Entwine attaches methods to different DOM elements based on their selectors. It includes elements with classes and attributes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div class=\"internal_text\">Internal text</div>\n  <div class=\"attribute_text\" rel=\"Attribute text\"></div>\n  <div>Nonsense</div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: ORM Sort Method Update\nDESCRIPTION: `DataList::sort()` no longer accepts raw SQL. Use `DataList::orderBy()` for raw SQL sorting to reduce SQL injection risks. Passing null to `DataList::sort()` now clears existing sort values.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Basic Email Testing Implementation\nDESCRIPTION: Simple code snippet for testing email functionality using Silverstripe's Email class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/10_Email/index.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Email\\Email;\n\n$email = Email::create($from, $to, $subject, $body);\n$email->send();\n```\n\n----------------------------------------\n\nTITLE: Selective Composer Update\nDESCRIPTION: Command to update only the Silverstripe CMS recipe package without updating other dependencies.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/01_Keeping_projects_up_to_date.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update silverstripe/recipe-cms\n```\n\n----------------------------------------\n\nTITLE: Clickjacking Prevention Controller - PHP\nDESCRIPTION: Example showing how to prevent clickjacking attacks by adding X-Frame-Options header in a Silverstripe CMS controller.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n\nclass MyController extends Controller\n{\n    public function init()\n    {\n        parent::init();\n        $this->getResponse()->addHeader('X-Frame-Options', 'SAMEORIGIN');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing HTTP Method in SilverStripe GraphQL\nDESCRIPTION: This YAML configuration snippet demonstrates how to enforce strict HTTP methods in SilverStripe's GraphQL implementation, configuring the QueryHandlerInterface to use the POST method by default for all mutations. By setting 'httpMethod' to false, HTTPMethodMiddleware is disabled, allowing for non-POST requests for GraphQL mutations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/04_http_method_checking.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nSilverStripe\\GraphQL\\QueryHandler\\QueryHandlerInterface.default:\\n  class: SilverStripe\\GraphQL\\QueryHandler\\QueryHandler\\n  properties:\\n    Middlewares:\\n      httpMethod: false\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Plugins for Operations in SilverStripe GraphQL\nDESCRIPTION: This YAML configuration demonstrates how to override default plugins for specific operations on DataObject types.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/01_overview.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_graphql/models.yml\nPage:\n  operations:\n    read:\n      plugins:\n        readVersion: false\nApp\\PageType\\MyCustomPage:\n  operations:\n    read: true # has no readVersion plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxy IPs with Environment Variable in Silverstripe CMS\nDESCRIPTION: Sets up a comma-separated list of trusted proxy IP addresses that are allowed to use X-Forwarded headers using the SS_TRUSTED_PROXY_IPS environment variable.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nSS_TRUSTED_PROXY_IPS=\"127.0.0.1,192.168.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Field Configuration\nDESCRIPTION: Demonstrates configuring custom filter fields in GraphQL schema with a resolver\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/models.yml\nApp\\Model\\Product:\n  fields:\n      title: true\n      price: true\n  operations:\n    read:\n      plugins:\n        filter:\n          fields:\n            title: true\n            hasReviews: true\n          resolve:\n            hasReviews:\n              type: Boolean\n              resolver: ['App\\GraphQL\\Resolver\\ProductResolver', 'resolveHasReviewsFilter']\n```\n\n----------------------------------------\n\nTITLE: Getting All Session Values (PHP)\nDESCRIPTION: This code snippet illustrates how to retrieve all session values as an array using the `getAll()` method.  This is useful for debugging purposes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/02_Sessions.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$session->getAll();\n// returns an array of all the session values.\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Rewriting on Apache\nDESCRIPTION: Demonstrates how to rewrite request paths into parameters using Apache's mod_rewrite in Silverstripe CMS. This setup converts user-friendly URLs into parameters without linking directly to PHP files.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/16_Execution_Pipeline/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Apache\nCODE:\n```\n<IfModule mod_rewrite.c>\\n  RewriteEngine On\\n  RewriteBase /\\n  RewriteRule ^index\\\\.php$ - [L]\\n  RewriteCond %{REQUEST_FILENAME} !-f\\n  RewriteCond %{REQUEST_FILENAME} !-d\\n  RewriteRule . /index.php [L]\\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Conditional YAML Configuration Based on Module Existence\nDESCRIPTION: Demonstrates conditional configuration using Only/Except rules based on module existence.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\nOnly:\n  moduleexists: 'silverstripe/blog'\n---\nApp\\MyClass:\n  property: 'foo'\n\n---\nExcept:\n  moduleexists: 'silverstripe/blog'\n---\nApp\\MyClass:\n  property: 'bar'\n```\n\n----------------------------------------\n\nTITLE: Custom Search Form Template in Silverstripe\nDESCRIPTION: Defines a lightweight template for the search form with minimal markup structure. Includes basic fieldset and actions sections while maintaining form functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/02_Lightweight_Form.md#2025-04-21_snippet_1\n\nLANGUAGE: silverstripe\nCODE:\n```\n<%-- app/templates/Includes/SearchForm.ss -%>\n<form $FormAttributes>\n    <fieldset>\n        $Fields.dataFieldByName(q)\n    </fieldset>\n\n    <div class=\"Actions\">\n        <% loop $Actions %>$Field<% end_loop %>\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Absolute URL Redirections in SilverStripe YAML\nDESCRIPTION: Shows how to configure redirection rules for absolute URLs in SilverStripe's YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/04_Redirection.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'absolute-url1': '->//www.example.com'\n    'absolute-url2': '->https://www.example.com'\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Admin in YAML\nDESCRIPTION: These YAML snippets define the GraphQL schema for the admin interface, specifying the schema location and operations for the MyVersionedObject model.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Schema:\n  schemas:\n    admin:\n      src:\n        - app/_graphql\n```\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Model\\MyVersionedObject:\n  fields: '*'\n  operations:\n    readOne: true\n    rollback: true\n```\n\n----------------------------------------\n\nTITLE: HTML Panel Layout Structure Example\nDESCRIPTION: Example of a CMS content tools panel HTML structure showing the proper attributes and classes for border layout implementation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/03_CMS_Layout.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"cms-content-tools west cms-panel cms-panel-layout\"\n    data-expandOnClick=\"true\"\n    data-layout-type=\"border\"\n    id=\"cms-content-tools-CMSMain\">\n    <!-- content utilising border's north, south, east, west and center classes -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Interface Assignment\nDESCRIPTION: Outlines how interfaces are applied to GraphQL queries, both root and nested, ensuring that types are correctly updated with generated interfaces. The transition from a type to an interface allows for type-safe operations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  readPages: [Page]\n}\n\ntype BlogPage {\n  download: File\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  readPages: [PageInterface]\n}\n\ntype BlogPage {\n  download: FileInterface\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Rendering with WebP Support\nDESCRIPTION: Example of how to customize image rendering to provide a WebP version of any image on the site using the new image rendering template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.3.0-beta1.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<picture>\n    <source srcset=\"$Convert('webp').Link\" type=\"image/webp\">\n    <img $AttributesHTML >\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom TinyMCE Plugins in Silverstripe CMS (PHP)\nDESCRIPTION: This code shows how to enable custom TinyMCE plugins in Silverstripe CMS. It demonstrates adding a custom plugin named 'myplugin' and specifying its JavaScript file location.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\nTinyMCEConfig::get('cms')->enablePlugins(['myplugin' => 'app/javascript/myplugin/editor_plugin.js']);\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Style Dropdown\nDESCRIPTION: PHP configuration to enable the custom style dropdown using the importcss plugin in TinyMCE editor.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/05_Typography.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\n\nTinyMCEConfig::get('cms')\n    ->addButtonsToLine(1, 'styles')\n    ->setOption('importcss_append', true);\n```\n\n----------------------------------------\n\nTITLE: Loading Lightweight PJAX Fragments in JavaScript\nDESCRIPTION: This code snippet demonstrates how to load lightweight PJAX fragments using the `loadFragment` method. This method updates a small area in the CMS without triggering a browser history pushState.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// You can use this if you use @silverstripe/webpack-config\nimport { joinUrlPaths } from 'lib/urls';\n\n$('.cms-container').loadFragment(joinUrlPaths(ss.config.adminUrl, 'foobar/'), 'Fragment1');\n$('.cms-container').loadFragment(joinUrlPaths(ss.config.adminUrl, 'foobar/'), 'Fragment2');\n$('.cms-container').loadFragment(joinUrlPaths(ss.config.adminUrl, 'foobar/'), 'Fragment3');\n```\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Map Object in SilverStripe\nDESCRIPTION: Alternative approach to create a Map object directly using the new keyword, specifying ID as the key and FirstName as the value.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/03_Lists.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$membersMap = new Map(Member::get(), 'ID', 'FirstName');\n```\n\n----------------------------------------\n\nTITLE: Email Redirection Configuration\nDESCRIPTION: Configuration for redirecting emails in different environments using PHP.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/10_Email/index.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse SilverStripe\\Control\\Director;\nuse SilverStripe\\Control\\Email\\Email;\nuse SilverStripe\\Core\\Config\\Config;\n\nif (Director::isLive()) {\n    Config::modify()->set(Email::class, 'bcc_all_emails_to', 'client@example.com');\n} else {\n    Config::modify()->set(Email::class, 'send_all_emails_to', 'developer@example.com');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CanonicalURLMiddleware for Trailing Slashes in YML\nDESCRIPTION: This YAML configuration disables the trailing slash enforcement for the CanonicalURLMiddleware in SilverStripe, allowing for custom URL handling.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Middleware\\CanonicalURLMiddleware:\n    properties:\n      enforceTrailingSlashConfig: false\n```\n\n----------------------------------------\n\nTITLE: Disabling CSRF Middleware for Token-Based Authentication\nDESCRIPTION: Configuration to disable CSRF protection when using alternative authentication methods like OAuth or JWT. Targets the default GraphQL query handler and sets CSRF middleware to false.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/03_csrf_protection.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\GraphQL\\QueryHandler\\QueryHandlerInterface.default:\n    class: SilverStripe\\GraphQL\\QueryHandler\\QueryHandler\n    properties:\n      Middlewares:\n        csrf: false\n```\n\n----------------------------------------\n\nTITLE: Filtering Sensitive Arguments in Backtraces (YAML)\nDESCRIPTION: This snippet shows how to filter sensitive arguments from error stack traces in Silverstripe by configuring the 'SilverStripe\\Dev\\Backtrace' class. It uses the 'ignore_function_args' array to specify functions or class methods whose arguments should be filtered out and replaced with '<filtered>', mitigating information leaks in logs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_10\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Dev\\Backtrace:\\n  ignore_function_args:\\n    - 'some_php_function'\\n    - ['App\\MyClass', 'someMethod']\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Default Records in SilverStripe\nDESCRIPTION: Shows how to define static default records that will be created during dev/build using the $default_records property.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Dynamic_Default_Fields.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Region extends DataObject\n{\n    private static $db = [\n        'Title' => 'Varchar(45)',\n    ];\n\n    private static $default_records = [\n        ['Title' => 'Auckland'],\n        ['Title' => 'Coromandel'],\n        ['Title' => 'Waikato'],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension via PHP\nDESCRIPTION: Alternative PHP configuration to apply the MyMemberExtension using the _config.php file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/01_Extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Extension\\MyMemberExtension;\nuse SilverStripe\\Security\\Member;\n\nMember::add_extension(MyMemberExtension::class);\n```\n\n----------------------------------------\n\nTITLE: Complex CSV Data Structure\nDESCRIPTION: Example of a more complex CSV data structure with multiple fields and relationships.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/00_CSV_Import.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"Number\",\"Name\",\"Birthday\",\"Team\"\n11,\"John Doe\",1982-05-12,\"FC Bayern\"\n12,\"Jane Johnson\", 1982-05-12,\"FC Bayern\"\n13,\"Jimmy Dole\",,\"Schalke 04\"\n```\n\n----------------------------------------\n\nTITLE: Setting XHTML Doctype in TinyMCE\nDESCRIPTION: PHP code to configure TinyMCE to use XHTML format for markup generation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\nTinyMCEConfig::get('cms')->setOption('element_format', 'xhtml');\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Error Codes in ErrorPage\nDESCRIPTION: Configure a limited set of HTTP error codes displayed in the CMS dropdown for ErrorPage configuration\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\ErrorPage\\ErrorPage:\n  allowed_error_codes:\n    - 400\n    - 403\n    - 404\n    - 500\n```\n\n----------------------------------------\n\nTITLE: Configuring Autologin Token Regeneration in YAML\nDESCRIPTION: Configuration to disable regeneration of autologin tokens during session renewal. This change can prevent unexpected logouts in certain situations. The configuration will be removed in Silverstripe 6.0, where tokens will never be regenerated during session renewal.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.3.0-rc1.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Security\\RememberLoginHash:\n  replace_token_during_session_renewal: false\n```\n\n----------------------------------------\n\nTITLE: Using resourceURL() in SilverStripe Templates\nDESCRIPTION: Shows how to use the resourceURL() helper method in SilverStripe templates to get resources from specific themes, app directory, or modules.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_11\n\nLANGUAGE: ss\nCODE:\n```\n<img src=\"$resourceURL('app/images/my-image.jpg')\">\n<img src=\"$resourceURL('my/module:images/my-image.jpg')\">\n<img src=\"$resourceURL('themes/simple/images/my-image.jpg')\">\n<img src=\"$resourceURL('themes/simple/images')/$Image.jpg\">\n```\n\n----------------------------------------\n\nTITLE: Basic Silverstripe Template File Extension\nDESCRIPTION: Example showing the basic file extension (.ss) used for Silverstripe CMS template files. These files can contain HTML, XML, JSON or other markup languages along with template variables and logic controls.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/index.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.ss\n```\n\n----------------------------------------\n\nTITLE: Routing Custom GraphQL Server with Director\nDESCRIPTION: This YAML configuration establishes a routing rule in the Director for the custom GraphQL endpoint created in the previous snippet, which allows access to the GraphQL server via the specified URL.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/01_activating_the_server.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'my-graphql': '%$SilverStripe\\GraphQL\\Controller.myNewSchema'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic DataObject Ownership in PHP\nDESCRIPTION: Example shows how to set up ownership relationships between a MyPage class and Banner objects using the owns configuration property.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse App\\Model\\Banner;\nuse Page;\n\nclass MyPage extends Page\n{\n    private static $has_many = [\n        'Banners' => Banner::class,\n    ];\n\n    private static $owns = [\n        'Banners',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Eager Loading in Silverstripe PHP\nDESCRIPTION: Demonstrates how to use the new eagerLoad() method to optimize database queries when dealing with nested relationships, reducing the number of SQL SELECT queries executed.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.1.0-beta1.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Regular ORM usage without eager loading\n// This would result in 21 SQL SELECT queries, 1 for Teams and 20 for Players\n$teams = Team::get();\n\n// Using the `eagerLoad()` method to eager load data from nested models (up to 3 relations deep)\n// This will result in only 2 SQL SELECT queries, 1 for Teams and 1 for Players\n$teams = Team::get()->eagerLoad('Players');\n\nforeach ($teams as $team) {\n    foreach ($team->Players() as $player) {\n        echo $player->FirstName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Logger Implementation\nDESCRIPTION: Example of implementing logger through dependency injection in a controller class using Injector configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse Psr\\Log\\LoggerInterface;\nuse SilverStripe\\Control\\Controller;\n\nclass MyController extends Controller\n{\n    private static $dependencies = [\n        'Logger' => '%$' . LoggerInterface::class,\n    ];\n\n    /**\n     * This will be set automatically, as long as MyController is instantiated via Injector\n     *\n     * @var LoggerInterface\n     */\n    protected $logger;\n\n    protected function init()\n    {\n        $this->logger->debug('MyController::init() called');\n        parent::init();\n    }\n\n    /**\n     * @param LoggerInterface $logger\n     * @return $this\n     */\n    public function setLogger(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating React Router Path Configuration\nDESCRIPTION: Example of updating route path configuration to use relative paths with the new reactRoutePath property from LeftAndMain::getClientConfig()\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigHelpers from 'lib/Config';\nimport reactRouteRegister from 'lib/ReactRouteRegister';\nimport MyAdmin from './MyAdmin';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const sectionConfig = ConfigHelpers.getSection('MyAdmin');\n    reactRouteRegister.add({\n-         path: sectionConfig.url,\n+         path: sectionConfig.reactRoutePath,\n        component: MyAdminComponent,\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Silverstripe CMS Changelog in Markdown\nDESCRIPTION: This snippet demonstrates the structure and formatting of a changelog for Silverstripe CMS packages. It includes package names, version numbers, commit hashes, dates, commit messages, and authors.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n### Documentation {#changelog-documentation}\n\n- silverstripe/recipe-plugin (2.0.1 -> 2.1.0-rc1)\n  - 2024-11-27 [ed3f434](https://github.com/silverstripe/recipe-plugin/commit/ed3f43455bea381ddfcce3db035dade03eea4273) Remove campaign-admin reference (Steve Boyd)\n\n- silverstripe/framework (5.3.0 -> 5.4.0-rc1)\n  - 2025-01-22 [338f0d96c](https://github.com/silverstripe/silverstripe-framework/commit/338f0d96c3552405b33b157e024002f4cfe1a2d6) Updates example to use current code (David Toews)\n  - 2025-01-08 [b481546f6](https://github.com/silverstripe/silverstripe-framework/commit/b481546f60602d0d920a2c0c12ff41d5805957d1) `Remove \"deprecated\" note from PHPDoc for not-deprecated method (#11537)` (Guy Sartorelli)\n\n- silverstripe/admin (2.3.0 -> 2.4.0-rc1)\n  - 2024-11-06 [663b7d00](https://github.com/silverstripe/silverstripe-admin/commit/663b7d002c157bd751f12c979f4e22d71b217711) Remove whitespace (Chris Lock)\n  - 2024-11-05 [8141da25](https://github.com/silverstripe/silverstripe-admin/commit/8141da252fe0d00a60995bf30bef06c98319fdaa) Change to suggested comment to make clearer (Chris Lock)\n  - 2024-11-04 [c59c64b3](https://github.com/silverstripe/silverstripe-admin/commit/c59c64b3f67c33651eb3b6743213db3eddf52604) Should be true to ignore (Chris Lock)\n  - 2024-11-04 [f6145372](https://github.com/silverstripe/silverstripe-admin/commit/f61453725d9e174668859cb3b644b535eec24749) Removing unecessary PHPDoc and adding context (Chris Lock)\n\n- silverstripe/userforms (6.3.0 -> 6.4.0-rc1)\n  - 2024-11-14 [8237537](https://github.com/silverstripe/silverstripe-userforms/commit/82375373f81b4157ca6a24b2cb7400f645c3e67f) fix and adjust links based on contribution guidelines (isoeli)\n  - 2024-10-24 [a477a91](https://github.com/silverstripe/silverstripe-userforms/commit/a477a917c0c13be77562cef25ba27f2666b57cff) fix and clean up documentation links (isoeli)\n\n- silverstripe/developer-docs (5.3.0 -> 5.4.0-rc1)\n  - 2025-03-12 [b642ab21](https://github.com/silverstripe/developer-docs/commit/b642ab21ef9fdb3e51f902e2781c6679dcf959a0) Document deprecating TotalItems() (#716) (Guy Sartorelli)\n  - 2025-03-11 [965f1b3d](https://github.com/silverstripe/developer-docs/commit/965f1b3d7758df294cfb9adecdaa7d33da018449) Document API deprecations for TinyMCE migration (#713) (Guy Sartorelli)\n  - 2025-03-11 [ec267e7c](https://github.com/silverstripe/developer-docs/commit/ec267e7c7a521b43066ef21610b8e5ff7713ecd7) Specify that static methods should be above the constructor (Steve Boyd)\n```\n\n----------------------------------------\n\nTITLE: SilverStripeNavigator Implementation\nDESCRIPTION: Demonstrates how to add the SilverStripeNavigator for CMS users, providing functionality for content authors.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_21\n\nLANGUAGE: ss\nCODE:\n```\n<% if $HasPerm('CMS_ACCESS') %>$SilverStripeNavigator<% end_if %>\n```\n\n----------------------------------------\n\nTITLE: Applying Sudo Mode to React Components\nDESCRIPTION: JavaScript code showing how to transform a React component with the WithSudoMode Higher-Order-Component to require sudo mode verification before rendering.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/04_Sudo_Mode.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport WithSudoMode from 'containers/SudoMode/SudoMode';\n\nInjector.transform('MyComponentWithSudoMode', (updater) => {\n  updater.component('MyComponent', WithSudoMode);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Player Class with has_one Relationship in SilverStripe\nDESCRIPTION: Example showing how to define a Player class with a has_one relationship to Team.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $has_one = [\n        'Team' => Team::class,\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Bookmarked Pages in Silverstripe Template\nDESCRIPTION: This Silverstripe template snippet replaces the hardcoded links with a dynamic loop that iterates through the bookmarked pages.  It displays the title and a link to edit each bookmarked page in the CMS.  Relies on the `getBookmarkedPages()` method from the LeftAndMainExtension.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_8\n\nLANGUAGE: ss\nCODE:\n```\n<ul class=\"cms-menu__list\">\n    <!-- ... -->\n    <% loop $BookmarkedPages %>\n    <li class=\"bookmarked-link $FirstLast\">\n        <li><a href=\"$AdminURL('pages/edit/show/$ID')\">Edit \"$Title\"</a></li>\n    </li>\n    <% end_loop %>\n</ul>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Size Presets in TinyMCE\nDESCRIPTION: YAML configuration for setting default image size presets in TinyMCE editor.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig:\n  image_size_presets:\n    - name: widesize\n      i18n: SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig.WIDE_SIZE\n      text: Wide size\n      width: 900\n```\n\n----------------------------------------\n\nTITLE: Disabling Pagination Globally\nDESCRIPTION: Demonstrates how to disable pagination for all DataObject operations\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/config.yml\nmodelConfig:\n  DataObject:\n    operations:\n      read:\n        plugins:\n          paginateList: false\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs in SilverStripe Templates\nDESCRIPTION: Shows how to implement breadcrumb navigation using the built-in Breadcrumbs variable.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_20\n\nLANGUAGE: ss\nCODE:\n```\n$Breadcrumbs\n```\n\n----------------------------------------\n\nTITLE: Property Visibility and Accessor Pattern\nDESCRIPTION: Shows the recommended pattern for property visibility and accessor methods with fluent interface support.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/05_Coding_Conventions/01_PHP_Coding_Conventions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprivate $value;\n\npublic function getValue()\n{\n    return $this->value;\n}\n\npublic static function setValue($value)\n{\n    $this->value = $value;\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Using MultipleOf in SilverStripe Templates\nDESCRIPTION: Demonstrates how to use the $MultipleOf variable to add a line break after every third item in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_13\n\nLANGUAGE: ss\nCODE:\n```\n<% loop $Children %>\n    ...\n    <% if $MultipleOf(3) %>\n        <br>\n    <% end_if %>\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Template Resource URLs\nDESCRIPTION: The `$ThemeDir` variable has been removed. Use `$themedResourceURL()` for cascading themes and `$resourceURL()` for specific themes or module resources when constructing URLs in templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_14\n\nLANGUAGE: ss\nCODE:\n```\n<img src=\"$themedResourceURL('images/my-image.jpg')\">\n<img src=\"$themedResourceURL('images')/$Image.jpg\">\n```\n\nLANGUAGE: ss\nCODE:\n```\n<img src=\"$resourceURL('app/images/my-image.jpg')\">\n<img src=\"$resourceURL('my/module:images/my-image.jpg')\">\n<img src=\"$resourceURL('themes/simple/images/my-image.jpg')\">\n<img src=\"$resourceURL('themes/simple/images')/$Image.jpg\">\n```\n\n----------------------------------------\n\nTITLE: Install Silverstripe Module\nDESCRIPTION: Adds a new module to an existing Silverstripe CMS project\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require silverstripe/blog\n```\n\n----------------------------------------\n\nTITLE: Configuring Access-Control-Allow-Headers in SilverStripe GraphQL (YAML)\nDESCRIPTION: Specifies the CORS request headers that the SilverStripe GraphQL server will accept, beyond the default 'Authorization' and 'Content-Type'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/02_cors.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nAllow-Headers: 'Authorization, Content-Type, Content-Language'\n```\n\n----------------------------------------\n\nTITLE: Accessing SiteConfig Variables in Templates\nDESCRIPTION: Shows how to access SiteConfig variables in Silverstripe templates using the $SiteConfig variable.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/01_SiteConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n$SiteConfig.Title\n$SiteConfig.Tagline\n\n<% with $SiteConfig %>\n    $Title $AnotherField\n<% end_with %>\n```\n\n----------------------------------------\n\nTITLE: Registering GeocodableQueryPlugin in YAML\nDESCRIPTION: This YAML configuration registers both GeocodableModelPlugin and GeocodableQueryPlugin with the SilverStripe Injector.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/03_writing_a_complex_plugin.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\GraphQL\\Schema\\Registry\\PluginRegistry:\n    constructor:\n      - 'App\\GraphQL\\Plugin\\GeocodableModelPlugin'\n      - 'App\\GraphQL\\Plugin\\GeocodableQueryPlugin'\n```\n\n----------------------------------------\n\nTITLE: Getting Current Preview Size in SilverStripe CMS using JavaScript\nDESCRIPTION: This JavaScript snippet shows how to retrieve the current preview size name in SilverStripe CMS using the entwine API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n$('.cms-preview').entwine('.ss.preview').getCurrentSizeName();\n```\n\n----------------------------------------\n\nTITLE: Check Composer Installation\nDESCRIPTION: Basic command to verify Composer is installed and accessible from command line\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer help\n```\n\n----------------------------------------\n\nTITLE: Configuring oEmbed Sandboxing Exclusions in Silverstripe CMS\nDESCRIPTION: YAML configuration to exclude specific domains from oEmbed sandboxing in Silverstripe CMS. This can be used when sandboxing interferes with embeds from certain domains, such as YouTube.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\View\\Shortcodes\\EmbedShortcodeProvider:\n  domains_excluded_from_sandboxing:\n    - 'youtube.com'\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote to Git Repository in Silverstripe CMS\nDESCRIPTION: This Git command adds an 'upstream' remote to the original repository location, allowing developers to rebase or merge their fork as required.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd cms\ngit remote add -f upstream git://github.com/silverstripe/silverstripe-cms.git\n```\n\n----------------------------------------\n\nTITLE: Using Aggregates in GraphQL Field Definitions\nDESCRIPTION: This section shows the use of aggregate functions in GraphQL fields, mapping properties like 'productCount' to aggregate counts and averages for a ProductCategory model.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/06_property_mapping.md#2025-04-21_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n\"# app/_graphql/models.yml\\nApp\\Model\\ProductCategory:\\n  fields:\\n    title: true\\n    productCount:\\n      type: Int\\n      property: 'Products.Count()'\\n    averageProductPrice:\\n      type: Float\\n      property: 'Products.Avg(Price)'\"\n```\n\n----------------------------------------\n\nTITLE: Looping in Silverstripe CMS Templates\nDESCRIPTION: Shows how to use the loop tag to iterate over collections in Silverstripe CMS templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_5\n\nLANGUAGE: ss\nCODE:\n```\n<h1>Children of $Title</h1>\n<ul>\n    <% loop $Children %>\n        <li>$Title</li>\n    <% end_loop %>\n</ul>\n\n<% loop $MyLists %>\n  <% loop %>\n      This is looping over each of the collections that are contained inside the \\$MyLists collection.\n  <% end_loop %>\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Converting Files with PHP in Silverstripe CMS\nDESCRIPTION: Example showing how to convert an image to WebP format and apply size manipulation using the new high-level file conversion API in PHP.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.3.0.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Convert an image to webp format and apply the FitMax manipulation to the result\n$this->MyImage()->Convert('webp')->FitMax(100, 100);\n```\n\n----------------------------------------\n\nTITLE: Registering React Router in PHP\nDESCRIPTION: This code snippet demonstrates how to register a React router in a Silverstripe CMS section by overriding the `getClientConfig()` method in a PHP class. The `reactRouter` flag is set to `true` to indicate that the section is controlled by React, and thus a page.js route should not be registered.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n```php\nnamespace App\\Admin;\n\nuse SilverStripe\\Admin\\LeftAndMain;\n\nclass MyAdmin extends LeftAndMain\n{\n    // ...\n\n    public function getClientConfig()\n    {\n        return array_merge(parent::getClientConfig(), [\n            'reactRouter' => true,\n        ]);\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Modified Configuration in Silverstripe CMS\nDESCRIPTION: Shows how to access configuration values after they have been modified by YAML, demonstrating the merging of values.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\MyClass;\n\n// prints false\necho MyClass::config()->get('option_one');\n\n// prints 'Foo, Bar, Baz'\necho implode(', ', MyClass::config()->get('option_two'));\n```\n\n----------------------------------------\n\nTITLE: Querying DataObject using get_one() in Silverstripe CMS 5\nDESCRIPTION: Example of using the new get_one() method directly on DataObject subclasses without passing the class name as the first argument. This allows for more concise querying of single objects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nSiteTree::get_one(filter: ['Title:startsWith' => 'About'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware in YAML\nDESCRIPTION: Shows how to configure a global middleware that will be executed on every request using YAML configuration. It demonstrates adding the middleware to the Director's Middlewares property.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/05_Middlewares.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_config/middlewares.yml\n---\nName: myrequestprocessors\nAfter:\n  - requestprocessors\n---\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Director:\n    properties:\n      Middlewares:\n        CustomMiddleware: '%$App\\Middleware\\CustomMiddleware'\n```\n\n----------------------------------------\n\nTITLE: AllChildren Loop in SilverStripe Templates\nDESCRIPTION: Demonstrates looping over all child pages regardless of their ShowInMenus status. Unlike Children and Menu loops, this ignores the ShowInMenus preference.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_15\n\nLANGUAGE: ss\nCODE:\n```\n<% loop $AllChildren %>\n    ...\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Queue Constant Retrieval\nDESCRIPTION: Static method to obtain the correct queue constant from a string or integer input.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nAbstractQueuedJob::getQueue()\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Integer Width Schema Behavior in Silverstripe CMS\nDESCRIPTION: YAML configuration to control how Silverstripe CMS handles the integer width attribute in MySQL schema. This setting helps resolve schema rebuilding issues when working with MySQL 8.0.17+ and MariaDB databases that have different behaviors for reporting integer width attributes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/00_Server_Requirements.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\ORM\\Connect\\MySQLSchemaManager:\n    schema_use_int_width: true # or false when INT widths should be ignored\n```\n\n----------------------------------------\n\nTITLE: Configuring Member Extension in YAML\nDESCRIPTION: YAML configuration to apply the MyMemberExtension to the SilverStripe Member class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/How_Tos/03_Track_member_logins.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Security\\Member:\n  extensions:\n    - App\\Extension\\MyMemberExtension\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Autocomplete in Silverstripe CMS\nDESCRIPTION: This PHP snippet uses Silverstripe's HTTPResponse and ViewableData classes to handle AJAX requests for an autocomplete functionality. It returns search results based on a query parameter ('title') and uses custom templates for rendering.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\\n\\nuse Page;\\nuse SilverStripe\\Control\\HTTPResponse;\\nuse SilverStripe\\View\\ViewableData;\\n\\nclass MyController\\n{\\n    private static $url_segment = 'my_controller';\\n    // ...\\n\\n    public function autocomplete($request)\\n    {\\n        $results = Page::get()->filter('Title', $request->getVar('title'));\\n        if (!$results) {\\n            return HTTPResponse::create('Not found', 404);\\n        }\\n\\n        // Use HTTPResponse to pass custom status messages\\n        $this->getResponse()\\n        ->setStatusCode(200)\\n        ->addHeader('X-Status', 'Found ' . $results->Count() . ' elements');\\n\\n        // render all results with a custom template\\n        $vd = ViewableData::create();\\n        return $vd->customise([\\n            'Results' => $results,\\n        ])->renderWith('AutoComplete');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Methods for DOM elements\nDESCRIPTION: Attaches methods to DOM nodes by calling the `entwine` function on a jQuery selector object, passing an object listing the method names and bodies. Methods are available to any element matching the selector.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n$('div').entwine({\n  foo(args) {\n    // Some logic here\n  },\n\n  bar(args) {\n    // Some logic here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Module Dependency Configuration\nDESCRIPTION: Shows how to specify multiple module dependencies in YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/04_Configuration/00_Configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\nOnly:\n  moduleexists:\n    - 'silverstripe/blog'\n    - 'silverstripe/lumberjack'\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Asset Store Extension\nDESCRIPTION: This YAML snippet demonstrates how to enable a custom extension for the FlysystemAssetStore in Silverstripe, allowing for additional custom behavior to be applied to file responses.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_12\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Assets\\Flysystem\\FlysystemAssetStore:\n  extensions:\n    - App\\Extension\\AssetStoreExtension\n```\n\n----------------------------------------\n\nTITLE: Using Linking Modes in Silverstripe CMS Templates\nDESCRIPTION: Shows how to use isSection and isCurrent variables in Silverstripe CMS templates to determine the current page state when looping through menu items.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_9\n\nLANGUAGE: ss\nCODE:\n```\n<% if $isCurrent %>\n    $Title\n<% else %>\n    <a href=\"$Link\">$Title</a>\n<% end_if %>\n\n<a class=\"<% if $isCurrent %>current<% else_if $isSection %>section<% end_if %>\" href=\"$Link\">$MenuTitle</a>\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Class Relocations and Namespace Changes\nDESCRIPTION: Details the movement of SilverStripe Navigator related classes from cms module to admin and versioned-admin modules, including namespace changes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nSilverStripe\\CMS\\Controllers\\SilverStripeNavigator -> SilverStripe\\Admin\\Navigator\\SilverStripeNavigator\nSilverStripe\\CMS\\Controllers\\SilverStripeNavigatorItem -> SilverStripe\\Admin\\Navigator\\SilverStripeNavigatorItem\nSilverStripe\\CMS\\Controllers\\SilverStripeNavigatorItem_Unversioned -> SilverStripe\\Admin\\Navigator\\SilverStripeNavigatorItem_Unversioned\n```\n\n----------------------------------------\n\nTITLE: Registering GeocodableModelPlugin in YAML\nDESCRIPTION: This YAML configuration registers the GeocodableModelPlugin with the SilverStripe Injector.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/03_writing_a_complex_plugin.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\GraphQL\\Schema\\Registry\\PluginRegistry:\n    constructor:\n      - 'App\\GraphQL\\Plugin\\GeocodableModelPlugin'\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Handling Events from Other Elements\nDESCRIPTION: Illustrates the HTML structure required to handle events from one element on another. A link element's click event triggers a style change on the div element.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a>The click event for this element will be handled by the div!</a>\n<div class='green'>Will have green text when the link is clicked on.</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Module DataObject with Title Grouping\nDESCRIPTION: Defines a Module DataObject class with a Title field and method to get first letter for grouping purposes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Grouping_DataObject_Sets.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Module extends DataObject\n{\n    private static $db = [\n        'Title' => 'Text',\n    ];\n\n    /**\n     * Returns the first letter of the module title, used for grouping.\n     * @return string\n     */\n    public function getTitleFirstLetter()\n    {\n        return $this->Title[0];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ErrorPageController Return Type Change\nDESCRIPTION: Change of return type for handleRequest method in ErrorPageController from dynamic to HTTPResponse type for better type safety.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nErrorPageController::handleRequest(): HTTPResponse\n```\n\n----------------------------------------\n\nTITLE: Configuring DataList ID Filter Optimization\nDESCRIPTION: YAML configuration to disable the optimization of DataList queries when filtering against ID lists by enabling placeholders for integer IDs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.1.0-beta1.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\ORM\\DataList:\n  use_placeholders_for_integer_ids: true\n```\n\n----------------------------------------\n\nTITLE: Setting up Git remotes for Silverstripe contribution\nDESCRIPTION: Add a Git remote for your fork of the Silverstripe module you're contributing to.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/01_Code.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd vendor/<org>/<module>\ngit remote add pr git@github.com:<your-github-user>/<the-repo-name>.git\n```\n\n----------------------------------------\n\nTITLE: Setting Up Generic Typehints in ContentController Base Class in PHP\nDESCRIPTION: Shows how to configure the base PageController class with a generic template type to extend ContentController. This establishes the foundation for more specific controller type hinting.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace {\n\n    use SilverStripe\\CMS\\Controllers\\ContentController;\n\n    /**\n     * @template T of Page\n     * @extends ContentController<T>\n     */\n    class PageController extends ContentController\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Production Build Command\nDESCRIPTION: Command to build JavaScript and CSS files in production mode.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/06_Build_Tooling.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Disabling Asset Control Extension\nDESCRIPTION: This YAML configuration snippet demonstrates how to globally disable the AssetControl extension in Silverstripe, allowing for different asset management behavior during object archiving.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\ORM\\DataObject:\n  AssetControl: null\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Address Anonymization in Silverstripe Session Manager\nDESCRIPTION: Configuration to enable anonymization of stored IP addresses in the Session Manager for enhanced privacy and compliance with data protection regulations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\SessionManager\\Models\\LoginSession:\n  anonymize_ip: true\n```\n\n----------------------------------------\n\nTITLE: Sorting List Items in SilverStripe Templates\nDESCRIPTION: Demonstrates how to sort a list of children by title in ascending order using the Sort method in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_6\n\nLANGUAGE: ss\nCODE:\n```\n<ul>\n    <% loop $Children.Sort('Title', 'ASC') %>\n        <li>$Title</li>\n    <% end_loop %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Inheritance Field Exposure in YAML\nDESCRIPTION: Illustrates how fields are defined in a YAML configuration for data types to expose their properties. Inheritance causes exposure of ancestral fields, creating a Page type with shared properties.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\PageType\\BlogPage:\n  fields:\n    title: true\n    content: true\n    date: true\n\nApp\\PageType\\GalleryPage:\n  fields:\n    images: true\n    urlSegment: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Elemental Search Rendering in YAML\nDESCRIPTION: YAML configuration to disable rendering of elements for CMS search, improving performance for pages with elemental content blocks. This opt-in feature extracts database contents from text and html fields instead of rendering all content blocks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.1.0.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nDNADesign\\Elemental\\Controllers\\ElementSiteTreeFilterSearch:\n  render_elements: false\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with Custom Properties in SilverStripe\nDESCRIPTION: Shows how to create an object with specific property values by passing an array as the third argument to createObject().\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Test\\Team;\n\n$obj = $factory->createObject(Team::class, 'hurricanes', [\n    'Name' => 'My Value',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Exposure in composer.json\nDESCRIPTION: Example configuration for exposing static resources in a Silverstripe CMS project's composer.json file. Defines custom resources directory and exposed paths.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"app/myproject\",\n    ...\n    \"extra\": {\n        \"resources-dir\": \"_my-custom-resources-dir\",\n        \"expose\": [\n            \"app/client/dist\",\n            \"app/client/lang\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GridField Placeholder Text Configuration\nDESCRIPTION: Methods to customize the placeholder text in GridFieldFilterHeader search fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nGridFieldFilterHeader::setPlaceHolderText()\nGridFieldFilterHeader::getPlaceHolderText()\n```\n\n----------------------------------------\n\nTITLE: Configuring TreeDropdownField Search Filter in Silverstripe YAML\nDESCRIPTION: Sets the search filter for TreeDropdownField to 'StartsWith' to improve performance with large datasets. This configuration can significantly enhance the performance of features like the 'Insert Link' in TinyMCE WYSIWYG editor.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/06_ORM.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Forms\\TreeDropdownField:\n  search_filter: 'StartsWith'\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit Test Coverage Exclusions in Silverstripe CMS\nDESCRIPTION: XML configuration for PHPUnit to exclude certain directories (like third-party code) from code coverage reports in a Silverstripe CMS project.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/index.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<filter>\n    <blacklist>\n        <directory suffix=\".php\">vendor/silverstripe/framework/dev/</directory>\n        <directory suffix=\".php\">vendor/silverstripe/framework/thirdparty/</directory>\n        <directory suffix=\".php\">vendor/silverstripe/cms/thirdparty/</directory>\n\n        <!-- Add your custom rules here -->\n        <directory suffix=\".php\">app/thirdparty/</directory>\n    </blacklist>\n</filter>\n```\n\n----------------------------------------\n\nTITLE: Example Translation Table in Javascript\nDESCRIPTION: This snippet demonstrates the structure of an example translation table (e.g., `de.js`) for i18n in JavaScript. It adds translations to the `ss.i18n` object for a specific locale using `ss.i18n.addDictionary`. This table complements the distribution table for locale-specific translations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nss.i18n.addDictionary('de', {\n  'MYMODULE.MYENTITY': 'Artikel wirklich lÃ¶schen?'\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Warnings in Environment Configuration\nDESCRIPTION: Shows how to enable deprecation warnings using environment variables in .env file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/20_Deprecations/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSS_DEPRECATION_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Configuring RememberLoginHash Across Devices\nDESCRIPTION: The YAML configuration snippet restores the behavior of removing 'remember me' tokens across all devices on user logout. This setting is crucial for maintaining the desired session termination behavior after logging out. It requires the Silverstripe Security module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/03_Managing_Sessions.md#2025-04-21_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n---\nName: myproject-rememberloginhash\nAfter:\n  - '#session-manager-rememberloginhash'\n---\nSilverStripe\\Security\\RememberLoginHash:\n  logout_across_devices: true\n\n```\n\n----------------------------------------\n\nTITLE: Setting Protected Assets Path in Silverstripe CMS Environment\nDESCRIPTION: Environment variable configuration to move the protected assets folder outside the public web directory for enhanced security. This prevents accidental exposure of protected files and forces access via PHP.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/00_Server_Requirements.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# This will be inside your project root, along-side the public/ directory\nSS_PROTECTED_ASSETS_PATH=\"../.protected/\"\n```\n\n----------------------------------------\n\nTITLE: Installing a Development Version of a Silverstripe CMS Module\nDESCRIPTION: This command installs a development version of a module from its main branch using Composer. The --prefer-source option ensures it's installed directly from GitHub with the git repository intact.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/00_Modules.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require my_vendor/module_name:dev-main --prefer-source\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields to Ignore in DBFieldTypes Plugin\nDESCRIPTION: Configuration example for specifying enum fields to be ignored by the dbFieldTypes plugin. This is used for fields like 'ClassName' on DataObjects to prevent inheritance issues.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_graphql/config.yml\nmodelConfig:\n  DataObject:\n    plugins:\n      dbFieldTypes:\n        ignore:\n          MyType:\n            myEnumField: true\n```\n\n----------------------------------------\n\nTITLE: ChildrenOf Loop in SilverStripe Templates\nDESCRIPTION: Shows how to loop over children of a specific page identified by URL segment. Useful for listing child pages independent of current page context.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_14\n\nLANGUAGE: ss\nCODE:\n```\n<% loop $ChildrenOf('<my-page-url-segment>') %>\n\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Updating Method Return Types in Elemental Module for PHP\nDESCRIPTION: Changes to return types for methods in the DNADesign\\Elemental\\TopPage\\DataExtension class. The return type is changed from Page|null to SilverStripe\\CMS\\Model\\SiteTree|null.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n// Changed return types\nDNADesign\\Elemental\\TopPage\\DataExtension::getTopPage(): SilverStripe\\CMS\\Model\\SiteTree|null\nDNADesign\\Elemental\\TopPage\\DataExtension::getTopPageFromCachedData(): SilverStripe\\CMS\\Model\\SiteTree|null\n```\n\n----------------------------------------\n\nTITLE: Creating an Example Record in PHP\nDESCRIPTION: This PHP snippet presents an example of how to create a record for the 'Country' type with 'code' and 'name' values. This format is important for understanding how data will be structured in relation to the defined YAML type.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/01_creating_a_generic_type.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"[\\n    'code' => 'bt',\\n    'name' => 'Bhutan',\\n]\"\n```\n\n----------------------------------------\n\nTITLE: Outputting Unique Key in SilverStripe Template\nDESCRIPTION: Simple template variable to output a unique key for a DataObject. Used for generating unique IDs in HTML or cache keys without exposing database IDs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/10_Unique_Keys.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n$UniqueKey\n```\n\n----------------------------------------\n\nTITLE: Increasing Time Limit for Resource-Intensive Functions in Silverstripe CMS (PHP)\nDESCRIPTION: This code snippet demonstrates how to increase the time limit for a specific function in Silverstripe CMS using the Environment class. It's useful for functions that require more execution time than the default PHP configuration allows.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/05_Resource_Usage.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\Environment;\n\npublic function myBigFunction()\n{\n    Environment::increaseTimeLimitTo(400);\n}\n```\n\n----------------------------------------\n\nTITLE: Template for Date-Grouped Modules Display\nDESCRIPTION: SilverStripe template code for displaying modules grouped by month created.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Grouping_DataObject_Sets.md#2025-04-21_snippet_5\n\nLANGUAGE: silverstripe\nCODE:\n```\n<%-- Modules list grouped by the Month Posted --%>\n<h2>Modules</h2>\n<% loop $GroupedModulesByDate.GroupedBy(\"MonthCreated\") %>\n    <h3>$MonthCreated</h3>\n    <ul>\n        <% loop $Children %>\n            <li>$Title ($Created.Nice)</li>\n        <% end_loop %>\n    </ul>\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Package Manager\nDESCRIPTION: Command to install yarn globally using npm.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/06_Build_Tooling.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g yarn\n```\n\n----------------------------------------\n\nTITLE: DateTime Difference Calculation\nDESCRIPTION: Method to calculate and format the time difference between two DBDateTime objects as a human-readable string.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDBDatetime::getTimeBetween()\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Frontmatter for Release Candidate Changelogs Page\nDESCRIPTION: This snippet defines the frontmatter configuration for the Release Candidate Changelogs page in Markdown. It sets the title, introduction, and various display options for the page.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Release Candidate Changelogs\nintroduction: Release Candidate changelogs\nhideChildren: true\nunhideSelf: true\nicon: folder-open\n---\n```\n\n----------------------------------------\n\nTITLE: Email Logger Configuration in Silverstripe\nDESCRIPTION: YAML configuration for setting up email logging using Monolog's NativeMailerHandler.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  Psr\\Log\\LoggerInterface:\n    calls:\n      MailHandler: [ pushHandler, [ '%$MailHandler' ] ]\n  MailHandler:\n      class: Monolog\\Handler\\NativeMailerHandler\n      constructor:\n        - me@example.com\n        - There was an error on your test site\n        - me@example.com\n        - error\n      properties:\n        ContentType: text/html\n        Formatter: '%$SilverStripe\\Logging\\DetailedErrorFormatter'\n```\n\n----------------------------------------\n\nTITLE: Controlling Transformation Order with Before/After\nDESCRIPTION: Demonstrates how to control the order of transformations using the `before` and `after` attributes in `Injector.transform`. This allows specifying dependencies between transformations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/main.js\nInjector.transform(\n  'my-transformation',\n  (updater) => {\n    updater.component('MyComponent', MyCustomComponent);\n    updater.reducer('myCustom', MyCustomReducer);\n  },\n  { after: 'another-module' }\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform(\n  'my-transformation',\n  (updater) => updater.component('MyComponent', MyCustomComponent),\n  { before: ['my-transformation', 'some-other-transformation'] }\n);\n```\n\n----------------------------------------\n\nTITLE: Return Type Changes in SilverStripe ORM Classes\nDESCRIPTION: Various methods in SilverStripe ORM classes have had their return types changed from 'dynamic' to more specific types. This includes changes in DataList, DataObject, DataQuery, ListDecorator, Map, PaginatedList, and UnsavedRelationList classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\ORM\\DataList::limit(): static\nSilverStripe\\ORM\\DataList::offsetExists(): bool\nSilverStripe\\ORM\\DataList::offsetGet(): SilverStripe\\ORM\\DataObject|null\nSilverStripe\\ORM\\DataList::offsetSet(): void\nSilverStripe\\ORM\\DataList::offsetUnset(): void\nSilverStripe\\ORM\\DataList::sort(): static\nSilverStripe\\ORM\\DataObject::duplicate(): static\nSilverStripe\\ORM\\DataQuery::limit(): static\nSilverStripe\\ORM\\Limitable::limit(): SilverStripe\\ORM\\Limitable\nSilverStripe\\ORM\\ListDecorator::Count(): int\nSilverStripe\\ORM\\ListDecorator::getIterator(): Traversable\nSilverStripe\\ORM\\ListDecorator::getList(): SilverStripe\\ORM\\SS_List|SilverStripe\\ORM\\Sortable|SilverStripe\\ORM\\Filterable|SilverStripe\\ORM\\Limitable\nSilverStripe\\ORM\\ListDecorator::limit(): SilverStripe\\ORM\\SS_List|SilverStripe\\ORM\\Sortable|SilverStripe\\ORM\\Filterable|SilverStripe\\ORM\\Limitable\nSilverStripe\\ORM\\ListDecorator::offsetExists(): bool\nSilverStripe\\ORM\\ListDecorator::offsetGet(): mixed\nSilverStripe\\ORM\\ListDecorator::offsetSet(): void\nSilverStripe\\ORM\\ListDecorator::offsetUnset(): void\nSilverStripe\\ORM\\ListDecorator::setList(): self\nSilverStripe\\ORM\\Map::count(): int\nSilverStripe\\ORM\\Map::getIterator(): Traversable\nSilverStripe\\ORM\\Map::offsetExists(): bool\nSilverStripe\\ORM\\Map::offsetGet(): mixed\nSilverStripe\\ORM\\Map::offsetSet(): void\nSilverStripe\\ORM\\Map::offsetUnset(): void\nSilverStripe\\ORM\\PaginatedList::getIterator(): Traversable\nSilverStripe\\ORM\\UnsavedRelationList::getIterator(): Traversable\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters for the /teams/players Route in SilverStripe\nDESCRIPTION: Example of accessing route parameters when a user visits the /teams/players URL, showing how the 'Action' parameter is populated with 'players'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$params = $this->getRequest()->params();\n\n// returns the following array:\n$params = [\n    'Action' => 'players',\n    'ID' => null,\n    'Name' => null,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Note Extension in YAML\nDESCRIPTION: Applies a note extension to modify the base Note model and updates GraphQL schema configuration\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_39\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/extensions.yml\nApp\\Model\\Note:\n  extensions:\n    - MyOtherApp\\Extension\\NoteExtension\n```\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/graphql.yml\nSilverStripe\\GraphQL\\Schema\\Schema:\n  schemas:\n    admin:\n      src:\n        - app/_graphql\n```\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/models.yml\nApp\\Model\\Note:\n  fields:\n    priority: true\n```\n\n----------------------------------------\n\nTITLE: Force a specific button state (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to force a button into a specific state (either showing the alternate or default state) using jQuery UI's `button({ showingAlternate: true })` method. Setting `showingAlternate` to `true` forces the button to display its alternate state.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/CMS_Alternating_Button.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\njQuery('.cms-edit-form .btn-toolbar #Form_EditForm_action_cleanup').button({ showingAlternate: true });\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Types for Blog Model in YAML\nDESCRIPTION: This snippet demonstrates how to use nested type definitions for the `Blog` model in a SilverStripe application. It specifies the structure of fields for `Author` and `Categories` directly under the `Blog` type, enhancing readability and ergonomics. Dependencies include the SilverStripe framework.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/07_nested_definitions.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n\"# app/_graphql/models.yml\\nApp\\PageType\\Blog:\\n  fields:\\n    title: true\\n    author:\\n      fields:\\n        firstName: true\\n        surname: true\\n        email: true\\n    categories:\\n      fields: '*'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring oEmbed Proxy Settings\nDESCRIPTION: YAML configuration for setting up proxy for outbound oEmbed requests.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\n---\nName: myembed\nAfter: coreoembed\n---\nSilverStripe\\Core\\Injector\\Injector:\n  Psr\\Http\\Client\\ClientInterface.oembed:\n    constructor:\n      - proxy: '111.222.333.444:55'\n```\n\n----------------------------------------\n\nTITLE: Declaring Multi-relational has_one Relations in Silverstripe PHP\nDESCRIPTION: Shows the new syntax for declaring a has_one relation that can handle multiple reciprocal has_many relations in Silverstripe ORM.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.2.0-beta1.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\DataObjectSchema;\n\nclass MyExample extends DataObject\n{\n    // ...\n\n    private static array $has_one = [\n        'MyMultiRelationalRelation' => [\n            // The class here is the class for the has_one - it must be polymorphic.\n            'class' => DataObject::class,\n            // Setting this to true is what defines this has_one relation as multi-relational\n            DataObjectSchema::HAS_ONE_MULTI_RELATIONAL => true,\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing withRouter HOC Replacement\nDESCRIPTION: Example showing how to use the new withRouter Higher Order Component with updated prop types and router configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport withRouter, { routerPropTypes } from 'lib/withRouter';\n\nclass MyAdmin extends Component {\n  // Your implementation here\n}\n\nMyAdmin.propTypes = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  router: routerPropTypes,\n};\n\nexport default withRouter(MyAdmin);\n```\n\n----------------------------------------\n\nTITLE: Customizing Canonical URL Middleware Configuration\nDESCRIPTION: Advanced YML configuration to customize excluded paths and user agents for trailing slash redirects\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Middleware\\CanonicalURLMiddleware:\n    properties:\n      enforceTrailingSlashConfigIgnorePaths:\n        - 'my-ajax-controller/'\n      enforceTrailingSlashConfigIgnoreUserAgents:\n        - 'my-dev-user-agent'\n```\n\n----------------------------------------\n\nTITLE: Building GraphQL Schemas with SilverStripe\nDESCRIPTION: This snippet shows how to disable automatic schema building during `dev/build` by modifying the configuration. It disables the `DevBuildExtension` to prevent schema construction unless explicitly done via other commands.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/03_building_the_schema.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\GraphQL\\Extensions\\DevBuildExtension:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Importing External Dependencies\nDESCRIPTION: Example of importing external dependencies in custom JavaScript code.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/06_Build_Tooling.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport react from 'react';\nimport jQuery from 'jQuery';\nimport FormBuilder from 'components/FormBuilder/FormBuilder';\n```\n\n----------------------------------------\n\nTITLE: Global Pagination Configuration\nDESCRIPTION: Shows how to set global pagination configuration for the entire GraphQL schema\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Plugin\\PaginationPlugin:\n  max_limit: 10\n```\n\n----------------------------------------\n\nTITLE: Excluding Element Fields from CMS Search in YAML\nDESCRIPTION: YAML configuration to exclude specific fields of an element from CMS search when element rendering is disabled. This allows fine-tuning of which element data is included in search results.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.1.0.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\MyElement:\n  fields_excluded_from_cms_search:\n    - MyFieldToExclude\n    - AnotherFieldToExclude\n```\n\n----------------------------------------\n\nTITLE: Linking to an RSS Feed in PHP\nDESCRIPTION: This code shows how to add a link to an RSS feed in a Silverstripe CMS controller's init method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/02_RSSFeed.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRSSFeed::linkToFeed($link, $title);\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Elemental Classes and Methods in PHP\nDESCRIPTION: Removal of deprecated classes and methods from the dnadesign/silverstripe-elemental module. Some methods are removed without replacements, while others have suggested alternatives.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n// Removed classes\nDNADesign\\Elemental\\Search\\ElementalSolrIndex\nDNADesign\\Elemental\\TopPage\\TestState\n\n// Removed methods\nDNADesign\\Elemental\\Extensions\\ElementalAreaUsedOnTableExtension::updateUsage()\nDNADesign\\Elemental\\TopPage\\DataExtension::disableTopPageUpdate()\nDNADesign\\Elemental\\TopPage\\DataExtension::enableTopPageUpdate()\nDNADesign\\Elemental\\TopPage\\DataExtension::getTopPageUpdate()\nDNADesign\\Elemental\\TopPage\\DataExtension::withTopPageUpdate()\n```\n\n----------------------------------------\n\nTITLE: Sending Plain Text Emails in Silverstripe\nDESCRIPTION: Example of sending plain text only emails using the Email class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/10_Email/index.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Email\\Email;\n\n$email = Email::create($from, $to, $subject, $body);\n$email->sendPlain();\n```\n\n----------------------------------------\n\nTITLE: Member Class Reference Example\nDESCRIPTION: Reference to the Member class which extends DataObject to store authenticated user information in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nMember\n```\n\n----------------------------------------\n\nTITLE: Using UNION Clauses with SQLSelect in Silverstripe PHP\nDESCRIPTION: Demonstrates how to add a UNION clause to SQLSelect queries by using the addUnion() method. This example shows how to combine two SQLSelect queries with a UNION DISTINCT clause, one of the new ORM features in Silverstripe 5.2.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\Queries\\SQLSelect;\n\n$baseQuery = SQLSelect::create()->setFrom($tableName)->addWhere(/*...*/);\n$anotherQuery = SQLSelect::create()->setFrom($tableName)->addWhere(/*...*/);\n$baseQuery->addUnion($anotherQuery, SQLSelect::UNION_DISTINCT);\n```\n\n----------------------------------------\n\nTITLE: Setting YAML Frontmatter for Alpha Changelogs Page in Silverstripe Docs\nDESCRIPTION: This YAML frontmatter block configures metadata for the Alpha Changelogs index page in Silverstripe developer documentation. It sets the title, introduction, visibility options, and icon for the page.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/alpha/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Alpha Changelogs\nintroduction: Alpha Changelogs\nhideChildren: true\nunhideSelf: true\nicon: folder-open\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying SiteTree Status Lozenges in Silverstripe CMS\nDESCRIPTION: HTML template showing how tree nodes are rendered in the CMS with status lozenges and other metadata. This includes node classes, links, icons, and status badges.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Tree.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n...\n<ul>\n    ...\n    <li id=\"record-15\" class=\"class-Page closed jstree-leaf jstree-unchecked\" data-id=\"15\">\n    <ins class=\"jstree-icon\">&nbsp;</ins>\n        <a class=\"\" title=\"Page type: Page\" href=\"$AdminURL('page/edit/show/15')\">\n            <ins class=\"jstree-checkbox\">&nbsp;</ins>\n            <ins class=\"jstree-icon\">&nbsp;</ins>\n            <span class=\"text\">\n                <span class=\"jstree-pageicon\"></span>\n                <span class=\"item\" title=\"Deleted\">New Page</span>\n                <span class=\"badge deletedonlive\">Deleted</span>\n            </span>\n        </a>\n    </li>\n    ...\n</ul>\n...\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entries for silverstripe/ldap in Markdown\nDESCRIPTION: This snippet shows multiple changelog entries for the silverstripe/ldap package, including version update and several commits with their descriptions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- silverstripe/ldap (2.2.3 -> 2.3.0)\n  - 2025-01-27 [b43050a](https://github.com/silverstripe/silverstripe-ldap/commit/b43050a6add5a6e273ee12802a8d4841d80b2a0e) Revert nested_groups_search_locations and user_filter configs (Michal Kouril)\n  - 2024-10-05 [30424df](https://github.com/silverstripe/silverstripe-ldap/commit/30424df63d621adc22664b93710df8548adf1863) PHP8 fix; Added nested_groups_search_locations, user_filter as config options to override defaults (Michal Kouril)\n```\n\n----------------------------------------\n\nTITLE: Watch Mode Build Command\nDESCRIPTION: Command to automatically rebuild files when changes are detected.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/06_Build_Tooling.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS requirements in Silverstripe\nDESCRIPTION: This YAML configuration snippet sets the `extra_requirements_css` property to load a custom CSS file (BookmarkedPages.css) into the Silverstripe CMS. It links the CSS to the LeftAndMain admin section. Requires `composer vendor-expose` to expose the CSS files.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Admin\\LeftAndMain:\n  extra_requirements_css:\n    - app/css/BookmarkedPages.css\n\n```\n\n----------------------------------------\n\nTITLE: Subclassing Member in Silverstripe CMS\nDESCRIPTION: Shows how to create a custom Member subclass with additional fields. Includes a warning about preferring DataExtension over subclassing.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/00_Member.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Security;\n\nuse SilverStripe\\Security\\Member;\n\nclass MyMember extends Member\n{\n    private static $db = [\n        'Age' => 'Int',\n        'Address' => 'Text',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Return Type Change in SilverStripe View Class\nDESCRIPTION: The getIterator method in the ViewableData class has had its return type changed from 'dynamic' to 'Traversable'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\View\\ViewableData::getIterator(): Traversable\n```\n\n----------------------------------------\n\nTITLE: Namespacing GraphQL Configuration by Filename\nDESCRIPTION: This snippet shows how to namespace your GraphQL configuration by naming your YAML files according to the schema keywords (config, types, models, enums, bulkLoad).  This only works in the root source directory (e.g. `app/_graphql`). Any configuration added to `app/_graphql/config.yml` will be implicitly added to `SilverStripe\\GraphQL\\Schema\\Schema.schemas.default.config`.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/02_configuring_your_schema.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/config.yml\n\n# my config here\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/types.yml\n\n# my types here\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/models.yml\n\n# my models here\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/enums.yml\n\n# my enums here\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/bulkLoad.yml\n\n# my bulk loader directives here\"\n```\n\n----------------------------------------\n\nTITLE: Flushing Cache for Silverstripe CMS Tests\nDESCRIPTION: Command to run PHPUnit tests while flushing the Silverstripe CMS cache to ensure the latest configuration and code changes are reflected in the test environment.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit vendor/silverstripe/framework/tests '' flush=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Manager IP Anonymization\nDESCRIPTION: YAML configuration to enable IP address anonymization in the Session Manager module for enhanced privacy compliance.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.1.0-beta1.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\SessionManager\\Models\\LoginSession:\n  anonymize_ip: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo Mode for DataObject in Silverstripe CMS\nDESCRIPTION: Example of how to enable sudo mode protection for a custom DataObject class by setting the require_sudo_mode configuration property to true. This adds an extra layer of security requiring password re-entry when accessing sensitive data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSomeModule\\Model\\Player:\n  require_sudo_mode: true\n```\n\n----------------------------------------\n\nTITLE: Setting SS_BASE_URL Environment Variable in BASH\nDESCRIPTION: This command sets the SS_BASE_URL environment variable required for Silverstripe CLI operations to recognize the site's base URL, which is particularly useful for tasks performed via command line.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/17_CLI/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSS_BASE_URL=\"https://www.example.com/base-url\"\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Admin Parameter Type Changes\nDESCRIPTION: Parameter type changes in SilverStripe Admin module methods to enforce stricter type checking. Changes affect request handling and form processing methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Admin\\LeftAndMain::schema($request: HTTPRequest)\nSilverStripe\\Admin\\LeftAndMain::show($request: HTTPRequest)\nSilverStripe\\Admin\\ModelAdmin::import($data: array, $form: Form)\n```\n\n----------------------------------------\n\nTITLE: CSS Style with Tag Selector\nDESCRIPTION: CSS definition that combines a heading tag with a color class for automatic tag wrapping in the editor.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/05_Typography.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nh4.red {\n    color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Locales via YAML Configuration\nDESCRIPTION: Shows how to add a new locale to Silverstripe CMS using YAML configuration, specifically adding French (Luxembourg) locale.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\i18n\\Data\\Intl\\IntlLocales:\n  locales:\n    fr_LU: French (Luxembourg)\n```\n\n----------------------------------------\n\nTITLE: Registering UsedOnTableExtension with YAML Configuration in Silverstripe\nDESCRIPTION: This YAML configuration registers the custom UsedOnTableExtension with the UsedOnTable class in Silverstripe CMS. This allows the extension hooks defined in the PHP extension class to be applied to the file usage functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/07_File_Usage.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Admin\\Forms\\UsedOnTable:\n  extensions:\n    - My\\App\\Extension\\UsedOnTableExtension\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL query for retrieving country data\nDESCRIPTION: This GraphQL snippet demonstrates how to fetch the country names and codes using the previously defined 'readCountries' query. It illustrates the structure of a standard query request in GraphQL.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/02_building_a_custom_query.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readCountries {\n    name\n    code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ClassName column as varchar in Silverstripe CMS\nDESCRIPTION: YAML configuration to change the ClassName column from enum to varchar type, which improves database performance during dev/build operations on large tables. This avoids costly ALTER TABLE operations but increases storage requirements by approximately 7MB per 100,000 rows.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\ORM\\DataObject:\n  fixed_fields:\n    ClassName: DBClassNameVarchar\n\nSilverStripe\\ORM\\FieldType\\DBPolymorphicForeignKey:\n  composite_db:\n    Class: \"DBClassNameVarchar('SilverStripe\\\\ORM\\\\DataObject', ['index' => false])\"\n```\n\n----------------------------------------\n\nTITLE: Defining Entwine Property\nDESCRIPTION: This snippet demonstrates how to declare a property within an Entwine selector. The 'MyProperty' is assigned an initial value of 'some value'. Entwine automatically creates getter and setter methods for this property.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$('div').entwine({\n  MyProperty: 'some value',\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Silverstripe Linkfield Module\nDESCRIPTION: Command to install the officially supported silverstripe/linkfield module version 4.0.0 using Composer\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require silverstripe/linkfield\n```\n\n----------------------------------------\n\nTITLE: Making a Form Read-only in SilverStripe\nDESCRIPTION: Shows how to transform an entire Form instance to read-only mode using the makeReadonly() method\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/05_Form_Transformations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\Form;\n\n$form = Form::create(/* ... */);\n$form->makeReadonly();\n```\n\n----------------------------------------\n\nTITLE: Removed Deprecated Methods from SilverStripe Framework\nDESCRIPTION: Comprehensive list of deprecated PHP methods that have been removed from various SilverStripe Framework classes, including methods from Controller, Director, Email, HTTP, and other core components.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Control\\Controller::disableBasicAuth()\nSilverStripe\\Control\\Director::isManifestFlushed()\nSilverStripe\\Control\\Email\\Email::BaseURL()\nSilverStripe\\Control\\Email\\Email::debug()\nSilverStripe\\Control\\Email\\Email::findPlainPart()\n```\n\n----------------------------------------\n\nTITLE: Installing Silverstripe CMS Theme via Composer\nDESCRIPTION: Command to install a Silverstripe CMS theme using Composer. Replace 'my_vendor/my_theme' with the actual theme package name and optionally specify a version constraint.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/06_Themes.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require my_vendor/my_theme [version]\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Segmented Cache in SilverStripe - YAML\nDESCRIPTION: This YAML snippet shows how to configure SilverStripe cache settings to opt-out from segmented caching, allowing data caching across version stages by setting 'disable-container' to true. It's used for non-sensitive information where stage-specific cache separation isn't needed. Ensure your setup accepts YAML configuration and include necessary modules.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/01_Caching.md#2025-04-21_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  Psr\\SimpleCache\\CacheInterface.myapp:\n    factory: SilverStripe\\Core\\Cache\\CacheFactory\n    constructor:\n      namespace: \"MyInsensitiveData\"\n      disable-container: true\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for dnadesign/silverstripe-elemental in Markdown\nDESCRIPTION: This snippet shows the changelog entry for the dnadesign/silverstripe-elemental package, including the version update and a specific commit.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- dnadesign/silverstripe-elemental (5.3.0 -> 5.4.0)\n  - 2025-02-11 [9d5bcc6](https://github.com/silverstripe/silverstripe-elemental/commit/9d5bcc6d93d2fcae100ae68def21703900bfbf54) BUGFIX double escaped mdash (#1314) (Annie Kyles)\n```\n\n----------------------------------------\n\nTITLE: Symfony Constraint Validation in PHP\nDESCRIPTION: Demonstrate usage of ConstraintValidator for validating values against Symfony validation constraints\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\Validation\\ConstraintValidator;\n\n$result = ConstraintValidator::validate($valueToValidate, $constraint);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\Validation\\ConstraintValidator;\nuse Symfony\\Component\\Validator\\Constraints\\Url;\n\n$isValid = ConstraintValidator::validate($url, new Url())->isValid();\n```\n\n----------------------------------------\n\nTITLE: Template Type Hints in SilverStripe ContentControllers\nDESCRIPTION: This code snippet uses PHP generics to extend 'ContentController' with a placeholder page type, allowing for more precise type hinting in IDEs. It's particularly useful when dealing with method 'data()' or property '$dataRecord' in page controllers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace {\n\n    use SilverStripe\\CMS\\Controllers\\ContentController;\n\n    /**\n     * @template T of Page\n     * @extends ContentController<T>\n     */\n    class PageController extends ContentController\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard format for changelog entries showing module name, version change, commit hash with link, date and description\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- silverstripe/assets (2.3.0 -> 2.4.0-rc1)\n  - 2025-01-19 [af3ec19](https://github.com/silverstripe/silverstripe-assets/commit/af3ec19c0f787fc95ea6d3e1090ffd11f06217fe) Don't add the same extension multiple times (Steve Joynt)\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension in YAML\nDESCRIPTION: YAML configuration to enable the NewsPageHolderCMSMainExtension for the LeftAndMain controller.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Pages_List.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Admin\\LeftAndMain:\n  extensions:\n    - App\\Extension\\NewsPageHolderCMSMainExtension\n```\n\n----------------------------------------\n\nTITLE: Limiting List Items in SilverStripe Templates\nDESCRIPTION: Shows how to limit the number of items displayed in a list to 10 using the Limit method in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_7\n\nLANGUAGE: ss\nCODE:\n```\n<ul>\n    <% loop $Children.Limit(10) %>\n        <li>$Title</li>\n    <% end_loop %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using the * Flag for Transformation Order\nDESCRIPTION: Shows how to use the `*` flag with `before` or `after` in `Injector.transform` to ensure a customisation loads first or last. It is used as a wildcard to affect all transformations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform(\n  'my-transformation',\n  (updater) => updater.component('MyComponent', FinalTransform),\n  { after: '*' }\n);\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Behat Extension Updates\nDESCRIPTION: Documents method deprecations and type modifications in BasicContext and TestMailer classes, including parameter type specifications and return type changes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\BehatExtension\\Context\\BasicContext::iAttachTheFileTo()\nSilverStripe\\BehatExtension\\Utility\\TestMailer::clearEmails()\nSilverStripe\\BehatExtension\\Utility\\TestMailer::findEmail()\nSilverStripe\\BehatExtension\\Utility\\TestMailer::saveEmail()\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Variables in PHP for Silverstripe CMS\nDESCRIPTION: This snippet demonstrates how URL variables are typically accessed in Silverstripe CMS core using PHP superglobals $_REQUEST or $_GET. These variables are used throughout the system for various debugging and configuration purposes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/02_URL_Variable_Tools.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$debugValue = $_REQUEST['debug'] ?? $_GET['debug'] ?? null;\n$flushValue = $_REQUEST['flush'] ?? $_GET['flush'] ?? null;\n```\n\n----------------------------------------\n\nTITLE: Implementing GridField Filtering\nDESCRIPTION: Sets up filtering functionality for GridField using BasicSearchContext and custom search fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/07_Using_GridField_With_Arbitrary_Data.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\GridField\\GridFieldFilterHeader;\nuse SilverStripe\\Forms\\HiddenField;\nuse SilverStripe\\Forms\\TextField;\nuse SilverStripe\\ORM\\Search\\BasicSearchContext;\n\n$searchContext = BasicSearchContext::create(null);\n$searchFields = [\n    HiddenField::create(BasicSearchContext::config()->get('general_search_field_name')),\n    TextField::create('FieldName', 'Search Field Label'),\n];\n$searchContext->setFields(FieldList::create($searchFields));\n$gridField->getConfig()->getComponentByType(GridFieldFilterHeader::class)->setSearchContext($searchContext);\n```\n\n----------------------------------------\n\nTITLE: Applying the Truncate Plugin to a Field in GraphQL Schema\nDESCRIPTION: Example YML configuration showing how to apply the truncate plugin to a String field in a GraphQL schema definition. This demonstrates the actual usage of the plugin in a Country type.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/02_writing_a_simple_plugin.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/types.yml\nCountry:\n  name:\n    type: String\n    plugins:\n      truncate: true\n```\n\n----------------------------------------\n\nTITLE: Implementing SchemaUpdater for Custom Input Types in PHP\nDESCRIPTION: This snippet extends the GeocodableQueryPlugin to implement SchemaUpdater, adding custom input types for geocoding queries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/03_writing_a_complex_plugin.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Plugin;\n\nuse SilverStripe\\GraphQL\\Schema\\Interfaces\\SchemaUpdater;\nuse SilverStripe\\GraphQL\\Schema\\Type\\Enum;\nuse SilverStripe\\GraphQL\\Schema\\Type\\InputType;\n// ...\n\nclass GeocodableQueryPlugin implements ModelQueryPlugin, SchemaUpdater\n{\n    // ...\n\n    public static function updateSchema(Schema $schema): void\n    {\n        $unitType = Enum::create('Unit', [\n            'METER' => 'METER',\n            'KILOMETER' => 'KILOMETER',\n            'FOOT' => 'FOOT',\n            'MILE' => 'MILE',\n        ]);\n        $radiusType = InputType::create('SearchRadiusInput')\n            ->setFields([\n                'lat' => 'Float!',\n                'lon' => 'Float!',\n                'proximity' => 'Int!',\n                'unit' => 'Unit!',\n            ]);\n        $schema->addType($unitType);\n        $schema->addType($unitType);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods\nDESCRIPTION: New ArrayLib methods for inserting values before or after specific elements in an array. Includes insertBefore() and insertAfter() functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nArrayLib::insertBefore()\nArrayLib::insertAfter()\n```\n\n----------------------------------------\n\nTITLE: PHP Method Implementation for CSS References Resolution\nDESCRIPTION: Implementation related to resolving relative references in CSS files when combining them, including test cases and configuration updates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/alpha/5.0.0-alpha1.md#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Enhanced Photo Item Class Component\nDESCRIPTION: Defines a higher-order component as an ES6 class to enhance a React component.  It provides an alternative way to create higher-order components using a class-based approach.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n// ...\n\nconst enhancedPhoto = (PhotoItem) => (\n  class EnhancedPhotoItem extends React.Component {\n    render() {\n      const badge = this.props.isNew ?\n        <div className=\"badge\">New!</div> : null;\n\n      return (\n        <div>\n          {badge}\n          <PhotoItem {...this.props} />\n        </div>\n      );\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring oEmbed Sandbox Exclusions\nDESCRIPTION: YAML configuration to exclude specific domains from oEmbed sandboxing.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_13\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\View\\Shortcodes\\EmbedShortcodeProvider:\n  domains_excluded_from_sandboxing:\n    - 'youtube.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Unique Key Service in YAML\nDESCRIPTION: YAML configuration to override the default UniqueKeyService with a custom implementation. The custom service must implement UniqueKeyInterface.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/10_Unique_Keys.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\ORM\\UniqueKey\\UniqueKeyService:\n    class: App\\Service\\MyCustomService\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Plugins for Specific DataObject Types in SilverStripe\nDESCRIPTION: This YAML configuration shows how to override default plugins on specific DataObject types, which will be inherited by descendants.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/01_overview.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_graphql/models.yml\nPage:\n  plugins:\n    inheritance: false\nApp\\PageType\\MyCustomPage: {} # now has no inheritance plugin\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies\nDESCRIPTION: Updates all project dependencies to their latest compatible versions\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Changing Preview Mode in SilverStripe CMS using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to programmatically change the preview mode in SilverStripe CMS using the entwine API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n$('.cms-preview').entwine('.ss.preview').changeMode('preview');\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Changes in CMSMain Controller\nDESCRIPTION: Changes to parameter types in various CMSMain controller methods from dynamic types to specific SilverStripe types like HTTPRequest, array, and Form.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\CMS\\Controllers\\CMSMain::childfilter($request: HTTPRequest)\nSilverStripe\\CMS\\Controllers\\CMSMain::delete($data: array, $form: Form)\nSilverStripe\\CMS\\Controllers\\CMSMain::doSearch($data: array, $form: Form)\nSilverStripe\\CMS\\Controllers\\CMSMain::duplicate($request: HTTPRequest)\nSilverStripe\\CMS\\Controllers\\CMSMain::duplicatewithchildren($request: HTTPRequest)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Template Variables\nDESCRIPTION: Example of including JavaScript with templated variables that get replaced during runtime.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/03_Requirements.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Security\\Security;\nuse SilverStripe\\View\\Requirements;\n\n$vars = [\n    'MemberID' => Security::getCurrentUser()->ID,\n];\n\nRequirements::javascriptTemplate('<my-module-dir>/javascript/some_file.js', $vars);\n```\n\n----------------------------------------\n\nTITLE: Removed Deprecated Interfaces from SilverStripe Framework\nDESCRIPTION: List of deprecated PHP interfaces that have been removed from the SilverStripe Framework, affecting email handling, request filtering, and view requirements functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Control\\Email\\Mailer\nSilverStripe\\Control\\RequestFilter\nSilverStripe\\View\\Requirements_Minifier\n```\n\n----------------------------------------\n\nTITLE: Running Tasks with Sake in BASH\nDESCRIPTION: These commands demonstrate how to utilize Sake to execute various tasks, including build tasks and accessing controllers in Silverstripe. The commands illustrate usage scenarios and the need to maintain the correct user context.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/17_CLI/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsake /\n# returns the homepage\n\nsake dev/\n# shows a list of development operations\n\nsake dev/build \"flush=1\"\n\nsake dev/tasks/MyReallyLongTask\n```\n\n----------------------------------------\n\nTITLE: Updating React Router Path Configuration\nDESCRIPTION: Example showing how to update route path configuration to use relative paths with reactRoutePath instead of absolute URLs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigHelpers from 'lib/Config';\nimport reactRouteRegister from 'lib/ReactRouteRegister';\nimport MyAdmin from './MyAdmin';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const sectionConfig = ConfigHelpers.getSection('MyAdmin');\n    reactRouteRegister.add({\n        path: sectionConfig.reactRoutePath,\n        component: MyAdminComponent,\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Admin URL in YAML\nDESCRIPTION: YAML configuration to change the default admin URL path and create new routing rules while clearing old ones.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nName: myadmin\nAfter:\n  - '#adminroutes'\n---\nSilverStripe\\Control\\Director:\n  rules:\n    'admin': ''\n    'newAdmin': 'SilverStripe\\Admin\\AdminRootController'\n\nSilverStripe\\Admin\\AdminRootController:\n  url_base: 'newAdmin'\n---\n```\n\n----------------------------------------\n\nTITLE: Template Scope Updated Syntax - HTML\nDESCRIPTION: The corrected template syntax for Silverstripe CMS 5.0 showing proper scope traversal with single Up reference.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<% loop $Pages.Limit(5) %>{$Up.Title}<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex URL Routing in SilverStripe YAML\nDESCRIPTION: Shows how to set up a routing rule for a complex URL structure in SilverStripe's YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/02_Routing.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'feed': 'App\\Control\\FeedController'\n```\n\n----------------------------------------\n\nTITLE: Using Eager Loading with Silverstripe ORM to Optimize Database Queries\nDESCRIPTION: Example demonstrating how to use the new eagerLoad() method to solve N+1 query problems when looping through nested relationships. The example shows a comparison between standard ORM usage (21 queries) and eager loading (2 queries) when iterating through Team and Player models.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.1.0.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Regular ORM usage without eager loading\n// This would result in 21 SQL SELECT queries, 1 for Teams and 20 for Players\n$teams = Team::get();\n\n// Using the `eagerLoad()` method to eager load data from nested models (up to 3 relations deep)\n// This will result in only 2 SQL SELECT queries, 1 for Teams and 1 for Players\n$teams = Team::get()->eagerLoad('Players');\n\nforeach ($teams as $team) {\n    foreach ($team->Players() as $player) {\n        echo $player->FirstName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Database Check and Repair in Silverstripe YAML\nDESCRIPTION: Completely disables the database check and repair step during dev/build. This can significantly reduce build times but should be used with caution.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/06_ORM.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\ORM\\Connect\\DBSchemaManager:\n  check_and_repair_on_build: false\n```\n\n----------------------------------------\n\nTITLE: Disable Default Error Handler Configuration\nDESCRIPTION: YAML configuration to disable the default error handler in Silverstripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  Psr\\Log\\LoggerInterface.errorhandler:\n    calls:\n      pushDisplayErrorHandler: '%%remove%%'\n```\n\n----------------------------------------\n\nTITLE: Registering a LeftAndMainExtension in Silverstripe CMS\nDESCRIPTION: This snippet shows how to register a LeftAndMainExtension to the LeftAndMain class, which is required to have the custom menu link appear in the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_CMS_Menu.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nLeftAndMain::add_extension('CustomLeftAndMain')\n```\n\n----------------------------------------\n\nTITLE: Migrating ReactDOM.render() to ReactDOM.createRoot()\nDESCRIPTION: Updated React rendering method for components using entwine, introducing root management and proper component mounting/unmounting\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n$('.grid-field').entwine({\n  ReactRoot: null,\n\n  onmatch() {\n    let root = this.getReactRoot();\n    if (!root) {\n      root = ReactDOM.createRoot(this[0]);\n    }\n    root.render(<MyComponent />);\n    this.setReactRoot(root);\n  },\n\n  onunmatch() {\n    const root = this.getReactRoot();\n    if (root) {\n      root.unmount();\n      this.setReactRoot(null);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Higher-Order Component\nDESCRIPTION: Illustrates how to create a higher-order component to customize a React component. It adds a badge to the `PhotoItem` component to indicate that it is new.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n// ...\n\nconst enhancedPhoto = (PhotoItem) => (props) => {\n  const badge = props.isNew ?\n    <div className=\"badge\">New!</div> : null;\n\n  return (\n    <div>\n      {badge}\n      <PhotoItem {...props} />\n    </div>\n  );\n};\n\nconst EnhancedPhotoItem = enhancedPhoto(PhotoItem);\n\n  <EnhancedPhotoItem isNew size={300} />;\n```\n\n----------------------------------------\n\nTITLE: Nginx Asset Location Configuration\nDESCRIPTION: Nginx location block configuration for handling asset requests and falling back to framework processing.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nlocation ^~ /assets/ {\n    sendfile on;\n    try_files $uri index.php?$query_string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Type in YAML for Silverstripe CMS\nDESCRIPTION: This YAML snippet defines a generic type called 'Country' with two required fields: 'code' and 'name'. It is intended for use within the Silverstripe CMS framework, serving as part of the GraphQL types definition.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/01_creating_a_generic_type.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n\"# app/_graphql/types.yml\\nCountry:\\n  fields:\\n    code: String!\\n    name: String!\"\n```\n\n----------------------------------------\n\nTITLE: Updating Return Types in SilverStripe FullTextSearch Utils\nDESCRIPTION: Changes return types for various methods in CombinationsArrayIterator and MultipleArrayIterator classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\CombinationsArrayIterator::current(): mixed\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\CombinationsArrayIterator::key(): mixed\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\CombinationsArrayIterator::next(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\CombinationsArrayIterator::rewind(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\CombinationsArrayIterator::valid(): bool\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\MultipleArrayIterator::current(): mixed\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\MultipleArrayIterator::key(): mixed\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\MultipleArrayIterator::next(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\MultipleArrayIterator::rewind(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\MultipleArrayIterator::valid(): bool\n```\n\n----------------------------------------\n\nTITLE: Development Build Command\nDESCRIPTION: Command to build JavaScript and CSS files in development mode for debugging.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/06_Build_Tooling.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Slashes in SilverStripe CMS using YML\nDESCRIPTION: This YAML configuration sets the SilverStripe Controller to add trailing slashes to URLs. It is important to avoid explicit expectations regarding trailing slashes in custom implementations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Controller:\n    add_trailing_slash: true\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Resolver in PHP\nDESCRIPTION: Implementation of a custom filter resolver method for complex filtering logic\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic static function resolveHasReviewsFilter(Filterable $list, array $args, array $context)\n{\n    $onlyWithReviews = $context['filterValue'];\n    $comparator = $context['filterComparator'];\n\n    if (!in_array($comparator, ['eq', 'ne'])) {\n        throw new Exception('Invalid comparator for hasReviews: ' . $comparator);\n    }\n    if ($comparator === 'ne') {\n        $onlyWithReviews = !$onlyWithReviews;\n    }\n\n    return $onlyWithReviews\n        ? $list->filter('Reviews.Count():GreaterThan', 0)\n        : $list->filter('Reviews.Count()', 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Element Fields from CMS Search in Silverstripe\nDESCRIPTION: Configuration to exclude specific fields on elements from CMS search when 'render_elements' is set to false. This allows for finer control over which content is included in search results.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nApp\\MyElement:\n  fields_excluded_from_cms_search:\n    - MyFieldToExclude\n    - AnotherFieldToExclude\n```\n\n----------------------------------------\n\nTITLE: Applying Plugins by Default in YAML\nDESCRIPTION: This YAML configuration shows how to apply the geocoding plugins as default plugins for all DataObjects and read operations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/03_writing_a_complex_plugin.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# apply the `DataObject` plugin\nSilverStripe\\GraphQL\\Schema\\DataObject\\DataObjectModel:\n  default_plugins:\n    geocode: true\n# apply the query plugin\nSilverStripe\\GraphQL\\Schema\\DataObject\\ReadCreator:\n  default_plugins:\n    geocodableQuery: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Path and User Agent Exclusions for Trailing Slash Redirects\nDESCRIPTION: YML configuration to exclude specific paths and user agents from trailing slash redirects in Silverstripe CMS. This allows exceptions to the default redirect behavior.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Middleware\\CanonicalURLMiddleware:\n    properties:\n      enforceTrailingSlashConfigIgnorePaths:\n        - 'my-ajax-controller/'\n      enforceTrailingSlashConfigIgnoreUserAgents:\n        - 'my-dev-user-agent'\n```\n\n----------------------------------------\n\nTITLE: ModulePage with Date Grouping\nDESCRIPTION: Extends ModulePage to provide grouped modules sorted by creation date.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Grouping_DataObject_Sets.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse App\\Model\\Module;\nuse Page;\nuse SilverStripe\\ORM\\GroupedList;\n\nclass ModulePage extends Page\n{\n    /**\n     * Returns all news items, sorted by the month they were posted\n     * @return GroupedList\n     */\n    public function getGroupedModulesByDate()\n    {\n        return GroupedList::create(Module::get()->sort('Created'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Return Type Changes in SilverStripe Security Classes\nDESCRIPTION: Methods in SilverStripe Security classes have had their return types changed from 'dynamic' to more specific types. This includes changes in Member, LostPasswordHandler, and Security classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Security\\Member::isPasswordExpired(): bool\nSilverStripe\\Security\\Member::mapInCMSGroups(): SilverStripe\\ORM\\Map\nSilverStripe\\Security\\MemberAuthenticator\\LostPasswordHandler::forgotPassword(): SilverStripe\\Control\\HTTPResponse\nSilverStripe\\Security\\Security::permissionFailure(): SilverStripe\\Control\\HTTPResponse\n```\n\n----------------------------------------\n\nTITLE: Setting Editor CSS Path Programmatically\nDESCRIPTION: PHP code to programmatically set the content CSS file path for a TinyMCE configuration instance.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/05_Typography.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$config = new TinyMCEConfig();\n$config->setContentCSS([ '/app/client/css/editor.css' ]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Generator-based Iterator in Silverstripe Framework\nDESCRIPTION: Converts the ORM Query and ArrayList to use generator-based iterators for improved performance.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nORM' Query is a generator-based IteratorAggregate\n```\n\nLANGUAGE: PHP\nCODE:\n```\nIterate ArrayList via a generator\n```\n\nLANGUAGE: PHP\nCODE:\n```\nMake DataList::getIterator a generator\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple PJAX Fragments in JavaScript\nDESCRIPTION: This code snippet shows loading multiple PJAX fragments in one request using `loadFragment`. This is useful when multiple elements on the page need to be updated simultaneously without a full page reload, and all fragments are served by the same URL.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// You can use this if you use @silverstripe/webpack-config\nimport { joinUrlPaths } from 'lib/urls';\n\n$('.cms-container').loadFragment(joinUrlPaths(ss.config.adminUrl, 'foobar/'), 'Fragment2,Fragment3');\n```\n```\n\n----------------------------------------\n\nTITLE: Updating ReactDOM Render Method for Entwine Integration\nDESCRIPTION: Example showing how to update ReactDOM.render() to use createRoot() in Entwine contexts, including proper cleanup and root management.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n$('.grid-field').entwine({\n  ReactRoot: null,\n\n  onmatch() {\n    let root = this.getReactRoot();\n    if (!root) {\n      root = ReactDOM.createRoot(this[0]);\n    }\n    root.render(<MyComponent />);\n    this.setReactRoot(root);\n  },\n\n  onunmatch() {\n    const root = this.getReactRoot();\n    if (root) {\n      root.unmount();\n      this.setReactRoot(null);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Player Model Definition\nDESCRIPTION: DataObject class definition for Player with database fields and relationships.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/00_CSV_Import.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $db = [\n      'PlayerNumber' => 'Int',\n      'FirstName' => 'Text',\n      'LastName' => 'Text',\n      'Birthday' => 'Date',\n    ];\n\n    private static $has_one = [\n      'Team' => FootballTeam::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Slash Behavior in Silverstripe URLs\nDESCRIPTION: YML configuration to explicitly add trailing slashes to all URLs generated by Silverstripe CMS. By default, Silverstripe CMS 5 omits trailing slashes from URLs.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Controller:\n    add_trailing_slash: true\n```\n\n----------------------------------------\n\nTITLE: Cancelling Redux Actions\nDESCRIPTION: Shows how to cancel specific Redux actions while maintaining the original state.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (originalReducer) => (getGlobalState) => (state, { type, payload }) => {\n  switch (type) {\n    case 'CANCEL_THIS_ACTION': {\n      return state;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Sandboxed iFrame Attributes in Silverstripe CMS\nDESCRIPTION: YAML configuration to customize the attributes of the sandboxed iframe used for oEmbed content in Silverstripe CMS. This example sets the 'allow' attribute to 'fullscreen'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\View\\Shortcodes\\EmbedShortcodeProvider:\n  sandboxed_iframe_attributes:\n    allow: 'fullscreen'\n```\n\n----------------------------------------\n\nTITLE: Exception Throwing in Silverstripe\nDESCRIPTION: Example of throwing a LogicException for critical errors that should halt execution.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/01_Error_Handling.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nthrow new LogicException('Query failed: ' . $sql);\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Priority in Silverstripe CMS\nDESCRIPTION: YAML configuration example for declaring module priority in Silverstripe CMS. Shows how to specify the order of template lookup across different modules.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/05_Template_Inheritance.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# mymodule/_config/config.yml\nName: modules-mymodule\nAfter:\n  - '#modules-framework'\n  - '#modules-other'\n---\nSilverStripe\\Core\\Manifest\\ModuleManifest:\n  module_priority:\n    - myvendor/mymodule\n```\n\n----------------------------------------\n\nTITLE: Declaring Pluralizations in YML Configuration\nDESCRIPTION: This snippet demonstrates how to declare pluralizations in a YML configuration file, following the Ruby i18n convention for plural forms. It shows how to define singular, plural, and plural forms ('one' and 'other') for a specific object using the YML format. This ensures consistent translation and pluralization across the application.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nen:\n  App\\Model\\MyObject:\n    SINGULARNAME: 'object'\n    PLURALNAME: 'objects'\n    PLURALS:\n      one: 'An object'\n      other: '{count} objects'\n```\n\n----------------------------------------\n\nTITLE: Customizing oEmbed sandboxed iframe attributes in Silverstripe CMS\nDESCRIPTION: YAML configuration to modify the attributes of sandboxed iframes used for oEmbed content. This example allows fullscreen capability for embedded content, providing more flexibility while maintaining security.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\View\\Shortcodes\\EmbedShortcodeProvider:\n  sandboxed_iframe_attributes:\n    allow: 'fullscreen'\n```\n\n----------------------------------------\n\nTITLE: Enabling MIME Type Validation in Silverstripe\nDESCRIPTION: This Bash command installs the MIME type validation module necessary for uploading files in a Silverstripe CMS project. This module is crucial for ensuring only files with valid MIME types are uploaded.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/06_Allowed_file_types.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require silverstripe/mimevalidator\n```\n\n----------------------------------------\n\nTITLE: Converting Image Files in PHP\nDESCRIPTION: Demonstrates how to convert an image to WebP format and apply a FitMax manipulation using the new high-level file conversion API in PHP.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.3.0-beta1.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$this->MyImage()->Convert('webp')->FitMax(100, 100);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Deletes in MyPage\nDESCRIPTION: Shows how to implement cascade deletes for Banner relationships in MyPage class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nclass MyPage extends Page\n{\n    private static $has_many = [\n        'Banners' => Banner::class,\n    ];\n\n    private static $cascade_deletes = [\n        'Banners',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging Middleware\nDESCRIPTION: Modifies the logging middleware to conditionally log errors based on their type. Critical errors are sent to a third-party service, regular errors are passed to the next middleware, and minor errors are ignored.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport thirdPartyLogger from 'third-party-logger';\nimport LoggingService from './LoggingService';\n\nconst addLoggingMiddleware = (next) => (error) => {\n  // Critical errors go to a thirdparty service\n  if (error.type === LoggingService.CRITICAL) {\n    thirdPartyLogger.send(error.message);\n  }\n  // Other errors get logged, but not to our thirdparty\n  else if (error.type === LoggingService.ERROR) {\n    next(error);\n  }\n  // Minor errors are ignored\n  else {\n    // Do nothing!\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Including Font Awesome CSS in TinyMCE using YML Configuration\nDESCRIPTION: This YAML configuration sets the editor CSS for TinyMCE to include a link to Font Awesome 4, enabling the use of Font Awesome icons within content.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig:\n  editor_css:\n    - \"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"\n```\n\n----------------------------------------\n\nTITLE: Custom Enum Type Mapping Configuration for DBFieldTypes\nDESCRIPTION: YAML configuration example showing how to specify custom enum names for the dbFieldTypes plugin. This allows developers to override the default enum naming conventions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_graphql/config.yml\nmodelConfig:\n  DataObject:\n    plugins:\n      dbFieldTypes:\n        enumTypeMapping:\n          MyType:\n            myEnumField: SomeCustomTypeName\n```\n\n----------------------------------------\n\nTITLE: Installing silverstripe/linkfield Module with Composer\nDESCRIPTION: Command to install the officially supported silverstripe/linkfield module version 4.0.0-rc1 using Composer.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require silverstripe/linkfield\n```\n\n----------------------------------------\n\nTITLE: Custom Image Rendering Template with WebP Support\nDESCRIPTION: HTML template example showing how to implement WebP image format support with fallback using the picture element in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.3.0.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<picture>\n    <source srcset=\"$Convert('webp').Link\" type=\"image/webp\">\n    <img $AttributesHTML >\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Enabling All Deprecation Notices in Silverstripe CMS\nDESCRIPTION: Enables all deprecation notices, including those with no immediate replacement, by passing true to Deprecation::enable() in app/_config.php.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/07_Deprecations.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nDeprecation::enable(true);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Model Creator in YAML Configuration\nDESCRIPTION: This code snippet demonstrates how to register a custom model creator in the GraphQL configuration using a YAML file. The configuration adds the DataObject ModelCreator to the modelCreators array.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/06_extending/adding_a_custom_model.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/config.yml\nmodelCreators:\n  - 'SilverStripe\\GraphQL\\Schema\\DataObject\\ModelCreator'\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP email in Silverstripe CMS 5\nDESCRIPTION: Example of using the new MAILER_DSN environment variable to configure SMTP email settings. This replaces the previous APP_SMTP_USERNAME and APP_SMTP_PASSWORD variables.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nMAILER_DSN=smtp://username:password@smtp.example.com:25\n```\n\n----------------------------------------\n\nTITLE: Using Modulus in SilverStripe Templates\nDESCRIPTION: Shows how to use the $Modulus variable to create repeating column classes in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_12\n\nLANGUAGE: ss\nCODE:\n```\n<% loop $Children %>\n    <%-- results in divs with `column-1` up to `column-4`, then repeating from `column-1` again -%>\n    <div class=\"column-{$Modulus(4)}\">\n        ...\n    </div>\n<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Error Codes for ErrorPage in Silverstripe YAML\nDESCRIPTION: YAML configuration example showing how to limit the error codes available in the ErrorPage dropdown in the CMS. This allows for a simpler interface by restricting the error codes to only those that are commonly used, such as 400, 403, 404, and 500.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\ErrorPage\\ErrorPage:\n  allowed_error_codes:\n    - 400\n    - 403\n    - 404\n    - 500\n```\n\n----------------------------------------\n\nTITLE: SQL UNION Clause with SQLSelect\nDESCRIPTION: Demonstrates how to add UNION clauses to SQL queries using SilverStripe's SQLSelect, with options for distinct and all union types\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\Queries\\SQLSelect;\n\n$baseQuery = SQLSelect::create()->setFrom($tableName)->addWhere(/*...*/);\n$anotherQuery = SQLSelect::create()->setFrom($tableName)->addWhere(/*...*/);\n$baseQuery->addUnion($anotherQuery, SQLSelect::UNION_DISTINCT);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Logging Service with Middleware\nDESCRIPTION: Creates a new logging service by applying the middleware to the original `LoggingService`. This combines the functionalities of the original service and the added middleware.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport LoggingService from './LoggingService';\nimport addLoggingMiddleware from './addLoggingMiddleware';\n\nconst MyNewLogger = addLoggingMiddleware(LoggingService);\n```\n\n----------------------------------------\n\nTITLE: Defining Composer Requirements for Silverstripe CMS 4 and 5\nDESCRIPTION: This JSON snippet specifies composer requirements to allow compatibility with both Silverstripe CMS 4 and 5. This ensures that your module can be installed in environments running either version of the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"require\": {\"silverstripe/framework\": \"^4 || ^5\",\"silverstripe/cms\": \"^4 || ^5\",\"silverstripe/admin\": \"^1 || ^2\"}}\n```\n\n----------------------------------------\n\nTITLE: Adding a Private Repository to Composer Configuration\nDESCRIPTION: This JSON snippet shows how to add a private repository to the composer.json file of a Silverstripe CMS project. This allows Composer to find and install modules from private repositories.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/00_Modules.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"git@github.com:my_vendor/module_name.git\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Type Formatter Configuration\nDESCRIPTION: Configuration for custom type name formatting in GraphQL schema.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/01_adding_dataobjects_to_the_schema.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmodelConfig:\n  DataObject:\n    type_formatter: ['App\\GraphQL\\Formatter', 'formatType']\n```\n\n----------------------------------------\n\nTITLE: Modifying Breadcrumb Text Transformer\nDESCRIPTION: Shows how to transform breadcrumb text by intercepting the SET_BREADCRUMBS action and modifying the payload before passing to the original reducer.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyReducerTransformer = (originalReducer) => (getGlobalState) => (state, { type, payload }) => {\n  switch (type) {\n    case 'SET_BREADCRUMBS': {\n      return originalReducer(state, {\n        type,\n        payload: {\n          breadcrumbs: payload.breadcrumbs.map((crumb) => (\n            (crumb.text === 'Files')\n              ? { ...crumb, text: 'Custom Files' }\n              : crumb\n          )),\n        },\n      });\n    }\n    default: {\n      return state;\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Class Relocations in SilverStripe CMS\nDESCRIPTION: Details of classes that have been moved from silverstripe/cms to other modules like silverstripe/admin and silverstripe/versioned-admin. This includes navigator-related classes and their new locations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nSilverStripe\\CMS\\Controllers\\SilverStripeNavigator -> SilverStripe\\Admin\\Navigator\\SilverStripeNavigator\nSilverStripe\\CMS\\Controllers\\SilverStripeNavigatorItem -> SilverStripe\\Admin\\Navigator\\SilverStripeNavigatorItem\nSilverStripe\\CMS\\Controllers\\SilverStripeNavigatorItem_Unversioned -> SilverStripe\\Admin\\Navigator\\SilverStripeNavigatorItem_Unversioned\nSilverStripe\\CMS\\Controllers\\SilverStripeNavigatorItem_ArchiveLink -> SilverStripe\\VersionedAdmin\\Navigator\\SilverStripeNavigatorItem_ArchiveLink\nSilverStripe\\CMS\\Controllers\\SilverStripeNavigatorItem_LiveLink -> SilverStripe\\VersionedAdmin\\Navigator\\SilverStripeNavigatorItem_LiveLink\nSilverStripe\\CMS\\Controllers\\SilverStripeNavigatorItem_StageLink -> SilverStripe\\VersionedAdmin\\Navigator\\SilverStripeNavigatorItem_StageLink\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Anonymization for LoginSessions in SilverStripe\nDESCRIPTION: This YAML configuration enables IP address anonymization for LoginSession models in SilverStripe. When set to true, stored IP addresses will be anonymized.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/03_Managing_Sessions.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\SessionManager\\Models\\LoginSession:\n  anonymize_ip: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Redirection Rules in SilverStripe YAML\nDESCRIPTION: Shows how to configure basic URL redirection rules in SilverStripe's YAML configuration using the arrow syntax.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/04_Redirection.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'about': '->about-us'\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for silverstripe/reports in Markdown\nDESCRIPTION: This snippet shows the changelog entry for the silverstripe/reports package, including the version update and a specific commit.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- silverstripe/reports (5.3.0 -> 5.4.0)\n  - 2024-10-14 [556cb366](https://github.com/silverstripe/silverstripe-reports/commit/556cb3663879845d3ae454f74bfdf32399b847e5) PR fixes. (Mojmir Fendek)\n```\n\n----------------------------------------\n\nTITLE: Player DataObject Class Definition\nDESCRIPTION: Example Player class implementing TestOnly interface with database fields and relationships.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Test;\n\nuse SilverStripe\\Dev\\TestOnly;\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject implements TestOnly\n{\n    private static $db = [\n        'Name' => 'Varchar(255)',\n    ];\n\n    private static $has_one = [\n        'Team' => Team::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Arbitrary Data in Silverstripe Templates\nDESCRIPTION: Demonstrates how to wrap arbitrary data in ViewableData objects for rendering in Silverstripe templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/04_Rendering_Templates.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Control\\Director;\nuse SilverStripe\\ORM\\ArrayList;\nuse SilverStripe\\View\\ArrayData;\n\nclass MyPageController extends PageController\n{\n    // ...\n\n    public function iwantmyajax()\n    {\n        if (Director::is_ajax()) {\n            return $this->customise([\n                'Name' => 'John',\n                'Role' => 'Head Coach',\n                'Experience' => ArrayList::create([\n                    ArrayData::create([\n                        'Title' => 'First Job',\n                    ])\n                    ArrayData::create([\n                        'Title' => 'Second Job',\n                    ]),\n                ]),\n            ])->renderWith('AjaxTemplate');\n        } else {\n            return $this->httpError(400);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Class Setup with Multiple Fixtures\nDESCRIPTION: Example showing how to configure a test class with multiple fixture files and TestOnly dataobjects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Test;\n\nuse SilverStripe\\Dev\\SapphireTest;\n\nclass MyNewTest extends SapphireTest\n{\n    protected static $fixture_file = [\n        'fixtures.yml',\n        'otherfixtures.yml',\n    ];\n\n    protected static $extra_dataobjects = [\n        Player::class,\n        Team::class,\n    ];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating withRouter Higher Order Component\nDESCRIPTION: Updated implementation of withRouter HOC for React components using the new SilverStripe CMS 5 approach\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport withRouter, { routerPropTypes } from 'lib/withRouter';\n\nclass MyAdmin extends Component {\n  // Your implementation here\n}\n\nMyAdmin.propTypes = {\n  router: routerPropTypes,\n};\n\nexport default withRouter(MyAdmin);\n```\n\n----------------------------------------\n\nTITLE: YAML Fixture Definition\nDESCRIPTION: Example YAML fixture file defining test data for Player and Team objects with relationships.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Test\\Team:\n  hurricanes:\n    Name: The Hurricanes\n    Origin: Wellington\n  crusaders:\n    Name: The Crusaders\n    Origin: Canterbury\nApp\\Test\\Player:\n  john:\n    Name: John\n    Team: =>App\\Test\\Team.hurricanes\n  joe:\n    Name: Joe\n    Team: =>App\\Test\\Team.crusaders\n  jack:\n    Name: Jack\n    Team: =>App\\Test\\Team.crusaders\n```\n\n----------------------------------------\n\nTITLE: Adding UNION Clause to DataQuery in Silverstripe PHP\nDESCRIPTION: Shows how to add a UNION clause to a DataQuery in Silverstripe ORM, enabling combination of multiple queries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.2.0-beta1.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$baseQuery = DataQuery::create(MyClass::class)->where(...);\n$anotherQuery = DataQuery::create(MyClass::class)->where(...);\n$baseQuery->union($anotherQuery, SQLSelect::UNION_ALL);\n```\n\n----------------------------------------\n\nTITLE: Defining Base Product Class in PHP\nDESCRIPTION: Basic PHP class definition for a Product data object in SilverStripe, with a Price field defined in the database.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nclass Product extends DataObject\n{\n    private static $db = ['Price' => 'Int'];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a working branch for Silverstripe development\nDESCRIPTION: Set up a new Git branch for your Silverstripe contribution, ensuring you're starting from the correct base branch.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/01_Code.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd vendor/<org>/<module>\ngit checkout --track origin/5.1\ngit checkout -b <your-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Defining Product Subclass in PHP\nDESCRIPTION: Creating a DigitalProduct subclass that extends the base Product class with an additional DownloadURL field.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nclass DigitalProduct extends Product\n{\n    private static $db = ['DownloadURL' => 'Varchar'];\n}\n```\n\n----------------------------------------\n\nTITLE: Add constructive style on alternate state (JavaScript)\nDESCRIPTION: This JavaScript code uses Entwine to add a \"constructive\" style to the *Clean-up* button when it's in the alternate state. It listens for the `onafterrefreshalternate` event (a Silverstripe-specific jQuery UI hook executed whenever the button is rendered) and adds or removes the `ss-ui-action-constructive` class based on the button's `showingAlternate` option.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/CMS_Alternating_Button.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njQuery.entwine('mysite', ($) => {\n  $('.cms-edit-form .btn-toolbar #Form_EditForm_action_cleanup').entwine({\n    /**\n             * onafterrefreshalternate is SS-specific jQuery UI hook that is executed\n             * every time the button is rendered (including on initialisation).\n             */\n    onbuttonafterrefreshalternate() {\n      if (this.button('option', 'showingAlternate')) {\n        this.addClass('ss-ui-action-constructive');\n      } else {\n        this.removeClass('ss-ui-action-constructive');\n      }\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using $Me Variable in SilverStripe Templates\nDESCRIPTION: Shows how to use the $Me variable to output the current object in scope by calling forTemplate() in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_18\n\nLANGUAGE: ss\nCODE:\n```\n<%-- app/templates/App/PageType/Layout/HomePage.ss -%>\n\n<%-- calls forTemplate() on the current object in scope and prints Page: Home -%>\n$Me\n```\n\n----------------------------------------\n\nTITLE: Type Changes in TestMailer Methods\nDESCRIPTION: Method signature updates for TestMailer class including return type specifications and parameter type changes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nTestMailer::clearEmails(): void\nTestMailer::findEmail(string $to, ?string $from = null, ?string $subject = null, ?string $content = null): ?array\nTestMailer::saveEmail(array $data)\n```\n\n----------------------------------------\n\nTITLE: Using DataObject get_one() Method in SilverStripe PHP\nDESCRIPTION: Demonstrates the updated syntax for calling get_one() directly from DataObject subclasses without explicitly specifying the class name as the first argument\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/alpha/5.0.0-alpha1.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSiteTree::get_one(filter: ['Title:startsWith' => 'About'])\n```\n\n----------------------------------------\n\nTITLE: Parent Access in SilverStripe Templates\nDESCRIPTION: Demonstrates accessing parent pages in the hierarchy using the Parent property.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_19\n\nLANGUAGE: ss\nCODE:\n```\n<%-- given we're on 'Bob Marley' in \"about us > staff > bob marley\" --%>\n\n<%-- prints 'staff' --%>\n$Parent.Title\n\n<%-- prints 'about us' --%>\n$Parent.Parent.Title\n```\n\n----------------------------------------\n\nTITLE: Building Silverstripe database using sake in Bash\nDESCRIPTION: This command uses the sake tool to build the Silverstripe database. It should be run after setting up the .env file to initialize the database structure.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/sake dev/build\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Rate Limiting for Security Controller\nDESCRIPTION: Removes the built-in rate limiting by redefining the Security controller URL rules without middleware.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/06_Rate_Limiting.md#2025-04-21_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Director:\n  rules:\n    'Security//$Action/$ID/$OtherID': SilverStripe\\Security\\Security\n```\n\n----------------------------------------\n\nTITLE: Applying a CORS Configuration to a Single GraphQL Endpoint (YAML)\nDESCRIPTION: Specifies CORS settings for a single GraphQL endpoint instance within the SilverStripe framework, demonstrating disabling CORS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/02_cors.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\\n  SilverStripe\\GraphQL\\Controller.default:\\n    properties:\\n      corsConfig:\\n        Enabled: false\n```\n\n----------------------------------------\n\nTITLE: Adding UNION Clause to SQLSelect in Silverstripe PHP\nDESCRIPTION: Demonstrates how to add a UNION clause to an SQLSelect query in Silverstripe ORM, allowing combination of multiple queries.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.2.0-beta1.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$baseQuery = SQLSelect::create()->setFrom($tableName)->addWhere(...);\n$anotherQuery = SQLSelect::create()->setFrom($tableName)->addWhere(...);\n$baseQuery->addUnion($anotherQuery, SQLSelect::UNION_DISTINCT);\n```\n\n----------------------------------------\n\nTITLE: Custom Password Validation Tests - YAML\nDESCRIPTION: YAML configuration showing how to add custom password validation tests using regex patterns in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Security\\PasswordValidator:\n  character_strength_tests:\n    contains_secret_word: '/1337pw/'\n```\n\n----------------------------------------\n\nTITLE: Type Mapping Configuration\nDESCRIPTION: Explicit type mapping configuration for GraphQL types to handle naming collisions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/01_adding_dataobjects_to_the_schema.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntypeMapping:\n  App\\PageType\\Page: SpecialPage\n```\n\n----------------------------------------\n\nTITLE: Example PJAX HTTP Request and Response\nDESCRIPTION: This section illustrates a sample HTTP request with the `X-Pjax` header, specifying which fragments should be updated. The response is a JSON object containing the HTML for those fragments.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n```text\nGET /admin/myadmin HTTP/1.1\nX-Pjax:MyRecordInfo,Breadcrumbs\nX-Requested-With:XMLHttpRequest\n```\n```\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\"MyRecordInfo\": \"<div...\", \"CMSBreadcrumbs\": \"<div...\"}\n```\n```\n\n----------------------------------------\n\nTITLE: YML Configuration for Font Awesome Styles in TinyMCE\nDESCRIPTION: YML configuration to add Font Awesome CSS stylesheet to TinyMCE editor\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/font-awesome.yml\nSilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig:\n  editor_css:\n    - \"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"\n```\n\n----------------------------------------\n\nTITLE: Type Prefix Configuration\nDESCRIPTION: Configuration for adding prefixes to DataObject types in GraphQL schema.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/01_adding_dataobjects_to_the_schema.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmodelConfig:\n  DataObject:\n    type_prefix: 'App'\n```\n\n----------------------------------------\n\nTITLE: Aliasing Project Branch in composer.json for Silverstripe CMS\nDESCRIPTION: This JSON snippet demonstrates how to use Composer's aliasing feature to specify how a project branch should be treated for dependency resolution. It's useful when working with forks or feature branches.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"silverstripe/recipe-cms\": \"~5.0.0@stable\",\n        \"silverstripe/framework\": \"dev-myproj as 5.0.0\",\n        \"silverstripe-themes/simple\": \"~3.2.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing GridFieldDetailForm Fields\nDESCRIPTION: Example of customizing the fields displayed in a GridFieldDetailForm using setFields method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/04_GridField.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Forms\\FieldList;\nuse App\\Forms\\TextField;\nuse SilverStripe\\Forms\\GridField\\GridFieldDetailForm;\n\n$form = $gridField->getConfig()->getComponentByType(GridFieldDetailForm::class);\n$form->setFields(FieldList::create(\n    TextField::create('Title')\n));\n```\n\n----------------------------------------\n\nTITLE: Fetching Services with Context\nDESCRIPTION: Illustrates how to fetch services with context using `Injector.get`. This allows retrieving specific components based on the context they are used in.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst CalendarComponent = Injector.get('Calendar', 'AssetAdmin.FileEditForm.StartDate');\n```\n\n----------------------------------------\n\nTITLE: Removed Deprecated Classes from SilverStripe Framework\nDESCRIPTION: List of deprecated PHP classes that have been removed from the SilverStripe Framework. These classes span across multiple namespaces including Control, Core, Dev, Forms, ORM, and View.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Control\\Email\\SwiftMailer\nSilverStripe\\Control\\Email\\SwiftPlugin\nSilverStripe\\Control\\RequestProcessor\nSilverStripe\\Core\\Startup\\AbstractConfirmationToken\nSilverStripe\\Core\\Startup\\ConfirmationTokenChain\nSilverStripe\\Core\\Startup\\ErrorControlChain\nSilverStripe\\Core\\Startup\\ErrorControlChainMiddleware\n```\n\n----------------------------------------\n\nTITLE: Building CSS Components Separately\nDESCRIPTION: Command to build only CSS components using environment variable.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/06_Build_Tooling.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nWEBPACK_CHILD=css yarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating Anchor Links in SilverStripe Templates\nDESCRIPTION: This snippet demonstrates how to create anchor links in a SilverStripe template. It shows a simple unordered list with two anchor links pointing to different sections of the same page.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/How_Tos/03_Disable_Anchor_Links.md#2025-04-21_snippet_0\n\nLANGUAGE: ss\nCODE:\n```\n<ul>\n    <li><a href=\"#section1\">Section 1</a></li>\n    <li><a href=\"#section2\">Section 2</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Translation Strings in Admin Module\nDESCRIPTION: Updates to add missing translation strings in the Admin module's src/en.json file and make search options translatable in SearchBox.js component.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add missing js translation strings to src/en.json file\n// Make Search options string translatable in SearchBox.js\n```\n\n----------------------------------------\n\nTITLE: Reinstalling a Silverstripe module with source code\nDESCRIPTION: Reinstall a Silverstripe module using Composer's prefer-source option to get the full source code for development.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/01_Code.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer reinstall <org>/<module> --prefer-source\n```\n\n----------------------------------------\n\nTITLE: Defining PJAX Fragments in SS Template\nDESCRIPTION: This code snippet demonstrates how to define PJAX fragments in a Silverstripe template (.ss). The `data-pjax-fragment` attribute is used to mark specific sections as PJAX fragments.  Links with the `cms-panel-link` class and `data-pjax-target` attribute specify which fragments to update on click.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_9\n\nLANGUAGE: ss\nCODE:\n```\n```ss\n<%-- MyAdmin.ss --%>\n<% include SilverStripe\\\\Admin\\\\CMSBreadcrumbs %>\n<div>Static content (not affected by update)</div>\n<% include MyRecordInfo %>\n<a href=\"$Link\" class=\"cms-panel-link\" data-pjax-target=\"MyRecordInfo,Breadcrumbs\">\n    Update record info\n</a>\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling User Agent Check (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to disable the user agent header session validation. It is strongly discouraged to disable this check, as it weakens security against session hijacking attacks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/02_Sessions.md#2025-04-21_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Session:\n  strict_user_agent_check: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Removal Limit for Session Garbage Collection in Silverstripe\nDESCRIPTION: Configuration to limit the number of items removed in a single run of the GarbageCollectionService. This helps manage performance when cleaning up large numbers of expired sessions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\SessionManager\\Services\\GarbageCollectionService:\n  batch_remove_limit: 1000\n```\n\n----------------------------------------\n\nTITLE: Deprecated Form::sessionFieldError() Parameter in Silverstripe PHP\nDESCRIPTION: The null value for $cast parameter in Form::sessionFieldError() is deprecated and developers should use a ValidationResult::CAST_* constant instead.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nForm::sessionFieldError()\n```\n\n----------------------------------------\n\nTITLE: Enabling Sudo Mode for Models in YAML\nDESCRIPTION: YAML configuration showing how to enable sudo mode protection for a specific DataObject model.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/04_Sudo_Mode.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nSomeModule\\Model\\Player:\n  require_sudo_mode: true\n```\n\n----------------------------------------\n\nTITLE: Password Validation Configuration - YAML\nDESCRIPTION: YAML configuration for setting up password validation rules in Silverstripe CMS, including minimum length, historic count, and test score requirements.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n---\nName: mypasswords\nAfter: '#corepasswords'\n---\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Security\\PasswordValidator:\n    properties:\n      MinLength: 7\n      HistoricCount: 6\n      MinTestScore: 3\n\n# In the case someone uses `new PasswordValidator` instead of Injector, provide some safe defaults through config.\nSilverStripe\\Security\\PasswordValidator:\n  min_length: 7\n  historic_count: 6\n  min_test_score: 3\n```\n\n----------------------------------------\n\nTITLE: Entwine Event Handlers\nDESCRIPTION: This snippet shows how event handlers work with Entwine namespaces. Clicking on a div element will trigger both the global onclick handler, setting the background to blue, and the namespaced onclick handler in the 'foo' namespace, setting the color to green. This illustrates how specificities are calculated per namespace.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$('div').entwine({\n  onclick() {\n    this.css({ backgroundColor: 'blue' });\n  },\n});\n\n$.entwine('foo', ($) => {\n  $('div').entwine({\n    onclick() {\n      this.css({ color: 'green' });\n    },\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Changes in SilverStripe Email Class\nDESCRIPTION: Various methods in the SilverStripe Email class have had their parameter types changed from 'dynamic' to more specific types. This includes changes in the constructor and several other methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Control\\Email\\Email::__construct($from: string|array, $to: string|array, $subject: string, $body: string, $cc: string|array, $bcc: string|array, $returnPath: string)\nSilverStripe\\Control\\Email\\Email::addAttachment($path: string, $alias: string|null, $mime: string|null)\nSilverStripe\\Control\\Email\\Email::addAttachmentFromData($data: string, $name: string, $mime: string)\nSilverStripe\\Control\\Email\\Email::addData($nameOrData: string|array, $value: mixed)\nSilverStripe\\Control\\Email\\Email::is_valid_address($address: string)\nSilverStripe\\Control\\Email\\Email::obfuscate($email: string, $method: string)\nSilverStripe\\Control\\Email\\Email::removeData($name: string)\nSilverStripe\\Control\\Email\\Email::setBCC($address: string|array, $name: string)\n```\n\n----------------------------------------\n\nTITLE: Accessing Kernel via Injector in Silverstripe CMS (PHP)\nDESCRIPTION: This code snippet demonstrates how to access the Kernel object using the Injector in Silverstripe CMS. It retrieves the Kernel instance and then gets the current environment.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/16_Execution_Pipeline/03_App_Object_and_Kernel.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\Core\\Kernel;\n\n$kernel = Injector::inst()->get(Kernel::class);\necho 'Current environment: ' . $kernel->getEnvironment();\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Escaping in Templates\nDESCRIPTION: Demonstrates forcing escaping on output values in SilverStripe templates using escape types.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_9\n\nLANGUAGE: SS\nCODE:\n```\n <ul>\n    <%-- output: <a href=\"#\" title=\"foo &amp; &#34;bar&#34;\">foo &amp; \"bar\"</a> --%>\n    <li><a href=\"#\" title=\"$Title.ATT\">$Title </a></li>\n    <li>$MyEscapedValue</li> <%-- output: &lt;b&gt;not bold&lt;b&gt; --%>\n    <li>$MyUnescapedValue</li> <%-- output: <b>bold</b> --%>\n    <li>$MyUnescapedValue.XML</li> <%-- output: &lt;b&gt;bold&lt;b&gt; --%>\n</ul>\n\n```\n\n----------------------------------------\n\nTITLE: Handling email send failures in Silverstripe CMS 5\nDESCRIPTION: Example of catching the new TransportExceptionInterface to handle email send failures when using the updated Email class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\n\ntry {\n    $email->send();\n} catch (TransportExceptionInterface $e) {\n    // Handle email send failure\n}\n```\n\n----------------------------------------\n\nTITLE: Apache Directory Security Configuration\nDESCRIPTION: Apache directory configuration to disable PHP execution in the assets directory for security purposes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<Directory \"/var/www/superarcade/public/assets\">\n  php_admin_flag engine off\n</Directory>\n```\n\n----------------------------------------\n\nTITLE: Configuring Garbage Collection in Silverstripe\nDESCRIPTION: The YAML snippet configures the GarbageCollectionService in Silverstripe to limit the batch removal of expired records to 1000 per run. This prevents timeouts or memory issues during garbage collection processes. The service manages removal of outdated session data efficiently in the SessionManager module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/03_Managing_Sessions.md#2025-04-21_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nSilverStripe\\SessionManager\\Services\\GarbageCollectionService:\n  batch_remove_limit: 1000\n\n```\n\n----------------------------------------\n\nTITLE: Example of PHP String Substitution in Translations\nDESCRIPTION: Shows how translatable strings with placeholders work in PHP. Translators should maintain placeholders like %s or {my-variable} in their translations since these are automatically replaced with dynamic content.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/03_Translations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nsprintf('Hello %s', $name);\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Plugins in SilverStripe GraphQL Schema Configuration\nDESCRIPTION: This YAML configuration demonstrates how to override default plugins generically in the modelConfig section of the GraphQL schema.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/01_overview.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_graphql/config.yml\nmodelConfig:\n  DataObject:\n    plugins:\n      inheritance: false # No `DataObject` models get this plugin unless opted into\n    operations:\n      read:\n        plugins:\n          paginateList: false # No `DataObject` models have paginated read operations unless opted into\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Typehints in Extension Subclasses in PHP\nDESCRIPTION: Demonstrates how to use generic typing on the Extension class to specify the owner type. This helps IDEs understand what type to expect for the $owner property and getOwner() method in Extension subclasses.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\nuse SilverStripe\\SiteConfig\\SiteConfig;\n\n/**\n * @extends Extension<SiteConfig>\n */\nclass SiteConfigExtension extends Extension\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PHP Return Type Covariance\nDESCRIPTION: Code example showcasing PHP's covariance feature where return types can be more specific in subclasses, as referenced in the context of composer plugin API changes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass ParentClass {\n    public function execute(): mixed\n    {\n        return null;\n    }\n}\n\nclass ChildClass extends ParentClass {\n    public function execute(): int\n    {\n        return 42;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Dependencies in Silverstripe CMS\nDESCRIPTION: This command updates the installed packages after manually editing the composer.json file to add or remove dependencies.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Versioned Admin Module Updates\nDESCRIPTION: Details changes to versioned-admin module including removed classes and type modifications for controller methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Control\\HTTPResponse // New return type for multiple methods\nSilverStripe\\Control\\HTTPRequest // New parameter type for schema()\nSilverStripe\\Forms\\Form // New parameter type for doRestore()\n```\n\n----------------------------------------\n\nTITLE: Listing Child Pages in Silverstripe Documentation\nDESCRIPTION: This snippet outlines the `[CHILDREN]` syntax for listing child or sibling pages in Silverstripe documentation. It shows how to use modifiers like `Exclude`, `Only`, and `Folder` to control which pages are included in the list. Modifiers can be combined with `asList`, `includeFolders`, and `reverse` modifiers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/02_Documentation.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n[CHILDREN Exclude=\"How_tos,01_Relations\"]\n```\n\nLANGUAGE: text\nCODE:\n```\n[CHILDREN Only=\"rc,beta\"]\n```\n\nLANGUAGE: text\nCODE:\n```\n[CHILDREN Folder=\"How_Tos\"]\n```\n\nLANGUAGE: text\nCODE:\n```\n[CHILDREN asList]\n```\n\nLANGUAGE: text\nCODE:\n```\n[CHILDREN includeFolders]\n```\n\nLANGUAGE: text\nCODE:\n```\n[CHILDREN reverse]\n```\n\nLANGUAGE: text\nCODE:\n```\n[CHILDREN Exclude=\"How_tos\" asList includeFolders reverse]\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Mutation for Version Revert in JavaScript\nDESCRIPTION: This JavaScript snippet defines a GraphQL mutation for reverting a MyVersionedObject to a specific version, including configuration for Apollo Client integration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from '@apollo/client/react/hoc';\nimport gql from 'graphql-tag';\n\nconst mutation = gql`\nmutation revertToMyVersionedObject($id:ID!, $toVersion:Int!) {\n  rollbackMyVersionedObject(\n    id: $id\n    toVersion: $toVersion\n  ) {\n    id\n  }\n}\n`;\n\nconst config = {\n  props: ({ mutate, ownProps: { actions } }) => {\n    const revertToVersion = (id, toVersion) => mutate({\n      variables: {\n        id,\n        toVersion,\n      },\n    });\n\n    return {\n      actions: {\n        ...actions,\n        revertToVersion,\n      },\n    };\n  },\n  options: {\n    refetchQueries: ['ReadHistoryViewerMyVersionedObject']\n  }\n};\n\nexport { mutation, config };\n\nexport default graphql(mutation, config);\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding for HTTP Basic Authentication\nDESCRIPTION: This Bash command demonstrates how to base64 encode credentials for HTTP basic authentication. The output can be used as part of the Authorization HTTP header in GraphQL requests.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/01_authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp -r 'echo base64_encode(\"hello:world\");'\n# aGVsbG86d29ybGQ=\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Style Definition\nDESCRIPTION: Simple CSS class definition that adds a red color style option to the WYSIWYG editor.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/05_Typography.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.red {\n    color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Index Action in Silverstripe Controller\nDESCRIPTION: Shows that an 'index' action is allowed by default in a Silverstripe controller without needing to be explicitly defined in $allowed_actions, unless it's specifically restricted.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/03_Access_Control.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Control\\HTTPRequest;\n\nclass MyController extends Controller\n{\n    public function index(HTTPRequest $request)\n    {\n        // allowed without being defined in $allowed_actions\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PHP Generics for Returning Object Lists\nDESCRIPTION: This code snippet shows how to use PHPDoc annotations with PHPStan-style generic typehints to specify the types expected in a DataList returned from a function. It enhances IDE auto-completion and type-checking, especially for collections. Essential prerequisites include understanding of PHPDoc comments and SilverStripe ORM.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.2.0-beta1.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\CarouselItem;\nuse SilverStripe\\ORM\\DataList;\n\n/**\n * @return DataList<CarouselItem>\n */\nfunction getCarouselItems(): DataList\n{\n    return CarouselItem::get();\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Changes\nDESCRIPTION: Examples of parameter type changes from dynamic to specific types in various methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\npublic function save(array $data, Form $form): HTTPResponse\npublic function redirect(string $url, int $code): HTTPResponse\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Versioned Module Changes\nDESCRIPTION: Documents deprecated method removals and return type changes in the versioned module, particularly around versioning and caching functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Versioned\\Versioned::Versions() // Use instead of allVersions()\nSilverStripe\\Versioned\\Versioned::publishRecursive() // Use instead of doPublish()\nSilverStripe\\Versioned\\Versioned::rollbackRecursive() // Use instead of doRollbackTo()\nSilverStripe\\Versioned\\Versioned::copyVersionToStage() // Use instead of publish()\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deprecated Method Calls in PHP\nDESCRIPTION: Shows how to suppress deprecation notices when calling deprecated methods using Deprecation::withSuppressedNotice wrapper function.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/20_Deprecations/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Dev\\Deprecation;\n\n// ...\n\n// The $myVariable variable will get the result of the call to the deprecated $obj->myDeprecatedMethod()\n$myVariable = Deprecation::withSuppressedNotice(function () {\n    return $obj->myDeprecatedMethod();\n});\n```\n\n----------------------------------------\n\nTITLE: Entwine Namespaces and Scope\nDESCRIPTION: This snippet demonstrates how functions within an Entwine namespace can call other functions, either within the same namespace or in the base namespace. The `bar` function within the 'foo' namespace calls `baz` within the same namespace and `qux` in the base namespace.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$.entwine('foo', ($) => {\n  $('div').entwine({\n    bar() {\n      this.baz();\n      this.qux();\n    },\n    baz() {\n      // eslint-disable-next-line no-console\n      console.log('baz');\n    },\n  });\n});\n\n$('div').entwine({\n  qux() {\n    // eslint-disable-next-line no-console\n    console.log('qux');\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Updated Return Types in TestMailer\nDESCRIPTION: Changes to return types in TestMailer methods for email handling and testing functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\BehatExtension\\Utility\\TestMailer::clearEmails(): void\nSilverStripe\\BehatExtension\\Utility\\TestMailer::findEmail(string $to, ?string $from = null, ?string $subject = null, ?string $content = null): ?array\nSilverStripe\\BehatExtension\\Utility\\TestMailer::saveEmail(array $data)\n```\n\n----------------------------------------\n\nTITLE: Using Implicit Layout Templates in Silverstripe CMS\nDESCRIPTION: Demonstrates how to use implicit Layout type templates and rely on template inheritance in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/04_Rendering_Templates.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// This assumes you have moved the Coach_Message template to `templates/Layout/Coach_Message.ss`\n$this->customise($data)->renderWith(['Coach_Message', 'Page']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for SilverStripe CMS JavaScript\nDESCRIPTION: This JavaScript snippet configures Webpack for building SilverStripe CMS JavaScript, setting up the necessary paths and entry points.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst Path = require('path');\nconst { JavascriptWebpackConfig } = require('@silverstripe/webpack-config');\n\nconst PATHS = {\n  ROOT: Path.resolve(),\n  SRC: Path.resolve('app/client/src'),\n  DIST: Path.resolve('app/client/dist'),\n};\n\nmodule.exports = [\n  new JavascriptWebpackConfig('cms-js', PATHS)\n    .setEntry({\n      bundle: `${PATHS.SRC}/boot/index.js`,\n    })\n    .getConfig(),\n];\n```\n\n----------------------------------------\n\nTITLE: Git Commit for Patch Update\nDESCRIPTION: Git command to commit composer files after a patch update.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/01_Keeping_projects_up_to_date.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit composer.* -m \"Upgrade the recipe to latest patch release\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Slash for URLs in Silverstripe CMS\nDESCRIPTION: YML configuration to add a trailing slash to all URLs generated by Silverstripe CMS by default\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Controller:\n  add_trailing_slash: true\n```\n\n----------------------------------------\n\nTITLE: Custom DataObject Ownership Example - Child Class\nDESCRIPTION: Shows the corresponding child class implementation for custom ownership relationships.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass MyChild extends DataObject\n{\n    private static $extensions = [\n        Versioned::class,\n    ];\n\n    private static $owned_by = [\n        'Parent',\n    ];\n\n    public function Parent()\n    {\n        return MyParent::get()->first();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query Using DBFieldArgs Plugin in SilverStripe\nDESCRIPTION: Example GraphQL query demonstrating the usage of DBFieldArgs plugin with various field formats. The query retrieves pages with formatted content, created date, and specific blog page fields with custom formatting.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/02_query_plugins.md#2025-04-21_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readPages {\n    nodes {\n      content(format: LIMIT_SENTENCES, limit: 4)\n      created(format: NICE)\n\n      ... on BlogPage {\n        introText(format: FIRST_PARAGRAPH)\n        publishDate(format: CUSTOM, customFormat: \"dd/MM/yyyy\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Warnings via PHP in Silverstripe CMS\nDESCRIPTION: Uses the Deprecation::enable() static method in the project's app/_config.php file to enable deprecation warnings.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/07_Deprecations.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nDeprecation::enable();\n```\n\n----------------------------------------\n\nTITLE: Disabling Autologin Token Regeneration in Silverstripe\nDESCRIPTION: Configuration example to disable automatic regeneration of the 'remember me' token during session renewal. This helps prevent unexpected logouts while maintaining security. In Silverstripe 6.0, tokens will never be regenerated during session renewal by default.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.3.0.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Security\\RememberLoginHash:\n  replace_token_during_session_renewal: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Typehints for DataList Returns in PHP\nDESCRIPTION: Example of adding a generic typehint to a function that returns a DataList to indicate the specific type of objects contained in the list. This improves IDE type hinting when working with the returned collection.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\CarouselItem;\nuse SilverStripe\\ORM\\DataList;\n\n/**\n * @return DataList<CarouselItem>\n */\nfunction getCarouselItems(): DataList\n{\n    return CarouselItem::get();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Return Types in SilverStripe FullTextSearch Utils Classes\nDESCRIPTION: Changes return types for various methods in CombinationsArrayIterator and MultipleArrayIterator classes from dynamic to specific types.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\CombinationsArrayIterator::current(): mixed\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\CombinationsArrayIterator::key(): mixed\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\CombinationsArrayIterator::next(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\CombinationsArrayIterator::rewind(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\CombinationsArrayIterator::valid(): bool\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\MultipleArrayIterator::current(): mixed\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\MultipleArrayIterator::key(): mixed\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\MultipleArrayIterator::next(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\MultipleArrayIterator::rewind(): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\MultipleArrayIterator::valid(): bool\n```\n\n----------------------------------------\n\nTITLE: Replacing a field with a custom component - React\nDESCRIPTION: This snippet updates the form schema to replace the standard PhoneNumber field with the PrettyPhoneNumberField custom component, allowing enhanced input handling.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Forms.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nInjector.transform(\n  'my-custom-component',\n  (updater) => {\n    updater.form.alterSchema(\n      'AssetAdmin.*',\n      (form) =>\n        form\n          .setFieldComponent('PhoneNumber', 'PrettyPhoneNumberField')\n          .getState()\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Create Specific Version Project\nDESCRIPTION: Creates a new Silverstripe CMS project using a specific version constraint (4.13)\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project silverstripe/installer ./my-project ^4.13\n```\n\n----------------------------------------\n\nTITLE: Disabling Deprecation Warnings in CLI Responses via Environment Variable in Silverstripe CMS\nDESCRIPTION: Sets the SS_DEPRECATION_SHOW_CLI environment variable to false to disable deprecation warnings in CLI responses.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/07_Deprecations.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSS_DEPRECATION_SHOW_CLI=false\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using yarn in module directories.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/06_Build_Tooling.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Enabling Placeholders for Integer IDs in YAML\nDESCRIPTION: YAML configuration to enable the use of placeholders for integer IDs in DataList queries. This disables the new optimization for filtering against IDs, which is beneficial in certain scenarios.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.1.0.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\ORM\\DataList:\n  use_placeholders_for_integer_ids: true\n```\n\n----------------------------------------\n\nTITLE: Rewritten Anchor Links in SilverStripe Templates\nDESCRIPTION: This snippet shows how SilverStripe automatically rewrites anchor links in the final HTML output. The links are prefixed with the current page's URL to ensure they work correctly with the base tag.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/How_Tos/03_Disable_Anchor_Links.md#2025-04-21_snippet_1\n\nLANGUAGE: ss\nCODE:\n```\n<ul>\n    <li><a href=\"my-long-page/#section1\">Section 1</a></li>\n    <li><a href=\"my-long-page/#section2\">Section 2</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Showing Deprecation Notices from Supported Code in Silverstripe CMS\nDESCRIPTION: Enables deprecation warnings for code called by core code by setting showNoticesCalledFromSupportedCode to true in app/_config.php.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/07_Deprecations.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nDeprecation::setShowNoticesCalledFromSupportedCode(true);\n```\n\n----------------------------------------\n\nTITLE: Resolving Custom Column Selection Conflicts in Silverstripe PHP\nDESCRIPTION: Demonstrates how to allow custom column selections that conflict with existing database columns in Silverstripe ORM's DataQuery.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.2.0-beta1.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$query = new DataQuery(MyClass::class);\n$query->selectField('\"my custom title\" AS \"Title\"');\n$query->setAllowCollidingFieldStatements(true);\n```\n\n----------------------------------------\n\nTITLE: Adding Sudo Mode Service in Silverstripe Framework\nDESCRIPTION: Implements a sudo mode service in the Silverstripe framework for enhanced security features.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nAdd sudo mode service\n```\n\n----------------------------------------\n\nTITLE: Creating Silverstripe CMS Project with Development Version\nDESCRIPTION: These commands demonstrate how to create a Silverstripe CMS project using the latest unstable version or a specific development version.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project silverstripe/installer ./my-project 5.x-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project silverstripe/installer ./my-project 5.0.x-dev\n```\n\n----------------------------------------\n\nTITLE: Updating Parameter Types in SilverStripe GraphQL Schema Logger\nDESCRIPTION: Changes the parameter type for the $message parameter in various logging methods of the GraphQL Schema Logger class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::alert(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::critical(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::debug(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::emergency(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::error(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::info(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::log(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::notice(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::warning(Stringable|string $message): void\n```\n\n----------------------------------------\n\nTITLE: Forcing Base Namespace in Entwine\nDESCRIPTION: This snippet demonstrates how to force the use of the base namespace when calling a function within an Entwine namespace. By calling `entwine('.')`, the `baz` function in the base namespace is called instead of any namespaced version.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$.entwine('foo', ($) => {\n  $('div').entwine({\n    bar() {\n      this.entwine('.').baz();\n    },\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Meta Generator Tag in Silverstripe CMS\nDESCRIPTION: Demonstrates how to disable the meta generator tag or its version number in Silverstripe CMS using YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/02_Common_Variables.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\CMS\\Model\\SiteTree:\n  meta_generator: ''\n\nSilverStripe\\CMS\\Model\\SiteTree:\n  show_meta_generator_version: false\n```\n\n----------------------------------------\n\nTITLE: Removed Deprecated Methods in SilverStripe EnvironmentCheck Module\nDESCRIPTION: Lists the deprecated methods that have been removed from the SilverStripe\\EnvironmentCheck\\EnvironmentChecker class. These methods have been replaced by the config API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\EnvironmentCheck\\EnvironmentChecker::get_email_results()\nSilverStripe\\EnvironmentCheck\\EnvironmentChecker::get_from_email_address()\nSilverStripe\\EnvironmentCheck\\EnvironmentChecker::get_to_email_address()\nSilverStripe\\EnvironmentCheck\\EnvironmentChecker::set_email_results()\nSilverStripe\\EnvironmentCheck\\EnvironmentChecker::set_from_email_address()\nSilverStripe\\EnvironmentCheck\\EnvironmentChecker::set_to_email_address()\n```\n\n----------------------------------------\n\nTITLE: Eager Loading with Query Manipulation in Silverstripe ORM\nDESCRIPTION: Example demonstrating the new eager loading syntax that allows direct manipulation of eager loading queries through callback functions, specifically filtering Players relation by age.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DataList;\n\n$teams = Team::get()->eagerLoad([\n    'Players' => fn (DataList $list) => $list->filter(['Age:GreaterThan' => 18]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Removed PHP API Methods - Silverstripe Framework\nDESCRIPTION: List of deprecated methods and constants removed from the Silverstripe Framework in version 5.0.0-alpha1. This includes changes related to PHPUnit support, Iterator implementations, and various deprecated methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/alpha/5.0.0-alpha1.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Removed methods and constants\nManifestFileFinder::RESOURCES_DIR\nSilverStripe\\Core\\BaseKernel::getIgnoredCIConfigs()\nSilverStripe\\Core\\Manifest\\Module::getCIConfig()\nSilverStripe\\Dev\\TestKernel::getIgnoredCIConfigs()\nSilverStripe\\Dev\\TestKernel::setIgnoredCIConfigs()\nSilverStripe\\Core\\BaseKernel::sessionEnvironment()\nSilverStripe\\Core\\Extensible::constructExtensions()\n```\n\n----------------------------------------\n\nTITLE: Disabling Server-Side Sanitization in YAML\nDESCRIPTION: Configures SilverStripe CMS to disable server-side sanitization, allowing script and style tags in TinyMCE editor.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/05_Secure_Coding.md#2025-04-21_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n---\nName: project-htmleditor\nAfter: htmleditor\n---\nSilverStripe\\Forms\\HTMLEditor\\HTMLEditorField:\n  sanitise_server_side: false\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Content Structure\nDESCRIPTION: Basic markdown structure defining the documentation page for optional Silverstripe CMS features\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/04_Optional_Features/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Optional features\n---\n\n# Optional features\n\nSilverstripe CMS can be highly customised using both supported and community-made modules. You can find these [one Packagist](https://packagist.org/?type=silverstripe-vendormodule).\n\nThis section highlights some of the CMS features provided by the [Silverstripe CMS supported modules](/project_governance/supported_modules/).\nIn each case you'll need to ensure you have the module installed in your project in order to use the features described here.\n\n[CHILDREN includeFolders]\n```\n\n----------------------------------------\n\nTITLE: Disabling oEmbed Plugin in TinyMCE\nDESCRIPTION: PHP code to disable the ssembed plugin in TinyMCE configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\nTinyMCEConfig::get('cms')->disablePlugins('ssembed');\n```\n\n----------------------------------------\n\nTITLE: Customizing General Search Field Name in PHP\nDESCRIPTION: Set the general search field name for a specific DataObject class using PHP configuration. This example sets the field name to 'my_general_field_name'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    private static string $general_search_field_name = 'my_general_field_name';\n}\n```\n\n----------------------------------------\n\nTITLE: IIS 7.5+ Rewrite Rules for SilverStripe\nDESCRIPTION: IIS URL rewrite configuration to handle file requests and route non-existent files to the framework handler.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<rule name=\"Secure and 404 File rewrite\" stopProcessing=\"true\">\n    <match url=\"^(.*)$\" />\n    <conditions>\n        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n        <add input=\"../index.php\" matchType=\"IsFile\" />\n    </conditions>\n    <action type=\"Rewrite\" url=\"../index.php\" appendQueryString=\"true\" />\n</rule>\n```\n\n----------------------------------------\n\nTITLE: Converting Files in Silverstripe Templates\nDESCRIPTION: Example demonstrating file conversion to WebP format with size manipulation in Silverstripe templates using the new conversion API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.3.0.md#2025-04-21_snippet_1\n\nLANGUAGE: ss\nCODE:\n```\n<%-- Convert an image to webp format and apply the FitMax manipulation to the result --%>\n$MyImage.Convert('webp').FitMax(100, 100)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GraphQL Type\nDESCRIPTION: This snippet demonstrates how to define a basic GraphQL type named `Country` with fields such as `name`, `code`, `population`, and `languages`. It shows how to specify the data type for each field, including scalar types and lists of scalar types.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/02_configuring_your_schema.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_graphql/types.yml\n\nCountry:\n  fields:\n    name: String\n    code: String\n    population: Int\n    languages: '[String]'\"\n```\n\n----------------------------------------\n\nTITLE: Validating URL Using Symfony Constraints in PHP\nDESCRIPTION: The snippet validates a URL using SilverStripe's ConstraintValidator with Symfony's URL constraint. Make sure Symfony's URL constraint is included in the project.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse SilverStripe\\Core\\Validation\\ConstraintValidator;\nuse Symfony\\Component\\Validator\\Constraints\\Url;\n\n$isValid = ConstraintValidator::validate($url, new Url())->isValid();\n```\n\n----------------------------------------\n\nTITLE: Template Scope Change Example - HTML\nDESCRIPTION: Example demonstrating the change in template scope behavior where loop and with blocks now only create one new scope level instead of multiple levels.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<% loop $Pages.Limit(5) %>{$Up.Up.Title}<% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Displaying Dependency Updates in Markdown\nDESCRIPTION: This snippet shows how dependency updates are formatted in Markdown, including the project name, version change, commit hash, date, and description of the change.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n- silverstripe/recipe-kitchen-sink (5.1.0 -> 5.2.0)\n  - 2023-09-28 [fa436ba](https://github.com/silverstripe/recipe-kitchen-sink/commit/fa436ba2898779121eeb21b5da9c02f7d0445e35) Add silverstripe/linkfield (Steve Boyd)\n\n- silverstripe/framework (5.1.0 -> 5.2.0)\n  - 2023-11-12 [bc47d65cc](https://github.com/silverstripe/silverstripe-framework/commit/bc47d65cc5120afcb5b7a97c5e89e3267ad4fc5c) Deprecate configurable silent failures in GridField components (Guy Sartorelli)\n  - 2023-05-31 [7ae903872](https://github.com/silverstripe/silverstripe-framework/commit/7ae90387260e16bc3dd9a1d2bfd92dd9d699c811) Explicitly require psr/http-message ^1 (Steve Boyd)\n```\n\n----------------------------------------\n\nTITLE: API Deprecation of publicPathExists() in Vendor Plugin\nDESCRIPTION: Deprecation notice for publicPathExists() method in Silverstripe vendor plugin v2.0.1.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublicPathExists()\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Asset Admin Return Type Changes\nDESCRIPTION: Return type changes in Asset Admin controller methods to explicitly return HTTPResponse objects. Affects various asset management operations including publishing, unpublishing, and folder creation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\AssetAdmin\\Controller\\AssetAdmin::addtocampaign(): HTTPResponse\nSilverStripe\\AssetAdmin\\Controller\\AssetAdmin::createfolder(): HTTPResponse\nSilverStripe\\AssetAdmin\\Controller\\AssetAdmin::publish(): HTTPResponse\n```\n\n----------------------------------------\n\nTITLE: Basic Test Class Setup with Fixtures in PHP\nDESCRIPTION: Example showing how to set up a basic test class with a fixture file in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Test;\n\nuse SilverStripe\\Dev\\SapphireTest;\n\nclass MyNewTest extends SapphireTest\n{\n    protected static $fixture_file = 'fixtures.yml';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating React Router Path Configuration\nDESCRIPTION: Modifying route path configuration to use relative paths in react-router v6 with SilverStripe CMS\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ConfigHelpers from 'lib/Config';\nimport reactRouteRegister from 'lib/ReactRouteRegister';\nimport MyAdmin from './MyAdmin';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const sectionConfig = ConfigHelpers.getSection('MyAdmin');\n    reactRouteRegister.add({\n        path: sectionConfig.reactRoutePath,\n        component: MyAdminComponent,\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript Bundle in SilverStripe CMS with YAML Configuration\nDESCRIPTION: YAML configuration that ensures a custom JavaScript bundle is included throughout the SilverStripe CMS. It's required before adding the HistoryViewerField to display version history.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_38\n\nLANGUAGE: yml\nCODE:\n```\n---\nName: CustomAdmin\nAfter:\n  - 'versionedadmincmsconfig'\n  - 'versionededitform'\n  - 'cmsscripts'\n  - 'elemental' # Only needed if silverstripe-elemental is installed\n---\nSilverStripe\\Admin\\LeftAndMain:\n  extra_requirements_javascript:\n    - app/client/dist/js/bundle.js\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Changes in FlysystemAssetStore\nDESCRIPTION: Updates to parameter types in FlysystemAssetStore methods, changing from League\\Flysystem\\Filesystem to SilverStripe\\Assets\\Flysystem\\Filesystem.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nFlysystemAssetStore::createResponseFor(SilverStripe\\Assets\\Flysystem\\Filesystem $flysystem)\nFlysystemAssetStore::deleteFromFileStore(SilverStripe\\Assets\\Flysystem\\Filesystem $fs)\nFlysystemAssetStore::moveBetweenFileStore(SilverStripe\\Assets\\Flysystem\\Filesystem $from, SilverStripe\\Assets\\Flysystem\\Filesystem $to)\n```\n\n----------------------------------------\n\nTITLE: Extension Hook Invocation in Silverstripe\nDESCRIPTION: This snippet illustrates how extension hooks are invoked using `extend()`. Methods prefixed with \"extend\" will take precedence. For example, if an `Extension` class has both `onAfterWrite()` and `extendOnAfterWrite()` methods, calling `$this->extend('onAfterWrite')` will execute `extendOnAfterWrite()` instead of `onAfterWrite()`.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Installing Silverstripe LinkField Module with Composer\nDESCRIPTION: Command to install the newly supported silverstripe/linkfield module via Composer. This module provides Link model and form fields for managing links in the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.2.0-beta1.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require silverstripe/linkfield\n```\n\n----------------------------------------\n\nTITLE: Updating search form action URL in CWP search module\nDESCRIPTION: Updates the search form action to use an absolute URL instead of a relative one to fix issues with form submission.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n// Update form action to use absolute URL\n$form->setFormAction(Controller::join_links(Director::absoluteBaseURL(), 'search'));\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Module in Silverstripe CMS\nDESCRIPTION: This command installs a specific module (in this case, silverstripe/cms) using Composer. It can be used to install modules from forks if the repositories section is configured correctly.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require silverstripe/cms\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Column Selections in DataQuery with Silverstripe PHP\nDESCRIPTION: Example showing how to use custom column selections in DataQuery by allowing field statement collisions. The setAllowCollidingFieldStatements() method enables resolving conflicts between custom field statements and existing database columns via a CASE statement.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$query = new DataQuery(MyClass::class);\n$query->selectField('\\'my custom title\\' AS \"Title\"');\n$query->setAllowCollidingFieldStatements(true);\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated CWP Classes in PHP\nDESCRIPTION: Removal of deprecated classes from CWP modules without providing equivalent replacements. This includes classes from cwp, cwp-core, and cwp-search modules.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n// Removed from cwp/cwp\nCWP\\CWP\\Extensions\\CwpSiteSummaryExtension\n\n// Removed from cwp/cwp-core\nCWP\\Core\\Extension\\CWPVersionExtension\n\n// Removed from cwp/cwp-search\nCWP\\Search\\Solr\\CwpSolrConfigStore\n```\n\n----------------------------------------\n\nTITLE: Converting Non-Image to Image in SilverStripe\nDESCRIPTION: This snippet demonstrates how to convert a non-image file to an image in SilverStripe. After performing the actual conversion (which must be implemented separately), the code loads the resulting temporary file into an Image_Backend object using the Injector service.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$tmpFilePath = /* some conversion logic goes here */;\n$backend = Injector::inst()->create(Image_Backend::class);\n$backend->loadFrom($tmpFilePath);\n```\n\n----------------------------------------\n\nTITLE: PHP Configuration Updates for Injector\nDESCRIPTION: Addition of factory_method configuration capability to the Injector class for enhanced dependency injection control.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/alpha/5.0.0-alpha1.md#2025-04-21_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Adding Schema Updater in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to specify a `SchemaUpdater` class in the `execute` section of the GraphQL schema configuration. This allows you to use PHP code to dynamically update the schema.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/04_using_procedural_code.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"SilverStripe\\GraphQL\\Schema\\Schema:\n  schemas:\n    default:\n      config:\n        execute:\n          - 'App\\GraphQL\\MySchema'\"\n```\n\n----------------------------------------\n\nTITLE: SilverStripe ErrorPage Controller Return Type Change\nDESCRIPTION: Modified return type specification for ErrorPageController::handleRequest() method from dynamic to HTTPResponse type.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nclass ErrorPageController extends PageController {\n    public function handleRequest($request): HTTPResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the GraphQL resolver for the query\nDESCRIPTION: This YAML snippet expands the initial query definition to include a resolver callback that links the 'readCountries' query to the 'resolveCountries' method from the MyResolver PHP class. This implements the query's backend processing.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/02_building_a_custom_query.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_graphql/schema.yml\nqueries:\n  readCountries:\n    type: '[Country]'\n    resolver: [ 'App\\GraphQL\\Resolver\\MyResolver', 'resolveCountries' ]\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Warnings in HTTP Responses via PHP in Silverstripe CMS\nDESCRIPTION: Uses the Deprecation::setShouldShowForHttp() method to enable deprecation warnings in HTTP responses in app/_config.php.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/07_Deprecations.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDeprecation::setShouldShowForHttp(true);\n```\n\n----------------------------------------\n\nTITLE: Running Pattern Library Locally\nDESCRIPTION: Bash commands to set up and run the Silverstripe CMS pattern library locally using Composer and Yarn.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install --prefer-source\n(cd vendor/silverstripe/asset-admin && yarn install)\n(cd vendor/silverstripe/campaign-admin && yarn install)\n(cd vendor/silverstripe/cms && yarn install)\ncd vendor/silverstripe/admin && yarn install && yarn pattern-lib\n```\n\n----------------------------------------\n\nTITLE: Return Type Change Examples\nDESCRIPTION: Examples of method return type changes from dynamic to specific types like HTTPResponse and PjaxResponseNegotiator.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\npublic function handleRequest(): HTTPResponse\npublic function getResponseNegotiator(): PjaxResponseNegotiator\npublic function getSchemaResponse(): HTTPResponse\n```\n\n----------------------------------------\n\nTITLE: Resetting Cookie Backend State with Silverstripe in PHP\nDESCRIPTION: Demonstrates how to reset the state of the Cookie_Backend by unregistering the CookieJar service in Silverstripe. This assumes the $_COOKIE superglobal has not been modified. Using the Injector class, it can create a new service when accessing Cookie.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/01_Cookies.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nInjector::inst()->unregisterNamedObject('Cookie_Backend');\n\n// will return $_COOKIE['cookiename'] if set\nCookie::get('cookiename');\n```\n\n----------------------------------------\n\nTITLE: Disabling Anchor Rewriting in SilverStripe Configuration\nDESCRIPTION: This YAML configuration snippet demonstrates how to globally disable anchor link rewriting in SilverStripe. It sets the 'rewrite_hash_links' option to false for the SSViewer class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/How_Tos/03_Disable_Anchor_Links.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/config.yml\nSilverStripe\\View\\SSViewer:\n  rewrite_hash_links: false\n```\n\n----------------------------------------\n\nTITLE: Using a custom component for input field - React\nDESCRIPTION: This snippet defines a PrettyPhoneNumberField component to split a phone number input into three separate text fields, enhancing user input for complex formats.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Forms.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// my-module/js/src/PrettyPhoneNumberField.js\nimport React from 'react';\n\nexport default (props) => {\n  const [area, exchange, ext] = props.value.split('-');\n  function handleChange(i, e) {\n    const parts = props.value.split('-');\n    parts[i] = e.target.value;\n    const formatted = parts.join('-');\n    props.onChange(formatted, e);\n  }\n  return (\n    <div>\n      (<input type=\"text\" value={area} onChange={handleChange.bind(null, 0)}/>)\n      <input type=\"text\" value={exchange} onChange={handleChange.bind(null, 1)}/> -\n      <input type=\"text\" value={ext} onChange={handleChange.bind(null, 2)}/>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default Resources Directory in Silverstripe Vendor Plugin\nDESCRIPTION: Sets the default resources directory to '_resources' in the Silverstripe vendor plugin.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nSet the default resources dir to \"_resources\"\n```\n\n----------------------------------------\n\nTITLE: Return Type Changes in Config Collections\nDESCRIPTION: Changes to return types in various Config Collection classes from dynamic to static typing. This improves type safety and IDE support.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nDeltaConfigCollection::merge(): static\nDeltaConfigCollection::remove(): static\nDeltaConfigCollection::set(): static\nMemoryConfigCollection::merge(): static\nMemoryConfigCollection::remove(): static\nMemoryConfigCollection::set(): static\nMutableConfigCollectionInterface::merge(): static\nMutableConfigCollectionInterface::remove(): static\nMutableConfigCollectionInterface::set(): static\n```\n\n----------------------------------------\n\nTITLE: Broken GraphQL Query After Adding Subclass\nDESCRIPTION: This query will break after adding a subclass because 'price' is now part of a union type and cannot be directly queried.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readProducts {\n    nodes {\n      price # Error: Field \"price\" not found on ProductInheritanceUnion\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hint Callout Block in Silverstripe Documentation\nDESCRIPTION: This snippet shows how to use the `[!TIP]` callout block in Silverstripe documentation for hinting extra use cases or tips about a feature. The syntax is similar to other callout blocks but uses the `[!TIP]` identifier. This renders a \"Hint box\" type callout.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/02_Documentation.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"> [!TIP]\n> ...\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Exact HTML Match by Selector in SilverStripe FunctionalTest\nDESCRIPTION: Asserts that the most recently queried page contains exact matches of specified HTML content within tags matching a CSS selector. The assertion fails if any expected match is not found. Note that &nbsp; characters are stripped from the content.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/01_Functional_Testing.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->assertExactHTMLMatchBySelector('#MyForm_ID p.error', [\n    'That email address is invalid.',\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Method in Silverstripe CMS Page Class\nDESCRIPTION: Demonstrates how to define a simple method 'myMethod' in a Silverstripe CMS Page class that returns the sum of 1 + 1.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/00_Unit_Testing.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Page.php\nnamespace {\n    use SilverStripe\\CMS\\Model\\SiteTree;\n\n    class Page extends SiteTree\n    {\n        public static function myMethod()\n        {\n            return (1 + 1);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vary Header in Silverstripe CMS\nDESCRIPTION: This YAML configuration example demonstrates how to change the value of the Vary header in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/02_HTTP_Cache_Headers.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\Control\\HTTP:\n  vary: \"\"\n```\n\n----------------------------------------\n\nTITLE: Removed Deprecated Classes\nDESCRIPTION: List of deprecated classes that have been removed from the CMS module including controllers, models, extensions and maintenance tasks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nSilverStripe\\CMS\\Controllers\\CMSPageHistoryController\nSilverStripe\\CMS\\Model\\SiteTreeFileExtension\nSilverStripe\\CMS\\Model\\SiteTreeFileFormFactoryExtension\nSilverStripe\\CMS\\Model\\SiteTreeFolderExtension\nSilverStripe\\CMS\\Tasks\\MigrateSiteTreeLinkingTask\nSilverStripe\\CMS\\Tasks\\RemoveOrphanedPagesTask\nSilverStripe\\CMS\\Tasks\\SiteTreeMaintenanceTask\n```\n\n----------------------------------------\n\nTITLE: Composer Version Specification\nDESCRIPTION: Example composer.json configuration showing how to specify a new minor version requirement for Silverstripe CMS recipe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/01_Keeping_projects_up_to_date.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"require\": {\n        \"silverstripe/recipe-cms\": \"~5.1.0\"\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Typehints for Returning Lists in PHP\nDESCRIPTION: This PHP snippet includes typehinting for return types using PHPStan-style generics, aiding IDEs to identify types within collections like DataList of specific models. PHPDoc comments in methods signify what object type the DataList contains.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse App\\Model\\CarouselItem;\nuse SilverStripe\\ORM\\DataList;\n\n/**\n * @return DataList<CarouselItem>\n */\nfunction getCarouselItems(): DataList\n{\n    return CarouselItem::get();\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Methods in SilverStripe FullTextSearch SearchQuery\nDESCRIPTION: Removes several deprecated methods from the SearchQuery class in the FullTextSearch module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Queries\\SearchQuery::exclude()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Queries\\SearchQuery::filter()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Queries\\SearchQuery::fuzzysearch()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Queries\\SearchQuery::inClass()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Queries\\SearchQuery::limit()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Queries\\SearchQuery::page()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Queries\\SearchQuery::search()\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Queries\\SearchQuery::start()\n```\n\n----------------------------------------\n\nTITLE: Return Type Changes in CMS Controllers\nDESCRIPTION: Specification of return types for various controller methods in the CMS module, changing from dynamic to specific types like HTTPResponse and PjaxResponseNegotiator.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nSilverStripe\\CMS\\Controllers\\CMSMain::archive(): HTTPResponse\nSilverStripe\\CMS\\Controllers\\CMSMain::getResponseNegotiator(): PjaxResponseNegotiator\nSilverStripe\\CMS\\Controllers\\CMSMain::handleRequest(): HTTPResponse\n```\n\n----------------------------------------\n\nTITLE: Validating with Symfony Validator in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use SilverStripe's ConstraintValidator for validating values against Symfony's validation constraints to obtain a ValidationResult object. Ensure Symfony's validator components are included.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse SilverStripe\\Core\\Validation\\ConstraintValidator;\n\n/**\n * @var \\Symfony\\Component\\Validator\\Constraint $constraint\n * @var \\SilverStripe\\ORM\\ValidationResult $result\n */\n$result = ConstraintValidator::validate($valueToValidate, $constraint);\n```\n\n----------------------------------------\n\nTITLE: Deprecated PHP Method Calls in SilverStripe Framework\nDESCRIPTION: List of deprecated method calls that will be removed in future versions including Form::sessionFieldError(), DBInt::Times(), Controller::has_curr(), and UserFormsColumnCleanTask.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nForm::sessionFieldError(null) // Deprecated - use ValidationResult::CAST_* constant instead\nDBInt::Times() // Deprecated - no replacement\nController::has_curr() // Deprecated - no replacement\nUserFormsColumnCleanTask // Deprecated - no replacement\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Session Cookie (YAML)\nDESCRIPTION: This YAML configuration snippet shows how to configure a secure session cookie. By setting `cookie_secure` to `true`, Silverstripe will use a different session name (`SECSESSID`) for HTTPS connections, enhancing security.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/18_Cookies_And_Sessions/02_Sessions.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Control\\Session:\n  cookie_secure: true\n```\n\n----------------------------------------\n\nTITLE: Security Commit References in SilverStripe Framework\nDESCRIPTION: Git commit references for security patches addressing XSS vulnerabilities and debugging context detection.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n74904f539347b7d1f8c5b5fb9e28d62ff251ee00 - Sanitise form messages\n09b5052c86932f273e0d733428c9aade70ff2a4a - Wrap embeds with script/style\na555dad4ec73c929f6316bcb4019eb325a5b77d8 - Detect debugging context\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for Silverstripe Testing in XML\nDESCRIPTION: This XML configuration file sets up PHPUnit for testing Silverstripe applications. It specifies the bootstrap file, test directories, and code coverage settings.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/How_Tos/00_Write_a_SapphireTest.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- phpunit.xml -->\n<phpunit bootstrap=\"vendor/silverstripe/framework/tests/bootstrap.php\" colors=\"true\">\n    <testsuites>\n        <testsuite name=\"Default\">\n            <directory>app/tests/</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist addUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">app/src</directory>\n            <exclude>\n                <directory suffix=\".php\">app/tests/</directory>\n            </exclude>\n        </whitelist>\n    </filter>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Disabling Term Splitting Globally in YAML\nDESCRIPTION: Disable splitting search queries into individual terms globally using YAML configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\ORM\\DataObject:\n  general_search_split_terms: false\n```\n\n----------------------------------------\n\nTITLE: Migrating from withRouter HOC to New Router Implementation\nDESCRIPTION: Example of updating a component using the legacy withRouter HOC to use the new router implementation with consolidated router prop types\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport withRouter, { routerPropTypes } from 'lib/withRouter';\n\nclass MyAdmin extends Component {\n  // Your implementation here\n}\n\nMyAdmin.propTypes = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  router: routerPropTypes,\n};\n\nexport default withRouter(MyAdmin);\n```\n\n----------------------------------------\n\nTITLE: Validating Inputs Using Symfony Validator in PHP\nDESCRIPTION: This snippet demonstrates how to validate a value using the ConstraintValidator class, which interfaces with the symfony/validator component, and returns a ValidationResult object. Dependencies include SilverStripe\\Core\\Validation\\ConstraintValidator and Symfony\\Component\\Validator\\Constraints. The key parameter is the constraint against which the value is validated, and the expected output is a ValidationResult object.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.2.0-beta1.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse SilverStripe\\Core\\Validation\\ConstraintValidator;\n\n/**\n * @var \\Symfony\\Component\\Validator\\Constraint $constraint\n * @var \\SilverStripe\\ORM\\ValidationResult $result\n */\n$result = ConstraintValidator::validate($valueToValidate, $constraint);\n```\n\n----------------------------------------\n\nTITLE: Declaring Content Language in HTML Template\nDESCRIPTION: Shows how to set the language attribute in HTML and XHTML templates using Silverstripe's template variables for content locale and script direction.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/13_i18n/index.md#2025-04-21_snippet_1\n\nLANGUAGE: ss\nCODE:\n```\n<%-- 'Page.ss' (HTML) --%>\n<html lang=\"$ContentLocale\">\n```\n\nLANGUAGE: ss\nCODE:\n```\n<%-- 'Page.ss' (XHTML) --%>\n<html lang=\"$ContentLocale\" xml:lang=\"$ContentLocale\" xmlns=\"http://www.w3.org/1999/xhtml\">\n```\n\nLANGUAGE: ss\nCODE:\n```\n<html lang=\"$ContentLocale\" dir=\"$i18nScriptDirection\">\n```\n\n----------------------------------------\n\nTITLE: Updating Parameter Types in SilverStripe FullTextSearch Logging\nDESCRIPTION: Changes the parameter type for the $record parameter in the QueuedJobLogHandler::write() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\Logging\\QueuedJobLogHandler::write(Monolog\\LogRecord $record): void\n```\n\n----------------------------------------\n\nTITLE: Setting Access-Control-Max-Age in SilverStripe GraphQL (YAML)\nDESCRIPTION: Sets the maximum age for caching CORS pre-flight responses in SilverStripe's GraphQL API. The default is 86400 seconds (24 hours), adjustable via YAML.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/02_cors.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nMax-Age: 600\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Structured changelog documenting API changes and deprecations across SilverStripe modules, including commit references and author information\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.3.0-beta1.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Api changes {#changelog-api-changes}\n\n- silverstripe/framework (5.2.0 -> 5.3.0-beta1)\n  - 2024-08-20 [743fe245a](https://github.com/silverstripe/silverstripe-framework/commit/743fe245aa7a1f06a1083e511cddf77300c758bc) Deprecate DataExtension (Steve Boyd)\n  - 2024-07-03 [724e813b8](https://github.com/silverstripe/silverstripe-framework/commit/724e813b8fe0367601b918276fbf376855967983) Make token regeneration optional during autologin session renewal (Garion Herman)\n  - 2024-06-12 [049e54624](https://github.com/silverstripe/silverstripe-framework/commit/049e546247ac6957885f862124d23cc50daf5dc9) Deprecate references to installation tool (#11275) (Guy Sartorelli)\n  - 2024-05-14 [0ba85bc1d](https://github.com/silverstripe/silverstripe-framework/commit/0ba85bc1d00281c79f8623186b2e5ba6a3ec2929) Deprecate passing non-arrays to FieldList methods (Steve Boyd)\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Model Summary Fields and Labels\nDESCRIPTION: Defines summary fields and custom field labels for a Product DataObject, allowing customization of grid column display in the admin interface\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/01_ModelAdmin.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Product extends DataObject\n{\n    private static $field_labels = [\n      'Price' => 'Cost',\n    ];\n\n    private static $summary_fields = [\n      'Name',\n      'Price',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Form Data Loading Parameter Changes\nDESCRIPTION: Changes to the mergeStrategy parameter in Form::loadDataFrom() method. Boolean values are being replaced with explicit constants.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Old deprecated usage\n$form->loadDataFrom($data, true);\n\n// New recommended usage\n$form->loadDataFrom($data, Form::MERGE_CLEAR_MISSING);\n```\n\n----------------------------------------\n\nTITLE: Form Change Tracking with jQuery.data()\nDESCRIPTION: Alternative implementation of form change tracking using jQuery.data() to store state information.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n$('form :input').bind('change', function (event) {\n  $(this.form).data('isChanged', true);\n});\n\n$('form').bind('submit', function (event) {\n  if ($(this).data('isChanged')) {\n    event.preventDefault();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Controller from CMS Menu in PHP\nDESCRIPTION: Demonstrates how to remove a controller from the CMS menu using CMSMenu::remove_menu_class() in a _config.php file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/07_CMS_JSON_APIs.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Controllers\\MySomethingController;\nuse SilverStripe\\Admin\\CMSMenu;\n\nCMSMenu::remove_menu_class(MySomethingController::class);\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Vendor Plugin Deprecations\nDESCRIPTION: Lists removed deprecated classes, methods and constants from the vendor-plugin module, including their replacements where applicable.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\VendorPlugin\\Library // Use instead of VendorModule\nSilverStripe\\VendorPlugin\\Console\\VendorExposeCommand::getAllLibraries() // Use instead of getAllModules()\nSilverStripe\\VendorPlugin\\VendorPlugin::getLibrary() // Use instead of getVendorModule()\nSilverStripe\\VendorPlugin\\Library::getResourcesDir() // Use instead of RESOURCES_PATH\n```\n\n----------------------------------------\n\nTITLE: Disabling Deprecation Warnings in CLI Responses via PHP in Silverstripe CMS\nDESCRIPTION: Uses the Deprecation::setShouldShowForCli() method to disable deprecation warnings in CLI responses in app/_config.php.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/07_Deprecations.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nDeprecation::setShouldShowForCli(false);\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for silverstripe/vendor-plugin in Markdown\nDESCRIPTION: This snippet shows the changelog entry for the silverstripe/vendor-plugin package, including the version update and a specific commit.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- silverstripe/vendor-plugin (2.0.3 -> 2.1.0)\n  - 2024-10-01 [1ffbd53](https://github.com/silverstripe/vendor-plugin/commit/1ffbd536038276f6ebf08c20bf7fb668ebe93d58) `Revert \"DEP Use PHPUnit 11\" (#85)` (Guy Sartorelli)\n```\n\n----------------------------------------\n\nTITLE: Configuring Beta Changelog Page Frontmatter\nDESCRIPTION: YAML frontmatter configuration for a beta changelog documentation page, setting the title, introduction, visibility settings, and icon.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Beta Changelogs\nintroduction: Beta Changelogs\nhideChildren: true\nunhideSelf: true\nicon: folder-open\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Batch Remove Limit for GarbageCollectionService in YAML\nDESCRIPTION: YAML configuration to limit the number of items removed in a single run of garbage collection for session data. This allows for more controlled cleanup of session data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.1.0.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\SessionManager\\Services\\GarbageCollectionService:\n  batch_remove_limit: 1000\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method Removals in DataExtension\nDESCRIPTION: Removal of deprecated methods in the DNADesign\\Elemental\\TopPage\\DataExtension class, including methods related to top page updates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// Removed methods\ndisableTopPageUpdate()\nenableTopPageUpdate()\ngetTopPageUpdate()\nwithTopPageUpdate()\nupdateUsage()\n```\n\n----------------------------------------\n\nTITLE: Custom Data Class Implementation for GridField\nDESCRIPTION: Creates a custom ViewableData subclass to represent data in GridField with ID and title fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/07_Using_GridField_With_Arbitrary_Data.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Data;\n\nuse SilverStripe\\View\\ViewableData;\n\nclass DataRepresentation extends ViewableData\n{\n    private int $id;\n\n    private string $title;\n\n    public function __construct(int $id, string $title)\n    {\n        $this->id = $id;\n        $this->title = $title;\n    }\n\n    public function getID(): int\n    {\n        return $this->id;\n    }\n\n    public function getTitle(): string\n    {\n        return $this->title;\n    }\n\n    /**\n     * Used to detect gridfield columns.\n     * @return string[] Associative array where the keys are field names and the values are display labels.\n     */\n    public function summaryFields(): array\n    {\n        return ['Title' => 'Title'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Font Awesome CSS for TinyMCE Editor\nDESCRIPTION: YML configuration to include the Font Awesome CSS file in the TinyMCE editor. This ensures existing Font Awesome icons can still be displayed in the CMS after the plugin removal.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\n# app/_config/font-awesome.yml\nSilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig:\n  editor_css:\n    - \"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies with Injector\nDESCRIPTION: Sets up dependency registration for components, queries, and transformations using Silverstripe's Injector system\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport Injector, { injectGraphql } from 'lib/Injector';\nimport NotesList from '../components/NotesList';\nimport NotesListItem from '../components/NotesListItem';\nimport readNotes from '../state/readNotes';\n\nconst registerDependencies = () => {\n  Injector.component.register('NotesList', NotesList);\n  Injector.component.register('NotesListItem', NotesListItem);\n  Injector.query.register('ReadNotes', readNotes);\n  \n  Injector.transform(\n    'noteslist-graphql',\n    (updater) => {\n      updater.component('NotesList', injectGraphql('ReadNotes'));\n    }\n  );\n};\n\nexport default registerDependencies;\n```\n\n----------------------------------------\n\nTITLE: Querying Products in GraphQL (Initial Version)\nDESCRIPTION: Simple GraphQL query to fetch products before adding subclasses, directly accessing the price field.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readProducts {\n    nodes {\n      price\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Superclass Logic in Entwine\nDESCRIPTION: Illustrates how to call the less-specific logic from a definition with higher specificity using `this._super()`. This allows applying additional logic to a method or event handler while still calling the logic from the parent declaration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n$('a').entwine({\n  onclick(e) {\n    // eslint-disable-next-line no-console\n    console.log('clicked the link element');\n  },\n});\n\n$('.btn').entwine({\n  onclick(e) {\n    // eslint-disable-next-line no-console\n    console.log('clicked the .btn element');\n    this._super(e);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Requirements in SilverStripe\nDESCRIPTION: This YAML configuration adds the bundled JavaScript file to the SilverStripe admin interface. It specifies the path to the transpiled JavaScript bundle that contains the component customizations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# my-module/_config/config.yml\n---\nName: my-module\n---\nSilverStripe\\Admin\\LeftAndMain:\n  extra_requirements_javascript:\n    # The name of this file will depend on how you've configured your build process\n    - 'my-module/js/dist/main.bundle.js'\n```\n\n----------------------------------------\n\nTITLE: Defining DataObject Relations in PHP\nDESCRIPTION: Example showing how to define has_one relations between DataObject classes in SilverStripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.3.0-beta1.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyParent extends DataObject\n{\n    // ...\n    private static array $has_one = [\n        'MyChild' => MyChild::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Merge Conflicts After Rebase - Bash\nDESCRIPTION: A guideline on how to handle merge conflicts after rebasing a branch. This snippet is crucial for keeping your pull request up to date with the target branch before merging.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/01_Code.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd vendor/<org>/<module>\ngit checkout 5.1\ngit pull\ngit checkout <your-branch-name>\ngit rebase 5.1\n# if there are merge conflicts, resolve them at this stage then run git rebase --continue\ngit push pr <your-branch-name> --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: SecurityAdmin Class Extension Change\nDESCRIPTION: Change of the SecurityAdmin class inheritance from LeftAndMain to ModelAdmin.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nclass SecurityAdmin extends ModelAdmin\n```\n\n----------------------------------------\n\nTITLE: Ordering Component Transforms with Dependencies in Module B\nDESCRIPTION: This code applies the TextLengthChecker transformation with the constraint that it runs before the 'character-count-transform'. This ensures the proper sequence of transformations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_React_Components.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// module-b/js/main.js\nimport Injector from 'lib/Injector';\nimport TextLengthChecker from './components/TextLengthChecker';\n\nInjector.transform(\n  'text-length-transform',\n  (updater) => updater.component('TextField', TextLengthChecker),\n  { before: 'character-count-transform' }\n);\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Core documentation structure for Silverstripe CMS forms, including frontmatter metadata and section organization.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Forms\nsummary: Capture user information through Forms. This guide will work through how to create Silverstripe CMS forms, adding and modifying fields and how to handle form submissions.\nintroduction: This guide will work through how to create Silverstripe CMS forms, adding and modifying fields and how to handle form submissions.\niconBrand: wpforms\n---\n\n# Forms\n\nThe [`Form`](api:SilverStripe\\Forms\\Form) class provides a way to create interactive forms in your web application with very little effort.\nSilverstripe CMS handles generating the correct semantic HTML markup for the form and each of the fields, as well as the\nframework for dealing with submissions and validation.\n\n[CHILDREN Exclude=\"How_Tos,Fields\"]\n\n## FormField documentation\n\n[CHILDREN Folder=\"Field_types\"]\n\n## How to's\n\n[CHILDREN Folder=\"How_Tos\"]\n\n## API documentation\n\n- [Form](api:SilverStripe\\Forms\\Form)\n- [FormField](api:SilverStripe\\Forms\\FormField)\n```\n\n----------------------------------------\n\nTITLE: Method Return Type Changes in DefaultAssetNameGenerator\nDESCRIPTION: Type signature changes for DefaultAssetNameGenerator methods - changing from dynamic to specific return types like string, int, void and bool.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nDefaultAssetNameGenerator::current(): string\nDefaultAssetNameGenerator::key(): int\nDefaultAssetNameGenerator::next(): void\nDefaultAssetNameGenerator::rewind(): void\nDefaultAssetNameGenerator::valid(): bool\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Silverstripe Module\nDESCRIPTION: Example composer.json configuration for a Silverstripe CMS module, including required metadata, dependencies, autoloading settings, and module-specific configurations. Demonstrates proper package naming, version constraints, and Silverstripe-specific settings like module type and resource exposure.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/05_Extending/How_Tos/01_Publish_a_Module.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-vendor/my-module\",\n  \"description\": \"One-liner describing your module\",\n  \"type\": \"silverstripe-vendormodule\",\n  \"homepage\": \"https://github.com/my-vendor/my-module\",\n  \"keywords\": [\"silverstripe\", \"some-tag\", \"some-other-tag\"],\n  \"license\": \"BSD-3-Clause\",\n  \"authors\": [\n    {\n      \"name\": \"Your Name\",\"email\": \"your@email.com\"\n    }\n  ],\n  \"support\": {\n    \"issues\": \"https://github.com/my-vendor/my-module/issues\"\n  },\n  \"require\": {\n    \"silverstripe/cms\": \"^5\",\n    \"silverstripe/framework\": \"^5\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"MyVendor\\\\MyModule\\\\\": \"src/\"\n    }\n  },\n  \"extra\": {\n    \"installer-name\": \"my-module\",\n    \"expose\": [\n      \"client\"\n    ],\n    \"screenshots\": [\n      \"relative/path/screenshot1.png\",\n      \"https://www.example.com/screenshot2.png\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Colymba Method\nDESCRIPTION: The deprecated method `Colymba\\BulkTools\\HTTPBulkToolsResponse::shutdown()` has been removed without a direct replacement. Ensure any dependencies on this method are addressed during the upgrade.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Updating Logger Methods in SilverStripe GraphQL Schema\nDESCRIPTION: Changes return types for various logging methods to void and updates parameter types for $message from dynamic to Stringable|string.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::alert(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::critical(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::debug(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::emergency(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::error(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::info(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::log(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::notice(Stringable|string $message): void\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Logger::warning(Stringable|string $message): void\n```\n\n----------------------------------------\n\nTITLE: Calling Namespaced Entwine Function\nDESCRIPTION: This snippet shows how to call a function that is defined within an Entwine namespace. The `entwine()` method is called on the jQuery object with the namespace as the argument, followed by the function name to be executed.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$('div').entwine('foo.bar').baz();\n```\n```\n\n----------------------------------------\n\nTITLE: API Deprecation of InheritedPermissions::getJoinTable\nDESCRIPTION: Deprecation of getJoinTable method in InheritedPermissions class as part of Silverstripe framework v5.1.0-rc1.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nInheritedPermissions::getJoinTable\n```\n\n----------------------------------------\n\nTITLE: Template Variable Replacement\nDESCRIPTION: The `$First` and `$Last` variables have been removed from the loop scope and replaced with `$IsFirst` and `$IsLast` respectively to avoid naming conflicts.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n <% loop $MyList %>\n-    <% if $First %>\n+    <% if $IsFirst %>\n         <%-- do something --%>\n     <% end_if %>\n <% end_loop %>\n```\n\n----------------------------------------\n\nTITLE: Customizing Scaffolded CMS Fields in Silverstripe (PHP)\nDESCRIPTION: This snippet shows how to extend the default CMS fields for a DataObject in Silverstripe CMS. It demonstrates customizing a scaffolded field's title using the getCMSFields() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    private static $db = [\n        'IsActive' => 'Boolean',\n        'Title' => 'Varchar',\n        'Content' => 'Text',\n    ];\n\n    public function getCMSFields()\n    {\n        // parent::getCMSFields() does all the hard work and creates the fields for Title, IsActive and Content.\n        $fields = parent::getCMSFields();\n        $fields->dataFieldByName('IsActive')->setTitle('Is active?');\n\n        return $fields;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ClassName Column as Varchar in Silverstripe CMS\nDESCRIPTION: YAML configuration to change the ClassName column from enum to varchar type in Silverstripe CMS. This improves performance for large database tables by avoiding ALTER TABLE queries during dev/build.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\ORM\\DataObject:\n  fixed_fields:\n    ClassName: DBClassNameVarchar\n\nSilverStripe\\ORM\\FieldType\\DBPolymorphicForeignKey:\n  composite_db:\n    Class: \"DBClassNameVarchar('SilverStripe\\\\ORM\\\\DataObject', ['index' => false])\"\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Project Forks in Silverstripe CMS\nDESCRIPTION: This JSON snippet shows how to configure the composer.json file to use a forked repository instead of the official package. It adds a 'repositories' section specifying the VCS type and URL of the fork.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"silverstripe/installer\",\n    \"description\": \"The Silverstripe Framework Installer\",\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"git@github.com:sminnee/silverstripe-cms.git\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom jQuery Code with Closure\nDESCRIPTION: Basic pattern for writing custom jQuery code within a closure to avoid global namespace pollution and ensure proper jQuery reference.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function ($) {\n  $(document).ready(() => {\n    // your code here.\n  });\n}(jQuery));\n```\n\n----------------------------------------\n\nTITLE: Logging Service Definition\nDESCRIPTION: Defines a basic logging service that outputs errors to the console. This service is used as a base for demonstrating middleware enhancements.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// LoggingService.js\n\n/* eslint-disable-next-line no-console */\nconst LoggingService = (error) => console.error(error);\n\nexport default LoggingService;\n```\n\n----------------------------------------\n\nTITLE: Email Class Update\nDESCRIPTION: The `SilverStripe\\Control\\Email\\Email` class now subclasses `Symfony\\Component\\Mime\\Email` instead of `SilverStripe\\View\\ViewableData`. This change reflects the shift from SwiftMailer to Symfony Mailer in Silverstripe CMS 5.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Silverstripe CMS with PHP\nDESCRIPTION: Shows how to retrieve environment variables using the Environment::getEnv() method in Silverstripe CMS. This method provides access to environment variables stored in .env files or server configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/03_Environment_Management.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\Environment;\nEnvironment::getEnv('SS_DATABASE_CLASS');\n```\n\n----------------------------------------\n\nTITLE: Deprecated Elemental Classes Removal\nDESCRIPTION: Removal of deprecated classes in the DNADesign\\Elemental namespace, including search and top page related classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// Removed classes\nDNADesign\\Elemental\\Search\\ElementalSolrIndex\nDNADesign\\Elemental\\TopPage\\TestState\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Asset Admin Parameter Type Changes\nDESCRIPTION: Parameter type changes in Asset Admin controller methods for stricter type enforcement. Changes affect data arrays, form objects, and request handling.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\AssetAdmin\\Controller\\AssetAdmin::saveOrPublish($data: array, $form: Form, $doPublish: bool)\nSilverStripe\\AssetAdmin\\Controller\\AssetAdmin::schema($request: HTTPRequest)\nSilverStripe\\AssetAdmin\\Controller\\AssetAdmin::getRecordUpdatedResponse($record: File)\n```\n\n----------------------------------------\n\nTITLE: Using SearchFilter Syntax with ArrayList in Silverstripe CMS\nDESCRIPTION: Demonstration of the new support for SearchFilter syntax when filtering an ArrayList. The example shows how to use partial matching to filter items in an ArrayList based on their properties.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.1.0.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\ArrayList;\n\n$list = ArrayList::create([\n    [\n        'Title' => 'Silverstripe CMS is awesome',\n    ],\n    [\n        'Title' => 'ArrayList is now more powerful than ever',\n    ],\n]);\n\n// This will contain only the item with the title \"Silverstripe CMS is awesome\"\n$filteredList = $list->filter('Title:PartialMatch', 'CMS');\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Initial State\nDESCRIPTION: Demonstrates how to set custom initial state while preserving original initial state values.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyReducerTransformer = (originalReducer) => () => (state, { type, payload }) => {\n  if (typeof state === 'undefined') {\n    return {\n      ...originalReducer(state, { type, payload }),\n      myCustom: 'initial state here',\n    };\n  }\n  return state;\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Method Types in SilverStripe Assets Module\nDESCRIPTION: Changes to return types and parameter types in the Assets module DefaultAssetNameGenerator and FlysystemAssetStore classes for improved type safety.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Assets\\Storage\\DefaultAssetNameGenerator::current(): string\nSilverStripe\\Assets\\Storage\\DefaultAssetNameGenerator::key(): int\nSilverStripe\\Assets\\Storage\\DefaultAssetNameGenerator::next(): void\nSilverStripe\\Assets\\Storage\\DefaultAssetNameGenerator::rewind(): void\nSilverStripe\\Assets\\Storage\\DefaultAssetNameGenerator::valid(): bool\n```\n\n----------------------------------------\n\nTITLE: Disabling Canonical URL Middleware Trailing Slash Redirects\nDESCRIPTION: YML configuration to disable automatic redirects for trailing slashes in URLs\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\Control\\Middleware\\CanonicalURLMiddleware:\n    properties:\n      enforceTrailingSlashConfig: false\n```\n\n----------------------------------------\n\nTITLE: Accessing and Manipulating DBField Values in Silverstripe\nDESCRIPTION: Demonstrates various ways to access and manipulate DBField instances, including retrieving values from a Player object, formatting them, and applying methods like LimitCharacters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/04_Data_Types_and_Casting.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\Player;\n\n$player = Player::get()->byId(1);\n\n// returns the `DBVarChar` instance, which has the value \"Sam MinnÃ©e\"\n$name = $player->Name;\n\n// returns the `DBVarChar` instance, which has the value \"Sam MinnÃ©e\"\n$name = $player->getName();\n\n// returns \"Saâ¦\"\n$name = $player->getName()->LimitCharacters(2);\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entries for silverstripe/framework in Markdown\nDESCRIPTION: This snippet shows multiple changelog entries for the silverstripe/framework package, including version update and several commits with their descriptions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- silverstripe/framework (5.3.0 -> 5.4.0)\n  - 2025-04-09 [d868b1230](https://github.com/silverstripe/silverstripe-framework/commit/d868b1230e72bbc166841cf000012cdb6a27d5d4) `Revert \"FIX Change password form when cookie samesite is strict\"` (Steve Boyd)\n  - 2025-03-03 [f8f4f3b06](https://github.com/silverstripe/silverstripe-framework/commit/f8f4f3b06cf774948f7d897285ac4aa4ebebe2eb) remove clean() for thousand separator, use mb_strlen (Lukas Erni)\n  - 2024-09-14 [5fa88663b](https://github.com/silverstripe/silverstripe-framework/commit/5fa88663b0d4c95966767b67a96c99a4e4256267) feat: support defining MySQLi flags (Will Rossiter)\n  - 2024-09-13 [6a3659d69](https://github.com/silverstripe/silverstripe-framework/commit/6a3659d69d94742a11b7eaaa57558f85a2b0b343) Various deprecations and a few features (#11365) (Guy Sartorelli)\n```\n\n----------------------------------------\n\nTITLE: Excluding Models from Database Checks in Silverstripe YAML\nDESCRIPTION: Configures specific DataObject models to be excluded from database integrity checks during dev/build. This can speed up the build process for tables with a large number of records.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/06_ORM.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\ORM\\Connect\\DBSchemaManager:\n  exclude_models_from_db_checks:\n    - App\\Model\\ModelWithManyRecords\n```\n\n----------------------------------------\n\nTITLE: Updating Namespace and Adding Table Name Config in Silverstripe LinkField\nDESCRIPTION: This change updates the namespace and adds a 'table_name' configuration to all models in the Silverstripe LinkField module. It improves the module's integration with the Silverstripe framework and database structure.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nUpdate namespace. Add table_name config to all models (#39)\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Campaign Admin Module Changes\nDESCRIPTION: Lists changes to AddToCampaignHandler and CampaignAdmin classes, including method deprecations and type specifications for parameters and return values.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\CampaignAdmin\\AddToCampaignHandler::handle()\nSilverStripe\\CampaignAdmin\\AddToCampaignHandler::addToCampaign()\nSilverStripe\\CampaignAdmin\\CampaignAdmin::save()\n```\n\n----------------------------------------\n\nTITLE: Customizing Sandboxed iFrame Attributes in Silverstripe CMS\nDESCRIPTION: YAML configuration to modify the attributes of the sandboxed iframe used for oEmbed content in Silverstripe CMS. This example sets the 'allow' attribute to 'fullscreen'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\View\\Shortcodes\\EmbedShortcodeProvider:\n  sandboxed_iframe_attributes:\n    allow: 'fullscreen'\n```\n\n----------------------------------------\n\nTITLE: Configuring oEmbed Sandboxing Exclusions in Silverstripe CMS\nDESCRIPTION: YAML configuration to exclude specific domains from oEmbed sandboxing in Silverstripe CMS. This allows certain embeds to render correctly without being affected by the sandboxing feature.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\View\\Shortcodes\\EmbedShortcodeProvider:\n  domains_excluded_from_sandboxing:\n    - 'youtube.com'\n```\n\n----------------------------------------\n\nTITLE: Removing File Extensions from Whitelist in Silverstripe\nDESCRIPTION: This YAML configuration snippet sets a specific file extension to false, effectively removing it from the whitelist and preventing its upload in a Silverstripe CMS project.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/06_Allowed_file_types.md#2025-04-21_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Assets\\File:\n  allowed_extensions:\n    zip: false\n```\n\n----------------------------------------\n\nTITLE: Returning File Information and Image Backend in PHP\nDESCRIPTION: This PHP snippet showcases how to return both the information about the variant file (`$tuple`) and the `Image_Backend` object from the callback function. Returning the `Image_Backend` is necessary for performing subsequent image-related manipulations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn [$tuple, $backend];\n```\n\n----------------------------------------\n\nTITLE: Running Linting Commands for Silverstripe Documentation\nDESCRIPTION: Commands to install dependencies and run linting checks on Silverstripe documentation. Requires Composer and Yarn to be installed.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/02_Documentation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\ncomposer install\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Install Specific Module Version\nDESCRIPTION: Installs a specific version of a Silverstripe CMS module\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require silverstripe/blog ^2\n```\n\n----------------------------------------\n\nTITLE: Defining Main Heading for SilverStripe Field Types Documentation\nDESCRIPTION: This snippet sets the main heading for the SilverStripe field types documentation page. It uses Markdown syntax to create a top-level heading.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Field types\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Auditor Module Changes\nDESCRIPTION: Details deprecated method removals in AuditHook class and parameter type changes in RealIPProcessor. Includes migration paths to proxy-db module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Auditor\\AuditHook::bind_manipulation_capture()\nSilverStripe\\Auditor\\AuditHook::onBeforeInit()\nSilverStripe\\Auditor\\RealIPProcessor::__invoke($record)\n```\n\n----------------------------------------\n\nTITLE: Loading Custom .env Files in Silverstripe CMS\nDESCRIPTION: Shows how to load environment variables from a custom .env file location using the EnvironmentLoader class. This is useful when you need to load additional environment-specific configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/03_Environment_Management.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Core\\EnvironmentLoader;\n$env = BASE_PATH . '/app/.env';\n$loader = new EnvironmentLoader();\n$loader->loadFile($env);\n```\n\n----------------------------------------\n\nTITLE: Accessing Injector Directly in Components with withInjector HOC\nDESCRIPTION: Demonstrates how to use the withInjector higher-order component to get direct access to the Injector instance within a React component, useful for dynamic dependency requirements.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n// ...\n\nclass MyGallery extends React.Component {\n  render() {\n    return <div>\n      {this.props.items.map(item => {\n        const Component = this.context.injector.get(item.type, 'Reports.context');\n        return <Component title={item.title} image={item.image} />;\n      })}\n    </div>;\n  }\n}\n\nexport default withInjector(MyGallery);\n```\n\n----------------------------------------\n\nTITLE: RFC Template Structure in Markdown\nDESCRIPTION: Template structure for creating RFC documents in Silverstripe, including required sections like introduction, metadata, purpose, motivation, proposal, alternatives, and impact assessment.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/12_Project_Governance/04_Request_for_comment.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **Introduction** - include a reference #, title, author\n- **Metadata** - standardised header containing at least the Author(s), Status and Version fields.\n- **Purpose and outcome** - the purpose of this document, and the expected outcome.\n- **Motivation** - why this is a good idea\n- **Proposal** - how you propose to implement the idea after community discussion\n- **Alternatives** - what other approaches were considered during the community discussion phase and why they were not chosen\n- **Impact** - How will this change potentially impact on Silverstripe core? The good and the bad.\n```\n\n----------------------------------------\n\nTITLE: Disabling Versioned GridField Extensions in YAML\nDESCRIPTION: YAML configuration example for disabling versioned GridField extensions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Model\\MyBanner:\n  versioned_gridfield_extensions: false\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Union Queries in GraphQL\nDESCRIPTION: Describes how to enable union queries in a SilverStripe GraphQL setting by configuring the YAML file, affecting how models with descendants generate unions for return types, promoting conceptual clarity but risking API stability.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_graphql/config.yml\nmodelConfig:\n  DataObject:\n    plugins:\n      inheritance:\n        useUnionQueries: true\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entries for tractorcow/silverstripe-fluent in Markdown\nDESCRIPTION: This snippet shows multiple changelog entries for the tractorcow/silverstripe-fluent package, including version update and several commits with their descriptions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- tractorcow/silverstripe-fluent (7.2.0 -> 7.3.0)\n  - 2024-12-16 [2144025](https://github.com/tractorcow-farm/silverstripe-fluent/commit/21440259d6870b4a16793d1a7d672715c72c56b6) skip adding fluent actions menu if it already exists (backport of #fb2c518 to v7) (Florian Thoma)\n  - 2024-11-19 [c4685cb](https://github.com/tractorcow-farm/silverstripe-fluent/commit/c4685cb1686d1f553b07a58ea8fc19d285c24680) skip adding fluent actions menu if it already exists (Florian Thoma)\n```\n\n----------------------------------------\n\nTITLE: Basic Composer Update Command\nDESCRIPTION: Command to update to the latest patch version of Silverstripe CMS recipe and its dependencies.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/01_Keeping_projects_up_to_date.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Formatting Silverstripe CMS Changelog in Markdown\nDESCRIPTION: This snippet demonstrates the structure and formatting of a changelog entry for Silverstripe CMS components. It includes the package name, version change, commit date, commit hash, commit message, and author name.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### Documentation {#changelog-documentation}\n\n- silverstripe/recipe-plugin (2.0.1 -> 2.1.0-beta1)\n  - 2024-11-27 [ed3f434](https://github.com/silverstripe/recipe-plugin/commit/ed3f43455bea381ddfcce3db035dade03eea4273) Remove campaign-admin reference (Steve Boyd)\n\n- silverstripe/framework (5.3.0 -> 5.4.0-beta1)\n  - 2025-01-22 [338f0d96c](https://github.com/silverstripe/silverstripe-framework/commit/338f0d96c3552405b33b157e024002f4cfe1a2d6) Updates example to use current code (David Toews)\n  - 2025-01-08 [b481546f6](https://github.com/silverstripe/silverstripe-framework/commit/b481546f60602d0d920a2c0c12ff41d5805957d1) `Remove \"deprecated\" note from PHPDoc for not-deprecated method (#11537)` (Guy Sartorelli)\n```\n\n----------------------------------------\n\nTITLE: Deprecated DBInt::Times() Method in Silverstripe PHP\nDESCRIPTION: The DBInt::Times() method has been deprecated with no replacement functionality planned.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nDBInt::Times()\n```\n\n----------------------------------------\n\nTITLE: Registering GraphQL Query and Mutation with JavaScript Injector in SilverStripe\nDESCRIPTION: Sets up GraphQL operations with the JavaScript Injector, allowing versioned object history queries and revert mutations to be loaded by core components in appropriate contexts. The code registers transformations for both history viewing and version reverting operations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_37\n\nLANGUAGE: js\nCODE:\n```\n// app/client/src/boot/index.js\n\n/* global window */\nimport Injector from 'lib/Injector';\nimport readOneMyVersionedObjectQuery from 'state/readOneMyVersionedObjectQuery';\nimport revertToMyVersionedObjectVersionMutation from 'state/revertToMyVersionedObjectVersionMutation';\n\nwindow.document.addEventListener('DOMContentLoaded', () => {\n  // Register GraphQL operations with Injector as transformations\n  Injector.transform(\n    'myversionedobject-history', // this name is arbitrary\n    (updater) => {\n      // Add CMS page history GraphQL query to the HistoryViewer\n      updater.component(\n        'HistoryViewer.Form_ItemEditForm',\n        readOneMyVersionedObjectQuery,\n        'MyVersionedObjectHistoryViewer' // this name is arbitrary\n      );\n    }\n  );\n\n  Injector.transform(\n    'myversionedobject-history-revert', // this name is arbitrary\n    (updater) => {\n      // Add CMS page revert GraphQL mutation to the HistoryViewerToolbar\n      updater.component(\n        // NOTE: The \"App_MyVersionedObject\" portion here is taken from table_name of the model\n        'HistoryViewerToolbar.VersionedAdmin.HistoryViewer.App_MyVersionedObject.HistoryViewerVersionDetail',\n        revertToMyVersionedObjectVersionMutation,\n        'MyVersionedObjectRevertMutation' // this name is arbitrary\n      );\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Player DataObject Model Definition in PHP\nDESCRIPTION: PHP class definition for the Player DataObject, which stores player information including number, name, birthday, and a relation to the team they play for.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/How_Tos/custom_csvbulkloader.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Model/Player.php\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Player extends DataObject\n{\n    private static $db = [\n      'PlayerNumber' => 'Int',\n      'FirstName' => 'Text',\n      'LastName' => 'Text',\n      'Birthday' => 'Date',\n    ];\n\n    private static $has_one = [\n      'Team' => FootballTeam::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Tag Structure for Silverstripe CMS Versioning\nDESCRIPTION: This snippet shows an example of the tag structure used in Silverstripe CMS versioning. It demonstrates how patch and minor versions are represented.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/12_Project_Governance/09_Repository_Management.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n5.1.17\n5.2.0\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Classes in SilverStripe FullTextSearch\nDESCRIPTION: Removes several deprecated classes related to search manipulation in different database types.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Captures\\SearchManipulateCapture_MySQLDatabase\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Captures\\SearchManipulateCapture_PostgreSQLDatabase\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Search\\Captures\\SearchManipulateCapture_SQLite3Database\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation for Multiple Relationships in SilverStripe\nDESCRIPTION: Examples showing how to use dot notation to define multiple relationships to the same model class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Person extends DataObject\n{\n    private static $has_many = [\n        'Managing' => Company::class . '.Manager',\n        'Cleaning' => Company::class . '.Cleaner',\n    ];\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass Company extends DataObject\n{\n    private static $has_one = [\n        'Manager' => Person::class,\n        'Cleaner' => Person::class,\n    ];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Protected Assets Path\nDESCRIPTION: This Bash snippet sets the path for protected assets in Silverstripe CMS to a location outside the web root, enhancing security. It updates an environment variable to store protected files securely.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSS_PROTECTED_ASSETS_PATH=\"/sites/myapp/protected\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Term Splitting in PHP\nDESCRIPTION: Disable splitting search queries into individual terms for a specific DataObject class using PHP configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/11_Scaffolding.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyDataObject extends DataObject\n{\n    private static bool $general_search_split_terms = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor CSS Path in YAML\nDESCRIPTION: YAML configuration to specify the path to the custom editor CSS file for TinyMCE editor.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/05_Typography.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n---\nname: MyCSS\n---\nSilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig:\n  editor_css:\n    - 'app/css/editor.css'\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commit History in Markdown\nDESCRIPTION: A markdown formatted list of git commits showing the evolution of the Silverstripe LinkField module. Each entry includes the date, commit hash, description, and author.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n  - 2023-09-26 [345c828](https://github.com/silverstripe/silverstripe-linkfield/commit/345c828ab1d65cdf06febf5cfc950c46ed11719f) Allow projects to define their own subclass templates (Steve Boyd)\n  - 2023-06-21 [d667d94](https://github.com/silverstripe/silverstripe-linkfield/commit/d667d94f83437fb5242b9b472d2da1406582b5d1) Query string support. (Mojmir Fendek)\n  - 2023-06-20 [6b69001](https://github.com/silverstripe/silverstripe-linkfield/commit/6b69001799889e378cc3c95d64cea90562766aa8) New extension points added (JSON field). (Mojmir Fendek)\n  - 2023-06-14 [3478f28](https://github.com/silverstripe/silverstripe-linkfield/commit/3478f28c227f2647970ab16e5135bb514751258c) Extension points for link model manipulation. (Mojmir Fendek)\n  - 2023-06-07 [77c7319](https://github.com/silverstripe/silverstripe-linkfield/commit/77c7319142168da70c8ca2da607c5c24c63aaeae) Allow form validation. (Mojmir Fendek)\n  - 2023-06-06 [3041730](https://github.com/silverstripe/silverstripe-linkfield/commit/3041730c055a243a98cdb663bfa1cbd3a917a00c) Insert / edit link button label. (Mojmir Fendek)\n  - 2023-06-06 [d425b33](https://github.com/silverstripe/silverstripe-linkfield/commit/d425b33513a5b2fa14a2793d3639eb90fd24964c) Allow model-level for customisation. (Mojmir Fendek)\n  - 2023-06-05 [6e8183a](https://github.com/silverstripe/silverstripe-linkfield/commit/6e8183ac9c1b8e1aa7726cdd071653a8620c8ee8) Extensibility improvements for link migration task. (Mojmir Fendek)\n  - 2021-11-11 [3e0f699](https://github.com/silverstripe/silverstripe-linkfield/commit/3e0f6997c53e6bea11681ac8926d9483a830b0a1) Empty link title fallbacks to Page. (#37) (Mojmir Fendek)\n```\n\n----------------------------------------\n\nTITLE: Git Commit for Minor Update\nDESCRIPTION: Git command to commit composer files after updating to a new minor version.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/01_Keeping_projects_up_to_date.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\ngit commit composer.* -m \"Upgrade to recipe 5.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated Controller::has_curr() Method in Silverstripe PHP\nDESCRIPTION: The Controller::has_curr() method has been deprecated with no replacement functionality planned.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nController::has_curr()\n```\n\n----------------------------------------\n\nTITLE: Expected JSON response from the GraphQL query\nDESCRIPTION: This JSON snippet represents the expected output after executing the 'readCountries' query. It showcases how the retrieved data is structured in the response.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/02_building_a_custom_query.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"readCountries\": [\n      {\n        \"name\": \"Afghanistan\",\n        \"code\": \"af\"\n      },\n      {\n        \"name\": \"Ãland Islands\",\n        \"code\": \"ax\"\n      },\n      \"... etc\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SilverStripe CMS Preview Defaults in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure default preview settings for SilverStripe CMS using jQuery entwine. It sets the default mode, adjusts mobile preview width, and increases the minimum space required for preview.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njQuery.entwine('ss.preview', ($) => {\n  $('.cms-preview').entwine({\n    DefaultMode: 'content',\n    getSizes() {\n      const sizes = this._super();\n      sizes.mobile.width = '400px';\n      return sizes;\n    }\n  });\n});\n\njQuery.entwine('ss', ($) => {\n  $('.cms-container').entwine({\n    getLayoutOptions() {\n      const opts = this._super();\n      opts.minPreviewWidth = 600;\n      return opts;\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Link Template in Silverstripe LinkField\nDESCRIPTION: This change fixes a typo in the template syntax for opening links in a new window. It corrects '$Link.OpenInew' to '$Link.OpenInNew' in the Silverstripe LinkField module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$Link.OpenInNew\n```\n\n----------------------------------------\n\nTITLE: Displaying Child Pages in Reverse Order for Silverstripe Alpha Changelogs\nDESCRIPTION: This Markdown directive instructs the documentation system to display child pages (presumably individual Alpha version changelog entries) in reverse order on the Alpha Changelogs index page.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/alpha/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[CHILDREN reverse]\n```\n\n----------------------------------------\n\nTITLE: Entwine Namespace Equivalent\nDESCRIPTION: This snippet illustrates an equivalent way to achieve the same result as the previous snippet by assigning the result of `$('div').entwine('foo')` to a variable and then calling the namespace's function repeatedly.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nconst div = $('div').entwine('foo');\ndiv.bar();\ndiv.bar();\ndiv.bar();\n```\n```\n\n----------------------------------------\n\nTITLE: Extending Extension with PHP Generics\nDESCRIPTION: This PHP snippet demonstrates how to use generic typehints in an 'Extension' subclass to inform the IDE about the expected type of the '$owner' property and the return type of 'getOwner()'. It shows extending 'Extension' with a specific class for better code analysis.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Core\\Extension;\nuse SilverStripe\\SiteConfig\\SiteConfig;\n\n/**\n * @extends Extension<SiteConfig>\n */\nclass SiteConfigExtension extends Extension\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Anchor Links in Silverstripe Documentation\nDESCRIPTION: This snippet demonstrates how to define a custom anchor link for a heading in Silverstripe documentation. By including `{#anchor-here}` after the heading text, a specific anchor can be set for linking purposes. The custom anchor does not render as part of the visible heading text.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/02_Documentation.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n`## This is a really long heading which has a silly anchor {#my-custom-anchor}`\n```\n\n----------------------------------------\n\nTITLE: Custom PlayerCsvBulkLoader Implementation in PHP\nDESCRIPTION: Custom CsvBulkLoader implementation that handles mapping CSV columns to model properties, splitting combined fields, preventing duplicate imports, and establishing relationships between models during import.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/How_Tos/custom_csvbulkloader.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// app/src/Admin/PlayerCsvBulkLoader.php\nnamespace App\\Admin;\n\nuse App\\Model\\FootballTeam;\nuse SilverStripe\\Dev\\CsvBulkLoader;\n\nclass PlayerCsvBulkLoader extends CsvBulkLoader\n{\n    public function __construct($objectClass)\n    {\n        $this->columnMap = [\n            'Number' => 'PlayerNumber',\n            'Name' => '->importFirstAndLastName',\n            'Geburtsdatum' => 'Birthday',\n            'Gruppe' => 'Team.Title',\n        ];\n\n        $this->duplicateChecks = [\n            'SpielerNummer' => 'PlayerNumber',\n        ]\n\n        $this->relationCallbacks = [\n            'Team.Title' => [\n                'relationname' => 'Team',\n                'callback' => 'getTeamByTitle',\n            ],\n        ];\n\n        parent::construct($objectClass);\n    }\n\n    public static function importFirstAndLastName(&$obj, $val, $record)\n    {\n        $parts = explode(' ', $val);\n        if (count($parts) != 2) {\n            return false;\n        }\n        $obj->FirstName = $parts[0];\n        $obj->LastName = $parts[1];\n    }\n\n    public static function getTeamByTitle(&$obj, $val, $record)\n    {\n        return FootballTeam::get()->filter('Title', $val)->First();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a FormAction in Silverstripe\nDESCRIPTION: This PHP snippet demonstrates how to add a standalone button to a FieldList using `FormAction`. It creates a button labeled \"Normal button\" and inserts it at the beginning of the FieldList.  This button requires a handler to be defined in a LeftAndMainExtension to function.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$fields->unshift(FormAction::create('normal', 'Normal button'));\n\n```\n\n----------------------------------------\n\nTITLE: Converting Image Files in Templates\nDESCRIPTION: Shows how to convert an image to WebP format and apply a FitMax manipulation using the new high-level file conversion API in Silverstripe templates.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.3.0-beta1.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n$MyImage.Convert('webp').FitMax(100, 100)\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Lazy Loading in Silverstripe Templates\nDESCRIPTION: This example illustrates how to manually control the `loading` attribute of `<img>` tags in Silverstripe templates. It demonstrates how to add `loading=\"lazy\"` to enable lazy loading and emphasizes the importance of including `width` and `height` attributes to prevent layout shifts. It also provides an example of explicitly omitting the `loading` attribute to eager load an image when dimensions are unavailable.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/02_Images.md#2025-04-21_snippet_5\n\nLANGUAGE: ss\nCODE:\n```\n\"<img src=\\\"$Logo.URL\\\" width=\\\"$Logo.Width\\\" height=\\\"$Logo.Height\\\" loading=\\\"lazy\\\" alt=\\\"Company Logo\\\" />\n\n<%-- The size of this image is controlled by a CSS class so it can be lazy loaded --%>\n<img src=\\\"$resourceURL('themes/example/images/footer.png')\\\" class=\\\"64x64square\\\" loading=\\\"lazy\\\" alt=\\\"\\\" />\n\n<%-- We don't have dimension for this image, so we eager load it --%>\n<img src=\\\"//www.example.com/sponsor.webp\\\" alt=\\\"A generous sponsor\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: jQuery.Entwine Usage Example\nDESCRIPTION: Demonstrates how to use the jQuery.Entwine highlighter implementation, including setting options and getting properties.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(function ($) {\n  // call with default options\n  $(':button').entwine().highlight();\n\n  // set options for existing and new instances\n  $(':button').entwine().setBackground('green');\n\n  // get property\n  $(':button').entwine().getBackground();\n}(jQuery));\n```\n\n----------------------------------------\n\nTITLE: Custom Image Rendering with WebP Support\nDESCRIPTION: HTML template example showing how to customize image rendering to provide a WebP version of any image using the picture element with a fallback to the original format.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.3.0-rc1.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n    <source srcset=\"$Convert('webp').Link\" type=\"image/webp\">\n    <img $AttributesHTML >\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Implementing File Ownership in Page Type\nDESCRIPTION: Example showing how to configure file ownership for versioned assets\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/01_File_Management.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\Assets\\Image;\n\nclass LandingPage extends Page\n{\n    private static $has_one = [\n        'Banner' => Image::class,\n    ];\n    private static $owns = ['Banner'];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing SilverStripe Kernel Boot Status\nDESCRIPTION: Method to check if the kernel has been booted. Uses BaseKernel::getBooted() to determine the kernel's boot status.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nBaseKernel::getBooted()\n```\n\n----------------------------------------\n\nTITLE: Creating a Member Extension in Silverstripe CMS\nDESCRIPTION: Demonstrates how to create a DataExtension for the Member class, adding new fields and methods.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/09_Security/00_Member.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Form\\FieldList;\nuse SilverStripe\\ORM\\DataExtension;\nuse SilverStripe\\Security\\Permission;\n\nclass MyMemberExtension extends DataExtension\n{\n    // define additional properties\n    private static $db = [\n        'MyNewField' => 'Text',\n    ];\n\n    /**\n    * Modify the field set to be displayed in the CMS detail pop-up\n    */\n    public function updateCMSFields(FieldList $currentFields)\n    {\n        // Only show the additional fields on an appropriate kind of use\n        if (Permission::checkMember($this->owner->ID, 'VIEW_FORUM')) {\n            // Edit the FieldList passed, adding or removing fields as necessary\n        }\n    }\n\n    public function somethingElse()\n    {\n        // You can add any other methods you like, which you can call directly on the member object.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Binding Examples in jQuery\nDESCRIPTION: Demonstrates different approaches to binding events in jQuery, including manual binding and delegated event handling.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/06_Javascript_Development.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// manual binding, only applies to existing elements\n$('input[[type=submit]]').on('click', function () {\n  $(this).addClass('loading');\n});\n\n// binding, applies to any inserted elements as well\n$('.cms-container').on('click', 'input[[type=submit]]', function () {\n  $(this).addClass('loading');\n});\n```\n\n----------------------------------------\n\nTITLE: File Shortcode Example in HTML\nDESCRIPTION: Example of an image shortcode embedded within HTML content\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/01_File_Management.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>Welcome to Silverstripe CMS! This is the default homepage.</p>\n<p>[image src=\"/assets/12824172.jpeg\" id=\"27\" width=\"400\" height=\"400\" class=\"leftAlone ss-htmleditorfield-file image\" title=\"My Image\"]</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for silverstripe/registry in Markdown\nDESCRIPTION: This snippet shows the changelog entry for the silverstripe/registry package, including the version update and a specific commit.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- silverstripe/registry (3.2.0 -> 3.3.0)\n  - 2024-12-02 [da89625](https://github.com/silverstripe/silverstripe-registry/commit/da89625f95de9ec0d90d6d3475b963488ff7c337) RegistryAdmin add missing return to import (CCCMichaelCole)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolver Factory in PHP\nDESCRIPTION: This PHP code snippet shows how to implement a resolver factory that returns a closure. It demonstrates the use of resolver context to pass additional information to the resolver function.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/08_architecture_diagrams.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\GraphQL\\Resolvers;\n\nclass MyResolver\n{\n    public static function resolve(array $resolverContext)\n    {\n        $someInfo = $resolverContext['foo'];\n        return function ($obj, $args, $context, $info) use ($someInfo) {\n            // ...\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Silverstripe CMS Dependencies Changelog\nDESCRIPTION: List of dependency updates and changes made to various Silverstripe modules during the upgrade from version 4.12.0 to 5.0.0-beta1. Includes commit hashes and descriptions.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n### Dependencies\n\n- silverstripe/recipe-kitchen-sink (4.12.0 -> 5.0.0-beta1)\n  - 2023-02-08 [fea0e62] Add more modules (Steve Boyd)\n  - 2023-02-08 [36483f4] Use caret for silverstripe/recipe-plugin (Steve Boyd)\n  - 2023-01-29 [3979d78] Remove silverstripe/security-extensions (Guy Sartorelli)\n  - 2023-01-18 [6701348] remove cwp/cwp-pdfexport (Steve Boyd)\n  - 2022-12-19 [cd343c3] PHP Support in CMS5 (Sabina Talipova)\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema in YAML\nDESCRIPTION: YAML configuration for setting up GraphQL schema and model definitions in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\GraphQL\\Schema\\Schema:\n  schemas:\n    admin:\n      src:\n        - my-module/_graphql\n```\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Model\\Note:\n  fields:\n    id: true\n    content: true\n  operations:\n    read:\n      plugins:\n        paginateList: false\n```\n\n----------------------------------------\n\nTITLE: Converting Files to Non-Image Format in SilverStripe\nDESCRIPTION: This snippet shows how to convert a file to a non-image format in SilverStripe. After the conversion logic, it uses the AssetStore to save the new file variant with conflict resolution settings. The code returns a tuple containing the file reference and null for the Image_Backend since it's not an image.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/05_File_Manipulation.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$tmpFilePath = /* some conversion logic goes here */;\n$config = ['conflict' => AssetStore::CONFLICT_USE_EXISTING];\n$tuple = $store->setFromLocalFile($tmpFilePath, $filename, $hash, $variant, $config);\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn [$tuple, null];\n```\n\n----------------------------------------\n\nTITLE: Updated Parameter Types in FlysystemAssetStore\nDESCRIPTION: Type changes for parameters in FlysystemAssetStore methods, replacing League\\Flysystem\\Filesystem with SilverStripe\\Assets\\Flysystem\\Filesystem.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Assets\\Flysystem\\FlysystemAssetStore::createResponseFor(SilverStripe\\Assets\\Flysystem\\Filesystem $flysystem)\nSilverStripe\\Assets\\Flysystem\\FlysystemAssetStore::deleteFromFileStore(SilverStripe\\Assets\\Flysystem\\Filesystem $fs)\nSilverStripe\\Assets\\Flysystem\\FlysystemAssetStore::moveBetweenFileStore(SilverStripe\\Assets\\Flysystem\\Filesystem $from, SilverStripe\\Assets\\Flysystem\\Filesystem $to)\n```\n\n----------------------------------------\n\nTITLE: Disabling oEmbed in YAML Configuration\nDESCRIPTION: YAML configuration to disable oEmbed functionality in the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\n---\nName: oembed-disable\n---\nSilverStripe\\AssetAdmin\\Forms\\RemoteFileFormFactory:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: SilverStripe Framework Changelog Display\nDESCRIPTION: Markdown formatted changelog showing commits and changes across multiple SilverStripe modules, focusing on API changes and deprecations for version 5.3.0-rc1\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.3.0-rc1.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Api changes {#changelog-api-changes}\n\n- silverstripe/framework (5.2.0 -> 5.3.0-rc1)\n  - 2024-08-20 [743fe245a] Deprecate DataExtension (Steve Boyd)\n  - 2024-07-03 [724e813b8] Make token regeneration optional during autologin session renewal (Garion Herman)\n  - 2024-06-12 [049e54624] Deprecate references to installation tool (#11275) (Guy Sartorelli)\n  - 2024-05-14 [0ba85bc1d] Deprecate passing non-arrays to FieldList methods (Steve Boyd)\n```\n\n----------------------------------------\n\nTITLE: Creating Extensible Notes List Component with Injector\nDESCRIPTION: Implements a flexible NotesList component using Injector for dependency injection, allowing easy customization of list item rendering\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { inject } from 'lib/Injector';\n\nconst NotesList = ({ notes = [], ItemComponent }) => (\n  <ul className=\"notes\">\n    {notes.map(note => <ItemComponent key={note.id} note={note} />)}\n  </ul>\n);\n\nexport default inject(\n  ['NotesListItem'],\n  (NotesListItem) => ({\n    ItemComponent: NotesListItem\n  })\n)(NotesList);\n```\n\n----------------------------------------\n\nTITLE: Customizing File Response Headers\nDESCRIPTION: This YAML configuration snippet allows customization of HTTP response headers for files served by the FlysystemAssetStore in SilverStripe. Adjusting these headers is useful for controlling caching behaviors.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/14_Files/03_File_Security.md#2025-04-21_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Filesystem\\Flysystem\\FlysystemAssetStore:\n  file_response_headers:\n    Pragma: 'no-cache'\n```\n\n----------------------------------------\n\nTITLE: Static Publishing Markdown Documentation\nDESCRIPTION: Markdown documentation explaining the concept of static publishing in Silverstripe CMS, including use cases and benefits like improved performance and ability to serve high traffic loads.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/08_Performance/04_Static_Publishing.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Static Publishing\nsummary: Export your web pages as static HTML and serve the web like it's 1999.\n---\n\n# Static publishing\n\nOne of the best ways to get the top performance out of Silverstripe CMS is to bypass it completely. This saves on any loading\ntime, connecting to the database and formatting your templates. This is only appropriate approach on web pages that\nhave completely static content.\n\n> [!NOTE]\n> If you want to cache part of a page, or your site has interactive elements such as forms, then\n> [Partial Caching](partial_caching) is more suitable.\n\nBy publishing the page as HTML it's possible to run Silverstripe CMS from behind a corporate firewall, on a low performance\nserver or serve millions of hits an hour without expensive hardware.\n\nThis functionality is available through the [Static Publisher with Queue](https://github.com/silverstripe/silverstripe-staticpublishqueue) module. The module provides hooks for developers to generate static HTML files for the whole application or publish key pages (e.g. a web applications home page) as HTML to reduce load on the server.\n```\n\n----------------------------------------\n\nTITLE: Running Auto-fix Linting for Silverstripe Documentation\nDESCRIPTION: Command to automatically fix linting issues in Silverstripe documentation using the --fix option.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/02_Documentation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint --fix\n```\n\n----------------------------------------\n\nTITLE: Check current alternate button state (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to check the current alternate state of a button using jQuery UI's `button('option', 'showingAlternate')` method. It returns a boolean indicating whether the button is currently showing the alternate state.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/CMS_Alternating_Button.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\njQuery('.cms-edit-form .btn-toolbar #Form_EditForm_action_cleanup').button('option', 'showingAlternate');\n```\n\n----------------------------------------\n\nTITLE: Transforming Add Form with Priority Selection\nDESCRIPTION: Extends the add form component to include a priority dropdown and modified mutation handling\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/08_ReactJS_Redux_and_GraphQL.md#2025-04-21_snippet_43\n\nLANGUAGE: js\nCODE:\n```\n// app/client/src/transformAddForm.js\nimport React, { useRef } from 'react';\n\nconst transformAddForm = () => ({ onAdd }) => {\n  const contentRef = useRef(null);\n  const priorityRef = useRef(null);\n  return (\n    <div>\n      <label>Note content</label>\n      <input type=\"text\" ref={contentRef}/>\n      <label>Priority</label>\n      <select ref={priorityRef}>\n        <option value=\"0\">Low</option>\n        <option value=\"1\">Medium</option>\n        <option value=\"2\">High</option>\n      </select>\n      <button onClick={(e) => {\n        e.preventDefault();\n        if (contentRef && priorityRef) {\n          onAdd(contentRef.value, Number(priorityRef.value));\n        }\n      }}\n      >Add</button>\n    </div>\n  );\n};\n\nexport default transformAddForm;\n```\n\n----------------------------------------\n\nTITLE: Applying Plugins on a Case-by-Case Basis in YAML\nDESCRIPTION: This YAML configuration demonstrates how to apply the geocoding plugins to specific models and operations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/03_writing_a_complex_plugin.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# app/_graphql/models.yml\nApp\\Model\\Event:\n  plugins:\n    geocode: true\n  fields:\n    title: true\n  operations:\n    read:\n      plugins:\n        geocodeableQuery: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Form in Silverstripe\nDESCRIPTION: Creates a custom search form by extending the Page class and implementing a SearchForm method. Uses Form::setTemplate() to specify a custom template for lighter markup.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/02_Lightweight_Form.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse Page;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\TextField;\n\nclass SearchPage extends Page\n{\n    // ...\n\n    public function SearchForm()\n    {\n        $fields = FieldList::create(\n            TextField::create('q')\n        );\n        $actions = FieldList::create(\n            FormAction::create('doSearch', 'Search')\n        );\n\n        $form = Form::create($this, __FUNCTION__, $fields, $actions);\n        $form->setTemplate('SearchForm');\n\n        return $form;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading ReactDOM.render to CreateRoot Pattern in Entwine\nDESCRIPTION: Shows how to update legacy ReactDOM.render() calls to use the new React 18 createRoot() API within Entwine components while maintaining proper cleanup.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n$('.grid-field').entwine({\n  ReactRoot: null,\n\n  onmatch() {\n    let root = this.getReactRoot();\n    if (!root) {\n      root = ReactDOM.createRoot(this[0]);\n    }\n    root.render(<MyComponent />);\n    this.setReactRoot(root);\n  },\n\n  onunmatch() {\n    const root = this.getReactRoot();\n    if (root) {\n      root.unmount();\n      this.setReactRoot(null);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced PHP resolver with access control\nDESCRIPTION: This PHP snippet modifies the previous resolver to add user permissions. It checks if the current user has 'ADMIN' permissions before returning the country code, providing an example of how to manage access control within a resolver context.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/02_building_a_custom_query.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// app/src/GraphQL/Resolver/MyResolver.php\nnamespace App\\GraphQL\\Resolver;\n\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse SilverStripe\\Core\\Injector\\Injector;\nuse SilverStripe\\GraphQL\\QueryHandler\\UserContextProvider;\nuse SilverStripe\\Security\\Permission;\nuse SilverStripe\\i18n\\Data\\Locales;\n\nclass MyResolver\n{\n    public static function resolveCountries(\n        mixed $value = null,\n        array $args = [],\n        array $context = [],\n        ?ResolveInfo $info = null\n    ): array {\n        $member = UserContextProvider::get($context);\n        $canViewCode = ($member && Permission::checkMember($member, 'ADMIN'));\n        $results = [];\n        $countries = Injector::inst()->get(Locales::class)->getCountries();\n        foreach ($countries as $code => $name) {\n            $results[] = [\n                'code' => $canViewCode ? $code : '',\n                'name' => $name,\n            ];\n        }\n\n        return $results;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Entwine Namespace Specificity\nDESCRIPTION: This snippet demonstrates the concept of namespace specificity within Entwine. Even though a `span` selector can never match a `div`, because `baz()` is defined in some rule in the `foo` namespace, the base namespace will never be checked.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n$.entwine('foo', ($) => {\n  $('div').entwine({\n    bar() {\n      this.baz();\n    },\n  });\n\n  $('span').entwine({\n    baz() {\n      // eslint-disable-next-line no-console\n      console.log('a');\n    },\n  });\n});\n\n$('div').entwine({\n  baz() {\n    // eslint-disable-next-line no-console\n    console.log('b');\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Using StartsWith Filter with Modifiers in PHP\nDESCRIPTION: Shows how to use the StartsWith filter with case insensitivity and negation modifiers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/06_SearchFilters.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$players = Player::get()->filter([\n    'FirstName:StartsWith:nocase' => 'S',\n]);\n\n// use :not to get everyone whose first name does NOT start with \"S\"\n$players = Player::get()->filter([\n    'FirstName:StartsWith:not' => 'S',\n]);\n```\n\n----------------------------------------\n\nTITLE: Changed Return Type in SilverStripe ErrorPage Module\nDESCRIPTION: Documents the change in return type for the handleRequest() method in the SilverStripe\\ErrorPage\\ErrorPageController class. The return type has been changed from dynamic to SilverStripe\\Control\\HTTPResponse.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\ErrorPage\\ErrorPageController::handleRequest()\n```\n\n----------------------------------------\n\nTITLE: Testing Email Sending in Silverstripe CMS\nDESCRIPTION: This PHP code snippet demonstrates how to test email sending functionality in Silverstripe CMS. It creates an email object and sends a test email, which can be used to verify that the email configuration is working correctly in the production environment.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/00_Server_Requirements.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Email\\Email;\n\n$email = Email::create('no-reply@mydomain.com', 'myuser@gmail.com', 'My test subject', 'My email body text');\n$email->send();\n```\n\n----------------------------------------\n\nTITLE: Using SearchFilter Syntax with ArrayList\nDESCRIPTION: Demonstrates how to use SearchFilter syntax when filtering ArrayLists. The example shows using partial match filtering on an array of items, with notes about case sensitivity differences between ArrayList and DataList.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.1.0-rc1.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\ArrayList;\n\n$list = ArrayList::create([\n    [\n        'Title' => 'Silverstripe CMS is awesome',\n    ],\n    [\n        'Title' => 'ArrayList is now more powerful than ever',\n    ],\n]);\n\n// This will contain only the item with the title \"Silverstripe CMS is awesome\"\n$filteredList = $list->filter('Title:PartialMatch', 'CMS');\n```\n\n----------------------------------------\n\nTITLE: Accessing Admin URL in JavaScript\nDESCRIPTION: JavaScript code showing how to access the admin URL using the ss.config namespace and joinUrlPaths utility.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/02_CMS_Architecture.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// You can use this if you use @silverstripe/webpack-config\nimport { joinUrlPaths } from 'lib/urls';\n\njoinUrlPaths(ss.config.adminUrl, 'more/path/here');\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Regeneration for Static Publish Queue in YAML\nDESCRIPTION: YAML configuration to enable regeneration of related pages after publishing or unpublishing in the Static Publish Queue module. This ensures related content is updated in the static cache.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.1.0.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\CMS\\Model\\SiteTree:\n  regenerate_children: recursive\n  regenerate_parents: recursive\n```\n\n----------------------------------------\n\nTITLE: Defining Field Resolver for Country Type in YAML\nDESCRIPTION: This YAML snippet configures a field resolver for the Country type. The fieldResolver property points to a method in MyResolver, handling resolution for multiple fields within SilverStripe's GraphQL setup.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/03_working_with_generic_types/03_resolver_discovery.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntypes:\n  Country:\n    fields:\n      name: String\n      code: String\n    fieldResolver: [ 'App\\GraphQL\\Resolver\\MyResolver', 'resolveCountryFields' ]\n```\n\n----------------------------------------\n\nTITLE: Configuring ClassName Column as Varchar in Silverstripe CMS\nDESCRIPTION: YAML configuration to change the ClassName column from enum to varchar type in Silverstripe CMS. This optimization can improve performance for large database tables by avoiding ALTER TABLE queries during dev/build.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSilverStripe\\ORM\\DataObject:\n  fixed_fields:\n    ClassName: DBClassNameVarchar\n\nSilverStripe\\ORM\\FieldType\\DBPolymorphicForeignKey:\n  composite_db:\n    Class: \"DBClassNameVarchar('SilverStripe\\\\ORM\\\\DataObject', ['index' => false])\"\n```\n\n----------------------------------------\n\nTITLE: Elemental Content Block Querying in GraphQL\nDESCRIPTION: An example showing how to structure queries for content blocks using the elemental module in SilverStripe, illustrating the polymorphic nature of querying descendant types and utilizing inline fragments for specific fields.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/04_inheritance.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  readElementalPages {\n    nodes {\n      elementalArea {\n        elements {\n          nodes {\n            title\n            id\n            ... on ContentBlock {\n              html\n            }\n            ... on CTABlock {\n              link\n              linkText\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Items to Relations in SilverStripe\nDESCRIPTION: This PHP snippet demonstrates how to add a new item to a relation within a SilverStripe DataObject, specifically showing the process for adding a new supporter to a team using the HasManyList or ManyManyList add() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$team = Team::get()->byId(1);\n\n// create a new supporter\n$supporter = Supporter::create();\n$supporter->Name = 'Foo';\n$supporter->write();\n\n// add the supporter.\n$team->Supporters()->add($supporter);\n\n```\n\n----------------------------------------\n\nTITLE: Using Value Placeholders in SilverStripe ORM Queries\nDESCRIPTION: Illustrates the use of value placeholders in SQL queries to prevent SQL injection. It shows how to use DB::placeholders() to generate placeholders for an IN clause dynamically.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/08_SQL_Select.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\Queries\\SQLSelect;\n\n$schema = DataObject::getSchema();\n$playerTableName = DB::get_conn()->escapeIdentifier($schema->baseDataTable(Player::class));\n\n$teamIds = Team::get()->filter('Wins:GreaterThan', 15)->column('ID');\n$placeholders = DB::placeholders($teamIds);\n\n$sqlQuery = new SQLSelect();\n$sqlQuery->setFrom($playerTableName)->where([\n    $schema->sqlColumnForField(Player::class, 'ID') . ' in (' . $placeholders . ')' => $ids,\n]);\n$results = $sqlQuery->execute();\n```\n\n----------------------------------------\n\nTITLE: Extension Hook Example in PHP\nDESCRIPTION: Demonstrates the syntax for implementing extension hooks in Silverstripe CMS, which are considered part of the public API.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/12_Project_Governance/08_Public_API.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->extend('someExtensionHook', $someVariable);\n```\n\n----------------------------------------\n\nTITLE: Using UNION Clauses with DataQuery in Silverstripe PHP\nDESCRIPTION: Shows how to add a UNION clause to DataQuery objects by using the union() method. The example demonstrates combining two DataQuery objects with a UNION ALL clause, allowing for more complex database operations in Silverstripe 5.2.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DataQuery;\nuse SilverStripe\\ORM\\Queries\\SQLSelect;\n\n$baseQuery = DataQuery::create(MyClass::class)->where(/*...*/);\n$anotherQuery = DataQuery::create(MyClass::class)->where(/*...*/);\n$baseQuery->union($anotherQuery, SQLSelect::UNION_ALL);\n```\n\n----------------------------------------\n\nTITLE: Handling Events from Other Elements\nDESCRIPTION: Demonstrates the usage of the `from` syntax to handle events occurring on another element. In this case, the click event on an anchor tag triggers a function that changes the color of a div with the class 'green'.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n$('div').entwine({\n  'from a': {\n    onclick() {\n      this.css({ color: 'green' });\n      this._super();\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using With Tag in SilverStripe Templates\nDESCRIPTION: Shows how to use the <% with %> tag to change scope and simplify variable access in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/01_Syntax.md#2025-04-21_snippet_16\n\nLANGUAGE: ss\nCODE:\n```\n<% with $CurrentMember %>\n    Hello, $FirstName, welcome back. Your current balance is $Balance.\n<% end_with %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation in Silverstripe PHP\nDESCRIPTION: This snippet shows how to implement form validation in Silverstripe using the RequiredFields validator. It demonstrates setting up required fields for a form.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\RequiredFields;\n\nclass MyFormPageController extends PageController\n{\n    // ...\n\n    public function getMyForm()\n    {\n        // ...\n\n        $validator = RequiredFields::create([\n            'Name',\n            'Email',\n        ]);\n\n        $form = Form::create($this, 'MyForm', $fields, $actions, $validator);\n\n        return $form;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PhoneField and Migration Helpers in Silverstripe LinkField\nDESCRIPTION: This commit adds a new PhoneField and includes migration helpers from the Linkable module to the Silverstripe LinkField module. It enhances the functionality for handling phone number links and assists in migrating from older implementations.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nAdd PhoneField. Add migration helpers from Linkable (#48)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Default Records in SilverStripe\nDESCRIPTION: Demonstrates creating dynamic default records by overriding the requireDefaultRecords() method, with conditional creation based on development mode.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/How_Tos/Dynamic_Default_Fields.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Director;\n\n//...\n\npublic function requireDefaultRecords()\n{\n    // Require the base defaults first - that way the records we create below won't interfere with any\n    // declared in $default_records\n    parent::requireDefaultRecords();\n\n    // Make some record only if we're in dev mode and we don't have any of the current class yet.\n    if (Director::isDev() && !DataObject::get_one(static::class)) {\n        $record = static::create(['Date' => date('Y-m-d')]);\n        $record->write();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Count Limit in YML\nDESCRIPTION: Configure the maximum number of items counted in site reports to improve performance. Set a custom limit for overview counts or disable the limit entirely.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Customise_Site_Reports.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Reports\\Report:\n  limit_count_in_overview: 500\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Changes in Config Collections\nDESCRIPTION: Implementation of strict type hints for method parameters across Config Collection classes. Changes from dynamic typing to specific types like string, array, and mixed.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nDeltaConfigCollection::merge(string $class, string|null $name, array $value)\nDeltaConfigCollection::remove(string $class, string|null $name)\nDeltaConfigCollection::set(string $class, string|null $name, mixed $data, array $metadata)\n```\n\n----------------------------------------\n\nTITLE: Adding a Field to a Tab in Silverstripe CMS\nDESCRIPTION: Adds a TextField instance to the 'Main' tab under the 'Root' TabSet in a Silverstripe form.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/06_Tabbed_Forms.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$fields->addFieldToTab('Root.Main', TextField::create(/* ... */));\n```\n\n----------------------------------------\n\nTITLE: Return Type Addition in Symfony Commands for SilverStripe Plugins\nDESCRIPTION: API change adding return type to execute() method in Symfony commands for silverstripe/vendor-plugin and silverstripe/recipe-plugin to ensure compatibility with Symfony 7 while maintaining backwards compatibility through PHP's covariance support.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Implementing Deprecated Method with Replacement\nDESCRIPTION: Demonstrates how to properly deprecate a method while maintaining functionality by calling the new replacement method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/20_Deprecations/index.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace SilverStripe\\Control;\n\nuse SilverStripe\\Dev\\Deprecation;\n// ...\n\nclass Director\n{\n    // ...\n\n    /**\n     * Returns true if your are in development mode\n     * @deprecated 4.12.0 Use SilverStripe\\Core\\Env::is_dev() instead.\n     */\n    public function isDev()\n    {\n        Deprecation::notice('4.12.0', 'Use SilverStripe\\Core\\Env::is_dev() instead');\n        return Env::is_dev();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Format for Football Player Data\nDESCRIPTION: Example CSV file format containing football player data with columns for player number, name, birth date, and team group.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/11_Integration/How_Tos/custom_csvbulkloader.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"SpielerNummer\", \"Name\", \"Geburtsdatum\", \"Gruppe\"\n11, \"John Doe\", 1982-05-12,\"FC Bayern\"\n12, \"Jane Johnson\", 1982-05-12,\"FC Bayern\"\n13, \"Jimmy Dole\",,\"Schalke 04\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Form and FormField Templates in Silverstripe CMS\nDESCRIPTION: Demonstrates how to set custom templates for Forms and FormFields in Silverstripe CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/00_Introduction.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PageType;\n\nuse PageController;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\TextField;\n\nclass MyFormPageController extends PageController\n{\n    private static $allowed_actions = [\n        'getMyForm',\n    ];\n\n    private static $url_handlers = [\n        'MyForm' => 'getMyForm',\n    ];\n\n    public function getMyForm()\n    {\n        $field = TextField::create(/* ... */);\n        $field->setTemplate('CustomTextField');\n        $field->setFieldHolderTemplate('CustomTextField_Holder');\n\n        $form = Form::create(/* ... */);\n        $form->setTemplate('CustomForm');\n\n        return $form;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating cachedCall() Parameter Name in SilverStripe View Classes\nDESCRIPTION: Changes the parameter name from 'field' to 'fieldName' in cachedCall() method for ViewableData and ViewableData_Customised classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\View\\ViewableData::cachedCall($fieldName)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\View\\ViewableData_Customised::cachedCall($fieldName)\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview for Unversioned DataObjects\nDESCRIPTION: Example showing how to enable preview state for unversioned DataObjects.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/04_Preview.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\CMSPreviewable;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyModel extends DataObject implements CMSPreviewable\n{\n    private static $show_unversioned_preview_link = true;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Selection in Silverstripe Controllers\nDESCRIPTION: Shows how to configure custom templates for controller actions by setting the templates property. This allows explicitly mapping specific actions to template files.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/02_Controllers/01_Introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse SilverStripe\\Control\\Controller;\n\nclass TeamController extends Controller\n{\n    protected $templates = [\n        'showPlayers' => 'TemplateForPlayers',\n    ];\n\n    private static $allowed_actions = [\n        'showPlayers',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method Parameters in ValidationResult\nDESCRIPTION: Details on deprecated null parameter usage in ValidationResult methods. Developers should use empty strings for code parameters and ValidationResult::CAST_* constants for cast parameters.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// Old deprecated usage\n$result->addError(null, null);\n\n// New recommended usage\n$result->addError('', ValidationResult::CAST_TEXT);\n```\n\n----------------------------------------\n\nTITLE: Method Return Type Changes\nDESCRIPTION: Changes to method return types from dynamic to specific types like HTTPResponse and PjaxResponseNegotiator across various controller classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nSilverStripe\\CMS\\BatchActions\\CMSBatchAction_Archive::run() -> SilverStripe\\Control\\HTTPResponse\nSilverStripe\\CMS\\Controllers\\CMSMain::getResponseNegotiator() -> SilverStripe\\Control\\PjaxResponseNegotiator\nSilverStripe\\CMS\\Controllers\\ModelAsController::controller_for() -> SilverStripe\\CMS\\Controllers\\ContentController\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Field Scaffolding for Relations\nDESCRIPTION: Demonstrates how to implement custom form field scaffolding for DataObject relations using scaffoldFormFieldForHasOne method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.3.0-beta1.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\Forms\\FormField;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyChild extends DataObject\n{\n    // ...\n\n    public function scaffoldFormFieldForHasOne(\n        string $fieldName,\n        ?string $fieldTitle,\n        string $relationName,\n        DataObject $ownerRecord\n    ): FormField {\n        return /* instantiate some FormField here */;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Versioned Extension to DataObject in PHP\nDESCRIPTION: Demonstrates how to add the Versioned extension to a DataObject model using PHP configuration. This enables versioning with stages (draft and published versions).\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass MyStagedModel extends DataObject\n{\n    private static $extensions = [\n        Versioned::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Branch and Tag Protection Rulesets for Silverstripe CMS Modules\nDESCRIPTION: This snippet mentions the 'rulesets' command from the silverstripe/module-standardiser repository used to update branch and tag protection rulesets via the GitHub API for all supported Silverstripe CMS modules.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/12_Project_Governance/09_Repository_Management.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrulesets\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Live Permissions for Versioned DataObjects\nDESCRIPTION: Demonstrates how to configure permissions for viewing non-live (draft) versions of a DataObject using the non_live_permissions configuration option.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\Versioned\\Versioned;\n\nclass MyObject extends DataObject\n{\n    private static $extensions = [\n        Versioned::class,\n    ];\n\n    private static $non_live_permissions = [\n        'ADMIN',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting a Single Column from a SilverStripe List\nDESCRIPTION: Using the column() method to extract all values from a specific property (Email) in a Member list, returning them as an array.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/03_Lists.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// returns [\n//    'sam@example.com',\n//    'sig@example.com',\n//    'will@example.com'\n// ];\n$emailAddresses = Member::get()->column('Email');\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Front Matter for SilverStripe Documentation\nDESCRIPTION: This snippet defines the YAML front matter for a SilverStripe documentation page. It specifies the title and summary of the page, which are used for rendering and navigation purposes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Field Types\nsummary: More information about some of the core form fields\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Entwine Events Example\nDESCRIPTION: Provides the HTML structure for demonstrating how Entwine binds event handlers to DOM elements. Different event handlers are attached based on the class of the div.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div>Background will turn blue when clicked on</div>\n<div>Will also have blue background when clicked on</div>\n<div class='green'>Will have green text when clicked on. Background colour will not change</div>\n```\n\n----------------------------------------\n\nTITLE: Including Child Pages in SilverStripe Documentation\nDESCRIPTION: This snippet uses a SilverStripe-specific placeholder to include child pages in the documentation. The [CHILDREN] tag is likely processed by the SilverStripe documentation system to generate links or content from child pages.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[CHILDREN]\n```\n\n----------------------------------------\n\nTITLE: Updating QueuedJobLogHandler in SilverStripe FullTextSearch\nDESCRIPTION: Changes the return type of write() method to void and updates the parameter type for $record from array to Monolog\\LogRecord.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\FullTextSearch\\Utils\\Logging\\QueuedJobLogHandler::write(Monolog\\LogRecord $record): void\n```\n\n----------------------------------------\n\nTITLE: Conditional Caching with Not Operator\nDESCRIPTION: Template caching using the 'not' operator to cache content when a condition is false.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_15\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $Key if not $Cond %>\n    Cached only if $Cond == false\n<% end_cached %>\n```\n\n----------------------------------------\n\nTITLE: Registering GraphQL Plugin in SilverStripe via YML Configuration\nDESCRIPTION: YML configuration to register the custom Truncator plugin with SilverStripe's dependency injection system, making it available for use in GraphQL schemas.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/05_plugins/02_writing_a_simple_plugin.md#2025-04-21_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Core\\Injector\\Injector:\n  SilverStripe\\GraphQL\\Schema\\Registry\\PluginRegistry:\n    constructor:\n      - 'App\\GraphQL\\Plugin\\Truncator'\n```\n\n----------------------------------------\n\nTITLE: Comments Module Deprecations\nDESCRIPTION: Removal of deprecated classes and methods in the Comments module, including return type changes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Comments\\Controllers\\CommentingController::redirectBack(): HTTPResponse\n// Removed classes:\n// SilverStripe\\Comments\\Admin\\CommentsGridFieldAction\n// SilverStripe\\Comments\\Admin\\CommentsGridFieldBulkAction\\Handler\n// Removed method:\n// SilverStripe\\Comments\\Model\\Comment::getParent()\n```\n\n----------------------------------------\n\nTITLE: PHP Configuration for Font Awesome Styles in TinyMCE\nDESCRIPTION: PHP configuration to manually add extended valid elements for Font Awesome icons in TinyMCE editor\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\n\nTinyMCEConfig::get('cwp')->setOption(\n    'extended_valid_elements',\n    $cwpEditor->getOption('extended_valid_elements')\n    . ',span[class|align|style|aria-hidden]'\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling operations for a specific model in SilverStripe GraphQL\nDESCRIPTION: YAML configuration that enables both the standard read operation and the custom duplicate operation for a specific DataObject model class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/06_extending/adding_a_custom_operation.md#2025-04-21_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\n# app/_graphql/models.yml\nApp\\Model\\MyDataObject:\n  fields: '*'\n  operations:\n    read: true\n    duplicate: true\n```\n\n----------------------------------------\n\nTITLE: Custom Column Selection with DataQuery\nDESCRIPTION: Shows how to use custom column selections in DataQuery with colliding field statement resolution using CASE statements\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.2.0-rc1.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$query = new DataQuery(MyClass::class);\n$query->selectField('\\'my custom title\\' AS \"Title\"');\n$query->setAllowCollidingFieldStatements(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo Mode for Custom DataObject in YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable sudo mode for a custom DataObject subclass by setting the require_sudo_mode configuration property to true.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSomeModule\\Model\\Player:\n  require_sudo_mode: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Error Codes for ErrorPage in Silverstripe YAML\nDESCRIPTION: Shows how to limit the error codes available in the CMS dropdown for ErrorPage using YAML configuration in Silverstripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.2.0-beta1.md#2025-04-21_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\ErrorPage\\ErrorPage:\n  allowed_error_codes:\n    - 400\n    - 403\n    - 404\n    - 500\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata in Silverstripe Documentation\nDESCRIPTION: This snippet shows how to define page metadata (frontmatter) in Silverstripe documentation using Gatsby's syntax. It demonstrates how to include metadata like `title`, `summary`, and `icon` at the top of a page, fenced by `---`. This metadata is used when rendering the page as a child in lists or navigation.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/02_Documentation.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n---\ntitle: My page title\nsummary: This summary, the title, and the icon will all be used when rendering this page as a child.\nicon: file-alt\n---\n```\n\n----------------------------------------\n\nTITLE: Manipulating Eager Loaded Relation Queries in Silverstripe PHP\nDESCRIPTION: Demonstrates how to use the new syntax for eager loading relations in Silverstripe, allowing manipulation of eager loading queries for improved performance.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.2.0-beta1.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\ORM\\DataList;\n\n$teams = Team::get()->eagerLoad([\n    'Players' => fn (DataList $list) => $list->filter(['Age:GreaterThan' => 18]),\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing TinyMCE Outside CMS\nDESCRIPTION: JavaScript code to initialize TinyMCE for HTMLEditorFields outside the CMS context.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/Field_types/03_HTMLEditorField.md#2025-04-21_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// eslint-disable-next-line no-restricted-syntax\nfor (const field of document.querySelectorAll('textarea[data-editor=\"tinyMCE\"]')) {\n  const id = field.getAttribute('id');\n  const config = JSON.parse(field.dataset.config);\n  config.selector = `#${id}`;\n  if (typeof config.baseURL !== 'undefined') {\n    tinymce.EditorManager.baseURL = config.baseURL;\n  }\n  tinymce.init(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Parameter Names in SilverStripe View Methods\nDESCRIPTION: Changes the parameter name from 'field' to 'fieldName' in cachedCall() methods of ViewableData and ViewableData_Customised classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\View\\ViewableData::cachedCall($fieldName)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\View\\ViewableData_Customised::cachedCall($fieldName)\n```\n\n----------------------------------------\n\nTITLE: DataObject Class Reference Example\nDESCRIPTION: Example showing basic DataObject class reference in Silverstripe CMS, specifically referencing the Member class which handles authenticated user data.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nDataObject\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Changes in SilverStripe Control Classes\nDESCRIPTION: Various methods in SilverStripe Control classes have had their parameter types changed from 'dynamic' to more specific types. This includes changes in Controller and Director classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nSilverStripe\\Control\\Controller::redirect($url: string, $code: int)\nSilverStripe\\Control\\Controller::setRequest($request: SilverStripe\\Control\\HTTPRequest)\nSilverStripe\\Control\\Director::absoluteURL($url: string, $relativeParent: string)\n```\n\n----------------------------------------\n\nTITLE: Using subtract() Method in SilverStripe ORM - PHP\nDESCRIPTION: Demonstrates how to subtract one DataList from another using the subtract() method.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/01_Data_Model_and_ORM.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$sam = Player::get()->filter('FirstName', 'Sam');\n$noSams = Player::get()->subtract($sam);\n```\n\nLANGUAGE: php\nCODE:\n```\n// ... Finding all members that do not belong to $group.\nuse SilverStripe\\Security\\Member;\n// Assuming we have some `Group` $group:\n$otherMembers = Member::get()->subtract($group->Members());\n```\n\n----------------------------------------\n\nTITLE: Setting Database Boot Configuration\nDESCRIPTION: Method to configure database boot settings, replacing the deprecated DatabaselessKernel class. Uses CoreKernel::setBootDatabase() for configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.4.0-rc1.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nCoreKernel::setBootDatabase()\n```\n\n----------------------------------------\n\nTITLE: Create Development Environment\nDESCRIPTION: Sets up a development environment for contributing to Silverstripe CMS, keeping full VCS history\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/00_Getting_Started/02_Composer.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project --keep-vcs silverstripe/installer ./my-project 5.x-dev --prefer-source\n```\n\n----------------------------------------\n\nTITLE: Type Changes in TopPage Methods\nDESCRIPTION: Updates to return types and parameter types in various methods of the TopPage extensions, changing from generic Page to SilverStripe\\CMS\\Model\\SiteTree.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n// Method return type changes\ngetTopPage(): SilverStripe\\CMS\\Model\\SiteTree|null\ngetTopPageFromCachedData(): SilverStripe\\CMS\\Model\\SiteTree|null\n\n// Parameter type changes\nassignTopPage($page: SilverStripe\\CMS\\Model\\SiteTree)\nsetTopPage($page: SilverStripe\\CMS\\Model\\SiteTree|null)\n```\n\n----------------------------------------\n\nTITLE: Creating a LeftAndMainExtension in Silverstripe for custom actions\nDESCRIPTION: This PHP snippet creates a `LeftAndMainExtension` to define custom controller actions for buttons created in the CMS. It defines a `sampleAction` and registers it as an allowed action. Requires registering the extension in the configuration.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/How_Tos/Extend_CMS_Interface.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Extension;\n\nuse SilverStripe\\Admin\\LeftAndMainExtension;\n\nclass CustomActionsExtension extends LeftAndMainExtension\n{\n    private static $allowed_actions = [\n        'sampleAction',\n    ];\n\n    public function sampleAction()\n    {\n        // Create the web\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Source Directory\nDESCRIPTION: This snippet shows how to configure the source directory for your GraphQL schema YAML files using the `src` key.  This is recommended to improve performance and avoid unnecessary config flushes.  The `src` key must be an array, which allows for multiple source files to be merged into your schema.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/01_getting_started/02_configuring_your_schema.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"# app/_config/graphql.yml\nSilverStripe\\GraphQL\\Schema\\Schema:\n  schemas:\n    default:\n      src:\n        - app/_graphql\"\n```\n\n----------------------------------------\n\nTITLE: CSS Updates for CMS Page History Controller\nDESCRIPTION: Removal of CSS styling related to CMSPageHistoryController as part of code cleanup.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/alpha/5.0.0-alpha1.md#2025-04-21_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: JavaScript Object Spread Example\nDESCRIPTION: Demonstrates the concept of spreading and overriding object properties in JavaScript.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/02_working_with_dataobjects/01_adding_dataobjects_to_the_schema.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst newObj = { ...oldObj, someProperty: 'custom' };\n```\n\n----------------------------------------\n\nTITLE: Implementing TinyMCE 6 Skin in Silverstripe Admin\nDESCRIPTION: Adds support for TinyMCE 6 by implementing a custom skin in the Silverstripe admin module.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nImplement our TinyMCE skin for TinyMCE 6\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Asset Building with package.json\nDESCRIPTION: This JSON snippet configures the package.json file for frontend asset building, including necessary dependencies for the History Viewer functionality.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/10_Versioning.md#2025-04-21_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"scripts\": {\n    \"build\": \"yarn && NODE_ENV=production webpack --mode production --bail --progress\",\n    \"watch\": \"yarn && NODE_ENV=development webpack --watch --progress\"\n  },\n  \"dependencies\": {\n    \"@apollo/client\": \"^3.7.1\",\n    \"graphql-tag\": \"^2.12.6\"\n  },\n  \"devDependencies\": {\n    \"@silverstripe/webpack-config\": \"^2.0.0\",\n    \"webpack\": \"^5.74.0\",\n    \"webpack-cli\": \"^5.0.0\"\n  },\n  \"engines\": {\n    \"node\": \"^18.x\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Documentation Format\nDESCRIPTION: Standard format for documenting changes in Silverstripe modules, including commit hashes, dates, descriptions and authors.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.3.0.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Documentation {#changelog-documentation}\n\n- silverstripe/recipe-plugin (2.0.0 -> 2.0.1)\n  - 2023-04-19 [190bf80](https://github.com/silverstripe/recipe-plugin/commit/190bf80dbefde6d2d344c8fedcfa34fabb9eb9c7) Update README.md for CMS 5 (Guy Sartorelli)\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for silverstripe/errorpage in Markdown\nDESCRIPTION: This snippet shows the changelog entry for the silverstripe/errorpage package, including the version update and a specific commit.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.4.0.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- silverstripe/errorpage (2.3.0 -> 2.4.0)\n  - 2024-10-22 [648cd87](https://github.com/silverstripe/silverstripe-errorpage/commit/648cd87d0b2ebc4bf1164df65631e6a9d1d2f678) Add extension hooks for static file writing (Dylan Wagstaff)\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in SilverStripe GraphQL Server (YAML)\nDESCRIPTION: Enables CORS in the SilverStripe GraphQL server by setting the 'Enabled' property to true in the YAML configuration. This allows the configuration of additional CORS headers.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/19_GraphQL/04_security_and_best_practices/02_cors.md#2025-04-21_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\GraphQL\\Controller:\\n  cors:\\n    Enabled: true\n```\n\n----------------------------------------\n\nTITLE: HTML Example\nDESCRIPTION: A simple HTML snippet to show the context for the JavaScript examples.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/15_Customising_the_Admin_Interface/07_jQuery_Entwine.md#2025-04-21_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n```html\n<div>Internal text</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-relational has_one Relations in Silverstripe PHP\nDESCRIPTION: Code example showing how to set up a multi-relational has_one relation in a Silverstripe DataObject. This feature allows multiple has_many relations to point to a single has_one relation. The has_one must be polymorphic and requires setting the DataObjectSchema::HAS_ONE_MULTI_RELATIONAL flag to true.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.2.0.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\DataObjectSchema;\n\nclass MyExample extends DataObject\n{\n    // ...\n\n    private static array $has_one = [\n        'MyMultiRelationalRelation' => [\n            // The class here is the class for the has_one - it must be polymorphic.\n            'class' => DataObject::class,\n            // Setting this to true is what defines this has_one relation as multi-relational\n            DataObjectSchema::HAS_ONE_MULTI_RELATIONAL => true,\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated UserFormsColumnCleanTask Class in Silverstripe PHP\nDESCRIPTION: The UserFormsColumnCleanTask class has been deprecated with no replacement functionality planned.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.4.0-beta1.md#2025-04-21_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nUserFormsColumnCleanTask\n```\n\n----------------------------------------\n\nTITLE: Updating Team Name via has_one Relationship in SilverStripe Form\nDESCRIPTION: This snippet demonstrates how to use dot notation in SilverStripe forms to update a team name through a has_one relationship on a Player object. It shows form creation with dot notation field naming and proper handling of nested data during form submission.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/03_Forms/How_Tos/06_Handle_Nested_data.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Control;\n\nuse App\\Model\\Player;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\FormAction;\nuse SilverStripe\\Forms\\HiddenField;\nuse SilverStripe\\Forms\\RequiredFields;\nuse SilverStripe\\Forms\\TextField;\n\nclass MyController extends Controller\n{\n    private static $url_segment = 'MyController';\n\n    private static $allowed_actions = [\n        'getForm',\n    ];\n\n    private static $url_handlers = [\n        'Form' => 'getForm',\n    ];\n\n    public function getForm()\n    {\n        return Form::create(\n            $this,\n            'Form',\n            FieldList::create([\n                TextField::create('Name'),\n                TextField::create('HometownTeam.Name'),\n                HiddenField::create('ID'),\n            ]),\n            FieldList::create([\n                FormAction::create('doSubmitForm', 'Submit'),\n            ]),\n            RequiredFields::create([\n                'Name',\n                'HometownTeam.Name',\n                'ID',\n            ])\n        );\n    }\n\n    public function doSubmitForm($data, $form)\n    {\n        $player = Player::get()->byID($data['ID']);\n\n        // Only works for updating existing records\n        if (!$player) {\n            return false;\n        }\n\n        // Check permissions for the current user.\n        if (!$player->canEdit() || !$player->HometownTeam()->canEdit()) {\n            return false;\n        }\n\n        $form->saveInto($player);\n\n        // Write relationships *before* the original object\n        // to avoid changes being lost when flush() is called after write().\n        // CAUTION: This will create a new record if none is set on the relationship.\n        // This might or might not be desired behaviour.\n        $player->HometownTeam()->write();\n        $player->write();\n\n        $form->sessionMessage('Saved!', 'good');\n\n        return $this->redirectBack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Method Parameter Types in Elemental Module for PHP\nDESCRIPTION: Changes to parameter types for methods in various classes within the dnadesign/silverstripe-elemental module. The parameter type is changed from Page to SilverStripe\\CMS\\Model\\SiteTree.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/5.0.0.md#2025-04-21_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n// Changed parameter types\nDNADesign\\Elemental\\TopPage\\DataExtension::assignTopPage(SilverStripe\\CMS\\Model\\SiteTree $page)\nDNADesign\\Elemental\\TopPage\\DataExtension::setTopPage(SilverStripe\\CMS\\Model\\SiteTree|null $page)\nDNADesign\\Elemental\\TopPage\\FluentExtension::assignTopPage(SilverStripe\\CMS\\Model\\SiteTree $page)\nDNADesign\\Elemental\\TopPage\\SiteTreeExtension::initDuplication(SilverStripe\\CMS\\Model\\SiteTree $original)\nDNADesign\\Elemental\\TopPage\\SiteTreeExtension::onAfterDuplicate(SilverStripe\\CMS\\Model\\SiteTree $original)\nDNADesign\\Elemental\\TopPage\\SiteTreeExtension::onBeforeDuplicate(SilverStripe\\CMS\\Model\\SiteTree $original)\nDNADesign\\Elemental\\TopPage\\SiteTreeExtension::processDuplication(SilverStripe\\CMS\\Model\\SiteTree $original)\nDNADesign\\Elemental\\TopPage\\SiteTreeExtension::writeDuplication(SilverStripe\\CMS\\Model\\SiteTree $original)\n```\n\n----------------------------------------\n\nTITLE: Extension Hook Method Call in SilverStripe PHP\nDESCRIPTION: Shows how to invoke an extension hook that will prioritize methods prefixed with 'extend' when both standard and 'extend'-prefixed versions exist\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/alpha/5.0.0-alpha1.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->extend('onAfterWrite')\n```\n\n----------------------------------------\n\nTITLE: Custom Table Fixtures Test Setup\nDESCRIPTION: Example showing how to set up fixtures for custom database tables in test classes.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/06_Testing/04_Fixtures.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Tests;\n\nuse SilverStripe\\Dev\\SapphireTest;\nuse SilverStripe\\ORM\\DB;\nuse SilverStripe\\ORM\\DataObject;\n\nclass MyMigrationTaskTest extends SapphireTest\n{\n    protected static $fixture_file = 'fixtures.yml';\n\n    protected $usesTransactions = false;\n\n    public function onBeforeLoadFixtures(): void\n    {\n        DB::get_schema()->schemaUpdate(function () {\n            DB::require_table(\n                'my_custom_table',\n                [\n                    'ID' => 'PrimaryKey'\n                    'Title' => 'Varchar',\n                    'Email' => 'Varchar',\n                    'FileID' => 'ForeignKey',\n                ],\n                options: DataObject::config()->get('create_table_options')\n            );\n        });\n        parent::onBeforeLoadFixtures();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Font Awesome 4 to TinyMCE in PHP Configuration\nDESCRIPTION: This PHP code snippet adds the Font Awesome 4 CSS to the TinyMCE configuration, ensuring existing icons are displayed correctly in the CMS.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/5.0.0-rc1.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// app/_config.php\nuse SilverStripe\\Forms\\HTMLEditor\\TinyMCEConfig;\n\nTinyMCEConfig::get('cwp')->setOption(\n    'extended_valid_elements',\n    $cwpEditor->getOption('extended_valid_elements')\n    . ',span[class|align|style|aria-hidden]'\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Child Pages in Reverse Order\nDESCRIPTION: This snippet uses a Markdown shortcode to display child pages in reverse order. It's likely used to list the release candidate versions chronologically from newest to oldest.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/rc/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[CHILDREN reverse]\n```\n\n----------------------------------------\n\nTITLE: Configuring has_one Relation with YML in SilverStripe\nDESCRIPTION: Example of using YML configuration to add a has_one relationship to core classes in SilverStripe.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/00_Model/02_Relations.md#2025-04-21_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nSilverStripe\\Assets\\Image:\n  has_one:\n    Team: App\\Model\\Team\n```\n\n----------------------------------------\n\nTITLE: Creating Silverstripe CMS 5 Beta Test Project\nDESCRIPTION: Command to create a new Silverstripe CMS 5 beta project using Composer. Requires PHP 8.1 and follows standard project creation process.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/08_Changelogs/beta/5.0.0-beta1.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project silverstripe\\/installer:5.0.0-beta1 my-site\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Warnings via Environment Variable in Silverstripe CMS\nDESCRIPTION: Sets the SS_DEPRECATION_ENABLED environment variable to true in the project's .env file to enable deprecation warnings.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/07_Deprecations.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSS_DEPRECATION_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Using Info Callout Block in Silverstripe Documentation\nDESCRIPTION: This snippet shows how to use the `[!NOTE]` callout block in Silverstripe documentation to highlight important information. It demonstrates the basic syntax for creating an info box to add, deepen or accent information in the main text. This syntax is used to generate \"Info box\" type callouts.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/02_Documentation.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"> [!NOTE]\n> ...\"\n```\n\n----------------------------------------\n\nTITLE: Extension Hook Naming Convention Example\nDESCRIPTION: Demonstrates the naming pattern for extension hooks in Silverstripe CMS, showing how getter methods correspond to their update hooks.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/05_Coding_Conventions/01_PHP_Coding_Conventions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngetMyValue() // Original method\nupdateMyValue() // Extension hook\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with NVM\nDESCRIPTION: Commands to install and use the correct Node.js version using Node Version Manager (nvm).\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/06_Build_Tooling.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install && nvm use\n```\n\n----------------------------------------\n\nTITLE: Implementing Warning Callout Block in Silverstripe Documentation\nDESCRIPTION: This snippet shows how to use the `[!WARNING]` callout block in Silverstripe documentation to highlight potential gotchas or technical notifications. The block syntax utilizes the `[!WARNING]` identifier. This creates a \"Warning box\" type callout.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/02_Documentation.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"> [!WARNING]\n> ...\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Caution Callout Block in Silverstripe Documentation\nDESCRIPTION: This snippet shows how to use the `[!CAUTION]` callout block in Silverstripe documentation to alert users about severe bugs or technical issues requiring attention. The callout block is created using the `[!CAUTION]` identifier. The resulting rendering is of a \"Alert box\" type callout.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/10_Contributing/02_Documentation.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\"> [!CAUTION]\n> ...\"\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Type in PHP for Silverstripe CMS\nDESCRIPTION: This PHP code snippet demonstrates how to check the current environment type (live, test, or dev) in Silverstripe CMS using the Director class.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/00_Environment_Types.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse SilverStripe\\Control\\Director;\n\nif (Director::isLive()) {\n    // is in live\n} elseif (Director::isTest()) {\n    // is in test mode\n} elseif (Director::isDev()) {\n    // is in dev mode\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Log File Path for Deprecation Warnings in Silverstripe CMS\nDESCRIPTION: Uses the SS_ERROR_LOG environment variable to set a relative file path for logging deprecation warnings.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/07_Deprecations.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSS_ERROR_LOG=\"./silverstripe.log\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth for Test Environment in Silverstripe CMS\nDESCRIPTION: This YAML configuration enables BasicAuth protection for the entire site when in test environment. It's added to the app/_config/app.yml file.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/07_Debugging/00_Environment_Types.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nOnly:\n  environment: 'test'\n---\nSilverStripe\\Security\\BasicAuth:\n  entire_site_protected: true\n```\n\n----------------------------------------\n\nTITLE: Using Controller Method for Cache Key in SilverStripe Template\nDESCRIPTION: Shows how to reference a controller method to generate a cache key in a SilverStripe template.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/02_Developer_Guides/01_Templates/11_Partial_Template_Caching.md#2025-04-21_snippet_3\n\nLANGUAGE: ss\nCODE:\n```\n<% cached $SliderCacheKey %>\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Warnings in HTTP Responses via Environment Variable in Silverstripe CMS\nDESCRIPTION: Sets the SS_DEPRECATION_SHOW_HTTP environment variable to true to enable deprecation warnings in HTTP responses.\nSOURCE: https://github.com/silverstripe/developer-docs/blob/5/en/06_Upgrading/07_Deprecations.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nSS_DEPRECATION_SHOW_HTTP=true\n```"
  }
]