[
  {
    "owner": "fgmacedo",
    "repo": "python-statemachine",
    "content": "TITLE: Implementing Order State Machine Class in Python\nDESCRIPTION: Defines an OrderControl class inheriting from StateMachine to manage order states including waiting for payment, processing, shipping and completion. Implements state transitions and payment validation logic.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass OrderControl(StateMachine):\n    waiting_for_payment = State(initial=True)\n    processing = State()\n    shipping = State()\n    completed = State(final=True)\n\n    add_to_order = waiting_for_payment.to(waiting_for_payment)\n    receive_payment = (\n        waiting_for_payment.to(processing, cond=\"payments_enough\")\n        | waiting_for_payment.to(waiting_for_payment, unless=\"payments_enough\")\n    )\n    process_order = processing.to(shipping, cond=\"payment_received\")\n    ship_order = shipping.to(completed)\n\n    def __init__(self):\n        self.order_total = 0\n        self.payments = []\n        self.payment_received = False\n        super(OrderControl, self).__init__()\n\n    def payments_enough(self, amount):\n        return sum(self.payments) + amount >= self.order_total\n\n    def before_add_to_order(self, amount):\n        self.order_total += amount\n        return self.order_total\n\n    def before_receive_payment(self, amount):\n        self.payments.append(amount)\n        return self.payments\n\n    def after_receive_payment(self):\n        self.payment_received = True\n\n    def on_enter_waiting_for_payment(self):\n        self.payment_received = False\n```\n\n----------------------------------------\n\nTITLE: Example of a State Machine with Conditional Transitions\nDESCRIPTION: This code snippet demonstrates how to implement an invoice state machine with conditional transitions using guards and validators. It shows the usage of 'cond', 'unless', and 'validators' parameters to control state transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/guards.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass InvoiceStateMachine(StateMachine):\n    unpaid = State(initial=True)\n    paid = State()\n    failed = State()\n\n    paused = False\n    offer_valid = True\n\n    pay = (\n        unpaid.to(paid, cond=\"payment_success\") |\n        unpaid.to(failed, validators=\"validator\", unless=\"paused\") |\n        failed.to(paid, cond=[\"payment_success\", \"offer_valid\"])\n    )\n    def payment_success(self, event_data):\n        return <condition logic goes here>\n\n    def validator(self):\n        return <validator logic goes here>\n```\n\n----------------------------------------\n\nTITLE: Using the Order State Machine in Python\nDESCRIPTION: Demonstrates usage of the OrderControl state machine including adding items, making payments, and transitioning through states. Shows error handling and state checking.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncontrol = OrderControl()\n\ncontrol.add_to_order(3)\n3\n\ncontrol.add_to_order(7)\n10\n\ncontrol.receive_payment(4)\n[4]\n\ncontrol.current_state.id\n'waiting_for_payment'\n\ncontrol.current_state.name\n'Waiting for payment'\n\ncontrol.process_order()\nTraceback (most recent call last):\n...\nstatemachine.exceptions.TransitionNotAllowed: Can't process_order when in Waiting for payment.\n\ncontrol.receive_payment(6)\n[4, 6]\n\ncontrol.current_state.id\n'processing'\n\ncontrol.process_order()\n\ncontrol.ship_order()\n\ncontrol.payment_received\nTrue\n\ncontrol.order_total\n10\n\ncontrol.payments\n[4, 6]\n\ncontrol.completed.is_active\nTrue\n```\n\n----------------------------------------\n\nTITLE: Defining a Traffic Light StateMachine with Multiple Events\nDESCRIPTION: Example of a StateMachine implementation for a traffic light with transitions between green, yellow, and red states. It demonstrates how actions are associated with specific events and transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import State\n>>> from statemachine import StateMachine\n\n>>> class TrafficLightMachine(StateMachine):\n...     \"A traffic light machine\"\n...     green = State(initial=True)\n...     yellow = State()\n...     red = State()\n...\n...     slowdown = green.to(yellow)\n...     stop = yellow.to(red)\n...     go = red.to(green)\n...\n...     cycle = slowdown | stop | go\n...\n...     def before_slowdown(self):\n...         print(\"Slowdown\")\n...\n...     def before_cycle(self, event: str, source: State, target: State):\n...         print(f\"Running {event} from {source.id} to {target.id}\")\n```\n\n----------------------------------------\n\nTITLE: Defining a StateMachine for Django Models\nDESCRIPTION: This snippet demonstrates how to create a StateMachine class in a dedicated module for Django's auto-discovery. The machine defines a campaign workflow with states like draft, producing, closed, and cancelled, along with transitions between these states.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/integrations.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# campaign/statemachines.py\n\nfrom statemachine import StateMachine\nfrom statemachine import State\nfrom statemachine.mixins import MachineMixin\n\n\nclass CampaignMachineWithKeys(StateMachine):\n    \"A workflow machine\"\n    draft = State('Draft', initial=True, value=1)\n    producing = State('Being produced', value=2)\n    closed = State('Closed', value=3)\n    cancelled = State('Cancelled', value=4)\n\n    add_job = draft.to.itself() | producing.to.itself()\n    produce = draft.to(producing)\n    deliver = producing.to(closed)\n    cancel = cancelled.from_(draft, producing)\n```\n\n----------------------------------------\n\nTITLE: Implementing Async State Machine in Python\nDESCRIPTION: Example demonstrating how to create and use an asynchronous state machine with Python's asyncio. The code shows a simple state machine with initial and final states, including an async transition handler that returns a value. The machine supports async event handling and state transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.3.0.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> class AsyncStateMachine(StateMachine):\n...     initial = State('Initial', initial=True)\n...     final = State('Final', final=True)\n...\n...     advance = initial.to(final)\n...\n...     async def on_advance(self):\n...         return 42\n\n\n\n>>> async def run_sm():\n...     sm = AsyncStateMachine()\n...     res = await sm.advance()\n...     return (42, sm.current_state.name)\n\n>>> asyncio.run(run_sm())\n(42, 'Final')\n\n```\n\n----------------------------------------\n\nTITLE: Integrating StateMachine with Django Models\nDESCRIPTION: This snippet shows how to integrate a StateMachine with a Django model using MachineMixin. The model specifies the StateMachine class to use, the attribute name for accessing the machine, and the field name that stores the state value.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/integrations.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# campaign/models.py\n\nfrom django.db import models\n\nclass Campaign(models.Model, MachineMixin):\n    state_machine_name = 'campaign.statemachines.CampaignMachineWithKeys'\n    state_machine_attr = 'sm'\n    state_field_name = 'step'\n\n    name = models.CharField(max_length=30)\n    step = models.IntegerField()\n```\n\n----------------------------------------\n\nTITLE: Implementing Traffic Light State Machine in Python\nDESCRIPTION: Demonstrates creating a basic traffic light state machine with three states (green, yellow, red) and a cycle event. Includes callback methods for state transitions and event handling.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom statemachine import StateMachine, State\n\nclass TrafficLightMachine(StateMachine):\n    \"A traffic light machine\"\n    green = State(initial=True)\n    yellow = State()\n    red = State()\n\n    cycle = (\n        green.to(yellow)\n        | yellow.to(red)\n        | red.to(green)\n    )\n\n    def before_cycle(self, event: str, source: State, target: State, message: str = \"\"):\n        message = \". \" + message if message else \"\"\n        return f\"Running {event} from {source.id} to {target.id}{message}\"\n\n    def on_enter_red(self):\n        print(\"Don't move.\")\n\n    def on_exit_red(self):\n        print(\"Go ahead!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a TrafficLightMachine State Machine\nDESCRIPTION: Complete implementation of a traffic light state machine with three states (green, yellow, red) and a cycle event that transitions between them.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom statemachine import StateMachine, State\n\n\nclass TrafficLightMachine(StateMachine):\n    \"\"\"A traffic light machine\"\"\"\n\n    green = State(initial=True)\n    yellow = State()\n    red = State()\n\n    # Transitions\n    cycle = green.to(yellow) | yellow.to(red) | red.to(green)\n```\n\n----------------------------------------\n\nTITLE: Exercising ExampleStateMachine in Python Interactive Shell\nDESCRIPTION: This snippet demonstrates the usage of the ExampleStateMachine class. It creates an instance, shows the initial state, and then triggers a series of state transitions using the send method. The output illustrates the chain of state changes and the execution of the on_enter_state method.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/tests/testcases/issue449.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> example = ExampleStateMachine()\nEntering state initial. Event: __initial__\n\n>>> print(example.current_state)\nInitial\n\n>>> example.send(\"initial_to_second\") # this will call second_to_third and third_to_fourth\nEntering state second. Event: initial_to_second\nEntering state third. Event: second_to_third\nEntering state fourth. Event: third_to_fourth\nthird_to_fourth on on_enter_state worked\n\n>>> print(\"My current state is\", example.current_state)\nMy current state is Fourth\n```\n\n----------------------------------------\n\nTITLE: Implementing Async State Machine in Python\nDESCRIPTION: Shows how to create an asynchronous state machine with initial and final states using native coroutines. Demonstrates async event handling and state transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncStateMachine(StateMachine):\n    initial = State('Initial', initial=True)\n    final = State('Final', final=True)\n\n    advance = initial.to(final)\n\n    async def on_advance(self):\n        return 42\n\nasync def run_sm():\n    sm = AsyncStateMachine()\n    result = await sm.advance()\n    print(f\"Result is {result}\")\n    print(sm.current_state)\n\nasyncio.run(run_sm())\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Callbacks in a StateMachine\nDESCRIPTION: Demonstrates how to implement the five generic callbacks (before_transition, on_exit_state, on_transition, on_enter_state, and after_transition) in a StateMachine class, with example usage showing execution order.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ExampleStateMachine(StateMachine):\n...     initial = State(initial=True)\n...     final = State(final=True)\n...\n...     loop = initial.to.itself()\n...     go = initial.to(final)\n...\n...     def before_transition(self, event, state):\n...         print(f\"Before '{event}', on the '{state.id}' state.\")\n...         return \"before_transition_return\"\n...\n...     def on_transition(self, event, state):\n...         print(f\"On '{event}', on the '{state.id}' state.\")\n...         return \"on_transition_return\"\n...\n...     def on_exit_state(self, event, state):\n...         print(f\"Exiting '{state.id}' state from '{event}' event.\")\n...\n...     def on_enter_state(self, event, state):\n...         print(f\"Entering '{state.id}' state from '{event}' event.\")\n...\n...     def after_transition(self, event, state):\n...         print(f\"After '{event}', on the '{state.id}' state.\")\n\n\n>>> sm = ExampleStateMachine()  # On initialization, the machine run a special event `__initial__`\nEntering 'initial' state from '__initial__' event.\n\n>>> sm.loop()\nBefore 'loop', on the 'initial' state.\nExiting 'initial' state from 'loop' event.\nOn 'loop', on the 'initial' state.\nEntering 'initial' state from 'loop' event.\nAfter 'loop', on the 'initial' state.\n['before_transition_return', 'on_transition_return']\n\n>>> sm.go()\nBefore 'go', on the 'initial' state.\nExiting 'initial' state from 'go' event.\nOn 'go', on the 'initial' state.\nEntering 'final' state from 'go' event.\nAfter 'go', on the 'final' state.\n['before_transition_return', 'on_transition_return']\n```\n\n----------------------------------------\n\nTITLE: Advanced Event Declaration and Usage\nDESCRIPTION: Complex example showing various ways to declare and use events, including explicit Event objects, string events, and event parameters in transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom statemachine import State, StateMachine, Event\n\nclass TrafficLightMachine(StateMachine):\n    \"A traffic light machine\"\n\n    green = State(initial=True)\n    yellow = State()\n    red = State()\n\n    slowdown = Event(name=\"Slowing down\")\n\n    cycle = Event(\n        green.to(yellow, event=slowdown)\n        | yellow.to(red, event=Event(\"stop\", name=\"Please stop!\"))\n        | red.to(green, event=\"go\"),\n        name=\"Loop\",\n    )\n\n    def on_transition(self, event_data, event: Event):\n        # The `event` parameter can be declared as `str` or `Event`, since `Event` is a subclass of `str`\n        # Note also that in this example, we're using `on_transition` instead of `on_cycle`, as this\n        # binds the action to run for every transition instead of a specific event ID.\n        assert event_data.event == event\n        return (\n            f\"Running {event.name} from {event_data.transition.source.id} to \"\n            f\"{event_data.transition.target.id}\"\n        )\n\n# Event IDs\nTrafficLightMachine.cycle.id\n'cycle'\nTrafficLightMachine.slowdown.id\n'slowdown'\nTrafficLightMachine.stop.id\n'stop'\nTrafficLightMachine.go.id\n'go'\n\n# Event names\nTrafficLightMachine.cycle.name\n'Loop'\nTrafficLightMachine.slowdown.name\n'Slowing down'\nTrafficLightMachine.stop.name\n'Please stop!'\nTrafficLightMachine.go.name\n'go'\n\nsm = TrafficLightMachine()\n\nsm.cycle()  # Your IDE is happy because it now knows that `cycle` is callable!\n'Running Loop from green to yellow'\n\nsm.send(\"cycle\")  # You can also use `send` in order to process dynamic event sources\n'Running Loop from yellow to red'\n\nsm.send(\"cycle\")\n'Running Loop from red to green'\n\nsm.send(\"slowdown\")\n'Running Slowing down from green to yellow'\n\nsm.send(\"stop\")\n'Running Please stop! from yellow to red'\n\nsm.send(\"go\")\n'Running go from red to green'\n```\n\n----------------------------------------\n\nTITLE: Implementing MachineMixin in a Model Class\nDESCRIPTION: Shows how to create a Workflow class that implements MachineMixin with configuration for state machine integration, including state field and event binding\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/mixins.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Workflow(MachineMixin):\n    state_machine_name = '__main__.CampaignMachineWithKeys'\n    state_machine_attr = 'sm'\n    state_field_name = 'workflow_step'\n    bind_events_as_methods = True\n\n    workflow_step = 1\n```\n\n----------------------------------------\n\nTITLE: Implementing a Log Listener for State Machine Transitions\nDESCRIPTION: Demonstrates creating a simple LogListener class that prints messages after state transitions and when entering states. The example shows how to initialize a state machine with this listener to track traffic light changes.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/listeners.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from tests.examples.traffic_light_machine import TrafficLightMachine\n\n>>> class LogListener(object):\n...     def __init__(self, name):\n...         self.name = name\n...\n...     def after_transition(self, event, source, target):\n...         print(f\"{self.name} after: {source.id}--({event})-->{target.id}\")\n...\n...     def on_enter_state(self, target, event):\n...         print(f\"{self.name} enter: {target.id} from {event}\")\n\n\n>>> sm = TrafficLightMachine(listeners=[LogListener(\"Paulista Avenue\")])\nPaulista Avenue enter: green from __initial__\n\n>>> sm.cycle()\nRunning cycle from green to yellow\nPaulista Avenue enter: yellow from cycle\nPaulista Avenue after: green--(cycle)-->yellow\n```\n\n----------------------------------------\n\nTITLE: Enforcing Outgoing Transitions with strict_states in Python StateMachine\nDESCRIPTION: Example demonstrating how to use strict_states=True to enforce that all non-final states have at least one outgoing transition. Without outgoing transitions, the state machine could become trapped.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/states.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class TrafficLightMachine(StateMachine, strict_states=True):\n...     \"A workflow machine\"\n...     red = State('Red', initial=True, value=1)\n...     green = State('Green', value=2)\n...     orange = State('Orange', value=3)\n...     hazard = State('Hazard', value=4)\n...\n...     cycle = red.to(green) | green.to(orange) | orange.to(red)\n...     fault = red.to(hazard) | green.to(hazard) | orange.to(hazard)\nTraceback (most recent call last):\n...\nInvalidDefinition: All non-final states should have at least one outgoing transition. These states have no outgoing transition: ['hazard']\n```\n\n----------------------------------------\n\nTITLE: Binding State Actions by Naming Convention\nDESCRIPTION: Shows how to define state enter and exit callbacks using a naming convention pattern where method names follow the format 'on_enter_<state.id>' and 'on_exit_<state.id>'.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ExampleStateMachine(StateMachine):\n...     initial = State(initial=True)\n...\n...     loop = initial.to.itself()\n...\n...     def on_enter_initial(self):\n...         pass\n...\n...     def on_exit_initial(self):\n...         pass\n```\n\n----------------------------------------\n\nTITLE: Configuring StateMachine to Ignore Unknown Events\nDESCRIPTION: Example showing how to instantiate a StateMachine with the allow_event_without_transition parameter set to True, which prevents exceptions from being raised when triggering unknown events.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> sm = ApprovalMachine(allow_event_without_transition=True)\n\n>>> sm.send(\"unknow_event_name\")\n\n>>> sm.pending.is_active\nTrue\n\n>>> sm.send(\"approve\")\n\n>>> sm.pending.is_active\nTrue\n\n>>> sm.send(\"start\")\n\n>>> sm.waiting_approval.is_active\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using bound events as commands in a StateMachine\nDESCRIPTION: Demonstrates how events are bound to state machine instances and can be passed by reference and called like methods, implementing the command design pattern through a random event selection example.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.5.0.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import random\n>>> random.seed(\"15\")\n\n>>> sm = AccountStateMachine()\n\n>>> while not sm.current_state.final:\n...     allowed_events = sm.allowed_events\n...     print(\"Choose an action: \")\n...     for idx, event in enumerate(allowed_events):\n...         print(f\"{idx} - {event.name}\")\n...\n...     user_input = random.randint(0, len(allowed_events)-1)\n...     print(f\"User input: {user_input}\")\n...\n...     event = allowed_events[user_input]\n...     print(f\"Running the option {user_input} - {event.name}\")\n...     event()\nChoose an action:\n0 - Suspend\n1 - Overdraft\n2 - Close account\nUser input: 0\nRunning the option 0 - Suspend\nChoose an action:\n0 - Activate\n1 - Close account\nUser input: 0\nRunning the option 0 - Activate\nChoose an action:\n0 - Suspend\n1 - Overdraft\n2 - Close account\nUser input: 2\nRunning the option 2 - Close account\nAccount has been closed.\n\n>>> print(f\"SM is in {sm.current_state.name} state.\")\nSM is in Closed state.\n```\n\n----------------------------------------\n\nTITLE: Binding Transition Actions using Parameters\nDESCRIPTION: Demonstrates how to bind transition actions by passing function names as 'before', 'on', and 'after' parameters to the transition definition.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ExampleStateMachine(StateMachine):\n...     initial = State(initial=True)\n...\n...     loop = initial.to.itself(before=\"just_before\", on=\"its_happening\", after=\"loop_completed\")\n...\n...     def just_before(self):\n...         pass\n...\n...     def its_happening(self):\n...         pass\n...\n...     def loop_completed(self):\n...         pass\n```\n\n----------------------------------------\n\nTITLE: Binding Transition Actions using Decorator Syntax\nDESCRIPTION: Shows how to use Python decorators to bind methods as transition actions and conditions using decorators like event.before, event.on, event.after, event.cond, and event.unless.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ExampleStateMachine(StateMachine):\n...     initial = State(initial=True)\n...\n...     loop = initial.to.itself()\n...\n...     @loop.before\n...     def just_before(self):\n...         pass\n...\n...     @loop.on\n...     def its_happening(self):\n...         pass\n...\n...     @loop.after\n...     def loop_completed(self):\n...         pass\n...\n...     @loop.cond\n...     def should_we_allow_loop(self):\n...         return True\n...\n...     @loop.unless\n...     def should_we_block_loop(self):\n...         return False\n```\n\n----------------------------------------\n\nTITLE: Comparing External and Internal Transitions\nDESCRIPTION: A complete example implementing a state machine with both external and internal self-transitions to demonstrate their different behaviors.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass TestStateMachine(StateMachine):\n    initial = State(initial=True)\n\n    external_loop = initial.to.itself(on=\"do_something\")\n    internal_loop = initial.to.itself(internal=True, on=\"do_something\")\n\n    def __init__(self):\n        self.calls = []\n        super().__init__()\n\n    def do_something(self):\n        self.calls.append(\"do_something\")\n\n    def on_exit_initial(self):\n        self.calls.append(\"on_exit_initial\")\n\n    def on_enter_initial(self):\n        self.calls.append(\"on_enter_initial\")\n```\n\n----------------------------------------\n\nTITLE: Binding State Actions using Parameters\nDESCRIPTION: Demonstrates how to bind state actions by passing function names as 'enter' and 'exit' parameters to the State constructor.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ExampleStateMachine(StateMachine):\n...     initial = State(initial=True, enter=\"entering_initial\", exit=\"leaving_initial\")\n...\n...     loop = initial.to.itself()\n...\n...     def entering_initial(self):\n...         pass\n...\n...     def leaving_initial(self):\n...         pass\n```\n\n----------------------------------------\n\nTITLE: Completing a Full State Machine Cycle in Python\nDESCRIPTION: Demonstrates completing a full cycle in the traffic light state machine, showing the transition from red back to green using the cycle() method.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> machine.current_state.id\n'red'\n\n>>> machine.cycle()\n'Running Loop from red to green'\n\n>>> machine.current_state.id\n'green'\n\n```\n\n----------------------------------------\n\nTITLE: Defining StateMachine Class with States and Transitions\nDESCRIPTION: Example showing how to define a state machine class called CampaignMachineWithKeys with multiple states (draft, producing, closed, cancelled) and their transitions\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/mixins.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom statemachine import StateMachine, State\n\nfrom statemachine.mixins import MachineMixin\n\nclass CampaignMachineWithKeys(StateMachine):\n    \"A workflow machine\"\n    draft = State('Draft', initial=True, value=1)\n    producing = State('Being produced', value=2)\n    closed = State('Closed', value=3, final=True)\n    cancelled = State('Cancelled', value=4, final=True)\n\n    add_job = draft.to.itself() | producing.to.itself()\n    produce = draft.to(producing)\n    deliver = producing.to(closed)\n    cancel = cancelled.from_(draft, producing)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RTC Model Execution with the ServerConnection State Machine\nDESCRIPTION: Example showing the output when running ServerConnection with the default run-to-completion (RTC) model, where events are processed sequentially and the system maintains a consistent state.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/processing_model.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsm = ServerConnection()\nenter 'disconnected' from '' given '__initial__'\n\nsm.send(\"connect\")\nexit 'disconnected' to 'connecting' given 'connect'\non 'connect' from 'disconnected' to 'connecting'\nenter 'connecting' from 'disconnected' given 'connect'\nafter 'connect' from 'disconnected' to 'connecting'\nexit 'connecting' to 'connected' given 'connection_succeed'\non 'connection_succeed' from 'connecting' to 'connected'\nenter 'connected' from 'connecting' given 'connection_succeed'\nafter 'connection_succeed' from 'connecting' to 'connected'\n['on_transition', 'on_connect']\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Guards in a Python StateMachine\nDESCRIPTION: Demonstrates how to use conditional validators in a state machine by defining an ApprovalMachine with different approval paths. The example shows how to use the 'cond' parameter to restrict state transitions based on conditions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/1.0.1.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ApprovalMachine(StateMachine):\n    \"A workflow machine\"\n    requested = State(\"Requested\", initial=True)\n    accepted = State(\"Accepted\")\n    rejected = State(\"Rejected\")\n    completed = State(\"Completed\")\n\n    validate = requested.to(accepted, cond=\"is_ok\") | requested.to(rejected)\n```\n\n----------------------------------------\n\nTITLE: Triggering Events from Initial State in Python StateMachine\nDESCRIPTION: This example demonstrates how to create a state machine that triggers a transition from within its initial state's activation handler. The machine defines two states and a transition between them, with the initial state's on_enter handler calling a method that triggers the transition to the second state.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/tests/testcases/issue480.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n>>>\n>>> class MyStateMachine(StateMachine):\n...     State_1 = State(initial=True)\n...     State_2 = State(final=True)\n...     Trans_1 = State_1.to(State_2)\n...\n...     def __init__(self):\n...         super(MyStateMachine, self).__init__()\n...\n...     def on_enter_State_1(self):\n...         print(\"Entering State_1 state\")\n...         self.long_running_task()\n...\n...     def on_exit_State_1(self):\n...         print(\"Exiting State_1 state\")\n...\n...     def on_enter_State_2(self):\n...         print(\"Entering State_2 state\")\n...\n...     def long_running_task(self):\n...         print(\"long running task process started\")\n...         self.Trans_1()\n...         print(\"long running task process ended\")\n...\n>>> sm = MyStateMachine()\nEntering State_1 state\nlong running task process started\nlong running task process ended\nExiting State_1 state\nEntering State_2 state\n```\n\n----------------------------------------\n\nTITLE: Handling Return Values in StateMachine Actions\nDESCRIPTION: Demonstrates how return values from certain action callbacks (before_transition, before_<event>, on_transition, on_<event>) are collected and returned as a list from the event trigger method.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> class ExampleStateMachine(StateMachine):\n...     initial = State(initial=True)\n...\n...     loop = initial.to.itself()\n...\n...     def before_loop(self):\n...         return \"Before loop\"\n...\n...     def on_transition(self):\n...         pass\n...\n...     def on_loop(self):\n...         return \"On loop\"\n...\n\n>>> sm = ExampleStateMachine()\n\n>>> sm.loop()\n['Before loop', None, 'On loop']\n```\n\n----------------------------------------\n\nTITLE: Implementing a Data Checking State Machine in Python\nDESCRIPTION: Defines a StateMachine class that checks data values with conditional transitions. The machine transitions to a 'good' state if data meets criteria, to a 'bad' state if max cycles are reached, or continues checking by transitioning to itself. Includes a cycle counter and callback after transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/tests/testcases/issue434.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from time import sleep\n>>> from statemachine import StateMachine, State\n\n>>> class Model:\n...     def __init__(self, data: dict):\n...         self.data = data\n\n>>> class DataCheckerMachine(StateMachine):\n...     check_data = State(initial=True)\n...     data_good = State(final=True)\n...     data_bad = State(final=True)\n...\n...     MAX_CYCLE_COUNT = 10\n...     cycle_count = 0\n...\n...     cycle = (\n...         check_data.to(data_good, cond=\"data_looks_good\")\n...         | check_data.to(data_bad, cond=\"max_cycle_reached\")\n...         | check_data.to.itself(internal=True)\n...     )\n...\n...     def data_looks_good(self):\n...         return self.model.data.get(\"value\") > 10.0\n...\n...     def max_cycle_reached(self):\n...         return self.cycle_count > self.MAX_CYCLE_COUNT\n...\n...     def after_cycle(self, event: str, source: State, target: State):\n...         print(f'Running {event} {self.cycle_count} from {source!s} to {target!s}.')\n...         self.cycle_count += 1\n...\n```\n\n----------------------------------------\n\nTITLE: Using External and Internal Transitions\nDESCRIPTION: Example of using the TestStateMachine to demonstrate the difference between external and internal transitions. External transitions trigger exit and enter actions, while internal ones do not.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# This example will only run on automated tests if dot is present\ngetfixture(\"requires_dot_installed\")\n\nsm = TestStateMachine()\n\nsm._graph().write_png(\"docs/images/test_state_machine_internal.png\")\n\nsm.calls.clear()\n\nsm.external_loop()\n\nsm.calls\n['on_exit_initial', 'do_something', 'on_enter_initial']\n\nsm.calls.clear()\n\nsm.internal_loop()\n\nsm.calls\n['do_something']\n```\n\n----------------------------------------\n\nTITLE: Implementing Async State Machine Class\nDESCRIPTION: Demonstrates creating an async state machine with initial and final states, including an async callback method for state transition.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/async.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> class AsyncStateMachine(StateMachine):\n...     initial = State('Initial', initial=True)\n...     final = State('Final', final=True)\n...\n...     keep = initial.to.itself(internal=True)\n...     advance = initial.to(final)\n...\n...     async def on_advance(self):\n...         return 42\n\n>>> async def run_sm():\n...     sm = AsyncStateMachine()\n...     result = await sm.advance()\n...     print(f\"Result is {result}\")\n...     print(sm.current_state)\n\n>>> asyncio.run(run_sm())\nResult is 42\nFinal\n```\n\n----------------------------------------\n\nTITLE: Example Method Signatures for Actions and Guards in Python Statemachine\nDESCRIPTION: Different possible implementations of action and guard methods demonstrating the flexibility of method signatures. The dependency injection mechanism automatically matches and provides the parameters as needed based on the method signature.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef action_or_guard_method_name(self):\n    pass\n\ndef action_or_guard_method_name(self, model):\n    pass\n\ndef action_or_guard_method_name(self, event):\n    pass\n\ndef action_or_guard_method_name(self, *args, event_data, event, source, state, model, **kwargs):\n    pass\n\n```\n\n----------------------------------------\n\nTITLE: Implementing an Internal Transition\nDESCRIPTION: Example of creating an internal transition where a state transitions to itself without triggering entry or exit actions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndraft = State(\"Draft\")\n\ndraft.to.itself(internal=True)\nTransitionList([Transition(State('Draft', ...\n```\n\n----------------------------------------\n\nTITLE: Declaring transitions from any state using State.from_.any()\nDESCRIPTION: Demonstrates how to use the new State.from_.any() helper to create transitions from all non-final states to a target state, along with event definition and triggering.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.5.0.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import Event\n\n>>> class AccountStateMachine(StateMachine):\n...     active = State(\"Active\", initial=True)\n...     suspended = State(\"Suspended\")\n...     overdrawn = State(\"Overdrawn\")\n...     closed = State(\"Closed\", final=True)\n...\n...     suspend = Event(active.to(suspended))\n...     activate = Event(suspended.to(active))\n...     overdraft = Event(active.to(overdrawn))\n...     resolve_overdraft = Event(overdrawn.to(active))\n...\n...     close_account = Event(closed.from_.any(cond=\"can_close_account\"))\n...\n...     can_close_account: bool = True\n...\n...     def on_close_account(self):\n...         print(\"Account has been closed.\")\n\n>>> sm = AccountStateMachine()\n>>> sm.close_account()\nAccount has been closed.\n>>> sm.closed.is_active\nTrue\n```\n\n----------------------------------------\n\nTITLE: Implementing State Machine with Shared Transition List in Python\nDESCRIPTION: This code snippet defines a TestSM class that inherits from StateMachine. It sets up four states (state1 to state4) and implements a cycle transition. The class includes callbacks for entering and exiting each state, as well as before, on, and after callbacks for each transition and the cycle.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/tests/testcases/issue308.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom statemachine import StateMachine, State\n\nclass TestSM(StateMachine):\n    state1 = State('s1', initial=True)\n    state2 = State('s2')\n    state3 = State('s3')\n    state4 = State('s4', final=True)\n\n    event1 = state1.to(state2)\n    event2 = state2.to(state3)\n    event3 = state3.to(state4)\n\n    # cycle = state1.to(state2) | state2.to(state3) | state3.to(state4)\n    cycle = event1 | event2 | event3\n\n    def before_cycle(self):\n        print(\"before cycle\")\n\n    def on_cycle(self):\n        print(\"on cycle\")\n\n    def after_cycle(self):\n        print(\"after cycle\")\n\n    def on_enter_state1(self):\n        print('enter state1')\n\n    def on_exit_state1(self):\n        print('exit state1')\n\n    def on_enter_state2(self):\n        print('enter state2')\n\n    def on_exit_state2(self):\n        print('exit state2')\n\n    def on_enter_state3(self):\n        print('enter state3')\n\n    def on_exit_state3(self):\n        print('exit state3')\n\n    def on_enter_state4(self):\n        print('enter state4')\n\n    def on_exit_state4(self):\n        print('exit state4')\n\n    def before_trans12(self):\n        print('before event1')\n\n    def on_trans12(self):\n        print('on event1')\n\n    def after_trans12(self):\n        print('after event1')\n\n    def before_trans23(self):\n        print('before event2')\n\n    def on_trans23(self):\n        print('on event2')\n\n    def after_trans23(self):\n        print('after event2')\n\n    def before_trans34(self):\n        print('before event3')\n\n    def on_trans34(self):\n        print('on event3')\n\n    def after_trans34(self):\n        print('after event3')\n```\n\n----------------------------------------\n\nTITLE: Declaring an Event with an Action using Decorator Syntax\nDESCRIPTION: Demonstrates how to declare an event and provide its 'on' action implementation in a single step using decorator syntax on the event's method definition.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ExampleStateMachine(StateMachine):\n...     initial = State(initial=True)\n...\n...     @initial.to.itself()\n...     def loop(self):\n...         print(\"On loop\")\n...         return 42\n```\n\n----------------------------------------\n\nTITLE: Declaring Transition Actions by Naming Convention\nDESCRIPTION: Shows how to define transition callbacks using naming conventions where methods follow the patterns 'before_<event>', 'on_<event>', and 'after_<event>'.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ExampleStateMachine(StateMachine):\n...     initial = State(initial=True)\n...\n...     loop = initial.to.itself()\n...\n...     def before_loop(self):\n...         pass\n...\n...     def on_loop(self):\n...         pass\n...\n...     def after_loop(self):\n...         pass\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Listeners to StateMachine Instances\nDESCRIPTION: Demonstrates how to create a custom listener class that can log state machine transitions, and how to attach it to a state machine during initialization. The example shows the listener responding to state changes with custom logging messages.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.3.2.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from tests.examples.traffic_light_machine import TrafficLightMachine\n\n>>> class LogListener(object):\n...     def __init__(self, name):\n...         self.name = name\n...\n...     def after_transition(self, event, source, target):\n...         print(f\"{self.name} after: {source.id}--({event})-->{target.id}\")\n...\n...     def on_enter_state(self, target, event):\n...         print(f\"{self.name} enter: {target.id} from {event}\")\n\n\n>>> sm = TrafficLightMachine(listeners=[LogListener(\"Paulista Avenue\")])\nPaulista Avenue enter: green from __initial__\n\n>>> sm.cycle()\nRunning cycle from green to yellow\nPaulista Avenue enter: yellow from cycle\nPaulista Avenue after: green--(cycle)-->yellow\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Listeners to an Existing State Machine Instance\nDESCRIPTION: Demonstrates how to add multiple listeners to an already running state machine using the add_listener method. The example adds three LED panel listeners for different traffic light colors.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/listeners.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> sm.add_listener(LedPanel(\"green\"), LedPanel(\"yellow\"), LedPanel(\"red\"))  # doctest: +ELLIPSIS\nTrafficLightMachine...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Self Transition\nDESCRIPTION: Example of creating a self transition where a state transitions to itself. This includes exiting and re-entering the same state.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndraft = State(\"Draft\")\n\ndraft.to.itself()\nTransitionList([Transition(State('Draft', ...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating StateMachine Integrity Checking at Definition Time\nDESCRIPTION: Shows how StateMachine now performs integrity checks at class definition time rather than instantiation time. This example demonstrates a definition with two initial states, which will raise an InvalidDefinition exception immediately after the class is defined.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/1.0.1.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith pytest.raises(exceptions.InvalidDefinition):\n\n    class CampaignMachine(StateMachine):\n        \"A workflow machine\"\n        draft = State(\"Draft\", initial=True)\n        producing = State(\"Being produced\")\n        closed = State(\n            \"Closed\", initial=True\n        )  # Should raise an Exception right after the class is defined\n\n        add_job = draft.to(draft) | producing.to(producing)\n        produce = draft.to(producing)\n        deliver = producing.to(closed)\n```\n\n----------------------------------------\n\nTITLE: Creating a StateMachine using Enum-based States in Python\nDESCRIPTION: Example demonstrating how to create a StateMachine class that uses an Enum for state definitions. The machine includes a transition method 'finish' and a callback method that runs when entering the 'completed' state.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.1.0.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine\n>>> from statemachine.states import States\n\n>>> class ApprovalMachine(StateMachine):\n...\n...     _ = States.from_enum(Status, initial=Status.pending, final=Status.completed)\n...\n...     finish = _.pending.to(_.completed)\n...\n...     def on_enter_completed(self):\n...         print(\"Completed!\")\n```\n\n----------------------------------------\n\nTITLE: Ensuring Paths to Final States in Python StateMachine\nDESCRIPTION: Example demonstrating how strict_states=True enforces that all non-final states have a path to reach at least one final state, preventing states that can never complete the workflow.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/states.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> class CampaignMachine(StateMachine, strict_states=True):\n...     \"A workflow machine\"\n...     draft = State('Draft', initial=True, value=1)\n...     producing = State('Being produced', value=2)\n...     abandoned = State('Abandoned', value=3)\n...     closed = State('Closed', final=True, value=4)\n...\n...     add_job = draft.to.itself() | producing.to.itself()\n...     produce = draft.to(producing)\n...     abandon = producing.to(abandoned) | abandoned.to(abandoned)\n...     deliver = producing.to(closed)\nTraceback (most recent call last):\n...\nInvalidDefinition: All non-final states should have at least one path to a final state. These states have no path to a final state: ['abandoned']\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Bounded Transitions in Python StateMachine\nDESCRIPTION: This example demonstrates how parameters sent with an event trigger are propagated to transition handlers. The CampaignMachine class shows how an 'approver' parameter is passed to the on_enter_producing method.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/0.9.0.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class CampaignMachine(StateMachine):\n...     draft = State(\"Draft\", initial=True)\n...     producing = State(\"Being produced\")\n...\n...     produce = draft.to(producing) | producing.to(producing)\n...\n...     def on_enter_producing(self, approver=None):\n...         print(f\"Approved by: {approver}\")\n\n>>> sm = CampaignMachine()\n\n>>> sm.produce(approver=\"Aragorn\")  # imperative\nApproved by: Aragorn\n```\n\n----------------------------------------\n\nTITLE: Using StateMachine Instance with MachineMixin\nDESCRIPTION: Demonstrates usage of the MachineMixin implementation, showing state transitions and accessing the state machine instance through the model\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/mixins.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmodel = Workflow()\n\nisinstance(model.sm, CampaignMachineWithKeys)\nTrue\n\nmodel.workflow_step\n1\n\nmodel.sm.current_state == model.sm.draft\nTrue\n\nmodel.produce()  # `bind_events_as_methods = True` adds triggers to events in the mixin instance\nmodel.workflow_step\n2\n\nmodel.sm.cancel()  # You can still call the SM directly\n\nmodel.workflow_step\n4\n\nmodel.sm.current_state == model.sm.cancelled\nTrue\n```\n\n----------------------------------------\n\nTITLE: Binding State Actions using Decorator Syntax\nDESCRIPTION: Shows how to use Python decorators to bind methods as state enter and exit actions using the state.enter and state.exit decorators.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ExampleStateMachine(StateMachine):\n...     initial = State(initial=True)\n...\n...     loop = initial.to.itself()\n...\n...     @initial.enter\n...     def entering_initial(self):\n...         pass\n...\n...     @initial.exit\n...     def leaving_initial(self):\n...         pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Condition Expressions in Python StateMachine\nDESCRIPTION: Demonstrates the use of Boolean algebra in transition conditions for a StateMachine. The example shows how to define a state machine with conditions using 'or' operators.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.4.0.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State, Event\n\n>>> class AnyConditionSM(StateMachine):\n...     start = State(initial=True)\n...     end = State(final=True)\n...\n...     submit = Event(\n...         start.to(end, cond=\"used_money or used_credit\"),\n...         name=\"finish order\",\n...     )\n...\n...     used_money: bool = False\n...     used_credit: bool = False\n\n>>> sm = AnyConditionSM()\n>>> sm.submit()\nTraceback (most recent call last):\nTransitionNotAllowed: Can't finish order when in Start.\n\n>>> sm.used_credit = True\n>>> sm.submit()\n>>> sm.current_state.id\n'end'\n```\n\n----------------------------------------\n\nTITLE: Getting allowed events in a StateMachine instance\nDESCRIPTION: Shows how to retrieve a list of allowed events for the current state of a state machine instance.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.5.0.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> sm = AccountStateMachine()\n>>> [str(e) for e in sm.allowed_events]\n['suspend', 'overdraft', 'close_account']\n```\n\n----------------------------------------\n\nTITLE: Creating a State Machine Example in Python\nDESCRIPTION: Example of defining a ServerConnection state machine class with states (disconnected, connecting, connected), transitions, and event handlers. This example is used to demonstrate different processing models.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/processing_model.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom statemachine import StateMachine, State\n\nclass ServerConnection(StateMachine):\n    disconnected = State(initial=True)\n    connecting = State()\n    connected = State(final=True)\n\n    connect = disconnected.to(connecting, after=\"connection_succeed\")\n    connection_succeed = connecting.to(connected)\n\n    def on_connect(self):\n        return \"on_connect\"\n\n    def on_enter_state(self, event: str, state: State, source: State):\n        print(f\"enter '{state.id}' from '{source.id if source else ''}' given '{event}'\")\n\n    def on_exit_state(self, event: str, state: State, target: State):\n        print(f\"exit '{state.id}' to '{target.id}' given '{event}'\")\n\n    def on_transition(self, event: str, source: State, target: State):\n        print(f\"on '{event}' from '{source.id}' to '{target.id}'\")\n        return \"on_transition\"\n\n    def after_transition(self, event: str, source: State, target: State):\n        print(f\"after '{event}' from '{source.id}' to '{target.id}'\")\n        return \"after_transition\"\n```\n\n----------------------------------------\n\nTITLE: Using comparison operators in condition expressions\nDESCRIPTION: Shows how to use the newly supported comparison operators (>, >=, ==, !=, <, <=) in condition expressions for state transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.5.0.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State, Event\n\n>>> class AnyConditionSM(StateMachine):\n...     start = State(initial=True)\n...     end = State(final=True)\n...\n...     submit = Event(\n...         start.to(end, cond=\"order_value > 100\"),\n...         name=\"finish order\",\n...     )\n...\n...     order_value: float = 0\n\n>>> sm = AnyConditionSM()\n>>> sm.submit()\nTraceback (most recent call last):\nTransitionNotAllowed: Can't finish order when in Start.\n\n>>> sm.order_value = 135.0\n>>> sm.submit()\n>>> sm.current_state.id\n'end'\n```\n\n----------------------------------------\n\nTITLE: Creating Explicit Events in Python StateMachine\nDESCRIPTION: Shows how to explicitly declare events using the Event class in StateMachine. This allows for custom naming and better IDE support for callable events.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.4.0.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State, Event\n\n>>> class StartMachine(StateMachine):\n...     created = State(initial=True)\n...     started = State(final=True)\n...\n...     start = Event(created.to(started), name=\"Launch the machine\")\n...\n>>> [e.id for e in StartMachine.events]\n['start']\n>>> [e.name for e in StartMachine.events]\n['Launch the machine']\n>>> StartMachine.start.name\n'Launch the machine'\n```\n\n----------------------------------------\n\nTITLE: Creating a LED Panel Listener for Traffic Light States\nDESCRIPTION: Shows how to create a LedPanel listener class that reacts to state changes by turning on and off based on the current state. The listener uses on_enter_state and on_exit_state callbacks to handle state transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/listeners.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> class LedPanel:\n...     def __init__(self, color: str):\n...         self.color = color\n...\n...     def on_enter_state(self, target: State):\n...         if target.id == self.color:\n...             print(f\"{self.color} turning on\")\n...\n...     def on_exit_state(self, source: State):\n...         if source.id == self.color:\n...             print(f\"{self.color} turning off\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Optional State Names in Python StateMachine\nDESCRIPTION: Example showing how state names are now automatically derived from class variables in StateMachine 2.0.0, eliminating the need to explicitly declare names unless they differ from what would be derived from the state ID.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ApprovalMachine(StateMachine):\n...     pending = State(initial=True)\n...     waiting_approval = State()\n...     approved = State(final=True)\n...\n...     start = pending.to(waiting_approval)\n...     approve = waiting_approval.to(approved)\n...\n\n>>> ApprovalMachine.pending.name\n'Pending'\n\n>>> ApprovalMachine.waiting_approval.name\n'Waiting approval'\n\n>>> ApprovalMachine.approved.name\n'Approved'\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Transitions in Python StateMachine\nDESCRIPTION: Example of creating an internal transition that doesn't trigger entry or exit actions when transitioning to the same state, using the 'internal=True' parameter.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class TestStateMachine(StateMachine):\n...     initial = State(initial=True)\n...\n...     loop = initial.to.itself(internal=True)\n```\n\n----------------------------------------\n\nTITLE: Directly Assigning Actions to Transitions in StateMachine\nDESCRIPTION: Example showing how to directly assign actions to transitions when events aren't called externally, which simplifies the code and makes the relationship between transitions and actions more explicit.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import State\n>>> from statemachine import StateMachine\n\n>>> class TrafficLightMachine(StateMachine):\n...     \"A traffic light machine\"\n...     green = State(initial=True)\n...     yellow = State()\n...     red = State()\n...\n...     cycle = (\n...         green.to(yellow, before=\"slowdown\")\n...         | yellow.to(red, before=\"stop\")\n...         | red.to(green, before=\"go\")\n...     )\n...\n...     def slowdown(self):\n...         print(\"Slowdown\")\n...\n...     def stop(self):\n...         print(\"Stop\")\n...\n...     def go(self):\n...         print(\"Go\")\n...\n...     def before_cycle(self, event: str, source: State, target: State):\n...         print(f\"Running {event} from {source.id} to {target.id}\")\n```\n\n----------------------------------------\n\nTITLE: Default Model Implementation for Python StateMachine\nDESCRIPTION: This snippet shows the default Model implementation that is used by StateMachine when no explicit model instance is provided. This simple model serves as the base class for state persistence when a custom domain object is not supplied.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/models.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{literalinclude} ../statemachine/model.py\n:language: python\n:linenos:\n```\n\n----------------------------------------\n\nTITLE: Binding Transition Actions Using Params in StateMachine\nDESCRIPTION: Example demonstrating how to bind actions to transitions using parameters, which helps maintain backward compatibility with pre-2.0 behavior where transitions with multiple events would execute all associated actions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import State\n>>> from statemachine import StateMachine\n\n>>> class TrafficLightMachine(StateMachine):\n...     \"A traffic light machine\"\n...     green = State(initial=True)\n...     yellow = State()\n...     red = State()\n...\n...     slowdown = green.to(yellow, before=\"do_before_slowdown\")  # assign to the transition\n...     stop = yellow.to(red)\n...     go = red.to(green)\n...\n...     cycle = slowdown | stop | go\n...\n...     def do_before_slowdown(self):\n...         print(\"Slowdown\")\n...\n...     @stop.before    # assign to the transition\n...     def do_before_stop(self):\n...         print(\"Stop\")\n...\n...     def before_cycle(self, event: str, source: State, target: State):\n...         print(f\"Running {event} from {source.id} to {target.id}\")\n```\n\n----------------------------------------\n\nTITLE: StateMachine 1.0 Implementation of Conditional Transitions\nDESCRIPTION: Demonstrates how to implement multiple target states using the new conditions/guards system. This approach replaces the legacy method of returning states from event handlers, providing a more declarative way to define state transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/1.0.1.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ApprovalMachine(StateMachine):\n    \"A workflow machine\"\n    requested = State(\"Requested\", initial=True)\n    accepted = State(\"Accepted\")\n    rejected = State(\"Rejected\")\n\n    validate = requested.to(accepted, conditions=\"is_ok\") | requested.to(rejected)\n\n    def on_validate(self, current_time):\n        self.model.accepted_at = current_time\n```\n\n----------------------------------------\n\nTITLE: Generating Diagram with Current State Highlighted\nDESCRIPTION: Example showing how to generate a diagram that highlights the current state of a running state machine instance.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/diagram.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> # This example will only run on automated tests if dot is present\n>>> getfixture(\"requires_dot_installed\")\n\n>>> from statemachine.contrib.diagram import DotGraphMachine\n\n>>> from tests.examples.order_control_machine import OrderControl\n\n>>> machine = OrderControl()\n\n>>> graph = DotGraphMachine(machine)  # also accepts instances\n\n>>> machine.receive_payment(10)\n[10]\n\n>>> graph().write_png(\"docs/images/order_control_machine_processing.png\")\n```\n\n----------------------------------------\n\nTITLE: Using StateMachine with Multiple Observers in Python\nDESCRIPTION: This snippet demonstrates how to create a Car instance, add multiple observers, and trigger a state transition. It shows that duplicate observer callbacks are not registered and all observers are notified when the state changes.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/tests/testcases/issue384_multiple_observers.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> car = Car()\n>>> obs = MyObs()\n>>> obs2 = MyObs2()\n>>> car.add_listener(obs)\nCar(model=Model(state=stopped), state_field='state', current_state='stopped')\n\n>>> car.add_listener(obs2)\nCar(model=Model(state=stopped), state_field='state', current_state='stopped')\n\n>>> car.add_listener(obs2)  # test to not register duplicated observer callbacks\nCar(model=Model(state=stopped), state_field='state', current_state='stopped')\n\n>>> car.move_car()\nI'm moving\nI observed moving from 1\nI observed moving from 2\n[None, None, None]\n```\n\n----------------------------------------\n\nTITLE: Declaring Explicit Events in a State Machine\nDESCRIPTION: Example of explicitly declaring an Event instance with a custom name, which helps IDEs recognize callable events and supports translation strings.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom statemachine import Event\n\nclass SimpleSM(StateMachine):\n    initial = State(initial=True)\n    final = State()\n\n    start = Event(\n        initial.to(final),\n        name=\"Start the state machine\"  # optional name, if not provided it will be derived from id\n    )\n\nSimpleSM.start.name\n'Start the state machine'\n\nsm = SimpleSM()\nsm.start()  # call `start` event\n```\n\n----------------------------------------\n\nTITLE: Migrating from Statemachine.is_<state> to StateMachine.<state>.is_active in Python\nDESCRIPTION: Shows how to check if a state is active in python-statemachine. The old method using `is_green` property has been replaced with the new `green.is_active` property in version 2.0.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom tests.examples.traffic_light_machine import TrafficLightMachine\n\nsm = TrafficLightMachine()\nassert sm.is_green\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from tests.examples.traffic_light_machine import TrafficLightMachine\n\n>>> sm = TrafficLightMachine()\n>>> assert sm.green.is_active\n```\n\n----------------------------------------\n\nTITLE: Defining StateMachine and Observers in Python\nDESCRIPTION: This snippet defines a Car class inheriting from StateMachine, along with two observer classes (MyObs and MyObs2). It demonstrates the structure of a StateMachine with states, transitions, and callbacks.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/tests/testcases/issue384_multiple_observers.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import State\n>>> from statemachine import StateMachine\n\n>>> class MyObs:\n...     def on_move_car(self):\n...         print(\"I observed moving from 1\")\n\n>>> class MyObs2:\n...     def on_move_car(self):\n...         print(\"I observed moving from 2\")\n...\n\n\n>>> class Car(StateMachine):\n...     stopped = State(initial=True)\n...     moving = State()\n...\n...     move_car = stopped.to(moving)\n...     stop_car = moving.to(stopped)\n...\n...     def on_move_car(self):\n...         print(\"I'm moving\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Final State Detection in Python StateMachine\nDESCRIPTION: This snippet illustrates how the StateMachine class now checks for non-final states without outgoing transitions, raising an InvalidDefinition exception when strict_states=True is set.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.2.0.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class TrafficLightMachine(StateMachine, strict_states=True):\n...     \"A workflow machine\"\n...     red = State('Red', initial=True, value=1)\n...     green = State('Green', value=2)\n...     orange = State('Orange', value=3)\n...     hazard = State('Hazard', value=4)\n...\n...     cycle = red.to(green) | green.to(orange) | orange.to(red)\n...     fault = red.to(hazard) | green.to(hazard) | orange.to(hazard)\nTraceback (most recent call last):\n...\nInvalidDefinition: All non-final states should have at least one outgoing transition. These states have no outgoing transition: ['hazard']\n```\n\n----------------------------------------\n\nTITLE: Migrating from State.identification to State.id in Python\nDESCRIPTION: Demonstrates the change in accessing a state's identifier in python-statemachine. The deprecated `identification` property has been replaced with the shorter `id` property in version 2.0.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom tests.examples.traffic_light_machine import TrafficLightMachine\n\nsm = TrafficLightMachine()\nassert sm.current_state.identification == \"green\"\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from tests.examples.traffic_light_machine import TrafficLightMachine\n\n>>> sm = TrafficLightMachine()\n>>> assert sm.current_state.id == \"green\"\n```\n\n----------------------------------------\n\nTITLE: Explicit Initial State Activation\nDESCRIPTION: Shows proper initialization of async state machine by explicitly activating the initial state.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/async.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> async def initialize_sm():\n...     sm = AsyncStateMachine()\n...     await sm.activate_initial_state()\n...     print(sm.current_state)\n\n>>> asyncio.run(initialize_sm())\nInitial\n```\n\n----------------------------------------\n\nTITLE: Detecting Unreachable States in Python StateMachine\nDESCRIPTION: Example showing how the StateMachine validates that all states are reachable from the initial state. If any states are disconnected from the initial state, an InvalidDefinition exception is thrown.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/states.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class TrafficLightMachine(StateMachine):\n...     \"A workflow machine\"\n...     red = State('Red', initial=True, value=1)\n...     green = State('Green', value=2)\n...     orange = State('Orange', value=3)\n...     hazard = State('Hazard', value=4)\n...\n...     cycle = red.to(green) | green.to(orange) | orange.to(red)\n...     blink = hazard.to.itself()\nTraceback (most recent call last):\n...\nInvalidDefinition: There are unreachable states. The statemachine graph should have a single component. Disconnected states: ['hazard']\n```\n\n----------------------------------------\n\nTITLE: Generating Diagrams from Command Line\nDESCRIPTION: Examples of using the command-line interface to generate state machine diagrams without writing Python code.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/diagram.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n❯ python -m statemachine.contrib.diagram --help\nusage: diagram.py [OPTION] <classpath> <out>\n\nGenerate diagrams for StateMachine classes.\n\npositional arguments:\n  classpath   A fully-qualified dotted path to the StateMachine class.\n  out         File to generate the image using extension as the output format.\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m statemachine.contrib.diagram tests.examples.traffic_light_machine.TrafficLightMachine m.png\n```\n\n----------------------------------------\n\nTITLE: Executing Async Callbacks in Sync Context\nDESCRIPTION: Shows how to use async callbacks in a synchronous codebase, where the state machine creates its own event loop if needed.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/async.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> sm = AsyncStateMachine()\n>>> result = sm.advance()\n>>> print(f\"Result is {result}\")\nResult is 42\n>>> print(sm.current_state)\nFinal\n```\n\n----------------------------------------\n\nTITLE: Handling Final States in Python StateMachine\nDESCRIPTION: Example showing that transitions from final states are not allowed. The StateMachine will validate this and raise an InvalidDefinition exception if transitions are declared from final states.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/states.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class CampaignMachine(StateMachine):\n...     \"A workflow machine\"\n...     draft = State('Draft', initial=True, value=1)\n...     producing = State('Being produced', value=2)\n...     closed = State('Closed', final=True, value=3)\n...\n...     add_job = draft.to.itself() | producing.to.itself() | closed.to(producing)\n...     produce = draft.to(producing)\n...     deliver = producing.to(closed)\nTraceback (most recent call last):\n...\nInvalidDefinition: Cannot declare transitions from final state. Invalid state(s): ['closed']\n```\n\n----------------------------------------\n\nTITLE: Exporting State Machine Diagram to PNG\nDESCRIPTION: Demonstrates how to save a generated state machine diagram as a PNG image file from the dot graph instance.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/diagram.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> dot.write_png(\"docs/images/order_control_machine_initial.png\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Listener Reactions to State Machine Transitions\nDESCRIPTION: Shows how multiple listeners react to state changes when cycling through traffic light states. LED panels turn on and off automatically while the log listener continues to track transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/listeners.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> sm.cycle()\nRunning cycle from yellow to red\nyellow turning off\nPaulista Avenue enter: red from cycle\nred turning on\nPaulista Avenue after: yellow--(cycle)-->red\n\n>>> sm.cycle()\nRunning cycle from red to green\nred turning off\nPaulista Avenue enter: green from cycle\ngreen turning on\nPaulista Avenue after: red--(cycle)-->green\n```\n\n----------------------------------------\n\nTITLE: Querying Final States in Python StateMachine\nDESCRIPTION: Example showing how to query a list of all final states from a state machine and check if the current state is a final state.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/states.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> class CampaignMachine(StateMachine):\n...     \"A workflow machine\"\n...     draft = State('Draft', initial=True, value=1)\n...     producing = State('Being produced', value=2)\n...     closed = State('Closed', final=True, value=3)\n...\n...     add_job = draft.to.itself() | producing.to.itself()\n...     produce = draft.to(producing)\n...     deliver = producing.to(closed)\n\n>>> machine = CampaignMachine()\n\n>>> machine.final_states\n[State('Closed', id='closed', value=3, initial=False, final=True)]\n\n>>> machine.current_state in machine.final_states\nFalse\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unreachable State Detection in Python StateMachine\nDESCRIPTION: This snippet shows how the StateMachine class now detects and raises an InvalidDefinition exception for unreachable states in the state machine definition.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.2.0.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class TrafficLightMachine(StateMachine):\n...     \"A workflow machine\"\n...     red = State('Red', initial=True, value=1)\n...     green = State('Green', value=2)\n...     orange = State('Orange', value=3)\n...     hazard = State('Hazard', value=4)\n...\n...     cycle = red.to(green) | green.to(orange) | orange.to(red)\n...     blink = hazard.to.itself()\nTraceback (most recent call last):\n...\nInvalidDefinition: There are unreachable states. The statemachine graph should have a single component. Disconnected states: ['hazard']\n```\n\n----------------------------------------\n\nTITLE: Declaring Final States in Python StateMachine\nDESCRIPTION: This example shows how to declare final states in a state machine. When a state is marked as final, the machine prevents any transitions from being defined from that state. The example demonstrates the error raised when attempting to declare a transition from a final state.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/0.9.0.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ApprovalMachine(StateMachine):\n...     \"\"\"A workflow machine\"\"\"\n...     requested = State(\"Requested\", initial=True)\n...     accepted = State(\"Accepted\")\n...     rejected = State(\"Rejected\")\n...     completed = State(\"Completed\", final=True)\n...\n...     validate = requested.to(accepted, cond=\"is_ok\") | requested.to(rejected)\n...     release = accepted.to(completed)\n...     reopen = completed.to(requested)\nTraceback (most recent call last):\n...\nInvalidDefinition: Cannot declare transitions from final state. Invalid state(s): ['completed']\n```\n\n----------------------------------------\n\nTITLE: Using decorator callbacks with explicit event creation\nDESCRIPTION: Demonstrates how to add callbacks using the decorator syntax with explicit Event objects, allowing for method invocation when events are triggered.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.5.0.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State, Event\n\n>>> class StartMachine(StateMachine):\n...     created = State(initial=True)\n...     started = State(final=True)\n...\n...     start = Event(created.to(started), name=\"Launch the machine\")\n...\n...     @start.on\n...     def call_service(self):\n...         return \"calling...\"\n...\n\n>>> sm = StartMachine()\n>>> sm.start()\n'calling...'\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum for State Declarations in Python StateMachine\nDESCRIPTION: Example showing how to define an Enum class that declares the expected states for a state machine. The Enum includes 'pending' and 'completed' states with numeric values.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.1.0.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from enum import Enum\n\n>>> class Status(Enum):\n...     pending = 1\n...     completed = 2\n```\n\n----------------------------------------\n\nTITLE: Triggering Cycle Events in a Traffic Light StateMachine\nDESCRIPTION: Example showing how to trigger the cycle event in a traffic light state machine with the new send method, demonstrating how actions associated with transitions are executed.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> sm = TrafficLightMachine()\n>>> [sm.send(\"cycle\") for _ in range(3)]\nSlowdown\nRunning cycle from green to yellow\nStop\nRunning cycle from yellow to red\nGo\nRunning cycle from red to green\n[[None, None], [None, None], [None, None]]\n```\n\n----------------------------------------\n\nTITLE: Declaring Simple Events in a State Machine\nDESCRIPTION: Basic example of declaring an event by assigning a transition list to a name at the state machine class level.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom statemachine import Event\n\nclass SimpleSM(StateMachine):\n    initial = State(initial=True)\n    final = State()\n\n    start = initial.to(final)  # start is a name that will be converted to an `Event`\n\nisinstance(SimpleSM.start, Event)\nTrue\nsm = SimpleSM()\nsm.start()  # call `start` event\n```\n\n----------------------------------------\n\nTITLE: Defining ExampleStateMachine Class in Python\nDESCRIPTION: This snippet defines the ExampleStateMachine class, which inherits from StateMachine. It sets up states, transitions, and implements an on_enter_state method to handle state changes and trigger subsequent transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/tests/testcases/issue449.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine import StateMachine, State\n\n>>> class ExampleStateMachine(StateMachine):\n...     initial = State(initial=True)\n...     second = State()\n...     third = State()\n...     fourth = State()\n...     final = State(final=True)\n...\n...     initial_to_second = initial.to(second)\n...     second_to_third = second.to(third)\n...     third_to_fourth = third.to(fourth)\n...     completion = fourth.to(final)\n...\n...     def on_enter_state(self, target: State, event: str):\n...         print(f\"Entering state {target.id}. Event: {event}\")\n...         if event == \"initial_to_second\":\n...             self.send(\"second_to_third\")\n...         if event == \"second_to_third\":\n...             self.send(\"third_to_fourth\")\n...         if event == \"third_to_fourth\":\n...             print(\"third_to_fourth on on_enter_state worked\")\n```\n\n----------------------------------------\n\nTITLE: Triggering Events using Imperative Syntax in Python State Machine\nDESCRIPTION: Demonstrates how to trigger a state machine event using imperative method call syntax. The example shows transitioning a traffic light from green to yellow using the cycle() method.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> machine = TrafficLightMachine()\n\n>>> machine.cycle()\n'Running Loop from green to yellow'\n\n>>> machine.current_state.id\n'yellow'\n\n```\n\n----------------------------------------\n\nTITLE: Triggering Events using Event-Oriented Style in Python State Machine\nDESCRIPTION: Shows how to trigger a state machine event using the event-oriented style with the send() method. The example demonstrates transitioning from yellow to red state by sending the \"cycle\" event.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> machine.send(\"cycle\")\n'Running Loop from yellow to red'\n\n>>> machine.current_state.id\n'red'\n\n```\n\n----------------------------------------\n\nTITLE: Installing Python State Machine using pip\nDESCRIPTION: Instructions for installing the python-statemachine package using the traditional pip package manager.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/installation.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install python-statemachine\n```\n\n----------------------------------------\n\nTITLE: Using send() Instead of run() in StateMachine 2.0\nDESCRIPTION: Example showing the migration from the deprecated run() method to the new send() method for triggering events in the StateMachine.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from tests.examples.traffic_light_machine import TrafficLightMachine\n\n>>> sm = TrafficLightMachine()\n>>> sm.send(\"cycle\")\nRunning cycle from green to yellow\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Dispatch Callbacks in Python StateMachine\nDESCRIPTION: Shows the method signature for action or guard methods using the dynamic dispatch system. This approach allows callbacks to access various contextual parameters like event data, source state, and model information through argument matching.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/1.0.1.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef action_or_guard_method_name(self, *args, event_data, event, source, state, model, **kwargs):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using an Event-Oriented Approach with Decorated Events\nDESCRIPTION: Shows how to use a decorated event method by sending an event name to the state machine, demonstrating that the decorated method becomes an event trigger rather than a regular method.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/actions.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> sm = ExampleStateMachine()\n\n>>> sm.send(\"loop\")\nOn loop\n42\n```\n\n----------------------------------------\n\nTITLE: Documenting State Class with Autodoc\nDESCRIPTION: reStructuredText directive to generate API documentation for the State class using autodoc, including all members.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: statemachine.state.State\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Running State Machine Until Max Cycle Count\nDESCRIPTION: Demonstrates running the state machine in a loop until it reaches a final state. In this example, the data value remains low, causing the machine to reach its maximum cycle count and transition to the 'data_bad' state.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/tests/testcases/issue434.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\"value\": 1}\n>>> sm1 = DataCheckerMachine(Model(data))\n>>> cycle_rate = 0.1\n>>> while not sm1.current_state.final:\n...     sm1.cycle()\n...     sleep(cycle_rate)\nRunning cycle 0 from Check data to Check data.\nRunning cycle 1 from Check data to Check data.\nRunning cycle 2 from Check data to Check data.\nRunning cycle 3 from Check data to Check data.\nRunning cycle 4 from Check data to Check data.\nRunning cycle 5 from Check data to Check data.\nRunning cycle 6 from Check data to Check data.\nRunning cycle 7 from Check data to Check data.\nRunning cycle 8 from Check data to Check data.\nRunning cycle 9 from Check data to Check data.\nRunning cycle 10 from Check data to Check data.\nRunning cycle 11 from Check data to Data bad.\n```\n\n----------------------------------------\n\nTITLE: Documenting Model Class with Autodoc\nDESCRIPTION: reStructuredText directive to generate API documentation for the Model class using autodoc, including all members.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_8\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: statemachine.model.Model\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Running State Machine with Dynamic Data Changes\nDESCRIPTION: Shows how the state machine responds to changes in the model data during execution. When the data value is increased above the threshold during the 5th cycle, the machine transitions to the 'data_good' state instead of continuing to the max cycle count.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/tests/testcases/issue434.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {\"value\": 1}\n>>> sm2 = DataCheckerMachine(Model(data))\n>>> cycle_rate = 0.1\n>>> while not sm2.current_state.final:\n...     sm2.cycle()\n...     if sm2.cycle_count == 5:\n...         print(\"Now data looks good!\")\n...         data[\"value\"] = 20\n...     sleep(cycle_rate)\nRunning cycle 0 from Check data to Check data.\nRunning cycle 1 from Check data to Check data.\nRunning cycle 2 from Check data to Check data.\nRunning cycle 3 from Check data to Check data.\nRunning cycle 4 from Check data to Check data.\nNow data looks good!\nRunning cycle 5 from Check data to Data good.\n```\n\n----------------------------------------\n\nTITLE: Highlighting State Feature in Markdown\nDESCRIPTION: Code snippet showing the State class can now hold a value that will be assigned to the model as the state value. This appears to be a feature highlight in the release notes.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/0.2.0.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n``State`` can hold a value that will be assigned to the model as the state value.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating State Machine Transitions in Python\nDESCRIPTION: This code snippet demonstrates the usage of the TestSM class. It creates an instance of TestSM and shows the state transitions using the cycle method. The snippet illustrates how the state machine progresses through its states and how the various callbacks are triggered during transitions.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/tests/testcases/issue308.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nm = TestSM()\nenter state1\n\nm.state1.is_active, m.state2.is_active, m.state3.is_active, m.state4.is_active, m.current_state ; _ = m.cycle()\n(True, False, False, False, State('s1', id='state1', value='state1', initial=True, final=False))\nbefore cycle\nexit state1\non cycle\nenter state2\nafter cycle\n\nm.state1.is_active, m.state2.is_active, m.state3.is_active, m.state4.is_active, m.current_state ; _ = m.cycle()\n(False, True, False, False, State('s2', id='state2', value='state2', initial=False, final=False))\nbefore cycle\nexit state2\non cycle\nenter state3\nafter cycle\n\nm.state1.is_active, m.state2.is_active, m.state3.is_active, m.state4.is_active, m.current_state ; _ = m.cycle()\n(False, False, True, False, State('s3', id='state3', value='state3', initial=False, final=False))\nbefore cycle\nexit state3\non cycle\nenter state4\nafter cycle\n\nm.state1.is_active, m.state2.is_active, m.state3.is_active, m.state4.is_active, m.current_state\n(False, False, False, True, State('s4', id='state4', value='state4', initial=False, final=True))\n```\n\n----------------------------------------\n\nTITLE: State Reference Link\nDESCRIPTION: A reStructuredText seealso directive that references the States documentation section.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{ref}`States` reference.\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Async Initial State\nDESCRIPTION: Demonstrates the error that occurs when checking current state before activating initial state in async context.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/async.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> async def initialize_sm():\n...     sm = AsyncStateMachine()\n...     print(sm.current_state)\n\n>>> asyncio.run(initialize_sm())\nTraceback (most recent call last):\n...\nInvalidStateValue: There's no current state set. In async code, did you activate the initial state? (e.g., `await sm.activate_initial_state()`)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-RTC Model Execution with the ServerConnection State Machine\nDESCRIPTION: Example showing the output when running ServerConnection with the non-RTC (deprecated) model, where nested events are processed immediately, potentially leading to complex behavior.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/processing_model.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsm = ServerConnection(rtc=False)\nenter 'disconnected' from '' given '__initial__'\n\nsm.send(\"connect\")\nexit 'disconnected' to 'connecting' given 'connect'\non 'connect' from 'disconnected' to 'connecting'\nenter 'connecting' from 'disconnected' given 'connect'\nexit 'connecting' to 'connected' given 'connection_succeed'\non 'connection_succeed' from 'connecting' to 'connected'\nenter 'connected' from 'connecting' given 'connection_succeed'\nafter 'connection_succeed' from 'connecting' to 'connected'\nafter 'connect' from 'disconnected' to 'connecting'\n['on_transition', 'on_connect']\n```\n\n----------------------------------------\n\nTITLE: Implicit Initial State Activation\nDESCRIPTION: Demonstrates automatic initial state activation through the first event trigger in async context.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/async.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> async def initialize_sm():\n...     sm = AsyncStateMachine()\n...     await sm.keep()  # first event activates the initial state before the event is handled\n...     print(sm.current_state)\n\n>>> asyncio.run(initialize_sm())\nInitial\n```\n\n----------------------------------------\n\nTITLE: Using allowed_events Instead of allowed_transitions in StateMachine 2.0\nDESCRIPTION: Example showing the migration from the deprecated allowed_transitions property to the new allowed_events property to retrieve available transitions in the current state.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.0.0.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from tests.examples.traffic_light_machine import TrafficLightMachine\n\n>>> sm = TrafficLightMachine()\n>>> assert [t.name for t in sm.allowed_events] == [\"cycle\"]\n```\n\n----------------------------------------\n\nTITLE: Generating a State Machine Diagram at Runtime\nDESCRIPTION: Code example showing how to generate a diagram from a StateMachine class at runtime using DotGraphMachine and converting it to a string representation.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/diagram.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from statemachine.contrib.diagram import DotGraphMachine\n\n>>> from tests.examples.order_control_machine import OrderControl\n\n>>> graph = DotGraphMachine(OrderControl)  # also accepts instances\n\n>>> dot = graph()\n\n>>> dot.to_string()  # doctest: +ELLIPSIS\n'digraph list {...\n```\n\n----------------------------------------\n\nTITLE: See Also Reference to States from Enum Types Documentation\nDESCRIPTION: A reStructuredText directive that points users to more detailed documentation about using States with Enum types, which is relevant to the deprecation notice.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/2.3.3.md#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{seealso}\nSee {ref}`States from Enum types` for more details.\n```\n```\n\n----------------------------------------\n\nTITLE: Importing State Machine Classes\nDESCRIPTION: Basic imports needed for working with the python-statemachine library, including the core StateMachine and State classes.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/transitions.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom statemachine import StateMachine, State\n\nfrom tests.examples.traffic_light_machine import TrafficLightMachine\n```\n\n----------------------------------------\n\nTITLE: Cloning the Python State Machine repository\nDESCRIPTION: Instructions for cloning the public GitHub repository for Python State Machine.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/installation.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git://github.com/fgmacedo/python-statemachine\n```\n\n----------------------------------------\n\nTITLE: Documenting States Class with Autodoc\nDESCRIPTION: reStructuredText directive to generate API documentation for the States class using autodoc, including all members and with noindex option.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: statemachine.states.States\n    :noindex:\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Setting Custom DPI for State Machine Diagrams\nDESCRIPTION: Shows how to customize the resolution of a diagram by setting a higher DPI value before exporting to PNG.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/diagram.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> dot.set_dpi(300)\n\n>>> dot.write_png(\"docs/images/order_control_machine_initial_300dpi.png\")\n```\n\n----------------------------------------\n\nTITLE: Transition Reference Link\nDESCRIPTION: A reStructuredText seealso directive that references the Transitions documentation section.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{ref}`Transitions` reference.\n```\n\n----------------------------------------\n\nTITLE: Quick Shortcut for Obtaining Graph Representation\nDESCRIPTION: A convenient shorthand method to directly access the graph representation of a state machine instance.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/diagram.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> machine._graph()\n<pydot.core.Dot ...\n```\n\n----------------------------------------\n\nTITLE: Documenting TransitionList Class with Autodoc\nDESCRIPTION: reStructuredText directive to generate API documentation for the TransitionList class using autodoc, including all members.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_6\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: statemachine.transition_list.TransitionList\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Extracting Portable Object Template for Translations in Python-Statemachine\nDESCRIPTION: Command to extract translatable strings from the statemachine package into a POT file, which serves as a template for translations. This is the first step in adding a new language to the project.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npybabel extract statemachine -o statemachine/locale/statemachine.pot\n```\n\n----------------------------------------\n\nTITLE: Documenting TriggerData Class with Autodoc\nDESCRIPTION: reStructuredText directive to generate API documentation for the TriggerData class using autodoc, including all members.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_9\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: statemachine.event_data.TriggerData\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Compiling Translation Files in Python-Statemachine\nDESCRIPTION: Command to compile translated .po files into binary .mo files that can be used by the application. This step is necessary after translating the strings to make them available in the application.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npybabel compile -d statemachine/locale/ -D statemachine\n```\n\n----------------------------------------\n\nTITLE: Documenting Event Class with Autodoc\nDESCRIPTION: reStructuredText directive to generate API documentation for the Event class using autodoc, specifically documenting id, name, and __call__ members.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_10\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: statemachine.event.Event\n    :members: id, name, __call__\n```\n\n----------------------------------------\n\nTITLE: Testing Translations in Python-Statemachine\nDESCRIPTION: Command to test a translation by running an example script with a specific language environment variable. This example tests the Brazilian Portuguese translation.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nLANGUAGE=pt_BR python tests/examples/guess_the_number_machine.py\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Files for Python-Statemachine\nDESCRIPTION: Command to copy the translation template to a language-specific directory for translation. The example demonstrates creating a Brazilian Portuguese translation file.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp statemachine/locale/statemachine.pot statemachine/locale/pt_BR/LC_MESSAGES/statemachine.po\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Python-Statemachine\nDESCRIPTION: Command to build the project documentation using Sphinx. This generates HTML documentation from the source files, which can be viewed locally.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuv run sphinx-build docs docs/_build/html\n```\n\n----------------------------------------\n\nTITLE: Serving Local Documentation for Python-Statemachine\nDESCRIPTION: Command to serve the locally built documentation using Python's built-in HTTP server. This allows viewing the documentation in a web browser at http://localhost:8000/.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython -m http.server --directory docs/_build/html\n```\n\n----------------------------------------\n\nTITLE: Documentation Table of Contents Structure in Markdown\nDESCRIPTION: Defines the documentation structure using a toctree directive that specifies the hierarchy and organization of the documentation pages.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:maxdepth: 2\n\nreadme\ninstallation\nstates\ntransitions\nactions\nguards\nmodels\nlisteners\nasync\nmixins\nintegrations\ndiagram\nprocessing_model\napi\nauto_examples/index\ncontributing\nauthors\nreleases/index\n\n```\n\n----------------------------------------\n\nTITLE: Cleaning Documentation Build Files in Python-Statemachine\nDESCRIPTION: Command to remove all automatically generated documentation files for a clean build. This is useful when significant changes have been made and a fresh build is needed.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/contributing.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf docs/_build/ docs/auto_examples\n```\n\n----------------------------------------\n\nTITLE: Installing Python State Machine using uv\nDESCRIPTION: Instructions for installing the python-statemachine package using the uv package manager.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/installation.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuv add python-statemachine\n```\n\n----------------------------------------\n\nTITLE: Displaying 2.0 Series Release Notes with Toctree\nDESCRIPTION: A restructuredtext toctree directive that displays the release notes for all 2.0.x versions of python-statemachine, with a maximum depth of 2 levels.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/index.md#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:maxdepth: 2\n\n2.5.0\n2.4.0\n2.3.6\n2.3.5\n2.3.4\n2.3.3\n2.3.2\n2.3.1\n2.3.0\n2.2.0\n2.1.2\n2.1.1\n2.1.0\n2.0.0\n\n```\n```\n\n----------------------------------------\n\nTITLE: Downloading Python State Machine tarball\nDESCRIPTION: Instructions for downloading the Python State Machine source code tarball using curl.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/installation.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl  -OL https://github.com/fgmacedo/python-statemachine/tarball/main\n```\n\n----------------------------------------\n\nTITLE: Installing Python State Machine using poetry\nDESCRIPTION: Instructions for installing the python-statemachine package using the poetry package manager.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/installation.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry add python-statemachine\n```\n\n----------------------------------------\n\nTITLE: Displaying 1.0 Series Release Notes with Toctree\nDESCRIPTION: A restructuredtext toctree directive that displays the release notes for all 1.0.x versions of python-statemachine, with a maximum depth of 2 levels. This series is noted as the last to support Python 2.X.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/index.md#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:maxdepth: 2\n\n1.0.3\n1.0.2\n1.0.1\n1.0.0\n\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Python State Machine from source\nDESCRIPTION: Instructions for installing Python State Machine in development mode from local source code.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/installation.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing Python State Machine with diagram support\nDESCRIPTION: Instructions for installing python-statemachine with pydot dependency for generating diagrams using pip's extras feature.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/installation.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m pip install \"python-statemachine[diagrams]\"\n```\n\n----------------------------------------\n\nTITLE: Pre-1.0 State Transition Implementation (Deprecated)\nDESCRIPTION: Shows the legacy approach for implementing multiple target states from the same origin state. This code example is no longer valid in version 1.0 and demonstrates how conditional transitions were handled before validators and guards were introduced.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/1.0.1.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ApprovalMachine(StateMachine):\n    \"A workflow machine\"\n    requested = State('Requested', initial=True)\n    accepted = State('Accepted')\n    rejected = State('Rejected')\n\n    validate = requested.to(accepted, rejected)\n\n    def on_validate(self, current_time):\n        if self.model.is_ok():\n            self.model.accepted_at = current_time\n            return self.accepted\n        else:\n            return self.rejected\n```\n\n----------------------------------------\n\nTITLE: Listing Changes in StateMachine 0.6.2 using Markdown\nDESCRIPTION: This snippet uses a Markdown bullet point to list the changes made in version 0.6.2 of StateMachine. It indicates that the README file was fixed in this release.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/0.6.2.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- Fix README.\n```\n\n----------------------------------------\n\nTITLE: Documenting StateMachine Class with Autodoc\nDESCRIPTION: reStructuredText directive to generate API documentation for the StateMachine class using autodoc, including all members and undocumented members.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: statemachine.statemachine.StateMachine\n    :members:\n    :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Transition Class with Autodoc\nDESCRIPTION: reStructuredText directive to generate API documentation for the Transition class using autodoc, including all members.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: statemachine.transition.Transition\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting EventData Class with Autodoc\nDESCRIPTION: reStructuredText directive to generate API documentation for the EventData class using autodoc, including all members.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_11\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: statemachine.event_data.EventData\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Model Reference Link\nDESCRIPTION: A reStructuredText seealso directive that references the Domain models documentation section.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/api.md#2025-04-23_snippet_7\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{ref}`Domain models` reference.\n```\n\n----------------------------------------\n\nTITLE: Displaying StateMachine Version and Release Date in Markdown\nDESCRIPTION: This snippet shows the version number and release date for StateMachine 0.6.2 using Markdown formatting. It includes the project name, version number, and release date.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/0.6.2.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# StateMachine 0.6.2\n\n*2017-08-25*\n```\n\n----------------------------------------\n\nTITLE: Installing Python-Statemachine with Diagrams Support\nDESCRIPTION: Installation instructions for python-statemachine with diagram generation capabilities, including the pydot dependency and Graphviz system requirement.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/diagram.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install python-statemachine[diagrams]\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install pydot\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install graphviz\n```\n\n----------------------------------------\n\nTITLE: Using Sphinx Auto-build for Documentation Development in Python-Statemachine\nDESCRIPTION: Command to use sphinx-autobuild for live-reloading documentation as changes are made. This improves the workflow when writing documentation by automatically refreshing the browser when files change.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/contributing.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nuv run sphinx-autobuild docs docs/_build/html --re-ignore \"auto_examples/.*\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Pre-1.0 Release Notes with Toctree\nDESCRIPTION: A restructuredtext toctree directive that displays the release notes for all versions prior to 1.0 of python-statemachine, with a maximum depth of 1 level.\nSOURCE: https://github.com/fgmacedo/python-statemachine/blob/develop/docs/releases/index.md#2025-04-23_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\n0.9.0\n0.8.0\n0.7.1\n0.7.0\n0.6.2\n0.6.1\n0.6.0\n0.5.1\n0.5.0\n0.4.2\n0.3.0\n0.2.0\n0.1.0\n\n```\n```"
  }
]