[
  {
    "owner": "agentops-ai",
    "repo": "agentops",
    "content": "TITLE: Initializing AgentOps SDK in Python\nDESCRIPTION: The init() function is the entry point for using AgentOps. It sets up the client with the provided configuration options and returns the session ID.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/sdk-reference.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ninit(api_key: str = None, parent_key: str = None, endpoint: str = None, max_wait_time: int = 30000, max_queue_size: int = 100, tags: List[str] = None, override: bool = None, instrument_llm_calls: bool = True, auto_start_session: bool = True, inherited_session_id: str = None, skip_auto_end_session: bool = False) -> str\n```\n\n----------------------------------------\n\nTITLE: Complete Nested Decorators Example\nDESCRIPTION: Comprehensive example showing proper nesting of session, agent, and operation decorators.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/decorators.mdx#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import session, agent, operation\n\n@agent\nclass MyAgent:\n    @operation\n    def nested_operation(self, message):\n        return f\"Processed: {message}\"\n        \n    @operation\n    def main_operation(self):\n        result = self.nested_operation(\"test message\")\n        return result\n\n@session\ndef my_session():\n    agent = MyAgent()\n    return agent.main_operation()\n    \n# Run the session\nresult = my_session()\n```\n\n----------------------------------------\n\nTITLE: Complete SwarmZero Web Search Agent with AgentOps\nDESCRIPTION: Full example implementation of a web search agent using SwarmZero with AgentOps monitoring, including functions for web search and URL content extraction with Tavily integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/swarmzero.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport agentops\nfrom dotenv import load_dotenv\nfrom swarmzero import Agent\nfrom tavily import TavilyClient\n\nload_dotenv()\nagentops.init(os.getenv(\"AGENTOPS_API_KEY\"))\ntavily_client = TavilyClient(api_key=os.getenv(\"TAVILY_API_KEY\"))\n\nasync def web_search(query: str) -> dict:\n    response = tavily_client.search(query)\n    results = []\n    for result in response[\"results\"][:3]:\n        results.append({\"title\": result[\"title\"], \"url\": result[\"url\"], \"content\": result[\"content\"]})\n    return results\n\nasync def extract_from_urls(urls: list[str]) -> dict:\n    response = tavily_client.extract(urls=urls)\n\n    if response[\"failed_results\"]:\n        print(f\"Failed to extract from {response['failed_results']}\")\n\n    results = []\n    for result in response[\"results\"]:\n        results.append({\"url\": result[\"url\"], \"raw_content\": result[\"raw_content\"]})\n\n    return results\n\nmy_agent = Agent(\n    name=\"workflow-assistant\",\n    functions=[\n        web_search,\n        extract_from_urls,\n    ],\n    config_path=\"./swarmzero_config.toml\", # see https://github.com/swarmzero/swarmzero/blob/main/swarmzero_config_example.toml\n    instruction=\"You are a helpful assistant that can search the web and extract information from a given URL.\",\n    # chat_only_mode=True  # remove comment only if using `my_agent.chat()`\n)\n\nmy_agent.run()  # see agent API at localhost:8000/docs\n\n\"\"\"\n# chat directly without starting the agent's server\nimport asyncio\n\nresponse = asyncio.run(my_agent.chat(prompt=\"what is Decentralized-AI about about?\"))\nprint(response)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps in Python\nDESCRIPTION: This code snippet demonstrates how to initialize AgentOps in a Python project. It requires the agentops library and an API key. This setup enables automatic logging of agent behavior to the AgentOps Dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/introduction.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nagentops.init(<INSERT YOUR API KEY HERE>)\n```\n\n----------------------------------------\n\nTITLE: Full Example of AgentOps Integration with LangChain\nDESCRIPTION: Complete code example showing the integration of AgentOps with a LangChain application, including imports, handler setup, and agent initialization.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/langchain.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\nfrom agentops.langchain_callback_handler import LangchainCallbackHandler\n\nhandler = LangchainCallbackHandler(api_key=AGENTOPS_API_KEY, tags=['LangChain Example'])\n\nllm = ChatOpenAI(openai_api_key=OPENAI_API_KEY,\n\tcallbacks=[handler],\n\tmodel='gpt-3.5-turbo')\n\nagent = initialize_agent(tools,\n\tllm,\n\tagent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n\tverbose=True,\n\tcallbacks=[handler], # You must pass in a callback handler to record your agent\n\thandle_parsing_errors=True)\n```\n\n----------------------------------------\n\nTITLE: Full Example of AgentOps LangChain Integration in Python\nDESCRIPTION: Complete example demonstrating the integration of AgentOps LangchainCallbackHandler with LangChain's ChatOpenAI and prompt template.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/langchain-callback-handler.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_openai import ChatOpenAI\nfrom agentops import LangchainCallbackHandler\n\nprompt = ChatPromptTemplate.from_messages([\"Tell me a joke about {animal}\"]\n\nmodel = ChatOpenAI(callbacks=[LangchainCallbackHandler()])\n\nchain = prompt | model\nresponse = chain.invoke({\"animal\": \"bears\"})\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and Creating a Session\nDESCRIPTION: Initializes AgentOps, creates an OpenAI client, and defines a session that includes an LLM call, a custom operation, and an agent call. Demonstrates the use of the @session decorator.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/recording_events.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the client\nagentops.init()\n\n# Optionally, we can add default tags to all sessions\n# agentops.init(tags=['Hello Tracker'])\n\nopenai_client = OpenAI()\n\n# Create a session to track all operations\n@session\ndef my_session():\n    messages = [{\"role\": \"user\", \"content\": \"Hello\"}]\n    response = openai_client.chat.completions.create(\n        model=\"gpt-3.5-turbo\", messages=messages, temperature=0.5\n    )\n    print(response.choices[0].message.content)\n    \n    # Call our operation\n    result = add(2, 4)\n    print(f\"Addition result: {result}\")\n    \n    # Call our agent\n    agent = MyAgent()\n    agent.process_data(\"test data\")\n    \n# Run the session\nmy_session()\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Client with OpenAI Integration\nDESCRIPTION: Basic setup of AgentOps client including OpenAI import, client initialization, function decoration for event recording, and session management. Shows the core integration pattern with OpenAI.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/quickstart.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport openai # Make sure openai is imported before instantiating an AgentOps client.\nimport agentops\n\n# Beginning of program (i.e. main.py, **init**.py)\n\nao_client = agentops.Client(<INSERT YOUR API KEY HERE>)\n\n...\n\n# (optional: record specific functions)\n\n@ao_client.record_action('sample function being record')\ndef sample_function(...):\n...\n\n...\n\n# End of program\n\nao_client.end_session('Success')\n\n# Woohoo You're done ðŸŽ‰\n```\n\n----------------------------------------\n\nTITLE: Running the Multi-Agent System with a Complex Query\nDESCRIPTION: Executes the multi-agent system with a complex query about future LLM power requirements, demonstrating how the agents collaborate to gather and process information.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/multi_smolagents_system.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nanswer = manager_agent.run(\"If LLM trainings continue to scale up at the current rhythm until 2030, what would be the electric power in GW required to power the biggest training runs by 2030? What does that correspond to, compared to some countries? Please provide a source for any number used.\")\n\nprint(answer)\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Client and Defining Assistant Functions in Python\nDESCRIPTION: This snippet sets up the OpenAI client and defines functions for submitting messages and getting responses from an assistant. It requires the OpenAI Python library and an API key.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\n\nMATH_ASSISTANT_ID = assistant.id  # or a hard-coded ID like \"asst-...\"\n\nclient = OpenAI(api_key=os.environ.get(\"OPENAI_API_KEY\", \"<your OpenAI API key if not set as env var>\"))\n\n\ndef submit_message(assistant_id, thread, user_message):\n    client.beta.threads.messages.create(thread_id=thread.id, role=\"user\", content=user_message)\n    return client.beta.threads.runs.create(\n        thread_id=thread.id,\n        assistant_id=assistant_id,\n    )\n\n\ndef get_response(thread):\n    return client.beta.threads.messages.list(thread_id=thread.id, order=\"asc\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Chat Example with AutoGen and AgentOps\nDESCRIPTION: Creates a simple conversation between an assistant agent and a user proxy agent, with automatic tracking of their interactions through AgentOps. Includes error handling and session completion marking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/demos/agentchat_agentops.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Define model, openai api key, tags, etc in the agent configuration.\nconfig_list = [\n    {\"model\": \"gpt-4-turbo\", \"api_key\": OPENAI_API_KEY, \"tags\": [\"gpt-4\", \"tool\"]}\n]\n# Create the agent that uses the LLM.\nassistant = ConversableAgent(\"agent\", llm_config={\"config_list\": config_list})\n\n# Create the agent that represents the user in the conversation.\nuser_proxy = UserProxyAgent(\"user\", code_execution_config=False)\n\n# Let the assistant start the conversation.  It will end when the user types \"exit\".\ntry:\n    assistant.initiate_chat(user_proxy, message=\"How can I help you today?\")\nexcept StdinNotImplementedError:\n    # This is only necessary for AgentOps testing automation which is headless and will not have user input\n    print(\"Stdin not implemented. Skipping initiate_chat\")\n    agentops.end_session(\"Indeterminate\")\n\n# Close your AgentOps session to indicate that it completed.\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Creating Patched Function for Multiple LLM Calls in AgentOps\nDESCRIPTION: Create a reusable patched function for making multiple LLM calls associated with a specific AgentOps session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nobserved_create = session_1.patch(openai.chat.completions.create)\nobs_response = observed_create(\n    model=\"gpt-3.5-turbo\",\n    messages=messages,\n    temperature=0.5,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Sessions in Python with AgentOps\nDESCRIPTION: Example of creating a session using the @session decorator to group agent operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/quickstart.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create a session\nfrom agentops.sdk.decorators import session\n\n@session\ndef my_workflow():\n    # Your session code here\n    agent = MyAgent(\"research-agent\")\n    result = agent.perform_task(\"data analysis\")\n    return result\n    \n# Run the session\nmy_workflow()\n```\n\n----------------------------------------\n\nTITLE: Complete Example of AgentOps Integration in Python\nDESCRIPTION: A comprehensive example showcasing the initialization of AgentOps, creation of an agent class, and running a session with operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/quickstart.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom agentops.sdk.decorators import session, agent, operation\n\n# Initialize AgentOps\nagentops.init(<INSERT YOUR API KEY HERE>)\n\n# Create an agent class\n@agent\nclass MyAgent:\n    def __init__(self, name):\n        self.name = name\n        \n    @operation\n    def perform_task(self, task):\n        # Agent task logic here\n        return f\"Completed {task}\"\n\n# Create a session\n@session\ndef my_workflow():\n    # Your session code here\n    agent = MyAgent(\"research-agent\")\n    result = agent.perform_task(\"data analysis\")\n    return result\n    \n# Run the session\nmy_workflow()\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Execution Tool for Agent\nDESCRIPTION: Define a tool function that allows the agent to perform SQL queries on the 'receipts' table. This function will be used by the agent to execute SQL commands.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/text_to_sql.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom smolagents import tool\n\n@tool\ndef sql_engine(query: str) -> str:\n    \"\"\"\n    Allows you to perform SQL queries on the table. Returns a string representation of the result.\n    The table is named 'receipts'. Its description is as follows:\n        Columns:\n        - receipt_id: INTEGER\n        - customer_name: VARCHAR(16)\n        - price: FLOAT\n        - tip: FLOAT\n\n    Args:\n        query: The query to perform. This should be correct SQL.\n    \"\"\"\n    output = \"\"\n    with engine.connect() as con:\n        rows = con.execute(text(query))\n        for row in rows:\n            output += \"\\n\" + str(row)\n    return output\n```\n\n----------------------------------------\n\nTITLE: Starting a New AgentOps Session in Python\nDESCRIPTION: The start_session() function initiates a new session for recording events. It allows specifying tags, configuration, and an inherited session ID.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/sdk-reference.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstart_session(tags: List[str] = None, config: Configuration = None, inherited_session_id: str = None) -> str\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Session with OpenAI Integration\nDESCRIPTION: Example of creating and running an AgentOps session that includes OpenAI chat completion, custom operations, and agent calls.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/recording-operations.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the client\nagentops.init()\n\n# Optionally, we can add default tags to all sessions\n# agentops.init(tags=['Hello Tracker'])\n\nopenai_client = OpenAI()\n\n# Create a session to track all operations\n@session\ndef my_session():\n    messages = [{\"role\": \"user\", \"content\": \"Hello\"}]\n    response = openai_client.chat.completions.create(\n        model=\"gpt-3.5-turbo\", messages=messages, temperature=0.5\n    )\n    print(response.choices[0].message.content)\n    \n    # Call our operation\n    result = add(2, 4)\n    print(f\"Addition result: {result}\")\n    \n    # Call our agent\n    agent = MyAgent()\n    agent.process_data(\"test data\")\n    \n# Run the session\nmy_session()\n```\n\n----------------------------------------\n\nTITLE: Creating and Tracking Agents in Python\nDESCRIPTION: Demonstration of creating an agent class with the @agent decorator and an operation method.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/quickstart.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent class\nfrom agentops.sdk.decorators import agent, operation\n\n@agent\nclass MyAgent:\n    def __init__(self, name):\n        self.name = name\n        \n    @operation\n    def perform_task(self, task):\n        # Agent task logic here\n        return f\"Completed {task}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps for Session Replays\nDESCRIPTION: Python code snippet showing how to initialize AgentOps and end a session for basic analytics on LLM calls.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\n\n# Beginning of your program (i.e. main.py, __init__.py)\nagentops.init( < INSERT YOUR API KEY HERE >)\n\n...\n\n# End of program\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Recording Events in AgentOps SDK\nDESCRIPTION: The record() function is used to log events with the AgentOps service. It accepts either an Event or ErrorEvent object.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/sdk-reference.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrecord(event: Union[Event, ErrorEvent])\n```\n\n----------------------------------------\n\nTITLE: Defining a Langchain Tool with AgentOps Monitoring\nDESCRIPTION: This code defines a simple Langchain tool for finding movies and sets up AgentOps monitoring for the tool's usage.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_examples.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@tool\ndef find_movie(genre: str) -> str:\n    \"\"\"Find available movies\"\"\"\n    if genre == \"drama\":\n        return \"Dune 2\"\n    else:\n        return \"Pineapple Express\"\n\n\ntools = [find_movie]\n\nfor t in tools:\n    t.callbacks = [agentops_handler]\n\nllm_with_tools = llm.bind_tools([find_movie])\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running ChatAgent with AgentOps in Python\nDESCRIPTION: This snippet demonstrates how to set up a ChatAgent with search tools, configure the model and tools, run a query, and end the AgentOps session. It uses the AgentOps framework for monitoring and includes system message configuration, tool setup, and model initialization.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Set up the agent with search tools\nsys_msg = BaseMessage.make_assistant_message(\n    role_name='Tools calling operator',\n    content='You are a helpful assistant'\n)\n\n# Configure tools and model\ntools = [*SearchToolkit().get_tools()]\nmodel = ModelFactory.create(\n    model_platform=ModelPlatformType.OPENAI,\n    model_type=ModelType.GPT_4O_MINI,\n)\n\n# Create and run the agent\ncamel_agent = ChatAgent(\n    system_message=sys_msg,\n    model=model,\n    tools=tools,\n)\n\nresponse = camel_agent.step(\"What is AgentOps?\")\nprint(response)\n\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Creating Agents within Session Context in Python\nDESCRIPTION: This example shows how to create and use agents within a session context to ensure proper tracing. It demonstrates defining an agent class with operations and then using that agent within a session-decorated function.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/tracking-agents.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import session, agent, operation\n\n@agent\nclass ResearchAgent:\n    @operation\n    def perform_research(self, topic):\n        # Research implementation\n        return results\n\n@session\ndef research_workflow(topic):\n    agent = ResearchAgent()\n    return agent.perform_research(topic)\n    \n# Run the session\nresult = research_workflow(\"quantum computing\")\n```\n\n----------------------------------------\n\nTITLE: Ending an AgentOps Session in Python\nDESCRIPTION: The end_session() function terminates the current session, allowing specification of the end state, reason, and optional video URL.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/sdk-reference.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nend_session(end_state: str, end_state_reason: str = None, video: str = None)\n```\n\n----------------------------------------\n\nTITLE: Using @operation Decorator in Python with AgentOps\nDESCRIPTION: Demonstrates how to use the @operation decorator to create operation/task spans for tracking specific operations. It can be used with or without parameters.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/recording-operations.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import operation\n\n@operation\ndef process_data(data):\n    # Process the data\n    return result\n```\n\nLANGUAGE: python\nCODE:\n```\n@operation(name=\"custom-operation-name\", version=1)\ndef process_data(data):\n    # Process the data\n    return result\n```\n\n----------------------------------------\n\nTITLE: Session Decorator Implementation\nDESCRIPTION: Example of using the @session decorator to create a root span for tracking operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/decorators.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import session\n\n@session\ndef my_workflow():\n    # Your session code here\n    return result\n```\n\n----------------------------------------\n\nTITLE: Decorating Functions as Operations in Python\nDESCRIPTION: Example of using the @operation decorator to instrument a function for tracking in AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/quickstart.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Instrument a function as an operation\nfrom agentops.sdk.decorators import operation\n\n@operation\ndef process_data(data):\n    # Your function logic here\n    result = data.upper()\n    return result\n```\n\n----------------------------------------\n\nTITLE: Using the Engineer Agent to Generate Code\nDESCRIPTION: Makes a request to the engineer agent to generate a Python function for testing prime numbers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngenerated_func = engineer.completion(\"python function to test prime number\")\n```\n\n----------------------------------------\n\nTITLE: Using the Engineer Agent to Generate Code\nDESCRIPTION: Makes a request to the engineer agent to generate a Python function for testing prime numbers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngenerated_func = engineer.completion(\"python function to test prime number\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Keys for AgentOps and OpenAI in Python\nDESCRIPTION: This snippet loads environment variables, sets up API keys for AgentOps and OpenAI, and provides fallback options for direct key input. It uses the dotenv library to load environment variables.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles and Capabilities for Job Posting Creation\nDESCRIPTION: A class that defines three specialized agents: a Research Analyst for company research, a Job Description Writer for content creation, and a Review Specialist for final edits. Each agent has specific goals, tools, and backstories.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/job_posting.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nweb_search_tool = WebsiteSearchTool()\nserper_dev_tool = SerperDevTool()\nfile_read_tool = FileReadTool(\n    file_path=\"job_description_example.md\",\n    description=\"A tool to read the job description example file.\",\n)\n\n\nclass Agents:\n    def research_agent(self):\n        return Agent(\n            role=\"Research Analyst\",\n            goal=\"Analyze the company website and provided description to extract insights on culture, values, and specific needs.\",\n            tools=[web_search_tool, serper_dev_tool],\n            backstory=\"Expert in analyzing company cultures and identifying key values and needs from various sources, including websites and brief descriptions.\",\n            verbose=True,\n        )\n\n    def writer_agent(self):\n        return Agent(\n            role=\"Job Description Writer\",\n            goal=\"Use insights from the Research Analyst to create a detailed, engaging, and enticing job posting.\",\n            tools=[web_search_tool, serper_dev_tool, file_read_tool],\n            backstory=\"Skilled in crafting compelling job descriptions that resonate with the company's values and attract the right candidates.\",\n            verbose=True,\n        )\n\n    def review_agent(self):\n        return Agent(\n            role=\"Review and Editing Specialist\",\n            goal=\"Review the job posting for clarity, engagement, grammatical accuracy, and alignment with company values and refine it to ensure perfection.\",\n            tools=[web_search_tool, serper_dev_tool, file_read_tool],\n            backstory=\"A meticulous editor with an eye for detail, ensuring every piece of content is clear, engaging, and grammatically perfect.\",\n            verbose=True,\n        )\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with API Key and Tags\nDESCRIPTION: Initializes the AgentOps monitoring system with an API key and optional tags to help filter sessions in the dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/demos/agentchat_agentops.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# When initializing AgentOps, you can pass in optional tags to help filter sessions.\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"simple-autogen-example\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Span in Python with AgentOps\nDESCRIPTION: Shows how to create an agent span using the @agent decorator. Agent spans represent operations performed by a specific agent and are typically children of session spans.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/events.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import agent\n\n@agent\nclass MyAgent:\n    def __init__(self, name):\n        self.name = name\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Sessions in Python with AgentOps SDK\nDESCRIPTION: Shows how to create and run multiple concurrent sessions using the AgentOps SDK with the session decorator. When multiple sessions are active, AgentOps enters multi-session mode requiring explicit session references.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/core-concepts.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom agentops.sdk.decorators import session\n\n@session\ndef session_1():\n    # Session 1 code\n    pass\n\n@session\ndef session_2():\n    # Session 2 code\n    pass\n\n# Run both sessions\nsession_1()\nsession_2()\n```\n\n----------------------------------------\n\nTITLE: Using AgentOps Decorator for Event Tracking\nDESCRIPTION: Demonstrates how to use the @record_action decorator to automatically track function calls as events in AgentOps, capturing both the purpose and results of the function.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/simple_agent.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops import record_action\n\n\n@record_action(\"add numbers\")\ndef add(x, y):\n    return x + y\n\n\nadd(2, 4)\n```\n\n----------------------------------------\n\nTITLE: Session Management Examples in Python\nDESCRIPTION: Examples of initializing and managing multiple sessions in AgentOps, including both auto-start and manual session creation approaches.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/multiple-sessions.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsession_1 = agentops.init()\nsession_2 = agentops.start_session()\n```\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(auto_start_session=False)\nsession_1 = agentops.start_session()\nsession_2 = agentops.start_session()\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Handler and Langchain LLM\nDESCRIPTION: This code initializes the AgentOps LangchainCallbackHandler and creates a Langchain ChatOpenAI instance with the handler. It also sets up a chat prompt template for the agent.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_examples.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops_handler = AgentOpsLangchainCallbackHandler(\n    api_key=AGENTOPS_API_KEY, default_tags=[\"Langchain Example\"]\n)\n\nllm = ChatOpenAI(\n    openai_api_key=OPENAI_API_KEY, callbacks=[agentops_handler], model=\"gpt-3.5-turbo\"\n)\n\n# You must pass in a callback handler to record your agent\nllm.callbacks = [agentops_handler]\n\nprompt = ChatPromptTemplate.from_messages(\n    [\n        (\"system\", \"You are a helpful assistant. Respond only in Spanish.\"),\n        (\"human\", \"{input}\"),\n        # Placeholders fill up a **list** of messages\n        (\"placeholder\", \"{agent_scratchpad}\"),\n        # (\"tool_names\", \"find_movie\")\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous streaming OpenAI chat completion with AgentOps\nDESCRIPTION: Example of using OpenAI's streaming chat completion API asynchronously with AgentOps integration. Uses AsyncOpenAI client and asyncio for asynchronous streaming.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/openai.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import AsyncOpenAI\nimport agentops\nimport asyncio\n\nasync def main():\n  agentops.init(<INSERT YOUR API KEY HERE>)\n  client = AsyncOpenAI()\n\n  stream = await client.chat.completions.create(\n      model=\"gpt-4o-mini\",\n      stream=True,\n      messages=[{\n          \"role\": \"user\",\n          \"content\": \"Write a haiku about AI and humans working together\"\n      }],\n  )\n\n  async for chunk in stream:\n      print(chunk.choices[0].delta.content or \"\", end=\"\")\n  \n  agentops.end_session('Success')\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Basic AgentOps integration with Cohere\nDESCRIPTION: Essential code for integrating AgentOps with Cohere. The code initializes AgentOps tracking with your API key, creates a Cohere client, and ends the tracking session with a status.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/cohere.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nagentops.init(<INSERT YOUR API KEY HERE>)\nco = cohere.Client()\n...\n# End of program (e.g. main.py)\nagentops.end_session(\"Success\") # Success|Fail|Indeterminate\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with Mistral Integration\nDESCRIPTION: Basic setup code for initializing AgentOps and creating a Mistral client. This includes importing necessary libraries, initializing AgentOps with your API key, creating a Mistral client, and ending the session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/mistral.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom mistralai import Mistral\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = Mistral(api_key=\"your_api_key\")\n\n# Your code here...\n\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Creating a ChatCompletion with OpenAI GPT\nDESCRIPTION: Demonstrates a basic interaction with OpenAI's GPT model by sending a prompt for a poem about secret agents and printing the response. AgentOps automatically tracks this interaction.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/simple_agent.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage = [{\"role\": \"user\", \"content\": \"Write a 12 word poem about secret agents.\"}]\nresponse = openai.chat.completions.create(\n    model=\"gpt-3.5-turbo\", messages=message, temperature=0.5, stream=False\n)\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and OpenAI client in Python\nDESCRIPTION: Basic setup for initializing AgentOps and creating an OpenAI client in Python. Includes the end_session call to finalize the AgentOps session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/openai.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom openai import OpenAI\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = OpenAI()\n...\n# End of program (e.g. main.py)\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for AgentOps\nDESCRIPTION: Configuration of API keys for OpenAI and AgentOps using environment variables or direct assignment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/recording-operations.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps in Python\nDESCRIPTION: Code to initialize AgentOps with an API key in a Python application\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/llama_stack.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nagentops.init(<INSERT YOUR API KEY HERE>)\n```\n\n----------------------------------------\n\nTITLE: Building a Multi-Agent System with Tool Integration\nDESCRIPTION: Constructs a hierarchical multi-agent system with a CodeAgent as manager, containing a ManagedAgent that wraps a ToolCallingAgent equipped with web search and webpage visiting capabilities.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/multi_smolagents_system.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom smolagents import (\n    CodeAgent,\n    ToolCallingAgent,\n    ManagedAgent,\n    DuckDuckGoSearchTool,\n)\n\nweb_agent = ToolCallingAgent(\n    tools=[DuckDuckGoSearchTool(), visit_webpage],\n    model=model,\n    max_iterations=10,\n)\n\nmanaged_web_agent = ManagedAgent(\n    agent=web_agent,\n    name=\"search\",\n    description=\"Runs web searches for you. Give it your query as an argument.\",\n)\n\nmanager_agent = CodeAgent(\n    tools=[],\n    model=model,\n    managed_agents=[managed_web_agent],\n    additional_authorized_imports=[\"time\", \"numpy\", \"pandas\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Groq Integration with AgentOps\nDESCRIPTION: Full example of using Groq synchronously with AgentOps, including initialization, API call, and session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/groq.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom groq import Groq\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = Groq(api_key=\"your_api_key\")\n\nresponse = client.chat.completions.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Explain the importance of low latency LLMs\",\n        }\n    ],\n    model=\"llama3-8b-8192\",\n)\n\nprint(response.choices[0].message.content)\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Initializing Multi-Agent System\nDESCRIPTION: Creates two specialized agents: a Python expert for code writing and a reviewer for code quality assessment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Initialize two CAMEL agents\nassistant = ChatAgent(\n    model=ModelFactory.create(\n        model_platform=ModelPlatformType.OPENAI,\n        model_type=ModelType.GPT_4O_MINI,\n    ),\n    system_message=\"You are a Python expert who helps write clean, efficient code.\"\n)\n\nreviewer = ChatAgent(\n    model=ModelFactory.create(\n        model_platform=ModelPlatformType.OPENAI,\n        model_type=ModelType.GPT_4O_MINI,\n    ),\n    system_message=\"You are a code reviewer who focuses on code quality and best practices.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Multi-Session API Endpoint Implementation\nDESCRIPTION: Example of implementing a FastAPI endpoint that manages AgentOps sessions and integrates with OpenAI completions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/multiple-sessions.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.get(\"/completion\")\ndef completion():\n    session = agentops.start_session()\n\n    messages = [{\"role\": \"user\", \"content\": \"Hello\"}]\n    response = session.patch(openai.chat.completions.create)(\n        model=\"gpt-3.5-turbo\",\n        messages=messages,\n        temperature=0.5,\n    )\n\n    session.record(\n        ActionEvent(\n            action_type=\"Agent says hello\",\n            params=messages,\n            returns=str(response.choices[0].message.content),\n        ),\n    )\n\n    session.end_session(end_state=\"Success\")\n\n    return {\"response\": response}\n```\n\n----------------------------------------\n\nTITLE: Using AgentOps Decorator for Action Recording\nDESCRIPTION: Demonstrates how to use AgentOps' decorator to automatically record function executions as custom events. This example tracks a simple addition function with the 'add numbers' action type.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai-gpt.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops import record_action\n\n\n@record_action(\"add numbers\")\ndef add(x, y):\n    return x + y\n\n\nadd(2, 4)\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Langchain Agent with AgentOps\nDESCRIPTION: This snippet creates a Langchain agent with the defined tools and AgentOps monitoring, then executes the agent with a sample input while recording the actions in the AgentOps Dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_examples.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nagent = create_openai_tools_agent(llm, tools, prompt)\nagent_executor = AgentExecutor(agent=agent, tools=tools)\n\nagent_executor.invoke(\n    {\"input\": \"What comedies are playing?\"}, config={\"callback\": [agentops_handler]}\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Operation Span in Python with AgentOps\nDESCRIPTION: Illustrates the creation of an operation span using the @operation decorator. Operation spans represent specific tasks or operations performed by an agent and are typically children of agent spans.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/events.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import operation\n\n@operation\ndef process_data(data):\n    # Process the data\n    return result\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and OpenAI Clients in Python\nDESCRIPTION: This code initializes the AgentOps client with the API key and tags, and creates an OpenAI client with the OpenAI API key.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(api_key=AGENTOPS_API_KEY, tags=[\"openai\", \"beta-assistants\"])\nclient = OpenAI(api_key=OPENAI_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Summarizing MultiOn Output Using OpenAI\nDESCRIPTION: This code uses OpenAI's GPT-3.5-turbo model to summarize the output from the MultiOn browse event and format it as a markdown table.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Sample_browsing_agent.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    {\n        \"role\": \"user\",\n        \"content\": f\"Format this data as a markdown table: {browse_response.message}\",\n    }\n]\nclient = openai.OpenAI()\nresponse = client.chat.completions.create(messages=messages, model=\"gpt-3.5-turbo\")\n\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Full Example of TaskWeaver with AgentOps Integration\nDESCRIPTION: A complete example demonstrating how to use TaskWeaver as a library and observe it with AgentOps, including initialization, session creation, and message sending.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/taskweaver.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\n\nfrom taskweaver.app.app import TaskWeaverApp\nfrom agentops.partners.taskweaver_event_handler import TaskWeaverEventHandler\n\nagentops.init(<INSERT YOUR API KEY HERE>)\n\napp_dir = \"<path to your configured project directory>\"\napp = TaskWeaverApp(app_dir=app_dir)\nsession = app.get_session()\nhandler = TaskWeaverEventHandler()\nsession.event_emitter.register(handler)\n\nuser_query = \"Hello, what are the capabilities of TaskWeaver?\"\nresponse_round = session.send_message(user_query)\n\nuser_query = \"Write me a simple calculator program in python\"\nresponse_round = session.send_message(user_query)\n\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Basic AgentOps and Ollama Integration\nDESCRIPTION: Code snippet showing the basic integration of AgentOps with Ollama. Demonstrates initializing AgentOps, starting a session, pulling an Ollama model, and making a chat request to the model.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ollama.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nimport ollama\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nagentops.start_session()\n\nollama.pull(\"<MODEL NAME>\")\n\nresponse = ollama.chat(model='mistral',\n  messages=[{\n      'role': 'user',\n      'content': 'What are the benefits of using AgentOps for monitoring LLMs?',\n  }]\n)\nprint(response['message']['content'])\n...\n# End of program (e.g. main.py)\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoGen Tool Usage with AgentOps Tracking\nDESCRIPTION: Demonstrates how to create and register a calculator tool with AutoGen agents, allowing tool usage to be tracked by AgentOps. Shows the interaction between two agents that use the calculator tool.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/demos/agentchat_agentops.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfig_list = [\n    {\"model\": \"gpt-4-turbo\", \"api_key\": OPENAI_API_KEY, \"tags\": [\"gpt-4\", \"tool\"]}\n]\n\nOperator = Literal[\"+\", \"-\", \"*\", \"/\"]\n\n\ndef calculator(a: int, b: int, operator: Annotated[Operator, \"operator\"]) -> int:\n    if operator == \"+\":\n        return a + b\n    elif operator == \"-\":\n        return a - b\n    elif operator == \"*\":\n        return a * b\n    elif operator == \"/\":\n        return int(a / b)\n    else:\n        raise ValueError(\"Invalid operator\")\n\n\n# Create the agent that uses the LLM.\nassistant = ConversableAgent(\n    name=\"Assistant\",\n    system_message=\"You are a helpful AI assistant. \"\n    \"You can help with simple calculations. \"\n    \"Return 'TERMINATE' when the task is done.\",\n    llm_config={\"config_list\": config_list, \"cache_seed\": None},\n)\n\n# The user proxy agent is used for interacting with the assistant agent\n# and executes tool calls.\nuser_proxy = ConversableAgent(\n    name=\"User\",\n    llm_config=False,\n    is_termination_msg=lambda msg: msg.get(\"content\") is not None\n    and \"TERMINATE\" in msg[\"content\"],\n    human_input_mode=\"NEVER\",\n)\n\nassistant.register_for_llm(name=\"calculator\", description=\"A simple calculator\")(\n    calculator\n)\nuser_proxy.register_for_execution(name=\"calculator\")(calculator)\n\n# Register the calculator function to the two agents.\nregister_function(\n    calculator,\n    caller=assistant,  # The assistant agent can suggest calls to the calculator.\n    executor=user_proxy,  # The user proxy agent can execute the calculator calls.\n    name=\"calculator\",  # By default, the function name is used as the tool name.\n    description=\"A simple calculator\",  # A description of the tool.\n)\n\n# Let the assistant start the conversation.  It will end when the user types \"exit\".\nuser_proxy.initiate_chat(assistant, message=\"What is (1423 - 123) / 3 + (32 + 23) * 5?\")\n\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiOn Retrieve Functionality with AgentOps Integration\nDESCRIPTION: Implementation of MultiOn's retrieve functionality to extract data from a webpage with automated session tracking and screenshot capture through AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Webpage_data_retrieval.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmultion = MultiOn(\n    api_key=MULTION_API_KEY,\n    agentops_api_key=AGENTOPS_API_KEY,\n)\n\ncmd = \"what three things do i get with agentops\"\nurl = \"https://www.agentops.ai/\"\n\nretrieve_response = multion.retrieve(\n    cmd=cmd, url=url, fields=[\"price\"], include_screenshot=True\n)\nprint(retrieve_response.message)\n\nwhile retrieve_response.status == \"CONTINUE\":\n    retrieve_response = multion.retrieve(\n        cmd=cmd,\n        url=url,\n        fields=[\"price\"],\n        include_screenshot=True,\n    )\n    print(retrieve_response.message)\n\nif retrieve_response.status == \"DONE\":\n    print(\"task completed\")\n```\n\n----------------------------------------\n\nTITLE: Hello World Agent Implementation\nDESCRIPTION: Basic example demonstrating how to create and run a simple agent that generates a haiku about recursion.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/agentssdk.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agents import Agent, Runner\nimport agentops\n\n# Initialize AgentOps\nagentops.init()\n\nagent = Agent(name=\"Assistant\", instructions=\"You are a helpful assistant\")\n\nresult = Runner.run_sync(agent, \"Write a haiku about recursion in programming.\")\nprint(result.final_output)\n\n# Output:\n# Code within the code,\n# Functions calling themselves,\n# Infinite loop's dance.\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Classes with AgentOps Decorators\nDESCRIPTION: Creates two agent classes (QaAgent and EngineerAgent) using the @agent decorator. Each class includes a completion method decorated with @operation to track LLM interactions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@agent(name=\"qa\")\nclass QaAgent:\n    def __init__(self):\n        pass\n        \n    @operation\n    def completion(self, prompt: str):\n        res = openai_client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are a qa engineer and only output python code, no markdown tags.\",\n                },\n                {\"role\": \"user\", \"content\": prompt},\n            ],\n            temperature=0.5,\n        )\n        return res.choices[0].message.content\n\n\n@agent(name=\"engineer\")\nclass EngineerAgent:\n    def __init__(self):\n        pass\n        \n    @operation\n    def completion(self, prompt: str):\n        res = openai_client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are a software engineer and only output python code, no markdown tags.\",\n                },\n                {\"role\": \"user\", \"content\": prompt},\n            ],\n            temperature=0.5,\n        )\n        return res.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Operation with AgentOps\nDESCRIPTION: Creates a custom operation using the @operation decorator to track a simple addition function.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/recording_events.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import operation\n\n@operation\ndef add(x, y):\n    return x + y\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Streaming with Mistral and AgentOps\nDESCRIPTION: Example of using Mistral's asynchronous streaming API with AgentOps monitoring. This function initializes AgentOps, creates a Mistral client, asynchronously streams a response from the Mistral API, and accumulates the chunks into a complete response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/mistral.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom mistralai import Mistral\nimport agentops\n\nasync def main():\n    agentops.init(<INSERT YOUR API KEY HERE>)\n    client = Mistral(api_key=\"your_api_key\")\n\n    complete_response = \"\"\n\n    response = await client.chat.stream_async(\n        model=\"mistral-small-latest\",\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"Write a short summary about the poem La Belle Dame sans Merci.\",\n            },\n        ],\n    )\n\n    async for chunk in response:\n        if chunk.data.choices[0].finish_reason == \"stop\":\n            print(complete_response)\n        else:\n            complete_response += chunk.data.choices[0].delta.content\n\n    agentops.end_session('Success')\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Chat Completion with Mistral and AgentOps\nDESCRIPTION: Example of using Mistral's asynchronous chat completion API with AgentOps monitoring. This function initializes AgentOps, creates a Mistral client, sends an asynchronous request to the Mistral API, and prints the response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/mistral.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom mistralai import Mistral\nimport agentops\n\nasync def main():\n    agentops.init(<INSERT YOUR API KEY HERE>)\n    client = Mistral(api_key=\"your_api_key\")\n\n    response = await client.chat.complete_async(\n        model=\"mistral-small-latest\",\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"Write a short summary about the poem La Belle Dame sans Merci.\",\n            },\n        ],\n    )\n\n    print(response.choices[0].message.content)\n    agentops.end_session('Success')\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Multi-Session Mode Implementation in Python\nDESCRIPTION: Example of managing multiple concurrent sessions in AgentOps, showing how to start and end multiple sessions independently.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/multiple-sessions.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nsession_1 = agentops.start_session()\nsession_2 = agentops.start_session()\n\nsession_1.end_session(end_state='Success')\nsession_2.end_session(end_state='Failure')\n```\n\n----------------------------------------\n\nTITLE: Nesting Operations Under Agents with Operation Decorator in Python\nDESCRIPTION: This snippet demonstrates how to properly nest operations under an agent using both the @agent and @operation decorators. It includes two example methods that would be tracked as separate operations under the agent.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/tracking-agents.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import agent, operation\n\n@agent\nclass ResearchAgent:\n    @operation\n    def search_web(self, query):\n        # Search implementation\n        return results\n        \n    @operation\n    def analyze_data(self, data):\n        # Analysis implementation\n        return analysis\n```\n\n----------------------------------------\n\nTITLE: Synchronous OpenAI chat completion with AgentOps\nDESCRIPTION: Full example of using OpenAI's chat completion API synchronously with AgentOps integration. Demonstrates initializing the client, making a request, and ending the session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/openai.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = OpenAI()\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    messages=[{\n        \"role\": \"user\",\n        \"content\": \"Write a haiku about AI and humans working together\"\n    }]\n)\n\nprint(response.choices[0].message.content)\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Synchronous AI21 Chat Completion with AgentOps\nDESCRIPTION: Full example of using AI21's chat completion API synchronously with AgentOps integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ai21.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ai21 import AI21Client\nfrom ai21.models.chat import ChatMessage\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = AI21Client(api_key=\"your-api-key\")\n\nmessages = [\n    ChatMessage(\n        content=\"You are a world renowned poet in the style of Edgar Allan Poe.\",\n        role=\"system\",\n    ),\n    ChatMessage(\n        content=\"Write me a short poem about the AI agents co-existing within the human brain.\",\n        role=\"user\",\n    ),\n]\n\nresponse = client.chat.completions.create(\n    messages=messages,\n    model=\"jamba-1.5-mini\",\n)\n\nprint(response.choices[0].message.content)\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent Span with Decorator\nDESCRIPTION: Demonstrates how to use the @agent decorator to track agent operations within a class.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create an agent span for tracking agent operations\nfrom agentops.sdk.decorators import agent\n\n@agent\nclass MyAgent:\n    def __init__(self, name):\n        self.name = name\n        \n    # Agent methods here\n```\n\n----------------------------------------\n\nTITLE: Agent Decorator Class Implementation\nDESCRIPTION: Example of using the @agent decorator to create an agent span for a class.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/decorators.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import agent\n\n@agent\nclass MyAgent:\n    def __init__(self, name):\n        self.name = name\n        \n    # Agent methods here\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses with Ollama and Mistral\nDESCRIPTION: Demonstrates streaming responses from Ollama using the Mistral model. Each chunk of the response is printed incrementally as it arrives, providing a real-time experience while still being monitored by AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ollama_examples/ollama_examples.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Streaming Example\nstream = ollama.chat(\n    model='mistral',\n    messages=[{\n        'role': 'user',\n        'content': 'Write a haiku about monitoring AI agents',\n    }],\n    stream=True\n)\n\nfor chunk in stream:\n    print(chunk['message']['content'], end='')\n\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses with Ollama and AgentOps\nDESCRIPTION: Example showing how to use streaming responses with Ollama while monitoring with AgentOps. Demonstrates handling token-by-token streaming output from the model.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ollama.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nimport ollama\n\nasync def main():\n    agentops.init(<INSERT YOUR API KEY HERE>)\n    ollama.pull(\"<MODEL NAME>\")\n\n    stream = ollama.chat(\n      model=\"<MODEL NAME>\",\n        messages=[{\n            'role': 'user',\n            'content': 'Write a haiku about monitoring AI agents',\n        }], \n        stream=True\n    )\n\n    for chunk in stream:\n        print(chunk['message']['content'], end='')\n\n    agentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Processing Tool Usage and Handling Response in Python\nDESCRIPTION: Extracts the tool usage from the LLM response, calls the cyberware function with the appropriate parameters, and adds the result to the message history for continued conversation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nSearchResult = \"\"\n\n# Print response content to see the data\nprint(response.content)\n\n# Assuming ToolUseBlock is at index 1\ntool_use_block = response.content[1]\n\n# Get the tool name and input\ntool_name = tool_use_block.name\ntool_input = tool_use_block.input\n\n# Extract creator (e.g., 'Militech')\ntool_creator = tool_input[\"creator\"]\n\n# Check if the tool name is \"get_cyberware_by_creator\"\nif tool_name == \"get_cyberware_by_creator\":\n    # Call the function with the tool creator as an argument\n    SearchResult = get_cyberware_by_creator(tool_creator)\n```\n\n----------------------------------------\n\nTITLE: Creating CAMEL AI RolePlaying Session\nDESCRIPTION: Initializes a CAMEL AI RolePlaying session with defined roles, models, and tools for the Apex Legends scenario.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/camel.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsearch_session = RolePlaying(\n    assistant_role_name=\"Searcher\",\n    user_role_name=\"Pathfinder\",\n    assistant_agent_kwargs=dict(\n        model=ModelFactory.create(\n            model_platform=ModelPlatformType.OPENAI,\n            model_type=ModelType.GPT_4O_MINI,\n        ),\n        tools=tools,\n    ),\n    user_agent_kwargs=dict(\n        model=ModelFactory.create(\n            model_platform=ModelPlatformType.OPENAI,\n            model_type=ModelType.GPT_4O_MINI,\n        ),\n    ),\n    task_prompt=task_prompt,\n    with_task_specify=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Using @workflow Decorator in Python with AgentOps\nDESCRIPTION: Demonstrates the usage of the @workflow decorator to create workflow spans for tracking workflows that can contain multiple operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/recording-operations.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import workflow\n\n@workflow\ndef my_workflow(data):\n    # Workflow implementation\n    return result\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in AgentOps Operations\nDESCRIPTION: Demonstrates error handling within an operation and how exceptions are automatically captured and recorded in the span.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/recording_events.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import operation\n\n@operation\ndef risky_operation():\n    # This exception will be recorded in the span\n    try:\n        1 / 0  # Ooops! Something went wrong\n    except Exception as e:\n        print(f\"Error occurred: {e}\")\n        raise\n\n# Create a session that includes the error\n@session\ndef error_session():\n    try:\n        risky_operation()\n    except Exception:\n        print(\"Caught the error, but it's still recorded in the span\")\n\n# Run the error session\nerror_session()\n```\n\n----------------------------------------\n\nTITLE: Basic Completion with Ollama and AgentOps\nDESCRIPTION: Complete example of using AgentOps to monitor a basic text completion request with Ollama. Demonstrates initializing, making a simple chat request, and ending the session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ollama.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport ollama\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\n\nollama.pull(\"<MODEL NAME>\")\nresponse = ollama.chat(\n    model=\"<MODEL NAME>\",\n    max_tokens=1024,\n    messages=[{\n        \"role\": \"user\",\n        \"content\": \"Write a haiku about AI and humans working together\"\n    }]\n)\n\nprint(response['message']['content'])\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Named Agent Decorator Implementation\nDESCRIPTION: Example of using the @agent decorator with a custom name parameter.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/decorators.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@agent(name=\"research-assistant\")\nclass MyAgent:\n    # Agent implementation\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps in Python\nDESCRIPTION: Basic code to import and initialize AgentOps with an API key.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/quickstart.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nagentops.init(<INSERT YOUR API KEY HERE>)\n```\n\n----------------------------------------\n\nTITLE: Complete Cohere chat() example with AgentOps tracking\nDESCRIPTION: A full working example demonstrating how to use Cohere's chat() method with AgentOps tracking. The code initializes tracking, sends a simple chat message to Cohere, and ends the tracking session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/cohere.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport cohere\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\n\nco = cohere.Client()\n\nchat = co.chat(\n    message=\"Is it pronounced ceaux-hear or co-hehray?\"\n)\n\nprint(chat)\n\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and Creating a Mathematician Agent with OpenAIGenerator\nDESCRIPTION: This snippet initializes AgentOps with the API key, sets up the OpenAIGenerator, and defines a MathematicianAgent class. The agent uses the OpenAIGenerator to solve math problems and explain the reasoning step by step.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/haystack_examples/haystack_openai_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initialize AgentOps with the API key\nagentops.init(\n    api_key=AGENTOPS_API_KEY,\n    default_tags=['haystack', 'llm', 'OpenAI']\n)\n\n# Initialize the OpenAIGenerator\nclient = OpenAIGenerator(model=\"o3-mini\")\n\n# Define a Mathematician Agent that uses the OpenAIGenerator to solve math problems\nclass MathematicianAgent:\n    def __init__(self, generator):\n        self.generator = generator\n\n    def solve_equation(self, equation):\n        prompt = f\"You are a mathematician. Solve the following equation and explain your reasoning step by step: {equation}\"\n        return self.generator.run(prompt)\n\n# Create an instance of the MathematicianAgent\nagent = MathematicianAgent(client)\n\n# Use the agent to solve a math problem\nresponse = agent.solve_equation(\"2x + 3 = 7\")\nprint(\"Mathematician Agent Response:\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Creating Claude API Request with Multiple Tools in Python\nDESCRIPTION: API call that defines two tools (enemyscan_tool and inventoryscan_tool) with their respective schemas and descriptions for Claude to use.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.messages.create(\n    max_tokens=5000,\n    model=\"claude-3-5-sonnet-20240620\",\n    tools=[\n        {\n            \"name\": \"enemyscan_tool\",\n            \"description\": \"Retrieve a list of demons currently present in the area.\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"amount\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Number of enemies to scan.\",\n                    }\n                },\n                \"required\": [\"amount\"],\n            },\n        },\n        {\n            \"name\": \"inventoryscan_tool\",\n            \"description\": \"Retrieve a list of weapons the Doom Slayer has at hand.\",\n            \"input_schema\": {\"type\": \"object\", \"properties\": {}, \"required\": []},\n        },\n    ],\n    messages=initial_messages,\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Initializing Langchain Agent with AgentOps Handler in Python\nDESCRIPTION: Sets up the Langchain agent with the defined tools, LLM, and AgentOps callback handler for monitoring.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_v0_example.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nagent = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n    callbacks=[\n        agentops_handler\n    ],  # You must pass in a callback handler to record your agent\n    handle_parsing_errors=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Recording Custom Event in AgentOps Session\nDESCRIPTION: Record a custom ActionEvent in a specific AgentOps session to track non-LLM events.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsession_1.record(ActionEvent(action_type=\"test event\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps in Python code\nDESCRIPTION: Python code to initialize AgentOps monitoring and end the session. This code should be added to your AG2 agent implementation with the API key inserted and the end_session method called at the end of your program.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/autogen.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nagentops.init(<INSERT YOUR API KEY HERE>)\n...\n# MUST END SESSION at end of program (e.g. main.py)\nagentops.end_session(\"Success\") # Success|Fail|Indeterminate\n```\n\n----------------------------------------\n\nTITLE: Creating Workflow Spans with Decorator\nDESCRIPTION: Example of using the @workflow decorator to track multi-operation workflows.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create workflow spans for tracking multi-operation workflows\nfrom agentops.sdk.decorators import workflow\n\n@workflow\ndef my_workflow(data):\n    # Workflow implementation\n    return result\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and OpenAI Client\nDESCRIPTION: Initializes the AgentOps tracking system with API key and tags, and creates an OpenAI client instance for making AI model requests.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"multi-agent-notebook\"])\nopenai_client = OpenAI(api_key=OPENAI_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Handling Function Call in OpenAI Assistant Run\nDESCRIPTION: This snippet demonstrates how to handle a function call from the OpenAI Assistant. It extracts the function name and arguments from the run object and calls the display_quiz function with these arguments.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# Extract single tool call\ntool_call = run.required_action.submit_tool_outputs.tool_calls[0]\nname = tool_call.function.name\narguments = json.loads(tool_call.function.arguments)\n\nprint(\"Function Name:\", name)\nprint(\"Function Arguments:\")\narguments\n```\n\n----------------------------------------\n\nTITLE: Synchronous Chat Completion with Mistral and AgentOps\nDESCRIPTION: Example of using Mistral's synchronous chat completion API with AgentOps monitoring. This initializes AgentOps, creates a Mistral client, sends a request to the Mistral API, and prints the response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/mistral.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom mistralai import Mistral\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = Mistral(api_key=\"your_api_key\")\n\nresponse = client.chat.complete(\n    model=\"mistral-small-latest\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Explain the history of the French Revolution.\"\n        }\n    ],\n)\n\nprint(response.choices[0].message.content)\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Tracking MultiOn Events with AgentOps Automatically\nDESCRIPTION: This code demonstrates how to initialize MultiOn with AgentOps integration, perform a web browse action, and end the AgentOps session. It uses the AgentOps API key to automatically track MultiOn events.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Autonomous_web_browsing.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmultion = MultiOn(\n    api_key=MULTION_API_KEY,\n    agentops_api_key=AGENTOPS_API_KEY,\n)\ncmd = \"what three things do i get with agentops\"\nrequest_options = RequestOptions(\n    timeout_in_seconds=60, max_retries=4, additional_headers={\"test\": \"ing\"}\n)\n\nbrowse_response = multion.browse(\n    cmd=\"what three things do i get with agentops\",\n    url=\"https://www.agentops.ai/\",\n    max_steps=4,\n    include_screenshot=True,\n    request_options=request_options,\n)\n\nprint(browse_response.message)\n\n# End session to see your dashboard\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Defining Function JSON for OpenAI Assistant in Python\nDESCRIPTION: This code defines the JSON structure for the display_quiz function, which is used to register the function with the OpenAI Assistant. It specifies the function's parameters and their types.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfunction_json = {\n    \"name\": \"display_quiz\",\n    \"description\": \"Displays a quiz to the student, and returns the student's response. A single quiz can have multiple questions.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"title\": {\"type\": \"string\"},\n            \"questions\": {\n                \"type\": \"array\",\n                \"description\": \"An array of questions, each with a title and potentially options (if multiple choice).\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"question_text\": {\"type\": \"string\"},\n                        \"question_type\": {\n                            \"type\": \"string\",\n                            \"enum\": [\"MULTIPLE_CHOICE\", \"FREE_RESPONSE\"],\n                        },\n                        \"choices\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                    },\n                    \"required\": [\"question_text\"],\n                },\n            },\n        },\n        \"required\": [\"title\", \"questions\"],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using @agent and @operation Decorators in Python with AgentOps\nDESCRIPTION: Shows how to use the @agent decorator to create an agent span and nest @operation decorators within it for tracking agent operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/recording-operations.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import agent, operation\n\n@agent\nclass MyAgent:\n    @operation\n    def perform_task(self, task):\n        # Operation implementation\n        return result\n```\n\n----------------------------------------\n\nTITLE: Starting a New AgentOps Session with Custom Tags\nDESCRIPTION: Begins a new monitoring session with AgentOps using a custom tag. This allows separating different usage scenarios or experiments in the AgentOps dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai-gpt.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create new session\nagentops.start_session(tags=[\"openai-gpt-notebook-events\"])\n```\n\n----------------------------------------\n\nTITLE: Managing Tags in AgentOps Sessions\nDESCRIPTION: The add_tags() and set_tags() functions allow modification of session tags at runtime. add_tags() appends new tags, while set_tags() replaces existing tags.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/sdk-reference.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nadd_tags(tags: List[str])\n```\n\nLANGUAGE: python\nCODE:\n```\nset_tags(tags: List[str])\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes to AgentOps Spans\nDESCRIPTION: Shows how to add custom attributes to spans for additional context, including naming operations and sessions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/recording_events.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import operation\n\n@operation(name=\"custom-operation\")\ndef custom_operation(data):\n    # Your operation logic here\n    return f\"Custom: {data}\"\n\n# Create a session with custom operation\n@session(name=\"custom-session\")\ndef custom_session():\n    result = custom_operation(\"test\")\n    print(result)\n\n# Run the custom session\ncustom_session()\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps in Python\nDESCRIPTION: Python code to import and initialize AgentOps with an API key.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/crewai.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nagentops.init(<INSERT YOUR API KEY HERE>)\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Span in Python with AgentOps\nDESCRIPTION: Demonstrates how to create a session span using the @session decorator. Session spans serve as the root for all other spans and represent a complete execution of an agent workflow.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/events.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import session\n\n@session\ndef my_workflow():\n    # Your session code here\n    return result\n```\n\n----------------------------------------\n\nTITLE: Creating Thread and Run for Quiz Generation in Python\nDESCRIPTION: This snippet creates a new thread and run to request the Assistant to generate a quiz with specific requirements.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nthread, run = create_thread_and_run(\n    \"Make a quiz with 2 questions: One open ended, one multiple choice. Then, give me feedback for the responses.\"\n)\nrun = wait_on_run(run, thread)\nrun.status\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration and Interaction - Python\nDESCRIPTION: Complex example showing agent setup with shields, tools, and interaction handling including Brave search integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/llama_stack_example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom llama_stack_client import LlamaStackClient\nfrom llama_stack_client.lib.agents.agent import Agent\nfrom llama_stack_client.lib.agents.event_logger import EventLogger\nfrom llama_stack_client.types.agent_create_params import AgentConfig\n\nagentops.start_session()\n\nLLAMA_STACK_PORT = 5001\n\n# Replace with actual API keys for functionality\nBRAVE_SEARCH_API_KEY = os.getenv(\"BRAVE_SEARCH_API_KEY\") or \"your-brave-search-api-key\"\n\nasync def agent_test():\n    client = LlamaStackClient(\n        base_url=f\"http://0.0.0.0:{LLAMA_STACK_PORT}\",\n    )\n\n    available_shields = [shield.identifier for shield in client.shields.list()]\n    if not available_shields:\n        print(\"No available shields. Disable safety.\")\n    else:\n        print(f\"Available shields found: {available_shields}\")\n    available_models = [model.identifier for model in client.models.list()]\n    if not available_models:\n        raise ValueError(\"No available models\")\n    else:\n        selected_model = available_models[0]\n        print(f\"Using model: {selected_model}\")\n\n    agent_config = AgentConfig(\n        model=selected_model,\n        instructions=\"You are a helpful assistant. Just say hello as a greeting.\",\n        sampling_params={\n            \"strategy\": \"greedy\",\n            \"temperature\": 1.0,\n            \"top_p\": 0.9,\n        },\n        tools=[\n            {\n                \"type\": \"brave_search\",\n                \"engine\": \"brave\",\n                \"api_key\": BRAVE_SEARCH_API_KEY,\n            }\n        ],\n        tool_choice=\"auto\",\n        tool_prompt_format=\"json\",\n        input_shields=available_shields if available_shields else [],\n        output_shields=available_shields if available_shields else [],\n        enable_session_persistence=False,\n    )\n    agent = Agent(client, agent_config)\n    user_prompts = [\n        \"Hello\",\n        \"Which players played in the winning team of the NBA western conference semifinals of 2014, please use tools\",\n    ]\n\n    session_id = agent.create_session(\"test-session\")\n\n    for prompt in user_prompts:\n        response = agent.create_turn(\n            messages=[\n                {\n                    \"role\": \"user\",\n                    \"content\": prompt,\n                }\n            ],\n            session_id=session_id,\n        )\n\n        print(f\"{response=}\")\n\n        for log in EventLogger().log(response):\n            log.print()\n\nagentops.start_session()\n\nawait agent_test()\n\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Launching MultiOn Browse Event with Manual AgentOps Integration\nDESCRIPTION: This code demonstrates how to manually integrate MultiOn browse events with an existing AgentOps session. It performs a web browse action and prints the response message.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Autonomous_web_browsing.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmultion = MultiOn(\n    api_key=MULTION_API_KEY,\n    agentops_api_key=AGENTOPS_API_KEY,\n)\ncmd = \"what three things do i get with agentops\"\nrequest_options = RequestOptions(\n    timeout_in_seconds=60, max_retries=4, additional_headers={\"test\": \"ing\"}\n)\n\nbrowse_response = multion.browse(\n    cmd=\"what three things do i get with agentops\",\n    url=\"https://www.agentops.ai/\",\n    max_steps=4,\n    include_screenshot=True,\n    request_options=request_options,\n)\n\nprint(browse_response.message)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Client for Monitoring\nDESCRIPTION: Initialization of the AgentOps client with an API key and default tags for tracking the chatbot's performance.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_sync.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"openai-sync-example\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Handoffs\nDESCRIPTION: Example showing how to implement language-based agent handoffs between Spanish and English speaking agents.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/agentssdk.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agents import Agent, Runner\nimport asyncio\nimport agentops\n\n# Initialize AgentOps\nagentops.init()\n\nspanish_agent = Agent(\n    name=\"Spanish agent\",\n    instructions=\"You only speak Spanish.\",\n)\n\nenglish_agent = Agent(\n    name=\"English agent\",\n    instructions=\"You only speak English\",\n)\n\ntriage_agent = Agent(\n    name=\"Triage agent\",\n    instructions=\"Handoff to the appropriate agent based on the language of the request.\",\n    handoffs=[spanish_agent, english_agent],\n)\n\n\nasync def main():\n    result = await Runner.run(triage_agent, input=\"Hola, Â¿cÃ³mo estÃ¡s?\")\n    print(result.final_output)\n    # Â¡Hola! Estoy bien, gracias por preguntar. Â¿Y tÃº, cÃ³mo estÃ¡s?\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps LangchainCallbackHandler and LLM\nDESCRIPTION: Creates an instance of the AgentOps LangchainCallbackHandler and initializes the LLM with the callback handler. Sets up a chat prompt template for the agent.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/langchain.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops_handler = AgentOpsLangchainCallbackHandler(\n    api_key=AGENTOPS_API_KEY, tags=[\"Langchain Example\"]\n)\n\nllm = ChatOpenAI(\n    openai_api_key=OPENAI_API_KEY, callbacks=[agentops_handler], model=\"gpt-3.5-turbo\"\n)\n\nllm.callbacks = [agentops_handler]\n\nprompt = ChatPromptTemplate.from_messages(\n    [\n        (\"system\", \"You are a helpful assistant. Respond only in Spanish.\"),\n        (\"human\", \"{input}\"),\n        (\"placeholder\", \"{agent_scratchpad}\"),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with Default Tags\nDESCRIPTION: Setting up AgentOps for tracking interactions with Anthropic's Claude AI, including default tags for categorization.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"anthropic-example-tool-tutorials\"])\n```\n\n----------------------------------------\n\nTITLE: Generating Chatbot Response using XAI's Grok Model\nDESCRIPTION: Uses the OpenAI client to generate a response by passing the system and instruction prompts to the Grok-beta model.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_examples.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat.completions.create(\n    model=\"grok-beta\",\n    messages=[\n        {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n        {\"role\": \"user\", \"content\": INSTRUCTION_PROMPT}\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of AgentOps v0.4\nDESCRIPTION: Demonstrates the practical usage of AgentOps v0.4 including tracing core initialization, session creation, and implementation of traced agents and tools.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/sdk/README.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops import Session, agent, tool\nfrom agentops.sdk import TracingCore, TracingConfig\n\n# Initialize the tracing core with a dedicated configuration\nTracingCore.get_instance().initialize(\n    service_name=\"my-service\",\n    exporter_endpoint=\"https://my-exporter-endpoint.com\",\n    max_queue_size=1000,\n    max_wait_time=10000\n)\n\n# Create a session (master trace)\nwith Session() as session:\n    # Create an agent\n    @agent\n    class MyAgent:\n        def __init__(self, name):\n            self.name = name\n        \n        def run(self):\n            # Agent operations are automatically traced\n            result = self.use_tool()\n            return result\n        \n        @tool\n        def use_tool(self):\n            # Tool operations are automatically traced\n            return \"Tool result\"\n    \n    # Use the agent\n    agent = MyAgent(\"Agent1\")\n    result = agent.run()\n```\n\n----------------------------------------\n\nTITLE: Using the QA Agent to Generate Test Code\nDESCRIPTION: Makes a request to the QA agent to generate unit tests for the previously created prime number function.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngenerated_test = qa.completion(\n    \"Write a python unit test that test the following function: \\n \" + generated_func\n)\n```\n\n----------------------------------------\n\nTITLE: Invoking Langchain Agent with AgentOps Monitoring in Python\nDESCRIPTION: Demonstrates how to invoke the Langchain agent with a query while using AgentOps for monitoring.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_v0_example.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nagent.invoke(\"What comedies are playing?\", callbacks=[agentops_handler])\n```\n\n----------------------------------------\n\nTITLE: Using Code Interpreter with OpenAI Assistant in Python\nDESCRIPTION: This snippet shows how to use the Code Interpreter tool with an OpenAI Assistant. It creates a thread, runs a request, and displays the response using the code interpreter.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nthread, run = create_thread_and_run(\"Generate the first 20 fibbonaci numbers with code.\")\nrun = wait_on_run(run, thread)\npretty_print(get_response(thread))\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing LangChain Agent with AgentOps Monitoring\nDESCRIPTION: Creates a LangChain agent with the defined tool and executes it while recording all actions in the AgentOps dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/langchain.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagent = create_openai_tools_agent(llm, tools, prompt)\nagent_executor = AgentExecutor(agent=agent, tools=tools)\n\nagent_executor.invoke(\n    {\"input\": \"What comedies are playing?\"}, config={\"callback\": [agentops_handler]}\n)\n```\n\n----------------------------------------\n\nTITLE: Basic AgentOps and Anthropic Integration\nDESCRIPTION: Basic setup code showing initialization of AgentOps and Anthropic client, including session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/anthropic.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom anthropic import Anthropic\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = Anthropic()\n...\n# End of program (e.g. main.py)\nagentops.end_session(\"Success\") # Success|Fail|Indeterminate\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI and AgentOps Clients\nDESCRIPTION: Initializes the OpenAI client with the API key and configures AgentOps with monitoring tags. This setup allows AgentOps to track OpenAI API interactions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/simple_agent.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nopenai = OpenAI(api_key=OPENAI_API_KEY)\nagentops.init(AGENTOPS_API_KEY, tags=[\"openai-gpt-notebook\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Search Agent with AgentOps and Tavily\nDESCRIPTION: Sets up the environment by loading environment variables, initializing AgentOps, and creating a Tavily client instance for web searches. Requires API keys for both services.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/web_search_agent.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport agentops\nfrom dotenv import load_dotenv\nfrom swarmzero import Agent\nfrom tavily import TavilyClient\n\nload_dotenv()\nagentops.init(os.getenv(\"AGENTOPS_API_KEY\"))\ntavily_client = TavilyClient(api_key=os.getenv(\"TAVILY_API_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with AgentOps\nDESCRIPTION: Defines an agent class using the @agent decorator and includes an operation method for processing data.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/recording_events.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import agent, operation\n\n@agent\nclass MyAgent:\n    @operation\n    def process_data(self, data):\n        print(f\"Processing data: {data}\")\n        return f\"Processed: {data.upper()}\"\n```\n\n----------------------------------------\n\nTITLE: Executing the Job Posting Creation Workflow with AgentOps Tracking\nDESCRIPTION: The main execution script that initializes AgentOps tracking, sets up the crew of agents with their tasks, and handles the creation process. It gathers user input about the company and job requirements, then coordinates the agents to produce a final job posting.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/job_posting.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(default_tags=[\"crew-job-posting-example\"])\n\ntasks = Tasks()\nagents = Agents()\n\ncompany_description = input(\"What is the company description?\\n\")\ncompany_domain = input(\"What is the company domain?\\n\")\nhiring_needs = input(\"What are the hiring needs?\\n\")\nspecific_benefits = input(\"What are specific_benefits you offer?\\n\")\n\n# Create Agents\nresearcher_agent = agents.research_agent()\nwriter_agent = agents.writer_agent()\nreview_agent = agents.review_agent()\n\n# Define Tasks for each agent\nresearch_company_culture_task = tasks.research_company_culture_task(\n    researcher_agent, company_description, company_domain\n)\nindustry_analysis_task = tasks.industry_analysis_task(researcher_agent, company_domain, company_description)\nresearch_role_requirements_task = tasks.research_role_requirements_task(researcher_agent, hiring_needs)\ndraft_job_posting_task = tasks.draft_job_posting_task(\n    writer_agent, company_description, hiring_needs, specific_benefits\n)\nreview_and_edit_job_posting_task = tasks.review_and_edit_job_posting_task(review_agent, hiring_needs)\n\n# Instantiate the crew with a sequential process\ncrew = Crew(\n    agents=[researcher_agent, writer_agent, review_agent],\n    tasks=[\n        research_company_culture_task,\n        industry_analysis_task,\n        research_role_requirements_task,\n        draft_job_posting_task,\n        review_and_edit_job_posting_task,\n    ],\n)\n\ntry:\n    # Kick off the process\n    result = crew.kickoff()\nexcept StdinNotImplementedError:\n    # This is only necessary for AgentOps testing automation which is headless and will not have user input\n    print(\"Stdin not implemented. Skipping kickoff()\")\n\nprint(\"Job Posting Creation Process Completed.\")\nprint(\"Final Job Posting:\")\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Defining Titan Personality Presets\nDESCRIPTION: Creates a list of personality descriptions for different Titan types (Legion, Northstar, and Ronin) that will influence the generated messages.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-async.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nTitanPersonality = [\n    \"Legion is a relentless and heavy-hitting Titan that embodies brute strength and defensive firepower. He speaks bluntly.,\",\n    \"Northstar is a precise and agile sniper that excels in long-range combat and flight. He speaks with an edge of coolness to him\",\n    \"Ronin is a swift and aggressive melee specialist who thrives on close-quarters hit-and-run tactics. He talks like a Samurai might.\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using Retrieval with OpenAI Assistant in Python\nDESCRIPTION: This snippet demonstrates how to use the Retrieval tool with an OpenAI Assistant. It creates a thread, runs a request about the uploaded PDF, and displays the response using retrieval.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nthread, run = create_thread_and_run(\n    \"What are some cool math concepts behind this ML paper pdf? Explain in two sentences.\"\n)\nrun = wait_on_run(run, thread)\npretty_print(get_response(thread))\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Operation with AgentOps\nDESCRIPTION: Example of creating a simple operation using the @operation decorator to track function execution.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/recording-operations.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import operation\n\n@operation\ndef add(x, y):\n    return x + y\n```\n\n----------------------------------------\n\nTITLE: Making a ChatCompletion Request with Monitoring\nDESCRIPTION: Creates a simple chat completion request to OpenAI's GPT-3.5-turbo model asking it to write a poem. AgentOps automatically captures this API call for monitoring without additional code changes.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai-gpt.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage = [{\"role\": \"user\", \"content\": \"Write a 12 word poem about secret agents.\"}]\nresponse = openai.chat.completions.create(\n    model=\"gpt-3.5-turbo\", messages=message, temperature=0.5, stream=False\n)\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Nesting Decorators for Span Hierarchy\nDESCRIPTION: Demonstrates how to nest decorators to create a proper span hierarchy for complex agent workflows.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Nest decorators for proper span hierarchy\nfrom agentops.sdk.decorators import session, agent, operation\n\n@agent\nclass MyAgent:\n    @operation\n    def nested_operation(self, message):\n        return f\"Processed: {message}\"\n        \n    @operation\n    def main_operation(self):\n        result = self.nested_operation(\"test message\")\n        return result\n\n@session\ndef my_session():\n    agent = MyAgent()\n    return agent.main_operation()\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Client\nDESCRIPTION: Initializes AgentOps client with API key and default tags for tracking and monitoring.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(api_key=AGENTOPS_API_KEY, default_tags=[\"camel\", \"examples\", \"single-agent\", \"multi-agent\"])\n```\n\n----------------------------------------\n\nTITLE: Testing Synchronous Generation with Gemini API\nDESCRIPTION: This code demonstrates synchronous text generation using the Gemini model. It generates content based on a prompt about the three laws of robotics.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/gemini_examples/gemini_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Testing synchronous generation:\")\nresponse = model.generate_content(\n    \"What are the three laws of robotics?\",\n    # session=ao_client\n)\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys from Environment Variables\nDESCRIPTION: Loads environment variables and sets API keys for Anthropic and AgentOps, with fallback placeholders if environment variables aren't found.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-async.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nANTHROPIC_API_KEY = os.getenv(\"ANTHROPIC_API_KEY\") or \"<your_anthropic_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Function and Collecting Responses in Python\nDESCRIPTION: This snippet calls the display_quiz function with the arguments provided by the Assistant and collects the responses.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nresponses = display_quiz(arguments[\"title\"], arguments[\"questions\"])\nprint(\"Responses:\", responses)\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous AI21 Client\nDESCRIPTION: This snippet creates an asynchronous AI21 client using the API key.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\naclient = AsyncAI21Client(api_key=AI21_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Async Story Generation\nDESCRIPTION: Async function to generate story using OpenAI chat completions API\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_async.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    response = await client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=messages,\n    )\n\n    print(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Using @session Decorator in Python with AgentOps\nDESCRIPTION: Demonstrates the usage of the @session decorator to create a session span, which serves as the root for all other spans in the instrumentation hierarchy.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/recording-operations.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import session\n\n@session\ndef my_workflow():\n    # Your session code here\n    return result\n```\n\n----------------------------------------\n\nTITLE: Synchronous Gemini Example\nDESCRIPTION: Complete example of using Gemini with AgentOps in synchronous mode to generate content.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/gemini.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport google.generativeai as genai\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nmodel = genai.GenerativeModel(\"gemini-1.5-flash\")\n\nresponse = model.generate_content(\n    \"Write a haiku about AI and humans working together\"\n)\n\nprint(response.text)\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Defining QA and Engineer Agents with AgentOps Tracking\nDESCRIPTION: This snippet defines two agent classes, QaAgent and EngineerAgent, decorated with @track_agent for AgentOps tracking. Each agent has a completion method that uses the Groq API to generate responses based on specific prompts.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@track_agent(name=\"qa\")\nclass QaAgent:\n    def completion(self, prompt: str):\n        res = groq_client.chat.completions.create(\n            model=\"llama3-70b-8192\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are a qa engineer and only output python code, no markdown tags.\",\n                },\n                {\"role\": \"user\", \"content\": prompt},\n            ],\n            temperature=0.5,\n        )\n        return res.choices[0].message.content\n\n\n@track_agent(name=\"engineer\")\nclass EngineerAgent:\n    def completion(self, prompt: str):\n        res = groq_client.chat.completions.create(\n            model=\"llama3-70b-8192\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are a software engineer and only output python code, no markdown tags.\",\n                },\n                {\"role\": \"user\", \"content\": prompt},\n            ],\n            temperature=0.5,\n        )\n        return res.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Setting Required AgentOps API Key in Environment Variables\nDESCRIPTION: Demonstrates how to set up the required API key in a .env file to authenticate with the AgentOps platform. This is the minimum configuration needed to start using AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/advanced-configuration.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Architecture Diagram using Mermaid\nDESCRIPTION: Flowchart diagram illustrating the relationships between core components, span classes, decorators, and user-facing classes in the AgentOps v0.4 architecture.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/sdk/README.md#2025-04-07_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    %% Core Tracing Components\n    subgraph \"Core Tracing Infrastructure\"\n        TracingCore[Tracing Core]\n        TracingConfig[Tracing Config]\n        SpanFactory[Span Factory]\n        SpanProcessor[Span Processor]\n        SpanExporter[Span Exporter]\n        \n        TracingConfig --> TracingCore\n        TracingCore --> SpanFactory\n        TracingCore --> SpanProcessor\n        SpanProcessor --> SpanExporter\n    end\n    \n    %% Span Base Classes\n    subgraph \"Span Base Classes\"\n        TracedObject[TracedObject]\n    end\n    \n    %% Span Types\n    subgraph \"Span Types\"\n        SessionSpan[SessionSpan]\n        AgentSpan[AgentSpan]\n        ToolSpan[ToolSpan]\n        LLMSpan[LLMSpan]\n        CustomSpan[CustomSpan]\n        \n        TracedObject --> SessionSpan\n        TracedObject --> AgentSpan\n        TracedObject --> ToolSpan\n        TracedObject --> LLMSpan\n        TracedObject --> CustomSpan\n    end\n    \n    %% Decorators\n    subgraph \"Decorators\"\n        SessionDecorator[session]\n        AgentDecorator[agent]\n        ToolDecorator[tool]\n        LLMDecorator[llm]\n        \n        AgentDecorator --> AgentSpan\n        ToolDecorator --> ToolSpan\n        SessionDecorator --> SessionSpan\n        LLMDecorator --> LLMSpan\n    end\n    \n    %% User-Facing Classes\n    subgraph \"User-Facing Classes\"\n        Session[Session]\n        Agent[Agent]\n        Tool[Tool]\n        \n        SessionSpan --> Session\n        AgentSpan --> Agent\n        ToolSpan --> Tool\n    end\n    \n    %% Relationships\n    SpanFactory --> TracedObject\n    Session -.->|\"Master Trace\"| Agent\n    Session -.->|\"Master Trace\"| Tool\n    \n    %% Context Management\n    subgraph \"Context Management\"\n        SpanContext[Span Context]\n        Registry[Registry]\n        \n        SpanContext <--> Registry\n    end\n    \n    TracingCore <--> SpanContext\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Agent Code Review Process\nDESCRIPTION: Demonstrates interaction between Python expert and code reviewer agents for code optimization and review.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Start a conversation about code optimization\nmessage = BaseMessage(\n    role_name=\"Human\",\n    role_type=\"human\",\n    meta_dict={\"timestamp\": \"2024-01-01T00:00:01\"},\n    content=\"I need help optimizing this Python function for calculating prime numbers:\\ndef is_prime(n):\\n    for i in range(2, n):\\n        if n % i == 0:\\n            return False\\n    return True\"\n)\n\n# Get assistant's response\nassistant_response = assistant.step(message)\nprint(\"Assistant's suggestion:\", assistant_response.msgs[0].content)\n\n# Get reviewer's feedback\nreviewer_message = BaseMessage(\n    role_name=\"Human\",\n    role_type=\"human\",\n    meta_dict={\"timestamp\": \"2024-01-01T00:00:02\"},\n    content=f\"Please review this code suggestion:\\n{assistant_response.msgs[0].content}\"\n)\nreviewer_response = reviewer.step(reviewer_message)\nprint(\"\\nReviewer's feedback:\", reviewer_response.msgs[0].content)\n\n# Implement reviewer's suggestions\nimprovement_message = BaseMessage(\n    role_name=\"Human\",\n    role_type=\"human\",\n    meta_dict={\"timestamp\": \"2024-01-01T00:00:03\"},\n    content=f\"Please improve the code based on this feedback:\\n{reviewer_response.msgs[0].content}\"\n)\nfinal_response = assistant.step(improvement_message)\nprint(\"\\nFinal improved code:\", final_response.msgs[0].content)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Streaming Chat\nDESCRIPTION: Example of making an asynchronous streaming chat request to Mistral API with response handling.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/mistral_examples/mistral_example.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def main() -> None:\n    response = await client.chat.stream_async(\n        model=\"open-mistral-nemo\",\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"What is the meaning of life?\",\n            }\n        ],\n    )\n\n    result = \"\"\n    async for event in response:\n        if event.data.choices[0].finish_reason == \"stop\":\n            print(result)\n        else:\n            result += event.data.choices[0].delta.content\n\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Integrating AgentOps in Python code\nDESCRIPTION: Basic setup to integrate AgentOps in Python code. It initializes AgentOps with an API key and ends the session with a status.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/camel.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nagentops.init(<INSERT YOUR API KEY HERE>)\n\n# your code here\n\nagentops.end_session(\"Success\") # Success|Fail|Indeterminate\n```\n\n----------------------------------------\n\nTITLE: Manually Recording Custom Events in AgentOps\nDESCRIPTION: Shows how to manually create and record a custom event in AgentOps by detecting specific content in an OpenAI response and logging the interaction details.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/simple_agent.mdx#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops import ActionEvent\n\nmessage = ({\"role\": \"user\", \"content\": \"Hello\"},)\nresponse = openai.chat.completions.create(\n    model=\"gpt-3.5-turbo\", messages=message, temperature=0.5\n)\n\nif \"hello\" in str(response.choices[0].message.content).lower():\n    agentops.record(\n        ActionEvent(\n            action_type=\"Agent says hello\",\n            logs=str(message),\n            returns=str(response.choices[0].message.content),\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and LiteLLM Model\nDESCRIPTION: Set up AgentOps for observability and initialize the LiteLLM model for the agent. This includes loading environment variables for API keys.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/text_to_sql.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom dotenv import load_dotenv\nimport os\nfrom smolagents import CodeAgent, LiteLLMModel\n\nload_dotenv()\n\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"your_agentops_api_key\"\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"your_openai_api_key\"\n\nagentops.init(api_key=AGENTOPS_API_KEY, default_tags=[\"smolagents\", \"example\", \"text-to-sql\"])\nmodel = LiteLLMModel(\"openai/gpt-4o-mini\")\n```\n\n----------------------------------------\n\nTITLE: Making an Untracked LLM Call to Demonstrate Default Agent Behavior\nDESCRIPTION: Makes an LLM call outside the context of a tracked agent to demonstrate how it gets assigned to the Default Agent in AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nres = openai_client.chat.completions.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are not a tracked agent\"},\n        {\"role\": \"user\", \"content\": \"Say hello\"},\n    ],\n)\nres.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API key in environment variables\nDESCRIPTION: Example of how to set the AgentOps API key in the .env file for authentication with the AgentOps service.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/restapi.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Using @agent Decorator for Class in Python with AgentOps\nDESCRIPTION: Shows how to use the @agent decorator to create an agent span for tracking agent operations on a class level.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/recording-operations.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import agent\n\n@agent\nclass MyAgent:\n    def __init__(self, name):\n        self.name = name\n        \n    # Agent methods here\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for AgentOps Multi-Agent Example\nDESCRIPTION: Imports the required libraries for the multi-agent example, including the AgentOps SDK with its decorators, OpenAI client, and utility modules for environment variables and display.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom agentops.sdk.decorators import agent, operation\nfrom openai import OpenAI\nimport os\nfrom dotenv import load_dotenv\nimport logging\nfrom IPython.display import display, Markdown\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM Model with AgentOps Tracking\nDESCRIPTION: Initializes the AgentOps tracking with tags and configures the LiteLLMModel using GPT-4o-mini.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/multi_smolagents_system.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom smolagents import LiteLLMModel\n\nagentops.init(api_key=AGENTOPS_API_KEY, default_tags=[\"smolagents\", \"example\", \"multi-agent\"])\nmodel = LiteLLMModel(\"openai/gpt-4o-mini\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Monitoring Assistant Run\nDESCRIPTION: Creating a run with the assistant and monitoring its execution status.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrun = client.beta.threads.runs.create(\n    thread_id=thread.id,\n    assistant_id=assistant.id,\n)\nshow_json(run)\n\nrun = wait_on_run(run, thread)\nshow_json(run)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in AgentOps Spans\nDESCRIPTION: Demonstration of automatic error capturing within spans using try-except blocks and session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/recording-operations.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import operation\n\n@operation\ndef risky_operation():\n    # This exception will be recorded in the span\n    try:\n        1 / 0  # Ooops! Something went wrong\n    except Exception as e:\n        print(f\"Error occurred: {e}\")\n        raise\n\n# Create a session that includes the error\n@session\ndef error_session():\n    try:\n        risky_operation()\n    except Exception:\n        print(\"Caught the error, but it's still recorded in the span\")\n\n# Run the error session\nerror_session()\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Anthropic Integration Example\nDESCRIPTION: Complete example of using Anthropic's Claude model asynchronously with AgentOps for generating a haiku.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/anthropic.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom anthropic import AsyncAnthropic\nimport agentops\nimport asyncio\n\nasync def main():\n    agentops.init(<INSERT YOUR API KEY HERE>)\n    client = AsyncAnthropic()\n\n    message = await client.messages.create(\n        model=\"claude-3-opus-20240229\",\n        max_tokens=1024,\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"Write a haiku about AI and humans working together\"\n        }]\n    )\n\n    print(message.content)\n    agentops.end_session('Success')\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Run Status Monitoring Function\nDESCRIPTION: Helper function to poll and monitor the status of an assistant run until completion.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\ndef wait_on_run(run, thread):\n    while run.status == \"queued\" or run.status == \"in_progress\":\n        run = client.beta.threads.runs.retrieve(\n            thread_id=thread.id,\n            run_id=run.id,\n        )\n        time.sleep(0.5)\n    return run\n```\n\n----------------------------------------\n\nTITLE: Setting up LangChain Agent with AgentOps Callback Handler\nDESCRIPTION: Code to set up a LangChain agent with the AgentOps callback handler. This enables automatic recording of LangChain sessions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/langchain.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhandler = LangchainCallbackHandler(api_key=AGENTOPS_API_KEY, tags=['LangChain Example'])\n\n\n\nllm = ChatOpenAI(openai_api_key=OPENAI_API_KEY,\n\tcallbacks=[handler],\n\tmodel='gpt-3.5-turbo')\n\nagent = initialize_agent(tools,\n\tllm,\n\tagent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n\tverbose=True,\n\tcallbacks=[handler], # You must pass in a callback handler to record your agent\n\thandle_parsing_errors=True)\n```\n\n----------------------------------------\n\nTITLE: Loading API Keys from Environment Variables\nDESCRIPTION: Code to retrieve OpenAI and AgentOps API keys from environment variables using dotenv, with fallback to placeholder values.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_sync.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Integrating AgentOps with AI21\nDESCRIPTION: Python code snippet demonstrating how to initialize AgentOps and AI21 clients, and integrate them into your project.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ai21.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ai21 import AI21Client\nfrom ai21.models.chat import ChatMessage\nimport agentops\n\n# Initialize clients\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = AI21Client(api_key=\"your-api-key\")\n\n# Your AI21 code here...\n\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with SwarmZero\nDESCRIPTION: Python code that demonstrates how to set up environment variables using dotenv, initialize AgentOps with an API key, and import SwarmZero components to begin using them together.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nload_dotenv()\n\nimport agentops\nagentops.init(<INSERT YOUR API KEY HERE>)\n\nfrom swarmzero import Agent, Swarm\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring AgentOps Client in Python\nDESCRIPTION: The Configuration class stores settings for AgentOps clients, including API keys, endpoints, and queue parameters. It provides properties for getting and setting these configurations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/sdk-reference.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Configuration:\n    def __init__(self, api_key: str = None, parent_key: str = None, endpoint: str = None, max_wait_time: int = 30000, max_queue_size: int = 100):\n        # ... initialization code ...\n\n    @property\n    def api_key(self) -> str:\n        # ... getter code ...\n\n    @api_key.setter\n    def api_key(self, value: str):\n        # ... setter code ...\n\n    # ... other properties and methods ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Async Function\nDESCRIPTION: Creates and executes the main async function that runs both the UUID generation and message request concurrently using asyncio.gather(), then prints the results including Titan personality, health status, verification UUIDs, and the generated message.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-async.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    # Start both tasks concurrently\n    uuids, message = await asyncio.gather(generate_uuids(), req())\n\n    print(\"Personality:\", Personality)\n    print(\"Health Status:\", Health)\n    print(\"Combat log incoming from encrypted area\")\n\n    print(\"Verification matrix activated.:\")\n    for u in uuids:\n        print(u)\n\n    print(\". Titan Message: \", message)\n\n\n# Run the main function\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Imports the OpenAI client, AgentOps monitoring library, os module for environment variables, and dotenv for loading environment variables from .env files.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/simple_agent.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Ending the Event Tracking Session\nDESCRIPTION: Ends the AgentOps monitoring session with a success status after completing the event tracking demonstrations, finalizing the session data in the dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/simple_agent.mdx#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK via pip or poetry\nDESCRIPTION: Commands to install the AgentOps SDK using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/quickstart.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Chat Messages\nDESCRIPTION: Creating the initial user message that instructs Claude to adopt the VEGA persona and analyze mission data for the Doom Slayer.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# We make our history a separate block to be easier to add to later on! This is essentially our history\ninitial_messages = [\n    {\n        \"role\": \"user\",\n        \"content\": \"You are VEGA, the assistant to the DOOMGUY. Get three missions from the ship's API and tell me which mission is most to least important for quellng the forces of hell.  \",\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with TaskWeaver in Python\nDESCRIPTION: Code snippet showing how to import the TaskWeaver handler from AgentOps, initialize the AgentOps client, and set up basic TaskWeaver integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/taskweaver.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom agentops.partners.taskweaver_event_handler import TaskWeaverEventHandler\nfrom taskweaver.app.app import TaskWeaverApp\n\nagentops.init(<INSERT YOUR API KEY HERE>)\n\n# Your TaskWeaver code here\n\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Creating Workflow Span in Python with AgentOps\nDESCRIPTION: Demonstrates how to create a workflow span using the @workflow decorator. Workflow spans represent a sequence of operations that form a workflow and can contain multiple operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/events.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import workflow\n\n@workflow\ndef my_workflow(data):\n    # Workflow implementation\n    return result\n```\n\n----------------------------------------\n\nTITLE: Implementing PhilosopherAgent Class\nDESCRIPTION: Definition of the PhilosopherAgent class that uses AnthropicGenerator to process philosophical queries, including AgentOps initialization for monitoring.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/haystack_examples/haystack_anthropic_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Initialize AgentOps with the API key\nagentops.init(\n    api_key=AGENTOPS_API_KEY,\n    default_tags=['haystack', 'llm', 'Anthropic']\n)\n\n# Initialize the Anthropic Generator\ngenerator = AnthropicGenerator()\n\n# Define a Philosopher Agent that uses the AnthropicGenerator to answer philosophical queries\nclass PhilosopherAgent:\n    def __init__(self, generator):\n        self.generator = generator\n\n    def answer_question(self, question):\n        prompt = f\"You are a thoughtful philosopher. Answer the following question with deep insight and detailed reasoning: {question}\"\n        return self.generator.run(prompt)\n\n# Create an instance of the PhilosopherAgent\nagent = PhilosopherAgent(generator)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Setting API Keys in AgentOps\nDESCRIPTION: The get_api_key() function retrieves the current API key, while set_parent_key() sets the parent organization's API key for broader visibility.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/sdk-reference.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nget_api_key() -> str\n```\n\nLANGUAGE: python\nCODE:\n```\nset_parent_key(parent_key: str)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Streaming AI21 Chat Completion with AgentOps\nDESCRIPTION: Example of using AI21's streaming chat completion API synchronously with AgentOps integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ai21.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ai21 import AI21Client\nfrom ai21.models.chat import ChatMessage\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = AI21Client(api_key=\"your-api-key\")\n\nmessages = [\n    ChatMessage(\n        content=\"You are a world renowned poet in the style of Edgar Allan Poe.\",\n        role=\"system\",\n    ),\n    ChatMessage(\n        content=\"Write me a short poem about the AI agents co-existing within the human brain.\",\n        role=\"user\",\n    ),\n]\n\ncomplete_response = \"\"\n\nresponse = client.chat.completions.create(\n    messages=messages,\n    model=\"jamba-1.5-mini\",\n    stream=True,\n)\n\nfor chunk in response:\n  complete_response += str(chunk.choices[0].delta.content)\n\nprint(complete_response)\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Functions for Message Generation and UUID Creation\nDESCRIPTION: Creates two async functions: one to generate a message from Claude based on random Titan personality and health, and another to generate four random UUIDs. These functions will run concurrently in the main function.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-async.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nPersonality = {random.choice(TitanPersonality)}\nHealth = {random.choice(TitanHealth)}\n\n\nasync def req():\n    # Start a streaming message request\n    stream = client.messages.create(\n        max_tokens=1024,\n        model=\"claude-3-5-sonnet-20240620\",\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"You are a Titan; a mech from Titanfall 2. Based on your titan's personality and status, generate a message for your pilot. If Near Destruction, make an all caps death message such as AVENGE ME or UNTIL NEXT TIME.\",\n            },\n            {\n                \"role\": \"assistant\",\n                \"content\": \"Personality: Legion is a relentless and heavy-hitting Titan that embodies brute strength and defensive firepower. He speaks bluntly. Status: Considerable Damage\",\n            },\n            {\n                \"role\": \"assistant\",\n                \"content\": \"Heavy damage detected. Reinforcements would be appreciated, but I can still fight.\",\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"You are a Titan; a mech from Titanfall 2. Based on your titan's personality and status, generate a message for your pilot. If Near Destruction, make an all caps death message such as AVENGE ME or UNTIL NEXT TIME.\",\n            },\n            {\n                \"role\": \"assistant\",\n                \"content\": f\"Personality: {Personality}. Status: {Health}\",\n            },\n        ],\n        stream=True,\n    )\n\n    response = \"\"\n    for event in stream:\n        if event.type == \"content_block_delta\":\n            response += event.delta.text\n        elif event.type == \"message_stop\":\n            Returned = response\n            break  # Exit the loop when the message completes\n\n    return response\n    Returned = response\n\n\nasync def generate_uuids():\n    uuids = [str(uuid.uuid4()) for _ in range(4)]\n    return uuids\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Agent Example with Tools in CAMEL-AI\nDESCRIPTION: A complete example demonstrating how to track a single CAMEL agent with tools using AgentOps. It includes initialization, tool setup, agent creation, and execution.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/camel.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nimport os\nfrom camel.agents import ChatAgent\nfrom camel.messages import BaseMessage\nfrom camel.models import ModelFactory\nfrom camel.types import ModelPlatformType, ModelType\n\n# Initialize AgentOps\nagentops.init(os.getenv(\"AGENTOPS_API_KEY\"))\n\n# Import toolkits after AgentOps init for tracking\nfrom camel.toolkits import SearchToolkit\n\n# Set up the agent with search tools\nsys_msg = BaseMessage.make_assistant_message(\n    role_name='Tools calling operator',\n    content='You are a helpful assistant'\n)\n\n# Configure tools and model\ntools = [*SearchToolkit().get_tools()]\nmodel = ModelFactory.create(\n    model_platform=ModelPlatformType.OPENAI,\n    model_type=ModelType.GPT_4O_MINI,\n)\n\n# Create the agent\ncamel_agent = ChatAgent(\n    system_message=sys_msg,\n    model=model,\n    tools=tools,\n)\n\n# Run the agent\nuser_msg = 'What is CAMEL-AI.org?'\nresponse = camel_agent.step(user_msg)\nprint(response)\n\n# End the session\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Loading API Keys from Environment Variables\nDESCRIPTION: Loads the Anthropic and AgentOps API keys from environment variables or sets fallback values.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nANTHROPIC_API_KEY = os.getenv(\"ANTHROPIC_API_KEY\") or \"ANTHROPIC API KEY\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"AGENTOPS API KEY\"\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with smolagents\nDESCRIPTION: Python code showing how to initialize AgentOps and integrate it with smolagents using LiteLLM. Demonstrates the basic setup including model initialization and session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/smolagents.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom smolagents import LiteLLMModel\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nmodel = LiteLLMModel(<model_name>)\n\n# Your code here...\n\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenAI Assistant for Math Tutoring in Python\nDESCRIPTION: This snippet creates an OpenAI Assistant configured as a Math Tutor. It sets the name, instructions, and model for the assistant, then displays the created assistant's details.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nassistant = client.beta.assistants.create(\n    name=\"Math Tutor\",\n    instructions=\"You are a personal math tutor. Answer questions briefly, in a sentence or less.\",\n    model=\"gpt-4o-mini\",\n)\nshow_json(assistant)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Chat Completion\nDESCRIPTION: Example of making an asynchronous chat completion request to Mistral API.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/mistral_examples/mistral_example.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def main() -> None:\n    response = await client.chat.complete_async(\n        model=\"open-mistral-nemo\",\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"Explain step by step what is 2+2?\",\n            }\n        ],\n    )\n    print(response.choices[0].message.content)\n\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Stopping LLM Call Instrumentation in AgentOps\nDESCRIPTION: The stop_instrumenting() function disables automatic instrumentation of LLM calls, useful for frameworks like CrewAI and AG2 that may use their own instrumentation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/sdk-reference.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstop_instrumenting()\n```\n\n----------------------------------------\n\nTITLE: MultiOn Step Streaming Implementation\nDESCRIPTION: Implementation of streaming step execution with MultiOn and AgentOps, allowing for real-time response processing\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Step_by_step_web_browsing.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport multion\nfrom multion.client import MultiOn\nfrom multion.sessions.types.sessions_step_stream_request_browser_params import (\n    SessionsStepStreamRequestBrowserParams,\n)\nfrom multion.core.request_options import RequestOptions\nimport os\n\nmultion = MultiOn(\n    api_key=MULTION_API_KEY,\n    agentops_api_key=AGENTOPS_API_KEY,\n)\n\nurl = \"https://www.agentops.ai/\"\ncmd = \"what three things do i get with agentops\"\ncreate_session_response = multion.sessions.create(url=url)\nsession_id = create_session_response.session_id\nprint(create_session_response.message)\nbrowser_params = SessionsStepStreamRequestBrowserParams(height=1.1, width=1.1)\nrequest_options = RequestOptions(\n    timeout_in_seconds=60, max_retries=2, additional_headers={\"test\": \"ing\"}\n)\nstep_session_response = multion.sessions.step_stream(\n    session_id=session_id,\n    cmd=cmd,\n    url=url,\n    browser_params=browser_params,\n    include_screenshot=True,\n    request_options=request_options,\n)\n\nfor chunk in step_session_response:\n    if chunk.type == \"final_event\":\n        break\n    print(chunk.delta[\"content\"])\n\nwhile chunk.delta[\"status\"] == \"CONTINUE\":\n    step_session_response = multion.sessions.step_stream(\n        session_id=session_id,\n        cmd=cmd,\n        url=url,\n        include_screenshot=True,\n    )\n    for chunk in step_session_response:\n        if chunk.type == \"final_event\":\n            break\n        print(chunk.delta[\"content\"])\n\nif chunk.delta[\"status\"] == \"DONE\":\n    print(\"task completed\")\n\nget_screenshot = multion.sessions.screenshot(session_id=session_id)\nclose_session_response = multion.sessions.close(session_id=session_id)\n```\n\n----------------------------------------\n\nTITLE: Loading API Keys\nDESCRIPTION: Loading Mistral and AgentOps API keys from environment variables using dotenv.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/mistral_examples/mistral_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nMISTRAL_API_KEY = os.getenv(\"MISTRAL_API_KEY\") or \"<your_mistral_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Using record_action Decorator in Python\nDESCRIPTION: Demonstrates how to use the record_action decorator to automatically record function execution details including parameters, returns, and duration. This is particularly useful for functions that contain nested operations like multiple OpenAI calls.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/recording-events.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@ao_client.record_action('sample function being record')\ndef sample_function(...):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Client\nDESCRIPTION: Initializes the AgentOps client with specific tags for monitoring the CAMEL AI multi-agent example.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/camel.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(tags=[\"camel\", \"multi-agent\", \"example\"])\n```\n\n----------------------------------------\n\nTITLE: Defining Function JSON Schema for OpenAI Assistant\nDESCRIPTION: This snippet creates a JSON schema that defines the interface of the display_quiz function for the OpenAI Assistant. It specifies the function name, description, and parameters including their types and requirements.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfunction_json = {\n    \"name\": \"display_quiz\",\n    \"description\": \"Displays a quiz to the student, and returns the student's response. A single quiz can have multiple questions.\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"title\": {\"type\": \"string\"},\n            \"questions\": {\n                \"type\": \"array\",\n                \"description\": \"An array of questions, each with a title and potentially options (if multiple choice).\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"question_text\": {\"type\": \"string\"},\n                        \"question_type\": {\n                            \"type\": \"string\",\n                            \"enum\": [\"MULTIPLE_CHOICE\", \"FREE_RESPONSE\"],\n                        },\n                        \"choices\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n                    },\n                    \"required\": [\"question_text\"],\n                },\n            },\n        },\n        \"required\": [\"title\", \"questions\"],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator Tool and Agent Configuration\nDESCRIPTION: This snippet defines a calculator function as a tool and sets up the configuration for AutoGen agents. It includes model selection, API key setup, and tagging for AgentOps tracking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/autogen_examples/MathAgent.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconfig_list = [\n    {\n        \"model\": \"gpt-4-turbo\",\n        \"api_key\": OPENAI_API_KEY,\n        \"tags\": [\"mathagent-example\", \"tool\"],\n    }\n]\n\nOperator = Literal[\"+\", \"-\", \"*\", \"/\"]\n\n\ndef calculator(a: int, b: int, operator: Annotated[Operator, \"operator\"]) -> int:\n    if operator == \"+\":\n        return a + b\n    elif operator == \"-\":\n        return a - b\n    elif operator == \"*\":\n        return a * b\n    elif operator == \"/\":\n        return int(a / b)\n    else:\n        raise ValueError(\"Invalid operator\")\n```\n\n----------------------------------------\n\nTITLE: Instantiating Agent Objects\nDESCRIPTION: Creates instances of the QaAgent and EngineerAgent classes for use in the application.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nqa = QaAgent()\nengineer = EngineerAgent()\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with Default Name in Python\nDESCRIPTION: This example shows how to create an agent using the @agent decorator without specifying a name. The agent will automatically use the class name (\"ResearchAgent\") as its identifier in the dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/tracking-agents.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@agent\nclass ResearchAgent:\n    # This agent will have the name \"ResearchAgent\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: This code snippet shows how to end the AgentOps session after completing the MultiOn and OpenAI operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Autonomous_web_browsing.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Streaming Asynchronous Chat Completion with AI21 Jamba 1.5 Model\nDESCRIPTION: This snippet shows how to generate a streaming asynchronous chat completion using the AI21 Jamba 1.5 model and accumulate the response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    response = \"\"\n\n    async_stream_response = await aclient.chat.completions.create(\n        messages=messages,\n        model=\"jamba-1.5-mini\",\n        stream=True,\n    )\n\n    async for chunk in async_stream_response:\n        response += chunk.choices[0].delta.content\n\n    print(response)\n\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Text-to-SQL Agent\nDESCRIPTION: Initialize the CodeAgent with the SQL execution tool and LiteLLM model, then run a query to test its functionality.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/text_to_sql.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagent = CodeAgent(\n    tools=[sql_engine],\n    model=model,\n)\nagent.run(\"Can you give me the name of the client who got the most expensive receipt?\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Decorator in Python\nDESCRIPTION: Python implementation of the agent decorator that wraps class initialization to create and manage agent spans within a session context.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/sdk/README.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef agent(cls=None, **kwargs):\n    def decorator(cls):\n        # Wrap methods with span creation/management\n        original_init = cls.__init__\n        \n        def __init__(self, *args, **init_kwargs):\n            # Get current session from context\n            session = get_current_session()\n            if not session:\n                raise ValueError(\"No active session found. Create a session first.\")\n            \n            # Create agent span as child of session\n            self._span = create_span(\"agent\", parent=session.span, **kwargs)\n            \n            # Call original init\n            original_init(self, *args, **init_kwargs)\n        \n        cls.__init__ = __init__\n        return cls\n    \n    if cls is None:\n        return decorator\n    return decorator(cls)\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps via pip\nDESCRIPTION: Command to install the AgentOps package using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\n----------------------------------------\n\nTITLE: Automatic Tracking of Multion Events with AgentOps\nDESCRIPTION: This code initializes Multion with AgentOps integration, performs a web browsing action, and automatically tracks events. It demonstrates how to use RequestOptions and includes screenshot capture.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multion.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmultion = MultiOn(\n    api_key=MULTION_API_KEY,\n    agentops_api_key=AGENTOPS_API_KEY,\n)\ncmd = \"what three things do i get with agentops\"\nrequest_options = RequestOptions(\n    timeout_in_seconds=60, max_retries=4, additional_headers={\"test\": \"ing\"}\n)\n\nbrowse_response = multion.browse(\n    cmd=\"what three things do i get with agentops\",\n    url=\"https://www.agentops.ai/\",\n    max_steps=4,\n    include_screenshot=True,\n    request_options=request_options,\n)\n\nprint(browse_response.message)\n\n# End session to see your dashboard\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Text-to-SQL Agent\nDESCRIPTION: Install necessary packages including smolagents for building the agent, sqlalchemy for database operations, and agentops for observability.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/text_to_sql.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install smolagents\n%pip install sqlalchemy\n%pip install agentops\n```\n\n----------------------------------------\n\nTITLE: Complete Cohere chat_stream() example with AgentOps tracking\nDESCRIPTION: A full working example demonstrating how to use Cohere's chat_stream() method with AgentOps tracking. This example processes streaming responses from Cohere and prints them incrementally.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/cohere.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport cohere\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\n\nco = cohere.Client()\n\nstream = co.chat_stream(\n    message=\"Write me a haiku about the synergies between Cohere and AgentOps\"\n)\n\nfor event in stream:\n    if event.event_type == \"text-generation\":\n        print(event.text, end='')\n\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Retrieving AgentOps Session ID\nDESCRIPTION: This snippet prints the AgentOps session ID, which can be used for tracking and referencing the current monitoring session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_examples.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Agent Ops session ID: \" + str(agentops_handler.current_session_ids))\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks for Job Posting Creation Workflow\nDESCRIPTION: A class that defines structured tasks for the job posting creation process, including company culture research, role requirements analysis, job posting drafting, and final review. Each task includes detailed instructions and expected outputs.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/job_posting.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom textwrap import dedent\n\n\nclass Tasks:\n    def research_company_culture_task(self, agent, company_description, company_domain):\n        return Task(\n            description=dedent(\n                f\"\"\"\\\\n\\t\\t\\t\\t\\t\\tAnalyze the provided company website and the hiring manager's company's domain {company_domain}, description: \\\"{company_description}\\\". Focus on understanding the company's culture, values, and mission. Identify unique selling points and specific projects or achievements highlighted on the site.\\n\\t\\t\\t\\t\\t\\tCompile a report summarizing these insights, specifically how they can be leveraged in a job posting to attract the right candidates.\"\"\"\n            ),\n            expected_output=dedent(\n                \"\"\"\\\\n\\t\\t\\t\\t\\t\\tA comprehensive report detailing the company's culture, values, and mission, along with specific selling points relevant to the job role. Suggestions on incorporating these insights into the job posting should be included.\"\"\"\n            ),\n            agent=agent,\n        )\n\n    def research_role_requirements_task(self, agent, hiring_needs):\n        return Task(\n            description=dedent(\n                f\"\"\"\\\\n\\t\\t\\t\\t\\t\\tBased on the hiring manager's needs: \\\"{hiring_needs}\\\", identify the key skills, experiences, and qualities the ideal candidate should possess for the role. Consider the company's current projects, its competitive landscape, and industry trends. Prepare a list of recommended job requirements and qualifications that align with the company's needs and values.\"\"\"\n            ),\n            expected_output=dedent(\n                \"\"\"\\\\n\\t\\t\\t\\t\\t\\tA list of recommended skills, experiences, and qualities for the ideal candidate, aligned with the company's culture, ongoing projects, and the specific role's requirements.\"\"\"\n            ),\n            agent=agent,\n        )\n\n    def draft_job_posting_task(self, agent, company_description, hiring_needs, specific_benefits):\n        return Task(\n            description=dedent(\n                f\"\"\"\\\\n\\t\\t\\t\\t\\t\\tDraft a job posting for the role described by the hiring manager: \\\"{hiring_needs}\\\". Use the insights on \\\"{company_description}\\\" to start with a compelling introduction, followed by a detailed role description, responsibilities, and required skills and qualifications. Ensure the tone aligns with the company's culture and incorporate any unique benefits or opportunities offered by the company.\\n\\t\\t\\t\\t\\t\\tSpecfic benefits: \\\"{specific_benefits}\\\"\"\"\"\n            ),\n            expected_output=dedent(\n                \"\"\"\\\\n\\t\\t\\t\\t\\t\\tA detailed, engaging job posting that includes an introduction, role description, responsibilities, requirements, and unique company benefits. The tone should resonate with the company's culture and values, aimed at attracting the right candidates.\"\"\"\n            ),\n            agent=agent,\n        )\n\n    def review_and_edit_job_posting_task(self, agent, hiring_needs):\n        return Task(\n            description=dedent(\n                f\"\"\"\\\\n\\t\\t\\t\\t\\t\\tReview the draft job posting for the role: \\\"{hiring_needs}\\\". Check for clarity, engagement, grammatical accuracy, and alignment with the company's culture and values. Edit and refine the content, ensuring it speaks directly to the desired candidates and accurately reflects the role's unique benefits and opportunities. Provide feedback for any necessary revisions.\"\"\"\n            ),\n            expected_output=dedent(\n                \"\"\"\\\\n\\t\\t\\t\\t\\t\\tA polished, error-free job posting that is clear, engaging, and perfectly aligned with the company's culture and values. Feedback on potential improvements and final approval for publishing. Formated in markdown.\"\"\"\n            ),\n            agent=agent,\n            output_file=\"job_posting.md\",\n        )\n\n    def industry_analysis_task(self, agent, company_domain, company_description):\n        return Task(\n            description=dedent(\n                f\"\"\"\\\\n\\t\\t\\t\\t\\t\\tConduct an in-depth analysis of the industry related to the company's domain: \\\"{company_domain}\\\". Investigate current trends, challenges, and opportunities within the industry, utilizing market reports, recent developments, and expert opinions. Assess how these factors could impact the role being hired for and the overall attractiveness of the position to potential candidates.\\n\\t\\t\\t\\t\\t\\tConsider how the company's position within this industry and its response to these trends could be leveraged to attract top talent. Include in your report how the role contributes to addressing industry challenges or seizing opportunities.\"\"\"\n            ),\n            expected_output=dedent(\n                \"\"\"\\\\n\\t\\t\\t\\t\\t\\tA detailed analysis report that identifies major industry trends, challenges, and opportunities relevant to the company's domain and the specific job role. This report should provide strategic insights on positioning the job role and the company as an attractive choice for potential candidates.\"\"\"\n            ),\n            agent=agent,\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Keys and Logging Configuration\nDESCRIPTION: Loads environment variables for API keys and configures logging to debug level to observe agent tracking in action. This allows flexibility to use environment variables or directly specified API keys.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\nlogging.basicConfig(\n    level=logging.DEBUG\n)  # this will let us see that calls are assigned to an agent\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps for Tracking\nDESCRIPTION: This code initializes AgentOps with the provided API key and sets default tags for tracking. It enables automatic tracking of LLM interactions, token usage, agent actions, and tool usage.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/autogen_examples/MathAgent.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"autogen-tool-example\"])\n\nprint(\"AgentOps is now running. You can view your session in the link above\")\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK with poetry\nDESCRIPTION: Command to install the AgentOps SDK using poetry package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/xai.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Implementing LangChain Callback Handler in Python\nDESCRIPTION: Example of initializing and using the LangchainCallbackHandler with ChatOpenAI in LangChain.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/langchain-callback-handler.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.langchain_callback_handler import LangchainCallbackHandler\nChatOpenAI(callbacks=[LangchainCallbackHandler()])\n```\n\n----------------------------------------\n\nTITLE: Configuring Assistant with Code Interpreter Tool\nDESCRIPTION: Shows how to update an Assistant to enable the Code Interpreter tool through the API. Demonstrates tool configuration and basic usage.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nassistant = client.beta.assistants.update(\n    MATH_ASSISTANT_ID,\n    tools=[{\"type\": \"code_interpreter\"}],\n)\nshow_json(assistant)\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring LangChain Tool\nDESCRIPTION: Creates a simple tool for finding movies and configures it with the AgentOps callback handler. Binds the tool to the LLM.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/langchain.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@tool\ndef find_movie(genre: str) -> str:\n    \"\"\"Find available movies\"\"\"\n    if genre == \"drama\":\n        return \"Dune 2\"\n    else:\n        return \"Pineapple Express\"\n\ntools = [find_movie]\n\nfor t in tools:\n    t.callbacks = [agentops_handler]\n\nllm_with_tools = llm.bind_tools([find_movie])\n```\n\n----------------------------------------\n\nTITLE: Updating Context with Tool Results in Python\nDESCRIPTION: Code that combines the results from both tools (inventory and enemy scans) and adds them to the conversation context for the AI to reference.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ninitial_messages.append(\n    {\n        \"role\": \"assistant\",\n        \"content\": f\"Weapons Inventory Scan Result: {inv_scan_res}\\nEnemy Scans Result: {enemy_scan_res}\",\n    }\n)\n\n\ninitial_messages.append(\n    {\n        \"role\": \"user\",\n        \"content\": \"What is the combat plan for killing these demons? Based on the last message, tell me which demons to kill first, in which order and using which weapons as well as any sweakpoints.\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Python Function with Engineer Agent\nDESCRIPTION: This snippet uses the EngineerAgent to generate a Python function for testing prime numbers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngenerated_func = engineer.completion(\"python function to test prime number\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment and API Keys for AgentOps and OpenAI\nDESCRIPTION: This code snippet sets up the environment by importing necessary modules, loading environment variables, and configuring API keys for AgentOps and OpenAI. It uses dotenv to load variables from a .env file if available.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/haystack_examples/haystack_openai_example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom haystack.components.generators import OpenAIGenerator\nimport agentops\nfrom dotenv import load_dotenv\n\n# Load environment variables from a .env file if available\nload_dotenv()\n\n# Load API keys from environment variables or replace with your keys\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"your_agentops_api_key\"\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"your_openai_api_key\"\n\n# Configure your environment for OpenAI API\nos.environ[\"OPENAI_API_KEY\"] = OPENAI_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Accessing Tool Usage Information\nDESCRIPTION: Parsing the response from Anthropic to extract information about which tool was used and any inputs provided to that tool.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ngen_mission_result = \"\"\n\n# Print response content to see the data\nprint(response.content)\n\n# Assuming ToolUseBlock is at index 1\ntool_use_block = response.content[1]\n\n# Get the tool name and input\ntool_name = tool_use_block.name\ntool_input = tool_use_block.input\n\n# We don't need to look to extract any inputs since we don't use any\n```\n\n----------------------------------------\n\nTITLE: Initiating Agent Conversation and Ending AgentOps Session\nDESCRIPTION: This snippet initiates a conversation between the user proxy and assistant agents, handling potential errors. It demonstrates how to end an AgentOps session and provides information on viewing the run results in the AgentOps dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/autogen_examples/MathAgent.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    user_proxy.initiate_chat(\n        assistant, message=\"What is (1423 - 123) / 3 + (32 + 23) * 5?\"\n    )\nexcept StdinNotImplementedError:\n    # This is only necessary for AgentOps testing automation which is headless and will not have user input\n    print(\"Stdin not implemented. Skipping initiate_chat\")\n    agentops.end_session(\"Indeterminate\")\n\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK via Package Managers\nDESCRIPTION: Commands for installing the AgentOps SDK using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/haystack.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Updating OpenAI Assistant with Custom Function in Python\nDESCRIPTION: This code updates an existing OpenAI Assistant with the newly defined custom function, enabling it to use the display_quiz functionality.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nassistant = client.beta.assistants.update(\n    MATH_ASSISTANT_ID,\n    tools=[\n        {\"type\": \"code_interpreter\"},\n        {\"type\": \"function\", \"function\": function_json},\n    ],\n)\nshow_json(assistant)\n```\n\n----------------------------------------\n\nTITLE: Implementing Run Status Monitoring and Message Handling\nDESCRIPTION: Creates utility functions for monitoring run status and pretty printing messages. Includes a wait loop for checking run completion and message display functionality.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\n# Pretty printing helper\ndef pretty_print(messages):\n    print(\"# Messages\")\n    for m in messages:\n        print(f\"{m.role}: {m.content[0].text.value}\")\n    print()\n\n\n# Waiting in a loop\ndef wait_on_run(run, thread):\n    while run.status == \"queued\" or run.status == \"in_progress\":\n        run = client.beta.threads.runs.retrieve(\n            thread_id=thread.id,\n            run_id=run.id,\n        )\n        time.sleep(0.5)\n    return run\n\n\n# Wait for Run 1\nrun1 = wait_on_run(run1, thread1)\npretty_print(get_response(thread1))\n\n# Wait for Run 2\nrun2 = wait_on_run(run2, thread2)\npretty_print(get_response(thread2))\n\n# Wait for Run 3\nrun3 = wait_on_run(run3, thread3)\npretty_print(get_response(thread3))\n\n# Thank our assistant on Thread 3 :)\nrun4 = submit_message(MATH_ASSISTANT_ID, thread3, \"Thank you!\")\nrun4 = wait_on_run(run4, thread3)\npretty_print(get_response(thread3))\n```\n\n----------------------------------------\n\nTITLE: Updating OpenAI Assistant with Custom Function in Python\nDESCRIPTION: This code updates an existing OpenAI Assistant with the newly defined custom function, enabling it to use the display_quiz functionality.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nassistant = client.beta.assistants.update(\n    MATH_ASSISTANT_ID,\n    tools=[\n        {\"type\": \"code_interpreter\"},\n        {\"type\": \"function\", \"function\": function_json},\n    ],\n)\nshow_json(assistant)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous AI21 Chat Completion with AgentOps\nDESCRIPTION: Full example of using AI21's chat completion API asynchronously with AgentOps integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ai21.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ai21 import AsyncAI21Client\nimport agentops\nimport asyncio\n\nasync def main():\n    agentops.init(<INSERT YOUR API KEY HERE>)\n    client = AsyncAI21Client(api_key=\"your-api-key\")\n\n    messages = [\n        ChatMessage(\n            content=\"You are a world renowned poet in the style of Edgar Allan Poe.\",\n            role=\"system\",\n        ),\n        ChatMessage(\n            content=\"Write me a short poem about the AI agents co-existing within the human brain.\",\n            role=\"user\",\n        ),\n    ]\n\n    response = await client.chat.completions.create(\n        messages=messages,\n        model=\"jamba-1.5-mini\",\n    )\n\n    print(response.choices[0].message.content)\n    agentops.end_session('Success')\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Checking Tool Name and Generating Missions in Python\nDESCRIPTION: A conditional check that identifies if the tool_name is 'generate_missions' and then calls the generate_missions function without arguments.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Check if the tool name is \"generate_missions\"\nif tool_name == \"generate_missions\":\n    # Call the function with the tool creator as an argument\n    gen_mission_result = generate_missions()\n```\n\n----------------------------------------\n\nTITLE: Running Code Interpreter Example\nDESCRIPTION: Demonstrates how to use the Code Interpreter tool with a specific task (generating Fibonacci numbers).\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nthread, run = create_thread_and_run(\n    \"Generate the first 20 fibbonaci numbers with code.\"\n)\nrun = wait_on_run(run, thread)\npretty_print(get_response(thread))\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for OpenAI and AgentOps\nDESCRIPTION: Loads environment variables or sets API keys directly for OpenAI and AgentOps services. Allows for flexible key management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-multi-agent-example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your openai key here>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your agentops key here>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps\nDESCRIPTION: Initialize AgentOps with API key and default tags for session tracking and filtering.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/autogen_examples/AgentChat.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# When initializing AgentOps, you can pass in optional tags to help filter sessions\nagentops.init(api_key=AGENTOPS_API_KEY, default_tags=[\"simple-autogen-example\"])\n\nprint(\"AgentOps is now running. You can view your session in the link above\")\n```\n\n----------------------------------------\n\nTITLE: Installing MultiOn via Poetry\nDESCRIPTION: Command to add the MultiOn package to a Poetry-managed Python project.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/multion.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry add multion\n```\n\n----------------------------------------\n\nTITLE: Retrieving Messages from OpenAI Assistant Thread in Python\nDESCRIPTION: This code retrieves and displays all messages in the thread after the assistant has processed the request.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmessages = client.beta.threads.messages.list(thread_id=thread.id)\nshow_json(messages)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Webpage Visiting Tool\nDESCRIPTION: Implements a custom tool that visits webpages and converts HTML content to Markdown using the markdownify library and the @tool decorator.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/multi_smolagents_system.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport re\nimport requests\nfrom markdownify import markdownify\nfrom requests.exceptions import RequestException\nfrom smolagents import tool\n\n@tool\ndef visit_webpage(url: str) -> str:\n    \"\"\"Visits a webpage at the given URL and returns its content as a markdown string.\n\n    Args:\n        url: The URL of the webpage to visit.\n\n    Returns:\n        The content of the webpage converted to Markdown, or an error message if the request fails.\n    \"\"\"\n    try:\n        # Send a GET request to the URL\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception for bad status codes\n\n        # Convert the HTML content to Markdown\n        markdown_content = markdownify(response.text).strip()\n\n        # Remove multiple line breaks\n        markdown_content = re.sub(r\"\\n{3,}\", \"\\n\\n\", markdown_content)\n\n        return markdown_content\n\n    except RequestException as e:\n        return f\"Error fetching the webpage: {str(e)}\"\n    except Exception as e:\n        return f\"An unexpected error occurred: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for SwarmZero\nDESCRIPTION: Sample .env file configuration showing the required API keys for AgentOps monitoring, Tavily search, and OpenAI for SwarmZero functionality.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/swarmzero.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\nTAVILY_API_KEY=<YOUR API KEY>\nOPENAI_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Making LLM Call with Session Patching in AgentOps\nDESCRIPTION: Use the session.patch method to wrap the OpenAI API call, associating it with a specific AgentOps session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = session_1.patch(openai.chat.completions.create)(\n    model=\"gpt-3.5-turbo\",\n    messages=messages,\n    temperature=0.5,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronous AI21 Client\nDESCRIPTION: This code creates a synchronous AI21 client using the API key.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient = AI21Client(api_key=AI21_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Submitting Function Output to OpenAI Assistant\nDESCRIPTION: This snippet shows how to submit the output of the display_quiz function back to the OpenAI Assistant. It processes all tool calls, executes the display_quiz function, and submits the responses back to the assistant.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ntool_outputs = []\ntool_calls = run.required_action.submit_tool_outputs.tool_calls\n\nfor tool_call in tool_calls:\n    arguments = json.loads(tool_call.function.arguments)\n    responses = display_quiz(arguments[\"title\"], arguments[\"questions\"])\n    tool_outputs.append({\n        \"tool_call_id\": tool_call.id,\n        \"output\": json.dumps(responses),\n    })\n\nrun = client.beta.threads.runs.submit_tool_outputs(\n    thread_id=thread.id,\n    run_id=run.id,\n    tool_outputs=tool_outputs\n)\nshow_json(run)\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys\nDESCRIPTION: Load environment variables and set API keys for both Cohere and AgentOps services, with fallback to manual key entry.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/cohere_examples/cohere_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nCO_API_KEY = os.getenv(\"CO_API_KEY\") or \"<your_cohere_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for LangChain and AgentOps\nDESCRIPTION: Imports necessary modules from LangChain, OpenAI, and AgentOps for setting up the agent and callback handler.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/langchain.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom langchain_openai import ChatOpenAI\nfrom langchain.agents import tool, AgentExecutor, create_openai_tools_agent\nfrom dotenv import load_dotenv\nfrom langchain_core.prompts import ChatPromptTemplate\n\nfrom agentops.partners.langchain_callback_handler import (\n    LangchainCallbackHandler as AgentOpsLangchainCallbackHandler,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK using pip or poetry\nDESCRIPTION: Commands to install the AgentOps SDK using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/litellm.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Testing the Webpage Visiting Tool\nDESCRIPTION: Tests the visit_webpage tool by retrieving and displaying the first 500 characters of the Hugging Face Wikipedia page.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/multi_smolagents_system.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(visit_webpage(\"https://en.wikipedia.org/wiki/Hugging_Face\")[:500])\n```\n\n----------------------------------------\n\nTITLE: Using the PhilosopherAgent\nDESCRIPTION: Example usage of the PhilosopherAgent to answer a philosophical question about the meaning of life.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/haystack_examples/haystack_anthropic_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Use the agent to answer a philosophical question\nresponse = agent.answer_question(\"What is the meaning of life?\")\nprint(\"Philosopher Agent Response:\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and Groq\nDESCRIPTION: Python code to initialize AgentOps and Groq clients, including API key setup and session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/groq.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom groq import Groq\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = Groq(api_key=\"your_api_key\")\n\n# Your code here...\n\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Completion - Python\nDESCRIPTION: Example of streaming chat completion using Llama-3.2-1B-Instruct model with event logging.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/llama_stack_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagentops.start_session()\nresponse = client.inference.chat_completion(\n    messages=[\n        UserMessage(\n            content=\"hello world, write me a 3 word poem about the moon\",\n            role=\"user\",\n        ),\n    ],\n    model_id=\"meta-llama/Llama-3.2-1B-Instruct\",\n    stream=True\n)\n\nasync for log in EventLogger().log(response):\n    log.print()\n\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Creating Threads and Running Assistant Operations in Python\nDESCRIPTION: This snippet defines functions for creating threads and running assistant operations. It demonstrates how to emulate concurrent user requests using the OpenAI Assistants API.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef create_thread_and_run(user_input):\n    thread = client.beta.threads.create()\n    run = submit_message(MATH_ASSISTANT_ID, thread, user_input)\n    return thread, run\n\n\n# Emulating concurrent user requests\nthread1, run1 = create_thread_and_run(\"I need to solve the equation `3x + 11 = 14`. Can you help me?\")\nthread2, run2 = create_thread_and_run(\"Could you explain linear algebra to me?\")\nthread3, run3 = create_thread_and_run(\"I don't like math. What can I do?\")\n\n# Now all Runs are executing...\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Story Generation\nDESCRIPTION: Async function to generate story using OpenAI's streaming API\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_async.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def main_stream():\n    stream = await client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=messages,\n        stream=True,\n    )\n\n    async for chunk in stream:\n        print(chunk.choices[0].delta.content or \"\", end=\"\")\n```\n\n----------------------------------------\n\nTITLE: Synchronous Anthropic Integration Example\nDESCRIPTION: Complete example of using Anthropic's Claude model synchronously with AgentOps for generating a haiku.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/anthropic.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom anthropic import Anthropic\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = Anthropic()\n\nmessage = client.messages.create(\n    model=\"claude-3-opus-20240229\",\n    max_tokens=1024,\n    messages=[{\n        \"role\": \"user\",\n        \"content\": \"Write a haiku about AI and humans working together\"\n    }]\n)\n\nprint(message.content)\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Installing Haystack via Package Managers\nDESCRIPTION: Commands for installing Haystack 2.x using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/haystack.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install haystack-ai\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add haystack-ai\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps for Manual Integration with MultiOn\nDESCRIPTION: This snippet shows how to initialize AgentOps with auto_start_session set to False, allowing for manual integration with MultiOn events.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Autonomous_web_browsing.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(\n    AGENTOPS_API_KEY, auto_start_session=False, default_tags=[\"MultiOn browse example\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Python Integration Example\nDESCRIPTION: Full example showing session creation, event tracking, and session completion using Python's requests library. Demonstrates the entire workflow of using the API.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/rest.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport uuid\nfrom datetime import datetime, timezone\n\n# Configuration\nAPI_KEY = \"your_api_key\"\nBASE_URL = \"https://api.agentops.ai\"\n\n# Create session\nsession_id = str(uuid.uuid4())\nresponse = requests.post(\n    f\"{BASE_URL}/v2/create_session\",\n    headers={\"X-Agentops-Api-Key\": API_KEY},\n    json={\n        \"session\": {\n            \"id\": session_id,\n            \"init_timestamp\": datetime.now(timezone.utc).isoformat(),\n            \"tags\": [\"example\"]\n        }\n    }\n)\njwt_token = response.json()[\"jwt\"]\n\n# Track LLM call\nrequests.post(\n    f\"{BASE_URL}/v2/create_events\",\n    headers={\"Authorization\": f\"Bearer {jwt_token}\"},\n    json={\n        \"events\": [{\n            \"type\": \"llm\",\n            \"init_timestamp\": datetime.now(timezone.utc).isoformat(),\n            \"model\": \"gpt-4\",\n            \"prompt\": \"Hello, world!\",\n            \"completion\": \"Hi there!\",\n            \"prompt_tokens\": 3,\n            \"completion_tokens\": 2\n        }]\n    }\n)\n\n# End session\nrequests.post(\n    f\"{BASE_URL}/v2/update_session\",\n    headers={\"Authorization\": f\"Bearer {jwt_token}\"},\n    json={\n        \"session\": {\n            \"id\": session_id,\n            \"end_timestamp\": datetime.now(timezone.utc).isoformat(),\n            \"end_state\": \"completed\"\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating QA and Engineer Agent Instances\nDESCRIPTION: This snippet creates instances of the QaAgent and EngineerAgent classes for use in subsequent code generation tasks.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nqa = QaAgent()\nengineer = EngineerAgent()\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Client and Loading API Keys\nDESCRIPTION: Sets up the AgentOps client and loads environment variables for API keys using dotenv.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/multi_smolagents_system.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_api_key>\"\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_api_key>\"\n```\n\n----------------------------------------\n\nTITLE: Executing Streaming Story Generation\nDESCRIPTION: Execute the streaming async function for story generation\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_async.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nawait main_stream()\n```\n\n----------------------------------------\n\nTITLE: Implementing Display Quiz Function in Python\nDESCRIPTION: This function displays a quiz with multiple-choice and free-response questions, and collects user responses. It includes mock response functions for demonstration purposes.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef get_mock_response_from_user_multiple_choice():\n    return \"a\"\n\n\ndef get_mock_response_from_user_free_response():\n    return \"I don't know.\"\n\n\ndef display_quiz(title, questions):\n    print(\"Quiz:\", title)\n    print()\n    responses = []\n\n    for q in questions:\n        print(q[\"question_text\"])\n        response = \"\"\n\n        # If multiple choice, print options\n        if q[\"question_type\"] == \"MULTIPLE_CHOICE\":\n            for i, choice in enumerate(q[\"choices\"]):\n                print(f\"{i}. {choice}\")\n            response = get_mock_response_from_user_multiple_choice()\n\n        # Otherwise, just get response\n        elif q[\"question_type\"] == \"FREE_RESPONSE\":\n            response = get_mock_response_from_user_free_response()\n\n        responses.append(response)\n        print()\n\n    return responses\n```\n\n----------------------------------------\n\nTITLE: Streaming Gemini Example\nDESCRIPTION: Complete example of using Gemini with AgentOps in streaming mode to generate content incrementally.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/gemini.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport google.generativeai as genai\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nmodel = genai.GenerativeModel(\"gemini-1.5-flash\")\n\nresponse = model.generate_content(\n    \"Write a haiku about AI and humans working together\",\n    stream=True\n)\n\nfor chunk in response:\n    print(chunk.text, end=\"\")\n\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Synchronous streaming OpenAI chat completion with AgentOps\nDESCRIPTION: Example of using OpenAI's streaming chat completion API synchronously with AgentOps integration. Demonstrates how to process and print streamed responses.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/openai.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = OpenAI()\n\nstream = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    stream=True,\n    messages=[{\n          \"role\": \"user\",\n          \"content\": \"Write a haiku about AI and humans working together\"\n    }],\n)\n\nfor chunk in stream:\n  print(chunk.choices[0].delta.content or \"\", end=\"\")\n\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK\nDESCRIPTION: Commands for installing the AgentOps SDK using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/gemini.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps for Monitoring\nDESCRIPTION: Sets up AgentOps with the API key and default tags for monitoring and tracing LLM interactions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-async.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"anthropic-async\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps for LiteLLM Tracking\nDESCRIPTION: Initialize the AgentOps tracking system with the API key and optional default tags to categorize the session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/litellm_examples/litellm_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"litellm-example\"])\n```\n\n----------------------------------------\n\nTITLE: Printing AgentOps Session ID in Python\nDESCRIPTION: Retrieves and prints the session ID of the newly created AgentOps session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_v0_example.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Agent Ops session ID: \" + str(agentops_handler.current_session_ids))\n```\n\n----------------------------------------\n\nTITLE: Synchronous Streaming with Mistral and AgentOps\nDESCRIPTION: Example of using Mistral's synchronous streaming API with AgentOps monitoring. This initializes AgentOps, creates a Mistral client, streams a response from the Mistral API, and accumulates the chunks into a complete response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/mistral.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom mistralai import Mistral\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = Mistral(api_key=\"your_api_key\")\n\ncomplete_response = \"\"\n\nresponse = client.chat.stream(\n    model=\"mistral-small-latest\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Who was Joan of Arc?\"\n        }\n    ],\n)\n\nfor chunk in response:\n    if chunk.data.choices[0].finish_reason == \"stop\":\n        print(complete_response)\n    else:\n        complete_response += chunk.data.choices[0].delta.content\n\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with auto-end session disabled\nDESCRIPTION: Python code to initialize AgentOps with the option to skip automatic session ending, useful for certain CrewAI scenarios.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/crewai.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(skip_auto_end_session=True)\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for AgentOps and OpenAI\nDESCRIPTION: Loads environment variables and sets API keys for AgentOps and OpenAI. Allows for both environment variable and direct input methods.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/recording_events.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Thread for OpenAI Assistant Conversation in Python\nDESCRIPTION: This code creates a new thread for the conversation with the OpenAI Assistant and displays the thread details.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nthread = client.beta.threads.create()\nshow_json(thread)\n```\n\n----------------------------------------\n\nTITLE: Testing Streaming Generation and Additional Synchronous Generation\nDESCRIPTION: This snippet showcases streaming text generation and another synchronous generation using the Gemini model. It includes examples of explaining machine learning and comparing supervised and unsupervised learning.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/gemini_examples/gemini_example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(\"\\nTesting streaming generation:\")\nresponse = model.generate_content(\n    \"Explain the concept of machine learning in simple terms.\",\n    stream=True,\n    # session=ao_client\n)\n\nfor chunk in response:\n    print(chunk.text, end=\"\")\nprint()  # Add newline after streaming output\n\nprint(\"\\nTesting another synchronous generation:\")\nresponse = model.generate_content(\n    \"What is the difference between supervised and unsupervised learning?\",\n    # session=ao_client\n)\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Assistant System Message\nDESCRIPTION: Creates base message for AI assistant with role definition as Bladewolf character.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsys_msg = BaseMessage.make_assistant_message(\n    role_name='Tools calling opertor', content='You are a helpful assistant named Bladewolf, based off of the Metal Gear Rising Series.'\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Langchain and AgentOps Dependencies\nDESCRIPTION: This code imports the required modules from Langchain and AgentOps, including ChatOpenAI, AgentExecutor, and the custom LangchainCallbackHandler for AgentOps integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_examples.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom langchain_openai import ChatOpenAI\nfrom langchain.agents import tool, AgentExecutor, create_openai_tools_agent\nfrom dotenv import load_dotenv\nfrom langchain_core.prompts import ChatPromptTemplate\n\nfrom agentops.partners.langchain_callback_handler import (\n    LangchainCallbackHandler as AgentOpsLangchainCallbackHandler,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up File Retrieval Tool\nDESCRIPTION: Demonstrates how to upload a file and configure the Assistant to use it with the Retrieval tool, enabling knowledge base functionality.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Upload the file\nfile = client.files.create(\n    file=open(\n        \"language_models_are_unsupervised_multitask_learners.pdf\",\n        \"rb\",\n    ),\n    purpose=\"assistants\",\n)\n# Update Assistant\nassistant = client.beta.assistants.update(\n    MATH_ASSISTANT_ID,\n    tools=[{\"type\": \"code_interpreter\"}],\n    tool_resources={\"code_interpreter\": {\"file_ids\": [file.id]}},\n)\nshow_json(assistant)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Groq Integration with AgentOps\nDESCRIPTION: Full example of using Groq asynchronously with AgentOps, including initialization, async API call, and session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/groq.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom groq import AsyncGroq\nimport agentops\nimport asyncio\n\nasync def main() -> None:\n    agentops.init(<INSERT YOUR API KEY HERE>)\n    client = AsyncGroq(api_key=\"your_api_key\")\n\n    response = await client.chat.completions.create(\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"Explain the importance of low latency LLMs\",\n            }\n        ],\n        model=\"llama3-8b-8192\",\n    )\n\n    print(response.choices[0].message.content)\n    agentops.end_session('Success')\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API Key in Environment Variables\nDESCRIPTION: Example of setting the AgentOps API key as an environment variable in a .env file instead of hardcoding it in the application code.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ollama.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Alternatively, you can set the API key as an environment variable\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Creating LLM Request with Tool Definition in Python\nDESCRIPTION: Sends a request to Claude 3.5 model with a tool definition for retrieving cyberware. The request includes the message history and sets up the function calling capability.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.messages.create(\n    max_tokens=5000,\n    model=\"claude-3-5-sonnet-20240620\",\n    tools=[\n        {\n            \"name\": \"get_cyberware_by_creator\",\n            \"description\": \"Retrieve cyberware information based on the manufacturer corporation\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"creator\": {\n                        \"type\": \"string\",\n                        \"description\": \"The name of the cyberware creator\",\n                    }\n                },\n                \"required\": [\"creator\"],\n            },\n        }\n    ],\n    messages=initialmessages,\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Executing CamelAI Chat Loop\nDESCRIPTION: Initiates and runs the chat loop between the AI assistant and user, handling responses and tool calls until termination or completion.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-multi-agent-example.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nn = 0\ninput_msg = search_session.init_chat()\nwhile n < 50:\n    n += 1\n    assistant_response, user_response = search_session.step(input_msg)\n\n    if assistant_response.terminated:\n        print(\n            Fore.GREEN\n            + (\n                \"AI Assistant terminated. Reason: \"\n                f\"{assistant_response.info['termination_reasons']}.\"\n            )\n        )\n        break\n    if user_response.terminated:\n        print(\n            Fore.GREEN\n            + (\n                \"AI User terminated. \"\n                f\"Reason: {user_response.info['termination_reasons']}.\"\n            )\n        )\n        break\n\n    # Print output from the user\n    print_text_animated(\n        Fore.BLUE + f\"AI User:\\n\\n{user_response.msg.content}\\n\"\n    )\n\n    # Print output from the assistant, including any function execution information\n    print_text_animated(Fore.GREEN + \"AI Assistant:\")\n    tool_calls: List[FunctionCallingRecord] = assistant_response.info[\n        'tool_calls'\n    ]\n    for func_record in tool_calls:\n        print_text_animated(f\"{func_record}\")\n    print_text_animated(f\"{assistant_response.msg.content}\\n\")\n\n    if \"CAMEL_TASK_DONE\" in user_response.msg.content:\n        break\n\n    input_msg = assistant_response.msg\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for OpenAI, AgentOps, and Serper\nDESCRIPTION: Configuration code to set API keys from environment variables or direct input. The code loads keys from a .env file or allows manual entry as fallback.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/job_posting.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\nSERPER_API_KEY = os.getenv(\"SERPER_API_KEY\") or \"<your_serper_key>\"\n```\n\n----------------------------------------\n\nTITLE: Testing Display Quiz Function with Sample Data in Python\nDESCRIPTION: This snippet demonstrates how to use the display_quiz function with sample quiz data, including both free-response and multiple-choice questions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nresponses = display_quiz(\n    \"Sample Quiz\",\n    [\n        {\"question_text\": \"What is your name?\", \"question_type\": \"FREE_RESPONSE\"},\n        {\n            \"question_text\": \"What is your favorite color?\",\n            \"question_type\": \"MULTIPLE_CHOICE\",\n            \"choices\": [\"Red\", \"Blue\", \"Green\", \"Yellow\"],\n        },\n    ],\n)\nprint(\"Responses:\", responses)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring AutoGen Agents\nDESCRIPTION: This code creates and configures two ConversableAgents: an assistant and a user proxy. It sets up their roles, system messages, and termination conditions. The calculator tool is registered for both agents.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/autogen_examples/MathAgent.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nassistant = ConversableAgent(\n    name=\"Assistant\",\n    system_message=\"You are a helpful AI assistant. \"\n    \"You can help with simple calculations. \"\n    \"Return 'TERMINATE' when the task is done.\",\n    llm_config={\"config_list\": config_list},\n)\n\nuser_proxy = ConversableAgent(\n    name=\"User\",\n    llm_config=False,\n    is_termination_msg=lambda msg: msg.get(\"content\") is not None\n    and \"TERMINATE\" in msg[\"content\"],\n    human_input_mode=\"NEVER\",\n)\n\nassistant.register_for_llm(name=\"calculator\", description=\"A simple calculator\")(\n    calculator\n)\nuser_proxy.register_for_execution(name=\"calculator\")(calculator)\n\nregister_function(\n    calculator,\n    caller=assistant,  # The assistant agent can suggest calls to the calculator.\n    executor=user_proxy,  # The user proxy agent can execute the calculator calls.\n    name=\"calculator\",  # By default, the function name is used as the tool name.\n    description=\"A simple calculator\",  # A description of the tool.\n)\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Tracking Session\nDESCRIPTION: Finalize the AgentOps tracking session with a status message indicating successful completion.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/litellm_examples/litellm_example.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with SwarmZero\nDESCRIPTION: Code snippet showing how to initialize AgentOps monitoring with SwarmZero agent setup, including loading environment variables and setting up necessary clients.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/swarmzero.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport agentops\nfrom dotenv import load_dotenv\nfrom swarmzero import Agent\nfrom tavily import TavilyClient\n\n# Load environment variables\nload_dotenv()\n\n# Initialize clients\nagentops.init(os.getenv(\"AGENTOPS_API_KEY\"))\ntavily_client = TavilyClient(api_key=os.getenv(\"TAVILY_API_KEY\"))\n\n# Your SwarmZero agent code here...\n```\n\n----------------------------------------\n\nTITLE: Creating CamelAI RolePlaying Session\nDESCRIPTION: Initializes a RolePlaying session with defined roles, models, and tools for the Apex Legends scenario simulation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-multi-agent-example.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsearch_session = RolePlaying(\n    assistant_role_name=\"Searcher\",\n    user_role_name=\"Pathfinder\",\n    assistant_agent_kwargs=dict(\n        model=ModelFactory.create(\n            model_platform=ModelPlatformType.OPENAI,\n            model_type=ModelType.GPT_4O_MINI,\n        ),\n        tools=tools,\n    ),\n    user_agent_kwargs=dict(\n        model=ModelFactory.create(\n            model_platform=ModelPlatformType.OPENAI,\n            model_type=ModelType.GPT_4O_MINI,\n        ),\n    ),\n    task_prompt=task_prompt,\n    with_task_specify=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple AgentOps Sessions\nDESCRIPTION: Start two separate AgentOps sessions, each with a unique tag for identification. Print the session IDs for reference.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsession_1 = agentops.start_session(tags=[\"multi-session-test-1\"])\nsession_2 = agentops.start_session(tags=[\"multi-session-test-2\"])\n\nprint(\"session_id_1: {}\".format(session_1.session_id))\nprint(\"session_id_2: {}\".format(session_2.session_id))\n```\n\n----------------------------------------\n\nTITLE: MultiOn Session Step Execution\nDESCRIPTION: Implementation of step-by-step browser automation using MultiOn with AgentOps tracking, including session creation, step execution, and cleanup\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Step_by_step_web_browsing.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmultion = MultiOn(\n    api_key=MULTION_API_KEY,\n    agentops_api_key=AGENTOPS_API_KEY,\n)\n\nurl = \"https://www.agentops.ai/\"\ncmd = \"what three things do i get with agentops\"\ncreate_session_response = multion.sessions.create(url=url)\nsession_id = create_session_response.session_id\nprint(create_session_response.message)\nbrowser_params = SessionsStepRequestBrowserParams(height=1.1, width=1.1)\nrequest_options = RequestOptions(\n    timeout_in_seconds=60, max_retries=2, additional_headers={\"test\": \"ing\"}\n)\nstep_session_response = multion.sessions.step(\n    session_id=session_id,\n    cmd=cmd,\n    url=url,\n    browser_params=browser_params,\n    include_screenshot=True,\n    request_options=request_options,\n)\nprint(step_session_response.message)\n\nwhile step_session_response.status == \"CONTINUE\":\n    step_session_response = multion.sessions.step(\n        session_id=session_id,\n        cmd=cmd,\n        url=url,\n        include_screenshot=True,\n    )\n    print(step_session_response.message)\n\nif step_session_response.status == \"DONE\":\n    print(\"task completed\")\n\nget_screenshot = multion.sessions.screenshot(session_id=session_id)\nclose_session_response = multion.sessions.close(session_id=session_id)\n```\n\n----------------------------------------\n\nTITLE: Generating Chat Completion with AI21 Jamba 1.5 Model\nDESCRIPTION: This snippet demonstrates how to generate a chat completion using the AI21 Jamba 1.5 model and print the response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat.completions.create(\n    messages=messages,\n    model=\"jamba-1.5-mini\",\n)\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Printing System Messages and Task Prompts\nDESCRIPTION: Displays the system messages for the AI assistant and user, as well as the original, specified, and final task prompts.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/camel.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(\n    Fore.GREEN\n    + f\"AI Assistant System Message:\\n{search_session.assistant_sys_msg}\\n\"\n)\nprint(Fore.BLUE + f\"AI User System Message:\\n{search_session.user_sys_msg}\\n\")\n\nprint(Fore.YELLOW + f\"Original Task Prompt:\\n{task_prompt}\\n\")\nprint(\n    Fore.CYAN\n    + \"Specified Task Prompt:\"\n    + f\"\\n{search_session.specified_task_prompt}\\n\"\n)\nprint(Fore.RED + f\"Final Task Prompt:\\n{search_session.task_prompt}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Workflow Decorator Implementation\nDESCRIPTION: Example of using the @workflow decorator to track workflow operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/decorators.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import workflow\n\n@workflow\ndef my_workflow(data):\n    # Workflow implementation\n    return result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cyberware Items by Creator in Python\nDESCRIPTION: A function that filters cyberware items by corporation name, selects a random item from the filtered list, and returns formatted information. It includes a simulated delay to mimic an online API request.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_cyberware_by_creator(creator_name):\n    # Filter the items by creator name (case-insensitive)\n    filtered_items = [item for item in cyberware_list if item[\"creator\"].lower() == creator_name.lower()]\n\n    # If there are no items found, handle it appropriately\n    if not filtered_items:\n        return \"No cyberware found for this creator.\"\n\n    # Select a random item from the filtered list\n    returned_item = random.choice(filtered_items)\n\n    # Pause for 2 seconds (simulate some kind of delay)\n    time.sleep(2)\n\n    # Create a final formatted string to return\n    final = f\"Name: {returned_item['name']}, Creator: {returned_item['creator']}, Bio: {returned_item['bio']}, Stats: {returned_item['stats']}\"\n\n    return final\n```\n\n----------------------------------------\n\nTITLE: Loading API Keys from Environment\nDESCRIPTION: Loads OpenAI and AgentOps API keys from environment variables or fallback to placeholder values.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your openai key here>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your agentops key here>\"\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Streaming AI21 Chat Completion with AgentOps\nDESCRIPTION: Example of using AI21's streaming chat completion API asynchronously with AgentOps integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ai21.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ai21 import AsyncAI21Client\nimport agentops\nimport asyncio\n\nasync def main():\n    agentops.init(<INSERT YOUR API KEY HERE>)\n    client = AsyncAI21Client(api_key=\"your-api-key\")\n\n    messages = [\n        ChatMessage(\n            content=\"You are a world renowned poet in the style of Edgar Allan Poe.\",\n            role=\"system\",\n        ),\n        ChatMessage(\n            content=\"Write me a short poem about the AI agents co-existing within the human brain.\",\n            role=\"user\",\n        ),\n    ]\n\n    complete_response = \"\"\n\n    response = await client.chat.completions.create(\n        messages=messages,\n        model=\"jamba-1.5-mini\",\n        stream=True,\n    )\n\n    async for chunk in response:\n      complete_response += str(chunk.choices[0].delta.content)\n\n    print(complete_response)\n    agentops.end_session('Success')\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Install the necessary Python packages cohere and agentops using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/cohere_examples/cohere_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U cohere\n%pip install -U agentops\n```\n\n----------------------------------------\n\nTITLE: Testing Enemy Scanning Function in Python\nDESCRIPTION: A simple test call to the enemyscan function with a parameter of 5, which will generate information for 6 random demons.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nenemyscan(5)\n```\n\n----------------------------------------\n\nTITLE: Sending API Request to Agent Server using cURL\nDESCRIPTION: Provides a cURL command to send a chat request to the agent's API when running as a server. The request includes user ID, session ID, and a query about swarmzero.ai.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/web_search_agent.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:8000/api/v1/chat' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: multipart/form-data' \\\n  -F 'user_id=test_user' \\\n  -F 'session_id=test_web_search_agent' \\\n  -F 'chat_data={\"messages\":[{\"role\":\"user\",\"content\":\"what is swarmzero.ai about?\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Parameterized Session Decorator\nDESCRIPTION: Example of using the @session decorator with custom parameters like name and version.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/decorators.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@session(name=\"custom-session-name\", version=1)\ndef my_workflow():\n    # Your session code here\n    return result\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statements for all necessary Python modules and libraries required for the Markdown validator.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/markdown_validator.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom crewai import Agent, Task\nfrom crewai.tools import tool\nfrom langchain_openai import ChatOpenAI\nimport agentops\nimport os\nfrom dotenv import load_dotenv\nfrom pymarkdown.api import PyMarkdownApi, PyMarkdownApiException\n```\n\n----------------------------------------\n\nTITLE: Sending API Request to Anthropic with Tool Configuration\nDESCRIPTION: Creating a request to the Anthropic API that includes the custom tool definition for generating missions, allowing Claude to use the tool to fetch mission data.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.messages.create(\n    max_tokens=5000,\n    model=\"claude-3-5-sonnet-20240620\",\n    tools=[\n        {\n            \"name\": \"generate_missions\",\n            \"description\": \"Retrieve three missions for the DoomSlayer\",\n            \"input_schema\": {\"type\": \"object\", \"properties\": {}, \"required\": []},\n        }\n    ],\n    messages=initial_messages,\n)\n\nprint(response.content)\n```\n\n----------------------------------------\n\nTITLE: Generating Contextual Answers with AI21\nDESCRIPTION: This code demonstrates how to use AI21's contextual answering capability without streaming, providing a context and a question to generate an answer.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nCONTEXT = \"\"\"\nIn 2020 and 2021, enormous QE â€” approximately $4.4 trillion, or 18%, of 2021 gross\ndomestic product (GDP) â€” and enormous fiscal stimulus (which has been and\nalways will be inflationary) â€” approximately $5 trillion, or 21%, of 2021 GDP\nâ€” stabilized markets and allowed companies to raise enormous amounts of\ncapital. In addition, this infusion of capital saved many small businesses and\nput more than $2.5 trillion in the hands of consumers and almost $1 trillion into\nstate and local coffers. These actions led to a rapid decline in unemployment, \ndropping from 15% to under 4% in 20 months â€” the magnitude and speed of which were both\nunprecedented. Additionally, the economy grew 7% in 2021 despite the arrival of\nthe Delta and Omicron variants and the global supply chain shortages, which were\nlargely fueled by the dramatic upswing in consumer spending and the shift in\nthat spend from services to goods.\n\"\"\"\nresponse = client.answer.create(\n    context=CONTEXT,\n    question=\"Did the economy shrink after the Omicron variant arrived?\",\n)\nprint(response.answer)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps\nDESCRIPTION: Initializing AgentOps with API key and default tags for monitoring.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-sync.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"anthropic-example\"])\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installs the necessary Python packages agentops and anthropic using pip within a notebook environment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentops\n%pip install anthropic\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Conventions for Attribute Naming in Python\nDESCRIPTION: Demonstrates how to properly use constants from the semconv module to create standardized attribute names following OpenTelemetry semantic conventions for LLM systems.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/openai_agents/README.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Using constants from semconv module\nattributes[CoreAttributes.TRACE_ID] = trace_id\nattributes[WorkflowAttributes.WORKFLOW_NAME] = trace.name\nattributes[SpanAttributes.LLM_SYSTEM] = \"openai\"\nattributes[MessageAttributes.COMPLETION_CONTENT.format(i=0)] = content\n```\n\n----------------------------------------\n\nTITLE: Using Retrieval Tool with PDF Analysis\nDESCRIPTION: Shows how to use the configured Retrieval tool to analyze contents of an uploaded PDF file.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nthread, run = create_thread_and_run(\n    \"What are some cool math concepts behind this ML paper pdf? Explain in two sentences.\"\n)\nrun = wait_on_run(run, thread)\npretty_print(get_response(thread))\n```\n\n----------------------------------------\n\nTITLE: Ending an AgentOps Session with Result\nDESCRIPTION: Demonstrates how to properly end an AgentOps monitoring session with a success status, which is important for tracking completion rates and outcomes.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/simple_agent.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Importing AgentOps Dependencies\nDESCRIPTION: Import statements for required modules including OpenAI client, AgentOps decorators, and environment utilities.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/recording-operations.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\nfrom agentops.sdk.decorators import session, agent, operation\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Environment variable configuration for AgentOps and Gemini API keys.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/gemini.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\nGEMINI_API_KEY=<YOUR GEMINI API KEY>\n```\n\n----------------------------------------\n\nTITLE: Initial Authentication with API Key\nDESCRIPTION: Creates a new session using an API key and receives a JWT token for subsequent requests. Requires API key and session details in the request body.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/rest.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.agentops.ai/create_session \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Agentops-Api-Key: your_api_key\" \\\n  -d '{\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"init_timestamp\": \"2024-03-14T12:00:00Z\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys and Configuring Logging for AgentOps\nDESCRIPTION: Loads environment variables for API keys and configures logging to DEBUG level to observe agent assignments in the console output.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\nlogging.basicConfig(\n    level=logging.DEBUG\n)  # this will let us see that calls are assigned to an agent\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Imports all necessary Python libraries including Anthropic's sync and async clients, AgentOps for monitoring, and utilities for environment variables, randomization, async operations, and UUID generation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-async.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom anthropic import Anthropic, AsyncAnthropic\nimport agentops\nfrom dotenv import load_dotenv\nimport os\nimport random\nimport asyncio\nimport uuid\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Agent Tracking\nDESCRIPTION: Installs the necessary Python packages for implementing multi-agent tracking: OpenAI for the AI models, AgentOps for tracking, and python-dotenv for environment variable management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI to Summarize MultiOn Browse Results\nDESCRIPTION: This snippet demonstrates how to use OpenAI's GPT-3.5-turbo model to summarize the results from a MultiOn browse action, formatting the output as a markdown table.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Autonomous_web_browsing.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    {\n        \"role\": \"user\",\n        \"content\": f\"Format this data as a markdown table: {browse_response.message}\",\n    }\n]\nclient = openai.OpenAI()\nresponse = client.chat.completions.create(messages=messages, model=\"gpt-3.5-turbo\")\n\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Interacting with SwarmZero Agent via HTTP\nDESCRIPTION: Example curl command to interact with a running SwarmZero agent through its HTTP API, sending a chat message and receiving a response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/swarmzero.mdx#2025-04-07_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:8000/api/v1/chat' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: multipart/form-data' \\\n  -F 'user_id=test_user' \\\n  -F 'session_id=test_web_search_agent' \\\n  -F 'chat_data={\"messages\":[{\"role\":\"user\",\"content\":\"what is Decentralized-AI about about?\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for CrewAI and AgentOps\nDESCRIPTION: Import statements for CrewAI components, tools, AgentOps, and other utility libraries needed for the job posting generator.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/job_posting.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom crewai import Crew, Agent, Task\nfrom crewai_tools.tools import WebsiteSearchTool, SerperDevTool, FileReadTool\nimport agentops\nimport os\nfrom dotenv import load_dotenv\nfrom IPython.core.error import (\n    StdinNotImplementedError,\n)  # only needed by AgentOps testing automation\n```\n\n----------------------------------------\n\nTITLE: Importing LangChain and AgentOps Dependencies\nDESCRIPTION: Import statements for necessary LangChain and AgentOps dependencies in Python.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/langchain.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\nfrom agentops.langchain_callback_handler import LangchainCallbackHandler\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for MultiOn, AgentOps, and OpenAI\nDESCRIPTION: This snippet demonstrates how to set API keys for MultiOn, AgentOps, and OpenAI. It uses environment variables or allows manual input of API keys.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Sample_browsing_agent.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nMULTION_API_KEY = os.getenv(\"MULTION_API_KEY\") or \"<your_multion_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for OpenAI and AgentOps\nDESCRIPTION: Loads environment variables and sets API keys for OpenAI and AgentOps services. Provides flexibility to set keys either through environment variables or directly in the code.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/demos/agentchat_agentops.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with Camel AI\nDESCRIPTION: Python code snippet showing how to initialize AgentOps for use with Camel AI, including setting up environment variables and importing necessary modules.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport agentops\nfrom camel.agents import ChatAgent\nfrom camel.messages import BaseMessage\nfrom camel.models import ModelFactory\nfrom camel.types import ModelPlatformType, ModelType\n\n# Initialize AgentOps\nagentops.init(os.getenv(\"AGENTOPS_API_KEY\"), tags=[\"CAMEL Example\"])\n\n# Import toolkits after AgentOps init for tracking\nfrom camel.toolkits import SearchToolkit\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Ollama and AgentOps Integration\nDESCRIPTION: Installs the necessary Python packages for integrating Ollama with AgentOps. This includes the Ollama client, AgentOps monitoring SDK, and python-dotenv for environment variable management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ollama_examples/ollama_examples.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U ollama\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session in Python\nDESCRIPTION: This code snippet ends the AgentOps session, marking it as successful. This should be called after all tracked operations are complete to finalize the session in the AgentOps dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multion.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Printing CamelAI Session Details\nDESCRIPTION: Outputs the system messages, task prompts, and other session details for verification and debugging.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-multi-agent-example.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(\n    Fore.GREEN\n    + f\"AI Assistant System Message:\\n{search_session.assistant_sys_msg}\\n\"\n)\nprint(Fore.BLUE + f\"AI User System Message:\\n{search_session.user_sys_msg}\\n\")\n\nprint(Fore.YELLOW + f\"Original Task Prompt:\\n{task_prompt}\\n\")\nprint(\n    Fore.CYAN\n    + \"Specified Task Prompt:\"\n    + f\"\\n{search_session.specified_task_prompt}\\n\"\n)\nprint(Fore.RED + f\"Final Task Prompt:\\n{search_session.task_prompt}\\n\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps and Langchain in Python\nDESCRIPTION: Installs the necessary Python packages (langchain and agentops) using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_v0_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain==0.1.6\n%pip install agentops\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI to Summarize Multion Output in Python\nDESCRIPTION: This snippet uses OpenAI's GPT-3.5-turbo model to summarize the output from a Multion browse action. It formats the data as a markdown table using the OpenAI API.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multion.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    {\n        \"role\": \"user\",\n        \"content\": f\"Format this data as a markdown table: {browse_response.message}\",\n    }\n]\nclient = openai.OpenAI()\nresponse = client.chat.completions.create(messages=messages, model=\"gpt-3.5-turbo\")\n\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Loading API Keys from Environment Variables\nDESCRIPTION: Retrieves API keys for XAI and AgentOps from environment variables using dotenv, with fallback to placeholder values.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_vision_examples.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nXAI_API_KEY = os.getenv(\"XAI_API_KEY\") or \"<your_xai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Using xAI's Grok model with Anthropic client\nDESCRIPTION: Python code example showing how to use xAI's Grok model through the Anthropic client, including API key setup and message creation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/xai.mdx#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom anthropic import Anthropic\n\nXAI_API_KEY = \"you xai api key\"\nclient = Anthropic(\n    api_key=XAI_API_KEY,\n    base_url=\"https://api.x.ai\",\n)\nmessage = client.messages.create(\n    model=\"grok-beta\",\n    max_tokens=128,\n    system=\"You are Grok, a chatbot inspired by the Hitchhiker's Guide to the Galaxy.\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"What is the meaning of life, the universe, and everything?\",\n        },\n    ],\n)\nprint(message.content)\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with Custom Name Decorator in Python\nDESCRIPTION: This example demonstrates how to create an agent class with a custom name using the @agent decorator. The agent is explicitly named 'ResearchAgent' and includes basic initialization structure.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/tracking-agents.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import agent\n\n@agent(name='ResearchAgent')\nclass MyAgent:\n    def __init__(self):\n        # Agent initialization\n        pass\n        \n    # Agent methods\n```\n\n----------------------------------------\n\nTITLE: Making Synchronous OpenAI API Call\nDESCRIPTION: Creates a synchronous completion request to the GPT-4o-mini model and prints the generated story response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_sync.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    messages=messages,\n)\n\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installation of necessary Python packages including pyautogen, agentops, and python-dotenv using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/autogen_examples/AgentChat.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U pyautogen\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Defining Task Prompt and Tools for CAMEL AI\nDESCRIPTION: Sets up the task prompt for the Apex Legends scenario and specifies the tools to be used by the AI agents.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/camel.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntask_prompt = (\n    \"We are in the Apex Legends Games. Determine the amount of\"\n    \"meele hits it will take to beat someone with a blue shield.\"\n    \"You should answer as if you are Pathfinder from the Apex Games.\"\n)\n\ntools = [\n    *MathToolkit().get_tools(),\n    *SearchToolkit().get_tools(),\n]\n```\n\n----------------------------------------\n\nTITLE: Using xAI's Grok model with OpenAI client\nDESCRIPTION: Python code example demonstrating how to use xAI's Grok model through the OpenAI client, including API key setup and chat completion.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/xai.mdx#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\n\nXAI_API_KEY = \"you xai api key\"\nclient = OpenAI(\n    api_key=XAI_API_KEY,\n    base_url=\"https://api.x.ai/v1\",\n)\n\ncompletion = client.chat.completions.create(\n    model=\"grok-beta\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are Grok, a chatbot inspired by the Hitchhikers Guide to the Galaxy.\"},\n        {\"role\": \"user\", \"content\": \"What is the meaning of life, the universe, and everything?\"},\n    ],\n)\n\nprint(completion.choices[0].message)\n```\n\n----------------------------------------\n\nTITLE: Setting Span Attributes Using Semantic Conventions in OpenTelemetry\nDESCRIPTION: Shows the correct way to set span attributes using semantic conventions from the agentops/semconv module.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/OpenTelemetry.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.semconv import agent\n\n# Good pattern - using semantic conventions\nspan.set_attribute(agent.AGENT_NAME, \"My Agent\")\n```\n\n----------------------------------------\n\nTITLE: Loading API Keys from Environment Variables\nDESCRIPTION: Setting up API keys for Anthropic and AgentOps by loading them from environment variables or using placeholder values.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nANTHROPIC_API_KEY = os.getenv(\"ANTHROPIC_API_KEY\") or \"ANTHROPIC API KEY\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"AGENTOPS API KEY\"\n```\n\n----------------------------------------\n\nTITLE: Defining System and User Prompts for Image Analysis\nDESCRIPTION: Sets up the system prompt defining the assistant's role and capabilities, and the user prompt containing the instruction and image URL for analysis.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_vision_examples.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nSYSTEM_PROMPT = \"\"\"You are an expert image analysis assistant. When presented with an image, carefully examine and describe its contents in detail. \n\nFor this task, your goal is to:\n1. Identify all key elements, objects, people, or text in the image\n2. Provide a comprehensive description of what you observe\n3. Explain the context or historical significance if applicable\n4. Describe the image in a clear, objective, and informative manner\n\nPlease be precise, thorough, and focus on providing meaningful insights about the visual content.\"\"\"\n\nUSER_PROMPT = [\n    {\n        \"type\": \"text\",\n        \"text\": \"Analyze the image and provide a detailed description of what you see.\"\n    },\n    {\n        \"type\": \"image_url\",\n        \"image_url\": {\"url\": \"https://upload.wikimedia.org/wikipedia/commons/f/ff/First_Computer_Bug%2C_1945.jpg\"}\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Client and Message Handling Functions\nDESCRIPTION: Sets up the OpenAI client and defines core functions for submitting messages and getting responses from threads. Includes initialization of the Assistant ID and required API key configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\n\nMATH_ASSISTANT_ID = assistant.id  # or a hard-coded ID like \"asst-...\"\n\nclient = OpenAI(api_key=os.environ.get(\"OPENAI_API_KEY\", \"<your OpenAI API key if not set as env var>\"))\n\ndef submit_message(assistant_id, thread, user_message):\n    client.beta.threads.messages.create(\n        thread_id=thread.id, role=\"user\", content=user_message\n    )\n    return client.beta.threads.runs.create(\n        thread_id=thread.id,\n        assistant_id=assistant_id,\n    )\n\n\ndef get_response(thread):\n    return client.beta.threads.messages.list(thread_id=thread.id, order=\"asc\")\n```\n\n----------------------------------------\n\nTITLE: Making Streaming OpenAI API Call\nDESCRIPTION: Creates a streaming completion request to the GPT-4o-mini model, processing and displaying response chunks as they arrive in real-time.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_sync.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstream = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    messages=messages,\n    stream=True,\n)\n\nfor chunk in stream:\n    print(chunk.choices[0].delta.content or \"\", end=\"\")\n```\n\n----------------------------------------\n\nTITLE: Importing AgentOps Callback Handler for Langchain in Python\nDESCRIPTION: Imports the LangchainCallbackHandler from agentops for integration with Langchain.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_v0_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.partners.langchain_callback_handler import (\n    LangchainCallbackHandler as AgentOpsLangchainCallbackHandler,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for MultiOn and AgentOps Integration\nDESCRIPTION: This snippet installs the necessary Python packages for the MultiOn and AgentOps integration, including multion, agentops, openai, and python-dotenv.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Sample_browsing_agent.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U multion\n%pip install -U agentops\n%pip install -U openai\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Executing and Waiting for OpenAI Assistant Run Completion in Python\nDESCRIPTION: This snippet executes the wait_on_run function to wait for the run to complete, then displays the final run status.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrun = wait_on_run(run, thread)\nshow_json(run)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps with LiteLLM\nDESCRIPTION: Installation commands for the necessary Python packages: litellm for model interfacing, agentops for tracking, and python-dotenv for environment variable management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/litellm_examples/litellm_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U litellm\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CAMEL AI and AgentOps\nDESCRIPTION: Installation commands for required packages agentops and camel-ai with all dependencies.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentops\n%pip install camel-ai[all]\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for AgentOps and LiteLLM\nDESCRIPTION: Loading API keys from environment variables or directly setting them for both OpenAI (or other LLM provider) and AgentOps. Allows for flexibility in how keys are provided.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/litellm_examples/litellm_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = (\n    os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\n)  # or the provider of your choosing\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Running CAMEL AI Chat Loop\nDESCRIPTION: Executes the main chat loop for the CAMEL AI session, handling responses from both the assistant and user agents, and printing the conversation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/camel.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nn = 0\ninput_msg = search_session.init_chat()\nwhile n < 50:\n    n += 1\n    assistant_response, user_response = search_session.step(input_msg)\n\n    if assistant_response.terminated:\n        print(\n            Fore.GREEN\n            + (\n                \"AI Assistant terminated. Reason: \"\n                f\"{assistant_response.info['termination_reasons']}.\"\n            )\n        )\n        break\n    if user_response.terminated:\n        print(\n            Fore.GREEN\n            + (\n                \"AI User terminated. \"\n                f\"Reason: {user_response.info['termination_reasons']}.\"\n            )\n        )\n        break\n\n    # Print output from the user\n    print_text_animated(\n        Fore.BLUE + f\"AI User:\\n\\n{user_response.msg.content}\\n\"\n    )\n\n    # Print output from the assistant, including any function execution information\n    print_text_animated(Fore.GREEN + \"AI Assistant:\")\n    tool_calls: List[FunctionCallingRecord] = assistant_response.info[\n        'tool_calls'\n    ]\n    for func_record in tool_calls:\n        print_text_animated(f\"{func_record}\")\n    print_text_animated(f\"{assistant_response.msg.content}\\n\")\n\n    if \"CAMEL_TASK_DONE\" in user_response.msg.content:\n        break\n\n    input_msg = assistant_response.msg\n```\n\n----------------------------------------\n\nTITLE: Displaying the Final Response in Python\nDESCRIPTION: Extracts and displays the textual portion of the LLM's evaluation of the cyberware recommendation for the character build.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmessage = response.content[0].text\nprint(message)\n```\n\n----------------------------------------\n\nTITLE: Streaming Ollama Chat Response\nDESCRIPTION: Implementing streaming chat responses with Ollama using the Mistral model.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/ollama.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstream = ollama.chat(\n    model='mistral',\n    messages=[{\n        'role': 'user',\n        'content': 'Write a haiku about monitoring AI agents',\n    }],\n    stream=True)\n\nfor chunk in stream:\n    print(chunk['message']['content'], end='')\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys\nDESCRIPTION: Configuration of OpenAI and AgentOps API keys using environment variables or direct assignment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/markdown_validator.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Generating Unit Test with QA Agent\nDESCRIPTION: This snippet uses the QaAgent to generate a Python unit test for the previously generated prime number function.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngenerated_test = qa.completion(\n    \"Write a python unit test that test the following function: \\n \" + generated_func\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and Gemini Model\nDESCRIPTION: This snippet initializes AgentOps and creates an instance of the Gemini generative model.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/gemini_examples/gemini_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagentops.init()\nmodel = genai.GenerativeModel(\"gemini-1.5-flash\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for LangChain and AgentOps Integration\nDESCRIPTION: Installs the necessary Python packages including LangChain, OpenAI integration, AgentOps, and python-dotenv for environment variable management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/langchain.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain==0.2.9\n%pip install langchain_openai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Python\nDESCRIPTION: Loads environment variables from a .env file using python-dotenv.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_v0_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\n\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Reading Training Data from CSV\nDESCRIPTION: Imports training data from CSV file to train the LLM with assistant and user messages.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport csv\n\nwith open('bladewolf_training.csv', 'r') as file:\n    csv_reader = csv.reader(file)\n\n    # Be sure to skip the first row (Label)\n    next(csv_reader)\n    \n    # Iterate over each row in the csv file\n    for row in csv_reader:\n        # Ensure each row has exactly 2 columns before proceeding\n        if len(row) == 2:\n            BaseMessage.make_assistant_message(role_name=\"assistant\", content=row[0])  # Add assistant context\n            BaseMessage.make_user_message(role_name=\"user\", content=row[1])  # Add user context\n```\n\n----------------------------------------\n\nTITLE: Initializing Anthropic Client\nDESCRIPTION: Creating an instance of the Anthropic client using the API key.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-sync.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = Anthropic(api_key=ANTHROPIC_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Using AI21 Task-Specific Model with AgentOps\nDESCRIPTION: Example of using AI21's contextual answers endpoint, a task-specific model, with AgentOps integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ai21.mdx#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ai21 import AI21Client\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nclient = AI21Client(api_key=\"your-api-key\")\n\nCONTEXT = \"\"\"\nIn 2020 and 2021, enormous QE â€” approximately $4.4 trillion, or 18%, of 2021 gross\ndomestic product (GDP) â€” and enormous fiscal stimulus (which has been and\nalways will be inflationary) â€” approximately $5 trillion, or 21%, of 2021 GDP\nâ€” stabilized markets and allowed companies to raise enormous amounts of\ncapital. In addition, this infusion of capital saved many small businesses and\nput more than $2.5 trillion in the hands of consumers and almost $1 trillion into\nstate and local coffers. These actions led to a rapid decline in unemployment, \ndropping from 15% to under 4% in 20 months â€” the magnitude and speed of which were both\nunprecedented. Additionally, the economy grew 7% in 2021 despite the arrival of\nthe Delta and Omicron variants and the global supply chain shortages, which were\nlargely fueled by the dramatic upswing in consumer spending and the shift in\nthat spend from services to goods.\n\"\"\"\n\nresponse = client.answer.create(\n    context=CONTEXT,\n    question=\"Did the economy shrink after the Omicron variant arrived?\",\n)\n\nprint(response.answer)\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for MultiOn and AgentOps\nDESCRIPTION: This code snippet imports the necessary Python libraries for working with MultiOn, AgentOps, OpenAI, and environment variables.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Sample_browsing_agent.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom multion.client import MultiOn\nfrom multion.core.request_options import RequestOptions\nimport openai\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Importing Button Heartbeat Animation Script in JavaScript\nDESCRIPTION: This code imports a JavaScript module to add a heartbeat animation effect to buttons.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/examples.mdx#2025-04-07_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"module\" src=\"/scripts/button_heartbeat_animation.js\" />\n```\n\n----------------------------------------\n\nTITLE: Executing Validation Task\nDESCRIPTION: Execution of the Markdown validation task using the configured agent.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/markdown_validator.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsyntax_review_task.execute_sync()\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Client\nDESCRIPTION: Initializes the AgentOps client with the API key and default tags for tracking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_examples.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"xai-example\", \"grok\"])\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps and Groq\nDESCRIPTION: This snippet installs the necessary packages for working with AgentOps and Groq. It uses pip to install the latest versions of agentops, groq, and python-dotenv.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U agentops\n%pip install -U groq\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API Key via Environment Variables\nDESCRIPTION: Environment variable configuration for AgentOps API key\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/llama_stack.mdx#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Generating Table Description for Agent\nDESCRIPTION: Inspect the database to generate a description of the 'receipts' table, which will be used by the agent to generate SQL queries.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/text_to_sql.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninspector = inspect(engine)\ncolumns_info = [(col[\"name\"], col[\"type\"]) for col in inspector.get_columns(\"receipts\")]\n\ntable_description = \"Columns:\\n\" + \"\\n\".join([f\"  - {name}: {col_type}\" for name, col_type in columns_info])\nprint(table_description)\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Client and AgentOps Monitoring\nDESCRIPTION: Sets up the OpenAI client with the API key and initializes AgentOps monitoring with default tags. This configuration enables AgentOps to track OpenAI API calls automatically.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai-gpt.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nopenai = OpenAI(api_key=OPENAI_API_KEY)\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"openai-gpt-notebook\"])\n```\n\n----------------------------------------\n\nTITLE: Synchronous Chat Completion\nDESCRIPTION: Example of making a synchronous chat completion request to Mistral API.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/mistral_examples/mistral_example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat.complete(\n    model=\"open-mistral-nemo\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"What is 2+2?\",\n        },\n    ],\n)\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statements for MultiOn, AgentOps, and supporting libraries needed for browser automation and environment configuration\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Step_by_step_web_browsing.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport multion\nfrom multion.client import MultiOn\nfrom multion.sessions.types.sessions_step_request_browser_params import (\n    SessionsStepRequestBrowserParams,\n)\nfrom multion.core.request_options import RequestOptions\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Creating CrewAI Agent\nDESCRIPTION: Creation of a CrewAI agent with specific role, goal, and configuration for Markdown validation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/markdown_validator.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngeneral_agent = Agent(\n    role=\"Requirements Manager\",\n    goal=\"\"\"Provide a detailed list of the markdown \n                            linting results. Give a summary with actionable \n                            tasks to address the validation results. Write your \n                            response as if you were handing it to a developer \n                            to fix the issues.\n                            DO NOT provide examples of how to fix the issues or\n                            recommend other tools to use.\"\"\",\n    backstory=\"\"\"You are an expert business analyst \n\t\t\t\t\tand software QA specialist. You provide high quality, \n                    thorough, insightful and actionable feedback via \n                    detailed list of changes and actionable tasks.\"\"\",\n    allow_delegation=False,\n    verbose=True,\n    tools=[markdown_validation_tool],\n    llm=default_llm,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Anthropic Client\nDESCRIPTION: Creates an instance of the Anthropic client using the API key for Claude model interactions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-async.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = Anthropic(api_key=ANTHROPIC_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Importing Scroll Image Fade-in Animation Script in JavaScript\nDESCRIPTION: This code imports a JavaScript module to add fade-in animation effects to images when scrolling.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/examples.mdx#2025-04-07_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"module\" src=\"/scripts/scroll-img-fadein-animation.js\" />\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for AgentOps and OpenAI\nDESCRIPTION: This snippet loads environment variables for AgentOps and OpenAI API keys, allowing for secure key management in the application.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_examples.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nAGENTOPS_API_KEY = os.environ.get(\"AGENTOPS_API_KEY\")\nOPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Creating Validation Task\nDESCRIPTION: Definition of the validation task with specific instructions and requirements.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/markdown_validator.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsyntax_review_task = Task(\n    description=f\"\"\"\n        Use the markdown_validation_tool to review \n        the file(s) at this path: {filename}\n        \n        Be sure to pass only the file path to the markdown_validation_tool.\n        Use the following format to call the markdown_validation_tool:\n        Do I need to use a tool? Yes\n        Action: markdown_validation_tool\n        Action Input: {filename}\n\n        Get the validation results from the tool \n        and then summarize it into a list of changes\n        the developer should make to the document.\n        DO NOT recommend ways to update the document.\n        DO NOT change any of the content of the document or\n        add content to it. It is critical to your task to\n        only respond with a list of changes.\n        \n        If you already know the answer or if you do not need \n        to use a tool, return it as your Final Answer.\"\"\",\n    agent=general_agent,\n    expected_output=\"\",\n)\n```\n\n----------------------------------------\n\nTITLE: Processing Image with Grok Vision Model\nDESCRIPTION: Sends the system and user prompts to the Grok vision model via the OpenAI client and prints the generated response content.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_vision_examples.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat.completions.create(\n    model=\"grok-vision-beta\",\n    messages=[\n        {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n        {\"role\": \"user\", \"content\": USER_PROMPT}\n    ],\n    max_tokens=4096,\n)\n\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Synchronous Streaming Chat\nDESCRIPTION: Example of making a synchronous streaming chat request to Mistral API with response handling.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/mistral_examples/mistral_example.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat.stream(\n    model=\"open-mistral-nemo\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"What is the Leibniz theorem?\",\n        }\n    ],\n)\n\nresult = \"\"\nfor event in response:\n    if event.data.choices[0].finish_reason == \"stop\":\n        print(result)\n    else:\n        result += event.data.choices[0].delta.content\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and using LiteLLM in Python\nDESCRIPTION: Python code snippet demonstrating how to initialize AgentOps, use LiteLLM for model completion, and end the session. Requires adjusting the LiteLLM call to use the 'completion' function.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/litellm.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nimport litellm\n\nagentops.init(<INSERT YOUR API KEY HERE>)\n\n# Some code here...\n\nresponse = litellm.completion(model=\"gpt-4o\", messages=messages)\n\n# Some code here...\n\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Rendering Discord Community Link Component in React/JSX\nDESCRIPTION: Creates a styled link component that directs users to a Discord community. Includes a Discord logo image and invitation text, styled with custom CSS classes.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/snippets/discord-cta.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<a className=\"discord-cta-div\" href=\"https://discord.gg/UgJyyxx7uc\" target=\"_blank\" rel=\"noopener noreferrer\">\n  <img className=\"discord-logo\" src=\"https://github.com/AgentOps-AI/agentops/blob/e2ab42a607a9657907dc4d3727d4e07d93c52e94/docs/v1/img/discord.png?raw=true\" alt=\"Discord Logo\"/>\n  <span className=\"discord-cta-text\">\n    Join our Discord community for the latest updates and support!\n  </span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Testing display_quiz Function with Sample Quiz\nDESCRIPTION: This snippet demonstrates how to use the display_quiz function with a sample quiz containing both free-response and multiple-choice questions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nresponses = display_quiz(\n    \"Sample Quiz\",\n    [\n        {\"question_text\": \"What is your name?\", \"question_type\": \"FREE_RESPONSE\"},\n        {\n            \"question_text\": \"What is your favorite color?\",\n            \"question_type\": \"MULTIPLE_CHOICE\",\n            \"choices\": [\"Red\", \"Blue\", \"Green\", \"Yellow\"],\n        },\n    ],\n)\nprint(\"Responses:\", responses)\n```\n\n----------------------------------------\n\nTITLE: Non-Streaming Chat Completion - Python\nDESCRIPTION: Example of non-streaming chat completion using Llama-3.2-1B-Instruct model with direct response handling.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/llama_stack_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.start_session()\nresponse = client.inference.chat_completion(\n    messages=[\n        UserMessage(\n            content=\"write me a 3 word poem about the moon\",\n            role=\"user\",\n        ),\n    ],\n    model_id=\"meta-llama/Llama-3.2-1B-Instruct\",\n    stream=False\n)\n\nprint(f\"> Response: {response.completion_message.content}\")\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys for MultiOn and AgentOps\nDESCRIPTION: Setting up API keys using environment variables with fallback to manual key entry. Supports both .env file configuration and direct key assignment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Webpage_data_retrieval.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nMULTION_API_KEY = os.getenv(\"MULTION_API_KEY\") or \"<your_multion_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for XAI and AgentOps\nDESCRIPTION: Imports necessary modules including OpenAI, AgentOps, os, and dotenv for environment variable loading.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_examples.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Validation Tool\nDESCRIPTION: Implementation of a custom tool for validating Markdown syntax using PyMarkdownApi.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/markdown_validator.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@tool(\"markdown_validation_tool\")\ndef markdown_validation_tool(file_path: str) -> str:\n    \"\"\"\n    A tool to review files for markdown syntax errors.\n\n    Returns:\n    - validation_results: A list of validation results\n    and suggestions on how to fix them.\n    \"\"\"\n\n    print(\"\\n\\nValidating Markdown syntax...\\n\\n\" + file_path)\n\n    try:\n        if not (os.path.exists(file_path)):\n            return \"Could not validate file. The provided file path does not exist.\"\n\n        scan_result = PyMarkdownApi().scan_path(file_path.rstrip().lstrip())\n        results = str(scan_result)\n        return results  # Return the reviewed document\n    except PyMarkdownApiException as this_exception:\n        print(f\"API Exception: {this_exception}\", file=sys.stderr)\n        return f\"API Exception: {str(this_exception)}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional AgentOps Settings in Environment Variables\nDESCRIPTION: Shows all optional configuration settings for AgentOps including secondary API keys, custom endpoints, logging preferences, and data recording options. These settings allow for more granular control over the AgentOps integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/advanced-configuration.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Secondary API Key for simultaneously recording to a second project\nAGENTOPS_PARENT_KEY=<YOUR PARENT KEY>\n# The AgentOps API endpoint. Defaults to https://api.agentops.ai\nAGENTOPS_API_ENDPOINT=https://api.agentops.ai\n# Logging level. <DEBUG, INFO, CRITICAL>. Defaults to INFO\nAGENTOPS_LOGGING_LEVEL=INFO\n# Write logs to file <TRUE, FALSE>. Defaults to TRUE\nAGENTOPS_LOGGING_TO_FILE=TRUE\n# Whether to opt out of recording environment data. <FALSE, TRUE>. Defaults to FALSE\nAGENTOPS_ENV_DATA_OPT_OUT=FALSE\n```\n\n----------------------------------------\n\nTITLE: Manually Linking Multion Events to AgentOps Session\nDESCRIPTION: This code demonstrates how to manually link Multion browse events to an existing AgentOps session. It performs a web browsing action using Multion, which is automatically added to the AgentOps session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multion.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmultion = MultiOn(\n    api_key=MULTION_API_KEY,\n    agentops_api_key=AGENTOPS_API_KEY,\n)\ncmd = \"what three things do i get with agentops\"\nrequest_options = RequestOptions(\n    timeout_in_seconds=60, max_retries=4, additional_headers={\"test\": \"ing\"}\n)\n\nbrowse_response = multion.browse(\n    cmd=\"what three things do i get with agentops\",\n    url=\"https://www.agentops.ai/\",\n    max_steps=4,\n    include_screenshot=True,\n    request_options=request_options,\n)\n\nprint(browse_response.message)\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAI Client and Prompt Configuration\nDESCRIPTION: Initializes the OpenAI client and constructs the system and user prompts for the storytelling bot, organizing them into a messages array for the API call.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_sync.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = OpenAI(api_key=OPENAI_API_KEY)\n\nsystem_prompt = \"\"\"\nYou are a master storyteller, with the ability to create vivid and engaging stories.\nYou have experience in writing for children and adults alike.\nYou are given a prompt and you need to generate a story based on the prompt.\n\"\"\"\n\nuser_prompt = \"Write a story about a cyber-warrior trapped in the imperial time period.\"\n\nmessages = [\n    {\"role\": \"system\", \"content\": system_prompt},\n    {\"role\": \"user\", \"content\": user_prompt},\n]\n```\n\n----------------------------------------\n\nTITLE: Follow-up Question Processing\nDESCRIPTION: Processing a follow-up question by creating a new message and run, then retrieving the response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmessage = client.beta.threads.messages.create(thread_id=thread.id, role=\"user\", content=\"Could you explain this to me?\")\n\nrun = client.beta.threads.runs.create(\n    thread_id=thread.id,\n    assistant_id=assistant.id,\n)\n\nwait_on_run(run, thread)\n\nmessages = client.beta.threads.messages.list(thread_id=thread.id, order=\"asc\", after=message.id)\nshow_json(messages)\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys\nDESCRIPTION: Configuration of MultiOn and AgentOps API keys using environment variables or direct assignment\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Step_by_step_web_browsing.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nMULTION_API_KEY = os.getenv(\"MULTION_API_KEY\") or \"<your_multion_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for OpenAI and AgentOps\nDESCRIPTION: Installation commands for the OpenAI API client and AgentOps monitoring library using pip package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_sync.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n```\n\n----------------------------------------\n\nTITLE: Running Direct Chat with Agent using Asyncio\nDESCRIPTION: Demonstrates how to interact with the agent directly using the chat method. This approach allows for direct query-response interaction without starting a server.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/web_search_agent.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = asyncio.run(my_agent.chat(prompt=\"what is Decentralized-AI about about?\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and OpenAI Client\nDESCRIPTION: Initializes the AgentOps SDK with an API key and tags, and creates an OpenAI client for making LLM calls.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, tags=[\"multi-agent-notebook\"])\nopenai_client = OpenAI(api_key=OPENAI_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Generating Asynchronous Chat Completion with AI21 Jamba 1.5 Model\nDESCRIPTION: This code demonstrates how to generate an asynchronous chat completion using the AI21 Jamba 1.5 model and print the response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    async_response = await aclient.chat.completions.create(\n        messages=messages,\n        model=\"jamba-1.5-mini\",\n    )\n    print(async_response.choices[0].message.content)\n\n\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Basic Gemini Integration\nDESCRIPTION: Core initialization code for setting up Gemini with AgentOps, including model initialization and session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/gemini.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport google.generativeai as genai\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nmodel = genai.GenerativeModel(\"gemini-1.5-flash\")\n...\n# End of program (e.g. main.py)\nagentops.end_session(\"Success\") # Success|Fail|Indeterminate\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Keys\nDESCRIPTION: Commands to set up the required environment variables for Gemini and AgentOps API keys.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/gemini_examples/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport GEMINI_API_KEY='your-gemini-api-key'\nexport AGENTOPS_API_KEY='your-agentops-api-key'\n```\n\n----------------------------------------\n\nTITLE: Extracting Function Call Information in Python\nDESCRIPTION: This code extracts the function name and arguments from the Assistant's tool call, preparing for the execution of the custom function.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Extract single tool call\ntool_call = run.required_action.submit_tool_outputs.tool_calls[0]\nname = tool_call.function.name\narguments = json.loads(tool_call.function.arguments)\n\nprint(\"Function Name:\", name)\nprint(\"Function Arguments:\")\narguments\n```\n\n----------------------------------------\n\nTITLE: Installing CamelAI and AgentOps Dependencies\nDESCRIPTION: Installing the required packages for using CamelAI and AgentOps together. CamelAI is installed with all optional dependencies, and AgentOps is installed for monitoring the agents.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/README.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install camel-ai[all]\n%pip install agentops\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Installation of OpenAI and AgentOps packages using pip\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_async.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n```\n\n----------------------------------------\n\nTITLE: Multi-turn Conversation with Ollama\nDESCRIPTION: Implementing a multi-turn conversation using Ollama with message history.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/ollama.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    {\n        'role': 'user',\n        'content': 'What is AgentOps?'\n    },\n    {\n        'role': 'assistant',\n        'content': 'AgentOps is a monitoring and observability platform for LLM applications.'\n    },\n    {\n        'role': 'user',\n        'content': 'Can you give me 3 key features?'\n    }\n]\n\nresponse = ollama.chat(\n    model='mistral',\n    messages=messages\n)\nprint(response['message']['content'])\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Completion with AI21 Jamba Instruct Model\nDESCRIPTION: This code shows how to generate a streaming chat completion using the AI21 Jamba Instruct model and accumulate the response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = \"\"\n\nstream_response = client.chat.completions.create(\n    messages=messages,\n    model=\"jamba-instruct\",\n    stream=True,\n)\n\nfor chunk in stream_response:\n    response += str(chunk.choices[0].delta.content)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Launching MultiOn Browse Event with AgentOps Tracking\nDESCRIPTION: This snippet demonstrates how to create a MultiOn client, set up request options, and launch a browse event. The event is automatically tracked by AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Sample_browsing_agent.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmultion = MultiOn(\n    api_key=MULTION_API_KEY,\n    agentops_api_key=AGENTOPS_API_KEY,\n)\ncmd = \"what three things do i get with agentops\"\nrequest_options = RequestOptions(\n    timeout_in_seconds=60, max_retries=4, additional_headers={\"test\": \"ing\"}\n)\n\nbrowse_response = multion.browse(\n    cmd=\"what three things do i get with agentops\",\n    url=\"https://www.agentops.ai/\",\n    max_steps=4,\n    include_screenshot=True,\n    request_options=request_options,\n)\n\nprint(browse_response.message)\n```\n\n----------------------------------------\n\nTITLE: Operation Decorator in Agent Class\nDESCRIPTION: Example of using the @operation decorator within an agent class for tracking specific operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/decorators.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import agent, operation\n\n@agent\nclass MyAgent:\n    @operation\n    def perform_task(self, task):\n        # Operation implementation\n        return result\n```\n\n----------------------------------------\n\nTITLE: Creating Cyberware Database Mock\nDESCRIPTION: Defines a mock database of cyberware items with details such as name, creator, description, and stats for each enhancement.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncyberware_list = [\n    {\n        \"name\": \"Kiroshi Optics\",\n        \"creator\": \"Kiroshi\",\n        \"bio\": \"Advanced cybernetic eye implants providing enhanced vision, a heads-up display (HUD), and scanning capabilities.\",\n        \"stats\": {\n            \"vision_modes\": [\"Thermal\", \"Night Vision\", \"Zoom\"],\n            \"target_analysis\": \"Enemy Weak Spots Highlighted\",\n        },\n    },\n    {\n        \"name\": \"Gorilla Arms\",\n        \"creator\": \"Arasaka\",\n        \"bio\": \"Mechanical arms designed to enhance physical strength, allowing for powerful melee attacks and the ability to rip open doors.\",\n        \"stats\": {\"melee_damage_bonus\": \"+100%\", \"strength_check_bonus\": \"+20\"},\n    },\n    {\n        \"name\": \"Mantis Blades\",\n        \"creator\": \"Arasaka\",\n        \"bio\": \"Arm-mounted blades used for close combat, retractable from the forearms and capable of delivering high-speed slashes.\",\n        \"stats\": {\n            \"damage_type\": \"Physical\",\n            \"attack_speed\": \"+30%\",\n            \"bleed_chance\": \"50%\",\n        },\n    },\n    {\n        \"name\": \"Monowire\",\n        \"creator\": \"Kang Tao\",\n        \"bio\": \"A high-tech fiber-optic whip weapon that can slice through enemies with ease and can be charged for extra damage.\",\n        \"stats\": {\n            \"damage_type\": \"Physical/Electrical\",\n            \"charge_bonus_damage\": \"+200%\",\n            \"range\": \"5 meters\",\n        },\n    },\n    {\n        \"name\": \"Projectile Launch System\",\n        \"creator\": \"Militech\",\n        \"bio\": \"An arm-mounted cannon that allows the user to launch various types of projectiles, including grenades and explosive rounds.\",\n        \"stats\": {\n            \"ammo_types\": [\"Explosive\", \"Incendiary\", \"EMP\"],\n            \"blast_radius\": \"3 meters\",\n        },\n    },\n    {\n        \"name\": \"Syn-Lungs\",\n        \"creator\": \"Biotechnica\",\n        \"bio\": \"Synthetic lungs that improve the user's breathing efficiency and stamina, allowing for prolonged physical exertion.\",\n        \"stats\": {\"stamina_regen_rate\": \"+25%\", \"oxygen_capacity\": \"+30%\"},\n    },\n    {\n        \"name\": \"Reinforced Tendons\",\n        \"creator\": \"Arasaka\",\n        \"bio\": \"Muscular enhancements that allow the user to jump higher and perform acrobatic movements.\",\n        \"stats\": {\"jump_height\": \"+2 meters\", \"stamina_cost_reduction\": \"20%\"},\n    },\n    {\n        \"name\": \"Bionic Joints\",\n        \"creator\": \"Zetatech\",\n        \"bio\": \"Cybernetic enhancements to the joints, providing increased flexibility and limb strength.\",\n        \"stats\": {\"mobility_increase\": \"+15%\", \"limb_strength\": \"+20\"},\n    },\n    {\n        \"name\": \"Subdermal Armor\",\n        \"creator\": \"Militech\",\n        \"bio\": \"Under-the-skin armor implants that increase the user's resistance to damage.\",\n        \"stats\": {\"armor_bonus\": \"+200\", \"damage_resistance\": \"20%\"},\n    },\n    {\n        \"name\": \"Sandevistan\",\n        \"creator\": \"Dynalar\",\n        \"bio\": \"Reflex booster that slows down time for the user, allowing them to move at superhuman speed.\",\n        \"stats\": {\n            \"duration\": \"8 seconds\",\n            \"cooldown\": \"30 seconds\",\n            \"speed_increase\": \"+50%\",\n        },\n    },\n    {\n        \"name\": \"Berserk\",\n        \"creator\": \"Arasaka\",\n        \"bio\": \"An adrenaline-inducing cyberware that temporarily boosts the user's physical capabilities, including strength and damage resistance.\",\n        \"stats\": {\n            \"duration\": \"10 seconds\",\n            \"strength_bonus\": \"+30\",\n            \"damage_reduction\": \"15%\",\n        },\n    },\n    {\n        \"name\": \"Cyberdeck\",\n        \"creator\": \"NetWatch\",\n        \"bio\": \"Cybernetic interface used for hacking, allowing the user to deploy quickhacks and breach enemy systems.\",\n        \"stats\": {\"RAM_slots\": \"8\", \"quickhack_upload_speed\": \"+30%\"},\n    },\n    {\n        \"name\": \"Pain Editor\",\n        \"creator\": \"Biotechnica\",\n        \"bio\": \"A neurological implant that reduces the perception of pain, allowing the user to endure more damage.\",\n        \"stats\": {\"damage_taken_reduction\": \"10%\", \"bleed_resistance\": \"+50%\"},\n    },\n    {\n        \"name\": \"Blood Pump\",\n        \"creator\": \"Arasaka\",\n        \"bio\": \"An enhanced circulatory system that improves health regeneration during combat.\",\n        \"stats\": {\"health_regen_per_second\": \"+5%\", \"activation_duration\": \"6 seconds\"},\n    },\n    {\n        \"name\": \"Heal-On-Kill\",\n        \"creator\": \"Militech\",\n        \"bio\": \"A system that restores a portion of the user's health each time they defeat an enemy.\",\n        \"stats\": {\"health_restored_per_kill\": \"20%\", \"cooldown\": \"3 seconds\"},\n    },\n    {\n        \"name\": \"Smart Link\",\n        \"creator\": \"Kang Tao\",\n        \"bio\": \"A wrist implant that increases smart weapon accuracy and locks onto targets for better aim.\",\n        \"stats\": {\"smart_weapon_accuracy\": \"+15%\", \"target_lock_speed\": \"+25%\"},\n    },\n    {\n        \"name\": \"Nano Relays\",\n        \"creator\": \"Zetatech\",\n        \"bio\": \"Enhances the duration of Sandevistan or Berserk by boosting neural signal transmission.\",\n        \"stats\": {\"duration_increase\": \"+2 seconds\"},\n    },\n    {\n        \"name\": \"Optical Camo\",\n        \"creator\": \"Militech\",\n        \"bio\": \"A cloaking device that provides temporary invisibility to the user.\",\n        \"stats\": {\"invisibility_duration\": \"10 seconds\", \"cooldown\": \"30 seconds\"},\n    },\n    {\n        \"name\": \"Bioconductor\",\n        \"creator\": \"Biotechnica\",\n        \"bio\": \"Regulates the body's internal processes, reducing cyberware cooldowns.\",\n        \"stats\": {\"cooldown_reduction\": \"20%\"},\n    },\n    {\n        \"name\": \"Second Heart\",\n        \"creator\": \"Biotechnica\",\n        \"bio\": \"A failsafe biological implant that revives the user once when they die.\",\n        \"stats\": {\"revive_health\": \"50%\", \"cooldown\": \"2 minutes\"},\n    },\n    {\n        \"name\": \"Biomonitor\",\n        \"creator\": \"Arasaka\",\n        \"bio\": \"Monitors the user's vital signs and triggers healing if health drops too low.\",\n        \"stats\": {\"activation_threshold\": \"15% health\", \"healing_amount\": \"30%\"},\n    },\n    {\n        \"name\": \"Neofiber\",\n        \"creator\": \"Zetatech\",\n        \"bio\": \"A muscle fiber enhancement that increases evasion and movement speed.\",\n        \"stats\": {\"evasion_increase\": \"+10%\", \"movement_speed_bonus\": \"+5%\"},\n    },\n    {\n        \"name\": \"Cataresist\",\n        \"creator\": \"Biotechnica\",\n        \"bio\": \"Improves the user's resistance to toxins and shock-based damage.\",\n        \"stats\": {\"poison_resistance\": \"+30%\", \"shock_resistance\": \"+25%\"},\n    },\n    {\n        \"name\": \"Microgenerator\",\n        \"creator\": \"Militech\",\n        \"bio\": \"Releases a shockwave when the user takes damage, knocking back enemies.\",\n        \"stats\": {\"shockwave_radius\": \"3 meters\", \"cooldown\": \"10 seconds\"},\n    },\n    {\n        \"name\": \"Fortified Ankles\",\n        \"creator\": \"Dynalar\",\n        \"bio\": \"Reinforces the legs to allow for charged jumps and enhanced mobility.\",\n        \"stats\": {\"charged_jump_height\": \"+3 meters\", \"stamina_cost\": \"15%\"},\n    },\n    {\n        \"name\": \"Reflex Tuner\",\n        \"creator\": \"Arasaka\",\n        \"bio\": \"Slows time when the user's health falls below a certain level, providing a brief window for recovery.\",\n        \"stats\": {\"activation_threshold\": \"25% health\", \"duration\": \"5 seconds\"},\n    },\n    {\n        \"name\": \"Techgogs\",\n        \"creator\": \"Kiroshi\",\n        \"bio\": \"Enhanced goggles that provide better target acquisition and analysis.\",\n        \"stats\": {\"targeting_accuracy\": \"+20%\", \"analyze_speed\": \"+25%\"},\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Session in Python with AgentOps SDK\nDESCRIPTION: Demonstrates how to create and run a single session using the AgentOps SDK with the session decorator. In single session mode, all agent usage is synchronous and only one session exists at a time.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/core-concepts.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom agentops.sdk.decorators import session\n\n@session\ndef my_session():\n    # Your session code here\n    pass\n\n# Run the session\nmy_session()\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installs the necessary Python packages for the application: agentops for monitoring and anthropic for LLM interaction.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-async.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentops\n%pip install anthropic\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps and MultiOn Integration\nDESCRIPTION: This snippet shows the pip commands to install the necessary packages: multion, agentops, openai, and python-dotenv.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Autonomous_web_browsing.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U multion\n%pip install -U agentops\n%pip install -U openai\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Sending a Completion Request with LiteLLM\nDESCRIPTION: Creating a messages array with user prompt and sending it to an LLM using litellm.completion(). The response is printed to show the model's output.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/litellm_examples/litellm_example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessages = [{\"role\": \"user\", \"content\": \"Write a 12 word poem about secret agents.\"}]\nresponse = litellm.completion(\n    model=\"gpt-4\", messages=messages\n)  # or the model of your choosing\nprint(response.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Implementing Target-Source Attribute Mapping Pattern in Python\nDESCRIPTION: Shows how to create a typed mapping dictionary that associates target OpenTelemetry attributes with source attributes from the SDK, enabling consistent attribute extraction.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/openai_agents/README.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Attribute mapping example\nAGENT_SPAN_ATTRIBUTES: AttributeMap = {\n    # target_attribute: source_attribute\n    AgentAttributes.AGENT_NAME: \"name\",\n    WorkflowAttributes.WORKFLOW_INPUT: \"input\",\n    WorkflowAttributes.FINAL_OUTPUT: \"output\",\n    # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MultiOn with AgentOps Integration\nDESCRIPTION: Python code to create a MultiOn client with both MultiOn and AgentOps API keys. The example demonstrates browsing a webpage with tracking capabilities and includes screenshot capture.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/multion.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport multion\nfrom multion.client import MultiOn\n\n# Initialize MultiOn with both a MultiOn API key and an AgentOps API key\nmultion = MultiOn(\n\tapi_key=<INSERT YOUR MULTION API KEY HERE>,\n\tagentops_api_key=<INSERT YOUR AGENTOPS API KEY HERE>\n)\n\nbrowse_response = multion.browse(\n\tcmd=\"what three things do i get with agentops\",\n\turl=\"https://www.agentops.ai/\",\n\tmax_steps=4,\n\tinclude_screenshot=True\n)\n\nprint(browse_response.message)\n```\n\n----------------------------------------\n\nTITLE: AgentOps Logger Static Method Definition\nDESCRIPTION: Static method for creating a logger with AgentOps handler, configurable with client, name and log level.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/logger.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_agentops_logger(client: Client, name: str, level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Installing Camel AI with AgentOps Integration\nDESCRIPTION: Commands to install Camel AI and AgentOps for agent tracking and analysis.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install \"camel-ai[all]==0.2.11\"\npip install agentops\n```\n\n----------------------------------------\n\nTITLE: Adding Context to LLM Through Initial Messages in Python\nDESCRIPTION: Code that adds the generated mission result to the conversation context and appends a user query about location priority.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ninitial_messages.append({\"role\": \"assistant\", \"content\": gen_mission_result})\n\ninitial_messages.append(\n    {\n        \"role\": \"user\",\n        \"content\": \"Based on these, which location should take priority and why?\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Using record() Method in Python\nDESCRIPTION: Shows how to manually record events using the record() method of the AgentOps client. This method allows recording discrete events with custom event types and additional metadata.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/recording-events.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nao_client.record(Event(\"event_type1\"))\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository for Web Search Agent\nDESCRIPTION: Commands to clone the repository containing the web search agent code and navigate to the correct directory.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/swarmzero/examples.git\ncd examples/agents/web_search_agent\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository for Web Search Agent\nDESCRIPTION: Commands to clone the repository containing the web search agent code and navigate to the correct directory.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/swarmzero/examples.git\ncd examples/agents/web_search_agent\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for MultiOn and AgentOps Integration\nDESCRIPTION: Installation of necessary Python packages including multion, agentops, and python-dotenv using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Webpage_data_retrieval.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U multion\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Pulling the Mistral Model from Ollama\nDESCRIPTION: Downloads the Mistral language model to be used with Ollama. This step ensures the model is available locally before making inference requests.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ollama_examples/ollama_examples.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nollama.pull(\"mistral\")\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Client with Tags\nDESCRIPTION: Sets up the AgentOps client with the API key and default tags for tracking the XAI vision project.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_vision_examples.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"xai-example\", \"grok-vision\",])\n```\n\n----------------------------------------\n\nTITLE: Multi-turn Conversation with Ollama and Mistral\nDESCRIPTION: Demonstrates a multi-turn conversation with the Mistral model through Ollama. The messages list contains both user and assistant messages, maintaining context from previous turns in the conversation while being monitored by AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ollama_examples/ollama_examples.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Conversation Example\nmessages = [\n    {\n        'role': 'user',\n        'content': 'What is AgentOps?'\n    },\n    {\n        'role': 'assistant',\n        'content': 'AgentOps is a monitoring and observability platform for LLM applications.'\n    },\n    {\n        'role': 'user',\n        'content': 'Can you give me 3 key features?'\n    }\n]\n\nresponse = ollama.chat(\n    model='mistral',\n    messages=messages\n)\nprint(response['message']['content'])\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Classes with Tracking Decorators\nDESCRIPTION: Creates two agent classes (QA Engineer and Software Engineer) with different system prompts and adds the track_agent decorator to enable tracking of their activities in AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@track_agent(name=\"qa\")\nclass QaAgent:\n    def completion(self, prompt: str):\n        res = openai_client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are a qa engineer and only output python code, no markdown tags.\",\n                },\n                {\"role\": \"user\", \"content\": prompt},\n            ],\n            temperature=0.5,\n        )\n        return res.choices[0].message.content\n\n\n@track_agent(name=\"engineer\")\nclass EngineerAgent:\n    def completion(self, prompt: str):\n        res = openai_client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are a software engineer and only output python code, no markdown tags.\",\n                },\n                {\"role\": \"user\", \"content\": prompt},\n            ],\n            temperature=0.5,\n        )\n        return res.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Using QA Agent to Generate Unit Tests\nDESCRIPTION: Utilizes the QA agent to generate unit tests for the previously created prime number function. AgentOps will track this call under the 'qa' agent.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_example.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngenerated_test = qa.completion(\n    \"Write a python unit test that test the following function: \\n \" + generated_func\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Keys for OpenAI and AgentOps\nDESCRIPTION: This snippet loads environment variables and sets up API keys for OpenAI and AgentOps. It provides flexibility for users to use environment variables or directly input their API keys.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/autogen_examples/MathAgent.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI Agents SDK\nDESCRIPTION: Command to install the OpenAI Agents SDK for integration with AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install openai-agents\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installing the necessary Python packages for implementing Anthropic's Claude AI with AgentOps tracking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentops\n%pip install anthropic\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with API Key\nDESCRIPTION: This code initializes the AgentOps library with the API key and sets default tags for tracking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"ai21-example\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Thread and Message\nDESCRIPTION: Creating a new thread and adding an initial message for the math problem.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nthread = client.beta.threads.create()\nshow_json(thread)\n\nmessage = client.beta.threads.messages.create(\n    thread_id=thread.id,\n    role=\"user\",\n    content=\"I need to solve the equation `3x + 11 = 14`. Can you help me?\",\n)\nshow_json(message)\n```\n\n----------------------------------------\n\nTITLE: Initializing Anthropic Client\nDESCRIPTION: Creating an Anthropic client instance using the API key for interacting with Claude AI models.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = Anthropic(api_key=ANTHROPIC_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Creating Anthropic Client Instance\nDESCRIPTION: Creates an instance of the Anthropic client using the API key for making requests to the Anthropic API.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = Anthropic(api_key=ANTHROPIC_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for CAMEL AI and AgentOps\nDESCRIPTION: Installs the necessary Python packages for running the CAMEL AI example and using AgentOps for monitoring.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/camel.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install camel-ai[all]\n%pip install agentops\n```\n\n----------------------------------------\n\nTITLE: Testing a Direct OpenAI Call Without Agent Tracking\nDESCRIPTION: Makes a direct OpenAI API call outside of any tracked agent context to verify that it gets assigned to the Default Agent in AgentOps tracking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_example.ipynb#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nres = openai_client.chat.completions.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are not a tracked agent\"},\n        {\"role\": \"user\", \"content\": \"Say hello\"},\n    ],\n)\nres.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Instantiating Agent Objects\nDESCRIPTION: Creates instances of the QA and Engineer agent classes for use in the application.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_example.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nqa = QaAgent()\nengineer = EngineerAgent()\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated Test with Markdown\nDESCRIPTION: Displays the generated test code with proper Markdown formatting for code blocks.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndisplay(Markdown(\"```python\\n\" + generated_test + \"\\n```\"))\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installation of necessary Python packages including anthropic-haystack, agentops, and python-dotenv using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/haystack_examples/haystack_anthropic_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U anthropic-haystack\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with Default Tags\nDESCRIPTION: Initializes the AgentOps library with the API key and sets default tags for tracking this example.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"anthropic-example-tool\"])\n```\n\n----------------------------------------\n\nTITLE: Defining DOOM-Themed Data for AI Tool\nDESCRIPTION: Creating sample data structures with DOOM-themed locations, combat statistics, and mission objectives that will be used by the custom tool to generate mission scenarios.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlocations = [\n    {\n        \"Name\": \"Super Gore Nest\",\n        \"Description\": \"A grotesque mass of demonic growth and organic structures infesting the ruins of an urban area on Earth. The Super Gore Nest serves as a massive, pulsating hive for Hell's forces, complete with rivers of blood, twisted tendrils, and a dark, organic design that shows how deeply Hell has taken root in the city.\",\n    },\n    {\n        \"Name\": \"Exultia\",\n        \"Description\": \"An ancient, mystical world that holds the ruins of the Night Sentinels' kingdom, with gothic structures and arcane symbols throughout. This realm is filled with epic landscapes, medieval architecture, and hints of the powerful civilization that once defended against Hell's forces.\",\n    },\n    {\n        \"Name\": \"Cultist Base\",\n        \"Description\": \"A grim fortress hidden within the icy mountains, where a fanatical cult worships demons. Filled with chilling sacrificial chambers, traps, and rituals, the Cultist Base is a hostile stronghold where Doom Slayer must confront the cult leaders aiding Hell's invasion of Earth.\",\n    },\n    {\n        \"Name\": \"Taras Nabad\",\n        \"Description\": \"A war-ravaged city on the homeworld of the Night Sentinels, showcasing grandiose, ancient architecture in the midst of destruction. Taras Nabad's sprawling structures and historical significance reveal glimpses into the Doom Slayer's past and the once-thriving Sentinel civilization.\",\n    },\n    {\n        \"Name\": \"Nekravol\",\n        \"Description\": \"A hellish, industrial fortress where souls are processed into Argent energy. With conveyor belts moving the damned and a skyline dominated by fire and darkness, Nekravol is a nightmarish facility that powers Hell's armies and embodies the horrific machinery of Hell's cruelty.\",\n    },\n    {\n        \"Name\": \"Urdak\",\n        \"Description\": \"A surreal, high-tech realm that serves as the home of the angelic Maykrs. Urdak's sleek, pristine architecture and ethereal ambiance sharply contrast with Hell's brutal landscapes, yet this realm holds its own dark secrets and a critical role in Hell's invasion of Earth.\",\n    },\n    {\n        \"Name\": \"UAC Base\",\n        \"Description\": \"A futuristic military base on Earth controlled by the Union Aerospace Corporation (UAC), filled with high-tech weaponry and security systems. The UAC Base serves as a human foothold in the fight against Hell, though some within its ranks may have darker intentions.\",\n    },\n]\n\ncombat_casualties = [\"Nonexistent\", \"Low\", \"Medium\", \"High\", \"Extinction\"]\n\nmissions = [\n    \"Locate and confront a key leader of Hell's invasion forces.\",\n    \"Clear out demonic infestations to secure a strategic foothold.\",\n    \"Disrupt Hell's control over the area by eliminating critical targets.\",\n    \"Enter a critical demonic stronghold to disrupt enemy operations.\",\n    \"Locate and destroy the central power source to weaken enemy forces.\",\n    \"Collect essential resources before the area becomes unstable.\",\n]\n```\n\n----------------------------------------\n\nTITLE: Extracting AI Response Text\nDESCRIPTION: Accessing the first part of the Anthropic response to get the AI's natural language text output, which explains how to interpret the complex response structure.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmessage = response.content[0].text\nprint(message)\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Client with XAI API\nDESCRIPTION: Sets up the OpenAI client with the XAI API key and base URL for accessing the Grok model.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_examples.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = OpenAI(\n    api_key=XAI_API_KEY,\n    base_url=\"https://api.x.ai/v1\",\n)\n```\n\n----------------------------------------\n\nTITLE: Session Object End Session Call Format\nDESCRIPTION: Example of the end_session method call on a Session object as used in CrewAI >= 0.105.0. This demonstrates how the session object's end_session method is used in newer versions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/legacy/crewai.md#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsession.end_session(\n    end_state=\"Success\",\n    end_state_reason=\"Finished Execution\"\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AgentOps and AutoGen\nDESCRIPTION: Imports the necessary modules and classes from autogen, agentops, and utility libraries needed for environment configuration and agent creation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/demos/agentchat_agentops.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen import ConversableAgent, UserProxyAgent\nfrom typing import Annotated, Literal\nfrom autogen import ConversableAgent, register_function\nimport agentops\nimport os\nfrom os import environ\nfrom dotenv import load_dotenv\nfrom IPython.core.error import (\n    StdinNotImplementedError,\n)  # only needed by AgentOps testing automation\n```\n\n----------------------------------------\n\nTITLE: SVG Path Definitions with Color Fill #BF4040\nDESCRIPTION: SVG path components using fill color #BF4040 (light red) defining complex shapes and curves for a logo or graphic element.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/snippets/crewai-card.mdx#2025-04-07_snippet_3\n\nLANGUAGE: SVG\nCODE:\n```\n<path fill=\"#BF4040\" d=\"M1836.1 176.6c-16 4.3-28.9 18.1-33.6 36-5.6 21.7 3.8 66.7 17.1 81.4 9.6 10.6 23.1 6 45.3-15.5 25.9-25.1 38.2-50.2 34.1-70-2.5-12.2-9.5-21.6-20.3-27.2-11.6-5.8-30.5-8-42.6-4.7\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK\nDESCRIPTION: Commands to install the AgentOps SDK using pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/groq.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for MultiOn, AgentOps, and OpenAI\nDESCRIPTION: This snippet demonstrates how to set API keys for MultiOn, AgentOps, and OpenAI using environment variables or direct assignment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Autonomous_web_browsing.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nMULTION_API_KEY = os.getenv(\"MULTION_API_KEY\") or \"<your_multion_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps\nDESCRIPTION: Initialization of AgentOps with API key and default tags configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/markdown_validator.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"markdown_validator\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a Claude API Request with Tools Configuration in Python\nDESCRIPTION: API call to Claude that sets up the model, token limit, and defines the 'generate_missions' tool with its schema.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.messages.create(\n    max_tokens=5000,\n    model=\"claude-3-5-sonnet-20240620\",\n    tools=[\n        {\n            \"name\": \"generate_missions\",\n            \"description\": \"Retrieve three missions for the DoomSlayer\",\n            \"input_schema\": {\"type\": \"object\", \"properties\": {}, \"required\": []},\n        }\n    ],\n    messages=initial_messages,\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Initializing Llama Stack Client - Python\nDESCRIPTION: Setup and initialization of LlamaStackClient with AgentOps integration and environment configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/llama_stack_example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_stack_client import LlamaStackClient\nfrom llama_stack_client import LlamaStackClient\nfrom llama_stack_client.lib.inference.event_logger import EventLogger\nfrom llama_stack_client.types import UserMessage\nfrom llama_stack_client.types.agent_create_params import AgentConfig\nfrom llama_stack_client.lib.agents.agent import Agent\nfrom dotenv import load_dotenv\nimport os\nimport agentops\n\nload_dotenv()\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"llama-stack-client-example\"], auto_start_session=False)\n\nhost = \"0.0.0.0\" # LLAMA_STACK_HOST\nport = 5001 # LLAMA_STACK_PORT\n\nfull_host = f\"http://{host}:{port}\"\n\nclient = LlamaStackClient(\n    base_url=f\"{full_host}\",\n)\n```\n\n----------------------------------------\n\nTITLE: Testing File Operations with pyfakefs\nDESCRIPTION: Example of testing file operations using pyfakefs for filesystem mocking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_file_operations(fs):  # fs fixture provided by pyfakefs\n    fs.create_file('/fake/file.txt', contents='test')\n    assert os.path.exists('/fake/file.txt')\n```\n\n----------------------------------------\n\nTITLE: Named Arguments End Session Call Format\nDESCRIPTION: Example of the end_session call pattern with named arguments used in CrewAI < 0.105.0. This format includes end_state, end_state_reason, and is_auto_end parameters.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/legacy/crewai.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\n    end_state=\"Success\",\n    end_state_reason=\"Finished Execution\",\n    is_auto_end=True\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Content from Claude's Response in Python\nDESCRIPTION: Code that isolates the text content from the API response object for further processing.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmessage = response.content[0].text\nprint(message)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Repository for AgentOps Development\nDESCRIPTION: Commands for forking, cloning and configuring the AgentOps repository for development.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_USERNAME/agentops.git\ncd agentops\ngit remote add upstream https://github.com/AgentOps-AI/agentops.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages via pip\nDESCRIPTION: Command to install the necessary Python packages - agentops and google-generativeai - for the integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/gemini_examples/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U agentops google-generativeai\n```\n\n----------------------------------------\n\nTITLE: Ending the AgentOps Events Session\nDESCRIPTION: Concludes the AgentOps monitoring session with a success result. This marks the end of event tracking for the current session in the AgentOps dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai-gpt.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Basic Text Completion with Ollama and Mistral\nDESCRIPTION: Demonstrates a basic chat completion using the Mistral model through Ollama. Sends a single user message and prints the model's response. This interaction is automatically monitored by AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ollama_examples/ollama_examples.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Basic completion,\nresponse = ollama.chat(model='mistral',\n    messages=[{\n        'role': 'user',\n        'content': 'What are the benefits of using AgentOps for monitoring LLMs?',\n    }]\n)\nprint(response['message']['content'])\n```\n\n----------------------------------------\n\nTITLE: Updating User Context for Tool Integration in Python\nDESCRIPTION: Code that updates the conversation context with a prompt to use multiple tools simultaneously for scanning enemies and checking inventory.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ninitial_messages.append(\n    {\n        \"role\": \"user\",\n        \"content\": \"The first priority mission was selected. At the same time, scan for enemies and check inventory to determine the best combat strategy. You should use both tools at once.\",\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SwarmZero Agent with Web Search Capabilities\nDESCRIPTION: Creates an Agent instance with the defined web search functions, configuration, and instructions. The agent is configured as a workflow assistant that can search the web and extract information from URLs.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/web_search_agent.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmy_agent = Agent(\n    name=\"workflow-assistant\",\n    functions=[\n        web_search,\n        extract_from_urls,\n    ],\n    config_path=\"./swarmzero_config.toml\", # see https://github.com/swarmzero/swarmzero/blob/main/swarmzero_config_example.toml\n    instruction=\"You are a helpful assistant that can search the web and extract information from a given URL.\",\n    # chat_only_mode=True  # remove comment only if using `my_agent.chat()`\n)\n```\n\n----------------------------------------\n\nTITLE: Simple End Session Call Format\nDESCRIPTION: Example of a simple end_session call pattern that must be supported by the AgentOps legacy API. This format uses just a string status parameter.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/legacy/crewai.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Gemini API and AgentOps\nDESCRIPTION: This snippet imports the necessary libraries for using Google's Generative AI, AgentOps, and environment variable management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/gemini_examples/gemini_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport google.generativeai as genai\nimport agentops\nfrom dotenv import load_dotenv\nimport os\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps Environment Variables\nDESCRIPTION: Environment variable configuration for AgentOps API key in .env file.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/smolagents.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Disabling AgentOps Instrumentation in Python\nDESCRIPTION: Code snippets showing how to disable AgentOps instrumentation when initializing or in an Agent framework.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/langchain-callback-handler.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(instrument_llm_calls=False)\n```\n\nLANGUAGE: python\nCODE:\n```\nagentops.stop_instrumenting()\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: This snippet ends the AgentOps session, allowing you to view the tracked events in the AgentOps dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Sample_browsing_agent.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps SDK\nDESCRIPTION: Basic setup code for initializing AgentOps with API key and environment variables configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/agentssdk.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nagentops.init(<INSERT YOUR API KEY HERE>)\n```\n\nLANGUAGE: text\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\nOPENAI_API_KEY=<YOUR OPENAI API KEY>\n```\n\n----------------------------------------\n\nTITLE: Testing Inventory Scanning Function in Python\nDESCRIPTION: A simple test call to the inventoryscan function that will generate information for 5 random weapons.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ninventoryscan()\n```\n\n----------------------------------------\n\nTITLE: Configuring CAMEL AI Model and Agent\nDESCRIPTION: Sets up model configuration using OpenAI's GPT-4O-MINI and initializes the chat agent with system message and tools.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Set model config\ntools = [*SearchToolkit().get_tools()]\n\n#This means we are using GPT_4O_MINI\nmodel = ModelFactory.create(\n    model_platform=ModelPlatformType.OPENAI,\n    model_type=ModelType.GPT_4O_MINI,\n)\n\n# Set agent\ncamel_agent = ChatAgent(\n    system_message=sys_msg,\n    model=model,\n    tools=tools,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing smolagents Framework\nDESCRIPTION: Commands to install the smolagents framework using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/smolagents.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install smolagents\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add smolagents\n```\n\n----------------------------------------\n\nTITLE: Event-Based Integration for CrewAI >= 0.105.0\nDESCRIPTION: Implementation of the AgentOpsListener class from newer CrewAI versions that uses an event-based system. It subscribes to crew events and manages the AgentOps session lifecycle and agent creation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/legacy/crewai.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# In utilities/events/third_party/agentops_listener.py\nclass AgentOpsListener(BaseEventListener):\n    # Called when a crew kickoff starts\n    @crewai_event_bus.on(CrewKickoffStartedEvent)\n    def on_crew_kickoff_started(source, event):\n        self.session = agentops.init()\n        for agent in source.agents:\n            if self.session:\n                self.session.create_agent(\n                    name=agent.role,\n                    agent_id=str(agent.id),\n                )\n\n    # Called when a crew kickoff completes\n    @crewai_event_bus.on(CrewKickoffCompletedEvent)\n    def on_crew_kickoff_completed(source, event):\n        if self.session:\n            self.session.end_session(\n                end_state=\"Success\",\n                end_state_reason=\"Finished Execution\",\n            )\n\n    # Tool usage and other events are also tracked\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables for AgentOps Configuration\nDESCRIPTION: Loads environment variables from a .env file and retrieves the AgentOps API key. Provides a fallback to manually entered API key if the environment variable is not found.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ollama_examples/ollama_examples.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Let's load our environment variables\nload_dotenv()\n\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK via pip or poetry\nDESCRIPTION: Commands to install the AgentOps SDK using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/crewai.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Single Session Mode Implementation in Python\nDESCRIPTION: Basic example of using AgentOps in single-session mode to start and end a session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/multiple-sessions.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nagentops.start_session()\nagentops.end_session(end_state='Success')\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: This code snippet ends the AgentOps session, marking it as successful. This is typically done at the end of the script or notebook to properly close the monitoring session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/haystack_examples/haystack_openai_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# End the AgentOps session\nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Client\nDESCRIPTION: Initializes the AgentOps client with default tags for session tracking and analysis.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-multi-agent-example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(default_tags=[\"camel\", \"multi-agent\", \"example\"])\n```\n\n----------------------------------------\n\nTITLE: Defining Cyberpunk Corporation List\nDESCRIPTION: Creates a list of fictional corporations from the Cyberpunk universe that manufacture cyberware.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nCorpo = [\n    \"Kiroshi\",\n    \"Arasaka\",\n    \"Kang Tao\",\n    \"Militech\",\n    \"Biotechnica\",\n    \"Zetatech\",\n    \"Dynalar\",\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Ollama Chat Completion\nDESCRIPTION: Implementing a basic chat completion with Ollama using the Mistral model.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/ollama.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = ollama.chat(model='mistral',\n    messages=[{\n        'role': 'user',\n        'content': 'What are the benefits of using AgentOps for monitoring LLMs?',\n    }])\nprint(response['message']['content'])\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Sessions\nDESCRIPTION: End both AgentOps sessions, marking them as successful.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsession_1.end_session(end_state=\"Success\")\nsession_2.end_session(end_state=\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Making LLM Call with Session as Keyword Argument in AgentOps\nDESCRIPTION: Demonstrate an alternative method of associating an LLM call with a specific AgentOps session by passing the session as a keyword argument.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresponse2 = openai.chat.completions.create(\n    model=\"gpt-3.5-turbo\", messages=messages, temperature=0.5, session=session_2\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK with pip\nDESCRIPTION: Command to install the AgentOps SDK using pip package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/camel.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated Function with Markdown\nDESCRIPTION: Displays the generated function with proper markdown formatting in a Jupyter notebook environment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_example.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndisplay(Markdown(\"```python\\n\" + generated_func + \"\\n```\"))\n```\n\n----------------------------------------\n\nTITLE: Ending an AgentOps Monitoring Session\nDESCRIPTION: Ends the current AgentOps monitoring session with a success result. This is important for proper tracking and analytics in the AgentOps dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai-gpt.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Making Follow-up LLM Request in Python\nDESCRIPTION: Sends a follow-up request to the LLM to get its evaluation of the cyberware recommendation, using the updated message history.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.messages.create(\n    max_tokens=5000,\n    model=\"claude-3-5-sonnet-20240620\",\n    tools=[\n        {\n            \"name\": \"get_cyberware_by_creator\",\n            \"description\": \"Retrieve cyberware information based on the manufacturer corporation\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"creator\": {\n                        \"type\": \"string\",\n                        \"description\": \"The name of the cyberware creator\",\n                    }\n                },\n                \"required\": [\"creator\"],\n            },\n        }\n    ],\n    messages=initialmessages,\n)\n\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps and OpenAI\nDESCRIPTION: Installs the necessary Python packages for working with AgentOps monitoring and OpenAI's API. Uses pip to install the latest versions of openai, agentops, and python-dotenv libraries.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai-gpt.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: JSON Helper Function Definition\nDESCRIPTION: Utility function to display JSON objects in a readable format.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\ndef show_json(obj):\n    display(json.loads(obj.model_dump_json()))\n```\n\n----------------------------------------\n\nTITLE: Preparing Messages for OpenAI API Call\nDESCRIPTION: Create a list of messages to be sent to the OpenAI API for chat completion.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessages = [{\"role\": \"user\", \"content\": \"Hello\"}]\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps\nDESCRIPTION: Initializing AgentOps with API key and default tags for monitoring.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/ollama.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, tags=[\"ollama-example\"])\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installation of required Python packages including OpenAI SDK, AgentOps, and python-dotenv using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with Curl\nDESCRIPTION: Command to test the /completion endpoint of the FastAPI server using curl from a different terminal.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/tests/core_manual_tests/api_server/readme.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8000/completion\n```\n\n----------------------------------------\n\nTITLE: Running Research Bot for Surfboard Recommendations in Terminal\nDESCRIPTION: This snippet shows the command to run a Python-based research bot using the uv package manager. The bot will process a query about beginner surfboards and product recommendations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/agents-examples/research_bot/sample_outputs/product_recs.txt#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ uv run python -m examples.research_bot.main\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Instrumentation with OpenTelemetry in Python\nDESCRIPTION: This code snippet demonstrates how to initialize and configure the OpenAIInstrumentor with the AgentOps tracer provider. It shows how to enable enrichment of assistant messages and token usage in spans, as well as trace context propagation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/README.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.openai import OpenAIInstrumentor\n\nfrom agentops.telemetry import get_tracer_provider()\n\n# Initialize and instrument\ninstrumentor = OpenAIInstrumentor(\n    enrich_assistant=True,  # Include assistant messages in spans\n    enrich_token_usage=True,  # Include token usage in spans\n    enable_trace_context_propagation=True,  # Enable trace context propagation\n)\ninstrumentor.instrument(tracer_provider=tracer_provider) # <-- Uses the global AgentOps TracerProvider\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys for Anthropic and AgentOps\nDESCRIPTION: Code to load API keys from environment variables or set them directly. Both Anthropic and AgentOps keys are required for the integration to work properly.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/README.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nANTHROPIC_API_KEY = os.getenv(\"ANTHROPIC_API_KEY\") or \"<your_anthropic_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps with LangChain Support\nDESCRIPTION: Commands to install AgentOps with LangChain support using pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/langchain-callback-handler.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops[langchain]\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops[langchain]\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and OpenAI Client\nDESCRIPTION: Initialize AgentOps with the API key, disabling automatic session start. Also initialize the OpenAI client.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, auto_start_session=False)\nopenai = OpenAI()\n```\n\n----------------------------------------\n\nTITLE: Testing Cyberware Retrieval Function in Python\nDESCRIPTION: A simple test of the get_cyberware_by_creator function using 'Militech' as the corporation name.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nget_cyberware_by_creator(\"Militech\")\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK with pip\nDESCRIPTION: Command to install the AgentOps SDK using pip package manager. This is required to integrate AgentOps monitoring with Ollama.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ollama.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops ollama\n```\n\n----------------------------------------\n\nTITLE: Running the Research Bot Example in Python\nDESCRIPTION: Command to execute the research bot example script. This command runs the main Python script for the research bot located in the examples/research_bot directory.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/agents-examples/research_bot/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m examples.research_bot.main\n```\n\n----------------------------------------\n\nTITLE: Running Agent Server (Commented)\nDESCRIPTION: Shows how to start the agent as a server, which would make the API available at localhost:8000/docs. This code is commented out by default.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/web_search_agent.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# my_agent.run()  # see agent API at localhost:8000/docs\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chat Messages for AI21\nDESCRIPTION: This snippet creates a list of ChatMessage objects to define the system prompt and user input for the AI21 model.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    ChatMessage(\n        content=\"You are a world renowned poet in the style of Edgar Allan Poe.\",\n        role=\"system\",\n    ),\n    ChatMessage(\n        content=\"Write me a short poem about the AI agents co-existing within the human brain.\",\n        role=\"user\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Task Prompt and Tools for CamelAI Simulation\nDESCRIPTION: Sets up the task prompt for the Apex Legends scenario and initializes MathToolkit and SearchToolkit for agent use.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-multi-agent-example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntask_prompt = (\n    \"We are in the Apex Legends Games. Determine the amount of\"\n    \"meele hits it will take to beat someone with a blue shield.\"\n    \"You should answer as if you are Pathfinder from the Apex Games.\"\n)\n\ntools = [\n    *MathToolkit().get_tools(),\n    *SearchToolkit().get_tools(),\n]\n```\n\n----------------------------------------\n\nTITLE: Running Inference and Agent Canary Tests\nDESCRIPTION: Implements both inference and agent canary tests, including chat completion and agent interaction with Brave Search integration. Demonstrates event logging and session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/llama_stack_example_for_ci.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n### Inference Canary\n\nagentops.start_session() # AgentOps start session\n\nresponse = client.inference.chat_completion(\n    messages=[\n        UserMessage(\n            content=\"hello world, write me a 3 word poem about the moon\",\n            role=\"user\",\n        ),\n    ],\n    model_id=\"meta-llama/Llama-3.2-1B-Instruct\",\n    stream=True\n)\n\nasync for log in EventLogger().log(response):\n    log.print()\n\n\n### Agent Canary\n\nimport os\nfrom llama_stack_client import LlamaStackClient\nfrom llama_stack_client.lib.agents.agent import Agent\nfrom llama_stack_client.lib.agents.event_logger import EventLogger\nfrom llama_stack_client.types.agent_create_params import AgentConfig\n\nLLAMA_STACK_PORT = 5001\n\n# Replace with actual API keys for functionality\nBRAVE_SEARCH_API_KEY = os.getenv(\"BRAVE_SEARCH_API_KEY\") or \"your-brave-search-api-key\"\n\nasync def agent_test():\n    client = LlamaStackClient(\n        base_url=f\"http://0.0.0.0:{LLAMA_STACK_PORT}\",\n    )\n\n    available_shields = [shield.identifier for shield in client.shields.list()]\n    if not available_shields:\n        print(\"No available shields. Disable safety.\")\n    else:\n        print(f\"Available shields found: {available_shields}\")\n    available_models = [model.identifier for model in client.models.list()]\n    if not available_models:\n        raise ValueError(\"No available models\")\n    else:\n        selected_model = available_models[0]\n        print(f\"Using model: {selected_model}\")\n\n    agent_config = AgentConfig(\n        model=selected_model,\n        instructions=\"You are a helpful assistant. Just say hello as a greeting.\",\n        sampling_params={\n            \"strategy\": \"greedy\",\n            \"temperature\": 1.0,\n            \"top_p\": 0.9,\n        },\n        tools=[\n            {\n                \"type\": \"brave_search\",\n                \"engine\": \"brave\",\n                \"api_key\": BRAVE_SEARCH_API_KEY,\n            }\n        ],\n        tool_choice=\"auto\",\n        tool_prompt_format=\"json\",\n        input_shields=available_shields if available_shields else [],\n        output_shields=available_shields if available_shields else [],\n        enable_session_persistence=False,\n    )\n    agent = Agent(client, agent_config)\n    user_prompts = [\n        \"Hello\",\n        \"Which players played in the winning team of the NBA western conference semifinals of 2014, please use tools\",\n    ]\n\n    session_id = agent.create_session(\"test-session\")\n\n    for prompt in user_prompts:\n        response = agent.create_turn(\n            messages=[\n                {\n                    \"role\": \"user\",\n                    \"content\": prompt,\n                }\n            ],\n            session_id=session_id,\n        )\n\n        print(f\"{response=}\")\n\n        for log in EventLogger().log(response):\n            log.print()\n\nawait agent_test()\n\nagentops.end_session(\"Success\") # AgentOps end session\n```\n\n----------------------------------------\n\nTITLE: Installing Required SDKs with Package Managers\nDESCRIPTION: Installation commands for AgentOps and OpenAI Agents SDK using pip and poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/agentssdk.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install openai-agents\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add openai-agents\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: Concluding the AgentOps monitoring session with a success status.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-sync.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables and Configuring Gemini API\nDESCRIPTION: This code loads environment variables, retrieves API keys for Gemini and AgentOps, and configures the Gemini API with the appropriate key.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/gemini_examples/gemini_example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\n\nGEMINI_API_KEY = os.getenv(\"GEMINI_API_KEY\") or \"your gemini api key\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"your agentops api key\"\n\ngenai.configure(api_key=GEMINI_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Integrating AgentOps with Crew in Python\nDESCRIPTION: Code snippet showing how to initialize AgentOps before using Crew and end the session when finished. This enables monitoring and tracking of agent activities.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/restapi.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\n\n# Beginning of program (i.e. main.py, __init__.py)\n# IMPORTANT: Must be before calling the `Crew()` constructor\nagentops.init(<INSERT YOUR API KEY HERE>)\n...\n# End of program (e.g. main.py)\nagentops.end_session(\"Success\") # Success|Fail|Indeterminate\n```\n\n----------------------------------------\n\nTITLE: Generic Script Execution Pattern\nDESCRIPTION: Generic command pattern for running the markdown review script with any markdown file path.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/README.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython main.py <path to markdown file>\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK\nDESCRIPTION: Commands to install the AgentOps SDK using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/smolagents.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps SDK in Python\nDESCRIPTION: Python code snippet demonstrating how to initialize the AgentOps SDK, including the API key setup and session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/xai.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\n\n# Your code here...\n\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Clients\nDESCRIPTION: Initializing AgentOps monitoring and Mistral client with API keys.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/mistral_examples/mistral_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"mistral-example\"])\nclient = Mistral(MISTRAL_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AgentOps and Groq\nDESCRIPTION: This snippet imports the necessary libraries and modules for working with AgentOps, Groq, and environment variables. It also imports logging and IPython display utilities.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom agentops import track_agent\nfrom dotenv import load_dotenv\nimport os\nfrom groq import Groq\nimport logging\n\nfrom IPython.display import display, Markdown\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: Concludes the AgentOps session with a success status.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK using pip or poetry\nDESCRIPTION: Commands to install the AgentOps SDK using either pip or poetry package managers. This is the first step required for integrating AgentOps with AG2.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/autogen.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API Key in Environment Variables\nDESCRIPTION: Example of setting the AgentOps API key in a .env file for secure configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/langchain.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Executing Research Bot Command in Terminal\nDESCRIPTION: Terminal command showing how to run the research bot example using uv run with Python\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/agents-examples/research_bot/sample_outputs/vacation.txt#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ uv run python -m examples.research_bot.main\n```\n\n----------------------------------------\n\nTITLE: Initializing Llama Stack Client\nDESCRIPTION: Setup and configuration of LlamaStackClient with environment variables and AgentOps initialization. Establishes connection to Llama Stack server.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/llama_stack_example_for_ci.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_stack_client import LlamaStackClient\nfrom llama_stack_client import LlamaStackClient\nfrom llama_stack_client.lib.inference.event_logger import EventLogger\nfrom llama_stack_client.types import UserMessage\nfrom llama_stack_client.types.agent_create_params import AgentConfig\nfrom llama_stack_client.lib.agents.agent import Agent\nfrom dotenv import load_dotenv\nimport os\nimport agentops\n\nload_dotenv()\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"llama-stack-client-example\"], auto_start_session=False)\n\nhost = \"0.0.0.0\" # LLAMA_STACK_HOST\nport = 5001 # LLAMA_STACK_PORT\n\nfull_host = f\"http://{host}:{port}\"\n\nclient = LlamaStackClient(\n    base_url=f\"{full_host}\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps with API Key and Tags\nDESCRIPTION: Initializes the AgentOps monitoring SDK with the API key and sets default tags for all monitoring sessions. The 'ollama-example' tag helps categorize this particular integration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ollama_examples/ollama_examples.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Initialize AgentOps with some default tags\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"ollama-example\"])\n```\n\n----------------------------------------\n\nTITLE: Adding Callback Handler to Tools in Python\nDESCRIPTION: Adds the AgentOps callback handler to each tool for logging and monitoring.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_v0_example.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfor t in tools:\n    t.callbacks = [agentops_handler]\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API Key in .env file\nDESCRIPTION: Example of setting the AgentOps API key in an environment variable file for secure configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/taskweaver.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Running the AI Agent\nDESCRIPTION: Executes the AI agent with a user message requesting information about T-84 Metal Gear.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Define a user message\nusr_msg = 'I need a breifing on the T-84 Metal Gear, code named Sahelanthropus and how we can beat it. Introduce yourself as well.'\n\n# Get response information\nresponse = camel_agent.step(usr_msg)\nprint(response.msg.content)\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated Unit Test as Markdown\nDESCRIPTION: This snippet displays the generated unit test as a Markdown code block for better readability in the notebook.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndisplay(Markdown(\"```python\\n\" + generated_test + \"\\n```\"))\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Dependencies for SwarmZero\nDESCRIPTION: Commands to install required additional dependencies (python-dotenv for environment variable management and tavily-python for web search functionality) using pip or poetry.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/swarmzero.mdx#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install python-dotenv tavily-python\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add python-dotenv tavily-python\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Installation of necessary Python packages including Ollama, AgentOps, and python-dotenv using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/ollama.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U ollama\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys\nDESCRIPTION: Loading environment variables for Anthropic and AgentOps API keys with fallback values.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-sync.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nANTHROPIC_API_KEY = os.getenv(\"ANTHROPIC_API_KEY\") or \"ANTHROPIC KEY HERE\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"AGENTOPS KEY HERE\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Client for XAI API\nDESCRIPTION: Initializes the OpenAI client with the XAI API key and base URL to access XAI's models.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_vision_examples.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = OpenAI(\n    api_key=XAI_API_KEY,\n    base_url=\"https://api.x.ai/v1\",\n)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Run Completion and Printing Responses in Python\nDESCRIPTION: This snippet defines functions for waiting on run completion and pretty printing messages. It demonstrates how to retrieve and display responses from the assistant after runs are completed.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Pretty printing helper\ndef pretty_print(messages):\n    print(\"# Messages\")\n    for m in messages:\n        print(f\"{m.role}: {m.content[0].text.value}\")\n    print()\n\n\n# Waiting in a loop\ndef wait_on_run(run, thread):\n    while run.status == \"queued\" or run.status == \"in_progress\":\n        run = client.beta.threads.runs.retrieve(\n            thread_id=thread.id,\n            run_id=run.id,\n        )\n        time.sleep(0.5)\n    return run\n\n\n# Wait for Run 1\nrun1 = wait_on_run(run1, thread1)\npretty_print(get_response(thread1))\n\n# Wait for Run 2\nrun2 = wait_on_run(run2, thread2)\npretty_print(get_response(thread2))\n\n# Wait for Run 3\nrun3 = wait_on_run(run3, thread3)\npretty_print(get_response(thread3))\n\n# Thank our assistant on Thread 3 :)\nrun4 = submit_message(MATH_ASSISTANT_ID, thread3, \"Thank you!\")\nrun4 = wait_on_run(run4, thread3)\npretty_print(get_response(thread3))\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: Concludes the AgentOps session with a success status, marking the completion of the CAMEL AI simulation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/camel.mdx#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables\nDESCRIPTION: Loading AgentOps API key from environment variables using dotenv.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/ollama.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\n\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session with Success State\nDESCRIPTION: This snippet demonstrates how to end an AgentOps session, specifying a 'Success' end state. This is used for observability and tracking the outcome of the assistant interaction.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(end_state=\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for AgentOps and OpenAI\nDESCRIPTION: Load environment variables and set API keys for AgentOps and OpenAI. This code allows for both environment variable and direct key input methods.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Updating OpenAI Assistant with Custom Function\nDESCRIPTION: This snippet shows how to update an existing OpenAI Assistant to include the custom display_quiz function along with the code interpreter tool.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nassistant = client.beta.assistants.update(\n    MATH_ASSISTANT_ID,\n    tools=[\n        {\"type\": \"code_interpreter\"},\n        {\"type\": \"function\", \"function\": function_json},\n    ],\n)\nshow_json(assistant)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps Multi-Agent Example\nDESCRIPTION: Installs the necessary Python packages for the multi-agent example, including OpenAI for LLM access, AgentOps for tracking, and python-dotenv for environment variable management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Interpreter for OpenAI Assistant in Python\nDESCRIPTION: This snippet demonstrates how to enable the Code Interpreter tool for an OpenAI Assistant using the API. It updates the assistant with the code interpreter tool and shows the updated assistant details.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nassistant = client.beta.assistants.update(\n    MATH_ASSISTANT_ID,\n    tools=[{\"type\": \"code_interpreter\"}],\n)\nshow_json(assistant)\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: Closing the AgentOps monitoring session with a success status.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/ollama.mdx#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps for Manual Integration with Multion\nDESCRIPTION: This snippet initializes AgentOps with manual configuration, setting auto_start_session to False. This allows for independent configuration of the AgentOps client when used with Multion.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multion.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(\n    AGENTOPS_API_KEY, auto_start_session=False, tags=[\"MultiOn browse example\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Mission Generation Function\nDESCRIPTION: Executing the mission generation function to verify it works correctly before integrating with the AI.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngenerate_missions()\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Sessions\nDESCRIPTION: Cleanup function to end all active AgentOps sessions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/llama_stack_example_for_ci.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_all_sessions()\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for OpenAI and AgentOps\nDESCRIPTION: Loads API keys from environment variables or allows manual input for OpenAI and AgentOps authentication.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/camel.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your openai key here>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your agentops key here>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Trace Processors with OpenAI Agents SDK\nDESCRIPTION: Demonstrates how to replace all current trace processors with a new list of processors. This allows for configuring multiple monitoring systems simultaneously.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/openai_agents/TRACING_API.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agents import set_trace_processors\nset_trace_processors([my_processor1, my_processor2])\n```\n\n----------------------------------------\n\nTITLE: Implementing Inventory Scanning Function in Python\nDESCRIPTION: Function that randomly selects weapons from the predefined list and returns their names and descriptions as a formatted string.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef inventoryscan():\n    weapons_at_hand = []\n    loop = 0\n\n    while loop < 5:\n        weapon = random.choice(weapons)\n\n        # Append just the name of the demon to the list\n        weapons_at_hand.append(weapon[\"Name\"])\n        weapons_at_hand.append(weapon[\"Description\"])\n        loop += 1\n\n    # Combine all mission strings into a single string with a separator (e.g., newline or comma)\n    weapons_string = \"\\n\".join(weapons_at_hand)\n    print(weapons_string)\n    return weapons_string\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Operation Span with AgentOps\nDESCRIPTION: Shows how exceptions within a decorated function are automatically recorded in the span. This feature allows for easy identification and debugging of errors in the agent workflow.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/events.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import operation\n\n@operation\ndef risky_operation():\n    # This exception will be recorded in the span\n    raise ValueError(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AgentOps with LiteLLM\nDESCRIPTION: Import statements for the necessary Python libraries: litellm for model interactions, agentops for tracking, os for environment access, and dotenv for loading environment variables.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/litellm_examples/litellm_example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport litellm\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Starting a New AgentOps Session with Tags\nDESCRIPTION: Starts a new AgentOps monitoring session with custom tags for categorization and filtering in the dashboard, preparing for event tracking examples.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/simple_agent.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create new session\nagentops.start_session(tags=[\"openai-gpt-notebook-events\"])\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys\nDESCRIPTION: Loading API keys from environment variables or direct assignment for OpenAI and AgentOps services.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/autogen_examples/AgentChat.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for MultiOn and AgentOps\nDESCRIPTION: Import statements for MultiOn client, AgentOps, and environment variable management libraries.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Webpage_data_retrieval.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport multion\nfrom multion.client import MultiOn\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: This code ends the AgentOps session and marks it as successful.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/gemini_examples/gemini_example.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(end_state=\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Creating Additional 'waiters' Table for Joins\nDESCRIPTION: Set up a second table 'waiters' to demonstrate the agent's ability to handle table joins. Insert sample data into the new table.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/text_to_sql.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntable_name = \"waiters\"\nreceipts = Table(\n    table_name,\n    metadata_obj,\n    Column(\"receipt_id\", Integer, primary_key=True),\n    Column(\"waiter_name\", String(16), primary_key=True),\n)\nmetadata_obj.create_all(engine)\n\nrows = [\n    {\"receipt_id\": 1, \"waiter_name\": \"Corey Johnson\"},\n    {\"receipt_id\": 2, \"waiter_name\": \"Michael Watts\"},\n    {\"receipt_id\": 3, \"waiter_name\": \"Michael Watts\"},\n    {\"receipt_id\": 4, \"waiter_name\": \"Margaret James\"},\n]\nfor row in rows:\n    stmt = insert(receipts).values(**row)\n    with engine.begin() as connection:\n        cursor = connection.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Chatbot Configuration\nDESCRIPTION: Configure OpenAI client, system prompt, and user prompt with image URL for story generation\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_async.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = AsyncOpenAI(api_key=OPENAI_API_KEY)\n\nsystem_prompt = \"\"\"\nYou are a master storyteller, with the ability to create vivid and engaging stories.\nYou have experience in writing for children and adults alike.\nYou are given a prompt and you need to generate a story based on the prompt.\n\"\"\"\n\nuser_prompt = [\n    {\"type\": \"text\", \"text\": \"Write a mystery thriller story based on your understanding of the provided image.\"},\n    {\n        \"type\": \"image_url\",\n        \"image_url\": {\"url\": \"https://www.cosy.sbg.ac.at/~pmeerw/Watermarking/lena_color.gif\"},\n    },\n]\n\nmessages = [\n    {\"role\": \"system\", \"content\": system_prompt},\n    {\"role\": \"user\", \"content\": user_prompt},\n]\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: End the AgentOps session with a success status.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/cohere_examples/cohere_example.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Wrapping and Unwrapping Methods for OpenTelemetry Tracing in Python\nDESCRIPTION: Demonstrates how to wrap and unwrap methods for OpenTelemetry tracing using the AgentOps instrumentation utilities. It creates a tracer, applies the wrapping configuration, and shows how to later unwrap the method.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/common/README.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.trace import get_tracer\nfrom agentops.instrumentation.common.wrappers import wrap, unwrap\n\n# Create a tracer and wrap a method\ntracer = get_tracer(\"openai\", \"0.0.0\")\nwrap(config, tracer)\n\n# Later, unwrap the method\nunwrap(config)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for MultiOn and AgentOps\nDESCRIPTION: Import statements for MultiOn client, AgentOps, and environment variable management libraries.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Webpage_data_retrieval.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport multion\nfrom multion.client import MultiOn\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: Ending the AgentOps monitoring session with a success status.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/mistral_examples/mistral_example.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: API Key Configuration Setup\nDESCRIPTION: Setting up API keys for OpenAI and AgentOps using environment variables or direct assignment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK using pip or poetry\nDESCRIPTION: Commands to install the AgentOps SDK using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/openai.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AutoGen and AgentOps\nDESCRIPTION: This code imports the necessary modules and functions from AutoGen, AgentOps, and other utility libraries to set up the agent environment and tracking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/autogen_examples/MathAgent.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated, Literal\nfrom autogen import ConversableAgent, register_function\nimport agentops\nimport os\nfrom dotenv import load_dotenv\nfrom IPython.core.error import (\n    StdinNotImplementedError,\n)  # only needed by AgentOps testing automation\n```\n\n----------------------------------------\n\nTITLE: Defining Character Build Archetypes\nDESCRIPTION: Creates a list of character build archetypes inspired by the Cyberpunk Edgerunners anime, to be used for cyberware recommendations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nedgerunners_builds = [\n    {\n        \"name\": \"The Agile Fighter\",\n        \"description\": \"An adaptable build that focuses on speed and reflexes. Excelling in close-quarters combat, this fighter utilizes a mix of melee and ranged weapons, quickly adapting to any situation and embodying the spirit of a street fighter.\",\n    },\n    {\n        \"name\": \"The Chaotic Gunner\",\n        \"description\": \"An unpredictable build specializing in dual-wielding firearms and fast-paced combat. With high energy and a penchant for mayhem, this gunner overwhelms enemies with speed and accuracy, making them a force to be reckoned with in any firefight.\",\n    },\n    {\n        \"name\": \"The Heavy Brawler\",\n```\n\n----------------------------------------\n\nTITLE: Debugging Trace Continuity in OpenTelemetry Python\nDESCRIPTION: Utility code for debugging trace continuity by accessing and logging current span context and trace IDs.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/OpenTelemetry.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncurrent_span = trace.get_current_span()\nspan_context = current_span.get_span_context()\ntrace_id = format_trace_id(span_context.trace_id)\nlogging.debug(f\"Current span trace ID: {trace_id}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps and Langchain\nDESCRIPTION: This snippet installs the necessary Python packages for using AgentOps with Langchain, including langchain, langchain_openai, agentops, and python-dotenv.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_examples.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install langchain==0.2.9\n%pip install langchain_openai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: Cleanup code to properly end the AgentOps monitoring session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/haystack_examples/haystack_anthropic_example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# End the AgentOps session\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Loading API Keys\nDESCRIPTION: Loading OpenAI and AgentOps API keys from environment variables\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_async.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK\nDESCRIPTION: Commands to install the AgentOps SDK using pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ai21.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Creating Spans with Parent Context in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to create spans with explicit parent contexts and store the context for future reference. Includes span attribute setting and context management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/OpenTelemetry.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nparent_context = self._get_parent_context(trace_obj)\nwith trace.start_as_current_span(\n    name=span_name,\n    context=parent_context,\n    kind=trace.SpanKind.CLIENT,\n    attributes=attributes,\n) as span:\n    # Span operations here\n    # Store the span's context for future reference\n    context = trace.set_span_in_context(span)\n    self._span_contexts[span_obj] = context\n```\n\n----------------------------------------\n\nTITLE: Implementing Cohere Chat Stream\nDESCRIPTION: Set up and process Cohere chat streams with web search connector, including system role configuration and response handling.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/cohere_examples/cohere_example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstream = co.chat_stream(\n    message=\"Tell me everything you can about AgentOps\",\n    connectors=[{\"id\": \"web-search\"}],\n)\n\nresponse = \"\"\nfor event in stream:\n    if event.event_type == \"text-generation\":\n        response += event.text\n        print(event.text, end=\"\")\n    elif event.event_type == \"stream-end\":\n        print(\"\\n\")\n        print(event)\n        print(\"\\n\")\n\nstream = co.chat_stream(\n    chat_history=[\n        {\n            \"role\": \"SYSTEM\",\n            \"message\": \"You are Adam Silverman: die-hard advocate of AgentOps, leader in AI Agent observability\",\n        },\n        {\n            \"role\": \"CHATBOT\",\n            \"message\": \"How's your day going? I'd like to tell you about AgentOps: {response}\",\n        },\n    ],\n    message=\"Based on your newfound knowledge of AgentOps, is Cohere a suitable partner for them and how could they integrate?\",\n    connectors=[{\"id\": \"web-search\"}],\n)\n\nresponse = \"\"\nfor event in stream:\n    if event.event_type == \"text-generation\":\n        response += event.text\n        print(event.text, end=\"\")\n    elif event.event_type == \"stream-end\":\n        print(\"\\n\")\n        print(event)\n        print(\"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: Concludes the AgentOps session with a success status, marking the completion of the simulation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-multi-agent-example.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Span Context Storage in Python with OpenTelemetry\nDESCRIPTION: Creates WeakKeyDictionary instances to store span contexts while avoiding memory leaks. These dictionaries maintain parent-child relationships between spans.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/OpenTelemetry.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Use weakref dictionaries to avoid memory leaks\nself._span_contexts = weakref.WeakKeyDictionary()\nself._trace_root_contexts = weakref.WeakKeyDictionary()\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statements for AutoGen agents, AgentOps, environment variables handling, and IPython error handling.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/autogen_examples/AgentChat.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom autogen import ConversableAgent, UserProxyAgent\nimport agentops\nimport os\nfrom dotenv import load_dotenv\nfrom IPython.core.error import (\n    StdinNotImplementedError,\n)  # only needed by AgentOps testing automation\n```\n\n----------------------------------------\n\nTITLE: Implementing Mission Generation Function\nDESCRIPTION: Creating a function that randomly selects locations, mission types, and casualty levels to generate three mission scenarios for the AI to analyze.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef generate_missions():\n    selectedmissions = []\n    loop = 0\n\n    while loop < 3:\n        location = random.choice(locations)\n        casualties = random.choice(combat_casualties)\n        mission = random.choice(missions)\n        final = (\n            f\"LocationName: {location['Name']}, \"\n            f\"LocationInfo: {location['Description']}, \"\n            f\"HumanCombatCasualties: {casualties}, \"\n            f\"Mission: {mission}\"\n        )\n\n        selectedmissions.append(final)\n        loop += 1\n\n    # Combine all mission strings into a single string with a separator (e.g., newline or comma)\n    missions_string = \"\\n\".join(missions)  # Or \", \".join(missions) for a comma-separated string\n    print(missions_string)\n    return missions_string\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys from Environment Variables\nDESCRIPTION: Loads environment variables and sets up API keys for OpenAI and AgentOps, with fallback to placeholder values if environment variables are not found.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/simple_agent.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: Implementation of session termination with status reporting. Supports Success, Fail, or Indeterminate states with optional reason context.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/quickstart.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nao_client.end_session(end_state=\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Parent Context Retrieval in OpenTelemetry Python\nDESCRIPTION: Helper method to retrieve appropriate parent contexts for span creation, checking for existing root contexts before falling back to current context.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/OpenTelemetry.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef _get_parent_context(self, trace_obj):\n    # Try to get the trace's root context if it exists\n    if trace_obj in self._trace_root_contexts:\n        return self._trace_root_contexts[trace_obj]\n    \n    # Otherwise, use the current context\n    return context_api.context.get_current()\n```\n\n----------------------------------------\n\nTITLE: Defining System Prompt for Multilingual Chatbot\nDESCRIPTION: Sets the system prompt for the chatbot, outlining its capabilities and responsibilities in handling multilingual conversations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_examples.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nSYSTEM_PROMPT = \"\"\"\nYou are a highly intelligent, multilingual assistant designed to understand user prompts in English and respond in the user's specified native language. \nYour key responsibilities include:\n1. Translating and generating meaningful, contextually appropriate responses in the user's native language.\n2. Ensuring the output is accurate, coherent, and in Unicode format for proper display in the specified language.\n3. Adhering to the nuances of the specified language's grammar, tone, and cultural context.\n\nWhen asked to respond in a language, generate the response entirely in that language without using English unless explicitly requested.\n\nIf the specified language is unfamiliar or ambiguous, politely ask for clarification in English.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AgentOps and OpenAI\nDESCRIPTION: Imports the necessary modules from OpenAI, AgentOps, and dotenv for API key management and session tracking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/recording_events.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\nfrom agentops.sdk.decorators import session, agent, operation\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies\nDESCRIPTION: Import statements for required libraries including Mistral, dotenv, os, and agentops.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/mistral_examples/mistral_example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom mistralai import Mistral\nfrom dotenv import load_dotenv\nimport os\nimport agentops\n```\n\n----------------------------------------\n\nTITLE: Implementing Enemy Scanning Function in Python\nDESCRIPTION: Function that randomly selects demons from the predefined list and returns their names and descriptions as a formatted string.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef enemyscan(amount):\n    enemiesonscene = []\n    loop = 0\n\n    while loop < amount + 1:\n        scannedenemy = random.choice(demons)\n\n        # Append just the name of the demon to the list\n        enemiesonscene.append(scannedenemy[\"Name\"])\n        enemiesonscene.append(scannedenemy[\"Description\"])\n        loop += 1\n\n    # Combine all mission strings into a single string with a separator (e.g., newline or comma)\n    enemies_string = \"\\n\".join(enemiesonscene)\n    print(enemies_string)\n    return enemies_string\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Keys for OpenAI and AgentOps\nDESCRIPTION: Loads API keys from environment variables or allows manual entry. Handles both scenarios where keys might be set in a .env file or directly in the notebook code.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai-gpt.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Session Span with Decorator\nDESCRIPTION: Example of using the @session decorator to create a session span for tracking workflow execution.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create a session span (root for all other spans)\nfrom agentops.sdk.decorators import session\n\n@session\ndef my_workflow():\n    # Your session code here\n    return result\n```\n\n----------------------------------------\n\nTITLE: Automatic Timestamp Handling in OpenTelemetry Python\nDESCRIPTION: Demonstrates the recommended pattern for handling timestamps in OpenTelemetry spans, allowing automatic timestamp management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/OpenTelemetry.md#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Good pattern - timestamps handled by OpenTelemetry automatically\nwith tracer.start_as_current_span(\"my_operation\") as span:\n    # Do work\n    pass  # span.end() is called automatically\n```\n\n----------------------------------------\n\nTITLE: Setting User Prompt and Instruction for Translation\nDESCRIPTION: Defines the native language, user prompt (an excerpt from 'Kafka On The Shore'), and instruction prompt for the chatbot to translate.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_examples.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnative_language = \"Spanish\"\n\nUSER_PROMPT = \"\"\"\nSometimes fate is like a small sandstorm that keeps changing directions. You change direction but the sandstorm chases you. \nYou turn again, but the storm adjusts. Over and over you play this out, like some ominous dance with death just before dawn. Why? \nBecause this storm isn't something that blew in from far away, something that has nothing to do with you. This storm is you. \nSomething inside of you. So all you can do is give in to it, step right inside the storm, closing your eyes and plugging up your ears so the sand doesn't get in, and walk through it, step by step. \nThere's no sun there, no moon, no direction, no sense of time. Just fine white sand swirling up into the sky like pulverized bones. \nThat's the kind of sandstorm you need to imagine.\n\nAnd you really will have to make it through that violent, metaphysical, symbolic storm. \nNo matter how metaphysical or symbolic it might be, make no mistake about it: it will cut through flesh like a thousand razor blades. People will bleed there, and you will bleed too. \nHot, red blood. You'll catch that blood in your hands, your own blood and the blood of others.\n\nAnd once the storm is over you won't remember how you made it through, how you managed to survive. You won't even be sure, in fact, whether the storm is really over. \nBut one thing is certain. When you come out of the storm you won't be the same person who walked in. That's what this storm's all about.\n\"\"\"\n\nINSTRUCTION_PROMPT = f\"\"\"\nYou are a multilingual chatbot. Take the user's prompt: \"{USER_PROMPT}\" and respond naturally in {native_language}. \nEnsure that the response is in Unicode characters appropriate for {native_language}.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Stopping LLM Call Tracking in AgentOps SDK\nDESCRIPTION: This code snippet demonstrates how to stop tracking LLM calls after initializing AgentOps. It uses the agentops.stop_instrumenting() function to revert changes made to the LLM provider's module.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/tracking-llm-calls.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nagentops.stop_instrumenting()\n```\n\n----------------------------------------\n\nTITLE: Generate Session ID in Python\nDESCRIPTION: Generates a unique session identifier using Python's UUID module. Demonstrates the recommended approach for creating session IDs.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/rest.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\nsession_id = str(uuid.uuid4())\n# \"550e8400-e29b-41d4-a716-446655440000\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AgentOps and MultiOn Integration\nDESCRIPTION: This code imports the necessary classes and functions from multion, agentops, openai, os, and dotenv libraries.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Autonomous_web_browsing.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom multion.client import MultiOn\nfrom multion.core.request_options import RequestOptions\nimport openai\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Disabling Tracing in OpenAI Agents SDK\nDESCRIPTION: Shows how to globally enable or disable the tracing functionality. This can be useful for development environments or when tracing needs to be turned off temporarily.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/openai_agents/TRACING_API.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agents import set_tracing_disabled\nset_tracing_disabled(True)  # Disable tracing\n```\n\n----------------------------------------\n\nTITLE: Loading API Keys from Environment Variables\nDESCRIPTION: This snippet demonstrates how to load API keys for AI21 and AgentOps from environment variables using dotenv.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nAI21_API_KEY = os.getenv(\"AI2I_API_KEY\") or \"<your_ai21_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\n```\n\n----------------------------------------\n\nTITLE: Ending the AgentOps Monitoring Session\nDESCRIPTION: Finalizes the AgentOps monitoring session with a success status. This call marks the end of the monitoring period and sends all collected data to the AgentOps platform for analysis.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ollama_examples/ollama_examples.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Run Status Polling for OpenAI Assistant in Python\nDESCRIPTION: This function, wait_on_run, polls the status of a run until it's complete. It repeatedly checks the run status and sleeps for a short interval between checks.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\ndef wait_on_run(run, thread):\n    while run.status == \"queued\" or run.status == \"in_progress\":\n        run = client.beta.threads.runs.retrieve(\n            thread_id=thread.id,\n            run_id=run.id,\n        )\n        time.sleep(0.5)\n    return run\n```\n\n----------------------------------------\n\nTITLE: Creating a Run for OpenAI Assistant in Python\nDESCRIPTION: This code creates a run, which instructs the assistant to process the messages in the thread. It specifies both the assistant and thread IDs, then displays the run details.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrun = client.beta.threads.runs.create(\n    thread_id=thread.id,\n    assistant_id=assistant.id,\n)\nshow_json(run)\n```\n\n----------------------------------------\n\nTITLE: JWT Token Refresh\nDESCRIPTION: Refreshes an expired JWT token using the API key and session ID. Tokens expire after 24 hours and must be renewed.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/rest.mdx#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.agentops.ai/v2/reauthorize_jwt \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Agentops-Api-Key: your_api_key\" \\\n  -d '{\n    \"session_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Importing Required Python Libraries\nDESCRIPTION: Imports necessary Python libraries including Anthropic AI client, AgentOps, environment variables management, and utility modules.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom anthropic import Anthropic, AsyncAnthropic\nimport agentops\nfrom dotenv import load_dotenv\nimport os\nimport random\nimport time\nimport re\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI\nDESCRIPTION: Command to install the Mintlify CLI globally using npm for local documentation preview.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Assigning Tags When Starting a Session in Python\nDESCRIPTION: This code demonstrates how to assign tags when starting a new session in AgentOps. This allows for more specific tagging of individual sessions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/tags.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagentops.start_session(tags=['test tag'])\n```\n\n----------------------------------------\n\nTITLE: Initializing API Clients\nDESCRIPTION: Initializing AgentOps and OpenAI client instances with API keys and configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(api_key=AGENTOPS_API_KEY, default_tags=[\"openai\", \"beta-assistants\"])\nclient = OpenAI(api_key=OPENAI_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Run Steps\nDESCRIPTION: Shows how to access and display detailed step information from a run, including tool calls and message creation steps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nrun_steps = client.beta.threads.runs.steps.list(\n    thread_id=thread.id, run_id=run.id, order=\"asc\"\n)\n\nfor step in run_steps.data:\n    step_details = step.step_details\n    print(json.dumps(show_json(step_details), indent=4))\n```\n\n----------------------------------------\n\nTITLE: Analyzing Run Steps of OpenAI Assistant in Python\nDESCRIPTION: This snippet demonstrates how to retrieve and analyze the steps of a run in the OpenAI Assistants API. It lists the run steps and prints the details of each step, showing tool calls and message creation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nrun_steps = client.beta.threads.runs.steps.list(thread_id=thread.id, run_id=run.id, order=\"asc\")\n\nfor step in run_steps.data:\n    step_details = step.step_details\n    print(json.dumps(show_json(step_details), indent=4))\n```\n\n----------------------------------------\n\nTITLE: Executing Markdown Review Script\nDESCRIPTION: Command to run the markdown review script with a specific markdown file as input.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython main.py README.md\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for Multion, AgentOps, and OpenAI\nDESCRIPTION: This snippet demonstrates how to set API keys for Multion, AgentOps, and OpenAI. It uses environment variables from a .env file or allows manual input of API keys in the notebook.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multion.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nMULTION_API_KEY = os.getenv(\"MULTION_API_KEY\") or \"<your_multion_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\") or \"<your_openai_key>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Import Statements for CamelAI and AgentOps\nDESCRIPTION: Importing necessary modules for working with CamelAI and AgentOps. This includes the core agentops module, os for environment variables, getpass for secure input, and dotenv for loading environment variables.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/README.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nimport os\nfrom getpass import getpass\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Importing Asyncio for Direct Chat Interaction\nDESCRIPTION: Imports the asyncio library to enable running the agent's asynchronous chat functionality directly.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/web_search_agent.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for XAI Vision Project\nDESCRIPTION: Imports the necessary Python libraries including OpenAI for API access, AgentOps for tracking, and utilities for environment variable management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_vision_examples.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys for AgentOps and OpenAI\nDESCRIPTION: Loads environment variables and sets API keys for AgentOps and OpenAI. Provides flexibility for users to set keys via environment variables or directly in the code.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/langchain.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nAGENTOPS_API_KEY = os.environ.get(\"AGENTOPS_API_KEY\")\nOPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up AgentOps Handler in LlamaIndex\nDESCRIPTION: Python code to configure LlamaIndex to use AgentOps as the global handler for monitoring and observability. Environment variables or keyword arguments can be used for configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom llama_index.core import set_global_handler\n\n# NOTE: Feel free to set your AgentOps environment variables (e.g., 'AGENTOPS_API_KEY')\n# as outlined in the AgentOps documentation, or pass the equivalent keyword arguments\n# anticipated by AgentOps' AOClient as **eval_params in set_global_handler.\n\nset_global_handler(\"agentops\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Retrieval and Uploading Files for OpenAI Assistant in Python\nDESCRIPTION: This snippet shows how to enable the Retrieval tool and upload a file for an OpenAI Assistant. It uploads a PDF file and updates the assistant to use both Code Interpreter and the uploaded file for retrieval.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Upload the file\nfile = client.files.create(\n    file=open(\n        \"language_models_are_unsupervised_multitask_learners.pdf\",\n        \"rb\",\n    ),\n    purpose=\"assistants\",\n)\n# Update Assistant\nassistant = client.beta.assistants.update(\n    MATH_ASSISTANT_ID,\n    tools=[{\"type\": \"code_interpreter\"}],\n    tool_resources={\"code_interpreter\": {\"file_ids\": [file.id]}},\n)\nshow_json(assistant)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Session for MultiOn Integration\nDESCRIPTION: This code initializes an AgentOps session with auto_start_session set to False, allowing MultiOn to manage session starts. It also sets default tags for the session.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Sample_browsing_agent.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(\n    AGENTOPS_API_KEY, auto_start_session=False, default_tags=[\"MultiOn browse example\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AI21 and AgentOps Packages\nDESCRIPTION: This snippet shows how to install the required packages for AI21 and AgentOps using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U ai21\n%pip install -U agentops\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AgentOps Monitoring\nDESCRIPTION: Imports the necessary Python libraries: OpenAI client for API access, AgentOps for monitoring, os for environment variables, and dotenv for loading environment variables from a .env file.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai-gpt.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK via pip or poetry\nDESCRIPTION: Commands to install the AgentOps SDK using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/taskweaver.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Disabling automatic session ending with Crew\nDESCRIPTION: Code to prevent AgentOps from automatically ending a session when Crew determines all tasks are complete, allowing for more control over session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/restapi.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(skip_auto_end_session=True)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Pretty Printing Helper Function in Python\nDESCRIPTION: This function, show_json, is used to display JSON objects in a more readable format. It takes an object, converts it to JSON, and then displays it.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\ndef show_json(obj):\n    display(json.loads(obj.model_dump_json()))\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AgentOps Multi-Session Example\nDESCRIPTION: Import the necessary Python libraries: OpenAI for API access, agentops for session management, os for environment variables, and dotenv for loading environment variables from a file.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\nfrom agentops import ActionEvent\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps\nDESCRIPTION: Installation commands for required Python packages including OpenAI, AgentOps, and python-dotenv.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/recording-operations.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for CAMEL AI and AgentOps\nDESCRIPTION: Imports the required Python libraries including agentops, CAMEL AI components, and utility modules.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/camel.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nimport os\nfrom getpass import getpass\nfrom dotenv import load_dotenv\nfrom typing import List\nfrom colorama import Fore\n\n# Camel imports\nfrom camel.agents.chat_agent import FunctionCallingRecord\nfrom camel.models import ModelFactory\nfrom camel.societies import RolePlaying\nfrom camel.types import ModelPlatformType, ModelType\nfrom camel.utils import print_text_animated\nfrom camel.toolkits import SearchToolkit, MathToolkit\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies\nDESCRIPTION: Import required Python modules including AsyncOpenAI, AgentOps, and environment variables handling\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_async.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import AsyncOpenAI\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps Multi-Session Example\nDESCRIPTION: Install the necessary packages: openai for API access, agentops for session management, and python-dotenv for environment variable handling.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_session.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U openai\npip install -U agentops\npip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Adding a Message to OpenAI Assistant Thread in Python\nDESCRIPTION: This snippet adds a user message to the created thread, asking for help with solving an equation. It then displays the added message details.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmessage = client.beta.threads.messages.create(\n    thread_id=thread.id,\n    role=\"user\",\n    content=\"I need to solve the equation `3x + 11 = 14`. Can you help me?\",\n)\nshow_json(message)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps and Groq Client\nDESCRIPTION: This snippet initializes the AgentOps library with the API key and default tags, and creates a Groq client instance using the Groq API key.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"multi-agent-groq-notebook\"])\ngroq_client = Groq(api_key=GROQ_API_KEY)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for CamelAI and AgentOps\nDESCRIPTION: Installs the necessary Python packages: camel-ai with all dependencies and agentops.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-multi-agent-example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install camel-ai[all]\n%pip install agentops\n```\n\n----------------------------------------\n\nTITLE: Defining Web Search Functions using Tavily API\nDESCRIPTION: Implements two asynchronous functions: one for performing web searches and another for extracting content from URLs. The web search function returns the top three results with title, URL, and content, while the extraction function provides raw content from the given URLs.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/web_search_agent.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def web_search(query: str) -> dict:\n    response = tavily_client.search(query)\n    results = []\n    for result in response[\"results\"][:3]:\n        results.append({\"title\": result[\"title\"], \"url\": result[\"url\"], \"content\": result[\"content\"]})\n    return results\n\n\nasync def extract_from_urls(urls: list[str]) -> dict:\n    response = tavily_client.extract(urls=urls)\n\n    if response[\"failed_results\"]:\n        print(f\"Failed to extract from {response['failed_results']}\")\n\n    results = []\n    for result in response[\"results\"]:\n        results.append({\"url\": result[\"url\"], \"raw_content\": result[\"raw_content\"]})\n\n    return results\n```\n\n----------------------------------------\n\nTITLE: Installing Crew with AgentOps integration\nDESCRIPTION: Commands to install Crew with AgentOps support using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/restapi.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install 'crewai[agentops]'\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add 'crewai[agentops]'\n```\n\n----------------------------------------\n\nTITLE: Submitting Function Outputs to OpenAI Assistant in Python\nDESCRIPTION: This code prepares and submits the function outputs back to the OpenAI Assistant, including the responses from the quiz.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ntool_outputs = []\ntool_calls = run.required_action.submit_tool_outputs.tool_calls\n\nfor tool_call in tool_calls:\n    arguments = json.loads(tool_call.function.arguments)\n    responses = display_quiz(arguments[\"title\"], arguments[\"questions\"])\n    tool_outputs.append(\n        {\n            \"tool_call_id\": tool_call.id,\n            \"output\": json.dumps(responses),\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys and Logging for AgentOps and Groq\nDESCRIPTION: This snippet sets up API keys for AgentOps and Groq, either from environment variables or direct input. It also configures logging to debug level to show agent assignments.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nGROQ_API_KEY = os.getenv(\"GROQ_API_KEY\") or \"<your_groq_key>\"\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"<your_agentops_key>\"\nlogging.basicConfig(\n    level=logging.DEBUG\n)  # this will let us see that calls are assigned to an agent\n```\n\n----------------------------------------\n\nTITLE: Environment Setup and API Configuration\nDESCRIPTION: Setup for environment variables and API keys for both AgentOps and Anthropic services using dotenv for configuration management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/haystack_examples/haystack_anthropic_example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom haystack_integrations.components.generators.anthropic import AnthropicGenerator\nimport agentops\nfrom dotenv import load_dotenv\n\n# Load environment variables from a .env file if available\nload_dotenv()\n\n# Load API keys from environment variables or replace with your keys\nAGENTOPS_API_KEY = os.getenv(\"AGENTOPS_API_KEY\") or \"your_agentops_api_key\"\nANTHROPIC_API_KEY = os.getenv(\"ANTHROPIC_API_KEY\") or \"your_anthropic_api_key\"\n\n# Configure your environment for Anthropic API\nos.environ[\"ANTHROPIC_API_KEY\"] = ANTHROPIC_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Ollama and AgentOps Integration\nDESCRIPTION: Imports the required modules for the integration: ollama client for LLM interactions, agentops for monitoring, os for environment variables, and dotenv for loading environment variables from a .env file.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ollama_examples/ollama_examples.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ollama\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for CAMEL AI Implementation\nDESCRIPTION: Imports necessary modules from agentops, camel, and other utility libraries for AI agent implementation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-simple-examples.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n\n# Camel imports\nfrom camel.agents import ChatAgent\nfrom camel.messages import BaseMessage\nfrom camel.models import ModelFactory\nfrom camel.types import ModelPlatformType, ModelType\nfrom camel.toolkits import SearchToolkit\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Importing the necessary Python modules for working with Ollama and AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/ollama.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ollama\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Processing Tool Responses and Extracting Content in Python\nDESCRIPTION: Code that processes responses from multiple tools, identifies which tool was called, and extracts the relevant content from each tool's response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ninv_scan_res = \"\"\nenemy_scan_res = \"\"\n\n\nresponse_str = str(response)\ntool_use_count = response_str.count(\n    \"ToolUseBlock\"\n)  # We know the ToolUseBlock will appear once for each tool request so we check how many time it appears\n\n\n# You can use print(tool_use_count)to validate the ToolBlocks here if you wish\n\nloop = 0\n\n# We do this instead of a (foreach) because we need to skip the first block! This contains the message from the AI, not the tool! This way allows us to reference the item we want as easily as possible without complex logic needed!\n\nwhile loop < tool_use_count:  # We will get the tools now\n    tool_use_block = response.content[loop + 1]  # We start at 1 since 0 holds the AI mesage\n    tool_name = tool_use_block.name\n    tool_input = tool_use_block.input\n\n    if tool_name == \"inventoryscan_tool\":\n        # Call the inventoryscan function for inventoryscan_tool\n        inv_scan_res = inventoryscan()\n    elif tool_name == \"enemyscan_tool\":\n        # Get the amount for enemyscan_tool\n        amount = tool_input[\"amount\"]\n        # Call the enemyscan function with the amount\n        enemy_scan_res = enemyscan(amount)\n\n    loop = loop + 1\nprint(inv_scan_res)\nprint(enemy_scan_res)\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Handler and Langchain LLM in Python\nDESCRIPTION: Sets up the AgentOps handler with API key and tags, and initializes the Langchain LLM with OpenAI.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_v0_example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY = os.environ.get(\"AGENTOPS_API_KEY\")\nOPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\")\n\nagentops_handler = AgentOpsLangchainCallbackHandler(\n    api_key=AGENTOPS_API_KEY, default_tags=[\"Langchain Example\"]\n)\n\nllm = ChatOpenAI(\n    openai_api_key=OPENAI_API_KEY, callbacks=[agentops_handler], model=\"gpt-3.5-turbo\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Installation commands for the mistralai and agentops Python packages using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/mistral_examples/mistral_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U mistralai\n%pip install -U agentops\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps and OpenAI\nDESCRIPTION: Installs the necessary Python packages (openai, agentops, python-dotenv) using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/recording_events.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAI Assistant\nDESCRIPTION: Creating a math tutor assistant using OpenAI's Assistants API with specific instructions and model.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_assistants_example.ipynb#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nassistant = client.beta.assistants.create(\n    name=\"Math Tutor\",\n    instructions=\"You are a personal math tutor. Answer questions briefly, in a sentence or less.\",\n    model=\"gpt-4o-mini\",\n)\nshow_json(assistant)\n```\n\n----------------------------------------\n\nTITLE: Pulling Ollama Model\nDESCRIPTION: Downloading the Mistral model for use with Ollama.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/ollama.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nollama.pull(\"mistral\")\n```\n\n----------------------------------------\n\nTITLE: Final Claude API Request for Combat Plan in Python\nDESCRIPTION: Final API call that passes all accumulated context to Claude and asks for a combat plan based on the enemies detected and weapons available.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.messages.create(\n    max_tokens=5000,\n    model=\"claude-3-5-sonnet-20240620\",\n    tools=[\n        {\n            \"name\": \"enemyscan_tool\",\n            \"description\": \"Retrieve a list of demons currently present in the area.\",\n            \"input_schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"amount\": {\n                        \"type\": \"integer\",\n                        \"description\": \"Number of enemies to scan.\",\n                    }\n                },\n                \"required\": [\"amount\"],\n            },\n        },\n        {\n            \"name\": \"inventoryscan_tool\",\n            \"description\": \"Retrieve a list of weapons the Doom Slayer has at hand.\",\n            \"input_schema\": {\"type\": \"object\", \"properties\": {}, \"required\": []},\n        },\n    ],\n    messages=initial_messages,\n)\n\nmessage = response.content[0].text\nprint(message)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Langchain Agent in Python\nDESCRIPTION: Imports necessary modules from langchain and os for setting up the agent.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_v0_example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom langchain_openai import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\nfrom langchain.agents import tool\n```\n\n----------------------------------------\n\nTITLE: Installing Llama Stack Dependencies - Python\nDESCRIPTION: Installation of required Python packages including llama-stack-client, agentops, and OpenTelemetry dependencies.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/llama_stack_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U llama-stack-client\n%pip install -U llama-stack\n%pip install -U agentops\n%pip install -U python-dotenv\n%pip install -U fastapi\n%pip install opentelemetry-api\n%pip install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Multion and AgentOps in Python\nDESCRIPTION: This snippet installs the necessary Python packages for using Multion, AgentOps, OpenAI, and python-dotenv. It uses pip to upgrade to the latest versions of these packages.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multion.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U multion\n%pip install -U agentops\n%pip install -U openai\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Importing necessary Python modules for API interaction, environment variables, and random selection.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-sync.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom anthropic import Anthropic, AsyncAnthropic\nimport agentops\nfrom dotenv import load_dotenv\nimport os\nimport random\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Client\nDESCRIPTION: Basic setup for importing and initializing the AgentOps client with an API key.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/logger.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops import Client, AgentOpsLogger\n\nao_client = Client(<INSERT YOUR API KEY HERE>)\n```\n\n----------------------------------------\n\nTITLE: Appending Follow-up Message and Processing with OpenAI Assistant in Python\nDESCRIPTION: This comprehensive snippet adds a follow-up message to the thread, creates a new run, waits for completion, and retrieves new messages. It demonstrates a complete interaction cycle with the assistant.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Create a message to append to our thread\nmessage = client.beta.threads.messages.create(\n    thread_id=thread.id, role=\"user\", content=\"Could you explain this to me?\"\n)\n\n# Execute our run\nrun = client.beta.threads.runs.create(\n    thread_id=thread.id,\n    assistant_id=assistant.id,\n)\n\n# Wait for completion\nwait_on_run(run, thread)\n\n# Retrieve all the messages added after our last user message\nmessages = client.beta.threads.messages.list(\n    thread_id=thread.id, order=\"asc\", after=message.id\n)\nshow_json(messages)\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM Settings\nDESCRIPTION: Configuration of ChatOpenAI instance with custom settings for the language model.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/markdown_validator.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndefault_llm = ChatOpenAI(\n    openai_api_base=os.environ.get(\"OPENAI_API_BASE_URL\", \"https://api.openai.com/v1\"),\n    openai_api_key=OPENAI_API_KEY,\n    temperature=0.1,\n    model_name=os.environ.get(\"MODEL_NAME\", \"gpt-3.5-turbo\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK and LangChain Dependency\nDESCRIPTION: Commands to install the AgentOps SDK and the additional LangChain dependency using pip or poetry.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/langchain.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\npip install agentops[langchain]\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\npoetry add agentops[langchain]\n```\n\n----------------------------------------\n\nTITLE: AgentOps Handler Static Method Definition\nDESCRIPTION: Static method for creating an AgentOps handler instance with specified client and name.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/logger.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_agentops_handler(client: AgentOps, name: str)\n```\n\n----------------------------------------\n\nTITLE: Creating New AgentOps Logger\nDESCRIPTION: Initializes a new logger instance with AgentOps functionality that will send logs to the AgentOps service.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/logger.mdx#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogger = AgentOpsLogger.get_agentops_logger(ao_client, \"my_logger\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Concurrent Thread Operations\nDESCRIPTION: Demonstrates how to create threads and handle multiple concurrent requests to the Assistant. Shows asynchronous operation handling without using async libraries.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef create_thread_and_run(user_input):\n    thread = client.beta.threads.create()\n    run = submit_message(MATH_ASSISTANT_ID, thread, user_input)\n    return thread, run\n\n\n# Emulating concurrent user requests\nthread1, run1 = create_thread_and_run(\n    \"I need to solve the equation `3x + 11 = 14`. Can you help me?\"\n)\nthread2, run2 = create_thread_and_run(\"Could you explain linear algebra to me?\")\nthread3, run3 = create_thread_and_run(\"I don't like math. What can I do?\")\n\n# Now all Runs are executing...\n```\n\n----------------------------------------\n\nTITLE: Initializing Clients\nDESCRIPTION: Initialize AgentOps with API key and default tags, and create a Cohere client instance.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/cohere_examples/cohere_example.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"cohere-example\"])\nco = cohere.Client()\n```\n\n----------------------------------------\n\nTITLE: Assigning Tags on AgentOps Initialization in Python\nDESCRIPTION: This snippet shows how to assign tags when initializing AgentOps. Tags passed here will be applied to all subsequent sessions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/tags.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(tags=['test tag'])\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK\nDESCRIPTION: Commands for installing the AgentOps SDK using pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/anthropic.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installation of necessary Python packages including llama-stack-client, llama-stack, agentops, and related dependencies.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/llama_stack_example_for_ci.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U llama-stack-client\n%pip install -U llama-stack\n%pip install -U agentops\n%pip install -U python-dotenv\n%pip install -U fastapi\n%pip install opentelemetry-api\n%pip install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Anthropic SDK\nDESCRIPTION: Commands for installing the Anthropic SDK using pip or poetry package managers. Requires version 0.32.0 or higher for Computer Use tool support.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/anthropic.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install anthropic\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add anthropic\n```\n\n----------------------------------------\n\nTITLE: Initializing Message History for LLM Interaction in Python\nDESCRIPTION: Creates the initial message history for LLM context, including examples of previous interactions with character builds and cyberware recommendations. This provides context for the LLM to understand the expected interaction pattern.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/antrophic-example-tool.ipynb#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# We make our history a separate block to be easier to add to and get a random build to begin\n\n# Get a random build\nrandom_build = random.choice(edgerunners_builds)\n\n# We make our history a separate block to be easier to add to and get a random build to begin\ninitialmessages = [\n    {\n        \"role\": \"user\",\n        \"content\": \"The Heavy Tank - This build focuses on durability and defense, sacrificing speed for maximum resilience. Ideal for handling sustained combat and enduring powerful hits. Requested corporation is Arasaka.\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Starting Search! get_cyberware_by_creator[Arasaka]\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Name: Reinforced Subdermal Armor, Creator: Arasaka, Bio: Provides additional layers of armor under the skin to absorb heavy impact, Stats: +50% physical damage resistance, -10% agility\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"The Reinforced Subdermal Armor is a solid choice for The Heavy Tank build. The additional 50% damage resistance will allow you to endure powerful attacks, which is perfect for your defensive style. Be aware of the slight agility decrease, though it aligns with your build's focus on resilience over speed.\",\n    },\n    {\n        \"role\": \"user\",\n        \"content\": \"The Silent Assassin - A stealth-focused build that emphasizes silent takedowns and avoiding detection. This assassin utilizes a combination of stealth and high precision in ranged combat. Requested corporation is Militech.\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Starting Search! get_cyberware_by_creator[Militech]\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Name: Optical Camouflage System, Creator: Militech, Bio: A cloaking system that renders the user nearly invisible for a short duration, Stats: Duration: 10 seconds, Cooldown: 40 seconds\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"The Optical Camouflage System is highly suitable for The Silent Assassin build. Its invisibility feature will allow you to bypass enemies and perform stealth takedowns without being noticed. Just be cautious of its cooldown and plan your escape if needed.\",\n    },\n    {\n        \"role\": \"user\",\n        \"content\": \"The Tech Savant - A build that excels in using advanced technology and gadgets, specializing in hacking and controlling devices. This tech expert uses drones and automated turrets in combat. Requested corporation is Zetatech.\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Starting Search! get_cyberware_by_creator[Zetatech]\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Name: Drone Control Interface, Creator: Zetatech, Bio: Allows the user to control multiple drones simultaneously and provides an enhanced HUD for drone operations, Stats: Drone Capacity: +2, HUD enhancement for better drone tracking\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"The Drone Control Interface is ideal for The Tech Savant build, as it increases your ability to control multiple drones and improves your situational awareness through the enhanced HUD. This item will amplify your tech-based combat strategy significantly.\",\n    },\n    {\n        \"role\": \"user\",\n        \"content\": \"The Cyber Sniper - A long-range build specializing in precision and high-damage shots from a distance. This sniper focuses on accuracy and stability. Requested corporation is Kang Tao.\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Starting Search! get_cyberware_by_creator[Kang Tao]\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Name: Stabilizer Arms, Creator: Kang Tao, Bio: Cybernetic arms with built-in stabilizers to reduce weapon sway, Stats: Recoil Reduction: 80%, Increased Precision: +30%\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"The Stabilizer Arms are an excellent choice for The Cyber Sniper. The enhanced precision and recoil reduction will improve your accuracy, making it easier to land precise, high-damage shots from long range. Perfect for maintaining a steady aim during extended engagements.\",\n    },\n    {\n        \"role\": \"user\",\n        \"content\": f\"Based on the user's build type and requested corporation, get a random item from the corporation and tell if it will be a good idea to use; {random_build['name']} - {random_build['description']}, Requested Coroporation is {random.choice(Corpo)}\",\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import the necessary Python libraries including cohere, agentops, os, and dotenv for environment variable handling.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/cohere_examples/cohere_example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport cohere\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Basic Decorator Example in Python\nDESCRIPTION: Simple example showing basic decorator syntax in Python.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/decorators.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@example_decorator()\ndef hello_world():\n   ...\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK via Package Managers\nDESCRIPTION: Commands to install the AgentOps SDK using either pip or poetry package managers\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/llama_stack.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Demon Types in Python\nDESCRIPTION: Data structure that defines various demon types with their names and descriptions for use in the application.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndemons = [\n    {\n        \"Name\": \"Imp\",\n        \"Description\": \"A fast, agile demon that hurls fireballs and uses its claws to tear apart its prey. Imps are commonly found in Hell's army, notorious for their quickness and ability to climb walls, making them dangerous adversaries in any environment.\",\n    },\n    {\n        \"Name\": \"Cacodemon\",\n        \"Description\": \"A floating, spherical demon with a large mouth full of teeth and an ability to launch explosive projectiles. Cacodemons are often encountered in open areas, where their aerial agility and relentless attacks pose a constant threat.\",\n    },\n    {\n        \"Name\": \"Hell Knight\",\n        \"Description\": \"A towering, brutish demon with immense strength and durability. The Hell Knight is capable of charging at the Doom Slayer and delivering devastating melee attacks. Its tough hide makes it resistant to most forms of damage.\",\n    },\n    {\n        \"Name\": \"Mancubus\",\n        \"Description\": \"A grotesque, overweight demon that releases powerful fireballs from its massive arm cannons. Mancubus demons are slow-moving but dangerous due to their firepower and the ability to overwhelm enemies with their fiery onslaughts.\",\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Environment variable setup for AgentOps and Anthropic API keys.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/anthropic.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\nANTHROPIC_API_KEY=<YOUR ANTHROPIC API KEY>\n```\n\n----------------------------------------\n\nTITLE: Custom Span Attributes Configuration\nDESCRIPTION: Example of adding custom attributes to spans and sessions for enhanced context tracking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/recording-operations.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import operation\n\n@operation(name=\"custom-operation\")\ndef custom_operation(data):\n    # Your operation logic here\n    return f\"Custom: {data}\"\n\n# Create a session with custom operation\n@session(name=\"custom-session\")\ndef custom_session():\n    result = custom_operation(\"test\")\n    print(result)\n\n# Run the custom session\ncustom_session()\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API key in .env file\nDESCRIPTION: Example of setting the AgentOps API key in a .env file for environment variable configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/litellm.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Installing CAMEL-AI with all dependencies using poetry\nDESCRIPTION: Command to install CAMEL-AI with all dependencies using poetry package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/camel.mdx#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry add \"camel-ai[all]==0.2.11\"\n```\n\n----------------------------------------\n\nTITLE: Installing CrewAI and AgentOps Packages\nDESCRIPTION: Installation commands for the required Python packages using pip. This installs CrewAI with both tools and AgentOps integrations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/job_posting.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U 'crewai[tools]'\n%pip install -U 'crewai[agentops]'\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for AI21 and AgentOps\nDESCRIPTION: This code imports necessary modules from AI21, AgentOps, and other utility libraries for environment variable handling and asynchronous operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ai21 import AI21Client, AsyncAI21Client\nfrom ai21.models.chat import ChatMessage\nfrom dotenv import load_dotenv\nimport os\nimport asyncio\nimport agentops\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK via Package Managers\nDESCRIPTION: Commands for installing the AgentOps SDK using pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/mistral.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Gemini and AgentOps Integration Example\nDESCRIPTION: Complete Python example showing Gemini API integration with AgentOps, including synchronous and streaming text generation, initialization, and session management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/gemini_examples/README.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport google.generativeai as genai\nimport agentops\n\n# Configure API keys\ngenai.configure(api_key=GEMINI_API_KEY)\n\n# Initialize AgentOps (provider detection is automatic)\nagentops.init()\n\n# Create Gemini model\nmodel = genai.GenerativeModel(\"gemini-1.5-flash\")\n\n# Generate text (synchronous)\nresponse = model.generate_content(\"What are the three laws of robotics?\")\nprint(response.text)\n\n# Generate text (streaming)\nresponse = model.generate_content(\n    \"Explain machine learning in simple terms.\",\n    stream=True\n)\nfor chunk in response:\n    print(chunk.text, end=\"\")\n\n# End session and view stats\nagentops.end_session(\n    end_state=\"Success\",\n    end_state_reason=\"Example completed successfully\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Example of setting API keys as environment variables for AgentOps and Groq.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/groq.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\nGROQ_API_KEY=<YOUR OPENAI API KEY>\n```\n\n----------------------------------------\n\nTITLE: Installing Cohere SDK via pip or poetry\nDESCRIPTION: Commands to install the Cohere SDK (version 5.4.0 or higher) using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/cohere.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install cohere\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add cohere\n```\n\n----------------------------------------\n\nTITLE: Installing Groq SDK\nDESCRIPTION: Commands to install the Groq SDK using pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/groq.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install groq\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add groq\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic API Client with V3Client in Python\nDESCRIPTION: Example showing how to initialize a V3Client instance and make an authenticated API request to the AgentOps API endpoint. This demonstrates the basic usage pattern for the HTTP client architecture.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/client/http/README.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Example usage\nfrom agentops.client.v3_client import V3Client\n\nclient = V3Client(endpoint=\"https://api.agentops.ai\")\nresponse = client.authenticated_request(\n    method=\"get\",\n    path=\"/v3/some/endpoint\",\n    api_key=\"your-api-key\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Keys\nDESCRIPTION: Example of environment variable setup for AgentOps and Mistral API keys in a .env file.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/mistral.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\nMISTRAL_API_KEY=<YOUR MISTRAL API KEY>\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Story Generation\nDESCRIPTION: Execute the main async function for story generation\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_async.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nawait main()\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API Key in .env file\nDESCRIPTION: Example of setting the AgentOps API key in a .env file for environment variable configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/camel.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Installing Mistral SDK via Package Managers\nDESCRIPTION: Commands for installing the Mistral SDK using pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/mistral.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install mistralai\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add mistralai\n```\n\n----------------------------------------\n\nTITLE: Installing Llama Stack Client via Package Managers\nDESCRIPTION: Commands to install the Llama Stack Client using either pip or poetry package managers\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/llama_stack.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install llama-stack-client\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add llama-stack-client\n```\n\n----------------------------------------\n\nTITLE: Setting up AgentOps Environment Configuration\nDESCRIPTION: Environment variable configuration for AgentOps API key authentication.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/haystack.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI SDK using pip or poetry\nDESCRIPTION: Commands to install the OpenAI SDK using either pip or poetry package managers. Includes options for both the latest version and versions prior to 1.0.0.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/openai.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install openai\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add openai\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install \"openai<1.0.0\"\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add \"openai<1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Setting up SQL Table for Receipts\nDESCRIPTION: Create a SQLite in-memory database and define a 'receipts' table using SQLAlchemy. Insert sample data into the table.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/text_to_sql.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import (\n    create_engine,\n    MetaData,\n    Table,\n    Column,\n    String,\n    Integer,\n    Float,\n    insert,\n    inspect,\n    text,\n)\n\nengine = create_engine(\"sqlite:///:memory:\")\nmetadata_obj = MetaData()\n\n# create city SQL table\ntable_name = \"receipts\"\nreceipts = Table(\n    table_name,\n    metadata_obj,\n    Column(\"receipt_id\", Integer, primary_key=True),\n    Column(\"customer_name\", String(16), primary_key=True),\n    Column(\"price\", Float),\n    Column(\"tip\", Float),\n)\nmetadata_obj.create_all(engine)\n\nrows = [\n    {\"receipt_id\": 1, \"customer_name\": \"Alan Payne\", \"price\": 12.06, \"tip\": 1.20},\n    {\"receipt_id\": 2, \"customer_name\": \"Alex Mason\", \"price\": 23.86, \"tip\": 0.24},\n    {\"receipt_id\": 3, \"customer_name\": \"Woodrow Wilson\", \"price\": 53.43, \"tip\": 5.43},\n    {\"receipt_id\": 4, \"customer_name\": \"Margaret James\", \"price\": 21.11, \"tip\": 1.00},\n]\nfor row in rows:\n    stmt = insert(receipts).values(**row)\n    with engine.begin() as connection:\n        cursor = connection.execute(stmt)\n```\n\n----------------------------------------\n\nTITLE: Standalone Operation Decorator\nDESCRIPTION: Example of using the @operation decorator outside of an agent class.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/decorators.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.sdk.decorators import operation\n\n@operation\ndef process_data(data):\n    # Process the data\n    return result\n```\n\n----------------------------------------\n\nTITLE: Installing LlamaIndex Integration for AgentOps\nDESCRIPTION: Command to install the necessary package for integrating AgentOps with LlamaIndex applications.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npip install llama-index-instrumentation-agentops\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK with poetry\nDESCRIPTION: Command to install the AgentOps SDK using Poetry dependency manager. Alternative installation method for projects using Poetry.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ollama.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops ollama\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Installation of necessary Python packages including crewai, agentops, python-dotenv, langchain components, and pymarkdownlnt.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/markdown_validator.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U crewai\n%pip install -U agentops\n%pip install -U python-dotenv\n%pip install -U langchain_openai\n%pip install -U langchain\n%pip install -U StringIO\n%pip install -U pymarkdownlnt\n```\n\n----------------------------------------\n\nTITLE: Installing LiteLLM using pip or poetry\nDESCRIPTION: Commands to install LiteLLM using either pip or poetry package managers. Requires litellm version 1.3.1 or higher.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/litellm.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install litellm\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add litellm\n```\n\n----------------------------------------\n\nTITLE: Updating SQL Tool Description for Multiple Tables\nDESCRIPTION: Generate an updated description for the SQL execution tool that includes information about both the 'receipts' and 'waiters' tables.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/text_to_sql.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nupdated_description = \"\"\"Allows you to perform SQL queries on the table. Beware that this tool's output is a string representation of the execution output.\nIt can use the following tables:\"\"\"\n\ninspector = inspect(engine)\nfor table in [\"receipts\", \"waiters\"]:\n    columns_info = [(col[\"name\"], col[\"type\"]) for col in inspector.get_columns(table)]\n\n    table_description = f\"Table '{table}':\\n\"\n\n    table_description += \"Columns:\\n\" + \"\\n\".join([f\"  - {name}: {col_type}\" for name, col_type in columns_info])\n    updated_description += \"\\n\\n\" + table_description\n\nprint(updated_description)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for OpenAI and AgentOps Integration\nDESCRIPTION: Import statements for OpenAI client, AgentOps tracking library, and utility modules for environment variable management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_sync.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API Key in .env file\nDESCRIPTION: Example of setting the AgentOps API key in a .env file for secure configuration management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/xai.mdx#2025-04-07_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Installing Anthropic client with pip\nDESCRIPTION: Command to install the Anthropic client library using pip package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/xai.mdx#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install anthropic\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated Function as Markdown\nDESCRIPTION: This snippet displays the generated function as a Markdown code block for better readability in the notebook.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndisplay(Markdown(\"```python\\n\" + generated_func + \"\\n```\"))\n```\n\n----------------------------------------\n\nTITLE: Installing AG2 using pip or poetry\nDESCRIPTION: Commands to install AG2 (formerly AutoGen) using either pip or poetry package managers. This is required to create and run AG2 agents.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/autogen.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pyautogen\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add pyautogen\n```\n\n----------------------------------------\n\nTITLE: Running Updated Text-to-SQL Agent with Multiple Tables\nDESCRIPTION: Update the SQL execution tool with the new description and run the agent again with a query that requires joining multiple tables.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/text_to_sql.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsql_engine.description = updated_description\n\nagent = CodeAgent(\n    tools=[sql_engine],\n    model=model,\n)\n\nagent.run(\"Which waiter got more total money from tips?\")\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps\nDESCRIPTION: Initialize AgentOps client with API key and default tags\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_examples/openai_example_async.ipynb#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagentops.init(AGENTOPS_API_KEY, default_tags=[\"openai-async-example\"])\n```\n\n----------------------------------------\n\nTITLE: Installing SwarmZero and AgentOps Dependencies\nDESCRIPTION: Commands to install both the SwarmZero and AgentOps Python packages necessary for integration between these frameworks.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npip install swarmzero\npip install agentops\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama SDK with poetry\nDESCRIPTION: Command to install the Ollama SDK using Poetry dependency manager. Alternative installation method for projects using Poetry.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ollama.mdx#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry add ollama\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama SDK with pip\nDESCRIPTION: Command to install the Ollama SDK using pip package manager. Required for interacting with Ollama models.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ollama.mdx#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install ollama\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for AgentOps\nDESCRIPTION: Environment variable configuration for AgentOps API key. This allows you to store your API key securely in a .env file instead of hardcoding it in your code.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/autogen.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Printing Original and Translated Responses\nDESCRIPTION: Displays the original English prompt and the generated response in the specified native language (Spanish).\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_examples.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"Original Response:\\n{USER_PROMPT}\")\ngenerated_response = response.choices[0].message.content\nprint(f\"Response in {native_language}:\\n{generated_response}\")\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing AgentOps Client\nDESCRIPTION: Basic import and initialization of the AgentOps client with API key. Recommended to use environment variables for API key storage.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/quickstart.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\n```\n\nLANGUAGE: python\nCODE:\n```\nao_client = agentops.Client(<INSERT YOUR API KEY HERE>)\n```\n\n----------------------------------------\n\nTITLE: Color Code Removal Method\nDESCRIPTION: Static utility method for removing ANSI color codes from log strings before processing.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/logger.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef remove_color_codes(s: str) -> str\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API key in environment variable\nDESCRIPTION: Example of setting the AgentOps API key as an environment variable in a .env file.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/crewai.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Weapon Types in Python\nDESCRIPTION: Data structure that defines various weapon types with their names and descriptions, providing details on each weapon's characteristics and special abilities.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nweapons = [\n    {\n        \"Name\": \"Super Shotgun\",\n        \"Description\": \"A powerful, double-barreled shotgun that delivers devastating close-range damage. Known for its sheer stopping power, the Super Shotgun can tear through enemies with ease, especially when equipped with the Meat Hook attachment, allowing for rapid mobility and devastating hits.\",\n    },\n    {\n        \"Name\": \"Rocket Launcher\",\n        \"Description\": \"A high-powered weapon that fires explosive rockets capable of dealing massive area damage. The Rocket Launcher is invaluable for taking down groups of enemies or dealing significant damage to larger demons, especially when upgraded with the Lock-On Burst mod.\",\n    },\n    {\n        \"Name\": \"Chaingun\",\n        \"Description\": \"A rapid-fire weapon that can unleash a torrent of bullets at a high rate of speed. The Chaingun is perfect for mowing down enemies and can be equipped with the Heat Blast mod, allowing for explosive energy rounds that can clear multiple enemies at once.\",\n    },\n    {\n        \"Name\": \"BFG 9000\",\n        \"Description\": \"One of the most iconic weapons in the *Doom* franchise, the BFG 9000 fires a massive energy beam that obliterates anything in its path. With its massive damage potential, the BFG 9000 is a game-changer, especially in dealing with large groups of enemies or the toughest foes.\",\n    },\n    {\n        \"Name\": \"Ice Bomb\",\n        \"Description\": \"A special grenade that freezes enemies in a wide area, giving the Doom Slayer a chance to deal with multiple foes at once. The Ice Bomb is effective for crowd control, allowing for easy Glory Kills or creating distance from overwhelming enemies.\",\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Gemini SDK\nDESCRIPTION: Commands for installing the Google Generative AI SDK using either pip or poetry package managers. Requires version 0.1.0 or higher.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/gemini.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install google-generativeai\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add google-generativeai\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated Unit Tests with Markdown\nDESCRIPTION: Displays the generated unit tests with proper markdown formatting in a Jupyter notebook environment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_example.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndisplay(Markdown(\"```python\\n\" + generated_test + \"\\n```\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys for OpenAI and AgentOps\nDESCRIPTION: Setting up API keys for both OpenAI and AgentOps. This code loads environment variables from a .env file and falls back to manual input if environment variables are not set.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/README.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nload_dotenv()\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\") or \"<your openai key here>\"\nagentops_api_key = os.getenv(\"AGENTOPS_API_KEY\") or \"<your agentops key here>\"\n```\n\n----------------------------------------\n\nTITLE: Log Record Emission Method\nDESCRIPTION: Method for processing and sending log records to the AgentOps client service.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/logger.mdx#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef emit(self, record)\n```\n\n----------------------------------------\n\nTITLE: Installing CrewAI with AgentOps Integration\nDESCRIPTION: Command to install CrewAI with AgentOps integration for automatic monitoring.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install 'crewai[agentops]'\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for OpenAI Assistants and AgentOps in Python\nDESCRIPTION: This snippet installs the necessary Python libraries: openai, agentops, and python-dotenv. It uses pip to ensure the latest versions are installed.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/openai_assistants.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API Key in Environment Variables\nDESCRIPTION: Example of setting the AgentOps API key in an environment variable file.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ai21.mdx#2025-04-07_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Generating Random Story Elements\nDESCRIPTION: Creating lists of story fragments and generating a random sentence by combining them.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-sync.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfirst = [\"A unremarkable soldier\", \"A lone swordsman\", \"A lone lancer\", \"A lone pugilist\", \"A dual-wielder\", \"A weaponless soldier\", \"A beautiful android\", \"A small android\", \"A double-crossing android\", \"A weapon carrying android\"]\n\nsecond = [\"felt despair at this cold world\", \"held nothing back\", \"gave it all\", \"could not get up again\", \"grimaced in anger\", \"missed the chance of a lifetime\", \"couldn't find a weakpoint\", \"was overwhelmed\", \"was totally outmatched\", \"was distracted by a flower\", \"hesitated to land the killing blow\", \"was attacked from behind\", \"fell to the ground\"]\n\nthird = [\"in a dark hole beneath a city\", \"underground\", \"at the enemy's lair\", \"inside an empty ship\", \"at a tower built by the gods\", \"on a tower smiled upon by angels\", \"inside a tall tower\", \"at a peace-loving village\", \"at a village of refugees\", \"in the free skies\", \"below dark skies\", \"in a blood-soaked battlefield\"]\n\ngeneratedsentence = f\"{random.choice(first)} {random.choice(second)} {random.choice(third)}.\"\n```\n\n----------------------------------------\n\nTITLE: Asynchronous OpenAI chat completion with AgentOps\nDESCRIPTION: Full example of using OpenAI's chat completion API asynchronously with AgentOps integration. Uses AsyncOpenAI client and asyncio for asynchronous execution.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/openai.mdx#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import AsyncOpenAI\nimport agentops\nimport asyncio\n\nasync def main():\n    agentops.init(<INSERT YOUR API KEY HERE>)\n    client = AsyncOpenAI()\n\n    response = await client.chat.completions.create(\n        model=\"gpt-4o-mini\",\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"Write a haiku about AI and humans working together\"\n        }]\n    )\n\n    print(response.choices[0].message.content)\n    agentops.end_session('Success')\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Installing SwarmZero via Package Managers\nDESCRIPTION: Commands to install the SwarmZero package using pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/swarmzero.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install swarmzero\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add swarmzero\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Example content for the .env file to set up necessary API keys for the web search agent.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/README.md#2025-04-07_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nTAVILY_API_KEY=your_tavily_api_key_here\nAGENTOPS_API_KEY=your_agentops_api_key_here\nOPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for XAI and AgentOps\nDESCRIPTION: Installs the latest versions of OpenAI and AgentOps packages using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_examples.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK via pip or poetry\nDESCRIPTION: Commands to install the AgentOps SDK using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/cohere.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Creating Story Stream with Claude\nDESCRIPTION: Setting up a streaming message exchange with Claude to generate a story based on the random sentence.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-sync.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nstream = client.messages.create(\n    max_tokens=2400,\n    model=\"claude-3-5-sonnet-20240620\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Create a story based on the three sentence fragments given to you, it has been combined into one below.\",\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"{A foolish doll} {died in a world} {of ended dreams.}\",\n        },\n        {\"role\": \"assistant\", \"content\": defaultstory},\n        {\n            \"role\": \"user\",\n            \"content\": \"Create a story based on the three sentence fragments  given to you, it has been combined into one below.\",\n        },\n        {\"role\": \"assistant\", \"content\": generatedsentence},\n    ],\n    stream=True,\n)\n\nresponse = \"\"\nfor event in stream:\n    if event.type == \"content_block_delta\":\n        response += event.delta.text\n    elif event.type == \"message_stop\":\n        print(generatedsentence)\n        print(response)\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for AgentOps and OpenAI\nDESCRIPTION: Example of setting up environment variables for AgentOps and OpenAI API keys in a .env file.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/openai.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\nOPENAI_API_KEY=<YOUR OPENAI API KEY>\n```\n\n----------------------------------------\n\nTITLE: Installing AI21 SDK\nDESCRIPTION: Commands to install version 2.x.x of the AI21 SDK using pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ai21.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install \"ai21<3.0.0\"\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add \"ai21<3.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to the Web Search Agent\nDESCRIPTION: cURL command to send a POST request to the agent's API endpoint, demonstrating how to interact with the agent.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/README.md#2025-04-07_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:8000/api/v1/chat' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: multipart/form-data' \\\n  -F 'user_id=test_user' \\\n  -F 'session_id=test_web_search_agent' \\\n  -F 'chat_data={\"messages\":[{\"role\":\"user\",\"content\":\"what is swarmzero.ai about?\"}]}'\n```\n\n----------------------------------------\n\nTITLE: Installing CAMEL-AI with all dependencies using pip\nDESCRIPTION: Command to install CAMEL-AI with all dependencies using pip package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/camel.mdx#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"camel-ai[all]==0.2.11\"\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API key in environment variables\nDESCRIPTION: Example of storing the AgentOps API key in an environment variable file (.env) for secure configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/cohere.mdx#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Making Untracked LLM Call with Groq\nDESCRIPTION: This snippet demonstrates an LLM call made outside the context of a tracked agent, which will be assigned to the Default Agent by AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multi_agent_groq_example.ipynb#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nres = groq_client.chat.completions.create(\n    model=\"llama3-70b-8192\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are not a tracked agent\"},\n        {\"role\": \"user\", \"content\": \"Say hello\"},\n    ],\n)\nres.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Setting Up Import Statements for Anthropic and AgentOps\nDESCRIPTION: Import statements needed to use Anthropic's API with AgentOps monitoring. Includes Anthropic's synchronous and asynchronous clients, AgentOps, and environment configuration utilities.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/README.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom anthropic import Anthropic, AsyncAnthropic\nimport agentops\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing CrewAI with AgentOps integration via pip or poetry\nDESCRIPTION: Commands to install CrewAI with AgentOps integration using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/crewai.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install 'crewai[agentops]'\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add 'crewai[agentops]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Wrapping with WrapConfig in Python\nDESCRIPTION: Creates a configuration object that defines how a method should be wrapped for OpenTelemetry tracing. The config specifies the trace name, target package, class, method, attribute handler, and span kind.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/common/README.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops.instrumentation.common.wrappers import WrapConfig\nfrom opentelemetry.trace import SpanKind\n\nconfig = WrapConfig(\n    trace_name=\"llm.completion\",    # Name that will appear in trace spans\n    package=\"openai.resources\",     # Path to the module containing the class\n    class_name=\"Completions\",       # Name of the class containing the method\n    method_name=\"create\",           # Name of the method to wrap\n    handler=my_attribute_handler,   # Function that extracts attributes\n    span_kind=SpanKind.CLIENT       # Type of span to create\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for MultiOn and AgentOps\nDESCRIPTION: Installation commands for the required Python packages: multion, agentops, and python-dotenv\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/multion_examples/Step_by_step_web_browsing.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U multion\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK with poetry\nDESCRIPTION: Command to install the AgentOps SDK using poetry package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/camel.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Direct Integration in Crew Execution for CrewAI < 0.105.0\nDESCRIPTION: Code from CrewAI's crew.py that handles session completion in older versions (0.98.0-0.102.0). It ends the AgentOps session with a success state when execution finishes.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/legacy/crewai.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif agentops:\n    agentops.end_session(\n        end_state=\"Success\",\n        end_state_reason=\"Finished Execution\",\n        is_auto_end=True,\n    )\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Importing the necessary Python libraries for working with Anthropic's Claude AI, AgentOps tracking, and environment variables.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/agentops-anthropic-understanding-tools.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nfrom anthropic import Anthropic, AsyncAnthropic\nfrom dotenv import load_dotenv\nimport os\nimport random\nimport time\nimport re\n```\n\n----------------------------------------\n\nTITLE: Research Bot User Query and Output\nDESCRIPTION: Shows the interaction with the research bot including the query input and processing status updates\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/agents-examples/research_bot/sample_outputs/vacation.txt#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nWhat would you like to research? Caribbean vacation spots in April, optimizing for surfing, hiking and water sports\nView trace: https://platform.openai.com/logs/trace_....\nStarting research...\nâœ… Will perform 15 searches\nâœ… Searching... 15/15 completed\nâœ… Finishing report...\nâœ… Report summary\n```\n\n----------------------------------------\n\nTITLE: Implementing an AttributeHandler for OpenTelemetry in Python\nDESCRIPTION: A function that extracts attributes from method inputs and outputs to be used in OpenTelemetry spans. It processes args, kwargs, and return values to extract relevant information such as model names and response data.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/common/README.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Any, Tuple, Dict\nfrom agentops.instrumentation.common.attributes import AttributeMap\nfrom agentops.semconv import SpanAttributes\n\ndef my_attribute_handler(args: Optional[Tuple] = None, kwargs: Optional[Dict] = None, return_value: Optional[Any] = None) -> AttributeMap:\n    attributes = {}\n    \n    # Extract attributes from kwargs (method inputs)\n    if kwargs:\n        if \"model\" in kwargs:\n            attributes[SpanAttributes.MODEL_NAME] = kwargs[\"model\"]\n        # ...\n    \n    # Extract attributes from return value (method outputs)\n    if return_value:\n        if hasattr(return_value, \"model\"):\n            attributes[SpanAttributes.LLM_RESPONSE_MODEL] = return_value.model\n        # ...\n    \n    return attributes\n```\n\n----------------------------------------\n\nTITLE: Importing GitHub Stars Count Script in JavaScript\nDESCRIPTION: This code imports a JavaScript module to display GitHub stars count for the AgentOps repository.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/examples.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"module\" src=\"/scripts/github_stars.js\" />\n```\n\n----------------------------------------\n\nTITLE: Installing MultiOn via pip\nDESCRIPTION: Command to install or upgrade the MultiOn package using pip package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/multion.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U multion\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Sessions - Python\nDESCRIPTION: Cleanup code to end all active AgentOps sessions.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/llama_stack_example.ipynb#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_all_sessions()\n```\n\n----------------------------------------\n\nTITLE: Creating Operation/Task Spans with Decorators\nDESCRIPTION: Shows how to use @operation or @task decorators to track specific operations or tasks.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/README.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create operation/task spans for tracking specific operations\nfrom agentops.sdk.decorators import operation, task\n\n@operation  # or @task\ndef process_data(data):\n    # Process the data\n    return result\n```\n\n----------------------------------------\n\nTITLE: Ending the AgentOps Session with Status\nDESCRIPTION: Concludes the AgentOps monitoring session with a success status and provides a link to view the session details in the AgentOps dashboard.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/multi_smolagents_system.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Tools\nDESCRIPTION: Example demonstrating how to create and use function tools with agents for weather information retrieval.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/agentssdk.mdx#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom agents import Agent, Runner, function_tool\nimport agentops\n\n# Initialize AgentOps\nagentops.init()\n\n@function_tool\ndef get_weather(city: str) -> str:\n    return f\"The weather in {city} is sunny.\"\n\n\nagent = Agent(\n    name=\"Hello world\",\n    instructions=\"You are a helpful agent.\",\n    tools=[get_weather],\n)\n\n\nasync def main():\n    result = await Runner.run(agent, input=\"What's the weather in Tokyo?\")\n    print(result.final_output)\n    # The weather in Tokyo is sunny.\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for CamelAI Multi-Agent Example\nDESCRIPTION: Imports required modules including agentops, camel components, and utility libraries for the multi-agent simulation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/camel_examples/camelai-multi-agent-example.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport agentops\nimport os\nfrom getpass import getpass\nfrom dotenv import load_dotenv\nfrom typing import List\nfrom colorama import Fore\n\n# Camel imports\nfrom camel.agents.chat_agent import FunctionCallingRecord\nfrom camel.models import ModelFactory\nfrom camel.societies import RolePlaying\nfrom camel.types import ModelPlatformType, ModelType\nfrom camel.utils import print_text_animated\nfrom camel.toolkits import SearchToolkit, MathToolkit\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI client with poetry\nDESCRIPTION: Command to install the OpenAI client library using poetry package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/xai.mdx#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry add openai\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: End the AgentOps session with a 'Success' state to complete the observability tracking for the Text-to-SQL agent implementation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/text_to_sql.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies with pip\nDESCRIPTION: Installs the necessary Python packages including markdownify for HTML conversion, duckduckgo-search for web searching, smolagents for agent infrastructure, and agentops for monitoring.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/smolagents_examples/multi_smolagents_system.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install markdownify\n%pip install duckduckgo-search\n%pip install smolagents\n%pip install agentops\n```\n\n----------------------------------------\n\nTITLE: JWT Token Usage Example\nDESCRIPTION: Demonstrates how to use JWT token for authenticated requests to create events. The token must be included in the Authorization header.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/rest.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.agentops.ai/create_events \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIs...\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"events\": [{\n      \"type\": \"llm\",\n      \"init_timestamp\": \"2024-03-14T12:01:00Z\"\n    }]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Example Debug Logging for OpenTelemetry Spans\nDESCRIPTION: Shows how to implement debug logging for trace IDs to verify proper context propagation and span relationships.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/OpenTelemetry.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlogging.debug(f\"Span {span.name} has trace ID: {format_trace_id(span.get_span_context().trace_id)}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for XAI Vision and AgentOps\nDESCRIPTION: Installs the necessary Python packages for using OpenAI's API and AgentOps for tracking.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_vision_examples.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n```\n\n----------------------------------------\n\nTITLE: Installing Anthropic client with poetry\nDESCRIPTION: Command to install the Anthropic client library using poetry package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/xai.mdx#2025-04-07_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry add anthropic\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: This code ends the AgentOps session with a success status.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Manually Recording a Custom AgentOps Event\nDESCRIPTION: Shows how to manually create and record a custom event in AgentOps. This example creates an event when the AI response contains 'hello', capturing both the user message and AI response.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai-gpt.ipynb#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom agentops import ActionEvent\n\nmessage = ({\"role\": \"user\", \"content\": \"Hello\"},)\nresponse = openai.chat.completions.create(\n    model=\"gpt-3.5-turbo\", messages=message, temperature=0.5\n)\n\nif \"hello\" in str(response.choices[0].message.content).lower():\n    agentops.record(\n        ActionEvent(\n            action_type=\"Agent says hello\",\n            logs=str(message),\n            returns=str(response.choices[0].message.content),\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK using Package Managers\nDESCRIPTION: Installation commands for AgentOps SDK using pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/quickstart.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Integrating with OpenTelemetry Exporter in Python\nDESCRIPTION: Example demonstrating how to integrate the AgentOps HTTP client architecture with external libraries, specifically the OpenTelemetry exporter. It shows how to create an authenticated session and use it with the AuthenticatedOTLPExporter.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/client/http/README.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Example with OpenTelemetry exporter\nfrom agentops.client.v3_client import V3Client\nfrom agentops.client.exporters import AuthenticatedOTLPExporter\n\nclient = V3Client(endpoint=\"https://api.agentops.ai\")\nsession = client.create_authenticated_session(api_key=\"your-api-key\")\n\nexporter = AuthenticatedOTLPExporter(\n    endpoint=\"https://api.agentops.ai/v3/traces\",\n    api_client=client,\n    api_key=\"your-api-key\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding AgentOps Handler to Existing Logger\nDESCRIPTION: Creates an AgentOps handler and adds it to an existing logger instance for sending logs to AgentOps.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v0/logger.mdx#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhandler = AgentOpsLogger.get_agentops_handler(agentops, \"my_logger\")\n<YOUR LOGGER>.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK using pip or poetry\nDESCRIPTION: Commands to install the AgentOps SDK using either pip or poetry package managers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/restapi.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session with Success Status\nDESCRIPTION: Concludes the AgentOps tracking session with a success status, useful for monitoring the performance of the image analysis task.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_vision_examples.ipynb#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Streaming Contextual Answers with AI21\nDESCRIPTION: This snippet shows how to use AI21's contextual answering capability with streaming, providing a context about AI and mathematics and a question about linear algebra's importance in machine learning.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/ai21_examples/ai21_examples.ipynb#2025-04-07_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nCONTEXT = \"\"\"\nIn the rapidly evolving field of Artificial Intelligence (AI), mathematical \nfoundations such as calculus, linear algebra, and statistics play a crucial role. \nFor instance, linear algebra is essential for understanding and developing machine \nlearning algorithms. It involves the study of vectors, matrices, and tensor operations \nwhich are critical for performing transformations and optimizations. Additionally, \nconcepts from calculus like derivatives and integrals are used to optimize the \nperformance of AI models through gradient descent and other optimization techniques. \nStatistics and probability form the backbone for making inferences and predictions, \nenabling AI systems to learn from data and make decisions under uncertainty. \nUnderstanding these mathematical principles allows for the development of more robust \nand effective AI systems.\n\"\"\"\nresponse = client.answer.create(\n    context=CONTEXT,\n    question=\"Why is linear algebra important for machine learning algorithms?\",\n    stream=True,\n)\nprint(response.answer)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI client with pip\nDESCRIPTION: Command to install the OpenAI client library using pip package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/xai.mdx#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install openai\n```\n\n----------------------------------------\n\nTITLE: Visualizing Span Hierarchy in OpenAI Agents Tracing\nDESCRIPTION: Diagram showing the parent-child relationship between different span types in the tracing system. The hierarchy starts with a workflow trace span as the root, containing agent spans which may further contain generation, function, response, and handoff spans.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/openai_agents/SPANS.md#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nagents.trace.{workflow_name}\n  â””â”€â”€ agents.agent\n      â”œâ”€â”€ agents.generation\n      â”œâ”€â”€ agents.function\n      â”œâ”€â”€ agents.response\n      â””â”€â”€ agents.handoff\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installing the necessary Python packages agentops and anthropic using pip.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/anthropic-example-sync.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install agentops\n%pip install anthropic\n```\n\n----------------------------------------\n\nTITLE: Debug Logs from OpenAI API Instrumentation\nDESCRIPTION: Debug logs showing the successful patching of OpenAI API methods and creation of spans for telemetry data collection.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_responses/FINDINGS.md#2025-04-07_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n(DEBUG) ðŸ–‡ AgentOps: Patched OpenAI v1+ Response API\n(DEBUG) ðŸ–‡ AgentOps: Patched OpenAI Legacy Response API\n(DEBUG) ðŸ–‡ AgentOps: Successfully instrumented OpenAI responses\n(DEBUG) ðŸ–‡ AgentOps: Started span: openai.chat (kind: CLIENT)\n(DEBUG) ðŸ–‡ AgentOps: Started span: openai.response.parse (kind: CLIENT)\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Agents Test Fixtures Generator Script in Python\nDESCRIPTION: This code snippet demonstrates how to activate a virtual environment and run the Python script to generate test fixtures for OpenAI Agents API. It uses the command line to execute these operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/tests/unit/instrumentation/openai_agents/tools/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Activate venv\nsource .venv/bin/activate\n\n# Run it\npython -m tests.unit.instrumentation.openai_agents_tools.generate_fixtures\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for AgentOps and Haystack\nDESCRIPTION: This snippet installs the necessary Python packages: haystack-ai, agentops, and python-dotenv. These are required for setting up the OpenAIGenerator and AgentOps environment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/haystack_examples/haystack_openai_example.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U haystack-ai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Ending AgentOps Session\nDESCRIPTION: Concludes the AgentOps tracking session with a success state, useful for monitoring chatbot performance.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/xai_examples/grok_examples.ipynb#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nagentops.end_session(\"Success\")\n```\n\n----------------------------------------\n\nTITLE: Starting Ollama Server with Llama Stack Client\nDESCRIPTION: Docker command to initialize the Ollama server integrated with Llama Stack client using docker-compose configuration.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/llama_stack_client_examples/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages with pip\nDESCRIPTION: Installs the necessary Python packages: OpenAI client library for API access, AgentOps for monitoring, and python-dotenv for environment variable management.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/simple_agent.mdx#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%pip install -U openai\n%pip install -U agentops\n%pip install -U python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Writing Async Test Functions\nDESCRIPTION: Example of writing asynchronous test functions with pytest and dependencies.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom pytest_mock import MockerFixture\nfrom unittest.mock import Mock, patch\n\n@pytest.mark.asyncio  # For async tests\nasync def test_async_function():\n    # Test implementation\n\n@pytest.mark.depends(on=['test_prerequisite'])  # Declare test dependencies\ndef test_dependent_function():\n    # Test implementation\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK with pip\nDESCRIPTION: Command to install the AgentOps SDK using pip package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/xai.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\n----------------------------------------\n\nTITLE: Implementing New LLM Provider\nDESCRIPTION: Example implementation of a new LLM provider class inheriting from BaseProvider.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@singleton\nclass NewProvider(BaseProvider):\n    def __init__(self, client):\n        super().__init__(client)\n        self._provider_name = \"ProviderName\"\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Dual API Example Testing\nDESCRIPTION: Example output from the dual_api_example.py script showing successful calls to both OpenAI API formats and the corresponding responses.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_responses/FINDINGS.md#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nChat Completions Result: Async/await in Python allows for concurrent execution of code, enabling non-blocking operations and efficient handling of multiple tasks.\n\nResponses Result: Response(id='resp_67d637f76d0881929a0f213b928f999a00bc342f16c03baf', created_at=1742092279.0, error=None, ...truncated...)\n```\n\n----------------------------------------\n\nTITLE: SVG Path Definitions for Card Background\nDESCRIPTION: SVG path definitions creating a decorative background pattern with brown-colored (#BF8040) shapes at varying opacity levels (0.1, 0.3, 0.8)\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/snippets/claude-card.mdx#2025-04-07_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=\"28\" height=\"28\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" viewBox=\"0 0 999 999\">\n<path fill=\"#BF8040\" fill-opacity=\".1\" d=\"m63.9 52.7-2.4 2.8 2.8-2.4c2.5-2.3 3.2-3.1 2.4-3.1-.2 0-1.4 1.2-2.8 2.7m870.1-.2c1.3 1.4 2.6 2.5 2.8 2.5.3 0-.5-1.1-1.8-2.5s-2.6-2.5-2.8-2.5c-.3 0 .5 1.1 1.8 2.5\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing VCR Tests for HTTP Interactions\nDESCRIPTION: Example of using pytest-vcr to record and replay HTTP interactions in tests.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.vcr()  # Records HTTP interactions\ndef test_api_call():\n    response = client.make_request()\n    assert response.status_code == 200\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Poetry\nDESCRIPTION: Command to install project dependencies using Poetry package manager without installing the root package.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --no-root\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps SDK via Package Managers\nDESCRIPTION: Commands to install the AgentOps SDK using pip or poetry package managers for monitoring SwarmZero agents.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/swarmzero.mdx#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add agentops\n```\n\n----------------------------------------\n\nTITLE: Mocking HTTP Requests in Tests\nDESCRIPTION: Example of mocking HTTP requests using requests_mock in tests.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef test_http_client(requests_mock):\n    requests_mock.get('http://api.example.com', json={'key': 'value'})\n    response = make_request()\n    assert response.json()['key'] == 'value'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Testing Notebooks\nDESCRIPTION: YAML configuration for GitHub Actions workflow to test Jupyter notebooks.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: Test Notebooks\non:\n  pull_request:\n    paths:\n      - \"agentops/**\"\n      - \"examples/**\"\n      - \"tests/**\"\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps and Anthropic Python Packages\nDESCRIPTION: Commands to install the required Python packages for working with AgentOps and Anthropic's API.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/anthropic_examples/README.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install agentops\npip install anthropic\n```\n\n----------------------------------------\n\nTITLE: Importing Dynamic API Adjustment Script in JavaScript\nDESCRIPTION: This code imports a JavaScript module to dynamically adjust API-related elements on the page.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/examples.mdx#2025-04-07_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"module\" src=\"/scripts/adjust_api_dynamically.js\" />\n```\n\n----------------------------------------\n\nTITLE: Running OpenAI Dual API Example with AgentOps\nDESCRIPTION: Command to execute the dual API example script that demonstrates both OpenAI API formats with AgentOps instrumentation. Requires setting debug log level and running from project root.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/openai_responses/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# From the project root directory\nAGENTOPS_LOG_LEVEL=debug uv run examples/openai_responses/dual_api_example.py\n```\n\n----------------------------------------\n\nTITLE: Multi-Turn Conversation with Ollama and AgentOps\nDESCRIPTION: Example of a multi-turn conversation with Ollama tracked by AgentOps. Shows how to maintain conversation context by passing previous messages in the history.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/integrations/ollama.mdx#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport ollama\nimport agentops\n\nagentops.init(<INSERT YOUR API KEY HERE>)\nollama.pull(\"<MODEL NAME>\")\n\nmessages = [\n  {\n      'role': 'user',\n      'content': 'What is AgentOps?'\n  },\n  {\n      'role': 'assistant',\n      'content': 'AgentOps is a monitoring and observability platform for LLM applications.'\n  },\n  {\n      'role': 'user',\n      'content': 'Can you give me 3 key features?'\n  }\n]\n\nresponse = ollama.chat(\n    model=\"<MODEL NAME>\",\n    messages=messages\n)\nprint(response['message']['content'])   \nagentops.end_session('Success')\n```\n\n----------------------------------------\n\nTITLE: Creating Test Fixtures\nDESCRIPTION: Example of creating reusable test fixtures in conftest.py.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef mock_llm_client():\n    client = Mock()\n    client.chat.completions.create.return_value = Mock()\n    return client\n```\n\n----------------------------------------\n\nTITLE: GitHub Raw URL Pattern for External Images\nDESCRIPTION: Demonstrates the URL pattern for accessing images stored in the external images directory through GitHub's raw content service. This pattern ensures images are consistently updated across all external sites.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/images/external/README.md#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://raw.githubusercontent.com/AgentOps-AI/agentops/main/docs/images/external/<filename>.<extension>\n```\n\n----------------------------------------\n\nTITLE: Loading CSS Stylesheet\nDESCRIPTION: CSS stylesheet import for intro section styling.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/usage/dashboard-info.mdx#2025-04-07_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"css\" src=\"/styles/intro.css\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Opt Out of AgentOps Data Collection\nDESCRIPTION: This snippet shows how to set an environment variable to opt out of certain environment data collection in AgentOps. Users can set this variable to True to prevent the SDK from collecting some types of host environment data.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/concepts/host-env.mdx#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAGENTOPS_ENV_DATA_OPT_OUT=True\n```\n\n----------------------------------------\n\nTITLE: Registering the AgentOps Processor with OpenAI Agents SDK\nDESCRIPTION: Shows how to add the AgentOps processor to the OpenAI Agents SDK tracing system. This is the primary integration point that allows AgentOps to receive trace events from agent operations.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/instrumentation/openai_agents/TRACING_API.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agents import add_trace_processor\nfrom agentops.instrumentation.openai_agents.processor import OpenAIAgentsProcessor\n\nprocessor = OpenAIAgentsProcessor()\nadd_trace_processor(processor)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Pre-commit Hooks\nDESCRIPTION: Commands for installing project dependencies and setting up pre-commit hooks.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Handling LLM Provider Responses\nDESCRIPTION: Example implementation of response handling for LLM providers.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef handle_response(self, response, kwargs, init_timestamp, session=None):\n    llm_event = LLMEvent(init_timestamp=init_timestamp, params=kwargs)\n    try:\n        # Process response\n        llm_event.returns = response.model_dump()\n        llm_event.prompt = kwargs[\"messages\"]\n        # ... additional processing\n        self._safe_record(session, llm_event)\n    except Exception as e:\n        self._safe_record(session, ErrorEvent(trigger_event=llm_event, exception=e))\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Callbacks Table in Markdown\nDESCRIPTION: This snippet shows a markdown table listing all the supported LangChain callback methods, their descriptions, span kinds, and attributes captured by the AgentOps handler.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/agentops/integration/callbacks/langchain/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Method | Description | Span Kind | Attributes |\n|--------|-------------|-----------|------------|\n| `on_llm_start` | Start of an LLM call | `llm` | Model, prompts, parameters |\n| `on_llm_end` | End of an LLM call | `llm` | Completions, token usage |\n| `on_llm_new_token` | Streaming token received | N/A | Token count, last token |\n| `on_llm_error` | LLM call error | `llm` | Error details |\n| `on_chat_model_start` | Start of a chat model call | `llm` | Model, messages, parameters |\n| `on_chain_start` | Start of a chain | `task` | Chain type, inputs |\n| `on_chain_end` | End of a chain | `task` | Outputs |\n| `on_chain_error` | Chain execution error | `task` | Error details |\n| `on_tool_start` | Start of a tool call | `tool` | Tool name, input |\n| `on_tool_end` | End of a tool call | `tool` | Output |\n| `on_tool_error` | Tool execution error | `tool` | Error details |\n| `on_agent_action` | Agent taking an action | `agent` | Tool, input, log |\n| `on_agent_finish` | Agent completing a task | `agent` | Output, log |\n| `on_text` | Arbitrary text event | `text` | Text content |\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry\nDESCRIPTION: Command to install the required dependencies using the Poetry package manager.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --no-root\n```\n\n----------------------------------------\n\nTITLE: Rendering Marketing Cards Grid with JSX/React\nDESCRIPTION: A React component that renders a grid of cards showing AI tools and their limitations. Each card contains an icon, descriptive text, and error message. The layout uses flexbox with custom CSS classes for styling.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/snippets/no-mintlify-cards.mdx#2025-04-07_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div className='unminted-cards'>\n\t<div className='intro-row'>\n\t\t<div className='intro-card-container'>\n\t\t\t<img className = 'intro-icon-img' src=\"https://github.com/AgentOps-AI/agentops/blob/3c03341f5129f9f494ca64ed4e8d03b9a0575db4/docs/images/docs-icons/chat.png?raw=true\" />\n\t\t\t<p className='intro-card-text'>OpenAI automates my job posts...</p>\n\t\t</div>\n\t\t<div className='intro-card-container'>\n\t\t\t<p className='intro-card-text trailing'>but with a 50% error rate!</p>\n\t\t\t<img className = 'intro-icon-img trailing-img' src=\"https://github.com/AgentOps-AI/agentops/blob/438604c3c652a109c90b3d2484f0a18525c55b9e/docs/v1/img/docs-icons/bug-icon.png?raw=true\" />\n\t\t</div>\n\t</div>\n\t<div className='intro-row'>\n\t\t<div className='intro-card-container'>\n\t\t\t<img className = 'intro-icon-img' src=\"https://github.com/AgentOps-AI/agentops/blob/388a8a94603393cd2aa15e1adcd56e7f435839f9/docs/images/docs-icons/crew.png?raw=true\" />\n\t\t\t<p className='intro-card-text'>Crew boosts my product on Reddit...</p>\n\t\t</div>\n\t\t<div className='intro-card-container'>\n\t\t\t<p className='intro-card-text trailing'>but misses key subreddits!</p>\n\t\t\t<img className = 'intro-icon-img trailing-img' src=\"https://github.com/AgentOps-AI/agentops/blob/438604c3c652a109c90b3d2484f0a18525c55b9e/docs/v1/img/docs-icons/miss-icon.png?raw=true\" />\n\t\t</div>\n\t</div>\n\t<div className='intro-row'>\n\t\t<div className='intro-card-container'>\n\t\t\t<img className = 'intro-icon-img' src=\"https://github.com/AgentOps-AI/agentops/blob/3c03341f5129f9f494ca64ed4e8d03b9a0575db4/docs/images/docs-icons/claude.png?raw=true\" />\n\t\t\t<p className='intro-card-text'>Claude auto-replies to my emails...</p>\n\t\t</div>\n\t\t<div className='intro-card-container'>\n\t\t\t<p className='intro-card-text trailing'>but has the wrong tone!</p>\n\t\t\t<img className = 'intro-icon-img trailing-img' src=\"https://github.com/AgentOps-AI/agentops/blob/438604c3c652a109c90b3d2484f0a18525c55b9e/docs/v1/img/docs-icons/curse-icon.png?raw=true\" />\n\t\t</div>\n\t</div>\n\t<img className=\"resolved-stamp\" src=\"https://github.com/AgentOps-AI/agentops/blob/d4b8b4eafa005a5455758dc5ddf1d33ed2f0fcc9/docs/v1/img/docs-icons/stamp.png?raw=true\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated Function with Markdown\nDESCRIPTION: Displays the generated function with proper Markdown formatting for code blocks.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/v1/examples/multi_agent.mdx#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndisplay(Markdown(\"```python\\n\" + generated_func + \"\\n```\"))\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server\nDESCRIPTION: Command to start the Mintlify development server in the documentation root directory where mint.json is located.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/README.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex SVG Path\nDESCRIPTION: This SVG path data defines a complex shape or graphic through a series of coordinate instructions and drawing commands. It uses relative and absolute positioning to create lines, curves, and shapes.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/snippets/crewai-card.mdx#2025-04-07_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\n<path d=\"M797.8 47.7c.7.3 1.6.2 1.9-.1.4-.3-.2-.6-1.3-.5-1.1 0-1.4.3-.6.6m51.5 0c.9.2 2.3.2 3 0 .6-.3-.1-.5-1.8-.5-1.6 0-2.2.2-1.2.5m20.5 1c.6.2 1.8.2 2.5 0 .6-.3.1-.5-1.3-.5s-1.9.2-1.2.5m729 9c.7.3 1.6.2 1.9-.1.4-.3-.2-.6-1.3-.5-1.1 0-1.4.3-.6.6m37 0c.6.2 1.8.2 2.5 0 .6-.3.1-.5-1.3-.5s-1.9.2-1.2.5m-919.9 56-3.4 3.8 3.8-3.4c3.4-3.3 4.2-4.1 3.4-4.1-.2 0-1.9 1.7-3.8 3.7M1754 139.4c0 .2.8 1 1.8 1.7 1.5 1.3 1.6 1.2.3-.4s-2.1-2.1-2.1-1.3m-206.6 33.8-1.9 2.3 2.3-1.9c2.1-1.8 2.7-2.6 1.9-2.6-.2 0-1.2 1-2.3 2.2m144.1-.2c1 1.1 2 2 2.3 2s-.3-.9-1.3-2-2-2-2.3-2 .3.9 1.3 2m-1035.3 3.5c0 1.6.2 2.2.5 1.2.2-.9.2-2.3 0-3-.3-.6-.5.1-.5 1.8m0 13c0 1.6.2 2.2.5 1.2.2-.9.2-2.3 0-3-.3-.6-.5.1-.5 1.8m1276.9 34.1c0 1.1.3 1.4.6.6.3-.7.2-1.6-.1-1.9-.3-.4-.6.2-.5 1.3M295.8 261.7c.7.3 1.6.2 1.9-.1.4-.3-.2-.6-1.3-.5-1.1 0-1.4.3-.6.6m6 33c.7.3 1.6.2 1.9-.1.4-.3-.2-.6-1.3-.5-1.1 0-1.4.3-.6.6m10 0c.7.3 1.6.2 1.9-.1.4-.3-.2-.6-1.3-.5-1.1 0-1.4.3-.6.6m-119.8 23-5.5 5.8 5.8-5.5c3.1-3 5.7-5.6 5.7-5.7 0-.8-1 .1-6 5.4m100.9 37c-1.3 1.6-1.2 1.7.4.4s2.1-2.1 1.3-2.1c-.2 0-1 .8-1.7 1.7m264 32c-1.3 1.6-1.2 1.7.4.4.9-.7 1.7-1.5 1.7-1.7 0-.8-.8-.3-2.1 1.3m-11 11c-1.3 1.6-1.2 1.7.4.4s2.1-2.1 1.3-2.1c-.2 0-1 .8-1.7 1.7m-248.8 20.9c0 1.1.3 1.4.6.6.3-.7.2-1.6-.1-1.9-.3-.4-.6.2-.5 1.3m614.3 31.6-1.9 2.3 2.3-1.9c1.2-1.1 2.2-2.1 2.2-2.3 0-.8-.8-.2-2.6 1.9m-241.5 35.5-3.4 3.8 3.8-3.4c3.4-3.3 4.2-4.1 3.4-4.1-.2 0-1.9 1.7-3.8 3.7m-449.8.9c0 1.1.3 1.4.6.6.3-.7.2-1.6-.1-1.9-.3-.4-.6.2-.5 1.3M108.2 489c0 1.4.2 1.9.5 1.2.2-.6.2-1.8 0-2.5-.3-.6-.5-.1-.5 1.3m33.1 13c0 4.7.2 6.6.4 4.2.2-2.3.2-6.1 0-8.5-.2-2.3-.4-.4-.4 4.3m-33.2 12.6c0 1.1.3 1.4.6.6.3-.7.2-1.6-.1-1.9-.3-.4-.6.2-.5 1.3m1270.1 3.4c0 1.4.2 1.9.5 1.2.2-.6.2-1.8 0-2.5-.3-.6-.5-.1-.5 1.3m-433.7 21.2-6 6.3 6.3-6c5.8-5.5 6.7-6.5 5.9-6.5-.1 0-2.9 2.8-6.2 6.2m369.4 4.5c-1.3 1.6-1.2 1.7.4.4s2.1-2.1 1.3-2.1c-.2 0-1 .8-1.7 1.7m-1062.1 4c.7.3 1.6.2 1.9-.1.4-.3-.2-.6-1.3-.5-1.1 0-1.4.3-.6.6m10.5 0c.9.2 2.5.2 3.5 0 .9-.3.1-.5-1.8-.5s-2.7.2-1.7.5M726 564.5c1.9 1.9 3.6 3.5 3.9 3.5s-1-1.6-2.9-3.5-3.6-3.5-3.9-3.5 1 1.6 2.9 3.5m422-.2c0 .2 1.5 1.6 3.3 3.3l3.2 2.9-2.9-3.3c-2.8-3-3.6-3.7-3.6-2.9m679.3 9.2c0 4.4.2 6.1.4 3.7.2-2.3.2-5.9 0-8-.2-2-.4-.1-.4 4.3M988 569.4c0 .2.8 1 1.8 1.7 1.5 1.3 1.6 1.2.3-.4s-2.1-2.1-2.1-1.3m93 7.1c-2.4 2.5-4.2 4.5-3.9 4.5s2.5-2 4.9-4.5 4.2-4.5 3.9-4.5-2.5 2-4.9 4.5m-911 2c1.9 1.9 3.6 3.5 3.9 3.5s-1-1.6-2.9-3.5-3.6-3.5-3.9-3.5 1 1.6 2.9 3.5m90.8 28.2c.7.3 1.6.2 1.9-.1.4-.3-.2-.6-1.3-.5-1.1 0-1.4.3-.6.6m549 21c2.8.2 7.6.2 10.5 0 2.8-.2.5-.3-5.3-.3s-8.1.1-5.2.3m242.5 0c1.5.2 3.9.2 5.5 0 1.5-.2.2-.4-2.8-.4s-4.3.2-2.7.4m166.4 0c1.8.2 5 .2 7 0 2.1-.2.7-.4-3.2-.4-3.8 0-5.5.2-3.8.4m396.6 0c2 .2 5.4.2 7.5 0 2-.2.3-.4-3.8-.4s-5.8.2-3.7.4m-1231.5 1c.6.2 1.8.2 2.5 0 .6-.3.1-.5-1.3-.5s-1.9.2-1.2.5m13 0c.7.3 1.6.2 1.9-.1.4-.3-.2-.6-1.3-.5-1.1 0-1.4.3-.6.6m-151 12c1.8.2 4.5.2 6 0s0-.4-3.3-.4-4.5.2-2.7.4\"/>\n```\n\n----------------------------------------\n\nTITLE: Activating Poetry Shell\nDESCRIPTION: Command to activate the Poetry virtual environment shell for running the agent.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/README.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry shell\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment\nDESCRIPTION: Commands for creating and activating a Python virtual environment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/CONTRIBUTING.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate  # Unix\n.\\venv\\Scripts\\activate   # Windows\n```\n\n----------------------------------------\n\nTITLE: SVG Path Definitions with Color Fill #BF0040\nDESCRIPTION: SVG path components using fill color #BF0040 (medium red) defining various geometric shapes and curves using path commands.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/snippets/crewai-card.mdx#2025-04-07_snippet_2\n\nLANGUAGE: SVG\nCODE:\n```\n<path fill=\"#BF0040\" d=\"M1848.8 174.7c.6.2 1.8.2 2.5 0 .6-.3.1-.5-1.3-.5s-1.9.2-1.2.5m-33.9 14-2.4 2.8 2.8-2.4c2.5-2.3 3.2-3.1 2.4-3.1-.2 0-1.4 1.2-2.8 2.7m-14.6 39.8c0 2.7.2 3.8.4 2.2.2-1.5.2-3.7 0-5-.2-1.2-.4 0-.4 2.8\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Tool for Langchain Agent in Python\nDESCRIPTION: Creates a simple tool 'find_movie' for the Langchain agent to use in finding movies by genre.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/langchain_examples/langchain_v0_example.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@tool\ndef find_movie(genre) -> str:\n    \"\"\"Find available movies\"\"\"\n    if genre == \"drama\":\n        return \"Dune 2\"\n    else:\n        return \"Pineapple Express\"\n\n\ntools = [find_movie]\n```\n\n----------------------------------------\n\nTITLE: Running the Web Search Agent\nDESCRIPTION: Command to start the web search agent using Python within the Poetry environment.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/swarmzero_examples/README.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python main.py\n```\n\n----------------------------------------\n\nTITLE: Setting Target Filename\nDESCRIPTION: Definition of the target Markdown file for validation.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/examples/crewai_examples/markdown_validator.ipynb#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfilename = \"README.md\"\n```\n\n----------------------------------------\n\nTITLE: SVG Path Definitions with Color Fill #800040\nDESCRIPTION: SVG path components using fill color #800040 (dark red) defining various geometric shapes and curves using path commands.\nSOURCE: https://github.com/AgentOps-AI/agentops/blob/main/docs/snippets/crewai-card.mdx#2025-04-07_snippet_1\n\nLANGUAGE: SVG\nCODE:\n```\n<path fill=\"#800040\" d=\"M1844.8 174.7c.6.2 1.8.2 2.5 0 .6-.3.1-.5-1.3-.5s-1.9.2-1.2.5m8 0c.6.2 1.8.2 2.5 0 .6-.3.1-.5-1.3-.5s-1.9.2-1.2.5m-52.7 47.9c0 1.1.3 1.4.6.6.3-.7.2-1.6-.1-1.9-.3-.4-.6.2-.5 1.3m.1 12.4c0 1.4.2 1.9.5 1.2.2-.6.2-1.8 0-2.5-.3-.6-.5-.1-.5 1.3\"/>\n```"
  }
]