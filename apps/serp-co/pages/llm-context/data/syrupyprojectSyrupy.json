[
  {
    "owner": "syrupy-project",
    "repo": "syrupy",
    "content": "TITLE: Basic Syrupy Test\nDESCRIPTION: This is a basic example of a Syrupy test case. It asserts that the `actual` value matches the snapshot. The first run will fail, but after running `pytest --snapshot-update`, a snapshot file will be generated.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef test_foo(snapshot):\n    actual = \"Some computed value!\"\n    assert actual == snapshot\n```\n\n----------------------------------------\n\nTITLE: Using Matchers for Dynamic Data in JSON Snapshots - Python\nDESCRIPTION: This snippet illustrates the usage of Syrupy matchers to handle dynamic data (IDs, dates) within JSON API responses. It defines a `matcher` that specifies expected types for the 'id' and 'registeredAt' fields. The test then asserts that the snapshot, when combined with the matcher, matches the API response.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nfrom syrupy.matchers import path_type\n\ndef test_api_call(client, snapshot_json):\n    resp = client.post(\"/user\", json={\"name\": \"Jane\"})\n    assert resp.status_code == 201\n\n    matcher = path_type({\n      \"id\": (int,),\n      \"registeredAt\": (datetime,)\n    })\n    assert snapshot_json(matcher=matcher) == resp.json()\n```\n\n----------------------------------------\n\nTITLE: Installing Syrupy with pip\nDESCRIPTION: This command installs the Syrupy package using pip, the Python package installer.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npython -m pip install syrupy\n```\n\n----------------------------------------\n\nTITLE: Composing Matchers for Snapshot Testing\nDESCRIPTION: This code snippet demonstrates how to use `compose_matchers` to combine multiple matchers for more complex snapshot matching scenarios.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom syrupy.matchers import compose_matchers\n\ndef test_multiple_matchers(snapshot):\n    data = {\n        \"number\": 1,\n        \"datetime\": datetime.datetime.now(),\n        \"float\": 1.3\n    }\n\n    assert data == snapshot(\n        matcher=compose_matchers(\n            path_type(types=(int, float), replacer=lambda *_: \"MATCHER_1\"),\n            path_type(types=(datetime.datetime,), replacer=lambda *_: \"MATCHER_2\"),\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Using path_type matcher in Syrupy\nDESCRIPTION: This code demonstrates how to use the `path_type` matcher to replace serialized data based on the path and value type.  It defines a mapping of paths to expected types, and the snapshot will replace values at those paths if the types match. The `datetime` object at 'date_created' will be handled, and a `ValueError` will be raised if the types specified are not matched.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom syrupy.matchers import path_type\n\ndef test_bar(snapshot):\n    actual = {\n      \"date_created\": datetime.now(),\n      \"value\": \"Some computed value!!\",\n    }\n    assert actual == snapshot(matcher=path_type({\n      \"date_created\": (datetime,),\n      \"nested.path.id\": (int,),\n    }))\n```\n\n----------------------------------------\n\nTITLE: Using props filter in Syrupy\nDESCRIPTION: This code demonstrates how to use the `props` filter to exclude specific properties by name from the serialized snapshot. It excludes properties named \"id\" and the property at index \"1\" of the list from the snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom syrupy.filters import props\n\ndef test_bar(snapshot):\n    actual = {\n      \"id\": uuid.uuid4(),\n      \"list\": [1,2,3],\n    }\n    assert actual == snapshot(exclude=props(\"id\", \"1\"))\n```\n\n----------------------------------------\n\nTITLE: Using diff in Syrupy\nDESCRIPTION: This code demonstrates how to use the `diff` option in Syrupy to snapshot only the differences between the actual object and a previous snapshot. It shows how to use both index and name to create a diff snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef test_diff(snapshot):\n    actual0 = [1,2,3,4]\n    actual1 = [0,1,3,4]\n\n    assert actual0 == snapshot\n    assert actual1 == snapshot(diff=0)\n    # This is equivalent to the lines above\n    # Must use the index name to diff when given\n    assert actual0 == snapshot(name='snap_name')\n    assert actual1 == snapshot(diff='snap_name')\n```\n\n----------------------------------------\n\nTITLE: Using paths filter in Syrupy\nDESCRIPTION: This code demonstrates how to use the `paths` filter to exclude properties based on their full path strings.  It excludes the property \"date\" and the element at index 1 of the list from the snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom syrupy.filters import paths\n\ndef test_bar(snapshot):\n    actual = {\n      \"date\": datetime.now(),\n      \"list\": [1,2,3],\n    }\n    assert actual == snapshot(exclude=paths(\"date\", \"list.1\"))\n```\n\n----------------------------------------\n\nTITLE: Overriding Snapshot Defaults with JSON Extension - Python\nDESCRIPTION: This code demonstrates how to override the default snapshot extension to use the `JSONSnapshotExtension`. It defines a pytest fixture `snapshot_json` that creates a new `SnapshotAssertion` instance with the specified extension. The example test uses this fixture to compare a JSON API response with a snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\nfrom syrupy.extensions.json import JSONSnapshotExtension\n\n@pytest.fixture\ndef snapshot_json(snapshot):\n    return snapshot.with_defaults(extension_class=JSONSnapshotExtension)\n    # or return snapshot.use_extension(JSONSnapshotExtension)\n\n\ndef test_api_call(client, snapshot_json):\n    resp = client.post(\"/endpoint\")\n    assert resp.status_code == 200\n    assert snapshot_json == resp.json()\n```\n\n----------------------------------------\n\nTITLE: Filtering attributes with include option\nDESCRIPTION: This example illustrates how to limit the properties that are serialized for a class using the `include` option in the snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef limit_foo_attrs(prop, path):\n    allowed_foo_attrs = {\"only\", \"serialize\", \"these\", \"attrs\"}\n    return isinstance(path[-1][1], Foo) and prop in allowed_foo_attrs\n\ndef test_bar(snapshot):\n    actual = Foo(...)\n    assert actual == snapshot(include=limit_foo_attrs)\n```\n\n----------------------------------------\n\nTITLE: Filtering attributes with exclude option\nDESCRIPTION: This example illustrates how to limit the properties that are serialized for a class using the `exclude` option in the snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef limit_foo_attrs(prop, path):\n    allowed_foo_attrs = {\"do\", \"not\", \"serialize\", \"these\", \"attrs\"}\n    return isinstance(path[-1][1], Foo) and prop in allowed_foo_attrs\n\ndef test_bar(snapshot):\n    actual = Foo(...)\n    assert actual == snapshot(exclude=limit_foo_attrs)\n```\n\n----------------------------------------\n\nTITLE: Using extension_class in Syrupy\nDESCRIPTION: This code demonstrates how to use the `extension_class` option in Syrupy to modify the snapshot matching and serialization process.  It shows how to pass an extension class to the snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef test_foo(snapshot):\n    actual_svg = \"<svg></svg>\"\n    assert actual_svg == snapshot(extension_class=SVGImageSnapshotExtension)\n```\n\n----------------------------------------\n\nTITLE: Custom Object Representation\nDESCRIPTION: This code snippet demonstrates how to customize the snapshot of a custom object by overriding the `__repr__` method.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef __repr__(self) -> str:\n    return \"MyCustomClass(...)\"\n```\n\n----------------------------------------\n\nTITLE: Using AmberDataSerializer to bypass custom object representation\nDESCRIPTION: This example shows how to use `AmberDataSerializer` to bypass a custom object representation and use the amber standard serialization.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef test_object_as_named_tuple(snapshot):\n    assert snapshot == AmberDataSerializer.object_as_named_tuple(obj_with_custom_repr)\n```\n\n----------------------------------------\n\nTITLE: Using name in Syrupy\nDESCRIPTION: This code demonstrates how to use the `name` option to specify a custom name for a snapshot. It showcases how to define custom names for each snapshot assertion within a test case instead of using auto-incremented identifiers.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef test_case(snapshot):\n    assert \"actual\" == snapshot(name=\"case_a\")\n    assert \"other\" == snapshot(name=\"case_b\")\n```\n\n----------------------------------------\n\nTITLE: Snapshot Comparison with Variable Assignment and String\nDESCRIPTION: This snippet shows assigning a string to a variable and then comparing the variable's value against a snapshot. The 'getfixture' function retrieves the 'snapshot' fixture, and the variable 'y' is compared to the snapshot value, confirming consistency.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/tests/syrupy/test_doctest.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> y = \"constant value\"\n>>> y == getfixture('snapshot')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Example Snapshot Output for path_type\nDESCRIPTION: This shows an example of the expected snapshot output when using the path_type matcher. It showcases the serialized form of a dictionary with a datetime and a string value.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# name: test_bar\n  dict({\n    'date_created': datetime,\n    'value': 'Some computed value!!',\n  })\n# ---\n```\n\n----------------------------------------\n\nTITLE: Matching String Value in Filepath\nDESCRIPTION: Demonstrates how to match a string value in a file path and replace parts of the path with a placeholder for a clean snapshot\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\nfrom syrupy.matchers import path_type\n\ndef test_matches_generated_string_value(snapshot, tmp_file):\n    matcher = path_value(\n        mapping={\"file_path\": r\"\\w+://(.*/)+dir/filename.txt\"},\n        replacer=lambda _, match: match[0].replace(match[1], \"<tmp-file-path>/\"),\n        types=(str,),\n    )\n\n    assert snapshot(matcher=matcher) == tmp_file\n```\n\n----------------------------------------\n\nTITLE: Debugging Performance Test Example Python\nDESCRIPTION: This test demonstrates how to create a simple performance test using pytest, utilizing environment variables for configuration and a snapshot for comparison.  The `SIZE` environment variable controls the number of iterations. It asserts equality between the iteration number `x` and a snapshot, effectively creating a performance baseline.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# test_performance.py\nimport pytest\nimport os\n\nSIZE = int(os.environ.get(\"SIZE\", 1000))\n\n@pytest.mark.parametrize(\"x\", range(SIZE))\ndef test_performance(x, snapshot):\n    assert x == snapshot\n```\n\n----------------------------------------\n\nTITLE: Snapshot Comparison with String\nDESCRIPTION: This snippet demonstrates comparing a string against a snapshot using a fixture. The 'getfixture' function retrieves the 'snapshot' fixture, and the string is compared against the snapshot value. This verifies that the string remains consistent with the previously recorded snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/tests/syrupy/test_doctest.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> \"There must be a break after every snapshot assertion\" == getfixture('snapshot')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Snapshot Comparison with Set\nDESCRIPTION: This snippet demonstrates comparing a set against a snapshot using a fixture. The 'getfixture' function retrieves the 'snapshot' fixture, and the set 'z' is compared to the snapshot value, verifying its consistency with the recorded snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/tests/syrupy/test_doctest.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> z = {1, 2, 3}\n>>> z == getfixture('snapshot')\nTrue\n```\n\n----------------------------------------\n\nTITLE: Using include with paths_include in Syrupy\nDESCRIPTION: This code demonstrates how to use the `paths_include` filter with the `include` option to filter which properties are included in the snapshot. It shows how to include the \"other\" key, and the nested \"key\" inside the \"nested\" dictionary.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nobj = {\n    \"other\": False,\n    \"nested\": { \"key\": True }\n}\nassert obj == snapshot(include=paths_include([\"other\"], [\"nested\", \"key\"]))\n```\n\n----------------------------------------\n\nTITLE: Example Snapshot Output for paths filter\nDESCRIPTION: This shows an example of the snapshot output when using the `paths` filter.  The 'date' property and the element at index '1' of the list are excluded from the snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# name: test_bar\n  dict({\n    'list': list([\n      1,\n      3,\n    ]),\n  })\n# ---\n```\n\n----------------------------------------\n\nTITLE: Example Snapshot Output for props filter\nDESCRIPTION: This shows an example of the snapshot output when using the `props` filter to exclude specific properties. It demonstrates how the 'id' and the element at index '1' of the list have been excluded.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# name: test_bar\n  dict({\n    'list': list([\n      1,\n      3,\n    ]),\n  })\n# ---\n```\n\n----------------------------------------\n\nTITLE: JSON Snapshot Example with Dynamic Data Matchers\nDESCRIPTION: This is an example of a generated JSON snapshot when using matchers to handle dynamic data.  It demonstrates the format of the snapshot file, showing how the types of the dynamic fields (id and registeredAt) are stored in the snapshot.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"<class 'int'>\",\n  \"registeredAt\": \"<class 'datetime'>\",\n  \"name\": \"Jane\"\n}\n```\n\n----------------------------------------\n\nTITLE: Run Performance Test With Profiling Bash\nDESCRIPTION: This command runs a Python performance test (`test_performance.py`) using `cProfile` to profile the execution.  It sorts the profiling results by cumulative time (`cumtime`) and saves the output to `profile.log`.  `--snapshot-update` updates the snapshots and `-s` captures standard output.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSIZE=1000 python -m cProfile -s cumtime -m pytest test_performance.py --snapshot-update -s > profile.log\n```\n\n----------------------------------------\n\nTITLE: Filtering attributes by overriding __dir__\nDESCRIPTION: This code demonstrates how to control attribute serialization by overriding the `__dir__` method of a class.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nclass Foo:\n    def __dir__(self):\n        return [\"only\", \"serialize\", \"these\", \"attrs\"]\n\ndef test_bar(snapshot):\n    actual = Foo(...)\n    assert actual == snapshot\n```\n\n----------------------------------------\n\nTITLE: Generating snapshot file\nDESCRIPTION: Command to generate a snapshot file under a `__snapshots__` directory\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npytest --snapshot-update\n```\n\n----------------------------------------\n\nTITLE: Uninstalling snapshottest and removing old snapshots\nDESCRIPTION: This set of commands uninstalls the `snapshottest` package and removes the old snapshots directory.  This is part of the migration process as syrupy cannot be used alongside snapshottest due to argument conflicts.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npip uninstall snapshottest -y;\nfind . -type d ! -path '*/\\.*' -name 'snapshots' | xargs rm -r\n```\n\n----------------------------------------\n\nTITLE: Ignoring File Extensions in Pytest Configuration - INI\nDESCRIPTION: This snippet shows how to configure pytest to ignore specific file extensions when updating snapshots.  The `snapshot-ignore-file-extensions` option is used in the `pytest.ini` file to specify a comma-separated list of file extensions to ignore.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\naddopts = --snapshot-ignore-file-extensions dvc,tmp,zip\n```\n\n----------------------------------------\n\nTITLE: Snapshot with Replaced Filepath Value\nDESCRIPTION: An example snapshot file where the generated file path has been replaced using a regular expression and replacer function.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Temp Files\",\n  \"file_path\": \"scheme://<tmp-file-path>/dir/filename.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Contributors using All Contributors Bot\nDESCRIPTION: This code snippet shows how to add contributors to the project using the all-contributors bot. By tagging the bot in a pull request with the username and contribution type, the bot will automatically update the contributor list.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n@all-contributors please add <username> for <contribution type>\n```\n\n----------------------------------------\n\nTITLE: Patching PyCharm Diff Viewer - INI\nDESCRIPTION: Shows how to configure pytest to patch the PyCharm diff viewer so it properly renders Syrupy snapshots. The `--snapshot-patch-pycharm-diff` option is added to the `addopts` setting in the `pytest.ini` file.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\naddopts = --snapshot-patch-pycharm-diff\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Syrupy - Python\nDESCRIPTION: Simple command to uninstall syrupy using pip.\nSOURCE: https://github.com/syrupy-project/syrupy/blob/main/README.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\npip uninstall syrupy\n```"
  }
]