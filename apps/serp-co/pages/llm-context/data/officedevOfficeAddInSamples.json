[
  {
    "owner": "officedev",
    "repo": "office-add-in-samples",
    "content": "TITLE: Inserting Text into a Word Document using Office JavaScript API\nDESCRIPTION: This JavaScript function `sayHello` demonstrates how to interact with the Word document content using the Office JavaScript API. It utilizes `Word.run` to execute batch operations against the Word object model. Inside the batch, it inserts the text \"Hello World\" as a new paragraph at the beginning of the document body using `insertParagraph` with `Word.InsertLocation.start`, and then synchronizes the context with `context.sync()` to apply the changes to the document.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/word-hello-world/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sayHello() {\n  return Word.run((context) => {\n    // insert a paragraph at the start of the document.\n    const paragraph = context.document.body.insertParagraph(\n      'Hello World',\n      Word.InsertLocation.start\n    );\n\n    // sync the context to run the previous API call, and return.\n    return context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Office JS API Library - Office.js - JavaScript\nDESCRIPTION: Initializes the Office JavaScript API library to ensure Office JS functionality is available before proceeding. This is required in all Office Add-ins that use the Office JavaScript APIs. The onReady callback receives an info object about the host. No dependencies needed beyond Office.js being loaded in the environment. The callback can be extended to hold any logic that must run after Office is ready.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/excel-hello-world/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady((info) => {});\n```\n\n----------------------------------------\n\nTITLE: Populating Excel Table with JSON Data using Office.js (JavaScript)\nDESCRIPTION: This snippet demonstrates processing fetched JSON data and populating an Excel table within the 'Template' worksheet. It maps the `salesData` array from the JSON object to a 2D array matching the table structure, calculates the target range address dynamically based on the data length (assuming the table starts at B5), and then writes the data to that range using `range.values`. Finally, it activates the sheet.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-insert-file/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Map JSON to table columns.\n  const newSalesData = json.salesData.map((item) => [\n    item.PRODUCT,\n    item.QTR1,\n    item.QTR2,\n    item.QTR3,\n    item.QTR4\n  ]);\n\n  // We know that the table in this template starts at B5, so we start with that.\n  // Next, we calculate the total number of rows from our sales data.\n  const startRow = 5;\n  const address = \"B\" + startRow + \":F\" + (newSalesData.length + startRow - 1);\n      \n  // Write the sales data to the table in the template.\n  const range = sheet.getRange(address);\n  range.values = newSalesData;\n  sheet.activate();\n```\n\n----------------------------------------\n\nTITLE: Fetching and Caching Data Using AJAX and localStorage in Office Add-ins (JavaScript)\nDESCRIPTION: This JavaScript snippet, intended for Excel (and potentially Word/PowerPoint) Office Add-ins, executes an AJAX call to fetch player stats from 'sampleData.json', stores the data in localStorage as JSON under the 'PlayerData' key, and then sends the parsed data to a table-creation function. Requires jQuery and a functioning 'createTable' function. Input: server response JSON. Output: Local cache, table created with latest data. If the connection is lost, the cached version will be used instead.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Excel.OfflineStorageAddin/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.ajax({\\n    dataType: \\\"json\\\",\\n    url: \\\"sampleData.json\\\",\\n    success: function (result, status, xhr) {\\n        // Stores the JSON retrieved from the AJAX call as a string in\\n        // local storage under the key \\\"PlayerData\\\"\\n        localStorage.PlayerData = JSON.stringify(result);\\n\\n        // Sends the new data to the table\\n        createTable(result);\\n    },\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from localStorage on AJAX Failure in Office Add-ins (JavaScript)\nDESCRIPTION: This JavaScript snippet handles the failure event of an AJAX request for player stats by attempting to load previously cached data from localStorage. Dependencies include jQuery, and a properly stored JSON string under the 'PlayerData' key, and a 'createTable' function. If cached data exists, it is parsed and passed to the table creation function; if not, an error is logged. This ensures resilience and offline support for users who previously loaded data online.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Excel.OfflineStorageAddin/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nerror: function (xhr, status, error) {\\n    // If the connections fails, checks if \\\"PlayerData\\\" was previously stored in local storage\\n    if (localStorage.PlayerData) {\\n        // Retrieves the string saved earlied under the key \\\"PlayerData\\\"\\n        // and parses it into an object\\n        let dataObject = JSON.parse(localStorage.PlayerData);\\n\\n        // Sends the saved data to the table\\n        createTable(dataObject);\\n    }\\n    else {\\n        console.log(\\\"Player data failed to load with error: \\\" + error);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting External Worksheet using Office.js (JavaScript)\nDESCRIPTION: This snippet demonstrates using the `insertWorksheetsFromBase64` method from the Office.js API within an Excel add-in. It inserts a specific worksheet named 'Template' from an external workbook (represented by the `workbookContents` base64 string) into the current workbook. The insertion happens after the sheet named 'Sheet1'.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-insert-file/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// STEP 1: Insert the template into the workbook.\nconst workbook = context.workbook;\n\n// Set up the insert options.\nconst options = {\n  sheetNamesToInsert: [\"Template\"], // Insert the \"Template\" worksheet from the source workbook.\n  positionType: Excel.WorksheetPositionType.after, // Insert after the `relativeTo` sheet.\n  relativeTo: \"Sheet1\",\n}; // The sheet relative to which the other worksheets will be inserted. Used with `positionType`.\n\n// Insert the external worksheet.\nworkbook.insertWorksheetsFromBase64(workbookContents, options);\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Microsoft Graph SDK - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates constructing an email object and sending email via Microsoft Graph from an Excel add-in. It utilizes the 'graphClient' instance to invoke the 'me/SendMail' endpoint by posting a message object with configurable subject, body, and recipient address. This code requires Microsoft Graph JavaScript SDK and authenticated session with proper consent. Key input parameters are 'finalSubject', 'finalContent', and 'addressValue', which correspond to the personalized content and recipient email from the worksheet. The function returns a Promise and assumes proper error handling and token management elsewhere in the parent function.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-add-in-mail-merge/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sendMail = \n{\n    message: {\n        subject: finalSubject,\n        body: {\n            contentType: 'Text',\n            content: finalContent\n        },\n        toRecipients: [{\n            emailAddress: {\n                address: addressValue[i][0]\n            }\n        }]\n    }\n};\n\nawait graphClient.api('me/SendMail')\n    .post(sendMail);\n```\n\n----------------------------------------\n\nTITLE: Getting Available and Current Sensitivity Labels in Office Add-in JavaScript\nDESCRIPTION: This JavaScript snippet first calls `Office.context.sensitivityLabelsCatalog.getAsync` to retrieve all sensitivity labels available to the mailbox, returning them as an array of `SensitivityLabelDetails` objects. Inside its callback, it identifies the GUID of a specific label ('Highly Confidential') using a helper function (`getLabelId`). Then, it calls `Office.context.mailbox.item.sensitivityLabel.getAsync` to get the GUID of the sensitivity label currently applied to the message item. The results are processed in nested callbacks, handling potential errors and comparing the current label's GUID with the target label's GUID.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Gets the sensitivity labels available to the mailbox.\nOffice.context.sensitivityLabelsCatalog.getAsync({ asyncContext: event }, (result) => {\n    const event = result.asyncContext;\n    if (result.status === Office.AsyncResultStatus.Failed) {\n        console.log(\"Unable to retrieve the catalog of sensitivity labels.\");\n        console.log(`Error: ${result.error.message}`);\n        event.completed({ allowEvent: false, errorMessage: \"Unable to retrieve the catalog of sensitivity labels. Save your message, then restart Outlook.\" });\n        return;\n    }\n\n    // Identifies the unique identifier (GUID) of the Highly Confidential sensitivity label.\n    const highlyConfidentialLabel = getLabelId(\"Highly Confidential\", result.value);\n\n    // Gets the sensitivity label of the current message.\n    Office.context.mailbox.item.sensitivityLabel.getAsync({ asyncContext: { event: event, highlyConfidentialLabel: highlyConfidentialLabel } }, (result) => {\n        const event = result.asyncContext.event;\n        if (result.status === Office.AsyncResultStatus.Failed) {\n            console.log(\"Unable to get the sensitivity label of the message.\");\n            console.log(`Error: ${result.error.message}`);\n            event.completed({ allowEvent: false, errorMessage: \"Unable to get the sensitivity label applied to the message. Save your message, then restart Outlook.\" });\n            return;\n        }\n    \n        const highlyConfidentialLabel = result.asyncContext.highlyConfidentialLabel;\n        \n        // Checks whether the GUID of the current label matches the GUID of the Highly Confidential label.\n        if (result.value === highlyConfidentialLabel) {\n            event.completed({ allowEvent: true });\n        } else {\n            ...\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Outlook Mailbox Item using Office.js - JavaScript\nDESCRIPTION: This JavaScript snippet defines an exported async function for use with Blazor JS interop to retrieve details of the currently selected Outlook mailbox item. It logs activity and uses Office.context.mailbox.item to access item information. In case of errors, it catches and logs them, returning an object with a Subject string containing the error. Intended for use from Blazor C# code via JSRuntime; requires Office.js to be available and properly initialized in the Outlook add-in context.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/outlook-blazor-add-in/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getEmailData() {\n\n    try {\n        console.log(`Reading mailbox item`);\n        const item = Office.context.mailbox.item;\n        ...\n    } catch (err) {\n        console.error(`Index.razor.js(getEmailData) Catch Exception: ${err}`);\n        subject = `${err}`;\n        return { Subject: subject };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Table Data and Embedding Add-in in Open XML Spreadsheet - .NET C#\nDESCRIPTION: This C# snippet demonstrates how to construct an Excel spreadsheet in-memory using the Open XML SDK, insert headers and data rows representing product data, and embed a Script Lab (or custom) Office Add-in. It requires the Open XML SDK as a dependency and expects data arrays to populate the spreadsheet. Methods such as InsertHeader, InsertData, and EmbedAddin are typically called as helpers within a larger workflow to produce the desired document package for upload. The embedding of the add-in is customizable in the GenerateWebExtensionPart1Content method, with clear extension points for add-in-specific initialization data.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-open-in-teams/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SpreadsheetBuilder\n{\n    public void CreateSpreadsheet(Stream outStream, List<string> headers, List<List<object>> rows)\n    {\n        using (var document = SpreadsheetDocument.Create(outStream, SpreadsheetDocumentType.Workbook))\n        {\n            // Workbook and worksheet parts creation logic\n            var workbookPart = document.AddWorkbookPart();\n            workbookPart.Workbook = new Workbook();\n            var worksheetPart = workbookPart.AddNewPart<WorksheetPart>();\n            worksheetPart.Worksheet = new Worksheet(new SheetData());\n\n            this.InsertHeader(worksheetPart, headers);\n            this.InsertData(worksheetPart, rows);\n            this.EmbedAddin(workbookPart);\n\n            // Sheets and relationship establishment, omitted for brevity\n        }\n    }\n\n    private void InsertHeader(WorksheetPart worksheetPart, List<string> headers)\n    {\n        // Implementation inserts header row to the sheet\n        // ...\n    }\n\n    private void InsertData(WorksheetPart worksheetPart, List<List<object>> rows)\n    {\n        // Implementation inserts data rows below header\n        // ...\n    }\n\n    private void EmbedAddin(WorkbookPart workbookPart)\n    {\n        // Embeds a Script Lab or custom add-in WebExtension\n        var webExtensionPart = workbookPart.AddNewPart<WebExPart>(\"rId1\");\n        webExtensionPart.FeedData(GenerateWebExtensionPart1Content());\n    }\n\n    private Stream GenerateWebExtensionPart1Content()\n    {\n        // Returns a stream containing add-in manifest and custom properties\n        // CUSTOM MODIFICATION BEGIN\n        // Populate extension-specific settings and tokens here\n        // CUSTOM MODIFICATION END\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Write Command Function for Office Add-in (JavaScript)\nDESCRIPTION: Implements the writeValue asynchronous function referenced from the manifest mapping, handling button command execution in the add-in. This function is located in commands.js and receives an event parameter containing execution context. Assumes Office.js and add-in initialization prerequisites are satisfied.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/word/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function writeValue(event) {\\n...\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the writeValue Command Handler in Office Add-ins JavaScript\nDESCRIPTION: This JavaScript snippet shows the async function writeValue, used as a handler for an Excel ribbon button defined in the manifest XML. The function is triggered when the corresponding command is executed and typically receives an event object containing contextual information. This function should be exported or registered correctly to be called from the manifest. Dependencies include the Office.js library and any initialization required by the Office Add-in framework. Input is an event object; output is the result of the function's operations, such as writing data to an Excel cell. The function body should implement the logic mapped from the manifest; the actual implementation details are omitted here and need to be provided.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/excel/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function writeValue(event) {\\n...\\n\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-dev-certs Globally using npm\nDESCRIPTION: This command utilizes npm to install the `office-addin-dev-certs` package globally. This tool is specifically designed for Office Add-in development to generate and manage self-signed SSL certificates, which are essential for serving add-in content over HTTPS during local development. Requires Node.js and npm.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-check-item-categories/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Creating and Handling Table Selection and Data Change Events with Office.js in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to create a sample Excel table, set up event handlers for table selection and data changes, and manage contextual tab visibility. It uses Office.js APIs to add 'onSelectionChanged' and 'onChanged' event listeners, and updates global state and UI accordingly. Dependencies are the Office.js library and the containing utility functions; key parameters include the event args for 'onSelectionChange', and proper state management is necessary for correct ribbon updates.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-contextual-tabs/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createSampleTable(mockDataSource) {\\n  //...//\\n\\n     //Add event handlers\\n    salesTable.onSelectionChanged.add(onSelectionChange);\\n    salesTable.onChanged.add(onChanged);\\n\\n    //...//\\n}\\n\\n/**\\n * Handles the onSelectionChange event. If selection is inside the table, the Contoso custom tab is shown.\\n * Otherwise the Contoso custom tab is hidden.\\n * @param  {} args The arguments for the selection changed event.\\n */\\nfunction onSelectionChange(args) {\\n  let g = getGlobal();\\n  if (g.isTableSelected !== args.isInsideTable) {\\n    g.isTableSelected = args.isInsideTable;\\n    setContextualTabVisibility(args.isInsideTable);\\n  }\\n}\\n\\n/**\\n * Handles the onChanged event. When data in the sales table is changed,\\n * enable the refresh and submit buttons.\\n */\\nfunction onChanged() {\\n  let g = getGlobal();\\n  //check if dirty flag was set (flag avoids extra unnecessary ribbon operations)\\n  if (!g.isTableDirty) {\\n    g.isTableDirty = true;\\n\\n    //Enable the Refresh and Submit buttons\\n    setSyncButtonEnabled(true);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source URL for Localhost (JavaScript)\nDESCRIPTION: This code snippet shows how to modify the `dataSourceUrl` constant in the `index.js` file to point to a local development server running on `https://localhost:3000`. This is necessary when hosting the add-in's web files locally instead of using the default GitHub Pages source.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-insert-file/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataSourceUrl = \"https://localhost:3000\";\n```\n\n----------------------------------------\n\nTITLE: Calling Azure Function from Excel Custom Function (JavaScript)\nDESCRIPTION: This snippet shows the complete Excel custom function `add` from `functions.js`. It asynchronously calls the deployed `AddTwo` Azure Function using the `fetch` API with a POST request and 'text/plain' content type (due to potential CORS issues). It sends parameters in the body, parses the JSON response, and resolves the promise with the calculated 'answer'.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/AzureFunction/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(first, second) {\n  //If you publish the Azure Function online, update the following URL to use the correct URL location.\n  const url = \"https://excel-custom-functions.azurewebsites.net/api/addtwo\";\n\n  return new Promise(async function (resolve, reject) {\n    try {\n      //Note that POST uses text/plain because custom functions runtime does not support full CORS\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"text/plain\",\n        },\n        body: JSON.stringify({ first: first, second: second }),\n      });\n      const jsonAnswer = await response.json();\n      resolve(jsonAnswer.answer);\n    } catch (error) {\n      console.log(\"error\", error.message);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running http-server with HTTPS and CORS for Outlook Add-in Development - Console\nDESCRIPTION: This command launches http-server with SSL enabled and CORS support, serving the sample's root directory on port 3000. Required for local testing of the Outlook add-in via HTTPS. Inputs are the server options; output is a locally hosted HTTPS web server suitable for sideloading into Outlook.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-encrypt-attachments/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Running office-addin-https-reverse-proxy for Localhost Reroute - Console\nDESCRIPTION: This command starts the 'office-addin-https-reverse-proxy', specifying the local web server's URL as the target. It is run in a separate command prompt to proxy HTTPS traffic from Office to the HTTP server on localhost, ensuring development compatibility with Office Add-in sideloading requirements. Required for secure communication between Office and your add-in during local testing.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/word-import-template/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\noffice-addin-https-reverse-proxy --url http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Initializing Office.js Runtime on Document Open - TypeScript\nDESCRIPTION: This snippet assigns an asynchronous function to the Office.initialize event, ensuring global add-in state is initialized when the Office document is opened. The function invokes ensureStateInitialized with a parameter to enforce setup, preparing the runtime for further operations. Office.js must be referenced and the function should be included in the main entrypoint of the add-in; it expects Office.js to fire Office.initialize with required context.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-scenario/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nOffice.initialize = async () => {\n    ensureStateInitialized(true);\n    \n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Starting Web Word Add-in with Document - Command Line - Command Line\nDESCRIPTION: This snippet demonstrates how to start the local development web server and load a specific Word document for testing the add-in in Word on the web using the command line. The command depends on Node.js and npm being installed and run from the root of the project. The {url} parameter should be replaced with a valid Word document URL to which the user has access. This command is cross-platform but may require quoting the URL on Mac. The command initializes the add-in with a document context and enables development and debugging workflows.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/word-tutorial/README.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start:web -- --document {url}\n```\n\n----------------------------------------\n\nTITLE: Mapping Launch Events to Handlers in Outlook Manifest (XML)\nDESCRIPTION: This XML snippet within the <LaunchEvents> element maps specific Outlook events to JavaScript functions that should handle them. It defines handlers for 'OnMessageRecipientsChanged', 'OnMessageSend', and 'OnSensitivityLabelChanged'. The 'OnMessageSend' event includes the 'SendMode=\"PromptUser\"' attribute, configuring the add-in to potentially interrupt the send process and prompt the user if certain conditions aren't met.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Indicates on which events the add-in activates. -->\n<LaunchEvents>\n    <LaunchEvent Type=\"OnMessageRecipientsChanged\" FunctionName=\"onMessageRecipientsChangedHandler\"/>\n    <LaunchEvent Type=\"OnMessageSend\" FunctionName=\"onMessageSendHandler\" SendMode=\"PromptUser\"/>\n    <LaunchEvent Type=\"OnSensitivityLabelChanged\" FunctionName=\"onSensitivityLabelChangedHandler\"/>\n</LaunchEvents>\n```\n\n----------------------------------------\n\nTITLE: Interacting with Excel via Office JS API from JavaScript Module\nDESCRIPTION: This JavaScript function (`helloButton`) is designed to be called from C# via Blazor interop. It uses the `Excel.run` function to execute operations against the Excel document. Specifically, it gets the active worksheet, inserts the text 'Hello world!' into cell A1, and then calls `context.sync()` to synchronize the changes with the document.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/excel-blazor-add-in/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function helloButton() {\n    return Excel.run(context => {\n        // Insert text 'Hello world!' into cell A1.\n        context.workbook.worksheets.getActiveWorksheet().getRange(\"A1\").values = [['Hello world!']];\n\n        // sync the context to run the previous API call, and return.\n        return context.sync();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a React Component with ES6 Modules in JavaScript\nDESCRIPTION: This snippet defines a React class component `DangerButton` that imports and renders a reusable `Button` component, passing 'red' as the color prop. It demonstrates default export syntax for components and dependency on another component (`Button`).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\n----------------------------------------\n\nTITLE: Querying Teams, Uploading Files, and Sending Messages with Microsoft Graph API - .NET C#\nDESCRIPTION: This C# snippet shows how to interact with Microsoft Teams via the Microsoft Graph API to obtain a list of Teams and their channels, upload newly constructed spreadsheets to OneDrive associated with a Team or channel, and send a chat message with a link to the uploaded spreadsheet. The code depends on Azure Active Directory authentication and properly configured Graph API permissions. Key methods include TeamsList for querying teams, ChannelsListForTeam for channels within a team, and UploadSpreadsheet for creating, uploading, and messaging about the spreadsheet.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-open-in-teams/README.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// In ProductsController.cs\npublic async Task<IActionResult> TeamsList()\n{\n    var accessToken = await _graphAPIHelper.GetAccessTokenAsync();\n    var teams = await _graphAPIHelper.CallGraphAPIAsync<TeamsResponse>(\n        \"https://graph.microsoft.com/v1.0/me/joinedTeams\", accessToken);\n    return View(teams);\n}\n\npublic async Task<IActionResult> ChannelsListForTeam(string teamId)\n{\n    var accessToken = await _graphAPIHelper.GetAccessTokenAsync();\n    var channels = await _graphAPIHelper.CallGraphAPIAsync<ChannelsResponse>(\n        $\"https://graph.microsoft.com/v1.0/teams/{teamId}/channels\", accessToken);\n    return View(channels);\n}\n\npublic async Task<IActionResult> UploadSpreadsheet(string teamId, string channelId, SpreadsheetViewModel vm)\n{\n    using (var memoryStream = new MemoryStream())\n    {\n        var builder = new SpreadsheetBuilder();\n        builder.CreateSpreadsheet(memoryStream, vm.Headers, vm.DataRows);\n        memoryStream.Position = 0;\n        var accessToken = await _graphAPIHelper.GetAccessTokenAsync();\n        var uploadResult = await _graphAPIHelper.UploadFileToChannel(\n            teamId, channelId, \"productdata.xlsx\", memoryStream, accessToken);\n        var chatMessage = await _graphAPIHelper.SendChannelMessageWithFileLink(\n            teamId, channelId, uploadResult.WebUrl, accessToken);\n        return View(\"UploadToTeams\", new { RedirectUrl = chatMessage.MessageLink });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Office Add-in Sample (Command Line)\nDESCRIPTION: This snippet shows the terminal commands to install dependencies, build the project, and launch the Excel Add-in (either desktop or web). Dependencies are the correct Node.js and npm versions. Key parameters: 'npm install' (downloads node modules), 'npm run build' (builds source), 'npm run start'/'npm run start:web' (starts server and launches the add-in). Output is a running add-in/server. No inputs other than command order; must be run from the sample directory.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Excel.OfflineStorageAddin/README.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\n# this will download the node modules needed to run this add-in\\n$ npm install\\n\\n# this will build the add-in \\n$ npm run build\\n\\n# this will start the server on your desktop and launch your add-in on Excel\\n$ npm run start\\n\\n# this will start the server and launch your add-in on Excel on the web\\n$ npm run start:web\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime for Event-Based Activation in Outlook Manifest (XML)\nDESCRIPTION: This XML snippet defines the runtime environment for handling event-based activation in an Outlook add-in manifest. It uses the `<Runtime>` element to specify an HTML page resource ('WebViewRuntime.Url') primarily for Outlook on Mac, and an `<Override>` element to specify a JavaScript file resource ('JSRuntime.Url') for Outlook on Windows. The `<bt:Url>` elements define the actual URLs for these resources.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-check-item-categories/README.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Runtime resid=\"WebViewRuntime.Url\">\n    <Override type=\"javascript\" resid=\"JSRuntime.Url\"/>\n</Runtime>\n...\n<bt:Url id=\"WebViewRuntime.Url\" DefaultValue=\"https://officedev.github.io/Office-Add-in-samples/Samples/outlook-check-item-categories/src/commands.html\" />\n<bt:Url id=\"JSRuntime.Url\" DefaultValue=\"https://officedev.github.io/Office-Add-in-samples/Samples/outlook-check-item-categories/src/commands/commands.js\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Message Sensitivity Label in Office Add-in JavaScript\nDESCRIPTION: This JavaScript code calls `Office.context.mailbox.item.sensitivityLabel.setAsync` to apply a specific sensitivity label to the current message item. It passes the GUID of the desired label ('Highly Confidential' in this case, stored in `highlyConfidentialLabel`) as the first parameter. The operation is asynchronous, and the callback function handles the result, logging errors if the operation fails and calling `event.completed` with `allowEvent: false` and an error message to display a Smart Alert upon successful (or potentially forced) application of the label.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Sets the sensitivity label of the message to Highly Confidential using the label's GUID.\nOffice.context.mailbox.item.sensitivityLabel.setAsync(highlyConfidentialLabel, { asyncContext: event }, (result) => {\n    const event = result.asyncContext;\n    if (result.status === Office.AsyncResultStatus.Failed) {\n        console.log(\"Unable to set the Highly Confidential sensitivity label to the message.\");\n        console.log(`Error: ${result.error.message}`);\n        event.completed({ allowEvent: false, errorMessage: \"Unable to set the Highly Confidential sensitivity label to the message. Save your message, then restart Outlook.\" });\n        return;\n    }\n    \n    event.completed({ allowEvent: false, errorMessage: \"Due to the contents of your message, the sensitivity label has been set to Highly Confidential and the legal hold account has been added to the Bcc field.\\nTo learn more, see Fabrikam's information protection policy.\\n\\nDo you need to make changes to your message?\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Git Branch Safely\nDESCRIPTION: This Git command deletes the specified local branch (indicated by '<branch name>'). The '-d' flag ensures the branch is only deleted if its changes have been successfully merged into the branch you are currently on (or upstream). Using '-D' would force deletion regardless of merge status.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -d <branch name>\n```\n\n----------------------------------------\n\nTITLE: Associating the Event Handler in JavaScript with Office.actions (JavaScript)\nDESCRIPTION: This JavaScript snippet registers the tagExternal_onMessageRecipientsChangedHandler function as the handler for the OnMessageRecipientsChanged event using Office.actions.associate. This enables the add-in to execute its logic whenever recipients are modified in the composing message. Requires the Office.js library and that the named handler function is implemented and accessible in the current JavaScript context. No direct input expected, output is event-driven execution of handler logic.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-tag-external/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.actions.associate(\\\"tagExternal_onMessageRecipientsChangedHandler\\\", tagExternal_onMessageRecipientsChangedHandler);\n```\n\n----------------------------------------\n\nTITLE: Completing Event Handling with Smart Alert in Office Add-in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates calling `event.completed` within an event handler (specifically for `OnMessageSend` with `SendMode='PromptUser'`). It signals the completion of the event processing. By setting `allowEvent: false`, it prevents the original event (e.g., sending the message) from proceeding. The `errorMessage` property is used to display a Smart Alerts dialog to the user, informing them about the sensitivity label change and prompting for action.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nevent.completed({ allowEvent: false, errorMessage: \"Due to the contents of your message, the sensitivity label has been set to Highly Confidential and the legal hold account has been added to the Bcc field.\\nTo learn more, see Fabrikam's information protection policy.\\n\\nDo you need to make changes to your message?\" });\n```\n\n----------------------------------------\n\nTITLE: Mapping Manifest Actions to JavaScript Functions (XML)\nDESCRIPTION: Defines an ExecuteFunction action in the Office Add-in manifest.xml, mapping a ribbon button's action to the writeValue JavaScript function. The FunctionName element tells Word which function to invoke from commands.js when the button is triggered. Requires appropriate Office.js setup and command module loading.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/word/README.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Action xsi:type=\\\"ExecuteFunction\\\">\\n  <FunctionName>writeValue</FunctionName>\\n</Action>\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring Advanced Proxy Settings in package.json (JavaScript/JSON)\nDESCRIPTION: Demonstrates advanced proxy configuration within `package.json` using an object structure instead of a simple string. This allows specifying `http-proxy-middleware` options like `target` (backend URL) and `ws` (WebSocket support) for specific URL paths (e.g., `/api`). This method offers more granular control and is available from `react-scripts@1.0.0` onwards.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_47\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    \"/api\": {\n      \"target\": \"<url>\",\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Manual Proxy in package.json (JSON)\nDESCRIPTION: Shows how to configure the development proxy manually using an object in `package.json` instead of a simple string. This allows defining specific rules for different path prefixes (like `/api`), enabling WebSocket proxying (`ws: true`), and using advanced options from `http-proxy-middleware`. Available in `react-scripts` 1.0.0 and higher. Proxies all requests matching the path, including those requesting `text/html`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_46\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    \"/api\": {\n      \"target\": \"<url>\",\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Event Handlers in Office Add-in JavaScript\nDESCRIPTION: This JavaScript code uses `Office.actions.associate` to map the function names specified in the add-in manifest's <LaunchEvents> element to the actual JavaScript functions (`onMessageRecipientsChangedHandler`, `onMessageSendHandler`, `onSensitivityLabelChangedHandler`) that will handle the corresponding events. This association is required for event-based activation to function correctly.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/** \n * Maps the event handler name specified in the manifest to its JavaScript counterpart.\n */\nOffice.actions.associate(\"onMessageRecipientsChangedHandler\", onMessageRecipientsChangedHandler);\nOffice.actions.associate(\"onMessageSendHandler\", onMessageSendHandler);\nOffice.actions.associate(\"onSensitivityLabelChangedHandler\", onSensitivityLabelChangedHandler);\n```\n\n----------------------------------------\n\nTITLE: Extracting Regex Matches using Office JS API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the Office JavaScript API within an Outlook add-in to retrieve text from the current email body that matches a specific regular expression defined in the add-in's manifest. It casts the current item to `ItemRead`, then calls `getRegExMatchesByName` using the name 'UPSTrackingNumberInBody' (expected to be defined in the manifest) to get an array of matches (presumably UPS tracking numbers).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Outlook.UpsPackageTracker/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar item = Office.cast.item.toItemRead(Office.context.mailbox.item);\nvar matches = item.getRegExMatchesByName(\"UPSTrackingNumberInBody\");\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React App in JavaScript\nDESCRIPTION: This snippet represents an ESLint configuration file for enabling linting according to React App's preset. The configuration extends the base 'react-app' configuration and should be placed in a `.eslintrc` file at the root of the project. The file enables editor integrations to report lint issues for JavaScript and JSX code. No additional dependencies are required unless adding custom ESLint plugins.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\\n  \\\"extends\\\": \\\"react-app\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Events to Actions in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet from the `manifest.json` defines the `autoRunEvents` array, mapping specific Outlook events (`newMessageComposeCreated`, `newAppointmentOrganizerCreated`) to a predefined action (`checkSignature`). It ensures that the `checkSignature` function (defined via the runtime action) is triggered when a new message or appointment is composed, requiring Mailbox API 1.5 and the 'mail' scope.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-set-signature/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n \"autoRunEvents\": [\n      {\n          \"requirements\": {\n              \"capabilities\": [\n                  {\n                      \"name\": \"Mailbox\",\n                      \"minVersion\": \"1.5\"\n                  }\n              ],\n              \"scopes\": [\n                  \"mail\"\n              ]\n          },\n          \"events\": [\n              {\n                  \"type\": \"newMessageComposeCreated\",\n                  \"actionId\": \"checkSignature\"\n              },\n              {\n                  \"type\": \"newAppointmentOrganizerCreated\",\n                  \"actionId\": \"checkSignature\"\n              }\n          ]\n      }\n  ],\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime for Event-Based Activation in Outlook Manifest (XML)\nDESCRIPTION: This XML snippet configures the runtime environment for event-based activation in an Outlook add-in manifest. It defines both an HTML runtime (<Runtime resid=\"WebViewRuntime.Url\">) used by Outlook on the web, Mac, and new Outlook on Windows, and a JavaScript override (<Override type=\"javascript\" resid=\"JSRuntime.Url\"/>) used by classic Outlook on Windows. The <bt:Url> elements define the resource IDs and point to the respective HTML and JavaScript files containing the event handling logic.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- HTML file that references the JavaScript event handlers. This is used by Outlook on the web and on Mac, and in new Outlook on Windows. -->\n<Runtime resid=\"WebViewRuntime.Url\">\n    <!-- JavaScript file that contains the event handlers. This is used by classic Outlook on Windows. -->\n    <Override type=\"javascript\" resid=\"JSRuntime.Url\"/>\n</Runtime>\n...\n<bt:Url id=\"JSRuntime.Url\" DefaultValue=\"https://officedev.github.io/Office-Add-in-samples/Samples/outlook-verify-sensitivity-label/src/commands/commands.js\"/>\n<bt:Url id=\"WebViewRuntime.Url\" DefaultValue=\"https://officedev.github.io/Office-Add-in-samples/Samples/outlook-verify-sensitivity-label/src/commands/commands.html\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Office.js in a PowerPoint Add-in using JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Office JavaScript API library using the Office.onReady function call. Initialization is required before other Office.js APIs can be safely invoked. The callback receives context information about the host environment. No special dependencies are needed beyond the Office.js runtime; the onReady callback prepares your code to interact with PowerPoint objects throughout the add-in lifecycle.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/powerpoint-hello-world/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady((info) => {});\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugger for Create React App\nDESCRIPTION: This JSON configuration defines a launch profile for debugging a Create React App application within Visual Studio Code. It should be placed in the `launch.json` file inside the `.vscode` directory at the project root. It configures the Chrome debugger extension to attach to the development server (defaulting to `http://localhost:3000`), enabling breakpoints and debugging directly in the editor. Requires the VS Code Chrome Debugger Extension to be installed.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [{\n    \"name\": \"Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"sourceMapPathOverrides\": {\n      \"webpack:///src/*\": \"${webRoot}/*\"\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependency with npm\nDESCRIPTION: This shell command demonstrates how to install a runtime dependency, using `react-router` as an example, into the project using npm. The `--save` flag (which is the default behavior in newer npm versions) ensures the package is added to the `dependencies` list in the `package.json` file. This method works for adding any required library.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-router\n```\n\n----------------------------------------\n\nTITLE: Handling MSAL Popup Errors and Falling Back to Office Dialog API in TypeScript\nDESCRIPTION: This TypeScript snippet, found in `src/taskpane/authconfig.ts`, demonstrates error handling for MSAL.js's `acquireTokenPopup`. It specifically checks if a `BrowserAuthError` with the `popup_window_error` code occurred, which can happen in older Outlook clients that don't support `about:blank` popups. If this specific error is caught, it triggers a fallback mechanism by calling the `getTokenWithDialogApi` method, which uses the Office dialog API for authentication instead of the standard browser popup.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO-NAA/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Optional fallback if about:blank popup should not be shown\nif (popupError instanceof BrowserAuthError && popupError.errorCode === \"popup_window_error\") {\n    const accessToken = await this.getTokenWithDialogApi();\n    return accessToken;\n```\n\n----------------------------------------\n\nTITLE: Completing and Potentially Blocking Outlook Events in JS Handler (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how an event handler (represented by `sendEvent`) signals the completion of its processing using the `event.completed` method. It includes an options object where `allowEvent: false` is used to prevent the default event action (like sending an email or appointment) from proceeding. The `errorMessage` property is used to display an informative message to the user explaining why the action was blocked (e.g., missing required categories).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-check-item-categories/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet message = `You must assign the following categories before your ${Office.context.mailbox.item.itemType} can be sent: ${requiredCategories.join(\", \")}`;\nconsole.log(message);\nsendEvent.completed({ allowEvent: false, errorMessage: message });\nreturn;\n```\n\n----------------------------------------\n\nTITLE: Referencing External Image in HTML Signature via URL (XML/JavaScript)\nDESCRIPTION: This snippet shows JavaScript code constructing an HTML string for an email signature. It demonstrates referencing an external image using a standard `<img>` tag with the `src` attribute pointing to a web URL. This method avoids the need for attachment APIs but requires the image to be accessible online whenever the signature is displayed.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-set-signature/README.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n str +=\n    \"<td style='border-right: 1px solid #000000; padding-right: 5px;'><img src='https://officedev.github.io/Office-Add-in-samples/Samples/outlook-set-signature/assets/sample-logo.png' alt='Logo' /></td>\";\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Development Proxy in package.json (JSON)\nDESCRIPTION: Demonstrates adding the `proxy` field to `package.json` to redirect non-static, non-HTML API requests during development (using `npm start`) to a specified backend server (e.g., `http://localhost:4000`). This simplifies development by avoiding CORS issues and mimicking production routing. Requires `react-scripts` version 0.2.3 or higher.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_42\n\nLANGUAGE: js\nCODE:\n```\n  \"proxy\": \"http://localhost:4000\",\n```\n\n----------------------------------------\n\nTITLE: Installing Office Add-in HTTPS Reverse Proxy via Console\nDESCRIPTION: This command installs the 'office-addin-https-reverse-proxy' package globally. This tool is useful for redirecting HTTPS requests from Office (which require secure contexts) to a locally-hosted non-HTTPS server, enabling full debugging and integration test scenarios. Node.js and npm must be available.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-contextual-tabs/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-https-reverse-proxy\n```\n\n----------------------------------------\n\nTITLE: Initializing JavaScript Interop in Blazor Component (C#)\nDESCRIPTION: This C# code demonstrates how to establish a connection between a Blazor component and its associated JavaScript module using `JSRuntime`. Within the `OnAfterRenderAsync` lifecycle method, it checks if it's the first render and then asynchronously imports the JavaScript file (`./Pages/HelloWorld.razor.js`), storing the resulting `IJSObjectReference` in the `JSModule` variable for later use in invoking JavaScript functions. This is a fundamental step for Blazor-JavaScript interop in Office Add-ins.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/word-blazor-add-in/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override async Task OnAfterRenderAsync(bool firstRender)\n{\n  if (firstRender)\n  {\n    JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>(\"import\", \"./Pages/HelloWorld.razor.js\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Office Add-in Development Certificates (Command Line)\nDESCRIPTION: These command-line instructions use the `office-addin-dev-certs` tool via `npx` to install or uninstall the necessary development certificates for running and debugging Office Add-ins locally over HTTPS. These certificates are for development purposes only.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/AzureFunction/README.md#_snippet_6\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\nLANGUAGE: command&nbsp;line\nCODE:\n```\nnpx office-addin-dev-certs uninstall\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Function via Web Worker (Excel Formula)\nDESCRIPTION: This Excel formula calls the custom function `WebWorkerSample.TEST`. The function takes a parameter (e.g., 2), posts the calculation job to a web worker, and returns the computed result asynchronously without blocking the Excel UI thread.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-add-in-custom-functions-using-web-workers/README.md#_snippet_1\n\nLANGUAGE: excel-formula\nCODE:\n```\n=WebWorkerSample.TEST(2)\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing Self-Signed Development Certificates\nDESCRIPTION: Uses the 'office-addin-dev-certs' tool (via npx) to generate and install the necessary self-signed SSL certificates (localhost.crt, localhost.key) for local development. These certificates enable running the local web server over HTTPS.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/auto-open-task-pane/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server on Mac using npm\nDESCRIPTION: This command starts the local development web server, facilitating testing the Office Add-in in Excel on a Mac. It executes the 'dev-server' script defined in the `package.json` file. Manual sideloading might be required depending on the specific configuration.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/first-run-experience-tutorial/README.md#_snippet_3\n\nLANGUAGE: command line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Task Pane Auto-Open via Office JS API\nDESCRIPTION: Provides two JavaScript functions using the Office JavaScript API. 'setAutoOpenOn' uses 'Office.context.document.settings.set' to add a document setting named 'Office.AutoShowTaskpaneWithDocument' with a value of 'true', enabling auto-open. 'setAutoOpenOff' uses 'settings.remove' to delete this setting, disabling auto-open. Both functions save the changes asynchronously and display a notification.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/auto-open-task-pane/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction setAutoOpenOn() {\n    Office.context.document.settings.set(\n        'Office.AutoShowTaskpaneWithDocument',\n        true\n    );\n    Office.context.document.settings.saveAsync();\n    showNotification(\n        'The auto-open setting has been set to ON for this document.'\n    );\n}\n\nfunction setAutoOpenOff() {\n    Office.context.document.settings.remove(\n        'Office.AutoShowTaskpaneWithDocument'\n    );\n    Office.context.document.settings.saveAsync();\n    showNotification(\n        'The auto-open setting has been set to OFF for this document.'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing http-server via npm (Console)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `http-server` package globally. `http-server` is a simple command-line HTTP server used here to serve the add-in's web files locally during development.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-insert-file/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Router basename for Subdirectory Hosting - React Router - js\nDESCRIPTION: This React code demonstrates how to use the `basename` prop on a BrowserRouter to ensure that all client-side routes are prefixed with a specific base path (e.g., `/calendar`). This is necessary when you host your app under a subdirectory instead of the domain root. No additional dependencies beyond `react-router` are required.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_90\n\nLANGUAGE: js\nCODE:\n```\n<BrowserRouter basename=\"/calendar\"/>\n<Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n```\n\n----------------------------------------\n\nTITLE: Forcing MSAL Fallback Authentication in MessageRead.js (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to modify the `MessageRead.js` file to force the add-in to use the MSAL fallback authentication dialog instead of attempting SSO. By setting the `authSSO` variable to `false`, developers can test the user experience for scenarios where SSO might fail or is not available.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet authSSO = false;\n```\n\n----------------------------------------\n\nTITLE: Initializing JS Interop Module for Office.js in Blazor - C#\nDESCRIPTION: This C# snippet demonstrates how a Blazor .razor code-behind file initializes a JavaScript module required for Office.js interop. It uses the OnAfterRenderAsync event to conditionally invoke JSRuntime's module import when the page loads for the first time. The key parameter \"firstRender\" ensures the import runs only once. The JSModule variable stores the imported JavaScript module allowing later invocation of its functions. This assumes JSRuntime is available via dependency injection and the relevant js file is in the correct path.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/outlook-blazor-add-in/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override async Task OnAfterRenderAsync(bool firstRender)\n{\n  if (firstRender)\n  {\n    JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>(\"import\", \"./Pages/Index.razor.js\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in React Components (JSX)\nDESCRIPTION: Demonstrates how to access the built-in `NODE_ENV` variable and a custom `REACT_APP_SECRET_CODE` variable within a React component's render method using `process.env`. These variables are injected at build time by Create React App.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting HTTPS Localhost Server with Certificates (Console)\nDESCRIPTION: Launches the http-server with HTTPS support on port 3000 using the generated localhost.crt and localhost.key files, with CORS enabled. This hosts your Office Add-in's files for development and sideloading in Microsoft Word on localhost. Expects valid certificate/key files in the directory.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/word/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm Versions (Shell)\nDESCRIPTION: These shell commands are used in the terminal to verify that Node.js and npm (Node Package Manager) are installed and to display their respective versions. This is a prerequisite check before running the sample add-in.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-add-in-custom-functions-using-web-workers/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Defining a Danger Variant Button Component in React (JavaScript)\nDESCRIPTION: Creates a React component named DangerButton, which renders another Button component with its color set to 'red'. Depends on React and another component Button, imported from a sibling file. Shows usage of default exports and imports in ES6 modules, and demonstrates how one component can compose another by passing in specific props. Input is a standard React component context; output is a rendered button styled as a 'danger' (red) button.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { Component } from 'react';\\nimport Button from './Button'; // Import a component from another file\\n\\nclass DangerButton extends Component {\\n  render() {\\n    return <Button color=\\\"red\\\" />;\\n  }\\n}\\n\\nexport default DangerButton;\n```\n\n----------------------------------------\n\nTITLE: Mapping Ribbon Commands to JavaScript Functions in Office Add-ins Manifest XML\nDESCRIPTION: This manifest XML snippet demonstrates how to define a command button in an Office Add-in and map it to a specific JavaScript function using an <Action> element of type ExecuteFunction. The <FunctionName> specifies which exported JavaScript function should be invoked when the command is activated. This approach requires your add-in project to include a function file implementing the referenced JavaScript function, with proper linkage via manifest elements. Inputs include the function name; outputs trigger the specified function on ribbon interaction. Ensure the manifest's FunctionFile is referencing the correct JavaScript file, and that all required resources are available.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/excel/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Action xsi:type=\\\"ExecuteFunction\\\">\\n  <FunctionName>writeValue</FunctionName>\\n</Action>\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Splitting with Dynamic Import in React (JavaScript)\nDESCRIPTION: Shows a React component `App` implementing code splitting. It uses the dynamic `import()` syntax within an event handler (`handleClick`) to load `moduleA.js` asynchronously when a button is clicked, improving initial load time. It uses a Promise chain (`.then`, `.catch`) to handle the loaded module.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  handleClick = () => {\n    import('./moduleA')\n      .then(({ moduleA }) => {\n        // Use moduleA\n      })\n      .catch(err => {\n        // Handle failure\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Load</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing Modules on User Action in React (JavaScript)\nDESCRIPTION: Demonstrates dynamic import of a module ('./moduleA') using ES6 import() when a button is clicked inside a React component. Utilizes Promises to load code only when needed (code splitting), improving startup performance. Requires React and a module at './moduleA'; inputs are user interaction events, outputs are dynamic loading and utilization of the imported moduleA value. Includes error catching in case the import fails.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { Component } from 'react';\\n\\nclass App extends Component {\\n  handleClick = () => {\\n    import('./moduleA')\\n      .then(({ moduleA }) => {\\n        // Use moduleA\\n      })\\n      .catch(err => {\\n        // Handle failure\\n      });\\n  };\\n\\n  render() {\\n    return (\\n      <div>\\n        <button onClick={this.handleClick}>Load</button>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Git Branch on Origin Fork\nDESCRIPTION: This Git command deletes the specified branch (indicated by '<branch name>') from the remote repository aliased as 'origin' (usually the user's personal fork on GitHub). The syntax involves pushing nothing (the space before the colon) to the remote branch name.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin :<branch name>\n```\n\n----------------------------------------\n\nTITLE: Installing http-server for Local Development - Console\nDESCRIPTION: Installs the http-server package globally using npm so that you can serve the Outlook add-in web files locally. This enables local development and testing of the add-in in Outlook. Requires Node.js and npm. Input is the npm command; output is http-server made available as a command-line tool.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-encrypt-attachments/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Writing 'Hello World!' to Worksheet - Office.js Excel - JavaScript\nDESCRIPTION: Defines a function that, when called (e.g. by a button), writes 'Hello world!' to cell A1 on the currently active worksheet using the Office JS Excel API. Requires Office.js and Excel runtime environment. The key parameter is the context object, which provides access to the workbook and enables committing changes via context.sync(). The function returns a promise; errors should be caught and handled as per best practices.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/excel-hello-world/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sayHello() {\n  Excel.run((context) => {\n    context.workbook.worksheets.getActiveWorksheet().getRange('A1').values = [\n      ['Hello world!'],\n    ];\n    return context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Development Certificates for Localhost (Console)\nDESCRIPTION: Runs the office-addin-dev-certs tool via npx to automatically generate self-signed localhost certificates. Required for running Office Add-in web server content over HTTPS locally using http-server. Outputs the generated certificate file paths, to be copied for server usage.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/word/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: This command installs the necessary Node.js package dependencies defined in the project's `package.json` file. It must be executed within the 'Samples/tutorials/outlook-tutorial/Git the gist' directory using a command line interface. Prerequisites include having Node.js and npm installed.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/outlook-tutorial/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime and Resource URLs in Outlook Add-in Manifest (XML)\nDESCRIPTION: Defines the runtime element to support event-based activation by specifying HTML and JavaScript resources in the add-in manifest. The \\u003cRuntime\\u003e XML element links to a page resource for web/Mac and a JS file for Windows. Proper configuration ensures that the add-in loads platform-appropriate resources to handle events. Required dependencies: Office Add-in manifest schema, accessible URLs; key parameters: 'Autorun' (HTML endpoint), 'runtimeJs' (JS endpoint).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-set-signature/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\\u003cRuntime resid=\\\"Autorun\\\"\\u003e\\n  \\u003cOverride type=\\\"javascript\\\" resid=\\\"runtimeJs\\\"/\\u003e\\n...\\u003cbt:Url id=\\\"Autorun\\\" DefaultValue=\\\"https://officedev.github.io/Office-Add-in-samples/Samples/outlook-set-signature/src/runtime/HTML/autorunweb.html\\\"\\u003e\\u003c/bt:Url\\u003e\\n\\u003cbt:Url id=\\\"runtimeJs\\\" DefaultValue=\\\"https://officedev.github.io/Office-Add-in-samples/Samples/outlook-set-signature/src/runtime/Js/autorunshared.js\\\"\\u003e\\u003c/bt:Url\\u003e\n```\n\n----------------------------------------\n\nTITLE: Installing Office Add-in Dev Certs via npm for Local HTTPS\nDESCRIPTION: This command installs the `office-addin-dev-certs` package globally using npm. This tool is used to generate and trust self-signed SSL certificates, enabling the local development server to run over HTTPS, which is often a requirement for sideloading and testing Office Add-ins securely. Requires Node.js and npm.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/word-hello-world/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Initializing the Office JavaScript API Library in JavaScript\nDESCRIPTION: This snippet shows the standard way to initialize the Office JavaScript API library within a Word Add-in's task pane HTML file. It uses `Office.onReady` to register a callback function that executes only after the Office host application is ready, ensuring that Office APIs can be called safely. The callback receives an `info` object containing details about the host and platform.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/word-hello-world/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady((info) => {});\n```\n\n----------------------------------------\n\nTITLE: Asserting Rendered Output with Enzyme and Jest - JavaScript\nDESCRIPTION: Illustrates component output assertion using Enzyme's shallow wrapper and Jest's assertion matchers. The test checks whether the component under test contains an expected element (e.g., a welcome message). Adapted from Enzyme documentation to use Jest's assertions, requires Enzyme and its React adapter.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\n  \"import React from 'react';\\nimport { shallow } from 'enzyme';\\nimport App from './App';\\n\\nit('renders welcome message', () => {\\n  const wrapper = shallow(<App />);\\n  const welcome = <h2>Welcome to React</h2>;\\n  // expect(wrapper.contains(welcome)).to.equal(true);\\n  expect(wrapper.contains(welcome)).toEqual(true);\\n});\"\n```\n\n----------------------------------------\n\nTITLE: Installing http-server for Local Hosting - Console\nDESCRIPTION: This console command uses npm to install the 'http-server' package globally, which is required to host the add-in's web files locally for testing the Word add-in. 'http-server' provides a simple, zero-configuration command-line http server, supporting SSL and CORS for local development. Run this command in your terminal to prepare your development environment before starting the local web server.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/word-import-template/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Updating MSAL Client ID in authConfig.js\nDESCRIPTION: This JavaScript snippet is located in the `authConfig.js` file within the `wwwroot` directory. It configures the Microsoft Authentication Library (MSAL.js) for the frontend. The `clientId` placeholder needs to be replaced with the Application (client) ID from the app registration. This configuration is used primarily for the fallback authentication mechanism when SSO is unavailable.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Config object to be passed to Msal on creation\nconst msalConfig = {\n  auth: {\n    clientId: \"Enter_client_ID_here\",\n    authority: \"https://login.microsoftonline.com/common\",\n    redirectUri: \"https://localhost:44355/dialog.html\", // Must be registered as a SPA redirectURI\n    navigateToLoginRequestUrl: false,\n  },\n  cache: {\n    cacheLocation: \"localStorage\", // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between sessions.\n    storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificates for Office Add-ins using npx\nDESCRIPTION: This command uses npx to execute the office-addin-dev-certs install task, generating self-signed certificates for HTTPS development. The generated crt/key files are then used to enable secure (HTTPS) hosting of the add-in web assets via a local server. office-addin-dev-certs must be installed either globally or as a dependency for npx to locate the command.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/powerpoint-hello-world/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: This command installs all the necessary Node.js package dependencies defined in the project's `package.json` file. It should be run in the `Samples/tutorials/first-run-experience-tutorial/My Office Add-in` directory after cloning or downloading the repository.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/first-run-experience-tutorial/README.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing http-server via npm on the Command Line\nDESCRIPTION: This command installs http-server globally using npm, allowing you to run a lightweight HTTP server to serve the add-in's web application files locally. You must have Node.js and npm installed to use this command. http-server is necessary for local development and testing, letting your add-in HTML, JS, and manifest files be accessible over HTTPS for sideloading into Office.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/powerpoint-hello-world/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Checking Sensitivity Label Catalog Status in Office Add-in JavaScript\nDESCRIPTION: This JavaScript code calls `Office.context.sensitivityLabelsCatalog.getIsEnabledAsync` to asynchronously check if the sensitivity label catalog is enabled for the user's mailbox. This check is a prerequisite before attempting to get or set sensitivity labels. The result is handled in a callback function, logging an error if the check fails and calling `event.completed()` to signal the end of this part of the event handling.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Verifies that the catalog of sensitivity labels is enabled on the mailbox where the add-in is installed.\nOffice.context.sensitivityLabelsCatalog.getIsEnabledAsync({ asyncContext: event }, (result) => {\n    const event = result.asyncContext;\n    if (result.status === Office.AsyncResultStatus.Failed) {\n        console.log(\"Unable to retrieve the status of the sensitivity label catalog.\");\n        console.log(`Error: ${result.error.message}`);\n        event.completed();\n        return;\n    }\n    \n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Teams Toolkit CLI Globally via npm\nDESCRIPTION: Uses npm to install the `@microsoft/teamsapp-cli` package globally (`-g`). This CLI is an optional prerequisite needed specifically for running the sample with a unified manifest for Microsoft 365 when using GitHub as the web host, allowing sideloading via the command line.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-spam-reporting/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install -g @microsoft/teamsapp-cli\n```\n\n----------------------------------------\n\nTITLE: Adding Sass Build and Watch Scripts to package.json (JSON Diff)\nDESCRIPTION: Shows a JSON diff snippet illustrating how to add scripts for building and watching Sass files using node-sass-chokidar in a React project's package.json. Requires node-sass-chokidar dependency and assumes a typical create-react-app setup. The input is changes to a JSON file; output is the ability to run npm build-css or watch-css for Sass compilation.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n\"scripts\": {\\n+    \\\"build-css\\\": \\\"node-sass-chokidar src/ -o src/\\\",\\n+    \\\"watch-css\\\": \\\"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\\\",\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\n```\n\n----------------------------------------\n\nTITLE: Installing Global NPM Dependencies for Local Add-in Development (Console)\nDESCRIPTION: Installs the `http-server` and `office-addin-dev-certs` Node.js packages globally using npm. These packages are prerequisites for setting up a local development environment with HTTPS for testing the Office Add-in.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-save-custom-settings/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Running a Local HTTPS Server for Office Add-in Development - Console\nDESCRIPTION: This command starts the http-server using HTTPS and CORS from the current directory on port 3000. It assumes the presence of SSL certificate files (cert.pem and key.pem) in the directory. Key parameters include '-S' for HTTPS, '--cors' for cross-origin access, and '-p 3000' for port selection. Output is the add-in's web UI being served on https://localhost:3000.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-global-state/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Updating AzureAd Configuration in appsettings.json\nDESCRIPTION: This JSON snippet is from the `appsettings.json` file for the ASP.NET Core backend. It configures Azure Active Directory authentication settings. The `ClientId` and `ClientSecret` placeholders must be replaced with the actual values from the app registration. These settings are used by the backend API to authenticate and perform the On-Behalf-Of flow to access Microsoft Graph.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"AzureAd\": {\n  \"Instance\": \"https://login.microsoftonline.com/\",\n  \"TenantId\": \"common\",\n  \"ClientId\": \"Enter_client_ID_here\",\n  \"ClientSecret\": \"Enter_client_secret_here\"\n},\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting a React Component using ES6 Modules\nDESCRIPTION: This JavaScript code snippet illustrates the standard way to define a React class component (`Button`) using ES6 syntax. It imports necessary modules (`React`, `Component`) and uses `export default` to make the component available for import in other parts of the application. The example encourages the use of ES6 `import`/`export` syntax over older CommonJS `require`/`module.exports`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!\n```\n\n----------------------------------------\n\nTITLE: Executing Promise-Based Custom Function via Web Worker (Excel Formula)\nDESCRIPTION: This Excel formula calls the custom function `WebWorkerSample.TEST_PROMISE`. It takes a parameter (e.g., 2), posts the job to a web worker, which returns a JavaScript Promise that resolves with the calculation result. This demonstrates handling asynchronous operations using Promises within web workers.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-add-in-custom-functions-using-web-workers/README.md#_snippet_2\n\nLANGUAGE: excel-formula\nCODE:\n```\n=WebWorkerSample.TEST_PROMISE(2)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Sideloaded Add-in via Teams Toolkit CLI\nDESCRIPTION: Executes the Teams Toolkit CLI command `teamsapp uninstall` to remove the add-in identified by its `{title ID}`. The `--mode title-id` specifies the identification method, and `--interactive false` runs the command non-interactively. The `{title ID}` placeholder must be replaced with the actual ID generated when the add-in was sideloaded using the CLI.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-spam-reporting/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nteamsapp uninstall --mode title-id --title-id {title ID} --interactive false\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Server with HTTPS and CORS Enabled (Console)\nDESCRIPTION: This command launches the http-server in HTTPS mode using the provided certificate and key files, with CORS enabled and the server listening on port 3000. The required arguments are the certificate and key file paths. The development machine must have http-server and generated certificates available.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/outlook-hello-world/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Setting ReadWriteItem Permission in Outlook Add-in Manifest (XML)\nDESCRIPTION: This XML snippet specifies the required permissions for the Outlook add-in within the manifest file. Setting the <Permissions> element to 'ReadWriteItem' grants the add-in the ability to read and write properties of the current item, which is necessary for interacting with sensitivity labels.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Permissions>ReadWriteItem</Permissions>\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificates (Console)\nDESCRIPTION: This command uses `npx` to run the installed `office-addin-dev-certs` tool with the `install` command. It generates the necessary self-signed SSL certificate files (`localhost.crt`, `localhost.key`) and attempts to register them with the system for local HTTPS development.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-insert-file/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value by Key from Custom Function using OfficeRuntime.storage in JavaScript\nDESCRIPTION: This JavaScript custom function `GetValue` accepts a key as an argument. It uses the `OfficeRuntime.storage.getItem` method to retrieve the corresponding value stored previously. It returns a promise that resolves with the retrieved value or rejects if the key is not found or an error occurs.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Storage/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction GetValue(key) {\n  return OfficeRuntime.storage.getItem(key);\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Production Build Test and Uninstalling Add-in\nDESCRIPTION: Executes the `npm run stop:prod` script, which stops any related processes (like the Outlook instance started for testing) and uninstalls the add-in that was sideloaded using the production configuration (`start:prod`) pointing to Azure resources.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-spam-reporting/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nnpm run stop:prod\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Scripts for Concurrent and Sequential JS and CSS Builds (JSON Diff)\nDESCRIPTION: JSON diff snippet that modifies the scripts section in package.json to split JS and CSS build processes and allow concurrent or sequential execution using npm-run-all. Dependencies are npm-run-all and node-sass-chokidar. Input is the scripts JSON; output is improved workflow capabilities for style and JS compilation in React projects.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n\"scripts\": {\\n  \"build-css\": \"node-sass-chokidar src/ -o src/\",\\n  \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\\n-    \"start\": \"react-scripts start\",\\n-    \"build\": \"react-scripts build\",\\n+    \"start-js\": \"react-scripts start\",\\n+    \"start\": \"npm-run-all -p watch-css start-js\",\\n+    \"build-js\": \"react-scripts build\",\\n+    \"build\": \"npm-run-all build-css build-js\",\\n  \"test\": \"react-scripts test --env=jsdom\",\\n  \"eject\": \"react-scripts eject\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running a Local Web Server and HTTPS Proxy (Console)\nDESCRIPTION: These console commands are used to set up a local development environment for hosting the add-in web components and rerouting Outlook to use the localhost server. It assumes you have Node.js installed. The first command installs http-server globally, the second launches it with SSL, and the last two install and run office-addin-https-reverse-proxy to reroute requests. Input parameters include ports and URLs; outputs are local web servers running at specified endpoints.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-tag-external/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S --cors . -p 3000\n```\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-https-reverse-proxy\n```\n\nLANGUAGE: console\nCODE:\n```\noffice-addin-https-reverse-proxy --url http://localhost:3000 \n```\n\n----------------------------------------\n\nTITLE: Switching to a Git Branch\nDESCRIPTION: This Git command switches the current working directory and repository state to the specified branch (e.g., 'X2'). This allows the user to work on the files within that specific branch.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout X2\n```\n\n----------------------------------------\n\nTITLE: Configuring Blazor C# Debugging for Office Add-in (XML)\nDESCRIPTION: This XML snippet shows configuration elements to be added to the add-in project's `.csproj.user` file to enable C# debugging for a Blazor WebAssembly Office Add-in. The `BlazorAppUrl` specifies the local URL of the Blazor web app, and the `InspectUri` provides the necessary pattern for the debugger to connect to the browser's debugging proxy. The port number (e.g., 7126) must match the one configured in the web project's `launchSettings.json`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/excel-blazor-add-in/README.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <BlazorAppUrl>https://localhost:7126/</BlazorAppUrl>\n    <InspectUri>{wsProtocol}://{url.hostname}:{url.port}/_framework/debug/ws-proxy?browser={browserInspectUri}</InspectUri>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed SSL Certificates (Console)\nDESCRIPTION: Executes the installed `office-addin-dev-certs` tool via npx to generate and install the necessary self-signed SSL certificate files (typically localhost.crt and localhost.key). These certificates enable HTTPS for the local development server.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-keyboard-shortcuts/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Basic Unit Test with Jest - JavaScript\nDESCRIPTION: Demonstrates a simple Jest test case that validates the output of a 'sum' function. The test imports the function, then verifies its correctness using Jest's 'expect' assertion. This snippet assumes Jest is set up in the project (as provided by Create React App) and that the function to test is accessible via a relative import.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\n  \"import sum from './sum';\\n\\nit('sums numbers', () => {\\n  expect(sum(1, 2)).toEqual(3);\\n  expect(sum(2, 2)).toEqual(4);\\n});\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Web Application - Console (npm start)\nDESCRIPTION: This command starts the development server for the web application using npm. It requires all project dependencies to have been installed. Upon execution, it launches the frontend server (typically served at http://localhost:3000/index.html), allowing the user to interact with the app's features, including authentication and data export to Excel.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-create-worksheet-from-web-site/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Declaring AppendOnSend Extended Permission in Outlook Add-in Manifest (XML)\nDESCRIPTION: This XML snippet declares the AppendOnSend extended permission in the Outlook Add-in manifest. This permission allows the add-in to append content to the message body before sending via the appendOnSendAsync API. Place this tag within the manifest to enable disclaimer functionality for messages to external recipients. Prerequisite: understanding and consent to the implications of extended permissions within Office Add-ins.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-tag-external/README.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ExtendedPermission>AppendOnSend</ExtendedPermission>\n```\n\n----------------------------------------\n\nTITLE: Handling Calculation Jobs in a Web Worker - Add-ins - JavaScript\nDESCRIPTION: This code snippet shows the web worker event listener that processes messages containing calculation jobs. Upon receiving a job, it invokes the corresponding function and handles both synchronous and Promise-based results, posting either the computation result or an error back to the main thread. Relies on the 'invokeFunction' logic being defined and is intended for execution in the 'functions-worker.js' context.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/web-worker/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nself.addEventListener('message',\\n    function(event) {\\n        let data = event.data;\\n        if (typeof(data) == \\\"string\\\") {\\n            data = JSON.parse(data);\\n        }\\n\\n        const jobId = data.jobId;\\n        try {\\n            const result = invokeFunction(data.name, data.parameters);\\n            // check whether the result is a promise\\n            if (typeof(result) == \\\"function\\\" || typeof(result) == \\\"object\\\" && typeof(result.then) == \\\"function\\\") {\\n                result.then(function(realResult) {\\n                    postMessage(\\n                        {\\n                            jobId: jobId,\\n                            result: realResult\\n                        }\\n                    );\\n                })\\n                .catch(function(ex) {\\n                    postMessage(\\n                        {\\n                            jobId: jobId,\\n                            error: true\\n                        }\\n                    )\\n                });\\n            }\\n            else {\\n                postMessage({\\n                    jobId: jobId,\\n                    result: result\\n                });\\n            }\\n        }\\n        catch(ex) {\\n            postMessage({\\n                jobId: jobId,\\n                error: true\\n            });\\n        }\\n    }\\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic React Button Component (JavaScript)\nDESCRIPTION: This code defines a simple ES6 React component named Button using the class syntax, importing React and Component from the 'react' package. The component skeleton provides a render method ready for customization. Export default is used for module export, aligning with modern ES6 module standards. Dependencies required: React and Babel for ES6/JSX support.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { Component } from 'react';\\n\\nclass Button extends Component {\\n  render() {\\n    // ...\\n  }\\n}\\n\\nexport default Button; // Don’t forget to use export default!\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Pane Logic with React TSX\nDESCRIPTION: The index.tsx file serves as the entry point for the React application within the task pane. It contains the core React components and logic that power the add-in's user interface and functionality.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/word-ai-generated-content/RUN_WITH_EXTENSION.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n./src/taskpane/index.tsx\n```\n\n----------------------------------------\n\nTITLE: Defining a CSS-Backed Button Component in React (JavaScript)\nDESCRIPTION: A React Button component that imports an external CSS file and renders a div with className 'Button', demonstrating how to couple CSS styling with a React component using import statements. Depends on React and the './Button.css' resource, which is loaded via Webpack's asset pipeline. Input is component usage, output is a styled div reflecting the imported CSS.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport React, { Component } from 'react';\\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\\n\\nclass Button extends Component {\\n  render() {\\n    // You can use them as regular CSS styles\\n    return <div className=\\\"Button\\\" />;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Manifest Function Names with JS Handlers (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to map the function names specified in the add-in manifest (`FunctionName` attribute in `<LaunchEvent>`) to the actual JavaScript event handler functions within the add-in's code (e.g., `onItemComposeHandler`, `onItemSendHandler`). It uses the `Office.actions.associate` method provided by the Office JavaScript API to establish this link, ensuring the correct code executes when an Outlook event occurs.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-check-item-categories/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.actions.associate(\"onMessageComposeHandler\", onItemComposeHandler);\nOffice.actions.associate(\"onAppointmentComposeHandler\", onItemComposeHandler);\nOffice.actions.associate(\"onMessageSendHandler\", onItemSendHandler);\nOffice.actions.associate(\"onAppointmentSendHandler\", onItemSendHandler);\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server and Sideloading on Windows using npm\nDESCRIPTION: This command starts the local development web server and automatically sideloads the Office Add-in into Excel on a Windows machine for testing. It executes the 'start' script defined in the `package.json` file.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/first-run-experience-tutorial/README.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Testing the REST API Endpoint for Unicode Analysis\nDESCRIPTION: This URL is used to test the `CellAnalyzerRESTAPI` project after starting it during development. Accessing this URL in a browser sends a GET request to the `/api/analyzeunicode` endpoint with the query parameter `value` set to \"test\", invoking the API method that uses the shared library to return the Unicode values for the characters in \"test\". The expected output is a JSON list of characters and their Unicode values, served over HTTPS on the local development port 44323.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/VSTO-shared-code-migration/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://localhost:44323/api/analyzeunicode?value=test\n```\n\n----------------------------------------\n\nTITLE: Installing Global http-server for Local Hosting with npm (Console)\nDESCRIPTION: Installs the http-server npm package globally, enabling you to serve static files from the local folder over HTTP/HTTPS. This is a prerequisite for locally hosting the Office Add-in web files before sideloading into Word. Requires Node.js and npm to be installed on your machine.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/word/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Building the Add-in Project using npm\nDESCRIPTION: This command executes the build script specified in the `package.json` file. This typically involves compiling code (e.g., TypeScript to JavaScript) and preparing the add-in files for deployment or testing. It should be run after successfully installing the dependencies.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/first-run-experience-tutorial/README.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting a Local HTTPS Server with http-server for Add-in Hosting\nDESCRIPTION: This command starts a local web server using the `http-server` tool configured for HTTPS. It uses the previously generated `localhost.crt` and `localhost.key` files for SSL (`-S -C -K`), enables Cross-Origin Resource Sharing (`--cors`) required for add-ins, serves files from the current directory (`.`), and listens on port 3000 (`-p 3000`). This setup hosts the add-in's web files (HTML, JS) locally for testing.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/word-hello-world/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Installing Office Add-in Dev Certs Globally via npm\nDESCRIPTION: Installs the 'office-addin-dev-certs' package globally using npm. This tool is necessary for generating the self-signed SSL certificates required to run the local development web server over HTTPS, which is often required for Office Add-ins.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/auto-open-task-pane/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Example - Sideloading Add-in with OneDrive/SharePoint Document URL - Command Line\nDESCRIPTION: These are examples of using the web sideload command for testing with different SharePoint or OneDrive URLs. Requires the URLs to be accessible by the user and that the add-in project is set up properly. Inputs are specific URLs to PowerPoint files for sideloading the add-in. Output is the PowerPoint web application with the add-in active in the provided document.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/powerpoint-tutorial-yo/README.md#_snippet_3\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start:web -- --document https://contoso.sharepoint.com/:t:/g/EZGxP7ksiE5DuxvY638G798BpuhwluxCMfF1WZQj3VYhYQ?e=F4QM1R\n```\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start:web -- --document https://1drv.ms/x/s!jkcH7spkM4EGgcZUgqthk4IK3NOypVw?e=Z6G1qp\n```\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start:web -- --document https://contoso-my.sharepoint-df.com/:t:/p/user/EQda453DNTpFnl1bFPhOVR0BwlrzetbXvnaRYii2lDr_oQ?e=RSccmNP\n```\n\n----------------------------------------\n\nTITLE: Minimal Travis CI Configuration for Node Projects - YAML\nDESCRIPTION: This YAML configuration is for a .travis.yml file to automate Node.js builds and tests on Travis CI. It specifies Node.js version 6, caches node_modules for efficiency, and uses npm scripts for building and running tests. To use, save as .travis.yml at the project root and ensure your scripts are defined in package.json. Adjust node_js or script sections as needed for your stack.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\nnode_js:\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm run build\n  - npm test\n```\n\n----------------------------------------\n\nTITLE: Importing Images with Webpack in JavaScript\nDESCRIPTION: Demonstrates importing an image file directly into a JavaScript module using Webpack. Webpack processes the import, includes the image in the build, and returns the final URL path for use in components, such as the `src` attribute of an `<img>` tag. For images under 10KB (excluding SVG), Webpack may return a data URI instead.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS for Development Server on Windows (cmd.exe)\nDESCRIPTION: Provides the command for Windows Command Prompt (cmd.exe) to enable HTTPS for the Create React App development server. It sets the `HTTPS` environment variable to `true` before running `npm start`. The server will use a self-signed certificate, likely causing browser warnings. Requires `react-scripts` version 0.4.0 or higher.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_49\n\nLANGUAGE: cmd\nCODE:\n```\nset HTTPS=true&&npm start\n```\n\n----------------------------------------\n\nTITLE: Implementing the Command Handler Function - Office Add-ins JavaScript\nDESCRIPTION: Implements the asynchronous 'writeValue' function in JavaScript, which is mapped to the manifest's command action. This function is invoked when the corresponding ribbon command button is clicked in PowerPoint. It depends on the Office.js runtime and receives an event parameter for contextual information or completion callbacks. The expected input is the Office action event; output and side effects depend on function logic. The function must be exported or globally available to match manifest mapping. Constraints include Office.js runtime availability and correct function registration in the manifest.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/powerpoint/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function writeValue(event) {\\n...\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Runtime in Office Add-in Manifest - XML\nDESCRIPTION: This snippet shows how to declare the use of a shared runtime in the add-in manifest using the <Runtimes> XML element. All components reference the shared runtime by using the same resource ID, providing them with access to global state. Dependencies include the Office Add-in manifest schema and proper configuration of resource IDs. The key input is the <Runtimes> element with its attributes; the output is a manifest that ensures all UI components share the same runtime environment.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-global-state/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Runtimes>\\n   <Runtime resid=\\\"Shared.Url\\\" lifetime=\\\"long\\\" />\\n</Runtimes>\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic CORS in an Express.js Application\nDESCRIPTION: This JavaScript snippet demonstrates how to enable Cross-Origin Resource Sharing (CORS) for all domains and methods in an Express.js application using the `cors` middleware. It requires the `express` and `cors` npm packages. Note that this configuration is insecure and intended only for demonstration; production environments should restrict allowed origins.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO-NAA-Identity/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\n\napp.use(cors());\n```\n\n----------------------------------------\n\nTITLE: Importing Third-Party Assertion Libraries (Chai, Sinon) in Jest\nDESCRIPTION: Demonstrates how to import third-party assertion libraries like Chai (`expect`) and mocking libraries like Sinon (`sinon`) into a Jest test file. Although Jest provides built-in equivalents (`expect`, `jest.fn`), this shows that developers can still use familiar tools if preferred or needed for porting existing tests.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Local Server for Unified Manifest\nDESCRIPTION: Runs `npm install` to download and install project dependencies defined in `package.json`. Then, runs `npm start` to build the project, start a local web server, and sideload the unified manifest (`manifest.json`) into Outlook for testing when using the localhost hosting option.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-spam-reporting/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Checking Delegated Permissions Before Accessing Data in Express.js\nDESCRIPTION: This JavaScript code defines an Express.js route handler `getTodos` for retrieving a user's to-do list. It first checks if the authenticated user (via `req.authInfo`) possesses the required delegated permissions (`todolist.read` specified in `authConfig`) using the `hasRequiredDelegatedPermissions` helper. If authorized, it fetches todos associated with the user's object ID (`oid`) from the database (`db`) and returns them; otherwise, it triggers an error indicating insufficient permissions.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO-NAA-Identity/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.getTodos = (req, res, next) => {\n    // Check that caller has the delegated todolist.read permission from the user.\n    if (hasRequiredDelegatedPermissions(req.authInfo, authConfig.protectedRoutes.todolist.delegatedPermissions.read)) {\n\n        try {\n            const owner = req.authInfo['oid'];\n\n            const todos = db.get('todos')\n                .filter({ owner: owner })\n                .value();\n\n            res.status(200).send(todos);\n        } catch (error) {\n            next(error);\n        }\n    } else {\n        next(new Error('User does not have the required permissions.'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles into a React Component (JavaScript)\nDESCRIPTION: Demonstrates importing a CSS file (`Button.css`) directly into a React component (`Button.js`) using Webpack's asset handling capabilities. The imported styles are then applied to a `div` element using the `className` prop.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping OnMessageRecipientsChanged Event to Handler in Manifest (XML)\nDESCRIPTION: This XML snippet maps the OnMessageRecipientsChanged event to the JavaScript handler function tagExternal_onMessageRecipientsChangedHandler. When recipients are changed during message composition, Outlook invokes the specified function. This configuration is required for the add-in to respond to user actions and is placed within the <LaunchEvents> section of the manifest. It requires corresponding implementation of the handler in the JavaScript code.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-tag-external/README.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<LaunchEvents>\\n  <LaunchEvent Type=\\\"OnMessageRecipientsChanged\\\" FunctionName=\\\"tagExternal_onMessageRecipientsChangedHandler\\\" />\\n</LaunchEvents>\n```\n\n----------------------------------------\n\nTITLE: Starting Add-in with Production Build for Azure\nDESCRIPTION: Runs the `npm run start:prod` script. This command starts classic Outlook on Windows and sideloads the `manifest.json` located in the `dist` folder, which is configured to load add-in resources from the specified Azure storage endpoint for testing the Azure deployment.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-spam-reporting/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnpm run start:prod\n```\n\n----------------------------------------\n\nTITLE: Embedding a Telemetry Tracking Image in HTML\nDESCRIPTION: This HTML snippet embeds an image (`<img>` tag) that points to a URL (`https://pnptelemetry.azurewebsites.net/pnp-officeaddins/auth/Outlook-Add-in-SSO`). This image is used to track diagnostic data for the sample Office Add-in. The surrounding text notes that this tag exists in `Index.cshtml` and should be removed if the sample code is reused in other projects to avoid sending telemetry data.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://pnptelemetry.azurewebsites.net/pnp-officeaddins/auth/Outlook-Add-in-SSO\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding Jest Coverage Configuration in Package.json - JavaScript/JSON\nDESCRIPTION: This snippet illustrates how to provide custom Jest configuration for coverage reporting directly in package.json. It sets the files for coverage inclusion/exclusion, threshold enforcement, coverage reporters, and custom snapshot serializers. Inputs are standard Jest config keys as documented, and outputs are adjusted Jest behavior during test runs. Ensure your project is using a compatible version of Jest and that the structure is correctly nested under the \"jest\" key in package.json.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-package\",\n  \"jest\": {\n    \"collectCoverageFrom\" : [\n      \"src/**/*.{js,jsx}\",\n      \"!<rootDir>/node_modules/\",\n      \"!<rootDir>/path/to/dir/\"\n    ],\n    \"coverageThreshold\": {\n      \"global\": {\n        \"branches\": 90,\n        \"functions\": 90,\n        \"lines\": 90,\n        \"statements\": 90\n      }\n    },\n    \"coverageReporters\": [\"text\"],\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Local Server and Uninstalling Add-in (Unified Manifest)\nDESCRIPTION: Executes the `npm stop` script, which typically stops the local web server started with `npm start` and uninstalls the sideloaded add-in from Outlook when using the unified manifest setup with localhost.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-spam-reporting/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Writing Flexbox Styles for a React App Component (CSS)\nDESCRIPTION: Defines the '.App' class with CSS Flexbox layout properties such as display: flex, flex-direction, and align-items, intended for arranging children in a row and centering them. Assumes usage in a React application and likely preprocessed with Autoprefixer for vendor prefixing. Input is any element with class 'App', which will display its content inline and centered.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_15\n\nLANGUAGE: CSS\nCODE:\n```\n.App {\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Images in React Components using Webpack (JavaScript)\nDESCRIPTION: Shows how to import an image file directly into a JavaScript module using Webpack. The import statement makes Webpack aware of the image, bundles it, and provides its final URL path, which can then be used, for instance, in the `src` attribute of an `<img>` tag within a React component. Webpack handles moving the image to the build folder and generating the correct path.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Serving Build Folder with Express in Node.js - JavaScript\nDESCRIPTION: Demonstrates how to serve production build output from a Create React App project using a custom Node.js server with Express. The code initializes an Express app, sets up static file serving from the 'build' directory, and handles HTTP GET requests to '/' by sending the index.html file. The app listens on port 9000. Dependencies: 'express' and 'path' Node modules. Required parameters: none; expects the build directory to exist at the project root.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\n----------------------------------------\n\nTITLE: Stopping Local Server and Uninstalling Add-in (XML Manifest)\nDESCRIPTION: Executes the `npm run stop:xml` script, which stops the local web server started with `npm run start:xml` and uninstalls the sideloaded add-in from Outlook when using the add-in only (XML) manifest setup with localhost.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-spam-reporting/README.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nnpm run stop:xml\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Locales and Switching Locale in Moment.js with JavaScript\nDESCRIPTION: This JavaScript snippet showcases importing multiple locales (French and Spanish) into Moment.js and programmatically switching between them using 'moment.locale()'. It assumes that 'moment' and the required locales are installed via npm. Explicit imports are necessary for each desired locale; switching between them requires calling 'moment.locale()' with the locale identifier (e.g., 'fr' or 'es'). This enables dynamic formatting in the selected language, limited to the statically imported set.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_106\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport moment from 'moment';\nimport 'moment/locale/fr';\nimport 'moment/locale/es';\n\n// ...\n\nmoment.locale('fr');\n```\n\n----------------------------------------\n\nTITLE: Using Office JS API to Insert Paragraph in Word (JavaScript)\nDESCRIPTION: This JavaScript function, intended to be called from Blazor C# via interop, demonstrates interacting with a Word document using the Office JS API. It utilizes `Word.run` to create an execution context, inserts a new paragraph at the beginning of the document body using `context.document.body.insertParagraph`, and finally calls `context.sync()` to execute the queued commands. This function is exported so it can be imported and called from C#.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/word-blazor-add-in/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function insertParagraph() {\n  return Word.run((context) => {\n    // insert a paragraph at the start of the document.\n    const paragraph = context.document.body.insertParagraph(\n      'Hello World from Blazor',\n      Word.InsertLocation.start\n    );\n\n    // sync the context to run the previous API call, and return.\n    return context.sync();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS for Development Server on Linux/macOS (Bash)\nDESCRIPTION: Command for Linux or macOS terminals using Bash shell to enable HTTPS for the Create React App development server. It sets the `HTTPS` environment variable to `true` specifically for the `npm start` command execution. This feature requires `react-scripts@0.4.0` or higher and utilizes a self-signed certificate, leading to browser warnings.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS=true npm start\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch from Upstream Master with Git - Shell\nDESCRIPTION: This snippet illustrates creating a new branch from the upstream master branch and pushing it to your fork using Git in a shell environment. Prerequisites include Git installation and already configuring the 'upstream' remote. Substitute <new branch name> as desired. The process pulls the latest changes from the main repository and prepares a branch for development, with outputs being local and remote branches ready for feature work.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit pull upstream master:<new branch name>\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin <new branch name>\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout <new branch name>\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Explorer via Yarn - Shell\nDESCRIPTION: Uses the yarn package manager to add source-map-explorer to the project. Like the npm example, this enables bundle size analysis. No parameters required; requires yarn to be installed and run from the project root.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_79\n\nLANGUAGE: sh\nCODE:\n```\nyarn add source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Explorer via NPM - Shell\nDESCRIPTION: Installs the source-map-explorer package as a dependency in the project using npm. This allows developers to analyze JavaScript bundle size and composition based on source maps. No parameters required; run in the root directory of your project after initializing with npm.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_78\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS for Development Server on Linux/macOS (Bash)\nDESCRIPTION: Provides the command for Linux or macOS terminals (Bash) to enable HTTPS for the Create React App development server. It sets the `HTTPS` environment variable to `true` inline before running `npm start`. The server uses a self-signed certificate, which usually triggers browser security warnings. Requires `react-scripts` version 0.4.0 or higher.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS=true npm start\n```\n\n----------------------------------------\n\nTITLE: Removing jsdom Requirement from npm Test Script - package.json diff\nDESCRIPTION: This diff-format snippet demonstrates how to remove the --env=jsdom argument from the test script in package.json. Removing this speeds up tests that do not require jsdom, benefiting environments that only rely on shallow rendering or snapshot tests. The change applies to the scripts block in package.json, and only affects environments where jsdom is not needed.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_71\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n-   \"test\": \"react-scripts test --env=jsdom\"\n+   \"test\": \"react-scripts test\"\n```\n\n----------------------------------------\n\nTITLE: Global Installation of Storybook CLI - Shell\nDESCRIPTION: This shell command globally installs the Storybook CLI via npm, allowing you to scaffold and start Storybook in React projects. Requires Node.js and npm; execute this from any terminal before running 'getstorybook' in your app. Sudo may be required depending on your environment.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_72\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @storybook/cli\n```\n\n----------------------------------------\n\nTITLE: Embedding a Telemetry Tracking Image using HTML\nDESCRIPTION: This HTML snippet embeds an invisible image sourced from an Azure website (`pnptelemetry.azurewebsites.net`). This technique is typically used for telemetry, tracking views or usage of the specific Office Add-in sample (`outlook-autorun-tag-external`) within the PnP community project.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-tag-external/README.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://pnptelemetry.azurewebsites.net/pnp-officeaddins/samples/outlook-autorun-tag-external\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Entra ID App Registration Details in authConfig.js (JavaScript)\nDESCRIPTION: This snippet describes how to configure the backend API service component of the Outlook add-in sample by updating the `authConfig.js` file. It requires replacing placeholder values with the actual Application (Client) ID and Directory (Tenant) ID obtained from the Microsoft Entra ID app registration created previously. These credentials are essential for the API service to validate incoming tokens.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO-NAA-Identity/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n### Configure the service app (API) to use your app registration\n\nOpen the sample project in Visual Studio Code to configure the code. In the following steps, \"ClientID\" is the same as \"Application ID\" or \"AppId\".\n\n1. Open the `API/server-helpers/authConfig.js` file.\n2. Find the key `Enter_API_Application_Id_Here` and replace the existing value with the application ID (clientId) of `Contoso-Outlook-Identity-Sample` app copied from when you created the app registration earlier.\n3. Find the key `Enter_API_Application_Id_Here` and replace the existing value with the directory (tenant) ID of `Contoso-Outlook-Identity-Sample` app copied from when you created the app registration earlier.\n4. Save the file.\n```\n\n----------------------------------------\n\nTITLE: Adding Prettier Precommit Hook to npm Scripts (Diff)\nDESCRIPTION: This diff snippet demonstrates how to add a 'precommit' script to the 'scripts' section of package.json, enabling lint-staged to run before each commit. This ensures automated code formatting occurs on staged files during git commit operations. Insert the shown line into your existing package.json scripts block.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_5\n\nLANGUAGE: Diff\nCODE:\n```\n\\u002B   \\\"precommit\\\": \\\"lint-staged\\\",\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Event-Based Activation in Outlook Add-in Manifest - XML\nDESCRIPTION: This XML snippet configures the Outlook add-in manifest to specify which runtime resources (an HTML page and a JavaScript file) are loaded for event-based activation. The resid parameters point to the resource URLs. The <Override> element ensures compatibility across different Outlook environments by specifying direct JavaScript loading for classic Windows Outlook. Dependencies include proper hosting of the resources and correct manifest schema. Inputs are the runtime URLs; output is the add-in runtime loaded in Outlook upon triggering events.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-encrypt-attachments/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Runtime resid=\\\"WebViewRuntime.Url\\\">\\n  <Override type=\\\"javascript\\\" resid=\\\"JSRuntime.Url\\\"/>\\n...\\n<bt:Url id=\\\"WebViewRuntime.Url\\\" DefaultValue=\\\"https://officedev.github.io/Office-Add-in-samples/Samples/outlook-encrypt-attachments/src/commands/commands.html\\\" />\\n<bt:Url id=\\\"JSRuntime.Url\\\" DefaultValue=\\\"https://officedev.github.io/Office-Add-in-samples/Samples/outlook-encrypt-attachments/src/commands/commands.js\\\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing Images in CSS with Webpack (CSS)\nDESCRIPTION: Demonstrates referencing an image file using a relative path within a CSS file processed by Webpack. Webpack identifies relative module references (starting with `./`) in CSS and replaces them with the correct final paths from the compiled bundle, ensuring assets are correctly linked after the build process.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating WebApplicationInfo in AttachmentDemo.xml\nDESCRIPTION: This XML snippet shows the `<WebApplicationInfo>` section within the Outlook add-in manifest file (`AttachmentDemo.xml`). It needs to be updated with the Application (client) ID obtained during the Azure AD app registration process. This configuration is crucial for enabling Single Sign-On (SSO) by linking the add-in to the registered application.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<WebApplicationInfo>\n  <Id>Enter_client_ID_here</Id>\n  <Resource>api://localhost:44355/Enter_client_ID_here</Resource>\n  <Scopes>\n    <Scope>Files.ReadWrite</Scope>\n    <Scope>Mail.Read</Scope>\n    <Scope>openid</Scope>\n    <Scope>profile</Scope>\n  </Scopes>\n</WebApplicationInfo>\n```\n\n----------------------------------------\n\nTITLE: Serving React Build with Node.js and Express in JavaScript\nDESCRIPTION: This JavaScript code demonstrates setting up a basic Node.js server using the Express framework to serve a production build of a Create React App. It requires the `express` package. The code configures Express to serve static assets from the `./build` directory using `express.static` and serves the `index.html` file for the root route ('/') to support single-page application routing. The server listens on port 9000.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\napp.listen(9000);\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Heroku Build Error: Module Not Found - plaintext - Plaintext\nDESCRIPTION: This snippet shows a typical error message from a Heroku build when an import refers to a non-existent file or directory due to lettercase mismatch. The message indicates that Heroku's Linux environment is case sensitive. The snippet can be referenced to diagnose cases where local builds succeed but Heroku builds fail due to filename casing. No code execution required; serves as error message documentation.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_102\n\nLANGUAGE: plaintext\nCODE:\n```\nremote: Failed to create a production build. Reason:\nremote: Module not found: Error: Cannot resolve 'file' or 'directory'\nMyDirectory in /tmp/build_1234/src\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Injecting Data as JSON from Server-Side (C#)\nDESCRIPTION: This C# code snippet shows a server-side button click event handler (`btnSubmit2_Click`). It retrieves data (stock history in this example) using a service (`Services.Stocks`), serializes the data (a `List<Services.StockStat>`) into a JSON string using `DataContractJsonSerializer`, and then injects this JSON string into the HTML page as a JavaScript variable named `jsonData` using `Page.ClientScript.RegisterStartupScript`. This makes the server-retrieved data available for client-side JavaScript processing.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Excel.JsonToOfficeTable/README.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprotected void btnSubmit2_Click(object sender, EventArgs e)\n{\n    //use the stock service to get the history\n    //although this samples a local service...\n    //ANY data access .NET supports could be used\n    Services.Stocks s = new Services.Stocks();\n    var history = s.GetHistory(txtSymbol2.Text, Convert.ToInt32(cboFromYear2.SelectedValue));\n    using (MemoryStream stream = new MemoryStream())\n    {\n        //serialize the List<StockStats> to a JSON string\n        DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(List<Services.StockStat>));\n        ser.WriteObject(stream, history);\n        stream.Position = 0;\n        StreamReader sr = new StreamReader(stream);\n        var json = sr.ReadToEnd();\n\n        //output the json string of stock history as javascript on the page so script can read and process it\n        Page.ClientScript.RegisterStartupScript(typeof(Default), \"JSONData\", String.Format(\"var jsonData = {0};\", json), true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Start Script for Word in package.json\nDESCRIPTION: This JSON line shows how to modify the `start` script within the `package.json` file. It configures the `office-addin-debugging` tool to launch the add-in specifically in the desktop version of Microsoft Word when `npm run start` is executed.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-SSO-NAA/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"start\": \"office-addin-debugging start manifest.xml desktop --app word\",\n```\n\n----------------------------------------\n\nTITLE: Smoke Test for React Component using ReactDOM - JavaScript\nDESCRIPTION: Checks that a React component (App) renders without crashing using ReactDOM. It programmatically creates a div element and mounts the App component into it, making sure no exceptions are thrown. Requires 'react', 'react-dom', and the component under test and should be placed in a '.test.js' file.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\n  \"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\n\\nit('renders without crashing', () => {\\n  const div = document.createElement('div');\\n  ReactDOM.render(<App />, div);\\n});\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Service Worker Unregister in React - JavaScript\nDESCRIPTION: Shows how to disable an existing service worker in a Create React App project by importing the unregister function instead of registerServiceWorker. Replace the existing import in src/index.js with this, then invoke unregister() to unregister the service worker and remove its cache for users. Dependency: './registerServiceWorker' module providing unregister. Only works in browsers with service worker support.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unregister } from './registerServiceWorker';\n```\n\n----------------------------------------\n\nTITLE: Importing Reactstrap Components\nDESCRIPTION: Illustrates how to import specific components (e.g., `Navbar`, `Button`) from the `reactstrap` library into a React component file (`src/App.js` or other custom components). These imported components can then be used within the component's render method.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nimport { Navbar, Button } from 'reactstrap';\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier and Related Tools with yarn (Shell)\nDESCRIPTION: This shell command uses yarn to add Husky, lint-staged, and Prettier as dependencies. It is functionally equivalent to the npm variant and sets up all tools necessary for git pre-commit code formatting. Run this in the project directory to enable formatting automation.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add husky lint-staged prettier\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing JavaScript Interop in Blazor Component (C#)\nDESCRIPTION: This C# code snippet, typically placed within a Blazor component's code-behind file (.razor.cs), runs after the component has rendered for the first time. It uses the JSRuntime service to asynchronously import a corresponding JavaScript module (e.g., './Pages/Index.razor.js') and stores a reference to it (JSModule) for later interop calls.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/excel-blazor-add-in/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override async Task OnAfterRenderAsync(bool firstRender)\n{\n  if (firstRender)\n  {\n    JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>(\"import\", \"./Pages/Index.razor.js\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WebExtension Reference for Script Lab Add-in (.NET, C#)\nDESCRIPTION: This snippet demonstrates how to initialize a WebExtension object referencing the Script Lab add-in by setting its unique asset ID, namespace, and store metadata. The WebExtension is configured with store details indicating it is sourced from the Office Store (OMEX) and is tailored for the en-US locale. This code is used within the GenerateWebExtensionPart1Content method and requires access to the Open XML SDK for interacting with document web extensions. Inputs include specific ID values for the add-in, while the output is a configured WebExtension object to be embedded in the spreadsheet. Modification is required for referencing other add-ins.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-create-worksheet-from-web-site/README.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nWe.WebExtension webExtension1 = new We.WebExtension() { Id = \"{635BF0CD-42CC-4174-B8D2-6D375C9A759E}\" };\nwebExtension1.AddNamespaceDeclaration(\"we\", \"http://schemas.microsoft.com/office/webextensions/webextension/2010/11\");\nWe.WebExtensionStoreReference webExtensionStoreReference1 = new We.WebExtensionStoreReference() { Id = \"wa104380862\", Version = \"1.1.0.0\", Store = \"en-US\", StoreType = \"OMEX\" };\n```\n\n----------------------------------------\n\nTITLE: Running Styleguidist Development Server - Shell\nDESCRIPTION: This shell command starts the Styleguidist server, serving the style guide and UI component playground at a local URL. Requires scripts.styleguide to be defined in your package.json and react-styleguidist to be installed. Run inside your project directory to view and edit components in isolation.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_77\n\nLANGUAGE: sh\nCODE:\n```\nnpm run styleguide\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugging for Create React App (JSON)\nDESCRIPTION: This snippet shows a sample `launch.json` configuration for enabling in-editor debugging of a Create React App project with VS Code and the Chrome Debugger extension. It specifies launch settings such as URL (default localhost:3000), webRoot, and source map path overrides. Place this JSON in `.vscode/launch.json`. Requires the Chrome Debugger extension for VS Code.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \\\"version\\\": \\\"0.2.0\\\",\\n  \\\"configurations\\\": [{\\n    \\\"name\\\": \\\"Chrome\\\",\\n    \\\"type\\\": \\\"chrome\\\",\\n    \\\"request\\\": \\\"launch\\\",\\n    \\\"url\\\": \\\"http://localhost:3000\\\",\\n    \\\"webRoot\\\": \\\"${workspaceRoot}/src\\\",\\n    \\\"sourceMapPathOverrides\\\": {\\n      \\\"webpack:///src/*\\\": \\\"${webRoot}/*\\\"\\n    }\\n  }]\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Adding lint-staged Field to package.json for Prettier (Diff)\nDESCRIPTION: This diff illustrates how to add a lint-staged field to package.json so that Prettier formats all staged JavaScript, JSX, JSON, and CSS files before commits. For each relevant file, Prettier is run with the single-quote option, followed by 'git add' to update the staged file. Add this block above or near the scripts section of package.json.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_6\n\nLANGUAGE: Diff\nCODE:\n```\n\\u002B \\\"lint-staged\\\": {\\n\\u002B   \\\"src/**/*.{js,jsx,json,css}\\\": [\\n\\u002B     \\\"prettier --single-quote --write\\\",\\n\\u002B     \\\"git add\\\"\\n\\u002B   ]\\n\\u002B },\\n\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Using npm (Shell)\nDESCRIPTION: This shell command installs React Router as a dependency using npm. This is the recommended way to add routing functionality to a React project created with Create React App. Place this command in your project directory terminal. No special prerequisites other than npm are necessary.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save react-router\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install all the project dependencies defined in the `package.json` file. This step is necessary before running the sample application.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-SSO-NAA/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier and Related Tools with npm (Shell)\nDESCRIPTION: This shell command installs Prettier, Husky, and lint-staged as development dependencies using npm. These packages are part of the recommended workflow to set up automated code formatting before git commits. Run this command in the terminal at the project root. It is an alternative to using yarn for installation.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save husky lint-staged prettier\\n\n```\n\n----------------------------------------\n\nTITLE: Mapping an Add-in Command to a Function - Office Add-ins Manifest XML\nDESCRIPTION: Defines an ExecuteFunction action within the Office Add-in manifest.xml, mapping a ribbon command to a JavaScript function named 'writeValue'. This XML associates user interface actions with backend code by specifying the function to invoke when the button is pressed. Required dependencies include a properly structured manifest file and a referenced JavaScript function by the specified name. The FunctionName parameter must match the JavaScript implementation, otherwise the action will not trigger as intended.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/powerpoint/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Action xsi:type=\\\"ExecuteFunction\\\">\\n  <FunctionName>writeValue</FunctionName>\\n</Action>\n```\n\n----------------------------------------\n\nTITLE: Referencing Public Assets in index.html using PUBLIC_URL (HTML)\nDESCRIPTION: Illustrates how to reference a static asset (like a favicon) located in the `public` folder from within the `index.html` file. The `%PUBLIC_URL%` variable is used as a placeholder, which Create React App replaces with the correct absolute path to the public folder during the build process. This allows access to assets that are not processed by Webpack.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\n----------------------------------------\n\nTITLE: Building and Analyzing Production Bundle - Shell\nDESCRIPTION: Runs the build and analyze scripts in sequence to create a production build and then analyze it with source-map-explorer. The first command builds the app, outputting to the build directory; the second command invokes the analyze script as defined in package.json. No parameters required, expected to be run from the project root.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_81\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\nnpm run analyze\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests Once in Bash (Bash)\nDESCRIPTION: This command runs `npm test` in a Linux or macOS bash environment with the `CI` environment variable temporarily set to `true` for the command's execution. This forces Jest (via react-scripts) to execute tests a single time and exit, bypassing the interactive watch mode typically used in development.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm test\n```\n\n----------------------------------------\n\nTITLE: Importing Third-party Assertion Libraries (Sinon & Chai) - JavaScript\nDESCRIPTION: Imports Sinon and Chai assertion libraries, which can be used as alternatives to Jest’s built-in expect() and spies. Ideal for projects migrating legacy tests or requiring specific features from these libraries. Dependencies must be installed via npm/yarn.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\n  \"import sinon from 'sinon';\\nimport { expect } from 'chai';\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Route Handling in Express for React SPA - Node.js\nDESCRIPTION: Modifies Express route configuration to serve index.html for all unknown paths, ensuring client-side routing works correctly with React Router and similar routers leveraging HTML5 history API. This change prevents 404 errors when refreshing or directly navigating to nested routes. Requires an existing Express server setup and assumes static assets are served from a build directory.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_87\n\nLANGUAGE: diff\nCODE:\n```\n app.use(express.static(path.join(__dirname, 'build')));\\n\\n-app.get('/', function (req, res) {\\n+app.get('/*', function (req, res) {\\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-https-reverse-proxy - Console\nDESCRIPTION: This npm command globally installs the 'office-addin-https-reverse-proxy' package, a utility that helps reroute requests so the Office client can load the add-in securely from localhost with valid SSL. This is a prerequisite for the rerouting step required during local development and testing in Office for web, Windows, or Mac clients.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/word-import-template/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-https-reverse-proxy\n```\n\n----------------------------------------\n\nTITLE: Installing gh-pages Package for GitHub Deployment - Shell\nDESCRIPTION: Provides shell commands for installing the gh-pages npm package, required for publishing React apps to GitHub Pages. Shows both npm and yarn installation commands. Must be run from the project root.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_96\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save gh-pages\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add gh-pages\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap CSS in Create React App Entry Point (JavaScript)\nDESCRIPTION: Demonstrates how to import the core Bootstrap CSS and optional theme CSS into the application's main JavaScript entry point (`src/index.js`). This ensures that Bootstrap styles are loaded and applied globally within the React application. It's recommended to place these imports before component-specific CSS imports.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Editor Integration using .eslintrc\nDESCRIPTION: This JSON configuration, placed in a `.eslintrc` file at the project root, enables ESLint integration within supported editors like Sublime Text, Atom, and VS Code. It extends the base 'react-app' ESLint configuration provided by Create React App, allowing editor plugins to display lint warnings directly. Note that this configuration only impacts the editor and does not alter the linting rules applied during the build process or shown in the terminal/browser console.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"extends\": \"react-app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Local HTTPS Server for Office Add-in Development via Console\nDESCRIPTION: This console command runs the 'http-server' tool with SSL and CORS enabled, serving files from the current directory on port 3000. Prerequisites include generating and placing SSL certificate files ('cert.pem' and 'key.pem') in the folder. The server is essential for testing Office Add-ins that require HTTPS endpoints.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-contextual-tabs/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Mocking localStorage in Jest Setup (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to create a mock implementation of the browser's `localStorage` API using `jest.fn()`. Placing this code in `src/setupTests.js` ensures it runs before Jest tests execute, providing a controlled environment for tests interacting with `localStorage`. This requires `react-scripts@0.4.0` or higher.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_64\n\nLANGUAGE: js\nCODE:\n```\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n----------------------------------------\n\nTITLE: Firebase Deployment CLI Output - Shell\nDESCRIPTION: Displays the result of running 'firebase deploy', highlighting the upload, release, and completion process for deploying a production React SPA to Firebase Hosting. Contains progress indicators, file upload success, and the console output with hosted site URLs.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_94\n\nLANGUAGE: sh\nCODE:\n```\n    === Deploying to 'example-app-fd690'...\\n\\n    i  deploying database, hosting\\n    \\u2714  database: rules ready to deploy.\\n    i  hosting: preparing build directory for upload...\\n    Uploading: [==============================          ] 75%\\u2714  hosting: build folder uploaded successfully\\n    \\u2714  hosting: 8 files uploaded successfully\\n    i  starting release process (may take several minutes)...\\n\\n    \\u2714  Deploy complete!\\n\\n    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview\\n    Hosting URL: https://example-app-fd690.firebaseapp.com\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-dev-certs Using npm for Development Certificates\nDESCRIPTION: This console command installs the office-addin-dev-certs package globally using npm, which enables generating self-signed certificates for running an HTTPS dev server. This is necessary for local Office Add-ins development because the Office Add-ins platform requires HTTPS. The user must have npm and Node.js installed. No additional parameters are needed; output is the installation of the dev-certs tool for subsequent use.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/excel/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Setting Task Pane Visibility for Embedded Office Add-in in C#\nDESCRIPTION: This C# code snippet from the `GeneratePartContent` method illustrates how to control the initial state of an embedded Office Add-in's task pane using the Open XML SDK. It creates a `Wetp.WebExtensionTaskpane` object, setting properties like `DockState`, `Width`, and importantly, `Visibility`. Setting `Visibility` to `true` makes the task pane open automatically the first time the document is opened, while `false` requires initial manual installation but allows subsequent auto-opening and user control via Office.js settings.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-open-in-teams/README.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nWetp.WebExtensionTaskpane webExtensionTaskpane1 = new Wetp.WebExtensionTaskpane() { DockState = \"right\", Visibility = true, Width = 350D, Row = (UInt32Value)4U };\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Development Proxy in package.json (JavaScript/JSON)\nDESCRIPTION: Adds a `proxy` key to `package.json` to tell the React development server (via `react-scripts`) to forward any unrecognized, non-HTML requests to the specified backend server (e.g., `http://localhost:4000`). This requires `react-scripts@0.2.3` or higher and helps avoid CORS issues during development.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_42\n\nLANGUAGE: js\nCODE:\n```\n  \"proxy\": \"http://localhost:4000\",\n```\n\n----------------------------------------\n\nTITLE: Configuring lint-staged in package.json for Prettier\nDESCRIPTION: This diff illustrates adding a `lint-staged` configuration block to the `package.json` file. It specifies that for any staged JavaScript (`.js`, `.jsx`), JSON (`.json`), or CSS (`.css`) files within the `src` directory, Prettier should be run with specific options (`--single-quote --write`) to format them, followed by `git add` to stage the newly formatted files. This integrates Prettier into the pre-commit workflow managed by `husky` and `lint-staged`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  \"dependencies\": {\n    // ...\n  },\n+ \"lint-staged\": {\n+   \"src/**/*.{js,jsx,json,css}\": [\n+     \"prettier --single-quote --write\",\n+     \"git add\"\n+   ]\n+ },\n  \"scripts\": {\n```\n\n----------------------------------------\n\nTITLE: Adding precommit Script to package.json for lint-staged\nDESCRIPTION: This diff shows how to add a `precommit` script to the `scripts` section of the `package.json` file. This script invokes `lint-staged`, which in turn will run configured linters or formatters (like Prettier) on staged files before a git commit is finalized. This is a key step in automating code formatting.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n+   \"precommit\": \"lint-staged\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment to Netlify CDN - Shell Script\nDESCRIPTION: This shell snippet demonstrates how to manually install Netlify's CLI and deploy a React application to Netlify's CDN. It requires Node.js and NPM to already be installed. The primary parameters are the Netlify CLI (installed globally) and the project directory. The output is a successful deployment of the 'build' folder to Netlify's CDN; errors may occur if authentication or project selection fails.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_99\n\nLANGUAGE: sh\nCODE:\n```\nnpm install netlify-cli\\nnetlify deploy\\n\n```\n\n----------------------------------------\n\nTITLE: Sending Data from Task Pane via OfficeRuntime.storage in JavaScript\nDESCRIPTION: This JavaScript function, typically called from the task pane UI, retrieves a value (token) from an input element (`tokenTextBox`). It then uses `OfficeRuntime.storage.setItem` with a hardcoded key \"token\" to store this value, making it available to custom functions. Status updates are displayed in the `tokenSendStatus` element.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Storage/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction SendTokenToCustomFunction() {\n  const token = document.getElementById('tokenTextBox').value;\n  const tokenSendStatus = document.getElementById('tokenSendStatus');\n  const key = \"token\";\n  OfficeRuntime.storage.setItem(key, token).then(function () {\n    tokenSendStatus.value = \"Success: Item with key '\" + key + \"' saved to Storage.\";\n  }, function (error) {\n    tokenSendStatus.value = \"Error: Unable to save item with key '\" + key + \"' to Storage. \" + error;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying \"Invalid Host header\" Error (Text)\nDESCRIPTION: Represents the \"Invalid Host header\" error message that might appear in the browser after enabling the `proxy` option in `package.json`, particularly during remote development or when accessing the dev server via a non-localhost hostname. This is due to stricter host checks implemented for security against DNS rebinding attacks.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_44\n\nLANGUAGE: text\nCODE:\n```\nInvalid Host header\n```\n\n----------------------------------------\n\nTITLE: Example CORS Error Message in Browser Console (Text)\nDESCRIPTION: Illustrates a common Cross-Origin Resource Sharing (CORS) error shown in the browser console when a frontend application (e.g., running on `http://localhost:3000`) tries to make an API request to a different origin (e.g., `http://localhost:4000`) without the necessary `Access-Control-Allow-Origin` header. The development proxy feature helps mitigate this.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_43\n\nLANGUAGE: text\nCODE:\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in a .env File\nDESCRIPTION: Shows an example of a `.env` file in the project root used to define persistent environment variables. Create React App (`react-scripts@0.5.0+`) automatically loads variables defined in this file, provided they start with `REACT_APP_`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_40\n\nLANGUAGE: dotenv\nCODE:\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\n----------------------------------------\n\nTITLE: Storing Key-Value Pair from Custom Function using OfficeRuntime.storage in JavaScript\nDESCRIPTION: This JavaScript custom function `StoreValue` accepts a key and a value as arguments. It uses the `OfficeRuntime.storage.setItem` method to store the key-value pair asynchronously, making it accessible later from the task pane or other custom functions. It returns a promise that resolves with a success message or rejects with an error message.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Storage/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction StoreValue(key, value) {\n  return OfficeRuntime.storage.setItem(key, value).then(function (result) {\n      return \"Success: Item with key '\" + key + \"' saved to storage.\";\n  }, function (error) {\n      return \"Error: Unable to save item with key '\" + key + \"' to storage. \" + error;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Environment Variables in public/index.html\nDESCRIPTION: Demonstrates how to embed environment variables (prefixed with `REACT_APP_`) directly into the `public/index.html` file using the `%VARIABLE_NAME%` syntax. This feature requires `react-scripts@0.9.0` or higher, and the values are injected at build time.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\n----------------------------------------\n\nTITLE: Exploring the Project File Structure for the Word AIGC Add-in\nDESCRIPTION: This snippet outlines the directory and file structure of the sample Word add-in project. Key files include the `manifest.xml` (defines the add-in's properties), `package.json` (manages project dependencies and scripts), `src/` directory (contains the add-in's source code, including React components for the task pane), and `webpack.config.js` (configures the module bundler). Understanding this structure helps in navigating and modifying the codebase.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/word-ai-generated-content/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| .eslintrc.json\n| .gitignore\n| .vscode/\n|   | extensions.json\n|   | launch.json               Launch and debug configurations\n|   | settings.json             \n|   | tasks.json                \n| assets/                       Static assets like image/gif\n| babel.config.json\n| manifest.xml                  Manifest file\n| package.json                  \n| README.md                     \n| RUN_WITH_EXTENSION.md         \n| src/                          Add-ins source code\n|   | taskpane/\n|   |   | components/           React components\n|   |   | css/                  Task pane style\n|   |   | taskpane.html         Task pane entry HTML\n|   |   | index.tsx             Task pane React component\n| webpack.config.js             Webpack config\n| tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Creating React Component Smoke Tests with ReactDOM\nDESCRIPTION: Illustrates a fundamental smoke test for a React component (`App`). It uses `ReactDOM.render` to mount the component into a temporary DOM element (`div`) and verifies that the rendering process completes without throwing any exceptions. This test provides basic assurance that the component can mount successfully.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\n----------------------------------------\n\nTITLE: Building and Analyzing Bundle Size via npm Scripts in Shell\nDESCRIPTION: These commands first run the production build process (`npm run build`) using Create React App's build script, generating optimized static assets in the `build` directory. Then, they execute the previously defined `analyze` script (`npm run analyze`) to inspect the size and composition of the generated JavaScript bundle using `source-map-explorer`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_83\n\nLANGUAGE: sh\nCODE:\n```\n```\nnpm run build\nnpm run analyze\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Self-signed Certificates for HTTPS - office-addin-dev-certs - Console\nDESCRIPTION: Runs 'office-addin-dev-certs install' using npx to generate self-signed certificates for use in HTTPS local web server setup for Office Add-ins. Requires prior installation of office-addin-dev-certs globally. This is necessary for local development and sideloading of Add-ins where HTTPS is required. Command displays the folder where certificate files are created.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/excel-hello-world/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment of React App with Netlify CLI - sh - Shell\nDESCRIPTION: This snippet demonstrates how to manually deploy a React application with Netlify CLI. The commands first install Netlify CLI globally and then run a deploy command that interactively collects deployment parameters such as the build folder path. Requires Node.js, npm, and netlify-cli installed globally. Inputs include project folder paths and build settings, and output is the deployment of the app on Netlify's CDN.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_98\n\nLANGUAGE: sh\nCODE:\n```\nnpm install netlify-cli\nnetlify deploy\n\n```\n\n----------------------------------------\n\nTITLE: Updating Excel Custom Function URL (JavaScript)\nDESCRIPTION: This snippet shows the initial part of the Excel custom function `add` in `functions.js`. It highlights the `url` constant which initially points to a localhost Azure Function and needs to be updated with the deployed Azure Function's URL.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/AzureFunction/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction add(first, second) {\n  //If you publish the Azure Function online, update the following URL to use the correct URL location.\n  const url = \"http://localhost:7071/api/AddTwo\";\n  ...\n\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Formatting Dependencies with npm\nDESCRIPTION: This shell command uses npm to install `husky`, `lint-staged`, and `prettier` as development dependencies. These packages are required to set up automatic code formatting using Prettier before each git commit, ensuring consistent code style across the project. `husky` enables git hooks, `lint-staged` runs linters/formatters on staged files, and `prettier` is the code formatter itself.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save husky lint-staged prettier\n```\n\n----------------------------------------\n\nTITLE: Importing a Specific Locale with Moment.js in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to explicitly import a single Moment.js locale to optimize bundle size and ensure the locale is available for use. It uses ES6 import syntax and requires the 'moment' npm package to be installed. The 'import \\\"moment/locale/fr\\\";' line ensures that only the French locale is loaded; developers should replace 'fr' with the desired locale code. The expected output is that Moment.js recognizes the imported locale during formatting.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_105\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport moment from 'moment';\nimport 'moment/locale/fr';\n```\n\n----------------------------------------\n\nTITLE: Implementing an Azure Function for Addition (Node.js/JavaScript)\nDESCRIPTION: This Azure Function (`AddTwo` in `index.js`) processes HTTP requests to add two numbers. It retrieves 'first' and 'second' parameters from either the URL query string or the request body, validates if they are numbers, and returns the sum or a 400 error. The `context.res` object is used to formulate the HTTP response.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/AzureFunction/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = async function (context, req) {\n  context.log(\"JavaScript HTTP trigger function processed a request.\");\n\n  //retrieve parameters if passed on URL.\n  let first = req.query.first;\n  let second = req.query.second;\n\n  //Check if parameters were passed in body text.\n  if (req.body !== undefined) {\n    if (req.body.first !== undefined) {\n      first = req.body.first;\n    }\n    if (req.body.second !== undefined) {\n      second = req.body.second;\n    }\n  }\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n if (isNaN(first) || isNaN(second)) {\n    context.res = {\n      status: 400, //bad request\n      body: \"Please pass (first,second) number parameters in the query string or in the request body\",\n    };\n  } else {\n    context.res = {\n      // status: 200, /* Defaults to 200 */\n      body: {\n        answer: Number(first) + Number(second),\n      },\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Formatting Dependencies with yarn\nDESCRIPTION: This shell command uses yarn to add `husky`, `lint-staged`, and `prettier` as development dependencies. These packages are needed to configure automatic code formatting with Prettier triggered by git commits. This provides an alternative to using npm for managing these specific dependencies required for the pre-commit formatting workflow.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn add husky lint-staged prettier\n```\n\n----------------------------------------\n\nTITLE: Example CORS Error Prevented by Proxy Configuration\nDESCRIPTION: Displays a typical browser console error encountered during development when attempting cross-origin API requests (e.g., from `localhost:3000` to `localhost:4000`) without a proxy or proper `Access-Control-Allow-Origin` headers. The `proxy` feature in Create React App helps avoid this.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_43\n\nLANGUAGE: plaintext\nCODE:\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\n----------------------------------------\n\nTITLE: Illustrating Production Server Route Configuration\nDESCRIPTION: Shows an example production server setup where the root ('/') and specific routes like '/todos' serve the React app's index.html, while API-specific paths like '/api/todos' are handled by a separate backend implementation. This common setup motivates the need for a development proxy to mimic this behavior.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_41\n\nLANGUAGE: plaintext\nCODE:\n```\n/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation\n```\n\n----------------------------------------\n\nTITLE: Conditionally Executing Code Based on Execution Environment - JavaScript\nDESCRIPTION: This JavaScript snippet checks the NODE_ENV environment variable and disables analytics if the environment is not production. It exemplifies conditional logic for differentiating between development, testing, and production modes in a React app. The key dependency is an analytics module/object with a disable method. This pattern helps ensure that analytics (or other environment-dependent features) do not run during development and reduces bundle size during production builds when minified.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Office Add-in Settings to Document using Office JS API (JavaScript)\nDESCRIPTION: Demonstrates how to asynchronously save settings stored in the Office Add-in's property bag (`Office.context.document.settings`) to the host document (Excel, Word, PowerPoint). It utilizes the `saveAsync` method, which requires a callback function to handle the operation's result. The example logs success or failure messages to the console based on the `asyncResult` status.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-save-custom-settings/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.context.document.settings.saveAsync(function (asyncResult) {\n    if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n        console.log('Settings save failed. Error: ' + asyncResult.error.message);\n    } else {\n        console.log('Settings saved.');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Calling JavaScript Function from Blazor Component Event Handler (C#)\nDESCRIPTION: This C# snippet shows an asynchronous event handler method (HelloButton) within a Blazor component. It uses the previously obtained JavaScript module reference (JSModule) to invoke a specific JavaScript function ('helloButton') without expecting a return value (InvokeVoidAsync). This is a common pattern for triggering Office JS API interactions from C# UI events.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/excel-blazor-add-in/README.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task HelloButton() =>\n  await JSModule.InvokeVoidAsync(\"helloButton\");\n```\n\n----------------------------------------\n\nTITLE: Installing or Uninstalling Development Certificates with Office Add-in Dev Certs (Command Line)\nDESCRIPTION: Lists commands for installing or uninstalling development certificates required for trusted localhost access. Depends on Node.js environment and the 'office-addin-dev-certs' package. These certificates are for safe, local testing, and should not be reused in production. Parameters: 'install' (adds certificates), 'uninstall' (removes them).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Excel.OfflineStorageAddin/README.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpx office-addin-dev-certs install\\nnpx office-addin-dev-certs uninstall\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Using yarn (Shell)\nDESCRIPTION: This shell command uses yarn to add React Router to the dependencies of your project. Use this as an alternative to the npm command in environments where yarn is the package manager of choice. Run this in the project's root directory.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add react-router\\n\n```\n\n----------------------------------------\n\nTITLE: Running Production Build with CI Checks in Windows CMD (cmd)\nDESCRIPTION: This command executes a production build (`npm run build`) in the Windows Command Prompt (cmd.exe) with the `CI` environment variable set to `true`. This ensures that linter warnings are treated as errors, causing the build to fail if any are present. The lack of whitespace around `&&` is intentional.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_68\n\nLANGUAGE: cmd\nCODE:\n```\nset CI=true&&npm run build\n```\n\n----------------------------------------\n\nTITLE: Rendering Environment Variables in React Components - React (JSX) - JavaScript\nDESCRIPTION: This JSX snippet demonstrates how to access and render environment variables such as NODE_ENV and REACT_APP_SECRET_CODE inside a React component. The component displays the current execution mode and includes a hidden form input populated with a value injected at build time using process.env. Dependencies include React and an environment prepared with the appropriate variables (through shell or .env file). Inputs come from process.env and outputs are the form's rendered HTML elements. Environment variables are replaced at build time, so changes require rebuilding.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Watchman with Homebrew on macOS Using Shell Commands\nDESCRIPTION: This shell script sequence provides instructions for updating Watchman to fix issues with 'npm test' hanging on macOS Sierra. The commands require Homebrew to be installed: 'watchman shutdown-server' stops the running Watchman service, 'brew update' fetches the latest Homebrew package info, and 'brew reinstall watchman' reinstalls Watchman at the newest version. Running these commands in order helps resolve known compatibility issues with file watching and Jest test runners.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_107\n\nLANGUAGE: Shell\nCODE:\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Script for Bundle Analysis in package.json\nDESCRIPTION: This diff shows how to add an `analyze` script to the `scripts` section of a `package.json` file. This script uses the installed `source-map-explorer` tool to analyze the main JavaScript bundle files located in the `build/static/js` directory, which are generated by the `npm run build` command.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_82\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n   \"scripts\": {\n+    \"analyze\": \"source-map-explorer build/static/js/main.*\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n```\n\n----------------------------------------\n\nTITLE: Receiving Data in Task Pane via OfficeRuntime.storage in JavaScript\nDESCRIPTION: This JavaScript function, typically called from the task pane UI, uses `OfficeRuntime.storage.getItem` with a hardcoded key \"token\" to retrieve a value previously stored (potentially by a custom function). The retrieved value is then displayed in an input element (`tokenTextBox2`), and status updates are shown in `tokenSendStatus`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Storage/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfunction ReceiveTokenFromCustomFunction() {\n  const key = \"token\";\n  const tokenSendStatus = document.getElementById('tokenSendStatus');\n  OfficeRuntime.storage.getItem(key).then(function (result) {\n    tokenSendStatus.value = \"Success: Item with key '\" + key + \"' read from Storage.\";\n    document.getElementById('tokenTextBox2').value = result;\n  }, function (error) {\n    tokenSendStatus.value = \"Error: Unable to read item with key '\" + key + \"' from Storage. \" + error;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HOST Environment Variable for Remote Development Proxy Access\nDESCRIPTION: Specifies setting the `HOST` environment variable within a `.env.development` file to the public hostname used for remote development (e.g., `mypublicdevhost.com`). This resolves \"Invalid Host header\" errors that can occur when using the proxy feature outside of `localhost`. Requires restarting the development server.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_44\n\nLANGUAGE: plaintext\nCODE:\n```\nHOST=mypublicdevhost.com\n```\n\n----------------------------------------\n\nTITLE: Serving Production Build with 'serve' via npm in Shell\nDESCRIPTION: These commands first globally install the `serve` package using npm, providing a simple static HTTP server. The second command then starts this server, serving the static files from the `build` directory (created by `npm run build`), making the production application accessible locally, usually on port 5000 by default.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_84\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nnpm install -g serve\nserve -s build\n```\n```\n\n----------------------------------------\n\nTITLE: Starting a Local HTTPS Server for Office Add-ins Testing using http-server\nDESCRIPTION: This command starts the http-server with HTTPS enabled, referencing the locally generated certificate and key files. It serves the current folder on port 3000 with CORS enabled, which is necessary for Office Add-ins sideloading and testing from localhost. Make sure to provide correct paths to localhost.crt and localhost.key. Requires that both certificates have been previously created using office-addin-dev-certs.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/excel/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Starting Local HTTPS Development Server (Console)\nDESCRIPTION: Starts the `http-server` on port 3000, serving files from the current directory (`.`). It uses SSL/TLS (`-S`) with the previously generated certificate (`-C localhost.crt`) and key (`-K localhost.key`) files, and enables Cross-Origin Resource Sharing (`--cors`) to allow the Office host to load the add-in resources. This command hosts the add-in files locally for testing.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-keyboard-shortcuts/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Running the Local Web Server with SSL and CORS - Console\nDESCRIPTION: This shell command starts the previously installed 'http-server' in SSL mode with CORS enabled on port 3000, serving files from the current directory. It assumes you have already generated and placed 'cert.pem' and 'key.pem' in your project root. This step is required to securely serve the add-in's web files for development and sideload testing.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/word-import-template/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Starting Local HTTPS Server with http-server (Console)\nDESCRIPTION: Starts a local HTTPS web server using the `http-server` package on port 3000. It uses the previously generated `localhost.crt` and `localhost.key` files for SSL (`-S`, `-C`, `-K`), enables Cross-Origin Resource Sharing (`--cors`) to allow the Office host application to fetch add-in resources, specifies the port (`-p 3000`), and serves files from the current directory (`.`).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-save-custom-settings/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple JavaScript Module with Named Export\nDESCRIPTION: This defines a basic JavaScript module `moduleA.js` that exports a constant string variable `moduleA` using the ES6 named export syntax. It's intended to be dynamically imported as part of a code splitting example.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst moduleA = 'Hello';\n\nexport { moduleA };\n```\n\n----------------------------------------\n\nTITLE: Retrieving Outlook Mail Item Data via JS Interop - C#\nDESCRIPTION: This method in C# illustrates calling into JavaScript to retrieve Outlook mail data using Blazor JS interop. The async method calls the \"getEmailData\" function on the JSModule (imported Office.js module), casting its result to a MailRead type. It logs the retrieved subject to console and returns the mail item object. Requires prior initialization of JSModule as shown above, and a JavaScript function named getEmailData that returns a compatible MailRead object.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/outlook-blazor-add-in/README.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task<MailRead?> GetEmailData()\n{\n    MailRead? mailreaditem = await JSModule.InvokeAsync<MailRead>(\"getEmailData\");\n\n    Console.WriteLine(\"Subject C#: \");\n    Console.WriteLine(mailreaditem?.Subject);\n\n    return mailreaditem;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Deploy and Predeploy Scripts to package.json - GitHub Pages - diff\nDESCRIPTION: This diff snippet shows how to add `predeploy` and `deploy` scripts in the `package.json` scripts section. `predeploy` is used to build the app prior to deploying, and `deploy` runs `gh-pages` to publish the `build` folder. Both npm and gh-pages package are required.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_96\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n+   \"predeploy\": \"npm run build\",\n+   \"deploy\": \"gh-pages -d build\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\n----------------------------------------\n\nTITLE: Installing Reactstrap and Bootstrap via npm\nDESCRIPTION: Command to install the `reactstrap` library and the `bootstrap` framework (specifically version 4) using the npm package manager. This is a necessary step for integrating Bootstrap components into a React application using Reactstrap.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save reactstrap bootstrap@4\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Unit Tests with Jest\nDESCRIPTION: Provides a simple example of a Jest unit test. It imports a `sum` function, defines a test case using `it()`, and uses `expect()` with the `toEqual()` matcher to assert that the function returns the correct results for given inputs.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Heroku Build Error: Required File Not Found - plaintext - Plaintext\nDESCRIPTION: This snippet contains an error message output from Heroku indicating a required file (such as 'index.html') is missing from the expected directory during the build process. It serves to help developers recognize this common deployment mistake and provides context for troubleshooting. Typical causes include missing files or incorrect entries in .gitignore. No execution required; used for error diagnostics.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_103\n\nLANGUAGE: plaintext\nCODE:\n```\nremote: Could not find a required file.\nremote:   Name: `index.html`\nremote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public\nremote:\nremote: npm ERR! Linux 3.13.0-105-generic\nremote: npm ERR! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\"\n\n```\n\n----------------------------------------\n\nTITLE: Specifying GitHub Pages Homepage URL - JavaScript/JSON\nDESCRIPTION: Sets the homepage property in package.json to the GitHub Pages URL, required so React's build output correctly determines asset root for deployment on GitHub Pages hosting. Must match the repository and username, and is essential for a successful SPA deployment.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_95\n\nLANGUAGE: js\nCODE:\n```\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\n----------------------------------------\n\nTITLE: Adding Deploy and Predeploy Scripts for GitHub Pages - Diff/JSON\nDESCRIPTION: Presents a diff-like patch to package.json scripts block, showing addition of predeploy and deploy scripts. Ensures npm run build is executed before deployment and enables automated publishing to GitHub Pages branch. Must be inserted into the scripts property of package.json.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_97\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\\n+   \"predeploy\": \"npm run build\",\\n+   \"deploy\": \"gh-pages -d build\",\\n    \"start\": \"react-scripts start\",\\n    \"build\": \"react-scripts build\",\n```\n\n----------------------------------------\n\nTITLE: Describing Production Server Request Routing Example\nDESCRIPTION: Example of how requests might be routed in a production environment, differentiating between static React app routes served by a static server and backend API routes (like `/api/todos`) handled by a separate server implementation. This setup motivates the need for development proxying.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_41\n\nLANGUAGE: text\nCODE:\n```\n/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation\n```\n\n----------------------------------------\n\nTITLE: Creating React Component Smoke Tests with Enzyme Shallow Rendering\nDESCRIPTION: Presents a smoke test using Enzyme's `shallow` rendering API. This test checks if the `App` component renders without errors, but unlike `ReactDOM.render`, it only renders the component itself and not its nested children. This approach is useful for isolated unit tests of a component's own rendering logic.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch in Shell\nDESCRIPTION: This command creates a new local Git branch named 'react-taxonomypicker' based on the 'main' branch and switches the current working context to the newly created branch. This isolates changes for a specific feature or fix.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b react-taxonomypicker main\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Preprocessor using Yarn (Shell)\nDESCRIPTION: Installs the `node-sass-chokidar` package as a dependency using the Yarn package manager. This package facilitates Sass/SCSS file compilation.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nyarn add node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Configuring Enzyme Adapter for React 16 - JavaScript\nDESCRIPTION: Configures Enzyme to use the React 16 adapter in the global setup file (commonly 'src/setupTests.js'). This ensures Enzyme is compatible with the React version being used, which is critical for correct operation of shallow and full DOM rendering methods. Place in a setup or configuration file executed before all tests.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\n  \"import { configure } from 'enzyme';\\nimport Adapter from 'enzyme-adapter-react-16';\\n\\nconfigure({ adapter: new Adapter() });\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual WebSocket Proxy in package.json (JSON)\nDESCRIPTION: Demonstrates configuring a proxy specifically for WebSocket connections within the `proxy` object in `package.json`. The `target` should point to a compatible WebSocket server (e.g., `ws://<socket_url>`), and the `ws: true` option must be set to enable WebSocket proxying via `http-proxy-middleware`. Ensure the target server is compatible (e.g., Socket.io requires a Socket.io server).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_48\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    \"/socket\": {\n      // Your compatible WebSocket server\n      \"target\": \"ws://<socket_url>\",\n      // Tell http-proxy-middleware that this is a WebSocket proxy.\n      // Also allows you to proxy WebSocket requests without an additional HTTP request\n      // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: React Router Basename Example for Linking - JavaScript (React)\nDESCRIPTION: Demonstrates using the basename prop with BrowserRouter to ensure that React Router links are rooted at a specific subpath. Ensures correct address generation when deploying a React SPA under a subdirectory. Requires react-router v4 or later.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_91\n\nLANGUAGE: js\nCODE:\n```\n<BrowserRouter basename=\"/calendar\"/>\\n<Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Function using Batching in JavaScript\nDESCRIPTION: This JavaScript custom function `mul2` does not perform the multiplication directly. Instead, it delegates the operation by calling `_pushOperation`, passing the function name and arguments. This queues the operation for batch processing.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Batching/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mul2(first, second) {\n  return _pushOperation(\n    \"mul2\",\n    [first, second]\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying React App to GitHub Pages via NPM Script - Shell\nDESCRIPTION: Shows the command to deploy a built React app to GitHub Pages by running the npm deploy script, assuming predeploy and deploy scripts have been set in package.json. Ensures site is published to gh-pages branch and made live on the specified GitHub Pages URL.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_98\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Reactstrap and Bootstrap via Yarn\nDESCRIPTION: Command to install the `reactstrap` library and the `bootstrap` framework (specifically version 4) using the Yarn package manager. This serves as an alternative to the npm command for projects using Yarn.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nyarn add reactstrap bootstrap@4\n```\n\n----------------------------------------\n\nTITLE: Pushing Merged Changes to Origin in Shell\nDESCRIPTION: This command pushes the local 'main' branch, including the newly merged subtree changes, to the 'origin' remote repository (the user's fork). This updates the forked repository on GitHub with the combined project.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Configuring Enzyme Adapter for React 16 in Jest Setup\nDESCRIPTION: Demonstrates configuring the Enzyme adapter for React 16 within a Jest setup file (typically `src/setupTests.js`). This initialization code ensures Enzyme uses the correct adapter for the React version, enabling Enzyme's rendering APIs like `shallow` and `mount` in tests. This setup file is automatically run by Jest before executing tests.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n```\n\n----------------------------------------\n\nTITLE: Syncing a Forked Git Repository in Shell\nDESCRIPTION: This sequence of Git commands updates a local fork with changes from the upstream (original) repository. It checks out the local 'main' branch, fetches changes from 'upstream', rebases the local 'main' onto the upstream 'main', checks out the feature branch (e.g., 'react-taxonomypicker'), and rebases the feature branch onto the updated 'main' branch.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# assuming you are in the folder of your locally cloned fork....\ngit checkout main\n\n# assuming you have a remote named `upstream` pointing to the official Office-Add-in-samples repository\ngit fetch upstream\n\n# update your local main to be a mirror of what's in the main repository\ngit pull --rebase upstream main\n\n# switch to your branch where you are working, say \"react-taxonomypicker\"\ngit checkout react-taxonomypicker\n\n# update your branch to update it's fork point to the current tip of main & put your changes on top of it\ngit rebase main\n```\n\n----------------------------------------\n\nTITLE: React Component Smoke Test using Enzyme Shallow Rendering - JavaScript\nDESCRIPTION: Performs a smoke test for a React component using Enzyme's shallow rendering. Shallow rendering ensures only the component itself is rendered (not its children), making this ideal for isolated unit tests. Requires Enzyme (and its React adapter) to be configured beforehand.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\n  \"import React from 'react';\\nimport { shallow } from 'enzyme';\\nimport App from './App';\\n\\nit('renders without crashing', () => {\\n  shallow(<App />);\\n});\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Express to Serve index.html for Unmatched Routes - Express - diff\nDESCRIPTION: This diff snippet modifies an Express.js server to serve the `index.html` file for any path not matched by a static asset. By changing the route from `/` to `/*`, it ensures that client-side routes are handled by the React application. The only dependency is Express, and the main input is the HTTP request path. This setup is necessary for client-side routers using the HTML5 History API.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_86\n\nLANGUAGE: diff\nCODE:\n```\n app.use(express.static(path.join(__dirname, 'build')));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, 'build', 'index.html'));\n });\n```\n\n----------------------------------------\n\nTITLE: Pushing Branches to Remote - Git Push Command - Bash\nDESCRIPTION: This snippet demonstrates how to push the current branch and its commits to the remote origin, making the changes available for pull request creation. Requires a working branch and remote permissions. The main input is the branch name, and the command updates the remote repository with the latest commits from local.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <new branch name>\n```\n\n----------------------------------------\n\nTITLE: Deploying React App to Firebase Hosting - CLI Log - sh\nDESCRIPTION: A shell session output that represents the deployment of an app to Firebase Hosting using `firebase deploy`. It shows the deployment process, uploading assets, and final confirmation output, including links to the Firebase project console and live hosting URL. No direct dependencies, but requires prior Firebase CLI setup and login.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_93\n\nLANGUAGE: sh\nCODE:\n```\n    === Deploying to 'example-app-fd690'...\n\n    i  deploying database, hosting\n    ✔  database: rules ready to deploy.\n    i  hosting: preparing build directory for upload...\n    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n    ✔  hosting: 8 files uploaded successfully\n    i  starting release process (may take several minutes)...\n\n    ✔  Deploy complete!\n\n    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview\n    Hosting URL: https://example-app-fd690.firebaseapp.com\n```\n\n----------------------------------------\n\nTITLE: Enabling Client-Side Routing in Apache - Apache - apache\nDESCRIPTION: This .htaccess configuration ensures that all requests not mapped to a real file are rewritten to `index.html`, allowing client-side routers (such as React Router) to handle navigation. Apache must have mod_rewrite enabled. Place this file in the `public` directory; it will be copied to the build folder upon build. Input URLs that don't map to files are routed to the app entry point.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_87\n\nLANGUAGE: apache\nCODE:\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\n----------------------------------------\n\nTITLE: Now CLI Deployment Success Output - plaintext - Plaintext\nDESCRIPTION: This plaintext snippet represents the standard Now CLI output after a successful deployment. It echoes the Now deployment URL with a confirmation message, indicating that the deployment process completed successfully. Useful for confirming and recording deployment endpoints. No direct dependencies, but results from execution of previous CLI commands. Output is an accessible URL for the live app.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_104\n\nLANGUAGE: plaintext\nCODE:\n```\n> Ready! https://your-project-name-tpspyhtdtk.now.sh (copied to clipboard)\n\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme and React 16 Adapter using npm\nDESCRIPTION: Command to install the Enzyme testing utility, the specific adapter for React 16 (`enzyme-adapter-react-16`), and `react-test-renderer` using npm. These are dependencies required for testing React components with Enzyme, particularly for shallow rendering and full mounting tests.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_55\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save enzyme enzyme-adapter-react-16 react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Restoring Project Dependencies via File Renaming\nDESCRIPTION: Instruction to restore project dependencies by renaming the archived NuGet package configuration file (`packages-archive.config`) to the standard `packages.config` within the web project directory (`Outlook.AddInSampleWeb`). This step is necessary before attempting to build or run the solution.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Outlook.ConsumeGraphAPI/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOutlook.AddInSampleWeb/packages-archive.config -> Excel.Outlook.AddInSampleWeb/packages.config\n```\n\n----------------------------------------\n\nTITLE: Fetching JSON Data Asynchronously (JavaScript)\nDESCRIPTION: This snippet shows how to fetch JSON data from a specified URL (`dataSourceUrl`) using the browser's `fetch` API within an Office Add-in. It retrieves the data from a REST API or, in this sample's case, a JSON file hosted alongside the add-in. Basic error handling for the HTTP response is included.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-insert-file/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// STEP 2: Add data from the \"Service\".\nconst sheet = context.workbook.worksheets.getItem(\"Template\");\n\n  // Get data from your REST API. For this sample, the JSON is fetched from a file in the repo.\n  let response = await fetch(dataSourceUrl + \"/data.json\");\n  if (response.ok) {\n    const json = await response.json();\n  } else {\n    console.error(\"HTTP-Error: \" + response.status);\n  }\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook in React Projects - Shell\nDESCRIPTION: This shell command initializes Storybook in your current React application directory. After global Storybook CLI installation, running 'getstorybook' scaffolds necessary files and configuration for interactive component development. Requires prior npm setup and compatible React project structure.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_73\n\nLANGUAGE: sh\nCODE:\n```\ngetstorybook\n```\n\n----------------------------------------\n\nTITLE: Running Office Add-in HTTPS Reverse Proxy for Localhost - Console\nDESCRIPTION: Executes the office-addin-https-reverse-proxy command, redirecting HTTPS traffic to the specified HTTP endpoint (http://localhost:3000). This helps Office clients securely access locally hosted add-in resources, complying with security requirements for HTTPS endpoints. This command should be run after starting the local http-server.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-scenario/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\noffice-addin-https-reverse-proxy --url http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Blazor Add-in Debugging in .csproj.user (XML)\nDESCRIPTION: This XML configuration snippet is added to the add-in project's `.csproj.user` file to enable C# debugging for Blazor Webassembly Office Add-ins in Visual Studio. It defines the `BlazorAppUrl`, pointing to the local development server address and port (which must match `launchSettings.json`), and the `InspectUri`, which provides the necessary pattern for the debugger to connect to the browser's debugging endpoint via the Blazor debug proxy. This setup is crucial for debugging C# code running within the Blazor WASM context of the add-in.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/word-blazor-add-in/README.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <BlazorAppUrl>https://localhost:7126/</BlazorAppUrl>\n    <InspectUri>{wsProtocol}://{url.hostname}:{url.port}/_framework/debug/ws-proxy?browser={browserInspectUri}</InspectUri>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Stopping the Development Server using npm\nDESCRIPTION: This command stops the local development web server that was previously started using `npm start`, `npm run dev-server`, or `npm run start:web`. It also attempts to uninstall the add-in if it was automatically sideloaded during the start process.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/first-run-experience-tutorial/README.md#_snippet_5\n\nLANGUAGE: command line\nCODE:\n```\nnpm stop\n```\n\n----------------------------------------\n\nTITLE: Running office-addin-https-reverse-proxy (Console)\nDESCRIPTION: This console command starts the `office-addin-https-reverse-proxy` tool. It forwards incoming HTTPS requests (typically on port 8443 by default) to the specified local HTTP server URL, which in this case is `http://localhost:3000` where `http-server` is running.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Batching/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\noffice-addin-https-reverse-proxy --url http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Importing SCSS Files Using Include Paths (SCSS)\nDESCRIPTION: Demonstrates how to import SCSS/CSS files within an SCSS file using the `--include-path` configuration shown previously. It imports a local partial (`_colors.scss` from a `styles` subdirectory) and a CSS file directly from a node module (`nprogress`).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_21\n\nLANGUAGE: scss\nCODE:\n```\n@import 'styles/_colors.scss'; // assuming a styles directory under src/\n@import 'nprogress/nprogress'; // importing a css file from the nprogress node module\n```\n\n----------------------------------------\n\nTITLE: Running office-addin-https-reverse-proxy for Localhost Add-in Development - Console\nDESCRIPTION: Starts the office-addin-https-reverse-proxy, routing HTTPS requests on localhost to the local http-server instance. This ensures the add-in can be loaded securely by Outlook for trusted development scenarios. Input is the proxy command; output is an operational proxy server.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-encrypt-attachments/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\noffice-addin-https-reverse-proxy --url http://localhost:3000 \n```\n\n----------------------------------------\n\nTITLE: Defining Basic Component Styles in CSS\nDESCRIPTION: A simple CSS file (`Button.css`) defining styles for a `.Button` class with padding. This file is intended to be imported directly into a JavaScript component as part of a Webpack build process.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.Button {\n  padding: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding External Project as Git Subtree in Shell\nDESCRIPTION: This command merges the history of another repository (e.g., 'projectname' from 'yourgitaccount') into the current repository under a specified prefix directory ('samples/projectname'). It uses the 'git subtree add' command to incorporate the external project while preserving its history.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit subtree add --prefix=samples/projectname https://github.com/yourgitaccount/projectname.git main\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Coverage in package.json (JSON)\nDESCRIPTION: This JSON snippet shows an example of overriding default Jest configuration within the `package.json` file. It demonstrates setting `collectCoverageFrom` to specify files for coverage analysis, `coverageThreshold` to enforce minimum coverage percentages, `coverageReporters` to define output formats, and `snapshotSerializers` for custom snapshot formatting.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-package\",\n  \"jest\": {\n    \"collectCoverageFrom\" : [\n      \"src/**/*.{js,jsx}\",\n      \"!<rootDir>/node_modules/\",\n      \"!<rootDir>/path/to/dir/\"\n    ],\n    \"coverageThreshold\": {\n      \"global\": {\n        \"branches\": 90,\n        \"functions\": 90,\n        \"lines\": 90,\n        \"statements\": 90\n      }\n    },\n    \"coverageReporters\": [\"text\"],\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Local HTTPS Server with http-server\nDESCRIPTION: This command starts the `http-server`. The `-S` flag enables SSL/HTTPS mode. The `-C` flag specifies the path to the SSL certificate file (`localhost.crt`), and `-K` specifies the path to the private key file (`localhost.key`), both generated by `office-addin-dev-certs`. `--cors` enables Cross-Origin Resource Sharing headers, often required for web-based add-ins. The `.` indicates that the server should serve files from the current directory. `-p 3000` specifies that the server should listen on port 3000. Requires `http-server` to be installed and the certificate/key files to be present.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-check-item-categories/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Repository Remotes with Git - Shell\nDESCRIPTION: This snippet shows how to clone your fork of the repository, set the remote upstream to the base OfficeDev repository, and fetch updates from upstream in a shell environment using Git. Dependencies include having Git installed and authentication access to GitHub. Inputs consist of your username and repository name, and outputs are local repositories and established remote configuration. Run these commands in your shell to prepare for synchronizing changes with the main project.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your user name>/<repo name>.git\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd <repo name>\ngit remote add upstream https://github.com/OfficeDev/<repo name>.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Restoring Project Dependencies via File Rename\nDESCRIPTION: Provides instructions on how to restore the project's dependencies by renaming the archived package configuration file. The file 'packages-archive.config' located in the 'Excel.MVCAddInTemplateWeb' directory needs to be renamed to 'packages.config'.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Templates/Excel.MVCAddInTemplate/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nExcel.MVCAddInTemplateWeb/packages-archive.config -> Excel.MVCAddInTemplateWeb/packages.config\n```\n\n----------------------------------------\n\nTITLE: Installing http-server Globally with npm - Console\nDESCRIPTION: This command installs the http-server package globally using npm, allowing you to serve static files over HTTP/HTTPS from any directory. It's typically used for local development testing of web applications, including Office Add-ins. Requires Node.js and npm installed; the command should be executed in a terminal.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-scenario/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Installing http-server via npm - Console Command\nDESCRIPTION: Global npm installation of the 'http-server' package, used to run a local static web server to serve add-in web assets. This command requires Node.js and npm to be installed beforehand. No parameters are needed apart from the package name; installs http-server globally so it can be run from any command line. Primary limitation is that administrative privileges may be required for global installations.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/powerpoint/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Installing http-server Using npm for Localhost Development\nDESCRIPTION: This console command installs http-server globally using npm. The tool is required to serve local files over HTTPS, enabling local development and testing of the Office Add-in. The user must have npm and Node.js installed before executing this command. No input parameters are required for the basic install; output is a working installation of http-server, available globally from the command line.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/excel/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Installing http-server Globally via npm\nDESCRIPTION: Installs the 'http-server' package globally using npm. This package is required to run a simple local web server for hosting the add-in's web files during development.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/auto-open-task-pane/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Processing JSON Data Client-Side for Excel Table Insertion (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates the client-side process for converting JSON data (assumed to be in a variable `data` with a structure like `{ d: [...] }`) into an Excel table using the previously defined extensions. It initializes an `Office.TableData` object, uses the custom `addHeaders` extension to set headers based on the first data row (`data.d[0]`), uses the `addRange` extension to add all data rows (`data.d`), and finally calls `setExcelData` (a presumed function) to inject the `TableData` into the Excel workbook.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Excel.JsonToOfficeTable/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n//initalize the Office.TableData and load headers/rows from data\nvar officeTable = new Office.TableData();\n//add columns to table based on first row of data\nofficeTable.addHeaders(data.d[0]);\n//add rows to table\nofficeTable.addRange(data.d);\n//inject the Office.TableData in the Excel workbook\nsetExcelData(officeTable);\n```\n\n----------------------------------------\n\nTITLE: Installing http-server Globally via npm - Node.js Console\nDESCRIPTION: This command installs the https-enabled static file web server 'http-server' globally using npm. It is required to locally host the Excel custom function add-in web assets on your machine, serving them over HTTPS for Office Add-in compatibility. Make sure you have Node.js and npm installed before running this command; no parameters are needed.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/AzureFunction/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook in Project (Shell)\nDESCRIPTION: This shell command executes the globally installed Storybook CLI's `getstorybook` command within a project directory. It sets up the necessary configuration and dependencies to integrate Storybook into the existing React application.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_74\n\nLANGUAGE: sh\nCODE:\n```\ngetstorybook\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Development Certificates for Office Add-ins - Console\nDESCRIPTION: Uses npx to execute the office-addin-dev-certs install command, generating trusted self-signed certificate files for local web server development. npx comes bundled with npm version 5.2 or higher. Executing this command will create certificate files typically named localhost.crt and localhost.key.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Generating a Self-signed Certificate via npx - Console Command\nDESCRIPTION: Runs office-addin-dev-certs using npx to install a self-signed certificate for local HTTPS development. This enables serving add-in assets securely via http-server. Prerequisites: Node.js, npm, and 'office-addin-dev-certs' package available. The command outputs the folder location with certificate files. Requires creation of certificates prior to serving over HTTPS. No parameters are needed with this usage.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/powerpoint/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing Self-Signed Certificates for Local Development\nDESCRIPTION: This command executes the `office-addin-dev-certs` tool (using `npx` to run the package command directly) to generate and install self-signed SSL certificates (`localhost.crt` and `localhost.key`). These certificates are necessary for running a local web server over HTTPS, allowing secure sideloading of the Office Add-in during development. The command attempts to install and trust the certificate on the local machine.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/word-hello-world/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Referencing Images in CSS with Webpack\nDESCRIPTION: Shows how to reference an image file within a CSS file using a relative path. Webpack identifies these relative module references (starting with `./`), processes the linked asset, and replaces the path with the final compiled URL, ensuring correct asset linking and enabling content hashing for cache busting.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking JavaScript Function from Blazor C# via Interop (C#)\nDESCRIPTION: This C# snippet shows how to invoke a JavaScript function (`insertParagraph`) from within a Blazor component's C# code. It uses the previously obtained `JSModule` reference (an `IJSObjectReference`) and calls `InvokeVoidAsync` to execute the JavaScript function asynchronously without expecting a return value. This pattern enables C# code to trigger actions involving the Office JS API managed in the JavaScript layer.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/word-blazor-add-in/README.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task InsertParagraph() =>\n  await JSModule.InvokeVoidAsync(\"insertParagraph\");\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-dev-certs Globally with npm via the Command Line\nDESCRIPTION: This command installs the office-addin-dev-certs package globally, which is necessary to generate self-signed SSL certificates for secure local Office Add-in development. Node.js and npm must be pre-installed. This tool enables your local web server to run over HTTPS, which is required for Office Add-in web content when sideloading or testing locally.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/powerpoint-hello-world/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing New Git Branch from Upstream Master\nDESCRIPTION: These Git Bash commands navigate into the repository directory, create a new local branch (e.g., 'X2') by pulling the latest 'master' branch from the 'upstream' remote, and then push this new local branch to the 'origin' remote (typically the user's fork). This is done after a previous branch (e.g., 'X') has been successfully merged, ensuring the new branch is based on the most up-to-date code.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd <repo name>\ngit pull upstream master:X2\ngit push origin X2\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a PowerPoint Selection with Office.js using JavaScript\nDESCRIPTION: This async JavaScript function clears the current selection's text in PowerPoint and then sets it to 'Hello world!' using Office.context.document.setSelectedDataAsync with a coercion type of text. It requires the Office.js library and that Office has been initialized (Office.onReady has completed). The options object specifies the coercion type, the method is called twice: first to clear, then to set, enabling idempotent updating of selection content in a user-friendly way.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/powerpoint-hello-world/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function sayHello() {\n  // Set coercion type to text since\n  const options = { coercionType: Office.CoercionType.Text };\n\n  // clear current selection\n  await Office.context.document.setSelectedDataAsync(' ', options);\n\n  // Set text in selection to 'Hello world!'\n  await Office.context.document.setSelectedDataAsync('Hello world!', options);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-https-reverse-proxy for HTTPS Reverse Proxy - Console\nDESCRIPTION: Installs the office-addin-https-reverse-proxy globally using npm. This tool forwards HTTPS traffic to localhost, facilitating development of secure Office Add-ins against local servers. Requires Node.js and npm. Input is an npm command; output is the globally available office-addin-https-reverse-proxy CLI.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-encrypt-attachments/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-https-reverse-proxy \n```\n\n----------------------------------------\n\nTITLE: Installing React Styleguidist via Yarn (Shell)\nDESCRIPTION: This shell command uses Yarn to install the `react-styleguidist` package and adds it as a project dependency. This is an alternative to using npm for package management.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_76\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Processing Results from a Web Worker - Add-ins - JavaScript\nDESCRIPTION: This snippet demonstrates how to set up an event listener for a newly created web worker to handle returned calculation results. It parses the posted data, correlates the jobId with the stored Promise, and resolves or rejects the Promise based on whether the worker indicated a success or error. Dependencies include the 'g_jobIdToPromiseInfoMap' mapping, and code must be executed within the main thread controlling the worker.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/web-worker/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// create a new web worker\\nconst webWorker = new Worker(\\\"functions-worker.js\\\");\\nwebWorker.addEventListener('message', function(event) {\\n    let data = event.data;\\n    if (typeof(data) == \\\"string\\\") {\\n        data = JSON.parse(data);\\n    }\\n\\n    if (typeof(data.jobId) == \\\"number\\\") {\\n        const jobId = data.jobId;\\n        // get the promise info associated with the job id\\n        const promiseInfo = g_jobIdToPromiseInfoMap[jobId];\\n        if (promiseInfo) {\\n            if (data.error) {\\n                // The web worker returned an error\\n                promiseInfo.reject(new Error());\\n            }\\n            else {\\n                // The web worker returned a result\\n                promiseInfo.resolve(data.result);\\n            }\\n            delete g_jobIdToPromiseInfoMap[jobId];\\n        }\\n    }\\n});\n```\n\n----------------------------------------\n\nTITLE: Importing jest-enzyme in the Test Environment Setup - JavaScript\nDESCRIPTION: Import statement for jest-enzyme to be placed in the test setup file (commonly 'src/setupTests.js'). This enables custom matchers from jest-enzyme across all test files, making assertions on React output more expressive.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\n  \"import 'jest-enzyme';\"\n```\n\n----------------------------------------\n\nTITLE: Adding Styleguidist Scripts to npm Scripts - package.json diff\nDESCRIPTION: This diff-format snippet demonstrates how to add 'styleguide' and 'styleguide:build' scripts to your package.json for local development and building of the component style guide using Styleguidist. These scripts invoke the Styleguidist server and static build process, and should be placed in the 'scripts' block of your package.json to facilitate easy use. Requires prior installation of react-styleguidist.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_76\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"styleguide\": \"styleguidist server\",\n+    \"styleguide:build\": \"styleguidist build\",\n     \"start\": \"react-scripts start\",\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificates for Office Add-ins Localhost Server\nDESCRIPTION: This command uses npx to invoke office-addin-dev-certs and install self-signed HTTPS certificates for local development. The utility generates certificate and key files in a specified directory, which are then referenced by http-server. Requires prior installation of office-addin-dev-certs package. Input is the install argument; output is the generation and installation of self-signed certificate files for use with HTTPS servers.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/excel/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Importing SCSS Files with Custom Include Paths (SCSS)\nDESCRIPTION: Demonstrates how to import SCSS files with special include paths set for the Sass compiler, allowing imports from subdirectories or node_modules. This makes style code more modular and maintainable. Assumes Sass is correctly configured with include paths. Input is an SCSS file; output is successful imports of other SCSS modules.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_20\n\nLANGUAGE: SCSS\nCODE:\n```\n@import 'styles/_colors.scss'; // assuming a styles directory under src/\\n@import 'nprogress/nprogress'; // importing a css file from the nprogress node module\n```\n\n----------------------------------------\n\nTITLE: Defining Folder Structure for Create React App Projects - Markdown\nDESCRIPTION: This snippet illustrates the standard directory and file layout generated by Create React App for a new React project. It highlights key entry points like `public/index.html` and `src/index.js`, and demonstrates which files and folders are essential for the application to build and run correctly. This structure is critical for ensuring that project scripts and build tooling process the right assets and maintain compatibility with Webpack.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n```\n\n----------------------------------------\n\nTITLE: Installing React Styleguidist via npm - Shell\nDESCRIPTION: This shell command adds react-styleguidist as a local dependency using npm. Styleguidist enables isolated UI component development and live documentation for React; execute in your project directory to update package.json and node_modules. Node.js and an initialized project are prerequisites.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_74\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Adding Styleguidist Scripts to package.json (diff)\nDESCRIPTION: This diff shows how to add npm scripts to the `scripts` section of `package.json` for running React Styleguidist. The `styleguide` script starts the development server, and `styleguide:build` creates a static build of the style guide.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_77\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"styleguide\": \"styleguidist server\",\n+    \"styleguide:build\": \"styleguidist build\",\n     \"start\": \"react-scripts start\",\n```\n\n----------------------------------------\n\nTITLE: Enabling jest-enzyme Matchers in Jest Setup\nDESCRIPTION: Shows how to import the `jest-enzyme` library in the Jest setup file (`src/setupTests.js`). Simply importing the package makes its custom matchers (like `toContainReact`) available globally within all test files executed by Jest.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'jest-enzyme';\n```\n\n----------------------------------------\n\nTITLE: Setting CI Environment Variable and Running Tests - Windows CMD Batch\nDESCRIPTION: These two CMD command snippets show how to set the CI variable inline when running test and build scripts in Windows command prompt. 'set CI=true&&npm test' runs Jest once as if in a CI environment, and 'set CI=true&&npm run build' ensures lint warnings trigger build failure. No whitespace between commands is required and scripts must be defined in package.json. Use this on Windows for project testing and building outside a CI server.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_68\n\nLANGUAGE: cmd\nCODE:\n```\nset CI=true&&npm test\n```\n\nLANGUAGE: cmd\nCODE:\n```\nset CI=true&&npm run build\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-dev-certs Globally with npm - Node.js - Console\nDESCRIPTION: Installs the 'office-addin-dev-certs' npm package globally to allow generating self-signed SSL certificates needed for HTTPS hosting of Office Add-in web assets. Requires Node.js and npm to be installed. This enables use of the 'npx office-addin-dev-certs install' command. No parameters; run from terminal.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/excel-hello-world/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Installing Global office-addin-dev-certs for Local Development Certificates (Console)\nDESCRIPTION: Installs the office-addin-dev-certs npm package globally, which is used to generate self-signed certificates needed for running a local HTTPS server suitable for Office Add-in development. Node.js and npm are prerequisites, and these certificates will be used by http-server during local testing.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/word/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Proxy Rules with Regex in package.json (JavaScript/JSON)\nDESCRIPTION: Shows how to define multiple proxy rules within the `package.json` `proxy` object for complex scenarios. Keys act as path matchers, supporting regular expressions (e.g., `/api`, `/foo`, `/bar/[^/]*[.]html`, `/baz/.*/.*[.]html`), allowing different configurations (`target`, `ws`, `ssl`, `pathRewrite`, etc.) for various URL patterns. This enables routing requests to different backend services or modifying request paths based on the URL.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_48\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    // Matches any request starting with /api\n    \"/api\": {\n      \"target\": \"<url_1>\",\n      \"ws\": true\n      // ...\n    },\n    // Matches any request starting with /foo\n    \"/foo\": {\n      \"target\": \"<url_2>\",\n      \"ssl\": true,\n      \"pathRewrite\": {\n        \"^/foo\": \"/foo/beta\"\n      }\n      // ...\n    },\n    // Matches /bar/abc.html but not /bar/sub/def.html\n    \"/bar/[^/]*[.]html\": {\n      \"target\": \"<url_3>\",\n      // ...\n    },\n    // Matches /baz/abc.html and /baz/sub/def.html\n    \"/baz/.*/.*[.]html\": {\n      \"target\": \"<url_4>\"\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Office Add-in Developer Certificates with npx (Console)\nDESCRIPTION: This command uses npx to run 'office-addin-dev-certs install', generating and installing self-signed certificates needed for local testing of Outlook add-ins over HTTPS. The command outputs paths to the generated certificate files (e.g., localhost.crt, localhost.key), which you must add to your sample folder.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/outlook-hello-world/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Firebase CLI Initialization Steps - Firebase Hosting Setup - sh\nDESCRIPTION: A shell session transcript showing how to initialize Firebase Hosting with the Firebase CLI. The script walks through associating the project directory with a Firebase project, creating database rules, specifying the public folder (`build`), and configuring the site as a single-page app (SPA). Input is provided through an interactive prompt. No code dependencies, but `firebase-tools` CLI is required.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_92\n\nLANGUAGE: sh\nCODE:\n```\n    === Project Setup\n\n    First, let's associate this project directory with a Firebase project.\n    You can create multiple project aliases by running firebase use --add,\n    but for now we'll just set up a default project.\n\n    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n    === Database Setup\n\n    Firebase Realtime Database Rules allow you to define how your data should be\n    structured and when your data can be read from and written to.\n\n    ? What file should be used for Database Rules? database.rules.json\n    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\n    Future modifications to database.rules.json will update Database Rules when you run\n    firebase deploy.\n\n    === Hosting Setup\n\n    Your public directory is the folder (relative to your project directory) that\n    will contain Hosting assets to uploaded with firebase deploy. If you\n    have a build process for your assets, use your build's output directory.\n\n    ? What do you want to use as your public directory? build\n    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n    ✔  Wrote build/index.html\n\n    i  Writing configuration info to firebase.json...\n    i  Writing project information to .firebaserc...\n\n    ✔  Firebase initialization complete!\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic Based on NODE_ENV in JavaScript\nDESCRIPTION: Illustrates using `process.env.NODE_ENV` in JavaScript to execute code conditionally. In this example, analytics are disabled if the environment is not 'production'. This entire conditional block is often removed by minifiers during a production build (`npm run build`).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_36\n\nLANGUAGE: js\nCODE:\n```\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Environment Variables in Static HTML - HTML\nDESCRIPTION: This HTML code demonstrates how to reference an environment variable, specifically one starting with REACT_APP_, directly within public/index.html using Create React App's templating system. At build time, %REACT_APP_WEBSITE_NAME% will be replaced with the value provided via environment configuration. Inputs are injected at build from the shell or .env configuration. This approach only supports a specific set of variables and is limited to build-time substitution.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_37\n\nLANGUAGE: html\nCODE:\n```\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\n----------------------------------------\n\nTITLE: Defining Persistent Environment Variables in Project .env File - dotenv\nDESCRIPTION: This snippet exemplifies the syntax for defining environment variables in a project's .env file using the dotenv standard, which is consumed automatically by Create React App at build time. The file sets the REACT_APP_SECRET_CODE variable, making it available via process.env in the source code and for HTML interpolation. No inputs are dynamic; this is a static configuration. Variables set this way are persistent until changed or overridden by environment or shell variables.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_40\n\nLANGUAGE: dotenv\nCODE:\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Environment Variables in Linux/macOS (Bash)\nDESCRIPTION: Shows the command for setting a temporary environment variable (`REACT_APP_SECRET_CODE`) and immediately running `npm start` in Bash shells (common on Linux and macOS). The variable is only set for the duration of this command.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n----------------------------------------\n\nTITLE: Firebase CLI Project Initialization Dialogue - Shell\nDESCRIPTION: Shows the interactive prompts and selections during 'firebase init' setup, guiding the configuration for Firebase Hosting and Database Rules, particularly for deploying a production React SPA in the build directory with single-page app rewrites enabled. Outputs include created and modified config files.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_93\n\nLANGUAGE: sh\nCODE:\n```\n    === Project Setup\\n\\n    First, let's associate this project directory with a Firebase project.\\n    You can create multiple project aliases by running firebase use --add,\\n    but for now we'll just set up a default project.\\n\\n    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)\\n\\n    === Database Setup\\n\\n    Firebase Realtime Database Rules allow you to define how your data should be\\n    structured and when your data can be read from and written to.\\n\\n    ? What file should be used for Database Rules? database.rules.json\\n    \\u2714  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\\n    Future modifications to database.rules.json will update Database Rules when you run\\n    firebase deploy.\\n\\n    === Hosting Setup\\n\\n    Your public directory is the folder (relative to your project directory) that\\n    will contain Hosting assets to uploaded with firebase deploy. If you\\n    have a build process for your assets, use your build's output directory.\\n\\n    ? What do you want to use as your public directory? build\\n    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes\\n    \\u2714  Wrote build/index.html\\n\\n    i  Writing configuration info to firebase.json...\\n    i  Writing project information to .firebaserc...\\n\\n    \\u2714  Firebase initialization complete!\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Environment Variables in Windows (cmd.exe)\nDESCRIPTION: Shows the command for setting a temporary environment variable (`REACT_APP_SECRET_CODE`) and immediately running `npm start` in the Windows Command Prompt (cmd.exe). The variable is only set for the duration of this command.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_38\n\nLANGUAGE: cmd\nCODE:\n```\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD and DocumentDB AppSettings in ASP.NET web.config (XML)\nDESCRIPTION: These configuration snippets define essential application settings for integrating Azure Active Directory authentication, specifying OAuth reply URLs, and configuring Azure DocumentDB as the storage backend. The XML <add> elements should be inserted into the <appSettings> section of web.config, with updated values for ida:ClientID, ida:Password, baseUrl, ddb:endpoint, ddb:authKey, and ddb:database. Inputs include Azure app registration and database parameters; outputs determine authentication and data access at runtime. Prerequisites include ASP.NET hosting and valid Azure resources. Incorrect values will cause authentication or data access failures.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Outlook.MailCRM/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- The following are AAD settings for the app -->\\n<add key=\\\"ida:ClientID\\\" value=\\\"cb88b4df-db4b-4cbe-be95-b40f76dccb14\\\" />\\n<add key=\\\"ida:Password\\\" value=\\\"c23vRAjoINSuKnj7tEDYCqwi7pN3cXy2pPdOecv54O4=\\\" />\\n<add key=\\\"ida:AuthorizationUri\\\" value=\\\"https://login.microsoftonline.com\\\" />\\n\\n<!--baseUrl is used for reply URL in OAuth flows...two listed to handle debug/release-->\\n<!--<add key=\\\"baseUrl\\\" value=\\\"https://dxsamples.azurewebsites.net/\\\" />-->\\n<add key=\\\"baseUrl\\\" value=\\\"https://localhost:44321/\\\" />\\n    \\n<!-- The following are setting for Azure DocumentDB, which is the data store for the app -->\\n<add key=\\\"ddb:endpoint\\\" value=\\\"https://dxdemo.documents.azure.com:443/\\\" />\\n<add key=\\\"ddb:authKey\\\" value=\\\"WkPRneEPSrhCdaEVd30e+ag00pbe8B0Ilzn4idJqakWMtFgz7oFBXlrjZvNTqPKzHG25ZHAwZxJrtydo1gBiAw==\\\" />\\n<add key=\\\"ddb:database\\\" value=\\\"dxdemo\\\" />\n```\n\n----------------------------------------\n\nTITLE: Using jest-enzyme Matchers for Simplified Assertions - JavaScript\nDESCRIPTION: Uses jest-enzyme's matcher to check component output in a concise and readable way, simplifying Jest assertions for React output. Requires installing 'jest-enzyme' and importing it into the test environment setup file to enable these matchers globally.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\n  \"expect(wrapper).toContainReact(welcome)\"\n```\n\n----------------------------------------\n\nTITLE: Simplified Component Output Assertion with jest-enzyme\nDESCRIPTION: Demonstrates a more concise way to assert the presence of a React element within an Enzyme wrapper using the `toContainReact` matcher from the `jest-enzyme` library. This provides improved readability compared to the standard `wrapper.contains(element).toEqual(true)` pattern. Requires installing and configuring `jest-enzyme`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(wrapper).toContainReact(welcome)\n```\n\n----------------------------------------\n\nTITLE: Accessing Public Assets in JavaScript using process.env.PUBLIC_URL (JavaScript)\nDESCRIPTION: Demonstrates how to reference assets from the `public` folder within JavaScript code, specifically in a React component. The `process.env.PUBLIC_URL` environment variable provides the base URL for the public folder. This approach is an alternative (\"escape hatch\") to importing assets via Webpack and should be used sparingly due to lack of processing, minification, and content hashing.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in “Adding Images and Fonts” above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Public Assets in HTML\nDESCRIPTION: Illustrates how to reference an asset located in the `public` folder from within an HTML file (like `index.html`). The special variable `%PUBLIC_URL%` is used as a placeholder, which Create React App replaces with the correct absolute path to the public folder during the build process. This ensures assets are accessible even with client-side routing or non-root hosting.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\n----------------------------------------\n\nTITLE: Netlify Redirects Rule for Client-side Routing - plaintext - Plaintext\nDESCRIPTION: This snippet contains a rewrite rule for Netlify, configured by creating a 'public/_redirects' file in the project. The rule ensures that all unmatched routes are redirected to 'index.html' with an HTTP 200 response code, enabling client-side routing with React Router and similar technologies. No runtime dependencies are required besides Netlify's CDN. Inputs are browser requests for client-side routes, and output is that all such requests are correctly handled by the React app. Only works if the 'public' directory is copied to the build output.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_99\n\nLANGUAGE: plaintext\nCODE:\n```\n/*  /index.html  200\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Include Paths in package.json Scripts (Shell)\nDESCRIPTION: Shows modified `build-css` and `watch-css` npm scripts intended for `package.json`. They add the `--include-path` option to `node-sass-chokidar` to allow Sass imports relative to `./src` and `./node_modules` without needing full relative paths.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n\"build-css\": \"node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/\",\n\"watch-css\": \"npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive\",\n```\n\n----------------------------------------\n\nTITLE: Starting the Client SPA (Outlook Add-in) using npm\nDESCRIPTION: These console commands navigate into the 'SPA' directory, install the necessary Node.js dependencies for the single-page application using 'npm install', and then start the development server using 'npm start'. This process typically bundles the add-in and makes it available for sideloading in Outlook.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO-NAA-Identity/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n    cd SPA\n    npm install\n    npm start\n```\n\n----------------------------------------\n\nTITLE: Exporting a Named Variable from ES6 Module (JavaScript)\nDESCRIPTION: Defines and exports a constant named moduleA from a JavaScript module using a named export. This demonstrates the ES6 module syntax for named exports, allowing other modules to selectively import this variable. No dependencies apart from a JavaScript runtime; input/output is a string constant named moduleA.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst moduleA = 'Hello';\\n\\nexport { moduleA };\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Redirects for Client-Side Routing - Plaintext\nDESCRIPTION: This configuration file snippet should be placed in the 'public/_redirects' file to enable support for client-side routing (pushState) with Netlify. It routes all requests to 'index.html', allowing React Router or similar to handle frontend routes. There are no dependencies except correct file placement; the limitation is that all URLs effectively load 'index.html', so proper SPA routing must be in place in the application.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_100\n\nLANGUAGE: plaintext\nCODE:\n```\n/*  /index.html  200\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling SCSS Imports from Node Modules and Source Paths (JSON)\nDESCRIPTION: Configures build-css and watch-css scripts in package.json to add include paths for the Sass compiler, allowing absolute-style imports from src or node_modules. Relies on node-sass-chokidar and assumes a create-react-app structure. Input is a JSON scripts object; output is enhanced import capabilities for SCSS.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n\"build-css\": \"node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/\",\\n\"watch-css\": \"npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive\",\n```\n\n----------------------------------------\n\nTITLE: Monitoring Sheet Changes and Wiring Events in Excel - TypeScript\nDESCRIPTION: This exported asynchronous function sets up event monitoring for changes within an Excel worksheet, using the Excel JavaScript API within an Office Add-in. It retrieves global state, checks if initialization is complete, and attempts to get a table by name ('ExpensesTable'). If the table exists, an event handler is added for selection change, the context is synchronized, and the ribbon is updated. If not, it updates the global state and disables relevant ribbon buttons. Requires Office.js, Excel.run, and prior global state configuration.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-scenario/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function monitorSheetChanges() {\n  try {\n    let g = getGlobal() as any;\n    if (g.state.isInitialized) {\n      await Excel.run(async context => {\n        let table = context.workbook.tables.getItem('ExpensesTable');\n        if (table !== undefined) {\n          table.onSelectionChanged.add(onTableSelectionChange);\n          await context.sync();\n          updateRibbon();\n        } else {\n          g.state.isSumEnabled = false;\n          updateRibbon();\n        }\n      ...\n```\n\n----------------------------------------\n\nTITLE: Dispatching Custom Function Calculations to a Web Worker - Add-ins - JavaScript\nDESCRIPTION: This code snippet defines the 'dispatchCalculationJob' function, which packages a custom function call into a job and forwards it to a web worker. It maintains a mapping of job IDs to Promise resolvers, ensuring that asynchronous results or errors are properly delivered when the worker posts them back. Requires access to the 'g_nextJobId', 'g_jobIdToPromiseInfoMap', and 'getOrCreateWebWorker' dependencies, and is implemented in JavaScript.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/web-worker/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Post a job to the web worker to do the calculation\\nfunction dispatchCalculationJob(functionName, parameters) {\\n    const jobId = g_nextJobId++;\\n    return new Promise(function(resolve, reject) {\\n        // store the promise information.\\n        g_jobIdToPromiseInfoMap[jobId] = {resolve: resolve, reject: reject};\\n        const worker = getOrCreateWebWorker(jobId);\\n        worker.postMessage({\\n            jobId: jobId,\\n            name: functionName,\\n            parameters: parameters\\n        });\\n    });\\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Sass Compilation into Start/Build Scripts (Diff)\nDESCRIPTION: Shows modifications to the `scripts` section of `package.json` (in diff format) to integrate Sass compilation with the main development and build processes. It uses `npm-run-all` to run the CSS watcher (`watch-css`) in parallel (`-p`) with the JS development server (`start-js`) and to run the CSS build (`build-css`) sequentially before the JS build (`build-js`).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n     \"build-css\": \"node-sass-chokidar src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build-js\": \"react-scripts build\",\n+    \"build\": \"npm-run-all build-css build-js\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap CSS Globally\nDESCRIPTION: Demonstrates how to import the main Bootstrap CSS file globally within the application, typically in the entry point file (`src/index.js`). This ensures Bootstrap styles are available throughout the application. It's recommended to place this import before custom component styles to allow overrides.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\n----------------------------------------\n\nTITLE: Installing Office Add-in HTTPS Reverse Proxy - Console\nDESCRIPTION: Installs the office-addin-https-reverse-proxy tool globally via npm, used for rerouting HTTPS requests to a local http-server instance during Office Add-in development and debugging. Node.js and npm are required, and the command should be run in a shell.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-scenario/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-https-reverse-proxy\n```\n\n----------------------------------------\n\nTITLE: Embedding Image in HTML Signature via cid (XML/JavaScript)\nDESCRIPTION: This snippet shows JavaScript code constructing an HTML string for an email signature. It demonstrates embedding an image using an `<img>` tag where the `src` attribute uses the `cid:` prefix followed by a filename (`logoFileName`). This technique requires the image to be attached separately, often using `addFileAttachmentFromBase64Async`, before setting the signature with `setSignatureAsync`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-set-signature/README.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\nstr +=\n    \"<td style='border-right: 1px solid #000000; padding-right: 5px;'><img src='cid:\" +\n    logoFileName +\n    \"' alt='MS Logo' width='24' height='24' /></td>\";\n\n```\n\n----------------------------------------\n\nTITLE: Writing to Outlook Email Message Body with Office.js in JavaScript\nDESCRIPTION: This function writes 'Hello world!' to the body of a new Outlook email message using the Office.js API. It calls Office.context.mailbox.item.body.setAsync() with HTML coercion, and provides a callback that checks operation success and writes an error message if needed. Prerequisites include Office.js APIs available via Office Add-in context in Outlook.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/outlook-hello-world/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Writes 'Hello world!' to a new message body.\n */\nfunction sayHello() {\n  Office.context.mailbox.item.body.setAsync(\n    'Hello world!',\n    {\n      coercionType: 'html', // Write text as HTML\n    },\n\n    // Callback method to check that setAsync succeeded\n    function (asyncResult) {\n      if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n        write(asyncResult.error.message);\n      }\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Office.js API in JavaScript\nDESCRIPTION: This snippet initializes the Office JavaScript API by calling Office.onReady() and ensures the Office add-in is ready before making API calls. The 'info' parameter gives context about the host application. This is required in every Office.js add-in before invoking additional Office APIs for interacting with Outlook.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/outlook-hello-world/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nOffice.onReady((info) => {});\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Function on UI Thread (Excel Formula)\nDESCRIPTION: This Excel formula calls the custom function `WebWorkerSample.TEST_UI_THREAD`. It takes a parameter (e.g., 2) and performs the calculation directly on the main UI thread, potentially blocking the Excel interface during execution.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-add-in-custom-functions-using-web-workers/README.md#_snippet_5\n\nLANGUAGE: excel-formula\nCODE:\n```\n=WebWorkerSample.TEST_UI_THREAD(2)\n```\n\n----------------------------------------\n\nTITLE: Rendered Output Example for Environment Variable Interpolation - HTML\nDESCRIPTION: This HTML snippet shows the output generated after build-time interpolation, where the React component consuming process.env variables has rendered real values. It demonstrates how injected environment-specific data appears in the DOM for users and developers. The snippet presumes prior build-time configuration and the presence of source environment variables. It is purely illustrative and intended for visual verification; input values are not to be stored in version control.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <small>You are running this application in <b>development</b> mode.</small>\n  <form>\n    <input type=\"hidden\" value=\"abcdef\" />\n  </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling Custom JSON Tracking API using jQuery (JavaScript)\nDESCRIPTION: This JavaScript snippet uses the jQuery `$.getJSON` method to make an asynchronous GET request to the custom server-side API endpoint `/api/UPSTracking/`. It appends the extracted `trackingNumber` to the URL and defines a callback function to handle the JSON data returned by the API upon success. This is used to fetch tracking details for the specific number.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Outlook.UpsPackageTracker/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n $.getJSON(\"../../api/UPSTracking/\" + trackingNumber, {}, function (data) { ... });\n```\n\n----------------------------------------\n\nTITLE: Sample Project Directory Structure (Text)\nDESCRIPTION: This represents the file and folder structure of the sample Excel Add-in project. It highlights key files like the manifest (`manifest*.xml`), package configuration (`package.json`), source code (`src/`), including task pane (`taskpane/`) and custom function logic (`functions/`), webpack configuration (`webpack.config.js`), and VS Code settings (`.vscode/`).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-add-in-custom-functions-using-web-workers/README.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n| .eslintrc.json\n| .gitignore\n| .vscode/\n|   | extensions.json\n|   | launch.json               Launch and debug configurations\n|   | settings.json             \n|   | tasks.json                \n| assets/                       Static assets, such as images\n| babel.config.json\n| manifest*.xml                 Manifest file\n| package.json                  \n| README.md                     \n| RUN_WITH_EXTENSION.md         \n| SECURITY.md\n| src/                          Add-ins source code\n|   | taskpane/\n|   |   | taskpane.html         Task pane entry HTML\n|   |   | taskpane.js           Add API calls and logic here\n|   | functions/\n|   |   | functions.js          Custom function JavaScript\n|   |   | functions-worker.js   Web worker JavaScript\n| webpack.config.js             Webpack config\n```\n\n----------------------------------------\n\nTITLE: Installing gh-pages and Adding Deploy Scripts - GitHub Pages Deployment - sh\nDESCRIPTION: Shows how to install the `gh-pages` package for publishing to GitHub Pages, using either npm or yarn. Once installed, the `deploy` script can be added to package.json. Requires npm or yarn as a prerequisite. Used before actual deployment.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_95\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save gh-pages\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add gh-pages\n```\n\n----------------------------------------\n\nTITLE: Mapping Outlook Events to Handlers in Manifest (XML)\nDESCRIPTION: This XML snippet uses the `<LaunchEvents>` element within an Outlook add-in manifest to map specific Outlook events to JavaScript function names. It defines handlers for `OnNewMessageCompose`, `OnNewAppointmentOrganizer`, `OnMessageSend`, and `OnAppointmentSend`. The `SendMode` attribute (e.g., `SoftBlock`, `Block`) is specified for send events to control user behavior if the add-in conditions are not met or the add-in fails.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-check-item-categories/README.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<LaunchEvents>\n    <LaunchEvent Type=\"OnNewMessageCompose\" FunctionName=\"onMessageComposeHandler\"/>\n    <LaunchEvent Type=\"OnNewAppointmentOrganizer\" FunctionName=\"onAppointmentComposeHandler\"/>\n    <LaunchEvent Type=\"OnMessageSend\" FunctionName=\"onMessageSendHandler\" SendMode=\"SoftBlock\"/>\n    <LaunchEvent Type=\"OnAppointmentSend\" FunctionName=\"onAppointmentSendHandler\" SendMode=\"Block\"/>\n</LaunchEvents>\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder Meta Tags in HTML for Server-Side Injection\nDESCRIPTION: Illustrates adding placeholder values (e.g., `__OG_TITLE__`, `__OG_DESCRIPTION__`) within `<meta>` tags in the `public/index.html` file. This technique allows a backend server to dynamically replace these placeholders with appropriate content based on the requested route before serving the HTML, enabling dynamic meta tags for SEO and social media sharing in a client-side rendered application.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_51\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\n----------------------------------------\n\nTITLE: Defining Event-Based Runtime in Unified Manifest (JSON)\nDESCRIPTION: This JSON snippet, part of the `manifest.json` file, defines a runtime configuration for an Outlook add-in's event-based activation. It specifies capability requirements (Mailbox API version 1.5), a unique runtime ID (`runtime_1`), type (`general`), code resources (HTML page and shared JS script), a short lifetime, and an action (`checkSignature`) to be executed.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-set-signature/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n \"runtimes\": [\n                {\n                    \"requirements\": {\n                        \"capabilities\": [\n                            {\n                                \"name\": \"Mailbox\",\n                                \"minVersion\": \"1.5\"\n                            }\n                        ]\n                    },\n                    \"id\": \"runtime_1\",\n                    \"type\": \"general\",\n                    \"code\": {\n                        \"page\": \"https://localhost:3000/autorunweb.html\",\n                        \"script\": \"https://localhost:3000/autorunshared.js\"\n                    },\n                    \"lifetime\": \"short\",\n                    \"actions\": [\n                        {\n                            \"id\": \"checkSignature\",\n                            \"type\": \"executeFunction\",\n                            \"displayName\": \"checkSignature\"\n                        }\n                    ]\n                },\n...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Office Add-in Settings and Capabilities in XML\nDESCRIPTION: The manifest.xml file, located in the project root, defines the settings and capabilities of the Office Add-in. It uses XML format and its validity can be checked using the 'Validate Manifest File' option in the Office Add-ins Development Kit.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/word-ai-generated-content/RUN_WITH_EXTENSION.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n./manifest.xml\n```\n\n----------------------------------------\n\nTITLE: Structuring the Task Pane UI with HTML\nDESCRIPTION: The taskpane.html file provides the HTML markup that defines the structure and content displayed within the Office Add-in's task pane.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/word-ai-generated-content/RUN_WITH_EXTENSION.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n./src/taskpane/taskpane.html\n```\n\n----------------------------------------\n\nTITLE: Importing Service Worker Unregister Function in JavaScript\nDESCRIPTION: This snippet imports the `unregister` function from the `./registerServiceWorker` file. This function is used to disable a previously registered service worker in a Progressive Web App, effectively opting out of the offline-first caching strategy. This is typically done in `src/index.js` when switching from `registerServiceWorker` to `unregister`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { unregister } from './registerServiceWorker';\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Start Script for PowerPoint in package.json\nDESCRIPTION: This JSON line demonstrates how to modify the `start` script in the `package.json` file. It instructs the `office-addin-debugging` tool to launch the add-in specifically in the desktop version of Microsoft PowerPoint upon running `npm run start`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-SSO-NAA/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"start\": \"office-addin-debugging start manifest.xml desktop --app powerpoint\",\n```\n\n----------------------------------------\n\nTITLE: Button Component Styling with CSS in React (CSS)\nDESCRIPTION: Defines a CSS class '.Button' to be used by a React component for padding and layout purposes. Intended for import using Webpack's CSS loader in conjunction with a JS file; no dependencies besides a standards-compliant CSS environment or a build tool like Webpack. The input is any element with class 'Button', and the output is that it receives 20px padding.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_13\n\nLANGUAGE: CSS\nCODE:\n```\n.Button {\\n  padding: 20px;\\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Local HTTPS Web Server for Add-in Hosting - http-server - Console\nDESCRIPTION: Runs the 'http-server' CLI tool to serve files from the current directory over HTTPS using previously generated certificates for localhost, enabling local Office Add-in development. Requires http-server and self-signed certificates (localhost.crt, localhost.key) in the working directory. The command enables CORS (cross-origin resource sharing) and runs the server on port 3000.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/excel-hello-world/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Starting PowerPoint Add-in for Office on the Web with Document URL - Command Line\nDESCRIPTION: This command starts the local web server and sideloads the add-in into a specified PowerPoint document online. Dependencies: npm, required scripts, and permissions to the target document location. Key parameter: --document {url}, where {url} must be replaced with the user's OneDrive or SharePoint PowerPoint file link. Input: PowerPoint document URL. Output: Web instance of PowerPoint opens with the add-in loaded into the specified document. On Mac, the {url} should be enclosed in single quotes.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/powerpoint-tutorial-yo/README.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start:web -- --document {url}\n```\n\n----------------------------------------\n\nTITLE: Building Project for Azure Deployment\nDESCRIPTION: Executes the `npm run build` script. This command rebuilds the project, incorporating changes like the updated Azure deployment endpoint configured in `webpack.config.js`, and generates a new `manifest.json` file in the `dist` folder suitable for Azure hosting.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-spam-reporting/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running http-server with HTTPS and CORS (Console)\nDESCRIPTION: This console command starts the `http-server` on port 3000. The `-S` flag enables HTTPS (requiring cert.pem and key.pem files in the directory), `--cors` enables Cross-Origin Resource Sharing headers, and `.` specifies the current directory as the root.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Batching/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-dev-certs Globally using npm (Console)\nDESCRIPTION: Installs the `office-addin-dev-certs` package globally using npm. This tool is necessary for generating the self-signed SSL certificates required to run the local development server over HTTPS, which is often a requirement for Office Add-ins during local testing.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-keyboard-shortcuts/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Running Local HTTPS Server with CORS using http-server (Console)\nDESCRIPTION: This console command starts the `http-server` in the current directory (`.`). The `-S` flag enables HTTPS (requiring cert.pem and key.pem files), `--cors` enables Cross-Origin Resource Sharing headers, and `-p 3000` specifies port 3000. This setup is used to host the add-in's web files locally for development. Requires `http-server` to be installed and SSL certificate files.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Storage/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Starting a Local HTTPS Server with http-server\nDESCRIPTION: Starts the http-server on port 3000, serving files from the current directory ('.'). It uses HTTPS ('-S') with the specified certificate ('-C localhost.crt') and key ('-K localhost.key') files. CORS is enabled ('--cors') to allow requests from the Office host application.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/auto-open-task-pane/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Starting HTTPS Server for Local Outlook Add-in Development - Console\nDESCRIPTION: Runs the http-server package in HTTPS mode using the generated self-signed certificates (localhost.crt/key), enables CORS, and sets the port to 3000. This will serve the contents of the current folder over HTTPS at https://localhost:3000, which is required for Office Add-in manifests referencing local resources. The command accepts certificate file paths, CORS policy, and port configuration as parameters.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage for GitHub Pages Deployment - package.json - js\nDESCRIPTION: This package.json snippet sets the `homepage` field to the GitHub Pages URL, which ensures assets and routing work correctly when serving the built React app from a GitHub Pages site. Should be added before building the app. No dependencies required beyond Create React App.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_94\n\nLANGUAGE: js\nCODE:\n```\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\n----------------------------------------\n\nTITLE: Starting a Local CORS-enabled HTTPS Server with http-server - Node.js Console\nDESCRIPTION: This command runs a static file server with SSL support using http-server, serving files from the current directory. The '-S' option enables HTTPS using certificate files, '--cors' enables Cross-Origin Resource Sharing, and '-p 3000' sets the port. The web server will use cert.pem and key.pem from the working directory. Required prerequisites are Node.js, npm, http-server, and the SSL certificates, as described earlier in the documentation.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/AzureFunction/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Starting PowerPoint Add-in with npm - Command Line\nDESCRIPTION: This command runs the add-in locally by starting the development server and launching PowerPoint with your sideloaded add-in on Windows. It depends on npm and project-level scripts and is intended to be run from the project root. Input: none. Output: Launches the add-in within PowerPoint.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/powerpoint-tutorial-yo/README.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running a Local HTTPS Web Server with http-server and Certificates on the Command Line\nDESCRIPTION: This command launches http-server bound to HTTPS using specified certificate and key files (localhost.crt and localhost.key) with CORS enabled and on port 3000. It is used to serve the add-in's local directory, making all files accessible to PowerPoint during development and sideloading of the add-in. The proper certificate setup is required for Office to accept the local web server as a trusted host.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/powerpoint-hello-world/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server with HTTPS (Console)\nDESCRIPTION: This command starts the `http-server` to serve files from the current directory (`.`) on port 3000 (`-p 3000`). It enables HTTPS (`-S`) using the specified certificate (`-C localhost.crt`) and key (`-K localhost.key`) files, and enables Cross-Origin Resource Sharing (`--cors`).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-insert-file/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Adding Sass Build and Watch Scripts to package.json (Diff)\nDESCRIPTION: Illustrates adding `build-css` and `watch-css` scripts to the `scripts` section of `package.json` using diff format. These scripts utilize `node-sass-chokidar` to compile Sass files from the `src/` directory to the `src/` directory and watch for changes.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"build-css\": \"node-sass-chokidar src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n   }\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Sample (Shell)\nDESCRIPTION: These shell commands are used to install dependencies, build the development version of the add-in, and start the local development server. `npm install` fetches project dependencies, `npm run build:dev` compiles the source code for development, and `npm run start` launches the web server and facilitates sideloading the add-in into Outlook.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Event-SSO-NAA/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Injecting Server Data into HTML via Global JavaScript Variable\nDESCRIPTION: Shows how to embed server-provided data directly into an HTML file by assigning it to `window.SERVER_DATA` using a placeholder like `__SERVER_DATA__`. This placeholder is intended to be replaced by the server with actual, sanitized JSON data before sending the response to the client. Emphasizes the critical need for data sanitization to prevent XSS attacks.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_52\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies using npm\nDESCRIPTION: This command is executed in the project's source directory using a command prompt (like CMD or PowerShell). It reads the `package.json` file and downloads/installs all the necessary Node.js package dependencies required to run the server-side component of the Outlook add-in.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Outlook.RelatedData/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Office Add-in Reverse Proxy for Localhost (Console)\nDESCRIPTION: This console command runs the `office-addin-https-reverse-proxy` tool. It proxies incoming HTTPS requests (typically on port 8443 by default) to the specified local HTTP server URL (`http://localhost:3000`). This allows the Office application to load the add-in from the local development server over HTTPS. Requires the reverse proxy tool to be installed and the local server to be running.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Storage/README.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\noffice-addin-https-reverse-proxy --url http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook CLI Globally (Shell)\nDESCRIPTION: This shell command uses npm to install the `@storybook/cli` package globally (`-g`). This command-line interface is required to initialize and manage Storybook projects.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_73\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @storybook/cli\n```\n\n----------------------------------------\n\nTITLE: Importing and Switching Between Multiple Locales in Moment.js - JavaScript\nDESCRIPTION: This snippet shows how to import and switch between multiple Moment.js locales (French and Spanish) in a JavaScript project. Prerequisites include installing the 'moment' npm package. By importing each locale file and using 'moment.locale()', the application can dynamically switch the active locale at runtime. Only previously imported locales can be selected; attempting to switch to missing locales will be ineffective.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_104\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport moment from 'moment';\\nimport 'moment/locale/fr';\\nimport 'moment/locale/es';\\n\\n// ...\\n\\nmoment.locale('fr');\n```\n\n----------------------------------------\n\nTITLE: Scheduling Batch Request Execution in JavaScript\nDESCRIPTION: This snippet, part of the `_pushOperation` function, demonstrates how a remote request is scheduled. It uses `setTimeout` to delay the execution of `_makeRemoteRequest` by 100 milliseconds, allowing multiple operations to be batched together if they occur in quick succession. A flag `_isBatchedRequestScheduled` prevents multiple timeouts from being set simultaneously.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Batching/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// If a remote request hasn't been scheduled yet,\n// schedule it after a certain timeout, e.g. 100 ms.\nif (!_isBatchedRequestScheduled) {\n  _isBatchedRequestScheduled = true;\n  setTimeout(_makeRemoteRequest, 100);\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Secure Local Web Server with CORS Support - Console Command\nDESCRIPTION: Executes http-server with options for SSL certificate, key, CORS, and specific port configuration. Serves the current folder over HTTPS on port 3000 using the provided certificate files. Dependencies include prior installation of http-server, and presence of localhost.crt and localhost.key in the project folder. The key parameters are for SSL ('-S', '-C', '-K'), CORS ('--cors'), and port ('-p 3000'). Limitations: certificates must be valid and trusted by the browser.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/powerpoint/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S -C localhost.crt -K localhost.key --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Setting CI Environment Variable and Running Tests - Bash\nDESCRIPTION: These bash command snippets allow you to set the CI environment variable temporarily for npm scripts on Linux or macOS. Setting CI=true before npm test or npm run build causes Jest or the build process to recognize CI mode, disabling interactive watchers and enforcing stricter error checks. Use these on Unix-like systems for locally simulating CI behavior.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm test\n```\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm run build\n```\n\n----------------------------------------\n\nTITLE: Running the Office Add-in HTTPS Reverse Proxy via Console\nDESCRIPTION: This command starts the office-addin-https-reverse-proxy to route network traffic from Office to a local development server. The '--url' argument specifies the target local server. Required for development or debugging add-ins that must communicate over a secure context.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-contextual-tabs/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\noffice-addin-https-reverse-proxy --url http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Pane Auto-Open in Add-in Manifest (XML)\nDESCRIPTION: Defines an Action of type 'ShowTaskpane' within the Office Add-in manifest file. Setting the 'TaskpaneId' element to the specific value 'Office.AutoShowTaskpaneWithDocument' designates this task pane as the one that should automatically open if the document setting is enabled. 'SourceLocation' specifies the URL of the task pane's content.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/auto-open-task-pane/README.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<Action xsi:type=\"ShowTaskpane\">\n  <TaskpaneId>Office.AutoShowTaskpaneWithDocument</TaskpaneId>\n  <SourceLocation resid=\"Contoso.Taskpane.Url\" />\n</Action>\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme & Related Testing Dependencies - Shell\nDESCRIPTION: Installs Enzyme and necessary adapters for React 16 along with react-test-renderer. Compatible with npm or yarn for dependency management. These libraries are required for more advanced React component testing strategies, notably shallow rendering.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_56\n\nLANGUAGE: Shell\nCODE:\n```\n  \"npm install --save enzyme enzyme-adapter-react-16 react-test-renderer\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n  \"yarn add enzyme enzyme-adapter-react-16 react-test-renderer\"\n```\n\n----------------------------------------\n\nTITLE: Defining Event Activation Functions in Manifest (XML)\nDESCRIPTION: Maps Outlook compose events (new message/appointment) to the checkSignature() JavaScript handler via LaunchEvents in manifest.xml. The snippet ensures the add-in runs checkSignature() automatically on message or appointment creation. Dependencies include an implemented checkSignature JavaScript function and proper manifest referencing. Inputs: event types, function name; outputs: triggers function at event. Only valid in add-ins with launch event support.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-set-signature/README.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\\u003cLaunchEvents\\u003e\\n  \\u003cLaunchEvent Type=\\\"OnNewMessageCompose\\\" FunctionName=\\\"checkSignature\\\" /\\u003e\\n  \\u003cLaunchEvent Type=\\\"OnNewAppointmentOrganizer\\\" FunctionName=\\\"checkSignature\\\" /\\u003e\\n\\u003c/LaunchEvents\\u003e\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme and React 16 Adapter using Yarn\nDESCRIPTION: Command to install the Enzyme testing utility, the specific adapter for React 16 (`enzyme-adapter-react-16`), and `react-test-renderer` using Yarn. This provides an alternative package manager command to achieve the same dependency setup as the npm example for testing React components with Enzyme.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\nyarn add enzyme enzyme-adapter-react-16 react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Deploying React App with Now CLI - sh - Shell\nDESCRIPTION: This shell snippet shows the recommended workflow for deploying a React app with the Now (Vercel) CLI. It covers installing the CLI globally, building the app, changing into the build directory, and deploying with 'now'. Output includes a deployment URL. Requires Node.js, npm, and Now CLI as prerequisites. Key parameters include build path and project name. The output is a statically hosted site accessible via the now.sh URL.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_100\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g now\nnpm run build\ncd build\nnow --name your-project-name\n\n```\n\n----------------------------------------\n\nTITLE: Configuring UPS API Credentials in web.config (XML)\nDESCRIPTION: This XML snippet shows the `appSettings` section within the `web.config` file of the server-side web application. It defines keys for storing the UPS Developer Kit username, password, and access license number, which are required to authenticate requests to the UPS Tracking Service. Users must replace the placeholder values with their actual credentials.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Outlook.UpsPackageTracker/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <appSettings>\n    <add key=\"UPSSecurityUsernameToken.Username\" value=\"[enter your username]\" />\n    <add key=\"UPSSecurityUsernameToken.Password\" value=\"[enter your password]\" />\n    <add key=\"UPSSecurityServiceAccessToken.AccessLicenseNumber\" value=\"[enter your access license number]\" />\n  </appSettings>\n  <system.web>\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed SSL Certificate for Localhost (Console)\nDESCRIPTION: Uses the `office-addin-dev-certs` tool via `npx` (Node Package Execute) to generate the necessary self-signed SSL certificate files (typically localhost.crt and localhost.key). This is required to run a local HTTPS server for add-in development, ensuring a secure connection.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-save-custom-settings/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS for Development Server on Windows (cmd)\nDESCRIPTION: Command for the Windows Command Prompt (`cmd.exe`) to enable HTTPS for the Create React App development server. It sets the `HTTPS` environment variable to `true` for the subsequent `npm start` command. This feature requires `react-scripts@0.4.0` or higher and uses a self-signed certificate, which will likely cause browser security warnings.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_50\n\nLANGUAGE: cmd\nCODE:\n```\nset HTTPS=true&&npm start\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests Once in Windows CMD (cmd)\nDESCRIPTION: This command sets the `CI` environment variable to `true` and then runs `npm test` within the Windows Command Prompt (cmd.exe). Setting `CI=true` forces Jest (via react-scripts) to run tests once and exit, rather than entering the interactive watch mode. The lack of whitespace around `&&` is intentional for compatibility.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_67\n\nLANGUAGE: cmd\nCODE:\n```\nset CI=true&&npm test\n```\n\n----------------------------------------\n\nTITLE: Declaring Event Handlers for Outlook Add-in Events - XML\nDESCRIPTION: This XML defines the event mapping in the Outlook add-in manifest, associating specific Compose, Attendee, Time, and Attachment-based events to JavaScript handler functions. Each <LaunchEvent> entry links a user or system action in the Outlook UI to a named function within the add-in's loaded runtime. For correct operation, the runtime JavaScript must implement each referenced handler function. Inputs are event types; outputs are JavaScript handler invocations in response to events.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-encrypt-attachments/README.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<LaunchEvents>\\n  <LaunchEvent Type=\\\"OnNewMessageCompose\\\" FunctionName=\\\"onMessageComposeHandler\\\" /> \\n  <LaunchEvent Type=\\\"OnNewAppointmentOrganizer\\\" FunctionName=\\\"onAppointmentComposeHandler\\\" />                 \\n  <LaunchEvent Type=\\\"OnAppointmentAttendeesChanged\\\" FunctionName=\\\"onAppointmentAttendeesChangedHandler\\\" />\\n  <LaunchEvent Type=\\\"OnAppointmentTimeChanged\\\" FunctionName=\\\"onAppointmentTimeChangedHandler\\\" /> \\n  <LaunchEvent Type=\\\"OnMessageAttachmentsChanged\\\" FunctionName=\\\"onMessageAttachmentsChangedHandler\\\" /> \\n  <LaunchEvent Type=\\\"OnAppointmentAttachmentsChanged\\\" FunctionName=\\\"onAppointmentAttachmentsChangedHandler\\\" />\\n</LaunchEvents>\n```\n\n----------------------------------------\n\nTITLE: Adding analyze Script to package.json - Diff\nDESCRIPTION: Modifies the scripts section of package.json, adding an 'analyze' script that invokes source-map-explorer on the production build artifacts. This helps automate bundle analysis, typically after building with npm run build. The 'analyze' script targets built JavaScript files matching main.* in the build/static/js path.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_80\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"analyze\": \"source-map-explorer build/static/js/main.*\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch Changes to GitHub with Git - Shell\nDESCRIPTION: This snippet shows how to push your new local branch and its commits to your GitHub fork using Git from the shell. Ensure the branch exists and you have network connectivity and permissions for the remote repository. The command 'git push origin <new branch name>' uploads your local branch, making your changes ready for pull requests or collaboration. The output is an updated branch on your GitHub remote.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin <new branch name>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Local Server for XML Manifest\nDESCRIPTION: Runs `npm install` to download project dependencies. Then, executes `npm run start:xml` to start the local web server and sideload the add-in only manifest (`manifest-localhost.xml`) into Outlook for testing when using the localhost hosting option with the XML manifest.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-spam-reporting/README.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nnpm install\nnpm run start:xml\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing Self-Signed Certificates for Local Development\nDESCRIPTION: This command executes the `office-addin-dev-certs` tool (using `npx` to run the locally or globally installed package) to generate the necessary self-signed SSL certificate files (`localhost.crt`, `localhost.key`) and attempts to install and trust them on the local machine. These certificates are required by the local web server (http-server) to serve the add-in content securely over HTTPS. The command typically outputs the folder where the certificate files were generated.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-check-item-categories/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Installing jest-enzyme Dependency - Shell\nDESCRIPTION: Shows how to install the 'jest-enzyme' package using npm or yarn, enabling additional matchers for improved testing syntax with Jest and Enzyme. This package should be set up in all environments where advanced Jest/Enzyme matchers are desired.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_61\n\nLANGUAGE: Shell\nCODE:\n```\n  \"npm install --save jest-enzyme\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n  \"yarn add jest-enzyme\"\n```\n\n----------------------------------------\n\nTITLE: Setting the start_url for PWA Routing - Web App Manifest - js\nDESCRIPTION: This manifest.json snippet sets the `start_url` to \".\" (the current directory), rather than defaulting to `/index.html`. This ensures PWAs launched from the device home screen are started at the root, which is necessary for client-side routing. This value should be updated in `public/manifest.json`. No dependencies required beyond the manifest file.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_88\n\nLANGUAGE: js\nCODE:\n```\n  \"start_url\": \".\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Event-based Runtime and Resource URLs in Outlook Add-in Manifest (XML)\nDESCRIPTION: This XML snippet configures the add-in's runtime for event-based activation. The <Runtime> element references a resource ID for the HTML page (used by Outlook on the web and new Outlook for Windows), while the <Override> element provides the JavaScript file for classic Outlook on Windows. The <bt:Url> elements define the actual resource URLs. Prerequisites include a valid Outlook Add-in project structure and hosting of the referenced files at the provided URLs. No direct input/output, but these settings ensure Outlook loads the correct handler resources for event-based add-in events.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-tag-external/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Runtime resid=\\\"WebViewRuntime.Url\\\">\\n  <Override type=\\\"javascript\\\" resid=\\\"JSRuntime.Url\\\"/>\\n</Runtime>\\n...\\n<bt:Url id=\\\"WebViewRuntime.Url\\\" DefaultValue=\\\"https://officedev.github.io/Office-Add-in-samples/Samples/outlook-tag-external/src/commands.html\\\" />\\n<bt:Url id=\\\"JSRuntime.Url\\\" DefaultValue=\\\"https://officedev.github.io/Office-Add-in-samples/Samples/outlook-tag-external/src/commands/commands.js\\\" />\n```\n\n----------------------------------------\n\nTITLE: Staging and Committing Changes - Git Add and Commit Commands - Bash\nDESCRIPTION: These commands stage all changed files and commit them to the local Git repository with a provided commit message. The procedure requires git to be installed and the workspace containing the intended changes. The parameter '-m' adds a message, '-v' enables verbose output, and '-a' includes all changes, with expected output being a new commit object registered in the local repository.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -v -a -m \"<Describe the changes made in this commit>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Application ID in authconfig.js (JavaScript)\nDESCRIPTION: This snippet shows the instruction to replace a placeholder string within the `src/launchevent/authconfig.js` file with the actual Application (client) ID obtained from the Azure App Registration. This ID is crucial for MSAL.js to identify the application when requesting authentication tokens.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Event-SSO-NAA/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In src/launchevent/authconfig.js\n// Replace the placeholder \"Enter_the_Application_Id_Here\" with the Application ID that you copied.\n```\n\n----------------------------------------\n\nTITLE: Installing http-server for Serving Files Locally via Console\nDESCRIPTION: This console command installs the 'http-server' Node.js tool globally, which enables serving web files (such as Office Add-in resources) locally over HTTP/HTTPS. Node.js and npm must be installed. This is required for developers intending to run or debug the add-in from localhost.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-contextual-tabs/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Installing Office Add-in Development Certificates - Node.js Console\nDESCRIPTION: This command uses npx to execute the office-addin-dev-certs tool, which generates and installs self-signed HTTPS certificates for developing Office Add-ins. These certificates are needed for local HTTPS hosting so Excel accepts the add-in during development. Dependencies include Node.js, npm, and the office-addin-dev-certs package, which npx will fetch if missing. No input parameters are required.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/AzureFunction/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpx office-addin-dev-certs install\n```\n\n----------------------------------------\n\nTITLE: Setting Development Host in .env.development (Shell/Env)\nDESCRIPTION: Defines the `HOST` environment variable within a `.env.development` file in the project root. This specifies the allowed hostname for the development server, providing a workaround for the \"Invalid Host header\" error when accessing the development server from a specific non-localhost address (e.g., `mypublicdevhost.com`) during remote development.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nHOST=mypublicdevhost.com\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Preprocessor for Node Projects (Shell)\nDESCRIPTION: Provides the shell command to add node-sass-chokidar as a project dependency, allowing for Sass compilation and watching within Node.js/NPM workflows. Intended for environments already using Node.js and NPM. Input is a shell command; output is a change in project dependencies enabling Sass support.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-https-reverse-proxy via npm (Console)\nDESCRIPTION: This console command uses npm to install the `office-addin-https-reverse-proxy` tool globally. This tool is used to proxy HTTPS requests to the local HTTP server during development, simplifying the setup for Office Add-ins which often require HTTPS.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Batching/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-https-reverse-proxy\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring Git Remotes - Git Commands - Bash\nDESCRIPTION: These snippets provide the necessary Git commands to clone your forked repository and configure an upstream remote pointing to the main OfficeDev repository. The primary dependencies are a local Git installation and access permissions to the specified repositories. Inputs include a valid GitHub user name and repository name, and the outputs are a configured local repository with proper remote tracking for syncing and collaboration.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your user name>/<repo name>.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd <repo name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/OfficeDev/<repo name>.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Preprocessor using Yarn (Shell)\nDESCRIPTION: Shell command to add node-sass-chokidar via Yarn package manager. Achieves the same result as the npm command by enabling Sass support for the project. Input is a shell command; output is package installation.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Installing Office Add-in Dev Certificates Globally with npm (Console)\nDESCRIPTION: This command globally installs the 'office-addin-dev-certs' package to generate self-signed certificates required for HTTPS development with Outlook add-ins. npm must be present and the global flag ensures the tool can be run system-wide.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/outlook-hello-world/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Deleting a Remote Branch - Git Command Line - Shell\nDESCRIPTION: Demonstrates how to delete a branch from the remote repository (origin) using Git. The parameter <branch name> should be replaced with the name of the branch you want to remove remotely. There must be a space before the colon and no space after it. This ensures that the branch is purged from your remote fork, maintaining clarity and reducing clutter for collaborators.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin :<branch name>\n```\n\n----------------------------------------\n\nTITLE: Initializing Jest Test Setup with Global Mocks - React - JavaScript\nDESCRIPTION: This code defines a mock implementation for the browser's localStorage API using Jest mock functions and assigns it to the global environment for tests. It enables testing code that interacts with localStorage without depending on browser implementation. Required dependencies include Jest, and the code should be placed in src/setupTests.js; it is invoked automatically by react-scripts. The functions getItem, setItem, and clear are all mocked for use in unit tests.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_65\n\nLANGUAGE: js\nCODE:\n```\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Outlook Add-in Web Server (Console)\nDESCRIPTION: Shows the terminal commands to install dependencies and start the local web server for the signature add-in. 'npm install' fetches all required node modules. 'npm start' or 'npm run start:xml' launches the development server, enabling local testing. Node.js and npm must be pre-installed. The main input is the command; output is a running web server for the add-in assets.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-set-signature/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install\\nnpm start\n```\n\nLANGUAGE: console\nCODE:\n```\nnpm install\\nnpm run start:xml\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Excel Data Types Explorer (Shell)\nDESCRIPTION: This command uses npm (Node Package Manager) to install the necessary dependencies defined in the project's package.json file. Running this command in the 'Samples/excel-data-types-explorer' folder is a prerequisite step before starting the Excel Data Types Explorer add-in sample.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-data-types-explorer/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting WebExtension Taskpane Visibility and Layout (.NET, C#)\nDESCRIPTION: This snippet configures a WebExtensionTaskpane object to control where and how the task pane for an Office Add-in displays in Excel. It sets properties for docking (e.g., on the right), visibility on first open, width in pixels, and row placement. The example ensures visibility is initially enabled, but notes that setting visibility to true bypasses the ability for Office.js or the user to later toggle showing the pane. This code should be placed in the GeneratePartContent method and relies on Open XML SDK components. Key parameters are DockState, Visibility, Width, and Row.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-create-worksheet-from-web-site/README.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nWetp.WebExtensionTaskpane webExtensionTaskpane1 = new Wetp.WebExtensionTaskpane() { DockState = \"right\", Visibility = true, Width = 350D, Row = (UInt32Value)4U };\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Manual Proxy Rules in package.json (JSON)\nDESCRIPTION: Illustrates defining multiple proxy rules within the `proxy` object in `package.json`. Each key is a path pattern (which can be a regular expression) mapping to a configuration object specifying the `target` backend URL and other `http-proxy-middleware` options like `ssl` or `pathRewrite`. Allows flexible routing of different API paths to potentially different backend services during development.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_47\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    // Matches any request starting with /api\n    \"/api\": {\n      \"target\": \"<url_1>\",\n      \"ws\": true\n      // ...\n    },\n    // Matches any request starting with /foo\n    \"/foo\": {\n      \"target\": \"<url_2>\",\n      \"ssl\": true,\n      \"pathRewrite\": {\n        \"^/foo\": \"/foo/beta\"\n      }\n      // ...\n    },\n    // Matches /bar/abc.html but not /bar/sub/def.html\n    \"/bar/[^/]*[.]html\": {\n      \"target\": \"<url_3>\",\n      // ...\n    },\n    // Matches /baz/abc.html and /baz/sub/def.html\n    \"/baz/.*/.*[.]html\": {\n      \"target\": \"<url_4>\"\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing http-server via npm for Local Development Server\nDESCRIPTION: This command uses npm (Node Package Manager) to install the `http-server` package globally (`--global`). The `http-server` package provides a simple command-line HTTP server, useful for hosting the add-in's web files locally during development and testing. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/word-hello-world/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Referencing Public Assets in JavaScript\nDESCRIPTION: Provides an example of accessing assets within the `public` folder from JavaScript code using the `process.env.PUBLIC_URL` environment variable. This is presented as an 'escape hatch' for cases where importing assets directly is not suitable. Note that files accessed this way are not processed or hashed by Webpack.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in “Adding Images and Fonts” above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Styleguidist via Yarn - Shell\nDESCRIPTION: This shell command adds react-styleguidist as a local dependency with Yarn. It is equivalent to the npm install example, supporting component isolation and documentation. Requires Yarn and should be run inside the project root.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_75\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Proxy in package.json (JavaScript/JSON)\nDESCRIPTION: Example configuration within the `proxy` object in `package.json` specifically for proxying WebSocket connections (e.g., for Socket.io or native WebSockets). It requires setting the `target` to the compatible WebSocket server URL (prefixed with `ws://` or `wss://`) and explicitly enabling WebSocket proxying by setting `ws: true`. This allows the development server to handle WebSocket upgrade requests correctly.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_49\n\nLANGUAGE: js\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    \"/socket\": {\n      // Your compatible WebSocket server\n      \"target\": \"ws://<socket_url>\",\n      // Tell http-proxy-middleware that this is a WebSocket proxy.\n      // Also allows you to proxy WebSocket requests without an additional HTTP request\n      // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a New Branch from Upstream - Git Command Line - Shell\nDESCRIPTION: Demonstrates the process of creating a new local branch (X2) based on the upstream master branch and pushing it to the remote origin using Git Bash. Assumes a valid Git repository is already cloned, upstream remote is configured, and all changes in the previous branch have been merged. The parameters <repo name> and X2 must be replaced with the actual repository folder and name of the new branch. These commands avoid polluting old branches after merges and ensure the new branch contains the latest work.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd <repo name>\ngit pull upstream master:X2\ngit push origin X2\n```\n\n----------------------------------------\n\nTITLE: Installing http-server via npm - Console\nDESCRIPTION: Demonstrates the command to globally install the http-server Node.js package using npm. This is required for serving the add-in's web assets locally via HTTPS. The command expects npm to be available and installs http-server for use from the CLI. No parameters are needed beyond the package name; output is a CLI availability of http-server globally.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-global-state/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Installing http-server via npm (Console)\nDESCRIPTION: This console command uses the Node Package Manager (npm) to install the `http-server` package globally. This package is required to run a simple local web server for hosting the add-in's web files during development.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Batching/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependency with yarn\nDESCRIPTION: This shell command shows the yarn equivalent for adding a runtime dependency, again using `react-router` as an example. The `yarn add` command adds the package to the `dependencies` in `package.json`. This is the standard way to add libraries when using yarn as the package manager.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-router\n```\n\n----------------------------------------\n\nTITLE: Injecting Server-side Data into Global Variables - JavaScript/HTML\nDESCRIPTION: Injects a placeholder in the HTML to be replaced by server-side data at runtime. The server must replace `__SERVER_DATA__` with sanitized JSON before serving the page to prevent XSS vulnerabilities. This approach enables the client to access server-injected data via global variables such as `window.SERVER_DATA`, and must be integrated into the server's template or rendering workflow.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\n  \"<!doctype html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <script>\\n      window.SERVER_DATA = __SERVER_DATA__;\\n    </script>\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Static Server with serve - Shell\nDESCRIPTION: Installs the serve package globally and serves the build directory produced by Create React App as a static site. The first command installs the dependency; the second serves the static site on port 5000 by default. The -s flag enables single-page app routing support.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_82\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g serve\nserve -s build\n```\n\n----------------------------------------\n\nTITLE: Switching to Master Branch in Git\nDESCRIPTION: This Git command switches the current working directory and repository state to the 'master' branch. This is often a necessary step before attempting to delete another branch, as Git typically prevents deleting the branch you are currently checked out on.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\n```\n\n----------------------------------------\n\nTITLE: Starting Encrypted Static HTTP Server for Office Add-ins - Console\nDESCRIPTION: This command launches the http-server tool with SSL enabled on port 3000, enabling CORS and serving files from the current directory. It's used to host the add-in web files locally with HTTPS, as required for most Office Add-ins. Requires prior installation of http-server and SSL certificates (cert.pem, key.pem) in the target directory.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-scenario/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhttp-server -S --cors . -p 3000\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders for Dynamic Meta Tags in index.html (HTML)\nDESCRIPTION: Demonstrates adding placeholder values (like `__OG_TITLE__` and `__OG_DESCRIPTION__`) within `<meta>` tags in the `public/index.html` file. This technique allows a backend server to dynamically replace these placeholders with route-specific content before serving the HTML, enabling better SEO and social media sharing previews without full server-side rendering.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_52\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\n----------------------------------------\n\nTITLE: Installing source-map-explorer via Yarn in Shell\nDESCRIPTION: This command installs the `source-map-explorer` package as a project dependency using Yarn, an alternative package manager to npm. This tool helps analyze JavaScript bundle sizes generated during the production build.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_81\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nyarn add source-map-explorer\n```\n```\n\n----------------------------------------\n\nTITLE: Running Production Build with CI Checks in Bash (Bash)\nDESCRIPTION: This command executes `npm run build` in a Linux or macOS bash environment, setting the `CI` environment variable to `true` for the duration of the command. This configuration forces the build process to treat linter warnings as errors, failing the build if any warnings are detected.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm run build\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-https-reverse-proxy via npm - Console\nDESCRIPTION: This line installs the office-addin-https-reverse-proxy tool globally via npm, required for redirecting Office Online's HTTPS requests to your local server for development purposes. It assumes Node.js and npm are installed. No further configuration is needed at this step.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-global-state/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-https-reverse-proxy\n```\n\n----------------------------------------\n\nTITLE: Specifying Relative Homepage for SPA Builds - JavaScript/JSON\nDESCRIPTION: Defines the homepage key in package.json to specify a custom base path for the React app, impacting build asset URL resolution. Important when deploying SPAs to subpaths or relative URLs instead of server root. Supports static servers and React Router basename.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_90\n\nLANGUAGE: js\nCODE:\n```\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\n----------------------------------------\n\nTITLE: Surge Project Path Configuration for Static Deployment - plaintext - Plaintext\nDESCRIPTION: This snippet displays a Surge CLI prompt for specifying the path to the build directory. Surge deploys all files within this path to its static hosting service. The prompt should be responded to with the absolute or relative path to your project's compiled output (such as '/path/to/project/build'). Requires the surge CLI installed globally with npm. Correctly specifying the build path ensures the right files are hosted by Surge.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_101\n\nLANGUAGE: plaintext\nCODE:\n```\n       project path: /path/to/project/build\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Relative Homepage for Static Asset Path Resolution - JavaScript/JSON\nDESCRIPTION: Provides a configuration for setting homepage to '.' in package.json, allowing the SPA to serve assets with URLs relative to index.html. Supports serving the same build from multiple paths without rebuilding. Requires react-scripts v0.9.0 or higher.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_92\n\nLANGUAGE: js\nCODE:\n```\n  \"homepage\": \".\",\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Build Directory for Surge Deployments - Shell Script\nDESCRIPTION: This shell snippet instructs users deploying to Surge to select the correct build directory. The user specifies the build folder path when prompted by the Surge CLI. This ensures that the React app's production build is what is deployed to Surge's hosting service. No external dependencies except for Surge CLI. Limitation: entering the wrong path means the deployed site will be incomplete or broken.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_102\n\nLANGUAGE: sh\nCODE:\n```\n       project path: /path/to/project/build\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Office Add-in Reverse Proxy Globally using npm (Console)\nDESCRIPTION: This console command uses npm to install the `office-addin-https-reverse-proxy` tool globally. This tool is used during local development to proxy HTTPS requests from the Office host application to the local HTTP development server, bypassing certain certificate trust issues. Requires Node.js and npm.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Storage/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-https-reverse-proxy\n```\n\n----------------------------------------\n\nTITLE: Setting Homepage to Relative Path for Portable Builds - package.json - js\nDESCRIPTION: This snippet configures the `homepage` property in `package.json` for a relative path, making built assets use relative URLs instead of absolute paths. This is useful for deploying the same build to different base paths without rebuilding. Use a dot (`.`) to indicate relative URLs.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_91\n\nLANGUAGE: js\nCODE:\n```\n  \"homepage\": \".\",\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server for Word Add-in on Mac - Command Line - Command Line\nDESCRIPTION: This snippet launches the local web server and starts the Word add-in for development on a Mac system. It requires prior installation of Node.js and npm, with the command executed from the project root. This command is part of the workflow for testing and debugging Office Add-ins on the macOS platform and assumes the local development environment is properly configured.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/word-tutorial/README.md#_snippet_2\n\nLANGUAGE: command line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Asserting Component Output using Enzyme and Jest Matchers\nDESCRIPTION: Example of using Enzyme's `shallow` rendering combined with Jest's `expect` and the `contains` method (provided by Enzyme wrappers) to assert that a specific React element (an `<h2>` tag with text) is present in the rendered output of the `App` component. The `.toEqual(true)` matcher confirms the presence.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server for Word Add-in on Windows - Command Line - Command Line\nDESCRIPTION: This command starts the local development web server and launches Word with the add-in loaded, specifically for Windows users. It is required that Node.js and npm are installed, and the command is run from the project root. The process enables developers to test and validate the add-in in a native Word application using the context provided by the project's configuration.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/word-tutorial/README.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Executing Error-Returning Custom Function via Web Worker (Excel Formula)\nDESCRIPTION: This Excel formula calls the custom function `WebWorkerSample.TEST_ERROR`. It takes a parameter (e.g., 2), posts the job to a web worker, which is designed to return an error. This demonstrates error handling for custom functions using web workers.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-add-in-custom-functions-using-web-workers/README.md#_snippet_3\n\nLANGUAGE: excel-formula\nCODE:\n```\n=WebWorkerSample.TEST_ERROR(2)\n```\n\n----------------------------------------\n\nTITLE: Installing http-server Globally using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `http-server` package globally (`--global`). This package is required to run a simple local web server from the command line, necessary for hosting the add-in's web files during development if running from localhost instead of GitHub. Requires Node.js and npm to be pre-installed.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-check-item-categories/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Configuring WebExtension for Office Add-in Embedding in C#\nDESCRIPTION: This C# code snippet, located in \\Helpers\\SpreadsheetBuilder.cs within the GenerateWebExtensionPart1Content method, demonstrates how to configure the Open XML representation of a web extension reference. It initializes We.WebExtension and We.WebExtensionStoreReference objects to embed an add-in (Script Lab in this example) from the Office Store (OMEX) by specifying its ID, version, store location ('en-US'), and store type ('OMEX'). The code also shows how to adjust these parameters for embedding add-ins from a file share catalog.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-open-in-teams/README.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nWe.WebExtension webExtension1 = new We.WebExtension() { Id = \"{635BF0CD-42CC-4174-B8D2-6D375C9A759E}\" };\nwebExtension1.AddNamespaceDeclaration(\"we\", \"http://schemas.microsoft.com/office/webextensions/webextension/2010/11\");\nWe.WebExtensionStoreReference webExtensionStoreReference1 = new We.WebExtensionStoreReference() { Id = \"wa104380862\", Version = \"1.1.0.0\", Store = \"en-US\", StoreType = \"OMEX\" };\n```\n\n----------------------------------------\n\nTITLE: Installing Sass Preprocessor using npm (Shell)\nDESCRIPTION: Installs the `node-sass-chokidar` package as a development dependency (`--save` implies saving to dependencies, though `--save-dev` is more common for build tools) using the Node Package Manager (npm). This package is used for compiling Sass/SCSS files.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all Utility using npm (Shell)\nDESCRIPTION: Installs the `npm-run-all` package as a development dependency (`--save` implies saving to dependencies) using npm. This utility allows running multiple npm scripts in parallel or sequentially.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Autoprefixer Output with Vendor Prefixes for Flexbox CSS\nDESCRIPTION: Shows the CSS output after Autoprefixer has processed the input Flexbox rules. Vendor prefixes (`-webkit-`, `-ms-`) have been automatically added to ensure cross-browser compatibility for Flexbox properties.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common App Functionality in TypeScript\nDESCRIPTION: This TypeScript code defines an `App` class containing common functionality for the Office Add-in. It includes an `initialize` method to set up the notification UI by appending HTML elements to the body using jQuery, and a `showNotification` method to display messages, which only works after initialization. An instance of the `App` class is created.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.TypeScriptAddin/README.md#_snippet_0\n\nLANGUAGE: TS\nCODE:\n```\n/* Common app functionality */\n\nclass App {\n    private initialized: boolean = false;\n\n    // Common initialization function (to be called from each page)\n    initialize() {\n        $('body').append(\n            '<div id=\"notification-message\">' +\n            '<div class=\"padding\">' +\n            '<div id=\"notification-message-close\"></div>' +\n            '<div id=\"notification-message-header\"></div>' +\n            '<div id=\"notification-message-body\"></div>' +\n            '</div>' +\n            '</div>');\n\n        // After initialization, enable the showNotification function\n        this.initialized = true;\n    }\n\n    // Notification function, enabled after initialization\n    showNotification(header: string, text: string) {\n        if (!this.initialized) {\n            console.log('Add-in has not yet been initialized.');\n            return;\n        }\n\n        $('#notification-message-header').text(header);\n        $('#notification-message-body').text(text);\n        $('#notification-message').slideDown('fast');\n    }\n}\n\nvar app = new App();\n```\n\n----------------------------------------\n\nTITLE: Starting the Web API Service using npm\nDESCRIPTION: These console commands navigate into the 'API' directory of the project, install its Node.js dependencies using 'npm install', and then start the web API server using 'npm start'. This backend service needs to be running before the client SPA.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-SSO-NAA-Identity/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n    cd API\n    npm install\n    npm start\n```\n\n----------------------------------------\n\nTITLE: Specifying SPA Start URL in Web App Manifest - JavaScript/JSON\nDESCRIPTION: Sets the start_url key in public/manifest.json for a React app, ensuring that web app shortcuts launch the app at the root URL rather than /index.html. Necessary for compatibility with client-side routers expecting the base '/' path. Requires manual edit of the manifest file.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_89\n\nLANGUAGE: js\nCODE:\n```\n  \"start_url\": \".\",\n```\n\n----------------------------------------\n\nTITLE: Installing http-server Globally using npm (Console)\nDESCRIPTION: Installs the `http-server` package globally using Node Package Manager (npm). This package is required to run a simple local HTTP server for hosting the add-in's web files during development when running the sample locally.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-keyboard-shortcuts/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all using Yarn (Shell)\nDESCRIPTION: Installs npm-run-all via Yarn to allow for concurrent npm scripts, facilitating workflows like running Sass watchers and JS builds simultaneously. Assumes a Yarn-based package management environment. Input is the shell command; output is installation.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache HTTPD for SPA Client-Side Routing - Apache Config\nDESCRIPTION: Provides a .htaccess configuration to rewrite all unknown URLs to index.html, enabling HTML5 routing for SPAs like React apps. Requires access to the public directory on your Apache server; works by conditionally rewriting requests so all non-file URLs serve the main HTML entry point.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_88\n\nLANGUAGE: Apache\nCODE:\n```\n    Options -MultiViews\\n    RewriteEngine On\\n    RewriteCond %{REQUEST_FILENAME} !-f\\n    RewriteRule ^ index.html [QSA,L]\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all Utility using Yarn (Shell)\nDESCRIPTION: Installs the `npm-run-all` package as a dependency using Yarn. This utility enables the execution of multiple npm scripts concurrently or in sequence.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nyarn add npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI Build (YAML)\nDESCRIPTION: This YAML snippet defines a basic configuration for Travis CI. It specifies Node.js version 6, caches the `node_modules` directory for faster builds, and defines the build script to run `npm run build` followed by `npm test`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\nnode_js:\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm run build\n  - npm test\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP Server Globally with npm (Console)\nDESCRIPTION: This command globally installs the 'http-server' npm package required to locally serve files for development and testing your Outlook add-in. npm must be available as a prerequisite. The global flag makes the server executable from anywhere.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/outlook-hello-world/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Installing http-server Globally using npm (Console)\nDESCRIPTION: This console command uses the Node Package Manager (npm) to install the `http-server` package globally. This package provides a simple command-line HTTP server, often used for local development and hosting web files for add-ins. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Storage/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Blazor WebAssembly Debugging Properties - XML\nDESCRIPTION: This XML snippet configures project properties for debugging a Blazor WebAssembly add-in within Visual Studio. It sets the BlazorAppUrl to point to the local development server and supplies an InspectUri for browser-based inspection. The sample port number (7126) should be replaced with the actual port in your launchSettings.json file. This file must exist as <projectName>.csproj.user in the add-in project to enable enhanced debugging for both C# and JavaScript with Blazor.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/outlook-blazor-add-in/README.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <BlazorAppUrl>https://localhost:7126/</BlazorAppUrl>\n    <InspectUri>{wsProtocol}://{url.hostname}:{url.port}/_framework/debug/ws-proxy?browser={browserInspectUri}</InspectUri>\n  </PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Installing React Styleguidist via npm (Shell)\nDESCRIPTION: This shell command uses npm to install the `react-styleguidist` package and adds it as a project dependency (`--save`). React Styleguidist is a tool for creating interactive component style guides and development environments.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_75\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Disabling jsdom in package.json Test Script (diff)\nDESCRIPTION: This diff illustrates how to modify the `test` script in `package.json` to disable the jsdom environment. Removing the `--env=jsdom` flag can speed up tests that do not require browser APIs like `window` or `document`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_72\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n-   \"test\": \"react-scripts test --env=jsdom\"\n+   \"test\": \"react-scripts test\"\n```\n```\n\n----------------------------------------\n\nTITLE: Styling the Task Pane Content with CSS\nDESCRIPTION: The sample.css file contains the Cascading Style Sheets (CSS) rules used to style the visual appearance of the elements defined in the task pane's HTML markup (taskpane.html).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/word-ai-generated-content/RUN_WITH_EXTENSION.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n./src/taskpane/css/sample.css\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server and Sideloading the Add-in\nDESCRIPTION: This command executes the `start` script defined in the project's `package.json` file. It typically launches a local web server to host the add-in's web files and uses the `office-addin-debugging` tool to sideload the add-in into the default Office application (Excel in this case) for testing.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-SSO-NAA/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting Local Server and Sideloading Add-in using npm\nDESCRIPTION: This command starts the local development web server to host the add-in's static files and attempts to automatically sideload the add-in into a compatible Outlook client for testing. It should be run from the root directory of the 'Git the gist' project after dependencies have been installed. Requires Node.js and npm.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/outlook-tutorial/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Server and Sideloading in Excel on the Web using npm\nDESCRIPTION: This command starts the local development web server and attempts to sideload the add-in into a specified Excel document hosted online (OneDrive or SharePoint). Replace `{url}` with the actual URL of the target Excel document. Note the specific quoting requirement for the URL when running on a Mac.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/first-run-experience-tutorial/README.md#_snippet_4\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start:web -- --document {url}\n```\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start:web -- --document https://contoso.sharepoint.com/:t:/g/EZGxP7ksiE5DuxvY638G798BpuhwluxCMfF1WZQj3VYhYQ?e=F4QM1R\n```\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start:web -- --document https://1drv.ms/x/s!jkcH7spkM4EGgcZUgqthk4IK3NOypVw?e=Z6G1qp\n```\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start:web -- --document https://contoso-my.sharepoint-df.com/:t:/p/user/EQda453DNTpFnl1bFPhOVR0BwlrzetbXvnaRYii2lDr_oQ?e=RSccmNP\n```\n\n----------------------------------------\n\nTITLE: Starting Excel Add-in in the Web via Command Line - Command Line\nDESCRIPTION: This command runs the add-in in Excel on the web by starting the local web server and opening an Excel document at the given URL. It assumes that dependencies like Node.js and npm are already installed. The {url} parameter should be replaced with a valid Excel file URL on OneDrive or SharePoint.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/excel-tutorial/README.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\nnpm run start:web -- --document {url}\n```\n\n----------------------------------------\n\nTITLE: Installing jest-enzyme using Yarn\nDESCRIPTION: Command to install the `jest-enzyme` helper library using Yarn. This provides an alternative package manager command to achieve the same dependency setup as the npm example for using Enzyme-specific Jest matchers.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_62\n\nLANGUAGE: shell\nCODE:\n```\nyarn add jest-enzyme\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Base URL for Builds - package.json - js\nDESCRIPTION: This package.json snippet specifies the `homepage` property, which instructs Create React App to use the provided base URL when generating the build output. This is needed for proper asset path resolution when the app is served from a subdirectory. Typically added before running `npm run build`. Only affects build-time configuration.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_89\n\nLANGUAGE: js\nCODE:\n```\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\n----------------------------------------\n\nTITLE: Starting the Excel Data Types Explorer Add-in (Shell)\nDESCRIPTION: This command executes the 'start' script defined in the project's package.json file, typically used to build the add-in, start a local development server, open Excel, and sideload the add-in for testing. It requires dependencies to be installed first via 'npm install' and should be run from the 'Samples/excel-data-types-explorer' folder.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-data-types-explorer/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Exploring Sample Project File Structure\nDESCRIPTION: Displays the typical directory and file structure of the sample Word add-in project created by the Office Add-ins Development Kit. Key files include the manifest.xml (add-in configuration), package.json (dependencies), source code under src/ (including taskpane HTML, CSS, and JavaScript), and VS Code configuration files under .vscode/ for launch and debugging.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/word-get-started-with-dev-kit/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| .eslintrc.json\n| .gitignore\n| .vscode/\n|   | extensions.json\n|   | launch.json               Launch and debug configurations\n|   | settings.json             \n|   | tasks.json                \n| assets/                       Static assets, such as images\n| babel.config.json\n| manifest.xml                  Manifest file\n| package.json                  \n| README.md                     \n| RUN_WITH_EXTENSION.md         \n| src/                          Add-in source code\n|   | taskpane/\n|   |   | taskpane.css          Task pane style\n|   |   | taskpane.html         Task pane entry html\n|   |   | taskpane.js           Office JS API calls and add-in logic\n| webpack.config.js             Webpack config\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stored Value in Excel Cell using Custom Function\nDESCRIPTION: This Excel formula demonstrates how to call the custom function `CONTOSO.GETVALUE` within a worksheet cell to retrieve a value previously stored using the key \"token\". This function utilizes `OfficeRuntime.storage` internally to access the shared data.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Excel-custom-functions/Storage/README.md#_snippet_0\n\nLANGUAGE: excel-formula\nCODE:\n```\n=CONTOSO.GETVALUE(\"token\")\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js Development Server using npm\nDESCRIPTION: This command is run from the project's source directory via a command prompt after dependencies have been installed using `npm install`. It executes the 'start' script defined in the `package.json` file, which typically launches the Node.js development server. According to the instructions, the server becomes accessible at `https://localhost:8443`.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Outlook.RelatedData/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Executing Error-Rejecting Promise Function via Web Worker (Excel Formula)\nDESCRIPTION: This Excel formula calls the custom function `WebWorkerSample.TEST_ERROR_PROMISE`. It takes a parameter (e.g., 2), posts the job to a web worker, which returns a JavaScript Promise that rejects with an error. This demonstrates handling rejected promises from web workers in custom functions.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-add-in-custom-functions-using-web-workers/README.md#_snippet_4\n\nLANGUAGE: excel-formula\nCODE:\n```\n=WebWorkerSample.TEST_ERROR_PROMISE(2)\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables Explicitly via Window Object (JavaScript)\nDESCRIPTION: Shows a technique to explicitly access a global variable (e.g., jQuery's `$`) by referencing it through the `window` object. This practice clarifies the intention to use a global variable rather than a potential typo and helps satisfy linters that might otherwise flag undefined variables.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nconst $ = window.$;\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in JavaScript\nDESCRIPTION: Shows how to safely access a global variable (presumably defined by a script loaded in HTML) within JavaScript code by explicitly reading it from the `window` object. This technique clarifies the intent to use a global variable and helps avoid potential linter errors for undefined variables.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nconst $ = window.$;\n```\n\n----------------------------------------\n\nTITLE: Appending Tracking Data to HTML Table using jQuery (JavaScript)\nDESCRIPTION: This JavaScript snippet uses jQuery to dynamically add a new row to an HTML table with the ID `trackingTable`. It constructs the table row (`<tr>`) with table data cells (`<td>`) containing formatted tracking activity details: address, date/time, and status description. String manipulation (`splice`) is used to format the date and time strings retrieved from the `activity` object (presumably part of the API response data).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Outlook.UpsPackageTracker/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$('#trackingTable > tbody:last').append($(\"<tr>\" +\n    \"<td>\" + addressStr +\n    \"</td><td>\" + activity.dateField.splice(4, 0, \"-\").splice(7, 0, \"-\") + \" \" + activity.timeField.splice(2, 0, \":\").splice(5, 0, \":\") +\n    \"</td><td>\" + activity.statusField.descriptionField + \"</td><tr>\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Environment Variables in Windows Shell - Command Prompt\nDESCRIPTION: This command sets the REACT_APP_SECRET_CODE environment variable temporarily for the current session and then starts the React development server in Windows (cmd.exe). It relies on Windows command shell syntax, where there is no whitespace between the set command and npm start. The variable is accessible to the started process (npm). This approach does not persist the variable outside the session or command.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_38\n\nLANGUAGE: cmd\nCODE:\n```\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n----------------------------------------\n\nTITLE: Importing a Specific Locale in Moment.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to explicitly import a specific locale (French) for use with Moment.js in a JavaScript project. To use this, ensure the 'moment' package is installed via npm. The code imports both the core 'moment' library and the desired locale file, making that locale available for subsequent use in your application. No additional parameters are needed, but you must import each locale you wish to support.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_103\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport moment from 'moment';\\nimport 'moment/locale/fr';\n```\n\n----------------------------------------\n\nTITLE: Extending Office.TableData: Appending Rows from Array (JavaScript)\nDESCRIPTION: This JavaScript snippet defines an extension method `addRange` for the `Office.TableData` object. It appends rows to the table data based on an input array of objects. It iterates through the provided array and, for each object, creates a new row containing only the values corresponding to the headers already defined in the `TableData` object's `headers[0]` array. This method supports multiple appends, useful for paged data.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Excel.JsonToOfficeTable/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n//extension to Office.TableData to add a range of rows\nOffice.TableData.prototype.addRange = function (array) {\n    for (i = 0; i < array.length; i++) {\n        var itemsTemp = new Array();\n        $(this.headers[0]).each(function (ii, ee) {\n            itemsTemp.push(array[i][ee]);\n        });\n        this.rows.push(itemsTemp);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the office-addin-https-reverse-proxy Tool - Console\nDESCRIPTION: Runs the office-addin-https-reverse-proxy to forward HTTPS traffic from Office Online to a locally running server. The '--url' parameter specifies the URL of the local server to which requests are rerouted. This allows Office Online to interact with your add-in’s web files hosted on localhost.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-shared-runtime-global-state/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\noffice-addin-https-reverse-proxy --url http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output with Embedded Environment Variables\nDESCRIPTION: Shows the resulting HTML generated by the build process when environment variables like `NODE_ENV` (set to 'development') and `REACT_APP_SECRET_CODE` (set to 'abcdef') are accessed in a React component. The values are embedded directly into the static HTML.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <small>You are running this application in <b>development</b> mode.</small>\n  <form>\n    <input type=\"hidden\" value=\"abcdef\" />\n  </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Default React Scripts in package.json (JSON)\nDESCRIPTION: This snippet shows the default `scripts` section within a `package.json` file generated by Create React App. It includes standard commands like `start`, `build`, and `test`, which use `react-scripts` and specify the `--env=jsdom` flag for the test environment.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_71\n\nLANGUAGE: js\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\"\n```\n\n----------------------------------------\n\nTITLE: Default npm Scripts with jsdom for React Scripts - JSON\nDESCRIPTION: This JSON snippet shows the relevant section of a package.json where the test script includes the Jest jsdom environment. The 'test' script ensures integration with browser APIs for Jest and React code that depends on jsdom, such as window or document usage. This setup is standard in projects using react-scripts unless jsdom is not required.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_70\n\nLANGUAGE: js\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UI Blocking with Custom Function (Excel Formula)\nDESCRIPTION: This Excel formula calls the custom function `WebWorkerSample.TEST_UI_THREAD` with a large input (50000) designed to cause a noticeable delay (around five seconds). This demonstrates how calculations on the UI thread can block user interface responsiveness, contrasting with the non-blocking behavior of web worker functions.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-add-in-custom-functions-using-web-workers/README.md#_snippet_6\n\nLANGUAGE: excel-formula\nCODE:\n```\n=WebWorkerSample.TEST_UI_THREAD(50000)\n```\n\n----------------------------------------\n\nTITLE: Starting PowerPoint Add-in Dev Server on Mac - Command Line\nDESCRIPTION: This command starts the local development server for the add-in on Mac environments. It requires npm and the associated 'dev-server' script present in the project. Input: none. Output: Starts the dev server but does not automatically launch PowerPoint.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/tutorials/powerpoint-tutorial-yo/README.md#_snippet_1\n\nLANGUAGE: command line\nCODE:\n```\nnpm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Importing React Bootstrap Components (JavaScript)\nDESCRIPTION: Illustrates how to import specific UI components (like `Navbar`, `Jumbotron`, `Button`) from the `react-bootstrap` library within a React component file (e.g., `src/App.js`). This allows developers to use these pre-built Bootstrap components directly in their JSX markup.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\n----------------------------------------\n\nTITLE: Installing Office-Addin-dev-certs Globally using npm - Console\nDESCRIPTION: Installs the office-addin-dev-certs package globally to generate self-signed SSL certificates for developing Outlook Add-ins over HTTPS. This step is required for secure local development and compliant manifest sideloading. Node.js and npm must be installed prior to executing this command.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Installing office-addin-dev-certs via npm - Console Command\nDESCRIPTION: Global npm installation of the 'office-addin-dev-certs' tool, used to generate development SSL certificates for serving add-ins locally on HTTPS. Prerequisites are Node.js and npm. The tool is used for quickly creating and installing trusted development certificates. Limitations include the need for permissions to install global npm packages and proper handling of certificates for browser trust.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-add-in-commands/powerpoint/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Installing Office Add-in Dev Certs via npm (Console)\nDESCRIPTION: This command uses npm to install the `office-addin-dev-certs` package globally. This tool is used to generate and manage self-signed SSL certificates required for running a local development server over HTTPS, which is often necessary for Office Add-ins.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-insert-file/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global office-addin-dev-certs\n```\n\n----------------------------------------\n\nTITLE: Vendor-Prefixed Flexbox Styles Output of Autoprefixer (CSS)\nDESCRIPTION: Shows the result of processing Flexbox styles with Autoprefixer, which adds vendor-specific prefixes for broader browser compatibility. The expanded CSS ensures consistent behavior across web browsers that may not support standard Flexbox. Input and output are the same as before, but with enhanced browser support.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_16\n\nLANGUAGE: CSS\nCODE:\n```\n.App {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-orient: horizontal;\\n  -webkit-box-direction: normal;\\n      -ms-flex-direction: row;\\n          flex-direction: row;\\n  -webkit-box-align: center;\\n      -ms-flex-align: center;\\n          align-items: center;\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all to Run Multiple Scripts in Parallel (Shell)\nDESCRIPTION: Shell command to install npm-run-all, a utility for managing npm script concurrency, enabling parallel Sass compilation and JS watching. Intended for Node.js/NPM environments where complex scripts are desired. Input is the command; output is package installation.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Starting Styleguidist Development Server (Shell)\nDESCRIPTION: This shell command executes the `styleguide` script defined in `package.json`. It typically runs `styleguidist server`, starting the React Styleguidist development environment to browse and interact with components.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_78\n\nLANGUAGE: sh\nCODE:\n```\nnpm run styleguide\n```\n\n----------------------------------------\n\nTITLE: Deploying the Site to GitHub Pages - CLI Command - sh\nDESCRIPTION: Simple shell command to deploy a React app to GitHub Pages using the previously added `deploy` script. Must be run after installing the `gh-pages` package and configuring scripts. Input is a one-line shell command. No code dependencies other than those.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_97\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Example CSS Using Flexbox for Autoprefixer Demonstration\nDESCRIPTION: Simple CSS rules using Flexbox properties (`display: flex`, `flex-direction`, `align-items`) for an `.App` class. This code serves as input for the Autoprefixer tool, which adds vendor prefixes.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing http-server Globally using npm - Console\nDESCRIPTION: Installs the http-server Node.js package globally, allowing you to run a simple, CORS-enabled local web server. This is required to host the add-in web files locally while developing and testing the Office Add-in. Ensure Node.js and npm are pre-installed on your system before running this command. No input arguments are necessary other than npm itself.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-verify-sensitivity-label/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Installing http-server Globally with npm - Node.js - Console\nDESCRIPTION: Installs the 'http-server' npm package globally, allowing users to start a simple, command-line HTTP server for hosting web files locally. Requires Node.js and npm to be installed and accessible via the console. No additional parameters; adds 'http-server' to system path as a global tool. Run from terminal.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/hello-world/excel-hello-world/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: Installing React Bootstrap and Bootstrap via npm (Shell)\nDESCRIPTION: Provides the npm command to install the `react-bootstrap` library and the corresponding Bootstrap v3 CSS framework as project dependencies. This is a prerequisite step for integrating React Bootstrap components into a Create React App project.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-bootstrap bootstrap@3\n```\n\n----------------------------------------\n\nTITLE: Installing jest-enzyme using npm\nDESCRIPTION: Command to install the `jest-enzyme` helper library using npm. This library adds Jest matchers specifically designed for testing with Enzyme, simplifying assertion syntax.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_61\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save jest-enzyme\n```\n\n----------------------------------------\n\nTITLE: Now.sh Zero-Config Build and Deploy Workflow - Markdown with Code Block\nDESCRIPTION: This markdown snippet documents the Now (Vercel) deployment flow. It describes building a React app and deploying via the 'now' CLI tool. The code block outputs the deployment URL, indicating successful deployment. Requires 'now' CLI and prior build completion. The key output parameter is the ready URL, and limitations may arise from missing project configuration or authentication. The code is illustrative and presented in a markdown code block.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_101\n\nLANGUAGE: markdown\nCODE:\n```\n```\n> Ready! https://your-project-name-tpspyhtdtk.now.sh (copied to clipboard)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing React Bootstrap and Bootstrap via Yarn (Shell)\nDESCRIPTION: Provides the Yarn command as an alternative to npm for installing the `react-bootstrap` library and the Bootstrap v3 CSS framework. This achieves the same outcome as the npm command, adding the necessary dependencies for using React Bootstrap.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-bootstrap bootstrap@3\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Branches - Git Branch Operations - Bash\nDESCRIPTION: These Bash commands illustrate the process of creating a new branch that tracks the latest master branch from the upstream repository, pushing the new branch to origin, and switching to it for further development. The dependencies are a synchronized local repository and functional remote connections. Changing the branch with these commands prepares the environment for feature development or bug fixes.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Office-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream master:<new branch name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <new branch name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <new branch name>\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Environment Variables in Bash - Bash\nDESCRIPTION: This Bash shell command temporarily sets REACT_APP_SECRET_CODE for a single command invocation (npm start). The variable is available to npm and its subprocesses for the duration of the command. It works for Linux and macOS, and does not persist beyond the command's lifetime. It's a common pattern for CI or one-off testing of specific variable configurations.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n----------------------------------------\n\nTITLE: Installing source-map-explorer via npm in Shell\nDESCRIPTION: This command installs the `source-map-explorer` package as a project dependency using npm. This tool is used to analyze JavaScript bundle sizes by visualizing the source map information, helping identify potential code bloat.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_80\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nnpm install --save source-map-explorer\n```\n```\n\n----------------------------------------\n\nTITLE: Viewing the Excel Add-in Project Directory Structure\nDESCRIPTION: This snippet displays the directory structure of the Excel chart analysis add-in sample project. It lists key files and folders, such as the manifest (`manifest.xml`), source code directory (`src/`), task pane components (`taskpane/`), configuration files (`webpack.config.js`, `package.json`), and Visual Studio Code settings (`.vscode/`), providing an overview of the project organization.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-add-in-chart-analyze-data/README.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n| .eslintrc.json\n| .gitignore\n| .vscode/\n|   | extensions.json\n|   | launch.json               Launch and debug configurations\n|   | settings.json             \n|   | tasks.json                \n| assets/                       Static assets, such as images\n| babel.config.json\n| manifest.xml                  Manifest file\n| package.json                  \n| README.md                     \n| RUN_WITH_EXTENSION.md         \n| src/                          Add-in source code\n|   | taskpane/\n|   |   | taskpane.css          Task pane style\n|   |   | taskpane.html         Task pane entry HTML\n|   |   | taskpane.ts           Office JS API calls and add-in logic\n| webpack.config.js             Webpack config\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript for Common App Functionality\nDESCRIPTION: This JavaScript code is the compiled output of the `App.ts` TypeScript file. It uses an Immediately Invoked Function Expression (IIFE) to create the `App` class equivalent in JavaScript. The functionality mirrors the TypeScript version, providing `initialize` and `showNotification` methods that rely on jQuery for DOM manipulation. A source mapping URL comment is included for debugging purposes.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.TypeScriptAddin/README.md#_snippet_1\n\nLANGUAGE: JS\nCODE:\n```\n/* Common app functionality */\nvar App = (function () {\n    function App() {\n        this.initialized = false;\n    }\n    // Common initialization function (to be called from each page)\n    App.prototype.initialize = function () {\n        $('body').append('<div id=\"notification-message\">' +\n            '<div class=\"padding\">' +\n            '<div id=\"notification-message-close\"></div>' +\n            '<div id=\"notification-message-header\"></div>' +\n            '<div id=\"notification-message-body\"></div>' +\n            '</div>' +\n            '</div>');\n        // After initialization, enable the showNotification function\n        this.initialized = true;\n    };\n    // Notification function, enabled after initialization\n    App.prototype.showNotification = function (header, text) {\n        if (!this.initialized) {\n            console.log('Add-in has not yet been initialized.');\n            return;\n        }\n        $('#notification-message-header').text(header);\n        $('#notification-message-body').text(text);\n        $('#notification-message').slideDown('fast');\n    };\n    return App;\n})();\nvar app = new App();\n//# sourceMappingURL=App.js.map\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies - Console (npm)\nDESCRIPTION: These console commands change the working directory to the WebApplication folder and then install necessary JavaScript dependencies using npm. Running `npm install` fetches and sets up all packages required to run the web application frontend. This step is required before starting the application to ensure all modules are available.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-create-worksheet-from-web-site/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n    cd <WebApplication-folder>\n    npm install\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for 'serve' Command in Shell\nDESCRIPTION: This command displays the help message for the `serve` static server tool. It lists all available command-line options and flags, such as changing the port (`-p` or `--port`) or configuring other serving behaviors.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_85\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nserve -h\n```\n```\n\n----------------------------------------\n\nTITLE: Staging and Committing Changes to Local Git Repository - Shell\nDESCRIPTION: This snippet demonstrates how to stage all changes and commit them to your local repository using Git commands in a shell environment. Prerequisites include being in your repository folder and having changes ready for commit. The 'git add .' command stages all changes, and 'git commit -v -a -m \"<Describe the changes made in this commit>\"' commits them with a detailed commit message. The output is a committed change in your local Git repository, and additional flags manage verbosity and included files.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -v -a -m \"<Describe the changes made in this commit>\"\n```\n\n----------------------------------------\n\nTITLE: Pushing a Git Branch to Origin in Shell\nDESCRIPTION: This command pushes the local branch (e.g., 'react-taxonomypicker') and its commits to the remote repository named 'origin' (typically the user's fork on GitHub). This makes the changes available on the remote fork, usually before creating a pull request.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin react-taxonomypicker\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm Versions via Console\nDESCRIPTION: Executes commands to display the installed versions of Node.js (`node -v`) and npm (`npm -v`) in the console. This is used as an optional prerequisite check before running the sample locally.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/outlook-spam-reporting/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnode -v\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Branch - Git Command Line - Shell\nDESCRIPTION: Shows the Git command to switch to the newly created local branch (X2) in a repository. Ensures your working directory matches the state of branch X2, allowing you to begin new feature work or verify the latest code. Replace X2 with your actual branch name. Requires prior existence of the branch locally.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout X2\n```\n\n----------------------------------------\n\nTITLE: Setting API Endpoint for Localhost in Office Add-in Ribbon Configuration JavaScript\nDESCRIPTION: This code snippet demonstrates changing the source endpoint for the add-in when developing locally. By editing the constant 'sourceUrl', developers can redirect API calls or resource loading to a localhost server, which is critical for local testing and debugging. The dependency is a running HTTPS server on localhost, and the updated path must match the local setup.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/office-contextual-tabs/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sourceUrl = \\\"https://localhost:3000\\\";\n```\n\n----------------------------------------\n\nTITLE: Switching to Master and Deleting a Local Branch - Git Command Line - Shell\nDESCRIPTION: Presents two sequential Git shell commands. The first switches your local repository to the master branch to prevent deletion errors, while the second deletes the specified branch locally if it has already been merged upstream. <branch name> is a placeholder for the branch to be deleted. Use -D instead of -d to force deletion. These operations help keep the repository tidy and prevent accidental commits to obsolete branches.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/auth/Outlook-Add-in-Microsoft-Graph-ASPNET/Contributing.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit branch -d <branch name>\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Repo and Pulling Fork in Shell\nDESCRIPTION: This sequence of commands initializes a new local Git repository, adds the user's forked repository as the 'origin' remote, and pulls the 'main' branch from the fork into the local repository. This is the initial setup for merging an existing project.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmd Office-Add-in-samples\ncd Office-Add-in-samples\ngit init\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add origin https://github.com/yourgitaccount/Office-Add-in-samples.git\ngit pull origin main\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Git Remote in Shell\nDESCRIPTION: This command adds a new remote repository named 'upstream' that points to the official OfficeDev/Office-Add-in-samples repository. This is necessary for fetching updates from the original repository to keep the local fork synchronized.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# add a new remote named \"upstream\" and point to the Microsoft repository\ngit remote add upstream https://github.com/OfficeDev/Office-Add-in-samples.git\n```\n\n----------------------------------------\n\nTITLE: Displaying serve Command Options - Shell\nDESCRIPTION: Displays the available command-line options for the serve package. This helps users adjust settings such as port, SSL, and directory. No parameters required; run after installing serve.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_83\n\nLANGUAGE: sh\nCODE:\n```\nserve -h\n```\n\n----------------------------------------\n\nTITLE: Managing Watchman with Homebrew - Shell\nDESCRIPTION: This set of shell commands illustrates how to stop, update, and reinstall the Watchman service using Homebrew on macOS. These steps resolve issues with npm test hanging due to problematic Watchman installations. Requires both 'brew' and 'watchman' to be installed. Run the commands sequentially to upgrade Watchman to a compatible version and ensure clean operation of file watchers on macOS.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_105\n\nLANGUAGE: Shell\nCODE:\n```\nwatchman shutdown-server\\nbrew update\\nbrew reinstall watchman\n```\n\n----------------------------------------\n\nTITLE: Listing and Linking Blazor Office Add-in Samples in Markdown\nDESCRIPTION: This Markdown snippet structures a list of hyperlinks to subdirectories containing sample Office Add-ins built with Blazor WebAssembly. The links allow users to navigate to the implementations for Excel, Outlook, and Word. No dependencies are required beyond a Markdown renderer (e.g., on GitHub or a supported IDE). Input consists of descriptive text and list objects; outputs are rendered hyperlinks. The snippet is suited as the main README content and should be placed at the root of the sample repository.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/blazor-add-in/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Blazor Office Add-in samples\n\nIndividual samples for Excel, Outlook, and Word that show how to use Blazor Webassembly to build your Office add-ins.\n\n- [Blazor Excel add-in](./excel-blazor-add-in/)\n- [Blazor Outlook add-in](./outlook-blazor-add-in/)\n- [Blazor Word add-in](./word-blazor-add-in/)\n```\n\n----------------------------------------\n\nTITLE: Disabling Host Header Check (Dangerous) via Environment Variable\nDESCRIPTION: Demonstrates setting the `DANGEROUSLY_DISABLE_HOST_CHECK` environment variable to `true` within a `.env.development.local` file. This completely bypasses the host header check, which can fix persistent \"Invalid Host header\" issues in complex environments but introduces significant security risks (DNS rebinding attacks) and is generally not recommended.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_45\n\nLANGUAGE: plaintext\nCODE:\n```\n# NOTE: THIS IS DANGEROUS!\n# It exposes your machine to cyberattacks from the websites you visit.\nDANGEROUSLY_DISABLE_HOST_CHECK=true\n```\n\n----------------------------------------\n\nTITLE: Checking Git Remotes in Shell\nDESCRIPTION: This command lists the remote repositories configured for the local Git repository, along with their URLs. It's used to verify if a remote pointing to the original Microsoft repository (often named 'upstream') exists.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# check if you have a remote pointing to the Microsoft repository\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Defining Project Folder Structure - Markdown\nDESCRIPTION: This snippet displays the canonical structure of a newly created app using Create React App. It helps developers identify the mandatory files and understand the organization of assets, source files, and configuration files. The presentation is Markdown-formatted for documentation purposes and is not meant to be run directly; it serves as a reference to ensure key files like 'public/index.html' and 'src/index.js' exist, as required by the build process.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-js/ClientApp/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to the Sample Add-in Project (Command Line)\nDESCRIPTION: This setup snippet provides the necessary shell commands to clone the repository, navigate to the sample folder, and prepare for further development. Required dependency: Git. The commands enable users to obtain the add-in sample code and enter the relevant directory. No complex parameters are required, only execution order; output is the project files present in the correct folder.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Excel.OfflineStorageAddin/README.md#_snippet_0\n\nLANGUAGE: command line\nCODE:\n```\n$ git clone https://github.com/OfficeDev/PnP-OfficeAddins.git\\n$ cd PnP-OfficeAddins\\n$ cd Samples\\n$ cd Excel.OfflineStorageAddin\n```\n\n----------------------------------------\n\nTITLE: Extending Office.TableData: Adding Headers from Object Properties (JavaScript)\nDESCRIPTION: This JavaScript snippet defines an extension method `addHeaders` for the `Office.TableData` object. It initializes the table headers by iterating through the properties of a given object (typically the first data row), adding each property name as a header. It ignores properties that are complex objects (typeof == 'object'), have empty names, or are named `__type` (common in WCF responses).\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Excel.JsonToOfficeTable/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n//extension to Office.TableData to add headers\nOffice.TableData.prototype.addHeaders = function (obj) {\n    var h = new Array();\n    for (var prop in obj) {\n        //ignore complex types empty columns and __type from WCF\n        if (typeof (obj[prop]) != 'object' &&\n            prop.trim().length > 0 &&\n            prop != '__type')\n            h.push(prop);\n    }\n    this.headers = h;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Host Check Insecurely in .env.development.local (Shell/Env)\nDESCRIPTION: Sets the `DANGEROUSLY_DISABLE_HOST_CHECK` environment variable to `true` in a `.env.development.local` file. This completely bypasses the development server's host header check, potentially resolving access issues in complex environments, but is strongly discouraged due to the security risks it introduces, such as exposure to DNS rebinding attacks.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/Office.ASP.NETCoreReactAddins/excel-ts/ClientApp/README.md#_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\n# NOTE: THIS IS DANGEROUS!\n# It exposes your machine to cyberattacks from the websites you visit.\nDANGEROUSLY_DISABLE_HOST_CHECK=true\n```\n\n----------------------------------------\n\nTITLE: Exploring Sample Project File Structure\nDESCRIPTION: This snippet shows the directory and file structure of the sample Excel add-in project. It highlights key configuration files like `manifest.xml`, `package.json`, and `webpack.config.js`, the source code directory (`src/`), static assets (`assets/`), and VS Code specific configurations (`.vscode/`). Understanding this structure helps navigate and modify the add-in code.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-get-started-with-dev-kit/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| .eslintrc.json\n| .gitignore\n| .vscode/\n|   | extensions.json\n|   | launch.json               Launch and debug configurations\n|   | settings.json             \n|   | tasks.json                \n| assets/                       Static assets, such as images\n| babel.config.json\n| manifest.xml                  Manifest file\n| package.json                  \n| README.md                     \n| RUN_WITH_EXTENSION.md         \n| src/                          Add-in source code\n|   | taskpane/\n|   |   | taskpane.css          Task pane style\n|   |   | taskpane.html         Task pane entry HTML\n|   |   | taskpane.js           Office JS API calls and add-in logic\n| webpack.config.js             Webpack config\n```\n\n----------------------------------------\n\nTITLE: Cloning the Office Add-in Samples Repository - Console\nDESCRIPTION: This command demonstrates how to use Git to clone the complete Office Add-in Samples repository, which contains the sample codebase for the solution. It requires Git to be installed on the development machine. The command fetches all sample code, which is needed before proceeding with setup or configuration.\nSOURCE: https://github.com/officedev/office-add-in-samples/blob/main/Samples/excel-create-worksheet-from-web-site/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/OfficeDev/Office-Add-in-samples.git\n```"
  }
]