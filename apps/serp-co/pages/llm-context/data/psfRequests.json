[
  {
    "owner": "psf",
    "repo": "requests",
    "content": "TITLE: Basic Usage of Requests Library in Python\nDESCRIPTION: Demonstrates the simplicity of making HTTP requests with the Requests library. The example shows how to make a GET request to GitHub's API with authentication, then access various response properties including status code, headers, encoding, text content, and JSON parsing.\nSOURCE: https://github.com/psf/requests/blob/main/docs/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.get('https://api.github.com/user', auth=('user', 'pass'))\n>>> r.status_code\n200\n>>> r.headers['content-type']\n'application/json; charset=utf8'\n>>> r.encoding\n'utf-8'\n>>> r.text\n'{\"type\":\"User\"...'\n>>> r.json()\n{'private_gists': 419, 'total_private_repos': 77, ...}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Requests Python Library\nDESCRIPTION: Demonstrates how to use the Requests library to make an HTTP GET request with basic authentication, access response properties such as status code, headers, encoding, and parse JSON responses.\nSOURCE: https://github.com/psf/requests/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import requests\n>>> r = requests.get('https://httpbin.org/basic-auth/user/pass', auth=('user', 'pass'))\n>>> r.status_code\n200\n>>> r.headers['content-type']\n'application/json; charset=utf8'\n>>> r.encoding\n'utf-8'\n>>> r.text\n'{\"authenticated\": true, ...'\n>>> r.json()\n{'authenticated': True, ...}\n```\n\n----------------------------------------\n\nTITLE: Handling Response Content with Python Requests\nDESCRIPTION: Demonstrates how to access and work with response content, including text, binary, and JSON responses. Also covers changing response encoding.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.get('https://api.github.com/events')\n>>> r.text\n'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...'\n\n>>> r.encoding\n'utf-8'\n>>> r.encoding = 'ISO-8859-1'\n\n>>> r.content\nb'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...'\n\n>>> r.json()\n[{'repository': {'open_issues': 0, 'url': 'https://github.com/...'\n```\n\n----------------------------------------\n\nTITLE: Making JSON POST Request\nDESCRIPTION: Demonstrates two methods of making POST requests with JSON data using the requests library - manually encoding JSON and using the json parameter.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import json\n\n>>> url = 'https://api.github.com/some/endpoint'\n>>> payload = {'some': 'data'}\n\n>>> r = requests.post(url, data=json.dumps(payload))\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> url = 'https://api.github.com/some/endpoint'\n>>> payload = {'some': 'data'}\n\n>>> r = requests.post(url, json=payload)\n```\n\n----------------------------------------\n\nTITLE: Importing and Making Basic HTTP Requests with Python Requests\nDESCRIPTION: Demonstrates how to import the Requests library and make basic HTTP requests including GET, POST, PUT, DELETE, HEAD, and OPTIONS.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import requests\n\n>>> r = requests.get('https://api.github.com/events')\n>>> r = requests.post('https://httpbin.org/post', data={'key': 'value'})\n>>> r = requests.put('https://httpbin.org/put', data={'key': 'value'})\n>>> r = requests.delete('https://httpbin.org/delete')\n>>> r = requests.head('https://httpbin.org/get')\n>>> r = requests.options('https://httpbin.org/get')\n```\n\n----------------------------------------\n\nTITLE: Passing URL Parameters with Python Requests\nDESCRIPTION: Shows how to pass parameters in URLs using the params keyword argument, including passing multiple values for a single key.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> payload = {'key1': 'value1', 'key2': 'value2'}\n>>> r = requests.get('https://httpbin.org/get', params=payload)\n>>> print(r.url)\nhttps://httpbin.org/get?key2=value2&key1=value1\n\n>>> payload = {'key1': 'value1', 'key2': ['value2', 'value3']}\n>>> r = requests.get('https://httpbin.org/get', params=payload)\n>>> print(r.url)\nhttps://httpbin.org/get?key1=value1&key2=value2&key2=value3\n```\n\n----------------------------------------\n\nTITLE: Using Session Objects to Persist Cookies in Python Requests\nDESCRIPTION: This example demonstrates how to use a Session object to persist cookies across multiple HTTP requests. The session maintains cookies between requests to the same host.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ns = requests.Session()\n\ns.get('https://httpbin.org/cookies/set/sessioncookie/123456789')\nr = s.get('https://httpbin.org/cookies')\n\nprint(r.text)\n# '{\"cookies\": {\"sessioncookie\": \"123456789\"}}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Retries with Python Requests\nDESCRIPTION: This snippet demonstrates how to implement automatic retries for failed connections using the urllib3.util.Retry class. It shows how to configure retries with backoff and status code filtering.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom urllib3.util import Retry\nfrom requests import Session\nfrom requests.adapters import HTTPAdapter\n\ns = Session()\nretries = Retry(\n    total=3,\n    backoff_factor=0.1,\n    status_forcelist=[502, 503, 504],\n    allowed_methods={'POST'},\n)\ns.mount('https://', HTTPAdapter(max_retries=retries))\n```\n\n----------------------------------------\n\nTITLE: Handling Response Status Codes\nDESCRIPTION: Examples of checking response status codes and raising exceptions for error responses using the requests library.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.get('https://httpbin.org/get')\n>>> r.status_code\n200\n\n>>> r.status_code == requests.codes.ok\nTrue\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> bad_r = requests.get('https://httpbin.org/status/404')\n>>> bad_r.status_code\n404\n\n>>> bad_r.raise_for_status()\nTraceback (most recent call last):\n  File \"requests/models.py\", line 832, in raise_for_status\n    raise http_error\nrequests.exceptions.HTTPError: 404 Client Error\n```\n\n----------------------------------------\n\nTITLE: Managing Redirects and Request Timeouts\nDESCRIPTION: Shows how to handle URL redirections and set request timeouts to prevent hanging connections.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.get('http://github.com/')\n\n>>> r.url\n'https://github.com/'\n\n>>> r.status_code\n200\n\n>>> r.history\n[<Response [301]>]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> requests.get('https://github.com/', timeout=0.001)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nrequests.exceptions.Timeout: HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)\n```\n\n----------------------------------------\n\nTITLE: Setting Separate Connect and Read Timeouts in Python Requests\nDESCRIPTION: Shows how to set different timeout values for connect and read operations using a tuple. The first value (3.05) is the connect timeout, and the second value (27) is the read timeout.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nr = requests.get('https://github.com', timeout=(3.05, 27))\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Multipart Encoding\nDESCRIPTION: Shows different ways to upload files using requests - basic file upload, setting file metadata, and sending string data as files.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> url = 'https://httpbin.org/post'\n>>> files = {'file': open('report.xls', 'rb')}\n\n>>> r = requests.post(url, files=files)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> url = 'https://httpbin.org/post'\n>>> files = {'file': ('report.xls', open('report.xls', 'rb'), 'application/vnd.ms-excel', {'Expires': '0'})}\n\n>>> r = requests.post(url, files=files)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> url = 'https://httpbin.org/post'\n>>> files = {'file': ('report.csv', 'some,data,to,send\\nanother,row,to,send\\n')}\n\n>>> r = requests.post(url, files=files)\n```\n\n----------------------------------------\n\nTITLE: Sending Form-Encoded Data in POST Requests with Python Requests\nDESCRIPTION: Shows how to send form-encoded data in POST requests, including multiple values for a single key.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> payload = {'key1': 'value1', 'key2': 'value2'}\n>>> r = requests.post('https://httpbin.org/post', data=payload)\n\n>>> payload_tuples = [('key1', 'value1'), ('key1', 'value2')]\n>>> r1 = requests.post('https://httpbin.org/post', data=payload_tuples)\n>>> payload_dict = {'key1': ['value1', 'value2']}\n>>> r2 = requests.post('https://httpbin.org/post', data=payload_dict)\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Basic Authentication with Requests in Python\nDESCRIPTION: Demonstrates how to use HTTP Basic Authentication with Requests using both the HTTPBasicAuth class and the shorthand tuple method. This is the simplest form of authentication supported by many web services.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/authentication.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from requests.auth import HTTPBasicAuth\n>>> basic = HTTPBasicAuth('user', 'pass')\n>>> requests.get('https://httpbin.org/basic-auth/user/pass', auth=basic)\n<Response [200]>\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> requests.get('https://httpbin.org/basic-auth/user/pass', auth=('user', 'pass'))\n<Response [200]>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authentication for Requests in Python\nDESCRIPTION: Illustrates how to implement a custom authentication method by subclassing AuthBase and implementing the __call__() method. This allows for the creation of new forms of authentication not natively supported by Requests.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/authentication.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import requests\n>>> class MyAuth(requests.auth.AuthBase):\n...     def __call__(self, r):\n...         # Implement my authentication\n...         return r\n...\n>>> url = 'https://httpbin.org/get'\n>>> requests.get(url, auth=MyAuth())\n<Response [200]>\n```\n\n----------------------------------------\n\nTITLE: Streaming File Upload in Python using Requests\nDESCRIPTION: This example demonstrates how to perform a streaming upload of a large file without reading it entirely into memory. It uses a file-like object as the request body.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwith open('massive-body', 'rb') as f:\n    requests.post('http://some.url/streamed', data=f)\n```\n\n----------------------------------------\n\nTITLE: Setting Single Timeout Value in Python Requests\nDESCRIPTION: Demonstrates how to set a single timeout value that applies to both connect and read operations. The timeout is specified in seconds.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nr = requests.get('https://github.com', timeout=5)\n```\n\n----------------------------------------\n\nTITLE: Streaming API Consumption in Python using Requests\nDESCRIPTION: This snippet demonstrates how to consume a streaming API using Requests. It shows how to iterate over streaming responses line by line, decoding and parsing JSON data.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\nr = requests.get('https://httpbin.org/stream/20', stream=True)\n\nfor line in r.iter_lines():\n\n    # filter out keep-alive new lines\n    if line:\n        decoded_line = line.decode('utf-8')\n        print(json.loads(decoded_line))\n\n# Example with fallback encoding\nr = requests.get('https://httpbin.org/stream/20', stream=True)\n\nif r.encoding is None:\n    r.encoding = 'utf-8'\n\nfor line in r.iter_lines(decode_unicode=True):\n```\n\n----------------------------------------\n\nTITLE: Working with Raw Response Content in Python Requests\nDESCRIPTION: Shows how to access raw socket response and stream content to a file using Response.iter_content.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.get('https://api.github.com/events', stream=True)\n>>> r.raw\n<urllib3.response.HTTPResponse object at 0x101194810>\n>>> r.raw.read(10)\nb'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03'\n\nwith open(filename, 'wb') as fd:\n    for chunk in r.iter_content(chunk_size=128):\n        fd.write(chunk)\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Verification in Python Requests\nDESCRIPTION: These examples demonstrate different ways to handle SSL certificate verification in Requests, including enabling/disabling verification and specifying custom certificate files.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> requests.get('https://requestb.in')\nrequests.exceptions.SSLError: hostname 'requestb.in' doesn't match either of '*.herokuapp.com', 'herokuapp.com'\n\n>>> requests.get('https://github.com')\n<Response [200]>\n\n>>> requests.get('https://github.com', verify='/path/to/certfile')\n\ns = requests.Session()\ns.verify = '/path/to/certfile'\n\n>>> requests.get('https://kennethreitz.org', verify=False)\n<Response [200]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxies for an Entire Session in Python Requests\nDESCRIPTION: This code shows how to set up proxies for an entire session using the Requests library, allowing all requests made through the session to use the specified proxies.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\n\nproxies = {\n  'http': 'http://10.10.1.10:3128',\n  'https': 'http://10.10.1.10:1080',\n}\nsession = requests.Session()\nsession.proxies.update(proxies)\n\nsession.get('http://example.org')\n```\n\n----------------------------------------\n\nTITLE: Streaming Content Retrieval in Python using Requests\nDESCRIPTION: This snippet demonstrates how to use the 'stream' parameter to defer downloading the response body until needed. It also shows how to conditionally retrieve content based on the content length.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntarball_url = 'https://github.com/psf/requests/tarball/main'\nr = requests.get(tarball_url, stream=True)\n\nif int(r.headers['content-length']) < TOO_LONG:\n  content = r.content\n  ...\n```\n\n----------------------------------------\n\nTITLE: Providing Default Data to Session Requests in Python\nDESCRIPTION: This example shows how to configure a Session object with default authentication and headers that will be used for all requests made with that session.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns = requests.Session()\ns.auth = ('user', 'pass')\ns.headers.update({'x-test': 'true'})\n\n# both 'x-test' and 'x-test2' are sent\ns.get('https://httpbin.org/headers', headers={'x-test2': 'true'})\n```\n\n----------------------------------------\n\nTITLE: Chunk-Encoded Request in Python using Requests\nDESCRIPTION: This snippet shows how to send a chunk-encoded request using a generator as the request body. It demonstrates the use of yield to generate chunks of data.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef gen():\n    yield 'hi'\n    yield 'there'\n\nrequests.post('http://some.url/chunked', data=gen())\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxies for Individual Requests in Python\nDESCRIPTION: This snippet demonstrates how to set up proxies for individual HTTP and HTTPS requests using the Requests library in Python.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\n\nproxies = {\n  'http': 'http://10.10.1.10:3128',\n  'https': 'http://10.10.1.10:1080',\n}\n\nrequests.get('http://example.org', proxies=proxies)\n```\n\n----------------------------------------\n\nTITLE: Multiple Multipart-Encoded File Upload in Python using Requests\nDESCRIPTION: This example illustrates how to upload multiple files in a single request using multipart encoding. It uses a list of tuples to specify multiple files for a single form field.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nurl = 'https://httpbin.org/post'\nmultiple_files = [\n    ('images', ('foo.png', open('foo.png', 'rb'), 'image/png')),\n    ('images', ('bar.png', open('bar.png', 'rb'), 'image/png'))]\nr = requests.post(url, files=multiple_files)\n```\n\n----------------------------------------\n\nTITLE: Making GET Request and Parsing JSON Response with Python Requests\nDESCRIPTION: This code demonstrates making a GET request to the GitHub API using the Requests library, checking the response status, and parsing the JSON response.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\n>>> import requests\n>>> r = requests.get('https://api.github.com/repos/psf/requests/git/commits/a050faf084662f3a352dd1a941f2c7c9f886d4ad')\n\n>>> if r.status_code == requests.codes.ok:\n...     print(r.headers['content-type'])\n...\napplication/json; charset=utf-8\n\n>>> commit_data = r.json()\n\n>>> print(commit_data.keys())\n['committer', 'author', 'url', 'tree', 'sha', 'parents', 'message']\n\n>>> print(commit_data['committer'])\n{'date': '2012-05-10T11:10:50-07:00', 'email': 'me@kennethreitz.com', 'name': 'Kenneth Reitz'}\n\n>>> print(commit_data['message'])\nmakin' history\n```\n\n----------------------------------------\n\nTITLE: Client-Side Certificates in Python Requests\nDESCRIPTION: This example shows how to use client-side certificates for authentication in Requests, either as a single file containing both the certificate and private key or as a tuple of separate files.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> requests.get('https://kennethreitz.org', cert=('/path/client.cert', '/path/client.key'))\n<Response [200]>\n\ns = requests.Session()\ns.cert = '/path/client.cert'\n\n>>> requests.get('https://kennethreitz.org', cert='/wrong_path/client.pem')\nSSLError: [Errno 336265225] _ssl.c:347: error:140B0009:SSL routines:SSL_CTX_use_PrivateKey_file:PEM lib\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Requests in Python\nDESCRIPTION: Demonstrates how to add custom HTTP headers to a request using the headers parameter.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> url = 'https://api.github.com/some/endpoint'\n>>> headers = {'user-agent': 'my-app/0.0.1'}\n>>> r = requests.get(url, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying Prepared Requests in Python\nDESCRIPTION: This example shows how to create a PreparedRequest object that can be modified before sending, allowing fine-grained control over the request body and headers.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom requests import Request, Session\n\ns = Session()\n\nreq = Request('POST', url, data=data, headers=headers)\nprepped = req.prepare()\n\n# do something with prepped.body\nprepped.body = 'No, I want exactly this as the body.'\n\n# do something with prepped.headers\ndel prepped.headers['Content-Type']\n\nresp = s.send(prepped,\n    stream=stream,\n    verify=verify,\n    proxies=proxies,\n    cert=cert,\n    timeout=timeout\n)\n\nprint(resp.status_code)\n```\n\n----------------------------------------\n\nTITLE: Working with Response Headers and Cookies\nDESCRIPTION: Demonstrates accessing response headers and handling cookies, including sending and receiving cookies in requests.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/quickstart.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> r.headers\n{\n    'content-encoding': 'gzip',\n    'transfer-encoding': 'chunked',\n    'connection': 'close',\n    'server': 'nginx/1.0.4',\n    'x-runtime': '148ms',\n    'etag': '\"e1ca502697e5c9317743dc078f67693f\"',\n    'content-type': 'application/json'\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> url = 'https://httpbin.org/cookies'\n>>> cookies = dict(cookies_are='working')\n\n>>> r = requests.get(url, cookies=cookies)\n>>> r.text\n'{\"cookies\": {\"cookies_are\": \"working\"}}'\n```\n\n----------------------------------------\n\nTITLE: Session API Usage in Python Requests\nDESCRIPTION: Demonstrates the updated Session API usage in Requests 1.x where Session objects no longer accept parameters during initialization.\nSOURCE: https://github.com/psf/requests/blob/main/docs/api.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ns = requests.Session()    # formerly, session took parameters\ns.auth = auth\ns.headers.update(headers)\nr = s.get('https://httpbin.org/headers')\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxies with Authentication in Python Requests\nDESCRIPTION: This code shows how to set up proxies with HTTP Basic Authentication for use with the Requests library in Python.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n$ export HTTPS_PROXY=\"http://user:pass@10.10.1.10:1080\"\n\n$ python\n>>> proxies = {'http': 'http://user:pass@10.10.1.10:3128/'}\n```\n\n----------------------------------------\n\nTITLE: Using Session State with Prepared Requests in Python\nDESCRIPTION: This example demonstrates how to prepare a request with session-level state applied, ensuring cookies and other session parameters are included in the prepared request.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom requests import Request, Session\n\ns = Session()\nreq = Request('GET',  url, data=data, headers=headers)\n\nprepped = s.prepare_request(req)\n\n# do something with prepped.body\nprepped.body = 'Seriously, send exactly these bytes.'\n\n# do something with prepped.headers\nprepped.headers['Keep-Dead'] = 'parrot'\n\nresp = s.send(prepped,\n    stream=stream,\n    verify=verify,\n    proxies=proxies,\n    cert=cert,\n    timeout=timeout\n)\n\nprint(resp.status_code)\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication in Python using Requests\nDESCRIPTION: This example shows how to implement a custom authentication mechanism by subclassing AuthBase. It demonstrates a fictional 'Pizza Auth' that sets a custom header.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom requests.auth import AuthBase\n\nclass PizzaAuth(AuthBase):\n    \"\"\"Attaches HTTP Pizza Authentication to the given Request object.\"\"\"\n    def __init__(self, username):\n        # setup any auth-related data here\n        self.username = username\n\n    def __call__(self, r):\n        # modify and return the request\n        r.headers['X-Pizza'] = self.username\n        return r\n\nrequests.get('http://pizzabin.org/admin', auth=PizzaAuth('kenneth'))\n```\n\n----------------------------------------\n\nTITLE: Streaming Requests in Python\nDESCRIPTION: Shows how to make streaming requests using the stream parameter instead of the old prefetch parameter.\nSOURCE: https://github.com/psf/requests/blob/main/docs/api.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# in 0.x, passing prefetch=False would accomplish the same thing\nr = requests.get('https://api.github.com/events', stream=True)\nfor chunk in r.iter_content(8192):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Proxy Configuration in Python\nDESCRIPTION: This snippet demonstrates how to use environment variables to configure proxies for HTTP and HTTPS requests in Python, which is then automatically used by the Requests library.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\n$ export HTTP_PROXY=\"http://10.10.1.10:3128\"\n$ export HTTPS_PROXY=\"http://10.10.1.10:1080\"\n$ export ALL_PROXY=\"socks5://10.10.1.10:3434\"\n\n$ python\n>>> import requests\n>>> requests.get('http://example.org')\n```\n\n----------------------------------------\n\nTITLE: Using Context Manager for Streaming Requests in Python\nDESCRIPTION: This snippet shows how to use a 'with' statement to ensure that a streaming request is always closed, preventing connection inefficiencies.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwith requests.get('https://httpbin.org/get', stream=True) as r:\n    # Do things with the response here.\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Digest Authentication with Requests in Python\nDESCRIPTION: Shows how to use HTTP Digest Authentication with Requests using the HTTPDigestAuth class. This is another common form of authentication supported by Requests out of the box.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/authentication.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from requests.auth import HTTPDigestAuth\n>>> url = 'https://httpbin.org/digest-auth/auth/user/pass'\n>>> requests.get(url, auth=HTTPDigestAuth('user', 'pass'))\n<Response [200]>\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Posting a Comment to GitHub API with Python Requests\nDESCRIPTION: This snippet demonstrates how to authenticate with the GitHub API using Basic Auth and post a new comment on an issue. It shows handling of JSON data and checking the response status code.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> from requests.auth import HTTPBasicAuth\n>>> auth = HTTPBasicAuth('fake@example.com', 'not_a_real_password')\n\n>>> body = json.dumps({u\"body\": u\"Sounds great! I'll get right on it!\"})\n>>> url = u\"https://api.github.com/repos/psf/requests/issues/482/comments\"\n\n>>> r = requests.post(url=url, data=body, auth=auth)\n>>> r.status_code\n201\n\n>>> content = r.json()\n>>> print(content['body'])\nSounds great! I'll get right on it.\n```\n\n----------------------------------------\n\nTITLE: Fetching and Parsing GitHub Issue Data with Python Requests\nDESCRIPTION: This code demonstrates fetching data about a GitHub issue using the Requests library, including retrieving comments and parsing the JSON responses.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\n>>> r = requests.get('https://api.github.com/repos/psf/requests/issues/482')\n>>> r.status_code\n200\n\n>>> issue = json.loads(r.text)\n\n>>> print(issue['title'])\nFeature any http verb in docs\n\n>>> print(issue['comments'])\n3\n\n>>> r = requests.get(r.url + '/comments')\n>>> r.status_code\n200\n\n>>> comments = r.json()\n\n>>> print(comments[0].keys())\n['body', 'url', 'created_at', 'updated_at', 'user', 'id']\n\n>>> print(comments[2]['body'])\nProbably in the \"advanced\" section\n```\n\n----------------------------------------\n\nTITLE: Handling Link Headers in GitHub API Responses with Python Requests\nDESCRIPTION: This snippet demonstrates how to work with Link headers in API responses, particularly for pagination. It shows how Requests automatically parses these headers for easy consumption.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> url = 'https://api.github.com/users/kennethreitz/repos?page=1&per_page=10'\n>>> r = requests.head(url=url)\n>>> r.headers['link']\n'<https://api.github.com/users/kennethreitz/repos?page=2&per_page=10>; rel=\"next\", <https://api.github.com/users/kennethreitz/repos?page=6&per_page=10>; rel=\"last\"'\n\n>>> r.links[\"next\"]\n{'url': 'https://api.github.com/users/kennethreitz/repos?page=2&per_page=10', 'rel': 'next'}\n\n>>> r.links[\"last\"]\n{'url': 'https://api.github.com/users/kennethreitz/repos?page=7&per_page=10', 'rel': 'last'}\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Headers in Python Requests\nDESCRIPTION: This example shows how to create a request to Wikipedia and then access the headers returned by the server in the response object.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.get('https://en.wikipedia.org/wiki/Monty_Python')\n\n>>> r.headers\n{'content-length': '56170', 'x-content-type-options': 'nosniff', 'x-cache':\n'HIT from cp1006.eqiad.wmnet, MISS from cp1010.eqiad.wmnet', 'content-encoding':\n'gzip', 'age': '3080', 'content-language': 'en', 'vary': 'Accept-Encoding,Cookie',\n'server': 'Apache', 'last-modified': 'Wed, 13 Jun 2012 01:33:50 GMT',\n'connection': 'close', 'cache-control': 'private, s-maxage=0, max-age=0,\nmust-revalidate', 'date': 'Thu, 14 Jun 2012 12:59:39 GMT', 'content-type':\n'text/html; charset=UTF-8', 'x-cache-lookup': 'HIT from cp1006.eqiad.wmnet:3128,\nMISS from cp1010.eqiad.wmnet:80'}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Response Lines in Python Requests\nDESCRIPTION: This code shows how to safely iterate over response lines using the iter_lines() method from the Requests library, including handling the first line separately.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nlines = r.iter_lines()\n# Save the first line for later or just skip it\n\nfirst_line = next(lines)\n\nfor line in lines:\n    print(line)\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Python Requests\nDESCRIPTION: This example demonstrates how to access the headers that were sent to the server in a request by accessing the request attribute of the response object.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> r.request.headers\n{'Accept-Encoding': 'identity, deflate, compress, gzip',\n'Accept': '*/*', 'User-Agent': 'python-requests/1.2.0'}\n```\n\n----------------------------------------\n\nTITLE: Debug Logging Configuration in Python Requests\nDESCRIPTION: Example showing how to configure debug logging for Requests, including HTTP client level debugging.\nSOURCE: https://github.com/psf/requests/blob/main/docs/api.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nimport logging\n\n# Enabling debugging at http.client level (requests->urllib3->http.client)\n# you will see the REQUEST, including HEADERS and DATA, and RESPONSE with HEADERS but without DATA.\n# the only thing missing will be the response.body which is not logged.\ntry: # for Python 3\n    from http.client import HTTPConnection\nexcept ImportError:\n    from httplib import HTTPConnection\nHTTPConnection.debuglevel = 1\n\nlogging.basicConfig() # you need to initialize logging, otherwise you will not see anything from requests\nlogging.getLogger().setLevel(logging.DEBUG)\nrequests_log = logging.getLogger(\"urllib3\")\nrequests_log.setLevel(logging.DEBUG)\nrequests_log.propagate = True\n\nrequests.get('https://httpbin.org/headers')\n```\n\n----------------------------------------\n\nTITLE: Updating and Deleting GitHub Comments with Python Requests\nDESCRIPTION: This snippet shows how to update an existing comment using the PATCH method and then delete it using the DELETE method. It demonstrates working with different HTTP verbs and handling the responses.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> print(content[u\"id\"])\n5804413\n\n>>> body = json.dumps({u\"body\": u\"Sounds great! I'll get right on it once I feed my cat.\"})\n>>> url = u\"https://api.github.com/repos/psf/requests/issues/comments/5804413\"\n\n>>> r = requests.patch(url=url, data=body, auth=auth)\n>>> r.status_code\n200\n\n>>> r = requests.delete(url=url, auth=auth)\n>>> r.status_code\n204\n>>> r.headers['status']\n'204 No Content'\n```\n\n----------------------------------------\n\nTITLE: Using Transport Adapters with Python Requests\nDESCRIPTION: This snippet demonstrates how to use Transport Adapters in Requests to customize connection behavior. It shows how to mount a custom adapter to a session for specific URLs.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n>>> s = requests.Session()\n>>> s.mount('https://github.com/', MyAdapter())\n```\n\n----------------------------------------\n\nTITLE: Checking Rate Limit with HEAD Request in Python Requests\nDESCRIPTION: This snippet demonstrates how to use a HEAD request to check the rate limit information from the GitHub API. It shows how to access response headers to retrieve specific information.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.head(url=url, auth=auth)\n>>> print(r.headers)\n...\n'x-ratelimit-remaining': '4995'\n'x-ratelimit-limit': '5000'\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth 1 Authentication with Requests and requests-oauthlib in Python\nDESCRIPTION: Demonstrates how to use OAuth 1 authentication with Requests using the requests-oauthlib library. This is commonly used for authenticating with web APIs like Twitter.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/authentication.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import requests\n>>> from requests_oauthlib import OAuth1\n\n>>> url = 'https://api.twitter.com/1.1/account/verify_credentials.json'\n>>> auth = OAuth1('YOUR_APP_KEY', 'YOUR_APP_SECRET',\n...               'USER_OAUTH_TOKEN', 'USER_OAUTH_TOKEN_SECRET')\n\n>>> requests.get(url, auth=auth)\n<Response [200]>\n```\n\n----------------------------------------\n\nTITLE: Custom Event Hook in Python using Requests\nDESCRIPTION: This snippet demonstrates how to create and use custom event hooks in Requests. It shows two example hook functions: one that prints the URL and another that sets a flag on the response object.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef print_url(r, *args, **kwargs):\n    print(r.url)\n\ndef record_hook(r, *args, **kwargs):\n    r.hook_called = True\n    return r\n\nrequests.get('https://httpbin.org/', hooks={'response': print_url})\n\nr = requests.get('https://httpbin.org/', hooks={'response': [print_url, record_hook]})\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Certificate Bundle in Python Requests\nDESCRIPTION: This snippet demonstrates how to override the default certificate bundle used by the Requests library for HTTPS connections, particularly useful when using a proxy.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\n$ export REQUESTS_CA_BUNDLE=\"/usr/local/myproxy_info/cacert.pem\"\n$ export https_proxy=\"http://10.10.1.10:1080\"\n\n$ python\n>>> import requests\n>>> requests.get('https://example.org')\n```\n\n----------------------------------------\n\nTITLE: Using Sessions as Context Managers in Python Requests\nDESCRIPTION: This example shows how to use a Session object as a context manager with a 'with' statement, ensuring the session is properly closed even if exceptions occur.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith requests.Session() as s:\n    s.get('https://httpbin.org/cookies/set/sessioncookie/123456789')\n```\n\n----------------------------------------\n\nTITLE: Printing JSON Response in Python\nDESCRIPTION: This snippet demonstrates how to print a JSON response line by line using the json module in Python.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nif line:\n    print(json.loads(line))\n```\n\n----------------------------------------\n\nTITLE: Non-persistent Method-level Parameters in Python Requests Sessions\nDESCRIPTION: This example illustrates how method-level parameters like cookies are not persisted across requests in a session, unlike session-level parameters.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ns = requests.Session()\n\nr = s.get('https://httpbin.org/cookies', cookies={'from-my': 'browser'})\nprint(r.text)\n# '{\"cookies\": {\"from-my\": \"browser\"}}'\n\nr = s.get('https://httpbin.org/cookies')\nprint(r.text)\n# '{\"cookies\": {}}'\n```\n\n----------------------------------------\n\nTITLE: JSON Response Handling in Python Requests\nDESCRIPTION: Example showing how to handle JSON responses in Requests 1.x, where r.json() is now a callable method instead of a property.\nSOURCE: https://github.com/psf/requests/blob/main/docs/api.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport requests\nr = requests.get('https://api.github.com/events')\nr.json()   # This *call* raises an exception if JSON decoding fails\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom SSL Adapter for Python Requests\nDESCRIPTION: This example shows how to create a custom Transport Adapter that uses a specific SSL version (SSLv3). It demonstrates subclassing HTTPAdapter and overriding the init_poolmanager method.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nimport ssl\nfrom urllib3.poolmanager import PoolManager\n\nfrom requests.adapters import HTTPAdapter\n\n\nclass Ssl3HttpAdapter(HTTPAdapter):\n    \"\"\"\"Transport adapter\" that allows us to use SSLv3.\"\"\"\n\n    def init_poolmanager(self, connections, maxsize, block=False):\n        self.poolmanager = PoolManager(\n            num_pools=connections, maxsize=maxsize,\n            block=block, ssl_version=ssl.PROTOCOL_SSLv3)\n```\n\n----------------------------------------\n\nTITLE: Invalid URL Exception Handling in Requests 2.x\nDESCRIPTION: Demonstrates how Requests 2.x handles invalid URL escape sequences by raising RequestException.\nSOURCE: https://github.com/psf/requests/blob/main/docs/api.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nrequests.get('http://%zz/')   # raises requests.exceptions.InvalidURL\n```\n\n----------------------------------------\n\nTITLE: Using Custom HTTP Verbs with Python Requests\nDESCRIPTION: This snippet shows how to use custom HTTP verbs not directly supported by Requests, such as MKCOL for WebDAV servers. It demonstrates the use of the .request() method for flexibility.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.request('MKCOL', url, data=data)\n>>> r.status_code\n200 # Assuming your call was correct\n```\n\n----------------------------------------\n\nTITLE: Using OPTIONS Method with Python Requests\nDESCRIPTION: This snippet shows how to use the OPTIONS HTTP method with the Requests library to determine allowed methods for a given URL, although it demonstrates that not all APIs implement this correctly.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\n>>> verbs = requests.options(r.url)\n>>> verbs.status_code\n500\n\n>>> verbs = requests.options('http://a-good-website.com/api/cats')\n>>> print(verbs.headers['allow'])\nGET,HEAD,POST,OPTIONS\n```\n\n----------------------------------------\n\nTITLE: Disabling Timeout in Python Requests\nDESCRIPTION: Demonstrates how to disable the timeout by setting it to None, which allows the request to wait indefinitely for a response.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nr = requests.get('https://github.com', timeout=None)\n```\n\n----------------------------------------\n\nTITLE: Merging Environment Settings with Prepared Requests in Python\nDESCRIPTION: This example shows how to explicitly merge environment settings into a session when using prepared requests, to ensure environment variables like REQUESTS_CA_BUNDLE are considered.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/advanced.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom requests import Request, Session\n\ns = Session()\nreq = Request('GET', url)\n\nprepped = s.prepare_request(req)\n\n# Merge environment settings into session\nsettings = s.merge_environment_settings(prepped.url, {}, None, None, None)\nresp = s.send(prepped, **settings)\n\nprint(resp.status_code)\n```\n\n----------------------------------------\n\nTITLE: Installing Requests with pip in Python\nDESCRIPTION: This command installs the Requests library using Python's pip package manager. It's the simplest method to install Requests.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/install.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install requests\n```\n\n----------------------------------------\n\nTITLE: Installing Requests with pip\nDESCRIPTION: Shows how to install the Requests library using pip from the Python Package Index (PyPI). The command uses the Python module interface for pip to ensure it uses the correct Python environment.\nSOURCE: https://github.com/psf/requests/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install requests\n```\n\n----------------------------------------\n\nTITLE: Importing JSONDecodeError from Requests in Python\nDESCRIPTION: Code showing how to import the new JSONDecodeError exception from Requests, which unifies JSON exceptions between Python 2 and 3.\nSOURCE: https://github.com/psf/requests/blob/main/HISTORY.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom requests.exceptions import JSONDecodeError, RequestException\n\ntry:\n    response.json()\nexcept JSONDecodeError as e:\n    # Handle JSON decoding error\n    pass\n```\n\n----------------------------------------\n\nTITLE: Importing Requests with Optional Character Detection in Python\nDESCRIPTION: Code snippet showing how Requests now supports optional use of character detection libraries (chardet or charset_normalizer) when repackaged or vendored. This enables projects like pip to minimize their vendoring surface area.\nSOURCE: https://github.com/psf/requests/blob/main/HISTORY.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom requests import Response\n\n# Response.text() and apparent_encoding will default to utf-8 if\n# neither chardet nor charset_normalizer is present\n```\n\n----------------------------------------\n\nTITLE: Defining Proxy URL with Credentials in Python\nDESCRIPTION: Example of defining a proxy URL with embedded credentials, which was related to a security vulnerability in earlier versions of Requests.\nSOURCE: https://github.com/psf/requests/blob/main/HISTORY.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nproxy_url = \"https://user:pass@proxy:8080\"\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration in Requests 2.x\nDESCRIPTION: Shows the updated proxy URL configuration in Requests 2.x which requires explicit scheme specification.\nSOURCE: https://github.com/psf/requests/blob/main/docs/api.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nproxies = {\n  \"http\": \"10.10.1.10:3128\",    # use http://10.10.1.10:3128 instead\n}\n\n# In requests 1.x, this was legal, in requests 2.x,\n#  this raises requests.exceptions.MissingSchema\nrequests.get(\"http://example.org\", proxies=proxies)\n```\n\n----------------------------------------\n\nTITLE: Cloning Requests GitHub Repository\nDESCRIPTION: This command clones the Requests public repository from GitHub to get the source code for development or local installation.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/install.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/psf/requests.git\n```\n\n----------------------------------------\n\nTITLE: Installing Requests with Chardet Support in Python 3\nDESCRIPTION: Shell command demonstrating how to install Requests with explicit chardet support on Python 3, after the switch to charset_normalizer as the default.\nSOURCE: https://github.com/psf/requests/blob/main/HISTORY.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install \"requests[use_chardet_on_py3]\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the Requests GitHub Repository\nDESCRIPTION: Demonstrates how to clone the Requests repository from GitHub with a special Git flag to avoid timezone issues in the repository. Includes an option for applying the setting globally.\nSOURCE: https://github.com/psf/requests/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone -c fetch.fsck.badTimezone=ignore https://github.com/psf/requests.git\n```\n\n----------------------------------------\n\nTITLE: Downloading Requests Source Code Tarball\nDESCRIPTION: These commands download the Requests source code tarball directly from GitHub. A zipball alternative is also available for Windows users.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/install.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -OL https://github.com/psf/requests/tarball/main\n# optionally, zipball is also available (for Windows users).\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies for Requests with SOCKS Support\nDESCRIPTION: This requirements file installs all necessary dependencies for testing the Requests library with SOCKS proxy support. It includes pytest for running tests, pytest-cov for coverage reporting, pytest-httpbin and httpbin for HTTP request testing, trustme for TLS certificate generation, and wheel for packaging.\nSOURCE: https://github.com/psf/requests/blob/main/requirements-dev.txt#2025-04-20_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-e .[socks]\npytest>=2.8.0,<9\npytest-cov\npytest-httpbin==2.1.0\nhttpbin~=0.10.0\ntrustme\nwheel\n```\n\n----------------------------------------\n\nTITLE: Requests Library Version History in Markdown\nDESCRIPTION: Markdown formatted changelog detailing version releases from 0.0.1 through 0.2.2, documenting features like HTTPError handling, monkey-patching support, cookie handling, and file upload capabilities\nSOURCE: https://github.com/psf/requests/blob/main/HISTORY.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n0.2.2 (2011-02-14)\n------------------\n\n-   Still handles request in the event of an HTTPError. (Issue \\#2)\n-   Eventlet and Gevent Monkeypatch support.\n-   Cookie Support (Issue \\#1)\n\n0.2.1 (2011-02-14)\n------------------\n\n-   Added file attribute to POST and PUT requests for multipart-encode\n    file uploads.\n-   Added Request.url attribute for context and redirects\n\n0.2.0 (2011-02-14)\n------------------\n\n-   Birth!\n\n0.0.1 (2011-02-13)\n------------------\n\n-   Frustration\n-   Conception\n```\n\n----------------------------------------\n\nTITLE: Including Project History in reStructuredText Documentation\nDESCRIPTION: A directive to include the project's HISTORY.md file in the documentation. This pulls in the project's changelog to keep documentation of version history consistent with the main repository file.\nSOURCE: https://github.com/psf/requests/blob/main/docs/community/updates.rst#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../../HISTORY.md\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Link in reStructuredText\nDESCRIPTION: A hyperlink reference to the Requests library GitHub repository using reStructuredText syntax. This allows users to easily navigate to the repository for tracking development progress.\nSOURCE: https://github.com/psf/requests/blob/main/docs/community/updates.rst#2025-04-20_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`the GitHub repo <https://github.com/psf/requests>`_\n```\n\n----------------------------------------\n\nTITLE: Installing Requests from Local Source\nDESCRIPTION: These commands navigate to the downloaded Requests directory and install it into your Python environment using pip.\nSOURCE: https://github.com/psf/requests/blob/main/docs/user/install.rst#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd requests\n$ python -m pip install .\n```\n\n----------------------------------------\n\nTITLE: Pinning Sphinx Version for Read the Docs\nDESCRIPTION: Specifies a fixed version of Sphinx (7.2.6) to prevent potential breaking changes in documentation generation. Used specifically by Read the Docs (RTD) platform for building project documentation.\nSOURCE: https://github.com/psf/requests/blob/main/docs/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nSphinx==7.2.6\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Git Settings for Requests Repository\nDESCRIPTION: Shows how to set a global Git configuration option to ignore bad timezone issues when working with the Requests repository. This applies the setting to all Git operations on the user's system.\nSOURCE: https://github.com/psf/requests/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global fetch.fsck.badTimezone ignore\n```\n\n----------------------------------------\n\nTITLE: Regenerating Test Certificates with Make\nDESCRIPTION: Commands to clean and regenerate the testing certificates environment. This rebuilds both the certificate authority in the 'ca' directory and the invalid server certificate in the 'server' directory.\nSOURCE: https://github.com/psf/requests/blob/main/tests/certs/expired/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake clean\nmake all\n```\n\n----------------------------------------\n\nTITLE: Including Authors List in reStructuredText\nDESCRIPTION: This snippet uses the reStructuredText 'include' directive to insert the content of the AUTHORS.rst file from the parent directory into the current document. This allows for maintaining a single list of authors that can be referenced in multiple places.\nSOURCE: https://github.com/psf/requests/blob/main/docs/dev/authors.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../AUTHORS.rst\n```"
  }
]