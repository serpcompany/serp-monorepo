[
  {
    "owner": "infinitered",
    "repo": "ignite",
    "content": "TITLE: Installing Ignite CLI and Creating a New React Native App\nDESCRIPTION: Commands to install the Ignite CLI and create a new React Native app using Ignite. It includes options for interactive setup and using recommended defaults.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get walked through the prompts for the different options to start your new app\nnpx ignite-cli@latest new PizzaApp\n\n# Accept all the recommended defaults and get straight to coding!\nnpx ignite-cli@latest new PizzaApp --yes\n```\n\n----------------------------------------\n\nTITLE: Installing and Creating a New Ignite Project with CLI\nDESCRIPTION: Command to create a new React Native project using Ignite CLI without requiring global installation, leveraging npx to execute the latest version directly.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/Guide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx ignite-cli@latest new PizzaApp\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Button Presets in React Native\nDESCRIPTION: This snippet shows how to define custom presets for the Button component by adding keys to the style objects.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst $viewPresets = {\n  // ...\n  danger: [$baseViewStyle, { backgroundColor: colors.palette.angry500 }] as StyleProp<ViewStyle>,\n}\n\nconst $textPresets: Record<Presets, StyleProp<TextStyle>> = {\n  // ...\n  danger: [$baseTextStyle, { color: colors.palette.angry500 }] as StyleProp<TextStyle>,\n}\n\nconst $pressedViewPresets: Record<Presets, StyleProp<ViewStyle>> = {\n  // ...\n  danger: { backgroundColor: colors.palette.angry500 },\n}\n\nconst $pressedTextPresets: Record<Presets, StyleProp<TextStyle>> = {\n  angry: { opacity: 0.7 },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Flow in React Navigation\nDESCRIPTION: A pattern for implementing conditional rendering based on authentication state using React Navigation. The Stack Navigator shows different screens depending on whether the user is authenticated, following the observer pattern with MobX.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/navigators/Navigation.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst AppStack = observer(function AppStack() {\n  const {\n    authenticationStore: { isAuthenticated },\n  } = useStores()\n\n  return (\n    <Stack.Navigator\n      screenOptions={{ headerShown: false }}\n      initialRouteName={isAuthenticated ? \"Welcome\" : \"Login\"}\n    >\n      {isAuthenticated ? (\n        <>\n          <Stack.Screen name=\"Welcome\" component={WelcomeScreen} />\n          <Stack.Screen name=\"Demo\" component={DemoNavigator} />\n        </>\n      ) : (\n        <>\n          <Stack.Screen name=\"Login\" component={LoginScreen} />\n        </>\n      )}\n    </Stack.Navigator>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundary Component in React Native\nDESCRIPTION: This code snippet demonstrates how to create an ErrorBoundary component in React Native. It uses a class component with componentDidCatch to capture errors and render a fallback UI when an error occurs in child components.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Error-Boundary.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst ErrorMessage = () => <Text>Something went wrong!</Text>\n\nclass ErrorBoundary extends Component<Props, State> {\n  state = { error: null, errorInfo: null }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    this.setState({\n      error,\n      errorInfo,\n    })\n  }\n\n  render() {\n    return this.state.error ? <ErrorMessage /> : this.props.children\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mock Functions with Arrays in Jest\nDESCRIPTION: Shows how to use a mock function with JavaScript's map method on an array. This demonstrates a practical application of mock functions in a unit test.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Testing.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst added = [0, 1].map(mockCallback)\n```\n\n----------------------------------------\n\nTITLE: Installing Ignite CLI for new React Native projects\nDESCRIPTION: Commands to create a new React Native application using the Ignite CLI. The first command walks users through setup options, while the second command accepts all defaults for faster setup.\nSOURCE: https://github.com/infinitered/ignite/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get walked through the prompts for the different options to start your new app\nnpx ignite-cli@latest new PizzaApp\n\n# Accept all the recommended defaults and get straight to coding!\nnpx ignite-cli@latest new PizzaApp --yes\n```\n\n----------------------------------------\n\nTITLE: Programmatic Tab Navigation Example\nDESCRIPTION: Example of how to programmatically navigate between tabs in a React Navigation Tab Navigator. This snippet shows how to navigate from the current tab to another tab using the navigation prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/navigators/Navigation.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// currently on the DemoShowroom tab, navigate to the DemoDebug tab\nnavigation.navigate(\"DemoDebug\")\n```\n\n----------------------------------------\n\nTITLE: Implementing RootStore with MobX-State-Tree in TypeScript\nDESCRIPTION: Demonstrates how to create a root store model that contains multiple store instances like authentication and episode stores. Uses MobX-State-Tree's types.model to define the store structure.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/models/Models.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthenticationStoreModel } from \"./AuthenticationStore\"\nimport { EpisodeStoreModel } from \"./EpisodeStore\"\n\nexport const RootStoreModel = types.model(\"RootStore\", {\n  authenticationStore: types.optional(AuthenticationStoreModel, {}),\n  episodeStore: types.optional(EpisodeStoreModel, {}),\n})\n```\n\n----------------------------------------\n\nTITLE: Using Header with React Navigation's setOptions\nDESCRIPTION: Example showing the recommended method for integrating the Header component with React Navigation using navigation.setOptions() and useLayoutEffect to keep the header outside of the screen component's render lifecycle.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AccountScreen(props) {\n  const { navigation } = props\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerShown: true,\n      header: () => <Header title=\"Hello\" />,\n    })\n  }, [])\n\n  return <Screen />\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Against Mock Function Properties\nDESCRIPTION: Example of how to assert against the .mock property of a Jest mock function. This shows how to verify the number of times a mock function was called in a test.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Testing.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// The mock function is called twice, once for each item in the array\nexpect(mockCallback.mock.calls.length).toBe(2)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Ignite CLI Generators\nDESCRIPTION: Command to list all available generators in Ignite CLI. This helps developers see what generators they can use in their project.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generators.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx ignite-cli generate --list\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation with React Navigation in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up nested stack navigators using React Navigation and TypeScript. It shows a two-level deep navigation structure and how to use the getActiveRouteName function.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/navigators/navigationUtilities.ts.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// nested navigators, 2-deep\nconst NestedStack = () => {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"myScreen\" component={MyScreen} />\n    </Stack.Navigator>\n  )\n}\n\nconst AppStack = () => {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"nestedNav\" component={NestedStack} />\n    </Stack.Navigator>\n  )\n}\n\n// getActiveRouteName usage\nfunction MyScreen({ navigation }) {\n  const routeName = getActiveRouteName(navigation.getState())\n  // => \"myScreen\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ThemedStyle with useAppTheme Hook in React Native\nDESCRIPTION: This snippet demonstrates how to create and use themed styles with the useAppTheme hook. It shows the pattern for defining dynamic styles that adapt to the current theme, alongside regular static styles.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/theme/Theming.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type ViewStyle, View } from 'react-native'\nimport {\n  type ThemedStyle,\n  useAppTheme,\n  ThemeProvider,\n  useThemeProvider\n} from 'app/theme'\n\nconst $container: ThemedStyle<ViewStyle> = (theme) => ({\n  flex: 1,\n  backgroundColor: theme.colors.background,\n  justifyContent: \"center\",\n  alignItems: \"center\",\n})\nconst $normalStyle: ViewStyle = {\n  width: 100,\n  height: 100,\n}\n\n// Then use in a component like so:\nconst Component = () => {\n  const { themed } = useAppTheme()\n  return (\n    <View style={themed($container)}>\n      <View style={$normalStyle}>\n    </View>\n  )\n}\n\nconst App = () => {\n  const { themeScheme, navigationTheme, setThemeContextOverride, ThemeProvider } =\n    useThemeProvider()\n  return (\n    <ThemeProvider value={{ themeScheme, setThemeContextOverride }}>\n      <Component />\n    </ThemeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Stack Navigator as a Tab Screen\nDESCRIPTION: Code snippet showing how to add a stack navigator as a tab screen in a tab navigator. This allows for multi-level navigation within a tab interface.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/navigators/Navigation.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Tab.Screen name=\"Inbox\" component={InboxStackScreen} />\n```\n\n----------------------------------------\n\nTITLE: Composing styles by spreading style objects\nDESCRIPTION: Shows how to compose styles by spreading multiple style objects together, which helps with style reuse and composition. Demonstrates combining bold and larger text styles into a title style.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Styling.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst $bold: TextStyle = {\n  fontWeight: \"bold\",\n}\nconst $larger: TextStyle = {\n  fontSize: 22,\n}\nconst $title: TextStyle = {\n  ...$bold,\n  ...$larger,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a React Component with Ignite CLI\nDESCRIPTION: Command to create a new component using Ignite's component generator. Components generated this way are pre-wrapped with mobx-react-lite's observer function for automatic re-rendering when relevant MST properties change.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generators.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx ignite-cli generate component MyAwesomeButton\n```\n\n----------------------------------------\n\nTITLE: Using API Service for Episode Fetching in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the API service to fetch episodes. It imports the api singleton, makes an asynchronous call to getEpisodes(), and handles the response based on its kind property.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/services/api.ts.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { api } from \"../services/api\"\n\n// ...\nconst response = await api.getEpisodes()\n\nif (response.kind === \"ok\") {\n  // do something with response.episodes\n} else {\n  console.error(`Error fetching episodes: ${JSON.stringify(response)}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Safe Area Edges for Screen Component\nDESCRIPTION: Demonstrates how to set safe area edges to handle device notches and other interface elements.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen safeAreaEdges={[\"top\", \"bottom\"]}>{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Unit Test in Jest with TypeScript\nDESCRIPTION: Example of a simple unit test that checks if a function returns the correct color based on a date input. The test follows the Given-When-Then pattern to verify the expected behavior.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Testing.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nit(\"given a date in the past, colorForDueDate() returns red\", () => {\n  const input = colorForDueDate(\"2000-10-20\")\n  expect(input).toBe(\"red\")\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation with Stack Navigator\nDESCRIPTION: Example of creating a nested stack navigator that can be used within a tab. This pattern allows for deeper navigation hierarchies within a single tab, such as a list screen that navigates to a details screen.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/navigators/Navigation.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst InboxStack = createNativeStackNavigator()\n\nfunction InboxStackScreen() {\n  return (\n    <InboxStack.Navigator>\n      <InboxStack.Screen name=\"List\" component={ListScreen} />\n      <InboxStack.Screen name=\"MessageDetails\" component={MessageDetailsScreen} />\n    </InboxStack.Navigator>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining component presets for reusable styling\nDESCRIPTION: Demonstrates defining presets for components that allow consistent styling across the application. Shows how to define a typed record of presets that combine multiple styles.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Styling.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Presets = \"default\" | \"bold\" | \"heading\" | \"subheading\"\nconst $presets: Record<Presets, ThemedStyleArray<TextStyle>> = {\n  default: [$baseStyle],\n  bold: [$baseStyle, $fontWeightStyles.bold],\n  heading: [$baseStyle, $sizeStyles.xxl, $fontWeightStyles.bold],\n  subheading: [$baseStyle, $sizeStyles.lg, $fontWeightStyles.medium],\n}\n```\n\n----------------------------------------\n\nTITLE: Doctor Command Output Example in Shell\nDESCRIPTION: Sample output from the 'doctor' command which displays system information, JavaScript environment details, Ignite version, and development dependencies for Android and iOS platforms. This information is useful for diagnosing development environment issues and reporting problems.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/cli/Ignite-CLI.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSystem\n  platform           darwin\n  arch               arm64\n  cpu                10 cores     Apple M1 Pro\n  directory          ExpoPlist    /Users/irignite/code/ExpoPlist\n\nJavaScript (and globally-installed packages)\n  node                16.14.2      /Users/irignite/.nvm/versions/node/v16.14.2/bin/node\n  npm                 8.5.0        /Users/irignite/.nvm/versions/node/v16.14.2/bin/npm\n    corepack          0.10.0\n    eas-cli           2.5.1\n    expo-cli          6.0.6\n    gatsby-cli        4.21.0\n    ignite-cli        8.3.0\n    npm               8.5.0\n    vercel            28.4.12\n    yarn              1.22.19\n  yarn                1.22.19      /Users/irignite/.nvm/versions/node/v16.14.2/bin/yarn\n    create-expo-app   1.1.2\n  pnpm                -            not installed\n  expo                46.0.16      managed\n\nIgnite\n  ignite-cli         8.3.0        /Users/irignite/.nvm/versions/node/v16.14.2/bin/ignite\n  ignite src         src          /Users/irignite/code/ignite/src\n\nAndroid\n  java               11.0.14.1    /Users/irignite/.asdf/shims/java\n  android home       -            /Users/irignite/Library/Android/sdk\n\niOS\n  xcode              14.0.1\n  cocoapods          1.11.3       /opt/homebrew/bin/pod\n\nTools\n  git                git version 2.37.0 (Apple Git-136)   /usr/bin/git\n```\n\n----------------------------------------\n\nTITLE: Using MobX-State-Tree Models in React Components\nDESCRIPTION: Demonstrates how to use MobX-State-Tree models within React components using the observer pattern. Shows proper usage of useStores hook and observer wrapper for automatic re-rendering.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/models/Models.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useStores } from \"../models/root-store\"\nimport { observer } from \"mobx-react-lite\"\n\nexport const EpisodeScreen = observer(() => {\n  const { episodeStore } = useStores()\n\n  // automatically re-renders when the episode title changes\n  // or if you change the current episode to a different one\n  return <Text>{episodeStore.currentEpisode.title}</Text>\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MobX-State-Tree Plugin in Reactotron\nDESCRIPTION: Sets up the MobX-State-Tree plugin for Reactotron with a filter to ignore certain chatty actions like postProcessSnapshot and @APPLY_SNAPSHOT.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/devtools/Devtools.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mst } from \"reactotron-mst\"\nconst reactotron = Reactotron.configure({\n    ...\n}).use(\n  mst({\n    /** ignore some chatty `mobx-state-tree` actions  */\n    filter: (event) => /postProcessSnapshot|@APPLY_SNAPSHOT/.test(event.name) === false,\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Screen Component in React Native with Ignite\nDESCRIPTION: The Screen component wraps your entire screen and handles scrolling, safe areas, and keyboard avoiding behavior. This example shows a Screen with a Header component and content.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen preset=\"scroll\">\n  <Header headerTitle=\"screen\" />\n  // ... content here ...\n</Screen>\n```\n\n----------------------------------------\n\nTITLE: Setting up the AppNavigator in Ignite\nDESCRIPTION: Basic implementation of the AppNavigator component with state management. The AppNavigator is initialized with an initial navigation state and includes a callback for state changes.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/navigators/Navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<AppNavigator initialState={initialNavigationState} onStateChange={onNavigationStateChange} />\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Ignite Project\nDESCRIPTION: Basic commands to install dependencies and start the Ignite project\nSOURCE: https://github.com/infinitered/ignite/blob/master/boilerplate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Mocking React Native Modules in Jest\nDESCRIPTION: Demonstrates how to mock a React Native native module (react-native-video) in Jest tests. This approach allows testing components that depend on native modules without the actual native implementation.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Testing.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\njest.mock('react-native-video', () => 'Video');\n```\n\n----------------------------------------\n\nTITLE: Using useBackButtonHandler Hook for Android Back Button in React Navigation\nDESCRIPTION: This example shows how to use the useBackButtonHandler custom hook to specify which routes should allow the app to exit when the Android back button is pressed. It's recommended to use this in the root AppNavigator.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/navigators/navigationUtilities.ts.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const AppNavigator = (props) => {\n  // What route names do we allow the back button to exit the app from?\n  const exitRoutes = [\"welcome\"]\n  useBackButtonHandler((routeName) => exitRoutes.includes(routeName))\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Card Component in React Native with Ignite\nDESCRIPTION: The Card component displays related information in a contained way. This example shows a reversed preset Card with custom components, heading, content, footer, and styling options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Card\n  preset=\"reversed\"\n  verticalAlignment=\"space-between\"\n  LeftComponent={<Text>Left</Text>}\n  RightComponent={<Text>Right</Text>}\n  heading=\"Card Heading\"\n  headingStyle={{ color: \"#a511dc\" }}\n  HeadingTextProps={{ weight: \"bold\" }}\n  content=\"Card Content\"\n  contentStyle={{ color: \"#a511dc\" }}\n  ContentTextProps={{ weight: \"light\" }}\n  footer=\"Card Footer\"\n  footerStyle={{ color: \"#a511dc\" }}\n  FooterTextProps={{ weight: \"medium\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Persistence with useNavigationPersistence Hook in React Native\nDESCRIPTION: This snippet demonstrates how to use the useNavigationPersistence custom hook to persist navigation state between app loads. It shows how to integrate the hook with a storage utility and use the returned values in the App component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/navigators/navigationUtilities.ts.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as storage from \"./utils/storage\"\n\nfunction App(props: AppProps) {\n  const persistence = useNavigationPersistence(storage, \"my-persistence-key\")\n  const { initialNavigationState, onNavigationStateChange, isRestored } = persistence\n\n  // wait for the navigation state to restore\n  // `null` will show the background color\n  // can replace with <LoadingScreen /> or similar if you want\n  if (!isRestored) return null\n\n  return (\n    <AppNavigator\n      // initial navigation state is fetched from storage\n      initialState={initialNavigationState}\n      // persist changes to storage\n      onStateChange={onNavigationStateChange}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Navigation Stack in TypeScript\nDESCRIPTION: Example structure of AppNavigator.tsx showing the root navigation configuration with authentication-based conditional routing. The navigator switches between authenticated and unauthenticated states using React Navigation's native stack navigator.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/navigators/AppNavigator.tsx.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// AppNavigator.tsx\n// Root navigation container wrapping AppStack\n// Screens depend on isAuthenticated state:\n// - Unauthenticated: Only LoginScreen\n// - Authenticated: WelcomeScreen + DemoNavigator screens\n```\n\n----------------------------------------\n\nTITLE: Mocking Axios Module in Jest Tests\nDESCRIPTION: Shows how to mock the axios library in a Jest test to return predetermined data. This allows for testing code that relies on API calls without making actual network requests.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Testing.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from \"axios\"\nimport { getUsers } from \"./users\"\n\njest.mock(\"axios\")\n\ntest(\"should fetch users\", () => {\n  const users = [{ name: \"Bob\" }]\n  const res = { data: users }\n\n  axios.get.mockImplementation(() => Promise.resolve(res))\n\n  getUsers().then((data) => {\n    expect(data).toEqual(users)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Right Accessory to Button in React Native\nDESCRIPTION: This example illustrates how to add a right accessory to the Button component, which can respond to the button's pressed state.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  RightAccessory={(props) => (\n    <Icon containerStyle={props.style} size={props.pressableState.pressed ? 50 : 40} icon=\"check\" />\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating a MobX-State-Tree Model with Ignite CLI\nDESCRIPTION: Command to create a new MobX-State-Tree model with associated unit test file. By default, this also appends an export to the models/index.ts file unless the --skip-index-file flag is used.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generators.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx ignite-cli generate model Pizza\n```\n\n----------------------------------------\n\nTITLE: Using TextField Component in React Native with Ignite\nDESCRIPTION: This snippet demonstrates how to use the TextField component with various props for customization, including status, label, placeholder, helper text, and accessories.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/TextField.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextField } from '../components';\n\nconst [input, setInput] = useState(\"\")\n<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  status=\"error\"\n  label=\"Name\"\n  labelTx=\"login.nameLabel\"\n  labelTxOptions={{ name: \"John\" }}\n  LabelTextProps={{ style: { color: \"#FFFFFF\" } }}\n  placeholder=\"John Doe\"\n  placeholderTx=\"login.namePlaceholder\"\n  placeholderTxOptions={{ name: \"John\" }}\n  helper=\"Enter your name\"\n  helperTx=\"login.nameHelper\"\n  helperTxOptions={{ name: \"John\" }}\n  HelperTextProps={{ style: { color: \"#FFFFFF\" } }}\n  style={{ backgroundColor: \"#BFBFBF\" }}\n  containerStyle={{ backgroundColor: \"#BFBFBF\" }}\n  inputWrapperStyle={{ backgroundColor: \"#BFBFBF\" }}\n  RightAccessory={() => <Icon icon=\"check\" />}\n  LeftAccessory={() => <Icon icon=\"bell\" />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL Support in TypeScript for React Native Ignite Apps\nDESCRIPTION: Code snippet demonstrating how to configure Right-to-Left (RTL) language support using I18nManager in React Native. These lines enable and force RTL layouts based on the language selection.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/i18n/Internationalization.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nI18nManager.allowRTL(isRTL)\nI18nManager.forceRTL(isRTL)\n```\n\n----------------------------------------\n\nTITLE: Using useAppTheme Hook in React Native Component\nDESCRIPTION: Demonstrates how to use the useAppTheme hook to apply themed styles and access theme properties in a React Native component. It shows usage of themed styles, direct theme color access, and displaying the current theme context.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/useAppTheme.tsx.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, type ViewStyle } from \"react-native\"\nimport { useAppTheme } from \"@/utils/useAppTheme\"\n\nconst MyComponent = () => {\n  const {\n    themed,\n    theme,\n    themeContext,\n  } = useAppTheme()\n\n  return (\n    <View style={themed($container)}>\n      <View style={$plainObjectStyle}>\n        <View\n          style={{\n            backgroundColor: theme.colors.error,\n          }}\n        >\n          <Text>{themeContext}</Text>\n        </View>\n      </View>\n    </View>\n  )\n}\n\nconst $container: ThemedStyle<ViewStyle> = (theme) => ({\n  backgroundColor: theme.colors.background,\n  color: theme.colors.palette.angry500,\n  paddingHorizontal: theme.spacing.small,\n})\n\nconst $plainObjectStyle: ViewStyle = {\n  marginBottom: 20,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Callback Functions in Jest\nDESCRIPTION: Demonstrates how to create and use a mock callback function with Jest. The example shows creating a function that adds 42 to inputs, using it in an array map, and then testing properties of the mock.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Testing.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// take the input value, and add 42\nconst mockCallback = jest.fn((x) => 42 + x)\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox Component in React Native with Ignite\nDESCRIPTION: The Checkbox component displays a user's choice for a boolean value. This example shows a Checkbox with a value, icon, event handler, and styling options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox\n  value={value}\n  icon=\"check\"\n  onValueChange={setValue}\n  labelTx=\"signup:rememberMe\"\n  labelStyle={{ color: \"#a511dc\" }}\n  containerStyle={{ backgroundColor: \"#fff\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Episode Model with MobX-State-Tree\nDESCRIPTION: Shows how to define a model for podcast episodes using MobX-State-Tree. Includes type definitions for various properties and demonstrates the use of types.identifier and types.array.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/models/Models.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { types } from \"mobx-state-tree\"\n\n/**\n * This represents an episode of React Native Radio.\n */\nexport const EpisodeModel = types.model(\"Episode\", {\n  guid: types.identifier,\n  title: \"\",\n  link: \"\",\n  author: \"\",\n  thumbnail: \"\",\n  description: \"\",\n  content: \"\",\n  categories: types.array(types.string),\n})\n```\n\n----------------------------------------\n\nTITLE: Using Spacing Values from Ignite Theme\nDESCRIPTION: Example of importing and using spacing values from the theme in a component style. This demonstrates the preferred way to apply consistent margins or padding in an Ignite application.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/theme/spacing.ts.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { spacing } from \"../theme\"\n\n$containerStyle = {\n  margin: spacing.small,\n}\n```\n\n----------------------------------------\n\nTITLE: Using useHeader Hook for Navigation Header Configuration\nDESCRIPTION: A custom hook for configuring react-navigation screen headers. It allows setting header properties like right button text and actions directly within the screen component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/Utils.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AccountScreen() {\n  useHeader({\n    rightTx: \"common.logOut\",\n    onRightPress: logout,\n  })\n\n  return <Screen />\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing TextField Accessories with useMemo in React Native\nDESCRIPTION: This snippet demonstrates how to use useMemo to optimize the rendering of TextField accessories and prevent flickering.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/TextField.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst PasswordRightAccessory = useMemo(\n  () =>\n    function PasswordRightAccessory(props: TextFieldAccessoryProps) {\n      return (\n        <Icon\n          icon={isAuthPasswordHidden ? \"view\" : \"hidden\"}\n          color={colors.palette.neutral800}\n          containerStyle={props.style}\n          onPress={() => setIsAuthPasswordHidden(!isAuthPasswordHidden)}\n        />\n      )\n    },\n  [isAuthPasswordHidden],\n)\n\n<TextField\n  value={password}\n  onChangeText={(value) => setPassword(password)}\n  RightAccessory={PasswordRightAccessory}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a destructive button preset with themed styles\nDESCRIPTION: Shows how to create a destructive button preset that uses the theme for styling. The preset combines a base style with a warning style to create a visually distinct button for destructive actions.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Styling.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst $warning: ThemedStyle<ViewStyle> = (theme) => ({\n  backgroundColor: theme.colors.alert,\n  color: \"white\",\n  padding: theme.spacing.lg,\n})\n\nconst $viewPresets: Record<Presets, ThemedStyle<ViewStyle>> = {\n  destructive: [$baseViewStyle, $warning],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header in Stack Navigator Options using TypeScript React\nDESCRIPTION: This snippet demonstrates how to set a custom header component at the navigator level using screenOptions. This approach is useful when the header logic is shared across multiple screens in the navigator. The header prop accepts a function that receives navigation props and returns a custom Header component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack.Navigator\n  screenOptions={{\n    header: (props) => <Header title={props.options.headerTitle ?? props.route.name} />,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Button Component with Text in React Native with Ignite\nDESCRIPTION: The Button component renders a TouchableOpacity with given text. This example demonstrates using a Button with predefined text, translation key, preset, and styling options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  text=\"Click It\"\n  tx=\"button:clickIt\"\n  preset=\"primary\"\n  onPress={() => Alert.alert(\"pressed\")}\n  style={[{ paddingVertical: 100 }, { borderRadius: 0 }]}\n  textStyle={[{ fontSize: 20 }, { color: \"#a511dc\" }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Switch Component in React Native with Ignite\nDESCRIPTION: The Switch component displays a user's choice for a boolean value. This example shows a Switch with a value, accessibility mode, event handler, and styling options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch\n  value={value}\n  accessibilityMode=\"icon\"\n  onValueChange={setValue}\n  labelTx=\"signup:rememberMe\"\n  labelStyle={{ color: \"#a511dc\" }}\n  containerStyle={{ backgroundColor: \"#fff\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using useAppTheme Hook for Theme Management in React Native\nDESCRIPTION: A custom hook that provides theming functionality and context. It returns themed styles and theme context that can be used to style components based on the current theme.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/Utils.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { themed, themeContext } = useAppTheme()\n\nconst $themedStyle: ThemedStyle<ViewStyle> = (theme) =>({ \n  backgroundColor: theme.colors.background\n})\n\n<View style={themed($themedStyle)}>\n  <Text>{themeContext}</Text>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Using Translation Options with ListItem in React Native\nDESCRIPTION: Shows how to pass options to the translation system when using localized strings in ListItem.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem tx=\"example:helloWorld\" txOptions={{ name: \"John\" }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Error Status on TextField in React Native\nDESCRIPTION: This example shows how to set an error status on the TextField component, which can be used for validation feedback.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/TextField.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField value={input} onChangeText={(value) => setInput(value)} status=\"error\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Header with useHeader and Dependencies\nDESCRIPTION: Example demonstrating how to create a dynamic header that updates based on state changes using the dependencies parameter.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/useHeader.tsx.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst [count, setCount] = useState(1)\n\nuseEffect(() => {\n  setTimeout(() => setCount(count + 1), 1000)\n}, [count])\n\nuseHeader(\n  {\n    title: `Count: ${count}`,\n  },\n  [count],\n)\n```\n\n----------------------------------------\n\nTITLE: Using Header Component in React Native with Ignite\nDESCRIPTION: The Header component appears at the top of the screen and holds navigation buttons and the screen title. This example shows a Header with icons, event handlers, and styling options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Header\n  headerTx=\"header:title\"\n  headerText=\"Header Title\"\n  leftIcon=\"back\"\n  rightIcon=\"bullet\"\n  onLeftPress={() => navigation.goBack()}\n  onRightPress={() => Alert.alert(\"pressed\")}\n  style={{ backgroundColor: \"purple\" }}\n  titleStyle={{ color: \"white\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the useAutoImage Hook in React Native\nDESCRIPTION: Example of using the useAutoImage hook to calculate image dimensions based on specified constraints. This hook returns the width and height values that maintain the aspect ratio within the given maxWidth and maxHeight constraints.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/AutoImage.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { width, height } = useAutoImage(uri, maxWidth, maxHeight)\n```\n\n----------------------------------------\n\nTITLE: Switching Between Light and Dark Themes in Ignite Apps\nDESCRIPTION: This code demonstrates how to implement theme switching in an Ignite app. It shows how to toggle between light and dark mode, and how to reset to the system's theme setting using the setThemeContextOverride function.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/theme/Theming.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// In your component:\nconst {\n  setThemeContextOverride, // Function to set the theme\n  themeContext, // The current theme context (\"light\" | \"darK\")\n} = useAppTheme()\n\n// Then hook it up to a user interaction:\nconst onThemeButtonPress = () => {\n  // This will toggle between light and dark mode.\n  setThemeContextOverride(themeContext === \"dark\" ? \"light\" : \"dark\")\n}\n\n// Or you can let them use their deice's system setting: light/dark\nconst resetThemeContextOverride = () => {\n  setThemeContextOverride(undefined)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Button Component with Various Props in React Native\nDESCRIPTION: This snippet demonstrates how to use the Button component with various props including text, translation key, preset, styles, and accessory components.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  text=\"Click It\"\n  tx=\"button:clickIt\"\n  preset=\"default\"\n  onPress={() => Alert.alert(\"pressed\")}\n  style={[{ paddingVertical: 100 }, { borderRadius: 0 }]}\n  pressedStyle={[{ backgroundColor: \"red\" }, { borderRadius: 0 }]}\n  textStyle={[{ fontSize: 20 }, { color: \"#a511dc\" }]}\n  pressedTextStyle={[{ fontSize: 20 }, { color: \"#a51111\" }]}\n  RightAccessory={(props) => <Icon icon=\"check\" />}\n  LeftAccessory={(props) => <Icon icon=\"close\" />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Styles in EmptyState Component\nDESCRIPTION: This snippet shows how to customize the styles of the heading and content text in the EmptyState component. It demonstrates the use of 'headingStyle', 'contentStyle', and Text component props.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/EmptyState.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState\n  heading=\"EmptyState Heading\"\n  headingStyle={{ color: \"red\" }}\n  HeadingTextProps={{ size: \"lg\" }}\n  content=\"EmptyState Content\"\n  contentStyle={{ backgroundColor: colors.error, color: colors.palette.neutral100 }}\n  ContentTextProps={{ size: \"lg\" }}\n  button=\"EmptyState Button\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Radio Component in React Native with Ignite\nDESCRIPTION: The Radio component displays a user's choice for a boolean value. This example shows a Radio with a value, event handler, and styling options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Radio\n  value={value}\n  onValueChange={setValue}\n  labelTx=\"signup:rememberMe\"\n  labelStyle={{ color: \"#a511dc\" }}\n  containerStyle={{ backgroundColor: \"#fff\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Component Usage in React Native\nDESCRIPTION: Demonstrates basic usage of the Icon component with an onPress handler that shows an alert.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Icon.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon icon=\"ladybug\" onPress={() => Alert.alert(\"Hello\")} />\n```\n\n----------------------------------------\n\nTITLE: Using themed and plain styles in an Ignite component\nDESCRIPTION: Demonstrates how to create a component with both themed styles that have access to the theme object and plain object styles. Shows the $ naming convention and proper TypeScript typing for styles.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Styling.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, type ViewStyle } from \"react-native\"\nimport { useAppTheme } from \"@/utils/useAppTheme\"\n\nconst MyComponent = () => {\n  const { themed } = useAppTheme()\n  return (\n    <View style={themed($container)}>\n      <View style={$plainObjectStyle} />\n    </View>\n  )\n}\n\nconst $container: ThemedStyle<ViewStyle> = (theme) => ({\n  flex: 1,\n  backgroundColor: theme.colors.background,\n  paddingHorizontal: theme.spacing.small,\n})\n\nconst $plainObjectStyle: ViewStyle = {\n  marginBottom: 20,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EAS Build Profiles in eas.json for Ignite Apps\nDESCRIPTION: This configuration defines multiple build profiles for Ignite apps using EAS. It includes development builds (with simulator support), device-specific development builds, preview builds for internal distribution, and production configurations. Each profile inherits from others using the 'extends' property.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/expo/EAS.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cli\": {\n    \"version\": \">= 3.15.1\"\n  },\n  \"build\": {\n    \"development\": {\n      \"extends\": \"production\",\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"gradleCommand\": \":app:assembleDebug\"\n      },\n      \"ios\": {\n        \"buildConfiguration\": \"Debug\",\n        \"simulator\": true\n      }\n    },\n    \"development:device\": {\n      \"extends\": \"development\",\n      \"distribution\": \"internal\",\n      \"ios\": {\n        \"buildConfiguration\": \"Debug\",\n        \"simulator\": false\n      }\n    },\n    \"preview\": {\n      \"extends\": \"production\",\n      \"distribution\": \"internal\",\n      \"ios\": { \"simulator\": true },\n      \"android\": { \"buildType\": \"apk\" }\n    },\n    \"preview:device\": {\n      \"extends\": \"preview\",\n      \"ios\": { \"simulator\": false }\n    },\n    \"production\": {}\n  },\n  \"submit\": {\n    \"production\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using EmptyState Component in React Native with Ignite\nDESCRIPTION: The EmptyState component is used when there is no data to display. This example shows an EmptyState with an image, heading, content, button, and styling options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState\n  preset=\"default\"\n  style={{ padding: 10 }}\n  imageSource={require(\"../../assets/images/sad-face.png\")}\n  imageStyle={{ height: 400, width: 400 }}\n  ImageProps={{ resizeMode: \"contain\" }}\n  heading=\"EmptyState Heading\"\n  headingStyle={{ color: \"#a511dc\" }}\n  HeadingTextProps={{ weight: \"bold\" }}\n  content=\"EmptyState Content\"\n  contentStyle={{ color: \"#a511dc\" }}\n  ContentTextProps={{ weight: \"light\" }}\n  button=\"Press here\"\n  buttonOnPress={handleButtonPress}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Different Presets with Screen Component\nDESCRIPTION: Demonstrates how to use different presets (scroll, fixed, auto) with the Screen component to control scrolling behavior.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen preset=\"scroll\">{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Basic Card Component Implementation with Props\nDESCRIPTION: Demonstrates the basic implementation of a Card component with various props including preset, vertical alignment, and custom styling options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Card.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Card\n  preset=\"reversed\"\n  verticalAlignment=\"space-between\"\n  LeftComponent={<Text>Left</Text>}\n  RightComponent={<Text>Right</Text>}\n  heading=\"Card Heading\"\n  headingStyle={{ color: \"#a511dc\" }}\n  HeadingTextProps={{ weight: \"bold\" }}\n  content=\"Card Content\"\n  contentStyle={{ color: \"#a511dc\" }}\n  ContentTextProps={{ weight: \"light\" }}\n  footer=\"Card Footer\"\n  footerStyle={{ color: \"#a511dc\" }}\n  FooterTextProps={{ weight: \"medium\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using TextField Component in React Native with Ignite\nDESCRIPTION: The TextField component renders a View with a TextInput and a text label. This example shows a TextField with state management, labels, and styling options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst [input, setInput] = useState(\"\")\nconst inputRef = useRef()\n<TextField\n  value={input}\n  onChangeText={setInput}\n  labelTx=\"signup:name\"\n  placeholderTx=\"signup:nameplaceholder\"\n  style={$header}\n  inputStyle={$inputStyle}\n  preset=\"default\"\n  forwardedRef={inputRef}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon Colors in ListItem in React Native\nDESCRIPTION: Shows how to customize the colors of icons on both sides of a ListItem.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem\n  text=\"Hello World\"\n  leftIcon=\"bell\"\n  leftIconColor=\"red\"\n  rightIcon=\"bell\"\n  rightIconColor=\"red\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Header at Screen Level in React Navigation using TypeScript React\nDESCRIPTION: This snippet shows how to define a custom header for a specific screen inside a Stack Navigator. The navigator hides headers by default with headerShown: false, but enables and customizes the header for the Welcome screen specifically.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack.Navigator screenOptions={{ headerShown: false }}>\n  <Stack.Screen\n    name=\"Welcome\"\n    component={WelcomeScreen}\n    options={{ headerShown: true, header: () => <Header title=\"Hello\" /> }}\n  />\n</Stack.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Using AutoImage Component in React Native with Ignite\nDESCRIPTION: AutoImage is a wrapper around React Native's Image component that automatically resizes the image to fit the container. This example shows how to use AutoImage with a remote image URL.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<AutoImage\n  source={{ uri: \"https://pbs.twimg.com/profile_images/845384502067159040/pqF2RQ2q_400x400.jpg\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color for Screen Component\nDESCRIPTION: Shows how to change the background color of the Screen component's outer wrapper.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen backgroundColor=\"red\">{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Rendering Header Directly in Screen Component\nDESCRIPTION: Example showing how to render the Header component directly in the screen's body, giving maximum control over the component at the expense of performance since it becomes part of the screen's render lifecycle.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AccountScreen(props) {\n  return (\n    <View>\n      <Header title=\"Hello\" />\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Screen Component Usage in TSX\nDESCRIPTION: Demonstrates the basic usage of the Screen component with scroll preset to wrap content.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen preset=\"scroll\">{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Using the 'tx' prop for Internationalization with Ignite Text Component\nDESCRIPTION: Shows how to use the 'tx' prop to display text content that will be translated according to the user's locale. This uses i18next for internationalization by looking up the given key in translation files.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Text.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Text tx=\"welcomeScreen:readyForLaunch\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Button Container in React Native\nDESCRIPTION: This example demonstrates how to apply custom styles to the Pressable component of the Button when it is disabled.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Button disabledStyle={{ opacity: 0.5 }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Bar Style for Screen Component\nDESCRIPTION: Demonstrates how to set the status bar style (light or dark) for the Screen component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen statusBarStyle=\"light\">{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useHeader Hook in React Navigation\nDESCRIPTION: A simple example of using the useHeader hook to add a logout button to the right side of a screen header.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/useHeader.tsx.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AccountScreen() {\n  useHeader({\n    rightTx: \"common.logOut\",\n    onRightPress: logout,\n  })\n\n  return <Screen />\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the TouchableOpacity in ListItem in React Native\nDESCRIPTION: Shows how to apply styles directly to the TouchableOpacity component in ListItem.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem text=\"Hello World\" style={{ backgroundColor: \"red\" }} />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to AutoImage Requests\nDESCRIPTION: Example of using the AutoImage component with custom headers for authentication. This allows the component to access protected images by passing appropriate authorization tokens.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/AutoImage.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<AutoImage\n  source={{ uri: \"https://pbs.twimg.com/profile_images/845384502067159040/pqF2RQ2q_400x400.jpg\" }}\n  headers: {\n    Authorization: `Bearer abc123`,\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Button in EmptyState Component\nDESCRIPTION: This example demonstrates how to customize the button in the EmptyState component. It shows how to set button text, style, and pass additional props to the Button component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/EmptyState.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState\n  heading=\"EmptyState Heading\"\n  content=\"EmptyState Content\"\n  button=\"EmptyState Button\"\n  buttonStyle={{ backgroundColor: \"red\" }}\n  buttonTextStyle={{ color: \"red\" }}\n  ButtonProps={{ preset: \"reversed\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Bar Props for Screen Component\nDESCRIPTION: Demonstrates how to pass props to the underlying StatusBar component in a Screen component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen StatusBarProps={{ animated: false }}>{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Memoizing Button Accessory in React Native\nDESCRIPTION: This snippet demonstrates how to memoize a button accessory to prevent flickering when props or state changes.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  LeftAccessory={useMemo(\n    () =>\n      function LeftIcon(props: ButtonAccessoryProps) {\n        return <Icon icon={props.pressableState.pressed ? \"view\" : \"hidden\"} />\n      },\n    [],\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Icon Component with OnPress Handler\nDESCRIPTION: Demonstrates using the onPress prop to make the icon interactive.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Icon.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon icon=\"ladybug\" onPress={() => Alert.alert(\"Hello\")} />\n```\n\n----------------------------------------\n\nTITLE: Generating a Screen with Ignite CLI\nDESCRIPTION: Command to create a new screen component that is hook-enabled and pre-wrapped with mobx-react-lite's observer function for automatic re-rendering when relevant MST properties change.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generators.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx ignite-cli generate screen Settings\n```\n\n----------------------------------------\n\nTITLE: Setting Handler for Right Button Press\nDESCRIPTION: Example showing how to set a function to be called when the right navigation button is pressed using the onRightPress prop, typically used for actions like opening menus.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" rightIcon=\"back\" onRightPress={() => navigation.goBack()} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Persistence for Screen Component\nDESCRIPTION: Shows how to configure keyboard persistence behavior for the Screen component with scroll preset.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen preset=\"scroll\" keyboardShouldPersistTaps=\"never\">\n  {/* ... content here ... */}\n</Screen>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Icon Checkbox in TSX\nDESCRIPTION: Example showing how to use the Checkbox component with a custom icon prop. The icon prop allows customization of the visual indicator shown when the checkbox is in its 'on' state.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Checkbox.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox icon=\"ladybug\" />\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Text Component in ListItem\nDESCRIPTION: Shows how to pass additional props directly to the Text component used within ListItem.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem text=\"Hello World\" TextProps={{ weight: \"bold\" }} />\n```\n\n----------------------------------------\n\nTITLE: Using Icon Component in React Native with Ignite\nDESCRIPTION: The Icon component renders an icon. This example shows an Icon with a specified icon, color, size, and event handler.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon\n  icon=\"back\"\n  color=\"#a511dc\"\n  size={30}\n  containerStyle={{ backgroundColor: \"#fff\" }}\n  style={{ resizeMode: \"contain\" }}\n  onPress={() => Alert.alert(\"pressed\")}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Handler for Left Button Press\nDESCRIPTION: Example showing how to set a function to be called when the left navigation button is pressed using the onLeftPress prop, typically used for navigation actions.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" leftIcon=\"back\" onLeftPress={() => navigation.goBack()} />\n```\n\n----------------------------------------\n\nTITLE: Using the Button Component with Translation Key in React Native\nDESCRIPTION: This example demonstrates how to use the Button component with the 'tx' prop for text translation.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Button tx=\"button:clickMe\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Profiles in eas.json for Expo Application Service\nDESCRIPTION: This JSON snippet demonstrates how to configure build profiles in eas.json for Expo Application Service. It shows the use of the 'extends' feature to share settings between profiles, and how to customize specific settings for different build types and environments.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/eas.json.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"development\": {\n    \"extends\": \"production\",\n    \"distribution\": \"internal\",\n    \"android\": {\n        \"gradleCommand\": \":app:assembleDebug\"\n    },\n    \"ios\": {\n        \"buildConfiguration\": \"Debug\",\n        \"simulator\": true\n    }\n},\n\"development:device\": {\n    \"extends\": \"development\",\n    \"distribution\": \"internal\",\n    \"ios\": {\n        \"buildConfiguration\": \"Debug\",\n        \"simulator\": false\n    }\n},\n\"production\": {}\n```\n\n----------------------------------------\n\nTITLE: Using Local Images with AutoImage\nDESCRIPTION: Example of using AutoImage with a local image source imported from a file. AutoImage works with any valid ImageSource type with some exceptions noted in the documentation.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/AutoImage.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<AutoImage source={logoIgnite} />\n```\n\n----------------------------------------\n\nTITLE: Customizing TextField Accessories in React Native\nDESCRIPTION: This example shows how to add custom accessories to the TextField component, including conditional rendering based on component state.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/TextField.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField\n  value={input}\n  onChangeText={(value) => setInput(value)}\n  RightAccessory={(props) => {\n    // props has `multiline`, `status`, `disabled`, and `style` attributes\n    {disabled, status} = props\n\n    if (!!disabled) return <Icon icon=\"lock\" color=\"gray\" />\n    if (status === 'error') return <Icon icon=\"x\" color=\"red\" />\n\n    return <Icon icon=\"check\" color=\"green\" />\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Component for Right Navigation\nDESCRIPTION: Example showing how to use a completely custom component for the right navigation button with the RightActionComponent prop, which overrides all other right navigation props.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" RightActionComponent={<Text>Back</Text>} />\n```\n\n----------------------------------------\n\nTITLE: Styling Button Container in React Native\nDESCRIPTION: This example shows how to apply custom styles to the Pressable component of the Button.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Button style={{ paddingVertical: 20, borderRadius: 10 }}>\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Safe Area Edges in React Native\nDESCRIPTION: Shows how to use the useSafeAreaInsetsStyle hook to create padding styles for multiple edges (top and left) with console output of the resulting style object.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/useSafeAreaInsetsStyle.ts.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst $insetsStyle = useSafeAreaInsetsStyle([\"top\", \"left\"])\n\nconsole.log($insetsStyle) // { paddingTop: 47, paddingStart: 0 }\n```\n\n----------------------------------------\n\nTITLE: Setting Content Container Styles for Screen Component\nDESCRIPTION: Shows how to apply styles to the inner content View that wraps the children in the Screen component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen contentContainerStyle={{ margin: 10 }}>{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Initializing EmptyState Component in React Native\nDESCRIPTION: This snippet demonstrates how to use the EmptyState component with various props to customize its appearance and behavior. It shows the basic structure and available options for the component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/EmptyState.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState\n  preset=\"generic\"\n  style={{ padding: 10 }}\n  imageSource={require(\"../../assets/images/sad-face.png\")}\n  imageStyle={{ height: 400, width: 400 }}\n  ImageProps={{ resizeMode: \"contain\" }}\n  heading=\"EmptyState Heading\"\n  headingStyle={{ color: \"#a511dc\" }}\n  HeadingTextProps={{ weight: \"bold\" }}\n  content=\"EmptyState Content\"\n  contentStyle={{ color: \"#a511dc\" }}\n  ContentTextProps={{ weight: \"light\" }}\n  button=\"Press here\"\n  buttonOnPress={handleButtonPress}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Right Navigation Icon in Header\nDESCRIPTION: Example demonstrating how to set an icon for the right navigation button using the rightIcon prop with standard or custom icon names.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" rightIcon=\"back\" onRightPress={() => navigation.goBack()} />\n```\n\n----------------------------------------\n\nTITLE: Adding Left Accessory to Button in React Native\nDESCRIPTION: This snippet shows how to add a left accessory to the Button component, which can respond to the button's pressed state.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  LeftAccessory={(props) => (\n    <Icon containerStyle={props.style} size={props.pressableState.pressed ? 50 : 40} icon=\"check\" />\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Values in Right Button Translations\nDESCRIPTION: Example demonstrating how to pass dynamic values to the right navigation button translation using the rightTxOptions prop for placeholder substitution.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<Header\n  titleTx=\"header:title\"\n  rightTx=\"header:back\"\n  rightTxOptions={{ name: \"John\" }}\n  onRightPress={() => navigation.goBack()}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Switch Component with Accessibility Mode in React Native\nDESCRIPTION: This code snippet demonstrates how to use the Switch component with the accessibilityMode prop set to \"icon\". The switch displays an icon to indicate on/off states, improving accessibility for users.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Switch.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch value={value} onValueChange={setValue} accessibilityMode=\"icon\" />\n```\n\n----------------------------------------\n\nTITLE: Generating a Splash Screen with Ignite CLI using Hex Color\nDESCRIPTION: Commands to generate a splash screen with a specific background color in hex format. This creates properly sized splash screen assets for different platforms based on the logo.png template.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generators.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx ignite-cli generate splash-screen FF0000\n// or\nnpx ignite-cli generate splash-screen \"#FF0000\"\n// or\nnpx ignite-cli generate splash-screen fff\n```\n\n----------------------------------------\n\nTITLE: Connecting React Navigation with Ignite Theming\nDESCRIPTION: This code shows how to integrate React Navigation with Ignite's theming system. It passes the navigation theme generated by useThemeProvider to the NavigationContainer.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/theme/Theming.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst { navigationTheme } = useThemeProvider()\nreturn <NavigationContainer theme={navigationTheme} {...props} />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Component for Left Navigation\nDESCRIPTION: Example showing how to use a completely custom component for the left navigation button with the LeftActionComponent prop, which overrides all other left navigation props.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" LeftActionComponent={<Text>Back</Text>} />\n```\n\n----------------------------------------\n\nTITLE: Basic Header Implementation in React Native using Ignite\nDESCRIPTION: A complete example of using the Header component with various props including title, icons, and press handlers. This snippet demonstrates how to configure the component with custom styling and navigation behavior.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Header\n  titleTx=\"header:title\"\n  title=\"Header Title\"\n  leftIcon=\"back\"\n  rightIcon=\"bullet\"\n  onLeftPress={() => navigation.goBack()}\n  onRightPress={() => Alert.alert(\"pressed\")}\n  style={{ height: 60 }}\n  backgroundColor=\"purple\"\n  titleStyle={{ color: \"white\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Values in Header Title Translations\nDESCRIPTION: Example demonstrating how to pass dynamic values to translated header titles using the titleTxOptions prop, which provides values for placeholders in translation strings.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Header\n  titleTx=\"header:title\"\n  titleTxOptions={{ name: \"John\" }}\n  leftIcon=\"back\"\n  onLeftPress={() => navigation.goBack()}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Both maxWidth and maxHeight in AutoImage\nDESCRIPTION: Example of using AutoImage with both maxWidth and maxHeight constraints. The component will resize the image to fit within both constraints while maintaining the aspect ratio.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/AutoImage.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<AutoImage\n  source={{ uri: \"https://pbs.twimg.com/profile_images/845384502067159040/pqF2RQ2q_400x400.jpg\" }}\n  maxWidth={200}\n  maxHeight={200}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Header with useHeader Hook\nDESCRIPTION: Example demonstrating the use of the convenience useHeader hook provided by Ignite to simplify the integration of the Header component with React Navigation.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AccountScreen(props) {\n  useHeader({\n    title: \"Hello\",\n  })\n\n  return <Screen />\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Component with Container Style\nDESCRIPTION: Shows how to apply custom styling to the icon's container.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Icon.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon icon=\"bug\" containerStyle={{ backgroundColor: \"red\" }} />\n```\n\n----------------------------------------\n\nTITLE: Basic ListItem with Custom Height in React Native\nDESCRIPTION: Demonstrates how to use the ListItem component with a custom height property.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem height={50} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Left Navigation Icon in Header\nDESCRIPTION: Example showing how to set an icon for the left navigation button using the leftIcon prop with standard options like 'back', 'bullet', and 'bug' or custom icons.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" leftIcon=\"back\" onLeftPress={() => navigation.goBack()} />\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New Ignite App with Expo Integration\nDESCRIPTION: This code snippet demonstrates how to create a new Ignite application and run it on iOS and Android. The command initializes a new project called 'PizzaApp' and provides commands to run it on mobile platforms.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/expo/Expo-and-Ignite.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Spin up a new app\nnpx ignite-cli new PizzaApp\ncd PizzaApp\nyarn ios\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Commit for Semantic Release in Ignite\nDESCRIPTION: Example of a commit message format for new features that will trigger a minor version bump through semantic release. This includes the feat type, optional category, and PR contributor reference.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/contributing/Releasing-Ignite.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfeat(tests): Added react-native-testing-library (#1300 by @joshuayoes)\n```\n\n----------------------------------------\n\nTITLE: Icon Component with Size Prop\nDESCRIPTION: Shows how to set a custom size for an icon using the size prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Icon.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon icon=\"x\" size={24} />\n```\n\n----------------------------------------\n\nTITLE: Using Separators with ListItem in React Native\nDESCRIPTION: Shows how to add top and bottom separators to a ListItem component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem topSeparator={true} bottomSeparator={true} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Right Icon Color in Header\nDESCRIPTION: Example showing how to customize the tint color of the right navigation icon using the rightIconColor prop for better visual integration with the app theme.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<Header\n  titleTx=\"header:title\"\n  rightIcon=\"back\"\n  onRightPress={() => navigation.goBack()}\n  rightIconColor=\"white\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting KeyboardAvoidingView Props for Screen Component\nDESCRIPTION: Shows how to pass props to the underlying KeyboardAvoidingView in a Screen component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen KeyboardAvoidingViewProps={{ behavior: \"padding\" }}>{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Creating a Bugfix Commit for Semantic Release in Ignite\nDESCRIPTION: Example of a commit message format for bugfixes that will trigger a patch-level release through semantic release. This format includes the fix type, optional category, issue reference, and PR contributor.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/contributing/Releasing-Ignite.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfix(cli): Check for undefined in packager - fixes #1234 (#1300 by @jamonholmgren)\n```\n\n----------------------------------------\n\nTITLE: Icon Component with Color Prop\nDESCRIPTION: Demonstrates setting a custom color for an icon using the color prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Icon.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon icon=\"x\" color=\"#7C7C7C\">\n```\n\n----------------------------------------\n\nTITLE: Using Translation Keys with ListItem in React Native\nDESCRIPTION: Shows how to use localization with ListItem by providing a translation key.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem tx=\"example:helloWorld\" />\n```\n\n----------------------------------------\n\nTITLE: Using Text Instead of Icon for Right Navigation\nDESCRIPTION: Example demonstrating how to use text instead of an icon for the right navigation button with the rightText prop, which overrides the rightIcon prop if both are specified.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" rightText=\"Back\" onRightPress={() => navigation.goBack()} />\n```\n\n----------------------------------------\n\nTITLE: Using Button Component with Children in React Native with Ignite\nDESCRIPTION: The Button component can also render custom children instead of predefined text. This example shows how to use Button with a Text component as a child.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Button onPress={() => Alert.alert(\"pressed\")}>\n  <Text>Click It</Text>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using a preset in a Button component\nDESCRIPTION: Demonstrates how to use a preset in a Button component to apply consistent styling. The example shows how to specify the 'destructive' preset for a delete button.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Styling.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Button\n  text=\"Delete\"\n  // set the preset here\n  preset=\"destructive\"\n  onPress={() => thisItem.destroy()}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Translated Title in Header Component\nDESCRIPTION: Example showing how to use internationalization with the Header component by providing a translation key with the titleTx prop instead of a static title.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" leftIcon=\"back\" onLeftPress={() => navigation.goBack()} />\n```\n\n----------------------------------------\n\nTITLE: Using Children with ListItem in React Native\nDESCRIPTION: Demonstrates how to include child components inside a ListItem, which will be nested in a Text component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem height={100}>\n  <Text>Subtext</Text>\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Styling Header Title Container in React Native\nDESCRIPTION: Example of styling the container around the title text using the titleContainerStyle prop. This affects the view containing the title and allows for background color changes and layout adjustments.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Header title=\"Header Title\" titleContainerStyle={{ backgroundColor: \"purple\" }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle Editable Prop in TSX\nDESCRIPTION: Shows how to explicitly set the editable prop to false to make the toggle non-interactive.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} editable={false} />\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Native Code After Adding Dependencies in Expo-Managed Projects\nDESCRIPTION: Command to rebuild native code after adding dependencies outside the Expo ecosystem. The --clean flag ensures a fresh build and --no-install prevents automatic npm installation.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Upgrades.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo prebuild --clean --no-install\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Text Presets in Ignite\nDESCRIPTION: Demonstrates how to create a custom preset by adding to the $presets object in the Text component file. The example creates a 'label' preset and shows how to use it.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Text.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n$presets = {\n  label: [$baseStyle, $sizeStyles.md, $fontWeightStyles.medium],\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Text preset=\"label\" text=\"Email\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Text in ListItem in React Native\nDESCRIPTION: Demonstrates how to apply custom styles to the text content in a ListItem.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem text=\"Hello World\" textStyle={{ color: \"red\" }} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Outer Container Style in React Native\nDESCRIPTION: Example showing how to style the outer container of the Header component, which is useful for handling notched devices and overriding insets with containerStyle prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Header title=\"Header Title\" containerStyle={{ backgroundColor: \"purple\" }} />\n```\n\n----------------------------------------\n\nTITLE: Passing ScrollView Props to Screen Component\nDESCRIPTION: Demonstrates how to pass props to the underlying ScrollView when using the scroll preset in a Screen component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen preset=\"scroll\" ScrollViewProps={{ contentContainerStyle: { padding: 10 } }}>\n  {/* ... content here ... */}\n</Screen>\n```\n\n----------------------------------------\n\nTITLE: Updating Expo Dependencies in Ignite Projects\nDESCRIPTION: Commands to update Expo to the latest version and fix any dependency issues. This is for projects where Expo manages the native code.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Upgrades.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo@latest\nnpx expo install --fix\n```\n\n----------------------------------------\n\nTITLE: Using the 'text' prop with Ignite Text Component\nDESCRIPTION: Demonstrates how to use the 'text' prop to display text content with the Ignite Text component. This is the simplest usage, though the documentation recommends using the 'tx' prop for internationalization support.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Text.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Text text=\"My Text\" />\n```\n\n----------------------------------------\n\nTITLE: Styling the Container in ListItem in React Native\nDESCRIPTION: Demonstrates how to apply styles to the View container that wraps the ListItem content.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem text=\"Hello World\" containerStyle={{ backgroundColor: \"red\" }} />\n```\n\n----------------------------------------\n\nTITLE: Using Static Title Text in Header Component\nDESCRIPTION: Example of setting a static title for the Header component using the title prop. This approach uses a hardcoded string rather than a translation key.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Header title=\"Header Title\" leftIcon=\"back\" onLeftPress={() => navigation.goBack()} />\n```\n\n----------------------------------------\n\nTITLE: Using the Children Prop with Screen Component\nDESCRIPTION: Shows how to pass children to the Screen component to display screen content.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen preset=\"scroll\">{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Using Translated Text for Right Navigation\nDESCRIPTION: Example showing how to use internationalization for the right navigation button text using the rightTx prop, which overrides both rightIcon and rightText props.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" rightTx=\"header:back\" onRightPress={() => navigation.goBack()} />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to EmptyState Component\nDESCRIPTION: This snippet demonstrates how to apply custom styles to the EmptyState component using the 'style' prop. It allows for overriding the default container style.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/EmptyState.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState\n  style={{ padding: 10, marginTop: 20 }}\n  heading=\"EmptyState Heading\"\n  content=\"EmptyState Content\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to ListItem in React Native\nDESCRIPTION: Demonstrates how to add icons to both the left and right sides of a ListItem.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem text=\"Hello World\" leftIcon=\"bell\" rightIcon=\"bell\" />\n```\n\n----------------------------------------\n\nTITLE: Using Translated Text for Left Navigation\nDESCRIPTION: Example showing how to use internationalization for the left navigation button text using the leftTx prop, which overrides both leftIcon and leftText props.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" leftTx=\"header:back\" onLeftPress={() => navigation.goBack()} />\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Toggle Threshold for Screen Component\nDESCRIPTION: Shows how to configure the threshold at which scrolling is enabled when using the auto preset in a Screen component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen preset=\"scroll\" scrollEnabledToggleThreshold={{ percent: 0.95 }}>\n  {/* ... content here ... */}\n</Screen>\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Values in Left Button Translations\nDESCRIPTION: Example demonstrating how to pass dynamic values to the left navigation button translation using the leftTxOptions prop for placeholder substitution.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Header\n  titleTx=\"header:title\"\n  leftTx=\"header:back\"\n  leftTxOptions={{ name: \"John\" }}\n  onLeftPress={() => navigation.goBack()}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Preset Prop in EmptyState Component\nDESCRIPTION: This example shows how to use the 'preset' prop to set a preconfigured style for the EmptyState component. Currently, only the 'generic' preset is available.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/EmptyState.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState preset=\"generic\" heading=\"EmptyState Heading\" content=\"EmptyState Content\" />\n```\n\n----------------------------------------\n\nTITLE: Card with Vertical Alignment\nDESCRIPTION: Example of using the verticalAlignment prop to control content spacing within the card.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Card.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Card\n  verticalAlignment=\"space-between\"\n  heading=\"Card Heading\"\n  content=\"Card Content\"\n  footer=\"Card Footer\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Safe Area Edges for Header\nDESCRIPTION: Example showing how to override the default safe area edges for the Header component using the safeAreaEdges prop, which can be set to an empty array to disable safe area handling.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" safeAreaEdges={[]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Semantic Color Usage in React Native TextField\nDESCRIPTION: Demonstrates the recommended approach of using semantic color names for styling components, specifically showing how to apply a border color to a TextField component using the semantic color system.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/theme/colors.ts.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField style={{ borderColor: colors.border }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Header Background Color in React Native\nDESCRIPTION: Example showing how to set the background color of the Header component's outer container using the backgroundColor prop for quick styling.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Header title=\"Header Title\" onLeftPress={() => navigation.goBack()} backgroundColor=\"purple\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying Header Inner Container Style in React Native\nDESCRIPTION: Example demonstrating how to adjust the inner container style of the Header, particularly useful for changing the header height using the style prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Header title=\"Header Title\" style={{ height: 50 }} />\n```\n\n----------------------------------------\n\nTITLE: Card with Custom Component Props\nDESCRIPTION: Example of using custom components for heading, content, and footer sections of the card.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Card.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Card\n  HeadingComponent={<Button preset=\"reversed\" text=\"HeadingComponent\" icon=\"ladybug\" />}\n  ContentComponent={<Button preset=\"reversed\" text=\"ContentComponent\" icon=\"ladybug\" />}\n  FooterComponent={<Button preset=\"reversed\" text=\"FooterComponent\" icon=\"ladybug\" />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Card with Custom Left and Right Components\nDESCRIPTION: Demonstrates how to add custom components to the left and right sides of the card, including an image and a button.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Card.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Card\n  LeftComponent={\n    <AutoImage\n      maxWidth={80}\n      maxHeight={60}\n      style={{ alignSelf: \"center\" }}\n      source={{\n        uri: \"https://user-images.githubusercontent.com/1775841/184508739-f90d0ce5-7219-42fd-a91f-3382d016eae0.png\",\n      }}\n    />\n  }\n  RightComponent={\n    <Button preset=\"default\" text=\"Click It\" onPress={() => Alert.alert(\"pressed\")} />\n  }\n  heading=\"Card Heading\"\n  content=\"Card Content\"\n  footer=\"Card Footer\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating a React Navigation Navigator with Ignite CLI\nDESCRIPTION: Command to create a new React Navigation navigator in the app/navigators folder. This simplifies the setup of navigation structures in your app.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generators.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx ignite-cli generate navigator OrderPizza\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Title Style in React Native\nDESCRIPTION: Example showing how to customize the title style of the Header component using the titleStyle prop. This allows you to modify the text appearance with StyleProp<TextStyle> properties.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Header title=\"Header Title\" titleStyle={{ color: \"white\" }} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Left Icon Color in Header\nDESCRIPTION: Example showing how to customize the tint color of the left navigation icon using the leftIconColor prop for better visual integration with the app theme.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Header\n  titleTx=\"header:title\"\n  leftIcon=\"back\"\n  leftIconColor=\"white\"\n  onLeftPress={() => navigation.goBack()}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Image in EmptyState Component\nDESCRIPTION: This example shows how to set a custom image for the EmptyState component using the 'imageSource' prop. It also demonstrates how to style the image using the 'imageStyle' prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/EmptyState.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState\n  imageSource={require(\"../../assets/images/empty-state.png\")}\n  imageStyle={{ borderRadius: 5 }}\n  heading=\"EmptyState Heading\"\n  content=\"EmptyState Content\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Icon Component with Basic Props\nDESCRIPTION: Shows how to use the basic icon prop to display a bell icon.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Icon.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon icon=\"bell\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Components to ListItem in React Native\nDESCRIPTION: Demonstrates how to add custom React components to both the left and right sides of a ListItem.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem\n  text=\"Hello World\"\n  LeftComponent={<Text>Left</Text>}\n  RightComponent={<Text>Right</Text>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Pressed Button Container in React Native\nDESCRIPTION: This snippet illustrates how to apply custom styles to the Pressable component of the Button when it is pressed.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Button pressedStyle={{ backgroundColor: \"red\" }} />\n```\n\n----------------------------------------\n\nTITLE: Using Text Instead of Icon for Left Navigation\nDESCRIPTION: Example demonstrating how to use text instead of an icon for the left navigation button with the leftText prop, which overrides the leftIcon prop if both are specified.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Header.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Header titleTx=\"header:title\" leftText=\"Back\" onLeftPress={() => navigation.goBack()} />\n```\n\n----------------------------------------\n\nTITLE: Using Translation Keys in EmptyState Component\nDESCRIPTION: This example demonstrates how to use translation keys for the heading and content of the EmptyState component. It also shows how to pass options for the translations.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/EmptyState.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState\n  headingTx=\"EmptyState:heading\"\n  headingTxOptions={{ count: 2 }}\n  contentTx=\"EmptyState:content\"\n  contentTxOptions={{ count: 2 }}\n  button=\"EmptyState Button\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the 'weight' prop with Ignite Text Component\nDESCRIPTION: Demonstrates how to use the 'weight' prop to specify the font weight for the text. This utilizes font weights defined in the typography theme file.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Text.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Text tx=\"welcome:title\" weight=\"medium\" />\n```\n\n----------------------------------------\n\nTITLE: Using the 'size' prop with Ignite Text Component\nDESCRIPTION: Shows how to use the 'size' prop to specify the font size for the text. The available sizes are defined in the Text component file.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Text.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Text tx=\"welcome:title\" size=\"lg\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Pressed Button Text in React Native\nDESCRIPTION: This example illustrates how to apply custom styles to the text of a Button component when it is pressed.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Button pressedTextStyle={{ fontSize: 20, color: \"#a51111\" }} />\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Button Preset in React Native\nDESCRIPTION: This example demonstrates how to use a custom preset with the Button component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Button preset=\"danger\" text=\"Delete\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Height Style on AutoImage\nDESCRIPTION: Example of setting a fixed height via style prop on AutoImage. This will override the automatic height calculation from maxHeight. Generally you only need to specify width or height, not both.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/AutoImage.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<AutoImage source={logoIgnite} style={{ height: 200 }} />\n```\n\n----------------------------------------\n\nTITLE: Using the 'preset' prop with Ignite Text Component\nDESCRIPTION: Demonstrates how to use the 'preset' prop to apply a predefined style to the Text component. This example uses the 'bold' preset.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Text.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Text preset=\"bold\" text=\"This is bold\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to Screen Component\nDESCRIPTION: Demonstrates how to apply custom styles to the outer content View of the Screen component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen style={{ padding: 10 }}>{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Using the Button Component with Preset in React Native\nDESCRIPTION: This example illustrates how to use the Button component with a preset style.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Button preset=\"default\" tx=\"button:clickMe\" />\n```\n\n----------------------------------------\n\nTITLE: Styling TextField Label in React Native\nDESCRIPTION: This example shows how to customize the style of the TextField label using LabelTextProps.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/TextField.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField\n  value={input}\n  labelTx=\"signup.name\"\n  onChangeText={(value) => setInput(value)}\n  LabelTextProps={{ style: { color: \"red\" } }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Registration\nDESCRIPTION: Shows how to register a custom icon in the iconRegistry object.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Icon.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const iconRegistry = {\n  // ...\n  custom: require(\"./myCustomIcon.png\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Label to TextField in React Native\nDESCRIPTION: This snippet demonstrates how to add a label to the TextField component using the label prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/TextField.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField value={input} onChangeText={(value) => setInput(value)} label=\"Name\" />\n```\n\n----------------------------------------\n\nTITLE: Testing Local Ignite CLI Changes with Shell Commands\nDESCRIPTION: Examples of how to test local changes to the Ignite CLI that haven't been published to NPM by running the bin/ignite script via node. Shows how to generate a new Ignite app and use built-in generators from a local clone of the repository.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/contributing/Contributing-To-Ignite.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Generate a new Ignite app from your local copy of the Ignite CLI\nnode your-ignite-repo-clone/bin/ignite new PizzaApp\n\n# Use a built-in generator from your local copy\nnode your-ignite-repo-clone/bin/ignite generate component OrderButton\n```\n\n----------------------------------------\n\nTITLE: Using the Button Component with Children in React Native\nDESCRIPTION: This snippet shows how to use the Button component with children elements instead of text or translation props.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Button>\n  <Text>Click me</Text>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle Status Prop in TSX\nDESCRIPTION: Demonstrates how to set the status prop to 'disabled' to control interactability or styling of the toggle.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} status=\"disabled\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Usage\nDESCRIPTION: Demonstrates how to use a custom icon after registration.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Icon.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon icon=\"custom\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Width Style on AutoImage\nDESCRIPTION: Example of setting a fixed width via style prop on AutoImage. This will override the automatic width calculation from maxWidth. Generally you only need to specify width or height, not both.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/AutoImage.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<AutoImage source={logoIgnite} style={{ width: 200 }} />\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Ignite CLI Installation\nDESCRIPTION: A series of commands and steps to troubleshoot common issues when installing or using Ignite CLI, including uninstalling global versions, checking Node version, and resolving Xcode-related errors.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall -g ignite-cli\nnode --version\nnvm install --lts\nsudo xcode-select --install\nsudo xcode-select -s /Applications/Xcode.app/Contents/Developer\nopen ./ios/<yourapp>.xcworkspace\nnpx ignite-cli issue \"Unable to Ignite new app\"\n```\n\n----------------------------------------\n\nTITLE: Using the Button Component with Text Prop in React Native\nDESCRIPTION: This example shows how to use the Button component with the 'text' prop to display button text.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Button text=\"Click me\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Text Component Props in TSX\nDESCRIPTION: Shows how to pass props to the Text component used for the label using LabelTextProps.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} LabelTextProps={{ size: \"lg\" }} />\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Component in JSX\nDESCRIPTION: This code snippet shows how to import the Radio component and a custom ToggleProps component. The ToggleProps component is likely used to display additional properties or configuration options for the Radio component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Radio.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ToggleProps from './_toggle_props.mdx';\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Button Text in React Native\nDESCRIPTION: This snippet demonstrates how to apply custom styles to the text of a disabled Button component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Button disabled disabledTextStyle={{ fontSize: 20, color: \"#000000\" }} />\n```\n\n----------------------------------------\n\nTITLE: Styling Button Text in React Native\nDESCRIPTION: This snippet shows how to apply custom styles to the text within a Button component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Button.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Button textStyle={{ fontSize: 20, color: \"#a511dc\" }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Helper Text Component Props in TSX\nDESCRIPTION: Shows how to pass props to the Text component used for helper text using HelperTextProps.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} HelperTextProps={{ size: \"lg\" }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle Label Position in TSX\nDESCRIPTION: Demonstrates how to position the label relative to the toggle using the labelPosition prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} labelPosition=\"left\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle Value Prop in TSX\nDESCRIPTION: Demonstrates setting the toggle to 'on' by passing true to the value prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} value={true} />\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Props to Image Component in EmptyState\nDESCRIPTION: This snippet shows how to pass additional props to the Image component within EmptyState using the 'ImageProps' prop. It allows for customizing the Image component's behavior.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/EmptyState.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState\n  imageSource={require(\"../../assets/images/empty-state.png\")}\n  ImageProps={{ onLoad: handleImageLoaded }}\n  heading=\"EmptyState Heading\"\n  content=\"EmptyState Content\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Keyboard Offset for Screen Component\nDESCRIPTION: Shows how to configure keyboard offset when the keyboard is visible in a Screen component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Screen.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Screen keyboardOffset={10}>{/* ... content here ... */}</Screen>\n```\n\n----------------------------------------\n\nTITLE: Using Translation Options with Helper Text in TSX\nDESCRIPTION: Demonstrates passing variables to translation strings for helper text using the helperTxOptions prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName}\n  value={value}\n  onValueChange={setValue}\n  helperTx=\"login:rememberUsername\"\n  helperTxOptions={{ username: \"john\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Helper Text to Toggle in TSX\nDESCRIPTION: Demonstrates adding helper text below the toggle using the helper prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} helper=\"Remember Me\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Toggle Container in TSX\nDESCRIPTION: Demonstrates applying custom styles to the toggle's container using the containerStyle prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} containerStyle={{ backgroundColor: \"#fff\" }} />\n```\n\n----------------------------------------\n\nTITLE: Applying Themed Styles in React Native\nDESCRIPTION: Shows various ways to apply themed styles using the themed() function. It demonstrates using plain style objects, ThemedStyle functions, and arrays of styles. Also highlights the style override behavior when using arrays.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/useAppTheme.tsx.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst $plainStyle: ViewStyle = {\n  padding: 10,\n  backgroundColor: \"black\",\n  width: 25,\n  height: 25,\n}\n\nconst $themedStyle: ThemedStyle<ViewStyle> = (theme) => ({\n  backgroundColor: theme.colors.errorBackground,\n  height: theme.spacing.xl,\n  width: theme.spacing.xl\n})\n\n<View style={$plainStyle} />\n<View style={themed($themedStyle)} />\n<View style={themed([$themedStyle, $plainStyle])} />\n<View style={themed([\n  $themedStyle,\n  $plainStyle,\n  { width: 7, backgroundColor: 'yellow'}\n])} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Breaking Change Commit for Semantic Release in Ignite\nDESCRIPTION: Example of a commit message format for breaking changes that will trigger a major version bump. This includes a conventional commit type (feat), a title, and the special BREAKING CHANGE notation in the commit body.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/contributing/Releasing-Ignite.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfeat(cli): Changes init to new in CLI (#1234 by @GantMan)\n\nBREAKING CHANGE: To spin up a new app, you'll use \"ignite new\" instead of \"ignite init\".\n```\n\n----------------------------------------\n\nTITLE: Using Translation Options with Toggle Label in TSX\nDESCRIPTION: Shows how to pass variables to translation strings using the labelTxOptions prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName}\n  value={value}\n  onValueChange={setValue}\n  labelTx=\"login:rememberUsername\"\n  labelTxOptions={{ username: \"john\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using i18n Translation Key for Helper Text in TSX\nDESCRIPTION: Shows how to use internationalization with the helperTx prop to reference a translation key for helper text.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} helperTx=\"login:rememberUsername\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Toggle Input Outer Container in TSX\nDESCRIPTION: Shows how to style the outer container of the toggle input, which affects size, shape, and off-state background color.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} inputOuterStyle={{ backgroundColor: \"#fff\" }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Header Props with useHeader\nDESCRIPTION: Example showing how to configure both left and right header buttons with text and press handlers.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/useHeader.tsx.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nuseHeader({\n  rightTx: \"common.logOut\",\n  leftTx: \"common.back\",\n  onRightPress: logout,\n  onLeftPress: goBack,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Ignite Project Without MobX-State-Tree\nDESCRIPTION: Command to create a new Ignite project called PizzaApp without MobX-State-Tree integration and demo code. Uses the --state=none and --removeDemo flags to customize the initialization.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/MobX-State-Tree.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx ignite-cli@latest new PizzaApp --removeDemo=true --state=none\n```\n\n----------------------------------------\n\nTITLE: Styling Toggle Input Inner Container in TSX\nDESCRIPTION: Demonstrates styling the inner container of the toggle input, which affects the on-state background color and inner border.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} inputInnerStyle={{ backgroundColor: \"#000\" }} />\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Component Implementation in TSX\nDESCRIPTION: Shows the basic implementation of the Toggle component with required value and onValueChange props.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} />\n```\n\n----------------------------------------\n\nTITLE: Adding Text Label to Toggle in TSX\nDESCRIPTION: Shows how to add a text label to the toggle using the label prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} label=\"Remember Me\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Assets Folder Structure in Ignite\nDESCRIPTION: Shows the convention for organizing static assets like icons, images, and fonts in an Ignite React Native project. Assets are stored in the assets folder and can be auto-generated using Ignite's built-in generators.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/assets.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nassets/\n  ├── images/     # App icons and splash screen images\n  ├── icons/      # Custom icon assets\n  └── fonts/      # Custom font files\n```\n\n----------------------------------------\n\nTITLE: Defining Spacing Scale in TypeScript for Ignite Framework\nDESCRIPTION: Definition of the spacing scale used in Ignite, providing named constants for various spacing sizes ranging from micro (2) to massive (64). This scale helps maintain consistent whitespace throughout the application.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/theme/spacing.ts.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const spacing = {\n  micro: 2,\n  tiny: 4,\n  extraSmall: 8,\n  small: 12,\n  medium: 16,\n  large: 24,\n  extraLarge: 32,\n  huge: 48,\n  massive: 64,\n}\n```\n\n----------------------------------------\n\nTITLE: Using onValueChange Callback in Toggle Component\nDESCRIPTION: Shows the use of the onValueChange callback which is called when the toggle is toggled.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} onValueChange={setValue} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fonts in Ignite React Native\nDESCRIPTION: This snippet demonstrates how to add custom fonts to an Ignite React Native project. It shows the configuration of customFontsToLoad object for loading custom fonts and the fonts object for referencing font families in the typography theming object.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/theme/typography.ts.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const customFontsToLoad = {\n  spaceGroteskLight,\n  spaceGroteskRegular,\n  spaceGroteskMedium,\n  spaceGroteskSemiBold,\n  spaceGroteskBold,\n  myCustomFont: require(\"./assets/fonts/custom-font.otf\"),\n}\n\nconst fonts = {\n  // ...\n  myCustomFont: {\n    normal: \"myCustomFont\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using i18n Translation Key for Toggle Label in TSX\nDESCRIPTION: Demonstrates using internationalization with the labelTx prop to reference a translation key.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} labelTx=\"login:rememberUsername\" />\n```\n\n----------------------------------------\n\nTITLE: Ignite Directory Structure in Markdown\nDESCRIPTION: Documentation outlining the purpose and contents of the ignite directory, which contains generator templates for scaffolding React Native app components.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/ignite.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Ignite Folder\n\nThe `ignite` directory contains an initial set of generator templates to help scaffold new screens, components, models, app icons, and more.\n\nGenerators are the true gem of Ignite! They can save you countless hours as you build your app - we strongly recommend you give it a try!\nLearn more about [Ignite Generators](../concept/Generators.md) and how to create your own [Ignite Generator Templates](../concept/Generator-Templates.md)\n```\n\n----------------------------------------\n\nTITLE: Integrating React Native Elements with Ignite Theming\nDESCRIPTION: This snippet demonstrates how to integrate the React Native Elements UI library with Ignite's theming system. It creates a custom theme provider that adapts to Ignite's theme context to provide consistent styling across components.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/theme/Theming.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { colorsDark, colorsLight, customFontsToLoad } from \"src/theme\"\nimport { createTheme as createRNEUITheme, ThemeProvider as RNEUIThemeProvider } from \"@rneui/themed\"\n\nexport const ThemedRNEUIProvider = ({ children }) => {\n  const { themeScheme } = useThemeProvider()\n  const themeColors = themeScheme === \"light\" ? colorsLight : colorsDark\n  const RNEUITheme = createRNEUITheme({\n    mode: themeScheme,\n    lightColors: {\n      primary: colorsLight.palette.secondary500,\n    },\n    darkColors: {\n      primary: colorsDark.palette.secondary500,\n    },\n    components: {\n      Text: {\n        style: {\n          color: themeColors.text,\n        },\n      },\n      // ...etc\n    },\n  })\n\n  return <RNEUIThemeProvider theme={RNEUITheme}>{children}</RNEUIThemeProvider>\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Splash Screen Sizes with Ignite CLI\nDESCRIPTION: Command to generate a splash screen with a custom size for iOS and Android platforms. This allows adjusting the logo size according to your specific design needs.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generators.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx ignite-cli generate splash-screen FF0000 --ios-size=150 --android-size=180\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Toggle Switch in React Native\nDESCRIPTION: This snippet shows how to create a toggle switch for theme selection in an Ignite app. It binds the switch state to the current theme context and updates the theme when toggled.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/theme/Theming.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// In your component:\nconst {\n  setThemeContextOverride, // Function to set the theme\n  themeContext, // The current theme context (\"light\" | \"darK\")\n} = useAppTheme()\n\n// Then implement the switching button:\n<Toggle\n  label=\"Dark Mode\"\n  variant=\"switch\"\n  value={themeContext === \"dark\"}\n  onValueChange={(value: boolean) => {\n    setThemeContextOverride(value ? \"dark\" : \"light\")\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Toggle Label in TSX\nDESCRIPTION: Demonstrates applying custom styles to the toggle's label using the labelStyle prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} labelStyle={{ color: \"#000\" }} />\n```\n\n----------------------------------------\n\nTITLE: Running Maestro Tests via NPM Script in Ignite\nDESCRIPTION: This command shows how to execute Maestro tests using the predefined npm script in package.json. It provides a convenient way to run all Maestro tests through the yarn package manager.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/maestro.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run test:maestro\n```\n\n----------------------------------------\n\nTITLE: Using AutoImage Component in React Native with Ignite\nDESCRIPTION: Example of using the AutoImage component to display an image constrained to a maximum width of 200 pixels. The component automatically calculates the appropriate height to maintain the aspect ratio.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/AutoImage.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<AutoImage\n  source={{ uri: \"https://pbs.twimg.com/profile_images/845384502067159040/pqF2RQ2q_400x400.jpg\" }}\n  maxWidth={200}\n/>\n```\n\n----------------------------------------\n\nTITLE: Card with Translation Keys\nDESCRIPTION: Shows how to use translation keys for card content with additional translation options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Card.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Card\n  headingTx=\"card:heading\"\n  headingTxOptions={{ count: 2 }}\n  content=\"Card Content\"\n  footer=\"Card Footer\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Modifying Android XML Configuration for Splash Screen\nDESCRIPTION: The plugin makes two key modifications to Android XML files: adding translucent status bar settings in strings.xml and updating Theme.App.SplashScreen in styles.xml to enable transparent splash screen transitions.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/plugins/withSplashScreen.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Example modifications in strings.xml -->\n<string name=\"status_bar_translucent\">true</string>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Example modifications in styles.xml -->\n<style name=\"Theme.App.SplashScreen\">\n    <item name=\"android:windowTranslucentStatus\">true</item>\n    <item name=\"android:windowTranslucentNavigation\">true</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating an API Function with Axios\nDESCRIPTION: Example of a React Native component that uses axios to fetch user data from an API. This is used as the basis for a subsequent example on how to mock external modules in tests.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Testing.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from \"react-native\"\nimport axios from \"axios\"\n\nexport const getUsers = () => axios.get(\"/users\").then((res) => res.data)\n```\n\n----------------------------------------\n\nTITLE: Removing Current Line in Ignite Boilerplate (TSX)\nDESCRIPTION: This example shows how to mark a specific line for removal using the '@demo remove-current-line' comment. When this comment is added at the end of a line, that line will be removed during the demo code cleanup process.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/cli/Remove-Demo-Code.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst $style: ViewStyle = { padding: 10 } // @demo remove-current-line\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled Components in Ignite with TypeScript\nDESCRIPTION: Example showing Ignite's styling approach using TypeScript. Demonstrates how to create both themed styles that respond to the app's theme and static styles, along with proper component implementation.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/Guide.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, ViewStyle } from \"react-native\"\nimport { useAppTheme } from \"@/utils/useAppTheme\"\nimport type { ThemedStyle } from \"@/theme\"\n\n// This is a themed style that you must wrap with `themed()` to pass the style object.\nconst $container: ThemedStyle<ViewStyle> = ({ colors }) => ({\n  flex: 1,\n  backgroundColor: colors.palette.bgColor,\n})\n\n// This is a non-themed style\nconst $innerView: ViewStyle{\n  backgroundColor: '#fff',\n  alignItems: \"center\",\n}\n\nconst MyComponent = () => {\n  const { themed } = useAppTheme()\n  return (\n    <View style={themed($container)}>\n    <View style={$innerView}>...</View>\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Card with Reversed Preset\nDESCRIPTION: Shows how to use the reversed preset for the Card component with basic content structure.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Card.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Card preset=\"reversed\" heading=\"Card Heading\" content=\"Card Content\" footer=\"Card Footer\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Expo Config Plugins in Ignite Apps\nDESCRIPTION: This snippet demonstrates how to add a custom Expo Config Plugin to the plugins array in app.config.ts. The custom plugin is imported from the plugins directory and added to existing plugins.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/plugins/Plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// In app.config.ts\nplugins: [...existingPlugins, require(\"./plugins/yourCustomPlugin\").yourCustomPlugin]\n```\n\n----------------------------------------\n\nTITLE: Generating iOS App Icons with Ignite CLI\nDESCRIPTION: Command to generate iOS app icons from template files. This handles resizing and transforming input images to create all required app-icon sizes and formats for iOS.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generators.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx ignite-cli generate app-icon ios\n```\n\n----------------------------------------\n\nTITLE: Removing Next Line in Ignite Boilerplate (TSX)\nDESCRIPTION: This snippet illustrates how to mark the next line for removal using the '@demo remove-next-line' comment. When this comment is present, the line immediately following it will be removed during the demo code cleanup process.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/cli/Remove-Demo-Code.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @demo remove-next-line\nimport { DemoScreen } from \"./demo/screen\"\n```\n\n----------------------------------------\n\nTITLE: Using useSafeAreaInsetsStyle Hook for Safe Area Padding\nDESCRIPTION: A custom hook that generates safe-area-aware styles for Views. It accepts an array of edges and a style property to create padding or margin that respects device safe areas.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/Utils.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst $insetStyle = useSafeAreaInsetsStyle([\"top\"], \"padding\")\n\n<View style={$insetStyle} />\n```\n\n----------------------------------------\n\nTITLE: Adding Text to ListItem in React Native\nDESCRIPTION: Demonstrates how to display text content within a ListItem component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/ListItem.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ListItem text=\"Hello World\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSafeAreaInsetsStyle Hook in React Native\nDESCRIPTION: Demonstrates the basic usage of the useSafeAreaInsetsStyle hook to create a padding style for the top edge of a view.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/useSafeAreaInsetsStyle.ts.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<View style={useSafeAreaInsetsStyle([\"top\"], \"padding\")} />\n```\n\n----------------------------------------\n\nTITLE: Checking npm Package Access for Ignite\nDESCRIPTION: Commands to verify if the current user has publishing access to the ignite-cli npm package. First identifies the current npm username and then checks if that user is listed as an author.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/contributing/Releasing-Ignite.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm whoami\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm author list ignite-cli\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Global Ignite CLI\nDESCRIPTION: Commands to remove globally installed versions of Ignite CLI using either npm or yarn package managers to prevent version conflicts.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/cli/Troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall --global ignite-cli\n# or\nyarn global remove ignite-cli\n```\n\n----------------------------------------\n\nTITLE: Styling Toggle Input Detail in TSX\nDESCRIPTION: Shows how to style the detail element of the toggle input, which varies based on toggle type (checkbox, radio, or switch).\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/_toggle_props.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<${props.componentName} value={value} onValueChange={setValue} inputDetailStyle={{ backgroundColor: \"#000\" }} />\n```\n\n----------------------------------------\n\nTITLE: Customizing TextField Label with Dynamic Values in React Native\nDESCRIPTION: This snippet demonstrates how to pass dynamic values to the label translation using labelTxOptions.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/TextField.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField\n  value={input}\n  labelTx=\"signup.name\"\n  labelTxOptions={{ name: \"John\" }}\n  onChangeText={(value) => setInput(value)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Removing Code Block in Ignite Boilerplate (TSX)\nDESCRIPTION: This example demonstrates how to mark a block of code for removal using '@demo remove-block-start' and '@demo remove-block-end' comments. All code between these two comments, including the comments themselves, will be removed during the demo code cleanup process.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/cli/Remove-Demo-Code.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// @demo remove-block-start\nexport function DemoDivider(props: DemoDividerProps) {\n  const { type = \"horizontal\", size = 10, style: $styleOverride } = props\n\n  return (\n    <View\n      style={[\n        $divider,\n        type === \"horizontal\" && { height: size },\n        type === \"vertical\" && { width: size },\n        $styleOverride,\n      ]}\n    />\n  )\n}\n// @demo remove-block-end\n```\n\n----------------------------------------\n\nTITLE: Building the Ignite CLI for Release\nDESCRIPTION: Commands to clean and build the Ignite CLI prior to releasing. These ensure that the package is properly prepared and optimized for distribution.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/contributing/Releasing-Ignite.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn clean\nyarn build\n```\n\n----------------------------------------\n\nTITLE: EJS Template Component Example\nDESCRIPTION: An example of an EJS template that creates a React component using the props provided by the generator. This demonstrates how to use the pascalCaseName prop to create a properly named component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generator-Templates.md#2025-04-23_snippet_1\n\nLANGUAGE: ejs\nCODE:\n```\ntype <%= props.pascalCaseName %>Props = { some: string }\nexport function <%= props.pascalCaseName %>(props: <%= props.pascalCaseName %>Props) {\n  return <Text>{props.some} in a <%= props.pascalCaseName %> component!</Text>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Helper Text to TextField in React Native\nDESCRIPTION: This snippet demonstrates how to add helper text to the TextField component using the helper prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/TextField.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField value={input} onChangeText={(value) => setInput(value)} helper=\"This is a helper text\" />\n```\n\n----------------------------------------\n\nTITLE: Using the 'style' prop with Ignite Text Component\nDESCRIPTION: Shows how to use the 'style' prop to override default styles for a specific instance of the Text component. This allows for customization while maintaining the benefits of the component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Text.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Text tx=\"welcome:title\" style={{ fontSize: 40 }} />\n```\n\n----------------------------------------\n\nTITLE: Removing Entire File in Ignite Boilerplate (TSX)\nDESCRIPTION: This snippet demonstrates how to mark an entire file for removal using the '@demo remove-file' comment. When this comment is present at the top of a file, the entire file will be removed during the demo code cleanup process.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/cli/Remove-Demo-Code.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @demo remove-file\nexport * from \"./Text\"\nexport * from \"./Screen\"\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version for Beta Release in Ignite\nDESCRIPTION: Example of updating the version field in package.json for a beta release. Shows how to format the version string with the beta suffix for pre-releases.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/contributing/Releasing-Ignite.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ignite-cli\",\n  \"version\": \"9.5.0-beta.1\",\n  \"description\": \"Infinite Red's hottest boilerplate for React Native.\",\n  \"bin\": {\n    \"ignite\": \"bin/ignite\",\n    \"ignite-cli\": \"bin/ignite\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Front Matter Patch Configuration Example\nDESCRIPTION: An example of using front matter to patch an existing index file with an export statement for the newly generated component. The patch can be skipped based on a provided prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generator-Templates.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n---\npatch:\n  path: \"app/screens/index.ts\"\n  append: \"export * from \\\"./<%= props.kebabCaseName %>/<%= props.kebabCaseName %>-screen\\\"\\n\"\n  skip: <%= props.skipIndexFile %>\n---\n```\n\n----------------------------------------\n\nTITLE: Using 'txOptions' for Text Interpolation in Ignite Text Component\nDESCRIPTION: Demonstrates how to use the 'txOptions' prop to pass variables for interpolation in translated text. This example shows both the translation definition in the JSON file and how to use it in a component.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Text.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in en.json\nprofile: {\n  details: \"{{name}} who is {{age}} years old\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// in your component\n<Text\n  tx=\"profile:details\"\n  txOptions={{\n    name: \"Jamon\",\n    age: 40,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Publishing a Beta Version of Ignite\nDESCRIPTION: Command to publish an Ignite beta release to npm with the 'next' tag. This makes the package available for testing without affecting the main release channel.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/contributing/Releasing-Ignite.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish --tag=next\n```\n\n----------------------------------------\n\nTITLE: Front Matter File Path Configuration Example\nDESCRIPTION: An example of using front matter to customize the destination directory for generated files. This will copy template files to the app/navigation directory instead of the default location.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generator-Templates.md#2025-04-23_snippet_0\n\nLANGUAGE: ejs\nCODE:\n```\n---\ndestinationDir: app/navigation\n---\nimport { StackNavigator } from \"react-navigation\"\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Reactotron Commands\nDESCRIPTION: Demonstrates how to create a custom command in Reactotron for resetting the navigation state. The custom command is registered with a title, description, command name, and handler function.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/devtools/Devtools.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreactotron.onCustomCommand({\n  title: \"Reset Navigation State\",\n  description: \"Resets the navigation state\",\n  command: \"resetNavigation\",\n  handler: () => {\n    Reactotron.log(\"resetting navigation state\")\n    resetRoot({ index: 0, routes: [] })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Front Matter Multiple Patches Configuration Example\nDESCRIPTION: An example of using front matter to patch multiple files when generating a new model. This includes updating imports, adding properties to a root store, and exporting from an index file.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generator-Templates.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n---\npatches:\n  - path: \"app/models/RootStore.ts\"\n    after: \"from \\\"mobx-state-tree\\\"\\n\"\n    insert: \"import { <%= props.pascalCaseName %>Model } from \\\"../<%= props.kebabCaseName %>/<%= props.kebabCaseName %>\\\"\\n\"\n    skip: <%= !props.kebabCaseName.endsWith('store') %>\n  - path: \"app/models/RootStore.ts\"\n    after: \"types.model(\\\"RootStore\\\").props({\\n\"\n    insert: \"  <%= props.camelCaseName %>: types.optional(<%= props.pascalCaseName %>Model, {} as any),\\n\"\n    skip: <%= !props.kebabCaseName.endsWith('store') %>\n  - path: \"app/models/index.ts\"\n    append: \"export * from \\\"./<%= props.kebabCaseName %>/<%= props.kebabCaseName %>\\\"\\n\"\n    skip: <%= props.skipIndexFile %>\n---\n```\n\n----------------------------------------\n\nTITLE: Using Internationalization with TextField in React Native\nDESCRIPTION: This example shows how to use i18next for internationalization with the TextField component, using the labelTx prop.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/TextField.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TextField value={input} onChangeText={(value) => setInput(value)} labelTx=\"signup.name\" />\n```\n\n----------------------------------------\n\nTITLE: Icon Component with Custom Style\nDESCRIPTION: Example of applying custom image style to the icon.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Icon.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon icon=\"ladybug\" style={{ width: 20, height: 20 }} />\n```\n\n----------------------------------------\n\nTITLE: Running Maestro Tests via Command Line in Ignite\nDESCRIPTION: This command demonstrates how to run a specific Maestro test file directly from the command line. It executes a test defined in a YAML file located in the .maestro directory.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/maestro.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmaestro test .maestro/MyTestFile.yaml\n```\n\n----------------------------------------\n\nTITLE: Front Matter Filename Configuration Example\nDESCRIPTION: An example of using front matter to customize the filename of the generated file using the camelCase version of the provided name.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generator-Templates.md#2025-04-23_snippet_4\n\nLANGUAGE: ejs\nCODE:\n```\n---\nfilename: <%= props.camelCaseName %>.tsx\n---\n```\n\n----------------------------------------\n\nTITLE: Using Text Component with Heading Preset\nDESCRIPTION: Shows how to use the 'preset' prop with a view component. Note that this appears to be a documentation error since it uses 'View' instead of 'Text'.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Text.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<View preset=\"heading\" text=\"My Header\" />\n```\n\n----------------------------------------\n\nTITLE: Using Asset Images in React Native\nDESCRIPTION: Example of importing and using image assets in a React Native component\nSOURCE: https://github.com/infinitered/ignite/blob/master/boilerplate/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Image } from 'react-native';\n\nconst MyComponent = () => {\n  return (\n    <Image source={require('../assets/images/my_image.png')} />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Available Props Object in Generator Templates\nDESCRIPTION: A code snippet showing the available properties in the props object that can be used within generator templates, including naming variations and file information.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/concept/Generator-Templates.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nprops.skipIndexFile  // boolean, if --skip-index-file is passed it's `true`\nprops.filename       // string, the name of the file being generated (e.g. \"UserModel.tsx\")\nprops.pascalCaseName // string, PascalCase version of the name that is passed in (e.g. \"UserModel\")\nprops.camelCaseName  // string, camelCase version of the name (e.g. \"userModel\")\nprops.kebabCaseName  // string, kebab-case version of the name (e.g. \"user-model\")\nprops.subdirectory   // string, the subdirectory path to the file being generated (e.g. \"my/sub/path/\")\n```\n\n----------------------------------------\n\nTITLE: Rolling Back an Erroneous Ignite Release\nDESCRIPTION: Command to unpublish a specific version of ignite-cli from npm. This can be used to quickly remove a problematic release, though npm has time limitations on unpublishing packages.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/contributing/Releasing-Ignite.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm unpublish ignite-cli@1.2.3\n```\n\n----------------------------------------\n\nTITLE: Comparing Padding vs Margin Properties with useSafeAreaInsetsStyle\nDESCRIPTION: Demonstrates how to switch between padding and margin properties when using the useSafeAreaInsetsStyle hook, with console output showing the different results.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/utils/useSafeAreaInsetsStyle.ts.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst $insetsPaddingStyle = useSafeAreaInsetsStyle([\"bottom\"], \"padding\")\nconst $insetsMarginStyle = useSafeAreaInsetsStyle([\"bottom\"], \"margin\")\n\nconsole.log($insetsPaddingStyle) // { paddingBottom: 28 }\nconsole.log($insetsMarginStyle) // { marginBottom: 28 }\n```\n\n----------------------------------------\n\nTITLE: Displaying Ignite Boilerplate Folder Structure in Markdown\nDESCRIPTION: A hierarchical representation of a typical Ignite boilerplate project's folder structure, showing the main directories and files that are created when spinning up a new Ignite project.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/Boilerplate.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nyour-project\n├── .maestro\n├── android\n├── app\n│   ├── components\n│   ├── config\n│   ├── devtools\n│   ├── i18n\n│   ├── models\n│   ├── navigators\n│   ├── screens\n│   ├── services\n│   ├── theme\n│   ├── utils\n│   ├── app.tsx\n├── assets\n├── ignite\n│   └── templates\n├── ios\n├── plugins\n│   └── withSplashScreen.ts\n├── test\n│   ├── i18n.test.ts\n│   ├── mockFile.ts\n│   ├── setup.ts\n│   ├── test-tsconfig.json\n├── app.config.ts\n├── app.json\n├── index.tsx\n├── eas.json\n├── package.json\n└── README.md\n```\n```\n\n----------------------------------------\n\nTITLE: Using Text Component in React Native with Ignite\nDESCRIPTION: The Text component is an enhanced version of the built-in React Native Text component with added internationalization and property presets. This example shows a Text with a preset, translation key, and options.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/boilerplate/app/components/Components.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Text\n  preset=\"header\"\n  tx=\"welcome:header\"\n  txOptions={{\n    name: rootStore.currentUser.name,\n  }}\n  style={$header}\n/>\n```\n\n----------------------------------------\n\nTITLE: Building for iOS Platforms\nDESCRIPTION: Commands for building the application for different iOS environments using EAS\nSOURCE: https://github.com/infinitered/ignite/blob/master/boilerplate/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:ios:sim # build for ios simulator\nyarn build:ios:dev # build for ios device\nyarn build:ios:prod # build for ios device\n```\n\n----------------------------------------\n\nTITLE: Checking Global Ignite CLI Installation\nDESCRIPTION: Commands to verify if Ignite CLI is installed globally on your machine and to identify its installation location.\nSOURCE: https://github.com/infinitered/ignite/blob/master/docs/cli/Troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nignite --info          # Should output cli information\nwhere ignite           # identify where it's installed\n```\n\n----------------------------------------\n\nTITLE: Assets Directory Structure\nDESCRIPTION: Tree structure showing the organization of assets directory with icons and images subdirectories\nSOURCE: https://github.com/infinitered/ignite/blob/master/boilerplate/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tree\nCODE:\n```\nassets\n├── icons\n└── images\n```"
  }
]