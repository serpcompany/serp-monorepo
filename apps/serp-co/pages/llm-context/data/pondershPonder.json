[
  {
    "owner": "ponder-sh",
    "repo": "ponder",
    "content": "TITLE: Basic Ponder Configuration Example\nDESCRIPTION: Basic example showing a complete Ponder configuration including network setup and contract configuration.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n\nimport { ArtGobblersAbi } from \"./abis/ArtGobblers\";\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: http(process.env.PONDER_RPC_URL_1),\n    },\n  },\n  contracts: {\n    ArtGobblers: {\n      network: \"mainnet\",\n      abi: ArtGobblersAbi,\n      address: \"0x60bb1e2aa1c9acafb4d34f71585d7e959f387769\",\n      startBlock: 15863321,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Database in Ponder\nDESCRIPTION: Example configuration for using Postgres as the database in Ponder, including connection string and pool configuration.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\n\nexport default createConfig({\n  database: {\n    kind: \"postgres\",\n    connectionString: \"postgresql://user:password@localhost:5432/dbname\",\n    poolConfig: {\n      max: 100,\n      ssl: true,\n    },\n  },\n  // ... more config\n});\n```\n\n----------------------------------------\n\nTITLE: Registering an Indexing Function in Ponder\nDESCRIPTION: Shows how to register an indexing function using the ponder.on() method to handle a contract event. The function receives event data and context with database and network access.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\n\nponder.on(\"ContractName:EventName\", async ({ event, context }) => {\n  const { db, network, client, contracts } = context;\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Ponder Configuration Structure\nDESCRIPTION: Example of the basic structure for a ponder.config.ts file. The file must default export the object returned by createConfig, containing networks and contracts configuration.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: { /* ... */ },\n  contracts: { /* ... */ },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Log Events in Ponder\nDESCRIPTION: Example of registering an indexing function for log events. The function receives decoded log arguments and raw blockchain data.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\n\nponder.on(\"ContractName:EventName\", async ({ event, context }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocks in Ponder\nDESCRIPTION: Configuration example for block indexing in Ponder, showing how to set up block tracking with network, start block and interval specifications.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\n\nexport default createConfig({\n  // ... more config\n  blocks: {\n    ChainlinkPriceOracle: {\n      network: \"mainnet\",\n      startBlock: 19_750_000,\n      interval: 5, // every minute\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Ponder Networks and Contracts\nDESCRIPTION: TypeScript configuration file for setting up networks and contracts in Ponder, including chain ID, transport layer, and contract specifications.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ponder.config.ts\n\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n \nimport { BaseRegistrarAbi } from \"./abis/BaseRegistrar\";\n \nexport default createConfig({\n  networks: {\n    mainnet: { \n      chainId: 1,\n      transport: http(\"https://eth-mainnet.g.alchemy.com/v2/...\")\n    },\n  },\n  contracts: {\n    BaseRegistrar: {\n      abi: BaseRegistrarAbi,\n      network: \"mainnet\",\n      address: \"0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85\",\n      startBlock: 9380410,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Ponder networks and contracts\nDESCRIPTION: Example configuration for Ponder, defining networks and contracts to be indexed.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/core/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ponder.config.ts\n\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n \nimport { BaseRegistrarAbi } from \"./abis/BaseRegistrar\";\n \nexport default createConfig({\n  networks: {\n    mainnet: { \n      chainId: 1,\n      transport: http(\"https://eth-mainnet.g.alchemy.com/v2/...\")\n    },\n  },\n  contracts: {\n    BaseRegistrar: {\n      abi: BaseRegistrarAbi,\n      network: \"mainnet\",\n      address: \"0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85\",\n      startBlock: 9380410,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Ponder Configuration with Network and Contract Setup\nDESCRIPTION: A comprehensive example showing how to configure networks and contracts in ponder.config.ts. This includes setting up the Ethereum mainnet network with an HTTP transport and configuring the Blitmap contract with its ABI, address, and start block.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n\nimport { BlitmapAbi } from \"./abis/Blitmap\";\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: http(process.env.PONDER_RPC_URL_1),\n    },\n  },\n  contracts: {\n    Blitmap: {\n      abi: BlitmapAbi,\n      network: \"mainnet\",\n      address: \"0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63\",\n      startBlock: 12439123,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Contracts Configuration Example in Ponder\nDESCRIPTION: Example showing how to configure contracts in ponder.config.ts. This demonstrates setting up the Blitmap contract with its ABI, network, address, and start block for indexing.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\n\nimport { BlitmapAbi } from \"./abis/Blitmap\";\n\nexport default createConfig({\n  // ... more config\n  contracts: {\n    Blitmap: {\n      abi: BlitmapAbi,\n      network: \"mainnet\",\n      address: \"0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63\",\n      startBlock: 12439123,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Records in Ponder Schema - TypeScript\nDESCRIPTION: Defines a Token schema with id, mintedBy, and mintedAt fields using Ponder's schema creation API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Token: p.createTable({\n    id: p.int(),\n    mintedBy: p.string(),\n    mintedAt: p.int(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Writing an indexing function for blockchain events\nDESCRIPTION: Implementing an indexing function that processes a contract event and writes data to the database. This example handles the Transfer event from the Blitmap contract.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { blitmapTokens } from \"ponder:schema\";\n\nponder.on(\"Blitmap:Transfer\", async ({ event, context }) => {\n  await context.db.insert(blitmapTokens).values({\n    id: event.args.tokenId,\n    owner: event.args.to,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Writing an Indexing Function for ERC721 Transfer Events\nDESCRIPTION: Example of an indexing function that processes a contract event. This function handles a Blitmap:Transfer event by creating a new BlitmapToken record with the token ID and new owner address.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"Blitmap:Transfer\", async ({ event, context }) => {\n  const { BlitmapToken } = context.db;\n\n  await BlitmapToken.create({\n    id: event.args.tokenId,\n    data: {\n      owner: event.args.to,\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Ponder Schema\nDESCRIPTION: Schema definition for ENS names using Ponder's schema syntax, defining table structure and data types.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ponder.schema.ts\n\nimport { onchainTable } from \"ponder\";\n\nexport const ensName = onchainTable(\"ens_name\", (t) => ({\n  name: p.text().primaryKey(),\n  owner: p.text().notNull(),\n  registeredAt: p.integer().notNull(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Handling Call Trace Events in Ponder\nDESCRIPTION: Shows how to register an indexing function for contract function calls. Requires the includeCallTraces option to be enabled in the contract configuration.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\n\nponder.on(\"ContractName.functionName()\", async ({ event, context }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Querying a Database Table with Select API\nDESCRIPTION: Creates an API function that retrieves account data by address parameter. It demonstrates how to use the Select API to query the database in a type-safe manner.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.get(\"/account/:address\", async (c) => {\n  const address = c.req.param(\"address\");\n\n  const account = await c.db.select().from(c.tables.Account).limit(1);\n\n  return c.json(account);\n});\n```\n\n----------------------------------------\n\nTITLE: Ponder Indexing Function Example\nDESCRIPTION: Equivalent Ponder indexing function that uses the context object to access the database and contracts, demonstrating how to retrieve database records and call contract functions.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/migrate-subgraph.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { tokens } from \"ponder:schema\";\n\nponder.on(\"MyNftContract:Transfer\", async ({ event, context }) => {\n  // Get a database record\n  const token = await context.db.find(tokens, { id: event.args.id });\n\n  // Call a contract read function\n  const tokenUri = await context.client.readContract({\n    abi: context.contracts.MyNftContract.abi,\n    address: context.contracts.MyNftContract.address,\n    functionName: \"tokenURI\",\n    args: [event.args.tokenId],\n  });\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Ponder schema\nDESCRIPTION: Example of defining a schema for the Ponder database and GraphQL API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/core/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ponder.schema.ts\n\nimport { onchainTable } from \"ponder\";\n\nexport const ensName = onchainTable(\"ens_name\", (t) => ({\n  name: p.text().primaryKey(),\n  owner: p.text().notNull(),\n  registeredAt: p.integer().notNull(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Table Schema in Ponder\nDESCRIPTION: Basic usage of onchainTable to define a table named 'pets' with text and integer columns. The example shows how to define a primary key and non-null constraints.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/schema.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainTable } from \"ponder\";\n\nexport const pets = onchainTable(\"pets\", (t) => ({\n  name: t.text().primaryKey(),\n  age: t.integer().notNull(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Contracts in ponder.config.ts\nDESCRIPTION: Example of contract configuration for a Blitmap contract on Ethereum mainnet. Shows how to specify the ABI, network, contract address, and starting block for indexing.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/config.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nimport { BlitmapAbi } from \"./abis/Blitmap\";\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: http(process.env.PONDER_RPC_URL_1),\n    },\n  },\n  contracts: {\n    Blitmap: {\n      abi: BlitmapAbi,\n      network: \"mainnet\",\n      address: \"0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63\",\n      startBlock: 12439123,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Bulk Update using Raw SQL in Ponder\nDESCRIPTION: This example demonstrates how to use raw SQL for complex operations like a bulk update that adds points to accounts that submitted trades within a time period. Raw SQL offers flexibility but at a performance cost.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { accounts, tradeEvents } from \"ponder:schema\";\nimport { eq, and, gte, inArray, sql } from \"drizzle-orm\";\n\n// Add 100 points to all accounts that submitted a trade in the last 24 hours.\nponder.on(\"EveryDay:block\", async ({ event, context }) => {\n  await db.sql\n    .update(accounts)\n    .set({ points: sql`${accounts.points} + 100` })\n    .where(\n      inArray(\n        accounts.address,\n        db.sql\n          .select({ address: tradeEvents.from })\n          .from(tradeEvents)\n          .where(\n            gte(tradeEvents.timestamp, event.block.timestamp - 24 * 60 * 60)\n          )\n      )\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic API Function in TypeScript with Hono\nDESCRIPTION: Example of how to create a basic API function in Ponder by setting up a Hono app with a GET endpoint that returns a text response. This is the first step to enable API functions in a Ponder project.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/api-functions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\n\nconst app = new Hono();\n\napp.get(\"/hello\", (c) => {\n  return c.text(\"Hello, world!\");\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Ponder Indexing Function Example\nDESCRIPTION: Example of a Ponder indexing function, demonstrating how to access database records and call contract functions.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/migrate-subgraph.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"MyNftContract:Transfer\", async ({ event, context }) => {\n  // Get a database record\n  const token = await context.db.Token.findUnique({ id: event.args.id });\n\n  // Call a contract read function\n  const tokenUri = await context.client.readContract({\n    abi: context.contracts.MyNftContract.abi,\n    address: context.contracts.MyNftContract.address,\n    functionName: \"tokenURI\",\n    args: [event.args.tokenId],\n  });\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Database Connection in Ponder\nDESCRIPTION: This code snippet shows how to configure a PostgreSQL database connection in the Ponder configuration file. It specifies the database type as 'postgres' and includes a connection string with user credentials.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/database.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\n\nexport default createConfig({\n  database: {\n    kind: \"postgres\",\n    connectionString: \"postgresql://user:password@localhost:5432/dbname\",\n  },\n  // ... more config\n});\n```\n\n----------------------------------------\n\nTITLE: Using Database Access in Ponder Indexing Functions\nDESCRIPTION: Demonstrates how to use the database connection provided in the context object to insert and query data from the database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { persons, dogs } from \"ponder:schema\";\n\nponder.on(\"Neighborhood:NewNeighbor\", async ({ event, context }) => {\n  await context.db.insert(persons).values({ name: \"bob\", age: 30 });\n  await context.db.insert(dogs).values({ name: \"jake\", ownerName: \"bob\" });\n  const jake = await context.db.find(dogs, { name: \"jake\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Ponder Networks and Contracts\nDESCRIPTION: Configuration file example showing how to set up networks and contracts in Ponder, including chain ID, transport layer, and contract specifications.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/create-ponder/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ponder.config.ts\n\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n \nimport { BaseRegistrarAbi } from \"./abis/BaseRegistrar\";\n \nexport default createConfig({\n  networks: {\n    mainnet: { \n      chainId: 1,\n      transport: http(\"https://eth-mainnet.g.alchemy.com/v2/...\")\n    },\n  },\n  contracts: {\n    BaseRegistrar: {\n      abi: BaseRegistrarAbi,\n      network: \"mainnet\",\n      address: \"0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85\",\n      startBlock: 9380410,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Table Relationships in Ponder\nDESCRIPTION: Example of how to create relationships between tables using the relations function. This code defines a one-to-one relationship between the 'users' table and a 'profiles' table.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/schema.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainTable, relations } from \"ponder\";\n\nexport const users = onchainTable(\"users\", (t) => ({\n  id: t.text().primaryKey(),\n}));\n\nexport const usersRelations = relations(users, ({ one }) => ({\n  profile: one(profiles, {\n    fields: [users.id],\n    references: [profiles.userId],\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Indexes in Ponder\nDESCRIPTION: This example demonstrates how to use onchainTable to create a table with column definitions and additional constraints like indexes. It shows the three arguments pattern: table name, column definitions, and constraints.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/schema.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainTable } from \"ponder\";\n\nexport const transferEvents = onchainTable(\n  \"transfer_event\", // SQL table name\n  (t) => ({ // Column definitions\n    id: t.text().primaryKey(),\n    from: t.hex().notNull(),\n    to: t.hex().notNull(),\n    value: t.bigint().notNull(),\n  }),\n  (table) => ({  // Constraints & indexes\n    fromIdx: index().on(table.from),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Records by Primary Key in Ponder\nDESCRIPTION: This snippet shows how to delete a row by its primary key using the db.delete method, which returns true if the row was deleted or false if no matching row was found.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accounts } from \"ponder:schema\";\n\nconst deleted = await db.delete(accounts, { address: \"0x7Df1\" });\n```\n\n----------------------------------------\n\nTITLE: Indexing Zorb NFT Gradient Data in Ponder (TypeScript)\nDESCRIPTION: This snippet demonstrates how to index Zorb NFT gradient data using Ponder. It listens for Transfer events, reads gradient data for new mints using the gradientForAddress function, and stores the data in the database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/read-contract-data.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"ZorbNft:Transfer\", async ({ event, context }) => {\n  // If this is a mint, read gradient metadata from the contract.\n  if (event.args.from === ZERO_ADDRESS) {\n    const gradientData = await context.client.readContract({\n      abi: context.contracts.ZorbNft.abi,\n      address: context.contracts.ZorbNft.address,\n      functionName: \"gradientForAddress\",\n      args: [event.args.to],\n    });\n\n    await context.db.Zorb.create({\n      id: event.args.tokenId,\n      data: {\n        gradient: gradientData,\n        ownerId: event.args.to,\n      },\n    });\n\n    return;\n  }\n\n  // If not a mint, just update ownership information.\n  await context.db.Zorb.update({\n    id: event.args.tokenId,\n    data: {\n      ownerId: event.args.to,\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Factory Contracts in Ponder\nDESCRIPTION: Example showing how to use the factory() function to configure contracts that create other contract instances. Demonstrates setting up event monitoring for new contract creation.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, factory } from \"ponder\";\n\nexport default createConfig({\n  // ... more config\n  contracts: {\n    uniswapV2: {\n      // ... other contract options\n      address: factory({\n        address: \"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\",\n        event: parseAbiItem(\n          \"event PairCreated(address indexed token0, address indexed token1, address pair, uint256)\"\n        ),\n        parameter: \"pair\",\n      }),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ponder Project with npm\nDESCRIPTION: Command to create a new Ponder project using npm. This initializes a project directory, installs dependencies, and sets up a git repository.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create ponder@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Keys in Ponder Schema\nDESCRIPTION: Shows different approaches to define primary keys in Ponder schema tables. The first example uses a single-column primary key with the .primaryKey() modifier, while the second example creates a composite primary key from multiple columns.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/schema.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainTable, primaryKey } from \"ponder\";\n\n// Single column primary key\nexport const tokens = onchainTable(\"tokens\", (t) => ({\n  id: t.bigint().primaryKey(),\n}));\n\n// Composite primary key\nexport const poolStates = onchainTable(\n  \"pool_states\",\n  (t) => ({\n    poolId: t.bigint().notNull(),\n    address: t.hex().notNull(),\n  }),\n  (table) => ({\n    pk: primaryKey({ columns: [table.poolId, table.address] }),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Ponder Indexing Functions\nDESCRIPTION: Example of an indexing function that processes ENS name registration events and stores them in the database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/create-ponder/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/BaseRegistrar.ts\n\nimport { ponder } from \"ponder:registry\";\nimport schema from \"ponder:schema\";\n\nponder.on(\"BaseRegistrar:NameRegistered\", async ({ event, context }) => {\n  const { name, owner } = event.params;\n\n  await context.db.insert(schema.ensName).values({\n    name: name,\n    owner: owner,\n    registeredAt: event.block.timestamp,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Time-Aware Schema for Swap Events in TypeScript\nDESCRIPTION: Creates a database table schema for swap events that includes a timestamp field from the block. This approach enables simple time-based filtering and sorting of blockchain events.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/guides/time-series.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainTable } from \"ponder\";\n\nexport const swapEvents = onchainTable(\"swap_events\", (t) => ({\n  id: t.text().primaryKey(),\n  from: t.hex().notNull(),\n  to: t.hex().notNull(),\n  amount: t.bigint().notNull(),\n  timestamp: t.bigint().notNull(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in Ponder Schema File\nDESCRIPTION: Example of defining a Person table in a Ponder schema file using the createSchema function. This schema defines a Person table with ID, name, and optional age fields.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Person: p.createTable({\n    id: p.int(),\n    name: p.string(),\n    age: p.int().optional(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Simple Database Query with Drizzle Select Builder\nDESCRIPTION: Demonstrates how to query the database using the Drizzle select query builder. This example creates an endpoint that accepts an address parameter and returns the matching account from the database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/api-functions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db } from \"ponder:api\";\nimport schema from \"ponder:schema\";\nimport { Hono } from \"hono\";\n\nconst app = new Hono();\n\napp.get(\"/account/:address\", async (c) => {\n  const address = c.req.param(\"address\");\n\n  const account = await db\n    .select()\n    .from(schema.accounts)\n    .where(eq(schema.accounts.address, address))\n    .limit(1);\n\n  return c.json(account);\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Basic Ponder Configuration with Mainnet Contract\nDESCRIPTION: This example demonstrates a basic Ponder configuration setting up a mainnet network and an ArtGobblers contract. It includes network transport setup and contract details.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/config.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: http(process.env.PONDER_RPC_URL_1),\n    },\n  },\n  contracts: {\n    ArtGobblers: {\n      network: \"mainnet\",\n      abi: \"./abis/ArtGobblers.json\",\n      address: \"0x60bb1e2aa1c9acafb4d34f71585d7e959f387769\",\n      startBlock: 15863321,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Hourly OHLC Data Bucketing for Swap Events in TypeScript\nDESCRIPTION: Event handler that processes Token:Swap events and populates the hour_buckets table with OHLC data. It either creates a new bucket for the current hour or updates an existing one with new price information, maintaining accurate high, low, and average calculations.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/guides/time-series.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type Schema } from \"ponder:registry\";\n\nconst secondsInHour = 60 * 60;\n\nponder.on(\"Token:Swap\", async ({ event, context }) => {\n  const { timestamp } = event.block;\n  const { price } = event.args;\n\n  const hourId = Math.floor(timestamp / secondsInHour) * secondsInHour;\n\n  await context.db\n    .insert(hourBuckets)\n    .values({\n      id: hourId,\n      open: price,\n      close: price,\n      low: price,\n      high: price,\n      average: price,\n      count: 1,\n    })\n    .onConflictDoUpdate((row) => ({\n      close: price,\n      low: Math.min(row.low, price),\n      high: Math.max(row.high, price),\n      average: (row.average * row.count + price) / (row.count + 1),\n      count: row.count + 1,\n    }));\n});\n```\n\n----------------------------------------\n\nTITLE: Making RPC Requests Using Viem Client in API Function\nDESCRIPTION: Demonstrates how to use the Viem client included in the API function context to make RPC requests to blockchain networks. This example fetches both on-chain balance and indexed account data for a given address.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/api-functions.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { publicClients, db } from \"ponder:api\";\nimport schema from \"ponder:schema\";\nimport { Hono } from \"hono\";\n\nconst app = new Hono();\n\napp.get(\"/account/:chainId/:address\", async (c) => {\n  const chainId = c.req.param(\"chainId\");\n  const address = c.req.param(\"address\");\n\n  const balance = await publicClients[chainId].getBalance({ address });\n\n  const account = await db.query.accounts.findFirst({\n    where: eq(schema.accounts.address, address),\n  });\n\n  return c.json({ balance, account });\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Registering GraphQL Middleware in Ponder\nDESCRIPTION: Example showing how to enable the standard GraphQL API by registering the graphql middleware at both root and /graphql paths. This is necessary since version 0.9.0 where API functions are required and GraphQL is not served by default.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/api-functions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db } from \"ponder:api\";\nimport schema from \"ponder:schema\";\nimport { Hono } from \"hono\";\nimport { graphql } from \"ponder\";\n\nconst app = new Hono();\n\napp.use(\"/\", graphql({ db, schema }));\napp.use(\"/graphql\", graphql({ db, schema }));\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Using onConflictDoUpdate for Upserts in Ponder\nDESCRIPTION: This snippet demonstrates how to perform an upsert operation with onConflictDoUpdate, which updates specified fields if a row with the same primary key already exists.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accounts } from \"ponder:schema\";\n\nconst row = await db\n  .insert(accounts)\n  .values({ address: \"0x7Df1\", balance: 0n, activeAt: event.block.timestamp })\n  .onConflictDoUpdate({ activeAt: event.block.timestamp });\n```\n\n----------------------------------------\n\nTITLE: Advanced Database Querying with Filters in Ponder\nDESCRIPTION: Creates an API endpoint that retrieves 'whale' accounts with large balances. It demonstrates using filters, column selection, and limiting in database queries.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\nimport { gte } from \"@ponder/core\";\n\nponder.get(\"/whales\", async (c) => {\n  const { Account } = c.tables;\n\n  const whales = await c.db\n    .select({ address: Account.id, balance: Account.balance })\n    .from(Account.id)\n    .where(gte(TransferEvent.balance, 1_000_000_000n))\n    .limit(1);\n\n  return c.json(whales);\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Ponder Store API\nDESCRIPTION: This snippet shows how to insert single and multiple rows into the database using the db.insert method. It returns the inserted rows, including any default values that were generated.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accounts } from \"ponder:schema\";\n\nconst row = await db.insert(accounts).values({\n  address: \"0x7Df1\", balance: 0n\n});\n\nconst rows = await db.insert(accounts).values([\n  { address: \"0x7Df2\", balance: -50n },\n  { address: \"0x7Df3\", balance: 100n },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Ponder for Contract Interaction\nDESCRIPTION: This snippet shows how to set up the Ponder configuration file to define networks and contracts for interaction.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/read-contract-data.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nimport { BlitmapAbi } from \"./abis/Blitmap\";\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: http(process.env.PONDER_RPC_URL_1),\n    },\n  },\n  contracts: {\n    Blitmap: {\n      network: \"mainnet\",\n      abi: BlitmapAbi,\n      address: \"0x8d04...D3Ff63\",\n      startBlock: 12439123,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Time-Series OHLC Data with GraphQL and SQL\nDESCRIPTION: Demonstrates two equivalent ways to query hourly OHLC data: using GraphQL or direct SQL. Both queries retrieve the most recent 48 hours of data in descending order to populate a candlestick chart in a frontend application.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/guides/time-series.mdx#2025-04-23_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  hourBuckets(orderBy: { id: \"desc\" }, limit: 48) {\n    items {\n      id\n      open\n      close\n      low\n      high\n      average\n      count\n    }\n  }\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\n  FROM \"HourBucket\"\n  ORDER BY id DESC\n  LIMIT 48;\n```\n\n----------------------------------------\n\nTITLE: Token Transfer Schema in Ponder - TypeScript\nDESCRIPTION: Defines a Token schema that tracks ownership and transfer count for NFT transfers.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Token: p.createTable({\n    id: p.int(),\n    ownedBy: p.string().references(\"Account.id\"),\n    transferCount: p.int(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Ordering in Ponder\nDESCRIPTION: Example showing how to configure the event ordering strategy for multi-chain applications. The ordering field specifies how events across multiple chains should be ordered, with options for 'omnichain' or 'multichain'.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\n\nexport default createConfig({\n  ordering: \"multichain\",\n  networks: { /* ... */ },\n  // ... more config\n});\n```\n\n----------------------------------------\n\nTITLE: Using onConflictDoUpdate with a Function in Ponder\nDESCRIPTION: This example shows how to use a function with onConflictDoUpdate to update records based on their current values during an upsert operation.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accounts } from \"ponder:schema\";\n\nconst row = await db\n  .insert(accounts)\n  .values({ address: \"0x7Df1\", balance: 0n })\n  .onConflictDoUpdate((row) => ({ balance: row.balance + 100n }));\n```\n\n----------------------------------------\n\nTITLE: Handling POST Requests with Request Body\nDESCRIPTION: Creates an API function that handles POST requests with data from the request body. It calculates transfer volume within a given time range using aggregation functions.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\nimport { and, gte, sum } from \"@ponder/core\";\n\nponder.post(\"/volume\", async (c) => {\n  const { TransferEvent } = c.tables;\n\n  const body = await c.req.json();\n  const { fromTimestamp, toTimestamp } = body;\n\n  const volumeChartData = await c.db\n    .select({\n      to: TransferEvent.toId,\n      volume: sum(TransferEvent.amount),\n    })\n    .from(TransferEvent)\n    .groupBy(TransferEvent.toId)\n    .where(\n      and(\n        gte(TransferEvent.timestamp, fromTimestamp),\n        lte(TransferEvent.timestamp, toTimestamp)\n      )\n    )\n    .limit(1);\n\n  return c.json(volumeChartData);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20 Transfer Event Indexing Function\nDESCRIPTION: This indexing function processes ERC20 Transfer events by creating records in the TransferEvent table with data from the event arguments and block metadata.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/blog/0.2.0.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\"\n\nponder.on(\"ERC20:Transfer\", async ({ event, context }) => {\n  const { TransferEvent } = context.db;\n\n  await TransferEvent.create({\n    id: event.log.id,\n    data: {\n      from: event.args.from,\n      to: event.args.to,\n      amount: event.args.value,\n      timestamp: event.block.timestamp,\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Relational Database Query with Drizzle\nDESCRIPTION: Shows how to use Drizzle's relational query builder for more complex queries. This example creates an endpoint that finds the 10 largest trades in the past hour, joined with the accounts that made the trades.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/api-functions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db } from \"ponder:api\";\nimport { accounts, tradeEvents } from \"ponder:schema\";\nimport { Hono } from \"hono\";\nimport { eq, and, gte, inArray, sql } from \"drizzle-orm\";\n\nconst app = new Hono();\n\napp.get(\"/hot-trades\", async (c) => {\n  const trades = await db.query.tradeEvents.findMany({\n    where: (table, { gt, gte, and }) =>\n      and(\n        gt(table.amount, 1_000n),\n        gte(table.timestamp, Date.now() - 1000 * 60 * 60)\n      ),\n    limit: 10,\n    with: { account: true },\n  });\n\n  return c.json(trades);\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Intervals in Ponder\nDESCRIPTION: Configuration example showing how to set up a named block interval in ponder.config.ts. This setup creates a ChainlinkOracleUpdate interval on mainnet that runs approximately every 60 seconds.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/block-intervals.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: { chainId: 1, transport: http(process.env.PONDER_RPC_URL_1) },\n  },\n  blocks: {\n    ChainlinkOracleUpdate: {\n      network: \"mainnet\",\n      startBlock: 19783636,\n      interval: 60 / 12, // Every 60 seconds\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships in Ponder Schema\nDESCRIPTION: TypeScript schema definition showing how to create one-to-one and one-to-many relationships between Pet and Person entities.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Pet: p.createTable({\n    id: p.string(),\n    name: p.string(),\n    ownerId: p.int().references(\"Person.id\"),\n    owner: p.one(\"ownerId\"),\n  }),\n  Person: p.createTable({\n    id: p.int(),\n    dogs: p.many(\"Pet.ownerId\"),\n  }),\n}));\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Pet {\n  id: String!\n  name: String!\n  ownerId: Int!\n  owner: Person!\n}\n\ntype Person {\n  id: Int!\n  pets(\n    # Has { ownerId: person.id } applied\n    where: PetFilter, \n    orderBy: String,\n    orderDirection: String,\n    before: String,\n    after: String,\n    limit: Int,\n    timestamp: Int,\n  ): PetPage!\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Call Trace Indexing Function in Ponder (TypeScript)\nDESCRIPTION: This code snippet shows how to register an indexing function for a specific contract function call trace. It demonstrates accessing the event arguments and trace information.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/call-traces.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"Blitmap.mintOriginal()\", async ({ event }) => {\n  event.args;\n  //    ^? [tokenData: Hex, name: string]\n  event.trace.gasUsed;\n  //          ^? bigint\n});\n```\n\n----------------------------------------\n\nTITLE: Drizzle ORM Query Implementation\nDESCRIPTION: TypeScript implementation showing how to set up Drizzle ORM client and perform queries against Ponder tables.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/direct-sql.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setDatabaseSchema } from \"@ponder/client\";\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport * as _schema from \"../../ponder/ponder.schema\";\n\nconst schema = setDatabaseSchema(_schema, \"my_schema\");\n\nconst db = drizzle(process.env.DATABASE_URL, { schema, casing: \"snake_case\" });\n\n// Select\nconst oldAccounts = await db\n  .select()\n  .from(schema.accounts)\n  .orderBy(asc(schema.accounts.createdAt))\n  .limit(100);\n\n// Query\nconst whalesWithTransfers = await db.query.accounts.findMany({\n  where: (accounts, { eq }) => eq(accounts.balance, 1_000_000n),\n  with: { transferEvents: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Event Indexing Functions\nDESCRIPTION: Example indexing function that reads price data from a Chainlink oracle contract at each interval and stores it in a database table. This function runs on each block event for the ChainlinkOracleUpdate interval.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/block-intervals.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { prices } from \"ponder:schema\";\nimport { ChainlinkOracleAbi } from \"../abis/ChainlinkOracle.ts\";\n\nponder.on(\"ChainlinkOracleUpdate:block\", async ({ event, context }) => {\n  // Fetch the price at the current block height.\n  const latestPrice = await client.readContract({\n    abi: ChainlinkOracleAbi,\n    address: \"0xD10aBbC76679a20055E167BB80A24ac851b37056\",\n    functionName: \"latestAnswer\",\n  });\n\n  // Insert a row into the prices table.\n  await context.db.insert(prices).values({\n    id: event.block.timestamp,\n    blockNumber: event.block.number,\n    timestamp: event.block.timestamp,\n    price: latestPrice,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Database in Ponder\nDESCRIPTION: This snippet shows how to configure Ponder to use a Postgres database. It sets the connection string, schema, and pool configuration.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/config.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\n\nexport default createConfig({\n  database: {\n    kind: \"postgres\",\n    connectionString: \"postgresql://user:password@localhost:5432/dbname\",\n    schema: \"ponder_dev\",\n    poolConfig: {\n      max: 100,\n    },\n  },\n  // ... more config\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Hourly Buckets Table Schema for Candlestick Charts in TypeScript\nDESCRIPTION: Creates a database table schema for storing OHLC (Open-High-Low-Close) data in hourly buckets, which can be used for candlestick charts. The schema defines fields for price data points and tracking the number of events in each bucket.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/guides/time-series.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainTable } from \"ponder\";\n\nexport const hourBuckets = onchainTable(\"hour_buckets\", (t) => ({\n  id: t.integer().primaryKey(),\n  open: t.real().notNull(),\n  close: t.real().notNull(),\n  low: t.real().notNull(),\n  high: t.real().notNull(),\n  average: t.real().notNull(),\n  count: t.integer().notNull(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Designing a Ponder Schema\nDESCRIPTION: Example of creating a database schema in ponder.schema.ts. This defines the structure of the data that will be served by the GraphQL API, in this case a table for BlitmapToken with id and owner fields.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  BlitmapToken: p.createTable({\n    id: p.string(),\n    owner: p.string(), // Ethereum address\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC URL in .env.local file\nDESCRIPTION: Setting up environment variables for RPC URLs in .env.local file. Each URL is postfixed with the chain ID, allowing Ponder to fetch data using the Ethereum RPC API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nPONDER_RPC_URL_1 = \"https://eth-mainnet.g.alchemy.com/v2/...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Networks in ponder.config.ts\nDESCRIPTION: Example of network configuration for Ethereum mainnet, including chainId and transport setup with an environment variable for the RPC URL.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/config.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nimport { BlitmapAbi } from \"./abis/Blitmap\";\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: http(process.env.PONDER_RPC_URL_1),\n    },\n  },\n  contracts: {\n    Blitmap: {\n      abi: BlitmapAbi,\n      network: \"mainnet\",\n      address: \"0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63\",\n      startBlock: 12439123,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Ponder Client Instance\nDESCRIPTION: Demonstrates how to create a client instance using createClient with server URL and schema configuration.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/client.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@ponder/client\";\nimport * as schema from \"../../ponder/ponder.schema\";\n\nconst client = createClient(\"http://localhost:42069/sql\", { schema });\n```\n\n----------------------------------------\n\nTITLE: Implementing Call Trace Event Handler in Ponder\nDESCRIPTION: Demonstrates how to create an event handler for a contract function call trace, showing type inference for event arguments and trace properties.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/call-traces.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\n\nponder.on(\"Blitmap.mintOriginal()\", async ({ event }) => {\n  event.args;\n  //    ^? [tokenData: Hex, name: string]\n  event.trace.gasUsed;\n  //          ^? bigint\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Ponder\nDESCRIPTION: Demonstrates how to execute raw SQL queries using the db.execute method with the sql utility function, allowing for more complex or specific database operations.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\nimport { sql } from \"@ponder/core\";\n\nponder.get(\"/:token/ticker\", async (c) => {\n  const token = c.req.param(\"token\");\n\n  const result = await c.db.execute(\n    sql`SELECT ticker FROM \"Token\" WHERE id = ${token}`\n  );\n  const ticker = result.rows[0]?.ticker;\n\n  return c.text(ticker);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balanced Transport in Ponder Configuration\nDESCRIPTION: This snippet shows how to use the loadBalance transport in a Ponder configuration file. It demonstrates the re-export of loadBalance from @ponder/utils and its usage with multiple HTTP and WebSocket endpoints.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/transports.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, loadBalance } from \"ponder\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: loadBalance([\n        http(\"https://cloudflare-eth.com\"),\n        http(\"https://eth-mainnet.public.blastapi.io\"),\n        webSocket(\"wss://ethereum-rpc.publicnode.com\"),\n        rateLimit(http(\"https://rpc.ankr.com/eth\"), { requestsPerSecond: 5 }),\n      ]),\n    },\n  },\n  contracts: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Relational Query Builder in Ponder API\nDESCRIPTION: This snippet demonstrates how to use Drizzle's relational query builder for complex SELECT queries that join multiple tables, shown in an API function that finds large recent trades with associated accounts.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eq, and, gte, inArray, sql } from \"drizzle-orm\";\nimport { accounts, tradeEvents } from \"ponder:schema\";\n\nponder.get(\"/hot-trades\", async (c) => {\n  const trades = await c.db.query.tradeEvents.findMany({\n    where: (table, { gt, gte, and }) =>\n      and(\n        gt(table.amount, 1_000n),\n        gte(table.timestamp, Date.now() - 1000 * 60 * 60)\n      ),\n    limit: 10,\n    with: { account: true },\n  });\n\n  return c.json(trades);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-chain Contract Network Overrides\nDESCRIPTION: Enhanced contract network configuration supporting network-specific overrides for address, event, startBlock, endBlock, and factory settings. Enables efficient multi-chain contract indexing with network-specific logic.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/migration-guide.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ponder.config.ts example\ncontext.network.name === \"optimism\"\n```\n\n----------------------------------------\n\nTITLE: Implementing OHLC Data Processing\nDESCRIPTION: Processes swap events to create or update hourly OHLC buckets, calculating price statistics for each time interval.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/time-series.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type Schema } from \"@/generated\";\n\nconst secondsInHour = 60 * 60;\n\nponder.on(\"Token:Swap\", async ({ event, context }) => {\n  const { timestamp } = event.block;\n  const { price } = event.args;\n\n  const hourId = Math.floor(timestamp / secondsInHour) * secondsInHour;\n\n  await context.db.HourBucket.upsert({\n    id: hourId,\n    create: { open: price, close: price, low: price, high: price, average: price, count: 1 },\n    update: ({ current }) => ({\n      close: price,\n      low: current.low > price ? price : current.low,\n      high: current.high < price ? price : current.high,\n      average: (current.average * current.count + price) / current.count + 1,\n      count: current.count + 1,\n    }),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Data in Ponder Indexing Function\nDESCRIPTION: This snippet demonstrates how to use the context.client to read contract data within a Ponder indexing function.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/read-contract-data.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"Blitmap:Mint\", async ({ event, context }) => {\n  const { client } = context;\n  //      ^? ReadonlyClient<\"mainnet\">\n  const { Blitmap } = context.contracts;\n  //      ^? {\n  //           abi: [...]\n  //           address: \"0x8d04...D3Ff63\",\n  //         }\n\n  // Fetch the URI for the newly minted token.\n  const tokenUri = await client.readContract({\n    abi: Blitmap.abi,\n    address: Blitmap.address,\n    functionName: \"tokenURI\",\n    args: [event.args.tokenId],\n  });\n\n  // Insert a Token record, including the URI.\n  const token = await context.db.Token.create({\n    id: event.args.tokenId,\n    data: { uri: tokenUri },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Call Traces in Ponder Configuration\nDESCRIPTION: Shows how to enable call trace indexing for a contract by setting includeCallTraces option to true in the Ponder configuration file.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/call-traces.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\nimport { BlitmapAbi } from \"./abis/Blitmap\";\n\nexport default createConfig({\n  contracts: {\n    Blitmap: {\n      abi: BlitmapAbi,\n      network: \"mainnet\",\n      address: \"0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63\",\n      startBlock: 12439123,\n      includeCallTraces: true,\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Querying OHLC Data\nDESCRIPTION: Examples of querying the last 48 hours of OHLC data using both GraphQL and SQL.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/time-series.mdx#2025-04-23_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  HourBucket(orderBy: { id: \"desc\" }, limit: 48) {\n    items {\n      id\n      open\n      close\n      low\n      high\n      average\n      count\n    }\n  }\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\n  FROM \"HourBucket\"\n  ORDER BY id DESC\n  LIMIT 48;\n```\n\n----------------------------------------\n\nTITLE: Configuring Ponder with Merged Contract ABIs\nDESCRIPTION: Example showing how to use mergeAbis in a Ponder configuration file to combine multiple implementation ABIs for a proxy contract.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/merge-abis.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, mergeAbis } from \"ponder\";\nimport { http } from \"viem\";\n\nimport { ERC1967ProxyAbi } from \"./abis/ERC1967Proxy\";\nimport { NameRegistryAbi } from \"./abis/NameRegistry\";\nimport { NameRegistry2Abi } from \"./abis/NameRegistry2\";\n\nexport default createConfig({\n  networks: {\n    goerli: { chainId: 5, transport: http(process.env.PONDER_RPC_URL_5) },\n  },\n  contracts: {\n    FarcasterNameRegistry: {\n      abi: mergeAbis([ERC1967ProxyAbi, NameRegistryAbi, NameRegistry2Abi]),\n      network: \"goerli\",\n      address: \"0xe3Be01D99bAa8dB9905b33a3cA391238234B79D1\",\n      startBlock: 7648795,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Call Trace Indexing in Ponder Config (TypeScript)\nDESCRIPTION: This snippet demonstrates how to enable call trace indexing for a contract in the Ponder configuration file. The 'includeCallTraces' option is set to true for the Blitmap contract.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/call-traces.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { BlitmapAbi } from \"./abis/Blitmap\";\n\nexport default createConfig({\n  contracts: {\n    Blitmap: {\n      abi: BlitmapAbi,\n      network: \"mainnet\",\n      address: \"0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63\",\n      startBlock: 12439123,\n      includeCallTraces: true,\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL query for Ponder API\nDESCRIPTION: Sample GraphQL query to fetch token data from the Ponder API. This queries the blitmapTokens table defined in the schema.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  blitmapTokens {\n    id\n    owner\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Event Handler\nDESCRIPTION: Shows how to register an indexing function for transaction:from events, processing transactions from the specified account address and storing them in the database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/accounts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { transactions } from \"ponder:schema\";\n\nponder.on(\"BeaverBuild:transaction:from\", async ({ event, context }) => {\n  await context.db.insert(transactions).values({\n    from: event.transaction.from,\n    to: event.transaction.to,\n    value: event.transaction.value,\n    gasUsed: event.transactionReceipt.gasUsed,\n    // ... more fields\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Records with a Function in Ponder\nDESCRIPTION: This example shows how to use a function with the set method to update a record based on its current values, useful for operations like incrementing.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accounts } from \"ponder:schema\";\n\nconst row = await db\n  .update(accounts, { address: \"0x7Df1\" })\n  .set((row) => ({ balance: row.balance + 100n }));\n```\n\n----------------------------------------\n\nTITLE: Processing Swap Events with Timestamps\nDESCRIPTION: Handles swap events by creating records with timestamp information from the blockchain.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/time-series.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"Token:Swap\", async ({ event, context }) => {\n  await context.db.SwapEvent.create({\n    id: event.log.id,\n    data: {\n      from: event.args.from,\n      to: event.args.to,\n      amount: event.args.amount,\n      timestamp: event.block.timestamp,\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Top-Level Call Traces in Ponder (TypeScript)\nDESCRIPTION: This snippet demonstrates how to determine if a call trace is a top-level call by checking the length of the traceAddress array. Top-level calls have an empty traceAddress.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/call-traces.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nponder.on(\"ERC20.transfer()\", async ({ event }) => {\n  const isTopLevelCall = event.trace.traceAddress.length === 0;\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Conflict Resolution with Multiple Inserts in Ponder\nDESCRIPTION: This snippet demonstrates how to use conflict resolution when inserting multiple rows, with the resolution logic applied to each row individually.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accounts } from \"ponder:schema\";\n\nconst rows = await db\n  .insert(accounts)\n  .values([\n    { address: \"0x7Df1\", balance: 0n },\n    { address: \"0x7Df2\", balance: 100n },\n  ])\n  .onConflictDoNothing();\n```\n\n----------------------------------------\n\nTITLE: Querying Token Transfer History in GraphQL\nDESCRIPTION: GraphQL query to retrieve the current owner and complete transfer event history for a specific token ID. Returns owner address and chronological list of transfers with timestamps.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc721/README.md#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  token(id: \"7777\") {\n    owner {\n      id\n    }\n    transferEvents {\n      from\n      to\n      timestamp\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Native Transfer Events in Ponder\nDESCRIPTION: Shows how to register an indexing function for native token transfers to or from an account, providing transfer details and blockchain data.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\n\nponder.on(\"AccountName:transfer:from\", async ({ event, context }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-Network Block Events in Ponder (TypeScript)\nDESCRIPTION: This indexing function demonstrates how to handle block events from multiple networks. It uses the context.network object to determine which network the current block is from and perform network-specific operations.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/block-intervals.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"ChainlinkOracleUpdate:block\", async ({ event, context }) => {\n  context.network;\n  //      ^? { name: \"mainnet\", chainId 1 } | { name: \"optimism\", chainId 10 }\n\n  if (context.network.name === \"mainnet\") {\n    // Do mainnet-specific stuff!\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes on Ponder Tables\nDESCRIPTION: Example of how to add an index to a table using the index() function in the constraints argument of onchainTable. The index is created on the 'name' column of the 'persons' table.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/schema.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainTable, index } from \"ponder\";\n\nexport const persons = onchainTable(\n  \"persons\",\n  (t) => ({\n    id: t.text().primaryKey(),\n    name: t.text(),\n  }),\n  (table) => ({\n    nameIdx: index().on(table.name),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Using replaceBigInts with JSON Columns in Ponder\nDESCRIPTION: Example showing how to prepare BigInt values for insertion into JSON columns in a Ponder application by converting them to hexadecimal strings.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/replace-bigints.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { userOperations } from \"ponder:schema\";\nimport { replaceBigInts } from \"@ponder/utils\";\nimport { toHex } from \"viem\";\n\nponder.on(\"EntryPoint:UserOp\", async ({ event, context }) => {\n  await context.db.insert(userOperations).values({\n    id: event.id,\n    receipt: replaceBigInts(event.transactionReceipt, toHex),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Aggregate Query in SQLite\nDESCRIPTION: A more advanced query that finds Account records that have received more than 10 transfers, using subqueries and aggregation.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\n  FROM Account\n  WHERE id IN (\n    SELECT toId\n      FROM TransferEvent\n      GROUP BY toId\n      HAVING COUNT(*) > 10\n  )\n  LIMIT 3;\n```\n\n----------------------------------------\n\nTITLE: Using NetworkConfig Type in TypeScript for Ponder Network Configuration\nDESCRIPTION: Shows how to use NetworkConfig type for defining network configurations in Ponder's createConfig function.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/types.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, type NetworkConfig } from \"ponder\";\nimport { http } from \"viem\";\n\nconst mainnet = {\n  chainId: 1,\n  transport: http(process.env.PONDER_RPC_URL_1),\n} as const satisfies NetworkConfig;\n\nexport default createConfig({\n  networks: {\n    mainnet,\n  }\n  contracts: ...,\n});\n```\n\n----------------------------------------\n\nTITLE: Token Ownership Schema in Ponder - TypeScript\nDESCRIPTION: Defines a Token schema with references to Account table for tracking token ownership and minting history.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Token: p.createTable({\n    id: p.int(),\n    mintedBy: p.string().references(\"Account.id\")\n    ownedBy: p.string().references(\"Account.id\")\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Querying Account Transfer History in GraphQL\nDESCRIPTION: Fetches all incoming and outgoing transfer events for a specific account, showing transaction details including sender, receiver, and amounts.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc20/README.md#2025-04-23_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  account(id: \"0x1337f7970E8399ccbc625647FCE58a9dADA5aA66\") {\n    transferEventsTo {\n      from\n      amount\n    }\n    transferEventsFrom {\n      to\n      amount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Block Events in Ponder\nDESCRIPTION: Example of registering an indexing function for new blocks. Provides block data for each new block in the blockchain.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\n\nponder.on(\"SourceName:block\", async ({ event, context }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Contract Parameters via Context\nDESCRIPTION: Updated context object structure providing access to contract addresses, ABIs, and network information. Includes read-only Viem client with caching capabilities for improved indexing performance.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/migration-guide.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncontext.db\ncontext.client\ncontext.contracts\ncontext.network\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema with TypeScript in Ponder\nDESCRIPTION: Migration from schema.graphql to ponder.schema.ts file format with static validation using TypeScript. This change introduces better type safety and validation while maintaining compatibility with existing GraphQL API schemas.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/migration-guide.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ponder.schema.ts\n// Example structure - specific implementation details would vary based on schema needs\n```\n\n----------------------------------------\n\nTITLE: Using replaceBigInts in Ponder with Schema Definition and Data Processing\nDESCRIPTION: This code shows how to implement replaceBigInts in a Ponder project. The schema defines a UserOperation table with a JSON column that uses ReplaceBigInts type, while the event handler uses replaceBigInts to prepare BigInt values for storage.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/replace-bigints.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\nimport type { ReplaceBigInts } from \"@ponder/utils\";\nimport type { TransactionReceipt, Hex } from \"viem\";\n\nexport default createSchema((p) => ({\n  UserOperation: p.createTable({\n    id: p.string(),\n    receipt: p.json<ReplaceBigInts<TransactionReceipt, Hex>>(),\n    // ...\n  }),\n}));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\nimport { replaceBigInts } from \"@ponder/utils\";\nimport { toHex } from \"viem\";\n\nponder.on(\"EntryPoint:UserOp\", async ({ event, context }) => {\n  const { UserOperation } = context.db;\n\n  await UserOperation.create({\n    id: event.log.id,\n    data: {\n      receipt: replaceBigInts(event.transactionReceipt, toHex),\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Indexing Chainlink Oracle Price Data with Block Events (TypeScript)\nDESCRIPTION: This indexing function uses block events to index price chart data by reading the latest price from a Chainlink oracle contract every minute. It demonstrates how to use the block interval for periodic data collection.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/block-intervals.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\nimport { ChainlinkOracleAbi } from \"../abis/ChainlinkOracle.ts\";\n\nponder.on(\"ChainlinkOracleUpdate:block\", async ({ event, context }) => {\n  // Fetch the price at the current block height.\n  const latestPrice = await client.readContract({\n    abi: ChainlinkOracleAbi,\n    address: \"0xD10aBbC76679a20055E167BB80A24ac851b37056\",\n    functionName: \"latestAnswer\",\n  });\n\n  // Insert a Price record.\n  const token = await context.db.Price.create({\n    id: event.block.timestamp,\n    data: {\n      blockNumber: event.block.number,\n      timestamp: event.block.timestamp,\n      price: latestPrice,\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Setup Event for Singleton Record Initialization in Ponder\nDESCRIPTION: Illustrates the use of a 'setup' event in Ponder to initialize a singleton record. This approach improves performance by creating the record once at the beginning of indexing, rather than upserting in each indexing function.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { world } from \"ponder:schema\";\n\nponder.on(\"FunGame:setup\", async ({ context }) => {\n  await context.db.insert(world).values({\n    id: 1,\n    playerCount: 0,\n  });\n});\n\nponder.on(\"FunGame:NewPlayer\", async ({ context }) => {\n  await context.db\n    .update(world, { id: 1 })\n    .set((row) => ({\n      playerCount: row.playerCount + 1,\n  }));\n});\n```\n\n----------------------------------------\n\nTITLE: Using ContractConfig Type for Configuration in TypeScript\nDESCRIPTION: Shows how to use the ContractConfig utility type from @ponder/core to define contract configuration with proper type checking. This provides type safety for network, ABI, and address properties.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/types.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, type ContractConfig } from \"@ponder/core\";\nimport { Erc20Abi } from \"./abis/Erc20Abi.ts\";\n\nconst Erc20 = {\n  network: \"mainnet\"\n  abi: Erc20Abi,\n  address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n} as const satisfies ContractConfig;\n\nexport default createConfig({\n  networks: ...,\n  contracts: {\n    Erc20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling GET Requests with Error Handling\nDESCRIPTION: Creates an API function that handles GET requests with proper error handling. It looks up an account by address and returns a 404 status if not found.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\nimport { eq } from \"@ponder/core\";\n\nponder.get(\"/account/:address\", async (c) => {\n  const { Account } = c.tables;\n  const address = c.req.param(\"address\");\n\n  const account = await c.db\n    .select()\n    .from(Account)\n    .where(eq(Account.address, address))\n    .first();\n\n  if (account) {\n    return c.json(account);\n  } else {\n    return c.status(404).json({ error: \"Account not found\" });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Ponder Schema\nDESCRIPTION: Example of defining a database schema in Ponder that determines the structure of the GraphQL API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/eslint-config-ponder/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ponder.schema.ts\n\nimport { onchainTable } from \"ponder\";\n\nexport const ensName = onchainTable(\"ens_name\", (t) => ({\n  name: p.text().primaryKey(),\n  owner: p.text().notNull(),\n  registeredAt: p.integer().notNull(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Using EventNames Type in TypeScript for Ponder Events\nDESCRIPTION: Demonstrates the usage of the EventNames utility type to create a union of all event names available from contracts defined in ponder.config.ts.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type EventNames } from \"ponder:registry\";\n\nfunction helper(eventName: EventNames) {\n  eventName;\n  // ^? \"Weth:Deposit\" | \"Weth:Withdraw\" | \"Weth:Approval | \"Weth:Transfer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forward Pagination in Ponder\nDESCRIPTION: Demonstrates forward pagination using cursor-based pagination in Ponder. Uses the endCursor from the previous page to fetch the next page.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst pageOne = await Player.findMany({\n  orderBy: { age: \"asc\" },\n  limit: 2,\n});\n// {\n//   items: [ { id: \"Andrew\", age: 19 }, { id: \"Polly\", age: 29 } ],\n//   pageInfo: {\n//     startCursor: \"MfgBzeDkjs44\",\n//     endCursor: \"Mxhc3NDb3JlLTA=\",\n//     hasPreviousPage: false,\n//     hasNextPage: true,\n//   }\n// }\n\nconst pageTwo = await Player.findMany({\n  orderBy: { age: \"desc\" },\n  after: pageOne.pageInfo.endCursor,\n});\n// {\n//   items: [ { id: \"Jim\", age: 34 }, { id: \"Janet\", age: 56 } ],\n//   pageInfo: {\n//     startCursor: \"MxhcdoP9CVBhY\",\n//     endCursor: \"McSDfVIiLka==\",\n//     hasPreviousPage: true,\n//     hasNextPage: false,\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance and Approvals in GraphQL\nDESCRIPTION: Retrieves the current balance and all approved spending amounts for a specific Ethereum address. Shows nested query structure for accessing related approval data.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc20/README.md#2025-04-23_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  account(id: \"0x1337f7970E8399ccbc625647FCE58a9dADA5aA66\") {\n    balance\n    approvals {\n      spender\n      amount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ponder Server API with SQL Client\nDESCRIPTION: Shows how to enable client queries by registering the client middleware in the API function file.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/client.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db } from \"ponder:api\";\nimport schema from \"ponder:schema\";\nimport { Hono } from \"hono\";\nimport { client, graphql } from \"ponder\";\n\nconst app = new Hono();\n\napp.use(\"/graphql\", graphql({ db, schema }));\napp.use(\"/sql/*\", client({ db, schema }));\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Querying Time-Filtered Swap Events with GraphQL\nDESCRIPTION: A GraphQL query that demonstrates how to retrieve swap events within a specific time range using the stored timestamp values. The query sorts results in descending chronological order and applies time-based filtering conditions.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/guides/time-series.mdx#2025-04-23_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  swapEvents(\n    orderBy: { timestamp: \"desc\" }\n    where: { timestamp_gt: 1712500000, timestamp_lt: 1713000000 }\n  ) {\n    items {\n      id\n      from\n      to\n      amount\n      timestamp\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using IndexingFunctionArgs Utility Type in TypeScript\nDESCRIPTION: Demonstrates how to use the IndexingFunctionArgs generic utility type that returns the combined event and context information for a specific event, useful for creating reusable helper functions.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/types.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type IndexingFunctionArgs } from \"@/generated\";\n\nfunction helper(args: IndexingFunctionArgs<\"Weth:Deposit\">) {\n  args;\n  // ^? {\n  //      event: { ... };\n  //      context: { ... };\n  //    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to API Functions\nDESCRIPTION: Demonstrates how to add middleware to your API functions using ponder.use(). This example logs details of each incoming request before it's processed.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.use((c, next) => {\n  console.log(\"Request received:\", c.req.url);\n  return next();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Account in Ponder Config\nDESCRIPTION: Demonstrates how to set up basic account configuration in ponder.config.ts, including network specification, address, and start block for the Beaver block builder account.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/accounts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\n\nexport default createConfig({\n  // ... more config\n  accounts: {\n    BeaverBuild: {\n      network: \"mainnet\",\n      address: \"0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5\",\n      startBlock: 20000000,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using EventNames Utility Type in TypeScript\nDESCRIPTION: Demonstrates how to import and use the EventNames utility type from the @/generated module. This type represents a union of all event names available from contracts defined in ponder.config.ts.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type EventNames } from \"@/generated\";\n\nfunction helper(eventName: EventNames) {\n  eventName;\n  // ^? \"Weth:Deposit\" | \"Weth:Withdraw\" | \"Weth:Approval | \"Weth:Transfer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Command for Railway Deployment\nDESCRIPTION: Command line instructions for setting the start command with the --schema option in Railway deployments. This allows for zero-downtime deployments by specifying the database schema using Railway's deployment ID.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/production/deploy.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npnpm start --schema $RAILWAY_DEPLOYMENT_ID\n```\n\nLANGUAGE: text\nCODE:\n```\nyarn start --schema $RAILWAY_DEPLOYMENT_ID\n```\n\nLANGUAGE: text\nCODE:\n```\nnpm run start -- --schema $RAILWAY_DEPLOYMENT_ID\n```\n\n----------------------------------------\n\nTITLE: Updating Singleton Record in Ponder Event Handler\nDESCRIPTION: Shows how to update a singleton 'World' record in a Ponder event handler. This example demonstrates inserting or updating a record based on a new player event.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { world } from \"ponder:schema\";\n\nponder.on(\"FunGame:NewPlayer\", async ({ context }) => {\n  await context.db\n    .insert(world)\n    .values({ id: 1, playerCount: 0 })\n    .onConflictDoUpdate((row) => ({\n      playerCount: row.playerCount + 1,\n    }));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with ERC20 Transfer Table in Ponder\nDESCRIPTION: This schema definition creates a TransferEvent table with string, hex, bigint, and integer fields to store ERC20 transfer data.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/blog/0.2.0.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  TransferEvent: p.createTable({\n    id: p.string(),\n    from: p.hex(),\n    to: p.hex(),\n    amount: p.bigint(),\n    timestamp: p.int(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Schema Type in TypeScript for Ponder Database Records\nDESCRIPTION: Shows how to use Drizzle type helpers to create custom types for database records in Ponder.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/types.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accounts } from \"ponder:schema\";\n\nfunction helper(account: typeof accounts.$inferSelect) {\n  account;\n  // ^? {\n  //      id: bigint;\n  //      balance: bigint;\n  //      nickname: string;\n  //      createdAt: number;\n  //    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic API Function in TypeScript\nDESCRIPTION: Creates a basic API function that responds to GET requests with a 'Hello, world!' message. This is the minimal setup needed to start using API functions in Ponder.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.get(\"/hello\", (c) => {\n  return c.text(\"Hello, world!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Token Ownership by Account in GraphQL\nDESCRIPTION: GraphQL query to fetch all tokens owned by a specific account address. Returns the account ID and associated token IDs.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc721/README.md#2025-04-23_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  account(id: \"0x2B8E4729672613D69e5006a97dD56A455389FB2b\") {\n    id\n    tokens {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Setup Event for World Record Initialization in Ponder (TypeScript)\nDESCRIPTION: This snippet demonstrates the use of the 'setup' event in Ponder to initialize the World record before indexing begins. It creates the record once in the setup function and updates it in subsequent event handlers.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"FunGame:setup\", async ({ context }) => {\n  await context.db.World.create({\n    id: 1,\n    data: { playerCount: 0 },\n  });\n});\n\nponder.on(\"FunGame:NewPlayer\", async ({ context }) => {\n  await context.db.World.update({\n    id: 1,\n    data: ({ current }) => ({\n      ...current,\n      playerCount: current.playerCount + 1,\n    }),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Network Context in Ponder Event Handler\nDESCRIPTION: Demonstrates how to access and use network information within a Ponder event handler. The context.network object provides details about the current network, allowing for network-specific logic.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nponder.on(\"UniswapV3Factory:Ownership\", async ({ event, context }) => {\n  context.network;\n  //      ^? { name: \"mainnet\", chainId 1 } | { name: \"base\", chainId 8453 }\n\n  if (context.network.name === \"mainnet\") {\n    // Do mainnet-specific stuff!\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Ponder Project with Package Managers\nDESCRIPTION: Examples of how to create a new Ponder project using different package managers (pnpm, yarn, npm). The command accepts various options for customization.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/create-ponder.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create ponder {...options}\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create ponder {...options}\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm create ponder@latest {...options}\n```\n\n----------------------------------------\n\nTITLE: Querying Top Token Holders in GraphQL\nDESCRIPTION: Fetches the top 10 accounts sorted by token balance in descending order. Demonstrates usage of pagination and sorting parameters.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc20/README.md#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  accounts(first: 10, orderBy: \"balance\", orderDirection: \"desc\") {\n    id\n    balance\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp-based Schema\nDESCRIPTION: Defines a schema for swap events that includes timestamp data for temporal tracking.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/time-series.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  SwapEvent: p.createTable({\n    id: p.string(),\n    from: p.hex(),\n    to: p.hex(),\n    amount: p.bigint(),\n    timestamp: p.bigint(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Schema Utility Type for Database Models in TypeScript\nDESCRIPTION: Shows how to use the Schema utility type that accepts a table name from ponder.schema.ts and returns the type of a record in that table, providing type safety when working with database models.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/types.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type Schema } from \"@/generated\";\n\nfunction helper(account: Schema[\"Account\"]) {\n  account;\n  // ^? {\n  //      id: bigint;\n  //      balance: bigint;\n  //      nickname: string;\n  //      createdAt: number;\n  //    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ABI Merging in TypeScript\nDESCRIPTION: Simple example showing how to merge ERC20 and ERC4626 ABIs into a single token ABI using the mergeAbis utility function.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/merge-abis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeAbis } from \"@ponder/utils\";\nimport { erc20Abi, erc4626Abi } from \"viem\";\n\nconst tokenAbi = mergeAbis([erc20Abi, erc4626Abi]);\n```\n\n----------------------------------------\n\nTITLE: Writing Ponder indexing function\nDESCRIPTION: Example of an indexing function that processes a contract event and inserts data into the database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/core/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/BaseRegistrar.ts\n\nimport { ponder } from \"ponder:registry\";\nimport schema from \"ponder:schema\";\n\nponder.on(\"BaseRegistrar:NameRegistered\", async ({ event, context }) => {\n  const { name, owner } = event.params;\n\n  await context.db.insert(schema.ensName).values({\n    name: name,\n    owner: owner,\n    registeredAt: event.block.timestamp,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Storing Block Timestamp with Swap Event Data in TypeScript\nDESCRIPTION: Event handler that captures Token:Swap events and stores them with the block timestamp. Including the timestamp enables time-based queries and analysis without requiring additional data manipulation.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/guides/time-series.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { swapEvents } from \"ponder:schema\";\n\nponder.on(\"Token:Swap\", async ({ event, context }) => {\n  await context.db.insert(swapEvents).values({\n    id: event.id,\n    from: event.args.from,\n    to: event.args.to,\n    amount: event.args.amount,\n    timestamp: event.block.timestamp,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balanced Transport in Ponder Config\nDESCRIPTION: Configuration example for setting up load balanced transport in a Ponder application's config file using multiple RPC endpoints\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/transports.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, loadBalance } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: loadBalance([\n        http(\"https://cloudflare-eth.com\"),\n        http(\"https://eth-mainnet.public.blastapi.io\"),\n        webSocket(\"wss://ethereum-rpc.publicnode.com\"),\n        rateLimit(http(\"https://rpc.ankr.com/eth\"), { requestsPerSecond: 5 }),\n      ]),\n    },\n  },\n  contracts: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Transfer Events for an Account in GraphQL\nDESCRIPTION: This query retrieves all transfer events (both incoming and outgoing) for a specific account. It shows how to query related events and handle bidirectional relationships in the API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc4626/README.md#2025-04-23_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  account(id: \"0x1337f7970E8399ccbc625647FCE58a9dADA5aA66\") {\n    transferEventsTo {\n      from\n      amount\n    }\n    transferEventsFrom {\n      to\n      amount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Network-Specific Logic in Indexing Functions\nDESCRIPTION: Example showing how to check which network an event came from and implement network-specific logic in your indexing function. This allows different processing for blocks from different networks.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/block-intervals.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\n\nponder.on(\"ChainlinkOracleUpdate:block\", async ({ event, context }) => {\n  context.network;\n  //      ^? { name: \"mainnet\", chainId 1 } | { name: \"optimism\", chainId 10 }\n\n  if (context.network.name === \"mainnet\") {\n    // Do mainnet-specific stuff!\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using DatabaseConfig Type for Database Configuration in TypeScript\nDESCRIPTION: Demonstrates how to use the DatabaseConfig utility type to define database configuration with proper type checking, including database kind and schema properties.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/types.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, type DatabaseConfig } from \"@ponder/core\";\n\nconst database = {\n  kind: \"postgres\",\n  schema: \"production\"\n} as const satisfies DatabaseConfig;\n\nexport default createConfig({\n  networks: ...,\n  contracts: ...,\n  database,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Ponder GraphQL API\nDESCRIPTION: Example GraphQL query to retrieve data from the Ponder-generated API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/core/README.md#2025-04-23_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  ensNames(limit: 2) {\n    items {\n      name\n      owner\n      registeredAt\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Integration with Ponder Client\nDESCRIPTION: Shows how to use Ponder with React through the usePonderQuery hook for live database updates.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/client.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePonderQuery } from \"@ponder/react\";\n\nexport function Deposits() {\n  const { data, isError, isPending } = usePonderQuery({\n    queryFn: (db) => db.select().from(schema.depositEvent).limit(10),\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Networks for Block Intervals\nDESCRIPTION: Configuration example showing how to set up a block interval that runs on multiple networks with different parameters. This example configures ChainlinkOracleUpdate to run on both mainnet and optimism networks.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/block-intervals.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: { chainId: 1, transport: http(process.env.PONDER_RPC_URL_1) },\n    optimism: { chainId: 10, transport: http(process.env.PONDER_RPC_URL_10) },\n  },\n  blocks: {\n    ChainlinkOracleUpdate: {\n      network: {\n        mainnet: {\n          startBlock: 19783636,\n          interval: (60 * 60) / 12, // Every 60 minutes\n        },\n        optimism: {\n          startBlock: 119534316,\n          interval: (60 * 60) / 2, // Every 60 minutes\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Aggregating Transfer Data in PostgreSQL\nDESCRIPTION: This SQL query counts the number of transfers sent to each account, grouping by the recipient's ID. It orders the results by the transfer count in descending order and limits the output to the top 5 recipients.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"toId\", COUNT(*) AS transfer_count\n  FROM \"TransferEvent\"\n  GROUP BY \"toId\"\n  ORDER BY transfer_count DESC\n  LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: CLI Options for create-ponder\nDESCRIPTION: Detailed list of command-line options available for the create-ponder tool. Includes options for specifying templates, Etherscan integration, subgraph usage, package manager selection, and more.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/create-ponder.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  $ create-ponder <directory> [options]\n\nOptions:\n  -t, --template [id]             Use a template\n  --etherscan [url]               Use the Etherscan template with the specified contract URL\n  --etherscan-api-key [key]       Etherscan API key for Etherscan template\n  --subgraph [id]                 Use the subgraph template with the specified subgraph ID\n  --subgraph-provider [provider]  Specify the subgraph provider\n  --npm                           Use npm as your package manager\n  --pnpm                          Use pnpm as your package manager\n  --yarn                          Use yarn as your package manager\n  --skip-git                      Skip initializing a git repository\n  --skip-install                  Skip installing packages\n  -h, --help                      Display this message\n  -v, --version                   Display version number\n```\n\n----------------------------------------\n\nTITLE: Initializing Rate Limited Viem Transport in TypeScript\nDESCRIPTION: This snippet illustrates the creation of a Viem public client with a rate-limited transport. It sets up a rate limit of 25 requests per second for an Alchemy RPC endpoint.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/transports.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rateLimit } from \"@ponder/utils\";\nimport { createPublicClient, fallback, http } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: rateLimit(http(\"https://eth-mainnet.g.alchemy.com/v2/...\"), {\n    requestsPerSecond: 25,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Database Connection in Ponder Config\nDESCRIPTION: TypeScript code showing how to configure a Postgres database connection in the ponder.config.ts file. It demonstrates setting the database kind and connection string for production environments.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/production/deploy.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createConfig } from \"ponder\";\n\nexport default createConfig({\n  database: {\n    kind: \"postgres\",\n    connectionString: \"postgres://user:password@mycloud.internal:5432/database\",\n  },\n  // ... more config\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Filters in Ponder\nDESCRIPTION: Shows how to combine multiple filters using logical AND in Ponder. Filters players by id containing 'e' and age greater than 30.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait Player.createMany({\n  data: [\n    { id: \"Jim\", age: 34 },\n    { id: \"Andrew\", age: 19 },\n    { id: \"Janet\", age: 56 },\n  ],\n});\n\nconst { items } = await Player.findMany({\n  where: {\n    id: { contains: \"e\" }\n    age: { gt: 30 }\n  }\n});\n// [\n//   { id: \"Janet\", age: 56 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Using Context Type in TypeScript for Ponder Context Objects\nDESCRIPTION: Illustrates the usage of the Context generic type to get the context object type for a specific event or all events if no event name is provided.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/types.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type Context } from \"ponder:registry\";\n\nfunction helper(context: Context<\"Weth:Deposit\">) {\n  context;\n  // ^? {\n  //      network: { name: \"mainnet\"; chainId: 1; };\n  //      client: ReadonlyClient;\n  //      db: { Account: DatabaseModel<{ id: `0x${string}`; balance: bigint; }> };\n  //      contracts: { weth9: { abi: ...; address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" } };\n  //    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ponder Project with Example Template\nDESCRIPTION: Example of creating a new Ponder project using the 'feature-factory' template. This demonstrates how to use the -t or --template option with different package managers.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/create-ponder.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create ponder --template feature-factory\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create ponder --template feature-factory\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm create ponder@latest --template feature-factory\n```\n\n----------------------------------------\n\nTITLE: Running Basic SQL Query with Ponder Client\nDESCRIPTION: Shows how to execute a SELECT statement using the Drizzle query builder with type safety.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/client.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@ponder/client\";\nimport * as schema from \"../../ponder/ponder.schema\";\n\nconst client = createClient(\"https://.../sql\", { schema });\n\nconst result = await client.db.select().from(schema.account).limit(10);\n```\n\n----------------------------------------\n\nTITLE: Using Event Utility Type with Specific Event in TypeScript\nDESCRIPTION: Shows how to import and use the Event generic utility type with a specific event name. This returns the event object type for the specified event, including its args, block, transaction, and log properties.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type Event } from \"@/generated\";\n\nfunction helper(event: Event<\"Weth:Deposit\">) {\n  event;\n  // ^? {\n  //      args: { dst: `0x${string}`; wad: bigint };\n  //      block: Block;\n  //      event: \"Deposit\";\n  //      transaction: Transaction;\n  //      log: Log;\n  //    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Load Balanced Transport in Viem Client\nDESCRIPTION: Example showing how to create a Viem public client with load balanced transport across multiple RPC endpoints using the loadBalance utility\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/transports.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadBalance } from \"@ponder/utils\";\nimport { createPublicClient, fallback, http, webSocket } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: loadBalance([\n    http(\"https://cloudflare-eth.com\"),\n    http(\"https://eth-mainnet.public.blastapi.io\"),\n    webSocket(\"wss://ethereum-rpc.publicnode.com\"),\n    rateLimit(http(\"https://rpc.ankr.com/eth\"), { requestsPerSecond: 5 }),\n  ]),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Schema in Ponder Config (TypeScript)\nDESCRIPTION: This configuration uses an environment variable (POD_NAME) to set a dynamic schema name for the database. This approach helps avoid conflicts during zero-downtime deployments when multiple instances share the same database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/production/deploy.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\n\nexport default createConfig({\n  database: {\n    kind: \"postgres\",\n    connectionString: process.env.DATABASE_URL,\n    schema: process.env.POD_NAME,\n  },\n  // ... more config\n});\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Query in SQLite\nDESCRIPTION: A simple query to retrieve the first three rows from the TransferEvent table.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM TransferEvent LIMIT 3;\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limited Transport in Ponder Configuration\nDESCRIPTION: This snippet demonstrates the use of the rateLimit transport in a Ponder configuration file. It shows how to apply rate limiting to an RPC endpoint specified by an environment variable, with a limit of 25 requests per second.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/transports.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, rateLimit } from \"ponder\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: rateLimit(http(process.env.PONDER_RPC_URL_1), {\n        requestsPerSecond: 25,\n      }),\n    },\n  },\n  contracts: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Backward Pagination in Ponder\nDESCRIPTION: Shows how to implement backward pagination using cursor-based pagination in Ponder. Uses the startCursor from the previous page to fetch the previous page.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst pageThree = await Player.findMany({\n  orderBy: { age: \"asc\" },\n  before: pageTwo.pageInfo.startCursor,\n  limit: 1,\n});\n// {\n//   items: [ { id: \"Polly\", age: 29 } ],\n//   pageInfo: {\n//     startCursor: \"Mxhc3NDb3JlLTA=\",\n//     endCursor: \"Mxhc3NDb3JlLTA=\",\n//     hasPreviousPage: true,\n//     hasNextPage: true,\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Main CLI Usage and Options\nDESCRIPTION: Overview of the main Ponder CLI commands and global options including root path configuration, logging levels, and version information.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder <command> [OPTIONS]\n\nOptions:\n  --root <PATH>          Path to the project root directory (default: working directory)\n  --config <PATH>        Path to the project config file (default: \"ponder.config.ts\")\n  -v, --debug            Enable debug logs, e.g. realtime blocks, internal events\n  -vv, --trace           Enable trace logs, e.g. db queries, indexing checkpoints\n  --log-level <LEVEL>    Minimum log level (\"error\", \"warn\", \"info\", \"debug\", or \"trace\", default: \"info\")\n  --log-format <FORMAT>  The log format (\"pretty\" or \"json\") (default: \"pretty\")\n  -V, --version          Show the version number\n  -h, --help             Show this help message\n\nCommands:\n  dev [options]          Start the development server with hot reloading\n  start [options]        Start the production server\n  serve [options]        Start the production HTTP server without the indexer\n  db                     Database management commands\n  codegen                Generate the ponder-env.d.ts file, then exit\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Select Query\nDESCRIPTION: Example of a simple SELECT query to retrieve rows from the accounts table with a limit.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/direct-sql.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM accounts LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Using DatabaseConfig Type in TypeScript for Ponder Database Configuration\nDESCRIPTION: Demonstrates how to use DatabaseConfig type for defining database configurations in Ponder's createConfig function.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/types.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, type DatabaseConfig } from \"ponder\";\n\nconst database = {\n  kind: \"postgres\",\n  connectionString: process.env.DATABASE_URL,\n} as const satisfies DatabaseConfig;\n\nexport default createConfig({\n  networks: ...,\n  contracts: ...,\n  database,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Accounts in Ponder\nDESCRIPTION: Example showing how to configure accounts for transaction indexing in Ponder. Demonstrates setting up an account with network, address and start block specifications.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\n\nexport default createConfig({\n  // ... more config\n  accounts: {\n    coinbasePrime: {\n      network: \"mainnet\",\n      address: \"0xCD531Ae9EFCCE479654c4926dec5F6209531Ca7b\",\n      startBlock: 12111233,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Load Balanced Viem Transport in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Viem public client with a load balanced transport using multiple HTTP and WebSocket endpoints. It also includes a rate-limited transport within the load balancing array.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/transports.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadBalance } from \"@ponder/utils\";\nimport { createPublicClient, fallback, http, webSocket } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: loadBalance([\n    http(\"https://cloudflare-eth.com\"),\n    http(\"https://eth-mainnet.public.blastapi.io\"),\n    webSocket(\"wss://ethereum-rpc.publicnode.com\"),\n    rateLimit(http(\"https://rpc.ankr.com/eth\"), { requestsPerSecond: 5 }),\n  ]),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Interval in Ponder Config (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up a block interval named 'ChainlinkOracleUpdate' in the Ponder configuration file. It specifies the network, start block, and interval for indexing.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/block-intervals.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: { chainId: 1, transport: http(process.env.PONDER_RPC_URL_1) },\n  },\n  blocks: {\n    ChainlinkOracleUpdate: {\n      network: \"mainnet\",\n      startBlock: 19783636,\n      interval: 60 / 12, // Every 60 seconds\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Database Schema and Access in Ponder\nDESCRIPTION: Example showing how to define a database schema in Ponder and access the generated models within indexing functions. Demonstrates the relationship between schema definition and typed database models.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Person: p.createTable({\n    id: p.string(),\n    age: p.int().optional(),\n  }),\n  Dog: p.createTable({\n    id: p.bigint(),\n    ownerId: p.string().references(\"Person.id\"),\n  }),\n}));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"UniswapV3Factory:Ownership\", async ({ event, context }) => {\n  const { Person } = context.db;\n  //      ^? Model<{ id: string; age?: number }>;\n  const { Dog } = context.db;\n  //      ^? Model<{ id: bigint; ownerId: string; }>;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Broadcast Files in Ponder Configuration\nDESCRIPTION: This snippet demonstrates how to import Foundry broadcast files into Ponder's configuration. It extracts the contract address and start block from the deployment transaction, enabling automated address management and hot reloading.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/foundry.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\nimport { http, getAddress, hexToNumber } from \"viem\";\nimport { counterABI } from \"../abis/CounterAbi\";\nimport CounterDeploy from \"../foundry/broadcast/Deploy.s.sol/31337/run-latest.json\";\n\nconst address = getAddress(CounterDeploy.transactions[0]!.contractAddress);\nconst startBlock = hexToNumber(CounterDeploy.receipts[0]!.blockNumber);\n\nexport default createConfig({\n  networks: {\n    anvil: {\n      chainId: 31337,\n      transport: http(\"http://127.0.0.1:8545\"),\n      disableCache: true,\n    },\n  },\n  contracts: {\n    Counter: {\n      network: \"anvil\",\n      abi: counterABI,\n      address,\n      startBlock,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response for Indexing Status in JSON\nDESCRIPTION: This snippet shows the JSON response structure for the GraphQL indexing status query. It includes the status for multiple networks (mainnet and base) with their respective block numbers, timestamps, and ready states.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/status.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_meta\": {\n    \"status\": {\n      \"mainnet\": {\n        \"ready\": true,\n        \"block\": {\n          \"number\": 20293464,\n          \"timestamp\": 1720823939\n        }\n      },\n      \"base\": {\n        \"ready\": false,\n        \"block\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlockConfig Type for Block Sources in TypeScript\nDESCRIPTION: Shows how to use the BlockConfig utility type to define block sources with proper type checking, including network, startBlock, and interval properties.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/types.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createconfig, type blockconfig } from \"@ponder/core\";\n\nconst ChainlinkPriceOracle = {\n  network: \"mainnet\",\n  startBlock: 19_750_000,\n  interval: 5,\n} as const satisfies BlockConfig;\n\nexport default createConfig({\n  networks: ...,\n  blocks: {\n    ChainlinkPriceOracle,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Ponder Schema for Player Table\nDESCRIPTION: Defines a schema for a Player table with id and age fields using Ponder's createSchema function.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Player: p.createTable({\n    id: p.string(),\n    age: p.int(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limited Transport in Ponder Config\nDESCRIPTION: Configuration example for setting up rate-limited transport in a Ponder application's config file using an environment variable for the RPC URL\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/transports.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, rateLimit } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: rateLimit(http(process.env.PONDER_RPC_URL_1), {\n        requestsPerSecond: 25,\n      }),\n    },\n  },\n  contracts: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Contracts in Ponder (TypeScript)\nDESCRIPTION: This snippet shows how to configure contracts in Ponder's configuration file. It defines the AaveToken contract with its network, ABI, address, and start block.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/read-contract-data.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\n\nimport { AaveTokenAbi } from \"./abis/AaveToken\";\n\nexport default createConfig({\n  contracts: {\n    AaveToken: {\n      network: \"mainnet\",\n      abi: AaveTokenAbi,\n      address: \"0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9\",\n      startBlock: 10926829,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Records by Primary Key in Ponder\nDESCRIPTION: This snippet demonstrates how to find a single row by its primary key using the db.find method, which returns the row or null if no matching row is found.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accounts } from \"ponder:schema\";\n\nconst row = await db.find(accounts, { address: \"0x7Df1\" });\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Data from Multiple Networks\nDESCRIPTION: This snippet demonstrates how to read contract data in a Ponder indexing function when contracts are configured for multiple networks.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/read-contract-data.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"UniswapV3Factory:FeeAmountEnabled\", async ({ event, context }) => {\n  const tickSpacing = await context.client.readContract({\n    abi: context.contracts.UniswapV3Factory.abi,\n    address: context.contracts.UniswapV3Factory.address,\n    functionName: \"feeAmountTickSpacing\",\n    args: [event.args.fee],\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Range with Start and End Blocks\nDESCRIPTION: Configuration example showing how to set specific start and end blocks for a block interval. This is useful for indexing a specific slice of history or for faster feedback loops during development.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/block-intervals.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: { chainId: 1, transport: http(process.env.PONDER_RPC_URL_1) },\n  },\n  blocks: {\n    ChainlinkOracleUpdate: {\n      network: \"mainnet\",\n      interval: 60 / 12, // Every 60 seconds\n      startBlock: 19600000,\n      endBlock: 19700000,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Players in Ponder\nDESCRIPTION: Shows how to update multiple Player records in a single operation using the updateMany method in Ponder. Updates the age of players whose id starts with 'J'.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait Player.createMany({\n  data: [\n    { id: \"Jim\", age: 34 },\n    { id: \"Andrew\", age: 19 },\n    { id: \"Janet\", age: 56 },\n  ],\n});\n\nawait Player.updateMany({\n  where: {\n    id: {\n      startsWith: \"J\",\n    },\n  },\n  data: {\n    age: 50,\n  },\n});\n\nconst players = await Player.findMany();\n// [\n//   { id: \"Jim\", age: 50 },\n//   { id: \"Andrew\", age: 19 },\n//   { id: \"Janet\", age: 50 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Querying Time-based Swap Events\nDESCRIPTION: GraphQL query example for filtering and sorting swap events by timestamp within a specific time range.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/time-series.mdx#2025-04-23_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  SwapEvent(\n    orderBy: { timestamp: \"desc\" }\n    where: { timestamp_gt: 1712500000, timestamp_lt: 1713000000 }\n  ) {\n    items {\n      id\n      from\n      to\n      amount\n      timestamp\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Ponder Config (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up the database connection string in the Ponder configuration file. It overrides the default connection string with a custom one for production use.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/production/deploy.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\n\nexport default createConfig({\n  database: {\n    kind: \"postgres\",\n    connectionString: \"postgres://user:password@mycloud.internal:5432/database\",\n  },\n  // ... more config\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Anvil Network in Ponder\nDESCRIPTION: This snippet demonstrates how to configure the Anvil network in Ponder's configuration file. It disables caching for the local network and sets the chain ID to 31337.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/foundry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    anvil: {\n      chainId: 31337,\n      transport: http(\"http://127.0.0.1:8545\"),\n      disableCache: true,\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Network Block Intervals in Ponder (TypeScript)\nDESCRIPTION: This configuration snippet shows how to set up block intervals for multiple networks (Ethereum mainnet and Optimism) with network-specific options like start block and interval.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/block-intervals.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: { chainId: 1, transport: http(process.env.PONDER_RPC_URL_1) },\n    optimism: { chainId: 10, transport: http(process.env.PONDER_RPC_URL_10) },\n  },\n  blocks: {\n    ChainlinkOracleUpdate: {\n      network: {\n        mainnet: {\n          startBlock: 19783636,\n          interval: (60 * 60) / 12, // Every 60 minutes\n        },\n        optimism: {\n          startBlock: 119534316,\n          interval: (60 * 60) / 2, // Every 60 minutes\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance and Approvals in GraphQL\nDESCRIPTION: This GraphQL query retrieves the current balance and all approvals for a specific account. It demonstrates how to query nested data structures in the API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc4626/README.md#2025-04-23_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  account(id: \"0x1337f7970E8399ccbc625647FCE58a9dADA5aA66\") {\n    balance\n    approvals {\n      spender\n      amount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enums in Ponder Schema\nDESCRIPTION: Shows how to create and use custom enums in Ponder schema. The example defines a 'color' enum and uses it as a column type in the 'cats' table with the notNull modifier.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/schema.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainEnum, onchainTable } from \"ponder\";\n\nexport const color = onchainEnum(\"color\", [\"ORANGE\", \"BLACK\"]);\n\nexport const cats = onchainTable(\"cats\", (t) => ({\n  name: t.text().primaryKey(),\n  color: color().notNull(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Using onConflictDoNothing for Conflict Resolution in Ponder\nDESCRIPTION: This example demonstrates how to use onConflictDoNothing to skip insertion when a row with the same primary key already exists, avoiding primary key constraint violations.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accounts } from \"ponder:schema\";\n\nconst row = await db\n  .insert(accounts)\n  .values({ address: \"0x7Df1\", balance: 0n })\n  .onConflictDoNothing();\n```\n\n----------------------------------------\n\nTITLE: Querying Token Contract Owner in GraphQL\nDESCRIPTION: This query retrieves the current owner of the token contract. It demonstrates how to use boolean filters in the API to find specific accounts.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc4626/README.md#2025-04-23_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  accounts(where: { isOwner: true }) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database in ponder.config.ts\nDESCRIPTION: Example of SQLite database configuration in ponder.config.ts, showing how to specify the database kind and directory path for SQLite database files.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/config.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\n\nexport default createConfig({\n  database: {\n    kind: \"sqlite\",\n    directory: \"./.ponder/sqlite2\",\n  },\n  // ... more config\n});\n```\n\n----------------------------------------\n\nTITLE: Generating ABI Files with Wagmi CLI\nDESCRIPTION: This code snippet shows the configuration for Wagmi CLI to generate ABI files from Foundry contracts. It uses the Foundry plugin to include the Counter.sol contract.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/foundry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@wagmi/cli\";\nimport { foundry } from \"@wagmi/cli/plugins\";\n\nexport default defineConfig({\n  out: \"abis/CounterAbi.ts\",\n  plugins: [\n    foundry({\n      project: \"foundry\",\n      include: [\"Counter.sol/**\"],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Indexing Status via GraphQL\nDESCRIPTION: This snippet demonstrates how to query the indexing status using GraphQL. It shows the query structure to fetch the status information from the _meta field.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/status.mdx#2025-04-23_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  _meta {\n    status\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wagmi CLI Configuration for Foundry\nDESCRIPTION: Configuration file for Wagmi CLI to automate ABI file management from Foundry contracts.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/foundry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@wagmi/cli\";\nimport { foundry } from \"@wagmi/cli/plugins\";\n\nexport default defineConfig({\n  out: \"abis/CounterAbi.ts\",\n  plugins: [\n    foundry({\n      project: \"foundry\",\n      include: [\"Counter.sol/**\"],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Updates with Ponder Client\nDESCRIPTION: Demonstrates how to subscribe to live updates using server-sent events (SSE) with error handling.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/client.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@ponder/client\";\nimport * as schema from \"../../ponder/ponder.schema\";\n\nconst client = createClient(\"https://.../sql\", { schema });\n\nconst { unsubscribe } = client.live(\n  (db) => db.select().from(schema.account),\n  (result) => {\n    // ...\n  },\n  (error) => {\n    // ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced Ponder Configuration with Top-Level Await\nDESCRIPTION: This advanced example shows how to use top-level await in a Ponder configuration. It fetches the start block asynchronously before configuring the contract.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/config.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\n\nconst startBlock = await fetch(\"http://...\");\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: http(process.env.PONDER_RPC_URL_1),\n    },\n  },\n  contracts: {\n    ArtGobblers: {\n      network: \"mainnet\",\n      abi: \"./abis/ArtGobblers.json\",\n      address: \"0x60bb1e2aa1c9acafb4d34f71585d7e959f387769\",\n      startBlock,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Update Constraint Violations in Ponder\nDESCRIPTION: This example demonstrates how an update operation rejects with an error when the new row violates a not null constraint.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tokens } from \"ponder:schema\";\n\nconst row = await db\n  .update(accounts, { address: \"0x7Df1\" })\n  .set({ balance: null });\n\n// Error: Column \"balance\" is required but not present in the object.\n```\n\n----------------------------------------\n\nTITLE: Querying Token Contract Owner in GraphQL\nDESCRIPTION: Retrieves the current owner of the token contract using a boolean filter condition.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc20/README.md#2025-04-23_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  accounts(where: { isOwner: true }) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Ponder Indexing Status via GraphQL\nDESCRIPTION: Shows how to check indexing status through the GraphQL API using the _meta field, which returns status information for each configured network in the Ponder application.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/status.mdx#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  _meta {\n    status\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_meta\": {\n    \"status\": {\n      \"mainnet\": {\n        \"ready\": true,\n        \"block\": {\n          \"number\": 20293464,\n          \"timestamp\": 1720823939\n        }\n      },\n      \"base\": {\n        \"ready\": false,\n        \"block\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pretty Log Format Output Example in Bash\nDESCRIPTION: Shows an example of the pretty log format output, displaying timestamps, log levels, service names, and log messages in a human-readable format.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/logging.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n11:54:36 AM INFO  build      Using PGlite database at .ponder/pglite (default)\n11:54:36 AM INFO  database   Created table 'Account' in 'public.db'\n11:54:36 AM INFO  server     Started listening on port 42069\n11:54:36 AM INFO  historical Started syncing 'optimism' logs for 'weth9' with 0.0% cached\n11:54:36 AM INFO  historical Started syncing 'base' logs for 'weth9' with 0.0% cached\n11:54:36 AM INFO  historical Started syncing 'polygon' logs for 'weth9' with 0.0% cached\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema from Ponder Schema\nDESCRIPTION: The GraphQL schema automatically generated by Ponder based on the Person table definition. It includes singular and plural query fields with filtering and pagination options.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person {\n  id: Int!\n  name: String!\n  age: Int\n}\n\ntype PersonPage {\n  items: [Person!]!\n  pageInfo: PageInfo!\n}\n\ntype Query {\n  person(id: Int!, timestamp: Int): Person\n  persons(\n    where: PetFilter, \n    orderBy: String,\n    orderDirection: String,\n    before: String,\n    after: String,\n    limit: Int,\n    timestamp: Int,\n  ): PersonPage!\n}\n```\n\n----------------------------------------\n\nTITLE: Ponder Configuration with Broadcast File Integration\nDESCRIPTION: Complete Ponder configuration showcasing broadcast file integration for contract deployment information and hot reload capabilities.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/foundry.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http, getAddress, hexToNumber } from \"viem\";\nimport { counterABI } from \"../abis/CounterAbi\";\nimport CounterDeploy from \"../foundry/broadcast/Deploy.s.sol/31337/run-latest.json\";\n\nconst address = getAddress(CounterDeploy.transactions[0]!.contractAddress);\nconst startBlock = hexToNumber(CounterDeploy.receipts[0]!.blockNumber);\n\nexport default createConfig({\n  networks: {\n    anvil: {\n      chainId: 31337,\n      transport: http(\"http://127.0.0.1:8545\"),\n      disableCache: true,\n    },\n  },\n  contracts: {\n    Counter: {\n      network: \"anvil\",\n      abi: counterABI,\n      address,\n      startBlock,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using IndexingFunctionArgs Type in TypeScript for Ponder Indexing Functions\nDESCRIPTION: Demonstrates the use of IndexingFunctionArgs generic type to get the indexing function argument type for a specific event or all events.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/types.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type IndexingFunctionArgs } from \"ponder:registry\";\n\nfunction helper(args: IndexingFunctionArgs<\"Weth:Deposit\">) {\n  args;\n  // ^? {\n  //      event: { ... };\n  //      context: { ... };\n  //    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Records with Composite Primary Keys in Ponder\nDESCRIPTION: This example shows how to use db.find with tables that have composite primary keys by providing all primary key values in an object.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allowances } from \"ponder:schema\";\n\nconst row = await db.find(allowances, { owner: \"0x7Df1\", spender: \"0x7Df2\" });\n```\n\n----------------------------------------\n\nTITLE: Ponder Configuration with Top-Level Await\nDESCRIPTION: Example showing how to use top-level await in Ponder configuration for dynamic value fetching.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\n\nimport { ArtGobblersAbi } from \"./abis/ArtGobblers\";\n\nconst startBlock = await fetch(\"http://...\");\n\nexport default createConfig({\n  networks: {\n    mainnet: {\n      chainId: 1,\n      transport: http(process.env.PONDER_RPC_URL_1),\n    },\n  },\n  contracts: {\n    ArtGobblers: {\n      network: \"mainnet\",\n      abi: ArtGobblersAbi,\n      address: \"0x60bb1e2aa1c9acafb4d34f71585d7e959f387769\",\n      startBlock,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Response for Indexing Status in JSON\nDESCRIPTION: This snippet shows the JSON response structure for the indexing status HTTP request. It includes the status for multiple networks (mainnet and base) with their respective block numbers and timestamps.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/status.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mainnet\": {\n    \"ready\": true,\n    \"block\": {\n      \"number\": 20293450,\n      \"timestamp\": 1720823759\n    }\n  },\n  \"base\": {\n    \"ready\": true,\n    \"block\": {\n      \"number\": 17017206,\n      \"timestamp\": 1720823759\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Ponder using Environment Variable\nDESCRIPTION: This code snippet shows how to opt out of Ponder's telemetry by setting the PONDER_TELEMETRY_DISABLED environment variable to true in a .env.local file.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/telemetry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPONDER_TELEMETRY_DISABLED = true\n```\n\n----------------------------------------\n\nTITLE: Using Event Utility Type with Union of All Events in TypeScript\nDESCRIPTION: Demonstrates using the Event utility type without specifying an event name, which returns a union of all event types. Useful when working with common properties like block, transaction, and log.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/types.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type Event } from \"@/generated\";\n\nfunction helper(event: Event) {\n  event;\n  // ^? { args: { dst: `0x${string}`; wad: bigint }; block: Block; event: \"Deposit\"; transaction: Transaction; log: Log; }\n  //    | { args: { src: `0x${string}`; wad: bigint }; block: Block; event: \"Withdraw\"; transaction: Transaction; log: Log; }\n  //    ...\n}\n```\n\n----------------------------------------\n\nTITLE: BigInt Serialization in HTTP API Responses\nDESCRIPTION: Example showing how to handle BigInt serialization manually in Ponder API functions when returning HTTP responses by converting BigInt values to hexadecimal strings.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/replace-bigints.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\nimport { accounts } from \"ponder:schema\";\nimport { replaceBigInts } from \"@ponder/utils\";\nimport { numberToHex } from \"viem\";\n\nponder.get(\"/whale-balances\", async (c) => {\n  const rows = await c.db\n    .select({\n      address: accounts.address,\n      ethBalance: accounts.ethBalance,\n      dogeBalance: accounts.dogeBalance,\n    })\n    .from(accounts)\n    .where(eq(accounts.address, address));\n\n  const result = replaceBigInts(rows, (v) => numberToHex(v));\n\n  return c.json(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting ABI as Const in TypeScript\nDESCRIPTION: This code snippet demonstrates how to assert an ABI (Application Binary Interface) as a constant in TypeScript. This is a requirement for using ABIs with Ponder and follows ABIType guidelines.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas const\n```\n\n----------------------------------------\n\nTITLE: Updating Records by Primary Key in Ponder\nDESCRIPTION: This snippet demonstrates how to update a row by its primary key using the db.update method, which returns the updated row.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accounts } from \"ponder:schema\";\n\nconst row = await db\n  .update(accounts, { address: \"0x7Df1\" })\n  .set({ balance: 100n });\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Deployment for Ponder (YAML)\nDESCRIPTION: This YAML configuration sets up a Kubernetes deployment for a Ponder app. It includes environment variable setup to pass the pod name, which can be used for schema naming in the Ponder config.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/production/deploy.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ponder-deployment\nspec:\n  selector:\n    matchLabels:\n      app: ponder\n  template:\n    metadata:\n      labels:\n        app: ponder\n    spec:\n      containers:\n        - name: ponder\n          # ...\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example with Cursor Pagination\nDESCRIPTION: This GraphQL query demonstrates the new cursor pagination feature, retrieving persons data ordered by age in ascending order with a limit of 2 records per page.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/blog/0.2.0.mdx#2025-04-23_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  persons(orderBy: \"age\", orderDirection: \"asc\", limit: 2) {\n    items {\n      name\n      age\n    }\n    pageInfo {\n      startCursor\n      endCursor\n      hasPreviousPage\n      hasNextPage\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ContractConfig Type in TypeScript for Ponder Contract Configuration\nDESCRIPTION: Demonstrates the usage of ContractConfig type for defining contract configurations in Ponder's createConfig function.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/types.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, type ContractConfig } from \"ponder\";\nimport { Erc20Abi } from \"./abis/Erc20Abi.ts\";\n\nconst Erc20 = {\n  network: \"mainnet\"\n  abi: Erc20Abi,\n  address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n} as const satisfies ContractConfig;\n\nexport default createConfig({\n  networks: ...,\n  contracts: {\n    Erc20,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Enum Arrays with Default Values in Ponder\nDESCRIPTION: Demonstrates how to use enum columns with additional modifiers like .array() and .default() to create an array of enum values with a default empty array.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/schema.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nexport const dogs = onchainTable(\"cats\", (t) => ({\n  name: t.text().primaryKey(),\n  color: color().array().default([]),\n}));\n```\n\n----------------------------------------\n\nTITLE: Sorting Player Data in Ponder\nDESCRIPTION: Shows how to sort Player data using the orderBy option in Ponder. Sorts players by age in ascending order.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait Player.createMany({\n  data: [\n    { id: \"Jim\", age: 34 },\n    { id: \"Andrew\", age: 19 },\n    { id: \"Janet\", age: 56 },\n  ],\n});\n\nconst { items } = await Player.findMany({\n  orderBy: {\n    age: \"asc\",\n  },\n});\n// [\n//   { id: \"Andrew\", age: 19 },\n//   { id: \"Jim\", age: 34 },\n//   { id: \"Janet\", age: 56 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Adding RPC URL to Ponder Environment\nDESCRIPTION: Example of adding an RPC URL for Ethereum Mainnet to the Ponder environment file.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/migrate-subgraph.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nPONDER_RPC_URL_1 = \"https://eth-mainnet.g.alchemy.com/v2/...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PGlite Database in Ponder\nDESCRIPTION: Example configuration for using PGlite as the database in Ponder, showing directory specification.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/config.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\n\nexport default createConfig({\n  database: {\n    kind: \"pglite\",\n    directory: \"./.ponder/pglite\",\n  },\n  // ... more config\n});\n```\n\n----------------------------------------\n\nTITLE: Querying the GraphQL API for BlitmapTokens\nDESCRIPTION: Example GraphQL query to fetch all BlitmapTokens with their IDs and owners. This query can be executed in the GraphiQL interface at http://localhost:42069/graphql.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  blitmapTokens {\n    id\n    owner\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with Greater Than Condition\nDESCRIPTION: GraphQL query that filters Person records where age is greater than 32, demonstrating the _gt filter operator.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  persons(where: { age_gt: 32 }) {\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlockConfig Type in TypeScript for Ponder Block Source Configuration\nDESCRIPTION: Illustrates the usage of BlockConfig type for defining block source configurations in Ponder's createConfig function.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/types.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createconfig, type blockconfig } from \"ponder\";\n\nconst ChainlinkPriceOracle = {\n  network: \"mainnet\",\n  startBlock: 19_750_000,\n  interval: 5,\n} as const satisfies BlockConfig;\n\nexport default createConfig({\n  networks: ...,\n  blocks: {\n    ChainlinkPriceOracle,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a new Ponder project with npm\nDESCRIPTION: Command to create a new Ponder project using npm package manager.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm create ponder@latest\n```\n\n----------------------------------------\n\nTITLE: Filtering Player Data in Ponder\nDESCRIPTION: Demonstrates how to filter Player data using the where clause in Ponder. It shows filtering by id starting with 'J'.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait Player.createMany({\n  data: [\n    { id: \"Jim\", age: 34 },\n    { id: \"Andrew\", age: 19 },\n    { id: \"Janet\", age: 56 },\n  ],\n});\n\nconst { items } = await Player.findMany();\n// [\n//   { id: \"Jim\", age: 34 },\n//   { id: \"Andrew\", age: 19 },\n//   { id: \"Janet\", age: 56 }\n// ]\n\nconst { items } = await Player.findMany({\n  where: {\n    id: {\n      startsWith: \"J\",\n    },\n  },\n});\n// [\n//   { id: \"Jim\", age: 34 },\n//   { id: \"Janet\", age: 56 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Ponder Development Server Command\nDESCRIPTION: Command options for starting the development server with hot reloading functionality and configurable port/hostname settings\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder dev [options]\n\nStart the development server with hot reloading\n\nOptions:\n  -p, --port <PORT>          Port for the web server (default: 42069)\n  -H, --hostname <HOSTNAME>  Hostname for the web server (default: \"0.0.0.0\" or \"::\")\n  -h, --help                 display help for command\n```\n\n----------------------------------------\n\nTITLE: Implementing Ponder Indexing Functions\nDESCRIPTION: Example of an indexing function that processes contract events and inserts data into the entity store.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/eslint-config-ponder/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/BaseRegistrar.ts\n\nimport { ponder } from \"ponder:registry\";\nimport schema from \"ponder:schema\";\n\nponder.on(\"BaseRegistrar:NameRegistered\", async ({ event, context }) => {\n  const { name, owner } = event.params;\n\n  await context.db.insert(schema.ensName).values({\n    name: name,\n    owner: owner,\n    registeredAt: event.block.timestamp,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC URL in Environment Variables\nDESCRIPTION: Example of setting up an RPC URL for Ethereum Mainnet in the .env.local file. The naming convention follows PONDER_RPC_URL postfixed with the chain ID.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/migrate-subgraph.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nPONDER_RPC_URL_1 = \"https://eth-mainnet.g.alchemy.com/v2/...\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ponder Project with pnpm\nDESCRIPTION: Command to create a new Ponder project using pnpm. This initializes a project directory, installs dependencies, and sets up a git repository.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create ponder\n```\n\n----------------------------------------\n\nTITLE: Database Schema Definition in Ponder\nDESCRIPTION: Defines a schema for an Account table with id and balance fields. This schema is used in API functions to query the database with type safety.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Account: p.createTable({\n    id: p.string(),\n    balance: p.bigint(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Schema Definition with ReplaceBigInts Helper Type\nDESCRIPTION: Demonstrates how to maintain type safety for BigInt conversions using the ReplaceBigInts helper type in Ponder schema definitions.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/replace-bigints.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainTable } from \"ponder\";\nimport type { ReplaceBigInts } from \"@ponder/utils\";\nimport type { TransactionReceipt, Hex } from \"viem\";\n\nexport const userOperations = onchainTable(\"user_operations\", (t) => ({\n  id: t.text().primaryKey(),\n  receipt: t.json().$type<ReplaceBigInts<TransactionReceipt, Hex>>(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder development server with yarn\nDESCRIPTION: Command to start the Ponder development server using yarn. The server automatically reloads when project files are changed.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Example Ponder Schema Definition\nDESCRIPTION: A sample schema definition for a Ponder project that defines Account and TransferEvent tables with relationships between them.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Account: p.createTable({\n    id: p.hex(),\n    balance: p.bigint(),\n    isOwner: p.boolean(),\n  }),\n  TransferEvent: p.createTable({\n    id: p.string(),\n    amount: p.bigint(),\n    timestamp: p.int(),\n    fromId: p.hex().references(\"Account.id\"),\n    toId: p.hex().references(\"Account.id\"),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Ponder CLI Main Usage Command Structure\nDESCRIPTION: Main command structure showing global options including root path configuration, logging levels, and version display\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder <command> [OPTIONS]\n\nOptions:\n  --root <PATH>          Path to the project root directory (default: working directory)\n  --config <PATH>        Path to the project config file (default: \"ponder.config.ts\")\n  -v, --debug            Enable debug logs, e.g. realtime blocks, internal events\n  -vv, --trace           Enable trace logs, e.g. db queries, indexing checkpoints\n  --log-level <LEVEL>    Minimum log level (\"error\", \"warn\", \"info\", \"debug\", or \"trace\") (default: \"info\")\n  --log-format <FORMAT>  The log format (\"pretty\" or \"json\") (default: \"pretty\")\n  -V, --version          Show the version number\n  -h, --help             Show this help message\n\nCommands:\n  dev [options]          Start the development server with hot reloading\n  start [options]        Start the production server\n  serve [options]        Start the production HTTP server without the indexer\n  codegen                Generate the schema.graphql file, then exit\n```\n\n----------------------------------------\n\nTITLE: Setting Database Schema Environment Variables\nDESCRIPTION: These examples show two ways to specify the database schema for a Ponder application: using an environment variable in a .env.local file or passing it as a command-line argument when starting the application.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/database.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_SCHEMA=my_schema\n```\n\nLANGUAGE: bash\nCODE:\n```\nponder start --schema my_schema\n```\n\n----------------------------------------\n\nTITLE: Creating a New Ponder Project with yarn\nDESCRIPTION: Command to create a new Ponder project using yarn. This initializes a project directory, installs dependencies, and sets up a git repository.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create ponder\n```\n\n----------------------------------------\n\nTITLE: Player Schema in Ponder - TypeScript\nDESCRIPTION: Defines a simple Player schema with id and age fields for demonstrating basic CRUD operations.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Player: p.createTable({\n    id: p.string(),\n    age: p.int(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Converting BigInt Values to Strings with replaceBigInts in TypeScript\nDESCRIPTION: This example demonstrates how to use the replaceBigInts function to convert BigInt values to strings in a nested object structure.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/replace-bigints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { replaceBigInts } from \"@ponder/utils\";\n\nconst obj = { a: 100n, b: [-12n, 3_000_000_000n] };\n\nconst result = replaceBigInts(obj, (v) => String(v));\n//    ?^ { a: '100', b: [ '-12', '3000000000' ] }\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder development server with npm\nDESCRIPTION: Command to start the Ponder development server using npm. The server automatically reloads when project files are changed.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Factory Contract Children\nDESCRIPTION: This snippet shows how to read data from contracts created by a factory contract in Ponder.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/read-contract-data.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"SudoswapPool:Transfer\", async ({ event, context }) => {\n  const { SudoswapPool } = context.contracts;\n  //      ^? { abi: [...] }\n\n  const totalSupply = await context.client.readContract({\n    abi: SudoswapPool.abi,\n    address: event.log.address,\n    functionName: \"totalSupply\",\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sample response from Ponder GraphQL API\nDESCRIPTION: Example JSON response from the Ponder-generated GraphQL API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/core/README.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ensNames\": {\n    \"items\": [\n      {\n        \"name\": \"vitalik.eth\",\n        \"owner\": \"0x0904Dac3347eA47d208F3Fd67402D039a3b99859\",\n        \"registeredAt\": 1580345271\n      },\n      {\n        \"name\": \"joe.eth\",\n        \"owner\": \"0x6109DD117AA5486605FC85e040ab00163a75c662\",\n        \"registeredAt\": 1580754710\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Transaction Events in Ponder\nDESCRIPTION: Example of registering an indexing function for transactions sent from or to an account. Provides access to transaction data and receipts.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"ponder:registry\";\n\nponder.on(\"AccountName:transaction:from\", async ({ event, context }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Top-Level Call Traces\nDESCRIPTION: Shows how to determine if a call trace is a top-level call by checking the trace address length.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/call-traces.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nponder.on(\"ERC20.transfer()\", async ({ event }) => {\n  const isTopLevelCall = event.trace.traceAddress.length === 0;\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder Development Server with yarn\nDESCRIPTION: Command to start the Ponder development server using yarn. The server automatically reloads when project files are changed and displays console.log statements and errors.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Database Schema Flow Chart using Mermaid\nDESCRIPTION: A flowchart diagram illustrating the decision process for database schema validation and preparation in Ponder. Shows the logic flow for handling schema conflicts, instance types, and build ID validation.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/database.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\nA[Target schema is currently in use?]\n\nC[Target schema previously used?]\nF[Previous instance command?]\nE[Previous build ID same as current?]\n\nV(Drop existing tables)\nW(Recover from existing tables)\nX(Create tables)\nY(Start)\nZ1(Error)\nZ2(Error)\n\n\nV --> X\nW --> Y\nX --> Y\n\nA -- yes --> Z1\nA -- no --> C\n\nC -- yes --> F\nC -- no --> X\n\nF -- ponder start --> E\nF -- ponder dev --> V\n\nE -- no --> Z2\nE -- yes --> W\n\nstyle Y fill:#0a0,color:#fff\nstyle Z1 fill:#f00,color:#fff\nstyle Z2 fill:#f00,color:#fff\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in Ponder Filters\nDESCRIPTION: Demonstrates the use of the OR operator to combine filters in Ponder. Filters players by id ending with 'm' or age greater than 50.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait Player.createMany({\n  data: [\n    { id: \"Jim\", age: 34 },\n    { id: \"Andrew\", age: 19 },\n    { id: \"Janet\", age: 56 },\n  ],\n});\n\nconst { items } = await Player.findMany({\n  where: {\n    OR: [{ id: { endsWith: \"m\" } }, { age: { gt: 50 } }],\n  },\n});\n// [\n//   { id: \"Jim\", age: 34 },\n//   { id: \"Janet\", age: 56 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Starting the Ponder Development Server\nDESCRIPTION: Commands for starting the Ponder development server with different package managers.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/migrate-subgraph.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Ponder for Multiple Networks\nDESCRIPTION: This snippet shows how to configure Ponder to work with contracts on multiple networks.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/read-contract-data.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nimport { UniswapV3FactoryAbi } from \"./abis/UniswapV3Factory\";\n\nexport default createConfig({\n  networks: {\n    mainnet: { chainId: 1, transport: http(process.env.PONDER_RPC_URL_1) },\n    base: { chainId: 8453, transport: http(process.env.PONDER_RPC_URL_8453) },\n  },\n  contracts: {\n    UniswapV3Factory: {\n      abi: UniswapV3FactoryAbi,\n      network: {\n        mainnet: {\n          address: \"0x1F98431c8aD98523631AE4a59f267346ea31F984\",\n          startBlock: 12369621,\n        },\n        base: {\n          address: \"0x33128a8fC17869897dcE68Ed026d694621f6FDfD\",\n          startBlock: 1371680,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Ponder Framework via Package Manager\nDESCRIPTION: Commands to create a new Ponder project using different package managers (npm, pnpm, or yarn).\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/eslint-config-ponder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init ponder@latest\n# or\npnpm create ponder\n# or\nyarn create ponder\n```\n\n----------------------------------------\n\nTITLE: Ponder Configuration with Merged ABIs\nDESCRIPTION: Example showing how to use mergeAbis in a Ponder configuration file to combine multiple contract ABIs for a proxy contract implementation.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/merge-abis.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, mergeAbis } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nimport { ERC1967ProxyAbi } from \"./abis/ERC1967Proxy\";\nimport { NameRegistryAbi } from \"./abis/NameRegistry\";\nimport { NameRegistry2Abi } from \"./abis/NameRegistry2\";\n\nexport default createConfig({\n  networks: {\n    goerli: { chainId: 5, transport: http(process.env.PONDER_RPC_URL_5) },\n  },\n  contracts: {\n    FarcasterNameRegistry: {\n      abi: mergeAbis([ERC1967ProxyAbi, NameRegistryAbi, NameRegistry2Abi]),\n      network: \"goerli\",\n      address: \"0xe3Be01D99bAa8dB9905b33a3cA391238234B79D1\",\n      startBlock: 7648795,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL query result from Ponder API\nDESCRIPTION: Sample JSON response from the GraphQL API showing the results of querying the blitmapTokens table.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"blitmapTokens\": [\n    { \"id\": 1452, \"owner\": \"0xaf3d5...\" },\n    { \"id\": 7164, \"owner\": \"0x9cb3b...\" },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pet Schema Definition for Pagination Example\nDESCRIPTION: Ponder schema definition for a Pet table to demonstrate pagination features, with string ID and name fields.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Pet: p.createTable({\n    id: p.string(),\n    name: p.string(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Handling Update Errors for Missing Records in Ponder\nDESCRIPTION: This snippet shows that an update operation rejects with an error when the target row is not found in the database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tokens } from \"ponder:schema\";\n\nconst row = await db\n  .update(accounts, { address: \"0x7Df1\" })\n  .set({ balance: null });\n\n// Error: No row found for address \"0x7Df1\".\n```\n\n----------------------------------------\n\nTITLE: Complete Ponder Configuration Example\nDESCRIPTION: Shows a complete configuration example including network setup and account configuration with unique naming.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/accounts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: { chainId: 1, transport: http(process.env.PONDER_RPC_URL_1) },\n  },\n  accounts: {\n    BeaverBuild: {\n      network: \"mainnet\",\n      address: \"0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5\",\n      startBlock: 12439123,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Ponder Schema - TypeScript\nDESCRIPTION: Demonstrates schema definition for a Token table with fields for tracking metadata updates.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Token: p.createTable({\n    id: p.int(),\n    mintedBy: p.string(),\n    metadataUpdatedAt: p.int(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Monitoring Services\nDESCRIPTION: Command to launch Prometheus and Grafana monitoring services using Docker Compose. Sets up metrics collection from localhost:42069/metrics and exposes Grafana on port 3000.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/etc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -p ponder-monitoring -f ./etc/docker-monitoring.yml up\n```\n\n----------------------------------------\n\nTITLE: Handling Insert Constraint Violations in Ponder\nDESCRIPTION: This example demonstrates how the insert operation rejects with an error when violating a not null constraint on a required column.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tokens } from \"ponder:schema\";\n\nconst row = await db.insert(accounts).values({\n  address: \"0x7Df1\",\n});\n\n// Error: Column \"balance\" is required but not present in the values object.\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder development server with pnpm\nDESCRIPTION: Command to start the Ponder development server using pnpm. The server automatically reloads when project files are changed.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema with Page and PageInfo Types\nDESCRIPTION: GraphQL schema showing the generated PageInfo and PetPage types used for cursor-based pagination in the Ponder API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ntype PageInfo {\n  startCursor: String\n  endCursor: String\n  hasPreviousPage: Boolean!\n  hasNextPage: Boolean!\n}\n\ntype Pet {\n  id: String!\n  name: String!\n}\n\ntype PetPage {\n  items: [Pet!]!\n  pageInfo: PageInfo!\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Protocol Subgraph Mapping Example\nDESCRIPTION: Example of a mapping function in Graph Protocol subgraph that imports entity models and contract factories, loads entity objects, and calls contract functions.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/migrate-subgraph.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Token, Wallet } from \"../generated/schema\";\nimport { MyNftContract } from \"../generated/MyNftContract/MyNftContract\";\n\nexport function handleTransfer(event) {\n  // Get an entity object\n  const token = Token.load(event.params.id);\n\n  // Bind and call a contract\n  const tokenUri = MyNftContract.bind(\"0x137...01a2\").tokenURI(token.id);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Creating Players in Ponder\nDESCRIPTION: Demonstrates how to create multiple Player records in a single operation using the createMany method in Ponder.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait Player.createMany({\n  data: [\n    { id: \"Jim\", age: 34 },\n    { id: \"Andrew\", age: 19 },\n    { id: \"Janet\", age: 56 },\n  ],\n});\n\nconst players = await Player.findMany();\n// [\n//   { id: \"Jim\", age: 34 },\n//   { id: \"Andrew\", age: 19 },\n//   { id: \"Janet\", age: 56 }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Using p.hex() Column Type in Ponder Schema\nDESCRIPTION: This schema definition demonstrates the new p.hex() column type for efficiently storing hexadecimal data like Ethereum addresses, transaction hashes, and log topics.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/blog/0.2.0.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Account: p.createTable({\n    id: p.hex(), // Address\n    balance: p.bigint(),\n  }),\n  Transaction: p.createTable({\n    id: p.hex(), // Transaction hash\n    blockHash: p.hex(), // Block hash\n    // ...\n  }),\n  Log: p.createTable({\n    id: p.string(),\n    topic0: p.hex(), // Log topic\n    // ...\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Resource Limits\nDESCRIPTION: Configures PostgreSQL session-level resource constraints including work memory and timeout settings to prevent resource exhaustion\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/client.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSET work_mem = '512MB';\nSET statement_timeout = '500ms';\nSET lock_timeout = '500ms';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top 10 Accounts by Balance in GraphQL\nDESCRIPTION: This query fetches the top 10 accounts ordered by their balance in descending order. It showcases how to use pagination and sorting in the API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc4626/README.md#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  accounts(first: 10, orderBy: \"balance\", orderDirection: \"desc\") {\n    id\n    balance\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Forge Script in Shell\nDESCRIPTION: Executes a Forge script to deploy contracts and generate logs. It uses a local fork and a specific private key for deployment.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nforge script script/Deploy.s.sol --broadcast --fork-url http://localhost:8545 --private-key 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Types in TypeScript\nDESCRIPTION: This code snippet shows how to import types from the @/generated module in TypeScript. This module is declared in the ponder-env.d.ts file and contains types derived from ponder.config.ts and ponder.schema.ts.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"@/generated\"{:ts}\n```\n\n----------------------------------------\n\nTITLE: Graph Protocol Subgraph Mapping Example\nDESCRIPTION: Example of a Graph Protocol subgraph mapping file, showing entity and contract imports and usage.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/migrate-subgraph.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Token, Wallet } from \"../generated/schema\";\nimport { MyNftContract } from \"../generated/MyNftContract/MyNftContract\";\n\nexport function handleTransfer(event) {\n  // Get an entity object\n  const token = Token.load(event.params.id);\n\n  // Bind and call a contract\n  const tokenUri = MyNftContract.bind(\"0x137...01a2\").tokenURI(token.id);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database using psql\nDESCRIPTION: Example showing how to connect to a Postgres database using psql command-line tool with a connection string.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/direct-sql.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npsql 'postgresql://username:password@localhost:5432/your_database'\n```\n\n----------------------------------------\n\nTITLE: Using Event Type in TypeScript for Ponder Event Objects\nDESCRIPTION: Shows how to use the Event generic type to get the event object type for a specific event or union of all event types if no event name is provided.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type Event } from \"ponder:registry\";\n\nfunction helper(event: Event<\"Weth:Deposit\">) {\n  event;\n  // ^? {\n  //      args: { dst: `0x${string}`; wad: bigint };\n  //      block: Block;\n  //      event: \"Deposit\";\n  //      transaction: Transaction;\n  //      log: Log;\n  //    }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type Event } from \"ponder:registry\";\n\nfunction helper(event: Event) {\n  event;\n  // ^? { args: { dst: `0x${string}`; wad: bigint }; block: Block; event: \"Deposit\"; transaction: Transaction; log: Log; }\n  //    | { args: { src: `0x${string}`; wad: bigint }; block: Block; event: \"Withdraw\"; transaction: Transaction; log: Log; }\n  //    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ABIs with Wagmi in Shell\nDESCRIPTION: Uses the Wagmi CLI to generate ABIs (Application Binary Interfaces) for the smart contracts. This is necessary for frontend integration.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm wagmi generate\n```\n\n----------------------------------------\n\nTITLE: Ponder Production Server Command\nDESCRIPTION: Command options for starting the production server with fixed configuration and no hot reloading\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder start [options]\n\nStart the production server\n\nOptions:\n  -p, --port <PORT>          Port for the web server (default: 42069)\n  -H, --hostname <HOSTNAME>  Hostname for the web server (default: \"0.0.0.0\" or \"::\")\n  -h, --help                 display help for command\n```\n\n----------------------------------------\n\nTITLE: Creating a new Ponder project with yarn\nDESCRIPTION: Command to create a new Ponder project using yarn package manager.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create ponder\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in Custom Postgres Schema\nDESCRIPTION: PostgreSQL command to display tables in a schema other than 'public'.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\\dt another_schema.*\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC URL in Environment Variables\nDESCRIPTION: Example of adding an Ethereum RPC URL to the .env.local file. Ponder uses these URLs to fetch blockchain data from providers like Alchemy or Infura.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nPONDER_RPC_URL_1 = \"https://eth-mainnet.g.alchemy.com/v2/...\"\n```\n\n----------------------------------------\n\nTITLE: Installing Ponder via Package Manager\nDESCRIPTION: Commands to create a new Ponder project using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init ponder@latest\n# or\npnpm create ponder\n# or\nyarn create ponder\n```\n\n----------------------------------------\n\nTITLE: SQL Aggregation Query\nDESCRIPTION: Advanced SQL query demonstrating grouping and counting transfers per account, ordered by count.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/direct-sql.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"to\", COUNT(*) AS transfer_count\n  FROM transfer_events\n  GROUP BY \"to\"\n  ORDER BY transfer_count DESC\n  LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Defining database schema in Ponder\nDESCRIPTION: Creating a database schema in ponder.schema.ts file, which defines the structure of the data to be stored and served by the GraphQL API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { onchainTable } from \"ponder\";\n\nexport const blitmapTokens = onchainTable(\"blitmap_tokens\", (t) => ({\n  id: t.integer().primaryKey(),\n  owner: t.hex(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Ponder Indexing Functions\nDESCRIPTION: Example of an indexing function that processes BaseRegistrar NameRegistered events and stores data in the database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/BaseRegistrar.ts\n\nimport { ponder } from \"ponder:registry\";\nimport schema from \"ponder:schema\";\n\nponder.on(\"BaseRegistrar:NameRegistered\", async ({ event, context }) => {\n  const { name, owner } = event.params;\n\n  await context.db.insert(schema.ensName).values({\n    name: name,\n    owner: owner,\n    registeredAt: event.block.timestamp,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a new Ponder project with pnpm\nDESCRIPTION: Command to create a new Ponder project using pnpm package manager.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/new-project.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create ponder\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in SQLite Database\nDESCRIPTION: SQLite command to display all tables available in the connected Ponder database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n.tables\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Level with CLI Options in Bash\nDESCRIPTION: Demonstrates how to set log levels using CLI options when running Ponder. Shows examples of using explicit level configuration (--log-level warn) and shortcut flags (-v) for debug level.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/logging.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nponder dev --log-level warn\n# or, use the shortcut flag for debug\nponder dev -v\n```\n\n----------------------------------------\n\nTITLE: Installing Ponder using package managers\nDESCRIPTION: Commands to create a new Ponder project using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/core/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init ponder@latest\n# or\npnpm create ponder\n# or\nyarn create ponder\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Schema in Ponder\nDESCRIPTION: Shows how to configure Ponder to use a custom Postgres schema instead of the default 'public' schema.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\n\nexport default createConfig({\n  database: {\n    kind: \"postgres\",\n    schema: \"dev\", // Defaults to \"public\"\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with onchainTable in Ponder\nDESCRIPTION: This snippet demonstrates how to define a schema for Ponder using the onchainTable function to create tables for accounts and allowances, including primary keys and column definitions.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/indexing/write-to-the-database.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainTable, primaryKey } from \"ponder\";\n\nexport const accounts = onchainTable(\"accounts\", (t) => ({\n  address: t.hex().primaryKey(),\n  balance: t.bigint().notNull(),\n  nickname: t.text(),\n}));\n\nexport const allowances = onchainTable(\n  \"allowances\",\n  (t) => ({\n    owner: t.hex().notNull(),\n    spender: t.hex().notNull(),\n    value: t.bigint().notNull(),\n  }),\n  (table) => ({\n    pk: primaryKey({ columns: [table.owner, table.spender] }),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating World Record Without Setup Event in Ponder (TypeScript)\nDESCRIPTION: This snippet shows how to update a World record in Ponder without using a setup event. It upserts the record in each indexing function, which can be inefficient.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"FunGame:NewPlayer\", async ({ context }) => {\n  await context.db.World.upsert({\n    id: 1,\n    create: { playerCount: 0 },\n    update: ({ current }) => ({\n      ...current,\n      playerCount: current.playerCount + 1,\n    }),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder Development Server\nDESCRIPTION: Commands to start the Ponder development server using different package managers.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/migrate-subgraph.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: JSON Log Format Output Example in JSON\nDESCRIPTION: Shows an example of the JSON log format output, displaying log entries as newline-delimited JSON objects with properties for level, time, service, and message.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/logging.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"level\":30,\"time\":1717170664426,\"service\":\"build\",\"msg\":\"Using PGlite database at .ponder/pglite (default)\"}\n{\"level\":30,\"time\":1717170664454,\"service\":\"database\",\"msg\":\"Created table 'Account' in 'public.db'\"}\n{\"level\":30,\"time\":1717170664458,\"service\":\"server\",\"msg\":\"Started listening on port 42069\"}\n{\"level\":30,\"time\":1717170664625,\"service\":\"historical\",\"msg\":\"Started syncing 'base' logs for 'weth9' with 0.0% cached\"}\n{\"level\":30,\"time\":1717170664628,\"service\":\"historical\",\"msg\":\"Started syncing 'optimism' logs for 'weth9' with 0.0% cached\"}\n{\"level\":30,\"time\":1717170664683,\"service\":\"historical\",\"msg\":\"Started syncing 'polygon' logs for 'weth9' with 0.0% cached\"}\n```\n\n----------------------------------------\n\nTITLE: Sorting Records by Age in Descending Order\nDESCRIPTION: GraphQL query that retrieves Person records sorted by age in descending order using the orderBy and orderDirection parameters.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  persons(orderBy: \"age\", orderDirection: \"desc\") {\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pretty Log Format in Bash\nDESCRIPTION: Configures Ponder to use the 'pretty' log format (which is the default) when starting the service. Pretty format provides human-readable, color-coded log output.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/logging.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nponder start --log-format pretty\n```\n\n----------------------------------------\n\nTITLE: Creating Ponder Project with Package Managers\nDESCRIPTION: Commands to create a new Ponder project using different package managers (pnpm, yarn, npm).\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/migrate-subgraph.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create ponder\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create ponder\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm create ponder@latest\n```\n\n----------------------------------------\n\nTITLE: Result of Greater Than Filter Query\nDESCRIPTION: JSON response showing the filtered results where age is greater than 32, returning only Barry and Pablo.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"persons\": [\n    { \"name\": \"Barry\", \"age\": 57 },\n    { \"name\": \"Pablo\", \"age\": 71 },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Account Balance Schema in Ponder - TypeScript\nDESCRIPTION: Defines an Account schema with id and balance fields for tracking cryptocurrency balances.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/create-update-records.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  Account: p.createTable({\n    id: p.int(),\n    balance: p.bigint(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Transaction Receipt Type Definition in Ponder\nDESCRIPTION: Type definition for TransactionReceipt object that contains details about a confirmed Ethereum transaction. Can be enabled in contract config by setting includeTransactionReceipts to true.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/** A confirmed Ethereum transaction receipt. */\nexport type TransactionReceipt = {\n  /** Hash of block containing this transaction */\n  blockHash: Hash;\n  /** Number of block containing this transaction */\n  blockNumber: bigint;\n  /** Address of new contract or `null` if no contract was created */\n  contractAddress: Address | null;\n  /** Gas used by this and all preceding transactions in this block */\n  cumulativeGasUsed: bigint;\n  /** Pre-London, it is equal to the transaction's gasPrice. Post-London, it is equal to the actual gas price paid for inclusion. */\n  effectiveGasPrice: bigint;\n  /** Transaction sender */\n  from: Address;\n  /** Gas used by this transaction */\n  gasUsed: bigint;\n  /** List of log objects generated by this transaction */\n  logs: Log[];\n  /** Logs bloom filter */\n  logsBloom: Hex;\n  /** `success` if this transaction was successful or `reverted` if it failed */\n  status: \"success\" | \"reverted\";\n  /** Transaction recipient or `null` if deploying a contract */\n  to: Address | null;\n  /** Hash of this transaction */\n  transactionHash: Hash;\n  /** Index of this transaction in the block */\n  transactionIndex: number;\n  /** Transaction type */\n  type: TransactionType;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Log Format in Bash\nDESCRIPTION: Configures Ponder to use the JSON log format when starting the service. JSON format is useful for programmatic log processing and integration with log management systems.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/logging.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nponder start --log-format json\n```\n\n----------------------------------------\n\nTITLE: Result of OR Combined Filter Query\nDESCRIPTION: JSON response showing the results of the OR-combined filter, returning Barry, Sally, and Pablo who match at least one of the conditions.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"persons\": [\n    { \"name\": \"Barry\", \"age\": 57 },\n    { \"name\": \"Sally\", \"age\": 22 },\n    { \"name\": \"Pablo\", \"age\": 71 },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ponder with JSON Log Format in Bash\nDESCRIPTION: Shows how to start Ponder with the 'json' log format using a CLI option.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/logging.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nponder start --log-format json\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for ENS Names\nDESCRIPTION: Example GraphQL query to retrieve ENS name records with their associated data.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  ensNames(limit: 2) {\n    items {\n      name\n      owner\n      registeredAt\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ensNames\": {\n    \"items\": [\n      {\n        \"name\": \"vitalik.eth\",\n        \"owner\": \"0x0904Dac3347eA47d208F3Fd67402D039a3b99859\",\n        \"registeredAt\": 1580345271\n      },\n      {\n        \"name\": \"joe.eth\",\n        \"owner\": \"0x6109DD117AA5486605FC85e040ab00163a75c662\",\n        \"registeredAt\": 1580754710\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Result of Age-sorted Query in Descending Order\nDESCRIPTION: JSON response showing Person records sorted by age in descending order, with Pablo (71) first and Sally (22) last.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"persons\": [\n    { \"name\": \"Pablo\", \"age\": 71 },\n    { \"name\": \"Barry\", \"age\": 57 },\n    { \"name\": \"Lucile\", \"age\": 32 },\n    { \"name\": \"Sally\", \"age\": 22 },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering GraphQL Middleware in Ponder\nDESCRIPTION: Adds the GraphQL middleware to your API functions to maintain access to the standard GraphQL API. This is necessary because creating API functions disables the default GraphQL API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\nimport { graphql } from \"@ponder/core\";\n\nponder.use(\"/\", graphql());\nponder.use(\"/graphql\", graphql());\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder Development Server\nDESCRIPTION: Commands to start the Ponder development server which provides hot reloading functionality.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/create-ponder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TypeScript Module Declaration\nDESCRIPTION: Example of TypeScript code that needs to be asserted as const according to ABIType guidelines. This demonstrates the proper assertion pattern required for Ponder's type system.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/system-requirements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"ponder:registry\"{:ts}\n```\n\n----------------------------------------\n\nTITLE: Basic BigInt Conversion to String in TypeScript\nDESCRIPTION: Simple example demonstrating how to convert BigInt values to strings using the replaceBigInts utility function.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/replace-bigints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { replaceBigInts } from \"@ponder/utils\";\n\nconst obj = { a: 100n, b: [-12n, 3_000_000_000n] };\n\nconst result = replaceBigInts(obj, (v) => String(v));\n//    ?^ { a: '100', b: [ '-12', '3000000000' ] }\n```\n\n----------------------------------------\n\nTITLE: Combining Filters with OR Operator\nDESCRIPTION: GraphQL query using the OR operator to filter Person records that either have 'll' in their name or have an age greater than or equal to 60.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  persons(\n    where: {\n      OR: [\n        { name_contains: \"ll\" },\n        { age_gte: 60 }\n      ] \n    }\n  ) {\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ponder Project with Package Managers\nDESCRIPTION: Commands for creating a new Ponder project using different package managers (pnpm, yarn, npm).\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/getting-started/migrate-subgraph.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create ponder\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create ponder\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm create ponder@latest\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL API Result for BlitmapTokens Query\nDESCRIPTION: Example of the JSON response returned by the GraphQL API when querying BlitmapTokens. Shows two tokens with their IDs and owner addresses.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"blitmapTokens\": [\n    { \"id\": 1452, \"owner\": \"0xaf3d5...\" },\n    { \"id\": 7164, \"owner\": \"0x9cb3b...\" },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Forward Pagination Query in GraphQL\nDESCRIPTION: GraphQL query showing forward pagination using the after cursor parameter to retrieve the next set of records.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  persons(\n    orderBy: \"age\",\n    orderDirection: \"asc\",\n    limit: 2,\n    after: \"Mxhc3NDb3JlLTA=\"\n  ) {\n    items {\n      name\n      age\n    }\n    pageInfo {\n      startCursor\n      endCursor\n      hasPreviousPage\n      hasNextPage\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"persons\" {\n    \"items\": [\n      { \"name\": \"Barry\", \"age\": 57 },\n      { \"name\": \"Pablo\", \"age\": 71 }\n    ],\n    \"pageInfo\": {\n      \"startCursor\": \"MxhcdoP9CVBhY\",\n      \"endCursor\": \"McSDfVIiLka==\",\n      \"hasPreviousPage\": true,\n      \"hasNextPage\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limited Transport in Viem Client\nDESCRIPTION: Example demonstrating how to create a Viem public client with rate-limited transport for a single RPC endpoint\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/transports.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rateLimit } from \"@ponder/utils\";\nimport { createPublicClient, fallback, http } from \"viem\";\nimport { mainnet } from \"viem/chains\";\n\nconst client = createPublicClient({\n  chain: mainnet,\n  transport: rateLimit(http(\"https://eth-mainnet.g.alchemy.com/v2/...\"), {\n    requestsPerSecond: 25,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Block, Transaction, and Log Type Definitions in Ponder\nDESCRIPTION: Comprehensive type definitions for Block, Transaction, and Log objects used in Ponder indexing functions. These types define the structure of blockchain data available in event objects.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** The block containing the transaction that emitted the log being processed. */\ntype Block = {\n  /** Base fee per gas */\n  baseFeePerGas: bigint | null;\n  /** \"Extra data\" field of this block */\n  extraData: `0x${string}`;\n  /** Maximum gas allowed in this block */\n  gasLimit: bigint;\n  /** Total used gas by all transactions in this block */\n  gasUsed: bigint;\n  /** Block hash */\n  hash: `0x${string}`;\n  /** Logs bloom filter */\n  logsBloom: `0x${string}`;\n  /** Address that received this block's mining rewards */\n  miner: `0x${string}`;\n  /** Block number */\n  number: bigint;\n  /** Parent block hash */\n  parentHash: `0x${string}`;\n  /** Root of the this block's receipts trie */\n  receiptsRoot: `0x${string}`;\n  /** Size of this block in bytes */\n  size: bigint;\n  /** Root of this block's final state trie */\n  stateRoot: `0x${string}`;\n  /** Unix timestamp of when this block was collated */\n  timestamp: bigint;\n  /** Total difficulty of the chain until this block */\n  totalDifficulty: bigint | null;\n  /** Root of this block's transaction trie */\n  transactionsRoot: `0x${string}`;\n};\n\n/** The transaction that emitted the log being processed. */\ntype Transaction = {\n  /** Hash of block containing this transaction */\n  blockHash: `0x${string}`;\n  /** Number of block containing this transaction */\n  blockNumber: bigint;\n  /** Transaction sender */\n  from: `0x${string}`;\n  /** Gas provided for transaction execution */\n  gas: bigint;\n  /** Base fee per gas. */\n  gasPrice?: bigint | undefined;\n  /** Hash of this transaction */\n  hash: `0x${string}`;\n  /** Contract code or a hashed method call */\n  input: `0x${string}`;\n  /** Total fee per gas in wei (gasPrice/baseFeePerGas + maxPriorityFeePerGas). */\n  maxFeePerGas?: bigint | undefined;\n  /** Max priority fee per gas (in wei). */\n  maxPriorityFeePerGas?: bigint | undefined;\n  /** Unique number identifying this transaction */\n  nonce: number;\n  /** Transaction recipient or `null` if deploying a contract */\n  to: `0x${string}` | null;\n  /** Index of this transaction in the block */\n  transactionIndex: number;\n  /** Value in wei sent with this transaction */\n  value: bigint;\n};\n\n/** The log being processed. */\ntype Log = {\n  /** Globally unique identifier for this log (`${blockHash}-${logIndex}`). */\n  id: string;\n  /** The address from which this log originated */\n  address: `0x${string}`;\n  /** Hash of block containing this log */\n  blockHash: `0x${string}`;\n  /** Number of block containing this log */\n  blockNumber: bigint;\n  /** Contains the non-indexed arguments of the log */\n  data: `0x${string}`;\n  /** Index of this log within its block */\n  logIndex: number;\n  /** `true` if this log has been removed in a chain reorganization */\n  removed: boolean;\n  /** List of order-dependent topics */\n  topics: [`0x${string}`, ...`0x${string}`[]] | [];\n  /** Hash of the transaction that created this log */\n  transactionHash: `0x${string}`;\n  /** Index of the transaction that created this log */\n  transactionIndex: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Indexing Status via HTTP in Bash\nDESCRIPTION: This snippet demonstrates how to use curl to request the indexing status from the /status endpoint of a Ponder app. It shows the command to make the HTTP request.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/status.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:42069/status\n```\n\n----------------------------------------\n\nTITLE: Database Prune Command Options\nDESCRIPTION: Command for dropping inactive Ponder deployment database resources including tables, functions, and schemas.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder db prune [options]\n\nDrop all database tables, functions, and schemas created by Ponder deployments that are not active\n\nOptions:\n  -h, --help  display help for command\n```\n\n----------------------------------------\n\nTITLE: Example Person Data in JSON Format\nDESCRIPTION: Sample Person data used for the filter and query examples. Contains four records with id, name, and age fields.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"id\": 1, \"name\": \"Barry\", \"age\": 57 },\n  { \"id\": 2, \"name\": \"Lucile\", \"age\": 32 },\n  { \"id\": 3, \"name\": \"Sally\", \"age\": 22 },\n  { \"id\": 4, \"name\": \"Pablo\", \"age\": 71 },\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Hono Package Using Package Managers\nDESCRIPTION: Commands for installing the Hono package with different package managers. Required for Ponder v0.5.0 which added Hono as a peer dependency.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/migration-guide.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add hono@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add hono@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install hono@latest\n```\n\n----------------------------------------\n\nTITLE: Displaying Database Tables with psql\nDESCRIPTION: Commands to list all tables in the public schema or a specific schema using psql.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/direct-sql.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\\dt\n```\n\nLANGUAGE: bash\nCODE:\n```\n\\dt my_schema.*\n```\n\n----------------------------------------\n\nTITLE: Querying ERC1155 Token Owner and Transfer Events with GraphQL\nDESCRIPTION: This GraphQL query retrieves the current owner and all transfer events for a specific token. It demonstrates how to query token ownership and historical transfer data using the Ponder-generated API for an ERC1155 token.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/reference-erc1155/README.md#2025-04-23_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  token(id: \"7\") {\n    account {\n      id\n    }\n    transferEvents {\n      items {\n        fromId\n        toId\n        timestamp\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Anvil Network in Ponder\nDESCRIPTION: Configuration setup for the Anvil network in Ponder, demonstrating how to disable caching for local development chains.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/foundry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    anvil: {\n      chainId: 31337,\n      transport: http(\"http://127.0.0.1:8545\"),\n      disableCache: true,\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Gas Snapshots with Forge\nDESCRIPTION: Generates gas usage snapshots for the project's contracts using Forge. This helps in monitoring and optimizing gas costs.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/foundry/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ forge snapshot\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder Development Server in Shell\nDESCRIPTION: Launches the Ponder development server, which is used for indexing and querying blockchain data in the development environment.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm ponder dev\n```\n\n----------------------------------------\n\nTITLE: Codegen Command Options\nDESCRIPTION: Command for generating the ponder-env.d.ts type definition file.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder codegen [options]\n\nGenerate the ponder-env.d.ts file, then exit\n\nOptions:\n  -h, --help  display help for command\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder development server\nDESCRIPTION: Commands to start the Ponder development server using npm, pnpm, or yarn.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/core/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite Database via Command Line\nDESCRIPTION: Instructions for connecting to Ponder's SQLite database using the sqlite3 command line tool. Shows how to access the public.db file containing indexed data tables.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# From your project root\nsqlite3 .ponder/sqlite/public.db\n\n# Or, an absolute path\nsqlite3 /workspace/my-app/.ponder/sqlite/public.db\n```\n\n----------------------------------------\n\nTITLE: Starting Anvil Local Node in Shell\nDESCRIPTION: Starts an Anvil local node with a block time of 1 second. This is necessary for local blockchain development and testing.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nanvil --block-time 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Range in Ponder Config (TypeScript)\nDESCRIPTION: This configuration snippet demonstrates how to set a specific block range for indexing using startBlock and endBlock options. It's useful for limiting the indexing to a specific historical period or for development purposes.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/block-intervals.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    mainnet: { chainId: 1, transport: http(process.env.PONDER_RPC_URL_1) },\n  },\n  blocks: {\n    ChainlinkOracleUpdate: {\n      network: \"mainnet\",\n      interval: 60 / 12, // Every 60 seconds\n      startBlock: 19600000,\n      endBlock: 19700000,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level with Environment Variable in JavaScript\nDESCRIPTION: Demonstrates how to set the PONDER_LOG_LEVEL environment variable to 'trace' in a .env.local file.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/logging.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPONDER_LOG_LEVEL=trace\n```\n\n----------------------------------------\n\nTITLE: Accessing the Underlying Hono Instance\nDESCRIPTION: Shows how to access the underlying Hono instance to customize the behavior of the API server, such as adding a custom 404 not found handler.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.hono.notFound((c) => {\n  return c.text(\"Custom 404 Message\", 404);\n});\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder Development Server with pnpm\nDESCRIPTION: Command to start the Ponder development server using pnpm. The server automatically reloads when project files are changed and displays console.log statements and errors.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Development Server Command Options\nDESCRIPTION: Options for running the development server with hot reloading and auto-updating terminal UI.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder dev [options]\n\nStart the development server with hot reloading\n\nOptions:\n  --schema <SCHEMA>          Database schema\n  -p, --port <PORT>          Port for the web server (default: 42069)\n  -H, --hostname <HOSTNAME>  Hostname for the web server (default: \"0.0.0.0\" or \"::\")\n  --disable-ui               Disable the terminal UI\n  -h, --help                 display help for command\n```\n\n----------------------------------------\n\nTITLE: Mapping Forge-std Library Path\nDESCRIPTION: Maps the forge-std dependency prefix to its source files location in node_modules. This configuration is used by the Forge build system to resolve imports.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/foundry/remappings.txt#2025-04-23_snippet_0\n\nLANGUAGE: path\nCODE:\n```\nforge-std/=node_modules/forge-std/src/\n```\n\n----------------------------------------\n\nTITLE: Initial Pagination Query in GraphQL\nDESCRIPTION: GraphQL query demonstrating basic pagination with limit and ordering, retrieving person records sorted by age.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  persons(orderBy: \"age\", orderDirection: \"asc\", limit: 2) {\n    items {\n      name\n      age\n    }\n    pageInfo {\n      startCursor\n      endCursor\n      hasPreviousPage\n      hasNextPage\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"persons\" {\n    \"items\": [\n      { \"name\": \"Sally\", \"age\": 22 },\n      { \"name\": \"Lucile\", \"age\": 32 }\n    ],\n    \"pageInfo\": {\n      \"startCursor\": \"MfgBzeDkjs44\",\n      \"endCursor\": \"Mxhc3NDb3JlLTA=\",\n      \"hasPreviousPage\": false,\n      \"hasNextPage\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Solidity Code with Forge\nDESCRIPTION: Applies code formatting to Solidity files in the project using Forge's formatting tool.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/foundry/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ forge fmt\n```\n\n----------------------------------------\n\nTITLE: Ponder Server-Only Mode Command\nDESCRIPTION: Command options for running the server in API-only mode, specifically designed for horizontal scaling with Postgres\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder serve [options]\n\nStart the production HTTP server without the indexer\n\nOptions:\n  -p, --port <PORT>          Port for the web server (default: 42069)\n  -H, --hostname <HOSTNAME>  Hostname for the web server (default: \"0.0.0.0\" or \"::\")\n  -h, --help                 display help for command\n```\n\n----------------------------------------\n\nTITLE: Response from the Hello World API Endpoint\nDESCRIPTION: Shows the plain text response received when accessing the hello endpoint in a browser. This demonstrates the expected output of the basic API function example.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/query/api-functions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Server-Only Mode Command Options\nDESCRIPTION: Options for running the GraphQL API server without the indexer, specifically for horizontal scaling in production with Postgres.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder serve [options]\n\nStart the production HTTP server without the indexer\n\nOptions:\n  --schema <SCHEMA>          Database schema\n  -p, --port <PORT>          Port for the web server (default: 42069)\n  -H, --hostname <HOSTNAME>  Hostname for the web server (default: \"0.0.0.0\" or \"::\")\n  -h, --help                 display help for command\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder Development Server\nDESCRIPTION: Commands to start the Ponder development server using different package managers.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/eslint-config-ponder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Database List Command Output\nDESCRIPTION: Example output of the database list command showing Ponder deployments with their status and details.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder db list\n\nList all Ponder deployments\n\n│ Schema        │ Active   │ Last active    │ Table count │\n├───────────────┼──────────┼────────────────┼─────────────┤\n│ indexer_prod  │      yes │            --- │          10 │\n│ test          │       no │    26m 58s ago │          10 │\n│ demo          │       no │      1 day ago │           5 │\n```\n\n----------------------------------------\n\nTITLE: Defining Ponder Schema\nDESCRIPTION: Example of defining a database schema for ENS names using Ponder's schema definition syntax.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/create-ponder/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ponder.schema.ts\n\nimport { onchainTable } from \"ponder\";\n\nexport const ensName = onchainTable(\"ens_name\", (t) => ({\n  name: p.text().primaryKey(),\n  owner: p.text().notNull(),\n  registeredAt: p.integer().notNull(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query and Response\nDESCRIPTION: Demonstration of a GraphQL query to retrieve ENS names and its corresponding JSON response.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/eslint-config-ponder/README.md#2025-04-23_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  ensNames(limit: 2) {\n    items {\n      name\n      owner\n      registeredAt\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ensNames\": {\n    \"items\": [\n      {\n        \"name\": \"vitalik.eth\",\n        \"owner\": \"0x0904Dac3347eA47d208F3Fd67402D039a3b99859\",\n        \"registeredAt\": 1580345271\n      },\n      {\n        \"name\": \"joe.eth\",\n        \"owner\": \"0x6109DD117AA5486605FC85e040ab00163a75c662\",\n        \"registeredAt\": 1580754710\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: Example of a GraphQL query to fetch ENS names from the Ponder API.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/create-ponder/README.md#2025-04-23_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  ensNames(limit: 2) {\n    items {\n      name\n      owner\n      registeredAt\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ensNames\": {\n    \"items\": [\n      {\n        \"name\": \"vitalik.eth\",\n        \"owner\": \"0x0904Dac3347eA47d208F3Fd67402D039a3b99859\",\n        \"registeredAt\": 1580345271\n      },\n      {\n        \"name\": \"joe.eth\",\n        \"owner\": \"0x6109DD117AA5486605FC85e040ab00163a75c662\",\n        \"registeredAt\": 1580754710\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Logging Output for Indexing Function Dependencies\nDESCRIPTION: This shows the debug log output when enabling verbose logging, displaying the dependency graph for concurrent indexing functions with their parent dependencies.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/blog/0.2.0.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG  Registered indexing function BasePaintBrush:Transfer (selfDependent=true, parents=[BasePaint:Painted])\nDEBUG  Registered indexing function BasePaint:Started (selfDependent=true, parents=[])\nDEBUG  Registered indexing function BasePaint:Painted (selfDependent=true, parents=[BasePaintBrush:Transfer, BasePaint:ArtistsEarned, BasePaint:TransferSingle, BasePaint:TransferBatch])\nDEBUG  Registered indexing function BasePaint:ArtistsEarned (selfDependent=true, parents=[BasePaint:Painted, BasePaint:TransferSingle, BasePaint:TransferBatch])\nDEBUG  Registered indexing function BasePaint:ArtistWithdraw (selfDependent=false, parents=[])\nDEBUG  Registered indexing function BasePaint:TransferSingle (selfDependent=true, parents=[BasePaint:Painted, BasePaint:ArtistsEarned, BasePaint:TransferBatch])\nDEBUG  Registered indexing function BasePaint:TransferBatch (selfDependent=true, parents=[BasePaint:Painted, BasePaint:ArtistsEarned, BasePaint:TransferSingle])\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder Development Server\nDESCRIPTION: Commands to start the Ponder development server with hot reloading functionality using different package managers.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting Local Ethereum Node with Anvil\nDESCRIPTION: Launches Anvil, a local Ethereum node for development and testing purposes.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/foundry/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ anvil\n```\n\n----------------------------------------\n\nTITLE: Creating Project from Template Example\nDESCRIPTION: Example commands showing how to create a new project using the feature-factory template with different package managers\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/create-ponder.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create ponder --template feature-factory\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create ponder --template feature-factory\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm create ponder@latest --template feature-factory\n```\n\n----------------------------------------\n\nTITLE: Cursor Pagination Response Example in JSON\nDESCRIPTION: This JSON response demonstrates the structure of cursor-paginated results, including the items array and pageInfo object with cursor values and pagination indicators.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/blog/0.2.0.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"persons\" {\n    \"items\": [\n      { \"name\": \"Sally\", \"age\": 22 },\n      { \"name\": \"Lucile\", \"age\": 32 },\n    ],\n    \"pageInfo\": {\n      \"startCursor\": \"MfgBzeDkjs44\",\n      \"endCursor\": \"Mxhc3NDb3JlLTA=\",\n      \"hasPreviousPage\": false,\n      \"hasNextPage\": true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of JSON Log Format Output in JSON\nDESCRIPTION: Provides an example of the output when using the 'json' log format in Ponder, showing newline-delimited JSON objects with various properties.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/logging.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"level\":30,\"time\":1717170664426,\"service\":\"build\",\"msg\":\"Using SQLite database at .ponder/sqlite (default)\"}\n{\"level\":30,\"time\":1717170664454,\"service\":\"database\",\"msg\":\"Created table 'Account' in 'public.db'\"}\n{\"level\":30,\"time\":1717170664458,\"service\":\"server\",\"msg\":\"Started listening on port 42069\"}\n{\"level\":30,\"time\":1717170664625,\"service\":\"historical\",\"msg\":\"Started syncing 'base' logs for 'weth9' with 0.0% cached\"}\n{\"level\":30,\"time\":1717170664628,\"service\":\"historical\",\"msg\":\"Started syncing 'optimism' logs for 'weth9' with 0.0% cached\"}\n{\"level\":30,\"time\":1717170664683,\"service\":\"historical\",\"msg\":\"Started syncing 'polygon' logs for 'weth9' with 0.0% cached\"}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Factory Contract Children in Different Contracts\nDESCRIPTION: This snippet demonstrates how to read data from factory contract children when handling events from a different contract in Ponder.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/read-contract-data.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"FancyLendingProtocol:RegisterPool\", async ({ event, context }) => {\n  const totalSupply = await context.client.readContract({\n    abi: context.contracts.SudoswapPool.abi,\n    address: event.args.pool,\n    functionName: \"totalSupply\",\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Ponder's Horizontal Scaling Architecture with Mermaid\nDESCRIPTION: A diagram showing the architecture of a horizontally scaled Ponder deployment, illustrating how multiple HTTP servers connect to a single database and indexer through a proxy.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/production/horizontal-scaling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  A[Clients]\n  B[Proxy]\n  C[\"HTTP server (ponder serve)\"]\n  D[\"HTTP server (ponder serve)\"]\n  E[\"HTTP server (ponder serve)\"]\n  F[\"Database\"]\n  G[\"Indexer (ponder start)\"]\n  A --> B\n  B --> C\n  B --> D\n  B --> E\n  C --> F\n  D --> F\n  E --> F\n  F <--> G\n```\n\n----------------------------------------\n\nTITLE: Importing @ponder/utils Package in Markdown\nDESCRIPTION: This snippet demonstrates the package name for the Ponder utilities collection. It's used to reference the package in documentation or import statements.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @ponder/utils\n```\n\n----------------------------------------\n\nTITLE: Installing Ponder using NPM\nDESCRIPTION: Command to create a new Ponder project using NPM. This is the recommended way to get started with Ponder.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/blog/introducing-ponder.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create ponder\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Forge in Shell\nDESCRIPTION: Uses Forge to compile the smart contracts in the project. This step is required before deploying or interacting with the contracts.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nforge build\n```\n\n----------------------------------------\n\nTITLE: Importing Nextra Components in TypeScript\nDESCRIPTION: This code snippet imports the Tabs and Callout components from the nextra/components package. These components are likely used for structuring and styling the documentation.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tabs, Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Forge\nDESCRIPTION: Executes tests for Ethereum projects using Forge. This command runs all test files in the project.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/foundry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ forge test\n```\n\n----------------------------------------\n\nTITLE: Using NetworkConfig Type for Configuration in TypeScript\nDESCRIPTION: Demonstrates how to use the NetworkConfig utility type to define network configurations with proper type checking, including chainId and transport properties.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/types.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, type NetworkConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nconst mainnet = {\n  chainId: 1,\n  transport: http(process.env.PONDER_RPC_URL_1),\n} as const satisfies NetworkConfig;\n\nexport default createConfig({\n  networks: {\n    mainnet,\n  }\n  contracts: ...,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Ponder Networks and Contracts\nDESCRIPTION: TypeScript configuration file example showing how to set up networks and contracts in Ponder, including network endpoints and contract specifications.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/eslint-config-ponder/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ponder.config.ts\n\nimport { createConfig } from \"ponder\";\nimport { http } from \"viem\";\n \nimport { BaseRegistrarAbi } from \"./abis/BaseRegistrar\";\n \nexport default createConfig({\n  networks: {\n    mainnet: { \n      chainId: 1,\n      transport: http(\"https://eth-mainnet.g.alchemy.com/v2/...\")\n    },\n  },\n  contracts: {\n    BaseRegistrar: {\n      abi: BaseRegistrarAbi,\n      network: \"mainnet\",\n      address: \"0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85\",\n      startBlock: 9380410,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Schema in SQLite Database\nDESCRIPTION: SQLite command to print the CREATE TABLE statements that define the structure of each table in the database.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.schema\n```\n\n----------------------------------------\n\nTITLE: Building Ethereum Projects with Forge\nDESCRIPTION: Uses the Forge command to build Ethereum projects. This command compiles Solidity contracts and prepares them for deployment.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/foundry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ forge build\n```\n\n----------------------------------------\n\nTITLE: Zorb NFT Gradient Function (Solidity)\nDESCRIPTION: This snippet shows a Solidity contract function that returns gradient data for a Zorb NFT. The function takes an address as input and returns a bytes array representing the gradient.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/read-contract-data.mdx#2025-04-23_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ZorbNft is ERC721 {\n\n    function mint() public {\n        // ...\n    }\n\n    function gradientForAddress(address user) public pure returns (bytes[5] memory) {\n        return ColorLib.gradientForAddress(user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Account Rows in PostgreSQL\nDESCRIPTION: This SQL query selects the first 5 rows from the Account table, displaying all columns. It demonstrates how to retrieve basic account information including id, balance, and ownership status.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"Account\" LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Using Cast for EVM Interactions\nDESCRIPTION: Utilizes Cast, a command-line tool for interacting with EVM-compatible blockchains. Requires specifying a subcommand for the desired operation.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/foundry/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cast <subcommand>\n```\n\n----------------------------------------\n\nTITLE: Network Context Usage in Ponder Indexing Functions\nDESCRIPTION: Example showing how to access and use the network information in Ponder indexing functions. The network object includes the network name and chain ID, which can be used for network-specific logic.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nponder.on(\"UniswapV3Factory:Ownership\", async ({ event, context }) => {\n  context.network;\n  //      ^? { name: \"mainnet\", chainId 1 } | { name: \"base\", chainId 8453 }\n\n  if (context.network.name === \"mainnet\") {\n    // Do mainnet-specific stuff!\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Major Release v0.1.0\nDESCRIPTION: Release of version 0.1.0 with reference to migration guide for breaking changes.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/eslint-config-ponder/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n- [#437](https://github.com/ponder-sh/ponder/pull/437) [`df822e4ddad0a3c4002fa0efc0b758b1b7853f1c`](https://github.com/ponder-sh/ponder/commit/df822e4ddad0a3c4002fa0efc0b758b1b7853f1c) Thanks [@0xOlias](https://github.com/0xOlias)! - Released v0.1.0! Please read the [migration guide](https://ponder.sh/docs/migration-guide).\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Output Format\nDESCRIPTION: Commands to adjust SQLite's display settings for improved readability of query results.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n.headers ON\n.mode columns\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: A changelog document detailing version updates from 0.0.1 to 0.2.3, focusing on improvements to eth_getLogs retry behavior, transport functionality, and provider support.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/utils/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @ponder/utils\n\n## 0.2.3\n\n### Patch Changes\n\n- [#1284](https://github.com/ponder-sh/ponder/pull/1284) [`0bb76fdc10bdf4f88980ed99d06c0e672094dce7`](https://github.com/ponder-sh/ponder/commit/0bb76fdc10bdf4f88980ed99d06c0e672094dce7) Thanks [@0xOlias](https://github.com/0xOlias)! - Improved eth_getLogs retry behavior for `https://mainnet.optimism.io`.\n\n## 0.2.2\n\n### Patch Changes\n\n- [#1193](https://github.com/ponder-sh/ponder/pull/1193) [`0cbdf01f85f4180a62d0de671c7adc299b704104`](https://github.com/ponder-sh/ponder/commit/0cbdf01f85f4180a62d0de671c7adc299b704104) Thanks [@kyscott18](https://github.com/kyscott18)! - Added retry range support for hyperliquid.\n\n## 0.2.1\n\n### Patch Changes\n\n- [#1110](https://github.com/ponder-sh/ponder/pull/1110) [`6a5c8a54b9d976fa760c863512044d82702d0bb7`](https://github.com/ponder-sh/ponder/commit/6a5c8a54b9d976fa760c863512044d82702d0bb7) Thanks [@chenxsan](https://github.com/chenxsan)! - Added retry mechanism for publicnode.\n\n## 0.2.0\n\n### Minor Changes\n\n- [#1074](https://github.com/ponder-sh/ponder/pull/1074) [`d9656a9af390f6c0a375cbbabfc85f90f510b13f`](https://github.com/ponder-sh/ponder/commit/d9656a9af390f6c0a375cbbabfc85f90f510b13f) Thanks [@kyscott18](https://github.com/kyscott18)! - Updated `viem` peer dependency to `>=2`.\n\n- [#1074](https://github.com/ponder-sh/ponder/pull/1074) [`d9656a9af390f6c0a375cbbabfc85f90f510b13f`](https://github.com/ponder-sh/ponder/commit/d9656a9af390f6c0a375cbbabfc85f90f510b13f) Thanks [@kyscott18](https://github.com/kyscott18)! - Added `isSuggestedRange` property to the return type of `getLogsRetryHelper`.\n\n## 0.1.8\n\n### Patch Changes\n\n- [#1065](https://github.com/ponder-sh/ponder/pull/1065) [`7c17ff32e8907b4a38d74cea2a431b689236048c`](https://github.com/ponder-sh/ponder/commit/7c17ff32e8907b4a38d74cea2a431b689236048c) Thanks [@kyscott18](https://github.com/kyscott18)! - Added retry range detection for coinbase rpcs.\n\n## 0.1.7\n\n### Patch Changes\n\n- [#964](https://github.com/ponder-sh/ponder/pull/964) [`e82e385b777cf6fccaf779fe8b12151b56456b68`](https://github.com/ponder-sh/ponder/commit/e82e385b777cf6fccaf779fe8b12151b56456b68) Thanks [@kyscott18](https://github.com/kyscott18)! - Updated logs retry logic for several providers.\n\n## 0.1.6\n\n### Patch Changes\n\n- [`4ef2d6212e59b4c4ba0723e78a1c204db3d94542`](https://github.com/ponder-sh/ponder/commit/4ef2d6212e59b4c4ba0723e78a1c204db3d94542) Thanks [@0xOlias](https://github.com/0xOlias)! - Added `replaceBigInts` utility function to `@ponder/utils` (re-exported from `@ponder/core`). [Read more](https://ponder.sh/docs/utilities/replace-bigints).\n\n## 0.1.5\n\n### Patch Changes\n\n- [#894](https://github.com/ponder-sh/ponder/pull/894) [`9d64a31a527914145c86b0c8e43b9d185e35a1e1`](https://github.com/ponder-sh/ponder/commit/9d64a31a527914145c86b0c8e43b9d185e35a1e1) Thanks [@kyscott18](https://github.com/kyscott18)! - Supported retrying chainstack eth_getLogs requests.\n\n## 0.1.4\n\n### Patch Changes\n\n- [#816](https://github.com/ponder-sh/ponder/pull/816) [`2d9fcbae895b1c7388683fec5c0f36999ead29ce`](https://github.com/ponder-sh/ponder/commit/2d9fcbae895b1c7388683fec5c0f36999ead29ce) Thanks [@kyscott18](https://github.com/kyscott18)! - Added support for automatically detecting blockpi retry ranges.\n\n## 0.1.3\n\n### Patch Changes\n\n- [#811](https://github.com/ponder-sh/ponder/pull/811) [`db106f5ffc302f1a02dcb54f31432420fae3c3cc`](https://github.com/ponder-sh/ponder/commit/db106f5ffc302f1a02dcb54f31432420fae3c3cc) Thanks [@kyscott18](https://github.com/kyscott18)! - Added automatic eth_getLogs retry range detection for the paid version of blast API.\n\n## 0.1.2\n\n### Patch Changes\n\n- [`464a98f1500815739a3384e6b34eb05aaf0c0253`](https://github.com/ponder-sh/ponder/commit/464a98f1500815739a3384e6b34eb05aaf0c0253) Thanks [@kyscott18](https://github.com/kyscott18)! - Added several more chain providers to getLogRetryRanges.\n\n## 0.1.1\n\n### Patch Changes\n\n- [#722](https://github.com/ponder-sh/ponder/pull/722) [`fe99c31a100acfc602cc511a15b1f625e034c29e`](https://github.com/ponder-sh/ponder/commit/fe99c31a100acfc602cc511a15b1f625e034c29e) Thanks [@kyscott18](https://github.com/kyscott18)! - Changed getLogsRetryHelper to not retry when the retry range is the same as the original range.\n\n## 0.1.0\n\n### Minor Changes\n\n- [#692](https://github.com/ponder-sh/ponder/pull/692) [`5d6b541dd4a3bda979d26bb38754b77209674a98`](https://github.com/ponder-sh/ponder/commit/5d6b541dd4a3bda979d26bb38754b77209674a98) Thanks [@kyscott18](https://github.com/kyscott18)! - Added two new viem transports. `rateLimit` for throttling the frequency of requests and `loadBalance` for distributing requests between multiple child transports.\n\n## 0.0.1\n\n### Patch Changes\n\n- [#688](https://github.com/ponder-sh/ponder/pull/688) [`2a1842e1db2329b1c88c613b0a64ff8c7695e829`](https://github.com/ponder-sh/ponder/commit/2a1842e1db2329b1c88c613b0a64ff8c7695e829) Thanks [@kyscott18](https://github.com/kyscott18)! - Created `@ponder/utils` package. Moved `eth_getLogs` retry helper from `@ponder/core` to `@ponder/utils`.\n```\n\n----------------------------------------\n\nTITLE: Running TheGraph Benchmarks with Docker\nDESCRIPTION: Command to run TheGraph benchmarks using Docker. Note that the default graph-node binary cannot run on Apple silicon and must be built from source for M1 Macs.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/benchmarks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm bench:subgraph apps/subgraph-reth/\n```\n\n----------------------------------------\n\nTITLE: Filtering with String Not Ends With Condition\nDESCRIPTION: GraphQL query that filters Person records where name does not end with 'y', demonstrating the _not_ends_with filter operator.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  persons(where: { name_not_ends_with: \"y\" }) {\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in Postgres Database\nDESCRIPTION: PostgreSQL command to display all tables in the public schema.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\\dt\n```\n\n----------------------------------------\n\nTITLE: Creating ESLint Config Package\nDESCRIPTION: Initial creation of the eslint-config-ponder package and adding prompt during create-ponder setup.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/eslint-config-ponder/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n- [#310](https://github.com/0xOlias/ponder/pull/310) [`2ba4b30`](https://github.com/0xOlias/ponder/commit/2ba4b3001402e629dd8956787686a44605c22fa0) Thanks [@eliobricenov](https://github.com/eliobricenov)! - Created `eslint-config-ponder` package and added a prompt to include it during `create-ponder`.\n```\n\n----------------------------------------\n\nTITLE: Installing Viem v2+ Using Package Managers\nDESCRIPTION: Commands for installing the latest version of Viem with different package managers. Required for migrating to Ponder v0.6.0 which updated the viem peer dependency to version 2 or later.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/migration-guide.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add viem@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add viem@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install viem@latest\n```\n\n----------------------------------------\n\nTITLE: Running Ponder Benchmarks with Bun\nDESCRIPTION: Command to run Ponder benchmarks using Bun. Requires Ponder to be built with 'pnpm build' at the top level before running the benchmark.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/benchmarks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun bench:ponder apps/ponder-reth/\n```\n\n----------------------------------------\n\nTITLE: Grafana Default Credentials Configuration\nDESCRIPTION: Default authentication credentials for accessing the Grafana dashboard interface exposed on localhost:3000.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/etc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nusername: admin\npassword: admin\n```\n\n----------------------------------------\n\nTITLE: Result of String Not Ends With Filter Query\nDESCRIPTION: JSON response showing the filtered results where name does not end with 'y', returning Lucile and Pablo.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"persons\": [\n    { \"name\": \"Lucile\", \"age\": 32 },\n    { \"name\": \"Pablo\", \"age\": 71 },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Major Release v0.2.0\nDESCRIPTION: Release of version 0.2.0 with reference to migration guide for breaking changes.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/eslint-config-ponder/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n- [#596](https://github.com/ponder-sh/ponder/pull/596) [`ed7b8c7f881386f718e0f61ae863190c7f160953`](https://github.com/ponder-sh/ponder/commit/ed7b8c7f881386f718e0f61ae863190c7f160953) Thanks [@kyscott18](https://github.com/kyscott18)! - Released 0.2.0, please see the [migration guide](https://ponder.sh/docs/migration-guide) for details.\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Home Component in JSX\nDESCRIPTION: Imports and renders the Home component from the local components directory to serve as the main landing page for the Ponder framework.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Home } from \"@/components/Home\";\n\n<Home />\n```\n\n----------------------------------------\n\nTITLE: Initializing Sample Person Data in JSON\nDESCRIPTION: Sample dataset showing person records with id, name, and age fields used in pagination examples.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/graphql.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"id\": 1, \"name\": \"Barry\", \"age\": 57 },\n  { \"id\": 2, \"name\": \"Lucile\", \"age\": 32 },\n  { \"id\": 3, \"name\": \"Sally\", \"age\": 22 },\n  { \"id\": 4, \"name\": \"Pablo\", \"age\": 71 }\n]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres Database via Command Line\nDESCRIPTION: Instructions for connecting to Ponder's Postgres database using the psql command line tool with a connection string.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/direct-sql.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npsql 'postgresql://username:password@localhost:5432/your_database'\n```\n\n----------------------------------------\n\nTITLE: Postgres Cleanup Script for Post-v0.4.0 Migration\nDESCRIPTION: SQL script to clean up stale tables and views created by v0.3.x Ponder apps after upgrading to v0.4.0. This removes views from the 'ponder' schema, drops the 'ponder_cache' schema, and removes any 'ponder_instance_*' schemas.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/migration-guide.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDO $$\nDECLARE\n    view_name TEXT;\n    schema_name_var TEXT;\nBEGIN\n    -- Drop all views from the 'ponder' schema\n    FOR view_name IN SELECT table_name FROM information_schema.views WHERE table_schema = 'ponder'\n    LOOP\n        EXECUTE format('DROP VIEW IF EXISTS ponder.%I CASCADE', view_name);\n        RAISE NOTICE 'Dropped view \"ponder\".\"%%\"', view_name;\n    END LOOP;\n\n    -- Drop the 'ponder_cache' schema\n    EXECUTE 'DROP SCHEMA IF EXISTS ponder_cache CASCADE';\n    RAISE NOTICE 'Dropped schema \"ponder_cache\"';\n\n    -- Find and drop any 'ponder_instance_*' schemas\n    FOR schema_name_var IN SELECT schema_name AS schema_name_alias FROM information_schema.schemata WHERE schema_name LIKE 'ponder_instance_%'\n    LOOP\n        EXECUTE format('DROP SCHEMA IF EXISTS %I CASCADE', schema_name_var);\n        RAISE NOTICE 'Dropped schema \"%%\"', schema_name_var;\n    END LOOP;\nEND $$;\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level with CLI Option in Bash\nDESCRIPTION: Shows how to set the log level to 'warn' or 'debug' using CLI options when running Ponder.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/logging.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nponder dev --log-level warn\n# or, use the shortcut flag for debug\nponder dev -v\n```\n\n----------------------------------------\n\nTITLE: Running Ponder with Pretty Log Format in Bash\nDESCRIPTION: Demonstrates how to start Ponder with the default 'pretty' log format using a CLI option.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/logging.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nponder start --log-format pretty\n```\n\n----------------------------------------\n\nTITLE: Example of Pretty Log Format Output in Bash\nDESCRIPTION: Shows an example of the output when using the 'pretty' log format in Ponder.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/logging.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n11:54:36 AM INFO  build      Using SQLite database at .ponder/sqlite (default)\n11:54:36 AM INFO  database   Created table 'Account' in 'public.db'\n11:54:36 AM INFO  server     Started listening on port 42069\n11:54:36 AM INFO  historical Started syncing 'optimism' logs for 'weth9' with 0.0% cached\n11:54:36 AM INFO  historical Started syncing 'base' logs for 'weth9' with 0.0% cached\n11:54:36 AM INFO  historical Started syncing 'polygon' logs for 'weth9' with 0.0% cached\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level with Environment Variable in JavaScript\nDESCRIPTION: Sets the PONDER_LOG_LEVEL environment variable to 'trace' level in a .env.local file. This configures Ponder to output trace-level logs, which is the most verbose logging option.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/logging.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPONDER_LOG_LEVEL=trace\n```\n\n----------------------------------------\n\nTITLE: Setup Instructions for Ponder with Next.js\nDESCRIPTION: Steps to configure and run the Ponder indexer with Next.js frontend application. Requires setting up environment variables and running development servers for both Ponder and Next.js components.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-nextjs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. In the `ponder` directory, copy `.env.example` to `.env.local` and add a mainnet RPC URL.\n2. Run the dev script in the `ponder` directory and the `frontend` directory (`npm run dev`)\n```\n\n----------------------------------------\n\nTITLE: Installing Ponder via Package Manager\nDESCRIPTION: Commands to create a new Ponder project using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/packages/create-ponder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init ponder@latest\n# or\npnpm create ponder\n# or\nyarn create ponder\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Forge Script\nDESCRIPTION: Deploys smart contracts using Forge's script functionality. Requires specifying the script file, RPC URL, and private key for deployment.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/foundry/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ forge script script/Counter.s.sol:CounterScript --rpc-url <your_rpc_url> --private-key <your_private_key>\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for Foundry Tools\nDESCRIPTION: Displays help information for Forge, Anvil, and Cast, providing guidance on available commands and options for each tool.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/examples/with-foundry/foundry/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ forge --help\n$ anvil --help\n$ cast --help\n```\n\n----------------------------------------\n\nTITLE: Using Context Utility Type with Specific Event in TypeScript\nDESCRIPTION: Shows how to import and use the Context generic utility type with a specific event name. This returns the context object type with network information, client, database models, and contract details.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/utilities/types.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder, type Context } from \"@/generated\";\n\nfunction helper(context: Context<\"Weth:Deposit\">) {\n  event;\n  // ^? {\n  //      network: { name: \"mainnet\"; chainId: 1; };\n  //      client: ReadonlyClient;\n  //      db: { Account: DatabaseModel<{ id: `0x${string}`; balance: bigint; }> };\n  //      contracts: { weth9: { abi: ...; address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\" } };\n  //    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Non-Indexed Contract Data in Ponder (TypeScript)\nDESCRIPTION: This snippet demonstrates how to read data from a contract that is not indexed in Ponder's configuration. It uses the context.client.readContract method to call the latestRoundData function on a Chainlink price feed contract.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/read-contract-data.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nimport { ChainlinkPriceFeedAbi } from \"../abis/ChainlinkPriceFeed\";\n\nponder.on(\"AaveToken:Mint\", async ({ event, context }) => {\n  const priceData = await context.client.readContract({\n    abi: ChainlinkPriceFeedAbi,\n    address: \"0x547a514d5e3769680Ce22B2361c10Ea13619e8a9\",\n    functionName: \"latestRoundData\",\n  });\n\n  const usdValue = priceData.answer * event.args.amount;\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Hello World API Response\nDESCRIPTION: Shows the plain text response from the /hello endpoint. This represents what users would see when visiting the endpoint in a browser.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/query/api-functions.mdx#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: CLI Options Reference\nDESCRIPTION: Complete list of available options for the create-ponder CLI tool including template selection, package manager choice, and other configuration options\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/create-ponder.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  $ create-ponder <directory> [options]\n\nOptions:\n  -t, --template [id]             Use a template\n  --etherscan [url]               Use the Etherscan template with the specified contract URL\n  --etherscan-api-key [key]       Etherscan API key for Etherscan template\n  --subgraph [id]                 Use the subgraph template with the specified subgraph ID\n  --subgraph-provider [provider]  Specify the subgraph provider\n  --npm                           Use npm as your package manager\n  --pnpm                          Use pnpm as your package manager\n  --yarn                          Use yarn as your package manager\n  --skip-git                      Skip initializing a git repository\n  --skip-install                  Skip installing packages\n  -h, --help                      Display this message\n  -v, --version                   Display version number\n```\n\n----------------------------------------\n\nTITLE: Registering an Indexing Function in Ponder\nDESCRIPTION: Example of how to register an indexing function using the .on() method from the ponder object to process blockchain events. The function receives event data and context as parameters.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/indexing-functions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ponder } from \"@/generated\";\n\nponder.on(\"ContractName:EventName\", async ({ event, context }) => {\n  const { args, log, block, transaction } = event;\n  const { db, network, client, contracts } = context;\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Benchmarks Component in TypeScript/React\nDESCRIPTION: This code snippet imports the Benchmarks component from a local file path. It's likely used to display performance benchmarks comparing Ponder to other solutions.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/why-ponder.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Benchmarks } from \"@/components/Benchmarks\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Ponder Configuration with createConfig\nDESCRIPTION: Basic structure of the ponder.config.ts file using the createConfig function from @ponder/core. The config object must be exported as the default export from ponder.config.ts.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from \"@ponder/core\";\nimport { http } from \"viem\";\n\nexport default createConfig({\n  networks: {\n    // ...\n  },\n  contracts: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating OHLC Schema in Ponder\nDESCRIPTION: Defines a schema for storing hourly OHLC (Open-High-Low-Close) data for candlestick charts using Ponder's schema creation system.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/indexing/time-series.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSchema } from \"@ponder/core\";\n\nexport default createSchema((p) => ({\n  HourBucket: p.createTable({\n    id: p.int(), // Unix timestamp of the start of the hour.\n    open: p.float(),\n    close: p.float(),\n    low: p.float(),\n    high: p.float(),\n    average: p.float(),\n    count: p.int(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Starting Ponder Development Server with npm\nDESCRIPTION: Command to start the Ponder development server using npm. The server automatically reloads when project files are changed and displays console.log statements and errors.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/getting-started/new-project.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Production Server Command Options\nDESCRIPTION: Options for running the production server with one-time build and disabled terminal UI.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder start [options]\n\nStart the production server\n\nOptions:\n  --schema <SCHEMA>          Database schema\n  -p, --port <PORT>          Port for the web server (default: 42069)\n  -H, --hostname <HOSTNAME>  Hostname for the web server (default: \"0.0.0.0\" or \"::\")\n  -h, --help                 display help for command\n```\n\n----------------------------------------\n\nTITLE: Querying Ponder Indexing Status via HTTP\nDESCRIPTION: Demonstrates how to retrieve the indexing status using a simple curl request to the /status endpoint, showing the status of multiple networks including block numbers and timestamps.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/advanced/status.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:42069/status\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mainnet\": {\n    \"ready\": true,\n    \"block\": {\n      \"number\": 20293450,\n      \"timestamp\": 1720823759\n    }\n  },\n  \"base\": {\n    \"ready\": true,\n    \"block\": {\n      \"number\": 17017206,\n      \"timestamp\": 1720823759\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging ERC Token ABIs in TypeScript\nDESCRIPTION: Basic example showing how to merge ERC20 and ERC4626 ABIs using the mergeAbis utility function.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/docs/utilities/merge-abis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeAbis } from \"@ponder/utils\";\nimport { erc20Abi, erc4626Abi } from \"viem\";\n\nconst tokenAbi = mergeAbis([erc20Abi, erc4626Abi]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Opt-Out in Ponder\nDESCRIPTION: Shows how to disable telemetry in Ponder by setting the PONDER_TELEMETRY_DISABLED environment variable to true in a .env.local file.\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/advanced/telemetry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPONDER_TELEMETRY_DISABLED = true\n```\n\n----------------------------------------\n\nTITLE: Running create-ponder with Package Managers\nDESCRIPTION: Commands to create a new Ponder project using different package managers (pnpm, yarn, npm)\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/create-ponder.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create ponder {...options}\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create ponder {...options}\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm create ponder@latest {...options}\n```\n\n----------------------------------------\n\nTITLE: Ponder Schema Generation Command\nDESCRIPTION: Command for generating the GraphQL schema file with basic help option\nSOURCE: https://github.com/ponder-sh/ponder/blob/main/docs/pages/0_6/docs/api-reference/ponder-cli.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUsage: ponder codegen [options]\n\nGenerate the schema.graphql file, then exit\n\nOptions:\n  -h, --help  display help for command\n```"
  }
]