[
  {
    "owner": "schwarzit",
    "repo": "onyx",
    "content": "TITLE: Complete Storybook Story File Example for Vue Component (TypeScript)\nDESCRIPTION: A full example of a Storybook story file for a Vue component, including the meta configuration, multiple stories with different prop configurations, and slot content using render functions.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/stories.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, StoryObj } from '@storybook/vue3'\nimport { h } from 'vue'\n\nimport { OnyxComponent } from './onyx-component.vue'\nimport { OnyxIcon } from '../icon/onyx-icon.vue'\nimport { withNativeEventLogging } from '@/storybook/decorators'\n\n/**\n * OnyxComponent can be used to render something.\n * This is rendered into the \"Info\" panel in Storybook.\n */\nconst meta: Meta<typeof OnyxComponent> = {\n  title: 'Components/OnyxComponent',\n  component: OnyxComponent,\n  argTypes: {\n    modelValue: {\n      control: {\n        type: 'select',\n        options: ['1', '2', '3'],\n      },\n      description: 'Overwrites the automatically inferred description.',\n    },\n  },\n  args: {\n    // Default args that are applied to all Stories\n    disabled: false,\n  },\n  // Log interesting native DOM events\n  decorators: [\n    withNativeEventLogging(['touchend', 'click', 'keyup', 'change']),\n  ],\n}\n\nexport default meta\n\n/**\n * Default story displaying the component in its most basic form.\n */\nexport const Default: StoryObj<typeof OnyxComponent> = {\n  args: {\n    modelValue: '2',\n    label: 'Label',\n  },\n}\n\n/**\n * A variant with disabled state\n */\nexport const Disabled: StoryObj<typeof OnyxComponent> = {\n  args: {\n    ...Default.args,\n    disabled: true,\n  },\n}\n\n/**\n * Story displaying a component with multiple slots\n */\nexport const WithSlots: StoryObj<typeof OnyxComponent> = {\n  args: {\n    // Reuse args from Default Story\n    ...Default.args,\n    // Default slot\n    default: () => [\n      h('div', 'Default Slot Content'),\n      h('div', 'More Content'),\n    ],\n    // Named slot\n    icon: () =>\n      h(OnyxIcon, {\n        name: 'eye',\n      }),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Grid Layout in Onyx\nDESCRIPTION: Basic implementation of the Onyx grid system with a container and grid elements spanning specific column widths. This example shows a form with two inputs spanning 4 columns each and a submit button spanning 16 columns.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/grid.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<main class=\"onyx-grid-container\">\n  <OnyxHeadline is=\"h1\">Page headline</OnyxHeadline>\n\n  <form class=\"onyx-grid\">\n    <OnyxInput class=\"onyx-grid-span-4\" label=\"Input 1\" />\n    <OnyxInput class=\"onyx-grid-span-4\" label=\"Input 2\" />\n    <OnyxButton class=\"onyx-grid-span-16\" label=\"Submit\" type=\"submit\" />\n  </form>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Onyx in Vue Application\nDESCRIPTION: TypeScript code for importing Onyx styles and creating an Onyx instance in a Vue application's main file.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createApp } from \"vue\";\nimport { createOnyx } from \"sit-onyx\";\n\nimport \"sit-onyx/style.css\";\n\n// by default, no onyx styles will have side affects on your global application styles like <body> etc.\n// when building a whole application with onyx, we recommend also importing the following global styles\n// which will apply the correct application background color, font styles etc.:\n// import \"sit-onyx/global.css\";\n\nconst onyx = createOnyx({\n  // if you are using the Vue Router, make sure to pass it here be enable the router integration for onyx\n  // router: createRouter(),\n});\nconst app = createApp(App);\n\napp.use(onyx);\n```\n\n----------------------------------------\n\nTITLE: Installing Onyx with Package Managers\nDESCRIPTION: Commands for installing the Onyx package using different package managers (pnpm, npm, yarn).\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add sit-onyx@beta\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install sit-onyx@beta\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn install sit-onyx@beta\n```\n\n----------------------------------------\n\nTITLE: Implementing User-controlled Theme Switching with Vue Component\nDESCRIPTION: Vue component implementation that allows users to switch between light, dark, and auto color modes. Uses OnyxNavBar, OnyxUserMenu, and OnyxColorSchemeMenuItem components along with the useColorMode composable from @vueuse/core.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/theming.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useColorMode } from \"@vueuse/core\";\nimport { OnyxNavBar, OnyxUserMenu, OnyxColorSchemeMenuItem } from \"sit-onyx\";\nimport { ref } from \"vue\";\n\nconst { store: colorScheme } = useColorMode({ disableTransition: false });\nuseThemeTransition(colorScheme);\n</script>\n\n<template>\n  <OnyxNavBar app-name=\"Example app\">\n    <template #contextArea>\n      <OnyxUserMenu full-name=\"John Doe\">\n        <OnyxColorSchemeMenuItem v-model=\"colorScheme\" />\n      </OnyxUserMenu>\n    </template>\n  </OnyxNavBar>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Executing Matrix Screenshot Test in Playwright (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the executeMatrixScreenshotTest utility to generate and test screenshots for all main states of a component. It creates a screenshot for every combination of rows and columns, combining them into a single grid.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait executeMatrixScreenshotTest<OnyxButtonProps>({\n  component: OnyxButton,\n  columns: [\n    { label: 'Secondary', props: { variant: 'secondary' } },\n    { label: 'Primary', props: { variant: 'primary' } },\n    { label: 'Tertiary', props: { variant: 'tertiary' } },\n  ],\n  rows: [\n    { label: 'Default', props: {} },\n    { label: 'Small', props: { size: 'small' } },\n    { label: 'Large', props: { size: 'large' } },\n    { label: 'Disabled', props: { disabled: true } },\n    { label: 'Loading', props: { loading: true } },\n    { label: 'Icon left', props: { iconLeft: 'search' } },\n    { label: 'Icon right', props: { iconRight: 'chevron-down' } },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding v-model Support for Live Updating Storybook Controls\nDESCRIPTION: Implementation of the withVModelDecorator utility that enables live updates for v-model props in Storybook controls when users interact with components. Adds event handlers automatically to maintain control state.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/storybook-utils.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withVModelDecorator } from \"@sit-onyx/storybook-utils\";\n\nexport default {\n  decorators: [withVModelDecorator()],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Attribute Forwarding in TypeScript\nDESCRIPTION: This snippet defines utility functions for forwarding attributes in Vue components. It includes methods to omit specific attributes, get non-event attributes, and get event attributes. These functions are crucial for implementing root attribute forwarding in Onyx components.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/patterns.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCurrentInstance, nextTick } from \"vue\";\nimport type { ComponentInternalInstance } from \"vue\";\n\n/**\n * Get all attributes except the ones specified\n */\nexport function useOmit(omit: string[] = []) {\n  return useAttrs((attrs) =>\n    Object.fromEntries(\n      Object.entries(attrs).filter(([key]) => !omit.includes(key))\n    )\n  );\n}\n\n/**\n * Get all non-event attributes\n */\nexport function useNonEventAttrs() {\n  return useAttrs((attrs) =>\n    Object.fromEntries(\n      Object.entries(attrs).filter(([key]) => !key.startsWith(\"on\"))\n    )\n  );\n}\n\n/**\n * Get all event attributes\n */\nexport function useEventAttrs() {\n  return useAttrs((attrs) =>\n    Object.fromEntries(\n      Object.entries(attrs).filter(([key]) => key.startsWith(\"on\"))\n    )\n  );\n}\n\nfunction useAttrs(filterFn: (attrs: Record<string, unknown>) => Record<string, unknown>) {\n  const instance = getCurrentInstance();\n  if (!instance) {\n    throw new Error(\"useAttrs() can only be used inside setup() or functional components!\");\n  }\n  return () => {\n    nextTick(() => instance.update());\n    return filterFn(instance.proxy?.$attrs ?? {});\n  };\n}\n\n/**\n * Get the emitter function for a specific event\n */\nexport function useEmitFn(instance: ComponentInternalInstance | null = getCurrentInstance()) {\n  if (!instance) {\n    throw new Error(\"No instance provided and not in setup() context\");\n  }\n  return (name: string, ...args: unknown[]) => instance.emit(name, ...args);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Onyx with Vue Router Integration\nDESCRIPTION: Example of how to initialize Onyx with Vue Router integration using createOnyx(). This enables router integration for all Onyx components.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/sit-onyx/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst onyx = createOnyx({\n  // if you are using the Vue Router, make sure to pass it here be enable the router integration for onyx\n  // router: createRouter(),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Slots in Storybook Stories using Render Functions (TypeScript)\nDESCRIPTION: Demonstrates how to add content to component slots using Vue render functions in Storybook. This example shows how to generate VNodes for default and named slots.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/stories.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Story displaying a component with multiple slots\n */\nexport const WithSlots: StoryObj<typeof OnyxComponent> = {\n  args: {\n    // Reuse args from Default Story\n    ...Default.args,\n    // Default slot\n    default: () => [\n      h('div', 'Default Slot Content'),\n      h('div', 'More Content'),\n    ],\n    // Named slot\n    icon: () =>\n      h(OnyxIcon, {\n        name: 'eye',\n      }),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @sit-onyx/nuxt Module in Nuxt Project\nDESCRIPTION: This command installs the @sit-onyx/nuxt module in a Nuxt application using the Nuxt CLI tool 'nuxi'. It simplifies the process of adding Onyx integration to a Nuxt project.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/nuxt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module add @sit-onyx/nuxt\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Router with Onyx in a Vue application\nDESCRIPTION: This code demonstrates how to configure Onyx with Vue Router by passing the router instance to the createOnyx() function. This setup enables router integration features like automatic handling of internal links and active state management for navigation components.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/router.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vue\";\nimport { createOnyx } from \"sit-onyx\";\nimport { createRouter } from \"vue-router\";\n\nconst router = createRouter({\n  // your router options\n});\n\nconst onyx = createOnyx({ router });\n\nconst app = createApp(App);\napp.use(router).use(onyx);\n```\n\n----------------------------------------\n\nTITLE: Using createCombobox Composable in Vue\nDESCRIPTION: This Vue component example demonstrates how to import and use the createCombobox composable from the @sit-onyx/headless package.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/headless.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { createCombobox } from \"@sit-onyx/headless\";\n\nconst {\n  elements: {\n    ...\n  }\n } = createCombobox();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Breakpoint Mixins for Media Queries in SCSS\nDESCRIPTION: This example demonstrates how to use the Onyx breakpoint mixins for creating responsive styles with media queries. It shows usage for both maximum and minimum width scenarios.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/breakpoints.md#2025-04-23_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sit-onyx/breakpoints.scss\";\n\n.some-class {\n  @include breakpoints.screen(max, sm) {\n    // your styles for md screens and smaller\n  }\n\n  @include breakpoints.screen(min, md) {\n    // your styles for md screens and larger\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using toHaveScreenshot for Standalone Tests in Playwright (TypeScript)\nDESCRIPTION: This snippet shows how to use the toHaveScreenshot assertion for standalone tests or more complicated setups in Playwright component tests. It demonstrates capturing a screenshot of a rendered component and comparing it to a reference image.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntest('renders correctly', async ({ mount }) => {\n  const component = await mount(OnyxButton, {\n    props: {\n      variant: 'primary',\n      size: 'large',\n      disabled: true,\n    },\n  })\n  await expect(component).toHaveScreenshot('button-primary-large-disabled.png')\n})\n```\n\n----------------------------------------\n\nTITLE: Figma Variables Import Implementation\nDESCRIPTION: TypeScript implementation for importing Figma variables and generating CSS files. Demonstrates fetching variables from Figma API, parsing them, and generating CSS output files.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/figma-utils.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport { fetchFigmaVariables, generateAsCSS, parseFigmaVariables } from \"@sit-onyx/figma-utils\";\n\nconst FILE_KEY = \"your-figma-file-key\";\nconst FIGMA_TOKEN = \"your-figma-access-token\";\n\n// fetch variables from Figma API\nconst data = await fetchFigmaVariables(FILE_KEY, FIGMA_TOKEN);\n\n// parse variables into a readable and normalized format\n// note: variables and collections that are set to \"Hide from publishing\" in Figma\n// will not be parsed. If you face missing variables, please ask your UX designer\n// to check the Figma settings\nconst parsedVariables = parseFigmaVariables(data);\n\n// generate .css files for every Figma mode\nparsedVariables.forEach((mode) => {\n  // get .css file content\n  const fileContent = generateAsCSS(mode);\n\n  // write content as a file\n  const filename = mode.modeName ? `variables-${mode.modeName}.css` : \"variables.css\";\n  const fullPath = path.join(process.cwd(), filename);\n  fs.writeFileSync(fullPath, fileContent);\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Onyx with vue-i18n Integration\nDESCRIPTION: Main configuration file showing how to integrate Onyx with vue-i18n, including locale setup and message handling.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/i18n.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOnyx } from \"sit-onyx\";\nimport onyxDeDE from \"sit-onyx/locales/de-DE.json\";\n\n// your project translation setup\nimport { useI18n } from \"vue-i18n\";\nimport enUS from \"./i18n/locales/en-US.json\";\nimport deDE from \"./i18n/locales/de-DE.json\";\n\nconst i18n = createI18n({\n  legacy: false,\n  locale: \"en-US\",\n  messages: { \"en-US\": enUS, \"de-DE\": deDE },\n});\n\nconst onyx = createOnyx({\n  i18n: {\n    // The onyx locale will be updated whenever your vue-i18n locale changes\n    locale: i18n.global.locale,\n    // make sure that the key for each language is the same that you are using\n    // for your vue-i18n JSON files\n    messages: { \"de-DE\": onyxDeDE },\n  },\n});\n\ncreateApp(App).use(i18n).use(onyx).mount(\"#app\");\n```\n\n----------------------------------------\n\nTITLE: Using adjustSizeToAbsolutePosition for Capturing Absolute Positioned Elements\nDESCRIPTION: Example showing how to use the adjustSizeToAbsolutePosition utility to ensure that absolutely positioned elements like tooltips and flyouts are included in screenshots. The function adjusts the component's size to fit all absolute content.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/playwright-utils.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { adjustSizeToAbsolutePosition } from \"@sit-onyx/playwright-utils\";\nimport { test, expect } from \"@playwright/experimental-ct-vue\";\nimport MyComponent from \"./MyComponent.vue\";\n\ntest(\"my example test\", async ({ mount }) => {\n  const component = await mount(<MyComponent />);\n\n  // open/show absolute positioned content, e.g. a tooltip\n  await component.getByRole(\"tooltip\").click();\n\n  // adjust component size to include tooltip so its shown/included in the screenshot\n  await adjustSizeToAbsolutePosition(component);\n\n  await expect(component).toHaveScreenshot(\"screenshot.png\");\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Theme CSS in TypeScript Application\nDESCRIPTION: Shows how to import Lidl theme CSS files for both light and dark variants in a main.ts file. The theme imports must come after the general Onyx styles import.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/theming.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// import \"sit-onyx/styles.css\";\n// make sure to import the theme AFTER the general \"sit-onyx/styles.css\" file!\nimport \"sit-onyx/themes/lidl-light.css\";\nimport \"sit-onyx/themes/lidl-dark.css\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart.js with Onyx Plugin\nDESCRIPTION: Core setup code for registering Chart.js plugins and the custom Onyx plugin. Required for basic chart functionality.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/chartjs-plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Chart, registerables } from \"chart.js\";\nimport { registerOnyxPlugin } from \"@sit-onyx/chartjs-plugin\";\nimport \"sit-onyx/style.css\";\n\n// register default Chart.js plugins\nChart.register(...registerables);\n\n// register custom onyx plugin\nregisterOnyxPlugin(Chart);\n```\n\n----------------------------------------\n\nTITLE: Using Cascade Layers for Component Styling in SCSS\nDESCRIPTION: Example of implementing component styles using the layers.component() mixin which puts contained rules into the onyx.component layer and normalizes stylings. This approach leverages CSS Cascade Layers to simplify style combination and allow easy overriding by users.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/styling.md#2025-04-23_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@include layers.component() {\n  .o-textfield {\n    display: flex;\n    flex-direction: column;\n    gap: var(--o-spacing-xs);\n\n    &__label {\n      cursor: pointer;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Integration in Nuxt Config\nDESCRIPTION: Shows how to configure the integration between @sit-onyx/nuxt and @nuxtjs/i18n modules. The example defines locales and sets up a mapping for Onyx's built-in translations.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/nuxt.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\"@sit-onyx/nuxt\", \"@nuxtjs/i18n\"],\n  i18n: {\n    defaultLocale: \"en_US\",\n    locales: [\n      { code: \"en_US\", file: \"en-US.json\", name: \"English (US)\" },\n      { code: \"de\", file: \"de-DE.json\", name: \"Deutsch\" },\n    ],\n  },\n  onyx: {\n    i18n: {\n      registerLocales: {\n        \"de-DE\": \"de-DE\",\n        en_US: \"en-US\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Components with Onyx\nDESCRIPTION: Example of using Onyx layout components to structure a Vue application.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/index.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { OnyxAppLayout, OnyxPageLayout, OnyxNavBar } from \"sit-onyx\";\n</script>\n\n<template>\n  <OnyxAppLayout>\n    <template #navBar>\n      <OnyxNavBar app-name=\"My app\" />\n    </template>\n\n    <OnyxPageLayout>\n      <div class=\"onyx-grid-container\">Your page content here...</div>\n    </OnyxPageLayout>\n  </OnyxAppLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Processing Team Data in TypeScript\nDESCRIPTION: This snippet sets up the data structure for team members, including core members, contributors, and bots. It imports data, defines sorting functions, and applies custom overrides to enhance the display of team members.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/about/team.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { data } from \"./team.data\";\nimport {\n  VPTeamPage,\n  VPTeamPageTitle,\n  VPTeamMembers,\n  VPTeamPageSection\n} from 'vitepress/theme';\n\nconst sortByContributions = (a, b) =>   b.contributions - a.contributions;\nconst sortByOverride = (a, b) => overrides.findIndex(o => o.login === a.login) - overrides.findIndex(o => o.login === b.login);\n\n// https://vitepress.dev/reference/default-theme-team-page#show-team-members-in-a-page\n// Add your full name here, if you want it to be shown\nconst overrides = [\n  {\n    login: \"mj-hof\",\n    name: 'Martin Hofmann',\n    core: true,\n    title: 'Product Owner',\n    org: \"Schwarz IT\",\n    orgLink: \"https://it.schwarz/\"\n  },\n  // ... (other override entries)\n];\n\nconst mapped = data.contributors.map((c) => ({\n  ...c,\n  avatar: c.avatar_url,\n  name: c.login,\n  links: [\n    { icon: 'github', link: c.html_url },\n  ],\n  ...overrides.find(n => c.login === n.login)\n}));\n\n// add overrides if they do not exist in the contributors\noverrides.forEach(override => {\n  if (!mapped.find(contributor => contributor.login === override.login)) {\n    mapped.push({ avatar: `https://github.com/${override.login}.png`, ...override});\n  }\n})\n\nconst coreMembers = mapped.filter(m => m.core).sort(sortByOverride);\nconst bots = mapped.filter(m => m.type === \"Bot\").sort(sortByContributions);\nconst contributors = mapped.filter(m => !bots.includes(m) && !coreMembers.includes(m)).sort(sortByContributions);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Extending Onyx Translations with TypeScript\nDESCRIPTION: Demonstrates how to extend existing Onyx translations for custom language support. The example imports the English US locale and overrides specific keys while preserving others.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/nuxt.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport enUS from \"sit-onyx/locales/en-US.json\";\n\nexport default {\n  foo: \"bar\",\n  onyx: { ...enUS, optional: \"Custom optional\" },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Families with CSS Variables\nDESCRIPTION: CSS snippet demonstrating how to override the default Onyx font families by setting custom CSS variables that will be picked up by all Onyx components.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/typography.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --onyx-font-family: \"My custom font family\", sans-serif;\n  --onyx-font-family-mono: \"My custom mono font family\", monospace;\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Matrix Screenshots in Component Tests\nDESCRIPTION: Example showing how to capture a matrix screenshot for a component with different states. The test creates a matrix with columns representing colors and rows representing component states like hover and focus.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/playwright-utils.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { executeMatrixScreenshotTest } from \"./playwright\";\nimport { test } from \"@playwright/experimental-ct-vue\";\n\ntest.describe(\"Screenshot tests\", () => {\n  executeMatrixScreenshotTest({\n    name: \"Button (default)\",\n    columns: [\"primary\", \"neutral\", \"danger\"],\n    rows: [\"default\", \"hover\", \"active\", \"focus-visible\"],\n    component: (column) => {\n      return <OnyxButton label=\"Button\" color={column} />;\n    },\n    hooks: {\n      beforeEach: async (component, page, column, row) => {\n        if (row === \"hover\") await component.hover();\n        if (row === \"focus-visible\") await page.keyboard.press(\"Tab\");\n        if (row === \"active\") await page.mouse.down();\n      },\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Preview with createPreview Utility\nDESCRIPTION: Example of using the createPreview utility in Storybook's preview.ts file to configure enhanced features for Onyx components. This setup includes improved controls, Vue code highlighting, dark mode support, and custom theming.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/storybook-utils.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPreview } from \"@sit-onyx/storybook-utils\";\nimport \"@sit-onyx/storybook-utils/style.css\";\n\nconst preview = {\n  // we need to destructure here because as of Storybook 7.6\n  // it can not statically analyze that the `preview` variable is an object\n  ...createPreview({\n    // optional overrides...\n  }),\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Using Breakpoint SCSS Mixins for Responsive Design\nDESCRIPTION: Example of using the breakpoint SCSS mixin provided by the theme to create responsive styles based on VitePress breakpoints.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/vitepress-theme.md#2025-04-23_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use \"@sit-onyx/vitepress-theme/mixins.scss\";\n\n.some-class {\n  @include mixins.breakpoint(max, m) {\n    // your styles for m breakpoint and smaller\n  }\n\n  @include mixins.breakpoint(min, m) {\n    // your styles for m breakpoint and larger\n  }\n\n  // the breakpoint is inclusive so if you e.g. want to use\n  // min and max for the same breakpoint you should\n  // define an offset for either min or max\n  @include mixins.breakpoint(max, xl) {\n    // your styles for smaller and equal xl breakpoint\n  }\n\n  @include mixins.breakpoint(min, xl, 1) {\n    // your styles for greater than xl breakpoint (exclusive)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Onyx Grid with Max Width and Centering\nDESCRIPTION: Implementation of the Onyx grid with maximum width constraint and centering. This example uses 'onyx-grid-max-md' to limit width at the 'md' breakpoint (1440px) and 'onyx-grid-center' to center the content.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/grid.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"onyx-grid-max-md onyx-grid-center\">\n  <OnyxNavBar app-name=\"Example\" />\n\n  <main class=\"onyx-grid-container\">\n    <OnyxHeadline is=\"h1\">Page headline</OnyxHeadline>\n\n    <form class=\"onyx-grid\">\n      <OnyxInput class=\"onyx-grid-span-4\" label=\"Input 1\" />\n      <OnyxInput class=\"onyx-grid-span-4\" label=\"Input 2\" />\n      <OnyxButton class=\"onyx-grid-span-16\" label=\"Submit\" type=\"submit\" />\n    </form>\n  </main>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Define Custom Language Translation Type\nDESCRIPTION: Example of creating a custom language translation object with TypeScript type safety.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/i18n.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnyxTranslations } from \"sit-onyx\";\n\nconst myCustomLanguage: OnyxTranslations = {\n  // add your translations here...\n  someMessage: \"Hello World\",\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Queries with Onyx Breakpoint Mixins in SCSS\nDESCRIPTION: This snippet illustrates how to use Onyx breakpoint mixins for container queries. It includes examples for different scenarios, including using offsets for exclusive ranges.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/breakpoints.md#2025-04-23_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@use \"sit-onyx/breakpoints.scss\";\n\n.some-class {\n  container-type: size;\n\n  @include breakpoints.container(max, sm) {\n    // your styles for md containers and smaller\n  }\n\n  @include breakpoints.container(min, md) {\n    // your styles for md containers and larger\n  }\n\n  // the breakpoint is inclusive so if you e.g. want to use\n  // min and max for the same breakpoint you should\n  // define an offset for either min or max\n  @include breakpoints.container(max, xl) {\n    // your styles for smaller and equal xl containers\n  }\n\n  @include breakpoints.container(min, xl, $offset: 1) {\n    // your styles for greater than xl containers (exclusive)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Density in Onyx Components via Properties and CSS Classes\nDESCRIPTION: This snippet demonstrates two equivalent ways to apply density settings to Onyx components: using the density property or directly applying CSS classes. The three supported density levels are compact, default, and cozy.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/density.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<OnyxComponent density=\"compact\" />\n<!-- is equivalent to -->\n<OnyxComponent class=\"onyx-density-compact\" />\n\n<OnyxComponent density=\"default\" />\n<!-- is equivalent to -->\n<OnyxComponent class=\"onyx-density-default\" />\n\n<OnyxComponent density=\"cozy\" />\n<!-- is equivalent to -->\n<OnyxComponent class=\"onyx-density-cozy\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Onyx Translations in JSON\nDESCRIPTION: Example of overriding default Onyx translations in a locale file. The sample shows how to customize the 'optional' translation text by defining it under the 'onyx' namespace.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/nuxt.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": \"bar\",\n  \"onyx\": {\n    \"optional\": \"optional\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Matrix Screenshot Test Utility\nDESCRIPTION: Configuration to create a matrix screenshot test utility. This setup initializes the useMatrixScreenshotTest function and exports the executeMatrixScreenshotTest function for use in test files.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/playwright-utils.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMatrixScreenshotTest } from \"@sit-onyx/playwright-utils\";\n\nexport const { executeMatrixScreenshotTest } = useMatrixScreenshotTest({\n  // optionally provide global/default options\n});\n```\n\n----------------------------------------\n\nTITLE: Using Onyx Components in Vue Template\nDESCRIPTION: Example of how to use an Onyx component (OnyxButton) in a Vue template.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/index.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { OnyxButton } from \"sit-onyx\";\n</script>\n\n<template>\n  <OnyxButton label=\"Click me\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Accessibility Hook for Matrix Screenshots\nDESCRIPTION: Implementation of a global accessibility testing hook for matrix screenshots. This setup creates an AxeBuilder with WCAG standards and adds accessibility checks to each matrix cell.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/playwright-utils.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMatrixScreenshotTest } from \"@sit-onyx/playwright-utils\";\n\n/**\n * Creates an `AxeBuilder` with common configuration that should be used for accessibility tests.\n *\n * @see https://playwright.dev/docs/accessibility-testing#creating-a-fixture\n */\nexport const createAxeBuilder = (page: Page) => {\n  return new AxeBuilder({ page }).withTags([\"wcag2a\", \"wcag2aa\", \"wcag21a\", \"wcag21aa\"]);\n};\n\nexport const { executeMatrixScreenshotTest } = useMatrixScreenshotTest<MatrixScreenshotHookContext>({\n  defaults: {\n    hooks: {\n      afterEach: async (component, page, column, row) => {\n        // ARRANGE (execute accessibility tests)\n        const axeBuilder = createAxeBuilder(page);\n        const accessibilityScanResults = await axeBuilder.analyze();\n\n        // ASSERT\n        expect(\n          accessibilityScanResults.violations,\n          `should pass accessibility checks for ${column} ${row}`,\n        ).toEqual([]);\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Onyx CSS Globally\nDESCRIPTION: Example of overriding Onyx styles globally in a CSS file.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/index.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.onyx-input__label {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Page with VitePress Components in HTML\nDESCRIPTION: This snippet displays the team page using VitePress components. It includes sections for core members, contributors, and bots, utilizing the processed data from the TypeScript setup.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/about/team.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<main>\n  <VPTeamPage style=\"margin-top: 0;\">\n    <VPTeamPageTitle>\n      <template #title>Meet the team 👋</template>\n      <template #lead>\n        onyx is maintained by a dedicated team at <a href=\"https://it.schwarz\">Schwarz IT</a>. Below you will find the core members of our team.\n        <br><br>\n        Are you looking for a bug report or feature request?\n        <br><br>\n        Then please use our <a href=\"https://github.com/SchwarzIT/onyx/issues\">GitHub issues</a>.\n        For general Q&A, announcements and polls feel free to visit our community space via <a href=\"https://github.com/SchwarzIT/onyx/discussions/categories/q-a\">GitHub discussions</a>.\n      </template>\n    </VPTeamPageTitle>\n    <VPTeamMembers size=\"medium\" :members=\"coreMembers\" />\n    <VPTeamPageSection>\n      <template #title>Thank you to all contributors 🙏</template>\n      <template #members>\n        <VPTeamMembers size=\"small\" :members=\"contributors\" />\n      </template>\n    </VPTeamPageSection>\n    <VPTeamPageSection>\n      <template #title>Our hardworking bots 🤖</template>\n      <template #members>\n        <VPTeamMembers size=\"small\" :members=\"bots\" />\n      </template>\n    </VPTeamPageSection>\n  </VPTeamPage>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Event Logging in Storybook\nDESCRIPTION: Implementation of the withNativeEventLogging utility to document and log native DOM events in Storybook. This adds a dedicated \"Relevant HTML events\" section to the component documentation.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/storybook-utils.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withNativeEventLogging } from \"@sit-onyx/storybook-utils\";\n\nconst meta: Meta<typeof OnyxButton> = {\n  title: \"Buttons/Button\",\n  component: OnyxButton,\n  argTypes: {\n    somethingElse: { ...someOtherArgType },\n    ...withNativeEventLogging([\"onClick\"]),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Figma Icons Import Implementation\nDESCRIPTION: TypeScript implementation for importing icons from Figma. Shows how to fetch components, parse them into icons, fetch SVG content, and save files with metadata.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/figma-utils.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport { fetchFigmaComponents, optimizeSvg } from \"@sit-onyx/figma-utils\";\n\nconst FILE_KEY = \"your-figma-file-key\";\nconst FIGMA_TOKEN = \"your-figma-access-token\";\nconst ICON_PAGE_ID = \"your-page-id-that-contains-the-icons\"; // e.g. \"1:345\"\n\n// fetch icon components from Figma API\nconst data = await fetchFigmaComponents(FILE_KEY, FIGMA_TOKEN);\n\n// parse components into a normalized format\nconst parsedIcons = parseComponentsToIcons({\n  components: data.meta.components,\n  pageId: ICON_PAGE_ID,\n});\n\n// fetch actual SVG content of the icons\nconst svgContents = await fetchFigmaSVGs(\n  FILE_KEY,\n  parsedIcons.map(({ id }) => id),\n  FIGMA_TOKEN,\n);\n\nconst outputDirectory = process.cwd();\n\n// write .svg files for all icons\nawait Promise.all(\n  parsedIcons.map((icon) => {\n    const content = optimizeSvg(svgContents[icon.id]);\n    const fullPath = path.join(outputDirectory, `${icon.name}.svg`);\n    return writeFile(fullPath, content, \"utf-8\");\n  }),\n);\n\n// optionally write file with metadata (categories, alias names etc.)\nawait writeIconMetadata(path.join(outputDirectory, \"metadata.json\"), parsedIcons);\n```\n\n----------------------------------------\n\nTITLE: Setting up Onyx Color Palettes Component in Vue\nDESCRIPTION: This snippet imports and sets up the OnyxColorPalettes Vue component using the <script setup> syntax in TypeScript. The component displays the color palettes with clickable color values for copying CSS variables.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/variables/colors.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport OnyxColorPalettes from \"../.vitepress/components/OnyxColorPalettes.vue\";\n</script>\n\n<OnyxColorPalettes />\n```\n\n----------------------------------------\n\nTITLE: Creating Default Story for a Component in Storybook (TypeScript)\nDESCRIPTION: Shows how to create a basic Story object for a component with TypeScript typing. This example defines the Default story with arguments that will be passed as props to the component.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/stories.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Default story displaying the component in its most basic form.\n */\nexport const Default: StoryObj<typeof OnyxComponent> = {\n  args: {\n    modelValue: '2',\n    label: 'Label',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Density-Aware Spacing Examples with Vue\nDESCRIPTION: Vue template code that renders the density-aware spacing variables. It includes a DensitySelection component for changing the density and dynamically displays the corresponding spacing variables through the OnyxSpacingVariables component.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/variables/spacings.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<DensitySelection v-model=\"selectedDensity\" style=\"margin-bottom: var(--onyx-spacing-lg)\" />\n\n<!-- the key is needed to update the displayed CSS variable value when the density changes -->\n<div :class=\"`onyx-density-${selectedDensity}`\" :key=\"selectedDensity\">\n  <OnyxSpacingVariables :variables=\"densities\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Structuring Component Code in Onyx\nDESCRIPTION: This snippet outlines the recommended structure for organizing code within Onyx components. It specifies the order in which different elements should appear in the component file.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/technical-vision.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. types / props / emits\n2. composables\n3. refs\n4. computed / functions\n5. watchers\n```\n\n----------------------------------------\n\nTITLE: Importing Fonts in TypeScript\nDESCRIPTION: Example showing how to import the recommended font families in a main TypeScript file to make them available across the application.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/typography.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport \"@fontsource-variable/source-code-pro\";\nimport \"@fontsource-variable/source-sans-3\";\n```\n\n----------------------------------------\n\nTITLE: Creating Action Logger Wrapper for Child Components\nDESCRIPTION: Example of using the createActionLoggerWrapper utility to log events from slotted child components in Storybook. This wraps child components to enable action logging for their emitted events.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/storybook-utils.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createActionLoggerWrapper } from \"@sit-onyx/storybook-utils\";\nimport _ChildComponent from \"./_ChildComponent.vue\";\n\n// Usual story setup...\n\n/**\n * Wrapped child component\n */\nconst ChildComponent = createActionLoggerWrapper(_ChildComponent, [\"onChildEmit\"]);\n\n/**\n * Use in a story like you usually would:\n */\nexport const Default = {\n  args: {\n    propName: 'Value'\n    someSlot: () => h(ChildComponent, { label: \"Item 1\" }),\n  },\n} satisfies Story;\n```\n\n----------------------------------------\n\nTITLE: Importing Color Theme Components in Vue\nDESCRIPTION: This Vue script imports components for displaying color theme definitions and horizontal color strips. These components are likely used to visualize the color scheme in the documentation.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/basics/colors.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport OnyxColorThemeDefinitions from \"../.vitepress/components/OnyxColorThemeDefinitions.vue\";\nimport HorizontalColorStripCard from \"../.vitepress/components/HorizontalColorStripCard.vue\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Onyx Breakpoints in TypeScript\nDESCRIPTION: This code snippet shows how to import and use Onyx breakpoint values in TypeScript. It demonstrates logging the pixel value for the 'sm' breakpoint.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/breakpoints.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ONYX_BREAKPOINTS } from \"sit-onyx\";\n\nconsole.log(`Width for sm breakpoint is: ${ONYX_BREAKPOINTS.sm}px`);\n```\n\n----------------------------------------\n\nTITLE: DataGrid Feature Configuration Example\nDESCRIPTION: Sample showing the updated configuration syntax for DataGrid resizing feature, demonstrating how to disable resizing for specific columns.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/sit-onyx/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst withResizing = DataGridFeatures.useResizing<TEntry>({\n  columns: {\n    age: {\n      enabled: false,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue component for displaying Onyx border radius variables\nDESCRIPTION: This snippet sets up a Vue component with TypeScript to display border radius variables available in the Onyx design system. It imports the OnyxBorderRadiusVariables component and renders it in the page.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/variables/borders.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport OnyxBorderRadiusVariables from \"../.vitepress/components/OnyxBorderRadiusVariables.vue\"\n</script>\n\n<OnyxBorderRadiusVariables />\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Theme in index.ts\nDESCRIPTION: Setup code for initializing the onyx theme in the VitePress configuration file.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/vitepress-theme.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport OnyxTheme from \"@sit-onyx/vitepress-theme\";\n\n// if you use/override custom styles, they must be imported after the theme, e.g.\n// import \"./styles.css\";\n\nexport default OnyxTheme;\n```\n\n----------------------------------------\n\nTITLE: Importing Package Version from VitePress Theme\nDESCRIPTION: Script setup to import package.json version from the VitePress theme package.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/vitepress-theme.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport packageJson from \"../../../../../packages/vitepress-theme/package.json\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Theming Data in Vue Script Setup\nDESCRIPTION: Script setup code that imports theme data from an external file for use in the theming documentation page.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/theming.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { data } from './theming.data';\n```\n\n----------------------------------------\n\nTITLE: Customizing Onyx CSS in Vue Component\nDESCRIPTION: Example of overriding Onyx styles within a Vue component using scoped styles.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/index.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<style scoped>\n:deep(.onyx-input__label) {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Accessibility Rules in Matrix Tests\nDESCRIPTION: Example showing how to disable specific accessibility rules for a matrix screenshot test. This demonstrates providing a context object with disabledAccessibilityRules to skip the color-contrast rule.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/playwright-utils.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { executeMatrixScreenshotTest } from \"./playwright\";\nimport { test } from \"@playwright/experimental-ct-vue\";\n\ntest.describe(\"Screenshot tests\", () => {\n  executeMatrixScreenshotTest({\n    name: \"Button (default)\",\n    context: {\n      disabledAccessibilityRules: [\"color-contrast\"],\n    },\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Storybook Story Configuration\nDESCRIPTION: Storybook story setup for component documentation and testing\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/index.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meta, StoryObj } from \"@storybook/vue3\";\nimport OnyxExampleComponent from \"./OnyxExampleComponent.vue\";\n\nconst meta: Meta<typeof OnyxExampleComponent> = {\n  title: \"Basic/ExampleComponent\",\n  component: OnyxExampleComponent,\n};\n\nexport default meta;\ntype Story = StoryObj<typeof OnyxExampleComponent>;\n\nexport const Default = {\n  args: {\n    // you can define component props and slots here to create your component examples, e.g.:\n    // label: \"Hello World\",\n  },\n} satisfies Story;\n```\n\n----------------------------------------\n\nTITLE: Customize Single Message Translation\nDESCRIPTION: Example showing how to override a specific translation message in Onyx.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/i18n.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport enUS from \"sit-onyx/locales/en-US.json\";\n\nenUS.someMessage = \"Custom translation\";\n\nconst onyx = createOnyx({\n  i18n: {\n    // ...\n    messages: { \"en-US\": enUS },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for onyx.web Home Page\nDESCRIPTION: Vue script setup block that imports custom components for the onyx.web home page and data required for component rendering. The code demonstrates how to use TypeScript with Vue components in a VitePress site.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/index.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport OnyxHomePage from \"./.vitepress/components/OnyxHomePage.vue\"\nimport OnyxPartners from \"./.vitepress/components/OnyxPartners.vue\"\nimport { data } from \"./index.data\";\n</script>\n\n<OnyxHomePage :data=\"data\" />\n\n<OnyxPartners />\n```\n\n----------------------------------------\n\nTITLE: Rendering OnyxShadowVariables Component in Vue Template\nDESCRIPTION: Template code that renders the OnyxShadowVariables component to display shadow variable information to the user.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/variables/shadows.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<OnyxShadowVariables />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Density Styles in SCSS\nDESCRIPTION: Example demonstrating the use of density mixins for cases where default spacing variables don't provide adequate adjustments for different density contexts. These mixins apply special style rules for specific density settings.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/styling.md#2025-04-23_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@include density.compact {\n  // custom styles for compact density\n}\n\n@include density.comfortable {\n  // custom styles for comfortable density\n}\n```\n\n----------------------------------------\n\nTITLE: Setup Language Name Formatting with TypeScript\nDESCRIPTION: Script to initialize language name formatting using Intl.DisplayNames for consistent language name display.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/i18n.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { data } from './languages.data';\n\nconst languageNameFormatter = new Intl.DisplayNames([\"en-US\"], { type: \"language\" });\nconst getLanguageName = (code: string) => languageNameFormatter.of(code);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Custom CSS in TypeScript\nDESCRIPTION: TypeScript example showing how to import a custom CSS file with font family overrides after importing the custom fonts.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/typography.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// import your custom fonts here...\nimport \"custom.css\";\n```\n\n----------------------------------------\n\nTITLE: Supporting Disabled Accessibility Rules in Matrix Tests\nDESCRIPTION: Configuration for disabling specific accessibility rules for individual matrix screenshot tests. This setup adds a context type with disabledAccessibilityRules field that can be used in test configurations.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/playwright-utils.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMatrixScreenshotTest } from \"@sit-onyx/playwright-utils\";\n\nexport type MatrixScreenshotHookContext = {\n  /**\n   * Rules to disable when performing the accessibility tests.\n   * **IMPORTANT**: Should be avoided! If used, please include a comment why it is needed.\n   *\n   * @see https://playwright.dev/docs/accessibility-testing#disabling-individual-scan-rules\n   */\n  disabledAccessibilityRules?: string[];\n};\n\nexport const { executeMatrixScreenshotTest } = useMatrixScreenshotTest<MatrixScreenshotHookContext>({\n  defaults: {\n    hooks: {\n      afterEach: async (component, page, column, row, context) => {\n        // ARRANGE (execute accessibility tests)\n        const axeBuilder = createAxeBuilder(page);\n\n        if (context?.disabledAccessibilityRules?.length) {\n          axeBuilder.disableRules(\n            DEFAULT_DISABLED_AXE_RULES.concat(context.disabledAccessibilityRules),\n          );\n        }\n\n        const accessibilityScanResults = await axeBuilder.analyze();\n        // ...\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt with Onyx Layer\nDESCRIPTION: TypeScript configuration to extend Nuxt application with the onyx documentation layer.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/nuxt-docs.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: [\"@sit-onyx/nuxt-docs\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme in Nuxt Config\nDESCRIPTION: Demonstrates how to configure the Onyx theme in the Nuxt configuration file. The example shows setting the theme to 'lidl' instead of the default 'onyx' theme.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/nuxt.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\"@sit-onyx/nuxt\"],\n  onyx: {\n    theme: \"lidl\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Component Template\nDESCRIPTION: Boilerplate code for creating a new Onyx component including TypeScript setup, density support, and SCSS styling\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/index.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport type { OnyxExampleComponentProps } from \"./types\";\nimport { useDensity } from \"../../composables/density\";\n\nconst props = defineProps<OnyxExampleComponentProps>();\n\nconst { densityClass } = useDensity(props);\n</script>\n\n<template>\n  <div :class=\"['onyx-component', 'onyx-example-component', densityClass]\">\n    Place your component HTML here...\n  </div>\n</template>\n\n<style lang=\"scss\">\n@use \"../../styles/mixins/layers.scss\";\n\n.onyx-example-component {\n  @include layers.component() {\n    // component styles here...\n    font-family: var(--onyx-font-family);\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing Typography Token Arrays in TypeScript for Onyx Documentation\nDESCRIPTION: This TypeScript setup code defines arrays of typography tokens for headlines, paragraphs, and links used in the Onyx documentation. The headlines array creates six typography tokens for h1-h6 elements, while paragraph and link arrays define large, default, and small size variants with their appropriate HTML tags.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/basics/typography.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst headlineTokens = Array.from<unknown, TypographyToken>({ length: 6 }, (_, index) => {\n  const name = `h${index + 1}`;\n  return { name, htmlTag: name };\n});\n\nconst paragraphTokens: TypographyToken[] = [\n  { name: \"paragraph-large\", textSize: \"large\", htmlTag: \"p\" },\n  { name: \"paragraph-default\", textSize: \"default\", htmlTag: \"p\" },\n  { name: \"paragraph-small\", textSize: \"small\", htmlTag: \"p\" },\n];\n\nconst linkTokens: TypographyToken[] = [\n  { name: \"link-large\", textSize: \"large\", htmlTag: \"a\" },\n  { name: \"link-default\", textSize: \"default\", htmlTag: \"a\" },\n  { name: \"link-small\", textSize: \"small\", htmlTag: \"a\" },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Done Criteria Table in Markdown\nDESCRIPTION: A markdown table listing the criteria for considering a component ticket 'done' in the Onyx project. It specifies responsibilities for UX/UI designers, developers, and product owners across different aspects of ticket completion.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/definition-of-done.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Description                                                                                       | UX/UI | DEV | PO  |\n| :------------------------------------------------------------------------------------------------ | :---: | :-: | :-: |\n| The acceptance criteria are fulfilled                                                             |  🧑‍🎨   | 🧑‍💻  |  -  |\n| The features are covered by component tests <br> _=> Screenshot tests are updated_                |   -   | 🧑‍💻  |  -  |\n| Known open points are either fixed or a ticket was created                                        |   -   | 🧑‍💻  | 🧑‍💼  |\n| The **onyx** version was updated and the documentation is deployed <br> _=> Docs approved by DEV_ |   -   | 🧑‍💻  |  -  |\n| StoryBook can show the feature <br> _=> approved by UX/UI_                                        |  🧑‍🎨   | 🧑‍💻  |  -  |\n| Our [guidelines](/principles/technical-vision) were followed                                      |  🧑‍🎨   | 🧑‍💻  |  -  |\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Dataset Colors\nDESCRIPTION: Example showing how to set custom colors for chart datasets using the getDatasetColors utility.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/chartjs-plugin.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst chartData: ChartData<\"line\"> = {\n  labels: [\"A\", \"B\", \"C\"],\n  datasets: [\n    {\n      label: \"Dataset A\",\n      data: [1, 2, 3],\n      ...getDatasetColors(\"primary\"),\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Spacing Variables Display in Vue with TypeScript\nDESCRIPTION: This script sets up the data needed for displaying Onyx spacing variables. It imports components for visualization, defines a reactive density selection, and creates arrays of spacing variable names for both density-aware and fixed spacings.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/variables/spacings.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport OnyxSpacingVariables from \"../.vitepress/components/OnyxSpacingVariables.vue\";\nimport DensitySelection from \"../.vitepress/components/DensitySelection.vue\";\nimport type { Density } from \"sit-onyx\";\nimport { ref } from \"vue\";\n\nconst selectedDensity = ref<Density>(\"default\");\n\nconst densities = [\n  \"onyx-density-3xs\",\n  \"onyx-density-2xs\",\n  \"onyx-density-xs\",\n  \"onyx-density-sm\",\n  \"onyx-density-md\",\n  \"onyx-density-lg\",\n  \"onyx-density-xl\",\n  \"onyx-density-2xl\",\n  \"onyx-density-3xl\",\n  \"onyx-density-4xl\",\n];\n\nconst spacings = [\n  \"onyx-spacing-5xs\",\n  \"onyx-spacing-4xs\",\n  \"onyx-spacing-3xs\",\n  \"onyx-spacing-2xs\",\n  \"onyx-spacing-xs\",\n  \"onyx-spacing-sm\",\n  \"onyx-spacing-md\",\n  \"onyx-spacing-lg\",\n  \"onyx-spacing-xl\",\n  \"onyx-spacing-2xl\",\n  \"onyx-spacing-3xl\",\n  \"onyx-spacing-4xl\",\n];\n</script>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Component Ticket Requirements\nDESCRIPTION: A structured table showing the responsibilities of different team roles (UX/UI, DEV, PO) in ensuring ticket readiness through various criteria including design, acceptance criteria, dependencies, implementation details, and estimation.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/definition-of-ready.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Description                                                                              | UX/UI | DEV | PO  |\n| :--------------------------------------------------------------------------------------- | :---: | :-: | :-: |\n| The design is linked                                                                     |  🧑‍🎨   |  -  | 🧑‍💼  |\n| The acceptance criteria are defined <br> _=> AC has specific steps/interactions defined_ |   -   |  -  | 🧑‍💼  |\n| Dependencies are defined and completed                                                   |   -   |  -  | 🧑‍💼  |\n| Implementation details are noted                                                         |   -   | 🧑‍💻  |  -  |\n| Comparable implementations are linked                                                    |   -   | 🧑‍💻  |  -  |\n| Matching ARIA patterns are linked, if applicable                                         |  🧑‍🎨   | 🧑‍💻  | 🧑‍💼  |\n| No open questions and ToDos                                                              |  🧑‍🎨   | 🧑‍💻  | 🧑‍💼  |\n| Ticket was estimated                                                                     |  🧑‍🎨   | 🧑‍💻  | 🧑‍💼  |\n```\n\n----------------------------------------\n\nTITLE: Testing Structure Using Arrange-Act-Assert Pattern\nDESCRIPTION: This snippet demonstrates the recommended structure for writing tests in the Onyx project using the arrange-act-assert pattern. It provides a basic template for organizing test code.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/technical-vision.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ARRANGE\n// ACT\n// ASSERT\n```\n\n----------------------------------------\n\nTITLE: TypeScript Component Props Definition\nDESCRIPTION: Type definitions for component properties including density support\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/index.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { DensityProp } from \"../../composables/density\";\n\nexport type OnyxExampleComponentProps = DensityProp & {\n  // your component props, e.g.:\n  // label: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Breakpoint Renaming Reference\nDESCRIPTION: Reference table showing the mapping between old and new breakpoint naming conventions, transitioning from full words to standard abbreviated formats.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/storybook-utils/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Old     | New |\n| ------- | --- |\n| 2xsmall | 2xs |\n| sxmall  | xs  |\n| small   | sm  |\n| medium  | md  |\n| large   | lg  |\n| xlarge  | xl  |\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Storybook Theme in Manager Configuration\nDESCRIPTION: Example of using the createTheme utility in Storybook's manager.ts file to create a custom theme using Onyx design system colors. This demonstrates how to apply the theme to the Storybook UI.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/storybook-utils.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTheme } from \"@sit-onyx/storybook-utils\";\nimport { addons } from \"@storybook/manager-api\";\n\naddons.setConfig({\n  theme: createTheme({\n    base: \"light\", // choose whether you want a light or dark theme\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta Section in Storybook Stories (TypeScript)\nDESCRIPTION: Demonstrates how to set up the Meta object for a component story file. This includes configuring the title, component reference, argTypes for custom controls, and event logging.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/stories.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * OnyxComponent can be used to render something.\n * This is rendered into the \"Info\" panel in Storybook.\n */\nconst meta: Meta<typeof OnyxComponent> = {\n  title: 'Components/OnyxComponent',\n  component: OnyxComponent,\n  argTypes: {\n    modelValue: {\n      control: {\n        type: 'select',\n        options: ['1', '2', '3'],\n      },\n      description: 'Overwrites the automatically inferred description.',\n    },\n  },\n  args: {\n    // Default args that are applied to all Stories\n    disabled: false,\n  },\n  // Log interesting native DOM events\n  decorators: [\n    withNativeEventLogging(['touchend', 'click', 'keyup', 'change']),\n  ],\n}\n\nexport default meta\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry - Markdown\nDESCRIPTION: Changelog entry showing a patch fix for OnyxInput and OnyxTextarea components regarding maxlength behavior\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/sit-onyx/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- 808e638: fix(OnyxInput, OnyxTextarea): `maxlength` doesn't restrict the user from typing more than the allowed characters.\n  The previous behavior, which restricts the user from typing more than the allowed characters, can be achieved by setting `<OnyxInput :maxlength=\"{ max: 42, strict: true }\" />`.\n```\n\n----------------------------------------\n\nTITLE: Installing Vue-ChartJS Dependency\nDESCRIPTION: Commands for installing the vue-chartjs package using different package managers.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/chartjs-plugin.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add vue-chartjs\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install vue-chartjs\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn install chart.js\n```\n\n----------------------------------------\n\nTITLE: Importing Package Information in Vue with TypeScript\nDESCRIPTION: This snippet imports the package.json file from the @sit-onyx/icons package to access metadata such as the package description.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/icons.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport packageJson from \"../../../../../packages/icons/package.json\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Animation Duration Reference Table in Markdown\nDESCRIPTION: A markdown table defining the three standard animation duration options (sm, md, lg) available in the Onyx framework, specified in milliseconds.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/basics/motion.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Duration name | Duration |\n| ------------- | -------: |\n| `sm`          |    400ms |\n| `md`          |    700ms |\n| `lg`          |   1000ms |\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Theme for Storybook Documentation\nDESCRIPTION: Example of applying a custom theme to Storybook's documentation pages using the createTheme utility in the preview.ts file. This allows consistent theming in both the UI and documentation.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/storybook-utils.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTheme } from \"@sit-onyx/storybook-utils\";\nimport type { Preview } from \"@storybook/vue3\";\n\nconst preview: Preview = {\n  parameters: {\n    docs: {\n      theme: createTheme({\n        base: \"light\", // choose whether you want a light or dark theme\n      }),\n    },\n  },\n};\n\nexport default preview;\n```\n\n----------------------------------------\n\nTITLE: Major Version Beta Release Announcement\nDESCRIPTION: The announcement of the first beta release of the Onyx project. This marks a significant milestone as the project moves from alpha to beta status with no breaking changes from the last alpha version.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/vitepress-theme/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- bf3ea0a: release beta version\n\n  🎉 onyx is now beta! There are no breaking changes to the last `1.0.0.-alpha.*` version\n```\n\n----------------------------------------\n\nTITLE: Displaying Topic Overview Cards in HTML\nDESCRIPTION: A grid layout displaying various design system topic cards with titles, subtitles, images, and links to detailed documentation pages. Each card represents a core design concept like accessibility, colors, or typography.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/basics/index.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"topic-overview\">\n  <TopicOverviewCard title=\"Accessibility\" subtitle=\"Making applications accessible\" image-src=\"/images/accessibility-thumbnail.webp\" href=\"/basics/accessibility\" />\n  <TopicOverviewCard title=\"Breakpoints & grid\" subtitle=\"Basics for responsiveness\" image-src=\"/images/grid-thumbnail.webp\" href=\"/basics/breakpoints-grid\" />\n  <TopicOverviewCard title=\"Colors\" subtitle=\"Understanding the color system\" image-src=\"/images/colors-thumbnail.webp\" href=\"/basics/colors\" />\n  <TopicOverviewCard title=\"Component states\" subtitle=\"Behavior and interactivity\" image-src=\"/images/states-thumbnail.webp\" href=\"/basics/states\" />\n  <TopicOverviewCard title=\"Density\" subtitle=\"Compact and cozy layout variations\" image-src=\"/images/density-thumbnail.webp\" href=\"/basics/density\" />\n  <TopicOverviewCard title=\"Elevation\" subtitle=\"Hierarchy on the z-axis\" image-src=\"/images/elevation-thumbnail.webp\" href=\"/basics/elevation\" />\n  <TopicOverviewCard title=\"Iconography\" subtitle=\"Icon guidelines\" image-src=\"/images/iconography-thumbnail.webp\" href=\"/basics/iconography\" />\n  <TopicOverviewCard title=\"Images\" subtitle=\"Image guidelines\" image-src=\"/images/images-thumbnail.webp\" href=\"/basics/images\" />\n  <TopicOverviewCard title=\"Infographics\" subtitle=\"Dealing with statistics\" image-src=\"/images/infographics-thumbnail.webp\" href=\"/basics/infographics\" />\n  <TopicOverviewCard title=\"Layout\" subtitle=\"Structuring content\" image-src=\"/images/layout-thumbnail.webp\" href=\"/basics/layout\" />\n  <TopicOverviewCard title=\"Motion\" subtitle=\"Transitions and animations\" image-src=\"/images/motion-thumbnail.webp\" href=\"/basics/motion\" />\n  <TopicOverviewCard title=\"Truncation\" subtitle=\"Line break and truncation\" image-src=\"/images/truncation-thumbnail.webp\" href=\"/basics/truncation\" />\n  <TopicOverviewCard title=\"Typography\" subtitle=\"Understanding the font system\" image-src=\"/images/typography-thumbnail.webp\" href=\"/basics/typography\" />\n  <TopicOverviewCard title=\"Units\" subtitle=\"Basics for a consistent appearance\" image-src=\"/images/units-thumbnail.webp\" href=\"/basics/units\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing VitePress Theme with Package Managers\nDESCRIPTION: Commands for installing the @sit-onyx/vitepress-theme package using different package managers (pnpm, npm, yarn).\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/vitepress-theme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D @sit-onyx/vitepress-theme@beta\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @sit-onyx/vitepress-theme@beta\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn install -D @sit-onyx/vitepress-theme@beta\n```\n\n----------------------------------------\n\nTITLE: Installing Figma Utils Package\nDESCRIPTION: Examples of installing the @sit-onyx/figma-utils package using different package managers (pnpm, npm, yarn).\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/figma-utils.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @sit-onyx/figma-utils@beta\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @sit-onyx/figma-utils@beta\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn install @sit-onyx/figma-utils@beta\n```\n\n----------------------------------------\n\nTITLE: Defining Breakpoints in SCSS for Onyx UI Framework\nDESCRIPTION: This snippet defines the breakpoint values used in the Onyx UI framework. It sets pixel values for different screen sizes from extra small (xs) to extra extra large (xxl).\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/breakpoints.md#2025-04-23_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n$breakpoints: (\n  xs: 0,\n  sm: 576px,\n  md: 768px,\n  lg: 992px,\n  xl: 1200px,\n  xxl: 1400px\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Font Packages with Package Managers\nDESCRIPTION: Code snippets showing how to install the recommended Onyx font families using different package managers (pnpm, npm, and yarn).\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/typography.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @fontsource-variable/source-sans-3 @fontsource-variable/source-code-pro\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @fontsource-variable/source-sans-3 @fontsource-variable/source-code-pro\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn install @fontsource-variable/source-sans-3 @fontsource-variable/source-code-pro\n```\n\n----------------------------------------\n\nTITLE: Importing Package Version in Vue Component\nDESCRIPTION: This snippet demonstrates how to import the package.json file to access version information in a Vue component using TypeScript.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/headless.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport packageJson from \"../../../../../packages/headless/package.json\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing the Onyx Chart.js plugin and its dependencies using different package managers.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/chartjs-plugin.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @sit-onyx/chartjs-plugin@beta chart.js\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @sit-onyx/chartjs-plugin@beta chart.js\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn install @sit-onyx/chartjs-plugin@beta chart.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main with Required Addons\nDESCRIPTION: Configuration for Storybook's main.ts file showing how to add the storybook-dark-mode addon required by the createPreview utility. This enables dark mode support in Storybook.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/storybook-utils.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { StorybookConfig } from \"@storybook/vue3-vite\";\n\nconst config: StorybookConfig = {\n  addons: [\"storybook-dark-mode\"],\n  // ...\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing @sit-onyx/headless Package with pnpm\nDESCRIPTION: This command installs the beta version of the @sit-onyx/headless package using pnpm package manager.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/headless.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @sit-onyx/headless@beta\n```\n\n----------------------------------------\n\nTITLE: Rendering Fixed Spacing Examples with Vue\nDESCRIPTION: Vue template code that renders the fixed spacing variables. It uses the OnyxSpacingVariables component to display spacing variables that remain consistent regardless of density settings.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/variables/spacings.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<OnyxSpacingVariables :variables=\"spacings\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Language JSON Translation\nDESCRIPTION: Example JSON structure for adding a new language translation file.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/i18n.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"someMessage\": \"Bonjour le monde\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @sit-onyx/headless Package with npm\nDESCRIPTION: This command installs the beta version of the @sit-onyx/headless package using npm package manager.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/headless.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @sit-onyx/headless@beta\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright dependencies for component testing\nDESCRIPTION: Commands for installing the required Playwright dependencies for component testing with Vue. These are needed when using the matrix screenshot testing utility.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/playwright-utils.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @playwright/test @playwright/experimental-ct-vue\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @playwright/test @playwright/experimental-ct-vue\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn install -D @playwright/test @playwright/experimental-ct-vue\n```\n\n----------------------------------------\n\nTITLE: Using SCSS Breakpoint Mixin in Onyx VitePress Theme\nDESCRIPTION: Example of how to use the breakpoint SCSS mixin provided by the @sit-onyx/vitepress-theme package. This mixin allows responsive styling based on breakpoints.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/vitepress-theme/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n@use \"@sit-onyx/vitepress-theme/mixins.scss\";\n\n.some-class {\n  @include mixins.breakpoint(max, m) {\n    // your styles for m breakpoint\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Onyx Icons with pnpm\nDESCRIPTION: Command to install the Onyx icons package using pnpm package manager. This installs the beta version as a development dependency.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/icons.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @sit-onyx/icons@beta\n```\n\n----------------------------------------\n\nTITLE: Implementing Disabled Tabs in Vue\nDESCRIPTION: This code snippet demonstrates how to provide the disabled state when calling the tabs() element in Vue. It's used to support skipping disabled tabs for keyboard navigation in the createTabs composable.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/headless/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<button v-bind=\"tab({ value: 'tab-1', disabled: true })\" />\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Structure Update Sample\nDESCRIPTION: Example showing renamed and new CSS variables for OnyxButton component, including changes to background, text and border color variables.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/sit-onyx/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--onyx-button-background-color-hover\n--onyx-button-padding-inline\n--onyx-button-background-color-disabled\n--onyx-button-text-color-hover\n--onyx-button-text-color-disabled\n--onyx-button-border-color-hover\n--onyx-button-border-color-disabled\n```\n\n----------------------------------------\n\nTITLE: Installing @sit-onyx/nuxt Module in Nuxt\nDESCRIPTION: Command to install the @sit-onyx/nuxt module in a Nuxt application using the Nuxt CLI.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/nuxt.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx nuxi module add @sit-onyx/nuxt@beta\n```\n\n----------------------------------------\n\nTITLE: CLI Variable Import - New Syntax\nDESCRIPTION: Updated CLI command using explicit {mode} placeholder for selector customization.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/figma-utils/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx @sit-onyx/figma-utils import-variables -k \"your-file-key\" -t \"your-token\" -m dark -s html.{mode}\n```\n\n----------------------------------------\n\nTITLE: Component Library Export\nDESCRIPTION: Export configuration for making the component available in the library\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/index.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport { default as OnyxExampleComponent } from \"./components/OnyxExampleComponent/OnyxExampleComponent.vue\";\nexport * from \"./components/OnyxExampleComponent/types\";\n```\n\n----------------------------------------\n\nTITLE: Installing axe-core for Accessibility Testing\nDESCRIPTION: Commands for installing the axe-core library for Playwright to enable accessibility testing. This is an optional step for adding accessibility checks to matrix screenshot tests.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/playwright-utils.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @axe-core/playwright\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @axe-core/playwright\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn install -D @axe-core/playwright\n```\n\n----------------------------------------\n\nTITLE: DataGrid Hide Columns Configuration\nDESCRIPTION: Example showing the new API structure for configuring hidden columns in the DataGrid component.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/sit-onyx/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nDataGridFeatures.useHideColumns<Entry>({\n  columns: {\n    b: { hidden: true },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Onyx Documentation Options\nDESCRIPTION: TypeScript configuration file for customizing global documentation options like navigation.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/nuxt-docs.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineAppConfig({\n  onyxDocs: {\n    // your options here\n    nav: {\n      appName: \"My documentation\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dynamic Changelog Display in Vue with TypeScript\nDESCRIPTION: This snippet sets up a Vue component with TypeScript that dynamically includes changelogs based on a route parameter. It uses VitePress's useData hook to access the package name from the route and conditionally renders the appropriate changelog.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/changelogs/[name].md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { useData } from \"vitepress\";\n\nconst { params } = useData();\n</script>\n\n# Changelog\n\nBelow you can find a full list of changes for the current and previous versions.\n\n<div v-if=\"params.name === 'figma-utils'\">\n\n<!--@include: @/../../../packages/figma-utils/CHANGELOG.md-->\n\n</div>\n\n<div v-else-if=\"params.name === 'headless'\">\n\n<!--@include: @/../../../packages/headless/CHANGELOG.md-->\n\n</div>\n\n<div v-else-if=\"params.name === 'sit-onyx'\">\n\n<!--@include: @/../../../packages/sit-onyx/CHANGELOG.md-->\n\n</div>\n\n<div v-else-if=\"params.name === 'storybook-utils'\">\n\n<!--@include: @/../../../packages/storybook-utils/CHANGELOG.md-->\n\n</div>\n\n<div v-else-if=\"params.name === 'vitepress-theme'\">\n\n<!--@include: @/../../../packages/vitepress-theme/CHANGELOG.md-->\n\n</div>\n\n<div v-else-if=\"params.name === 'icons'\">\n\n<!--@include: @/../../../packages/icons/CHANGELOG.md-->\n\n</div>\n\n<div v-else-if=\"params.name === 'chartjs-plugin'\">\n\n<!--@include: @/../../../packages/chartjs-plugin/CHANGELOG.md-->\n\n</div>\n\n<div v-else-if=\"params.name === 'nuxt'\">\n\n<!--@include: @/../../../packages/nuxt/CHANGELOG.md-->\n\n</div>\n\n<div v-else-if=\"params.name === 'playwright-utils'\">\n\n<!--@include: @/../../../packages/playwright-utils/CHANGELOG.md-->\n\n</div>\n\n<div v-else-if=\"params.name === 'nuxt-docs'\">\n\n<!--@include: @/../../../packages/nuxt-docs/CHANGELOG.md-->\n\n</div>\n\n<div v-else>\n  <h1>Changelogs</h1>\n  <p>No changelog found for package \"{{ params.name }}\".</p>\n  <p>Please create a bug report using the link in the header above.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: VitePress Home Page Configuration in YAML Frontmatter\nDESCRIPTION: YAML configuration for a VitePress documentation home page, defining the layout, hero section with logo and actions, and a features section that highlights the key aspects of the onyx.web design system.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\nmarkdownStyles: false\n\nhero:\n  name: onyx.web\n  text: design system\n  tagline: A design system and Vue.js component library created by Schwarz IT.\n  image:\n    src: /images/logo-signet-light.svg\n    alt: Logo of the Schwarz Group\n  actions:\n    - theme: brand\n      text: Getting Started\n      link: /development/\n\nfeatures:\n  - title: Powerful\n    details: onyx's advanced components are designed for enterprise grade applications. Including everything you need to build your next enterprise or even personal project.\n    icon: 🚀\n  - title: Flexible and modular\n    details: You can build a whole application with onyx or only use a few of our customizable components into an existing application.\n    icon: 📦\n  - title: Themeable\n    details: We provide a well crafted theme out-of-the-box. Feel free to customize it to perfectly fit your look and feel.\n    icon: 🎨\n  - title: First class DX\n    details: Developer Experience is our top priority. onyx is fully written in TypeScript with great type support and generically typed components.\n    icon:\n      light: /icons/typescript-dark.svg\n      dark: /icons/typescript-light.svg\n      alt: TypeScript logo\n  - title: Figma library\n    details: onyx also offers a Figma library for design purposes. Connecting Design and Development.\n    icon:\n      light: /icons/figma-dark.svg\n      dark: /icons/figma-light.svg\n      alt: Figma logo\n  - title: Open Source\n    details: Open Source and free to use. Released under the Apache-2.0 License.\n    icon:\n      light: /icons/github-dark.svg\n      dark: /icons/github-light.svg\n      alt: GitHub logo\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Common shell commands for setting up and maintaining the Onyx development environment\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install # install all dependencies\npnpm lint:fix:all # lint and fix all packages with eslint\npnpm format:all # format all files with prettier\npnpm dev <package-name> # run dev mode for the given `<package-name>`, e.g. \"pnpm dev sit-onyx\"\n```\n\n----------------------------------------\n\nTITLE: Importing OnyxShadowVariables Component in Vue\nDESCRIPTION: Setup script for importing and using the OnyxShadowVariables component. This component likely displays all the available shadow variables in the onyx project.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/variables/shadows.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport OnyxShadowVariables from \"../.vitepress/components/OnyxShadowVariables.vue\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fixing Font Imports in VitePress Theme\nDESCRIPTION: A patch that corrects font import issues in the VitePress theme component. This ensures fonts are properly loaded and displayed in the documentation site.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/vitepress-theme/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- cc61364: fix(vitepress-theme): correctly import fonts\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Update Reference Table in Markdown\nDESCRIPTION: A markdown table showing the mapping between old CSS variable names and their new counterparts as part of a refactoring update in version 1.0.0-alpha.10.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/sit-onyx/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Old                   |                         New |\n| --------------------- | --------------------------: |\n| `--onyx-spacing-4xs`  |        `--onyx-spacing-5xs` |\n| `--onyx-spacing-3xs`  |        `--onyx-spacing-4xs` |\n| `--onyx-spacing-2xs`  |        `--onyx-spacing-3xs` |\n| `--onyx-spacing-xs`   |        `--onyx-spacing-2xs` |\n| `--onyx-color-text-*` | `--onyx-color-text-icons-*` |\n| `--onyx-color-icon-*` | `--onyx-color-text-icons-*` |\n```\n\n----------------------------------------\n\nTITLE: Installing @sit-onyx/playwright-utils with package managers\nDESCRIPTION: Commands for installing the @sit-onyx/playwright-utils package using different Node.js package managers. The package is installed as a development dependency with the beta tag.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/playwright-utils.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @sit-onyx/playwright-utils@beta\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @sit-onyx/playwright-utils@beta\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn install -D @sit-onyx/playwright-utils@beta\n```\n\n----------------------------------------\n\nTITLE: Figma CLI Help Command\nDESCRIPTION: Command to display help information for the Figma utils CLI.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/figma-utils.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @sit-onyx/figma-utils@beta --help\n```\n\n----------------------------------------\n\nTITLE: JSON Variable Sorting - After\nDESCRIPTION: New numerically sorted variable output in JSON format.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/figma-utils/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variable-100\": \"42rem\",\n  \"variable-200\": \"42rem\",\n  \"variable-1000\": \"42rem\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing storybook-utils with Different Package Managers\nDESCRIPTION: Shell commands for installing the @sit-onyx/storybook-utils package using pnpm, npm, and yarn. All commands install the beta version as a development dependency.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/storybook-utils.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D @sit-onyx/storybook-utils@beta\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @sit-onyx/storybook-utils@beta\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn install -D @sit-onyx/storybook-utils@beta\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.0.0-beta.14\nDESCRIPTION: Release notes documenting new icons including cloud-edge, computer-security-warning, cookie, profile-hook, and server-search\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/icons/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0-beta.14\n\n### Minor Changes\n\n- 41eb73c: feat: update icons\n\n  #### New icons\n\n  - cloud-edge\n  - computer-security-warning\n  - cookie\n  - profile-hook\n  - server-search\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook Manager API Dependency\nDESCRIPTION: Shell commands for installing the @storybook/manager-api package, which is required for custom theming functionality with different package managers.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/storybook-utils.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D @storybook/manager-api\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @storybook/manager-api\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn install -D @storybook/manager-api\n```\n\n----------------------------------------\n\nTITLE: Installing Onyx Icons with npm\nDESCRIPTION: Command to install the Onyx icons package using npm package manager. This installs the beta version as a development dependency.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/icons.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @sit-onyx/icons@beta\n```\n\n----------------------------------------\n\nTITLE: Creating Changeset\nDESCRIPTION: Command to create a changeset for version control and changelog management\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx changeset add\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Environment\nDESCRIPTION: Command to start Storybook development server locally\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/principles/contributing/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev sit-onyx\n```\n\n----------------------------------------\n\nTITLE: Installing Onyx Icons with yarn\nDESCRIPTION: Command to install the Onyx icons package using yarn package manager. This installs the beta version as a development dependency.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/icons.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn install -D @sit-onyx/icons@beta\n```\n\n----------------------------------------\n\nTITLE: Running Figma Utils CLI Help Command in Shell\nDESCRIPTION: Command to display the list of supported commands and options for the @sit-onyx/figma-utils CLI tool. Uses npx to run the latest version of the package without requiring installation.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/figma-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @sit-onyx/figma-utils@latest --help\n```\n\n----------------------------------------\n\nTITLE: Configuring PNPM Workspace Dependencies\nDESCRIPTION: YAML configuration for PNPM workspace to properly handle Nuxt content and image module dependencies.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/nuxt-docs.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# needed to correctly install the Nuxt content and Nuxt image module\nonlyBuiltDependencies:\n  - better-sqlite3\n  - sharp\n```\n\n----------------------------------------\n\nTITLE: Fixing Sass Global Functions in Beta.60\nDESCRIPTION: A patch that removes the usage of deprecated Sass global functions like map-get in favor of importing the corresponding modules. This change prevents potential build errors, particularly when using onyx breakpoint utilities.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/vitepress-theme/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- bb826a4: fix(sass): remove usage of globals\n\n  Sass [deprecated the usage of built-in global functions](https://sass-lang.com/documentation/breaking-changes/import/) like `map-get` which might lead to build errors e.g. when using [onyx breakpoint utilities](https://onyx.schwarz/development/breakpoints.html). We removed their usages in favor of importing the corresponding module.\n```\n\n----------------------------------------\n\nTITLE: SCSS Variable Export - After Change\nDESCRIPTION: Updated implementation placing SCSS variables at root level for proper importing in other files.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/figma-utils/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n$some-variable: 42;\n```\n\n----------------------------------------\n\nTITLE: SCSS Variable Export - Before Change\nDESCRIPTION: Previous implementation of SCSS variables file with :root selector, which made variables unusable in other SCSS files.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/figma-utils/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n:root {\n  $some-variable: 42;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Content Page\nDESCRIPTION: Example markdown file for creating the documentation homepage.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/nuxt-docs.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello World\n\nThis is an example page using the [onyx documentation template](https://onyx.schwarz/development/packages/nuxt-docs.html) for Nuxt.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: A changelog documenting version history and dependency updates for the sit-onyx package, tracking changes from alpha through beta releases. Each entry contains patch changes and dependency version updates.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/chartjs-plugin/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [16f001a]\n  - sit-onyx@1.0.0-beta.96\n\n## 1.0.0-beta.95\n\n### Patch Changes\n\n- Updated dependencies [b2a99a9]\n  - sit-onyx@1.0.0-beta.95\n```\n\n----------------------------------------\n\nTITLE: Installing Demo App with Vue and TypeScript\nDESCRIPTION: Command to create a new Vue 3 TypeScript project using Vite as the build tool via pnpm package manager.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/demo-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm create vite demo-app --template vue-ts\n```\n\n----------------------------------------\n\nTITLE: Version History Changelog in Markdown\nDESCRIPTION: Documentation of version changes and updates for the onyx project, including breaking changes, feature additions, and bug fixes across multiple beta releases\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/sit-onyx/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- 4a4c414: ### BREAKING CHANGE:\n\n  - feat(OnyxNavButton, OnyxUserMenu, OnyxFlyoutMenu): button slot now provides a trigger parameter which must be bound to the interactive element\n  - feat(OnyxFlyoutMenu): Renamed \"default\" slot to \"button\"\n\n## 1.0.0-beta.69\n\n### Minor Changes\n\n- 3f55c48: feat(OnyxTabs): support horizontal scrolling when overflowing\n\n  The following additional features/fixes are also included:\n\n  - OnyxTabs: add property `size` to change the font style\n  - OnyxTabs: fix vertical alignment of tab text if its not selected \n  - add CSS variable `--onyx-outline-width` and use it in all components for consistency\n```\n\n----------------------------------------\n\nTITLE: Setting PNPM Configuration\nDESCRIPTION: NPM configuration file for handling peer dependencies in Nuxt layers.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/nuxt-docs.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# \"shamefully-hoist\" is the default config from Nuxt for layers\n# It is currently needed to correctly install the peerDependencies from Nuxt layers\nshamefully-hoist=true\n```\n\n----------------------------------------\n\nTITLE: HTML Center-Aligned Logo Implementation\nDESCRIPTION: HTML markup for displaying the centered Onyx logo using div alignment and inline styling\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/chartjs-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\" style=\"text-align: center\">\n  <img alt=\"onyx logo\" src=\"https://raw.githubusercontent.com/SchwarzIT/onyx/main/.github/onyx-logo.svg\" height=\"96px\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Onyx Development Server\nDESCRIPTION: Command to run the development server that includes building the onyx components, necessary for seeing implemented changes in the Demo App.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/demo-app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: JSON Variable Sorting - Before\nDESCRIPTION: Previous unsorted variable output in JSON format.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/figma-utils/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variable-200\": \"42rem\",\n  \"variable-1000\": \"42rem\",\n  \"variable-100\": \"42rem\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying onyx Logo with HTML\nDESCRIPTION: HTML code for centering and displaying the onyx logo from the GitHub repository with specific styling and dimensions.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/nuxt-docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\" style=\"text-align: center\">\n  <img alt=\"onyx logo\" src=\"https://raw.githubusercontent.com/SchwarzIT/onyx/main/.github/onyx-logo.svg\" height=\"96px\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Motion Types Definition Table in Markdown\nDESCRIPTION: A markdown table defining the six core motion types (slide, bounce, fade, expand, collapse, rearrange) used in the Onyx framework, along with their definitions and practical examples.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/basics/motion.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Motion name | Definition                                   | Example                                                                 |\n| ----------- | -------------------------------------------- | ----------------------------------------------------------------------- |\n| `slide`     | Object slides from position x to position y. | Notification messages slide from outside the screen to their positions. |\n| `bounce`    | Object \"jumps\" into its position.            | Toast message appears for giving the user feedback.                     |\n| `fade`      | Object appears/disappears with opacity.      | Notification messages are fading out when they disappear.               |\n| `expand`    | Object gets larger.                          | Flyout appears in combo box.                                            |\n| `collapse`  | Object gets smaller.                         | Flyout disappears in combo box.                                         |\n| `rearrange` | Objects are filling the empty space.         | Cards replace another card that was deleted previously.                 |\n```\n\n----------------------------------------\n\nTITLE: CLI Variable Import - Old Syntax\nDESCRIPTION: Previous CLI command for importing variables with automatic mode name appending.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/figma-utils/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx @sit-onyx/figma-utils import-variables -k \"your-file-key\" -t \"your-token\" -m dark -s html\n```\n\n----------------------------------------\n\nTITLE: Centering Onyx Logo in HTML/Markdown\nDESCRIPTION: This snippet demonstrates how to center the Onyx logo using HTML within a Markdown file. It uses a div with centered alignment and includes an img tag for the logo.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\" style=\"text-align: center\">\n  <img alt=\"onyx logo\" src=\"./.github/onyx-logo.svg\" height=\"96px\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 1.0.0-beta.15\nDESCRIPTION: Release notes documenting the addition of the eye-closed icon\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/icons/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0-beta.15\n\n### Minor Changes\n\n- e9ef809: feat: update icons\n\n  #### New icons\n\n  - eye-closed\n```\n\n----------------------------------------\n\nTITLE: Displaying Onyx Logo in HTML\nDESCRIPTION: This HTML snippet centers and displays the Onyx logo using an img tag within a div. It sets the alignment, size, and source of the logo image.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/sit-onyx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div align=\"center\" style=\"text-align: center\">\n  <img alt=\"onyx logo\" src=\"https://raw.githubusercontent.com/SchwarzIT/onyx/main/.github/onyx-logo.svg\" height=\"96px\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: Changelog entries documenting version updates and fixes for the @sit-onyx/shared package, including changes to Vite dependencies and peer dependency fixes\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/shared/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @sit-onyx/shared\n\n## 1.0.0-beta.2\n\n### Patch Changes\n\n- 07549b9: fix(shared): change vite dependencies to optionalDependencies\n\n## 1.0.0-beta.1\n\n### Major Changes\n\n- cc46754: bump minimum required Vite version to `>= 6`\n\n## 0.0.1-beta.0\n\n### Patch Changes\n\n- b6b4573: fix(@sit-onyx/shared): fix peerDependencies\n\n  This fixed a dependency warning with a too strict version scope for `vue` and `sass-embedded` when a package is installed that depends on `@sit-onyx/shared` as peerDependency (e.g. `sit-onyx`)\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Updates in Markdown\nDESCRIPTION: This snippet shows the structure used to document version updates in the changelog. It includes the version number, change type, and details of dependency updates.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/playground/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0-beta.198\n\n### Patch Changes\n\n- Updated dependencies [68139e0]\n  - sit-onyx@1.0.0-beta.198\n```\n\n----------------------------------------\n\nTITLE: Using HTML/Markdown for Logo Display\nDESCRIPTION: HTML div element with center alignment displaying the Onyx logo SVG image.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/icons/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\" style=\"text-align: center\">\n  <img alt=\"onyx logo\" src=\"https://raw.githubusercontent.com/SchwarzIT/onyx/main/.github/onyx-logo.svg\" height=\"96px\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Logo Display Component\nDESCRIPTION: Centered container div with SVG logo image for the Onyx project, using HTML and inline CSS styling.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/packages/storybook-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\" style=\"text-align: center\">\n  <img alt=\"onyx logo\" src=\"https://raw.githubusercontent.com/SchwarzIT/onyx/main/.github/onyx-logo.svg\" height=\"96px\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Onyx Logo with Centered Alignment\nDESCRIPTION: HTML markup for displaying the Onyx logo in a centered container with specific styling and dimensions.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/playground/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\" style=\"text-align: center\">\n  <img alt=\"onyx logo\" src=\"https://raw.githubusercontent.com/SchwarzIT/onyx/main/.github/onyx-logo.svg\" height=\"96px\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including To-Be-Done Markdown in Dialogs Documentation\nDESCRIPTION: This snippet uses a VitePress-specific include directive to embed the content of a 'to-be-done.md' file. This is likely used as a placeholder for unfinished documentation sections.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/basics/dialogs.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--@include: @/.vitepress/to-be-done.md-->\n```\n\n----------------------------------------\n\nTITLE: Including To-Be-Done Message in Markdown\nDESCRIPTION: A VitePress include directive that imports content from a 'to-be-done.md' file located in the .vitepress directory. This is likely a placeholder or warning message indicating that the navigation documentation is still in development.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/basics/navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--@include: @/.vitepress/to-be-done.md-->\n```\n\n----------------------------------------\n\nTITLE: Including To-Be-Done Markdown File in VitePress\nDESCRIPTION: A VitePress include directive that references a to-be-done markdown file, indicating this documentation section is incomplete and will be populated later.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/basics/search-behavior.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--@include: @/.vitepress/to-be-done.md-->\n```\n\n----------------------------------------\n\nTITLE: Installing @sit-onyx/headless Package with yarn\nDESCRIPTION: This command installs the beta version of the @sit-onyx/headless package using yarn package manager.\nSOURCE: https://github.com/schwarzit/onyx/blob/main/apps/docs/src/development/packages/headless.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn install @sit-onyx/headless@beta\n```"
  }
]