[
  {
    "owner": "zipstack",
    "repo": "unstract.git",
    "content": "TITLE: Running Services with Docker Compose - Bash\nDESCRIPTION: Bash commands to start all or specific Docker Compose services in detached mode. Requires copying 'sample.*.env' to '*.env' for configuration. Input: 'docker-compose.yaml', environment files. Output: Services started as containers. Dependencies: Docker, docker-compose, proper '.env' files. Constraint: Ensure required .env files exist and are updated.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Up all services\\nVERSION=dev docker compose -f docker-compose.yaml up -d\\n\\n# Up a specific service alone\\nVERSION=dev docker compose -f docker-compose.yaml up -d frontend\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Superuser via Management Command - Bash\nDESCRIPTION: Runs Django's built-in createsuperuser management command to interactively create an admin account. Prompts for username, email, and password. Requires database to be running and Django environment variables properly configured. Outputs creation status and guides through user setup if invoked for the first time.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py createsuperuser\n```\n\n----------------------------------------\n\nTITLE: Applying Django Migrations and Running Server - Bash\nDESCRIPTION: Executes Django management commands for applying database migrations and starting the development server. Assumes environment variables are configured and DB is reachable. The first command applies any new migration files, and the second starts the Django server on localhost:8000. Outputs logs regarding migration status and server startup.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py migrate\\npython manage.py runserver localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Loading Django Database Fixtures from JSON - Shell\nDESCRIPTION: Imports pre-existing fixture data from a JSON file into the Django database, restoring the application to a known state for testing or development. The 'loaddata' management command reads from the provided file and inserts data as defined. Requires the specified fixture file to exist and to be a valid output of 'dumpdata'. This process overwrites the current database state with the contents of the fixture file, allowing for repeatable test scenarios and easy resets.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/utils/seed_data/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py loaddata <path_to_filename>.json\n```\n\n----------------------------------------\n\nTITLE: Configuring File Storage Environment for Unstract SDK in env\nDESCRIPTION: This snippet provides a sample .env file to configure the Filesystem module's storage backends, credentials, and optional legacy storage path in a Unstract SDK-based Python project. Required environment variables include provider and credential pairs for both workflow and API execution storage, formatted in JSON strings for secure handling. Users must replace placeholder access and secret keys with valid credentials, and optionally specify a local path for legacy data if PersistentFileStorage is used. Variables enable dynamic, type-specific storage setup without code changes, but missing or invalid values may trigger runtime errors.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/unstract/filesystem/README.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n# Workflow Execution File Storage\\nWORKFLOW_EXECUTION_FS_PROVIDER=minio\\nWORKFLOW_EXECUTION_FS_CREDENTIAL={\\\"access_key\\\": \\\"your-access-key\\\", \\\"secret_key\\\": \\\"your-secret-key\\\"}\\n\\n# API Execution File Storage\\nAPI_STORAGE_FS_PROVIDER=minio\\nAPI_STORAGE_FS_CREDENTIAL={\\\"access_key\\\": \\\"api-access-key\\\", \\\"secret_key\\\": \\\"api-secret-key\\\"}\\n\\n# Legacy Storage Path (Optional)\\nLEGACY_STORAGE_PATH=/path/to/legacy/storage\n```\n\n----------------------------------------\n\nTITLE: Executing the RUN Command with Settings - commandline\nDESCRIPTION: This code runs the Structure Tool using the RUN command with specified settings (including a prompt_registry_id) and debug log level. It is important to properly set the ENV variables, ensure requirements are installed, and confirm that the config/spec.json defines the settings schema. The input is a JSON settings string, and the command will execute the core logic of the Structure Tool.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/README.md#_snippet_7\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py \\\n    --command RUN \\\n    --settings '{\n        \"prompt_registry_id\": \"<ID_from_the_DB>\"\n    }' \\\n    --log-level DEBUG\n\n```\n\n----------------------------------------\n\nTITLE: Running V2 Data Migration Command\nDESCRIPTION: Executes the Django management command to migrate data from v1 to v2 schema.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py migrate_to_v2\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies - commandline\nDESCRIPTION: This command installs all the required Python dependencies for the Structure Tool as specified in the requirements.txt file. It must be run after activating the virtual environment to ensure all libraries are scoped to the project environment. Requires pip and an up-to-date requirements.txt.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/README.md#_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\npip install -r requirements.txt\n\n```\n\n----------------------------------------\n\nTITLE: Running Django Database Migrations\nDESCRIPTION: Applies all pending Django migrations to update the database schema.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Running Python Unit Tests with Pytest/Pytest-Django - Bash\nDESCRIPTION: Executes the pytest runner for either all tests or for a specific app, assuming pytest and pytest-django are installed. Requires database to be running, but Django server does not need to be up. Outputs test results and failures in standard pytest format.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npytest\\npytest prompt # To run for an app named prompt\n```\n\n----------------------------------------\n\nTITLE: Building, Testing, and Running Scripts for React App - Shell\nDESCRIPTION: This collection of NPM command snippets enables scriptable workflows for development, testing, and production builds. 'npm start' runs the app in development mode, 'npm test' launches the test runner interactively, and 'npm run build' optimizes and bundles the app for production. Inputs and outputs depend on each script: development server, test results, or generated build artifacts in the 'build' folder.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/frontend/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Django Admin Model Registration Example - Python\nDESCRIPTION: Illustrates how to register a Django model with the admin site inside <app>/admin.py. Imports admin site and a Prompt model, then registers Prompt so it is accessible in the Django admin interface. Requires Django project with apps and models already defined. Allows admins to manage Prompt entries through the web UI.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\\nfrom .models import Prompt\\n\\nadmin.site.register(Prompt)\n```\n\n----------------------------------------\n\nTITLE: Feature Flag Check Implementation in Python\nDESCRIPTION: Implementation of a feature flag checker function that determines if a specific feature is enabled. Includes usage example showing conditional execution based on flag status.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/unstract/flags/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef is_feature_enabled(feature_flag: str) -> bool:\n    \"\"\"\n    Check if a feature flag is enabled.\n\n    Args:\n        feature_flag (str): The name of the feature flag to check.\n\n    Returns:\n        bool: True if the feature flag is enabled, False otherwise.\n    \"\"\"\n    # Implementation code here\n    pass\n\n# Usage example\nif is_feature_enabled(\"my_feature\"):\n    # Execute code for enabled feature\n    pass\nelse:\n    # Execute code for disabled feature\n    pass\n```\n\n----------------------------------------\n\nTITLE: Starting a Celery Worker for Django Project - Bash\nDESCRIPTION: Starts a Celery worker process for the Django backend project, attached to a given queue. Assumes Celery, backend module, and all dependencies installed in the current environment. The '<queue_name>' parameter is replaced with the specific queue to target. The worker logs information-level events to the console.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncelery -A backend worker --loglevel=info -Q <queue_name>\n```\n\n----------------------------------------\n\nTITLE: Dockerizing React App for Production - Shell\nDESCRIPTION: This snippet demonstrates how to prepare and run the React app in a production Docker container. 'npm ci' ensures a clean dependency install, 'npm run build' generates the optimized app, and subsequent Docker commands build an image tagged 'frontend:prod' using Dockerfile.prod, then run a container mapping local port 80. It supports custom NGINX configurations (via nginx.conf and Dockerfile) for serving the build. Prerequisites: Docker, Node.js, a valid Dockerfile.prod, and optionally nginx.conf in the project root.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/frontend/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm ci && npm run build\n\ndocker build -t frontend:prod -f Dockerfile.prod .\n\ndocker run -p 80:80 frontend:prod\n```\n\n----------------------------------------\n\nTITLE: Seeding the Django Database Using a Python Script - Shell\nDESCRIPTION: Executes the Django shell and runs a Python script ('seed_data.py') to insert initial records into the database for testing purposes. This command requires Django, a valid project environment, and the specified Python script. The '<' operator redirects the script file as input to the Django shell. Users need to ensure 'utils/seed_data/seed_data.py' exists and contains appropriate logic for seeding data. The output is the modification of the database with seeded records, and this operation should be run before generating fixtures.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/utils/seed_data/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py shell < utils/seed_data/seed_data.py\n```\n\n----------------------------------------\n\nTITLE: Running Text Extraction (RUN Command) with Custom Settings - Command-Line - commandline\nDESCRIPTION: This snippet executes the Unstract Text Extractor Tool's main extraction workflow using the 'RUN' command. It accepts custom JSON-formatted settings (notably 'extractorId'), requires environment and input data setup, and optionally enables debug logging. Output is written per tool logic, typically status and extraction results. All dependencies must be installed and the environment properly initialized.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/text_extractor/README.md#_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py \\\n    --command RUN \\\n    --settings '{\n        \"extractorId\": \"<extractor_id of adapter>\"\n        }' \\\n    --workflow-id '00000000-0000-0000-0000-000000000000' \\\n    --log-level DEBUG\n```\n\n----------------------------------------\n\nTITLE: Running Django Backend with PDM in Dev Mode - Bash\nDESCRIPTION: Runs the backend Django server in development mode using PDM, allowing for reloading with Gunicorn. Requires dependencies to be installed and environment properly configured. The '--dev' flag is used to enable developer settings. Outputs Django server startup logs and listens for code changes.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npdm run backend --dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment and Activating - commandline\nDESCRIPTION: These commands initialize a Python virtual environment in the current directory and activate it for the session. This is required to isolate project dependencies and environment variables, and ensures the tool and its Python dependencies run in a controlled context. It relies on the presence of Python and the venv module.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/README.md#_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\n\n```\n\n----------------------------------------\n\nTITLE: Generating PDM Lockfiles for Specific Directories - Bash Shell\nDESCRIPTION: This code snippet shows how to run the pdm-lock.sh script with specific directory arguments, which restricts lockfile generation to the listed subprojects. The snippet requires Bash or a compatible shell and assumes that each directory specified (e.g., backend, prompt-service) exists in the project structure. Inputs are command-line directory names, and the output will be lockfiles only for those specified locations.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/scripts/pdm-lock-gen/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./pdm-lock.sh backend prompt-service\n\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Runtime Variables Schema in Unstract - JSON\nDESCRIPTION: This JSON schema represents the runtime environment variables needed by an Unstract tool. Expected in config/runtime_variables.json, it defines required and optional variables (such as API keys or credentials) used for external services or configuration. The frontend uses this for form generation on tool registration, and developers must ensure all required operational variables are included to prevent runtime failures.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Runtime Variables\",\n  \"description\": \"Runtime Variables for translate\",\n  \"type\": \"object\",\n  \"required\": [\n    \"GOOGLE_SERVICE_ACCOUNT\"\n  ],\n  \"properties\": {\n    \"GOOGLE_SERVICE_ACCOUNT\": {\n      \"type\": \"string\",\n      \"title\": \"Google Service Account\",\n      \"description\": \"Google Service account\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Services with Docker Compose - Bash\nDESCRIPTION: Provides bash commands to build all services or a specific service using Docker Compose with a custom build file. Set the VERSION environment variable for versioning. Input: Uses 'docker-compose.build.yaml'. Output: Docker images built for specified services. Dependencies: Docker, docker-compose, the relevant build YAML file. Constraints: Docker must be installed and folders properly structured.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build all services\\nVERSION=dev docker compose -f docker-compose.build.yaml build\\n\\n# Build a specific service alone\\nVERSION=dev docker compose -f docker-compose.build.yaml build frontend\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies using Requirements.txt for Unstract SDK in Python\nDESCRIPTION: This snippet demonstrates how to declare dependencies for a Python project using the requirements.txt format. It uses comments to explain why only the 'aws' extra is required, referencing transient temporary storage needs of Unstract tools. The syntax 'unstract-sdk[aws]~=0.62.1' ensures installation of a compatible SDK version and its AWS dependencies. This approach is compatible with pip and standard Python dependency management workflows.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/text_extractor/requirements.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Add your dependencies here\n\n# Required for all unstract tools\n# aws alone is needed here\n# because tools use transient temporary storage.\n\nunstract-sdk[aws]~=0.62.1\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema with Django Command\nDESCRIPTION: Executes the Django management command to create a new database schema for v2.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py create_schema\n```\n\n----------------------------------------\n\nTITLE: Running the V2 Migration Script\nDESCRIPTION: Executes the migrate-to-v2.sh script to perform schema and data migrations in one operation.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./migrate-to-v2.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Initializing Postgres Database - Bash Script\nDESCRIPTION: This Bash shell script (\"db_setup.sh\") is designed to automate the setup of a PostgreSQL database for the Unstract project. It uses environment variables (POSTGRES_USER, POSTGRES_DB, POSTGRES_SCHEMA) typically loaded from a \".essentials.env\" or sample file, and performs user and schema creation as required by the app. Prerequisites include having Docker/Postgres installed and access to the correct environment file. The expected output is a database with a configured user and schema. The script must be run with appropriate permissions and access to the environment configuration.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/scripts/db-setup/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# db_setup.sh\n# Usage: Setup postgres DB by reading from environment variables in .essentials.env\n#\n# Required environment variables:\n#  - POSTGRES_USER\n#  - POSTGRES_DB\n#  - POSTGRES_SCHEMA\n\n# This script helps setup the DB user and creates a new schema as well.\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Tool in registry.yaml\nDESCRIPTION: YAML configuration for specifying a locally stored tool in the registry.yaml file. This defines the tool's image name and tag, with 'latest' as the default tag if not specified.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/unstract/tool-registry/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n   - local:<tool_image_name>:<tool_image_tag>\n```\n\n----------------------------------------\n\nTITLE: Processing Document into Text via cURL - Bash\nDESCRIPTION: This snippet provides a bash/curl command for invoking the /api/v1/x2text/process endpoint of the Flask service. It uploads a specified file, includes the API key and Unstructured API URL as form fields, and uses platform-level authentication. The service converts the document to text and allows users to download the result. All required parameters must be supplied in the form data.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/x2text-service/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://{host}:{port}/api/v1/x2text/process' \\\n--header 'accept: application/json' \\\n--header 'Authorization: <platform-key>' \\\n--form 'unstructured-api-key=\"<api-key>\"' \\\n--form 'unstructured-url=\"https://api.unstructured.io/general/v0/general\"' \\\n--form 'file=@\"/home/johny/Documents/test_resume1.pdf\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Removing Virtual Environments with PDM - Bash\nDESCRIPTION: This snippet demonstrates how to create and remove a Python virtual environment using PDM. Prerequisites include having PDM installed. The commands activate the environment in the current project, and allow for removal. It is assumed that the user has Python and PDM properly installed. On execution, venv activation occurs within the shell.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create venv\\npdm venv create -w virtualenv --with-pip\\neval \\\"$(pdm venv activate in-project)\\\"\\n\\n# Remove venv\\npdm venv remove in-project\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Properties in Unstract - JSON\nDESCRIPTION: This JSON schema defines the standard properties for an Unstract tool, including display name, unique function identifier, description, versioning, input and output types, parameters, and dependency requirements. It must be placed in the tool's config/properties.json and is referenced by the platform to recognize, categorize, and properly operate the tool. Tool developers must update these fields for each new tool, ensuring accurate metadata and compliance with the Unstract protocol.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"display_name\": \"Document Indexer\",\n  \"function_name\": \"document_indexer\",\n  \"description\": \"This tool creates indexes and embeddings for documents.\",\n  \"parameters\": [\n    {\n      \"name\": \"input_file\",\n      \"type\": \"string\",\n      \"description\": \"File path of the input file\"\n    }\n  ],\n  \"versions\": [\n    \"1.0.0\"\n  ],\n  \"is_cacheable\": false,\n  \"input_type\": \"file\",\n  \"output_type\": \"index\",\n  \"requires\": {\n    \"files\": {\n      \"input\": true,\n      \"output\": false\n    },\n    \"databases\": {\n      \"input\": false,\n      \"output\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Django Management Commands\nDESCRIPTION: Displays help information for all available Django management commands.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py help\n```\n\n----------------------------------------\n\nTITLE: Running Unstract Runner Service via Docker Compose - Shell\nDESCRIPTION: This command launches the Unstract runner service using Docker Compose and the specified configuration file. It requires docker compose to be installed and a docker-compose.yaml file in the current directory. Input: none. Output: The Unstract runner service and any dependencies are started as defined in the compose file.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/runner/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f docker-compose.yaml up\n```\n\n----------------------------------------\n\nTITLE: Running the Structure Tool via Docker - commandline\nDESCRIPTION: This snippet runs the Structure Tool in a Docker container, mounting the local data_dir, loading .env for environment variables, and passing the RUN command and settings as arguments. Docker, a valid .env file, and the built image are required. This enables testing or production deployment with container isolation, leveraging Docker networking and environment injection.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/README.md#_snippet_9\n\nLANGUAGE: commandline\nCODE:\n```\ndocker run -it \\\n    --network unstract-network \\\n    --env-file .env \\\n    -v \"$(pwd)\"/data_dir:/app/data_dir \\\n    unstract/tool-structure:0.0.1 \\\n    --command RUN \\\n    --settings '{\n        \"prompt_registry_id\": \"<ID_from_the_DB>\"\n    }' \\\n    --log-level DEBUG\n\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PDM - Bash\nDESCRIPTION: Installs all dependencies for the project or specific dependency groups using PDM. Required context is being inside the appropriate service directory and activating the virtual environment beforehand. The commands install regular, development, or production dependencies, depending on the provided flags. Outputs standard dependency installation logs.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\\npdm install\\n\\n# Install specific dev dependency group\\npdm install --dev -G lint\\n\\n# Install production dependencies only\\npdm install --prod --no-editable\n```\n\n----------------------------------------\n\nTITLE: Communicating Tool Specification via SPEC Message - JSON\nDESCRIPTION: This snippet describes the format for the 'SPEC' message type in the Unstract protocol, containing the full tool configuration schema as its payload along with a timestamp. The platform expects this format when querying a tool for its settings, and the tool must substitute <SPEC JSON> and <TIMESTAMP IN ISO FORMAT> with actual values at runtime. This message is central to platform-tool negotiation of configuration options.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"SPEC\",\n  \"spec\": \"<SPEC JSON>\",\n  \"emitted_at\": \"<TIMESTAMP IN ISO FORMAT>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Postgres via Docker Compose and PSQL - Bash\nDESCRIPTION: Invokes a new shell inside the running Postgres container and connects to the unstract_db database with the unstract_dev user. Requires Postgres to be running under Docker Compose and the necessary permissions. These commands open an interactive shell first, followed by the psql database client for executing SQL queries or admin tasks.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec -it db bash\n```\n\nLANGUAGE: bash\nCODE:\n```\npsql -d unstract_db -U unstract_dev\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Command to create a new Python virtual environment for isolating dependencies\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/platform-service/README.md#_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npython -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Running the VARIABLES Command - commandline\nDESCRIPTION: This command executes main.py to output the set of runtime variables and environment variables the tool will use. Requires environment files to be configured and dependencies to be installed. Outputs variable definitions in JSON.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/README.md#_snippet_6\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command VARIABLES\n\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Unstract Runner - Shell\nDESCRIPTION: This shell command builds the Unstract Runner Docker image using the Docker CLI. It requires Docker to be installed and accessible via the command line. The image is tagged as unstract/runner:1.1.1 and uses the local Dockerfile and context; you must run this from the project root. Input: none required. Output: a new image tagged in your local Docker registry.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/runner/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t unstract/runner:1.1.1 .\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Database Backup\nDESCRIPTION: Creates a timestamped backup of the existing Unstract database using pg_dump.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npg_dump -h localhost -p 5432 -U unstract_dev -d unstract_db -f unstract-backup-$(date +\"%Y-%m-%d_%H-%M-%S\").sql\n```\n\n----------------------------------------\n\nTITLE: Running the PROPERTIES Command - commandline\nDESCRIPTION: This command provides metadata for the Structure Tool, such as version, description, inputs, and outputs, by invoking main.py with the PROPERTIES command. Dependencies must be installed, and environment variables loaded. The output describes tool-level metadata in JSON.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/README.md#_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command PROPERTIES\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for local development\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/README.md#_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running the SPEC Command - commandline\nDESCRIPTION: This command executes main.py with the SPEC command to output the JSON schema for runtime configurable settings of the tool. main.py and its dependencies (including environment variables) must be properly configured before use. Outputs a JSON schema that describes configurable tool settings.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/README.md#_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command SPEC\n\n```\n\n----------------------------------------\n\nTITLE: Restoring PostgreSQL Database Backup\nDESCRIPTION: Restores a previously created database backup to a new database for migration testing.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npsql -h localhost -p 5432 -U unstract_dev -d unstract_db_v2 -f unstract-backup-<DateTime>.sql\n```\n\n----------------------------------------\n\nTITLE: Automating the Migration using psql Command-Line - Bash\nDESCRIPTION: This bash snippet shows how to execute a migration SQL script using psql. Users should save their migration query to a file (e.g., migration.sql), then use this command to run it against the specified database. The command requires PostgreSQL client tools and appropriate permissions.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/x2text-service/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npsql -U <username> -d <database_name> -f path/to/migration.sql\n```\n\n----------------------------------------\n\nTITLE: Building and Running Optional Docker Compose Services - Bash\nDESCRIPTION: Demonstrates how to build or run optional profile services using Docker Compose '--profile optional'. Input: Custom compose YAML, services marked as 'optional'. Output: Optional services built and/or started. Dependencies: Docker, docker-compose, definitions for 'optional' profile in YAML. Limitation: Make sure 'optional' profile exists.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Build optional services also\\nVERSION=dev docker compose -f docker-compose.build.yaml --profile optional build\\n# Up optional services also\\nVERSION=dev docker compose -f docker-compose.yaml --profile optional up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Settings Schema in Unstract - JSON\nDESCRIPTION: This JSON schema specifies the user-configurable settings expected by the Unstract platform for a given tool. Saved typically in config/spec.json, it lists required configuration options (such as embedding transformer and vector store), details possible enumerated values, and sets form display defaults for UI input. This schema is validated in the Unstract frontend and supplies command-line arguments for tool operation during workflows. Developers must keep this schema up to date with all required parameters.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Document Indexer\",\n  \"description\": \"Index documents based on their semantic content\",\n  \"type\": \"object\",\n  \"required\": [\n    \"embeddingTransformer\",\n    \"vectorStore\"\n  ],\n  \"properties\": {\n    \"embeddingTransformer\": {\n      \"type\": \"string\",\n      \"title\": \"Embeddings\",\n      \"description\": \"Embeddings to use\",\n      \"enum\": [\n        \"Azure OpenAI\"\n      ],\n      \"default\": \"Azure OpenAI\"\n    },\n    \"vectorStore\": {\n      \"type\": \"string\",\n      \"title\": \"Vector store\",\n      \"description\": \"Vector store to use\",\n      \"enum\": [\n        \"Postgres pg_vector\"\n      ],\n      \"default\": \"Postgres pg_vector\"\n    },\n    \"overwrite\": {\n      \"type\": \"boolean\",\n      \"title\": \"Overwrite existing vectors\",\n      \"default\": false,\n      \"description\": \"Overwrite existing vectors\"\n    },\n    \"useCache\": {\n      \"type\": \"boolean\",\n      \"title\": \"Cache and use cached results\",\n      \"default\": true,\n      \"description\": \"Use cached results\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Create React App Project - Shell\nDESCRIPTION: This snippet demonstrates how to clone the repository from GitHub and install NPM dependencies for the React frontend. It expects Node.js 16 and NPM to be installed. The commands clone the repository, navigate to the frontend folder, and install all required dependencies as specified in package.json. Inputs are the GitHub URL and the file system location; outputs are a populated project folder with dependencies ready for use.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/frontend/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/Zipstack/unstract.git\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring PDM to Include src Package Directory - TOML\nDESCRIPTION: This TOML snippet configures PDM to recognize 'src' as the package directory and includes it in builds. Input: Place inside 'pyproject.toml'. Output: Packaging tools recognize 'src' as root for modules. Dependency: PDM. Important for correct installation and distribution.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/README.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pdm.build]\\nincludes = [\\\"src\\\"]\\npackage-dir = \\\"src\\\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Specific Connector Service with Docker Compose - Bash\nDESCRIPTION: This Bash snippet starts an individual service (e.g., 'mysql') from the set of connector services defined in 'docker-compose-connector.yaml'. The user specifies the service name as an argument; the snippet presumes prior environment setup in .env and a valid Docker Compose configuration. Upon execution, only the designated service will run in detached mode, leaving other services untouched.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/connector/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Up a specific service alone\\ndocker compose -f docker-compose-connector.yaml up -d mysql\n```\n\n----------------------------------------\n\nTITLE: Test Connection Response Samples - JSON\nDESCRIPTION: These code snippets illustrate sample JSON responses from the /api/v1/x2text/test-connection endpoint. Status code 200 indicates a successful connection, while code 401 denotes a malformed or missing API key in the header. These examples help users understand the expected response structure for connection attempts.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/x2text-service/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Test connection sucessful\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"detail\": \"API key is malformed, please type the API key correctly in the header.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Service Health via cURL - Bash\nDESCRIPTION: This bash snippet calls the /api/v1/x2text/health endpoint to check if the Flask service is operational. It demonstrates a simple health check with a single curl command. Successful responses should return status 200 and the string 'OK'.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/x2text-service/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://{host}:{port}/api/v1/x2text/health'\n\n```\n\n----------------------------------------\n\nTITLE: Publishing Docker Image to Docker Hub - Shell\nDESCRIPTION: This shell command pushes the previously built unstract/runner:1.1.1 Docker image to Docker Hub. It requires Docker login credentials for the unstract account and assumes the image exists locally. Input: none required. Output: the tagged image will be uploaded to Docker Hub.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/runner/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker push unstract/runner:1.1.1\n```\n\n----------------------------------------\n\nTITLE: Running Gunicorn with a Python Package Reference - Bash\nDESCRIPTION: Command for starting Gunicorn referencing both a Python-based config and an application object in a package. Input: Gunicorn installed, config at 'unstract.scheduler.config.gunicorn', app at 'unstract.scheduler.main:app'. Output: WSGI server serving the specified app. Dependencies: gunicorn, correct PYTHONPATH, config/app modules installed.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn \\\"-c\\\" \\\"python:unstract.scheduler.config.gunicorn\\\" \\\"unstract.scheduler.main:app\\\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Docker Compose Configuration - Bash\nDESCRIPTION: Details how to copy and use a compose override file to customize configuration for Docker Compose. Input: 'sample.compose.override.yaml' is copied to 'compose.override.yaml'. Output: Overridden configuration when running 'docker compose up'. Dependencies: Docker, docker-compose, both YAML files present. Limitation: Changes only affect configuration merged at runtime.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp sample.compose.override.yaml compose.override.yaml\\n\\n# Configuration in docker-compose.yaml gets overridden\\nVERSION=dev docker compose -f docker-compose.yaml -f compose.override.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment with PDM for Python Project\nDESCRIPTION: Commands to create and activate a virtual environment using PDM (Python Development Master). This ensures a isolated environment for running the release notes script.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/scripts/release-notes/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npdm venv create -w virtualenv --with-pip\neval $(pdm venv activate in-project)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Scripts with PDM - Bash\nDESCRIPTION: Lists all PDM scripts defined in the project's configuration. Requires the user to be in the service directory. Script names and descriptions are outputted, allowing the user to choose a command for further execution. No dependencies aside from PDM and a pyproject.toml configured with script entries.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# List the possible scripts that can be executed\\npdm run -l\n```\n\n----------------------------------------\n\nTITLE: Reporting Tool Run Results via RESULT Message - JSON\nDESCRIPTION: The RESULT message format is used by Unstract tools to report workflow outcomes. With a payload containing workflow identifiers, timing information, and result outputs (either JSON or string), this message is parsed by the platform to collect tool execution results. All fields with angle brackets are dynamic and substituted with concrete values by the tool at run time.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"RESULT\",\n  \"result\": {\n    \"workflow_id\": \"<WORKFLOW_ID>\",\n    \"elapsed_time\": \"<ELAPSED TIME>\",\n    \"output\": \"<OUTPUT JSON or STRING>\"\n  },\n  \"emitted_at\": \"<TIMESTAMP IN ISO FORMAT>\"\n} \n```\n\n----------------------------------------\n\nTITLE: Running Tool Commands for Specification, Properties, Icon, and Variables - Command-Line - commandline\nDESCRIPTION: Each snippet demonstrates how to invoke the Unstract Text Extractor Tool with a different '--command' flag for various functionality: querying the settings schema (SPEC), viewing tool metadata (PROPERTIES), obtaining the SVG icon (ICON), and listing required runtime environment variables (VARIABLES). All commands are run via 'python main.py', assuming correct virtual environment and dependencies. Outputs differ per command, typically JSON or SVG text to stdout.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/text_extractor/README.md#_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command SPEC\n```\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command PROPERTIES\n```\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command ICON\n```\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command VARIABLES\n```\n\n----------------------------------------\n\nTITLE: Installing Python Project Dependencies with PDM - Shell\nDESCRIPTION: Installs all required Python dependencies listed for the Unstract project using PDM, a modern Python package and dependency manager. Run this command after ensuring your virtual environment is activated and any prior system dependencies (for example, those for PyMSSQL) are satisfied. The command requires that pdm is installed and uses the project\\'s pyproject.toml to determine dependencies. No additional parameters are required.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/unstract/connectors/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npdm install\n\n```\n\n----------------------------------------\n\nTITLE: Starting Connector Services with Docker Compose - Bash\nDESCRIPTION: This Bash snippet launches all connector database services as defined in the 'docker-compose-connector.yaml' file using Docker Compose. It is designed to be run from the root of the project after ensuring the correct environment variables are set in the .env file. Dependencies include Docker Compose and a valid YAML configuration; no arguments are required, and successful execution will start all defined services in detached mode.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/connector/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Up all connector db\\ndocker compose -f docker-compose-connector.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Example Django Environment Variables File - Shell\nDESCRIPTION: Shows an example .env file configuration for Django settings and Postgres database connection. Values include the settings module, DB host, user, password, name, and port. Requires the user to update values in their own .env file before running the server. These environment variables are read by Django at server startup.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDJANGO_SETTINGS_MODULE='backend.settings.dev'\\nDB_HOST='localhost'\\nDB_USER='unstract_dev'\\nDB_PASSWORD='unstract_pass'\\nDB_NAME='unstract_db'\\nDB_PORT=5432\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Tool in registry.yaml\nDESCRIPTION: YAML configuration for specifying a Docker image tool in the registry.yaml file. This defines the tool's image name and tag from the 'unstract' Docker repository, with 'latest' as the default tag if not specified.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/unstract/tool-registry/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n   - docker:unstract/<tool_image_name>:<tool_image_tag>\n```\n\n----------------------------------------\n\nTITLE: Running Flask Development Server\nDESCRIPTION: Command to start the Flask development server locally on port 3001\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/platform-service/README.md#_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\nflask run --host localhost --port 3001\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Client for Database Backup\nDESCRIPTION: Installs the PostgreSQL client tools which include pg_dump for database backup operations.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install postgresql-client\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container\nDESCRIPTION: Command to run the tool in a Docker container with necessary environment variables and volume mounting\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/README.md#_snippet_9\n\nLANGUAGE: commandline\nCODE:\n```\ndocker run -it \\\n    --network unstract-network \\\n    --env-file .env \\\n    -v \"$(pwd)\"/data_dir:/app/data_dir \\\n    unstract/tool-classifier:0.0.1 \\\n    --command RUN \\\n    --settings '{\n        \"llmAdapterId\": \"e9884c72-3920-43e7-9904-bb59f308f50d\",\n        \"classificationBins\": [\"business\", \"sports\", \"politics\", \"entertainment\", \"tech\"],\n        \"useCache\": true\n    }' \\\n    --log-level DEBUG\n```\n\n----------------------------------------\n\nTITLE: Reporting Tool Log Event via LOG Message - JSON\nDESCRIPTION: This LOG message provides a structured way for a tool to communicate log details to the Unstract platform, including the severity level, human-readable message, and timestamp. Valid levels are DEBUG, INFO, WARN, ERROR, and FATAL. Placeholders are to be replaced at runtime as the tool emits logs.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"LOG\",\n  \"level\": \"<LOG LEVEL>\",\n  \"log\": \"<LOG MESSAGE>\",\n  \"emitted_at\": \"<TIMESTAMP IN ISO FORMAT>\"\n} \n```\n\n----------------------------------------\n\nTITLE: Communicating Tool Properties via PROPERTIES Message - JSON\nDESCRIPTION: This message structure is used within the Unstract protocol to transmit detailed tool property information to the platform. Included fields are the 'PROPERTIES' type identifier, the complete properties JSON, and an ISO-format emission timestamp. The tool should supply this message when the platform requests operational metadata, with placeholders replaced at runtime.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"PROPERTIES\",\n  \"properties\": \"<PROPERTIES JSON>\",\n  \"emitted_at\": \"<TIMESTAMP IN ISO FORMAT>\"\n} \n```\n\n----------------------------------------\n\nTITLE: Running VARIABLES Command\nDESCRIPTION: Command to display runtime variables and environment settings\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/README.md#_snippet_6\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command VARIABLES\n```\n\n----------------------------------------\n\nTITLE: Reporting Execution Cost via COST Message - JSON\nDESCRIPTION: The COST message is used for transmitting tool execution cost data to the Unstract platform, with fields for the cost value (float), cost units (e.g., USD, tokens), and a timestamp. This message format is necessary for tools whose operation incurs measurable cost and allows the platform to present or audit resource consumption.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"COST\",\n  \"cost\": \"<COST>\",\n  \"cost_units\": \"<COST UNITS>\",\n  \"emitted_at\": \"<TIMESTAMP IN ISO FORMAT>\"\n} \n```\n\n----------------------------------------\n\nTITLE: Running SPEC Command\nDESCRIPTION: Command to display JSON schema for runtime configurable settings\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/README.md#_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command SPEC\n```\n\n----------------------------------------\n\nTITLE: Installing Local SDK\nDESCRIPTION: Command to install the unstract-sdk from a local repository for development\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/README.md#_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\npip install -e ~/path_to_repo/sdks/.\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Tool as a Docker Container - Command-Line - commandline\nDESCRIPTION: This set of snippets covers building the Unstract Text Extractor Docker image and running it interactively. The 'docker build' command compiles the image, tagged as 'unstract/tool-example:0.0.1'. The 'docker run' command executes the tool in a container, connecting it to an existing Docker network, binding a host data directory into the container, and passing configuration via '.env'. The tool is invoked as in previous snippets with the 'RUN' command and required settings. Assumes Docker and necessary services/network are available.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/text_extractor/README.md#_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\ndocker build -t unstract/tool-example:0.0.1 .\n```\n\nLANGUAGE: commandline\nCODE:\n```\ndocker run -it \\\n    --network unstract-network \\\n    --env-file .env \\\n    -v \"$(pwd)\"/data_dir:/app/data_dir \\\n    unstract/tool-example:0.0.1 \\\n    --command RUN \\\n    --settings '{\n        \"extractorId\": \"<extractor_id of adapter>\"\n        }' \\\n    --workflow-id '00000000-0000-0000-0000-000000000000' \\\n    --log-level DEBUG\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment\nDESCRIPTION: Activates the Python virtual environment within the backend container before running migration commands.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Sending Single Step User Messages via SINGLE_STEP_MESSAGE - JSON\nDESCRIPTION: This message format is intended for debug or interactive tool operation (single stepping) in Unstract. It enables a tool to send arbitrary user-facing messages to the platform with an ISO timestamp for context. The <MESSAGE> placeholder is replaced at runtime with actual content intended for display during stepwise execution.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"SINGLE_STEP_MESSAGE\",\n  \"message\": \"<MESSAGE>\",\n  \"emitted_at\": \"<TIMESTAMP IN ISO FORMAT>\"\n} \n```\n\n----------------------------------------\n\nTITLE: Google OAuth2 Credentials for Django .env - Shell\nDESCRIPTION: Specifies the format of environment variables required for authenticating Google Drive access through PyDrive2. Place these variables into backend/.env, substituting your Google OAuth2 credentials. Values are retrieved by the backend for API access to Google Drive. Used only if the Google Drive connector is enabled.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_OAUTH2_KEY=\\\"<client-id>\\\"\\nGOOGLE_OAUTH2_SECRET=\\\"<client-secret>\\\"\n```\n\n----------------------------------------\n\nTITLE: Building the Docker Image - commandline\nDESCRIPTION: This command builds a Docker image for the Structure Tool, tagging it as unstract/tool-structure:0.0.1. Requires Docker and a valid Dockerfile in the current directory. The resulting image can be used for isolated deployment and testing.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/README.md#_snippet_8\n\nLANGUAGE: commandline\nCODE:\n```\ndocker build -t unstract/tool-structure:0.0.1 .\n\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: Command to build the Docker image for the classification tool\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/README.md#_snippet_8\n\nLANGUAGE: commandline\nCODE:\n```\ndocker build -t unstract/tool-classifier:0.0.1 .\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment and Installing Dependencies - Command-Line - commandline\nDESCRIPTION: These snippets illustrate the setup of a Python virtual environment, its activation, and two different methods for dependency installation: from a requirements file or via a local editable SDK path. It assumes Python and pip are pre-installed. The 'python-dotenv' dependency is highlighted for configuration. Inputs are shell commands with no output except possible CLI/system messages. Users must replace '~/path_to_repo/sdks/.' with their specific local SDK path if using editable install.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/text_extractor/README.md#_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\n```\n\nLANGUAGE: commandline\nCODE:\n```\npip install -r requirements.txt\n```\n\nLANGUAGE: commandline\nCODE:\n```\npip install -e ~/path_to_repo/sdks/.\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Tool Registration\nDESCRIPTION: Command to build a Docker image for a tool that needs to be registered. This command uses the Dockerfile in the tool's folder and tags the image with a specified name and version.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/unstract/tool-registry/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --pull --rm -f \"tools/<tool_folder>/Dockerfile\" -t <image_name>:<image_tag>\n```\n\n----------------------------------------\n\nTITLE: Installing PyMSSQL Prerequisites on MacOS - Shell\nDESCRIPTION: Installs system-level dependencies required for PyMSSQL support on MacOS, including pkg-config and freetds, which are essential for building and linking the PyMSSQL driver. Execute this command in the terminal before installing Python dependencies if you plan to use MSSQL with Unstract on a Mac. No parameters or inputs are needed; the command runs until completion and requires Homebrew to be installed.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/unstract/connectors/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install pkg-config freetds\n\n```\n\n----------------------------------------\n\nTITLE: Transmitting Runtime Variables via VARIABLES Message - JSON\nDESCRIPTION: This message format is used in the Unstract protocol to communicate the runtime variables schema (from runtime_variables.json) to the platform. The message contains a 'VARIABLES' type, the variables specification, and an emission timestamp in ISO format, with template placeholders to be replaced at runtime.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"VARIABLES\",\n  \"variables\": \"<VARIABLES JSON>\",\n  \"emitted_at\": \"<TIMESTAMP IN ISO FORMAT>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Local unstract-sdk Library - commandline\nDESCRIPTION: This command installs the unstract-sdk library from a local repository in editable mode, enabling development with the latest local changes. The path must be replaced by the actual path to the local unstract-sdk repository. Requires pip and local filesystem access.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/README.md#_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\npip install -e ~/path_to_repo/sdks/.\n\n```\n\n----------------------------------------\n\nTITLE: Health Endpoint Response Sample - Plain Text\nDESCRIPTION: This code snippet shows a typical response from the health check endpoint, returning 'OK' with an HTTP 200 status. Indicates to users and monitoring systems that the service is up and running.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/x2text-service/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST Environment Variable for Docker Desktop - Shell\nDESCRIPTION: This command sets the DOCKER_HOST environment variable to point to the Docker Desktop UNIX domain socket, resolving Python Docker client connection issues on some setups. Prerequisite: Docker Desktop installed and the referenced socket file exists. The variable can be added to shell configuration files for persistence.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/runner/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport DOCKER_HOST=unix:///$HOME/.docker/desktop/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Specific Django Command\nDESCRIPTION: Shows detailed help information for a specific Django management command.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py help <command_name>\n```\n\n----------------------------------------\n\nTITLE: Dropping V2 Schema\nDESCRIPTION: Executes the Django management command to drop the v2 schema if needed.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py drop_schema\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Unstract Tools using Python Requirements\nDESCRIPTION: This snippet defines the required dependencies using the requirements.txt syntax for Python projects. It specifies that the unstract-sdk package with the 'aws' extra is required at version 0.62.1 or compatible. The file also includes comments guiding users about dependency scope and AWS requirements. Inputs are package specifications; outputs are handled by pip, which installs the necessary libraries. The only notable constraint is the exclusive use of Python-compatible package syntax.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/requirements.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Add your dependencies here\n\n# Required for all unstract tools\n# aws alone is needed here\n# because tools use transient temporary storage.\n\nunstract-sdk[aws]~=0.62.1\n```\n\n----------------------------------------\n\nTITLE: Running ICON Command\nDESCRIPTION: Command to retrieve the tool's SVG icon used by the frontend\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/README.md#_snippet_5\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command ICON\n```\n\n----------------------------------------\n\nTITLE: Migrating x2text_audit Table to New Schema - SQL\nDESCRIPTION: This SQL query migrates data from the public.x2text_audit_old table to the new <DB_SCHEMA>.x2text_audit table, as part of an upgrade for users moving to version 0.93.0 or later. It ensures no duplicates are inserted by using ON CONFLICT DO NOTHING. Users must replace <DB_SCHEMA> with the schema defined in the .env configuration, and prerequisites include updating .env and creating the new table through the service first.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/x2text-service/README.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO <DB_SCHEMA>.x2text_audit (id, created_at, org_id, file_name, file_type, file_size_in_kb, status)\nSELECT id, created_at, org_id, file_name, file_type, file_size_in_kb, status\nFROM public.x2text_audit_old\nON CONFLICT DO NOTHING\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Container\nDESCRIPTION: Executes an interactive bash shell in the PostgreSQL database container for direct database operations.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it unstract-db /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with NPM - Shell\nDESCRIPTION: This snippet starts the React development server using NPM. It requires the project dependencies to have been previously installed. When executed, it launches the React app locally at http://localhost:3000 and reloads on file changes. Any lint errors will appear in the console.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/frontend/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running the ICON Command - commandline\nDESCRIPTION: Invoking main.py with the ICON command returns the SVG icon for the tool, which is used in the frontend. This action assumes dependencies are set and main.py is prepared. Returns SVG XML data to stdout.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/README.md#_snippet_5\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command ICON\n\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for Docker Socket on Docker Desktop - Shell\nDESCRIPTION: This administrative shell command creates a symbolic link from the Docker Desktop socket to the expected /var/run/docker.sock path, allowing compatibility with tools expecting the latter. Requires sudo privileges. Input: none, output: symlink established (may overwrite existing symlink if present).\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/runner/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s \"$HOME/.docker/run/docker.sock\" /var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Project Site-Packages Installation Path Example - Bash\nDESCRIPTION: Indicates the expected location after installing the project ('unstract/scheduler/main.py') inside a Python 3.12 virtual environment. Output: Path under '.venv/lib/python3.12/site-packages'. Intended as a location reference, not executable code.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n.venv/lib/python3.12/site-packages/unstract/scheduler/main.py\n```\n\n----------------------------------------\n\nTITLE: Dockerizing React App for Development - Shell\nDESCRIPTION: This snippet builds and runs a Docker container for the React development environment using a custom Dockerfile.dev. 'docker build' creates a Docker image tagged as 'frontend:dev', and 'docker run' starts a container mapping local port 3000 for frontend access. Prerequisites include Docker installed, project files colocated with the Dockerfile, and a valid Dockerfile.dev. Outputs are Docker images and a running container serving the development build.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/frontend/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Build the Docker image\ndocker build -t frontend:dev -f Dockerfile.dev .\n\n# Run the Docker container\ndocker run -it -p 3000:3000 frontend:dev\n```\n\n----------------------------------------\n\nTITLE: Dumping Django Application Data to a JSON Fixture - Shell\nDESCRIPTION: Exports the current state of application data from the Django database to a formatted JSON fixture file. The command uses 'manage.py dumpdata', targeting a specified application ('<app_name>'), and outputs indented JSON to a given path. Requires Django and appropriate permissions to access both the database and the filesystem. The arguments '<app_name>' and '<path_to_filename>.json' must be replaced with actual values. This process is essential for capturing the state after seeding, enabling reuse across test runs.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/utils/seed_data/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython manage.py dumpdata <app_name> --indent 4 > <path_to_filename>.json\n```\n\n----------------------------------------\n\nTITLE: Running RUN Command\nDESCRIPTION: Command to execute the tool with specific classification settings and debug logging\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/README.md#_snippet_7\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py \\\n    --command RUN \\\n    --settings '{\n        \"llmAdapterId\": \"e9884c72-3920-43e7-9904-bb59f308f50d\",\n        \"classificationBins\": [\"business\", \"sports\", \"politics\", \"entertainment\", \"tech\"],\n        \"useCache\": true\n    }' \\\n    --log-level DEBUG\n```\n\n----------------------------------------\n\nTITLE: Accessing Unstract Backend Container\nDESCRIPTION: Executes an interactive bash shell in the Unstract backend container for running migration commands.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/migrating/v2/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it unstract-backend /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Starting a Celery Worker with Autoscaling - Bash\nDESCRIPTION: Starts a Celery worker with dynamic autoscaling, setting the maximum and minimum number of concurrent worker processes. Requires the Celery package and access to CPU resources. Replace '<max_workers>' and '<min_workers>' with desired worker limits. Used for scaling task handling dynamically according to system load.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncelery -A backend worker --loglevel=info -Q <queue_name> --autoscale=<max_workers>,<min_workers>\n```\n\n----------------------------------------\n\nTITLE: Python Project Layout Example - Bash\nDESCRIPTION: Shows an example directory tree for organizing a Python project with a 'src' folder layout suitable for PDM packaging. Output: Reference structure for Python project files and directories. No explicit dependencies but ties into Python packaging with PDM.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nscheduler\\n  |- src\\n  |   |- unstract\\n  |       |- scheduler\\n  |           |- main.py\\n  |- pdm.lock\\n  |- pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Launching Flower Dashboard for Celery Monitoring - Bash\nDESCRIPTION: Starts the Flower monitoring UI for Celery tasks, binding to the default port 5555. Requires the 'flower' package to be installed. Provides a web dashboard for inspecting Celery tasks, workers, and queues. Execution will output a URL for browser-based access.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncelery -A backend flower\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install required dependencies from requirements.txt file\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/README.md#_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Transmitting Icon SVG via ICON Message - JSON\nDESCRIPTION: This protocol message allows a tool to directly transmit its SVG icon to the Unstract platform in string/text format. The message consists of a 'ICON' type identifier, the SVG data as a string, and the emitted timestamp. The icon is sourced from config/icon.svg, and placeholders must be replaced as appropriate at runtime.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ICON\",\n  \"icon\": \"<ICON SVG>\",\n  \"emitted_at\": \"<TIMESTAMP IN ISO FORMAT>\"\n} \n```\n\n----------------------------------------\n\nTITLE: Testing Unstructured IO API Connection via cURL - Bash\nDESCRIPTION: This bash snippet demonstrates how to test the connection from the Flask x2text-service to the Unstructured IO API. It sends a request with required headers and form data fields, including the Unstructured API URL, the user's API key, and a file to upload. The Authorization header should contain the platform key, and the service's response will indicate if the integration is successful.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/x2text-service/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://{host}:{port}/api/v1/x2text/test-connection' \\\n--header 'accept: application/json' \\\n--header 'Authorization: Bearer <platform-key>' \\\n--form 'unstructured-url=\"https://api.unstructured.io/general/v0/general\"' \\\n--form 'file=@\"/home/johny/Documents/test_resume.pdf\"' \\\n--form 'unstructured-api-key=\"<api-key>\"'  \n\n```\n\n----------------------------------------\n\nTITLE: Installing Unstract SDK with AWS Dependencies\nDESCRIPTION: Specifies installation of Unstract SDK version 0.62.1 with AWS extras enabled. This is required for all Unstract tools as they utilize AWS for transient temporary storage.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/structure/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nunstract-sdk[aws]~=0.62.1\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install project dependencies using PDM package manager\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/platform-service/README.md#_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\npdm install\n```\n\n----------------------------------------\n\nTITLE: Executing PDM Lockfile Generation Script - Bash Shell\nDESCRIPTION: This snippet demonstrates how to execute the pdm-lock.sh script from the command line to generate lock files for all necessary packages and services. It requires Bash or a compatible shell environment and assumes that pdm-lock.sh is located in the current directory and is executable. No additional parameters are required, and the output will be the generation of pdm.lock files for all default project locations.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/scripts/pdm-lock-gen/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./pdm-lock.sh\n\n```\n\n----------------------------------------\n\nTITLE: Running Release Notes Generator Script in Python\nDESCRIPTION: Command to execute the Python script for generating release notes. It suggests using the -h flag to view more information about usage options.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/docker/scripts/release-notes/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython print_release_notes.py -h\n```\n\n----------------------------------------\n\nTITLE: gRPC Proto Compilation Commands\nDESCRIPTION: Shell commands for generating Python gRPC files from proto definitions. Includes commands for generating both standard Protocol Buffer files and gRPC-specific Python implementations.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/unstract/flags/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m grpc_tools.protoc -I protos --python_out=. --grpc_python_out=. protos/evaluation.proto\n\nprotoc --python_out=./protos protos/evaluation.proto\n```\n\n----------------------------------------\n\nTITLE: Running PROPERTIES Command\nDESCRIPTION: Command to show tool metadata including version, description, inputs and outputs\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/tools/classifier/README.md#_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\npython main.py --command PROPERTIES\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment\nDESCRIPTION: Command to activate the Python virtual environment\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/platform-service/README.md#_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Presenting Condensed Consolidated Statements of Comprehensive Income for Apple Inc.\nDESCRIPTION: This code snippet shows the condensed consolidated statements of comprehensive income for Apple Inc. for the three months ended December 30, 2023, and December 31, 2022. It includes net income, other comprehensive income/loss items, and total comprehensive income.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/workflow_manager/endpoint_v2/tests/test_database_utils/static/large_doc.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                                   Apple Inc. \n\n              CONDENSED CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME (Unaudited) \n                                                   (In millions) \n\n                                                                                        Three Months Ended \n                                                                                   December 2023 30, December 2022 31, \n\nNet income                                                                       $       33,916 $         29,998 \nOther comprehensive income/(loss): \n    Change in foreign currency translation, net of tax                                      308              (14) \n\n    Change in unrealized gains/losses on derivative instruments, net of tax: \n        Change in fair value of derivative instruments                                     (531)            (988) \n        Adjustment for net (gains)/losses realized and included in net income              (823)          (1,766) \n             Total change in unrealized gains/losses on derivative instruments            (1,354)         (2,754) \n\n    Change in unrealized gains/losses on marketable debt securities, net of tax: \n        Change in fair value of marketable debt securities                                3,045             900 \n        Adjustment for net (gains)/losses realized and included in net income                75              65 \n             Total change in unrealized gains/losses on marketable debt securities        3,120             965 \n\nTotal other comprehensive income/(loss)                                                    2,074          (1,803) \nTotal comprehensive income                                                       $       35,990 $         28,195\n```\n\n----------------------------------------\n\nTITLE: Displaying Condensed Consolidated Balance Sheets for Apple Inc.\nDESCRIPTION: This code snippet presents the condensed consolidated balance sheets for Apple Inc. as of December 30, 2023, and September 30, 2023. It includes current and non-current assets, liabilities, and shareholders' equity details.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/workflow_manager/endpoint_v2/tests/test_database_utils/static/large_doc.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n                                                    Apple Inc. \n\n                          CONDENSED CONSOLIDATED BALANCE SHEETS (Unaudited) \n                  (In millions, except number of shares, which are reflected in thousands, and par value) \n\n                                                                                    December 2023 30, September 2023 30, \n\n                                                    ASSETS: \nCurrent assets: \n    Cash and cash equivalents                                                     $       40,760 $         29,965 \n    Marketable securities                                                                 32,340          31,590 \n    Accounts receivable, net                                                              23,194           29,508 \n    Vendor non-trade receivables                                                          26,908          31,477 \n    Inventories                                                                            6,511            6,331 \n    Other current assets                                                                  13,979           14,695 \n        Total current assets                                                             143,692          143,566 \n\nNon-current assets: \n    Marketable securities                                                                 99,475          100,544 \n    Property, plant and equipment, net                                                    43,666          43,715 \n    Other non-current assets                                                              66,681          64,758 \n        Total non-current assets                                                         209,822         209,017 \n            Total assets                                                          $      353,514 $       352,583 \n\n                                   LIABILITIES AND SHAREHOLDERS' EQUITY: \nCurrent liabilities: \n    Accounts payable                                                              $       58,146 $        62,611 \n    Other current liabilities                                                             54,611          58,829 \n    Deferred revenue                                                                       8,264            8,061 \n    Commercial paper                                                                       1,998            5,985 \n    Term debt                                                                             10,954            9,822 \n        Total current liabilities                                                        133,973          145,308 \n\nNon-current liabilities : \n    Term debt                                                                             95,088          95,281 \n    Other non-current liabilities                                                         50,353          49,848 \n        Total non-current liabilities                                                    145,441         145,129 \n            Total liabilities                                                            279,414         290,437 \n\nCommitments and contingencies \n\nShareholders' equity: \n    Common stock and additional paid-in capital, $0.00001 par value: 50,400,000 shares \n      authorized; 15,460,223 and 15,550,061 shares issued and outstanding, respectively   75,236           73,812 \n    Retained earnings/(Accumulated deficit)                                                8,242             (214) \n    Accumulated other comprehensive loss                                                  (9,378)         (11,452) \n        Total shareholders' equity                                                        74,100          62,146 \n            Total liabilities and shareholders' equity                            $      353,514 $       352,583\n```\n\n----------------------------------------\n\nTITLE: Presenting Condensed Consolidated Statements of Cash Flows for Apple Inc.\nDESCRIPTION: This code snippet shows the beginning of the condensed consolidated statements of cash flows for Apple Inc. for the three months ended December 30, 2023, and December 31, 2022. It includes the beginning cash balance and the first few items of operating activities.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/workflow_manager/endpoint_v2/tests/test_database_utils/static/large_doc.txt#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n                                                   Apple Inc. \n\n                    CONDENSED CONSOLIDATED STATEMENTS OF CASH FLOWS (Unaudited) \n                                                   (In millions) \n\n                                                                                        Three Months Ended \n                                                                                   December 2023 30, December 2022 31, \n\nCash, cash equivalents and restricted cash, beginning balances                    $      30,737 $         24,977 \n\nOperating activities: \n    Net income                                                                           33,916           29,998 \n    Adjustments to reconcile net income to cash generated by operating activities: \n        Depreciation and amortization                                                      2,848           2,916 \n        Share-based compensation expense                                                   2,997           2,905 \n        Other                                                                              (989)\n```\n\n----------------------------------------\n\nTITLE: Showing Condensed Consolidated Statements of Shareholders' Equity for Apple Inc.\nDESCRIPTION: This code snippet displays the condensed consolidated statements of shareholders' equity for Apple Inc. for the three months ended December 30, 2023, and December 31, 2022. It includes changes in common stock, retained earnings, and accumulated other comprehensive income/loss.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/workflow_manager/endpoint_v2/tests/test_database_utils/static/large_doc.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                                                   Apple Inc. \n\n              CONDENSED CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY (Unaudited) \n                                       (In millions, except per-share amounts) \n\n                                                                                        Three Months Ended \n                                                                                   December 2023 30, December 2022 31, \n\nTotal shareholders' equity, beginning balances                                    $      62,146   $       50,672 \n\nCommon stock and additional paid-in capital: \n    Beginning balances                                                                    73,812          64,849 \n        Common stock withheld related to net share settlement of equity awards            (1,660)         (1,434) \n        Share-based compensation                                                          3,084            2,984 \n    Ending balances                                                                       75,236          66,399 \n\nRetained earnings/(Accumulated deficit): \n    Beginning balances                                                                     (214)          (3,068) \n        Net income                                                                       33,916           29,998 \n        Dividends and dividend equivalents declared                                       (3,774)         (3,712) \n        Common stock withheld related to net share settlement of equity awards            (1,018)           (978) \n        Common stock repurchased                                                         (20,668)        (19,000) \n    Ending balances                                                                        8,242           3,240 \n\nAccumulated other comprehensive income/(loss): \n    Beginning balances                                                                  (11,452)         (11,109) \n        Other comprehensive income/(loss)                                                  2,074          (1,803) \n    Ending balances                                                                       (9,378)        (12,912) \n\nTotal shareholders' equity, ending balances                                      $        74,100 $        56,727 \n\nDividends and dividend equivalents declared per share or RSU                     $          0.24 $          0.23\n```\n\n----------------------------------------\n\nTITLE: Certifying Disclosure Controls for SEC Filings - Section 302 Certification - Plain Text\nDESCRIPTION: This plain text snippet represents the Section 302 certification by the CFO of Apple Inc. (Luca Maestri) required as part of the Form 10-Q submission. The certification affirms the effectiveness of disclosure controls and accuracy of the consolidated financial statements in accordance with the Exchange Act. Dependencies are regulatory compliance and adherence to precise legal language; no code execution or parameters are involved. The input and output are the literal certification text, with any modifications potentially leading to compliance issues.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/workflow_manager/endpoint_v2/tests/test_database_utils/static/large_doc.txt#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nI, Luca Maestri, certify that: \n\n1. I have reviewed this quarterly report on Form 10-Q of Apple Inc .; \n\n2. Based on my knowledge, this report does not contain any untrue statement of a material fact or omit to state a material fact \n    necessary to make the statements made, in light of the circumstances under which such statements were made, not \n    misleading with respect to the period covered by this report; \n\n3. Based on my knowledge, the financial statements, and other financial information included in this report, fairly present in all \n    material respects the financial condition, results of operations and cash flows of the Registrant as of, and for, the periods \n    presented in this report; \n\n4. The Registrant's other certifying officer(s) and I are responsible for establishing and maintaining disclosure controls and \n    procedures (as defined in Exchange Act Rules 13a-15(e) and 15d-15(e)) and internal control over financial reporting (as \n    defined in Exchange Act Rules 13a-15(f) and 15d-15(f)) for the Registrant and have: \n\n             (a) Designed such disclosure controls and procedures, or caused such disclosure controls and procedures to be \n                 designed under our supervision, to ensure that material information relating to the Registrant, including its \n                 consolidated subsidiaries, is made known to us by others within those entities, particularly during the period in \n                 which this report is being prepared; \n\n             (b) Designed such internal control over financial reporting, or caused such internal control over financial reporting \n                 to be designed under our supervision, to provide reasonable assurance regarding the reliability of financial \n                 reporting and the preparation of financial statements for external purposes in accordance with generally \n                 accepted accounting principles; \n\n             (c) Evaluated the effectiveness of the Registrant's disclosure controls and procedures and presented in this report \n                 our conclusions about the effectiveness of the disclosure controls and procedures, as of the end of the period \n                 covered by this report based on such evaluation; and \n\n             (d) Disclosed in this report any change in the Registrant's internal control over financial reporting that occurred \n                 during the Registrant's most recent fiscal quarter (the Registrant's fourth fiscal quarter in the case of an annual \n                 report) that has materially affected, or is reasonably likely to materially affect, the Registrant's internal control \n                 over financial reporting; and \n\n5. The Registrant's other certifying officer(s) and I have disclosed, based on our most recent evaluation of internal control over \n    financial reporting, to the Registrant's auditors and the audit committee of the Registrant's board of directors (or persons \n    performing the equivalent functions): \n\n             (a) All significant deficiencies and material weaknesses in the design or operation of internal control over financial \n                 reporting which are reasonably likely to adversely affect the Registrant's ability to record, process, summarize \n                 and report financial information; and \n\n             (b) Any fraud, whether or not material, that involves management or other employees who have a significant role \n                 in the Registrant's internal control over financial reporting. \n\nDate: February 1, 2024 \n\n                                                   By:    /s/ Luca Maestri \n                                                          Luca Maestri \n                                                          Chief Financial Officer \n```\n\n----------------------------------------\n\nTITLE: Certifying Disclosure Controls for SEC Filings - Section 302 Certification - Plain Text\nDESCRIPTION: This plain text snippet is a formal certification statement required by Section 302 of the Sarbanes-Oxley Act, as submitted by the CEO of Apple Inc. (Timothy D. Cook), as part of the Form 10-Q filing. It outlines the requirements for reviewing the report, the accuracy of statements, the effectiveness of disclosure controls, the design and evaluation of internal controls over financial reporting, and any incidents of fraud or deficiencies. No programming dependencies are required; the content is strictly regulatory, requiring inclusion in the standard filing format. Inputs and outputs are fixed, and alterations or omission of any clause is not permitted under compliance rules.\nSOURCE: https://github.com/zipstack/unstract.git/blob/main/backend/workflow_manager/endpoint_v2/tests/test_database_utils/static/large_doc.txt#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nI, Timothy D. Cook, certify that: \n\n1. I have reviewed this quarterly report on Form 10-Q of Apple Inc .; \n\n2. Based on my knowledge, this report does not contain any untrue statement of a material fact or omit to state a material fact \n    necessary to make the statements made, in light of the circumstances under which such statements were made, not \n    misleading with respect to the period covered by this report; \n\n3. Based on my knowledge, the financial statements, and other financial information included in this report, fairly present in all \n    material respects the financial condition, results of operations and cash flows of the Registrant as of, and for, the periods \n    presented in this report; \n\n4. The Registrant's other certifying officer(s) and I are responsible for establishing and maintaining disclosure controls and \n    procedures (as defined in Exchange Act Rules 13a-15(e) and 15d-15(e)) and internal control over financial reporting (as \n    defined in Exchange Act Rules 13a-15(f) and 15d-15(f)) for the Registrant and have: \n\n             (a) Designed such disclosure controls and procedures, or caused such disclosure controls and procedures to be \n                 designed under our supervision, to ensure that material information relating to the Registrant, including its \n                 consolidated subsidiaries, is made known to us by others within those entities, particularly during the period in \n                 which this report is being prepared; \n\n             (b) Designed such internal control over financial reporting, or caused such internal control over financial reporting \n                 to be designed under our supervision, to provide reasonable assurance regarding the reliability of financial \n                 reporting and the preparation of financial statements for external purposes in accordance with generally \n                 accepted accounting principles; \n\n             (c) Evaluated the effectiveness of the Registrant's disclosure controls and procedures and presented in this report \n                 our conclusions about the effectiveness of the disclosure controls and procedures, as of the end of the period \n                 covered by this report based on such evaluation; and \n\n             (d) Disclosed in this report any change in the Registrant's internal control over financial reporting that occurred \n                 during the Registrant's most recent fiscal quarter (the Registrant's fourth fiscal quarter in the case of an annual \n                 report) that has materially affected, or is reasonably likely to materially affect, the Registrant's internal control \n                 over financial reporting; and \n\n5. The Registrant's other certifying officer(s) and I have disclosed, based on our most recent evaluation of internal control over \n    financial reporting, to the Registrant's auditors and the audit committee of the Registrant's board of directors (or persons \n    performing the equivalent functions): \n\n             (a) All significant deficiencies and material weaknesses in the design or operation of internal control over financial \n                 reporting which are reasonably likely to adversely affect the Registrant's ability to record, process, summarize \n                 and report financial information; and \n\n             (b) Any fraud, whether or not material, that involves management or other employees who have a significant role \n                 in the Registrant's internal control over financial reporting. \n\nDate: February 1, 2024 \n\n                                                   By:    /s/ Timothy D. Cook \n                                                          Timothy D. Cook \n                                                          Chief Executive Officer \n```"
  }
]