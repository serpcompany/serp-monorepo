[
  {
    "owner": "wheregmis",
    "repo": "dioxus-motion.git",
    "content": "TITLE: Implementing Spring-based Animation in Dioxus with Motion Hook\nDESCRIPTION: This snippet demonstrates the core animation functionality of dioxus-motion, showing how to create a spring-based animation that moves a value from 0 to 100 with configurable physics properties like stiffness, damping, mass, and velocity.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/blog.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet mut position = use_motion(0.0f32);\nposition.animate_to(\n    100.0,\n    AnimationConfig::new(AnimationMode::Spring(Spring {\n        stiffness: 100.0,\n        damping: 10.0,\n        mass: 1.0,\n        velocity: 0.0,\n    }))\n);\n```\n\n----------------------------------------\n\nTITLE: Defining the Animatable Trait for Type-Safe Animations in Rust\nDESCRIPTION: This snippet shows the Animatable trait definition that enables type-safe animations for any compatible type. It defines required methods for animation calculations like zero value, epsilon, magnitude, scaling, addition, subtraction, and interpolation.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/blog.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub trait Animatable: 'static + Copy + Send + Sync {\n    fn zero() -> Self;\n    fn epsilon() -> f32;\n    fn magnitude(&self) -> f32;\n    fn scale(&self, factor: f32) -> Self;\n    fn add(&self, other: &Self) -> Self;\n    fn sub(&self, other: &Self) -> Self;\n    fn interpolate(&self, target: &Self, t: f32) -> Self;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Motion Hook for Animation State Management in Dioxus\nDESCRIPTION: This code defines the use_motion hook, which is a foundational component of the animation system. It initializes animation state for a value of type T that implements the Animatable trait and returns a Motion object to control the animation.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/blog.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub fn use_motion<T: Animatable>(initial: T) -> Motion<T> {\n    let state = use_signal(|| AnimationState::new(initial));\n    Motion::new(state)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Animatable Trait for Custom Types\nDESCRIPTION: Shows the definition of the Animatable trait which allows animation of custom data types by implementing required mathematical operations.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npub trait Animatable: Copy + 'static {\n    fn zero() -> Self;\n    fn epsilon() -> f32;\n    fn magnitude(&self) -> f32;\n    fn scale(&self, factor: f32) -> Self;\n    fn add(&self, other: &Self) -> Self;\n    fn sub(&self, other: &Self) -> Self;\n    fn interpolate(&self, target: &Self, t: f32) -> Self;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Pulse Animation Effect with Springs\nDESCRIPTION: Implements a pulsing UI element using the use_motion hook with spring physics for a bouncy animation that loops infinitely.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse dioxus_motion::prelude::*;\n\n#[component]\nfn PulseEffect() -> Element {\n    let scale = use_motion(1.0f32);\n\n    use_effect(move || {\n        scale.animate_to(\n            1.2,\n            AnimationConfig::new(AnimationMode::Spring(Spring {\n                stiffness: 100.0,\n                damping: 5.0,\n                mass: 0.5,\n                velocity: 1.0\n            }))\n            .with_loop(LoopMode::Infinite)\n        );\n    });\n\n    rsx! {\n        div {\n            class: \"w-20 h-20 bg-blue-500 rounded-full\",\n            style: \"transform: scale({scale.get_value()})\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Multi-Step Animation Sequence\nDESCRIPTION: Creates a complex animation sequence that chains multiple steps with different spring configurations to create a bouncy effect.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet scale = use_motion(1.0f32);\n\n// Create a bouncy sequence\nlet sequence = AnimationSequence::new()\n    .then(\n        1.2, // Scale up\n        AnimationConfig::new(AnimationMode::Spring(Spring {\n            stiffness: 400.0,\n            damping: 10.0,\n            mass: 1.0,\n            velocity: 5.0,\n        }))\n    )\n    .then(\n        0.8, // Scale down\n        AnimationConfig::new(AnimationMode::Spring(Spring {\n            stiffness: 300.0,\n            damping: 15.0,\n            mass: 1.0,\n            velocity: -2.0,\n        }))\n    )\n    .then(\n        1.0, // Return to original\n        AnimationConfig::new(AnimationMode::Spring(Spring::default()))\n    );\n\n// Start the sequence\nscale.animate_sequence(sequence);\n// Each step in the sequence can have its own timing, easing, and spring physics configuration. Sequences can also be looped or chained with other animations.\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D Cube Animation with Custom Transform Type\nDESCRIPTION: This example demonstrates a more complex animation use case with a custom Transform3D type for a 3D rotating cube. It shows how to define a custom type that can be animated and how to configure spring physics with infinite looping for continuous animation.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/blog.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Copy)]\nstruct Transform3D {\n    rotate_x: f32,\n    rotate_y: f32,\n    rotate_z: f32,\n    translate_x: f32,\n    translate_y: f32,\n    scale: f32,\n}\n\n#[component]\nfn SwingingCube() -> Element {\n    let mut transform = use_motion(Transform3D::zero());\n    \n    // Animate the cube with spring physics\n    transform.animate_to(\n        Transform3D::new(\n            PI / 3.0,  // X rotation\n            PI / 2.0,  // Y rotation\n            PI / 4.0,  // Z rotation\n            2.0,       // X translation\n            -1.0,      // Y translation\n            1.2,       // Scale\n        ),\n        AnimationConfig::new(AnimationMode::Spring(Spring {\n            stiffness: 35.0,\n            damping: 5.0,\n            mass: 1.0,\n            velocity: 2.0,\n        }))\n        .with_loop(LoopMode::Infinite),\n    );\n    // ...rest of the implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated Flower Component with Coordinated Animations\nDESCRIPTION: This snippet showcases how to create organic animations with multiple coordinated elements using dioxus-motion. It defines a PetalTransform type for the flower petals and uses spring physics with infinite looping to create a blooming effect.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/blog.md#2025-04-21_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Copy)]\nstruct PetalTransform {\n    rotate: f32,\n    scale: f32,\n    translate_x: f32,\n    translate_y: f32,\n}\n\n#[component]\nfn AnimatedFlower() -> Element {\n    let mut petal_transform = use_motion(PetalTransform::zero());\n    let mut center_scale = use_motion(0.0f32);\n    \n    // Animate petals blooming\n    petal_transform.animate_to(\n        PetalTransform::new(PI / 4.0, 1.2, 3.0, 3.0),\n        AnimationConfig::new(AnimationMode::Spring(Spring {\n            stiffness: 60.0,\n            damping: 8.0,\n            mass: 0.5,\n            velocity: 1.0,\n        }))\n        .with_loop(LoopMode::Infinite),\n    );\n    // ...rest of the implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Animatable Position Type\nDESCRIPTION: Demonstrates how to implement the Animatable trait for a custom 2D position structure to enable smooth animations of positions.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Copy, Clone)]\nstruct Position {\n    x: f32,\n    y: f32,\n}\n\nimpl Animatable for Position {\n    fn zero() -> Self {\n        Position { x: 0.0, y: 0.0 }\n    }\n\n    fn epsilon() -> f32 {\n        0.001\n    }\n\n    fn magnitude(&self) -> f32 {\n        (self.x * self.x + self.y * self.y).sqrt()\n    }\n\n    fn scale(&self, factor: f32) -> Self {\n        Position {\n            x: self.x * factor,\n            y: self.y * factor,\n        }\n    }\n\n    fn add(&self, other: &Self) -> Self {\n        Position {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n\n    fn sub(&self, other: &Self) -> Self {\n        Position {\n            x: self.x - other.x,\n            y: self.y - other.y,\n        }\n    }\n\n    fn interpolate(&self, target: &Self, t: f32) -> Self {\n        Position {\n            x: self.x + (target.x - self.x) * t,\n            y: self.y + (target.y - self.y) * t,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interpolating Circular Values in Rust\nDESCRIPTION: Implements an interpolation method for circular values such as angles, ensuring the shortest path between two angle values. The function handles wrapping around the circle by adjusting differences that exceed PI radians.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nfn interpolate(&self, target: &Self, t: f32) -> Self {\n    let mut diff = target.angle - self.angle;\n    // Ensure shortest path\n    if diff > PI { diff -= 2.0 * PI; }\n    if diff < -PI { diff += 2.0 * PI; }\n    Self { angle: self.angle + diff * t }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Animation in Rust using Dioxus Motion\nDESCRIPTION: Demonstrates how to create color transitions using the use_motion hook. The example shows animating from a blue color to purple using spring animation mode.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet color = use_motion(Color::from_rgba(59, 130, 246, 255));\ncolor.animate_to(\n    Color::from_rgba(168, 85, 247, 255),\n    AnimationConfig::new(AnimationMode::Spring(Spring::default()))\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Value Transitions in Rust for Dioxus Motion\nDESCRIPTION: This code snippet demonstrates how to create a basic value transition animation using the Motion component in Dioxus Motion. It shows a transition from 0.0 to 100.0 over a duration of 300 milliseconds.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/ROADMAP.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nMotion::new(0.0)\n    .to(100.0)\n    .duration(Duration::from_millis(300))\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Transitions with Route Annotations\nDESCRIPTION: Demonstrates how to configure page transitions by annotating routes with transition effects using the MotionTransitions derive macro.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse dioxus_motion::prelude::*;\n\n#[derive(Routable, Clone, Debug, PartialEq, MotionTransitions )]\n#[rustfmt::skip]\nenum Route {\n    #[layout(NavBar)]\n        #[route(\"/\")]\n        #[transition(Fade)]\n        Home {},\n        #[route(\"/slide-left\")]\n        #[transition(ZoomIn)]\n        SlideLeft {},\n        #[route(\"/slide-right\")]\n        SlideRight {},\n        #[route(\"/slide-up\")]\n        SlideUp {},\n        #[route(\"/slide-down\")]\n        SlideDown {},\n        #[route(\"/fade\")]\n        Fade {},\n    #[end_layout]\n    #[route(\"/:..route\")]\n    PageNotFound { route: Vec<String> },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up an Animated Outlet for Page Transitions\nDESCRIPTION: Shows how to replace the standard Outlet component with AnimatedOutlet to enable transitions between routes in a Dioxus application.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[component]\nfn NavBar() -> Element {\n    rsx! {\n        nav { id: \"navbar take it\",\n            Link { to: Route::Home {}, \"Home\" }\n            Link { to: Route::SlideLeft {}, \"Blog\" }\n        }\n        AnimatedOutlet::<Route> {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Normalized Values in Rust\nDESCRIPTION: Implements a scaling function for normalized values (like colors) that ensures the result stays within the valid range of 0.0 to 1.0. This prevents values from exceeding their normalized boundaries during animations.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nfn scale(&self, factor: f32) -> Self {\n    Self {\n        value: (self.value * factor).clamp(0.0, 1.0)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Delays and Loops in Dioxus Motion\nDESCRIPTION: Shows how to configure animation timing with delays and loop modes. The example sets a 1-second delay and configures the animation to repeat 3 times.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nAnimationConfig::new(mode)\n    .with_delay(Duration::from_secs(1))\n    .with_loop(LoopMode::Times(3))\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for Dioxus Motion in Cargo.toml\nDESCRIPTION: Shows how to add the dioxus-motion crate to your project's dependencies with proper feature flags for web, desktop, and mobile platforms.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# Recommended: Stable version from crates.io\ndioxus-motion = \"0.3.1\"\n\n# Development version: Follows Dioxus main branch\ndioxus-motion = { git = \"https://github.com/wheregmis/dioxus-motion.git\", branch = \"main\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml with Page Transitions Support\nDESCRIPTION: Extends the basic Cargo.toml configuration to include the transitions feature for page transition animations across different platforms.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ndioxus-motion = { version = \"0.3.0\", optional = true, default-features = false }\n\n[features]\ndefault = [\"web\"]\nweb = [\"dioxus/web\", \"dioxus-motion/web\", \"dioxus-motion/transitions\"]\ndesktop = [\n    \"dioxus/desktop\",\n    \"dioxus-motion/desktop\",\n    \"dioxus-motion/transitions\",\n]\nmobile = [\"dioxus/mobile\", \"dioxus-motion/desktop\", \"dioxus-motion/transitions\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml with Platform-Specific Features\nDESCRIPTION: Shows how to set up Cargo.toml with conditional features for web, desktop, and mobile platforms, including optional page transitions support.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ndioxus-motion = { version = \"0.3.0\", optional = true, default-features = false }\n\n[features]\ndefault = [\"web\"]\nweb = [\"dioxus/web\", \"dioxus-motion/web\"]\ndesktop = [\"dioxus/desktop\", \"dioxus-motion/desktop\"]\nmobile = [\"dioxus/mobile\", \"dioxus-motion/desktop\"]\n```\n\n----------------------------------------\n\nTITLE: Migrating Transform Styles to v0.2.0\nDESCRIPTION: Demonstrates how to manually create transform styles using a memo after the removal of the get_style() method in version 0.2.0.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n    let transform = use_motion(Transform::default());\n\n    let transform_style = use_memo(move || {\n        format!(\n            \"transform: translate({}px, {}px) scale({}) rotate({}deg);\",\n            transform.get_value().x,\n            transform.get_value().y,\n            transform.get_value().scale,\n            transform.get_value().rotation * 180.0 / std::f32::consts::PI\n        )\n    });\n\n    // and using the memo in the component\n      rsx! {\n        div {\n            class: \"...\",\n            style: \"{transform_style.read()}\",\n            // ...rest of component...\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Compiling Tailwind CSS for Dioxus Project\nDESCRIPTION: Command to start the Tailwind CSS compiler in watch mode, processing input.css to generate the tailwind.css output file in assets directory.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx tailwindcss -i ./input.css -o ./assets/tailwind.css --watch\n```\n\n----------------------------------------\n\nTITLE: Serving Dioxus App - Default Platform\nDESCRIPTION: Command to start the development server for Dioxus application using the default platform settings.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndx serve\n```\n\n----------------------------------------\n\nTITLE: Serving Dioxus App - Custom Platform\nDESCRIPTION: Command to start the development server for Dioxus application with a specified platform target, using desktop as an example.\nSOURCE: https://github.com/wheregmis/dioxus-motion.git/blob/main/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndx serve --platform desktop\n```"
  }
]