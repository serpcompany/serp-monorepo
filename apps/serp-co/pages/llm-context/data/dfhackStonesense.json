[
  {
    "owner": "dfhack",
    "repo": "stonesense",
    "content": "TITLE: Basic Sprite XML Structure\nDESCRIPTION: The fundamental structure for defining a sprite in Stonesense. Each sprite is defined by a tag specific to its type, with various attributes that control appearance and behavior.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/resources/Sprite Guide.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<tag attribute1=\"value1\" attribute2=\"value2\" ... >\n    <subtag attribute=\"val\"/>\n    ...\n</tag>\n```\n\n----------------------------------------\n\nTITLE: Loading Stonesense Keybindings Configuration\nDESCRIPTION: This snippet shows the contents of the keybinds.txt file, which defines the default keybindings for Stonesense. It includes controls for zooming, changing render dimensions, toggling views, and rotating the view.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/docs/Stonesense.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLeft click:    Move debug cursor (if available)\nRight click:   Recenter screen\nScrollwheel:   Move up and down\nCtrl-Scroll:   Increase/decrease Z depth shown\n```\n\n----------------------------------------\n\nTITLE: Defining Stonesense Keybindings\nDESCRIPTION: This snippet shows the syntax for defining keybindings in Stonesense. It maps specific keys to actions like rotating the view, toggling various display options, and navigating the map.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/configs/keybinds.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[ROTATE:KEYS_ENTER]\n[RELOAD_SEGMENT:KEY_R]\n[TOGGLE_DESIGNATIONS:KEY_D]\n[TOGGLE_STOCKS:KEY_I]\n[TOGGLE_ZONES:KEY_U]\n[TOGGLE_OCCLUSION:KEY_O]\n[TOGGLE_FOG:KEYS_SEMICOLON]\n[TOGGLE_CREATURE_MOODS:KEY_M]\n[TOGGLE_CREATURE_PROFS:KEY_P]\n[TOGGLE_CREATURE_JOBS:KEY_J]\n[TOGGLE_CREATURE_NAMES:KEY_N]\n[CHOP_WALLS:KEY_C]\n[CYCLE_TRACKING_MODE:KEY_F]\n[RESET_VIEW_OFFSET:KEY_Z]\n[DECR_SEGMENT_Z:KEY_1]\n[INCR_SEGMENT_Z:KEY_2]\n[TOGGLE_SINGLE_LAYER:KEY_S]\n[TOGGLE_SHADE_HIDDEN_TILES:KEY_B]\n[TOGGLE_SHOW_HIDDEN_TILES:KEY_H]\n[TOGGLE_OSD:KEYF_2]\n[TOGGLE_KEYBINDS:KEYS_SLASH]\n[TOGGLE_ANNOUNCEMENTS:KEY_A]\n[TOGGLE_DEBUG:KEYS_TILDE]\n[INCR_ZOOM:KEYS_FULLSTOP]\n[DECR_ZOOM:KEYS_COMMA]\n[SCREENSHOT:KEYF_5]\n[INCR_RELOAD_TIME:KEYPAD_PLUS]\n[DECR_RELOAD_TIME:KEYPAD_MINUS]\n[CREDITS:KEYF_9]\n\n[DECR_Y:KEYS_UP*]\n[INCR_Y:KEYS_DOWN*]\n[DECR_X:KEYS_LEFT*]\n[INCR_X:KEYS_RIGHT*]\n[DECR_Z:KEYS_PGDN:KEY_9]\n[INCR_Z:KEYS_PGUP:KEY_0]\n```\n\n----------------------------------------\n\nTITLE: Interface Settings Configuration in INI Format\nDESCRIPTION: Core interface configuration parameters including window size, fullscreen settings, font configuration, and display offsets.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/configs/init.txt#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[CLOSEONESC:YES]\n[WIDTH:800]\n[HEIGHT:600]\n[WINDOWED:YES]\n[SEGMENTSIZE_XY:70]\n[SEGMENTSIZE_Z:4]\n[INTRO:OFF]\n[FONTSIZE:10]\n[FONT:DejaVuSans.ttf]\n[LIFTSEGMENT:0]\n[TRACK_MODE:FOCUS]\n```\n\n----------------------------------------\n\nTITLE: Layered Sprite Definition with Subsprites\nDESCRIPTION: Example of how to layer multiple sprites together. The base sprite is defined as a floor with index 1, with an additional subsprite (index 2) layered on top that inherits material coloring.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/resources/Sprite Guide.txt#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<floors>\n    <floor sheetindex=\"1\">\n        blah blah\n        <subsprite sheetIndex=\"2\" color=\"material\"/>\n    </floor>\n</floors>\n```\n\n----------------------------------------\n\nTITLE: Building Sprite Rendering Configuration in XML\nDESCRIPTION: Defines comprehensive sprite rendering rules for buildings with conditional logic based on material types, building occupancy, and neighboring structures. Includes specialized handling for benches made of different materials (wood, metal, glass) and border rendering based on adjacent building positions.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/resources/buildings/Workshop.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" ?>\n\n<building name=\"\" gameID=\"\">\n    <!-- benches wall -->\n    <if>\n        <!-- replace this with position index if required -->\n        <BuildingOccupancy value=\"3\" />\n        <!-- benches -->\n        <if>\n            <MaterialType value=\"Wood\" />\n            <sprite index = 274 />\n        </if>\n        <else>\n            <MaterialType value=\"Metal\"/>\n            <sprite index = 254 />\n        </else>\n        <else>\n            <MaterialType value=\"GreenGlass\"/>\n            <sprite index = 285 />\n        </else>\n        <else>\n            <or>\n                <MaterialType value=\"ClearGlass\"/>\n                <MaterialType value=\"CrystalGlass\"/>\n            </or>\n            <sprite index = 283 />\n        </else>\n        <else>\n            <sprite index = 273 />\n        </else>\n        <!-- borders -->\n        <if>\n            <not>\n                <or>\n                    <NeighbourIdentical dir=\"TopRight\"/>\n                    <NeighbourWall dir=\"TopRight\"/>\n                </or>\n            </not>\n            <sprite index = 282 />\n        </if>\n        <if>\n            <not>\n                <or>\n                    <NeighbourIdentical dir=\"TopLeft\"/>\n                    <NeighbourWall dir=\"TopLeft\"/>\n                </or>\n            </not>\n            <sprite index = 280 />\n        </if>\n    </if>\n    <else>\n        <not><or>\n            <NeighbourSameBuilding dir=\"TopRight\"/>\n            <NeighbourSameBuilding dir=\"TopLeft\"/>\n        </or></not>\n        <sprite index = 244 />\n    </else>\n    <else>\n        <not>\n            <NeighbourSameBuilding dir=\"TopRight\"/>\n        </not>\n        <sprite index = 240 />\n    </else>\n    <else>\n        <not>\n            <NeighbourSameBuilding dir=\"TopLeft\"/>\n        </not>\n        <sprite index = 241 />\n    </else>\n    <!-- end benches wall -->\n\n    <!-- contents -->\n\n    <if>\n        <BuildingOccupancy value=\"3\" />\n    </if>\n\n    <!-- generic border -->\n\n    <else>\n        <and>\n            <BuildingOccupancy value=\"1\" />\n            <PositionIndex value=4 />\n        </and>\n        <sprite index = 321 />\n    </else>\n\n    <else>\n        <not><or>\n            <NeighbourSameBuilding dir=\"BottomRight\"/>\n            <NeighbourSameBuilding dir=\"BottomLeft\"/>\n        </or></not>\n        <sprite index = 246 />\n    </else>\n    <else>\n        <not><or>\n            <NeighbourSameBuilding dir=\"BottomLeft\"/>\n        </or></not>\n        <sprite index = 242 />\n    </else>\n    <else>\n        <not><or>\n            <NeighbourSameBuilding dir=\"BottomRight\"/>\n        </or></not>\n        <sprite index = 243 />\n    </else>\n\n    <else>\n        <empty/>\n    </else>\n    <!-- end generic wall -->\n\n</building>\n```\n\n----------------------------------------\n\nTITLE: Display Configuration Settings in INI Format\nDESCRIPTION: Visual display settings including fog effects, background colors, animation timing, and auto-reload parameters.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/configs/init.txt#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[SHOW_FOG:YES]\n[FOG_RED:128]\n[FOG_GREEN:158]\n[FOG_BLUE:177]\n[FOG_ALPHA:30]\n[BACK_RED:128]\n[BACK_GREEN:158]\n[BACK_BLUE:177]\n[AUTO_RELOAD_TIME:50]\n[AUTO_RELOAD_STEP:50]\n[ANIMATION_RATE:196]\n```\n\n----------------------------------------\n\nTITLE: Defining Stonesense Configuration Loading Order\nDESCRIPTION: This configuration specifies the loading order for Stonesense component index files, establishing the precedence hierarchy where configs at the top of the list take priority over those below.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/resources/index.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Remember: configs at the top of the list\n# get precedence over those below\n\ngrowths/index.txt\ngrasses/index.txt\nterrain/index.txt\ncreatures/index.txt\nbuildings/index.txt\nvegetation/index.txt\ncolors/index.txt\nFluids/index.txt\nitems/index.txt\nphoebus/index.txt\n```\n\n----------------------------------------\n\nTITLE: Building and Installing the Stonesense Plugin\nDESCRIPTION: Defines the Stonesense DFHack plugin build target, sets up include directories, and defines install targets for resources and documentation.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nDFHACK_PLUGIN(stonesense ${PROJECT_SRCS} LINK_LIBRARIES ${DFHACK_TINYXML} ${PROJECT_LIBS})\nif(BUILD_PLUGINS)\n    target_include_directories(stonesense PRIVATE ${stonesense_INCLUDES})\nendif()\n\nIF(APPLE)\n    add_custom_command(TARGET stonesense POST_BUILD COMMAND ${stonesense_SOURCE_DIR}/fix-libs-stonesense.sh WORKING_DIRECTORY . COMMENT \"Fixing Stonesense library dependencies...\")\nENDIF(APPLE)\n\nif(INSTALL_DATA_FILES)\n    #install resources and readme into DF/stonesense\n    install(DIRECTORY resources/ DESTINATION stonesense)\n    install(FILES README.md DESTINATION stonesense)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Workshop Border Tiles in XML for Stonesense\nDESCRIPTION: XML configuration that defines the border tiles for workshops in Stonesense. Each tile element contains a position condition and one or more sprite definitions that specify which sprites from a sprite sheet should be used to render workshop borders at specific positions, creating a complete border around workshop structures.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/resources/buildings/INFO generic.txt#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!-- generic workshop border -->\n<Tile>\n    <Condition type=\"PositionIndex\" value=0 />\n    <Sprite sheetIndex = 244 />\n</Tile>\n<Tile>\n    <Condition type=\"PositionIndex\" value=1 />\n    <Sprite sheetIndex = 240 />\n</Tile>\n<Tile>\n    <Condition type=\"PositionIndex\" value=2 />\n    <Sprite sheetIndex = 240 />\n    <Sprite sheetIndex = 247 />\n</Tile>\n\n\n<Tile>\n    <Condition type=\"PositionIndex\" value=3 />\n    <Sprite sheetIndex = 241 />\n</Tile>\n<Tile>\n    <Condition type=\"PositionIndex\" value=5 />\n    <Sprite sheetIndex = 243 />\n</Tile>\n\n\n<Tile>\n    <Condition type=\"PositionIndex\" value=6 />\n    <Sprite sheetIndex = 241 />\n    <Sprite sheetIndex = 245 />\n</Tile>\n<Tile>\n    <Condition type=\"PositionIndex\" value=7 />\n    <Sprite sheetIndex = 242 />\n</Tile>\n<Tile>\n    <Condition type=\"PositionIndex\" value=8 />\n    <Sprite sheetIndex = 246 />\n</Tile>\n\n<Tile>\n    <!-- Default is a blank tile -->\n</Tile>\n<!-- end generic workshop border -->\n```\n\n----------------------------------------\n\nTITLE: Listing XML Resource Files for StoneSense\nDESCRIPTION: This snippet lists various XML files used by StoneSense to define textures and materials for different game elements. It includes files for tracks, floors, walls, and material definitions. Some entries are commented out, indicating they may be optional or under development.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/resources/terrain/index.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDF_2014_Trees/index.txt\n\n#Track_Floors_128.xml\n#Track_Ramps_128.xml\nTrack_Floors.xml\nTrack_Ramps.xml\n\n#NuGlass.xml\n#NuGlass_Walls.xml\n\n#DarkTundra/index.txt\n\n#floorborders.xml\n#block_walls.xml\n#grass.xml\n\n#Test.xml\n\nMaterialFloors.xml\nMaterialWalls.xml\nWalls.xml\nFloors.xml\nDefaultWalls.xml\nDefaultFloors.xml\n```\n\n----------------------------------------\n\nTITLE: Color Definition Configuration in INI Format\nDESCRIPTION: Color definitions for the visualization system, with RGB values for standard color palette used when not using DF colors.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/configs/init.txt#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[USE_DF_COLORS:NO]\n[BLACK_R:0]\n[BLACK_G:0]\n[BLACK_B:0]\n[BLUE_R:13]\n[BLUE_G:103]\n[BLUE_B:196]\n[GREEN_R:68]\n[GREEN_G:158]\n[GREEN_B:53]\n[CYAN_R:86]\n[CYAN_G:163]\n[CYAN_B:205]\n```\n\n----------------------------------------\n\nTITLE: Debug and Troubleshooting Configuration in INI Format\nDESCRIPTION: Debug mode settings and performance optimization parameters including bitmap operations, image caching, and rendering options.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/configs/init.txt#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[DEBUGMODE:NO]\n[FOLLOW_DF_CURSOR:YES]\n[SHOW_CREATURE_NAMES:NO]\n[BITMAP_HOLDS:4096]\n[CACHE_IMAGES:NO]\n[IMAGE_CACHE_SIZE:4096]\n[RENDERER:ANY]\n[EXTRUDE_TILES:YES]\n[PIXELPERFECT_ZOOM:NO]\n```\n\n----------------------------------------\n\nTITLE: Listing Configuration Files for Stonesense\nDESCRIPTION: This snippet lists various XML files and directories used for configuring Stonesense. It includes files for different creature types, environments, and possibly texture directories. Some entries are commented out, indicating they are either not currently in use or are alternative options.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/resources/creatures/index.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#large_256/index.txt\nlarge_128/index.txt\n#large_64/index.txt\n\ncaravan_animals.xml\n\nbeefmo_large_ocean.xml\nbeefmo_subterranean.xml\nhumans.xml\nelfs.xml\nwild_animals.xml\n#goblins.xml\n\n#this is an example of colored creatures. they aren't as good as teh other ones.\ngobbos.xml\nbeefmo_domestics.xml\nWildlife.xml\n#clothed_Dwarves.xml\ncolor_Dwarves.xml\n# Dwarves.xml\n# Elves.xml\n```\n\n----------------------------------------\n\nTITLE: Installing Stonesense Configuration Files\nDESCRIPTION: Installs Stonesense configuration files from the source directory to the DFHack data destination directory.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY ${CMAKE_SOURCE_DIR}/plugins/stonesense/configs/\n        DESTINATION \"${DFHACK_DATA_DESTINATION}/data/dfhack-config-defaults/stonesense\")\n```\n\n----------------------------------------\n\nTITLE: Defining Stonesense Source Files\nDESCRIPTION: Lists all the C++ source files that make up the Stonesense plugin.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(PROJECT_SRCS\n    TrackingModes.cpp\n    #Overlay.cpp\n    Tile.cpp\n    TileCondition.cpp\n    TileTree.cpp\n    ColorConfiguration.cpp\n    ConditionalSprite.cpp\n    Config.cpp\n    Constructions.cpp\n    ContentBuildingReader.cpp\n    ContentLoader.cpp\n    CreatureConfiguration.cpp\n    Creatures.cpp\n    DumpInfo.cpp\n    FluidConfiguration.cpp\n    GUI.cpp\n    GameBuildings.cpp\n    GroundMaterialConfiguration.cpp\n    ItemConfiguration.cpp\n    MapLoading.cpp\n    SegmentProcessing.cpp\n    OcclusionTest.cpp\n    SpriteColors.cpp\n    SpriteMaps.cpp\n    SpriteObjects.cpp\n    TreeGrowthConfiguration.cpp\n    UserInput.cpp\n    WorldSegment.cpp\n    VegetationConfiguration.cpp\n    Keybinds.cpp\n    MaterialMatcher.cpp\n    main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Stonesense Header Files\nDESCRIPTION: Lists all the header files that make up the Stonesense plugin, marked as header-only files that won't be compiled directly.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(PROJECT_HDRS\n    BuildingConfiguration.h\n    ColorConfiguration.h\n    common.h\n    commonTypes.h\n    ConditionalSprite.h\n    Config.h\n    Constructions.h\n    ContentBuildingReader.h\n    ContentLoader.h\n    CreatureConfiguration.h\n    Creatures.h\n    DumpInfo.h\n    FluidConfiguration.h\n    GameBuildings.h\n    GameConfiguration.h\n    GameState.h\n    GroundMaterialConfiguration.h\n    GUI.h\n    ItemConfiguration.h\n    MapLoading.h\n    MaterialMatcher.h\n    OcclusionTest.h\n    #Overlay.h\n    SegmentProcessing.h\n    SpriteColors.h\n    SpriteMaps.h\n    SpriteObjects.h\n    StonesenseState.h\n    Tile.h\n    TileCondition.h\n    TileDirection.h\n    TileTree.h\n    TrackingModes.h\n    TreeGrowthConfiguration.h\n    UserInput.h\n    VegetationConfiguration.h\n    WorldSegment.h\n)\n\nSET_SOURCE_FILES_PROPERTIES(${PROJECT_HDRS} PROPERTIES HEADER_FILE_ONLY TRUE)\n\n# mash them together (headers are marked as headers and nothing will try to compile them)\nLIST(APPEND PROJECT_SRCS ${PROJECT_HDRS})\n```\n\n----------------------------------------\n\nTITLE: Listing Fluid Configuration Files for Stonesense\nDESCRIPTION: Simple listing of XML configuration files related to fluid rendering in Stonesense. These files define the visual representation of water and other fluids in the isometric visualization.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/resources/Fluids/index.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#water_2.xml\nFluids.xml\n```\n\n----------------------------------------\n\nTITLE: Defining Allegro Library Dependencies\nDESCRIPTION: Lists the Allegro libraries that Stonesense depends on for rendering and user interface.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSET(ALLEGRO_LIBS\n    allegro\n    allegro_primitives\n    allegro_font\n    allegro_color\n    allegro_image\n    allegro_ttf\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Changelog Syntax in RST\nDESCRIPTION: Explains the custom syntax used for the changelog, including special characters for comments, release names, sections, and entries. Also describes how to format feature changes and development-only entries.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/docs/changelog.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n===help\n\nchangelog.txt uses a syntax similar to RST, with a few special sequences:\n\n- ``===`` indicates the start of a comment\n- ``#`` indicates the start of a release name (do not include \"DFHack\")\n- ``##`` indicates the start of a section name (this must be listed in ``gen_changelog.py``)\n- ``-`` indicates the start of a changelog entry. **Note:** an entry currently must be only one line.\n- ``:`` (colon followed by space) separates the name of a feature from a description of a change to that feature.\n    Changes made to the same feature are grouped if they end up in the same section.\n- ``:\\`` (colon, backslash, space) avoids the above behavior\n- ``- @`` (the space is optional) indicates the start of an entry that should only be displayed in NEWS-dev.rst.\n    Use this sparingly, e.g. for immediate fixes to one development build in another development build that\n    are not of interest to users of stable builds only.\n- Three ``[`` characters indicate the start of a block (possibly a comment) that\n  spans multiple lines. Three ``]`` characters indicate the end of such a block.\n- ``!`` immediately before a phrase set up to be replaced (see gen_changelog.py) stops that occurrence from being replaced.\n\nTemplate for new versions:\n\n## New Features\n\n## Fixes\n\n## Misc Improvements\n\n## Removed\n\n===end\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration for macOS\nDESCRIPTION: Handles downloading and configuring Allegro libraries for macOS, with different paths for 32-bit and 64-bit builds.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nIF(UNIX)\n    IF(APPLE)\n    # Mac OS X\n        OPTION(STONESENSE_INTERNAL_DYLIB \"Link with prebuilt internal allegro libs and headers.\" ON)\n        IF(STONESENSE_INTERNAL_DYLIB)\n            set(ALLEGRO_DOWNLOAD_DIR ${stonesense_SOURCE_DIR}/allegro/osx${DFHACK_BUILD_ARCH})\n            MESSAGE(FATAL_ERROR \"OSX build not supported for stonesense\")\n            if(\"${DFHACK_BUILD_ARCH}\" STREQUAL \"64\")\n                set(ALLEGRO_DOWNLOAD_FILE \"osx64-allegro-5.2.2.tar.bz2\")\n                download_file(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx64-allegro-5.2.2.tar.bz2\"\n                    \"${ALLEGRO_DOWNLOAD_DIR}/${ALLEGRO_DOWNLOAD_FILE}\"\n                    \"306e8981bf67cf8b3f9ac0b26003869e\")\n            else()\n                set(ALLEGRO_DOWNLOAD_FILE \"osx32-allegro-5.0.11.tar.bz2\")\n                download_file(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx32-allegro-5.0.11.tar.bz2\"\n                    \"${ALLEGRO_DOWNLOAD_DIR}/${ALLEGRO_DOWNLOAD_FILE}\"\n                    \"c531eb16f2530e1168116fcbce7644df\")\n            endif()\n            execute_process(COMMAND tar xjf \"${ALLEGRO_DOWNLOAD_DIR}/${ALLEGRO_DOWNLOAD_FILE}\" --strip-components=1\n                            WORKING_DIRECTORY ${ALLEGRO_DOWNLOAD_DIR})\n\n            # Download freetype only on x64\n            if(\"${DFHACK_BUILD_ARCH}\" STREQUAL \"64\")\n                download_file_unzip(\"https://github.com/DFHack/dfhack-bin/releases/download/0.44.09/osx64-libfreetype.6.dylib.gz\"\n                    \"gz\"\n                    ${ALLEGRO_DOWNLOAD_DIR}/lib/libfreetype.6.dylib.gz\n                    \"f4c4005a53a353802492ab1a76f188b6\"\n                    ${ALLEGRO_DOWNLOAD_DIR}/lib/libfreetype.6.dylib\n                    \"f593477141d6f10c510dca7dbc10dab8\")\n            endif()\n\n            foreach(ALLEGRO_LIB ${ALLEGRO_LIBS})\n                list(APPEND PROJECT_LIBS ${ALLEGRO_DOWNLOAD_DIR}/lib/lib${ALLEGRO_LIB}.dylib)\n            endforeach()\n\n            SET(stonesense_INCLUDES ${ALLEGRO_DOWNLOAD_DIR}/include ${ALLEGRO_DOWNLOAD_DIR}/lib/Headers)\n            if(BUILD_PLUGINS)\n                install(DIRECTORY ${ALLEGRO_DOWNLOAD_DIR}/lib/\n                        DESTINATION ${DFHACK_LIBRARY_DESTINATION})\n            endif()\n        ELSE()\n            foreach(ALLEGRO_LIB ${ALLEGRO_LIBS})\n                list(APPEND PROJECT_LIBS ${ALLEGRO_LIB})\n            endforeach()\n        ENDIF()\n    ELSE(APPLE)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration for Linux\nDESCRIPTION: Handles downloading and configuring Allegro libraries for Linux, with different paths for 32-bit and 64-bit builds.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n    #linux\n        OPTION(STONESENSE_INTERNAL_SO \"Link with prebuilt internal allegro libs and headers.\" ON)\n        IF(STONESENSE_INTERNAL_SO)\n            set(ALLEGRO_DOWNLOAD_DIR ${stonesense_SOURCE_DIR}/allegro/linux${DFHACK_BUILD_ARCH})\n            if(\"${DFHACK_BUILD_ARCH}\" STREQUAL \"64\")\n                set(ALLEGRO_DOWNLOAD_FILE \"linux64-allegro5210.tbz2\")\n                download_file(\"https://github.com/DFHack/dfhack-bin/releases/download/50.15/linux64-allegro5210.tbz2\"\n                    \"${ALLEGRO_DOWNLOAD_DIR}/${ALLEGRO_DOWNLOAD_FILE}\"\n                    \"14c4237fbe6f2abf26edc0ba4d6c4424\")\n            else()\n                MESSAGE(FATAL_ERROR \"32 bit build not supported for stonesense\")\n            endif()\n            execute_process(COMMAND tar xf \"${ALLEGRO_DOWNLOAD_DIR}/${ALLEGRO_DOWNLOAD_FILE}\" --strip-components=1\n                            WORKING_DIRECTORY ${ALLEGRO_DOWNLOAD_DIR})\n            foreach(ALLEGRO_LIB ${ALLEGRO_LIBS})\n                list(APPEND PROJECT_LIBS ${ALLEGRO_DOWNLOAD_DIR}/lib/lib${ALLEGRO_LIB}.so.5.2)\n            endforeach()\n            SET(stonesense_INCLUDES ${ALLEGRO_DOWNLOAD_DIR}/include)\n            if(BUILD_PLUGINS)\n                install(DIRECTORY ${ALLEGRO_DOWNLOAD_DIR}/lib/\n                        DESTINATION ${DFHACK_LIBRARY_DESTINATION})\n            endif()\n        ELSE()\n            foreach(ALLEGRO_LIB ${ALLEGRO_LIBS})\n                list(APPEND PROJECT_LIBS ${ALLEGRO_LIB})\n            endforeach()\n        ENDIF()\n    ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration for Windows\nDESCRIPTION: Handles downloading and configuring Allegro libraries for Windows, with different paths for 32-bit and 64-bit builds.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# windows\nELSE(UNIX)\n    SET(ALLEGRO_DOWNLOAD_DIR ${stonesense_SOURCE_DIR}/win${DFHACK_BUILD_ARCH})\n    IF(DFHACK_BUILD_64)\n        download_file(\"https://github.com/DFHack/dfhack-bin/releases/download/50.15/allegro-msvc-x64-5.2.10.7z\"\n                      ${ALLEGRO_DOWNLOAD_DIR}/allegro-msvc-x64-5.2.10.7z\n                      \"ff9eb09893ce7ff560de618817db043a\")\n        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xzf ${ALLEGRO_DOWNLOAD_DIR}/allegro-msvc-x64-5.2.10.7z\n                        WORKING_DIRECTORY ${ALLEGRO_DOWNLOAD_DIR})\n        download_file(\"https://github.com/DFHack/dfhack-bin/releases/download/50.15/allegro_deps-msvc-x64-1.15.0.7z\"\n                      ${ALLEGRO_DOWNLOAD_DIR}/allegro_deps-msvc-x64-1.15.0.7z\n                      \"6ae351c319bdbad7dc6792a07428e71f\")\n        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xzf ${ALLEGRO_DOWNLOAD_DIR}/allegro_deps-msvc-x64-1.15.0.7z\n                        WORKING_DIRECTORY ${ALLEGRO_DOWNLOAD_DIR})\n    ELSE()\n        MESSAGE(FATAL_ERROR \"32 bit build not supported for stonesense\")\n    ENDIF()\n    foreach(ALLEGRO_LIB ${ALLEGRO_LIBS})\n        list(APPEND PROJECT_LIBS ${ALLEGRO_LIB}.lib)\n        if(BUILD_PLUGINS)\n            install(FILES ${stonesense_SOURCE_DIR}/win${DFHACK_BUILD_ARCH}/Allegro/bin/${ALLEGRO_LIB}-5.2.dll\n                DESTINATION .)\n        endif()\n    endforeach()\n    SET(PROJECT_LIBS\n        kernel32.lib\n        user32.lib\n        gdi32.lib\n        winspool.lib\n        shell32.lib\n        ole32.lib\n        oleaut32.lib\n        uuid.lib\n        comdlg32.lib\n        advapi32.lib\n        ${PROJECT_LIBS}\n        freetype.lib\n        libpng16.lib\n        jpeg.lib\n        zlib.lib\n        winmm.lib\n        psapi.lib\n        opengl32.lib\n        glu32.lib\n        gdiplus.lib\n        shlwapi.lib\n       )\n    SET(stonesense_INCLUDES\n        ${stonesense_SOURCE_DIR}/win${DFHACK_BUILD_ARCH}/Allegro/include\n        ${stonesense_SOURCE_DIR}/win${DFHACK_BUILD_ARCH}/Allegro_Deps/include)\n    LINK_DIRECTORIES(\n        ${LINK_DIRECTORIES}\n        ${stonesense_SOURCE_DIR}/win${DFHACK_BUILD_ARCH}/Allegro/lib\n        ${stonesense_SOURCE_DIR}/win${DFHACK_BUILD_ARCH}/Allegro_Deps/lib\n    )\nENDIF(UNIX)\n```\n\n----------------------------------------\n\nTITLE: Mapping Creature IDs in Dwarf Fortress\nDESCRIPTION: A complete index-to-creature mapping used for creature identification in Dwarf Fortress. The list covers everything from common animals like toads and birds to fantasy creatures like demons and titans. Each creature is assigned a unique numeric ID from 0 to 314.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/materials_info/creaturedump.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0:TOAD\n1:WORM\n2:BIRD_BLUEJAY\n3:BIRD_CARDINAL\n4:BIRD_GRACKLE\n5:BIRD_ORIOLE\n6:BIRD_RW_BLACKBIRD\n7:DOG\n8:CAT\n9:MULE\n10:DONKEY\n11:HORSE\n12:COW\n13:EQUIPMENT_WAGON\n14:CHIMERA\n15:CENTAUR\n16:GRIFFON\n17:FLY\n18:ROACH_LARGE\n19:BEETLE\n20:ANT\n21:BUTTERFLY_MONARCH\n22:FIREFLY\n23:DRAGONFLY\n24:GOAT_MOUNTAIN\n25:MARMOT_HOARY\n26:BIRD_EAGLE_GIANT\n27:GNOME_MOUNTAIN\n28:GNOME_DARK\n29:WALRUS\n30:WHALE\n31:FISH_LAMPREY_SEA\n32:SHARK_GREAT_WHITE\n33:SHARK_FRILL\n34:SHARK_SPINY_DOGFISH\n35:SHARK_WOBBEGONG_SPOTTED\n36:SHARK_WHALE\n37:SHARK_BASKING\n38:SHARK_NURSE\n39:SHARK_MAKO_SHORTFIN\n40:SHARK_MAKO_LONGFIN\n41:SHARK_TIGER\n42:SHARK_BULL\n43:SHARK_REEF_BLACKTIP\n44:SHARK_REEF_WHITETIP\n45:SHARK_BLUE\n46:SHARK_HAMMERHEAD\n47:SHARK_ANGEL\n48:FISH_SKATE_COMMON\n49:FISH_RAY_MANTA\n50:FISH_STINGRAY\n51:FISH_COELACANTH\n52:FISH_STURGEON\n53:FISH_CONGER_EEL\n54:FISH_MILKFISH\n55:FISH_COD\n56:FISH_OPAH\n57:FISH_GROUPER_GIANT\n58:FISH_BLUEFISH\n59:FISH_SUNFISH_OCEAN\n60:FISH_SWORDFISH\n61:FISH_MARLIN\n62:FISH_HALIBUT\n63:FISH_BARRACUDA_GREAT\n64:FISH_TUNA_BLUEFIN\n65:HIPPO\n66:FISH_GAR_LONGNOSE\n67:FISH_CARP\n68:FISH_TIGERFISH\n69:FISH_PIKE\n70:BEAR_GRIZZLY\n71:BEAR_BLACK\n72:DEER\n73:FOX\n74:RACCOON\n75:MACAQUE_RHESUS\n76:COUGAR\n77:WOLF\n78:GROUNDHOG\n79:ALLIGATOR\n80:BIRD_BUZZARD\n81:ELEPHANT\n82:WARTHOG\n83:LION\n84:LEOPARD\n85:JAGUAR\n86:TIGER\n87:CHEETAH\n88:GAZELLE\n89:MANDRILL\n90:CHIMPANZEE\n91:BONOBO\n92:GORILLA\n93:ORANGUTAN\n94:GIBBON_SIAMANG\n95:GIBBON_WHITE_HANDED\n96:GIBBON_BLACK_HANDED\n97:GIBBON_GRAY\n98:GIBBON_SILVERY\n99:GIBBON_PILEATED\n100:GIBBON_BILOU\n101:GIBBON_WHITE_BROWED\n102:GIBBON_BLACK_CRESTED\n103:CAMEL_1_HUMP\n104:CAMEL_2_HUMP\n105:CROCODILE_SALTWATER\n106:BIRD_VULTURE\n107:MUSKOX\n108:ELK\n109:BEAR_POLAR\n110:FLOATING_GUTS\n111:DRUNIAN\n112:CREEPING_EYE\n113:VORACIOUS_CAVE_CRAWLER\n114:BLIND_CAVE_OGRE\n115:CAP_HOPPER\n116:MAGMA_CRAB\n117:CRUNDLE\n118:HUNGRY_HEAD\n119:FLESH_BALL\n120:ELK_BIRD\n121:HELMET_SNAKE\n122:GREEN_DEVOURER\n123:RUTHERER\n124:CREEPY_CRAWLER\n125:DRALTHA\n126:GIANT_EARTHWORM\n127:BLOOD_MAN\n128:BUGBAT\n129:MANERA\n130:MOLEMARIAN\n131:JABBERER\n132:POND_GRABBER\n133:BLIND_CAVE_BEAR\n134:CAVE_DRAGON\n135:REACHER\n136:ELEMENTMAN_GABBRO\n137:GORLAK\n138:CAVE_FLOATER\n139:PLUMP_HELMET_MAN\n140:CAVE_BLOB\n141:ELEMENTMAN_AMETHYST\n142:FOXSQUIRREL\n143:MOGHOPPER\n144:RAT_DEMON\n145:WAMBLER_FLUFFY\n146:LIZARD_RHINO_TWO_LEGGED\n147:WORM_KNUCKLE\n148:SPIDER_PHANTOM\n149:FLY_ACORN\n150:GNAT_BLOOD\n151:SNAILMAN\n152:SLUGMAN\n153:LEECHMAN\n154:LIZARD\n155:TURTLE\n156:LION_GIANT\n157:LEOPARD_GIANT\n158:JAGUAR_GIANT\n159:TIGER_GIANT\n160:CHEETAH_GIANT\n161:SCORPION_DESERT_GIANT\n162:TIGERMAN\n163:RAT\n164:SQUIRREL_GRAY\n165:SQUIRREL_RED\n166:CHIPMUNK\n167:HEDGEHOG\n168:MUSSEL\n169:OYSTER\n170:FISH_SALMON\n171:FISH_CLOWNFISH\n172:FISH_HAGFISH\n173:FISH_LAMPREY_BROOK\n174:FISH_RAY_BAT\n175:FISH_RAY_THORNBACK\n176:FISH_RATFISH_SPOTTED\n177:FISH_HERRING\n178:FISH_SHAD\n179:FISH_ANCHOVY\n180:FISH_TROUT_STEELHEAD\n181:FISH_HAKE\n182:FISH_SEAHORSE\n183:FISH_GLASSEYE\n184:FISH_PUFFER_WHITE_SPOTTED\n185:FISH_SOLE\n186:FISH_FLOUNDER\n187:FISH_MACKEREL\n188:JELLYFISH_SEA_NETTLE\n189:FISH_LUNGFISH\n190:FISH_LOACH_CLOWN\n191:FISH_BULLHEAD_BROWN\n192:FISH_BULLHEAD_YELLOW\n193:FISH_BULLHEAD_BLACK\n194:FISH_KNIFEFISH_BANDED\n195:FISH_CHAR\n196:FISH_TROUT_RAINBOW\n197:FISH_MOLLY_SAILFIN\n198:FISH_GUPPY\n199:FISH_PERCH\n200:DWARF\n201:HUMAN\n202:ELF\n203:GOBLIN\n204:KOBOLD\n205:GREMLIN\n206:TROLL\n207:OGRE\n208:UNICORN\n209:DRAGON\n210:SATYR\n211:COLOSSUS_BRONZE\n212:GIANT\n213:CYCLOPS\n214:ETTIN\n215:MINOTAUR\n216:YETI\n217:SASQUATCH\n218:BLIZZARD_MAN\n219:WOLF_ICE\n220:FAIRY\n221:PIXIE\n222:BEAK_DOG\n223:GRIMELING\n224:WEREWOLF\n225:BLENDEC_FOUL\n226:STRANGLER\n227:NIGHTWING\n228:HARPY\n229:HYDRA\n230:MERPERSON\n231:SEA_SERPENT\n232:SEA_MONSTER\n233:CROCODILE_CAVE\n234:TOAD_GIANT\n235:OLM_GIANT\n236:BAT_GIANT\n237:RAT_GIANT\n238:RAT_LARGE\n239:MOLE_DOG_NAKED\n240:TROGLODYTE\n241:MOLE_GIANT\n242:IMP_FIRE\n243:SPIDER_CAVE_GIANT\n244:SPIDER_CAVE\n245:FISH_CAVE\n246:CAVE_FISH_MAN\n247:LOBSTER_CAVE\n248:SNAKE_FIRE\n249:OLM\n250:OLM_MAN\n251:BAT\n252:BAT_MAN\n253:MAGGOT_PURRING\n254:ELEMENTMAN_FIRE\n255:ELEMENTMAN_MAGMA\n256:ELEMENTMAN_IRON\n257:ELEMENTMAN_MUD\n258:BIRD_SWALLOW_CAVE\n259:CAVE_SWALLOW_MAN\n260:BIRD_SWALLOW_CAVE_GIANT\n261:AMPHIBIAN_MAN\n262:REPTILE_MAN\n263:SERPENT_MAN\n264:ANT_MAN\n265:FORGOTTEN_BEAST_1\n266:FORGOTTEN_BEAST_2\n267:FORGOTTEN_BEAST_3\n268:FORGOTTEN_BEAST_4\n269:FORGOTTEN_BEAST_5\n270:FORGOTTEN_BEAST_6\n271:FORGOTTEN_BEAST_7\n272:FORGOTTEN_BEAST_8\n273:FORGOTTEN_BEAST_9\n274:FORGOTTEN_BEAST_10\n275:FORGOTTEN_BEAST_11\n276:FORGOTTEN_BEAST_12\n277:FORGOTTEN_BEAST_13\n278:FORGOTTEN_BEAST_14\n279:FORGOTTEN_BEAST_15\n280:FORGOTTEN_BEAST_16\n281:FORGOTTEN_BEAST_17\n282:FORGOTTEN_BEAST_18\n283:FORGOTTEN_BEAST_19\n284:FORGOTTEN_BEAST_20\n285:FORGOTTEN_BEAST_21\n286:FORGOTTEN_BEAST_22\n287:FORGOTTEN_BEAST_23\n288:FORGOTTEN_BEAST_24\n289:FORGOTTEN_BEAST_25\n290:TITAN_1\n291:TITAN_2\n292:TITAN_3\n293:DEMON_1\n294:DEMON_2\n295:DEMON_3\n296:DEMON_4\n297:DEMON_5\n298:DEMON_6\n299:DEMON_7\n300:DEMON_8\n301:DEMON_9\n302:DEMON_10\n303:DEMON_11\n304:DEMON_12\n305:DEMON_13\n306:DEMON_14\n307:DEMON_15\n308:DEMON_16\n309:DEMON_17\n310:DEMON_18\n311:DEMON_19\n312:DEMON_20\n313:DEMON_21\n314:DEMON_22\n```\n\n----------------------------------------\n\nTITLE: Plant ID Mapping for Stonesense\nDESCRIPTION: A comprehensive list mapping numeric IDs (0-20) to plant types for use in the Stonesense visualization tool. Each entry follows the format of 'ID:PLANT_NAME' where plant names use descriptive prefixes like MUSHROOM_, GRASS_, BERRY_, etc.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/materials_info/plantdump.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0:MUSHROOM_HELMET_PLUMP\n1:GRASS_TAIL_PIG\n2:GRASS_WHEAT_CAVE\n3:POD_SWEET\n4:BUSH_QUARRY\n5:ROOT_MUCK\n6:TUBER_BLOATED\n7:BULB_KOBOLD\n8:BERRIES_PRICKLE\n9:BERRIES_STRAW_WILD\n10:GRASS_LONGLAND\n11:HERB_VALLEY\n12:WEED_RAT\n13:BERRIES_FISHER\n14:REED_ROPE\n15:MUSHROOM_CUP_DIMPLE\n16:WEED_BLADE\n17:ROOT_HIDE\n18:SLIVER_BARB\n19:BERRY_SUN\n20:VINE_WHIP\n```\n\n----------------------------------------\n\nTITLE: Enumerating Tree Types for Stonesense in DFHack\nDESCRIPTION: This code snippet provides a numbered list of tree types, assigning each type a unique identifier. It includes a mix of real-world trees (like Oak and Maple) and fantasy trees (such as Tower Cap and Nether Cap), which are likely used for rendering or identifying different tree types in the Stonesense module of DFHack.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/materials_info/wooddump.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0:MANGROVE\n1:SAGUARO\n2:PINE\n3:CEDAR\n4:OAK\n5:MAHOGANY\n6:ACACIA\n7:KAPOK\n8:MAPLE\n9:WILLOW\n10:TOWER_CAP\n11:BLACK_CAP\n12:NETHER_CAP\n13:GOBLIN_CAP\n14:FUNGIWOOD\n15:TUNNEL_TUBE\n16:SPORE_TREE\n17:BLOOD_THORN\n18:GLUMPRONG\n19:FEATHER\n20:HIGHWOOD\n21:LARCH\n22:CHESTNUT\n23:ALDER\n24:BIRCH\n25:ASH\n26:CANDLENUT\n27:MANGO\n28:RUBBER\n29:CACAO\n30:PALM\n```\n\n----------------------------------------\n\nTITLE: Building Type Enumeration List\nDESCRIPTION: An enumerated list mapping numeric IDs to building type classes in Dwarf Fortress. Includes workshops, traps, furniture, and other building structures. Each entry consists of an index number followed by the corresponding building class name with 'st' suffix indicating a structure type.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/materials_info/buildingdump.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n0:building_workshopst\n1:building_carpenters_workshopst\n2:building_farmers_workshopst\n3:building_masons_workshopst\n4:building_craftdwarfs_workshopst\n5:building_jewelers_workshopst\n6:building_metalsmiths_workshopst\n7:building_magma_forgest\n8:building_bowyers_workshopst\n9:building_mechanics_workshopst\n10:building_siege_workshopst\n11:building_butchers_shopst\n12:building_leather_worksst\n13:building_tanners_shopst\n14:building_clothiers_shopst\n15:building_fisheryst\n16:building_stillst\n17:building_loomst\n18:building_quernst\n19:building_kennelsst\n20:building_kitchenst\n21:building_asheryst\n22:building_dyers_shopst\n23:building_millstonest\n24:building_furnacest\n25:building_wood_furnacest\n26:building_smelterst\n27:building_glass_furnacest\n28:building_kilnst\n29:building_magma_smelterst\n30:building_magma_glass_furnacest\n31:building_magma_kilnst\n32:building_siegeenginest\n33:building_catapultst\n34:building_ballistast\n35:building_trapst\n36:building_leverst\n37:building_pressure_platest\n38:building_cage_trapst\n39:building_stonefall_trapst\n40:building_weapon_trapst\n41:building_constructionst\n42:building_road_pavedst\n43:building_road_dirtst\n44:building_roadst\n45:building_wagonst\n46:building_tradedepotst\n47:building_animaltrapst\n48:building_farmplotst\n49:building_windowst\n50:building_statuest\n51:building_wellst\n52:building_coffinst\n53:building_shopst\n54:building_chairst\n55:building_tablest\n56:building_bedst\n57:building_cagest\n58:building_chainst\n59:building_windmillstst\n60:building_water_wheelst\n61:building_screw_pumpst\n62:building_archerytargetst\n63:building_weaponst\n64:building_supportst\n65:building_axle_verticalst\n66:building_axle_horizontalst\n67:building_gear_assemblyst\n68:building_bars_floorst\n69:building_bars_verticalst\n70:building_grate_floorst\n71:building_grate_wallst\n72:building_floodgatest\n73:building_bridgest\n74:building_hatchst\n75:building_doorst\n76:building_armorstandst\n77:building_weaponrackst\n78:building_cabinetst\n79:building_boxst\n80:building_actualst\n81:building_civzonest\n82:building_stockpilest\n83:building_window_gemst\n84:building_window_glassst\n```\n\n----------------------------------------\n\nTITLE: Mapping Numeric IDs to Dwarf Fortress Professions\nDESCRIPTION: A complete listing of profession IDs and their corresponding names in Dwarf Fortress. This mapping is likely used by Stonesense (a DFHack visualization tool) to identify and display unit professions. The list includes all standard labor professions, military roles, and special statuses.\nSOURCE: https://github.com/dfhack/stonesense/blob/master/materials_info/priofessiondump.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n0:MINER\n1:WOODWORKER\n2:CARPENTER\n3:BOWYER\n4:WOODCUTTER\n5:STONEWORKER\n6:ENGRAVER\n7:MASON\n8:RANGER\n9:ANIMAL_CARETAKER\n10:ANIMAL_TRAINER\n11:HUNTER\n12:TRAPPER\n13:ANIMAL_DISSECTOR\n14:METALSMITH\n15:FURNACE_OPERATOR\n16:WEAPONSMITH\n17:ARMORER\n18:BLACKSMITH\n19:METALCRAFTER\n20:JEWELER\n21:GEM_CUTTER\n22:GEM_SETTER\n23:CRAFTSMAN\n24:WOODCRAFTER\n25:STONECRAFTER\n26:LEATHERWORKER\n27:BONE_CARVER\n28:WEAVER\n29:CLOTHIER\n30:GLASSMAKER\n31:STRAND_EXTRACTOR\n32:FISHERY_WORKER\n33:FISHERMAN\n34:FISH_DISSECTOR\n35:FISH_CLEANER\n36:FARMER\n37:CHEESE_MAKER\n38:MILKER\n39:COOK\n40:THRESHER\n41:MILLER\n42:BUTCHER\n43:TANNER\n44:DYER\n45:PLANTER\n46:HERBALIST\n47:BREWER\n48:SOAP_MAKER\n49:POTASH_MAKER\n50:LYE_MAKER\n51:WOOD_BURNER\n52:ENGINEER\n53:MECHANIC\n54:SIEGE_ENGINEER\n55:SIEGE_OPERATOR\n56:PUMP_OPERATOR\n57:CLERK\n58:ADMINISTRATOR\n59:TRADER\n60:ARCHITECT\n61:ALCHEMIST\n62:DOCTOR\n63:DIAGNOSER\n64:BONE_SETTER\n65:SUTURER\n66:SURGEON\n67:MERCHANT\n68:HAMMERMAN\n69:MASTER_HAMMERMAN\n70:SPEARMAN\n71:MASTER_SPEARMAN\n72:CROSSBOWMAN\n73:MASTER_CROSSBOWMAN\n74:WRESTLER\n75:MASTER_WRESTLER\n76:AXEMAN\n77:MASTER_AXEMAN\n78:SWORDSMAN\n79:MASTER_SWORDSMAN\n80:MACEMAN\n81:MASTER_MACEMAN\n82:PIKEMAN\n83:MASTER_PIKEMAN\n84:BOWMAN\n85:MASTER_BOWMAN\n86:BLOWGUNMAN\n87:MASTER_BLOWGUNMAN\n88:LASHER\n89:MASTER_LASHER\n90:None\n91:TRAINED_HUNTER\n92:TRAINED_WAR\n93:MASTER_THIEF\n94:THIEF\n95:STANDARD\n96:CHILD\n97:BABY\n98:DRUNK\n```"
  }
]