[
  {
    "owner": "dream-num",
    "repo": "univer",
    "content": "TITLE: Adding Hyperlinks via Command Service (TypeScript)\nDESCRIPTION: Provides an example of using the Univer command service (`ICommandService`) to execute the `AddHyperLinkCommand`. It shows how to specify the target unit, sub-unit, and the hyperlink details (payload URL, ID, row, column). Includes imports for relevant commands and parameters. Requires a Univer instance (`univer`) and access to its `ICommandService`.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-hyper-link-ui/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// All commands\nimport { AddHyperLinkCommand, type IAddHyperLinkCommandParams } from '@univerjs/sheets-hyper-link-ui';\nimport { RemoveHyperLinkCommand, CancelHyperLinkCommand, type IRemoveHyperLinkCommandParams } from '@univerjs/sheets-hyper-link-ui';\nimport { UpdateHyperLinkCommand, type IUpdateHyperLinkCommandParams } from '@univerjs/sheets-hyper-link-ui';\n\n// Add hyperlink by command\nconst commandService = univer.__getInjector().get(ICommandService);\n\ncommandService.executeCommand(AddHyperLinkCommand.id, {\n    unitId: 'unitId',\n    subUnitId: 'subUnitId',\n    link: {\n        // comment content\n        payload: 'https://univer.ai',\n        id: '1',\n        row: 0,\n        column: 0\n    },\n} as IAddCommentCommandParams);\n```\n\n----------------------------------------\n\nTITLE: Data Mode Switching (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to switch between binding mode and value mode in the `FWorkbook` using the `sheets-source-binding` plugin. This determines whether the cell displays the bound path or the actual data value from the source.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Binding mode\nfWorkbook.usePathMode();\n// Value mode\nfWorkbook.useValueMode()\n```\n\n----------------------------------------\n\nTITLE: Introducing UI Facade API (TypeScript)\nDESCRIPTION: This code adds a UI facade API, enabling external modules to manipulate UI components programmatically, including show/hide actions and styling updates, to allow dynamic UI adjustments.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nadd ui facade ([#4452](https://github.com/dream-num/univer/issue/4452)) ([6b723c9](https://github.com/dream-num/univer/commit/6b723c9db0f8a10f5e4f6f5a61e263c654bdce40))\n```\n\n----------------------------------------\n\nTITLE: Binding Node API (TypeScript)\nDESCRIPTION: These TypeScript snippets demonstrate the API for managing cell binding nodes in `FWorksheet` using the `sheets-source-binding` plugin.  These functions allow setting, removing, and retrieving the binding configuration of a specific cell, linking it to a data source.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Set\nsetBindingNode(bindingNode): void;\n// Remove\nremoveBindingNode(row, column): void;\n// Get\ngetBindingNode(row, column): ICellBindingNode | undefined;\n```\n\n----------------------------------------\n\nTITLE: Registering Data Validation Plugins and Initializing Workbook (TypeScript)\nDESCRIPTION: Imports required types and plugins, registers data validation plugins with a Univer instance, defines initial data validation rules, creates a DEFAULT_WORKBOOK_DATA_DEMO object containing these rules, and loads it into Univer Sheets. Prerequisites include installation of @univerjs/core, @univerjs/data-validation, and @univerjs/sheets-data-validation. Key parameters involve data validation rule fields such as uid, type, and ranges, as well as the workbook locale and resource initialization. Expects valid instances and structures as defined in Univer interfaces; outputs the loaded data validation into a Univer Sheets workbook environment.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-data-validation/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { IWorkbookData } from '@univerjs/core';\nimport { DataValidationType, ICommandService, LocaleType, Univer, UniverInstanceType } from '@univerjs/core';\nimport { UniverDataValidationPlugin } from '@univerjs/data-validation';\nimport {\n    DATA_VALIDATION_PLUGIN_NAME,\n    UniverSheetsDataValidationPlugin,\n} from '@univerjs/sheets-data-validation';\n\nuniver.registerPlugin(UniverDataValidationPlugin);\nuniver.registerPlugin(UniverSheetsDataValidationPlugin);\n\n// initial data validation\n// dentation: https://github.com/dream-num/univer/blob/dev/packages/core/src/types/interfaces/i-data-validation.ts#L48\nconst dataValidation = [\n    {\n        uid: 'xxx-2',\n        type: DataValidationType.CHECKBOX,\n        ranges: [{\n            startRow: 6,\n            endRow: 10,\n            startColumn: 0,\n            endColumn: 5,\n        }],\n    },\n];\n\nexport const DEFAULT_WORKBOOK_DATA_DEMO: IWorkbookData = {\n    id: 'workbook-01',\n    locale: LocaleType.ZH_CN,\n    name: 'UniverSheet Demo',\n    resources: [{\n        name: DATA_VALIDATION_PLUGIN_NAME,\n        data: JSON.stringify({\n            'sheetId-1': dataValidation,\n        }),\n    }],\n    // ...\n};\n\n// load initial snapshot\nuniver.createUnit(UniverInstanceType.UNIVER_SHEET, DEFAULT_WORKBOOK_DATA_DEMO);\n```\n\n----------------------------------------\n\nTITLE: Registering the Sheets Filter UI Plugin in TypeScript\nDESCRIPTION: Imports the necessary CSS and registers both the UniverSheetsFilterPlugin (from @univerjs/sheets-filter) and the UniverSheetsFilterUIPlugin (from @univerjs/sheets-filter-ui) with a Univer instance. This enables the filtering functionality and its corresponding user interface.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-filter-ui/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@univerjs/sheets-filter-ui/lib/index.css';\n\nimport { UniverSheetsFilterPlugin } from '@univerjs/sheets-filter';\nimport { UniverSheetsFilterUIPlugin } from '@univerjs/sheets-filter-ui';\n\nuniver.registerPlugin(UniverSheetsFilterPlugin);\nuniver.registerPlugin(UniverSheetsFilterUIPlugin);\n```\n\n----------------------------------------\n\nTITLE: Managing Sheet Data Validation with Commands and Services (TypeScript)\nDESCRIPTION: Imports command types and services related to sheet data validation, demonstrates how to add a new data validation rule using the commandService.executeCommand method, and shows how to use the SheetsDataValidationValidatorService for validation. Required dependencies are @univerjs/sheets-data-validation and @univerjs/core. Key parameters include unitId, subUnitId, and rule descriptions; expected inputs are valid command parameter objects and method arguments, with outputs depending on the actual command execution and validator logic.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-data-validation/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Commands and Command params for sheet-data-validation management\nimport type {\n    IAddSheetDataValidationCommandParams,\n    IRemoveSheetDataValidationCommandParams,\n    IUpdateSheetDataValidationOptionsCommandParams,\n    IUpdateSheetDataValidationRangeCommandParams,\n    IUpdateSheetDataValidationSettingCommandParams,\n} from '@univerjs/sheets-data-validation';\nimport {\n    AddSheetDataValidationCommand,\n    DATA_VALIDATION_PLUGIN_NAME,\n    RemoveSheetDataValidationCommand,\n    UniverSheetsDataValidationPlugin,\n    UpdateSheetDataValidationOptionsCommand,\n    UpdateSheetDataValidationRangeCommand,\n    UpdateSheetDataValidationSettingCommand,\n    // internal service\n    SheetsDataValidationValidatorService\n} from '@univerjs/sheets-data-validation';\n\n// eg. Add data validation from command\nconst commandService = univer.__getInjector().get(ICommandService);\n\ncommandService.executeCommand(AddSheetDataValidationCommand.id, {\n    unitId: 'unitId',\n    subUnitId: 'subUnitId',\n    rule: {\n        uid: 'xxx-2',\n        type: DataValidationType.CHECKBOX,\n        ranges: [{\n            startRow: 6,\n            endRow: 10,\n            startColumn: 0,\n            endColumn: 5,\n        }],\n    },\n} as IAddSheetDataValidationCommandParams);\n\n// Using internal service Such as validator\nconst sheetsDataValidationValidatorService = univer.__getInjector().get(SheetsDataValidationValidatorService);\nsheetsDataValidationValidatorService.validatorWorksheet('unitId', 'sheetId')\n```\n\n----------------------------------------\n\nTITLE: Registering Univer Sheets Data Validation Plugins in TypeScript\nDESCRIPTION: TypeScript snippet demonstrating how to import and register data validation plugins in the Univer JavaScript environment. Specifically, it imports the UniverSheetsDataValidationUiPlugin from @univerjs/sheets-data-validation-ui and registers it along with UniverDataValidationPlugin on the univer instance. This setup enables the UI components for sheet data validation functionality. The snippet assumes that 'univer' is an initialized instance that supports plugin registration.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-data-validation-ui/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverSheetsDataValidationUiPlugin } from '@univerjs/sheets-data-validation-ui';\n\nuniver.registerPlugin(UniverDataValidationPlugin);\nuniver.registerPlugin(UniverSheetsDataValidationUiPlugin);\n```\n\n----------------------------------------\n\nTITLE: Registering UniverSheetsHyperLinkUIPlugin (TypeScript)\nDESCRIPTION: Shows how to import and register the `UniverSheetsHyperLinkUIPlugin` with the core Univer instance. This step is necessary to activate the hyperlink UI components and functionalities within the application. Requires an existing `univer` instance.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-hyper-link-ui/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverSheetsHyperLinkUIPlugin } from '@univerjs/sheets-hyper-link-ui';\n\nuniver.registerPlugin(UniverSheetsHyperLinkUIPlugin);\n```\n\n----------------------------------------\n\nTITLE: Getting ScriptEditorService Instance via Injector (TypeScript)\nDESCRIPTION: Shows how to retrieve an instance of the Monaco Editor used by Uniscript by directly accessing the Univer dependency injector (`univer.__getInjector()`) and requesting the `ScriptEditorService`. The `getEditorInstance()` method on this service returns the editor object. This approach requires the Univer core and `@univerjs/uniscript` plugin to be properly initialized.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/uniscript/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = univer.__getInjector().get(ScriptEditorService).getEditorInstance();\n```\n\n----------------------------------------\n\nTITLE: Configuring Univer instance with custom options in TypeScript\nDESCRIPTION: This snippet shows how to instantiate a Univer object with custom configuration options such as theme, locale, locales, and log level, enabling tailored application behavior and appearance. Dependencies include the Univer class and related types from @univerjs/core.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/core/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Univer } from '@univerjs/core';\n\nnew Univer({\n    theme: defaultTheme,\n    locale: LocaleType.EN_US,\n    locales,\n    logLevel: LogLevel.VERBOSE,\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in Theme in Univer Initialization - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import a built-in theme, such as defaultTheme, from @univerjs/design and apply it during the initialization of a Univer instance. The imported theme object is assigned to the 'theme' property within the Univer constructor's configuration object. This sets the visual style for the entire Univer application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/design/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultTheme } from '@univerjs/design';\n// import { greenTheme } from '@univerjs/design';\n\n// Use the default theme\nnew Univer({\n    theme: defaultTheme,\n    // theme: greenTheme,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-data-validation-ui via npm and pnpm Shell Commands\nDESCRIPTION: Shell commands to install the @univerjs/sheets-data-validation-ui npm package using npm or pnpm. This snippet shows how to add the package as a project dependency to enable UI data validation features in Univer Sheet. It requires having npm or pnpm package managers installed.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-data-validation-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm i @univerjs/sheets-data-validation-ui\n\n# Using pnpm\npnpm add\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Univer FindReplacePlugin (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import and register the `UniverFindReplacePlugin`. It imports the plugin from the `@univerjs/find-replace` package and registers it with the `univer` instance.  This allows the find and replace functionality to be used. There are no specific parameters to this registration.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/find-replace/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { UniverFindReplacePlugin } from '@univerjs/find-replace';\n\nuniver.registerPlugin(UniverFindReplacePlugin);\n```\n\n----------------------------------------\n\nTITLE: Getting ScriptEditorService Instance via Dependency Injection (TypeScript)\nDESCRIPTION: Illustrates obtaining the `ScriptEditorService` instance within a custom module using Univer's dependency injection pattern. The `@Inject(ScriptEditorService)` decorator injects the service into the class constructor, allowing access to its methods like `getEditorInstance()` to retrieve the Monaco Editor instance. This is typically used within classes managed by Univer's DI container.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/uniscript/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class YourModule {\n  constructor(\n    @Inject(ScriptEditorService) private readonly _scriptEditorService\n  ) {}\n\n  private _getEditor() {\n    return this._scriptEditorService.getEditorInstance();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the plugin in Univer\nDESCRIPTION: This code snippet demonstrates how to register the `UniverSheetsConditionalFormattingUIPlugin` plugin in the Univer environment. This is required to enable the conditional formatting UI features provided by the package. The `univer` object is assumed to be the core Univer instance.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-conditional-formatting-ui/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverSheetsConditionalFormattingUIPlugin } from '@univerjs/sheets-conditional-formatting-ui';\n\nuniver.registerPlugin(UniverSheetsConditionalFormattingUIPlugin);\n```\n\n----------------------------------------\n\nTITLE: Creating and Binding Data Source in Univer Sheets (TypeScript)\nDESCRIPTION: This code demonstrates how to create a data source and bind it to a cell in a Univer sheet using the sheets-source-binding plugin. It uses the facade API to interact with the Univer instance. The code creates both an object and a list data source and binds them to different cells with specific paths.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst fWorkbook = univerAPI.getActiveWorkbook();\nconst fSheet = fWorkbook.getActiveSheet();\n\nconst source = fWorkbook.createSource(univerAPI.Enum.DataBindingNodeTypeEnum.Object);\nsource.setSourceData({\n    user: {\n        name: 'Jack'\n    }\n})\n\nfSheet.setBindingNode({\n    row: 1,\n    column: 2,\n    path: 'user.name',\n    type: univerAPI.Enum.DataBindingNodeTypeEnum.Object,\n    sourceId: source.getId()\n})\n\nconst listSource = fWorkbook.createSource(univerAPI.Enum.DataBindingNodeTypeEnum.List, false);\nlistSource.setSourceData({\n    fields: ['Product', 'Category', 'Date'],\n    records: [['Apple', 1, 1736942545041], ['Banana', 'Fruit', 1736942545041], ['Pen', 'Stationery', 1736942545041]]\n})\nfSheet.setBindingNode({\n    row: 1,\n    column: 4,\n    path: 'Product',\n    type: univerAPI.Enum.DataBindingNodeTypeEnum.List,\n    sourceId: listSource.getId()\n})\n\nfSheet.setBindingNode({\n    row: 1,\n    column: 5,\n    path: 'Category',\n    type: univerAPI.Enum.DataBindingNodeTypeEnum.List,\n    sourceId: listSource.getId()\n})\nfSheet.setBindingNode({\n    row: 1,\n    column: 6,\n    path: 'Date',\n    type: univerAPI.Enum.DataBindingNodeTypeEnum.List,\n    sourceId: listSource.getId(),\n    isDate: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering UniverSheetTableUIPlugin (TypeScript)\nDESCRIPTION: This TypeScript code imports and registers the UniverSheetTableUIPlugin. It makes the plugin's features available within the Univer application. It requires the plugin to be installed first.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-table-ui/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { UniverSheetTableUIPlugin } from '@univerjs/sheets-table-ui'\n\nuniver.registerPlugin(UniverSheetTableUIPlugin);\n```\n\n----------------------------------------\n\nTITLE: Registering UniverWatermarkPlugin in TypeScript\nDESCRIPTION: Demonstrates how to import and register the `UniverWatermarkPlugin` within a Univer application using TypeScript. This step integrates the watermark functionality into the Univer instance after installation. Assumes a `univer` instance is already initialized.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/watermark/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverWatermarkPlugin } from '@univerjs/watermark';\n\nuniver.registerPlugin(UniverWatermarkPlugin);\n```\n\n----------------------------------------\n\nTITLE: Setting up data binding using facade API in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the facade API to create a source, set its data, and bind it to a specific cell in a sheet. It also shows how to create a list-based source and bind multiple cells to it. It uses `univerAPI` to interact with the Univer application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README-zh.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst fWorkbook = univerAPI.getActiveWorkbook();\nconst fSheet = fWorkbook.getActiveSheet();\n\nconst source = fWorkbook.createSource(univerAPI.Enum.DataBindingNodeTypeEnum.Object);\nsource.setSourceData({\n    user: {\n        name: 'Jack'\n    }\n})\n\nfSheet.setBindingNode({\n    row: 1,\n    column: 2,\n    path: 'user.name',\n    type: univerAPI.Enum.DataBindingNodeTypeEnum.Object,\n    sourceId: source.getId()\n})\n\nconst listSource = fWorkbook.createSource(univerAPI.Enum.DataBindingNodeTypeEnum.List, false);\nlistSource.setSourceData({\n    fields: ['商品', '种类','日期'],\n    records: [['苹果', 1, 1736942545041], ['香蕉', '水果',1736942545041], ['圆珠笔', '文具',1736942545041]]\n})\nfSheet.setBindingNode({\n    row: 1,\n    column: 4,\n    path: '商品',\n    type: univerAPI.Enum.DataBindingNodeTypeEnum.List,\n    sourceId: listSource.getId()\n})\n\nfSheet.setBindingNode({\n    row: 1,\n    column: 5,\n    path: '种类',\n    type: univerAPI.Enum.DataBindingNodeTypeEnum.List,\n    sourceId: listSource.getId()\n})\nfSheet.setBindingNode({\n    row: 1,\n    column: 6,\n    path: '日期',\n    type: univerAPI.Enum.DataBindingNodeTypeEnum.List,\n    sourceId: listSource.getId(),\n    isDate:true,\n})\n```\n\n----------------------------------------\n\nTITLE: Registering the UniverDocsHyperLinkUIPlugin in TypeScript\nDESCRIPTION: Demonstrates how to import the `UniverDocsHyperLinkUIPlugin` from the `@univerjs/docs-hyper-link` package and register it with the Univer instance using `univer.registerPlugin()`. This step integrates the hyperlink UI components and functionality into the Univer Docs application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-hyper-link/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverDocsHyperLinkUIPlugin} from '@univerjs/docs-hyper-link';\n\nuniver.registerPlugin(UniverDocsHyperLinkUIPlugin);\n```\n\n----------------------------------------\n\nTITLE: Defining Spreadsheet Table Clipboard Data in HTML\nDESCRIPTION: This HTML snippet illustrates how spreadsheet data is formatted as an HTML table for clipboard interoperability with other spreadsheet software. It includes structural elements like colgroup for column widths, and styling at the table, row, and cell levels to preserve layout and visual formatting. Each cell contains data-sheets-value attributes encoding the stored numerical values in JSON format. The table uses fixed layout, border styles, and font settings to match spreadsheet presentation. This format requires a rendering environment that supports HTML and CSS. It is intended to represent grid data and maintain visual fidelity when copied or transferred between spreadsheet tools.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-ui/src/services/clipboard/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\\n    <body>\\n        <style type=\"text/css\"></style>\\n        <table\\n            xmlns=\"http://www.w3.org/1999/xhtml\"\\n            cellspacing=\"0\"\\n            cellpadding=\"0\"\\n            dir=\"ltr\"\\n            border=\"1\"\\n            style=\"table-layout:fixed;font-size:10pt;font-family:Arial;width:0px;border-collapse:collapse;border:none\"\\n        >\\n            <!-- col style -->\\n            <colgroup>\\n                <col width=\"100\" />\\n                <col width=\"100\" />\\n                <col width=\"100\" />\\n            </colgroup>\\n            <tbody>\\n                <!-- row style -->\\n                <tr style=\"height:21px;\">\\n                    <td style=\"border-right:1px solid #000000;overflow:hidden;padding:2px 3px 2px 3px;vertical-align:bottom;text-align:right;\" data-sheets-value='{\"1\":3,\"3\":1}'>\\n                        1\\n                    </td>\\n                    <td\\n                        style=\"border-top:1px solid #000000;border-right:1px solid #000000;border-bottom:1px solid #000000;overflow:hidden;padding:2px 3px 2px 3px;vertical-align:bottom;text-align:right;\"\\n                        data-sheets-value='{\"1\":3,\"3\":4}'\\n                    >\\n                        4\\n                    </td>\\n                    <td\\n                        style=\"border-top:1px solid #000000;border-right:1px solid #000000;border-bottom:1px solid #000000;overflow:hidden;padding:2px 3px 2px 3px;vertical-align:bottom;text-align:right;\"\\n                        data-sheets-value='{\"1\":3,\"3\":5}'\\n                    >\\n                        5\\n                    </td>\\n                </tr>\\n                <tr style=\"height:21px;\">\\n                    <td style=\"border-right:1px solid #000000;overflow:hidden;padding:2px 3px 2px 3px;vertical-align:bottom;text-align:right;\" data-sheets-value='{\"1\":3,\"3\":2}'>\\n                        2\\n                    </td>\\n                    <td\\n                        style=\"border-right:1px solid #000000;border-bottom:1px solid #000000;overflow:hidden;padding:2px 3px 2px 3px;vertical-align:bottom;text-align:right;\"\\n                        data-sheets-value='{\"1\":3,\"3\":6}'\\n                    >\\n                        6\\n                    </td>\\n                    <td\\n                        style=\"border-right:1px solid #000000;border-bottom:1px solid #000000;overflow:hidden;padding:2px 3px 2px 3px;vertical-align:bottom;text-align:right;\"\\n                        data-sheets-value='{\"1\":3,\"3\":7}'\\n                    >\\n                        7\\n                    </td>\\n                </tr>\\n                <tr style=\"height:21px;\">\\n                    <td style=\"border-right:1px solid #000000;overflow:hidden;padding:2px 3px 2px 3px;vertical-align:bottom;text-align:right;\" data-sheets-value='{\"1\":3,\"3\":3}'>\\n                        3\\n                    </td>\\n                    <td\\n                        style=\"border-right:1px solid #000000;border-bottom:1px solid #000000;overflow:hidden;padding:2px 3px 2px 3px;vertical-align:bottom;text-align:right;\"\\n                        data-sheets-value='{\"1\":3,\"3\":8}'\\n                    >\\n                        8\\n                    </td>\\n                    <td\\n                        style=\"border-right:1px solid #000000;border-bottom:1px solid #000000;overflow:hidden;padding:2px 3px 2px 3px;vertical-align:bottom;text-align:right;\"\\n                        data-sheets-value='{\"1\":3,\"3\":9}'\\n                    >\\n                        9\\n                    </td>\\n                </tr>\\n            </tbody>\\n        </table>\\n    </body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Loading and Disposing Workbook in E2E\nDESCRIPTION: Run this JavaScript command in the browser's developer console while the application is in E2E mode. It simulates loading and immediately releasing a workbook instance, allowing you to profile memory and check if Workbook objects are retained after disposal.\nSOURCE: https://github.com/dream-num/univer/blob/dev/docs/FIX_MEMORY_LEAK.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nE2EControllerAPI.loadAndRelease()\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering the Plugin (TypeScript)\nDESCRIPTION: This code snippet shows how to import the `UniverSheetsBindingSourcePlugin` and register it with the Univer instance. This step is crucial to enable the plugin's functionality within the Univer application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverSheetsBindingSourcePlugin } from '@univerjs/sheets-source-binding';\n\nuniver.registerPlugin(UniverSheetsBindingSourcePlugin);\n```\n\n----------------------------------------\n\nTITLE: Building & Previewing Univer Libraries - Shell\nDESCRIPTION: First, runs the pnpm build command to compile the project's source code into build artifacts. Subsequently, runs pnpm dev:libs to start a local server that serves these generated build artifacts, enabling local linking and testing of the built code.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\npnpm dev:libs\n```\n\n----------------------------------------\n\nTITLE: Registering @univerjs/sheets-thread-comment-ui Plugin with Custom Mention Data Service - TypeScript\nDESCRIPTION: Demonstrates importing the UniverSheetsThreadCommentPlugin and IThreadCommentMentionDataService interface, creating a mock user, and implementing a custom mention data service class. The custom service provides the '@' trigger and async mention fetching logic returning a list of users. Finally, it shows how to register the comment plugin with the Univer Sheets instance to enable comment/annotation features.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-thread-comment-ui/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverSheetsThreadCommentPlugin, IThreadCommentMentionDataService} from '@univerjs/sheets-thread-comment-ui';\n\nconst mockUser = {\n    userID: 'mockId',\n    name: 'MockUser',\n    avatar: 'icon-url',\n    anonymous: false,\n    canBindAnonymous: false,\n};\n\nclass CustomMentionDataService implements IThreadCommentMentionDataService {\n    trigger: string = '@';\n\n     // Get the common interface implementation of the mentioned user\n    async getMentions(search: string) {\n        return [\n            {\n                id: mockUser.userID,\n                label: mockUser.name,\n                type: 'user',\n                icon: mockUser.avatar,\n            },\n            {\n                id: '2',\n                label: 'User2',\n                type: 'user',\n                icon: mockUser.avatar,\n            },\n        ];\n    }\n}\n\nuniver.registerPlugin(UniverSheetsThreadCommentPlugin);\n```\n\n----------------------------------------\n\nTITLE: Importing and registering the plugin in TypeScript\nDESCRIPTION: This TypeScript code snippet imports the `UniverSheetsBindingSourcePlugin` and registers it with the Univer application. This step is required to activate the plugin's functionality within Univer.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README-zh.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverSheetsBindingSourcePlugin } from '@univerjs/sheets-source-binding';\n\nuniver.registerPlugin(UniverSheetsBindingSourcePlugin);\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Dependencies - Shell\nDESCRIPTION: This snippet provides the shell commands required to set up the Univer development environment. It includes cloning the repository, navigating into the project directory, installing the pnpm package manager globally using npm, and finally installing all project dependencies using pnpm. Requires Node.js version 18.17.0 or higher.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/dream-num/univer\ncd univer\n\n# install package manager pnpm\nnpm i -g pnpm\n\n# install dependencies\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering UniverSheetTablePlugin in UniverJS (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import the UniverSheetTablePlugin from the @univerjs/sheets-table package and register it with the UniverJS platform. The univer object must be instantiated and the plugin should be registered before accessing sheet table features. Dependencies include the UniverJS framework and the installed @univerjs/sheets-table package.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-table/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverSheetTablePlugin } from '@univerjs/sheets-table';\n\nuniver.registerPlugin(UniverSheetTablePlugin);\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook Dev Server - Shell\nDESCRIPTION: Runs the pnpm command to start the Storybook development server. Storybook is utilized for developing and testing UI components in isolation, improving reuse and testability.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm storybook:dev\n```\n\n----------------------------------------\n\nTITLE: Registering UniverSheetsNumfmtPlugin in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and register the `UniverSheetsNumfmtPlugin` within a UniverJS application. It initializes a `Univer` instance, sets the theme and locale, and then registers the plugin. The `Univer` instance is the core of the UniverJS application, and registering the plugin makes the number formatting UI features available. The primary dependency is the UniverJS core library.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-numfmt/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LocaleType, LogLevel, Univer } from '@univerjs/core';\nimport { defaultTheme } from '@univerjs/design';\nimport { UniverSheetsNumfmtPlugin } from '@univerjs/sheets-numfmt-ui';\n\n// univer\nconst univer = new Univer({\n    theme: defaultTheme,\n    locale: LocaleType.EN_US,\n    locales,\n    logLevel: LogLevel.VERBOSE,\n});\n\n// ... Other plug-ins are registered\n\nuniver.registerPlugin(UniverSheetsNumfmtPlugin);\n```\n\n----------------------------------------\n\nTITLE: Running Univer Unit Tests - Shell\nDESCRIPTION: Executes the pnpm command to run the project's unit tests using the Vitest framework. Running unit tests is a mandatory step to ensure code quality and stability before submitting pull requests.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Executing Comment Commands via Univer Sheets Command Service - TypeScript\nDESCRIPTION: Illustrates importing comment command identifiers and parameter types from the plugin package, obtaining the command service instance via dependency injection, and using this service to execute commands such as AddCommentCommand. This enables programmatic addition, deletion, updating, resolving, and deletion of comment threads within Univer Sheets. Parameters include unit and sub-unit IDs and the comment content.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-thread-comment-ui/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    AddCommentCommand,\n    DeleteCommentCommand,\n    UpdateCommentCommand,\n    ResolveCommentCommand,\n    DeleteCommentTreeCommand,\n} from '@univerjs/sheets-thread-comment-ui';\nimport type {\n    IAddCommentCommandParams,\n    IDeleteCommentCommandParams,\n    IResolveCommentCommandParams,\n    IUpdateCommentCommandParams,\n    IDeleteCommentTreeCommandParams,\n} from '@univerjs/sheets-thread-comment-ui';\n\n// Add comment by command\nconst commandService = univer.__getInjector().get(ICommandService);\n\ncommandService.executeCommand(AddCommentCommand.id, {\n    unitId: 'unitId',\n    subUnitId: 'subUnitId',\n    comment: {\n        // comment content\n    },\n} as IAddCommentCommandParams);\n```\n\n----------------------------------------\n\nTITLE: Plugin Naming Conventions in TypeScript\nDESCRIPTION: Specifies that plugin names should be uppercase and underscore-separated with the suffix '_PLUGIN' for clarity and uniformity. Examples demonstrate the correct full uppercase format versus incorrect casing or truncated suffixes.\nSOURCE: https://github.com/dream-num/univer/blob/dev/docs/NAMING_CONVENTION.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅\nexport const SHEET_CONDITIONAL_FORMATTING_PLUGIN = 'SHEET_CONDITIONAL_FORMATTING_PLUGIN';\n\n// 🚫\nexport const SHEET_CONDITIONAL_FORMATTING_PLUGIN = 'SHEET_CONDITIONAL_FORMATTING';\n\n// 🚫\nexport const SHEET_CONDITIONAL_FORMATTING_PLUGIN = 'sheet-conditional-formatting-plugin';\n```\n\n----------------------------------------\n\nTITLE: Registering Conditional Formatting Plugin with Univer (TypeScript)\nDESCRIPTION: This snippet imports the UniverSheetsConditionalFormattingPlugin from @univerjs/sheets-conditional-formatting and registers it with an existing Univer instance to enable conditional formatting features. The Univer instance must be properly initialized beforehand. No explicit parameters are required apart from the plugin import, and this setup assumes TypeScript or JavaScript ES module syntax. The snippet provides the minimal configuration to activate the plugin, with no advanced options shown.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-conditional-formatting/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverSheetsConditionalFormattingPlugin } from '@univerjs/sheets-conditional-formatting';\n\nuniver.registerPlugin(UniverSheetsConditionalFormattingPlugin);\n```\n\n----------------------------------------\n\nTITLE: Binding API on FWorksheet in TypeScript\nDESCRIPTION: These are the binding-related APIs available on `FWorksheet`. These methods allow to manage the bindings between data sources and spreadsheet cells. The `setBindingNode` method allows to bind a data path from a source to a cell, `removeBindingNode` removes the binding and `getBindingNode` retrieves an existing binding.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README-zh.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 设置\nsetBindingNode(bindingNode): void;\n// 删除\nremoveBindingNode(row, column): void;\n// 读取\ngetBindingNode(row, column): ICellBindingNode | undefined;\n```\n\n----------------------------------------\n\nTITLE: Registering UniverSheetsSortUIPlugin - TypeScript\nDESCRIPTION: Registers the UniverSheetsSortUIPlugin and UniverSheetsSortPlugin with the Univer application. This snippet demonstrates how to import the necessary modules and register the plugins to enable sorting functionalities within Univer sheets. Requires the @univerjs/sheets-sort and @univerjs/sheets-sort-ui packages to be installed.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-sort-ui/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@univerjs/sheets-sort-ui/lib/index.css';\n\nimport { UniverSheetsSortPlugin } from '@univerjs/sheets-sort';\nimport { UniverSheetsSortUIPlugin } from '@univerjs/sheets-sort-ui';\n\nuniver.registerPlugin(UniverSheetsSortPlugin);\nuniver.registerPlugin(UniverSheetsSortUIPlugin);\n```\n\n----------------------------------------\n\nTITLE: Registering @univerjs/docs-hyper-link-ui plugin in Univer\nDESCRIPTION: This snippet demonstrates importing the HyperLink UI plugin from the @univerjs/docs-hyper-link-ui package and registering it with the Univer system. It is essential for enabling hyperlink UI functionalities within the Univer Docs environment.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-hyper-link-ui/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { UniverDocsHyperLinkUIPlugin} from '@univerjs/docs-hyper-link-ui';\n\nuniver.registerPlugin(UniverDocsHyperLinkUIPlugin);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Registering UniverSheetsNumfmtUIPlugin in TypeScript\nDESCRIPTION: Demonstrates how to import and register the `UniverSheetsNumfmtUIPlugin` within a Univer application using TypeScript. It requires `@univerjs/core` for Univer core functionalities, `@univerjs/design` for theming, and the plugin itself. The snippet shows initializing a Univer instance and then registering the plugin.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-numfmt-ui/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LocaleType, LogLevel, Univer } from '@univerjs/core';\nimport { defaultTheme } from '@univerjs/design';\nimport { UniverSheetsNumfmtUIPlugin } from '@univerjs/sheets-numfmt-ui';\n\n// univer\nconst univer = new Univer({\n    theme: defaultTheme,\n    locale: LocaleType.EN_US,\n    locales,\n    logLevel: LogLevel.VERBOSE,\n});\n\n// ... Other plug-ins are registered\n\nuniver.registerPlugin(UniverSheetsNumfmtUIPlugin);\n```\n\n----------------------------------------\n\nTITLE: Creating Data Source (TypeScript)\nDESCRIPTION: These TypeScript snippets demonstrate the API for creating, getting, and updating data sources in the `FWorkbook` object using the `sheets-source-binding` plugin. These functions provide the functionality to manage external data sources within Univer.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Create\ncreateSource(type, isListObject?, id?): SourceModelBase;\n// Get\ngetSource(sourceId): SourceModelBase;\n// Update data\nsetSourceData(sourceId, data): void;\n```\n\n----------------------------------------\n\nTITLE: Registering the Univer Docs Thread Comment UI Plugin\nDESCRIPTION: Code example showing how to import and register the UniverDocsThreadCommentUIPlugin with a Univer instance.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-thread-comment-ui/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverDocsThreadCommentUIPlugin } from '@univerjs/docs-thread-comment-ui';\n\nuniver.registerPlugin(UniverDocsThreadCommentUIPlugin);\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-filter-ui via npm/pnpm\nDESCRIPTION: Provides shell commands to install the @univerjs/sheets-filter-ui package using either the npm or pnpm package manager. This command downloads and adds the package to the project's dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-filter-ui/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/sheets-filter-ui\n\n# Using pnpm\npnpm add @univerjs/sheets-filter-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/core using npm and pnpm\nDESCRIPTION: This code snippet demonstrates how to install the @univerjs/core package using npm or pnpm package managers, facilitating integration into a project environment.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/core/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/core\n\n# Using pnpm\npnpm add @univerjs/core\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets Package with npm or pnpm\nDESCRIPTION: Commands for installing the @univerjs/sheets package using either npm or pnpm package managers. This package is required to implement core spreadsheet functionality in a Univer application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/sheets\n\n# Using pnpm\npnpm add @univerjs/sheets\n```\n\n----------------------------------------\n\nTITLE: Source API on FWorkbook in TypeScript\nDESCRIPTION: These are the source related APIs exposed on `FWorkbook`. They are used to create, retrieve, and update data sources for binding to sheet cells.  The `createSource` method is used to create a new source with a specified type, while `getSource` retrieves an existing source by its ID.  The `setSourceData` method allows updating the data associated with a specific source.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README-zh.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 创建，\ncreateSource(type, isListObject?, id?): SourceModelBase;\n// 获取\ngetSource(sourceId): SourceModelBase;\n// 更新数据\nsetSourceData(sourceId, data): void;\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-filter via npm\nDESCRIPTION: Demonstrates how to install the @univerjs/sheets-filter package using the npm package manager. This command downloads and adds the package as a project dependency.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-filter/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/sheets-filter\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/watermark via npm/pnpm\nDESCRIPTION: Provides shell commands to install the `@univerjs/watermark` package using either npm or pnpm package managers. This is the first step required to use the watermark plugin in a Univer project.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/watermark/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/watermark\n\n# Using pnpm\npnpm add @univerjs/watermark\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-hyper-link with npm\nDESCRIPTION: This command installs the @univerjs/sheets-hyper-link package using npm, adding it to your project's dependencies.  It allows you to use the hyperlink functionalities provided by the package.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-hyper-link/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/sheets-hyper-link\n```\n\n----------------------------------------\n\nTITLE: Installing Univerjs Design Package - Shell\nDESCRIPTION: This snippet provides shell commands for installing the @univerjs/design package using either npm or pnpm. This package is a prerequisite for using the Univer UI components and themes and should be installed in your project's development dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/design/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/design\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Using pnpm\npnpm add @univerjs/design\n```\n\n----------------------------------------\n\nTITLE: Adding Formula Facade Support (TypeScript)\nDESCRIPTION: This snippet incorporates a formula facade, providing an API layer for formula operations including cache clearing, import handling, and support for lambda functions in formula registration. It depends on the core formula processing modules within the codebase.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nadd formula facade ([#4348](https://github.com/dream-num/univer/issue/4348)) ([de097d8](https://github.com/dream-num/univer/commit/de097d886ec229bdb829d17b975356ddacd10464))\n```\n\n----------------------------------------\n\nTITLE: Registering Sheets Find-Replace Plugin with UniverJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register the @univerjs/sheets-find-replace plugin with a UniverJS instance. It requires the core @univerjs/find-replace plugin to be registered as well. This is necessary to enable the find and replace feature within spreadsheets.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-find-replace/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverFindReplacePlugin } from '@univerjs/find-replace';\nimport { UniverSheetsFindReplacePlugin } from '@univerjs/sheets-find-replace';\n\nuniver.registerPlugin(UniverFindReplacePlugin);\nuniver.registerPlugin(UniverSheetsFindReplacePlugin);\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/docs with npm\nDESCRIPTION: This command installs the `@univerjs/docs` package using npm. It adds the package and its dependencies to your project's `node_modules` directory and updates your `package.json` file.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/docs\n```\n\n----------------------------------------\n\nTITLE: Switching Modes on FWorkbook in TypeScript\nDESCRIPTION: These APIs on `FWorkbook` are used to switch between path and value modes for data binding. When in path mode, the cell displays the bound path; in value mode, the cell displays the value from the bound data source.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README-zh.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 绑定模式\nfWorkbook.usePathMode();\n// 取值模式\nfWorkbook.useValueMode()\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/slides Package using npm or pnpm\nDESCRIPTION: Command-line instructions for installing the @univerjs/slides package using either npm or pnpm package managers. These commands will add the package to your project's dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/slides/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/slides\n\n# Using pnpm\npnpm add @univerjs/slides\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Facade API for Comment, Rich Text, Data Validation, and Edit Operations (TypeScript)\nDESCRIPTION: This code adds comprehensive API methods to the facade for managing comments, rich-text formatting, data validation, and editing capabilities. It enhances modular access and operation consistency across different components.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nadd comment & rich-text & data-validation & edit API ([#4423](https://github.com/dream-num/univer/issue/4423)) ([cff224f](https://github.com/dream-num/univer/commit/cff224fb24a244a55b8386ed1fb35cdd8e5f7a73))\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/uni-slides-ui via npm\nDESCRIPTION: This code snippet provides the command to install the @univerjs/uni-slides-ui package using npm. It ensures that the package is added as a dependency in the project for use in building university slides UI.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/uni-slides-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/uni-slides-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-source-binding (Shell)\nDESCRIPTION: This command installs the `@univerjs/sheets-source-binding` package using npm. This is a necessary step to use the plugin in a Univer project.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/sheets-source-binding\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Sheets Table UI Plugin via npm (Shell)\nDESCRIPTION: This shell command installs the @univerjs/sheets-table-ui plugin from npm. It's a prerequisite for using the plugin within a project.  The command `npm i @univerjs/sheets-table-ui` downloads and installs the package and its dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-table-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/sheets-table-ui\n```\n\n----------------------------------------\n\nTITLE: Installing UniverJS Network Package via npm or pnpm - Shell\nDESCRIPTION: This snippet demonstrates how to install the @univerjs/network package using either npm or pnpm package managers in a JavaScript or TypeScript project. Ensure that Node.js is installed and an existing project directory is initialized before running these commands. There are no required parameters; simply execute the desired command in the terminal. The output is the installed @univerjs/network library in your project's dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/network/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/network\n\n# Using pnpm\npnpm add @univerjs/network\n```\n\n----------------------------------------\n\nTITLE: Adding Find and Replace API in the Facade Layer (TypeScript)\nDESCRIPTION: This snippet introduces a facade API for find and replace functionality, enabling external modules to perform search and replace operations within a spreadsheet or document context. It depends on the existing facade architecture and extends its capabilities for better interaction with user inputs.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nadd find replace facade api ([#4430](https://github.com/dream-num/univer/issue/4430)) ([e34c664](https://github.com/dream-num/univer/commit/e34c6642135d98ac08efdecb011e19250db2df9e))\n```\n\n----------------------------------------\n\nTITLE: Installing the Action Recorder Plugin in Univer\nDESCRIPTION: This command installs the @univerjs/action-recorder package using npm, which allows for recording and replaying user actions in a Univer application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/action-recorder/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/action-recorder\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-sort-ui - Shell\nDESCRIPTION: Installs the @univerjs/sheets-sort-ui package using either npm or pnpm. This command adds the package to the project's dependencies, allowing its functionalities to be used. The command needs to be executed in the root directory of the project.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-sort-ui/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/sheets-sort-ui\n\n# Using pnpm\npnpm add @univerjs/sheets-sort-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/uni-formula Package - Shell\nDESCRIPTION: Installs the @univerjs/uni-formula npm package, which provides formula features for Univer Docs and Univer Slides. The snippet uses npm, a JavaScript package manager, to fetch and install the package. No parameters are required other than executing the installation command in a shell environment. This operation adds the package to the project's dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/uni-formula/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/uni-formula\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-hyper-link with pnpm\nDESCRIPTION: This command installs the @univerjs/sheets-hyper-link package using pnpm, adding it to your project's dependencies. It allows you to use the hyperlink functionalities provided by the package.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-hyper-link/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/sheets-hyper-link\n```\n\n----------------------------------------\n\nTITLE: Installing UniverJS UI Package via npm\nDESCRIPTION: This snippet demonstrates how to install the `@univerjs/ui` package using npm.  It outlines the command required to add the package as a dependency in your project. This is a prerequisite for using the UI components and services provided by the package. It will download the necessary files and add the package to your `package.json` file.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/ui\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Docs UI using npm - Shell\nDESCRIPTION: Installs the @univerjs/docs-ui package via npm, which provides the user interface components for Univer Docs. Requires Node.js and npm to be installed on the system. The command pulls the latest published version of the package from the npm registry and adds it as a dependency to your project's package.json. No additional parameters are required. Output is a successful installation or error if prerequisites are unmet.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/docs-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/thread-comment-ui with npm\nDESCRIPTION: This command installs the @univerjs/thread-comment-ui package using npm. It adds the package as a dependency to your project, allowing you to use the thread comment UI components in your application. Ensure npm is installed and configured correctly before running this command.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/thread-comment-ui/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @univerjs/thread-comment-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/thread-comment Package with Package Managers\nDESCRIPTION: Commands for installing the @univerjs/thread-comment package using npm or pnpm package managers. This is a prerequisite for using thread comment functionality in UniversJS applications.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/thread-comment/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/thread-comment\n\n# Using pnpm\npnpm add @univerjs/thread-comment\n```\n\n----------------------------------------\n\nTITLE: Supporting Lambda Functions in Formula Registration (TypeScript)\nDESCRIPTION: This code enhances formula registration API to support lambda functions, allowing users to define dynamic and custom formula behaviors with asynchronous capabilities, boosting flexibility.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nsupport lambda in function register ([#4298](https://github.com/dream-num/univer/issue/4298)) ([a1b7a16](https://github.com/dream-num/univer/commit/a1b7a1685b052dc438e75356bd940089ccb930e3))\n```\n\n----------------------------------------\n\nTITLE: Registering the UniverDataValidationPlugin\nDESCRIPTION: Example of how to register the UniverDataValidationPlugin with a Univer instance to enable data validation capabilities.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/data-validation/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniverDataValidationPlugin } from '@univerjs/data-validation';\n\nuniver.registerPlugin(UniverDataValidationPlugin);\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-thread-comment-ui Plugin with npm/pnpm - Shell\nDESCRIPTION: Provides command line instructions to install the @univerjs/sheets-thread-comment-ui package using npm or pnpm package managers. These commands enable adding the plugin to the project dependencies before usage.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-thread-comment-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Use npm\nnpm install @univerjs/sheets-thread-comment-ui\n\n# Use pnpm\npnpm add @univerjs/sheets-thread-comment-ui\n```\n\n----------------------------------------\n\nTITLE: Installing UniverJS UI Package via pnpm\nDESCRIPTION: This snippet demonstrates how to install the `@univerjs/ui` package using pnpm. It outlines the command required to add the package as a dependency in your project. This is a prerequisite for using the UI components and services provided by the package. It will download the necessary files and add the package to your `package.json` file.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/ui/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-filter via pnpm\nDESCRIPTION: Shows the command to install the @univerjs/sheets-filter package using the pnpm package manager. This command adds the package to the project's dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-filter/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Using pnpm\npnpm add @univerjs/sheets-filter\n```\n\n----------------------------------------\n\nTITLE: Adding Lexer Tree Builder in Facade Layer (TypeScript)\nDESCRIPTION: This function introduces a lexer tree builder API into the facade layer, facilitating syntax analysis and tokenization of formulas or expressions for further processing or validation.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nadd lexer-tree-builder ([#4444](https://github.com/dream-num/univer/issue/4444)) ([a36c4f3](https://github.com/dream-num/univer/commit/a36c4f3d6fbf0c410b99e040bad4746c636406c2))\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-numfmt-ui via npm/pnpm\nDESCRIPTION: Provides shell commands to install the `@univerjs/sheets-numfmt-ui` package using either the npm or pnpm package manager. This package is a prerequisite for adding number formatting UI capabilities to Univer sheets.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-numfmt-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/sheets-numfmt-ui\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Using pnpm\npnpm add @univerjs/sheets-numfmt-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-formula-ui package with npm or pnpm\nDESCRIPTION: Commands to install the @univerjs/sheets-formula-ui package using either npm or pnpm package managers. This is required before you can use the formula editing capabilities in your UniverJS spreadsheet application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-formula-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/sheets-formula-ui\n\n# Using pnpm\npnpm add @univerjs/sheets-formula-ui\n```\n\n----------------------------------------\n\nTITLE: Installing the sheets-source-binding plugin using npm\nDESCRIPTION: This shell command installs the `@univerjs/sheets-source-binding` plugin using npm.  This allows to add the plugin to the Univer application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/sheets-source-binding/README-zh.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/sheets-source-binding\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Docs Mention UI Package with NPM or PNPM (Shell)\nDESCRIPTION: These shell command snippets demonstrate how to install the @univerjs/docs-mention-ui package using either npm or pnpm. Users must have Node.js and the corresponding package manager (npm or pnpm) installed on their system. No input parameters are required for these commands beyond repository/package manager prerequisites. The output will be the package added to the project's dependencies. Limitations include requiring network access and appropriate permissions.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-mention-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/docs-mention-ui\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Using pnpm\npnpm add @univerjs/docs-mention-ui\n```\n\n----------------------------------------\n\nTITLE: Adding @univerjs/engine-render with pnpm\nDESCRIPTION: This snippet shows an alternative method to install the @univerjs/engine-render package using the pnpm package manager. Execute this command in your project's terminal to add the package dependency efficiently.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/engine-render/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/engine-render\n```\n\n----------------------------------------\n\nTITLE: Adding Sheets Thread Comment - pnpm - Shell\nDESCRIPTION: Adds the @univerjs/sheets-thread-comment package using the pnpm package manager. This command fetches the package and adds it as a project dependency efficiently.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-thread-comment/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm add @univerjs/sheets-thread-comment\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/uniscript via npm or pnpm (Shell)\nDESCRIPTION: Demonstrates how to install the `@univerjs/uniscript` package using either the npm or pnpm package managers. These commands download the package and add it as a dependency to your project. Requires Node.js and the respective package manager (npm or pnpm) to be installed.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/uniscript/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/uniscript\n\n# Using pnpm\npnpm add @univerjs/uniscript\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Sheets Drawing UI via pnpm\nDESCRIPTION: This snippet shows how to install the `@univerjs/sheets-drawing-ui` package using pnpm.  Pnpm must be available on the system. The command adds the specified package to the project's dependencies, similarly to npm, managing the project's dependencies within the pnpm structure. The primary output is the successful installation of the specified package, managed by pnpm.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-drawing-ui/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/sheets-drawing-ui\n```\n\n----------------------------------------\n\nTITLE: Adding Paste Options Functionality (TypeScript)\nDESCRIPTION: This snippet adds an API to support various paste options in the application, allowing users to customize the paste behavior. It requires the facade layer to handle paste-related commands and depends on event handling mechanisms to function correctly.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nadd paste options ([#4393](https://github.com/dream-num/univer/issue/4393)) ([d758b21](https://github.com/dream-num/univer/commit/d758b217ec4f590a44e7db25eeefff413fed2d89))\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-zen-editor Package (Shell)\nDESCRIPTION: These commands demonstrate how to install the @univerjs/sheets-zen-editor package as a project dependency using either npm or pnpm. This is typically the first step to include the functionality in a UniverJS project. Requires Node.js and a package manager (npm or pnpm) installed.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-zen-editor/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/sheets-zen-editor\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/sheets-zen-editor\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/slides-ui Package via Shell\nDESCRIPTION: Provides shell commands for installing the @univerjs/slides-ui package using npm and pnpm package managers. These commands enable users to add the package to their project dependencies, facilitating usage of the slides-ui functionality. No further runtime context or code samples are included.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/slides-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/slides-ui\n\n# Using pnpm\npnpm add @univerjs/slides-ui\n```\n\n----------------------------------------\n\nTITLE: Installing UniverSheetsNumfmt UI with npm\nDESCRIPTION: This snippet shows how to install the `@univerjs/sheets-numfmt-ui` package using npm.  The command adds the necessary package to the project's dependencies, allowing its functionality to be used. No specific parameters are required; the command installs the latest compatible version.  The output is the package being added to the project.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-numfmt/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/sheets-numfmt-ui\n```\n\n----------------------------------------\n\nTITLE: Installing UniverSheetsNumfmt UI with pnpm\nDESCRIPTION: This snippet shows how to install the `@univerjs/sheets-numfmt-ui` package using pnpm.  The command adds the necessary package to the project's dependencies, allowing its functionality to be used. No specific parameters are required; the command installs the latest compatible version. The output is the package being added to the project.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-numfmt/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/sheets-numfmt-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/telemetry via npm (Shell)\nDESCRIPTION: This shell command installs the @univerjs/telemetry package using npm, which is a required dependency for accessing the ITelemetry interface in Univer.js. Before running this command, ensure that npm is installed and initialized in your project directory. The installed package enables plugins to implement or depend on telemetry functions within the Univer.js framework.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/telemetry/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/telemetry\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/uni-formula-ui npm Package Shell\nDESCRIPTION: This shell snippet installs the @univerjs/uni-formula-ui package from npm using the npm install command. The command requires npm and Node.js to be installed on the system. The command is run in a terminal environment and the expected output is the package added to the current project dependencies without errors. It does not take parameters beyond the package name and supports typical npm installation behavior.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/uni-formula-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/uni-formula-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/docs-hyper-link via npm or pnpm\nDESCRIPTION: Shows how to install the `@univerjs/docs-hyper-link` package using either the npm or pnpm package managers. This dependency is required to use the hyperlink functionality provided by the plugin.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-hyper-link/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/docs-hyper-link\n\n# Using pnpm\npnpm add @univerjs/docs-hyper-link\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Sheets UI Package with npm (Shell)\nDESCRIPTION: This command demonstrates how to install the @univerjs/uni-sheets-ui package using npm, the Node.js package manager. Executing this command in your project's terminal will add the package as a dependency, making its UI components available for use in your Univer application. This requires Node.js and npm to be installed on your system.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/uni-sheets-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/uni-sheets-ui\n```\n\n----------------------------------------\n\nTITLE: Adding Image Event and Enum Support (TypeScript)\nDESCRIPTION: This snippet introduces event handling and enumerations for image components, facilitating interaction and customization of image elements within the application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CHANGELOG.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nadd event and enum ([#4429](https://github.com/dream-num/univer/issue/4429)) ([b413d68](https://github.com/dream-num/univer/commit/b413d6809ede2382839b660319a6ec9482cea89b))\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Sheets Drawing UI via npm\nDESCRIPTION: This snippet demonstrates the installation of the `@univerjs/sheets-drawing-ui` package using npm.  It requires npm to be installed on the user's system. The command installs the package and its dependencies into the project's `node_modules` directory and updates the `package.json` file.  The output will typically indicate the installation progress and any warnings or errors.  The primary output is the successful installation of the specified package.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-drawing-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/sheets-drawing-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/debugger Using Package Managers - Shell\nDESCRIPTION: This snippet shows how to install the @univerjs/debugger plugin using either npm or pnpm. The plugin adds debugging utilities to Univer-based projects and is strictly for development environments; it should never be used in production. Dependencies include either npm or pnpm as a package manager with access to the npm registry. Input involves running the respective install command in a terminal, and the output is the addition of @univerjs/debugger as a dependency in the project. No configuration parameters are required.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/debugger/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/debugger\n\n# Using pnpm\npnpm add @univerjs/debugger\n```\n\n----------------------------------------\n\nTITLE: Installing Univer UI Package using npm\nDESCRIPTION: Command to install the @univerjs/uniui package as a dependency in your project using npm.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages-experimental/uniui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/uniui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-table with NPM (Shell)\nDESCRIPTION: This shell command installs the @univerjs/sheets-table package via npm. It assumes that Node.js and npm are installed on the system. After execution, the package will be added to the project's dependencies, making its modules available for import.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-table/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/sheets-table\n```\n\n----------------------------------------\n\nTITLE: Documenting the FWorkbook Class in TypeScript\nDESCRIPTION: This snippet shows the use of JSDoc comments for documenting methods within the FWorkbook class, detailing the purpose, parameters, and return values for `getActiveSheet` and `create` methods, essential for clarity and maintainability.\nSOURCE: https://github.com/dream-num/univer/blob/dev/docs/CONTRIBUTING-FACADE.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class FWorkbook {\n    /**\n     * Get the active sheet of the workbook.\n     * @returns The active sheet of the workbook\n     */\n    getActiveSheet(): FWorksheet | null {\n        // ...\n    }\n\n    /**\n     * Create a new worksheet and returns a handle to it.\n     * @param name Name of the new sheet\n     * @param rows How may rows would the new sheet have\n     * @param column How many columns would the new sheet have\n     * @returns The new created sheet\n     */\n    create(name: string, rows: number, column: number): FWorksheet {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Find and Replace Plugin (Shell)\nDESCRIPTION: These shell commands demonstrate how to install the `@univerjs/find-replace` package using npm and pnpm. The commands add the package as a project dependency. The commands assume you have npm or pnpm installed.  After executing, the package will be available for import in the project.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/find-replace/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/find-replace\n\n# Using pnpm\npnpm add @univerjs/find-replace\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/mockdata Package with npm\nDESCRIPTION: This command installs the @univerjs/mockdata package using npm. It adds the package and its dependencies to your project's node_modules directory, making it available for import and use in your code. This installation is a prerequisite for using the mock data provided by the package.\nSOURCE: https://github.com/dream-num/univer/blob/dev/mockdata/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/mockdata\n```\n\n----------------------------------------\n\nTITLE: Creating New Univer Package with npm - Shell\nDESCRIPTION: Provides an alternative to using pnpm. Uses the npm package manager to execute the Univer command-line interface (CLI) tool (`@univerjs/cli init`) for generating a new Univer package. Replace `<project-name>` with the desired name for the new package.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm create @univerjs/cli init <project-name>\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/engine-formula with npm\nDESCRIPTION: This command installs the @univerjs/engine-formula package using npm. It adds the package to your project's dependencies, allowing you to use the formula engine in your application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/engine-formula/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/engine-formula\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/engine-render with npm\nDESCRIPTION: This snippet demonstrates how to install the @univerjs/engine-render package using the npm package manager. This command should be executed in the project's terminal to add the package as a dependency.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/engine-render/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/engine-render\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-hyper-link-ui (Shell)\nDESCRIPTION: Demonstrates how to install the `@univerjs/sheets-hyper-link-ui` package using either npm or pnpm package managers. This is the first step required to use the hyperlink features in a Univer project.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-hyper-link-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/sheets-hyper-link-ui\n\n# Using pnpm\npnpm add @univerjs/sheets-hyper-link-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-data-validation via npm or pnpm (Shell)\nDESCRIPTION: Demonstrates terminal commands to install the @univerjs/sheets-data-validation package using npm or pnpm. No programming prerequisites beyond access to a Node.js-compatible environment and a package manager are required. Expected input: a project directory; output: dependency installed in node_modules.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-data-validation/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm i @univerjs/sheets-data-validation\n\n# Using pnpm\npnpm add\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Drawing via npm or pnpm - Shell\nDESCRIPTION: Demonstrates how to install the @univerjs/drawing library using either npm or pnpm package managers. These commands require Node.js and either npm or pnpm installed in the environment. The 'npm install' and 'pnpm add' commands fetch the package from the npm registry and make it available to your JavaScript or TypeScript project. No inputs are required, and successful execution outputs the package files to your project's node_modules directory.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/drawing/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/drawing\n\n# Using pnpm\npnpm add @univerjs/drawing\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/engine-numfmt Using npm and pnpm Shell Commands\nDESCRIPTION: Provides shell commands to install the @univerjs/engine-numfmt package using either npm or pnpm. This snippet is intended for users to quickly add the package to their project dependencies. No additional configuration or dependencies are required in this snippet, but it assumes a working Node.js environment with npm or pnpm available.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/engine-numfmt/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/engine-numfmt\n\n# Using pnpm\npnpm add @univerjs/engine-numfmt\n```\n\n----------------------------------------\n\nTITLE: Installing the Univer Sheets Crosshair Highlight package using npm or pnpm\nDESCRIPTION: Shell commands to install the @univerjs/sheets-crosshair-highlight package using either npm or pnpm package managers.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-crosshair-highlight/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm i @univerjs/sheets-crosshair-highlight\n\n# Using pnpm\npnpm add @univerjs/sheets-crosshair-highlight\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Sheets Conditional Formatting Plugin (Shell)\nDESCRIPTION: This snippet demonstrates how to install the @univerjs/sheets-conditional-formatting package using npm or pnpm. Ensure that Node.js and the Univer Sheets framework are installed in your environment before running these commands. The commands are executed within a terminal or shell and add the plugin as a dependency to your project.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-conditional-formatting/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/sheets-conditional-formatting\n\n# Using pnpm\npnpm add @univerjs/sheets-conditional-formatting\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/sheets-thread-comment package\nDESCRIPTION: Commands to install the @univerjs/sheets-thread-comment package using npm or pnpm package managers.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-thread-comment-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/sheets-thread-comment\n\n# Using pnpm\npnpm add @univerjs/sheets-thread-comment\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/docs-quick-insert-ui package using npm or pnpm\nDESCRIPTION: Commands to install the @univerjs/docs-quick-insert-ui package using either npm or pnpm package managers. These commands will add the package to your project's dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-quick-insert-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/docs-quick-insert-ui\n\n# Using pnpm\npnpm add @univerjs/docs-quick-insert-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/data-validation package\nDESCRIPTION: Commands for installing the @univerjs/data-validation package using npm or pnpm package managers.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/data-validation/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm i @univerjs/data-validation\n\n# Using pnpm\npnpm add @univerjs/data-validation\n```\n\n----------------------------------------\n\nTITLE: Installing Sheets Find-Replace Package (Shell)\nDESCRIPTION: This snippet provides commands for installing the @univerjs/sheets-find-replace package using common Node.js package managers, npm and pnpm. This package is a dependency required to use the sheets find and replace features.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-find-replace/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Using npm\nnpm install @univerjs/sheets-find-replace\n\n# Using pnpm\npnpm add @univerjs/sheets-find-replace\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/docs-drawing with npm\nDESCRIPTION: This snippet demonstrates how to install the `@univerjs/docs-drawing` package using npm.  The command utilizes `npm install` followed by the package name.  Ensure that npm is installed and configured correctly. The output is the installation of the package and its dependencies in the current directory.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-drawing/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/docs-drawing\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/rpc-node via npm\nDESCRIPTION: This code snippet provides the command to install the @univerjs/rpc-node package using npm (Node Package Manager). It's a simple installation command that downloads and installs the package and its dependencies into the current project.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/rpc-node/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @univerjs/rpc-node\n```\n\n----------------------------------------\n\nTITLE: Installing the package using npm\nDESCRIPTION: This command installs the `@univerjs/sheets-conditional-formatting-ui` package using npm. This allows you to then import and use the package in your project. Ensure npm is installed and configured correctly.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-conditional-formatting-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/sheets-conditional-formatting-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/engine-formula with pnpm\nDESCRIPTION: This command installs the @univerjs/engine-formula package using pnpm. It adds the package to your project's dependencies, allowing you to use the formula engine in your application.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/engine-formula/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/engine-formula\n```\n\n----------------------------------------\n\nTITLE: Installing Sheets Thread Comment - npm - Shell\nDESCRIPTION: Installs the @univerjs/sheets-thread-comment package using the npm package manager. This command fetches the package from the npm registry and adds it as a project dependency.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-thread-comment/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @univerjs/sheets-thread-comment\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Drawing UI via npm - Shell\nDESCRIPTION: This snippet demonstrates how to install the @univerjs/drawing package using npm, a common JavaScript package manager. The installed package provides drawing UI components for UniverJS applications. Ensure you have Node.js and npm installed before running this command. The input is a shell command, and upon execution, the package is added to your project's dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/drawing-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @univerjs/drawing\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Docs UI using pnpm - Shell\nDESCRIPTION: Installs the @univerjs/docs-ui package using pnpm, an alternative JavaScript package manager. This command requires pnpm to be installed globally. It fetches and adds the package as a dependency in your project, leveraging pnpm's workspace and disk-saving features. Enter the command in the terminal at the root of your JavaScript project. Output is the inclusion of @univerjs/docs-ui in your project dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-ui/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/docs-ui\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/docs-drawing with pnpm\nDESCRIPTION: This snippet illustrates installing the `@univerjs/docs-drawing` package using pnpm. The command uses `pnpm add` followed by the package name. pnpm must be installed and set up.  The output is the installation of the package and its dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs-drawing/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/docs-drawing\n```\n\n----------------------------------------\n\nTITLE: Installing the package using pnpm\nDESCRIPTION: This command installs the `@univerjs/sheets-conditional-formatting-ui` package using pnpm. This is an alternative package manager to npm. Ensure pnpm is installed and configured correctly.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/sheets-conditional-formatting-ui/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/sheets-conditional-formatting-ui\n```\n\n----------------------------------------\n\nTITLE: Installing Univer Drawing UI via pnpm - Shell\nDESCRIPTION: This snippet shows how to install the @univerjs/drawing package using pnpm, an alternative fast JavaScript package manager. The package, once installed, enables drawing UI features in UniverJS-based projects. Ensure pnpm is installed and run this command in your project directory. The shell command requires no input and adds the specified package to your project's dependencies.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/drawing-ui/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/drawing\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/docs with pnpm\nDESCRIPTION: This command installs the `@univerjs/docs` package using pnpm. It adds the package and its dependencies to your project, offering potentially faster and more efficient dependency management compared to npm.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/docs/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @univerjs/docs\n```\n\n----------------------------------------\n\nTITLE: Installing @univerjs/thread-comment-ui with pnpm\nDESCRIPTION: This command installs the @univerjs/thread-comment-ui package using pnpm. It adds the package as a dependency to your project, enabling the use of thread comment UI components in your application. Make sure pnpm is installed and properly configured before executing this command.\nSOURCE: https://github.com/dream-num/univer/blob/dev/packages/thread-comment-ui/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm add @univerjs/thread-comment-ui\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Token Naming in TypeScript\nDESCRIPTION: Defines a naming convention for dependency injection tokens using a constant with the same interface name, assigned by calling createIdentifier with a string formatted as '<package-name>.<service-or-controller-name>.(service|controller)'. This ensures consistent and recognizable tokens across the project.\nSOURCE: https://github.com/dream-num/univer/blob/dev/docs/NAMING_CONVENTION.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const IYourServiceOrControllerName = createIdentifier<IYourServiceOrControllerName>('<package-name>.<your-service-or-controller-name>.(service|controller>');\n\n// ✅\nexport const ILogService = createIdentifier<ILogService>('core.log.service');\n\n// 🚫\nexport const ILogService = createIdentifier<ILogService>('log-service');\n```\n\n----------------------------------------\n\nTITLE: Command Naming and Interface Conventions in TypeScript\nDESCRIPTION: Describes the pattern for defining commands with a parameter interface prefixed by 'I' and a command constant implementing ICommand interface. The command id must follow the pattern '<business-type>.<command-type>.<command-name>' in singular form and usually lowercase. Examples show correct and incorrect id formats.\nSOURCE: https://github.com/dream-num/univer/blob/dev/docs/NAMING_CONVENTION.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ISomeCommandParams {\n    // Define the parameters here\n}\n\nexport const SomeCommand = ICommand<ISomeCommandParams> = {\n    id: '<business-type>.<command-type>.<command-name>',\n};\n\n// ✅\nexport const SetSelectionFrozenCommand: ICommand<ISetSelectionFrozenCommandParams> = {\n    id: 'sheet.command.set-selection-frozen',\n}\n\n// 🚫\nexport const SetSelectionFrozenCommand: ICommand<ISetSelectionFrozenCommandParams> = {\n    id: 'sheets.command.set-selection-frozen',\n}\n\n// 🚫\nexport const SetSelectionFrozenCommand: ICommand<ISetSelectionFrozenCommandParams> = {\n    id: 'SetSelectionFrozenCommand',\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ResolveCommentCommand: ICommand<IResolveCommentCommandParams> = {\n    id: 'thread-comment.command.resolve-comment',\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Naming Convention in TypeScript\nDESCRIPTION: Specifies that all interfaces should be named with a capital 'I' prefix, which aids in recognizing interfaces easily within the codebase. Demonstrates with accepted and rejected naming examples.\nSOURCE: https://github.com/dream-num/univer/blob/dev/docs/NAMING_CONVENTION.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅\nexport interface IMyInterface {}\n\n// 🚫\nexport interface MyInterface {}\n```\n\n----------------------------------------\n\nTITLE: Plugin Class Naming Convention in TypeScript\nDESCRIPTION: Mandates that plugin classes should be named with PascalCase and prefixed by 'Univer' to indicate their origin and role clearly within the framework. Examples clarify the difference between compliant and non-compliant naming.\nSOURCE: https://github.com/dream-num/univer/blob/dev/docs/NAMING_CONVENTION.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅\nexport class UniverFilterPlugin extends Plugin {}\n\n// 🚫\nexport class FilterPlugin extends Plugin {}\n```\n\n----------------------------------------\n\nTITLE: Creating New Univer Package with pnpm - Shell\nDESCRIPTION: Uses the pnpm package manager to execute the Univer command-line interface (CLI) tool (`@univerjs/cli init`) for generating a new Univer package. Replace `<project-name>` with the desired name for the new package.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npnpm create @univerjs/cli init <project-name>\n```\n\n----------------------------------------\n\nTITLE: Starting Univer Development Server - Shell\nDESCRIPTION: Executes the pnpm command to start the local development server for the Univer project. This command is used to run the application locally during the development process.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Dependencies - Shell\nDESCRIPTION: Runs the pnpm command to execute Playwright's install command. This downloads and sets up the necessary browser binaries required for running End-to-End (E2E) tests using Playwright.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm exec playwright install\n```\n\n----------------------------------------\n\nTITLE: Starting Univer E2E Dev Server - Shell\nDESCRIPTION: Executes the pnpm command to start the development server specifically configured for End-to-End (E2E) testing purposes. This server needs to be running before executing E2E tests.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev:e2e\n```\n\n----------------------------------------\n\nTITLE: Running Univer E2E Tests - Shell\nDESCRIPTION: Runs the pnpm command to execute the End-to-End (E2E) test suite for the Univer project. This command should be run after the dedicated E2E development server (`pnpm dev:e2e`) has been started.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: File and Folder Naming Convention - Text Format\nDESCRIPTION: Defines the proper kebab-case naming convention for file and folder names with a special exception for React component files, which should use PascalCase. It also indicates that folder names should be plural, and file names singular, improving project organization and readability.\nSOURCE: https://github.com/dream-num/univer/blob/dev/docs/NAMING_CONVENTION.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n// ✅\nsrc/\n  components/\n    my-component/\n      my-util.ts\n      MyComponent.tsx\n\n// 🚫\nsrc/\n  components/\n    myComponent/\n      myUtil.ts\n      my-component.tsx\n```\n\nLANGUAGE: txt\nCODE:\n```\n// ✅\nsrc/\n  services/\n    util.ts\n\n// 🚫\nsrc/\n  service/\n    utils.ts\n```\n\n----------------------------------------\n\nTITLE: Running E2E Mode with pnpm\nDESCRIPTION: Execute this command in your terminal to start the Univer application in End-to-End (E2E) test mode. This mode is required to use browser development tools like Chrome DevTools for memory profiling and analysis.\nSOURCE: https://github.com/dream-num/univer/blob/dev/docs/FIX_MEMORY_LEAK.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev:e2e\n```\n\n----------------------------------------\n\nTITLE: Converting Sheet to Workbook in Univer Layer (TypeScript)\nDESCRIPTION: This snippet alters the internal representation by changing the sheet reference to a workbook at the API level, supporting more complex document structures and operations across multiple sheets.\nSOURCE: https://github.com/dream-num/univer/blob/dev/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nuniver-sheet change to workbook ([#4460](https://github.com/dream-num/univer/issue/4460)) ([c4e9c3a](https://github.com/dream-num/univer/commit/c4e9c3aa45561a1483c453fe795df3abd8ac96f0))\n```\n\n----------------------------------------\n\nTITLE: Disposing Univer Instance in E2E\nDESCRIPTION: Execute this JavaScript command in the browser's developer console during E2E mode. This command disposes of the main Univer instance, helping to verify that the entire application object and its associated resources are correctly released from memory.\nSOURCE: https://github.com/dream-num/univer/blob/dev/docs/FIX_MEMORY_LEAK.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nE2EControllerAPI.disposeUniver()\n```"
  }
]