[
  {
    "owner": "matrix-org",
    "repo": "matrix-js-sdk",
    "content": "TITLE: Initializing Matrix Client in JavaScript\nDESCRIPTION: Creates a Matrix client with a base URL pointing to matrix.org and fetches public rooms. This is a basic example of client initialization.\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as sdk from \"matrix-js-sdk\";\nconst client = sdk.createClient({ baseUrl: \"https://matrix.org\" });\nclient.publicRooms(function (err, data) {\n    console.log(\"Public Rooms: %s\", JSON.stringify(data));\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing End-to-End Encryption with matrix-js-sdk in JavaScript\nDESCRIPTION: Code for creating a Matrix client and initializing the Rust-based end-to-end encryption support. This is the basic setup needed to enable encryption capabilities in the client.\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a new matrix client\nconst matrixClient = sdk.createClient({\n    baseUrl: \"http://localhost:8008\",\n    accessToken: myAccessToken,\n    userId: myUserId,\n});\n\n// Initialize to enable end-to-end encryption support.\nawait matrixClient.initRustCrypto();\n```\n\n----------------------------------------\n\nTITLE: Starting the Matrix Client\nDESCRIPTION: Initializes the client connection with a limited initial sync. This is required before most client operations can be performed.\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.startClient({ initialSyncLimit: 10 });\n```\n\n----------------------------------------\n\nTITLE: Setting Up Matrix Client with Authentication\nDESCRIPTION: Demonstrates how to initialize a Matrix client with user credentials including access token and user ID. This setup is required for authenticated API calls.\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as sdk from \"matrix-js-sdk\";\nconst myUserId = \"@example:localhost\";\nconst myAccessToken = \"QGV4YW1wbGU6bG9jYWxob3N0.qPEvLuYfNBjxikiCjP\";\nconst matrixClient = sdk.createClient({\n    baseUrl: \"http://localhost:8008\",\n    accessToken: myAccessToken,\n    userId: myUserId,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cross-Signing with matrix-js-sdk in JavaScript\nDESCRIPTION: Code to set up cross-signing for device verification in Matrix. This requires an authentication callback to upload device signing keys to the server.\n\nLANGUAGE: javascript\nCODE:\n```\nmatrixClient.getCrypto().bootstrapCrossSigning({\n    authUploadDeviceSigningKeys: async (makeRequest) => {\n        return makeRequest(authDict);\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Key Backup with matrix-js-sdk in JavaScript\nDESCRIPTION: Code to check for existing key backups and create a new one if needed. Key backups are essential for recovering encrypted message history across devices.\n\nLANGUAGE: javascript\nCODE:\n```\n// Check if we have a key backup.\n// If checkKeyBackupAndEnable returns null, there is no key backup.\nconst hasKeyBackup = (await matrixClient.getCrypto().checkKeyBackupAndEnable()) !== null;\n\n// Create the key backup\nawait matrixClient.getCrypto().resetKeyBackup();\n```\n\n----------------------------------------\n\nTITLE: Migrating from Legacy Crypto to Rust Crypto in matrix-js-sdk\nDESCRIPTION: Implementation for migrating from the legacy crypto stack to the Rust-based crypto stack. Requires providing the legacy crypto store and pickle key to ensure data is properly migrated.\n\nLANGUAGE: javascript\nCODE:\n```\n// You should provide the legacy crypto store and the pickle key to the matrix client in order to migrate the data.\nconst matrixClient = sdk.createClient({\n    cryptoStore: myCryptoStore,\n    pickleKey: myPickleKey,\n    baseUrl: \"http://localhost:8008\",\n    accessToken: myAccessToken,\n    userId: myUserId,\n});\n\n// The migration will be done automatically when you call `initRustCrypto`.\nawait matrixClient.initRustCrypto();\n```\n\n----------------------------------------\n\nTITLE: Listening for Message Events in Timeline\nDESCRIPTION: Sets up an event listener to receive incoming message events in rooms. The callback filters for m.room.message type events and logs the message body content.\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(RoomEvent.Timeline, function (event, room, toStartOfTimeline) {\n    if (event.getType() !== \"m.room.message\") {\n        return; // only use messages\n    }\n    console.log(event.event.content.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for Matrix Events with EventEmitter\nDESCRIPTION: Shows how to set up listeners for Matrix events using the EventEmitter pattern. This example listens for all events and for typing indicators.\n\nLANGUAGE: javascript\nCODE:\n```\n// Listen for low-level MatrixEvents\nclient.on(ClientEvent.Event, function (event) {\n    console.log(event.getType());\n});\n\n// Listen for typing changes\nclient.on(RoomMemberEvent.Typing, function (event, member) {\n    if (member.typing) {\n        console.log(member.name + \" is typing...\");\n    } else {\n        console.log(member.name + \" stopped typing.\");\n    }\n});\n\n// start the client to setup the connection to the server\nclient.startClient();\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to a Matrix Room\nDESCRIPTION: Sends a text message to a specified room. The content object defines the message type and body text to be sent.\n\nLANGUAGE: javascript\nCODE:\n```\nconst content = {\n    body: \"message text\",\n    msgtype: \"m.text\",\n};\nclient.sendEvent(\"roomId\", \"m.room.message\", content, \"\", (err, res) => {\n    console.log(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Boolean Conversion in TypeScript\nDESCRIPTION: Examples of proper boolean conversion techniques in TypeScript, showing recommended ways to convert values to boolean type using double negation (!!) and Boolean() constructor, as well as incorrectly typed boolean expressions.\n\nLANGUAGE: typescript\nCODE:\n```\nconst isRealUser = !!userId && ...; // good\nconst isRealUser = Boolean(userId) && Boolean(userName); // also good\nconst isRealUser = Boolean(userId) && isReal; // also good (where isReal is another boolean variable)\nconst isRealUser = Boolean(userId && userName); // also fine\nconst isRealUser = Boolean(userId || userName); // good: same as &&\nconst isRealUser = userId && ...;   // bad: isRealUser is userId's type, not a boolean\n\nif (userId) // fine: userId is evaluated for truthiness, not stored as a boolean\n```\n\n----------------------------------------\n\nTITLE: Type Definition and Function Parameter Handling in TypeScript\nDESCRIPTION: Shows how to properly define interfaces, types, and function parameters in TypeScript. Demonstrates the preferred approach for type definitions and parameter usage.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyObject {\n    hasString: boolean;\n}\n\ntype Options = MyObject | string;\n\nfunction doThing(arg: Options) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Async/Await Pattern in TypeScript\nDESCRIPTION: Shows the preferred async/await syntax over promise chaining in TypeScript, demonstrating how to properly structure an asynchronous function with await.\n\nLANGUAGE: typescript\nCODE:\n```\nasync function () {\n    const result = await anotherAsyncFunction();\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Client Sync State Changes\nDESCRIPTION: Sets up an event listener to track when the client has completed initial synchronization with the server. This is useful for knowing when the client is ready for interaction.\n\nLANGUAGE: javascript\nCODE:\n```\nclient.once(ClientEvent.sync, function (state, prevState, res) {\n    if (state === \"PREPARED\") {\n        console.log(\"prepared\");\n    } else {\n        console.log(state);\n        process.exit(1);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Auto-joining Rooms on Invitation\nDESCRIPTION: Sets up an event listener to automatically join rooms when invited. The code checks for membership change events and joins any room where the client receives an invite.\n\nLANGUAGE: javascript\nCODE:\n```\nmatrixClient.on(RoomEvent.MyMembership, function (room, membership, prevMembership) {\n    if (membership === KnownMembership.Invite) {\n        matrixClient.joinRoom(room.roomId).then(function () {\n            console.log(\"Auto-joined %s\", room.roomId);\n        });\n    }\n});\n\nmatrixClient.startClient();\n```\n\n----------------------------------------\n\nTITLE: Listening for Room Messages with matrix-js-sdk in JavaScript\nDESCRIPTION: Event listener that prints messages from all rooms to the console. It filters the events to only display m.room.message events and ignores paginated timeline results.\n\nLANGUAGE: javascript\nCODE:\n```\nmatrixClient.on(RoomEvent.Timeline, function (event, room, toStartOfTimeline) {\n    if (toStartOfTimeline) {\n        return; // don't print paginated results\n    }\n    if (event.getType() !== \"m.room.message\") {\n        return; // only print messages\n    }\n    console.log(\n        // the room name will update with m.room.name events automatically\n        \"(%s) %s :: %s\",\n        room.name,\n        event.getSender(),\n        event.getContent().body,\n    );\n});\n\nmatrixClient.startClient();\n```\n\n----------------------------------------\n\nTITLE: Tracking Room Membership Changes with matrix-js-sdk in JavaScript\nDESCRIPTION: Event listener that monitors and prints room membership changes. It outputs the room name and a list of all members with their current membership status (join, leave, invite).\n\nLANGUAGE: javascript\nCODE:\n```\nmatrixClient.on(RoomStateEvent.Members, function (event, state, member) {\n    const room = matrixClient.getRoom(state.roomId);\n    if (!room) {\n        return;\n    }\n    const memberList = state.getMembers();\n    console.log(room.name);\n    console.log(Array(room.name.length + 1).join(\"=\")); // underline\n    for (var i = 0; i < memberList.length; i++) {\n        console.log(\"(%s) %s\", memberList[i].membership, memberList[i].name);\n    }\n});\n\nmatrixClient.startClient();\n```\n\n----------------------------------------\n\nTITLE: Improving Power Level Types and Functions\nDESCRIPTION: Enhances TypeScript types for power levels content and the 'hasSufficientPowerLevelFor' function to provide better type safety.\n\nLANGUAGE: typescript\nCODE:\n```\nImprove types for `IPowerLevelsContent` and `hasSufficientPowerLevelFor`\n```\n\n----------------------------------------\n\nTITLE: Introducing Membership TypeScript Type\nDESCRIPTION: Creates a TypeScript type for room membership states, improving type safety when dealing with member states in rooms.\n\nLANGUAGE: typescript\nCODE:\n```\nIntroduce Membership TS type (take 2)\n```\n\n----------------------------------------\n\nTITLE: Type Improvements for SendEvent Method\nDESCRIPTION: Enhances TypeScript type definitions for the 'sendEvent' method to provide better type checking and developer experience.\n\nLANGUAGE: typescript\nCODE:\n```\nImprove types for `sendEvent`\n```\n\n----------------------------------------\n\nTITLE: Type Improvements for SendStateEvent Method\nDESCRIPTION: Enhances TypeScript type definitions for the 'sendStateEvent' method to provide better type checking and developer experience.\n\nLANGUAGE: typescript\nCODE:\n```\nImprove types for `sendStateEvent`\n```\n\n----------------------------------------\n\nTITLE: Handling Authenticated Media Downloads\nDESCRIPTION: Demonstrates how to download media with authentication headers for servers implementing MSC3916. This is needed when servers require authentication for accessing media content.\n\nLANGUAGE: javascript\nCODE:\n```\nconst downloadUrl = client.mxcUrlToHttp(\n    /*mxcUrl=*/ \"mxc://example.org/abc123\", // the MXC URI to download/thumbnail, typically from an event or profile\n    /*width=*/ undefined, // part of the thumbnail API. Use as required.\n    /*height=*/ undefined, // part of the thumbnail API. Use as required.\n    /*resizeMethod=*/ undefined, // part of the thumbnail API. Use as required.\n    /*allowDirectLinks=*/ false, // should generally be left `false`.\n    /*allowRedirects=*/ true, // implied supported with authentication\n    /*useAuthentication=*/ true, // the flag we're after in this example\n);\nconst img = await fetch(downloadUrl, {\n    headers: {\n        Authorization: `Bearer ${client.getAccessToken()}`,\n    },\n});\n// Do something with `img`.\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Stored Room Timeline Events\nDESCRIPTION: Accesses the client's memory store to iterate through all stored timeline events in all rooms. This shows how to access historical events that have been cached by the client.\n\nLANGUAGE: javascript\nCODE:\n```\nObject.keys(client.store.rooms).forEach((roomId) => {\n    client.getRoom(roomId).timeline.forEach((t) => {\n        console.log(t.event);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Object Property Key Naming in TypeScript\nDESCRIPTION: Demonstrates the preferred ways to define object property keys in TypeScript, prioritizing non-string keys when possible, using literal strings when required, and computed properties with constants.\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    property: \"value\",\n    \"m.unavoidable\": true,\n    [EventType.RoomMessage]: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Parameter Handling in TypeScript\nDESCRIPTION: Shows the recommended approach for handling potentially missing parameters in TypeScript functions, using a type like Optional<T> instead of the optional parameter syntax (?) when appropriate.\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doThingWithRoom(\n    thing: string,\n    room: Optional<string>, // require the caller to specify\n) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Function Type Definition in TypeScript\nDESCRIPTION: Demonstrates the preferred arrow function syntax for declaring callback functions in TypeScript interfaces, showing proper parameter and return type annotations.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Test {\n    myCallback: (arg: string) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: String Declaration in TypeScript\nDESCRIPTION: Demonstrates the preferred string declaration styles in TypeScript, using double quotes for simple strings and single quotes when the string contains double quotes.\n\nLANGUAGE: typescript\nCODE:\n```\nconst example1 = \"simple string\";\nconst example2 = 'string containing \"double quotes\"';\n```\n\n----------------------------------------\n\nTITLE: Conditional Statement Formatting in TypeScript\nDESCRIPTION: Demonstrates the preferred formatting for conditional statements in TypeScript. Single-line statements should be written without curly braces when the body is on the same line as the statement.\n\nLANGUAGE: typescript\nCODE:\n```\nif (x) doThing();\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Type Definition in TypeScript\nDESCRIPTION: Demonstrates the required syntax for variable declarations that don't receive an initial value. In such cases, the type must be explicitly defined.\n\nLANGUAGE: typescript\nCODE:\n```\nlet errorMessage: Optional<string>;\n```\n\n----------------------------------------\n\nTITLE: Object Declaration Shorthand in TypeScript\nDESCRIPTION: Shows different ways to use shorthand property declarations in TypeScript objects, including mixing shorthand and explicit property assignments in both multi-line and single-line formats.\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    room,\n    prop: this.prop,\n}\n// ... or ...\n{ room, prop: this.prop }\n```\n\n----------------------------------------\n\nTITLE: Migrating from initCrypto to initLegacyCrypto in MatrixClient\nDESCRIPTION: Code showing the breaking change where MatrixClient.initCrypto() has been renamed to MatrixClient.initLegacyCrypto() in preparation for the removal of Olm. Applications using the crypto functionality need to update their code to use the new method name.\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nmatrixClient.initCrypto();\n\n// After:\nmatrixClient.initLegacyCrypto();\n```\n\n----------------------------------------\n\nTITLE: Using CryptoApi.getBackupInfo instead of MatrixClient.getKeyBackupVersion\nDESCRIPTION: Example of migrating from the deprecated MatrixClient.getKeyBackupVersion method to the new CryptoApi.getBackupInfo method for retrieving information about key backups.\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated approach\nconst backupInfo = await client.getKeyBackupVersion();\n\n// New approach\nconst backupInfo = await client.getCrypto().getBackupInfo();\n```\n\n----------------------------------------\n\nTITLE: Using CryptoApi.encryptToDeviceMessages instead of Crypto.encryptAndSendToDevices\nDESCRIPTION: Example showing the migration from the deprecated Crypto.encryptAndSendToDevices method to the new CryptoApi.encryptToDeviceMessages method for encrypting messages sent to specific devices.\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated approach\nawait client.crypto.encryptAndSendToDevices(userDeviceMap, payload);\n\n// New approach\nconst encryptedContent = await client.getCrypto().encryptToDeviceMessages(userDeviceMap, payload);\n// You need to send the encrypted content separately\n```\n\n----------------------------------------\n\nTITLE: Exporting ES6 Instead of ES5 in Matrix JS SDK\nDESCRIPTION: A breaking change where the SDK now exports ES6 code instead of ES5. Users targeting environments that don't support ES6 will need to transpile the SDK to a suitable dialect.\n\nLANGUAGE: javascript\nCODE:\n```\nThe js-sdk node module now exports ES6 rather than ES5. If you\nwish to supports target that aren't compatible with ES6, you\nwill need to transpile the js-sdk to a suitable dialect.\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Removing Methods Argument from Verification API\nDESCRIPTION: A breaking change that removes an argument from the verification methods API. This change was introduced in version 5.0.0-rc.1.\n\nLANGUAGE: javascript\nCODE:\n```\nRemove methods argument to verification\n```\n\n----------------------------------------\n\nTITLE: Adding Alt Aliases Room Method in Matrix JS SDK\nDESCRIPTION: Code changes for implementing the alt_aliases endpoint for room functionality. This adds a new method to handle room alternate aliases according to updates in the Matrix specification.\n\nLANGUAGE: javascript\nCODE:\n```\nadd method for new /aliases endpoint\n```\n\n----------------------------------------\n\nTITLE: Updating OIDC Discovery Implementation\nDESCRIPTION: Updates the implementation of MSC2965 OpenID Connect Discovery, improving compatibility and functionality with OIDC providers.\n\nLANGUAGE: javascript\nCODE:\n```\nUpdate MSC2965 OIDC Discovery implementation\n```\n\n----------------------------------------\n\nTITLE: Decoding ID Token for OIDC Authentication\nDESCRIPTION: Exports a function for decoding ID tokens in OpenID Connect authentication flows while simplifying related types.\n\nLANGUAGE: typescript\nCODE:\n```\nSimplify OIDC types \\& export `decodeIdToken`\n```\n\n----------------------------------------\n\nTITLE: Device Dehydration v2 Support\nDESCRIPTION: Adds support for version 2 of device dehydration, a feature for Element R that enables device recovery and synchronization.\n\nLANGUAGE: javascript\nCODE:\n```\nAdd support for device dehydration v2 (Element R)\n```\n\n----------------------------------------\n\nTITLE: Using Storage Persistence API in Browser Environments\nDESCRIPTION: Example of the navigator.storage.persist API mentioned in the document that requests persistent storage privileges from the browser. This prevents stored data from being automatically deleted during cache eviction.\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.storage.persist()\n```\n\n----------------------------------------\n\nTITLE: Checking Storage Estimation with Browser API\nDESCRIPTION: Example of the navigator.storage.estimate API that retrieves information about storage usage and available quota. Firefox returns 0 for usage if a site is persisted.\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.storage.estimate()\n```\n\n----------------------------------------\n\nTITLE: Monitoring Crypto Migration Progress in matrix-js-sdk\nDESCRIPTION: Event listener to track the progress of migration from legacy crypto to Rust crypto. The migration is complete when both progress and total values are -1.\n\nLANGUAGE: javascript\nCODE:\n```\n// When progress === total === -1, the migration is finished.\nmatrixClient.on(CryptoEvent.LegacyCryptoStoreMigrationProgress, (progress, total) => {\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for matrix-js-sdk\nDESCRIPTION: Commands for setting up the development environment, building the SDK, running tests, and performing linting. These steps are essential for contributing to the matrix-js-sdk project.\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn install\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn lint\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for matrix-js-sdk in JavaScript\nDESCRIPTION: Commands to generate and serve the TypeDoc-based API documentation for the matrix-js-sdk library. This builds the documentation and then serves it using Python's HTTP server.\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn gendoc\n$ cd docs\n$ python -m http.server 8005\n```\n\n----------------------------------------\n\nTITLE: Handling M_MAX_DELAY_EXCEEDED errors in Matrix API requests\nDESCRIPTION: Code example showing how the library now handles M_MAX_DELAY_EXCEEDED errors that may be returned by the Matrix server when a request exceeds the maximum allowed delay.\n\nLANGUAGE: javascript\nCODE:\n```\n// The library now automatically handles M_MAX_DELAY_EXCEEDED errors\ntry {\n  await client.someApiCall();\n} catch (error) {\n  if (error.errcode === \"M_MAX_DELAY_EXCEEDED\") {\n    // The request exceeded the maximum allowed delay\n    // The library will handle this appropriately\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MatrixRTC timers when joining a room session\nDESCRIPTION: Example showing how to configure MatrixRTC timers when calling joinRoomSession() to customize the behavior of real-time communication sessions in Matrix.\n\nLANGUAGE: javascript\nCODE:\n```\n// Joining a room session with custom timer configuration\nawait client.joinRoomSession(roomId, {\n  timers: {\n    delayedLeaveMs: 30000, // 30 seconds\n    memberTimeout: 60000,  // 60 seconds\n    // Other timer configurations\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Rust Crypto with Direct Store Key\nDESCRIPTION: Function update allowing applications to pass a store key directly when initializing Rust crypto functionality, enhancing flexibility in key management.\n\nLANGUAGE: javascript\nCODE:\n```\ninitRustCrypto: allow app to pass in the store key directly\n```\n\n----------------------------------------\n\nTITLE: Preserving ESM for Async Imports\nDESCRIPTION: Change to preserve ECMAScript Modules format to ensure async imports work correctly in the Matrix JavaScript SDK.\n\nLANGUAGE: javascript\nCODE:\n```\nPreserve ESM for async imports to work correctly\n```\n\n----------------------------------------\n\nTITLE: Modernizing Window Crypto Access\nDESCRIPTION: Updates how the SDK accesses the Web Crypto API through window.crypto, modernizing constants and access patterns.\n\nLANGUAGE: javascript\nCODE:\n```\nModernize window.crypto access constants\n```\n\n----------------------------------------\n\nTITLE: Adding Test Utility for Decrypting Events\nDESCRIPTION: Introduces a new test helper function called 'decryptExistingEvent' to assist with testing event decryption functionality.\n\nLANGUAGE: javascript\nCODE:\n```\nAdd new `decryptExistingEvent` test helper\n```\n\n----------------------------------------\n\nTITLE: Creating Verification Methods Enum\nDESCRIPTION: Introduces a new enumeration for verification methods to standardize and type-check verification method references throughout the SDK.\n\nLANGUAGE: typescript\nCODE:\n```\nAdd new enum for verification methods.\n```\n\n----------------------------------------\n\nTITLE: Adding Test Utilities in New Entrypoint\nDESCRIPTION: Creates a new entry point in the SDK specifically for test utilities, allowing easier access to testing helpers.\n\nLANGUAGE: javascript\nCODE:\n```\nAdd some test utils in a new entrypoint\n```\n\n----------------------------------------\n\nTITLE: Exporting Media Event Format Types\nDESCRIPTION: Exports TypeScript types that describe all specification-compliant media event formats, enabling better type checking for media-related code.\n\nLANGUAGE: typescript\nCODE:\n```\nExport types describing all specced media event formats\n```\n\n----------------------------------------\n\nTITLE: Adding Room Mention Push Rule\nDESCRIPTION: Adds a new push rule for room mentions to the default override rules, improving notification handling for room-wide mentions.\n\nLANGUAGE: javascript\nCODE:\n```\nAdd `.m.rule.is_room_mention` push rule to DEFAULT\\_OVERRIDE\\_RULES\n```\n\n----------------------------------------\n\nTITLE: Making ContentLoaded Optional for Widget Client\nDESCRIPTION: Updates the widget client to make sending the ContentLoaded event optional, providing more flexibility in widget implementation.\n\nLANGUAGE: javascript\nCODE:\n```\nMake sending ContentLoaded optional for a widgetClient\n```\n\n----------------------------------------\n\nTITLE: Creating a CallFeed instance with ICallFeedOpts in JavaScript\nDESCRIPTION: Example of constructing a new CallFeed object passing ICallFeedOpts as required by the breaking change in v15.0.0-rc.1. The options object includes the client parameter.\n\nLANGUAGE: javascript\nCODE:\n```\nconst callFeed = new CallFeed({client\n```\n\n----------------------------------------\n\nTITLE: Updating Avatar URL Method for Room Members in Matrix SDK\nDESCRIPTION: Example showing the migration from using MatrixClient.getAvatarUrlForMember to RoomMember.getAvatarUrl in version 0.3.0. The new method requires supplying the homeserver URL from MatrixClient.getHomeserverUrl().\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nvar url = client.getAvatarUrlForMember(member, width, height, resize, allowDefault)\n// after\nvar url = member.getAvatarUrl(client.getHomeserverUrl(), width, height, resize, allowDefault)\n```\n\n----------------------------------------\n\nTITLE: Updating Avatar URL Method for Rooms in Matrix SDK\nDESCRIPTION: Example showing the migration from using MatrixClient.getAvatarUrlForRoom to Room.getAvatarUrl in version 0.3.0. The new method requires supplying the homeserver URL from MatrixClient.getHomeserverUrl().\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nvar url = client.getAvatarUrlForRoom(room, width, height, resize, allowDefault)\n// after\nvar url = room.getAvatarUrl(client.getHomeserverUrl(), width, height, resize, allowDefault)\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Method Name Correction in Matrix SDK\nDESCRIPTION: A regular expression to correct the method name from Room.getMembersWithMemership to Room.getMembersWithMembership in version 0.3.0 documentation.\n\nLANGUAGE: regex\nCODE:\n```\ns/Room.getMembersWithMemnership/Room.getMembersWithMembership/g\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Example in PR Description\nDESCRIPTION: Shows how to add a longer, more detailed description of a change for the changelog using the Notes annotation in a pull request description.\n\nLANGUAGE: markdown\nCODE:\n```\nNotes: Fix a bug (https://github.com/matrix-org/notaproject/issues/123) where the 'Herd' button would not herd more than 8 Llamas if the moon was in the waxing gibbous phase\n```\n\n----------------------------------------\n\nTITLE: Suppressing Changelog Entry Example\nDESCRIPTION: Demonstrates how to indicate that a PR should not have an entry in the user-facing changelog by using 'Notes: none' in the PR description.\n\nLANGUAGE: markdown\nCODE:\n```\nNotes: none\n```\n\n----------------------------------------\n\nTITLE: Project-Specific Changelog Entry Example\nDESCRIPTION: Shows how to specify that a changelog entry should appear in a downstream project's changelog, such as element-web or element-desktop.\n\nLANGUAGE: markdown\nCODE:\n```\nNotes: Fix a bug where the `herd()` function would only work on Tuesdays\nelement-web notes: Fix a bug where the 'Herd' button only worked on Tuesdays\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Changelog Entry Example\nDESCRIPTION: Example of how to document a breaking change in the PR description, including migration instructions for developers.\n\nLANGUAGE: markdown\nCODE:\n```\nNotes: Remove legacy `Camelopard` class. `Giraffe` should be used instead.\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin (DCO) Text\nDESCRIPTION: The full text of the Developer Certificate of Origin (DCO) that contributors must agree to when submitting code to the project.\n\nLANGUAGE: markdown\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: DCO Sign-off Line Example\nDESCRIPTION: The format for including the DCO sign-off line in commit messages or pull request comments to certify agreement with the DCO.\n\nLANGUAGE: markdown\nCODE:\n```\nSigned-off-by: Your Name <your@email.example.org>\n```\n\n----------------------------------------\n\nTITLE: Git Command for DCO Mass Sign-off\nDESCRIPTION: A Git command to mass sign-off commits in a pull request if you forgot to do so initially, available for Git 2.17+.\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase --signoff origin/develop\n```\n\n----------------------------------------\n\nTITLE: Jest Test Structure Template in TypeScript for matrix-js-sdk\nDESCRIPTION: A template showing the recommended structure for Jest tests in the matrix-js-sdk project. It demonstrates how to organize tests for both components and utility functions, including lifecycle hooks and proper test naming conventions.\n\nLANGUAGE: typescript\nCODE:\n```\n// Describe the class, component, or file name.\ndescribe(\"FooComponent\", () => {\n    // all test inspecific variables go here\n\n    beforeEach(() => {\n        // exclude if not used.\n    });\n\n    afterEach(() => {\n        // exclude if not used.\n    });\n\n    // Use \"it should...\" terminology\n    it(\"should call the correct API\", async () => {\n        // test-specific variables go here\n        // function calls/state changes go here\n        // expectations go here\n    });\n});\n\n// If the file being tested is a utility class:\ndescribe(\"foo-utils\", () => {\n    describe(\"firstUtilFunction\", () => {\n        it(\"should...\", async () => {\n            // ...\n        });\n    });\n\n    describe(\"secondUtilFunction\", () => {\n        it(\"should...\", async () => {\n            // ...\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Building and Hosting Matrix SDK VoIP Example\nDESCRIPTION: Commands to build the Matrix JavaScript SDK and host the VoIP example folder using Python's SimpleHTTPServer on port 8003. After execution, the example can be accessed at http://localhost:8003.\n\nLANGUAGE: bash\nCODE:\n```\n $ npm run build\n $ cd examples/voip\n $ python -m SimpleHTTPServer 8003\n```\n\n----------------------------------------\n\nTITLE: Exporting Matrix SDK Crypto Store from IndexedDB\nDESCRIPTION: An async function that extracts all data from the Matrix SDK's crypto store in IndexedDB. The function opens the specified database, iterates through all object stores, retrieves all entries, and returns them in a structured format. The result is then saved as a JSON file for analysis.\n\nLANGUAGE: javascript\nCODE:\n```\nasync function exportIndexedDb(name) {\n    const db = await new Promise((resolve, reject) => {\n        const dbReq = indexedDB.open(name);\n        dbReq.onerror = reject;\n        dbReq.onsuccess = () => resolve(dbReq.result);\n    });\n\n    const storeNames = db.objectStoreNames;\n    const exports = {};\n    for (const store of storeNames) {\n        exports[store] = [];\n        const txn = db.transaction(store, \"readonly\");\n        const objectStore = txn.objectStore(store);\n        await new Promise((resolve, reject) => {\n            const cursorReq = objectStore.openCursor();\n            cursorReq.onerror = reject;\n            cursorReq.onsuccess = (event) => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    const entry = { value: cursor.value };\n                    if (!objectStore.keyPath) {\n                        entry.key = cursor.key;\n                    }\n                    exports[store].push(entry);\n                    cursor.continue();\n                } else {\n                    resolve();\n                }\n            };\n        });\n    }\n    return exports;\n}\n\nwindow.saveAs(\n    new Blob([JSON.stringify(await exportIndexedDb(\"matrix-js-sdk:crypto\"), null, 2)], {\n        type: \"application/json;charset=utf-8\",\n    }),\n    \"dump.json\",\n);\n```"
  }
]