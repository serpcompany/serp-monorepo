[
  {
    "owner": "godspeedsystems",
    "repo": "gs-documentation",
    "content": "TITLE: Defining a Simple 'Hello World' Workflow in YAML\nDESCRIPTION: Defines a basic workflow with a single task that uses the built-in `com.gs.return` function to return a static string \"Hello World!\". This illustrates the minimal structure of a workflow including `id`, `summary`, and `tasks`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/workflow-dsl.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: hello_world_function\nsummary: Call an API and return the task message\ntasks:\n    - id: return_fn_step1\n      description: add a message property\n      fn: com.gs.return #It's a inbuilt function that returns args.\n      args: \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Event Endpoints in Godspeed Meta-Framework (YAML)\nDESCRIPTION: This snippet defines an HTTP GET event endpoint in Godspeed's event schema YAML format. It specifies the function handler, authentication requirement (authn: false), and request parameters for the endpoint. Required dependencies are the Godspeed framework and placement of the YAML in the project's src/events directory. Inputs include HTTP GET requests to /helloworld with optional query parameter 'name'; output is determined by the referenced function. All event API endpoints are described declaratively in this manner, supporting Swagger documentation generation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/walkthrough.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"http.get./helloworld\":\n  fn: helloworld # event handler function - the logic resides here\n  authn: false\n  params: #same as Swagger params.\n    - name: name\n      in: query\n      schema:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Event Source URI Structures Across EventSources in Godspeed (YAML)\nDESCRIPTION: This snippet highlights the first-line format for event URIs depending on the event source type supported by the Godspeed Meta-Framework. The structure differs for HTTP, Kafka, and Cron event sources. Required dependencies: Godspeed framework with at least one relevant plugin. These URI definitions enable universal schema-driven event declarations regardless of the underlying protocol, with inputs and outputs being determined by the subsequent YAML configuration and handler logic.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/walkthrough.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.{method}.{url}: # http event URI - same for Express, Fastify and Graphql plugins\nkafka.{topic}.{group_id}: # kafka event URI\ncron.* * * * *.Asia/Kolkata: # cron event\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed CLI via npm\nDESCRIPTION: Command to install the Godspeed CLI globally using npm. This allows you to use Godspeed commands from any directory in your terminal.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @godspeedsystems/godspeed\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed CLI using npm\nDESCRIPTION: This command installs the Godspeed CLI globally on your system, allowing you to use Godspeed commands for project setup and management. It requires Node.js and npm to be installed on your machine.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @mindgrep/godspeed\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication with Express Eventsource (YAML)\nDESCRIPTION: This YAML snippet configures JWT authentication for all endpoints under an Express eventsource in Godspeed. Dependencies include an \"express\"-type eventsource and valid configuration variables for the issuer, audience, and secret. The configuration enables JWT authentication for all routes unless overridden, and expects the referenced variables to be defined in project configuration. Outputs are secure, authenticated endpoints on the specified event source.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/walkthrough.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\\njwt:\\n  issuer: <%config.issuer%> \\n  audience: <%config.audience%> \\n  secretOrKey: <%config.secret%>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Workflow with Mappings\nDESCRIPTION: Example of accessing mappings within a TypeScript workflow for error handling.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/mappings.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, GSStatus } from '@godspeedsystems/core';\n\nexport default async function(ctx: GSContext, args: any) {\n    const { mappings, childLogger, inputs } = ctx;\n      let error: any = {};\n        error.code = args?.code; \n        error.message = args?.message;\n            \n            if (!error.code) {\n                error.code = \"E001\";\n            } \n            if (!error.message) {\n                error.message = mappings.error_codes.codes[error.code];\n            }\n        return new GSStatus(false, 400, undefined, error.message, undefined);\n      }\n```\n\n----------------------------------------\n\nTITLE: Using Godspeed CLI to Show Help - Bash\nDESCRIPTION: This bash command runs the Godspeed CLI tool with the '--help' flag to display a list of available commands and usage information. No parameters are required, but the user must have the Godspeed CLI installed and available in their PATH. Outputs a help text in the console describing supported CLI arguments and plugin options. This is useful for new users seeking command references.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed --help\\n\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Event Schema in YAML for Godspeed Framework\nDESCRIPTION: This snippet shows an example of an HTTP event schema in Godspeed. It includes the event handler, request validation, input parameters, request body schema, and response schemas for different HTTP status codes. This schema is specifically tailored for HTTP-based events.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-schema.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.get./greet: #The initial line depicts a fusion of the event, the employed method, and the path associated with the event.\n  fn: function_greet #The 'fn' key receives the function name located in 'src/functions' and forwards the accompanying parameters.\n  on_request_validation_error: on_request_validation\n  params: #It is also possible to define inputs such as 'params,' 'body,' 'headers,' and 'query parameters.'\n    - name: greet_message\n      in: query\n      required: true\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            name: \n              type: string\n  responses:\n    500:\n      content:\n        application/json: \n          schema:\n            type: object\n    200:\n      content:\n        application/json:\n          schema:\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Sample Prisma Schema for PlanetScale\nDESCRIPTION: Provides a complete example Prisma schema configured for use with PlanetScale. It includes the `datasource` block pointing to PlanetScale, a `generator` block to configure the Prisma Client JS output, and sample `User` and `Post` models with a one-to-many relationship.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PlanetScale.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"planetscale\"\n  url      = env(\"DATABASE_URL\")\n}\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./prisma-clients/planetscale\"\n  previewFeatures = [\"metrics\"]\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Authorization per Endpoint (YAML)\nDESCRIPTION: This snippet customizes authorization for a single endpoint by specifying a distinct authorization function ('com.biz.user_is_allowed_for_this_event'). The function must be implemented and handle specific per-event access logic. This overrides the eventsource-level setting, allowing for granular policies and constraints on a per-route basis.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/walkthrough.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"http.get./helloworld\":\\n  fn: helloworld\\n  authz: com.biz.user_is_allowed_for_this_event \n```\n\n----------------------------------------\n\nTITLE: Create a New Godspeed Project\nDESCRIPTION: Use the godspeed create command to set up a new project with the desired project name. The command initializes the project structure and installs required plugins.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed create my_new_project\n```\n\n----------------------------------------\n\nTITLE: Workflow for Uploading Files with Same File Key\nDESCRIPTION: This workflow handles file uploads when all files use the same file key. It uses the com.gs.http function to send the uploaded files to an external HTTP endpoint with retry capabilities configured.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: upload file\n  id: upload_file\n  tasks:\n    - id: step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      description: upload docfileuments\n      fn: com.gs.http\n      args:\n        datasource: httpbin\n        params:\n        file_key: files\n        files: <% inputs.files %>\n        config:\n          url : /v1/documents\n          method: post\n\n      retry:\n        max_attempts: 5\n        type: constant\n        interval: PT15M\n```\n\n----------------------------------------\n\nTITLE: Configuring Union Dependencies in Godspeed (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to define 'Union from' dependencies in `configFolder/schema/union.toml`. It shows examples for automatically aggregating distinct speakers and topics for a conference from linked talks, calculating grandchildren for a person, and computing unique file types within a nested folder structure. The '+' prefix indicates a union operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/model-setup.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[conference]\nspeakers = '+talks.speaker' #As soon as a talk is linked to a conferece, or an already linked talk gets linked to a speaker, *the talk’s speaker is also linked to the conference as one of its speakers, if not already linked before*. Vice versa happens if the talk is unlinked to its speaker, or the talk is removed from the conference\ntopics = '+talks.topics' #As soon as a talk is linked to an conference, or a topic is set to an already linked talk, the talk’s topic is also added to the conference as one of its topics, if not already there. Vice versa happens if the talk is unliked to the conference, or the topic is removed from the talk.\n[‘person’]\ngrandChildren = +‘children.children’ #Whenever a person’s child gets a new child, the new child gets added to the person’s grandchildren\n[‘folder’]\nfileTypes = ‘+childFolders.fileTypes + childFiles.type’ #Calculate union of all file types existing in the entire folder tree (recursively). Anytime, any file gets added to any child folder in this tree, the type of that file gets unioned with the list of fileTypes of that child folder, and all its parent folders up in the hierarchy.\n```\n\n----------------------------------------\n\nTITLE: Declaring an Event Handler Workflow with Inline Scripting in Godspeed YAML DSL\nDESCRIPTION: This YAML snippet demonstrates a custom event handler workflow using the Godspeed YAML DSL, defining a sequence of tasks for a given function (id: helloworld). Within 'tasks', each task can invoke built-in or user-defined functions, here using 'com.gs.return' to return a formatted result. The inline scripting syntax (with <%'...'%>) allows dynamic data creation from the input. The required context is that the event schema should reference this YAML handler. Inputs are derived from the incoming event payload; the output is a result object defining data, HTTP code, success status, and custom headers. Limitations include absence of static typing and autocompletion as compared to TypeScript implementations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/walkthrough.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: helloworld\ntasks:\n  - id: first_task\n    fn: com.gs.return\n    args:\n      data: <%'Its working! ' + inputs.body.name%>\n      code: 200\n      success: true #by default success is assumed to be true\n      headers: \n        custom_response_header: 'something'\n```\n\n----------------------------------------\n\nTITLE: Describing Workflow Logic in Godspeed - Workflow Steps - YAML\nDESCRIPTION: This YAML workflow snippet for Godspeed describes a simple task that greets the user by extracting 'name' from the request body and calling a core function to return a mapped value. The workflow is identified by id 'greet_user' and the task uses 'com.gs.return'. Parameters and data flow are defined using the Godspeed templating syntax ('<% inputs.body.name %>'). This snippet is intended to be included in the workflow directory for runtime execution.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/create-api.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Workflow to greet the user by name\nid: greet_user\ndescription: Workflow to greet the user by name\ntasks:\n  - id: testing_inputs\n    fn: com.gs.return\n    args:\n      name: <% inputs.body.name %>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Express Eventsource in TypeScript\nDESCRIPTION: Provides the TypeScript implementation for a custom Express eventsource by extending `GSEventSource`. The `initClient` method sets up an Express application, configures middleware like `body-parser`, `express-fileupload`, optional JWT authentication via `passport`, and optional Prometheus metrics. The `subscribeToEvent` method dynamically creates Express routes based on event definitions, handles authentication, processes incoming requests by creating `GSCloudEvent` objects, and sends back responses. The `createGSEvent` method transforms an Express request object into a standardized `GSCloudEvent`. Constants like `SourceType`, `Type`, `CONFIG_FILE_NAME`, and `DEFAULT_CONFIG` are also exported.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PlainObject, GSActor, GSCloudEvent, GSStatus, GSEventSource } from \"@godspeedsystems/core\";\nimport express from \"express\";\nimport bodyParser from 'body-parser';\nimport _ from \"lodash\";\nimport promClient from '@godspeedsystems/metrics';\n//@ts-ignore\nimport promMid from '@mindgrep/express-prometheus-middleware';\nimport passport from \"passport\";\nimport fileUpload from \"express-fileupload\"\nimport { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';\n\nexport default class EventSource extends GSEventSource {\n  async initClient(): Promise<PlainObject> {\n    const app = express();\n    const {\n      port = 3000,\n      request_body_limit = 50 * 1024 * 1024,\n      file_size_limit = 50 * 1024 * 1024,\n      jwt: jwtConfig\n    } = this.config;\n\n    app.use(bodyParser.urlencoded({ extended: true, limit: request_body_limit }));\n    app.use(bodyParser.json({ limit: file_size_limit }));\n    app.use(\n      fileUpload({\n        useTempFiles: true,\n        //@ts-ignore\n        limits: { fileSize: file_size_limit },\n      })\n    );\n  \n    if (jwtConfig) {\n      app.use(passport.initialize());\n      passport.use(\n        new JwtStrategy(\n          {\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: jwtConfig.secretOrKey,\n            ignoreExpiration: true,\n            jsonWebTokenOptions: {\n              audience: jwtConfig.audience,\n              issuer: jwtConfig.issuer,\n            },\n          },\n          function (jwtPayload, done) {\n            return done(null, jwtPayload);\n          },\n        ),\n      );\n    };\n\n    app.listen(port);\n\n    if (process.env.OTEL_ENABLED == 'true') {\n      app.use(\n        promMid({\n          metricsPath: false,\n          collectDefaultMetrics: true,\n          requestDurationBuckets: promClient.exponentialBuckets(0.2, 3, 6),\n          requestLengthBuckets: promClient.exponentialBuckets(512, 2, 10),\n          responseLengthBuckets: promClient.exponentialBuckets(512, 2, 10),\n        })\n      );\n    }\n\n    return app;\n  }\n\n  private authnHOF(authn: boolean) {\n    return (req: express.Request, res: express.Response, next: express.NextFunction) => {\n      if (authn) {\n        return passport.authenticate('jwt', { session: false })(req, res, next)\n      } else {\n        next();\n      }\n    };\n  };\n\n  subscribeToEvent(eventRoute: string, eventConfig: PlainObject, processEvent: (event: GSCloudEvent, eventConfig: PlainObject) => Promise<GSStatus>, event?: PlainObject): Promise<void> {\n    const routeSplit = eventRoute.split('.');\n    const httpMethod: string = routeSplit[1];\n    const endpoint = routeSplit[2].replace(/{(.*?)}/g, ':$1');\n    const app: express.Express = this.client as express.Express;\n    //@ts-ignore\n    app[httpMethod](endpoint, this.authnHOF(event.authn), async (req: express.Request, res: express.Response) => {\n      const gsEvent: GSCloudEvent = EventSource.createGSEvent(req, endpoint)\n      const status: GSStatus = await processEvent(gsEvent, { key: eventRoute, ...eventConfig });\n      res\n        .status(status.code || 200)\n        // if data is a integer, it takes it as statusCode, so explicitly converting it to string\n        .send(Number.isInteger(status.data) ? String(status.data) : status.data);\n    });\n    return Promise.resolve();\n  }\n\n  static createGSEvent(req: express.Request, endpoint: string) {\n    const reqProp = _.omit(req, [\n      '_readableState',\n      'socket',\n      'client',\n      '_parsedUrl',\n      'res',\n      'app'\n    ]);\n    const reqHeaders = _.pick(req, ['headers']);\n    let data = { ...reqProp, ...reqHeaders };\n\n    const event: GSCloudEvent = new GSCloudEvent(\n      'id',\n      endpoint,\n      new Date(),\n      'http',\n      '1.0',\n      data,\n      'REST',\n      new GSActor('user'),\n      {}\n    );\n\n    return event;\n  }\n}\n\nconst SourceType = 'ES';\nconst Type = 'express'; // this is the loader file of the plugin, So the final loader file will be `types/${Type.js}`\nconst CONFIG_FILE_NAME = 'http'; // in case of event source, this also works as event identifier, and in case of datasource works as datasource name\nconst DEFAULT_CONFIG = { port: 3000, docs: { endpoint: '/api-docs' } };\n\nexport  {\n  EventSource,\n  SourceType,\n  Type,\n  CONFIG_FILE_NAME,\n  DEFAULT_CONFIG\n};\n\n```\n\n----------------------------------------\n\nTITLE: Install Godspeed Meta-Framework Globally\nDESCRIPTION: Command to install the Godspeed Meta-Framework globally using npm. The command should be executed in a terminal where npm is available.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @godspeedsystems/godspeed\n```\n\n----------------------------------------\n\nTITLE: Defining API Event with OpenAPI Schema - Godspeed HTTP EventSource - YAML\nDESCRIPTION: This YAML snippet defines a POST HTTP event for the '/greet' endpoint in the Godspeed framework. It specifies the expected request body (JSON containing a 'name'), describes possible responses (with status codes 200 and 400), and demonstrates OpenAPI-style schema definitions for auto-generation of documentation (including Swagger UI). No external dependencies are needed except for a functional Godspeed project setup. The key parameters are the event key, request body schema, and response schemas, ensuring data validation and clear API contract.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/create-api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./greet:\n  fn: greet-user\n  summary: Greet a user\n  description: Accepts a name in req body and returns a greeting\n  authn: false\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            name:\n              type: string\n              description: Name of the user to greet\n  responses: # JSON-Schema of API responses set as per Swagger's standard responses syntax\n    200:\n      description: Greeting message\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                example: 'Hello, John!'\n    400:\n      description: Bad request if name is missing\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                type: string\n                example: Invalid request. 'name' is required.\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Task-Level Error Handling in YAML\nDESCRIPTION: Demonstrates configuring `on_error` within a specific task (`task_level_1`). The task is designed to potentially fail (by returning `success: false` via `com.gs.transform`). Its `on_error` block specifies `continue: false` to halt execution and defines a custom response (`code`, `data`) to override the task's default output upon failure. The second task (`task_level_2`) will not execute if the first one fails.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/workflow-dsl.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Testing on_error at task level\ntasks:\n  - id: task_level_1 \n    fn: com.gs.transform # if we use this args in transform function they will set as response \n    args: \n      success: false\n      code: 500\n      data: \"task 1 executed\"\n    on_error: \n      continue: false \n      response:\n        code: 400\n        data: \"error occured\"\n    \n  - id: task_level_2\n    fn: com.gs.return\n    args: \"task 2 executed\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Standardized Response Object using GSStatus in JavaScript\nDESCRIPTION: Illustrates how to create a standardized response object using the `GSStatus` class in JavaScript. This object includes success status (boolean), HTTP code (number), message (string, optional), data (any, optional), and headers (object, optional), typically returned after a function or task execution to provide consistent output.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/workflow-dsl.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nresponse = new GSStatus(true, 200, undefined, responseData, undefined);\n```\n\n----------------------------------------\n\nTITLE: User Login Workflow Implementation in TypeScript with JWT\nDESCRIPTION: This workflow function in TypeScript handles user login by verifying credentials, and if valid, generates a JWT token. It uses the jsonwebtoken library and accesses JWT configuration from the context for token creation. It returns appropriate status and messages based on authentication success or failure.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-authentication.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSCloudEvent, GSContext, PlainObject, GSStatus, logger } from \"@godspeedsystems/core\";\nimport jwt from 'jsonwebtoken';\nexport default function (ctx: GSContext, args: PlainObject) {\n    const {\n        inputs: {\n            data: {\n              body\n            }\n        }, \n    \n    }= ctx;\n  logger.info(\"user info received %o\", body);\n  // Dummy user validation (replace with your authentication logic)\n  if (body.username === 'user' && body.password === 'password') {\n    // Create a JWT token\n    const token = jwt.sign(\n      { sub: '1234567890', name: 'John Doe', role: 'user' },  // Payload\n      ctx.config.jwtSecret,  // access Secret key from config\n      { expiresIn: '1h', issuer: ctx.config.issuer, audience: ctx.config.audience }  // jwt Options\n    );\n    logger.info(\"Token generated %s\", token);\n    return new GSStatus(true, 200, 'Login Successful',{JWT: token}, undefined);  \n  } else {\n    return new GSStatus(true, 401, undefined, 'Invalid Credentials',  undefined); \n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Godspeed Workflow Handler - Godspeed API Event - TypeScript\nDESCRIPTION: This TypeScript function showcases a typical event handler workflow for Godspeed. It receives the execution context and input arguments, demonstrating access to inputs (params, body, query, user, headers), logging with both child and global loggers, and shows possible return patterns for sending API responses. The dependencies are '@godspeedsystems/core' and 'pino'. Inputs include the HTTP/cloud event context, and the output can be a string, an object with 'data' and 'code', or an extended response structure. Suitable as a general template for custom Godspeed functions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/create-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSCloudEvent, GSContext, PlainObject } from \"@godspeedsystems/core\";\nimport Pino from 'pino';\n\nexport default function (ctx: GSContext, args: any) {\n    const {\n        inputs: {\n            data: {\n                params, //path parameters from endpoint url\n                body,  // request body in case of http and graphql apis, event data in case of message bus or socket\n                query, // query parameters from rest api\n                user,  // user payload parsed from jwt token\n                headers //request headers in case of http and graphql apis\n            }\n        }, \n        childLogger, // context specific logger. Read pino childLogger for more information\n        logger, // Basic logger of the project, generally prefer childLogger for logging \n        outputs, // outputs of previously executed tasks of yaml workflows (if any)\n        functions, // all loaded workflows/functions from the src/functions/ folder\n        datasources, //all configured datasources from src/datasources\n        mappings  //mappings from src/mappings folder. this is useful for loading key value configurations for business logic of your project\n    }: {\n        inputs: GSCloudEvent, \n        childLogger: Pino.Logger, // you can also add custom attributes to childLogger\n        logger: Pino.Logger,\n        outputs: PlainObject, \n        functions: PlainObject, \n        datasources: PlainObject,\n        mappings: PlainObject\n    } = ctx;\n\n    // Will print with workflow_name and task_id attributes. \n    childLogger.info('Server is running healthy');\n    // Will print without workflow_name and task_id attributes\n    logger.info('Arguments passed %o', args);\n    logger.info('Inputs object \\n user %o query %o body %o headers %o params %o', user, query, body, headers, params);\n    logger.info('Outputs object has outputs from previous tasks with given ids %o', Object.keys(outputs));\n    logger.info('Datasources object has following datasource clients %o', Object.keys(datasources));\n    logger.info('Total functions found in the project %s', Object.keys(functions).length);\n\n    // Returning only data\n    return 'Its working! ' + body.name;\n\n    //SAME AS\n    return {\n        data: 'Its working! ' + body.name,\n        code: 200,\n        // success: true,\n        // headers: undefined\n    }\n    //SAME AS\n    return {\n        data: 'Its working! ' + body.name,\n        code: 200,\n        success: true,\n        headers: undefined // or u can set response headers as key: value pairs, \n        //for example headers:{custom-header1:\"xyz\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Godspeed Project Creation Output\nDESCRIPTION: Displays the console output after successfully running `godspeed create`. It shows the steps involved, such as cloning the template, generating files, installing dependencies, and a final success message.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n\n…  waiting   Cloning project template.\n✔  success   Cloning template successful.\n…  waiting   Generating project with default examples.\n…  waiting   Generating project files.\n✔  success   Successfully generated godspeed project files.\n\ndependencies installed successfully!\n\nSuccessfully created the project my-service.\nUse `godspeed help` command for available commands. \n\nHappy building microservices with Godspeed! 🚀🎉\n\n```\n\n----------------------------------------\n\nTITLE: Testing Godspeed POST Endpoint - User Greeting Request - JSON\nDESCRIPTION: This JSON snippet shows the test payload for invoking the POST /greet endpoint in Godspeed. It is intended to be supplied as the request body via Swagger UI or similar HTTP clients. The only key is 'name', the value is the user's name as a string. This enables functional verification of greeting APIs.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/create-api.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Returning API Responses Using GSStatus in TypeScript\nDESCRIPTION: Demonstrates returning an API response using the GSStatus class built into Godspeed. This class provides structured output with properties like success, code, message, data, and headers. Requires TypeScript and the GSStatus class from the Godspeed framework. The returned value determines the eventual HTTP response or message based on workflow conventions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/native-language-functions.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n return new GSStatus(true, 200, 'OK', responseData, headers);\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Handler Function in Javascript\nDESCRIPTION: This Javascript snippet demonstrates defining an event handler function `greet` in the Meta Framework. It receives the framework context (`ctx`), retrieves the `name` from the input query parameters (`ctx.inputs.data.query.name`), and constructs a greeting message. It uses `module.exports` for exporting.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function greet(ctx){\n    return `Hello ${ctx.inputs.data.query.name}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Schema with Pattern Validation in YAML\nDESCRIPTION: This YAML snippet shows how to add pattern validation to a request body schema for a POST endpoint (`/helloworld`). In addition to requiring a `name` property of type string, it specifies a `format` (`date`) and a regular expression `pattern` (`\"[0-9]{4}-[0-9]{2}-[0-9]{2}\"`) to enforce a specific date format (YYYY-MM-DD) for the `name` field.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/validations/schema-validation.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./helloworld:\n  fn: helloworld\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          required: [name]\n          properties:\n            name:\n              type: string\n              format: date\n              pattern: \"[0-9]{4}-[0-9]{2}-[0-9]{2}\" # setting patern in schema\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Workflow at Event Source Level in YAML\nDESCRIPTION: Defines an authorization (authz) workflow that applies to all events from a particular source unless explicitly overridden. The workflow includes role-based access control logic using embedded JavaScript (js) sections for condition evaluation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nauthz: # enabling authz in event level\n  - fn: com.gs.transform \n    id: authz_task\n    args: | # if this condition fails, the else gets executed\n      <js% \n        if (inputs.user.role === 'admin') { \n          return {\n            success: true,\n            message: \"Authorization passed\",\n            data: {tableA: {no_access: ['fieldA'], where: {tenant_id: inputs.user.tenant_id}} \n          }\n        } else {\n            return {\n            success: false, \n            code: 403,\n            message: \"Authorization failed\"\n          }\n        }\n      %>\n```\n\n----------------------------------------\n\nTITLE: Invoking Functions and Datasources in Godspeed (TypeScript)\nDESCRIPTION: Illustrates how to call other functions (defined in YAML, JS, or TS) and interact with datasource clients within a Godspeed TypeScript function. Demonstrates accessing project functions via `ctx.functions['com.gs.helloworld2']` or standard `require`. Shows two options for interacting with datasources: directly using the client object (`ctx.datasources.aws.client.s3.listBuckets`) or using the generic `execute` method (`ctx.datasources.aws.execute`) which leverages plugin capabilities like error handling and response standardization. Includes basic error handling for the datasource call using the `success` property of the result.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/native-language-functions.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n export default async function (ctx: GSContext, args: any) {\n\n    //Calling functions (yaml, js, ts) from within a ts/js function, in a meta framework's project's functions folder, all project functions are available under ctx.functions. \n    const res = await ctx.functions['com.gs.helloworld2'](ctx, args);\n    //Same As\n    const res = await require('com/gs/helloworld2')(ctx, args);\n    // Calling datasource functions. All datasources are available under ctx.datasources hood.\n    // OPTION 1\n    // Every datasource exposes a client key. The client may be a single instance like in case of Axios, or multiple datasource client instances like in case of AWS, or database models like in case of Mongoose (depending on the plugin used).\n    const res = await ctx.datasources.aws.client.s3.listBuckets(args);\n    // OPTION 2\n    // All datasources have an execute method. This may be preferable in case you want to utlise the full capabilities of the plugin wrapped over the native clients, like error handling checks and response codes, retries, caching etc. \n    const res = await ctx.datasources.aws.execute(ctx, {\n         //Pass exactly same args as this aws service's method takes\n        ...args,\n        meta: {entityType: 's3', method: 'listBuckets'}\n        //Along with args, pass meta object\n        // meta can contain {entityType, method}\n    });\n    if (!res.success) {\n        return new GSStatus(false, res.code || 500, undefined, {message: \"Internal Server Error\", info: res.message})\n    }\n  //If a developer only returns data without setting keys like \"success\" or \"code\" in the response,\n  // the framework assumes it is just the data. \n  //In such cases, the response code defaults to 200, and success is assumed to be true.\n    \n    return res\n    // works same as return new GSStatus(true, 200, undefined, res );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Workflow-Level Error Handling in YAML\nDESCRIPTION: Example of configuring `on_error` at the workflow level. It specifies `continue: false` to stop the workflow on the first task error, logs custom attributes (like `error_message` and `error_type`) using output expressions, and defines a custom JSON error response object (`success`, `code`, `data`) to be returned when an error occurs.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/workflow-dsl.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Hello world\ndescription: Hello world example which invokes the com.gs.return workflow\nid: hello_world \non_error:\n  continue: false\n  log_attributes:  \n        error_message: <% outputs.transform_error.message %> # You can check the break point of the workflow in the terminal\n        error_type: 'your custom error type'\n  response: # Customized response that is returned when an error occurs\n    success: false\n    code: 500\n    data: \"Default error\"\ntasks: \n  - id: step1 \n    fn: com.gs.return\n    args: 'Hello World!' \n```\n\n----------------------------------------\n\nTITLE: Creating a New Godspeed Project\nDESCRIPTION: Command to create a new Godspeed project named 'hello-world'. This initializes a new project with the default template and examples.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed create **hello-world** # hello-world is the name of the app\n```\n\n----------------------------------------\n\nTITLE: Configuring an HTTP POST Event Endpoint in YAML\nDESCRIPTION: Provides a complete example YAML configuration for an HTTP POST event endpoint. It defines the endpoint path (`/v1/loan-application/:lender_loan_application_id/kyc/ckyc/initiate.http.post`), the handler workflow (`fn`), an optional validation error handler (`on_validation_error`), the expected request body schema (`body`), path parameter validation (`params`), and detailed response schemas (`responses`) for status codes 200 and 400, including examples. This configuration resides in the `src/events` folder.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n /v1/loan-application/:lender_loan_application_id/kyc/ckyc/initiate.http.post: #Adding .http.post after\n  #the endpoint exposes the endpoint as REST via the POST method (in this example)\n  fn: com.biz.kyc.ckyc.ckyc_initiate #The event handler written in ckyc_initiate.yml, and\n  # kept in src/workflows/com/biz/kyc/ckyc folder (in this example)\n  on_validation_error: com.jfs.handle_validation_error # The validation error handler if event's json schema validation gets failed and\n  # kept in src/workflows/com/jfs/ folder (in this example)\n  body:\n    required: true\n    content:\n      application/json:\n        schema:\n          type: 'object'\n          required: []\n          properties:\n            dob:  { type : 'string', format : 'date', pattern : \"[0-9]{4}-[0-9]{2}-[0-9]{2}\" }\n            meta:\n              type: 'object'\n\n  params:\n  - name: lender_loan_application_id\n    in: params # same as open api spec: one of cookie, path, query, header\n    required: true\n    allow_empty_value: false\n    schema:\n      type: string\n  responses: #Output data defined as per the OpenAPI spec\n    200:\n      description:\n      required: # default value is false\n      content:\n        application/json: # For ex. application/json application/xml\n          schema:\n            type: object\n            properties:\n              application_id:\n                type: string\n            additionalProperties: false\n            required: [application_id]\n          examples: # <string, ExampleObject>\n            example1:\n              summary:\n              description:\n              value:\n                application_id: PRM20478956N\n              external_value:\n          encoding:\n    400:\n      description:\n      required: # default value is false\n      content:\n        application/json: # For ex. application/json application/xml\n          schema:\n            type: object\n            properties:\n              lender_response_code:\n                type: string\n          examples: # <string, ExampleObject>\n            example1:\n              summary:\n              description:\n              value:\n                lender_response_code: E001\n              external_value:\n          encoding:\n```\n\n----------------------------------------\n\nTITLE: Executing Parallel Tasks with each_parallel in YAML\nDESCRIPTION: Demonstrates how to use com.gs.each_parallel to execute tasks in parallel for a list of values. It includes error handling at both task and loop levels.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: For each sample\n  description: Here we transform the response of for loop\n  tasks:\n    - id: each_parallel_step1\n      description: for each\n      fn: com.gs.each_parallel\n      value: [1, 2, 3, 4]\n      tasks:\n        - id: each_task1\n          fn: com.gs.transform\n          args: <% 'each_task1 ' + task_value %>\n          on_error: # on_error at task level\n            continue: false\n            response: <%Coffee/JS expression%> | String\n        - id: each_task2\n          fn: com.gs.transform\n          args: <% 'each_task2 ' + task_value %>\n      on_error: # on_error at loop level\n        continue: true\n        response: <%Coffee/JS expression%> | String\n    - id: each_parallel_step2\n      description: return the response\n      fn: com.gs.transform\n      args: <% outputs.each_parallel_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed CLI via NPM\nDESCRIPTION: Command to install Godspeed CLI globally using NPM package manager\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @godspeedsystems/godspeed\n```\n\n----------------------------------------\n\nTITLE: Implementing a Godspeed Event Handler Function in TypeScript\nDESCRIPTION: This TypeScript snippet implements a pure event handler function for Godspeed, importing the GSContext type from the core package. The handler processes input from the context object (body, headers, params, query, user), extracts a 'name' from the query, and returns a structured JSON response including data, status code, success flag, and custom headers. The expected input is a GSContext object (injected by the framework at runtime); the expected output is a result object that becomes the API response. Dependencies: @godspeedsystems/core package and Godspeed framework runtime. This function must be exported as default and located as referenced in the event schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/walkthrough.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, PlainObject } from \"@godspeedsystems/core\";\n\nexport default function (ctx: GSContext) {\n    const {body, headers, params, query, user} = ctx.inputs.data;\n    const name: string = query.name; //name expected in request query\n    return {\n        data: 'Its working! ' + name, //the data key gets set as the body in API response\n        code: 200, //Response status code\n        success: true, //success can be true or false\n        headers: { //custom headers to be attached from this function call\n            custom_response_header: 'something'\n        }\n    }\n    //Note: if you wish to use static typing in returning the response instead of using JSON, you can return GSStatus. More on that below.\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel For-Each Execution Using Godspeed Framework (YAML)\nDESCRIPTION: The 'com.gs.each_parallel' function processes a list of values concurrently by executing parallel tasks for each value. Dependencies include task structuring with specified tasks. Inputs require a list of values for parallel execution; outputs are statuses of tasks processed in parallel. Constraints exist where parallelism depends on system resources for optimal execution.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  http.get./test/each_parallel:\n  fn: each_parallel\n```\n\n----------------------------------------\n\nTITLE: Calling Mongoose Function from TypeScript Workflow (Option 2)\nDESCRIPTION: This TypeScript code shows an alternative method for calling a Mongoose function from a Godspeed TS/JS workflow using the generic `ds.execute` method. It requires adding a `meta` object to the arguments specifying the `entityType` (model name) and `method` (function name). This approach leverages the datasource's built-in handling for response codes and error structuring, returning a `GSStatus` object.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n//Option 2: Handles response codes, errors creation of GSStatus directly\nexport default async function (ctx: GSContext, args: any) {\n    const ds: GSDataSource = ctx.datasources.mongoose;\n    args = args || [{name: 'mastersilv3r'}, 'name age', {}];\n    //Will need to set a meta object in the args to pass entitType and method\n    args.meta = {entityType: 'SomeModel', method: 'findOne'};\n    const response = await ds.execute(ctx, args);\n    // response.code will be 500 in case of error, and 200 otherwise\n    // In case or error, response.data will have message and error keys, like we saw \n    // in the above TS example\n    return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Event Definition\nDESCRIPTION: Complete example of an HTTP GET event definition including authentication, authorization, Swagger documentation, and request/response validation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.get./sample_api:\n  fn: sample\n  authn: false\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            name:\n              type: string\n            message:\n              type: string\n  params:\n    - in: query\n      name: user\n      required: true\n      schema:\n        type: string\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: string\n  log:\n    attributes:\n      event_name: sample\n```\n\n----------------------------------------\n\nTITLE: Defining Response Schema Validation in YAML\nDESCRIPTION: This YAML snippet defines the expected schema for a successful (HTTP 200) response. It specifies that the response content (`application/json`) should be an object (`type: object`) containing a required property `name` (`required: [name]`) which must be of type string (`type: string`). The framework validates the actual response against this schema before sending it to the client; failure results in a 500 error.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/validations/schema-validation.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: object #Types of response\n            required: [name] # setting mandatory variables\n            properties:\n              name:\n                type: string #Type of property\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Payload in Event Handler - TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to access JWT payload data within a Godspeed event handler function. The 'ctx.inputs.data.user' object contains the JWT claims after authentication. The function returns the user object, which is typically used for further business logic or response construction. Dependencies: GSContext type, typically provided by the Godspeed framework.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-auth-old.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function (ctx: GSContext, args: any) {\n    \n    //Ctx object has the basics you need to write any business logic in TS/JS\n    const {\n        inputs\n    } = ctx;\n    //Accessing deserialized inputs from the event source\n    const {user, body, params, query, headers} = inputs.data;\n    return {'user': inputs.data.user};\n    //return new GSStatus(true, 200, undefined, {'user': inputs.data.user});\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining ChatGPT API Event (YAML) - YAML\nDESCRIPTION: Specifies an API HTTP event in YAML (src/events/gpt.yaml) to expose the ChatGPT datasource via an endpoint. Defines a POST route, required schema for the prompt, and documents responses. Dependent on the corresponding datasource and prompt workflow. Inputs are HTTP POST requests with JSON body containing prompt. Outputs are JSON responses containing the AI-generated result string. Suitable for connecting frontend or clients to backend AI workflows.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./chatgpt:\n  summary: \"Generate response from ChatGPT\"\n  description: \"Endpoint to send a user prompt to ChatGPT and retrieve the AI-generated response.\"\n  fn: prompt\n  authn: false\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            prompt:\n              type: string\n              description: \"The user's prompt or question for ChatGPT to respond to.\"\n          required:\n            - prompt\n  responses:\n    200:\n      description: \"Successful response from ChatGPT\"\n      content:\n        application/json:\n          schema:\n            type: string\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Workflow in Godspeed DSL\nDESCRIPTION: This snippet demonstrates how to add an authorization workflow at the task level in a Godspeed DSL workflow. It shows the structure for calling an authorization function before executing the main task.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authorization/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API\ntasks:\n    - id: api_step1\n      description: Hit with some dummy data. It will send back same as response\n      authz:\n        fn: com.jfs.authz\n        args: <% inputs %>\n      fn: datasource.api.anything.post\n      args:\n        data: <% inputs %>\n```\n\n----------------------------------------\n\nTITLE: Verify Node.js, Npm, and Git\nDESCRIPTION: Commands to verify if Node.js, npm, and Git are installed and check their versions. Ensure that Node.js version is at least 18.x.x and npm is 8.x.x or higher.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\nnpm -v\ngit -v\n```\n\n----------------------------------------\n\nTITLE: Applying Authorization at Event Level in YAML\nDESCRIPTION: Demonstrates setting up authorization directly within an event definition by specifying conditions under which a function will be allowed to execute. Includes schemas for request bodies and response types, primarily for HTTP GET requests.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n\"http.get./helloworld\":\nauthn: true\nfn: helloworld # if the below authentication condition returns true, fn helloworld gets called\nauthz: # enabling authz in event level\n  - fn: com.gs.transform \n    id: try_auth_2_authz\n    args: | # if this condition fails, the else gets executed\n      <js% \n        if (inputs.user.role === 'admin') { \n          return {\n            success: true, #if success: false, the message and data given below will be returned\n            message: \"Authorization passed\",\n            data: {x: 2 ,message: \"helloworld\"} \n          }\n        } else {\n           return {\n            success: false, \n            message: \"Authorization failed\"\n          }\n        }\n      %>\nbody:\n  content:\n    application/json:\n      schema:\n        type: object\n        properties:\n          name:\n            type: string\nresponses:\n  '200':\n    description: Successful response\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            message:\n              type: string\n  '400':\n    description: Bad request response\n```\n\n----------------------------------------\n\nTITLE: Defining GSResponse Interface in TypeScript\nDESCRIPTION: GSResponse interface defines the structure of responses in the Godspeed SDK. It includes a code, message, and any data returned by the operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions_old.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n    code: //A GS error code extending the standards\n    message: String\n    data: Any object or data type\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth2 in Godspeed http.yaml\nDESCRIPTION: Configures the GitHub OAuth2 provider within the `authn.oauth2.github` section of the Godspeed `http.yaml` eventsource file. It uses template syntax (`<% process.env.* %>`) to dynamically load credentials and configuration values from environment variables at runtime.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/oauth2-authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthn:\n  oauth2:\n    github:\n      client_id: <% process.env.GITHUB_CLIENT_ID %>  \n      client_secret: <% process.env.GITHUB_CLIENT_SECRET %>    \n      callback_url: <% process.env.GITHUB_CALLBACK_URL %>\n      callback_route: <% process.env.GITHUB_CALLBACK_ROUTE %>\n      auth_route: <% process.env.GITHUB_AUTH_ROUTE %>\n      success_redirect: <% process.env.GITHUB_SUCCESS_REDIRECT_URL %>\n      failure_redirect: <% process.env.GITHUB_FAILURE_REDIRECT_URL %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Godspeed Function in TypeScript\nDESCRIPTION: Demonstrates creating a TypeScript function for Godspeed workflows, leveraging the GSContext for accessing event inputs, outputs, datasources, and configured functions. Depends on @godspeedsystems/core and Pino for logging. Accepts context (with destructurable properties like logger, datasources, etc.) and dynamic args, logging various details and returning a status object or plain data. Expected inputs include contextual event data and outputs; returns are normalized JSON responses with possible metadata like code and headers.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/native-language-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSCloudEvent, GSContext, PlainObject } from \"@godspeedsystems/core\";\nimport Pino from 'pino';\n\nexport default function (ctx: GSContext, args: any) {\n    const {\n        inputs: {\n            data: {\n                params, //path parameters from endpoint url\n                body,  // request body in case of http and graphql apis, event data in case of message bus or socket\n                query, // query parameters from rest api\n                user,  // user payload parsed from jwt token\n                headers //request headers in case of http and graphql apis\n            }\n        }, \n        childLogger, // context specific logger. Read pino childLogger for more information\n        logger, // Basic logger of the project, generally prefer childLogger for logging \n        outputs, // outputs of previously executed tasks of yaml workflows (if any)\n        functions, // all loaded workflows/functions from the src/functions/ folder\n        datasources, //all configured datasources from src/datasources\n        mappings  //mappings from src/mappings folder. this is useful for loading key value configurations for business logic of your project\n    }: {\n        inputs: GSCloudEvent, \n        childLogger: Pino.Logger, // you can also add custom attributes to childLogger\n        logger: Pino.Logger,\n        outputs: PlainObject, \n        functions: PlainObject, \n        datasources: PlainObject,\n        mappings: PlainObject\n    } = ctx;\n\n    // Will print with workflow_name and task_id attributes. \n    childLogger.info('Server is running healthy');\n    // Will print without workflow_name and task_id attributes\n    logger.info('Arguments passed %o', args);\n    logger.info('Inputs object \\n user %o query %o body %o headers %o params %o', user, query, body, headers, params);\n    logger.info('Outputs object has outputs from previous tasks with given ids %o', Object.keys(outputs));\n    logger.info('Datasources object has following datasource clients %o', Object.keys(datasources));\n    logger.info('Total functions found in the project %s', Object.keys(functions).length);\n\n    // Returning only data\n    return 'Its working! ' + body.name;\n\n    //SAME AS\n    return {\n        data: 'Its working! ' + body.name,\n        code: 200,\n        // success: true,\n        // headers: undefined\n    }\n    //SAME AS\n    return {\n        data: 'Its working! ' + body.name,\n        code: 200,\n        success: true,\n        headers: undefined // or u can set response headers as key: value pairs, \n        //for example headers:{custom-header1:\"xyz\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in TypeScript Workflow\nDESCRIPTION: This TypeScript snippet illustrates how to access and utilize configured environment variables within a Godspeed system workflow. It handles the retrieval of API-related keys and checks their availability before proceeding with the workflow's logic.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, GSStatus } from \"@godspeedsystems/core\";\n\nexport default async function myWorkflow(ctx: GSContext, args: any) {\n    const apiKey = ctx.config.my_datasource.api_key;\n    const apiUrl = ctx.config.my_datasource.base_url;\n\n    if (!apiKey || !apiUrl) {\n        throw new GSStatus(false, 500, undefined, \"Missing configuration variables\");\n    }\n\n    // Use apiKey and apiUrl in your logic\n    console.log(\"API Key:\", apiKey);\n    console.log(\"API URL:\", apiUrl);\n\n    return new GSStatus(true, 200, undefined, { message: \"Environment variables accessed successfully\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Handler Workflow in YAML\nDESCRIPTION: This YAML snippet defines a simple workflow to greet a user within the Meta Framework. It includes metadata like `summary` and `description`. The core logic is in the `tasks` section, defining a `greet_task` that executes a function named `greetings`, passing the `name` from the input query parameters as an argument using template syntax (`<%inputs.query.name%>`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: greet the user\ndescription: this function greets the user by accepting the user name\ntasks:\n  - id: greet_task\n    fn: greetings\n    args:\n      name: <%inputs.query.name%>\n```\n\n----------------------------------------\n\nTITLE: Disabling Authorization for a Specific Endpoint (YAML)\nDESCRIPTION: This YAML shows how to disable authorization for a specific API endpoint, even when eventsource-level authorization is enabled. By setting 'authz: false', it ensures that the defined route bypasses all pre-configured access control checks. Useful for exempting routes that need public or unrestricted access.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/walkthrough.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"http.get./helloworld\":\\n  fn: helloworld\\n  authz: false\n```\n\n----------------------------------------\n\nTITLE: Invoking Mongo Database in Godspeed Workflow (Datastore as Datasource)\nDESCRIPTION: This example demonstrates how to fetch a user from a MongoDB database using the 'mongo' datasource in a Godspeed workflow. The workflow uses the 'findOne' method on the 'User' entity, passing a userId from the request parameters as a query condition.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: workflow_1\ndescription: This workflow will fetch the user with userId from the mongo database\ntasks:\n  - id: task_1\n    fn: datasource.mongo.User.findOne\n    args:\n      where:\n        userId: <% inputs.params.userId %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Graphql Event in YAML\nDESCRIPTION: This snippet shows how to define a Graphql event for creating a new category using a specific event key prefix in YAML. The configuration includes details for the HTTP POST request and outlines the structure of the request body, specifying that it accepts JSON format.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/graphql-events.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napollo.post./mongo/category:      // event key having prefix apollo\n  summary: Create a new Category\n  description: Create Category from the database\n  fn: create\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n\n```\n\n----------------------------------------\n\nTITLE: Graphql Workflow Task Definition in YAML\nDESCRIPTION: This snippet defines a task in a Graphql workflow for creating a category in MongoDB. It specifies a task ID, function call, and input arguments sourced from the request body. The snippet is part of a broader automated workflow that executes tasks according to defined sequences, enhancing API integration within the Godspeed framework.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/graphql-events.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Create Category\ntasks:\n  - id: mongo_category_create\n    fn: datasource.mongo.Category.create\n    args:\n      data: <% inputs.body %>\n\n```\n\n----------------------------------------\n\nTITLE: Defining GSContext Interface in TypeScript\nDESCRIPTION: GSContext interface defines the structure of the context object used in Godspeed SDK operations. It includes various properties for storing execution-specific information.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions_old.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n    data: Any object or data type //All memoized data with shared references. References can have promises or actual data. This is not concurrency safe.\n    immutable: Any object or data type //For storing and accessing references which are unique to this execution context (for concurrency safety, in the functional programming way).\n    actor: String //JWT and other user specific info\n    headers: Object //In case there were any headers with the payload in messagebus or in HTTP\n    payload: Object //The arguments to include in this function\n    otel: Any object or data type //OTEL compliant trace/span information\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Event Schema in YAML for Godspeed Framework\nDESCRIPTION: This snippet demonstrates the structure of a generic event schema in Godspeed. It includes various components such as the event handler, input/output schemas, validation error handling, and authorization checks. The schema follows OpenAPI specifications and supports multiple event sources.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-schema.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.get./greet: #The initial line depicts a fusion of the event, the employed method, and the path associated with the event.\n  fn: function_greet #Required. The 'fn' key receives the function name located in 'src/functions' and forwards the accompanying parameters. \n  \n  #optional configurations\n  #Swagger components\n  body: #same as requestBody in Swagger world\n  params: #same as swagger `parameters` schema\n  responses: #same as swagger `responses` schema\n  id: # swagger. if not provided, when generating swagger, this is generated from the URI of the event by default\n  operationId: # swagger if not provided, check if `id` is set. If that is also not set, use the summary to generate the operationId\n  summary:\n  tags: # swagger if you give `tags` array in schema of event, framework uses that to add tags to your generated spec. Else it uses the path and name of the file containing the event as tags. For ex. <folder_name>_<file_name> \n  \n  #Other non-swagger components (optional)\n  authn: #custom authentication. Currently plugins support JWT. Can be customized\n  authz: #your custom authz workflow\n  on_request_validation_error: #when validation fails\n  on_response_validation_error: #when validation fails\n  log: #Open Telemetry compliant log attributes which help debug and search through logs better\n    attributes:\n```\n\n----------------------------------------\n\nTITLE: Returning Values with com.gs.return in YAML\nDESCRIPTION: Demonstrates the usage of com.gs.return function to exit the current function and return control to the function caller.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Multiplexing create loan for hdfc api calls\n  id: helloworld\n  tasks:\n    - id: step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      description: create account in the bank\n      fn: com.gs.return\n      args: |\n        <coffee% 'Hello ' + inputs.query.name %>\n```\n\n----------------------------------------\n\nTITLE: Running the Godspeed Development Server\nDESCRIPTION: Executes the `godspeed serve` command within a Godspeed project directory. This command builds the project and starts a development server that automatically watches for file changes and reloads.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n godspeed serve\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Payload in YAML Inline Scripts\nDESCRIPTION: This YAML workflow demonstrates accessing the JWT payload from 'inputs.user' and embedding it within the arguments for an API call task. Such inline referencing is used in both function-level and authorization workflows, enabling downstream tasks or APIs to leverage user claims. The input 'inputs.body' is also propagated for API calling context.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-auth-old.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n    - id: api_step1\n      description: Hit with some dummy data. It will send back same as response\n      fn: datasource.api.post./anything\n      args:\n        data: <% inputs.body %>\n          jwt_payload: <% inputs.user %>\n\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Event Schema in YAML\nDESCRIPTION: This code snippet demonstrates how to define an HTTP event schema using the Godspeed framework. It includes details for updating a user resource via an HTTP POST request, specifying the handler function and parameter requirements. This schema depends on the Godspeed express plugin and requires a valid YAML configuration with correct API path and parameter definitions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/http-events.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./mongo/user/search/{id}: #This is the only thing that changes across all the events\n  summary: Update a user # as per Swagger spec\n  description: Update user from database # as per Swagger spec\n  fn: com.biz.mongo.user.update # function to be invoked\n  on_validation_error: com.jfs.handle_validation_error\n  params: # params as per Swagger spec\n    - name: id\n      in: path\n      required: true\n      schema:\n        type: string\n    - name: name\n      in: query\n      required: false\n      schema:\n        type: string\n  body: #as per Swagger spec\n    content:\n      application/json:\n        schema:\n          $ref: \"#/definitions/mongo/BusinessProfile\" #defined for definition section.\n  responses: #as per Swagger spec\n    200:\n      content:\n        application/json:\n          schema:\n            type: object\n    500:\n      content:\n        application/json:\n          schema:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Transforming Data Using Godspeed Framework (YAML)\nDESCRIPTION: The 'com.gs.transform' function allows conversion of data from one format to another, utilizing CoffeeScript or JavaScript scripting. It outputs a status code and success indicator, transforming arguments into GSStatus if applicable. The function involves conditional concatenation with query parameters. Dependencies include 'com.gs.return' for capturing and communicating data. Prerequisites include understanding GSStatus handling. Inputs are provided via arguments; outputs include success indicators and transformed data.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  http.get./transform:\n  fn: transform\n  params:\n  - name: name\n    in: query # same as open api spec: one of cookie, path, query, header\n    required: true\n    allow_empty_value: false\n    schema:\n      type: string \n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: string\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: This function returns the greet message with name provided in query parameters\ntasks:\n  - id: hello_task1\n    fn: com.gs.transform\n    args: 'Hello'\n\n  - id: transform_result\n    fn: com.gs.transform \n    args: <% outputs.hello_task1.data + inputs.query.name %>\n\nOutput:\n  code: 200\n  success: true\n  data: \"Hello <inputs.query.name>\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: This function returns data present in the args\n# these args qualifies as GSStatus. The framework ignores the extra \n# keys because data key is already present in the args.\ntasks:\n  - id: first_task\n    fn: com.gs.transform\n    args: \n      code: 400\n      success: false\n      data: \"Invalid input error\"\n      key1: \"E001\"\n      key2: \"E002\"\n      headers: \n        title: \"MS1\"\n\nOutput:\n  code: 400\n  success: false\n  data: \"Invalid input error\"\n  headers: \n    title: \"MS1\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: This function returns all the keys present in the args \n# as GSStatus.data as there is no data key defined.\n# These args don't qualify as GSStatus\ntasks:\n  - id: first_task\n    fn: com.gs.transform\n    args: \n      key1: \"E001\"\n      key2: \"E002\"\n\nOutput:\n  code: 200\n  success: true\n  data: \n    key1: \"E001\"\n    key2: \"E002\"\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client and Syncing Database (Bash)\nDESCRIPTION: Shows the `godspeed prisma prepare` command. Running this command generates the Prisma client based on the schema definition (placing it in the configured `output` directory) and synchronizes the connected database with the Prisma schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CRUD_API.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Workflow for Sending Emails Using Godspeed DataSource (YAML)\nDESCRIPTION: This YAML snippet details a workflow function in the Godspeed framework that sends an email using the configured mail datasource. The task specifies the 'from', 'to', 'subject', and 'text' fields, which are required parameters for sending an email. The function references 'datasource.mail.send', indicating invocation of the Nodemailer plugin. Inputs must be valid email addresses and content strings; outputs will follow the mailer's send status or error.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Nodemailer Datasource.md#2025-04-22_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nsummary: send\\ntasks:\\n  - id: send_mail\\n    fn: datasource.mail.send\\n    args: \\n      from: 'sender@gmail.com'\\n      to: 'receiver@gmail.com'\\n      subject: 'Hello from Godspeed'\\n      text: 'Have a Nice day'\n```\n\n----------------------------------------\n\nTITLE: Calling Mongoose Datasource from TypeScript Workflow\nDESCRIPTION: TypeScript function demonstrating interaction with a Mongoose datasource (`mongoose1`) within a Godspeed workflow. It retrieves the datasource instance using `ctx.datasources.mongoose1`. Before execution, it sets required metadata (`entityType` for the model name and `method` for the function name) on the `args` object. Finally, it calls the datasource's generic `execute` method.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, GSDataSource, GSStatus } from \"@godspeedsystems/core\";\n\nexport default async function (ctx: GSContext, args: any) {\n    const ds: GSDataSource = ctx.datasources.mongoose1;\n    //Will need to set a meta object in the args to pass entitType and method\n    args.meta = {entityType: 'SomeModel', method: 'findOne'};\n    const response = await ds.execute(ctx, args);\n    return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Logs DSL Specification\nDESCRIPTION: Schema for defining custom logs before and after task execution in GodSpeed systems. Supports different log levels, custom messages, parameters, and attributes that align with the OTEL logging data model.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nlogs:\n    before:\n        level: fatal|error|warn|info|debug|trace # refer pino for levels\n        message: 'Sample log before'\n        params: \n          param1: val1\n          param2: val2\n        attributes:\n          request:\n            query: <%inputs.query%>\n    after:\n        level: info\n        message: 'Sample log after'\n        params:\n        attributes: \n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Event Handler in TypeScript\nDESCRIPTION: TypeScript function that handles the GraphQL mutation event. This function accesses the mongoose data source to create a new category based on the request body data and returns a formatted response.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Apollo GraphQl Eventsource.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function (ctx: GSContext, args: PlainObject) {\n    const ds = ctx.datasources.mongoose;\n    //@ts-ignore\n    const response = ds.Category.create(ctx.inputs.data.body);\n    return {\n      code: 201,\n      data: response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Event in Godspeed\nDESCRIPTION: YAML definition for a GraphQL mutation event. This configuration creates a GraphQL mutation for creating a category with a specified schema for the request body and response.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Apollo GraphQl Eventsource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nApollo.post./mongo/category: #this will become a mutation\n  summary: Create a new Category\n  description: Create Category from the database\n  fn: create\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            name:\n              type: string\n  responses:\n    content:\n      application/json:\n        schema:\n          type: object\n```\n\n----------------------------------------\n\nTITLE: AWS Workflow for Listing S3 Objects\nDESCRIPTION: This workflow in YAML illustrates the configuration of tasks to list objects in an Amazon S3 bucket. The task is defined with an id and a specific AWS datasource function call, using inputs from the request body.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/AWS Datasource.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: aws_workflow\ntasks:\n  - id: aws_list\n    fn: datasource.aws.s3.listObjects\n    args: <% inputs.body %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Kafka Eventsource Subscription in TypeScript\nDESCRIPTION: This TypeScript code defines the EventSource class that extends GSDataSourceAsEventSource. It implements the subscribeToEvent method to handle Kafka message consumption and event processing.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GSCloudEvent, GSStatus, GSActor, GSDataSourceAsEventSource, PlainObject} from \"@godspeedsystems/core\";\n\n\nexport default class EventSource extends GSDataSourceAsEventSource {\n  async subscribeToEvent(\n    eventKey: string,\n    eventConfig: PlainObject,\n    processEvent: (\n      event: GSCloudEvent,\n      eventConfig: PlainObject\n    ) => Promise<GSStatus>\n  ): Promise<void> {\n    const client = this.client;\n    const ds = eventKey.split(\".\")[0];\n    const groupId = eventKey.split(\".\")[2]\n    const _topic = eventKey.split('.')[1];\n    interface mesresp {\n      topic: string;\n      partition: number;\n      message: any;\n    }\n\n    if (client) {\n      const consumer = client.consumer({ groupId: groupId });\n      await consumer.subscribe({\n        topic: _topic,\n        fromBeginning: true,\n      });\n\n      await consumer.run({\n        eachMessage: async (messagePayload: mesresp) => {\n          const { message } = messagePayload;\n          let msgValue;\n          let status;\n          let data;\n          try {\n            msgValue = message?.value?.toString();\n            data = {\n              body: msgValue,\n            };\n            status = 200;\n          } catch (ex) {\n            status = 500;\n            return new GSStatus(\n              false,\n              500,\n              `Error in parsing kafka event data ${msgValue}`,\n              ex\n            );\n          }\n          const event = new GSCloudEvent(\n            \"id\",\n            `${ds}.${_topic}.${groupId}`,\n            new Date(message.timestamp),\n            \"kafka\",\n            \"1.0\",\n            data,\n            \"messagebus\",\n            new GSActor(\"user\"),\n            \"\"\n          );\n          const res = await processEvent(event, eventConfig);\n\n          if (!res) {\n            status = 500;\n          } else {\n            status = 200;\n          }\n          return res;\n        },\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Per-Minute Workflow for Cron-Scheduled Task - YAML\nDESCRIPTION: This YAML snippet defines a workflow that will run every minute as scheduled by the corresponding cron event. The workflow contains a single task that prints a message ('HELLO from CRON') by invoking the 'com.gs.return' function with the specified data argument. This workflow is designed for the Godspeed framework and requires that the scheduler and function dependencies are in place.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/cron-events.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: this workflow will be running every minute\\ntasks:\\n  - id: print\\n    description: print for every minute\\n    fn: com.gs.return\\n    args:\\n      data: HELLO from CRON\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Datasource in Godspeed (YAML)\nDESCRIPTION: This YAML configuration defines settings for an Axios datasource named 'api'. It specifies the `base_url` for the target API (e.g., `https://httpbin.org`), enables `curlifiedLogs`, sets up optional authentication (`authn`) with token refresh logic tied to a function (`my_bank.authn`) and specific status codes (`401`), defines common `headers` (like `Content-Type` and a dynamic `Cookie`), and configures `retry` logic for specific status codes (`500`, `503`) or messages, with parameters like `max_attempts` and `interval`. This file (`api.yaml`) should reside in the `src/datasources/` directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/axios-apis.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: axios\nbase_url: https://httpbin.org   # Base URL of the third-party API. You can use `https://httpbin.org` for testing.\n\n# Following fields are optional, you can use them as per your requirement\ncurlifiedLogs: true   # to print all api calls in curl format\n\nauthn:       # to do Authentication of API calls with token refresh logic\n  fn: my_bank.authn\n  refreshOn:\n    statusCode: [401]\n\nheaders:      # to set Common headers in all API calls\n  Content-Type: application/json\n  Cookie: <%mappings.my_bank.auth_workflow_cookie%>\n\n# Retry logic for failed API calls for ex on Internal server errors or request timeouts\nretry:\n    when: #the condition\n      status: [500, 503] # an array or single value of codes (optional). Default 500\n      message: my custom expected message for retry #And (optionally) when response has this message\n    max_attempts: 5\n    type: constant # or random, exponential\n    interval: PT15s\n    # type: exponential\n    # min_interval: PT5s\n    # max_internal: PT15s\n    # type: random\n    # min_interval: PT5s\n    # max_internal: PT15s\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Datasource for PlanetScale\nDESCRIPTION: Shows the `datasource` block configuration within a Prisma schema file (`src/datasources/planetscale.prisma`). It specifies 'planetscale' as the provider and uses the `env(\"DATABASE_URL\")` function to load the connection string from the environment variable set previously.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PlanetScale.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"planetscale\"\n  url      = env(\"DATABASE_URL\") \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Parameter Schema Validation in YAML\nDESCRIPTION: This YAML configuration defines schema validation for path and query parameters for the HTTP POST endpoint `/helloworld/:path_params`. It specifies a required path parameter named `path_params` and a required query parameter named `query_params`, both expected to be strings. The `in` field distinguishes between path (`path`) and query (`query`) parameters, and `required: true` marks them as mandatory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/validations/schema-validation.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./helloworld/:path_params:\n  fn: helloworld\n  params: # Params begin from here\n    - name: path_params # name of the parameter\n      in: path # type of parameter path/query\n      required: true # mandatory check for path parameter\n      schema:\n        type: string # type of path parameter\n    - name: query_params \n      in: query # query parameter\n      required: true\n      schema:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Publish Event Schema for HTTP Endpoint - YAML\nDESCRIPTION: Defines an HTTP POST event mapped to '/kafka-pub', specifying a required JSON body with a 'message' property. This event invokes the 'kafka-publish' function upon receiving a valid request. Dependencies: Godspeed events mechanism, correct HTTP setup; expects requests with 'message' string in body. Outputs a response containing a property 'name'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Kafka Datasource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# event for Publish\\n'http.post./kafka-pub':\\n  fn: kafka-publish\\n  body:\\n    content:\\n      application/json:\\n        schema:\\n          type: object\\n          properties:\\n            message:\\n              type: string\\n          required: ['message']\\n  responses:\\n    200:\\n      content:\\n        application/json:\\n          schema:\\n            type: object\\n            properties:\\n              name:\\n                type: string\n```\n\n----------------------------------------\n\nTITLE: Basic Task-Level Error Handling in YAML Workflow\nDESCRIPTION: Demonstrates basic task-level error handling with custom error responses. Includes two tasks where the first task implements error handling with a continue flag and custom error response.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Testing on_error at task level\ntasks:\n  - id: task_level_1 \n    fn: com.gs.transform # if we use this args in transform function they will set as response \n    args: \n      success: false\n      code: 500\n      data: \"task 1 executed\"\n    on_error: \n      continue: false \n      response:\n        code: 400\n        data: \"error occured\"\n    \n  - id: task_level_2\n    fn: com.gs.return\n    args: \"task 2 executed\"\n```\n\n----------------------------------------\n\nTITLE: Defining an HTTP GET Event in Godspeed (YAML)\nDESCRIPTION: This YAML configuration defines an HTTP event for a GET request to the `/fetch-data` endpoint. It specifies that the `fetchDataWorkflow` function should be executed when this endpoint is hit (`fn: fetchDataWorkflow`). Authentication is disabled (`authn: false`). It defines a required query parameter `test_input` of type string and specifies the expected successful response (`200`) structure as a JSON object. This file (e.g., `fetchData.yaml`) typically resides within the events configuration directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/axios-apis.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.get./fetch-data:\n  fn: fetchDataWorkflow\n  authn: false\n  params:\n    - name: test_input\n      in: query\n      required: true\n      schema:\n        type: string\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Using Scripting in Event Schema and Authorization (YAML/JS)\nDESCRIPTION: This YAML snippet defines the `http.post./helloworld` event. It uses loadtime scripting (`<% %>`) to populate the `enum` for the `gender` property from mappings (`mappings.gender`). Additionally, it includes an `authz` block with an inline JavaScript task (`<js% ... %>`) for runtime authorization, checking `inputs.user.role` before allowing the event function (`helloworld`) to execute.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n\"http.post./helloworld\":\n  fn: helloworld\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            name:\n              type: string\n            gender:\n              type: string\n              enum: <% mappings.gender %>\n  authz:\n    - fn: com.gs.transform \n      id: authz_task\n      args: | # if this condition fails, the else gets executed\n        <js% \n          if (inputs.user.role !== 'system admin') { \n              return {\n              success: false, \n              code: 403,\n              message: \"Authorization failed\"\n            }\n          }\n        %>   \n```\n\n----------------------------------------\n\nTITLE: Parallel Execution Using Godspeed Framework (YAML)\nDESCRIPTION: The 'com.gs.parallel' function enables concurrent execution of multiple child tasks to optimize processing times and resource utilization. Dependencies include 'com.gs.return' for data capture and 'http' event triggers. Required inputs are JSON objects and schemas provided via the HTTP body. Outputs comprise parallel task results. Appropriate for scenarios requiring simultaneous task execution.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  http.get./test/parallel:\n  summary: parallel\n  description: executing tasks parallelly\n  fn: parallel\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: object\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: The Parallel function runs all its child task in parallel and we can select the specific childs output\ntasks:\n  - id: parallel\n    fn: com.gs.parallel\n    tasks:\n      - id: 1st\n        fn: com.gs.return\n        args: \"నమస్కారం\"\n\n      - id: 2nd\n        fn: com.gs.return\n        args: \"नमस्ते\"\n\n      - id: 3rd\n        fn: com.gs.return\n        args: \"Hello\"\n\n  - id: step2\n    fn: com.gs.return\n    args: |\n      <% outputs[\"1st\"] %>\n```\n\n----------------------------------------\n\nTITLE: Invoking MongoDB Data Source in Godspeed Workflow Task (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to invoke a MongoDB data source within a Godspeed workflow task. It uses the 'datasource.mongo.User.findOne' function to fetch a user with a specific userId from the database.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/data_sources/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: workflow_1\ndescription: This workflow will fetch the user with userId from the mongo database\ntasks:\n  - id: task_1\n    fn: datasource.mongo.User.findOne\n    args:\n      where:\n        userId: <% inputs.params.userId %>\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Authz Logic in Separate Workflow (YAML)\nDESCRIPTION: This YAML file (`authz_wf.yaml`) defines a reusable authorization workflow. It contains a task (`authz_task_1`) using `com.gs.transform` to specify allowed columns (`can_access` - col1, col2) and a row-level filter (`where`) based on the client ID from input headers (`<% inputs.headers.client_id %>). The `no_access` section is commented out.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: authz workflow\n  - id: authz_task_1\n    summary: return access columns\n    fn: com.gs.transform\n      args:\n        can_access: \n          - col1\n          - col2\n        # no_access:\n        #   - col3\n        where:\n          tenant: <% inputs.headers.client_id %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Function Execution with com.gs.dynamic_fn in YAML\nDESCRIPTION: This snippet demonstrates how to use com.gs.dynamic_fn to dynamically execute a workflow whose name is determined at runtime. The tasks within com.gs.dynamic_fn return a string that represents the workflow name to be executed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Dynamic function to call com.jfs.sum_workflow.yaml\ndescription: This function dynamically is taking workflow name and executing it at the runtime.\ntasks:\n  - id: sum_dynamic_step1\n    description: add two numbers\n    fn: com.gs.dynamic_fn\n    tasks: # the tasks should return a string value which will the name of the workflow to be executed.\n    # For example, in below task list, final workflow name will be `com.jfs.sum_workflow`\n      - id: get_wf_name_step1\n        fn: com.gs.transform\n        args: com.jfs.sum_workflow\n      - id: get_wf_name_step2 # this task is returning a workflow name dynamically\n        fn: com.gs.transform\n        args: <% outputs.get_wf_name_step1.data %>\n```\n\n----------------------------------------\n\nTITLE: Accessing Function Inputs from GSContext in JavaScript\nDESCRIPTION: Illustrates obtaining event input data such as 'body' from the GSContext object in Godspeed. The snippet uses JavaScript destructuring to access nested input fields, which are standardized across event sources. Assumes that ctx conforms to the Godspeed context interface; outputs include extracted input data.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/native-language-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  const {inputs} = ctx;\n  const body = inputs.data.body;\n```\n\n----------------------------------------\n\nTITLE: Defining Godspeed Workflow for Kafka Consumer YAML\nDESCRIPTION: YAML configuration for the `kafka-consumer` workflow function defined in `src/functions/kafka_consume.yaml`. This workflow is triggered by a Kafka consumer event. It contains a single task that uses the built-in `com.gs.return` function to simply return the entire input (`<% inputs %>`), which contains the consumed message data.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Kafka Eventsource.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# function for consume data\nid: kafka-consumer\nsummary: consumer\ntasks:\n    - id: set_consumer\n      fn: com.gs.return\n      args: <% inputs %>\n```\n\n----------------------------------------\n\nTITLE: Sequential Iteration with com.gs.each_sequential in YAML\nDESCRIPTION: Shows how to use com.gs.each_sequential function for iterating over a list of values and executing tasks sequentially for each value.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: For each sample\n  description: Here we transform the response of for loop\n  tasks:\n    - id: each_sequential_step1\n      description: for each\n      fn: com.gs.each_sequential\n      value: [1, 2, 3, 4]\n      tasks:\n        - id: each_task1\n          fn: com.gs.transform\n          args: <% 'each_task1 ' + task_value %>\n    - id: each_sequential_step2\n      description: return the response\n      fn: com.gs.transform\n      args: <% outputs.each_sequential_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication/Token Refresh in Godspeed Axios DataSource (TypeScript)\nDESCRIPTION: This TypeScript code defines an 'authn' function for use with Godspeed's Axios datasource. It creates an Axios client and exports an async function that makes a GET request to obtain an access token, constructs an Authorization header, and logs the authentication process. In case of errors, it logs and throws exceptions. Place this module where your datasource authn function expects it, and ensure '@godspeedsystems/core' and 'axios' are available. Inputs are derived from context, and output should be an object with required headers.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Axios Datasource.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { logger } from \"@godspeedsystems/core\";\n\nconst axios = require('axios');\nconst client = axios.create({\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n/**\n * Generate and return all the headers which are required to be sent\n * in the API calls which require authentication tokens\n */\nmodule.exports = async function (ctx: any) {\n    try {\n        const res = await client({\n            method: 'get',\n            url: `https://httpbin.org/anything`,\n            data: {\n                \"Authorization\": 'access_token'\n            }\n        })\n        // Retrieve the authn tokens\n        const headers = {\n            \"Authorization\": res.data.access_token || 'access_token'\n        };\n       \n        logger.info('Auth token successfully refreshed and following headers set: %o', Object.keys(headers));\n        return headers;\n    } catch (error) {\n        logger.error('Error in refreshing token %o', error);\n        throw error;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed CLI via npm\nDESCRIPTION: Installs the Godspeed CLI globally using the Node Package Manager (npm). This makes the `godspeed` command available system-wide. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @godspeedsystems/godspeed\n```\n\n----------------------------------------\n\nTITLE: Executing Tasks in Parallel with com.gs.parallel in YAML\nDESCRIPTION: Illustrates the use of com.gs.parallel function to execute child tasks concurrently within main tasks.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Parallel Multiplexing create loan for hdfc api calls\n  tasks:\n    - id: parallel # parent task\n      fn: com.gs.parallel \n      tasks:\n        - id: 1st  # child task one\n          fn: com.gs.return\n          args: |\n            'parallel task1'\n\n        - id: 2nd  # child task two\n          fn: com.gs.return\n          args: |\n            'parallel task2'\n\n        - id: 3rd # child task three\n          fn: com.gs.return\n          args: |\n            'parallel task3'\n\n    - id: step2\n      fn: com.gs.transform\n      args: |\n        <coffee% {\n        code: 200,\n        data: outputs['1st']\n        } %>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom OpenAI Data Source in TypeScript\nDESCRIPTION: Example implementation of a custom data source for OpenAI integration. This class extends GSDataSource and implements the required initClient() and execute() methods to handle API interactions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-datasource-plugin2.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, GSDataSource, GSStatus, PlainObject } from \"@godspeedsystems/core\";\nimport OpenAI from 'openai';\n\nexport default class DataSource extends GSDataSource {\n  protected async initClient(): Promise<object> {\n    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n    return client;\n  }\n\n  async execute(ctx: GSContext, args: PlainObject): Promise<any> {\n    if (!this.client) {\n      this.client = await this.initClient();\n    }\n    const client = this.client as OpenAI;\n    const { prompt, meta: { fnNameInWorkflow } } = args;\n    const method = fnNameInWorkflow?.split(\".\")[2];\n    if (!method || method !== \"execute\") {\n      return new GSStatus(false, 400, \"Invalid method\");\n    }\n    const response = await client.chat.completions.create({\n      model: 'gpt-4o',\n      messages: [{ role: \"user\", content: prompt }],\n      temperature: 1,\n      max_tokens: 200\n    });\n    const responseContent = response.choices[0]?.message?.content || \"No response\";\n    return new GSStatus(true, 200, \"Success\", responseContent);\n  }\n}\n\nconst SourceType = 'DS';\nconst Type = \"gpt\"; // Determines the loader file name\nconst CONFIG_FILE_NAME = \"gpt\"; // Used as the datasource name\nconst DEFAULT_CONFIG = {};\nexport { DataSource, SourceType, Type, CONFIG_FILE_NAME, DEFAULT_CONFIG };\n```\n\n----------------------------------------\n\nTITLE: Executing Datastore Access in TypeScript with Authorization Constraints\nDESCRIPTION: Implements a method to execute datastore queries in TypeScript, integrating authorization permissions to ensure secured access. It modifies queries based on user roles and access conditions provided through metadata arguments.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync execute(ctx: GSContext, args: PlainObject): Promise<any> {\n    const { childLogger } = ctx;\n    const {\n      meta: { entityType, method, fnNameInWorkflow, authzPerms }, ...rest } = args as { meta: { entityType: string, method: string, fnNameInWorkflow: string, authzPerms: AuthzPerms }, rest: PlainObject };\n    if (authzPerms) {\n      const authzFailRes = modifyForAuthz(this.client, rest, authzPerms, entityType, method);\n      if (authzFailRes) {\n        return authzFailRes;\n      }\n    }\n    // Now authz checks are set in select fields and passed in where clause\n    let prismaMethod: any;\n    try {\n        const client = this.client;\n        if (entityType && !client[entityType]) {\n          logger.error('Invalid entityType %s in %s', entityType, fnNameInWorkflow);\n          return new GSStatus(false, 400, undefined, { error: `Invalid entityType ${entityType} in ${fnNameInWorkflow}`});\n        }\n        prismaMethod = client[entityType][method];\n        if (method && !prismaMethod) {\n          logger.error('Invalid CRUD method %s in %s', method, fnNameInWorkflow);\n          return new GSStatus(false, 500, undefined, { error: 'Internal Server Error'});\n        }\n\n        const prismaResponse = await prismaMethod.bind(client)(rest);\n        return new GSStatus(true, responseCode(method), undefined, prismaResponse);\n    } catch (error: any) {\n      logger.error('Error in executing Prisma query for args %o \\n Error: %o', args, error);\n      return new GSStatus(false, 400, error.message, JSON.stringify(error.message));\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Interacting with AWS S3 using com.gs.aws in YAML\nDESCRIPTION: This snippet demonstrates how to use the com.gs.aws function to interact with AWS S3 service. It shows uploading a file to an S3 bucket using the putObject method of the AWS S3 client.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: upload s3\ntasks:\n  - id: step1\n    description: upload s3\n    fn: com.gs.aws\n    args:\n      datasource: aws_s3\n      params:\n        - Bucket: 'godspeedbucket'\n          Key: 'file4.yml'\n          Body: <% fs.createReadStream(inputs.files[0].tempFilePath) %>\n      config:\n        service: S3\n        method: putObject\n```\n\n----------------------------------------\n\nTITLE: Generating Workflow Snippet with Godspeed VS Code Extension\nDESCRIPTION: YAML snippet for defining a Godspeed workflow, including summary, description, unique identifiers, and tasks with functions and arguments. The Godspeed Framework and the installation of the VS Code extension are prerequisites. Critical fields include function definitions and task arguments.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/vscode-extension/language-tools.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsummary: 'the title'\\ndescription: 'more details'\\nid: 'unique_ID'\\ntasks:\\n  - id: 'unique_id_of_the_task'\\n    fn: com.gs.return\\n    args: <%  %>\n```\n\n----------------------------------------\n\nTITLE: Handling Event Workflow with Godspeed Systems in YAML\nDESCRIPTION: This YAML snippet describes a workflow that handles an event by executing a task which returns a response. The response data combines a custom message with an input body parameter. It demonstrates the usage of placeholders within YAML to dynamically inject values.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Returning response\ntasks:\n  - id: first_task\n    fn: com.gs.return\n    args: \n      data: <% 'Its working + inputs.body.name %>\n      headers:\n        custom_response_header: something\n      # code: 200 Default value from com.gs.return is success and code is 200\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Client Generator\nDESCRIPTION: Details the configuration of the `generator client` block in the Prisma schema. It's crucial to set the `output` field to `./prisma-clients/<name_of_your_prisma_file>` to specify the location for the generated Prisma client. The `previewFeatures` field can optionally enable features like metrics for telemetry.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CRUD_API.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  output          = \"./prisma-clients/lms\"  //just change the name of prisma schema here \n  previewFeatures = [\"metrics\"]  // to be used in case you want to generate metrics for prisma queries for telemetry. \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Godspeed Kafka Event for Consumer YAML\nDESCRIPTION: YAML configuration for defining a Kafka consumer event in `src/events/kafka_pub.yaml`. The event key follows the format `kafka.{Topic}.{GroupId}` (e.g., `kafka.publish-producer1.kafka_proj`). When a message arrives on the specified topic for this group, it triggers the `kafka_consume` function, passing the message payload as input.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Kafka Eventsource.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# event to consume data from Topic\nkafka.publish-producer1.kafka_proj: // event key\n  id: kafka__consumer\n  fn: kafka_consume\n  body:\n    description: The body of the query\n    content:\n      application/json: \n        schema:\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Axios HTTP Task Workflow in Godspeed (YAML)\nDESCRIPTION: This YAML workflow snippet shows how to define a Godspeed function that calls an API endpoint using the Axios datasource. It demonstrates passing custom headers, request parameters, post body data, and timeout via the args directive. The snippet highlights how standard Axios request options are mapped in Godspeed tasks. Place this configuration under your 'src/functions/sample.yaml' file to build a functional, parameterized API call. Dependencies include a valid axios datasource and proper endpoint definitions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Axios Datasource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: sample\ntasks:\n  - id: first_task\n    fn: datasource.api.get./api/items\n  # axios request configuration options, such as headers, params, data and timeout can be directly passed as arguments (args).\n    args:\n      headers:\n        'X-Requested-With': 'XMLHttpRequest'\n      params:\n        ID: 12345\n      data:\n        firstName: 'Fred'\n      timeout: 1000\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Iteration with com.gs.each_parallel in YAML\nDESCRIPTION: This snippet demonstrates how to use the com.gs.each_parallel function to execute tasks in parallel for each value in an array. The final output is an array of the results from the last executed task of each iteration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: For each sample\n  description: Here we transform the response of for loop\n  tasks:\n    - id: each_parallel_step1\n      description: for each\n      fn: com.gs.each_parallel\n      value: [1, 2, 3, 4]\n      tasks:\n        - id: each_task1\n          fn: com.gs.transform\n          args: <% 'each_task1 ' + task_value %>\n    - id: each_parallel_step2\n      description: return the response\n      fn: com.gs.transform\n      args: <% outputs.each_parallel_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Error Handling in com.gs.each_sequential in YAML\nDESCRIPTION: Demonstrates error handling in com.gs.each_sequential function, showing task-level and loop-level error handling options.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: For each sample\n  description: Here we transform the response of for loop\n  tasks:\n    - id: each_sequential_step1\n      description: for each\n      fn: com.gs.each_sequential\n      value: [1, 2, 3, 4]\n      tasks:\n        - id: each_task1\n          fn: com.gs.transform\n          args: <% 'each_task1 ' + task_value %>\n          on_error: # on_error at task level\n            continue: false\n            response: <%Coffee/JS expression%> | String\n      on_error: # on_error at loop level\n        continue: true\n        response: <%Coffee/JS expression%> | String\n    - id: each_sequential_step2\n      description: return the response\n      fn: com.gs.transform\n      args: <% outputs.each_sequential_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Return Functionality with com.gs.return in YAML\nDESCRIPTION: This snippet demonstrates how to use the com.gs.return function to terminate a workflow and return a value. The workflow stops executing when the return statement is called, except in parallel functions where it waits for all child tasks to complete.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Returning hello world\ntasks:\n  - id: return_hello_word\n    fn: com.gs.return\n    args: 'Hello'\n\n  - id: return_with_status\n    fn: com.gs.transform \n    args: <% outputs.return_hello_word.data + inputs.query.word %>\n```\n\n----------------------------------------\n\nTITLE: Defining Comprehensive Request and Response Schema Validation in YAML\nDESCRIPTION: This YAML configuration provides a complete example for an HTTP POST endpoint (`/helloworld`) incorporating schema validation for request parameters (path and query), request body, and the successful (HTTP 200) response. It validates `path_params`, `query_params`, the request body's `name` property, and the response body's `name` property, ensuring all are strings and required where specified.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/validations/schema-validation.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./helloworld:\n  fn: helloworld\n  params:\n    - name: path_params\n      in: path\n      required: true\n      schema:\n        type: string\n    - name: query_params\n      in: query\n      required: true\n      schema:\n        type: string\n\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          required: [name]\n          properties:\n            name:\n              type: string\n\n\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: object\n            required: [name]\n            properties:\n              name:\n                type: string\n```\n\n----------------------------------------\n\nTITLE: Executing Tasks in Series with com.gs.series in YAML\nDESCRIPTION: Shows how to use com.gs.series function to execute tasks sequentially, which is useful for explicit series execution in subworkflows.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Parallel Multiplexing create loan for hdfc api calls\n  tasks:\n    - id: parallel\n      fn: com.gs.series\n      tasks:\n        - id: 1st\n          fn: com.gs.return\n          args: |\n            'parallel task1'\n\n        - id: 2nd\n          fn: com.gs.return\n          args: |\n            'parallel task2'\n    - id: step2\n      fn: com.gs.transform\n      args: |\n        <coffee% {\n          code: 200,\n          data: outputs['1st']\n        } %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Step Workflow with Output Access in YAML\nDESCRIPTION: Demonstrates a two-task workflow. The first task (`sum_step1`) uses a developer-defined function `com.jfs.sum` with arguments `x` and `y`. The second task (`sum_step2`) uses the built-in `com.gs.transform` function to access and return the output of the first task using the `<% outputs.sum_step1 %>` syntax.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/workflow-dsl.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Summing x + y\n  description: Here we sum two hardcoded x and y values. Feel free to try using API inputs from body or params!\n  tasks:\n    - id: sum_step1\n      description: add two numbers\n      fn: com.jfs.sum #This is a developer defined function that takes two arguments, performs addition and returns the total.\n      args:\n        x: 1\n        y: 2\n    \n    - id: sum_step2\n      description: return the response\n      fn: com.gs.transform #Inbuilt function that converts the code written in <%%>.\n      args: <% outputs.sum_step1 %> #we access the first task output and return it.\n```\n\n----------------------------------------\n\nTITLE: Defining a Caching Workflow in Godspeed using YAML\nDESCRIPTION: This YAML snippet defines a workflow named 'cache_wf' with two tasks. Each task calls a datasource API endpoint ('datasource.api.post./anything') with specific arguments and includes caching configuration (key, invalidation, expiration). It demonstrates the reduced boilerplate advantage of using YAML DSL for workflow definition in the Godspeed framework.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: workflow to cache task results\nid: cache_wf\ntasks:\n  - id: cache_step1\n    caching:\n      key: cache_step1\n      invalidate: cache_step2\n      cache_on_failure : false\n      expires: 60\n      force: false\n    fn: datasource.api.post./anything\n    args:\n        data:\n          name: 'hello'\n  - id: cache_step2\n    caching:\n      key: cache_step2\n      cache_on_failure : false\n      expires: 60\n      force: false\n    fn: datasource.api.post./anything\n    args:\n        data:\n          name: 'mastersilv3r'\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger Info and Server URLs in Godspeed http.yaml (YAML)\nDESCRIPTION: Extends the `http.yaml` configuration to include detailed API metadata within the `docs.info` section (title, version, summary, description, contact, license) and define multiple server URLs under `docs.servers`, conforming to the OpenAPI 3.0 specification. This allows for richer API documentation directly configured within the Godspeed eventsource file.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/swagger-specs.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nport: 3000\ndocs:\n  endpoint: /\n  info: # info object as per swagger 3.0 spec\n    title: Sample Godspeed App\n    version: 1.1.0\n    summary: some http calls\n    description: lets play with Godspeed\n    contact:\n      name: API Support\n      url: 'http://www.myfintech.com/support'\n      email: support@myfintech.com\n    license:\n      name: Apache 2.0\n      url: 'https://www.apache.org/licenses/LICENSE-2.0.html'\n  servers:\n    - url: 'http://localhost:3001'\n      description: Public API server\n    - url: 'http://localhost:3001'\n      description: Internal API server\n```\n\n----------------------------------------\n\nTITLE: Basic Project Structure Example\nDESCRIPTION: Shows the directory structure for mappings in a Godspeed project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/mappings.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── config\n└── src\n    └── mappings\n        └── index.yaml\n        └── generate.yaml\n```\n\n----------------------------------------\n\nTITLE: Workflow for Uploading Files Directly from URLs\nDESCRIPTION: This workflow shows how to upload a file directly from a URL without needing to download it first. It specifies the source URL for the file and the HTTP method to retrieve it before uploading to the target endpoint.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: upload document from url\ntasks:\n  - id: upload_url_step1\n    description: upload document from url\n    fn: com.gs.http\n    args:\n      datasource: httpbin\n      data: <% inputs.body %>\n      files:\n        sample:\n          url: https://s3.ap-south-1.amazonaws.com/sample.pdf\n          method: get\n      config:\n        url : /anything\n        method: post\n        headers: \n          Content-Type: 'multipart/form-data'\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Logic with CoffeeScript in Workflow Task (YAML/CoffeeScript)\nDESCRIPTION: This YAML snippet defines a workflow task (`sum`) using `com.gs.transform`. The `args` property contains a multiline CoffeeScript block (`<coffee% ... %>`) that implements conditional logic. It checks for the presence of `inputs.query.name` at runtime and returns a different greeting string accordingly.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: coffeescript\nCODE:\n```\nsummary: test the coffee scripting\nid: coffee_workflow\ndescription: Test the coffee script\ntasks:\n  - id: sum\n    fn: com.gs.transform\n    args: |\n      <coffee% \n        if inputs.query.name\n          return \"Hello Shirisha\"\n        else \n          return \"Hello Developer\"\n      %>\n```\n\n----------------------------------------\n\nTITLE: Example Workflow Caching Specification (YAML)\nDESCRIPTION: This example YAML defines a Godspeed workflow ('cache_wf') with two tasks, each demonstrating caching with Redis. It shows how to assign cache keys, set expiration, control caching on failure, enforce cache bypass, and invalidate other cached results. Place this in workflow configuration files. Inputs specify data sources, payloads, and HTTP methods. Outputs are cached task results for 60 seconds under specified keys, with one step able to invalidate another's cache.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/caching.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: workflow to cache task results\\nid: cache_wf\\ntasks:\\n  - id: cache_step1\\n    caching:\\n      key: cache_step1\\n      invalidate: cache_step2\\n      cache_on_failure : false\\n      expires: 60\\n      force: false\\n    fn: com.gs.http\\n    args:\\n        datasource: httpbin\\n        data:\\n          name: 'hello'\\n        config:\\n          url : /anything\\n          method: post\\n  - id: cache_step2\\n    caching:\\n      key: cache_step2\\n      cache_on_failure : false\\n      expires: 60\\n      force: false\\n    fn: com.gs.http\\n    args:\\n        datasource: httpbin\\n        data:\\n          name: 'cache'\\n        config:\\n          url : /anything\\n          method: post\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ChatGPT Datasource Logic - TypeScript\nDESCRIPTION: Implements a custom datasource logic class (in src/datasources/types/chatgpt.ts) for integrating OpenAI's ChatGPT API with Godspeed. Initializes the OpenAI client using environment variable API key and executes the 'chat' completion based on workflow method parsing. Requires @godspeedsystems/core and openai npm package. Key parameters are prompt, fnNameInWorkflow, model, temperature, and max_tokens. Returns a GSStatus with the AI-generated response. Only supports method 'chat'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\nimport { GSContext,  GSDataSource, GSStatus, logger, PlainObject,} from \"@godspeedsystems/core\";\nimport OpenAI from 'openai';\n\nexport default class DataSource extends GSDataSource {\nprotected async initClient(): Promise<object> {\n  // initialize your client\n  const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n  return client;\n}\n\nasync execute(ctx: GSContext, args: PlainObject): Promise<any> {\n  const client = this.client as OpenAI;\n  const { prompt, meta: { fnNameInWorkflow } } = args;\n  // Parse method from fnNameInWorkflow\n  let method = fnNameInWorkflow?.split(\".\")[2];\n\n  // Validate that client and method are available\n  if (!client) {\n    return new GSStatus(false, 500, \"ChatGPT client is not initialized\");\n  }\n  if (!method) {\n    return new GSStatus(false, 400, \"Method name is missing in fnNameInWorkflow\");\n  }\n\n  // Use destructuring with defaults to get config values\n  const {  model= 'gpt-4o',temperature = 1, max_tokens = 500 } = this.config;\n\n    try {\n      // execute methods\n      if (method === \"chat\") {\n        // Execute ChatGPT completion\n        const response = await client.chat.completions.create({\n          model,\n          messages: [{ role: \"user\", content: prompt }],\n          temperature,\n          max_tokens,\n        });\n        const responseContent = response.choices[0]?.message?.content ?? \"No response generated\";\n        return new GSStatus(true, 200, \"Success\", responseContent);\n      } else {\n        return new GSStatus(false, 400, `Invalid method: ${method}`);\n      }\n    } catch (error) {\n      throw error;\n    }\n}\n}\nconst SourceType = 'DS';\nconst Type = \"chatgpt\"; // this is the loader file of the plugin, So the final loader file will be `types/${Type.js}`\nconst CONFIG_FILE_NAME = \"chatgpt\"; // in case of event source, this also works as event identifier, and in case of datasource works as datasource name\nconst DEFAULT_CONFIG = {};\n\nexport {\n  DataSource,\n  SourceType,\n  Type,\n  CONFIG_FILE_NAME,\n  DEFAULT_CONFIG\n}\n\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Event Configuration for Prisma Model\nDESCRIPTION: YAML configuration for an HTTP GET endpoint that fetches a Post by ID from a MySQL database. This file defines the API route, parameters, and response format.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.get./mysql/post/{id}:\n  summary: Fetch Post\n  description: Fetch Post from database\n  fn: com.biz.mysql.post.one\n  params:\n    - name: id\n      in: path\n      required: true\n      schema:\n        type: string\n  responses:\n    content:\n      application/json:\n        schema:\n          type: object\n```\n\n----------------------------------------\n\nTITLE: Exporting Random Integer Utility Plugin Function (TypeScript)\nDESCRIPTION: Defines and exports a synchronous utility function named 'randomInt' for generating random integers within a specified range. Requires no external dependencies. Parameters 'min' and 'max' set the inclusive bounds, and the output is an integer between them. The function is intended for use as a global plugin, accessed directly by the function name in workflows.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/script-plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function randomInt(min: number, max: number) {\\n    return Math.floor(Math.random() * (max - min + 1)) + min;\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Logic with com.gs.if, com.gs.elif, and com.gs.else in YAML Workflows\nDESCRIPTION: This snippet demonstrates the classic if-elif-else control flow in Godspeed YAML workflows. The implementation evaluates conditions using coffee/js expressions and executes different tasks based on the results.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Returning hello world\ntasks:\n  - id: if\n    fn: com.gs.if\n    condition: <% inputs.query.status == 'Hello' %>\n    tasks:\n      - id: step1\n        description: Return hello world\n        fn: com.gs.return\n        args: 'Hello!'\n\n  - id: elif1\n    description: Return hello world\n    fn: com.gs.elif\n    condition: <% inputs.query.status == 'Hell' %>\n    tasks:\n      - id: step2\n        description: Return hello world\n        fn: com.gs.return\n        args: 'Hell!'\n\n  - id: elif2\n    description: Return hello world\n    fn: com.gs.elif\n    condition: <% inputs.query.status == 'Hel' %>\n    tasks:\n      - id: step3\n        description: Return hello world\n        fn: com.gs.return\n        args: 'Hel!'\n\n  - id: else\n    description: Return hello world\n    fn: com.gs.else\n    tasks:\n      - id: step4\n        description: Return hello world\n        fn: com.gs.return\n        args: 'Hi!'\n```\n\n----------------------------------------\n\nTITLE: Parallel Function (com.gs.parallel) Usage in YAML\nDESCRIPTION: Shows how to use the com.gs.parallel function to execute child tasks in parallel within a workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nid: return4\ntasks:\n  - id: parallel\n    fn: com.gs.parallel\n    tasks:\n      - id: 1st\n        fn: com.gs.return\n        args: |\n          'parallel task1'\n      - id: 2nd\n        fn: com.gs.return\n        args: |\n          'parallel task2'\n  - id: output_task\n    fn: com.gs.return\n    args: <% outputs.parallel.data %>\n```\n\n----------------------------------------\n\nTITLE: Defining Function Name in Godspeed DSL\nDESCRIPTION: Shows how to define a function name that will hold response data as its value.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n__name: step1\n```\n\n----------------------------------------\n\nTITLE: Transforming Data with com.gs.transform in YAML\nDESCRIPTION: Demonstrates the usage of com.gs.transform function to convert data from one format to another using CoffeeScript or JavaScript scripting.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Parallel Multiplexing create loan for hdfc api calls\n  tasks:\n    - id: parallel\n      fn: com.gs.parallel\n      tasks:\n        - id: 1st\n          fn: com.gs.return\n          args: |\n            'parallel task1'\n\n        - id: 2nd\n          fn: com.gs.return\n          args: |\n            'parallel task2'\n    - id: step2\n      fn: com.gs.transform\n      args:\n        code: 200\n        data: <% outputs.step1_switch.data %>\n```\n\n----------------------------------------\n\nTITLE: Authentication Workflow Implementation\nDESCRIPTION: Implementation of an authentication workflow that handles token generation and response transformation\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authentication/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Auth workflow\ntasks:\n    - id: auth_step1\n      description: Hit the authn request\n      fn: datasource.authapi.authenticate.post\n      args:\n        data: <% inputs.query.username %>\n\n    - id: auth_step2\n      description: Transform the response received from authn api\n      fn: com.gs.transform\n      args:\n        headers:\n          Authorization: <% 'Bearer ' + outputs.auth_step1.auth.token %>\n        params:\n          queryid: <% outputs.auth_step1.params.queryid %>\n        statusCodes: <% outputs.auth_step1.status_code %>\n```\n\n----------------------------------------\n\nTITLE: Handling Event Workflow with Godspeed Systems in TypeScript\nDESCRIPTION: This TypeScript function processes events captured from any event source by accessing various properties from the 'ctx' object such as inputs, outputs, and configurations. It logs details through two types of loggers and finally returns a JSON response. Dependencies include `@godspeedsystems/core` for importing `GSContext` and `PlainObject`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, PlainObject } from \"@godspeedsystems/core\";\n\nexport default function (ctx: GSContext, args: PlainObject) {\n    //@ts-ignore\n    const {\n        inputs: {\n            data: {\n                params, body, query, user, headers, files\n            }\n        }, \n        childLogger, \n        logger,\n        outputs,\n        functions, \n        datasources,\n        config,\n        mappings\n    }: {\n        inputs: {\n            data: {\n                params: PlainObject,\n                body: PlainObject,\n                query: PlainObject,\n                user: PlainObject,\n                headers: PlainObject,\n                files: any\n            }\n        }, \n        childLogger: any, // Pino logger with log.attributes set (which you saw in eventsource, event configurations as well)\n        outputs: PlainObject,\n        logger: any, //Pino logger (Plain jain Pino logger without any custom log attributes)\n        functions: PlainObject, // The functions in the `src/functions` folder\n        datasources: PlainObject, // The clients of the datasources you have configured in this proejct \n        config: PlainObject, //Plain JSON of the config folder as per the node-config module\n        mappings: PlainObject //Plain JSON loaded from the mappings folder\n    } = ctx;\n    \n    // Will print with workflow_name and task_id attributes\n    childLogger.info('Server is running healthy');\n    // Will print without workflow_name and task_id attributes\n    logger.info('Inputs object \\n user %o query %o body %o headers %o params %o', user, query, body, headers, params);\n    logger.info('Outputs object has outputs from previous tasks with given ids %o', Object.keys(outputs));\n    logger.info('Datasources object has following datasource clients %o', Object.keys(datasources));\n    logger.info('Total functions found in the project %s', Object.keys(functions).length)\n    \n    return {\n        data: 'Its working! ' + body.name,\n        code: 200,\n        success: true,\n        headers: {\n            custom_response_header: 'something'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Parameters for File Upload Workflow in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a workflow for uploading files with retry functionality. It specifies a maximum of 5 retry attempts with a constant interval of 15 minutes between retries. The workflow uses the HTTP connector to upload files to an endpoint.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/retry.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: upload file\n  id: upload_file\n  tasks:\n    - id: step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      description: upload docfileuments\n      fn: com.gs.http\n      args:\n        datasource: httpbin\n        params:\n        file_key: files\n        files: <% inputs.files %>\n        config:\n          url : /v1/documents\n          method: post\n\n      retry:\n        max_attempts: 5\n        \n        type: constant\n        interval: PT15M\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Workflow in YAML\nDESCRIPTION: This snippet defines a basic workflow with error handling, describing the sequence of tasks and the response for errors. The \"com.gs.return\" function is invoked with arguments, and error attributes are captured for logging.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nsummary: Hello world\ndescription: Hello world example which invokes the com.gs.return workflow\nid: hello_world # needed for better logging visibility\non_error:\n  continue: false\n  log_attributes:  # You can add specific log attributes when an error happens in a task.\n        error_message: <% outputs.transform_error.message %>\n        error_type: 'your custom error type'\n  response:\n    success: false\n    code: 500\n    data: \"Default error\"\ntasks: # tasks to be run in sequence (default is sequence)\n  - id: step1 ## id of this task. Its output will be accessible\n  # to subsequent tasks at `outputs.step1_switch` location. Like in step2 below.\n    fn: com.gs.return\n    args: 'Hello World!' # com.gs.return takes its return value as `args`. Hence the args key.\n```\n\n----------------------------------------\n\nTITLE: Configuring Mem-Cache Datasource in YAML\nDESCRIPTION: Basic configuration for the mem-cache datasource in a YAML file. This file specifies the datasource type as 'mem-cache'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Memcached Datasource.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: mem-cache\n```\n\n----------------------------------------\n\nTITLE: Using Plugins in Workflow Step (YAML)\nDESCRIPTION: YAML configuration snippet illustrating how to invoke custom plugins (`randomInt`, `time_epoch_convertEpochToDate`, `epoch_convertEpoch`) within a workflow step using expression syntax (`<% %>`). It shows dynamic data generation for an HTTP request payload, referencing workflow inputs (`inputs.body.datetimestamp`). Assumes a workflow engine capable of executing these plugins and the `com.gs.http` function.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  - id: httpbinCof_step1\n    description: Hit http bin with some dummy data. It will send back same as response\n    fn: com.gs.http\n    args:\n      datasource: httpbin\n      params:\n      data:\n        personal_email_id: 'ala.eforwich@email.com'\n        id: <% 'UID-' + randomInt(1,9) %>\n        date: <% time_epoch_convertEpochToDate(inputs.body.datetimestamp) %>\n        default_date: <% epoch_convertEpoch(inputs.body.datetimestamp) %>\n      config:\n        url : /anything\n        method: post\n```\n\n----------------------------------------\n\nTITLE: Formatting API Endpoint for Swagger UI Access - Godspeed HTTP Service - Plaintext\nDESCRIPTION: This plaintext snippet provides the URL template for accessing the Swagger UI in a Godspeed project. It shows the general format with customizable base URL, port, and endpoint, and gives a localhost example. No dependencies are required. This is helpful for users to locate or share the API documentation and testing interface.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/create-api.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://<BASE_URL>:<PORT>/<http_docs_endpoint>` deafult example,  http://localhost:3000/api-docs\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Definition for the Data Source\nDESCRIPTION: YAML function definition for integrating the custom data source into workflows. It specifies the task and argument mapping for the data source execution.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-datasource-plugin2.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: \"Fetch AI response\"\ntasks:\n  - id: request_chatgpt\n    fn: datasource.gpt.execute\n    args:\n      prompt: <% inputs.body.prompt %>\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in Hooks Workflow in Yaml\nDESCRIPTION: This example demonstrates accessing the datasource context within the 'before_method_hook' or 'after_method_hook' workflows using '<% config.context %>'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/before-and-after-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: 'hook workflow for testing'\nid: logging_input_output\ntasks: \n  - id: audit_log\n    fn: com.gs.transform\n    args:\n      request: <% config.context %>\n      response: <% outputs %>\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Bucket Interaction in TypeScript Workflow\nDESCRIPTION: This TypeScript function demonstrates interaction with an AWS S3 bucket within a Godspeed workflow. It asynchronously executes a datasource method with specified arguments and handles responses.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/AWS Datasource.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, GSDataSource, GSStatus } from \"@godspeedsystems/core\";\n\nexport default async function (ctx: GSContext, args: any) {\n    const ds: GSDataSource = ctx.datasources.aws;\n    const response = await ds.execute(ctx, {\n         //Pass exactly same args as this aws service's method takes\n        ...args,\n        //Along with args, pass meta object\n        // meta can contain {entityName, method}\n        meta: {entityName: 's3', method: 'listBuckets'},\n        //Or meta can contain {fnNameInWorkflow} which is same as \n        //the 'fn' that we write when invoking datasource from yaml workflow\n        //For example, this will also work\n        //meta: {fnNameInWorkflow: 'datasource.aws.s3.listBuckets'}\n    });\n    return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Metrics in Workflow Tasks - YAML\nDESCRIPTION: Defines a YAML DSL specification that allows embedding custom metrics at the task level in workflow definitions. Supports Prometheus metric types (`counter`, `gauge`, `histogram`, `summary`) and allows configuration of functions and labels, with parameters like `inc`, `dec`, `set`, `observe`, and `timer`. Requires integration with a Prometheus-compatible exporter and support for interpreting the metric scripts. Inputs include metric name, type, labels, and functions. Outputs are registered metrics as part of workflow execution. Supports referencing task inputs/outputs in scripts.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/custom-metrics-logs-traces.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n- name: metric_name\n  type: counter|gauge|histogram|summary\n  labels: \n    label1: val1\n    label2: val2\n          \n  # following functions depending on the metric type and all of them could be scripts, can use inputs/outputs\n  inc: 10\n  dec: 10\n  set: 100\n  observe: 2000\n  timer: true|false(boolean) starts at the beginning of workflow/task and ends at the end of workflow/task\n```\n\n----------------------------------------\n\nTITLE: Accessing Workflow Inputs using Scripting (YAML/JS)\nDESCRIPTION: This YAML snippet defines a workflow task (`sum_step1`) that uses the `com.gs.transform` function. The `args` property contains an inline script (`<% %>`) that accesses request body inputs (`inputs.body.x`, `inputs.body.y`) at runtime and performs an addition operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Summing x + y\ndescription: Here we sum two hardcoded x and y values. Feel free to try using API inputs from body or params!\ntasks:\n  - id: sum_step1\n    description: add two numbers\n    fn: com.gs.transform\n    args: <% inputs.body.x + inputs.body.y %>\n```\n\n----------------------------------------\n\nTITLE: Switch Case Execution Using Godspeed Framework (YAML)\nDESCRIPTION: The 'com.gs.switch' function facilitates classic switch-case operations by evaluating a runtime expression and executing corresponding cases. It allows task execution based on conditional matching. Dependencies involve 'com.gs.return' and HTTP triggers. Inputs are expressions and cases via HTTP body; outputs include matched case execution results. Limits to matching provided cases; defaults can handle unmatched scenarios.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  http.post./test/switch:\n  summary: switch\n  description: switch\n  fn: switch\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n  responses:\n    content:\n      application/json:\n        schema:\n          type: object\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: A \"switch\" statement activates specific cases when its conditional value matches any of those cases.\nid: switch\ndescription: \ntasks:\n  - id: step1\n    fn: com.gs.switch\n    value: <%inputs.body.condition%>\n    cases:\n      FIRST:\n        id: 1st\n        fn: com.gs.return\n        args: \"sukumar\"\n      SECOND:\n        id: 2nd\n        fn: com.gs.return\n        args: \"yaswanth\"\n      THIRD:\n        id: 3rd\n        fn: com.gs.return\n        args: \"pavan\"\n    defaults:\n      id: default\n      fn: com.gs.return\n      args: <\"all\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Outputs from GSContext in JavaScript\nDESCRIPTION: Explains how to access previously executed task outputs inside a workflow function via the outputs property of GSContext. This JavaScript example retrieves the output for a given task by its ID. Requires a multi-task Godspeed workflow; outputs are available from prior steps for dependent logic.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/native-language-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  const {outputs} = ctx;\n  const firstTaskOutput = outputs[firstTaskId]\n```\n\n----------------------------------------\n\nTITLE: Custom on_error Logging in Workflow Tasks - YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify custom log attributes for workflow/task errors. By setting 'on_error.log_attributes', errors at runtime will trigger logs containing user-defined metadata (like error_type or error_message), thus aiding faster diagnostics. The snippet illustrates attributes placement within the workflow config for specialized error tracking.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: add custom error logs on workflow\\nid: validation_error\\ntasks:\\n  - id: error_transform\\n    fn: com.biz.error_log\\non_error:\\n  log_attributes:\\n    error_type: \"enter your custom error type here\"\\n    error_message: \"xyz value is required\"\n```\n\n----------------------------------------\n\nTITLE: Godspeed gen-crud-api Command Output Example\nDESCRIPTION: Illustrates the typical output and interactive prompt displayed when running the `godspeed gen-crud-api` command. It welcomes the user to Godspeed and asks them to select the specific Prisma schema file(s) for which to generate the CRUD APIs.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CRUD_API.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n\n> blog-app@1.0.0 gen-crud-api\n> npx @godspeedsystems/api-generator\n\nSelect datasource / schema to generate CRUD APIs\n(x) lms.prisma\n( ) For all\n( ) Cancel\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Handler Function in Typescript\nDESCRIPTION: This Typescript snippet shows how to define an event handler function named `greet` within the Meta Framework. It accepts the framework context (`GSContext`), accesses the `name` property from the query parameters within the input data (`ctx.inputs.data.query.name`), and returns a personalized greeting string. It uses `module.exports` to make the function available.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = function greet(GSContext: ctx){\n    return `Hello ${ctx.inputs.data.query.name}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Datasource Configuration in Godspeed (YAML)\nDESCRIPTION: This YAML snippet demonstrates the configuration of multiple AWS services for use as datasources in the Godspeed framework. It includes settings for different AWS services (S3, Lambda, DynamoDB, etc.), credential management, and custom client mappings. Essential for initializing AWS connections in Godspeed apps. Key parameters: type, default_client_config (with access keys), service definitions, and optional overrides. Requires Godspeed project setup and valid AWS credentials.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntype: aws\ndefault_client_config: #any aws specific configurations\n  credentials:\n    accessKeyId: <%config.accessKeyId%>\n    secretAccessKey: <%config.secretAccessKey%>\n# service type is the name of the npm module for ex. @aws-sqk/client-dynamodb or @aws-sqk/client-s3 etc\n# The `types` key can have service type to sdk's client names mappings when coding\ntypes: #mappings\n  dynamodb: DynamoDB\n  s3: S3\n  lambda: Lambda\n  ssm: SSM\n  sqs: SQS\nservices:\n  s3:\n    type: s3\n    config:\n      region: <%config.anotherAccessKeyId%>\n      credentials:\n        accessKeyId: <%config.anotherAccessKeyId%>\n        secretAccessKey: <%config.anotherSecretAccessKey%>\n  s3_1: #uses default config\n    type: s3\n  dynamodb:\n    type: dynamodb\n  sqs:\n    type: sqs\n  ssm:\n    type: ssm\n  lamdba:\n    type: lambda\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub OAuth2 Environment Variables in .env\nDESCRIPTION: Defines the required environment variables for GitHub OAuth2 integration in a Godspeed project. Includes Client ID, Client Secret, Callback URL, authentication and callback routes, success/failure redirect URLs, and a session secret. These variables are typically stored in a `.env` file at the project root.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/oauth2-authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nGITHUB_CLIENT_ID= \"your_client_id\"\nGITHUB_CLIENT_SECRET= \"your_client_secret\"\nGITHUB_CALLBACK_URL= \"your_callback_url\" e.g http://localhost:4000/auth/github/callback\nGITHUB_AUTH_ROUTE  =  \"/auth/github\"\nGITHUB_CALLBACK_ROUTE = \"/auth/github/callback\"\nGITHUB_SUCCESS_REDIRECT_URL = \"/verify/user\"\nGITHUB_FAILURE_REDIRECT_URL = \"/error\"\n# Session Secret\nSESSION_SECRET = \"your_secret\"\n```\n\n----------------------------------------\n\nTITLE: Dynamically Calling Functions Based on Input in YAML Workflow\nDESCRIPTION: Shows a workflow where the first task (`transform_fn_step1`) uses `com.gs.transform` with embedded JavaScript (`<js% ... %>`) to determine which function to call next based on `inputs.body.fn`. The second task (`call_fn_step2`) dynamically calls the function specified by the first task's output (`<% outputs.transform_fn_step1.data %>`) and passes an input argument (`<% inputs.body.name %>`). This highlights dynamic execution paths based on runtime data.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/workflow-dsl.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Invoke an API and convert the custom function provided in the arguments into the YAML functions format.\ntasks:\n    - id: transform_fn_step1\n      description: decide which function to call in next step\n      fn: com.gs.transform\n      args: |\n        <js%\n          if (inputs.body.fn == 'sum') {\n            return 'com.jfs.sum_workflow'\n          } else {\n            return 'com.jfs.helloworld'\n          }\n        %>\n    - id: call_fn_step2\n      description: call fn returned in transform_fn_step1\n      fn: <% outputs.transform_fn_step1.data %>\n      args:\n        name: <% inputs.body.name %>\n```\n\n----------------------------------------\n\nTITLE: Setting Up After Hook in Yaml\nDESCRIPTION: This snippet provides configuration for an after_method_hook for a datasource of type 'api'. It triggers a custom workflow after executing a method on the datasource.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/before-and-after-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: api\nschema:\nbase_url: <% config.httpbin.base_url %>    \nafter_method_hook: com.jfs.audit_log_workflow\n```\n\n----------------------------------------\n\nTITLE: Example POST Request Body for ChatGPT Endpoint - JSON\nDESCRIPTION: Shows the JSON payload structure required to submit to the ChatGPT HTTP endpoint for testing purposes. No dependencies outside HTTP protocol. Input is a prompt string, output is the request accepted by the endpoint for AI processing.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prompt\": \"How to create an API in godspeed ?\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Nodemailer Datasource in Godspeed (YAML)\nDESCRIPTION: This YAML snippet configures Nodemailer as a mail datasource in the Godspeed framework by specifying necessary SMTP credentials. The 'user' and 'pass' fields should be populated with the actual email and app password (not plain text passwords) for authentication with the email provider. This configuration is required for the Godspeed Nodemailer Plugin to establish secure, authenticated email sending capability.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Nodemailer Datasource.md#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntype: mail\\nuser: 'godspeed@gmail.com'\\npass: 'rmeb bjak xcam xkub'\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in YAML Files with Scripting\nDESCRIPTION: The syntax to reference environment variables within YAML configuration files in Godspeed projects using scripting notation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/env.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n<% process.env.VARIABLE_NAME %>   //with scripting\n```\n\n----------------------------------------\n\nTITLE: Creating an API Event Definition for MongoDB via YAML (Godspeed Events, YAML)\nDESCRIPTION: This YAML snippet defines an HTTP GET endpoint ('/mongo/post/{id}') for fetching a single Post from a MongoDB database within the Godspeed framework. It specifies the handler function, expected path parameter ('id'), and the JSON response structure. It is expected to be placed in 'src/events/mongo.yaml'. The event relies on a corresponding workflow for implementation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.get./mongo/post/{id}:\n  summary: Fetch Post\n  description: Fetch Post from database\n  fn: com.biz.mongo.post.one\n  params:\n    - name: id\n      in: path\n      required: true\n      schema:\n        type: string\n  responses:\n    content:\n      application/json:\n        schema:\n          type: object\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Function (com.gs.http) Usage in YAML\nDESCRIPTION: Illustrates how to use the com.gs.http function to send HTTP requests and handle responses in a workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: agreement esign\n  id: agreement_esign\n  tasks:\n    - id: step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      description: agreement esign\n      fn: com.gs.http\n      params: # query params to be sent in the request\n        id: 123\n      args:\n        datasource: httpbin\n        config:\n          url : /v1/loan-application/<% inputs.params.lender_loan_application_id %>/agreement/esign/initiate\n          method: post\n\n      retry:\n        max_attempts: 5\n        type: constant\n        interval: PT15M\n\n      on_error:\n        continue: true\n\n    - id: step2\n      fn: com.gs.transform\n      args: |\n          <%if outputs.step1.data.success then outputs.step1.data else {\n              code: outputs.step1.code,\n              success : false,\n              data: {\n                error_data: outputs.step1.data['error'],\n                uuid: outputs.step1.data.uuid,\n                status_code_error: outputs.step1.data.status_code_error,\n                event: outputs.step1.data.event\n              }\n          }%>\n```\n\n----------------------------------------\n\nTITLE: Sample Prisma Schema for SQL Server Database\nDESCRIPTION: Provides a complete example of a Prisma schema for SQL Server, including datasource configuration, client generator settings, and model definitions for User and Post entities.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLServer.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlserver\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./prisma-clients/sqlserver\"\n  previewFeatures = [\"metrics\"]\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: ElasticGraph Collection Settings Configuration\nDESCRIPTION: YAML configuration file defining batch sizes and timeouts for different ElasticSearch operations in the collect feature\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n[batchSizes]\nmsearch = 200\nindex = 200\nmget = 200\nget = 200\nsearch = 200\nbulk = 200\n[timeouts] #in milliseconds\nindex = 30\nget = 30\nbulk = 30\nmget = 30\nmsearch = 30\nsearch = 30\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Schema Validation in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define the schema for validating the request body of an event, following OpenAPI specifications. It specifies the content type as 'application/json', defines the structure as an 'object', lists required properties (none in this example), and details individual properties like 'dob' with its type, format, and pattern constraints. If validation fails against this schema, the framework returns an HTTP 400 status code.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbody:\n  content:\n    application/json:\n      schema:\n        type: 'object'\n        required: []\n        properties:\n          dob:\n            type: 'string'\n            format : 'date'\n            pattern : \"[0-9]{4}-[0-9]{2}-[0-9]{2}\"\n```\n\n----------------------------------------\n\nTITLE: Using Built-in JavaScript Modules in YAML Workflow\nDESCRIPTION: Demonstrates the use of built-in JavaScript modules (fs in this case) within a workflow task for S3 file upload.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: upload s3\ntasks:\n  - id: step1\n    description: upload s3\n    fn: com.gs.aws\n    args:\n      datasource: aws_s3\n      params:  # fs is used directly in scripting in Body\n        - Bucket: 'godspeedbucket'\n          Key: 'file4.yml'\n          Body: <% fs.createReadStream(inputs.files[0].tempFilePath) %>\n      config:\n        service: S3\n        method: putObject\n```\n\n----------------------------------------\n\nTITLE: Adding a Specific Godspeed Plugin via CLI (Shell)\nDESCRIPTION: This command directly adds a specified Godspeed plugin to the project without an interactive prompt. Replace `<plugin-name>` with the actual name of the plugin you wish to install (e.g., `cron-as-eventsource`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Overview.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed plugin add <plugin-name>\n```\n\n----------------------------------------\n\nTITLE: Executing an Axios Request from a Godspeed Workflow (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the Axios datasource from within a Godspeed function. It accesses the datasource (ctx.datasources.api), and makes an HTTP GET request to '/api/items' using the execute method, passing method, URL, and request payload. The result of the API call is returned. You need the Godspeed core modules and Godspeed datasource setup to use this code. Arguments for method, request data, and expected structure are specified. The main output is the API response object.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Axios Datasource.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { GSContext, GSDataSource, logger, PlainObject } from \"@godspeedsystems/core\";\n\nexport default async function (ctx: GSContext, args: {loan_offer: PlainObject, pan_number: string}) {\n    const client: GSDataSource = ctx.datasources.api;\n\n    const res =  await client.execute(ctx, {\n        meta: {\n            method: 'get',\n            url: '/api/items',\n        },\n        data: args\n    });\n    return res;\n};\n```\n\n----------------------------------------\n\nTITLE: Calling Mongoose Function from TypeScript Workflow (Option 1)\nDESCRIPTION: This TypeScript code demonstrates calling a Mongoose function (`findOne`) directly on the datasource model (`ds.SomeModel.findOne`) from within a Godspeed TS/JS workflow function. It handles potential errors using a try/catch block and manually constructs the response object with appropriate status codes (200 for success, 500 for error). It also shows how to initialize default arguments if none are passed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, GSDataSource, GSStatus } from \"@godspeedsystems/core\";\n\n// Option 1: \n// Calling function on Mongoose model directly and sending data with status code\n// Here you handle errors/try/catch yourself\nexport default async function (ctx: GSContext, args: any) {\n    const ds: GSDataSource = ctx.datasources.mongoose;\n    // If this function is called by another function (yaml or JS), the caller may have passed args object. In case not, then initialize args yourself.\n    args = args || [{name: 'mastersilv3r'}, 'name age', {}];\n    try {\n      const response = ds.SomeModel.findOne(...args);\n      return {\n        code: 200,\n        data: response\n      }\n      //return response; Framework will automatically add code: 200 in case of HTTP\n    } catch (err: any) {\n      ctx.childLogger.error(`Found error in Mongoose query ${err}`);\n      return {\n        code: 500,\n        data: {\n          error: err,\n          message: err.message\n        }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Mongoose findOne from YAML Workflow (Single Arg)\nDESCRIPTION: This YAML snippet demonstrates a Godspeed workflow task that calls the `findOne` function on the `SomeModel` Mongoose model via the `mongoose` datasource. It passes a single argument, the query object `{\"name\": \"mastersilv3r\"}`, directly within the `args` property.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nid: mongoose_workflow\ntasks:\n  - id: first_task\n    fn: datasource.mongoose.SomeModel.findOne\n    args: {\"name\": \"mastersilv3r\"} #Fun fact: YAML acceptes JSON as well.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cron Eventsource in TypeScript\nDESCRIPTION: Provides the TypeScript implementation for a custom Cron eventsource, extending `GSEventSource`. The `initClient` method initializes and returns the `node-cron` library itself. The `subscribeToEvent` method parses the cron schedule and timezone from the `eventKey`, uses the `node-cron` client to schedule a task, and calls the `processEvent` callback function with a newly created `GSCloudEvent` whenever the schedule triggers.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {GSEventSource, GSCloudEvent,PlainObject, GSStatus, GSActor } from \"@godspeedsystems/core\";\nimport cron from \"node-cron\";\n\nexport default class EventSource extends GSEventSource {\nprotected initClient(): Promise<PlainObject> {\n    return Promise.resolve(cron);\n}\nsubscribeToEvent(\n    eventKey: string,\n    eventConfig: PlainObject,\n    processEvent: (\n    event: GSCloudEvent,\n    eventConfig: PlainObject\n    ) => Promise<GSStatus>\n): Promise<void> {\n    let [,schedule, timezone] = eventKey.split(\".\");\n    let client = this.client;\n    if (client) {\n    try {\n      client.schedule(\n          schedule,\n          async () => {\n            const event = new GSCloudEvent(\n              \"id\",\n              eventKey,\n              new Date(),\n              \"cron\",\n              \"1.0\",\n              {},\n              \"cron\",\n              new GSActor(\"user\"),\n              {}\n            );\n            await processEvent(event, eventConfig);\n            return Promise.resolve()\n          },\n          {\n            timezone,\n          }\n        );\n      } catch (err) {\n        console.error(err);\n        throw err;\n      }\n    }\n    return Promise.resolve(); \n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Workflow for MongoDB Read (Godspeed Workflows, YAML)\nDESCRIPTION: This YAML file defines a workflow for fetching a single Post document from the MongoDB datasource, utilizing the Prisma client with Godspeed. It configures the workflow to pass the request parameter 'id' to a 'findUnique' query on the Post model. The args use Godspeed's templating syntax to inject input parameters, and the workflow is referenced by event handlers in the system.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Fetch Post\ntasks:\n  - id: mongo_post_one\n    fn: datasource.mongo.Post.findUnique\n    args:\n      where:\n        id: <% inputs.params.id %>\n```\n\n----------------------------------------\n\nTITLE: Building the Godspeed Project\nDESCRIPTION: Runs the `godspeed build` command to compile and package the Godspeed project for deployment. The output artifacts are typically placed in a `/dist` directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n godspeed build\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logs in GodSpeed YAML\nDESCRIPTION: Example configuration showing how to create custom logs before and after a task execution. Demonstrates setting log levels, messages, and attributes, which are formatted in OTEL format.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n    - id: httpbin_step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      name: http bin step\n      description: Hit http bin with some dummy data. It will send back same as response\n      fn: com.gs.http\n      logs:\n        before:\n          level: error\n          message: 'Hello'\n          params: \n            - key1: v1\n              key2: v2\n            - v1\n          attributes: \n            request: <%inputs.query%>\n        after:\n          level: error\n          message: 'World'\n          params: \n            key1: v1\n            key2: v2\n          attributes: \n            customer_name: <% outputs.httpbin_step1.data.json.customer_name %> \n      args:\n        datasource: httpbin\n        params: <% inputs.query %>\n        data: <% inputs.body %>\n        config:\n          url : /anything\n          method: post\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Workflow Tasks in YAML\nDESCRIPTION: Example of defining multiple authorization tasks in a workflow using YAML DSL. It includes steps for enriching context, fetching rules, and evaluating them.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthz: \n  - id: enrich_context\n    summary: |\n        Enrich user information based on his parsed JWT, \n        from a policy engine, DB, some datasource\n    fn: com.biz.enrich_user_context \n    args: \n      success: true\n  # if above task returns GSStatus.success==true\n  - id: fetch_rules\n    summary: |\n      in case we need dynamically fetched and evaluated rules \n      from a rule engine like Drools or JRE rule engine storing rules\n    fn: com.biz.load_dynamic_rules\n  # if above task returns GSStatus.success==true or just true, continue to next task and so on\n  - fn: com.gs.evaluate_gre\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cron Workflow in Godspeed\nDESCRIPTION: Workflow definition that gets executed by the cron job every minute. This YAML file defines a simple workflow that returns a static message using the com.gs.return function.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Cron Eventsource.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: this workflow will be running every minute\ntasks:\n  - id: print\n    description: print for every minute\n    fn: com.gs.return\n    args:\n      data: HELLO from CRON\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database Provider in Prisma Schema\nDESCRIPTION: A basic Prisma schema configuration that sets up a MySQL database connection using an environment variable. This configuration is required to establish a connection to the database.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db { \n  provider = \"mysql\"      // name of database provider\n  url      = env(\"DB_URL\")  // DB_URL string will be added in .env file\n  }\n```\n\n----------------------------------------\n\nTITLE: Godspeed CLI versions command\nDESCRIPTION: The `versions` command of Godspeed CLI shows all available versions of `gs_service`. This allows users to choose which version to use for their project during creation or update.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ godspeed versions\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|\nlatest\n1.0.0\n1.0.1\n1.0.10\n1.0.11\n1.0.12\n1.0.13\n1.0.2\n1.0.3\n1.0.4\n1.0.5\n1.0.6\n1.0.7\n1.0.8\n1.0.9\nbase\ndev\nv1.0.13\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Schema Validation in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a JSON schema for validating the request body of an HTTP POST endpoint (`/helloworld`). It specifies the body must be a JSON object (`type: object`), requires a `name` property (`required: [name]`), and defines the `name` property's type as string (`type: string`). This schema is used by the framework (likely with AJV) to validate incoming requests; failure results in a 400 error.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/validations/schema-validation.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./helloworld:\n  fn: helloworld\n  body:\n    content:\n      application/json:\n        schema:\n          type: object # type of the request body\n          required: [name] # Here make the properties mandatory ,can add multiple variable names\n          properties: # we can add properties that we get in body\n            name: # property name\n              type: string # property type\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios DataSource in Godspeed (YAML)\nDESCRIPTION: This YAML configuration snippet defines a datasource named 'api' which uses the Axios plugin. It specifies core properties such as base_url, logging, authentication method with token refresh, default headers, and detailed retry policies for error handling. Modifications should be made to match specific application use-cases. The config must be placed in your project (e.g., 'src/datasources/api.yaml'), and requires the Godspeed framework and axios-as-datasource plugin. Inputs include authn function references, API tokens, and custom mapping variables.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Axios Datasource.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  type: axios\n  base_url: https://httpbin.org\n\n  # print all api calls in curl format\n  curlifiedLogs: true \n\n  # Authentication of API calls with token refresh logic\n  authn: \n    fn: my_bank.authn\n    refreshOn:\n      statusCode: [401]\n\n  # Common headers to be set in all API calls\n  headers:\n    Content-Type: application/json\n    Cookie: <% mappings.my_bank.auth_workflow_cookie %>\n    Authorization: <% `Bearer ${config.my_bank.apiToken}` %>    # to use Bearer token \n\n  # Retry logic for failed API calls for ex on Internal server errors or request timeouts\n  retry:\n      when: #the condition\n        status: [500, 503] # an array or single value of codes (optional). Default 500\n        message: my custom expected message for retry #And (optionally) when response has this message\n      max_attempts: 5\n      type: constant # or random, exponential\n      interval: PT15s\n      # type: exponential\n      # min_interval: PT5s\n      # max_internal: PT15s\n      # type: random\n      # min_interval: PT5s\n      # max_internal: PT15s\n```\n\n----------------------------------------\n\nTITLE: Adding Godspeed Kafka Plugin via CLI\nDESCRIPTION: Demonstrates using the Godspeed CLI command `godspeed plugin add` to install the Kafka plugin. The user navigates the interactive prompt and selects the `@godspeedsystems/plugins-kafka-as-datasource-as-eventsource` option.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Kafka Eventsource.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> godspeed plugin add\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────┬────────────────────────────────────────────────────────────────────┐\n│      │ Name                               │ Description                                                        │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│  ◯   │ prisma-as-datastore                │ Prisma as a datasource plugin for Godspeed Framework.              │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│  ◯   │ aws-as-datasource                  │ aws as datasource plugin for Godspeed Framework                    │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│  ◯   │ excel-as-datasource                │ excel as datasource plugin for Godspeed Framework                  │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│  ◯   │ mailer-as-datasource               │ mailer as datasource plugin for Godspeed Framework                 │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ kafka-as-datasource-as-eventsource │ kafka as datasource-as-eventsource plugin for Godspeed Framework   │\n└──────┴────────────────────────────────────┴────────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Task-level Axios Retry Override in Godspeed Workflow (YAML)\nDESCRIPTION: This YAML snippet shows how to override Axios retry strategy at the workflow task level. It sets custom status codes and message triggers for retries, limits retry attempts, and switches the retry type to exponential with defined min and max intervals. Place this in your function workflow yaml to provide task-specific error recovery. Inherits all Godspeed datasource and workflow dependencies. Key properties for fine-tuned error handling are supplied in the 'retry' block under args.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Axios Datasource.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nid: some_workflow\ntasks:\n  - id: post-anything\n    # Fetching loan offers from rule engine for the given bank and pan card\n    fn: datasource.api.post./anything\n    args:\n      data:\n        data: <%inputs.body.data%>\n      headers:\n        Content-Type: application/json\n    on_error:\n      continue: false\n    retry: # By default the datasource has constant retry set in its yaml. Here we override the retry to exponential\n      when: # an and condition between status and message.\n        status: [500, 503] # an array or single value of codes (optional). Default 500\n        message: Retry later # Retry when response has this message\n      max_attempts: 5\n      type: exponential\n      min_interval: PT5s\n      max_internal: PT15s\n```\n\n----------------------------------------\n\nTITLE: Datastore Function (com.gs.datastore) Usage in YAML\nDESCRIPTION: Demonstrates how to use the com.gs.datastore function for CRUD operations on supported datastores in a workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Create and read data\ntasks:\n  - id: step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n    description: Create entity from REST input data (POST request)\n    fn: com.gs.datastore\n    args:\n      datasource: mongo # Which ds to use.\n      data: <% inputs.body + {extra_field: its_value} %>\n      config:\n        method: <% inputs.params.entity_type %>.create\n  - id: step2 # the response of this will be accessible within the parent step key, under the step1 sub key\n    description: test again\n    fn: com.gs.datastore\n    args:\n      datasource: mongo # Adding this knows which ds/model we are talking about here.\n      config: # Similar approach as Axios\n        method: <% inputs.params.entity_type %>.findMany\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs with Godspeed\nDESCRIPTION: Shows the Godspeed CLI command `godspeed gen-crud-api` used to automatically generate basic Create, Read, Update, and Delete (CRUD) API endpoints, events, and workflows. This generation is based on the models defined in the specified Prisma schema file (e.g., `./src/datasources/planetscale.prisma`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PlanetScale.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Executing a Custom JS/TS Workflow from YAML Workflow\nDESCRIPTION: Demonstrates how to invoke a custom JavaScript/TypeScript function from within a YAML workflow. The function can be stored in the src/functions folder, with its path becoming its fully qualified name.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Custom workflow invocation\n  id: custom_function\n  tasks:\n    - id: step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      description: custom_fn\n      fn: com.biz.custom_function # Can be JS/TS workflow in src/com/xyz directory with filename being custom.{js|ts}\n      args:\n        arg1: 'hello world'\n        arg2: 'hello again'\n```\n\n----------------------------------------\n\nTITLE: Conditional Flow Control Example\nDESCRIPTION: Demonstrates the usage of if-elif-else control flow in Godspeed. Shows how to implement conditional logic based on query parameters with multiple condition branches.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Returning hello world\ntasks:\n  - id: if\n    fn: com.gs.if\n    condition: <% inputs.query.status == 'Hello' %>\n    tasks:\n      - id: step1\n        description: Return hello world\n        fn: com.gs.return\n        args: 'Hello!'\n\n  - id: elif1\n    description: Return hello world\n    fn: com.gs.elif\n    condition: <% inputs.query.status == 'Hell' %>\n    tasks:\n      - id: step2\n        description: Return hello world\n        fn: com.gs.return\n        args: 'Hell!'\n\n  - id: elif2\n    description: Return hello world\n    fn: com.gs.elif\n    condition: <% inputs.query.status == 'Hel' %>\n    tasks:\n      - id: step3\n        description: Return hello world\n        fn: com.gs.return\n        args: 'Hel!'\n\n  - id: else\n    description: Return hello world\n    fn: com.gs.else\n    tasks:\n      - id: step4\n        description: Return hello world\n        fn: com.gs.return\n        args: 'Hi!'\n```\n\n----------------------------------------\n\nTITLE: Defining Response Schema Validation in YAML\nDESCRIPTION: This YAML snippet shows how to define the schema for validating the response of an event handler, specifically for a successful (200 OK) response. It adheres to the OpenAPI specification, defining the content type, schema structure (object), properties ('application_id' as a required string), disallowing additional properties, and providing an example response payload. If the actual response from the handler fails validation against this schema, the framework returns an HTTP 500 status code.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresponses: #Output data defined as per the OpenAPI spec\n  200:\n    description:\n    content:\n      application/json: # For ex. application/json application/xml\n        schema:\n          type: object\n          properties:\n            application_id:\n              type: string\n          additionalProperties: false\n          required: [application_id]\n        examples: # <string, ExampleObject>\n          example1:\n            summary:\n            description:\n            value:\n              application_id: PRM20478956N\n            external_value:\n```\n\n----------------------------------------\n\nTITLE: Enabling Authentication for an Event (YAML)\nDESCRIPTION: Shows how to enable JWT authentication for a specific API endpoint defined in the Godspeed event specification DSL (YAML). Setting `authn: true` enforces that incoming requests to this POST endpoint (`/v1/loan-application/.../initiate.http.post`) must include a valid JWT according to the configured settings. The snippet also defines request/response schemas.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n/v1/loan-application/:lender_loan_application_id/kyc/ckyc/initiate.http.post: \n  authn: true\n  fn: com.biz.kyc.ckyc.ckyc_initiate\n  on_validation_error: com.jfs.handle_validation_error\n  data:\n    schema:\n      body: \n        required: true\n        content:\n          application/json:\n            schema:\n              type: 'object'\n              required: []\n              properties:\n                dob:  { type : 'string', format : 'date', pattern : \"[0-9]{4}-[0-9]{2}-[0-9]{2}\" }\n                meta:\n                  type: 'object'\n      params: \n      - name: lender_loan_application_id\n        in: params\n        required: true\n        allow_empty_value: false\n        schema:\n          type: string\n  responses: #Output data defined as per the OpenAPI spec\n    200:\n      schema:\n        data: \n          required: # default value is false\n          content:\n            application/json:\n              schema: \n                type: object\n                properties:\n                  application_id: \n                    type: string\n                additionalProperties: false\n                required: [application_id]\n```\n\n----------------------------------------\n\nTITLE: Authorization Task with Conditional Logic in JavaScript\nDESCRIPTION: Example of an authorization task using JavaScript to implement conditional logic based on user role.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nauthz:\n  - fn: com.gs.transform\n    id: try_auth_2_authz\n    args: | #assume the below if condition is true, then the control goes inside if block and prints the message\n      <js%  \n        if (inputs.user.role === 'admin') { \n          return {\n            success: true, \n            message: \"Authorization passed\",\n          }\n        } else {\n           return {\n            success: false, \n            message: \"Authorization failed\"\n          }\n        }\n      %>\n```\n\n----------------------------------------\n\nTITLE: Importing Prisma DataSource in TypeScript\nDESCRIPTION: This TypeScript file imports the DataSource class from the Prisma plugin and exports it as the default export. This file establishes the connection between the Godspeed framework and the Prisma plugin.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from '@godspeedsystems/plugins-prisma-as-datastore';\nexport default DataSource;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Attributes for All Events - YAML\nDESCRIPTION: This YAML configuration illustrates how to define custom attributes for all logger events by mapping log attribute names to locations in request data (query, params, body, headers, or mappings). The feature relies on the 'log.attributes' field, enabling context-aware logging for identifying users and tracking event data. Placeholders such as '<% query.mobileNumber %>' direct the system to extract values from incoming requests dynamically.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\\n  attributes: \\n    mobileNumber: <% query.mobileNumber %>\\n    id: <% params.id %>\\n    lan: <% body.data.lan %>\\n    name: <% headers.name %>\\n    gender: <% mappings.Gender %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Logic with JavaScript in Workflow Task (YAML/JavaScript)\nDESCRIPTION: This YAML snippet defines a workflow task (`first_task`) using `com.gs.return`. The `args` property contains a multiline JavaScript block (`<js% ... %>`) for conditional logic. It checks `inputs.query.name` at runtime and returns a personalized greeting or a default one using JavaScript's `if` statement and template literals.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsummary: performing js scrpit \ntasks:\n  - id: first_task\n    fn: com.gs.return\n    args: |\n      <js%\n        if(inputs.query.name){\n          return `Hello ${inputs.query.name}!`\n        }\n        return 'Hello Developer!'\n      %>\n```\n\n----------------------------------------\n\nTITLE: Authorization Task with Nested Message in Data\nDESCRIPTION: Example of an authorization task that returns a nested message within the data object, which takes precedence over the top-level message.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nauthz:\n  - fn: com.gs.transform\n    id: try_auth_2_authz\n    args: |\n      <js% \n        if (inputs.user.role === 'admin') {\n          return {\n            success: true, \n            message: \"Authorization passed\",\n            data: {x: 2 ,message: \"helloworld\"}\n          }\n        } else {\n           return {\n            success: false, \n            message: \"Authorization failed\"\n          }\n        }\n      %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Kafka Datasource Logic in TypeScript\nDESCRIPTION: This TypeScript code (`src/datasources/types/Kafka.ts`) defines the custom Kafka data source class by extending `GSDataSource`. The `initClient` method initializes the Kafka client using configuration from the corresponding YAML file (`clientId`, `brokers`). The `execute` method handles the logic for specific operations like 'producer', connecting to Kafka and sending messages based on arguments passed from a workflow. Requires `@godspeedsystems/core` and `kafkajs` dependencies.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource_old.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GSContext, GSDataSource, PlainObject } from \"@godspeedsystems/core\";\nimport { Kafka } from \"kafkajs\";\n\nexport default class DataSource extends GSDataSource {\n  protected async initClient(): Promise<PlainObject> {\n    const kafka = new Kafka({\n      clientId: this.config.clientId,\n      brokers: this.config.brokers,\n    });\n\n    return kafka;\n  }\n\n  async execute(ctx: GSContext, args: PlainObject): Promise<any> {\n    try {\n      const {\n        topic,\n        message,\n        meta: { fnNameInWorkflow },\n      } = args;\n      let method = fnNameInWorkflow.split(\".\")[2];\n      if (this.client) {\n        if (method === \"producer\") {\n          const producer = this.client.producer();\n          await producer.connect();\n          let result = await producer.send({\n            topic: topic,\n            messages: [{ value: message }],\n          });\n          return result;\n        } else {\n          return \"Invalid method\";\n        }\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Axios DataSource Type for Godspeed Plugin (TypeScript)\nDESCRIPTION: This TypeScript snippet imports the DataSource from the '@godspeedsystems/plugins-axios-as-datasource' package and exports it as the default export of the file. It provides type safety and IntelliSense for Axios datasource usage throughout the Godspeed project. This file serves as the type definition for Axios-based datasources, streamlining plugin integration. The only dependency is the '@godspeedsystems/plugins-axios-as-datasource' library.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Axios Datasource.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from '@godspeedsystems/plugins-axios-as-datasource';\nexport default DataSource;\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Datasource Credentials in YAML\nDESCRIPTION: YAML configuration snippet for the mailer datasource, located typically in `src/datasources/mail.yaml`. It specifies the datasource type as 'mail' and provides the necessary authentication credentials (username and password) to connect to the email service.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ntype: mail\nuser: 'godspeed@gmail.com'\npass: 'rmeb bjak xcam xkub'\n```\n\n----------------------------------------\n\nTITLE: Defining the Function Logic for Express Event\nDESCRIPTION: This YAML snippet from `src/functions/sample.yaml` defines the Godspeed function named `sample` that is triggered by the Express event. It contains a single task (`example`) that uses the built-in `com.gs.return` function. The `args` field uses an expression to construct a response string by concatenating static text with dynamic data extracted from the event's query parameters (`inputs.query.user`) and request body (`inputs.body.message`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: example\ndescription: this function is called to return\ntasks:\n    - id: example\n      fn: com.gs.return #its an inbuilt function\n      args: |\n        <%\"Hello \"+inputs.query.user+\". This is a message from body \"+inputs.body.message%>\n\n```\n\n----------------------------------------\n\nTITLE: Defining API Datasource with Inline OpenAPI Schema and Security in YAML\nDESCRIPTION: This YAML snippet shows how to define an API datasource with its OpenAPI schema details embedded directly within the datasource configuration. It includes configuration for the base URL, multiple security mechanisms using API keys and tokens, and custom before/after method hooks for workflow extension. Dependencies include available config variables and referenced workflow hooks (e.g., `com.jfs.before_method_hook_workflow`). Inputs like `base_url` and `api_token` are injected using configuration expressions, and relevant security schemes are mapped for API authentication. This setup is suitable when no external OpenAPI spec is available.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/api.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: api\\nschema:\\nbase_url: <% config.httpbin.base_url %>\\nsecurity:\\n  - ApiKey: sample-app\\n  - ApiToken: <% config.httpbin.api_token %>\\n\\nsecuritySchemes:\\n  ApiKey:\\n    type: apiKey\\n    in: header\\n    name: x-api-key\\n\\n  ApiToken:\\n    type: apiKey\\n    in: header\\n    name: Authorization\\n#    \\nbefore_method_hook: com.jfs.before_method_hook_workflow\\n#\\nafter_method_hook: com.jfs.after_method_hook_workflow \n```\n\n----------------------------------------\n\nTITLE: Transform Function (com.gs.transform) Usage in YAML\nDESCRIPTION: Shows how to use the com.gs.transform function to transform data using coffee/js scripting within a workflow task.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Parallel Multiplexing create loan for hdfc api calls\n  tasks:\n    - id: parallel\n      fn: com.gs.parallel\n      tasks:\n        - id: 1st\n          fn: com.gs.return\n          args: |\n            'parallel task1'\n\n        - id: 2nd\n          fn: com.gs.return\n          args: |\n            'parallel task2'\n    - id: step2\n      fn: com.gs.transform\n      args:\n        code: 200\n        data: <% outputs.step1_switch.data %>\n```\n\n----------------------------------------\n\nTITLE: Invoking AWS Service Methods from a Godspeed Workflow (YAML)\nDESCRIPTION: This YAML workflow defines a task to list AWS S3 objects using datasource invocation syntax. The task 'aws_list' calls 'datasource.aws.s3.listObjects', passing arguments from the HTTP request body. It shows Godspeed's approach to chaining workflow tasks to backend service calls. Required: properly configured AWS datasource. Input: body from previous event. Output: AWS S3 API response object.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nid: aws_workflow\ntasks:\n  - id: aws_list\n    fn: datasource.aws.s3.listObjects\n    args: <% inputs.body %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Godspeed Workflow Using Axios Datasource (YAML)\nDESCRIPTION: This YAML snippet defines a Godspeed workflow named `fetchDataWorkflow`. The core task uses the configured Axios datasource (`datasource.api`) to make a GET request (`get`) to the `/anything` endpoint relative to the base URL defined in `api.yaml`. It passes data (`<% inputs.query.id %>`) as arguments. The `on_error` configuration specifies that the workflow should stop (`continue: false`) if this task fails. This file (e.g., `fetchDataWorkflow.yaml`) should be placed in the `src/functions/` directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/axios-apis.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Calls the third-party API using Axios\ntasks:\n- id: fetchDataWorkflow\n  fn: datasource.api.get./anything\n  args:\n    data:\n      <% inputs.query.id %>\n  on_error:\n    continue: false\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs from Prisma Schema (Godspeed CLI, Bash)\nDESCRIPTION: Running this command in the Godspeed CLI will automatically generate CRUD API definitions according to the current Prisma schema files (e.g., mongo.prisma). The generated endpoints and workflows can be customized afterward, and the Prisma clients must already exist (generated via 'godspeed prisma prepare'). The command requires no parameters.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Datasource (YAML) - YAML\nDESCRIPTION: Defines a YAML file for configuring a custom datasource (e.g., ChatGPT) specifying its type and custom parameters such as model, temperature, and max_tokens. Depends on the existence of a corresponding TypeScript logic file named identically to the type. Inputs include type and other datasource configuration values. Outputs a datasource configuration for the Godspeed framework. Used for setting up reusable datasource integrations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: chatgpt  # should be same as the name of your datasource typescript file in `src/datasources/types/`\n\n# custom configurations as per your datasource logic\nmodel: gpt-4o  \ntemperature: 1\nmax_tokens: 200\n\n```\n\n----------------------------------------\n\nTITLE: Defining Mongoose Model in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a Mongoose model and export it for use in the Godspeed project. It includes schema definition and model creation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Mongoose Datasource.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { model, Schema, Document } =require('mongoose');\n\nconst SomeModelSchema = new Schema(\n  {\n    partnerName: {\n      type: String,\n      required: true,\n    },\n    productType: {\n      type: String,\n      required: true,\n    },\n    apiType: {\n      type: String,\n      required: true,\n    },\n    method: {\n      type: String,\n      required: true,\n    },\n    api: {\n      type: String,\n      required: true,\n    },\n    code: String,\n    headers: Schema.Types.Mixed,\n    payload: Schema.Types.Mixed,\n    response: Schema.Types.Mixed,\n    isDynamicUrl: Boolean,\n    expectedResponseStatusCode: Number,\n  },\n  { timestamps: true }\n);\n\nconst SomeModel = model('some-model', SomeModelSchema, 'some-model');\nmodule.exports = {\n    type: 'SomeModel', //The name by which you will access methods of this collection/model\n    model: SomeModel\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Kafka Event Validation Errors in Godspeed (YAML - Commented)\nDESCRIPTION: This commented-out YAML snippet illustrates a potential error handler workflow (`error_handler`) in Godspeed for managing Kafka message schema validation failures. The task `error_step1` uses the `datasource.kafka.publish` function to send the original event data (`inputs.event`) and the validation error details (`inputs.validation_error`) to another Kafka topic for further processing or logging. This handler is currently inactive.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/kafka-events.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n<!-- #### On validation error handler\n  ```yaml\n  summary: Handle json scehma validation error\n  id: error_handler\n  tasks:\n    - id: error_step1\n      fn: datasource.kafka.publish\n      args:\n        data: # publish the event and validation error to kafka on a topic\n          value:\n            event: <% inputs.event %>\n            validation_error: <% inputs.validation_error %>\n  ``` -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Data Source Type\nDESCRIPTION: JavaScript configuration file for setting up the Prisma data source type in the project. This code should be placed in src/datasources/types/prisma.ts.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/data_sources/datasource_plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PrismaDataSource } from '@godspeedsystems/plugins-prisma-as-datasource';\nexport default PrismaDataSource;\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Payload in YAML Workflow\nDESCRIPTION: This snippet demonstrates accessing JWT payload data from YAML workflows in Godspeed. It shows how to use inline scripting to retrieve and use the user object from the JWT payload.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-authentication.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: protected route workflow \ntasks:\n  - id: check_payload_user\n    description: return user object\n    fn: com.gs.return\n    args:\n      data: \n        jwt_payload: <% inputs.user %>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Datasource in Godspeed\nDESCRIPTION: This YAML configuration snippet provides the necessary setup for AWS services within a Godspeed project. It specifies default client configuration, service-specific settings, and mappings for AWS service types to their corresponding client names.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/AWS Datasource.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: aws\ndefault_client_config: #any aws specific configurations\n  credentials:\n    accessKeyId: <%config.accessKeyId%>\n    secretAccessKey: <%config.secretAccessKey%>\n# service type is the name of the npm module for ex. @aws-sqk/client-dynamodb or @aws-sqk/client-s3 etc\n# The `types` key can have service type to sdk's client names mappings when coding\ntypes: #mappings\n  dynamodb: DynamoDB\n  s3: S3\n  lambda: Lambda\n  ssm: SSM\n  sqs: SQS\nservices:\n  s3:\n    type: s3\n    config:\n      region: <%config.anotherAccessKeyId%>\n      credentials:\n        accessKeyId: <%config.anotherAccessKeyId%>\n        secretAccessKey: <%config.anotherSecretAccessKey%>\n  s3_1: #uses default config\n    type: s3\n  dynamodb:\n    type: dynamodb\n  sqs:\n    type: sqs\n  ssm:\n    type: ssm\n  lamdba:\n    type: lambda\n```\n\n----------------------------------------\n\nTITLE: Enabling Swagger UI Endpoint in Godspeed http.yaml (YAML)\nDESCRIPTION: Configures the `http.yaml` file (located at `src/eventsources/http.yaml`) for an Express eventsource to enable the Swagger documentation UI. It specifies the port the service runs on and sets the `docs.endpoint` property to `/api-docs`, making the UI accessible at that path.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/swagger-specs.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nport: 3000\ndocs:\n  endpoint: /api-docs\n```\n\n----------------------------------------\n\nTITLE: Defining a Cron Event in Godspeed Framework\nDESCRIPTION: Example of creating a cron event that runs every minute in the Asia/Kolkata timezone. The event key follows the format of cron expression with timezone, and it calls the 'every_minute' function.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Cron Eventsource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# event for Shedule a task for evrey minute.\n\ncron.* * * * *.Asia/Kolkata: //event key\n  fn: every_minute\n```\n\n----------------------------------------\n\nTITLE: Defining Axios Workflow in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a workflow task using the Axios DataSource for making API requests.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: sample\ntasks:\n  - id: first_task\n    fn: datasource.api.get./api/items\n    args:\n      headers:\n      data:\n      timeout:\n      params:\n```\n\n----------------------------------------\n\nTITLE: Defining Mailer Send Workflow in YAML\nDESCRIPTION: Defines a Godspeed workflow (typically in `src/functions/mail_send.yaml`) named 'send'. This workflow consists of a single task, 'send_mail', which executes the `datasource.mail.send` function. It passes necessary arguments like sender ('from'), receiver ('to'), 'subject', and email body ('text') to the function for sending an email.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: send\ntasks:\n  - id: send_mail\n    fn: datasource.mail.send\n    args: \n      from: 'sender@gmail.com'\n      to: 'receiver@gmail.com'\n      subject: 'Hello from Godspeed'\n      text: 'Have a Nice day'\n```\n\n----------------------------------------\n\nTITLE: Creating Workflow Template Using Shell\nDESCRIPTION: Define and create workflow templates that specify CI steps for building and testing the application. This configuration is essential for automated CI/CD activities handled by Argo.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/infra-and-system/Application.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl create -f CI-workflow-templates.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching in Godspeed Workflows\nDESCRIPTION: Example of how to implement caching in Godspeed workflows. This YAML configuration shows setting up HTTP endpoints and workflow tasks with caching configuration, including key management and cache invalidation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Memcached Datasource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Events\n\"http.get./helloworld2\":\n  fn: helloworld2\n\"http.get./helloworld3\":\n  fn: helloworld3\n\n# Functions (Helloworld2 workflow)\nid: helloworld2_workflow\ntasks:\n  - id: helloworld2_workflow_first_task\n \n    fn: com.gs.transform\n    args:\n      name: helloworld2\n    caching:\n      key: xyz\n      # datasource: memcache #This field should be definitely set if config/default.caching is not set. Else is optional\n      # noRead: true #if this is set get(key) method will not be called for this task\n      # noWrite: true #the result of this task will not be written, even if cache_on_failure is set to true. i.e. set() method will not be called\n    \n\n# Functions (Helloworld3 workflow)\nid: helloworld3_workflow\ntasks:\n  - id: helloworld3_workflow_first_task\n    caching:\n      key: abc\n      invalidate: xyz #helloworld2 key\n      # noRead: true #if this is set get(key) method will not be called for this task\n      # noWrite: true #the result of this task will not be written, even if cache_on_failure is set to true. i.e. set() method will not be called\n      datasource: mem-cache #This field should be definitely set if config/default.caching is not set. Else is optional\n    fn: com.gs.transform\n    args:\n      name: helloworld3\n```\n\n----------------------------------------\n\nTITLE: JavaScript Workflow for Calling YAML Workflows\nDESCRIPTION: This JavaScript workflow demonstrates how to use the fn parameter to access and execute YAML workflows. It calls a workflow at src/functions/com/biz/mongo/category/create.yaml and returns its response wrapped in a GSStatus object.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GSStatus, executeDatasource } = require('#core/interfaces');\n\nmodule.exports = async (ctx, fn) => {\n  const { inputs, datasources } = ctx;\n  try {\n    inputs.body = inputs.data.body;\n\n\n    const responseData =  await fn['com.biz.mongo.category.create'](ctx)\n    return new GSStatus(true, 200, undefined, responseData, undefined);\n\n\n  } catch (error) {\n    return new GSStatus(false, 500, undefined, error, undefined);\n  }\n};\n\nmodule.exports.id = 'main';\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Connection URL in .env (Prisma Configuration, Bash/Env)\nDESCRIPTION: This line is added to the .env file to define the MongoDB connection string for use by Prisma and the Godspeed project. The environment variable 'MONGO_TEST_URL' must be configured with your MongoDB Atlas credentials. This value is required for the datasource block in your Prisma schema to connect properly to the database.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nMONGO_TEST_URL=mongodb+srv://atlas_username:pswd@cluster0.w3bbqrp.mongodb.net/prisma_test?retryWrites=true&w=majority&appName=Cluster0\n```\n\n----------------------------------------\n\nTITLE: Defining Function Hooks in Godspeed DSL\nDESCRIPTION: Shows the structure of various hooks available for function execution including pre/post validations, auth, and error handling.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n__hooks:\n  __pre_validations:\n  __validations:\n  __preauths:\n  __auths:\n  __pre_ref:\n  __post_ref:\n  __on_error:\n  __finally:\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Configurations in Yaml File\nDESCRIPTION: This snippet demonstrates how to define JWT configurations using environment variables in the custom-environment-variables.yaml file under config/. It sets placeholders for jwtSecret, audience, and issuer, which are later populated from the environment.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njwtSecret: JWT_SECRET\naudience:  JWT_AUDIENCE     \nissuer: JWT_ISSUER\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Gender Mapping for Cross-Mapping Reference (YAML)\nDESCRIPTION: Redefines the 'Gender' mapping as in `index.yaml` for demonstration of cross-file mapping reference. Serves as the foundational mapping used in other mapping files via scripting expressions. Required for referencing constants like 'Others' in further mapping scripts. No unique dependencies beyond YAML parsing and Godspeed's loader.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/mappings.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nGender:\n  Male: M\n  Female: F\n  Others: O\n\n```\n\n----------------------------------------\n\nTITLE: Invoking External API in Godspeed Workflow (API as Datasource)\nDESCRIPTION: This example shows how to make a POST request to an external API using the 'api_datasource' in a Godspeed workflow. The workflow sends a message from the request body to the '/anything' endpoint using the POST method.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: post_api_send_anthing\ntasks:\n  - id: send_anything\n    # Fetching loan offers from rule engine for the given bank and pan card\n    fn: datasource.api_datasource.post./anything\n    args:\n      data:\n        message: <%inputs.body.message%>\n```\n\n----------------------------------------\n\nTITLE: Defining an Example Mongoose Model in TypeScript\nDESCRIPTION: This TypeScript code provides a complete example of defining a Mongoose schema (`SomeModelSchema`) and compiling it into a Mongoose model (`SomeModel`). It then exports the model using the required structure for the Godspeed Mongoose datasource plugin, specifying 'SomeModel' as the access name.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { model, Schema, Document } =require('mongoose');\n\nconst SomeModelSchema = new Schema(\n  {\n    partnerName: {\n      type: String,\n      required: true,\n    },\n    productType: {\n      type: String,\n      required: true,\n    },\n    apiType: {\n      type: String,\n      required: true,\n    },\n    method: {\n      type: String,\n      required: true,\n    },\n    api: {\n      type: String,\n      required: true,\n    },\n    code: String,\n    headers: Schema.Types.Mixed,\n    payload: Schema.Types.Mixed,\n    response: Schema.Types.Mixed,\n    isDynamicUrl: Boolean,\n    expectedResponseStatusCode: Number,\n  },\n  { timestamps: true }\n);\n\nconst SomeModel = model('some-model', SomeModelSchema, 'some-model');\nmodule.exports = {\n    type: 'SomeModel', //The name by which you will access methods of this collection/model\n    model: SomeModel\n};\n```\n\n----------------------------------------\n\nTITLE: Generating API Authentication Headers with Axios (TypeScript)\nDESCRIPTION: This TypeScript module provides a function to dynamically generate headers required for authenticated API calls, including token refresh logic. It utilizes Axios for HTTP requests and the Godspeed logger for tracing authentication events. The function expects a context parameter and returns updated headers with refreshed tokens; errors are logged and propagated. Dependencies: @godspeedsystems/core, axios. Input: context object. Output: headers object with authorization token. Requires Axios installed and connection to a valid authentication source.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logger } from \"@godspeedsystems/core\";\n\nconst axios = require('axios');\nconst client = axios.create({\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n/**\n * Generate and return all the headers which are required to be sent\n * in the API calls which require authentication tokens\n */\nmodule.exports = async function (ctx: any) {\n    try {\n        const res = await client({\n            method: 'get',\n            url: `https://httpbin.org/anything`,\n            data: {\n                \"Authorization\": 'access_token'\n            }\n        })\n        // Retrieve the authn tokens\n        const headers = {\n            \"Authorization\": res.data.access_token || 'access_token'\n        };\n       \n        logger.info('Auth token successfully refreshed and following headers set: %o', Object.keys(headers));\n        return headers;\n    } catch (error) {\n        logger.error('Error in refreshing token %o', error);\n        throw error;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AWS S3 File Upload with JavaScript Function\nDESCRIPTION: This JavaScript function module demonstrates how to upload a file to an AWS S3 bucket in a Godspeed project. It reads the file, configures the S3 `putObject` parameters, and handles potential errors during the file upload process.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/AWS Datasource.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GSContext, GSStatus } from \"@godspeedsystems/core\";\nimport fs from 'fs'\n\nmodule.exports = async (ctx: GSContext) => {\n  const { files: { myfile } } = ctx.inputs.data;\n  const { datasources, logger } = ctx;\n  try {\n    return new Promise((resolve, reject) => {\n      fs.readFile(myfile.tempFilePath, async function (err, data) {\n        if (err) {\n        resolve(new GSStatus(false, 500, 'S3 document upload failed', { error: { message: err.message } }));\n\n        } // Something went wrong!\n        const contentType = ctx.inputs.data.headers['content-type']\n        var params = {\n          Key: myfile.name, //file name\n          Body: data,\n          Bucket: 'userdocs123',\n          ContentType: contentType,\n        };\n\n        const res = await datasources.aws.client.s3.putObject(params);\n\n        resolve(new GSStatus(true, 200, 'successfully uploaded document', res, undefined))\n\n      })\n    });\n\n  } catch (e: any) {\n    logger.error('S3 document upload failed %o', e)\n    return new GSStatus(false, 500, 'S3 document upload failed', { error: { message: e.message } })\n  }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Task-Level Authorization in Workflow (YAML)\nDESCRIPTION: Example Godspeed workflow showing how to invoke an authorization workflow (`authz: fn: com.jfs.authz`) for a specific task (`httpbin_step1`). The `com.jfs.authz` workflow runs before the main task function (`fn: com.gs.http`), receiving inputs via `authz.args`. It determines if the task execution should proceed based on defined rules.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API\ntasks:\n    - id: httpbin_step1\n      description: Hit http bin with some dummy data. It will send back same as response\n      authz:\n        fn: com.jfs.authz\n        args: <% inputs %>\n      fn: com.gs.http\n      args:\n        datasource: httpbin\n        data: <% inputs %>\n        config:\n          url : /anything\n          method: post\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in YAML\nDESCRIPTION: This YAML configuration snippet sets up JWT authentication for an Express event source by specifying the issuer, audience, and secret key which are extracted from the config object.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nauthn:\n  jwt:\n    issuer: <% config.issuer %>  # must be equal to the key iss in your jwt token\n    audience: <% config.audience %> # must be equal to the key aud in your jwt token\n    secretOrKey: <% config.secret %>\n```\n\n----------------------------------------\n\nTITLE: Event Specification with Authentication\nDESCRIPTION: Detailed event DSL configuration showing authentication setup and data schema validation for an HTTP endpoint\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authentication/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./v1/loan-application/:lender_loan_application_id/kyc/ckyc/initiate: \n  authn: true\n  fn: com.biz.kyc.ckyc.ckyc_initiate\n  on_validation_error: com.jfs.handle_validation_error\n  data:\n    schema:\n      body: \n        required: true\n        content:\n          application/json:\n            schema:\n              type: 'object'\n              required: []\n              properties:\n                dob:  { type : 'string', format : 'date', pattern : \"[0-9]{4}-[0-9]{2}-[0-9]{2}\" }\n                meta:\n                  type: 'object'\n      params: \n      - name: lender_loan_application_id\n        in: params\n        required: true\n        allow_empty_value: false\n        schema:\n          type: string\n  responses: #Output data defined as per the OpenAPI spec\n    200:\n      schema:\n        data: \n          required: # default value is false\n          content:\n            application/json:\n              schema: \n                type: object\n                properties:\n                  application_id: \n                    type: string\n                additionalProperties: false\n                required: [application_id]\n```\n\n----------------------------------------\n\nTITLE: Setting PlanetScale Connection URL in .env\nDESCRIPTION: Demonstrates how to define the PlanetScale database connection URL as an environment variable named `DATABASE_URL` within a `.env` file. This practice securely manages database credentials and connection details.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PlanetScale.md#2025-04-22_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nDATABASE_URL=\"planetscale://root:password@localhost:3306/yourdb\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Mongoose Datasource and Response Codes in YAML\nDESCRIPTION: Example YAML configuration for a Mongoose datasource instance (e.g., `mongoose1.yaml`). It specifies the datasource 'type' as 'mongoose' and optionally allows overriding the default HTTP success response codes for different Mongoose operations (create, find, findOne, etc.). The filename (e.g., `mongoose1`) determines how the datasource is referenced in workflows and code.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ntype: mongoose\nsuccessResponseCodes: #default response codes for success responses\n  create: 201\n  find: 200\n  findOne: 200\n  aggregate: 200\n  findOneAndUpdate: 201\n  findOneAndDelete: 202\n```\n\n----------------------------------------\n\nTITLE: Illustrating Project Structure for Express Eventsource\nDESCRIPTION: Shows the typical directory layout for implementing a custom Express (HTTP) eventsource within a Godspeed project. It highlights the locations for eventsource configuration (`http.yaml`), type definition (`types/express.ts`), event definitions (`events/sample.yaml`), and associated functions (`functions/sample.yaml`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    ├── src\n        ├── datasources\n        │\n        ├── events\n        |   |\n        │   └── sample.yaml\n        |   \n        ├── eventsources\n        |   |\n        │   ├── types\n        |   |    |\n        │   |    └── express.ts\n        |   |\n        │   └── http.yaml\n        |\n        └── functions\n            |\n            └── sample.yaml\n\n```\n\n----------------------------------------\n\nTITLE: Calling Mongoose findOne with Multiple Arguments in YAML Workflow\nDESCRIPTION: Example Godspeed workflow in YAML (`helloworld2_workflow`) illustrating how to pass multiple arguments to a Mongoose function like `findOne`. The task `helloworld2_workflow_first_task` calls `datasource.mongoose.SomeModel.findOne`. The arguments (query filter, projection, options) are provided as an array under the `args` field. This array will be spread and passed to the underlying Mongoose function.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n    id: helloworld2_workflow\n    tasks:\n      - id: helloworld2_workflow_first_task\n        fn: datasource.mongoose.SomeModel.findOne\n        args: #as an array\n          - name: mastersilv3r #search clause: First argument\n          - 'name age' #The projection: second argument\n          - {} # Options: the third argument\n```\n\n----------------------------------------\n\nTITLE: Implementing RabbitMQ Event Publisher\nDESCRIPTION: Workflow implementation for publishing messages to RabbitMQ queue.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: rabbitMQ message publishing\nid: rabbitMQ_message\ntasks: \n  - id: publish_rabbitmq\n    fn: com.gs.rabbitmq.publish\n    args:\n      datasource: rabbitMq\n      exchange: TestOne\n      config:\n        method: publish\n      data: <% inputs %>\n```\n\n----------------------------------------\n\nTITLE: Adding Godspeed Plugin via CLI (Bash)\nDESCRIPTION: This command uses the Godspeed Command Line Interface (CLI) to initiate the process of adding a new plugin to the current Godspeed project. The user will typically be prompted to select the desired plugin, in this case, the \"axios-as-datasource\" plugin. It requires the Godspeed CLI to be installed and run within a Godspeed project directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/axios-apis.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed plugin add\n```\n\n----------------------------------------\n\nTITLE: Defining API Datasource with External OpenAPI Schema in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure an API datasource by referencing an external OpenAPI specification URL. Required dependency is an accessible OpenAPI YAML/JSON file at the specified schema URL. The `type` parameter indicates an API data connector, while `schema` provides a direct link to the API definition, ensuring automatic handling of authentication, input validation, and response validation as per the spec. Expected output is a configured datasource which can be used in `com.gs.http` operations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/api.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: api\\nschema: https://raw.githubusercontent.com/Kong/swagger-ui-kong-theme/main/demo/public/specs/httpbin.yaml\n```\n\n----------------------------------------\n\nTITLE: Series Function (com.gs.series) Usage in YAML\nDESCRIPTION: Demonstrates the use of com.gs.series function to execute tasks in series within a workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Parallel Multiplexing create loan for hdfc api calls\n  tasks:\n    - id: parallel\n      fn: com.gs.series\n      tasks:\n        - id: 1st\n          fn: com.gs.return\n          args: |\n            'parallel task1'\n\n        - id: 2nd\n          fn: com.gs.return\n          args: |\n            'parallel task2'\n    - id: step2\n      fn: com.gs.transform\n      args: |\n        <coffee% {\n          code: 200,\n          data: outputs['1st']\n        } %>\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Task in YAML\nDESCRIPTION: Example of defining an authorization task using YAML DSL. It applies rules over enriched context and returns a boolean or GSStatus.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthz: \n  - id: authz_task_1\n    summary: apply the rules over enriched context. Returns true or false or a GSStatus\n    fn: | \n      <% \n        success: user.role === 'admin' && user.department === 'HR'\n      %>\n```\n\n----------------------------------------\n\nTITLE: Defining DB Query Authorization Workflow in Godspeed DSL\nDESCRIPTION: This snippet shows the structure of an authorization workflow for database queries in Godspeed DSL. It includes steps for calling an authorization API and transforming the response to include database-specific clauses.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authorization/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Authorization workflow\ntasks:\n  - id: authz_step1\n    description: return allow/deny based upon user\n    fn: datasource.authz.authorize.post\n    args: \n      data: <% inputs.body.user %>\n      \n  - id: authz_step2\n    description: transform response from authz api\n    fn: com.gs.transform\n    args: |\n        <coffee% if outputs.authz_step1.data.code == 200 then {\n            success: true\n            data:\n              where:\n                role: 'USER'\n        } else {\n            success: false\n            data: false\n        } %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch-Case Flow with com.gs.switch in YAML\nDESCRIPTION: Demonstrates the usage of com.gs.switch function for implementing switch-case flow execution, evaluating a value and executing corresponding tasks.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: create loan application for lender\n  tasks:\n      - id: step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n        description: create account in the bank\n        fn: com.gs.switch\n        value: <%inputs.headers['lender']%>\n        cases:\n          httpbin:\n            - id: 1st\n              fn: com.biz.loan_application.httpbin_create_loan_application\n              args: <%inputs%>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mongoose Datasource in YAML\nDESCRIPTION: This YAML configuration file (`src/datasources/mongoose.yaml`) defines a datasource instance of type 'mongoose'. It specifies default HTTP success status codes for various Mongoose operations (create, find, findOne, etc.), which can be overridden if needed. The filename (e.g., `mongoose.yaml`) dictates how the datasource is referenced in workflows (e.g., `datasources.mongoose`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntype: mongoose\nsuccessResponseCodes: #default response codes for success responses\n  create: 201\n  find: 200\n  findOne: 200\n  aggregate: 200\n  findOneAndUpdate: 201\n  findOneAndDelete: 202\n```\n\n----------------------------------------\n\nTITLE: Exporting a Mongoose Model for Godspeed\nDESCRIPTION: This TypeScript snippet shows the required structure for exporting a Mongoose model from a file within the `datasources/<datasource_name>/models` directory. It requires exporting an object with a `type` property (the name used to access the model's methods) and a `model` property (the actual Mongoose model object).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n    type: 'SomeModel', //The name by which you will access methods of this collection/model\n    model: SomeModel //The Mongoose Model\n};\n```\n\n----------------------------------------\n\nTITLE: Express Plugin Type Definition\nDESCRIPTION: TypeScript type definition file for the Express plugin, importing and exporting the ExpressEventSource class.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressEventSource } from '@godspeedsystems/plugins-express-as-http';\nexport default ExpressEventSource;\n```\n\n----------------------------------------\n\nTITLE: Using Authorization with Database Query Workflow (YAML)\nDESCRIPTION: A Godspeed workflow task (`find_user`) that performs a database query using `com.gs.datastore`. It includes an authorization step (`authz: fn: com.jfs.auth`) which is executed first. If the authorization workflow returns JSON data, it can modify the query parameters (like merging `where` or `include` clauses) before the database query runs.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: datastore demo\ntasks:\n  - id: find_user\n    description: find users\n    authz:\n      fn: com.jfs.auth\n      args: <% inputs %>\n    fn: com.gs.datastore\n    args:\n      datasource: mongo\n      data:\n        include: <% inputs.body.include %>\n        where: <% inputs.body.where %>\n      config:\n        method: user.findMany\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Custom Datasource and Eventsource\nDESCRIPTION: This snippet shows the directory structure for implementing a custom datasource that can also act as an eventsource. It includes the necessary files and their locations within the project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n    .\n    ├── src\n        ├── datasources\n        │   ├── types\n        │   |    └── custom_datasource.ts\n        |   |\n        │   └── custom_datasource.yaml\n        │\n        ├── events\n        |   |\n        │   └── helloworld.yaml\n        |\n        ├── eventsources\n        │   ├── types\n        │   |    └── custom_eventsource.ts\n        |   |\n        │   └── custom_eventsource.yaml\n        |\n        └── functions\n            |\n            └── helloworld.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value from Redis in Godspeed Workflow\nDESCRIPTION: Godspeed workflow YAML for getting a value from Redis. It uses the 'datasource.redis.get' function with a specified key.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Redis Datasource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: get_redis_value\ntasks:\n  - id: get_task\n    fn: datasource.redis.get\n    args:\n      key: 'example_key'\n```\n\n----------------------------------------\n\nTITLE: Formatting JWT Authorization Header\nDESCRIPTION: Demonstrates the standard HTTP `Authorization` header format for transmitting a JSON Web Token (JWT) using the Bearer schema. The placeholder `<token>` should be replaced with the actual encoded JWT.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_0\n\nLANGUAGE: PlainText\nCODE:\n```\nAuthorization: Bearer <token>\n```\n\n----------------------------------------\n\nTITLE: Converting Timestamp to Formatted Date Plugin (TypeScript)\nDESCRIPTION: Exports a named TypeScript function `convertEpochToDate` that takes a timestamp string, converts it to a JavaScript Date object, and returns it formatted as 'yyyy-MM-dd HH:mm:ss' using the `date-fns` library. Requires the `date-fns` package. Since it's in `plugins/time/epoch.ts`, it's accessed in workflows using the path and function name like `time_epoch_convertEpochToDate`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport format from 'date-fns/format';\n\nexport function convertEpochToDate(inputTimestamp: string){\n    const newDateTime = new Date(inputTimestamp);\n    return format(newDateTime, 'yyyy-MM-dd HH:mm:ss');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Datasource before_method_hook for Audit Logging in YAML\nDESCRIPTION: This YAML snippet shows how to use the `before_method_hook` within a datasource definition to trigger a workflow (e.g., audit logging) prior to executing the main workflow task. The hook references another workflow (`com.jfs.audit_log_workflow`), which must be defined elsewhere in the project. This setup enhances extensibility of the datasource's usage by allowing pre-processing or logging logic. The `base_url` is also injected from config values.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/api.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntype: api\\nschema:\\nbase_url: <% config.httpbin.base_url %>    \\nbefore_method_hook: com.jfs.audit_log_workflow\n```\n\n----------------------------------------\n\nTITLE: Configuring API Datasource after_method_hook for Audit Logging in YAML\nDESCRIPTION: This YAML snippet demonstrates the use of `after_method_hook` in the datasource configuration to trigger a workflow (such as audit logging) after the main workflow involving the datasource has executed. `after_method_hook` requires the referenced workflow (e.g., `com.jfs.audit_log_workflow`) to be defined. This augments the datasource by enabling post-processing tasks, such as logging or notifications, after API calls.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/api.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: api\\nschema:\\nbase_url: <% config.httpbin.base_url %>    \\nafter_method_hook: com.jfs.audit_log_workflow\n```\n\n----------------------------------------\n\nTITLE: Defining a Godspeed Event for Post-Authentication Redirect\nDESCRIPTION: Defines an HTTP GET event handler for the `/verify/user` route in `src/events/helloUser.yaml`. This route corresponds to the `GITHUB_SUCCESS_REDIRECT_URL`. It maps the request to the `helloUser` function and specifies the expected JSON response format for a 200 status. `authn: false` indicates that authentication is handled prior to this event, likely by the OAuth2 middleware.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/oauth2-authentication.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.get./verify/user:\n  fn: helloUser\n  authn: false\n  responses:\n  200:\n    content:\n      application/json:\n        schema:\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Defining DB Query Authorization Workflow (YAML/CoffeeScript)\nDESCRIPTION: An example authorization workflow (`com.jfs.authz`) specifically designed for Godspeed database interactions. After calling an external authorization service, it uses a transform step with embedded CoffeeScript to return a JSON object containing a `where` clause (`{ role: 'USER' }`) if authorization succeeds (`success: true`). This JSON output is intended to be merged with the main DB query task's arguments.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Authorization workflow\ntasks:\n  - id: authz_step1\n    description: return allow/deny based upon user\n    fn: com.gs.http\n    args: \n      datasource: authz\n      data: <% inputs.body.user %>\n      config:\n        url : /authorize\n        method: post\n  - id: authz_step2\n    description: transform response from authz api\n    fn: com.gs.transform\n    args: |\n        <coffee% if outputs.authz_step1.data.code == 200 then {\n            success: true\n            data:\n              where:\n                role: 'USER'\n        } else {\n            success: false\n            data: false\n        } %>\n```\n\n----------------------------------------\n\nTITLE: Generating Event Snippet with Godspeed VS Code Extension\nDESCRIPTION: This YAML snippet template allows the creation of an event with various settings such as authentication, summary, function path, parameters, request body schema, and expected responses. Dependencies include understanding the YAML structure and syntax, the presence of the Godspeed Framework, and the VS Code extension. Key fields to define are the function path and request parameters.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/vscode-extension/language-tools.md#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhttp.get./event-endpoint:\\n  authn: false\\n  summary: 'summary of the event'\\n  description: 'description of the event'\\n  fn: 'full path of the function, seprated with dots, remove .yaml, like: com.biz.helloworld'\\n  on_validation_error: com.jfs.handle_validation_error\\n  params:\\n    - name: world\\n      in: query\\n      required: true\\n  body:\\n    content:\\n      application/json:\\n        schema:\\n          type: object\\n          properties:\\n            name:\\n              type: string\\n            email:\\n              type: string\\n          required: [name , email]\\n  responses:\\n    '200':\\n      description: OK\\n      content:\\n        application/json:\\n          schema:\\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Defining Callback URL Endpoint with YAML\nDESCRIPTION: Defines a callback URL endpoint using YAML configuration. The endpoint listens for POST requests at '/callback' and specifies the structure of the payload as well as potential responses. No authentication is required, and the body must include a 'status' field. The endpoint returns a 200 response for successful handling and a 400 response for invalid requests.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/callbacks.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./callback:\n  summary: \"Handle callbacks from external services\"\n  description: \"Endpoint to handle callback responses from external services.\"\n  fn: handleCallback\n  authn: false\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            status:\n              type: string\n            data:\n              type: object\n          required: [status]\n  responses:\n    200:\n      description: Callback handled successfully\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              message:\n                type: string\n                example: Callback received and processed\n    400:\n      description: Invalid callback request\n```\n\n----------------------------------------\n\nTITLE: Kafka Publishing Function (com.gs.kafka) Usage in YAML\nDESCRIPTION: Shows how to use the com.gs.kafka function to publish events to a Kafka topic within a workflow task.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Publishing incoming event data to a Kafka topic\n  id: push_to_kafka\n  tasks:\n    - id: step1\n      summary: Publish an event with input event's data, adding to_process = true\n      fn: com.gs.kafka\n      args: # similar to Axios format\n        datasource: kafka1\n        config:\n          method: publish\n          topic: kyc_initiate_recieved\n          group_id: kyc_domain\n        data: # Refer https://kafka.js.org/docs/producing#message-structure for information on data attributes.\n          value: <% inputs %> # Your message content. Evaluation of dynamic values happens via <% %>. The type of scripting is coffee.\n          key: # Optional - Used for partitioning.\n          partition: # Optional - Which partition to send the message to.\n          timestamp: # Optional - The timestamp of when the message was created.\n          headers: # Optional - Metadata to associate with your message.\n```\n\n----------------------------------------\n\nTITLE: Sequential For-Each Execution Using Godspeed Framework (YAML)\nDESCRIPTION: The 'com.gs.each_sequential' function processes a list of values one by one, executing tasks in sequence. Dependencies include task setup with 'com.gs.transform'. Required inputs involve value lists and execution tasks; outputs are sequential task statuses. Constraints include sequential order, affecting processing time compared to parallel execution.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  http.get./test/each_sequential:\n  summary: each_sequential\n  description: each_sequential\n  fn: each_sequential\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: number\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: For each sample\ndescription: Here we transform the response of for loop\ntasks:\n  - id: each_sequential_step1\n    description: for each\n    fn: com.gs.each_sequential\n    value: [1, 2, 3, 4]\n    tasks:\n      - id: each_task1\n        fn: com.gs.transform\n        args: <% inputs.body.number * task_value %>\n  - id: each_sequential_step2\n    description: return the response\n    fn: com.gs.transform\n    args: <% outputs.each_sequential_step1.data %>\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: For each sample\ndescription: Here we transform the response of for loop\ntasks:\n  - id: each_sequential_step1\n    description: for each\n    fn: com.gs.each_sequential\n    value: [1, 2, 3, 4]\n    tasks:\n      - id: each_task1\n        fn: com.gs.transform\n        args: <% 'each_task1 ' + task_value %>\n        on_error: # on_error at task level\n          continue: false\n          response: <%Coffee/JS expression%> | String\n  on_error: # on_error at loop level\n    continue: true\n    response: <%Coffee/JS expression%> | String\n  - id: each_sequential_step2\n    description: return the response\n    fn: com.gs.transform\n    args: <% outputs.each_sequential_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Caching Management in JavaScript Tasks\nDESCRIPTION: This snippet demonstrates how to manually manage caching and invalidation in Typescript/JavaScript tasks within the Godspeed framework. It includes fetching and storing data in Redis and handling exceptions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/caching.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function (ctx: GSContext, args: any) {\n  const redis_client = ctx.datasources['redis'].client;\n  let res: GSStatus;\n  const key = 'helloworld2';\n\n  try {\n    const cached_value = await redis_client.get(key);\n    if (!cached_value) {\n      res = await ctx.functions['com.gs.helloworld2'](ctx, {nice: \"name\", ...args});\n      await redis_client.set(key, JSON.stringify(res));\n    } else {\n      return JSON.parse(cached_value);\n    } \n  } catch(ex) {\n    return new GSStatus(false, 500, undefined, {message: \"Internal Server Error\", info: ex.message});\n  }\n\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Datasource Block\nDESCRIPTION: Demonstrates how to define the `datasource` block within the Prisma schema file (`/src/datasources/_.prisma`). It specifies the database provider (e.g., postgresql, mysql, sqlite) and references the `DATABASE_URL` environment variable set in the `.env` file.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CRUD_API.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"database_provider_name\",\n  url      = env(\"DATABASE_URL\") \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization at Task Level in YAML\nDESCRIPTION: Defines task-level authorization within a workflow, allowing for role-based access and error handling. The configuration utilizes JavaScript for custom logic and a flag to continue on error, demonstrating control over task execution flows.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nid: helloworld_workflow\ntasks:\n  - id: helloworld_workflow_first_task\n    fn: com.gs.transform\n    args: \n      code: 200\n      success: true\n      data: | #sum_sumindex(4,5) is used to call the function sumindex(x,y) written in sum.js file\n        <js%\n         {\n          a: sum_sumindex(4,5), \n          message: hello(\"Hi\"),\n         }\n        %> \n    on_error:\n      continue: true\n      response:\n        success: true\n        code: 500\n        data: {}\n    authz:  #Enabling authz in task level\n      id: task_authz\n      tasks:\n        - fn: com.gs.transform\n          id: try_auth_3\n          args:\n            success: <% inputs.headers.x == \"ayush\" %>\n            code: 200\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger in HTTP YAML\nDESCRIPTION: This snippet shows how to configure Swagger UI within the Godspeed framework by editing the 'http.yaml' file. It involves setting the express type, port, base URL, and documentation endpoint. Dependencies include Godspeed's express or fastify plugins for proper configuration, and YAML syntax is necessary for file edits.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/http-events.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nport: 3000\nbase_url: /api/v1\ndocs:\n  endpoint: /\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs for Elasticgraph Entities using godspeed gen-crud-api\nDESCRIPTION: Illustrates the `godspeed gen-crud-api` command which automatically generates CRUD events and workflows for entities defined within the Elasticgraph datasource configurations (`src/datasources/eg_config/`). The generated files are placed in specific `events` and `functions` directories. Requires Godspeed CLI and `godspeed-crud-api-generator` npx package.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed gen-crud-api\\n                      _                                   _\\n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\\n  |___/                        |_|\\n\\n> eg_test@1.0.0 gen-crud-api\\n> npx godspeed-crud-api-generator\\n\\nSelect datasource / schema to generate CRUD APIs\\nEvents and Workflows are generated for elasticgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Event Handler in YAML\nDESCRIPTION: YAML workflow function that handles a GraphQL query. This configuration demonstrates how to use a MongoDB data source to find a document with specific search criteria, projections, and options.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Apollo GraphQl Eventsource.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Find one via Mongoose from Mongodb\ntasks:\n  - id: mongo_category_create\n    fn: datasource.mongoose.SomeModel.findOne\n    args: #as an array\n      - name: mastersilv3r #search clause: First argument\n      - 'name age' #The projection: second argument\n      - {} # Options: the third argument\n```\n\n----------------------------------------\n\nTITLE: Encrypting Fields in Prisma Model Schema - Prisma\nDESCRIPTION: Demonstrates how to apply field-level encryption in a Prisma schema using the `/// @encrypted` directive. The code is for MongoDB, and only applicable to String fields. It uses AES-GCM 256-bit encryption by default. Required: schema modification, Prisma and database configuration; output is an encrypted column in the database and transparent decryption in application code.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/datastore.md#2025-04-22_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated-clients/mongo\"\n  previewFeatures = [\"metrics\"]\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"MONGO_TEST_URL\")\n}\n\nmodel User1 {\n  id        String      @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt DateTime @default(now())\n  email     String   @unique /// @encrypted\n  name      String?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Log Attributes in YAML\nDESCRIPTION: Example YAML configuration for setting custom log attributes globally across all events. These attributes can extract values from different parts of the request payload including query parameters, path parameters, request body, and headers.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlog_attributes: \n  mobileNumber: \"query?.mobileNumber\"\n  id: \"params?.id\"\n  lan: \"body?.data?.lan\"\n  name: \"headers?.name\"\n  gender: <% mappings.Gender %>\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ as a Datasource\nDESCRIPTION: This snippet provides the configuration details needed to set up RabbitMQ as a datasource in a framework. The YAML configuration specifies the type as 'rabbitmq', includes the connection string with credentials and host information, as well as the exchange and routing key for message publishing. It also defines retry count and function paths for loading and executing messages. The configuration is essential for ensuring the correct setup and operation of RabbitMQ in the application.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/rabbitmq.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: rabbitmq\nconfig:\n   connectionString: amqp://guest:guest@host.docker.internal:5672 \n   exchange: TestOne\n   routingKey: TestQueueOne_key\nretryCount: 3\nloadFn: com.gs.rabbitmq.loader\nexecuteFn: com.gs.rabbitmq.publish\n```\n\n----------------------------------------\n\nTITLE: Implementing ChatGPT Workflow Logic - TypeScript\nDESCRIPTION: Implements a Godspeed workflow function (src/functions/prompt.ts) that receives the HTTP event's prompt, retrieves the ChatGPT datasource, and calls its execute method for the chat capability. Requires @godspeedsystems/core and a defined datasources object in context. Input is GSContext including the HTTP inputs, output is the AI chat response from the datasource. Designed for programmatic workflows connecting user inputs to AI completions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, GSDataSource, GSStatus } from \"@godspeedsystems/core\";\nexport default async function (ctx: GSContext, args: any) {\n    const { inputs: {data: { body } }, }= ctx;\n    const prompt = body.prompt;    \n    const ds: GSDataSource = ctx.datasources.chatgpt;\n    \n    const response = await ds.execute(ctx, {\n        prompt,\n        meta: {fnNameInWorkflow: 'datasource.chatgpt.chat'}\n    });\n    return response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Static Variables in YAML for Godspeed\nDESCRIPTION: This YAML snippet shows how to define static variables in the default.yaml file for Godspeed projects. It includes configurations for log level, language, redaction, server URL, and request limits.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/config/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlog_level: debug\nlang: coffee\nredact: [] # fields to hide. Sample: ['ns', 'req.headers']\nserver_url: https://api.example.com:8443/v1/api\nhttpbin: # sample api datasource url\n  base_url: https://httpbin.org\nrequest_body_limit: 50mb\nfile_size_limit : 50mb\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Trace Information in Workflow Tasks - YAML\nDESCRIPTION: Demonstrates how to add a custom trace span in a workflow task using YAML. The trace is defined with a span name and attributes, which can include references to workflow inputs and outputs. Assumes underlying workflow engine supports OpenTelemetry or equivalent tracing. Key parameters: trace name and attributes, values may be templated. On execution, the span is started and ended with the task. No output is produced directly but trace data is sent to configured tracing backends.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/custom-metrics-logs-traces.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntrace:\n  name: span_name\n  attributes:\n    attribute1: value1\n    attribute2: value2\n```\n\n----------------------------------------\n\nTITLE: Merged Database Query Arguments after Authorization (YAML)\nDESCRIPTION: Illustrates the structure of the `args.data` for a Godspeed database query task after the JSON output from a successful authorization workflow has been merged. The `where` clause returned by the authorization workflow (e.g., `{ role: 'USER' }`) is combined with any `where` clause provided in the main workflow's inputs (`<% inputs.body.where %>`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  data:\n    include: <% inputs.body.include %>\n    where: <% inputs.body.where %> # where clause from authz workflow will be merged with this\n```\n\n----------------------------------------\n\nTITLE: Implementing a Workflow for Handling JSON Schema Validation Errors in YAML\nDESCRIPTION: This YAML snippet defines a Godspeed workflow (`error_handler`) designed to execute when an event's JSON schema validation fails (configured via `on_validation_error` in the event spec). The workflow's task (`erorr_step1`) uses the `com.gs.kafka` function to publish details about the error to a Kafka topic (`kafka_error_handle`). It sends the original event data (`<% inputs.event %>`) and the specific validation error (`<% inputs.validation_error %>`) using the `kafka1` datasource.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    summary: Handle json scehma validation error\n    id: error_handler\n    tasks:\n      - id: erorr_step1\n        fn: com.gs.kafka\n        args:\n          datasource: kafka1\n          data: # publish the event and validation error to kafka on a topic\n            value:\n              event: <% inputs.event %>\n              validation_error: <% inputs.validation_error %>\n          config:\n            topic: kafka_error_handle\n            method: publish\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to AWS S3 from Godspeed Workflow (JavaScript)\nDESCRIPTION: This JavaScript module implements a function to handle file uploads to AWS S3 within a Godspeed workflow. It reads a user-uploaded file from the context's data inputs, uploads it to an S3 bucket using AWS client methods, and returns a status object about the operation. Handles errors and logs them appropriately. Dependencies: @godspeedsystems/core, fs. Parameters: ctx (including file info and datasources). Input: file data in multipart/form-data, Output: GSStatus result. Requires proper AWS configuration and bucket access.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GSContext, GSStatus } from \"@godspeedsystems/core\";\nimport fs from 'fs'\n\nmodule.exports = async (ctx: GSContext) => {\n  const { files: { myfile } } = ctx.inputs.data;\n  const { datasources, logger } = ctx;\n  try {\n    return new Promise((resolve, reject) => {\n      fs.readFile(myfile.tempFilePath, async function (err, data) {\n        if (err) {\n        resolve(new GSStatus(false, 500, 'S3 document upload failed', { error: { message: err.message } }));\n\n        } // Something went wrong!\n        const contentType = ctx.inputs.data.headers['content-type']\n        var params = {\n          Key: myfile.name, //file name\n          Body: data,\n          Bucket: 'userdocs123',\n          ContentType: contentType,\n        };\n\n        const res = await datasources.aws.client.s3.putObject(params);\n\n        resolve(new GSStatus(true, 200, 'successfully uploaded document', res, undefined))\n\n      })\n    });\n\n  } catch (e: any) {\n    logger.error('S3 document upload failed %o', e)\n    return new GSStatus(false, 500, 'S3 document upload failed', { error: { message: e.message } })\n  }\n\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging with com.gs.log in YAML\nDESCRIPTION: This snippet shows how to use the com.gs.log function to log intermediate inputs/outputs during workflow execution in pino logging format. It accepts a log level and data to be logged, supporting different logging levels from Pino.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Summing x + y\n  description: Here we sum two hardcoded x and y values. Feel free to try using API inputs from body or params!\n  tasks:\n    - id: sum_step1\n      description: add two numbers\n      fn: com.jfs.sum\n      args:\n        x: 1\n        y: 2\n    - id: sum_step2\n      description: log the output in logs\n      fn: com.gs.log\n      args:\n        level: info # log levels: info, debug, error, warn, fatal, silent, trace\n        data: <% outputs.sum_step1 %>\n    - id: sum_step3\n      description: return the response\n      fn: com.gs.transform\n      args: <% outputs.sum_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Swagger Specification - JSON\nDESCRIPTION: This JSON snippet provides a template for creating a Swagger specification (OpenAPI metadata) which can be placed in '/config/swagger.json' to customize API documentation. It requires no libraries but expects valid JSON adhering to Swagger/OpenAPI standards. Fields include 'title', 'summary', 'description', 'termsOfService', 'contact', 'license', and 'version', all of which shape the rendered API docs metadata. Input must be standard-compliant JSON; output affects API documentation generation. Ensure correct placement and file formatting for successful customization.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/configuration/custom-swagger-spec-docs.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"info\": {\n  \"title\": \"Sample Pet Store App\",\n  \"summary\": \"A pet store manager.\",\n  \"description\": \"This is a sample server for a pet store.\",\n  \"termsOfService\": \"https://example.com/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.example.com/support\",\n    \"email\": \"support@example.com\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"version\": \"1.0.1\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs with Godspeed CLI (Bash)\nDESCRIPTION: Displays the `godspeed gen-crud-api` command. This command initiates the automatic generation of CRUD APIs (events, definitions, functions) based on the models defined in the specified Prisma schema file located in `./src/datasources/`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CRUD_API.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Defining Caching in Workflow Configuration\nDESCRIPTION: These YAML snippets demonstrate how to configure caching within various Godspeed workflows, showing how to set cache keys and override default cache settings with specific datasource instances.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/caching.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncaching: redis\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Events\n\"http.get./helloworld2\":\n  fn: helloworld2\n\"http.get./helloworld3\":\n  fn: helloworld3\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Functions (Helloworld2 workflow)\nid: helloworld2_workflow\ntasks:\n  - id: helloworld2_workflow_first_task\n    fn: com.gs.transform\n    args:\n      name: helloworld2\n    caching:\n      after:\n        key: xyz\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# Functions (Helloworld3 workflow)\nid: helloworld3_workflow\ntasks:\n  - id: helloworld3_workflow_first_task\n    caching:\n      before:\n        key: abc\n        invalidate: xyz #helloworld2 key\n      after:\n        key: abc\n        datasource: mem-cache #overrides the default cache `redis`\n    fn: com.gs.transform\n    args:\n      name: helloworld3\n```\n\n----------------------------------------\n\nTITLE: Converting Timestamp using Default Export Plugin (TypeScript)\nDESCRIPTION: Provides a *default* exported TypeScript function that converts an input timestamp string into a 'yyyy-MM-dd HH:mm:ss' formatted string using the `date-fns` library. Requires the `date-fns` package. Because it uses a default export in `plugins/epoch/convertEpoch.ts`, it's accessed in workflows using just the path like `epoch_convertEpoch`, omitting the function name.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport format from 'date-fns/format';\n\nexport default function convertEpoch(inputTimestamp: string){\n    const newDateTime = new Date(inputTimestamp);\n    return format(newDateTime, 'yyyy-MM-dd HH:mm:ss');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Workflow to Process Kafka Event Messages in YAML\nDESCRIPTION: This YAML snippet defines a Godspeed workflow designed to handle an incoming Kafka event. The workflow (`some_unique_id`) has one task (`step1`) that utilizes the `com.gs.kafka` function. It takes the entire input data from the Kafka message (`<% inputs %>`) and publishes it as a new message to a different Kafka topic (`publish-producer1`) using the configured `kafka1` datasource. This demonstrates forwarding or further processing of Kafka messages within a workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: Handle kafka event\n  id: some_unique_id\n  tasks:\n    - id: step1\n      summary: Publish an event with this data\n      fn: com.gs.kafka\n      args: # similar to Axios format\n        datasource: kafka1\n        config:\n          method: publish\n          topic: publish-producer1\n        data:\n          value: <% inputs %>\n      # Here we are publishing an event data to another topic\n```\n\n----------------------------------------\n\nTITLE: Mapping Configuration Keys to Environment Variables in YAML\nDESCRIPTION: Defines mappings between internal configuration keys (like `my_datasource.base_url`, `kafka.brokers`) and the names of environment variables (like `MY_DATASOURCE_BASE_URL`, `KAFKA_BROKERS`) in `custom-environment-variables.yaml`. It uses special keys like `__name` and `__format` for advanced mapping, such as specifying JSON format for Kafka brokers.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/configuration/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```\nmy_datasource:\n  base_url: MY_DATASOURCE_BASE_URL\n  api_key: MY_DATASOURCE_API_KEY\n  api_token: MY_DATASOURCE_API_TOKEN\n\nkafka:\n  brokers:\n    __name: KAFKA_BROKERS\n    __format: json\n  client_id: KAFKA_CLIENT_ID\n\njwt:\n  issuer: JWT_ISS\n  audience: JWT_AUD\n  secretOrKey: JWT_SECRET\n\nprisma_secret: PRISMA_SECRET\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in Event Source - YAML\nDESCRIPTION: This snippet illustrates how to configure JWT authentication within an event source's YAML file for the Express plugin. Required properties are 'issuer', 'audience', and 'secretOrKey', which must match the corresponding claims and secret from issued JWT tokens. This configuration applies JWT validation to all endpoints unless explicitly disabled. If required fields are missing, authentication will fail.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-auth-old.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\njwt:\n  issuer: <#config.issues#> # must be equal to the key iss in your jwt token\n  audience: <#config.audience#> #must be equal to the key aud in your jwt token\n  secretOrKey: <#config.secret#>\n\n```\n\n----------------------------------------\n\nTITLE: Handling Uploaded Files in TypeScript with Godspeed Systems\nDESCRIPTION: This TypeScript function processes uploaded files that are part of an event input captured by the Godspeed Systems framework. It accesses the file from the 'ctx.inputs.data' object and is intended to perform actions such as uploading to S3, followed by returning a success response.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function (ctx: GSContext) {\n    // You will get files in the ctx.inputs, along with params, body, query, user, headers\n    const { files: { panCardFile } } = ctx.inputs.data;\n    //do something like upload to S3\n    return {\n      data: 'Uploaded',\n      success: true,\n      code: 201,\n      //headers: {}\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Swagger API Documentation Endpoint - Plaintext\nDESCRIPTION: This snippet displays the typical local URL endpoint for accessing the Swagger-generated API documentation from a Godspeed-powered service. No dependencies are required beyond running the Godspeed server; users should substitute 'localhost:3000' with their actual domain/port as appropriate. The endpoint returns an interactive API documentation UI when visited in a browser.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/swagger-specs.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:3000/api-docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Metrics in GodSpeed YAML\nDESCRIPTION: Example configuration showing how to define custom metrics (counter and histogram) for HTTP calls. The example demonstrates setting up a counter metric 'httpbin_calls_total' that increments by 1 and a histogram metric 'httpbin_calls_duration' with timer for duration tracking.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n    - id: httpbin_step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      name: http bin step\n      description: Hit http bin with some dummy data. It will send back same as response\n      fn: com.gs.http         \n      metrics:\n        - name: httpbin_calls_total\n          help: 'httpbin_calls_total counter of httpbin requests labeled with: method, status_code'\n          type: counter\n          labels:\n            method: httpbin\n            status_code: <% outputs.httpbin_step1.code %>               \n          inc: 1\n        - name: httpbin_calls_duration\n          help: 'httpbin_calls_duration duration histogram of httpbin responses labeled with: method, status_code'\n          type: histogram\n          labels:\n            method: httpbin\n            status_code: <% outputs.httpbin_step1.code %>               \n          timer: true          \n      args:\n        datasource: httpbin\n        params: <% inputs.query %>\n        data: <% inputs.body %>\n        config:\n          url : /anything\n          method: post\n```\n\n----------------------------------------\n\nTITLE: Complete Single Function Example\nDESCRIPTION: Comprehensive example showing a complete single function definition with all possible components.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncom:\n  xyz:\n    someFn:\n      __name: step1\n      __summary: Summary of this function\n      __description: long description\n      __args:\n        __example:\n        __schema:\n      __ref: com.abc.anuj\n      __args:\n        arg1: 5\n        arg2: Hello World\n      __hooks:\n        __pre_validations:\n        __validations:\n        __preauths:\n        __auths:\n        __pre_ref:\n        __post_ref:\n        __on_error:\n        __finally:\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks with Dynamic Scripting\nDESCRIPTION: Illustrates the definition of tasks using dynamic scripting for function name evaluation. Showcases transforming inputs into function names and dynamically calling them using CoffeeScript within a YAML defined workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsummary: Call an API and transform the\ntasks:\n    - id: transform_fn_step1\n      description: find fn name\n      fn: com.gs.transform\n      args: |\n        <js%\n          if (inputs.body.fn == 'sum') {\n            return 'com.jfs.sum_workflow'\n          } else {\n            return 'com.jfs.helloworld'\n          }\n        %>\n    - id: call_fn_step2\n      description: call fn returned in transform_fn_step1\n      fn: <% outputs.transform_fn_step1.data %>\n      args:\n        name: <% inputs.body.name %>\n```\n\n----------------------------------------\n\nTITLE: Implementing an Execute Function in TypeScript\nDESCRIPTION: Defines an execute function in TypeScript used within a workflow. It utilizes a client initialized by the load function to perform operations based on input workflow arguments. The function checks if a datasource exists and processes input data, handling cases where the data is not an array.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/extensible-datasources.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function(args:{[key:string]:any;}) {\n    if(args.datasource) {\n        const client = args.datasource.client;\n        const data = args.data;\n        if (!Array.isArray(args.data)) {\n            data = [args.data];\n        }\n. . . . . . . . . .    \n    } else {\n        return { success: false, code: 500, data: 'datasource not found in the workflow' };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sequential Iteration with com.gs.each_sequential in YAML\nDESCRIPTION: This snippet demonstrates how to use the com.gs.each_sequential function to execute tasks sequentially for each value in an array. The final output is an array of the results from the last executed task of each iteration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: For each sample\n  description: Here we transform the response of for loop\n  tasks:\n    - id: each_sequential_step1\n      description: for each\n      fn: com.gs.each_sequential\n      value: [1, 2, 3, 4]\n      tasks:\n        - id: each_task1\n          fn: com.gs.transform\n          args: <% 'each_task1 ' + task_value %>\n    - id: each_sequential_step2\n      description: return the response\n      fn: com.gs.transform\n      args: <% outputs.each_sequential_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Workflow Step Using Plugins (YAML)\nDESCRIPTION: Demonstrates a workflow step that utilizes previously defined plugin functions for generating a random ID and formatting timestamps. Requires the plugins to be accessible globally as per their loading rules. The 'personal_email_id' is static, 'id' uses the 'randomInt' plugin, 'date' uses 'time_epoch_convertEpochToDate', and 'default_date' uses 'epoch_convertEpoch' for processing input data. Output is a YAML block suitable for Godspeed workflow configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/script-plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n  - id: httpbinCof_step1\\n    description: Hit http bin with some dummy data. It will send back same as response\\n    fn: datasource.api.post./anything\\n    args:\\n      data:\\n        personal_email_id: 'ala.eforwich@email.com'\\n        id: <% 'UID-' + randomInt(1,9) %>\\n        date: <% time_epoch_convertEpochToDate(inputs.body.datetimestamp) %>\\n        default_date: <% epoch_convertEpoch(inputs.body.datetimestamp) %>\\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Caching Behavior in Workflow Tasks (YAML)\nDESCRIPTION: This YAML snippet lists configurable caching parameters for a workflow task within Godspeed. Fields include 'key', 'invalidate', 'cache_on_failure', 'expires', and 'force', with comments explaining their function. This specification is added at the task level in workflow YAML files and controls caching logic per-task. Inputs are key names and options; configuration decides cache expiration, invalidation, and overwrite policies.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/caching.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncaching:\\n    key: <key name which is used to cache result in redis>\\n    invalidate: <used to invalidate the cache of some other task. Key name which we want to delete/remove from cache e.g. this field can be used in CRUD types task. While delete operation, invalidate the cache of read or update task>\\n    cache_on_failure: <true|false, whether you want to cache the failure result or not. By default, it is false>\\n    expires: <timer in seconds, until the cached result is valid>\\n    force: <true|false, force flag to specify not to use cache, always trigger task's function. Set it to true if you don't want to use cache>\\n\n```\n\n----------------------------------------\n\nTITLE: Sample Prisma Schema for MySQL\nDESCRIPTION: Provides a complete sample `prisma.schema` file configured for MySQL. It includes the datasource block pointing to the environment variable, a generator block for the Prisma Client JS, and example `User` and `Post` models with relations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MySQL.md#2025-04-22_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./prisma-clients/mysql\"\n  previewFeatures = [\"metrics\"]\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs for CockroachDB Models in Godspeed\nDESCRIPTION: Command to automatically generate CRUD API endpoints based on the Prisma schema defined for CockroachDB. This creates event handlers and workflows for each model.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/CokroachDB.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Payload in TypeScript Workflow\nDESCRIPTION: This TypeScript snippet highlights how to access the JWT payload within a workflow, demonstrating retrieval of the user object from the JWT for further operations, ensuring secure handling of user data.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-authentication.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSCloudEvent, GSContext, PlainObject, GSStatus, logger } from \"@godspeedsystems/core\";\nexport default function (ctx: GSContext, args: PlainObject) {\n    const {\n        inputs: {\n            data: {\n               user    \n            }\n        }, \n    }= ctx;\n\nreturn new GSStatus(true, 200, undefined, {'Payload user': user}, undefined);  \n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Task Output using Scripting (YAML/JS)\nDESCRIPTION: This YAML snippet shows a workflow with two tasks. The second task (`sum_step2`) uses `com.gs.return` and accesses the output of the first task (`sum_step1`) via runtime scripting (`<% outputs.sum_step1 %>`) in its `args` property. This demonstrates chaining task results.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Summing x + y\ndescription: Here we sum two hardcoded x and y values. Feel free to try using API inputs from body or params!\ntasks:\n  - id: sum_step1\n    description: add two numbers\n    fn: com.gs.transform\n    args: <% inputs.body.x + inputs.body.y %>\n  - id: sum_step2\n    fn: com.gs.return\n    args: <% outputs.sum_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Workflow with Dynamic Function Selection in YAML\nDESCRIPTION: This workflow demonstrates how to dynamically select a function based on input and use the result in a subsequent task.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the\ntasks:\n    - id: transform_fn_step1\n      description: find fn name\n      fn: com.gs.transform\n      args: |\n        <js%\n          if (inputs.body.fn == 'sum') {\n            return 'com.jfs.sum_workflow'\n          } else {\n            return 'com.jfs.helloworld'\n          }\n        %>\n    - id: call_fn_step2\n      description: call fn returned in transform_fn_step1\n      fn: <% outputs.transform_fn_step1.data %>\n      args:\n        name: <% inputs.body.name %>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Godspeed Workflow for Post-Authentication Handling in TypeScript\nDESCRIPTION: Provides the TypeScript implementation for the `helloUser` function (`src/functions/helloUser.ts`). This function is triggered by the `/verify/user` event. It accesses the authenticated user's information (username or display name) from the context (`ctx.inputs.data.user`), constructs a greeting message, and returns it with a 200 status code using `GSStatus`. Depends on `@godspeedsystems/core`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/oauth2-authentication.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSCloudEvent, GSContext, PlainObject, GSStatus } from \"@godspeedsystems/core\";\nexport default function (ctx: GSContext, args: PlainObject) {\n    const {\n        inputs: {\n            data: {\n              user\n            }\n        }, \n    \n    }= ctx;\n    const name = user.username|| user.displayName ;\n    return new GSStatus(true, 200, undefined, 'Hello ' + name, undefined);  \n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client and Setting Up Database\nDESCRIPTION: Command to prepare the Prisma setup, which generates the Prisma client and pushes the schema to the database. This is a Godspeed-specific command that simplifies the Prisma workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Configuring Copy Dependencies in Godspeed (TOML)\nDESCRIPTION: This TOML configuration snippet, located in `configFolder/schema/union.toml`, demonstrates how to define 'Copy' dependencies, suitable for many-to-one or one-to-one relationships. It shows examples where a person's 'inLaws' field is automatically populated by copying their spouse's parents, and a file's permissions are copied from its parent folder. Updates to the source field (e.g., folder permissions) will overwrite the target field (file permissions).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/model-setup.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[person]\ninLaws = \"+spouse.parents\" #This will ensure copy of in laws between husband and wife\n[file]\npermissions = \"+folder.permissions\" #Whenever a folder’s permissions are updated the underlying files’ permissions are updated automatically. You can still manually override them, without affecting the folder. But whenever the folder’s permissions are updated again, the file’s permissions will get overwritten.\n```\n\n----------------------------------------\n\nTITLE: API Datasource Authentication Configuration\nDESCRIPTION: Configuration for API datasource with authentication workflow specification\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authentication/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntype: api\nbase_url: <% config.api.base_url %>\nauthn: com.jfs.api_auth\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Plugin in JavaScript\nDESCRIPTION: Illustrates the abstract methods to implement in a custom cache plugin by extending the GSCacheAsDatasource class, defining set, get, and del methods pertinent to cache manipulation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/caching.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport abstract class GSCachingDataSource extends GSDataSource {\n  //Redis options are available [here](https://redis.io/commands/set/) Client may or may not support all actions. RedisOptions is a superset based on what Redis supports\n  public abstract set(key:string, val: any, options: RedisOptions): any; \n  public abstract get(key: string): any; //Return the value stored against the key\n  public abstract del(key: string): any; //Delete the key\n}\n\nexport type RedisOptions = {\n  EX? : number,\n  PX? : number,\n  EXAT?: number,\n  NX?: boolean,\n  XX?: boolean,\n  KEEPTTL?: boolean,\n  GET?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Kafka and Other Datasource YAML Files - Shell\nDESCRIPTION: Shows the directory layout for organizing datasource configuration files, including Kafka and an HTTP source. This tree structure highlights where to place YAML configuration files for different datasources under the src/datasources directory. No dependencies are required to understand the structure, but implementations within these files should conform to the framework's datasource specifications.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/kafka.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\\n├── config\\n└── src\\n    ├── datasources\\n    │   └── httpbin.yaml\\n    │   ├── kafka1.yaml\\n    │   └── kafka2.yaml\\n    ├── events\\n    ├── functions\\n    └── mappings\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Datasource Plugin Template - TypeScript\nDESCRIPTION: Provides a boilerplate TypeScript class to extend Godspeed's GSDataSource for creating a custom datasource plugin. Implements protected async initClient for client initialization and async execute to define execution logic. Requires @godspeedsystems/core and expects user modifications. Inputs include context and input arguments. Outputs are typically processed status or action results. Suitable for initializing datasources with custom logic and structure.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  import { GSContext,  GSDataSource, GSStatus, PlainObject,} from \"@godspeedsystems/core\";\n\n  export default class DataSource extends GSDataSource {\n  protected async initClient(): Promise<object> {\n      try {\n        \n        // initialize your client\n\n      } catch (error) {\n      throw error;\n      }\n  }\n  async execute(ctx: GSContext, args: PlainObject): Promise<any> {\n      try {\n\n        // execute methods\n        \n      } catch (error) {\n        throw error;\n      }\n  }\n  }\n  const SourceType = 'DS';\n  const Type = \"y\"; // this is the loader file of the plugin, So the final loader file will be `types/${Type.js}`\n  const CONFIG_FILE_NAME = \"y\"; // in case of event source, this also works as event identifier, and in case of datasource works as datasource name\n  const DEFAULT_CONFIG = {};\n\n  export {\n    DataSource,\n    SourceType,\n    Type,\n    CONFIG_FILE_NAME,\n    DEFAULT_CONFIG\n  }\n \n```\n\n----------------------------------------\n\nTITLE: Configuring Common and Specific Middleware in Godspeed (YAML)\nDESCRIPTION: Illustrates how to define middleware configurations within the `/config/middleware` directory. It shows the structure for setting common middleware hooks (like preAuths, auths, validations, onError, finally) under `common/` that apply to all functions. It also demonstrates how to override or modify these common settings for specific functions under `function_overrides/`, using operations like `push`, `prepend`, or `set` to manage the list of middleware functions (identified by their FQNs).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/scaffolding/intro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n./config\n    middleware/\n      common/                                                       // all functions will have common middleware defined here\n        preAuths\n          com.mg.gs.telemetry.createSpan\n          dot.separated.fqn.fn2\n        auths //GSAssert\n          f.q.n2.cachedAclsBasedAuth\n          f.q.n2.ownershipBasedAuth\n        validations //GSAssert\n          f.q.n3.applyValidationA\n          f.q.n4.applyValidationB\n        onError\n        finally\n          com.mg.gs.telemetry.closeSpan\n          com.mg.gs.telemetry.EFKLog\n          com.mg.gs.telemetry.trace\n          com.mg.gs.telemetry.sendLatencyMetric\n\n      function_overrides                                             //function specific overrides values here\n        com\n          godspeed\n            lending\n              createLoanAccount\n                middleware\n                  preAuths\n                    push // | prepend | set                          //One can add middleware before or after the common middleware. Or replace (set) the common middleware with override.\n                      - f.q.n.fn1\n                      - dot.separated.fqn.afterAll\n                    prepend\n                      - f.q.n.beforeAll\n                  auths //GSAssert\n                    set // | prepend | set\n                      - f.q.n2.cachedAclsBasedAuth\n                      - f.q.n2.ownershipBasedAuth\n                  validations\n                    prepend\n                      - f.q.n3.applyValidationA\n                      - f.q.n4.applyValidationB\n                  finally\n```\n\n----------------------------------------\n\nTITLE: Returning Data from Godspeed Event Handlers (TypeScript)\nDESCRIPTION: Demonstrates multiple equivalent ways to return data and status information from a Godspeed event handler function in TypeScript. Shows returning raw data, returning an object with `data`, `code`, `message`, and `success` fields (with variations), and returning an instance of the `GSStatus` class. The framework interprets these different return types consistently.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/native-language-functions.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n    // Returning only data\n    return 'Its working! ' + body.name;\n\n    //SAME AS\n    return {\n        data: 'Its working! ' + body.name,\n        code: 200,\n        message: 'OK', //HTTP protocol message to be returned from service\n        // success: true,\n        // headers: undefined\n    }\n    //SAME AS\n    return {\n        data: 'Its working! ' + body.name,\n        code: 200,\n        message: 'OK', //HTTP protocol message to be returned from service\n        success: true,\n        // headers: undefined\n    }\n    //SAME AS\n    return {\n        data: 'Its working! ' + body.name,\n        code: 200,\n        message: 'OK', //HTTP protocol message to be returned from service\n        success: true,\n        headers: undefined\n    }\n    // SAME AS returning GSStatus like this\n    return new GSStatus(true, 200, 'OK', 'Its working! ' + body.name, headers);  \n```\n\n----------------------------------------\n\nTITLE: Set Execution Policy on Windows\nDESCRIPTION: Command to change Windows PowerShell's execution policy to RemoteSigned, allowing scripts to run. Run PowerShell as Administrator before executing this command.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nSet-ExecutionPolicy RemoteSigned\n```\n\n----------------------------------------\n\nTITLE: Initializing In-Memory Cache Data Source with Godspeed Systems in JavaScript\nDESCRIPTION: Implements a custom GSCachingDataSource using an in-memory JavaScript object for caching, conforming to Godspeed Systems patterns. Provides set, get, and del methods to interact with the cache, and initializes the client to an empty object. Uses Godspeed logger for debugging. The execute method throws an error to signal it is not yet implemented. Requires @godspeedsystems/core as a dependency and expects to be used where a lightweight, volatile in-memory caching solution is sufficient.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/caching.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GSContext, GSCachingDataSource, PlainObject, logger } from \"@godspeedsystems/core\";\n\nexport default class DataSource extends GSCachingDataSource {\n  protected async initClient(): Promise<PlainObject> {\n    this.client = {};\n    return this.client;\n  }  \n\n  set(key: string, val: any, options: { EX?: number | undefined; PX?: number | undefined; EXAT?: number | undefined; NX?: boolean | undefined; XX?: boolean | undefined; KEEPTTL?: boolean | undefined; GET?: boolean | undefined; }) {\n    logger.debug('set key %s %o', key, this.client);\n    this.client[key] = val;\n  }\n\n  get(key: string) {\n    return this.client[key];\n  }\n\n  del(key: string) {\n    delete this.client[key];\n  }\n\n  execute(ctx: GSContext, args: PlainObject): Promise<any> {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Log Records in Workflow Tasks - YAML\nDESCRIPTION: Provides a YAML DSL specification for adding structured custom log entries before and after workflow task execution. Supports log levels and structured messages, parameters, and attributes. Logging levels follow typical semantics (e.g., error, debug). Inputs: log level, message, params, attributes; outputs: structured logs emitted at appropriate phases. Requires log collector compatible with structured logs (e.g., OTEL Logging Data Model, pino).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/custom-metrics-logs-traces.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlogs:\n  before:\n    level: fatal|error|warn|info|debug|trace # refer pino for levels\n    message: 'Sample log before'\n    params: \n      param1: val1\n      param2: val2\n    attributes:\n      request:\n        query: <%inputs.query%>\n  after:\n    level: info\n    message: 'Sample log after'\n    params:\n    attributes: \n```\n\n----------------------------------------\n\nTITLE: Embedding a YouTube Video with HTML iframe\nDESCRIPTION: This HTML snippet demonstrates embedding a YouTube video using an `iframe` element nested within a `div`. The `div` uses inline CSS (`style` attribute) to maintain a 16:9 aspect ratio, ensuring the video player is responsive. The `iframe` tag specifies the video source URL (`src`) and other attributes like `frameborder` and `allowfullscreen`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position: 'relative', paddingBottom: '56.25%', height: 0, overflow: 'hidden' }}>\n<iframe style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }} src=\"https://www.youtube.com/embed/E33GqpTr4iw?si=Er9oRp9L6YzH8EJt\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs from Prisma Schema using Godspeed CLI - Bash\nDESCRIPTION: This snippet shows the CLI command to automatically generate CRUD API endpoints based on the Prisma schema defined in ./src/datasources/Postgres.prisma. It utilizes godspeed's gen-crud-api feature, which interprets model definitions and scaffolds typical CRUD endpoints. Prerequisites include a working Godspeed project and a valid Prisma schema file.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PostgreSQL.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Defining a Sum Workflow with Multiple Tasks in YAML\nDESCRIPTION: This example shows a workflow that sums two numbers using a custom function and then transforms the result using an inbuilt function.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Summing x + y\ndescription: Here we sum two hardcoded x and y values. Feel free to try using API inputs from body or params!\ntasks:\n  - id: sum_step1\n    description: add two numbers\n    fn: com.jfs.sum #This is a developer defined function that takes two arguments, performs addition and returns the total.\n    args:\n      x: 1\n      y: 2\n  \n  - id: sum_step2\n    description: return the response\n    fn: com.gs.transform #Inbuilt function that converts the code written in <%%>.\n    args: <% outputs.sum_step1 %> #we access the first task output and return it.\n```\n\n----------------------------------------\n\nTITLE: Specifying Data Models with Prisma Schema - Prisma - Prisma\nDESCRIPTION: Defines a Prisma schema for a MongoDB datasource in the Godspeed framework. It includes a generator for Prisma Client JS, connection details for MongoDB via an environment variable, and a sample `User1` model. Required dependencies are the Prisma CLI and a valid `MONGO_TEST_URL` environment variable. Inputs include the schema file; outputs are generated database models and Prisma client code.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/datastore.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated-clients/mongo\"\n  previewFeatures = [\"metrics\"]\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"MONGO_TEST_URL\")\n}\n\nmodel User1 {\n  id        String      @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt DateTime @default(now())\n  email     String   @unique\n  name      String?\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Godspeed Development Server (Bash)\nDESCRIPTION: This command uses the Godspeed CLI to start the application server in development mode. It typically makes the defined APIs and Swagger documentation available, usually at `http://localhost:3000`. This command needs to be run from the root directory of the Godspeed project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/axios-apis.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed serve\n```\n\n----------------------------------------\n\nTITLE: Godspeed CLI Help Output\nDESCRIPTION: Sample output of the 'godspeed --help' command, showing available commands and options for the Godspeed CLI. This includes commands for creating projects, running development servers, and managing plugins.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> **godspeed --help**\n\n~~~~~~ Godspeed CLI ~~~~~~\n\nUsage: Godspeed CLI [options] [command]\n\nCLI tool for godspeed framework.\n\nOptions:\n  -V, --version         output the version number\n  -h, --help            display help for command\n\nCommands:\n  create <projectName>  create a new godspeed project.\n  dev                   run godspeed development server.\n  clean                 clean the previous build.\n  build                 build the godspeed project.\n  devops-plugin         manage(add, remove, update) godspeed plugins for devops.\n  plugin                manage(add, remove, update) eventsource and datasource plugins for godspeed.\n  help [command]        display help for command\n\nFor detailed documentation visit <https://docs.godspeed.systems>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Document for API Return\nDESCRIPTION: This JSON snippet illustrates how the document of an entity like an Event might look when returned from an API. It includes metadata like type, ID, version, and multilingual fields. It requires a configured API to fetch and serialize the data, and demonstrates the uniformity in data representation across different databases.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/model-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_type\": \"person\",\n  \"_id\": \"294464\",\n  \"_version\": 4,\n  \"data\": {\n    \"tibetan\": {\n      \"name\": \"ཆེན་པོ་མཆོག་ནས་ནང་ཆོས་ངོ་སྤྲོད་སྩལ་།\",\n    },\n    \"english\": {\n      \"name\": \"His Holiness the Fourteenth Dalai Lama.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure with Examples in Plain Text\nDESCRIPTION: Demonstrates the project directory structure when created without the '-n' option using the Godspeed CLI. This structure includes example configurations to guide development. Key directories are 'config/' and 'src/', with specific examples outlined within.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/scaffolding.md#2025-04-22_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\n.\\n├── config\\n│   ├── custom-environment-variables.yaml\\n│   ├── default.yaml\\n│   ├── index.yaml\\n│   └── telemetry\\n│       └── index.yaml\\n├── package.json\\n└── src\\n    ├── datasources\\n    │   └── httpbin.yaml\\n    ├── events\\n    │   ├── call_another_workflow.yaml\\n    │   ├── document.yaml\\n    │   ├── helloworld.yaml\\n    │   ├── httpbin_anything.yaml\\n    │   ├── run_tasks_in_parallel.yaml\\n    │   ├── sum.yaml\\n    │   └── switch_case.yaml\\n    ├── functions\\n    │   └── com\\n    │       └── biz\\n    │           ├── call_another_wf.yaml\\n    │           ├── documents\\n    │           │   └── upload_file.yaml\\n    │           ├── helloworld.yaml\\n    │           ├── httpbin_anything.yaml\\n    │           ├── run_tasks_in_parallel.yaml\\n    │           ├── sub_wf.yaml\\n    │           ├── sum.js\\n    │           ├── sum_workflow.yaml\\n    │           └── switch_case.yaml\\n    └── mappings\\n        └── index.yaml\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino Logging Options via YAML - YAML\nDESCRIPTION: This snippet demonstrates how to configure Pino logger settings in a YAML config file for a microservices application. Options shown include log redaction of sensitive fields, log level selection, synchronous mode, timestamp format using Pino's stdTimeFunctions, and controlling bindings for process id and hostname. Each parameter is documented with inline comments, and can be tailored for debugging or production as needed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\\n  redact: ['a.b.c', 'a.b.*', 'req.headers', 'mobileNumber'] #pino redact rules. Default null.\\n  level: debug #by default info\\n  sync: true #By default sync is false. For debugging, keep it true. For performance keep it false.\\n  timestamp: stdTimeFunctions.isoTime #Pino date formats\\n  bindings: # should pid and hostname be enabled in pino log bindings.\\n    pid: false\\n    hostname: false \n```\n\n----------------------------------------\n\nTITLE: Defining a Cron Schedule Event\nDESCRIPTION: This YAML snippet from `src/events/every_minute_task.yaml` defines a cron event. The key `cron.* * * * *.Asia/Kolkata` specifies the event source type (`cron`), the cron schedule (`* * * * *` for every minute), and the timezone (`Asia/Kolkata`). It maps this scheduled event to trigger the `every_minute` function defined in `src/functions/every_minute.yaml`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# event for Shedule a task for evrey minute.\n\ncron.* * * * *.Asia/Kolkata:\n  fn: every_minute\n\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Elasticsearch Mapping with custom-mapping.yaml\nDESCRIPTION: Demonstrates how to define custom Elasticsearch mappings in a `custom-mapping.yaml` file to override the framework's auto-generated defaults. The example shows customizing mappings for the `reconciled` entity type, including dynamic templates and specific field properties like `charge_params`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nreconciled: #The type of entity\\n  mappings:\\n    dynamic_templates:\\n    - full_name:\\n        path_match: charge_params.*\\n        mapping:\\n          type: float\\n    properties:\\n      charge_params:\\n        properties:\\n          fee (Fee):\\n            type: float\\n          fee (Phí dịch vụ):\\n            type: float\n```\n\n----------------------------------------\n\nTITLE: Running Godspeed Service in Auto-Watch Mode\nDESCRIPTION: This command shows how to run the Godspeed service in auto-watch mode, which is useful for development and testing.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Mongoose Datasource.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed serve\n```\n\n----------------------------------------\n\nTITLE: Generating Application Access Instructions Based on Helm Values (Helm/Shell)\nDESCRIPTION: This Helm template (`gotmpl`) dynamically generates instructions or URLs for accessing the deployed application after installation. It checks `.Values.ingress.enabled` and `.Values.service.type` to determine the access method (Ingress, NodePort, LoadBalancer, or ClusterIP). Depending on the method, it either constructs the URL directly using values (Ingress), generates `kubectl` shell commands to retrieve dynamic information (Node IPs, Service IPs, Pod names, ports) and then echo the URL (NodePort, LoadBalancer), or sets up port-forwarding (ClusterIP). It requires `kubectl` access to the cluster where the chart is deployed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/helm-chart/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: gotmpl\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"helm-chart.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"helm-chart.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"helm-chart.fullname\" . }} --template \"{{\\\"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\\\"}}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"helm-chart.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationship and Denormalization Rules (Schema/Relationship Syntax, Plaintext)\nDESCRIPTION: This code reflects configuration and rule definitions for modeling many-to-many relationships and denormalization in the Godspeed schema. It demonstrates notation for entity relationships (e.g., speakers and events), placement of foreign keys, and denormalization logic that ensures fields like speaker names are automatically synchronized and updated as relationships change. It is intended for use in schema or denormalisation.txt files, with automatic handling by the framework.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/intro.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n//An example of many to many relationships. An Event has multiple speakers, and a speaker can speak in many events.\nspeakers <> events\n[event] <> [speaker]\nDon't store foreign key in speaker //Means only event will have the foreign key of speaker stored in it.\n\n//For denormalization, the following rule in schema/denormalisation.txt stores the names of speakers in the event\n[event]\nspeakers{name} //Whenever a speaker and event are linked, the speaker's name is automatically copied to the event along with the foreign key (speaker's id).\n               //When unlinked, the name of the speaker is also removed along with the foreign key.\n               //When the name of the speaker is changed, the new name reflects across all the events where that speaker is linked.\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch-Case Logic in Workflows\nDESCRIPTION: This example illustrates the use of switch-case logic within workflows to dynamically choose task execution paths based on input conditions. It demonstrates integrating outputs from one task into others for sequential execution.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nsummary: Workflow with switch-case and transform task\nid: example_switch_functionality_id\ndescription: |\n  Run two tasks in series. Both take different arguments. First one is switch case task.\n  Second is transform task which consumes the output of step1 and shapes the final output of this workflow.\ntasks: # tasks to be run in sequence (default is sequence)\n  - id: step1_switch ## id of this switch task. Its output will be accessible\n    # to subsequent tasks at `outputs.step1_switch` location. Like in step2 below.\n    fn: com.gs.switch # Switch workflow takes `value` and `cases` as arguments. The cases object specifies another task for every case.\n    value: <%inputs.body.condition%> # Evaluation of dynamic values happens via <% %>\n    cases:\n      FIRST:\n        id: 1st\n        fn: com.gs.return\n        args: \"'case - 1'\"\n      SECOND:\n        id: 2nd\n        fn: com.gs.return\n        args: \"'case - 2'\"\n      THIRD:\n        id: 3rd\n        fn: com.gs.return\n        args: \"'case - 3'\"\n    defaults:\n      id: default\n      fn: com.gs.return\n      args: <%inputs.body.default_return_val%> #coffee/js script for dyanmic evaluation. Wrapped in <% %>. Same as that used elsewhere in workflows for dynamic calculations and variable substitutions. For ex. as used in com.gs.transform and com.gs.return\n  - id: step2\n    fn: com.gs.transform\n    args: | #coffee for dyanmic evaluation. Wrapped in <% %>\n        <coffee% {\n          code: 200,    \n          data: outputs['1st']\n        } %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Node Redis Datasource in YAML\nDESCRIPTION: Provides a sample YAML configuration for defining a single-node Redis datasource. It specifies the datasource type as 'redis' and uses a standard Redis connection URL format (compatible with `node-redis`) to define connection parameters like host, port, credentials, and database number.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/redis.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: redis\\nurl: redis[s]://[[username][:password]@][host][:port][/db-number]\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Validation Error Responses in YAML\nDESCRIPTION: This YAML snippet demonstrates setting up request validation for an API endpoint with customizable error handling using the 'on_request_validation_error' handler. The snippet specifies parameters required for the API call, along with their data types and schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/validations/validation-error.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"http.get./validation\":\n  fn: test_validation\n  on_request_validation_error: on_request_validation #can be fn path, or a series of tasks\n  params:\n  - name: num_1\n    in: query\n    required: false\n    schema:\n      type: number\n  - name: num_2\n    in: query\n    required: true\n    schema:\n      type: number\n\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL using URL Format\nDESCRIPTION: Provides the standard connection URL format and a specific example for connecting to a PostgreSQL database. This format is used when configuring PostgreSQL connections, needing username, password, host, port, and database name.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nConnection URL format: `postgresql://username:password@host:port/database`\nExample connection URL: `postgresql://postgres:postgres@localhost:5432/test`\n```\n\n----------------------------------------\n\nTITLE: Calling Mongoose findOne from YAML Workflow (Multiple Args)\nDESCRIPTION: This YAML snippet shows a Godspeed workflow task calling `findOne` on `SomeModel`. It demonstrates passing multiple arguments (query filter, projection, options) to the Mongoose function by providing them as an array under the `args` property. This array is spread when calling the underlying Mongoose function.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nid: helloworld2_workflow\ntasks:\n  - id: helloworld2_workflow_first_task\n    fn: datasource.mongoose.SomeModel.findOne\n    args: #as an array\n      - name: mastersilv3r #search clause: First argument\n      - 'name age' #The projection: second argument\n      - {} # Options: the third argument\n```\n\n----------------------------------------\n\nTITLE: Returning Validation Error in JSON Response from Godspeed API - JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a typical validation error response returned by the Godspeed framework when an API request fails schema validation due to missing required query parameters. The response clearly indicates the type of error, error code, validation message, and the specific schema path and missing property. Expected input is a failed API call missing the 'name' query parameter; output is a structured JSON error suitable for debugging. No external dependencies are needed beyond Godspeed framework's API schema validation mechanism.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"validation_error\\\": {\\n    \\\"success\\\": false,\\n    \\\"code\\\": 400,\\n    \\\"message\\\": \\\"request validation failed.\\\",\\n    \\\"error\\\": \\\"must have required property 'name' in query\\\",\\n    \\\"data\\\": {\\n      \\\"message\\\": \\\"The API cannot be executed due to a failure in request params schema validation.\\\",\\n      \\\"error\\\": {\\n        \\\"instancePath\\\": \\\"\\\",\\n        \\\"schemaPath\\\": \\\"#/required\\\",\\n        \\\"keyword\\\": \\\"required\\\",\\n        \\\"params\\\": {\\n          \\\"missingProperty\\\": \\\"name\\\"\\n        },\\n        \\\"message\\\": \\\"must have required property 'name' in query\\\"\\n      }\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Request Event in YAML\nDESCRIPTION: This snippet demonstrates how to define an HTTP request event for a 'do_KYC' operation. It includes handler specification, data schema, and example input.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/events.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndo_KYC.__http.post:\n  # exposed by convention as REST URL: app_base_url/do_KYC on method POST\n  __handler: __src.com.abc.do_KYC\n  __data: # {body, params, query, headers} Bank API POST url is: /create_loan/${pan}/?user_id=${user_id} & body takes {user_name, address}\n     __example:\n        body:\n          user_name: Ayush\n          pan: AKJP****\n          address: India\n        # In case of HTTP event, query, headers and params will be also present\n        headers:\n        query:\n        params:\n    __schema: #Validation will happen after recieving and before sending out event. In case of HTTP channel, payload will have metadata.http.{headers, params, query}\n      # ${config.src.com.pinelabs.li.schemas.create_loan_api} #using template written elsewhere. For ex. compulsory pan, user_name, address\n      body:\n        type: object\n        properties:\n          user_name: string\n          pan: string\n          address: string\n          required: [user_name, pan, address]\n      headers:\n      query:\n      params:\n  #__response: someother.do_KYC.http.post.response # Can be implicit or explicit (in case of custom event names)\n```\n\n----------------------------------------\n\nTITLE: Configuring Datasource-Level Authentication (YAML)\nDESCRIPTION: YAML snippet defining a Godspeed API datasource (`type: api`). It specifies a dedicated authentication workflow (`authn: com.jfs.httpbin_auth`) that will be executed automatically before any request is made using this datasource. This allows abstracting authentication logic (like fetching tokens) for specific external services.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntype: api\nbase_url: <% config.httpbin.base_url %>\nauthn: com.jfs.httpbin_auth\n```\n\n----------------------------------------\n\nTITLE: Starting Godspeed Service in Watch Mode\nDESCRIPTION: Runs the Godspeed service in watch mode, allowing for live development and testing by automatically rebuilding the project on file changes.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/getting-started.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed serve\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Frontmatter in YAML\nDESCRIPTION: YAML frontmatter that defines metadata for a blog post including the slug, title, author information, and tags. This metadata is commonly used by static site generators like Docusaurus to organize and display blog content.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/blog/2019-05-28-first-blog-post.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nslug: first-blog-post\ntitle: First Blog Post\nauthors:\n  name: Gao Wei\n  title: Docusaurus Core Team\n  url: https://github.com/wgao19\n  image_url: https://github.com/wgao19.png\ntags: [hola, docusaurus]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Error Logging in Workflow Tasks\nDESCRIPTION: YAML configuration example showing how to implement custom error logs for tasks within a workflow. This allows specifying error types and messages that will be included in the logs when errors occur.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: add custom error logs on workflow\nid: validation_error\ntasks:\n    - id: error_transform\n      fn: com.biz.error_log\non_error:\n    log_attributes:\n        error_type: \"enter your custom error type here\"\n        error_message: \"xyz value is required\"\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install all the dependencies listed in the project's `package.json` file. This is a prerequisite step after creating or cloning a Node.js project to ensure all required libraries are available.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/debugger-in-yaml.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Sample OTEL Format Error Logs with Custom Attributes\nDESCRIPTION: Example of OTEL format error logs showing how custom error attributes are included in the output. These logs include the custom error attributes defined in the on_error configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n    {Timestamp: \"1688563866502000000\"\n    SeverityNumber: 17\n    SeverityText: \"ERROR\"\n    TraceId: \"7563f0bd1e6c6508e58a4d1de1464635\"\n    SpanId: \"c4c65132ef79982f\"\n    TraceFlags: \"01\"\n    Resource: {\n      \"service.name\": \"unknown_service:node\",\n      \"host.hostname\": \"6295f63d9181\",\n      \"process.pid\": 8455\n    }\n    Attributes: {\n      \"event\": \"/postgres/user/search.http.post\",\n      \"workflow_name\": \"com.biz.postgres.user.search\",\n      \"file_name\": \"com.biz.postgres.user.search\",\n      \"msgparameter\": {\n        \"fruit\": \"apple\"\n      },\n      \"task_id\": \"\",\n      \"error\": {\n        \"error_type\": \"enter your custom error type here\",\n        \"error_message\": \"xyz value is required\"\n      }\n    }}\n```\n\n----------------------------------------\n\nTITLE: Defining and Mapping Environment Variables in YAML\nDESCRIPTION: This YAML snippet maps environment variables to specific keys used in the Godspeed project configuration system. These mappings allow developers to use more meaningful key names in their code instead of raw environment variable names.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/config.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmy_datasource:\n  base_url: MY_DATASOURCE_BASE_URL\n  api_key: MY_DATASOURCE_API_KEY\n  api_token: MY_DATASOURCE_API_TOKEN\n\nkafka:\n  brokers:\n    __name: KAFKA_BROKERS\n    __format: json\n  client_id: KAFKA_CLIENT_ID\n\njwt:\n  issuer: JWT_ISS\n  audience: JWT_AUD\n  secretOrKey: JWT_SECRET\n\nprisma_secret: PRISMA_SECRET\n```\n\n----------------------------------------\n\nTITLE: User Login Example Using JWT Authentication\nDESCRIPTION: This example shows a user login event configuration using JWT authentication, setting authn to false for the login endpoint. It outlines the request and response schemas for handling login attempts.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-authentication.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Login with username and password\nhttp.post./login:   # defines the POST request that will be triggered when a client hits /login endpoint.\n  fn: verifyLogin   # the workflow to handle the request\n  authn: false\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            username:\n              type: string\n            password:\n              type: string\n          required:\n            - username\n            - password\n  responses:\n    '200':\n      description: 'Login successful'\n      content:\n        application/json:\n          schema:\n            type: object\n    '401':\n      description: 'Invalid credentials'\n      content:\n        application/json:\n          schema:\n            type: string\n            example: 'Invalid username or password'\n\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs for Godspeed Data Sources\nDESCRIPTION: The gen-crud-api command automatically generates CRUD (Create, Read, Update, Delete) APIs for configured datastores and Elasticgraph data sources, prompting the user to select which data sources to generate APIs for.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed gen-crud-api\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|                          \n\n> eg_test@1.0.0 gen-crud-api\n> npx godspeed-crud-api-generator\n\nSelect datasource / schema to generate CRUD APIs\n(x) elasticgraph.yaml\n( ) For all\n( ) Cancel\n```\n\n----------------------------------------\n\nTITLE: Defining an Example Mongoose Model in TypeScript\nDESCRIPTION: Provides a complete example of a Mongoose model definition file using TypeScript. It imports necessary components from 'mongoose', defines a `SomeModelSchema` with various fields, types, and requirements, creates the Mongoose `SomeModel` using the schema and collection name, and finally exports it adhering to the required structure with 'type' and 'model' properties.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst { model, Schema, Document } =require('mongoose');\n\nconst SomeModelSchema = new Schema(\n  {\n    partnerName: {\n      type: String,\n      required: true,\n    },\n    productType: {\n      type: String,\n      required: true,\n    },\n    apiType: {\n      type: String,\n      required: true,\n    },\n    method: {\n      type: String,\n      required: true,\n    },\n    api: {\n      type: String,\n      required: true,\n    },\n    code: String,\n    headers: Schema.Types.Mixed,\n    payload: Schema.Types.Mixed,\n    response: Schema.Types.Mixed,\n    isDynamicUrl: Boolean,\n    expectedResponseStatusCode: Number,\n  },\n  { timestamps: true }\n);\n\nconst SomeModel = model('some-model', SomeModelSchema, 'some-model');\nmodule.exports = {\n    type: 'SomeModel', //The name by which you will access methods of this collection/model\n    model: SomeModel\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization at Eventsource Level (YAML)\nDESCRIPTION: This snippet configures authorization at the eventsource level in Godspeed using either a YAML list of function references or a single authorization function. The referenced function ('com.gs.is_allowed') determines user access across all events in the eventsource. It's essential to ensure the function exists and handles required authorization logic. Output is consistent, reusable access control for all events unless overridden.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/walkthrough.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nauthz: \\n  - fn: com.gs.is_allowed\\n\\n# OR\\nauthz: com.gs.is_allowed\n```\n\n----------------------------------------\n\nTITLE: Adding Cache Plugin via Godspeed CLI\nDESCRIPTION: The snippet uses the Godspeed CLI to browse and install pre-defined caching plugins, allowing integration of caches like Redis or Mem-cache into your project. This step is necessary to enhance task performance by caching results.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/caching.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed plugin add\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Consumer Event Source - YAML\nDESCRIPTION: Specifies Kafka event source settings for a consumer in the Godspeed framework, including groupId for managing consumer groups. This YAML config file ('src/eventsources/kafka.yaml') is required for consumption workflows. Prerequisite: Kafka broker accessible; the 'groupId' must match the one used in consumer events and workflows.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Kafka Datasource.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: kafka\\ngroupId: \"kafka_proj\"\n```\n\n----------------------------------------\n\nTITLE: Event Configuration for Directly Calling JS/TS Workflow\nDESCRIPTION: This YAML event configuration demonstrates how to directly call a JavaScript workflow from an HTTP POST event. The event is mapped to a JS workflow located at src/functions/com/jfs/create.js.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n/mongo/category.http.post:\n  summary: Create a new Category\n  description: Create Category from database\n  fn: com.jfs.create # calling js workflow in src/functions/com/jfs folder.\n  body:\n    content:\n      application/json:\n        schema:\n          $ref: '#/definitions/mongo/Category'\n  responses:\n    content:\n      application/json:\n        schema:\n          type: object\n```\n\n----------------------------------------\n\nTITLE: Gender Mapping Definition\nDESCRIPTION: Defines gender mappings in index.yaml that can be accessed globally.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/mappings.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nGender:\n  Male: M\n  Female: F\n  Others: O\n```\n\n----------------------------------------\n\nTITLE: Converting Prisma Schema to Elasticgraph Model\nDESCRIPTION: The generate-elasticgraph-model command transforms a Prisma schema into an Elasticgraph model. It prompts for input and output paths and generates the model with the specified client name or uses the default name 'eg-model'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed generate-elasticgraph-model\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|                          \nUsage: godspeed generate-elasticgraph-model [egClientName]\nEnter the input path  : \nEnter the output path :\n\nElasticgraph model generated\n```\n\n----------------------------------------\n\nTITLE: Project Structure without Examples in Plain Text\nDESCRIPTION: Illustrates the basic project directory structure when created with the Godspeed CLI using the '-n' option. It shows the layout with empty configurations without example files. Important directories include 'config/' and 'src/'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/scaffolding.md#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n.\\n├── config\\n│   ├── custom-environment-variables.yaml\\n│   ├── default.yaml\\n│   ├── index.yaml\\n│   └── telemetry\\n├── package.json\\n└── src\\n    ├── datasources\\n    ├── events\\n    ├── functions\\n    └── mappings\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Event Responses in YAML\nDESCRIPTION: This YAML snippet details the response specification for an event, including status codes and content schemas. It highlights the importance of defining expected JSON response structures and corresponding data types.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/vscode-extension/language-tools.md#2025-04-22_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nresponses:\\n  200:\\n    description: OK\\n    content:\\n      application/json:\\n        schema:\\n          type: object\n```\n\n----------------------------------------\n\nTITLE: Error Handling in com.gs.each_parallel in YAML\nDESCRIPTION: Shows error handling implementation in com.gs.each_parallel function, demonstrating task-level and loop-level error handling.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: For each sample\n  description: Here we transform the response of for loop\n  tasks:\n    - id: each_parallel_step1\n      description: for each\n      fn: com.gs.each_parallel\n      value: [1, 2, 3, 4]\n      tasks:\n        - id: each_task1\n          fn: com.gs.transform\n          args: <% 'each_task1 ' + task_value %>\n          on_error: # on_error at task level\n            continue: false\n            response: <%Coffee/JS expression%> | String\n        - id: each_task2\n          fn: com.gs.transform\n          args: <% 'each_task2 ' + task_value %>\n      on_error: # on_error at loop level\n        continue: true\n        response: <%Coffee/JS expression%> | String\n    - id: each_parallel_step2\n      description: return the response\n      fn: com.gs.transform\n      args: <% outputs.each_parallel_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Git Repository with Godspeed\nDESCRIPTION: Sets up a Godspeed project from an existing Git repository by running 'godspeed update' in the cloned directory. Prompts for configurations similar to project creation and defaults to the latest gs_service version unless specified.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd <your git repo>\ngodspeed update\n```\n\n----------------------------------------\n\nTITLE: Executing AWS Datasource Operations in a Godspeed TS Workflow (TypeScript)\nDESCRIPTION: This TypeScript function shows how to execute AWS operations using the Godspeed framework's datasource interface. It receives a context and arguments, uses the datasource AWS client, and executes a method such as 'listBuckets' with proper meta parameters. Input is provided API method arguments; output is the AWS SDK service response. Dependencies: @godspeedsystems/core. Requires valid AWS datasource and correct meta mapping for API methods.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, GSDataSource, GSStatus } from \"@godspeedsystems/core\";\n\nexport default async function (ctx: GSContext, args: any) {\n    const ds: GSDataSource = ctx.datasources.aws;\n    const response = await ds.execute(ctx, {\n         //Pass exactly same args as this aws service's method takes\n        ...args,\n        //Along with args, pass meta object\n        // meta can contain {entityName, method}\n        meta: {entityName: 's3', method: 'listBuckets'},\n        //Or meta can contain {fnNameInWorkflow} which is same as \n        //the 'fn' that we write when invoking datasource from yaml workflow\n        //For example, this will also work\n        //meta: {fnNameInWorkflow: 'datasource.aws.s3.listBuckets'}\n    });\n    return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Example .env File Structure for Godspeed Projects\nDESCRIPTION: A sample .env file showing common environment variable configurations for API keys, database connections, JWT authentication, and third-party service credentials.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/env.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    # API configurations\n\n    API_URL=https://api.example.com\n    API_KEY=your_api_key_here\n\n    # Database configurations\n    DATABASE_URL=postgres://user:password@localhost:5432/mydatabase\n\n    # JWT Authentication configurations\n    JWT_SECRET=my_jwt_secret\n    JWT_ISSUER=https://my-issuer.com\n    JWT_AUDIENCE=https://my-audience.com\n\n    # Third-party service credentials\n    GOOGLE_CLIENT_ID=your_google_client_id\n    GOOGLE_CLIENT_SECRET=your_google_client_secret\n    GOOGLE_CLIENT_SECRET=your_callback_url\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios DataSource in YAML\nDESCRIPTION: This YAML configuration sets up the Axios DataSource with a base URL for API requests.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntype: axios\nbase_url: http://localhost:4000\n```\n\n----------------------------------------\n\nTITLE: Running Godspeed Service with Auto-Watch in Bash\nDESCRIPTION: Shows the command `godspeed serve` used in a bash terminal to start the Godspeed application. This command typically initiates the service and enables an auto-watch mode, automatically restarting the server upon detecting file changes, which is useful during development.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n  godspeed serve\n```\n\n----------------------------------------\n\nTITLE: Defining Authz Rules with Where, Can_Access, No_Access (YAML)\nDESCRIPTION: This YAML snippet shows a sample `authz` instruction using `com.gs.transform`. It defines allowed columns (`can_access`), disallowed columns (`no_access`), and a row-level filter (`where`) based on the client ID from input headers. This restricts returned rows to those matching the tenant condition.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nauthz: \n  - id: authz_task_1\n    summary: return access columns\n    fn: com.gs.transform\n      args:\n        can_access: \n          - col1\n          - col2\n        no_access:\n          - col3\n        where:\n          tenant: <% inputs.headers.client_id %>\n```\n\n----------------------------------------\n\nTITLE: Authentication Response Format\nDESCRIPTION: Expected format for authentication workflow responses including headers, parameters and status codes\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authentication/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nheaders: \n  header1: val1\nparams:\n  param1: val1\nstatusCodes: [401, 403, ....]\n```\n\n----------------------------------------\n\nTITLE: Using Scripting in Eventsource Configuration and Authorization (YAML/JS)\nDESCRIPTION: This YAML snippet configures an Express eventsource. It uses loadtime scripting (`<% %>`) to set configuration values like `port` and JWT parameters (`issuer`, `audience`, `secretOrKey`) from the application config. It also includes an `authz` block with an inline JavaScript task (`<js% ... %>`) that performs runtime authorization logic based on `inputs.user.role`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nport: <% config.http.port %>\ndocs:\n  endpoint: /api-docs\njwt:\n  issuer: <% config.jwt.iss %>\n  audience: <% config.jwt.aud %>\n  secretOrKey: <%  config.jwt.sec %>\nauthz:\n  - fn: com.gs.transform \n    id: authz_task\n    args: | # if this condition fails, the else gets executed\n      <js% \n        if (inputs.user.role !== 'admin') { \n            return {\n            success: false, \n            code: 403,\n            message: \"Authorization failed\"\n          }\n        }\n      %>  \n```\n\n----------------------------------------\n\nTITLE: Setting Default Caching Datasource in Static Configuration (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to set default configuration values for a Godspeed instance, specifically enabling Redis as the caching backend alongside other options like log level and server URL. Place this configuration in 'static configuration' files for the app. The 'caching: redis' entry selects Redis as the cache engine. Inputs include log levels, language, and service configuration; output is the initial system setup for caching.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/caching.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlog_level: debug\\nlang: coffee\\nserver_url: https://api.example.com:8443/v1/api\\ncaching: redis\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Union Dependencies in ElasticGraph\nDESCRIPTION: YAML configuration examples for implementing Union dependencies in ElasticGraph. These settings define how data values from related entities should be merged and maintained across the graph.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n[conference]\nspeakers = '+talks.speaker' #As soon as a talk is linked to a conferece, or an already linked talk gets linked to a speaker, *the talk's speaker is also linked to the conference as one of its speakers, if not already linked before*. Vice versa happens if the talk is unlinked to its speaker, or the talk is removed from the conference\ntopics = '+talks.topics' #As soon as a talk is linked to an conference, or a topic is set to an already linked talk, the talk's topic is also added to the conference as one of its topics, if not already there. Vice versa happens if the talk is unliked to the conference, or the topic is removed from the talk.\n['person']\ngrandChildren = +'children.children' #Whenever a person's child gets a new child, the new child gets added to the person's grandchildren\n['folder']\nfileTypes = '+childFolders.fileTypes +childFiles.type' #Calculate union of all file types existing in the entire folder tree (recursively). Anytime, any file gets added to any child folder in this tree, the type of that file gets unioned with the list of fileTypes of that child folder, and all its parent folders up in the hierarchy.\n```\n\n----------------------------------------\n\nTITLE: Kafka Consumer Event Mapping and Schema - YAML\nDESCRIPTION: Outlines the event configuration for triggering message consumption from Kafka in Godspeed. The event key format is 'kafka.{Topic}.{GroupId}:' and, when triggered, it executes the 'kafka_consume' function, with the incoming message provided as the HTTP body. Dependencies: Correct topic and groupId; expects string messages. Outputs processed results from 'kafka_consume'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Kafka Datasource.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# event for consume data from Topic\\nkafka.publish-producer1.kafka_proj: // event key\\n  id: kafka__consumer\\n  fn: kafka_consume\\n  body:\\n    description: The body of the query\\n    content:\\n      application/json: \\n        schema:\\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Union and Copy Data Dependency Configuration - YAML\nDESCRIPTION: This snippet demonstrates how to define data dependency rules (union and copy) in a YAML configuration file for ElasticGraph. Each section configures how fields on one entity reflect or aggregate data from related entities. The config may be placed in a schema file such as configFolder/schema/union.toml. Prerequisite: ElasticGraph instance that loads such configurations. Input: YAML config. Output: automatic field updates based on update events. Limitations: Syntax must match ElasticGraph's parsing logic.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n[conference]\nspeakers = '+talks.speaker' #As soon as a talk is linked to a conferece, or an already linked talk gets linked to a speaker, *the talk’s speaker is also linked to the conference as one of its speakers, if not already linked before*. Vice versa happens if the talk is unlinked to its speaker, or the talk is removed from the conference\ntopics = '+talks.topics' #As soon as a talk is linked to an conference, or a topic is set to an already linked talk, the talk’s topic is also added to the conference as one of its topics, if not already there. Vice versa happens if the talk is unliked to the conference, or the topic is removed from the talk.\n[‘person’]\ngrandChildren = +‘children.children’ #Whenever a person’s child gets a new child, the new child gets added to the person’s grandchildren\n[‘folder’]\nfileTypes = ‘+childFolders.fileTypes +childFiles.type’ #Calculate union of all file types existing in the entire folder tree (recursively). Anytime, any file gets added to any child folder in this tree, the type of that file gets unioned with the list of fileTypes of that child folder, and all its parent folders up in the hierarchy.\n```\n\nLANGUAGE: yaml\nCODE:\n```\n[person]\nchild = \"+wife.child +husband.child\" #This will ensure copy of child between husband and wife, whenever child is added to any one of the person entities\n[file]\npermissions = \"+folder.permissions\" #Whenever a folder’s permissions are updated the underlying files’ permissions are updated automatically. You can still manually override them, without affecting the folder. But whenever the folder’s permissions are updated again, the file’s permissions will get overwritten.\n```\n\n----------------------------------------\n\nTITLE: Defining a Kafka Event Source Specification in Godspeed (YAML)\nDESCRIPTION: This YAML snippet specifies a Kafka event source configuration in Godspeed. The key `Kafka.publish-producer1.kafka_proj` follows the pattern `{datasourceName}.{topic_name}.{group_id}`. It links to the `kafka_consumer` function (defined by `id` and `fn`) and defines the expected JSON schema for the message body (`inputs.body`), requiring a 'message' property of type string.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/kafka-events.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n # event for consume data from Topic\nKafka.publish-producer1.kafka_proj:   # event key\n  id: kafka_consumer\n  fn: kafka_consume\n  body:    \n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            message:    # the content of the message is captured here\n              type: string\n          required: ['message']\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Event Handler\nDESCRIPTION: RabbitMQ event configuration with queue name, handler function, and message validation schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nqueue_name.rabbitmq:\n  id: /rabbitmqEvent\n  fn: com.jfs.publish_rabbitmq\n  on_validation_error: com.jfs.handle_validation_error\n  body:\n    description: The body of the query\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            name:\n              type: string\n          required: [name]\n```\n\n----------------------------------------\n\nTITLE: Cron Event Source Configuration\nDESCRIPTION: Configuration for cron job events using mappings for dynamic values.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/mappings.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: cron\nevents:\n  cron.0 0 * * *.UTC:\n    description: Daily task at midnight UTC\n    fn: daily_update\n    args:\n      reportPath: <% mappings.report_path %>\n```\n\n----------------------------------------\n\nTITLE: Opening Project in Visual Studio Code\nDESCRIPTION: Launches Visual Studio Code from within the project directory, preparing the environment for development and configuration directly through the IDE.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Building the Godspeed Project\nDESCRIPTION: This command executes the build process specific to the Godspeed framework. It compiles or prepares the project files for execution, making it ready for running or debugging.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/debugger-in-yaml.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngodspeed build\n```\n\n----------------------------------------\n\nTITLE: Error Codes Mapping Definition\nDESCRIPTION: YAML configuration defining error codes and their corresponding messages.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/mappings.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncodes:\n  E001: Internal Server Error\n  E002: Missing mandatory field in the request body.\n  E003: Extra properties found in the request body.\n  E004: Wrong field type/format/pattern/length in the request body.\n  E005: Record already exists in the database.\n  E006: Record to update is not present in the database.\n  E007: Record to delete is not present in the database.\n```\n\n----------------------------------------\n\nTITLE: Directly Adding a Specific Godspeed Plugin via CLI (Shell)\nDESCRIPTION: This command directly adds a specified Godspeed plugin to the project without an interactive prompt. The user needs to replace `<plugin-name>` with the actual name of the plugin they wish to install. Requires the Godspeed framework CLI to be installed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Overview.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed plugin add <plugin-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticgraph for OpenSearch using .env File\nDESCRIPTION: Demonstrates configuring Elasticgraph to use OpenSearch as the data store by setting the `ds` environment variable to `aws` in the `.env` file. This overrides the default Elasticsearch behavior.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n  ds=aws\n```\n\n----------------------------------------\n\nTITLE: Defining Constant ID Mapping in Godspeed using YAML\nDESCRIPTION: Creates a mapping `genId` with a fixed numeric value in a separate YAML file (`generate.yaml`). This mapping can be accessed within workflows using `mappings.generate.genId`. No external dependencies required other than proper placement within the `src/mappings` directory. It enables reuse of ID or counter constants across multiple workflow steps.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/mappings.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngenId: 12345\n\n```\n\n----------------------------------------\n\nTITLE: Defining a New Datasource in YAML\nDESCRIPTION: Defines a new datasource configuration in a YAML file within the 'src/datasources' directory. It includes mandatory keys 'type', 'loadFn', and 'executeFn', with additional custom key/value pairs as needed. The configuration file sets up the details necessary to integrate a custom datasource.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/extensible-datasources.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: sample\nloadFn: com.sample.loader\nexecuteFn: com.sample.execute\nclient_url: https://sample.com\nclient_id: sample123\n```\n\n----------------------------------------\n\nTITLE: Authorization Task with Custom Data and Message\nDESCRIPTION: Example of an authorization task that returns custom data along with a message based on the user's role.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nauthz:\n  - fn: com.gs.transform\n    id: try_auth_2_authz\n    args: |\n      <js% \n        if (inputs.user.role === 'admin') {\n          return {\n            success: true, \n            message: \"Authorization passed\",\n            data: {x: 2}\n          }\n        } else {\n           return {\n            success: false, \n            message: \"Authorization failed\"\n          }\n        }\n      %>\n```\n\n----------------------------------------\n\nTITLE: Example Godspeed Federation Request Payload (JSON)\nDESCRIPTION: This JSON object demonstrates the structure of a POST request body for the `/api/v1/${domain}/${microserviceName}/federate` endpoint. It combines two separate instructions within a single request: 'searchResponse' executes a predefined 'findAll' instruction with complex query parameters, and 'saveBorrowerProfileResponse' executes a 'saveBorrowersProfile' instruction with specific parameters, error ignoring enabled (`ignoreError: true`), and retry configuration (3 attempts with a 200ms timeout). The keys ('searchResponse', 'saveBorrowerProfileResponse') define how the results for each instruction will be nested in the overall response.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/data-federation.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST /api/v1/${domain}/${microserviceName}/federate\n{\n    'searchResponse': { //The response of the query will come under this key in response from the service\n        \"instruction\": “findAll”, //This instruction has been declared on the server side in the API schema\n        \"params”: {\n            query_gs: {\n                “match_phrase”: {“borrower.city.name”: “patna”},\n                “exists”: “pincode”,\n                “anyOneOf”: [\n                    {range: {annualIncome”: {\"gte\": 1000000}}},\n                    {“match”: {“hasOwnHouse”: true}},\t\n                ]\n            }\n        }\n    },\n\n    'saveBorrowerProfileResponse': {\n        “instruction”: “saveBorrowersProfile”,\n        “ignoreError”: true,\n        \"retry\": {\n            \"count\": 3,\n            \"timeout\": 200 //milliseconds\n        },\n        \"params”: {\n            “name”: 1,\n            “pan”: “asdfadsf”\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Attributes at EventSource Level - YAML\nDESCRIPTION: This eventsource-level YAML configuration allows developers to override global log attributes by specifying custom identifiers (like 'event_type') under the 'log.attributes' property. Used at the event source (service) definition, it ensures all logs from this source will include these specific attributes for more granular log filtering and diagnostics.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\\nport: 3000\\nbase_url: /api/v1 #the base url of the http service\\n\\n#Basic swagger setup\\ndocs:\\n  endpoint: /api-docs # the url on which the service will start\\n\\nlog:\\n  attributes:\\n    event_type: myevent   \n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Producer as Data Source - YAML\nDESCRIPTION: Specifies the minimal Kafka producer configuration for Godspeed in YAML, including clientId and broker endpoints. Dependencies: Requires Kafka broker running and accessible from the provided address. The file is placed in 'src/datasources/kafka.yaml' and accessed by the Godspeed framework for message production. Key parameters are 'type', 'clientId', and 'brokers'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Kafka Datasource.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: kafka \\nclientId: \"kafka_proj\"\\nbrokers: [\"kafka:9092\"]\n```\n\n----------------------------------------\n\nTITLE: Defining the Function Logic for Cron Event\nDESCRIPTION: This YAML snippet from `src/functions/every_minute.yaml` defines the Godspeed function named `every_minute` triggered by the cron event. It includes a single task (`print`) that uses the built-in `com.gs.return` function to simply return the static string \"HELLO from CRON\" each time the function is executed by the cron schedule.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: this workflow will be running every minute\ntasks:\n  - id: print\n    description: print for every minute\n    fn: com.gs.return\n    args:\n      data: HELLO from CRON\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Datasource Authentication Workflow (YAML)\nDESCRIPTION: Defines the `com.jfs.httpbin_auth` workflow used for datasource authentication in Godspeed. This workflow typically calls an authentication service (`authapi`), processes the response (e.g., extracting a token), and returns headers/params/statusCodes needed for the actual datasource request or for triggering re-authentication. It uses standard workflow functions like `com.gs.http` and `com.gs.transform`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Auth workflow\ntasks:\n    - id: auth_step1\n      description: Hit the authn request\n      fn: com.gs.http\n      args:\n        datasource: authapi\n        data: <% inputs.query.username %>\n        config: \n          url: /authenticate\n          method: post\n    - id: auth_step2\n      description: Transform the response received from authn api\n      fn: com.gs.transform\n      args:\n        headers:\n          Authorization: <% 'Bearer ' + outputs.auth_step1.auth.token %>\n        params:\n          queryid: <% outputs.auth_step1.params.queryid %>\n        statusCodes: <% outputs.auth_step1.status_code %>          \n```\n\n----------------------------------------\n\nTITLE: Kafka Consumer Workflow Example - YAML\nDESCRIPTION: Defines a simple Godspeed function workflow for consuming data from Kafka, mirroring the incoming event inputs back in the response. The workflow (in 'src/functions/kafka_consume.yaml') uses 'com.gs.return' to output all received message parameters. Dependencies: Prior configuration of event and eventsource for the same topic and groupId.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Kafka Datasource.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# function for consume data\\nid: kafka-consumer\\nsummary: consumer\\ntasks:\\n    - id: set_consumer\\n      fn: com.gs.return\\n      args: <% inputs %>\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Elasticsearch Mapping for Elasticgraph Entities\nDESCRIPTION: Provides the command using `node` and the `reIndexer.js` script to create the initial Elasticsearch mapping for specified Elasticgraph entities (or all) defined in a configuration directory (e.g., `./datasources/eg_config/eg1`). The `init` flag signifies initial creation. Requires Node.js and access to the `gs_service` directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=*,-elasticsearch node ../gs_service/elasticgraph/lib/mappingGenerator/reIndexer.js ./datasources/eg_config/eg1 all|<comma seprated list of defined entity types> init\n```\n\n----------------------------------------\n\nTITLE: SendBulkSMS Request Parameters (JSON)\nDESCRIPTION: Specifies the JSON payload parameters required for the sendBulkSMS request. Includes a list of recipient mobile numbers, message content, and sender mobile number. 'recipientsToList' and 'from' must contain valid mobile numbers, and message content/length must adhere to SMS standards.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n   recipientsToList       [INTEGER, INTEGER]\n   message                STRING\n   from                   INTEGER\n```\n\n----------------------------------------\n\nTITLE: Sample Dev Format Logs with Custom Attributes\nDESCRIPTION: Example of development format logs showing how custom attributes are included in the log output. These logs include the custom attributes defined in the configuration such as mobileNumber, id, and lan.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n21/02/23, 11:54:06 am [INFO] 48c894ed7d65caa236e8cc0664ee4e5e 5af2d3d564e86fb6 {\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"mobileNumber\":\"9878987898\",\"id\":\"12\",\"lan\":\"12345\"} Processing event /test/:id.http.post\n21/02/23, 11:54:06 am [INFO] 48c894ed7d65caa236e8cc0664ee4e5e 5af2d3d564e86fb6 {\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"mobileNumber\":\"9878987898\",\"id\":\"12\",\"lan\":\"12345\"} event inputs {\"baseUrl\":\"\",\"body\":{\"data\":{\"lan\":\"12345\"}},\"fresh\":false,\"hostname\":\"localhost\",\"ip\":\"::ffff:172.22.0.1\",\"ips\":[],\"method\":\"POST\",\"originalUrl\":\"/test/12?mobileNumber=9878987898\",\"params\":{\"id\":\"12\"},\"path\":\"/test/12\",\"protocol\":\"http\",\"query\":{\"mobileNumber\":\"9878987898\"},\"route\":{\"path\":\"/test/:id\",\"stack\":[{\"name\":\"<anonymous>\",\"keys\":[],\"regexp\":{\"fast_star\":false,\"fast_slash\":false},\"method\":\"post\"},{\"name\":\"<anonymous>\",\"keys\":[],\"regexp\":{\"fast_star\":false,\"fast_slash\":false},\"method\":\"post\"}],\"methods\":{\"post\":true}},\"secure\":false,\"stale\":true,\"subdomains\":[],\"xhr\":false,\"headers\":{\"content-type\":\"application/json\",\"user-agent\":\"PostmanRuntime/7.29.2\",\"accept\":\"*/*\",\"postman-token\":\"835edd29-7c36-4e11-9b79-c661bbd911b0\",\"host\":\"localhost:4000\",\"accept-encoding\":\"gzip, deflate, br\",\"connection\":\"keep-alive\",\"content-length\":\"46\"},\"files\":[]}\n21/02/23, 11:54:06 am [INFO] 48c894ed7d65caa236e8cc0664ee4e5e 5af2d3d564e86fb6 {\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"mobileNumber\":\"9878987898\",\"id\":\"12\",\"lan\":\"12345\"} event body and eventSpec exist\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed Plugin via CLI\nDESCRIPTION: This Bash command demonstrates how to use the Godspeed CLI to add a plugin to your project. The plugin can be an eventsource or a datasource as an eventsource, allowing integration with external systems like Kafka or RabbitMQ. Ensure that you have the Godspeed CLI installed before running this command.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed plugin add\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs\nDESCRIPTION: A Bash command to automatically generate CRUD APIs based on the defined Prisma schema in the MongoDB database. Generated APIs align with the data models detailed in mongo.prisma.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/advance-guide.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: YAML Task Caching Specifications\nDESCRIPTION: This YAML snippet outlines the caching instructions to be specified for tasks, including pre-task reading from cache and post-task writing to cache. It supports invalidation and options that configure cache validity and failure caching.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/caching.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncaching:\n  before: # execute before the task execution\n    datasource: <the name of the datasource instance to use instead of default cache>\n    key: <key name which is used to read the cached result from>\n    invalidate: <Key name which we want to delete/remove from cache e.g. this feature can be used in CRUD types task. While delete operation, invalidate the cache of read or update task>\n  after: # execute after the task execution\n    datasource: <the name of the datasource instance to use instead of default cache>\n    key: <key name which is used to write the cached result>\n    invalidate: <Key name which we want to delete/remove from cache e.g. this feature can be used in CRUD types task. While delete operation, invalidate the cache of read or update task>\n    cache_on_failure: <true|false, whether you want to cache the failure result or not. By default, it is false>\n    options:\n      EX: 200 <timer in seconds, until the cached result is valid> # Can pass any of RedisOptions, if supported by the specific caching Datasource\n```\n\n----------------------------------------\n\nTITLE: Setting an Environment Variable in Shell\nDESCRIPTION: Demonstrates how to set an environment variable (e.g., `MY_DATASOURCE_BASE_URL`) using the `export` command in a Unix-like shell. This value is then used by the application via the YAML configuration mapping.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/configuration/env-vars.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```\n$ export MY_DATASOURCE_BASE_URL=https://httpbin.org/\n```\n```\n\n----------------------------------------\n\nTITLE: Running Godspeed UI Kit Scaffolding Tool\nDESCRIPTION: Executes the Godspeed UI Kit using `npx`. Replace `{app_type}` with the desired framework identifier (e.g., 'react-web'). This command initiates the interactive scaffolding process.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @godspeedsystems/uikit {app_type}\n```\n\n----------------------------------------\n\nTITLE: Example Authz Workflow JSON Output for Merging (YAML)\nDESCRIPTION: Example YAML snippet representing the JSON `data` that a Godspeed authorization workflow might return when `success` is true. In this case, it contains a `where` clause (`role: 'USER'`) which will be automatically merged with the `args.data.where` field of the calling database query task, effectively adding a filter based on authorization.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n  where:\n    role: 'USER'\n```\n\n----------------------------------------\n\nTITLE: Defining Event Schema Enum using Loadtime Scripting (YAML)\nDESCRIPTION: This YAML snippet defines an event schema for `http.post./helloworld`. It uses inline scripting (`<% %>`) within the schema definition to dynamically populate the `enum` values for the `gender` property at loadtime by referencing a mapping (`mappings.gender`). This facilitates schema definition based on predefined mappings.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"http.post./helloworld\":\n  fn: helloworld\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            name:\n              type: string\n            gender:\n              type: string\n              enum: <% mappings.gender %>\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Field Encryption Annotation\nDESCRIPTION: A Prisma schema for MongoDB that includes field-level encryption using the @encrypted annotation. This demonstrates how to secure sensitive data like email addresses in the database using AES-256 GCM encryption.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"MONGO_TEST_URL\") //Connection string can be found in the .env file, you can add your own database connection string\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./prisma-clients/mongo\"\n}\n\nmodel User {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt DateTime @default(now())\n  email     String   @unique  /// @encrypted\n  name      String?\n  role      Role     @default(USER)\n  posts     Post[]\n}\n\nmodel Post {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  published Boolean  @default(false)\n  title     String\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  String   @db.ObjectId\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Command to generate Prisma client and synchronize database with schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MariaDB.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Helloworld API Event Schema Configuration\nDESCRIPTION: YAML configuration for the /helloworld API endpoint, defining parameters and responses according to Swagger standards. Explains the required name parameter for querying.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp.get./helloworld: # `http` server listening via `get` method on `/helloworld` endpoint\nfn: helloworld # the function handler to be called for this endpoint, available in `src/functions`\nparams: # JSON-Schema of API parameters like query, headers, path params. Note: This is set as per Swagger standard's `parameters` syntax\n  - name: name   # This is our name query param\n    in: query    # Notice the in: query, it can be `path` or `headers` as well\n    required: true # true means `name` parameter is required\n    schema:\n      type: string\nresponses: # JSON-Schema of API responses for different status codes. Note: This is set as per Swagger standard's `responses` syntax\n  200:\n    content:\n      application/json:\n        schema:\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client with Godspeed\nDESCRIPTION: Illustrates the Godspeed CLI command used to generate the Prisma client. Running `godspeed prisma prepare` processes the Prisma schema file, generates the necessary client code (based on the `generator` block), and attempts to synchronize the database schema with the defined models.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PlanetScale.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript in Workflow Task Arguments\nDESCRIPTION: Shows how to use JavaScript within <js% %> tags to manipulate input data for a workflow task.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    - id: step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      description: upload documents\n      fn: com.gs.http\n      args:\n        datasource: httpbin\n        params:\n        data: |\n          <js% {\n            [inputs.body.entity_type + 'id']: inputs.body.entity_id,\n            _.omit(inputs.body, ['entity_type', 'entity_id'])}\n          %>\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine and Components - Shell\nDESCRIPTION: This snippet performs an apt update followed by installation of Docker components ('docker-ce', 'docker-ce-cli', 'containerd.io') on Debian-based systems, forcing installation with the '-y' flag. Must be executed with sudo privileges. It is a core step in initializing Docker on a fresh environment.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get update\\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Datasource (Producer) in Godspeed YAML\nDESCRIPTION: YAML configuration snippet for setting up Kafka as a datasource (producer) within the Godspeed framework. Located in `src/datasources/kafka.yaml`, it specifies the datasource `type` as `kafka`, assigns a `clientId`, and lists the Kafka `brokers` addresses.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Kafka Eventsource.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: kafka\nclientId: \"kafka_proj\"\nbrokers: [\"kafka:9092\"]\n```\n\n----------------------------------------\n\nTITLE: Single Function Reference in Godspeed DSL\nDESCRIPTION: Demonstrates how to reference a single function using __ref keyword.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n__ref: __src.com.abc.anuj\n```\n\n----------------------------------------\n\nTITLE: SendBulkSMS API Endpoint Definition (HTTP)\nDESCRIPTION: Defines the HTTP request details for sending bulk SMS messages. It specifies the required Content-Type, the HTTP method (POST), and the API endpoint URL.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_12\n\nLANGUAGE: http\nCODE:\n```\n   Content Type: application/json ; charset= utf- 8\n   Method: POST\n   URL: URL: /api/notification/v1/publish/sendBulkSMS\n```\n\n----------------------------------------\n\nTITLE: Calling Mongoose findOne with Single Argument in YAML Workflow\nDESCRIPTION: Example Godspeed workflow defined in YAML (`mongoose_workflow`) demonstrating how to call a Mongoose function that expects a single argument. The task `first_task` invokes `datasource.mongoose.SomeModel.findOne` and passes the query filter `{\"name\": \"mastersilv3r\"}` directly within the `args` field. YAML's ability to interpret JSON is noted.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n    id: mongoose_workflow\n    tasks:\n      - id: first_task\n        fn: datasource.mongoose.SomeModel.findOne\n        args: {\"name\": \"mastersilv3r\"} #Fun fact: YAML acceptes JSON as well. \n```\n\n----------------------------------------\n\nTITLE: Illustrating Project Structure for a Generic Custom Eventsource\nDESCRIPTION: Shows the generalized project structure required when creating any custom eventsource in Godspeed. It emphasizes the need for a YAML configuration file (e.g., `custom_eventsource.yaml`) within the `eventsources` directory and a corresponding TypeScript implementation file (e.g., `types/custom_eventsource.ts`) where the filename matches the `type` specified in the YAML.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n    ├── src\n        ├── datasources\n        │\n        ├── events\n        |   |\n        │   └── helloworld.yaml\n        |\n        ├── eventsources\n        │   ├── types\n        │   |    └── custom_eventsource.ts\n        |   |\n        │   └── custom_eventsource.yaml\n        |\n        └── functions\n            |\n            └── helloworld.yaml\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Godspeed Plugin via CLI (Godspeed Framework, Bash)\nDESCRIPTION: This Bash command is run in the CLI to start the process for adding a plugin, such as 'prisma-as-datastore', to a Godspeed project. It’s required to integrate Prisma as the datastore. The CLI presents an interactive interface for plugin selection, and no parameters are needed for the command itself.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n> godspeed plugin add\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────┬────────────────────────────────────────────────────────────────────┐\n│      │ Name                               │ Description                                                        │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ prisma-as-datastore                │ Prisma as a datastore plugin for Godspeed Framework.              │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│  ◯   │ aws-as-datasource                  │ aws as datasource plugin for Godspeed Framework                    │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│  ◯   │ excel-as-datasource                │ excel as datasource plugin for Godspeed Framework                  │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│  ◯   │ mailer-as-datasource               │ mailer as datasource plugin for Godspeed Framework                 │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│  ◯   │ kafka-as-datasource-as-eventsource │ kafka as datasource-as-eventsource plugin for Godspeed Framework   │\n└──────┴────────────────────────────────────┴────────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Adding AWS as a Datasource Plugin in Godspeed\nDESCRIPTION: This code snippet demonstrates the command used to add the AWS as a datasource plugin in a Godspeed project. It is accessed via the Godspeed CLI in VS Code and involves selecting the appropriate plugin from a list.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/AWS Datasource.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n> godspeed plugin add\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────┬────────────────────────────────────────────────────────────────────┐\n│      │ Name                               │ Description                                                        │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│  ◯   │ prisma-as-datastore                │ Prisma as a datasource plugin for Godspeed Framework.              │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ aws-as-datasource                  │ aws as datasource plugin for Godspeed Framework                    │\n└──────┴────────────────────────────────────┴────────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in Express\nDESCRIPTION: This snippet shows how to configure JWT authentication in the http.yaml file for an Express eventsource in Godspeed. It involves setting the secretOrKey, audience, and issuer, ensuring authentication is applied to all routes unless explicitly disabled.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-authentication.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nport: 4000\n#auth settings to run by default on every event\nauthn:\n  jwt:      \n    secretOrKey: <% config.jwtSecret %> # to access jwtSecret from config\n    audience: <% config.audience %>   \n    issuer: <% config.issuer %>     \n\n```\n\n----------------------------------------\n\nTITLE: Defining Full Sample Prisma Schema for PostgreSQL - Prisma\nDESCRIPTION: This snippet is a sample Prisma schema file demonstrating configuration for PostgreSQL in a Godspeed project along with generator and data model definitions. It includes:\n- The datasource block using env(\"DATABASE_URL\")\n- A client generator block outputting to prisma-clients/Postgres and enabling preview features\n- Two models: User and Post, with relations and primary keys set\nThis schema is suitable for generating typed Prisma clients and CRUD APIs. Dependencies are an actual .env file and Prisma/Prisma Client packages. It serves as a template for database schema design and generation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PostgreSQL.md#2025-04-22_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"PostgreSQL\"\n  url      = env(\"DATABASE_URL\")\n}\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./prisma-clients/Postgres\"\n  previewFeatures = [\"metrics\"]\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Sample API Calls for Joined Entity Retrieval - JavaScript\nDESCRIPTION: This group of API call snippets demonstrates how to retrieve denormalized/joined entities using ElasticGraph's API via JavaScript. It shows both named join configurations and direct join object parameters. Dependencies: 'deep' API library/module. Main parameters: _id, _type, joins (file/string or object), query. Input: JS API call. Output: Retrieved event or search results with joined relationships.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n\tdeep.get({_id:1, _type: ‘event’ , joins: ‘read’});\n\tdeep.get({\n\t\t_id:1,\n\t\t_type: ‘event’ , joins: {\n\t\t\"name\": 1,\n\t\t\"city.name\": 1,\n\t\t\"city.state.name\": 1\n\t\t}}\n\t);\n\tdeep.search({\n\t\t_id:1,\n\t\t_type: ‘event’ ,\n\t\tquery: {\"match\": {“speakers.person.english.name”: “Dalai Lama”}},\n\t\tjoins: ‘search’\n\t})\n```\n\n----------------------------------------\n\nTITLE: Defining Static Variables with YAML for Godspeed - YAML\nDESCRIPTION: This YAML snippet demonstrates a standard structure for defining static configuration variables in the Godspeed system. The configuration includes parameters such as log level, language for scripting, server endpoints, and limits for request body and file size. No dependencies are required aside from applications or scripts that read this YAML file. Inputs are static keys and values, and the output is consumed configuration at runtime. Secrets should not be stored here — only non-sensitive constants. Modifications may be required as per application needs.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/configuration/static-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlog_level: debug\\nlang: coffee\\nredact: [] # fields to hide. Sample: ['ns', 'req.headers']\\nserver_url: https://api.example.com:8443/v1/api\\nhttpbin: # sample api datasource url\\n  base_url: https://httpbin.org\\nrequest_body_limit: 50mb\\nfile_size_limit : 50mb\n```\n\n----------------------------------------\n\nTITLE: Defining Mongoose Datasource Type Export in TypeScript\nDESCRIPTION: This TypeScript code snippet shows the content of the `mongoose.ts` file typically generated at `src/datasources/types/mongoose.ts` after installing the Mongoose plugin. It imports the `DataSource` type definition from the `@godspeedsystems/plugins-mongoose-as-datastore` package and exports it as the default export, making the type available within the Godspeed project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from '@godspeedsystems/plugins-mongoose-as-datastore';\nexport default DataSource;\n```\n\n----------------------------------------\n\nTITLE: Linking Entities via Relation Using ElasticGraph Deep API (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates how to programmatically create a link (relationship) between two entities using the ElasticGraph deep API. It shows the structure for specifying the two entities (e1 and e2) with types and IDs, along with the desired relationship to establish. This pattern requires the ElasticGraph JavaScript library/module and that relevant entity types and relationship names pre-exist in configuration files. Returns a promise to handle completion or errors.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nes.deep.link({\n\t\te1: {\n\t\t\t_type: ‘event’,\n\t\t\t_id: ‘674’\n\t\t},\n\t\te2: {\n\t\t\t_type: session,\n\t\t\t_id: 4\n\t\t},\n\t\te1ToE2Relation: ‘sessions’\n\t})\n\t.then(console.log)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Common Headers for API Datasource in YAML\nDESCRIPTION: This YAML usage illustrates how to set up default headers for all API requests made through the datasource. The headers, such as 'name' and 'title', are attached to each outgoing request from workflows using this datasource. Inputs to the headers (like title) can be dynamically sourced from workflow inputs. Dependencies: config values for `base_url`, inputs for dynamic header values. This configuration ensures consistency in request metadata for all consumers of the datasource.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/api.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: api\\nbase_url: <% config.httpbin.base_url %>\\n\\nheaders:\\n  name: godspeed\\n  title: <% inputs.headers['title'] %>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Data Config Folder Layout in Markdown\nDESCRIPTION: This Markdown snippet uses pseudo-code style codeblocks to illustrate a typical file and folder layout for organizing configuration files within a Godspeed-based project. It visually documents directory nesting for clarity, focusing on the location of './config/data' and related directories. It serves as an implementation guide for developers structuring new or existing projects.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/scaffolding.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n.                   //Project root\\n    ./src\\n        ./actions   //This will contain all the API contracts defined in this project by developer (For API schema driven development)\\n    ./config\\n        ./exports   //The exported functions from ../src or imported modules\\n        ./data      //Here will lie the data specific configurations read by the GS_data module.\\n        ./telemetry\\n        ...         //So on and so forth for other modules\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS List HTTP Endpoint (YAML)\nDESCRIPTION: This YAML event schema defines an HTTP POST endpoint at '/aws' that triggers the 'aws_list' function with a JSON request body. It's meant to provide a standardized entry point for workflows invoking AWS service operations, typically paired with a custom workflow function. Requires a configured function handler and Godspeed event system enabled.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# event for create\n\n\"http.post./aws\":\n  fn: aws_list\n  body:\n    type: object\n  responses:\n    200:\n      content:\n         application/json:\n\n```\n\n----------------------------------------\n\nTITLE: Example: Setting the OTEL Exporter Endpoint Environment Variable (Shell)\nDESCRIPTION: This shell command provides a specific example of exporting the `OTEL_EXPORTER_OTLP_ENDPOINT` environment variable. It sets the endpoint to `http://172.17.0.1:4317`, indicating that the application should send traces to an OTEL Collector located at the IP address `172.17.0.1` on port `4317` using the OTLP/HTTP protocol (though the text mentions gRPC, the example uses an HTTP URL prefix; OTLP often supports both on different ports or paths).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/tracing.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://172.17.0.1:4317\n```\n\n----------------------------------------\n\nTITLE: Detailing Config/Data Folder Hierarchy in Markdown\nDESCRIPTION: This Markdown code block details the suggested and typical hierarchy for files and directories under the './config/data' path within a project using the GS_data module. It uses indentation to depict parent-child relationships. The structure supports logical grouping of settings, schemas, relationships, batching options, database connections, and environment files, enabling flexible and maintainable configuration management.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/scaffolding.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    ./config/data\\n        index.(yaml | toml | json)                  //For common fields like supportedLanguages, defaultPrimaryDB, requestTimeout etc.\\n        ./schema\\n            ./entities\\n                entityA.(yaml | toml)\\n                entityB.(yaml | toml)\\n            ./relationships\\n                definitions.yaml | definitions.toml | definitions.gsl\\n                ./definitions                               // Alternatively from above line\\n                    `${entityA} <> ${entityB}`.(gsl | yaml) // Keep all the relationships aggregated by the two entities.\\n                dataDependencies.gsl                        // All automatically aggregated fields with functions like union, copy and in future (average, max, min).\\n                denormalization.gsl                         // Copy of current elasticgraph's joins/index.txt\\n        ./performance\\n            ./batching //Or batching.yaml containing batch size and timeouts for different DBs of each kind\\n                elasticsearch.yaml\\n                postgres.yaml\\n                mongodb.yaml\\n        ./databases //Database settings\\n            elasticsearch.(yaml | toml)\\n            mongodb.(yaml | toml)\\n            postgres.(yaml | toml)\\n        ./environments\\n            dev.env\\n            staginv.env\\n            production.env\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection URL in .env\nDESCRIPTION: Shows how to add the specific database connection URL as an environment variable named `DATABASE_URL` within the project's `.env` file. Examples are provided for PostgreSQL and SQLite.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CRUD_API.md#2025-04-22_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL= \"postgresql://postgres:postgres@localhost:5432/yourdb\" //for postgres\n or\nDATABASE_URL= \"file:./enter_your_file_name.db\"  //for SQLite\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client for CockroachDB in Godspeed\nDESCRIPTION: Command to generate the Prisma client for CockroachDB and synchronize the database with the Prisma schema. This is required before using the database in your application.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/CokroachDB.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Implementing a Workflow to Handle HTTP Event Data in YAML\nDESCRIPTION: This YAML snippet defines a simple Godspeed workflow intended to handle an incoming HTTP event. The workflow, identified by `some_unique_id`, consists of a single task (`step1`) that uses the built-in `com.gs.return` function. Its argument `args: <%inputs.body%>` demonstrates how to access the request body from the incoming event's `inputs` object using the `<% %>` dynamic evaluation syntax and return it as the workflow's result.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    summary: Simply returning query & body data of an http.post event\n    id: some_unique_id\n    tasks:\n      - id: step1\n        fn: com.gs.return\n        args: <%inputs.body%> # Evaluation of dynamic values happens via <% %>. The type of scripting can be coffee/js.\n        # Here we are returning the body of the HTTP post event.\n```\n\n----------------------------------------\n\nTITLE: Example of JWT Token in Authorization Header (Bash)\nDESCRIPTION: Provides a concrete example of how the Authorization header should look with an actual JWT token. This illustrates the practical application of including a JWT token in API requests.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authentication/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJJU1NfS0VZIiwiYXVkIjoiQVVEX0tFWSJ9.GiLivqXa74WmDzSbgUg9fe5y8Pedw1PS-DkebOM5mIc\n```\n\n----------------------------------------\n\nTITLE: API Output for Event Entity Retrieval (JSON)\nDESCRIPTION: This snippet provides an example of a JSON document returned by the ElasticGraph API when fetching an 'event' entity. It illustrates how entities are indexed (in this case in 'events'), how multilingual fields are structured, and how custom properties are embedded. Required dependencies include a properly configured backend and API endpoint; parameters such as _type and _id uniquely identify the entity. The sample output helps users understand expected response structure and localized value organization.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_index\": \"events\",\n  \"_type\": \"event\",\n  \"_id\": \"294464\",\n  \"_version\": 4,\n  \"found\": true,\n  \"_source\": {\n    \"startingDate\": 489004200000,\n    \"tibetan\": {\n      \"description\": \"\\n\\u0f63\\u0fae\\u0f51\\u0f44\\u0f0b\\u0f58\\u0f66\\u0f0b\\u0f58\\u0f72\\u0f44\\u0f0b\\u0f66\\u0f93\\u0f0d\\u0f0b\\u0f62\\u0f62\\u0f0b\\u0f41\\u0fb1\\u0f72\\u0f62\\u0f0b\\u0f46\\u0f91\\u0f7c\\u0f63\\u0f72\\u0f0b\\u0f5c\\u0f54\\u0f0d\\n\\n\\u0f45\\u0f41\\u0f7c\\u0f62\\u0f0b\\u0f58\\u0fb1\\u0f0b\\u0f40\\u0fb1\\u0f60\\u0f0b\\u0f66\\u0fab\\u0f0b\\u0f56\\u0fb1\\u0f44\\u0f0b\\u0f0a\\u0f0d\",\n      \"title\": \"Sample event\"\n    },\n    \"english\": {\n      \"description\": \"His Holiness the Fourteenth Dalai Lama gives an introduction on basic Tibetan Buddhism in Ladakh.\",\n      \"title\": \"\\u0f45\\u0f41\\u0f7c\\u0f62\\u0f0b\\u0f58\\u0fb1\\u0f0b\\u0f40\\u0fb1\\u0f60\\u0f0b\\u0f66\\u0fab\\u0f0b\\u0f56\\u0fb1\\u0f44\\u0f0b\\u0f0a\\u0f0d\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Field Encryption Secret - YAML\nDESCRIPTION: Shows a YAML configuration fragment for setting the `prisma_secret` environment variable, which is used for encryption of Prisma fields. Assumes integration with the Godspeed configuration loading and environment management. Input is an environment variable, and its output is the enabling of field encryption for schemas specifying `/// @encrypted`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/datastore.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprisma_secret: PRISMA_SECRET # secret used to generate hash of prisma fields\n```\n\n----------------------------------------\n\nTITLE: Getting an Entity by Id - Godspeed API - JSON\nDESCRIPTION: Shows a request and response example for retrieving a borrower_profile entity by its _id, specifying requested fields and language. Supports nested retrieval of related entities. Requires valid _type, _id, and optional langs/returnData fields. Returns selected multilingual fields, related entities, and associated data per returnData structure. Input: Query object with type and id. Output: JSON with the entity and nested data or error object.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/CRUD API.md#2025-04-22_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n// Fetch borrower profile with selected fields and also some fields(GMV) from its relationship\n\n{\n  _type: 'borrower_profile',\n  _id: 'AVeuJeQ9jGz7t7QfUg_M',\n  langs: ['hindi']\n  returnData: {\n    name: 1, //multi lingual field in DB model spec\n    mid: 1,\n    linkedProduct: {\n      name: 1\n    }\n  }\n}\n\n// Returns\n{\n    \"message\": \"Successfully read borrower_profile\",\n    \"status\": 200,\n    \"data\": {\n        \"_type\": \"borrower_profile\",\n        \"_id\": \"AVeuJeQ9jGz7t7QfUg_M\",\n        \"data\": {\n           'hindi': {\n              'name': 'दीप्ति'\n            },\n            'mid': '87asdf87',\n            'linkedProduct': {\n              '_id': 5,\n              '_type': 'product'\n              'data': {\n                'name': \"Existence\"\n              }\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Module Import Structure for Godspeed Microservices - YAML\nDESCRIPTION: This YAML-like snippet demonstrates the configuration options for importing a module into a Godspeed Systems microservice. The structure includes module metadata (name, namespace, git repo details) and organizes included functions such as user registration and CRUD functionalities. Each section (like auths, validations, hooks) is described with placeholders for specific function names or flags (e.g., JWT enabled). Expected usage involves specifying which functions or hooks to include, customizing authentication, and enabling or disabling telemetry features. No actual code executes in this snippet; it is used for documentation/reference and expects concrete values in place of placeholders.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/out-of-box/auto-export.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname\nnamespace\ngit\n    repoUrl\n    version\nincludedFunctions\n    users\n        registration\n            auths\n                JWT\n                    enabled: false\n            validations\n                - <fnName>\n                - <fn2Name>\n            preHooks\n                - <fnName>\n            onError\n                - <fnName>\n            postHooks\n                - <fnName>\n    crud\n        create\n            otel: false\n\n```\n\n----------------------------------------\n\nTITLE: Setting Base Url for Axios in YAML\nDESCRIPTION: Defines the base URL for API requests using Axios within a yaml configuration file. The base_url is set under the key \"/api/v1\" for HTTP requests handled by axios.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntype: axios\nbase_url: /api/v1\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs from Database Schema in Godspeed Framework\nDESCRIPTION: Command to automatically generate CRUD (Create, Read, Update, Delete) APIs based on the database schema defined in Prisma files.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/Overview.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n 'godspeed gen crud api'\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed Plugin Generator\nDESCRIPTION: Commands to install the required tools for creating custom data sources in Godspeed. This includes the godspeed-plugin-generator and Yeoman.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-datasource-plugin2.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g generator-godspeed-plugin\nnpm install -g yo\n```\n\n----------------------------------------\n\nTITLE: SendSMS Request Parameters (JSON)\nDESCRIPTION: Specifies the JSON payload parameters required for the sendSMS request. Includes the recipient mobile number, message content, and sender mobile number. 'recipientsTo' and 'from' must be valid mobile numbers, and message content/length must adhere to SMS standards.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n   recipientsTo           INTEGER\n   message                STRING\n   from                   INTEGER\n```\n\n----------------------------------------\n\nTITLE: Creating a Godspeed Blog Application\nDESCRIPTION: This Bash snippet initializes a new blog application using Godspeed CLI with a Prisma example for MongoDB. It sets up the initial folder structure for the project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/advance-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed create blog-app --from-example mongo-as-prisma # blog-app is the name of the app\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs with Godspeed\nDESCRIPTION: Displays the Godspeed command `godspeed gen-crud-api` which automatically generates CRUD (Create, Read, Update, Delete) APIs, including events and workflows, based on the models defined in the Prisma schema file (`./src/datasources/mysql.prisma`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MySQL.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Illustrating Multi-lingual Data Storage Structure (JSON)\nDESCRIPTION: This JSON snippet shows how fields declared as multilingual are stored within an entity's `_source` in Godspeed. Each supported language (configured in `common.toml`) acts as a key, containing the language-specific value for the field (e.g., 'name'). Accessing or modifying these fields requires specifying the full path, including the language key.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/model-setup.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"english\": {\n\t\"name\": \"His Holiness the 14th Dalai Lama\"\n},\n\"tibetan\": {\n\t\"name\": \"ྋགོང་ས་སྐུ་ཕྲེང་བཅུ་བཞི་པ།\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Settings in YAML\nDESCRIPTION: Basic JWT configuration snippet defining issuer, audience and secret key settings in the Configuration/Environment variables.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authentication/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njwt:\n  issuer: ISS_KEY #iss\n  audience: AUD_KEY #aud\n  secretOrKey: SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL Environment Variable for CockroachDB\nDESCRIPTION: Example of how to define the CockroachDB connection URL as an environment variable in your .env file. This variable will be referenced in the Prisma schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/CokroachDB.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=\"cockroachDB://USER:PASSWORD@HOST:PORT/DATABASE\"\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Connection URL Format - Plaintext\nDESCRIPTION: This snippet shows the standard format for a PostgreSQL connection URL used in environment configuration. It is referenced throughout the documentation as the template for setting the DATABASE_URL variable when connecting to PostgreSQL. The URL includes placeholders for user credentials, host, port, database, and schema parameters. This format informs all subsequent configuration examples.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PostgreSQL.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA\n```\n\n----------------------------------------\n\nTITLE: Example Complete Prisma Schema (lms.prisma)\nDESCRIPTION: Provides a complete example of a Prisma schema file named `lms.prisma`. It includes the `datasource`, `generator client` blocks, and a sample `User` data model with an ID and a unique PAN number field.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CRUD_API.md#2025-04-22_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"Name of Database Provider\"  // \"mysql\", \"sqlite\", \"sqlserver\" etc.\n  url      = env(\"DATABASE_URL\")     // this is the variable name given to your db_connecion_url in .env\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./prisma-clients/lms\" //in place of lms, give the name of your prisma schema here \n  previewFeatures = [\"metrics\"]  //if you want to generate metrics for prisma queries for telemetry \n}\n\nmodel User {\n  id               Int               @id @default(autoincrement())\n  pan_number       String            @unique ///@encrypted\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Generic CRUD Query via Godspeed API (JavaScript-style, Request Shape)\nDESCRIPTION: This snippet demonstrates the structure for a standard search request sent to the Godspeed CRUD API endpoint, typically targeting the primary transactional database. It shows how to specify entity type and filtering conditions in the body. The request can use various sources and supports filter objects (e.g., exact match) as shown with the 'where' field. This format is required for interacting with REST endpoints like /api/v2/search.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** The default datasource for executing queries is the\n * primary datastore (as per the configuration) unless specifically mentioned in the\n * query with the 'source' argument.\n */\n\n/api/v2/search\n{\n  type: 'user',\n  where: {\n    name: \"ayush\" //Executes an exact match\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mongoose DataSource in YAML\nDESCRIPTION: This YAML configuration sets up the Mongoose datasource type and defines default success response codes for various operations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Mongoose Datasource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: mongoose\nsuccessResponseCodes: #default response codes for success responses\n  create: 201\n  find: 200\n  findOne: 200\n  aggregate: 200\n  findOneAndUpdate: 201\n  findOneAndDelete: 202\n```\n\n----------------------------------------\n\nTITLE: Complete Prisma Schema with Models Example\nDESCRIPTION: A comprehensive Prisma schema example that includes database connection, client generator configuration, and data models for User and Post. The schema demonstrates relationships between models and custom generator output for multiple schema support.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"PostgreSQL\"    // database provider name which you are using\n  url      = env(\"DB_URL\")   // DB_URL is the name of env variable\n}\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./prisma-clients/dbName\"\n  previewFeatures = [\"metrics\"]\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Sample ElasticGraph Event Document in JSON\nDESCRIPTION: This JSON snippet represents a sample document of an event entity as it might be returned by an API using ElasticGraph. It includes multilingual support and demonstrates how texts are stored in different language keys.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_index\": \"events\",\n  \"_type\": \"event\",\n  \"_id\": \"294464\",\n  \"_version\": 4,\n  \"found\": true,\n  \"_source\": {\n    \"startingDate\": 489004200000,\n    \"tibetan\": {\n      \"description\": \"\\nལ་དཱགས་མི་མང་ནས་ཇི་ལྟར་གསོལ་བ་འདེབས་པ་བཞིན་༧སྤྱི་ནོར་༧གོང་ས་སྐྱབས་མགོན་\\n\\nཆེན་པོ་མཆོག་ནས་ནང་ཆོས་ངོ་སྤྲོད་སྩལ་།\",\n      \"title\": \"Sample event\"\n    },\n    \"english\": {\n      \"description\": \"His Holiness the Fourteenth Dalai Lama gives an introduction on basic Tibetan Buddhism in Ladakh.\",\n      \"title\": \"པོ་མཆོག་ནས་ནང་ཆོས་ངོ་སྤྲོད་སྩལ\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Server URL and Info Configuration in YAML\nDESCRIPTION: This snippet provides details on adding a custom server URL and additional API documentation information in the 'http.yaml' file. It helps integrate detailed API documentation by specifying custom server URLs, title, version, and contact details for better clarity. The snippet depends on Godspeed framework capabilities and requires a basic understanding of YAML syntax and structure.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/http-events.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nport: 3000\nbase_url: /api/v1\ndocs:\n  endpoint: /\n  info:\n    version: 0.0.1\n    title: \"Godspeed: Sample Microservice\"\n    description: Sample API calls demonstrating the functionality of Godspeed framework\n    termsOfService: \"http://swagger.io/terms/\"\n    contact:\n      name: Mindgrep Technologies Pvt Ltd\n      email: talktous@mindgrep.com\n      url: \"https://docs.mindgrep.com/docs/microservices/intro\"\n    license:\n      name: Apache 2.0\n      url: \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  servers:\n    - url: https://api.example.com:8443/api\n      description: staging\n```\n\n----------------------------------------\n\nTITLE: Configuring Encrypted Field in Entity Schema (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to declare a field as encrypted within an entity schema TOML file in ElasticGraph. By setting 'encrypted = true' for a field like mobileNumber, the system automatically applies deterministic encryption (SHA-256) to ensure sensitive data is stored and queried securely. The 'sort = true' attribute optimizes indexing. Requires storing the config in the appropriate schema file and ensuring ElasticGraph supports encryption features.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n[mobileNumber]\ntype =\"String\"\nsort = true\nencrypted = true\n\n```\n\n----------------------------------------\n\nTITLE: Sample OTEL Format Logs with Custom Attributes\nDESCRIPTION: Example of OTEL format logs showing how custom attributes are included in the structured log output. These logs include trace and span information along with custom attributes defined in the configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"Body\":\"Processing event /test/:id.http.post\",\"Timestamp\":\"1676960742403000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"3b66e6f8ec6624f6467af1226503a39e\",\"SpanId\":\"eb6e7d89ac381e9f\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"5252603e08be\",\"process.pid\":828},\"Attributes\":{\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"mobileNumber\":\"9878987898\",\"id\":\"12\",\"lan\":\"12345\"}}\n{\"Body\":\"event inputs {\\\"baseUrl\\\":\\\"\\\",\\\"body\\\":{\\\"data\\\":{\\\"lan\\\":\\\"12345\\\"}},\\\"fresh\\\":false,\\\"hostname\\\":\\\"localhost\\\",\\\"ip\\\":\\\"::ffff:172.22.0.1\\\",\\\"ips\\\":[],\\\"method\\\":\\\"POST\\\",\\\"originalUrl\\\":\\\"/test/12?mobileNumber=9878987898\\\",\\\"params\\\":{\\\"id\\\":\\\"12\\\"},\\\"path\\\":\\\"/test/12\\\",\\\"protocol\\\":\\\"http\\\",\\\"query\\\":{\\\"mobileNumber\\\":\\\"9878987898\\\"},\\\"route\\\":{\\\"path\\\":\\\"/test/:id\\\",\\\"stack\\\":[{\\\"name\\\":\\\"<anonymous>\\\",\\\"keys\\\":[],\\\"regexp\\\":{\\\"fast_star\\\":false,\\\"fast_slash\\\":false},\\\"method\\\":\\\"post\\\"},{\\\"name\\\":\\\"<anonymous>\\\",\\\"keys\\\":[],\\\"regexp\\\":{\\\"fast_star\\\":false,\\\"fast_slash\\\":false},\\\"method\\\":\\\"post\\\"}],\\\"methods\\\":{\\\"post\\\":true}},\\\"secure\\\":false,\\\"stale\\\":true,\\\"subdomains\\\":[],\\\"xhr\\\":false,\\\"headers\\\":{\\\"content-type\\\":\\\"application/json\\\",\\\"user-agent\\\":\\\"PostmanRuntime/7.29.2\\\",\\\"accept\\\":\\\"*/*\\\",\\\"postman-token\\\":\\\"9e57df7d-0a75-48b6-bc52-921bd5c045b7\\\",\\\"host\\\":\\\"localhost:4000\\\",\\\"accept-encoding\\\":\\\"gzip, deflate, br\\\",\\\"connection\\\":\\\"keep-alive\\\",\\\"content-length\\\":\\\"46\\\"},\\\"files\\\":[]}\",\"Timestamp\":\"1676960742403000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"3b66e6f8ec6624f6467af1226503a39e\",\"SpanId\":\"eb6e7d89ac381e9f\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"5252603e08be\",\"process.pid\":828},\"Attributes\":{\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"mobileNumber\":\"9878987898\",\"id\":\"12\",\"lan\":\"12345\"}}\n{\"Body\":\"event body and eventSpec exist\",\"Timestamp\":\"1676960742404000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"3b66e6f8ec6624f6467af1226503a39e\",\"SpanId\":\"eb6e7d89ac381e9f\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"5252603e08be\",\"process.pid\":828},\"Attributes\":{\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"mobileNumber\":\"9878987898\",\"id\":\"12\",\"lan\":\"12345\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch with TOML\nDESCRIPTION: This snippet provides the configuration settings for connecting to an Elasticsearch database using a TOML file. It includes parameters like maximum connections, API version, request timeout, node address, and connection options. Dependencies include a valid Elasticsearch instance and appropriate access rights. Inputs are configuration settings, with no direct outputs.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/model-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n//elasticsearch.toml\nname = elasticsearch\nmaxConnections = 200\napiVersion = '7.4'\nrequestTimeout = 90000\nnode = 'http://localhost:9200'\nsniffOnStart = true\n```\n\n----------------------------------------\n\nTITLE: Disabling JWT Authentication on Specific Endpoint - YAML\nDESCRIPTION: This YAML snippet shows how to explicitly disable JWT authentication for a particular HTTP POST endpoint by setting 'authn: false'. The configuration also references the function to execute and can include additional properties. This is useful when most endpoints require JWT but exceptions are needed for certain routes. Prerequisites include global JWT configuration unless explicitly opted out per endpoint.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-auth-old.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./v1/loan-application/:lender_loan_application_id/kyc/ckyc/initiate: \n  authn: false # explicitly disable jwt authentication on this endpoint\n  fn: com.biz.kyc.ckyc.ckyc_initiate\n  ...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SOAP Datasource in YAML\nDESCRIPTION: Defines the configuration for a SOAP datasource in a YAML file. This includes specifying the SOAP type, the URL of the service, and basic authentication credentials. It assumes access to a SOAP service at the provided WSDL URL. The configuration is typically placed in the `src/datasources` directory under the name `soap.yaml`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/soap.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: soap\\nurl: http://www.dneonline.com/calculator.asmx?WSDL\\nsecurity:\\n  type: basic\\n  username: my_username\\n  password: my_password\n```\n\n----------------------------------------\n\nTITLE: PlanetScale Connection URL Format\nDESCRIPTION: Defines the standard format for a PlanetScale database connection URL. This structure includes placeholders for the username, password, host, port, and database name required to establish a connection.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PlanetScale.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplanetscale://USER:PASSWORD@HOST:PORT/DATABASE\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Environment Variable\nDESCRIPTION: Configuring Prisma schema to use environment variable for database URL\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLite.md#2025-04-22_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Mode Redis Datasource in YAML\nDESCRIPTION: Demonstrates a sample YAML configuration for connecting to a Redis cluster. It sets the type to 'redis' and uses the 'cluster' key with a 'rootNodes' list. Each item in the list specifies the URL of a node used for initial cluster discovery, following `node-redis` cluster configuration guidelines.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/redis.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: redis\\ncluster:\\n    rootNodes:\\n        - url: redis://10.0.0.1:30001\\n        - url: redis://10.0.0.2:30002\\n\n```\n\n----------------------------------------\n\nTITLE: SendWhatsAppText Request Parameters (JSON)\nDESCRIPTION: Specifies the JSON payload parameters required for the sendWhatsAppText request. Includes the recipient mobile number, message content, message type (fixed as 'TEXT'), channel (fixed as 'whatsapp'), and sender mobile number. 'recipientsTo' and 'from' must be valid mobile numbers, and the message must comply with WhatsApp criteria.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n   recipientsTo           INTEGER\n   message                STRING\n   message_type           \"TEXT\"\n   Channel                “whatsapp”\n   from                   INTEGER\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable Values in .env File\nDESCRIPTION: This plaintext example demonstrates how to assign actual values to previously defined environment variable keys within a .env file, which is critical for running applications securely and with the correct configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/config.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMY_DATASOURCE_BASE_URL=https://httpbin.org/\nMY_DATASOURCE_API_KEY=your_api_key_here\nMY_DATASOURCE_API_TOKEN=your_api_token_here\n\nKAFKA_BROKERS=[\"localhost:9092\"]\nKAFKA_CLIENT_ID=my-kafka-client\n\nJWT_ISS=https://your-issuer.com\nJWT_AUD=https://your-audience.com\nJWT_SECRET=your_jwt_secret\n\nPRISMA_SECRET=your_prisma_secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Eventsource (Consumer) in Godspeed YAML\nDESCRIPTION: YAML configuration snippet for setting up Kafka as an eventsource (consumer) within the Godspeed framework, typically located in `Eventsources/kafka.yaml`. It specifies the eventsource `type` as `kafka` and defines the `groupId` for the consumer group.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Kafka Eventsource.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: kafka\ngroupId: \"kafka_proj\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Salesforce Datasource in YAML\nDESCRIPTION: Configuration specification for Salesforce datasource including OAuth2 authentication options, session management, and access token configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntype: salesforce\nconnection:\n    oauth2:\n        clientId : '<your Salesforce OAuth2 client ID is here>'\n        clientSecret : '<your Salesforce OAuth2 client secret is here>'\n        redirectUri : '<callback URI is here>'\n    serverUrl : '<your Salesforce server URL (e.g. https:#na1.salesforce.com) is here>'\n    sessionId : '<your Salesforce session ID is here>'\n    instanceUrl : '<your Salesforce server URL (e.g. https:#na1.salesforce.com) is here>'\n    accessToken : '<your Salesforrce OAuth2 access token is here>'\nusername: <% config.salesforce_username %>\npassword: <% config.salesforce_password %>\n```\n\n----------------------------------------\n\nTITLE: SendEmail API Endpoint Definition (HTTP)\nDESCRIPTION: Defines the HTTP request details for sending a single email. It specifies the required Content-Type, the HTTP method (POST), and the API endpoint URL.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n   Content Type: application/json ; charset= utf- 8\n   Method: POST\n   URL: /api/notification/v1/publish/sendEmail\n```\n\n----------------------------------------\n\nTITLE: Specifying OTel Service Name for Observability with Godspeed (Bash)\nDESCRIPTION: This snippet shows how to set the 'OTEL_SERVICE_NAME' environment variable to uniquely identify the Godspeed service for OpenTelemetry monitoring. You can assign any valid string as the service name, enabling observability platforms to distinguish between multiple services. This command is run directly in the shell or included in a '.env' configuration file. No additional dependencies are required aside from system support for environment variables. Ensure to replace 'sample_proj1' with your actual service name as needed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_SERVICE_NAME=sample_proj1\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MariaDB Datasource in Prisma\nDESCRIPTION: Basic Prisma datasource configuration for MariaDB connection using environment variable.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MariaDB.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mariaDB\"\n  url      = env(\"DATABASE_URL\") \n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output Logs at Event Level with Nested Attributes - JSON\nDESCRIPTION: A JSON-structured log showing the result of configuring per-event custom attributes, including nested objects (like 'msgparameter') and static identifiers. This format highlights how logs can include detailed, event-specific context, supporting advanced troubleshooting and workflow traceability.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{ Body: \"return value [] 200 %o\"\n    Timestamp: \"1688565778237000000\"\n    SeverityNumber: 9\n    SeverityText: \"INFO\"\n    TraceId: \"3fba9b9bd5d10d00b1b730b74c8eba51\"\n    SpanId: \"985e8a8d6a18568b\"\n    TraceFlags: \"01\"\n    Resource: {\n      \"service.name\": \"sample_app\",\n      \"host.hostname\": \"6295f63d9181\",\n      \"process.pid\": 13956\n    }\n    Attributes: {\n      \"event\": \"/helloworld\",\n      \"workflow_name\": \"helloworld\",\n      \"file_name\": \"helloworld\",\n      \"msgparameter\": {\n        \"fruit\": \"apple\"\n      },\n      \"identifier\": 1,\n      \"task_id\": \"\"\n    }}\n```\n\n----------------------------------------\n\nTITLE: Defining Godspeed HTTP Event for Kafka Producer YAML\nDESCRIPTION: YAML configuration for defining an HTTP POST event endpoint (`http.post./kafka-pub`) in `src/events/kafka_pub.yaml`. This event triggers the `kafka-publish` function and defines the expected request body schema (a JSON object with a required `message` string property) to initiate message publishing to Kafka.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Kafka Eventsource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# event for Publish\n\n'http.post./kafka-pub':\n  fn: kafka-publish\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            message:\n              type: string\n          required: ['message']\n```\n\n----------------------------------------\n\nTITLE: Executing SQL and Native Queries via CRUD API (JavaScript-style with Comments)\nDESCRIPTION: This snippet demonstrates both SQL and native query invocation using the Godspeed CRUD API. It includes targeting a SQL-compatible database like Postgres via an '_sql_query' and interacting with a NoSQL source such as MongoDB with a '_native_query'. Example covers how to specify the source and the query type explicitly and notes about support constraints for different data sources. Useful for advanced queries that bypass abstraction layers.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/intro.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/api/v2/search\n{\n   source: “postgres” //Can be any configured database and supporting SQL\n  _sql_query: {\n                'select * from user where age > 8 and name='Ayush'\n              }\n\n}\n\n//OR to a secondary datastore\n{\n  source: 'mongoDB',\n  _native_query : { tags: [\"technology\", \"low-code\"] },\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Datasource for MySQL\nDESCRIPTION: Illustrates the configuration within the `prisma.schema` file (`src/datasources/mysql.prisma`) to connect to MySQL. It specifies the provider as 'mysql' and uses the `env(\"DATABASE_URL\")` function to retrieve the connection string from the environment variable.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MySQL.md#2025-04-22_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\") \n}\n```\n\n----------------------------------------\n\nTITLE: Defining an HTTP Event Configuration for the Data Source\nDESCRIPTION: YAML configuration for an HTTP event that utilizes the custom data source. It defines an endpoint with request parameters and expected response schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-datasource-plugin2.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./chatgpt:\n  fn: datasource.gpt.execute\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            prompt:\n              type: string\n              description: \"User prompt\"\n          required: ['prompt']\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Defining a Redis Datasource (YAML Specification)\nDESCRIPTION: This YAML snippet shows how to configure a Redis datasource for use in Godspeed by specifying the type as 'redis' and providing a formatted URL. Requires a running Redis instance accessible at the specified URL. Inputs are the connection parameters; output is an active datasource registered for task caching. Must be placed in 'src/datasources/redis.yaml'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/caching.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: redis\\nurl: redis[s]://[[username][:password]@][host][:port][/db-number]\\n\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Plugin with Godspeed CLI\nDESCRIPTION: Command line interface to add the GraphQL plugin to a Godspeed project. After creating a project, use this command to add the GraphQL event source plugin.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Apollo GraphQl Eventsource.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> godspeed plugin add\n        ,_,   ╔════════════════════════════════════╗\n        (o,o)  ║        Welcome to Godspeed         ║\n      ({___}) ║    World's First Meta Framework    ║\n        \" \"   ╚════════════════════════════════════╝\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌────┬───────────────────────────────────┬─────────────────────────────────────────────────────────────────┐\n│    │ Name                              │ Description                                                     │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│ ❯◯ │ graphql-as-eventsource            │ graphql as eventsource plugin for Godspeed Framework            │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ aws-as-datasource                 │ aws as datasource plugin for Godspeed Framework                 │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ mailer-as-datasource              │ mailer as datasource plugin for Godspeed Framework              │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ excel-as-datasource               │ excel as datasource plugin for Godspeed Framework               │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ kafka-as-datasource-as-eventsource│ kafka as datasource-as-eventsource plugin for Godspeed Framework│\n└────┴───────────────────────────────────┴─────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: SendBulkTemplateEmail Response Parameter (JSON)\nDESCRIPTION: Defines the JSON response parameter for the sendBulkTemplateEmail request. It returns an integer representing the HTTP status code of the operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n   Status_Code: INTEGER\n```\n\n----------------------------------------\n\nTITLE: Authorization Task with Custom Status Code\nDESCRIPTION: Example of an authorization task that returns a custom status code (401) when authorization fails.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthz: \n  id: task_authz\n  tasks:\n    - fn: com.gs.transform\n      id: try_auth_3\n      args:\n        success: false\n        code: 401\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronous/Asynchronous Logging with Pino - YAML\nDESCRIPTION: In this snippet, the Pino logger is configured for asynchronous operation by setting 'sync' to false in the YAML configuration, optimizing for performance. This setting impacts whether log writes are handled synchronously (good for debugging) or asynchronously (preferred for production throughput). Other options for redaction, level, timestamp, and log bindings are included as context.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\\n  redact: ['a.b.c', 'a.b.*', 'req.headers', 'mobileNumber'] #pino redact rules. Default null.\\n  level: debug #by default info\\n  sync: false #By default sync is false. For debugging, keep it true. For performance keep it false.\\n  timestamp: stdTimeFunctions.isoTime #Pino date formats\\n  bindings: # should pid and hostname be enabled in pino log bindings.\\n    pid: true\\n    hostname: true \n```\n\n----------------------------------------\n\nTITLE: Installing Cron Plugin via Godspeed CLI\nDESCRIPTION: Command to add the Cron plugin to a Godspeed project using the CLI interface. This interactive command allows selection of the Cron plugin from available options.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Cron Eventsource.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> godspeed plugin add\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌────┬───────────────────────────────────┬─────────────────────────────────────────────────────────────────┐\n│    │ Name                              │ Description                                                     │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ express-as-http                   │ Godspeed event source plugin for express as http server         │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ aws-as-datasource                 │ aws as datasource plugin for Godspeed Framework                 │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ mailer-as-datasource              │ mailer as datasource plugin for Godspeed Framework              │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│ ❯◯ │ cron-as-eventsource               │ Cron as eventsource plugin for Godspeed Framework               │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ kafka-as-datasource-as-eventsource│ kafka as datasource-as-eventsource plugin for Godspeed Framework│\n└────┴───────────────────────────────────┴─────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Generate Prisma Client Command\nDESCRIPTION: Command to generate Prisma client and sync database\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLite.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Complete Prisma Schema for CockroachDB with User and Post Models\nDESCRIPTION: A comprehensive Prisma schema example for CockroachDB, defining datasource, client generator with preview features, and data models for User and Post entities with relationships.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/CokroachDB.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"cockroachDB\"\n  url      = env(\"DATABASE_URL\")\n}\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./prisma-clients/cockroachDB\"\n  previewFeatures = [\"metrics\"]\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Retry in YAML\nDESCRIPTION: This YAML configuration sets up retry logic for Axios requests at the datasource level, including conditions for retrying and retry intervals.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntype: axios\nbase_url: http://localhost:4000\nretry:\n    when: #the condition\n      status: [500, 501, 502] # an array or single value of codes\n      message: my custom expected message for retry\n    max_attempts: 5\n    type: constant ##[constant,exponential,random]\n    interval: PT15s\n```\n\n----------------------------------------\n\nTITLE: Configuring a Data Source in YAML\nDESCRIPTION: Example YAML configuration file for a custom data source. This defines the data source type and client ID parameters.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-datasource-plugin2.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: my_custom_type\nclientId: \"my_project\"\n```\n\n----------------------------------------\n\nTITLE: Disabling JWT Authentication in Event Schema\nDESCRIPTION: This snippet illustrates how to disable JWT authentication for specific events by setting authn to false in the event schema. This approach allows selective authentication control over different endpoints.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-authentication.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.get./helloworld:\n  fn: helloworld\n  authn: false\n  params:\n    - name: name\n      in: query\n      required: true\n\n```\n\n----------------------------------------\n\nTITLE: Making API Calls with Joins in ElasticGraph\nDESCRIPTION: JavaScript examples of API calls using ElasticGraph, demonstrating how to retrieve data with different join specifications for fetching related entities.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n\tdeep.get({_id:1, _type: 'event' , joins: 'read'});\n\tdeep.get({\n\t\t_id:1,\n\t\t_type: 'event' , joins: {\n\t\t\"name\": 1,\n\t\t\"city.name\": 1,\n\t\t\"city.state.name\": 1\n\t\t}}\n\t);\n\tdeep.search({\n\t\t_id:1,\n\t\t_type: 'event' ,\n\t\tquery: {\"match\": {\"speakers.person.english.name\": \"Dalai Lama\"}},\n\t\tjoins: 'search'\n\t})\n```\n\n----------------------------------------\n\nTITLE: Setting Heroku PostgreSQL Connection URL as Environment Variable - Plaintext\nDESCRIPTION: This snippet demonstrates how to assign a PostgreSQL connection URL (for a database hosted on Heroku) to the DATABASE_URL environment variable. It serves as an example for configuring DATABASE_URL with actual connection parameters, intended for use in the .env file and consumed by Prisma's datasource configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PostgreSQL.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=\"postgresql://opnmyfngbknppm:XXX@ec2-46-137-91-216.eu-west-1.compute.amazonaws.com:5432/d50rgmkqi2ipus?schema=hello-prisma\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticgraph for OpenSearch using elasticsearch.toml\nDESCRIPTION: Shows an example `elasticsearch.toml` file configuring various Elasticsearch/OpenSearch connection parameters. Setting `ds = 'aws'` within this file instructs Elasticgraph to use OpenSearch instead of the default Elasticsearch.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\nmaxConnections = 200\napiVersion = '7.4'\nrequestTimeout = 90000\nnode = 'http://localhost:9200'\nsniffOnStart = true\nds = 'aws'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Traces in GodSpeed YAML\nDESCRIPTION: Example showing how to create a custom trace named 'httpbin_trace' with request and param attributes. The trace is created at task start and ends when the task completes execution.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n    - id: httpbin_step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      name: http bin step\n      description: Hit http bin with some dummy data. It will send back same as response\n      fn: com.gs.http\n      trace:\n        name: httpbin_trace\n        attributes:\n            request: <%inputs.body%>\n            param: <%inputs.query%>\n      args:\n        datasource: httpbin\n        params: <% inputs.query %>\n        data: <% inputs.body %>\n        config:\n          url : /anything\n          method: post\n```\n\n----------------------------------------\n\nTITLE: Illustrating Mongoose Datasource Error Response Structure in YAML\nDESCRIPTION: This YAML snippet shows the structure of a Godspeed Status (`GSStatus`) object returned by the Mongoose datasource when an error occurs during an operation. It typically includes a 500 status code, `success: false`, and a `data` object containing an error message like 'Internal Server Error'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n    code: 500\n    success: false\n    data: \n        message: Internal Server Error\n```\n\n----------------------------------------\n\nTITLE: Setting the OTEL Exporter Endpoint Environment Variable (Shell)\nDESCRIPTION: This shell command exports the `OTEL_EXPORTER_OTLP_ENDPOINT` environment variable. Applications use this variable to determine the address (IP and port) of the OpenTelemetry Collector to which they should send trace data via the OTLP/gRPC protocol. Replace `<IP of OTEL collector>` with the actual IP address of your collector instance. The port 4317 is standard for OTLP/gRPC.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/tracing.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_ENDPOINT=<IP of OTEL collector>:4317\n```\n\n----------------------------------------\n\nTITLE: Database Connection URL Example for PostgreSQL\nDESCRIPTION: An example connection string for PostgreSQL database which should be added to the .env file. The string format includes user credentials, host, port, and database name.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDB_URL = \"postgresql://johndoe:password@localhost:5432/mydb?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: Using Loadtime Scripting in Datasource Configuration (YAML)\nDESCRIPTION: This YAML snippet shows an Axios datasource definition where the `base_url` is set dynamically at loadtime using inline scripting (`<% %>`). It fetches the URL value from the application configuration (`config.api.base_url`), demonstrating the use of scripting for datasource parameterization.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntype: axios\nbase_url: <% config.api.base_url %>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 as Data Source in YAML\nDESCRIPTION: This snippet outlines the YAML structure necessary for defining AWS as a data source, focusing on S3 services. It specifies the credential requirements, including `accessKeyId` and `secretAccessKey`, as well as the AWS region. The S3 service is included with an empty configuration block, indicating potential adaptability for other settings.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/aws.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: aws\ncommon:\n    credentials:\n        accessKeyId: 'AKIA4KQJJFGY2KPNNOEMmnbv'\n        secretAccessKey: '+pf5xyyPSUfBNn0V9ZIH0oPVzARBvxoehR+mpzigcdfg'\n    region: \"ap-south-1\"\nservices:\n    S3:\n        config: {}\n```\n\n----------------------------------------\n\nTITLE: Logging with ChildLogger from GSContext in JavaScript\nDESCRIPTION: Shows usage of the context-aware childLogger for logging within a function. The snippet logs the event input body with contextual metadata for tracing workflow and task. This requires the Pino logger instance provided via GSContext, and logs will include additional context-specific fields.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/native-language-functions.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\n    const { childLogger} = ctx;\n    childLogger.info('inputs: %o', inputs.body);\n\n```\n\n----------------------------------------\n\nTITLE: Express Plugin Instance Configuration\nDESCRIPTION: YAML configuration for Express plugin instance defining port, base URL, Swagger documentation, authentication, and authorization settings.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nport: 3000\nbase_url: /api/v1\ndocs:\n  endpoint: /api-docs\n  info:\n    title: Sample Godspeed App\n    version: 1.1.0\n    summary: some http calls\n    description: lets play with Godspeed\n    contact:\n      name: API Support\n      url: 'http://www.myfintech.com/support'\n      email: support@myfintech.com\n    license:\n      name: Apache 2.0\n      url: 'https://www.apache.org/licenses/LICENSE-2.0.html'\n  servers:\n    - url: 'http://localhost:3000'\n      description: Public API server\n    - url: 'http://localhost:3001'\n      description: Internal API server\nrequest_body_limit: 20000\nfile_size_limit: 50000\nauthn:\n  jwt:\n    secretOrKey: mysecret\n    audience: mycompany\n    issuer: mycompany\nauthz:\n  - id: check_user_role\n    fn: com.gs.transform\n    args: <%inputs.user.role === 'admin'%>\non_request_validation_error: validations.request.standardResponse\non_response_validation_error:\n  - id: response_validation_error_handler\n    fn: com.gs.return\n    args: <%inputs%>\n```\n\n----------------------------------------\n\nTITLE: Overriding Axios Retry at Task Level\nDESCRIPTION: This YAML snippet shows how to override the default retry configuration for a specific Axios task within a workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nid: some_workflow\ntasks:\n  - id: post-anything\n    # Fetching loan offers from rule engine for the given bank and pan card\n    fn: datasource.api_datasource.post./anything\n    args:\n      data:\n        data: <%inputs.body.data%>\n    on_error:\n      continue: false\n    retry: # By default the datasource has constant retry set in its yaml. Here we override the retry to exponential\n      when: # an and condition between status and message.\n        status: [500, 503] # an array or single value of codes (optional). Default 500\n        message: Retry later # Retry when response has this message\n      max_attempts: 5\n      type: exponential\n      min_interval: PT5s\n      max_internal: PT15s\n```\n\n----------------------------------------\n\nTITLE: SendBulkEmail Request Parameters (JSON)\nDESCRIPTION: Specifies the JSON payload parameters required for the sendBulkEmail request. Includes a list of recipient addresses, message content, sender address, and email subject.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\n   recipientsToList      [STRING, STRING...]\n   message                STRING\n   from                   STRING\n   Subject                STRING\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Configuration Directory Structure\nDESCRIPTION: Shows the standard location for the `custom-environment-variables.yaml` file within the project's `config` directory. This structure is expected by the framework for loading environment variable mappings.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/configuration/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```\n├── config\n│   ├── custom-environment-variables.yaml\n```\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Documentation for Godspeed Project\nDESCRIPTION: The gen-api-docs command automatically generates OpenAPI Specification 3.0 documentation for your Godspeed project, creating a YAML file in the docs directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed gen-api-docs\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|                          \n\n> proj_upd@1.0.0 gen-api-docs\n> node ../gs_service/dist/api-specs/api-spec.js | pino-pretty\n\n[1657529346164] INFO (GS-logger/7684 on 4c20ee3c4c38): Loading events from /workspace/development/app/src/events\n[1657529346190] DEBUG (GS-logger/7684 on 4c20ee3c4c38): parsing files: /workspace/development/app/src/events/call_another_workflow.yaml,/workspace/development/app/src/events/create_user_then_show_all.yaml,/workspace/development/app/src/events/cross_db_join.yaml,/workspace/development/app/src/events/document.yaml,/workspace/development/app/src/events/helloworld.yaml,/workspace/development/app/src/events/httpbin_anything_coffee.yaml,/workspace/development/app/src/events/httpbin_anything.yaml,/workspace/development/app/src/events/run_tasks_in_parallel.yaml,/workspace/development/app/src/events/sum.yaml,/workspace/development/app/src/events/switch_case.yaml\n[1657529346289] INFO (GS-logger/7684 on 4c20ee3c4c38): /workspace/development/app/docs/api-doc.yaml file is saved!\n```\n\n----------------------------------------\n\nTITLE: Using JSON for On-the-Fly Joins in ElasticGraph\nDESCRIPTION: JSON example showing how to dynamically specify joins in ElasticGraph queries to create custom views of related data.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"joins\": {\n\t\"name\": 1,\n\t\"city.name\": 1,\n\t\"city.state.name\": 1,\n\t\"city\": { // Same effect as above two lines\n\t\t\"name\": 1,\n\t\t\"state\": {\n\t\t\t\"name\": 1\n\t\t}\n\t}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Unlinking Entities via Relationship in ElasticGraph\nDESCRIPTION: This JavaScript example shows how to unlink two entities in ElasticGraph. The 'es.deep.unlink' function is used to remove an existing relationship between an 'event' and a 'session'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nes.deep.unlink({\n  e1: {\n    _type: ‘event’,\n    _id: ‘674’\n  },\n  e2: {\n    _type: session,\n    _id: 4\n  },\n  e1ToE2Relation: ‘sessions’\n})\n.then(console.log)\n```\n\n----------------------------------------\n\nTITLE: Denormalization Settings for Graph Search in ElasticGraph\nDESCRIPTION: This YAML snippet represents the denormalization settings defined in the joins/index.txt file for ElasticGraph. It lists the properties of sessions and speakers that should be denormalized into an event entity for optimizing graph search operations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n[event]\nsessions{title, description}\nspeakers.person{name}\n```\n\n----------------------------------------\n\nTITLE: SendEmail Request Parameters (JSON)\nDESCRIPTION: Specifies the JSON payload parameters required for the sendEmail request. Includes recipient address, message content, sender address, and email subject. Both 'recipientsTo' and 'from' must be valid email formats.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n     recipientsTo      STRING\n     message           STRING\n     from              STRING\n     Subject           STRING\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Attributes at Event Level - YAML\nDESCRIPTION: At the event (endpoint) level, this YAML snippet shows how to provide granular log attributes per event, such as static values or nested objects, under 'log.attributes'. This enables finer control and overrides source/global logger attributes for more targeted logging. Supports parameter configuration and response schemas inline.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\"http.get./helloworld\":\\n  fn: helloworld\\n  authn: false\\n  log:\\n    attributes:\\n      msgparameter:\\n        fruit: apple\\n      identifier: 1\\n  params:\\n    - name: name\\n      in: query\\n      required: true\\n      schema:\\n        type: string\\n  responses:\\n    200:\\n      content:\\n        application/json:\\n          schema:\\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry via Environment Variable in Godspeed (Bash)\nDESCRIPTION: This snippet demonstrates how to enable OpenTelemetry (OTel) instrumentation for a Godspeed service by setting the 'OTEL_ENABLED' environment variable to 'true'. This command can be placed in the shell, startup scripts, or within a '.env' file to ensure observability features are active. There are no external dependencies beyond a Unix-like shell or environment variable support. The key parameter is 'OTEL_ENABLED'; setting it to 'true' activates OTel features, and the expected effect is that traces, logs, and metrics telemetry become available when the Godspeed service runs.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_ENABLED=true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Event Source in Godspeed\nDESCRIPTION: Basic configuration for the Cron event source in the Godspeed framework. This configuration sets up the plugin type in the eventsource/cron.yaml file.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Cron Eventsource.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: cron\n```\n\n----------------------------------------\n\nTITLE: Adding Kafka Plugin to Godspeed Project via CLI - Shell\nDESCRIPTION: Demonstrates the interactive process of adding the Kafka plug-in using the Godspeed command-line interface. Dependencies: Requires Godspeed CLI installed and a Godspeed project directory initialized. The interactive terminal prompts the user to select the desired plugin, in this case '@godspeedsystems/plugins-kafka-as-datasource-as-eventsource'. The selection then triggers installation. Limited to plugin setup phase, not message operations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Kafka Datasource.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> godspeed plugin add\\n       ,_,   ╔════════════════════════════════════╗\\n      (o,o)  ║        Welcome to Godspeed         ║\\n     ({___}) ║    World's First Meta Framework    ║\\n       \" \"   ╚════════════════════════════════════╝\\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\\n┌──────┬────────────────────────────────────┬────────────────────────────────────────────────────────────────────┐\\n│      │ Name                               │ Description                                                        │\\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\\n│  ◯   │ prisma-as-datastore                │ Prisma as a datasource plugin for Godspeed Framework.              │\\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\\n│  ◯   │ aws-as-datasource                  │ aws as datasource plugin for Godspeed Framework                    │\\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\\n│  ◯   │ excel-as-datasource                │ excel as datasource plugin for Godspeed Framework                  │\\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\\n│  ◯   │ mailer-as-datasource               │ mailer as datasource plugin for Godspeed Framework                 │\\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\\n│ ❯◯   │ kafka-as-datasource-as-eventsource │ kafka as datasource-as-eventsource plugin for Godspeed Framework   │\\n└──────┴────────────────────────────────────┴────────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: SendWhatsAppText API Endpoint Definition (HTTP)\nDESCRIPTION: Defines the HTTP request details for sending a WhatsApp text message. It specifies the required Content-Type, the HTTP method (POST), and the API endpoint URL.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_15\n\nLANGUAGE: http\nCODE:\n```\n   Content Type: application/json ; charset= utf- 8\n   Method: POST\n   URL: URL: /api/notification/v1/publish/sendWhatsappText\n```\n\n----------------------------------------\n\nTITLE: SendBulkTemplateEmail API Endpoint Definition (HTTP)\nDESCRIPTION: Defines the HTTP request details for sending bulk emails using a predefined template. It specifies the required Content-Type, the HTTP method (POST), and the API endpoint URL.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_6\n\nLANGUAGE: http\nCODE:\n```\n   Content Type: application/json ; charset= utf- 8\n   Method: POST\n   URL: URL: /api/notification/v1/publish/sendBulkTemplateEmail\n```\n\n----------------------------------------\n\nTITLE: Configuring Copy Dependencies in ElasticGraph\nDESCRIPTION: YAML configuration examples for implementing Copy dependencies in ElasticGraph. These settings define how changes to one entity should automatically propagate to related entities.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n[person]\nchild = \"+wife.child +husband.child\" #This will ensure copy of child between husband and wife, whenever child is added to any one of the person entities\n[file]\npermissions = \"+folder.permissions\" #Whenever a folder's permissions are updated the underlying files' permissions are updated automatically. You can still manually override them, without affecting the folder. But whenever the folder's permissions are updated again, the file's permissions will get overwritten.\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Elasticgraph Datasources\nDESCRIPTION: Illustrates the standard folder layout for organizing Elasticgraph datasource configuration files (`.yaml`) within the project's `src/datasources` directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\\n├── config\\n└── src\\n    ├── datasources\\n    │   └── httpbin.yaml\\n    │   ├── elasticgraph1.yaml\\n    │   ├── elasticgraph2.yaml\\n    ├── events\\n    ├── functions\\n    └── mappings\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env File\nDESCRIPTION: This snippet shows how to set JWT-related environment variables in a .env file located in the project's root folder. These variables include JWT_SECRET, JWT_AUDIENCE, and JWT_ISSUER, essential for JWT configuration in Godspeed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nJWT_SECRET= mysecret            #the secret\nJWT_AUDIENCE= godspeedsystemms  #aud in jwt token\nJWT_ISSUER= godspeed            #iss in jwt token\n\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships Between Entities (Text)\nDESCRIPTION: This snippet provides the textual syntax for specifying entity relationships in ElasticGraph, typically stored in configFolder/schema/relationships.txt. It expresses cardinalities (one-to-one, many-to-one, one-to-many, many-to-many) using naming patterns and square bracket notation to indicate 'many' sides. Dependencies include the need for bidirectional relationship definitions. The configuration is used by ElasticGraph to generate graph traversals and join behaviors automatically.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nrelationNameFromAToB <> relationNameFromBToA\nentityTypeA <> entityTypeB //One to one\nrelationNameFromAToB <> relationNameFromBToA\n[entityTypeA] <> entityTypeB //Many to one\nrelationNameFromAToBs <> relationNameFromBToA\nentityTypeA <> [entityTypeB] //One to many\nrelationNameFromAsToBs <> relationNameFromBsToAs\n[entityTypeA] <> [entityTypeB] //many to many\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Authentication for a Specific Endpoint (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to disable authentication for a specific API endpoint defined with the Godspeed meta-framework. The 'authn: false' key-value disables JWT authentication for the given endpoint, overriding any eventsource-level default. This mechanism is useful when certain routes, such as public health checks or documentation exports, should remain unsecured.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/walkthrough.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"http.get./helloworld\":\\n  fn: helloworld\\n  authn: false\n```\n\n----------------------------------------\n\nTITLE: Godspeed Plugin Remove Interactive Prompt Output\nDESCRIPTION: Shows the interactive interface displayed by the `godspeed plugin remove` command. It lists the currently installed plugins (e.g., express, prisma, axios) and allows the user to choose which ones to remove.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n\n\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n\n\n? Please select godspeed plugin to uninstall: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────────┬────────────────────────────────────────────────────────────────────────────────┐\n│      │ Name                                   │ Description                                                                    │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ express-as-http                        │ Godspeed event source plugin for express as http server                        │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ prisma-as-datastore                    │ Prisma as a datasource plugin for Godspeed Framework.                          │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ axios-as-datasource                    │ Axios as datasource plugin for Godspeed Framework                              │\n└──────┴────────────────────────────────────────┴────────────────────────────────────────────────────────────────────────────────┘\n\n```\n\n----------------------------------------\n\nTITLE: Complete Sample Prisma Schema for SQLite\nDESCRIPTION: Full example of a Prisma schema including datasource, generator, and model definitions for User and Post entities\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLite.md#2025-04-22_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./prisma-clients/sqlite\"\n  previewFeatures = [\"metrics\"]\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Relations Mapping for Cross-File Reference\nDESCRIPTION: Provides a JSON mapping with keys 'id', 'title', and 'completed', intended for cross-reference in other mapping files (such as YAML) via scripting. The file is placed in the mappings directory as `relations.json`. It is used to inject values into templates or other mappings using `mappings.relations`. No dependencies beyond JSON support in the environment.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/mappings.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"title\": \"Hello World\",\n    \"completed\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Terminating Function Execution with com.gs.return in YAML\nDESCRIPTION: Shows how to use com.gs.return to terminate function execution and return control to the calling function. It also demonstrates the behavior of return within parallel tasks.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: This function returns only the 'Hello' string \n# and causes the function to exit from task1.\ntasks:\n  - id: hello_task1\n    fn: com.gs.return\n    args: \n      code: 200\n      success: true\n      data: \"Hello\"\n\n  - id: transform_result\n    fn: com.gs.transform \n    args: <% outputs.hello_task1.data + inputs.query.name %>\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: return from com.gs.parallel\ntasks:\n- id: step1\n    fn: com.gs.parallel\n    tasks:\n      - id: 1st\n        fn: com.gs.return\n        args: \"hello\"\n      - id: 2nd\n        fn: com.gs.return\n        args: \"nice\"\n      - id: 3rd\n        fn: com.gs.return\n        args: \"world\"       \n```\n\n----------------------------------------\n\nTITLE: Defining a Scheduled Cron Event with Godspeed Plugin - YAML\nDESCRIPTION: This snippet defines a recurring cron event in a YAML configuration file for use with the Godspeed Cron-as-EventSource plugin. The event key uses cron syntax to trigger the task every minute in the Asia/Kolkata timezone, mapping it to the function 'every_minute'. The configuration requires the Godspeed plugin for cron support and expects the referenced function to be defined elsewhere in the codebase.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/cron-events.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# event for Scheduling a task for every minute.\\ncron.* * * * *.Asia/Kolkata:   # event key\\n  fn: every_minute\\n\n```\n\n----------------------------------------\n\nTITLE: Preparing Prisma Schema and Client\nDESCRIPTION: This command synchronizes the Prisma schema with the database and generates the Prisma client, crucial for database interactions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/advance-guide.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios DataSource in TypeScript\nDESCRIPTION: This snippet shows how to configure the Axios DataSource in a TypeScript file within a Godspeed project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from '@godspeedsystems/plugins-axios-as-datasource';\nexport default DataSource;\n```\n\n----------------------------------------\n\nTITLE: File Upload Event Configuration in YAML\nDESCRIPTION: YAML configuration for defining a file upload endpoint. This event spec configures an HTTP POST endpoint that accepts multipart/form-data with a binary file field called 'fileName'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n/document.http.post:\n  fn: com.biz.documents.upload_file\n  id: '/sendDocuments'\n  summary: upload document\n  description: upload document on httpbin\n  data:\n    schema:\n      body:\n        required: false\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                fileName:\n                  type: string\n                  format: binary\n```\n\n----------------------------------------\n\nTITLE: Specific API Status Codes (Glossary)\nDESCRIPTION: Lists the specific standard HTTP status codes used by this API, along with their descriptions (e.g., 200 OK, 400 Bad Request, 500 Internal Server Error).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n      Status Code    Description\n\n      200             OK\n\n      201             Created\n\n      202             Accepted (Request accepted, and queued for execution)\n\n      400             Bad request\n\n      401             Authentication failure\n\n      403             Forbidden\n\n      404             Resource not found\n\n      405             Method Not Allowed\n\n      412             Precondition Failed\n\n      413             Request Entity Too Large\n\n      500             Internal Server Error\n\n      501             Not Implemented\n\n      503             Service Unavailable\n\n      504             Invalid data\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Authorization Workflow (YAML/CoffeeScript)\nDESCRIPTION: Implements the `com.jfs.authz` authorization workflow in Godspeed. It calls an external authorization service (`datasource: authz`, `/authorize`) and uses a transform step (`com.gs.transform`) with embedded CoffeeScript (`<coffee% ... %>`) to process the response. The workflow must return a specific format indicating success/failure and data (boolean for allow/deny or JSON for merging).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Authorization workflow\ntasks:\n  - id: authz_step1\n    description: return allow/deny based upon user\n    fn: com.gs.http\n    args: \n      datasource: authz\n      data: <% inputs.body.user %>\n      config:\n        url : /authorize\n        method: post\n  - id: authz_step2\n    description: transform response from authz api\n    fn: com.gs.transform\n    args: |\n        <coffee% if outputs.authz_step1.data.code == 200 then {\n            success: true\n            data: true\n        } else if outputs.authz_step1.data.code == 201 then {\n            success: true\n            data:\n              where:\n                role: 'USER'\n        } else {\n            success: false\n            data: false\n        } %>\n```\n\n----------------------------------------\n\nTITLE: Complete Prisma Schema for MariaDB\nDESCRIPTION: Full Prisma schema example including datasource configuration, client generator, and data models for User and Post entities.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MariaDB.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mariaDB\"\n  url      = env(\"DATABASE_URL\")\n}\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./prisma-clients/mariaDB\"\n  previewFeatures = [\"metrics\"]\n}\n\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User    @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting Database Schema with Prisma CLI - Bash\nDESCRIPTION: Runs the Godspeed-wrapped Prisma CLI command to introspect an existing MongoDB database and write its schema into a Prisma schema file. Assumes the developer is in the project root/devcontainer. Outputs a Prisma schema populated with database models, and logs warnings for fields with undetermined types. Relies on a valid schema path, database access, and .env configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/datastore.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed prisma db pull --schema=./src/datasources/mongo_pull.prisma \n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|                          \nPrisma schema loaded from src/datasources/mongo_pull.prisma\nEnvironment variables loaded from .env\nDatasource \"db\"\n\n\\u2714 Introspected 6 models and wrote them into src/datasources/mongo_pull.prisma in 81ms\n      \n*** WARNING ***\n\nCould not determine the types for the following fields.\n- Model \"Post\", field: \"slug\"\n- Model \"Profile\", field: \"userId\"\n- Model \"User\", field: \"email\"\n\nRun prisma generate to generate Prisma Client.\n```\n\n----------------------------------------\n\nTITLE: Referencing Other Mappings in a YAML Mapping File in Godspeed\nDESCRIPTION: Demonstrates using mapped constants and values from other mappings directly inside a mapping YAML file (`reference.yaml`). Utilizes scripting expressions such as `<% mappings.Gender.Others %>` and `<% mappings.relations.title %>` to dynamically assign values based on previously declared mappings. Ensures strong DRY principles and reuse across mapping assets. Relies on Godspeed's support for scripting inside YAML and proper loading of both referenced files.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/mappings.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nNewGender: <% mappings.Gender.Others %>\ntitle:  <% mappings.relations.title %>\n\n```\n\n----------------------------------------\n\nTITLE: Registering Callback URL in Plaintext\nDESCRIPTION: Instructions for registering the callback URL with a third-party service. The callback URL should follow the format 'http://<BASE_URL>:<PORT>/callback', replacing '<BASE_URL>' and '<PORT>' with the server's actual URL and port number. The example uses 'localhost:3000' for setup.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/callbacks.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:3000/callback\n```\n\n----------------------------------------\n\nTITLE: Setting Request Body and File Size Limits in Application Config (YAML)\nDESCRIPTION: Defines two configuration variables, request_body_limit and file_size_limit, each set to 50 * 1024 * 1024 bytes (50 MB) as their values. These parameters control the maximum allowed size for HTTP request bodies and uploaded files, respectively. Requires the consuming application to parse and enforce these values; no other dependencies beyond standard YAML syntax. Inputs are expected as integer expressions, with the effective values used for validation of incoming payloads and uploads. Typical output is enforcement within the application logic (not shown here) where requests exceeding the defined limits are rejected. Note: Pure YAML does not perform arithmetic on values, so the application must handle expression evaluation if literal multiplication is used.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/configuration/payload_size_and_file_size.md#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nrequest_body_limit:  50 * 1024 * 1024\nfile_size_limit : 50 * 1024 * 1024\n\n```\n\n----------------------------------------\n\nTITLE: Defining an HTTP GET Event for Express Eventsource\nDESCRIPTION: This YAML snippet from `src/events/sample.yaml` defines a specific event triggered by the Express eventsource. It maps an HTTP GET request on the path `/sample_api` (`http.get./sample_api`) to the `sample` function defined in `src/functions/sample.yaml`. It also specifies the expected JSON request body schema (properties: name, message), requires a query parameter `user`, and defines the expected JSON response schema for a 200 status code.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.get./sample_api:\n    fn: sample      #redirects to src/functions/sample.yaml\n    body: \n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name: \n                type: string\n              message: \n                type: string                         \n    params:     \n      - in: query\n        name: user\n        required: true  \n        schema: \n          type: string   \n    responses:      \n      200:\n        content:\n          application/json:\n            schema:\n              type: string\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Retry Logic for HTTP Workflows\nDESCRIPTION: Demonstrates configuring retry logic for HTTP tasks to handle transient failures with different strategies: constant, exponential, and random retry intervals. It emphasizes robustness in network communications within workflows.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nretry:\n  max_attempts: 5\n  type: constant\n  interval: PT15m\n```\n\nLANGUAGE: YAML\nCODE:\n```\nretry:\n  max_attempts: 5\n  type: exponential\n  interval: PT15s\n```\n\nLANGUAGE: YAML\nCODE:\n```\nretry:\n  max_attempts: 5\n  type: random\n  min_interval: PT5s\n  max_interval: PT10s\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Eventsource Parameters\nDESCRIPTION: This YAML snippet defines the configuration for an Express eventsource located in `src/eventsources/http.yaml`. It specifies the `type` as `express` and sets the listening `port` to `3000`, which are essential parameters for initializing the Express server.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nport: 3000\n\n```\n\n----------------------------------------\n\nTITLE: Defining CRUD API Request and Response Structure (Plaintext)\nDESCRIPTION: This snippet outlines the expected input and output structure for using the generic CRUD API in Godspeed. The 'request' section specifies required parameters such as the data source and query type, while the 'response' section describes how results and meta-information are returned. Key fields include the request's query details and the response's status_code, message, scoring for matches, and result format. This format is required to properly interact with the universal API endpoint.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequest:\n        ds //datasource\n        {queryType} : // can be one of  query_sql, query_native, query_gsl\n                    { actual query}\n\n\nresponse:\n        status_code\n        message\n        _score //total score\n        result [\n              {_score://indivual score for each match\n               data : { fields value corresponding to returnData }\n              }\n              ]\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Metrics Example in Workflow Task - YAML\nDESCRIPTION: An example YAML workflow task with two configured custom metrics: a counter (`httpbin_calls_total`) incremented on each call and a histogram (`httpbin_calls_duration`) using a timer to record durations. Uses Prometheus pattern, with labels dynamically referencing task outputs. Assumes required Prom-client or compatible Prometheus exporter. Parameters include metric names, types, help text, label generation, functions per type (`inc`, `timer`), and task arguments. Outputs are observable metrics available alongside default APM. Limitations: requires metrics-supporting workflow engine.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/custom-metrics-logs-traces.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n    - id: httpbin_step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      name: http bin step\n      description: Hit http bin with some dummy data. It will send back same as response\n      fn: datasource.api.post./anything       \n      metrics:\n        - name: httpbin_calls_total\n          help: 'httpbin_calls_total counter of httpbin requests labeled with: method, status_code'\n          type: counter\n          labels:\n            method: httpbin\n            status_code: <% outputs.httpbin_step1.code %>               \n          inc: 1\n        - name: httpbin_calls_duration\n          help: 'httpbin_calls_duration duration histogram of httpbin responses labeled with: method, status_code'\n          type: histogram\n          labels:\n            method: httpbin\n            status_code: <% outputs.httpbin_step1.code %>               \n          timer: true          \n      args:\n        params: <% inputs.query %>\n        data: <% inputs.body %>\n```\n\n----------------------------------------\n\nTITLE: Defining Kafka Consumer Event in YAML\nDESCRIPTION: This YAML file defines an event configuration for consuming messages from a Kafka topic. It specifies the event ID, associated function, and the expected body schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkafka.publish-producer1.kafka_proj:\n  id: kafka__consumer\n  fn: kafka_consume\n  body:\n    description: The body of the query\n    content:\n      application/json:\n        schema:\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client using Godspeed CLI - Bash\nDESCRIPTION: This snippet displays the CLI command to invoke Godspeed's Prisma integration for preparing the Prisma client. Running this command syncs the current database schema with the local schema definition and generates strongly typed client code. Requires the godspeed CLI, Prisma packages, and a valid Prisma schema file. Outputs generated client code to the directory specified in the schema generator block.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PostgreSQL.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client Code for Datastore Model - Bash\nDESCRIPTION: Illustrates the use of the Godspeed CLI to generate Prisma Client code for a dataset based on a provided Prisma schema. Output includes successful code generation, environment variable loading, and code usage guidance. Required: a schema path, .env, and the `godspeed` CLI. Output: generated client library in the specified folder, which can be imported in application code.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/datastore.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed prisma generate --schema=./src/datasources/mongo2.prisma \n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|                          \nEnvironment variables loaded from .env\nPrisma schema loaded from src/datasources/mongo2.prisma\n\n\\u2714 Generated Prisma Client (3.15.2 | library) to ./src/datasources/generated-clients/mongo2 in 111ms\nYou can now start using Prisma Client in your code. Reference: https://pris.ly/d/client\n\nimport { PrismaClient } from './src/datasources/generated-clients/mongo2'\nconst prisma = new PrismaClient()\n```\n\n----------------------------------------\n\nTITLE: Enabling Open Telemetry Observability - Godspeed CLI - Bash\nDESCRIPTION: This bash snippet demonstrates running 'godspeed otel enable' to enable Open Telemetry based observability within a Godspeed project. The command installs the '@godspeedsystems/tracing' package, starts auto-instrumentation for supported plugins, exposes metrics, and sets the OTEL_ENABLED environment variable to true. Required dependencies include the Godspeed CLI and Node.js compatibility. Successful execution returns confirmation messages, software branding, and notifies the user that observability features like tracing, metrics, and logs are now active.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed otel enable\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\notel installed successfully!\nObservability has been enabled\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Payload in Workflow DSL\nDESCRIPTION: Example showing how to access JWT payload data within a workflow DSL using inputs.user\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authentication/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n    - id: api_step1\n      description: Hit with some dummy data. It will send back same as response\n      fn: datasource.api.anything.post\n      args:\n        data: <% inputs.body %>\n          jwt_payload: <% inputs.user %>\n```\n\n----------------------------------------\n\nTITLE: SendSMS Response Parameter (JSON)\nDESCRIPTION: Defines the JSON response parameter for the sendSMS request. It returns an integer representing the HTTP status code of the operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n   Status_Code: INTEGER\n```\n\n----------------------------------------\n\nTITLE: Kafka Producer Function Workflow Example - YAML\nDESCRIPTION: Defines a Godspeed function workflow that uses 'datasource.kafka.producer' to publish a message to a specific Kafka topic. The workflow expects a message input from the event, mapping it to the 'message' argument for the producer. Dependencies: Prior Kafka datasource configuration and events. Inputs: message text from HTTP body. Output: message pushed to Kafka topic 'publish-producer1'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Kafka Datasource.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: kafka-publish\\nsummary: kafka publish message\\ntasks:\\n    - id: publish\\n      fn: datasource.kafka.producer\\n      args:\\n        topic: \"publish-producer1\"\\n        message: <% inputs.body.message%>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Git Bash\nDESCRIPTION: This snippet demonstrates how to export JWT-related environment variables in Git Bash. These variables must be exported so they can be accessed in the project for JWT authentication configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-authentication.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export JWT_SECRET=mysecret\n$ export JWT_ISS= mycompany\n\n```\n\n----------------------------------------\n\nTITLE: Using Mongoose in YAML Workflow\nDESCRIPTION: This YAML snippet shows how to use Mongoose operations in a Godspeed workflow. It demonstrates two ways of passing arguments to Mongoose functions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Mongoose Datasource.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nid: mongoose_workflow\ntasks:\n  - id: first_task\n    fn: datasource.mongoose.SomeModel.findOne\n    args: {\"name\": \"mastersilv3r\"} #Fun fact: YAML acceptes JSON as well. \n\nid: helloworld2_workflow\ntasks:\n  - id: helloworld2_workflow_first_task\n    fn: datasource.mongoose.SomeModel.findOne\n    args: #as an array\n      - name: mastersilv3r #search clause: First argument\n      - 'name age' #The projection: second argument\n      - {} # Options: the third argument\n```\n\n----------------------------------------\n\nTITLE: Consuming Args in Native Function (TypeScript)\nDESCRIPTION: This TypeScript function shows how to receive and use the arguments passed from a YAML workflow. It extracts the argument (such as 'name') from the args object and logs it using the context logger. The dependencies are the Godspeed context object structure, and the function expects the args parameter to contain the keys sent from YAML. The output is in the form of log entries.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/native-language-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  export default function (ctx: GSContext, args: PlainObject) {\n    ctx.logger.info(args.name);  //Prints 'mastersilv3r'\n  }\n```\n\n----------------------------------------\n\nTITLE: Encrypting Fields in ElasticGraph Entity\nDESCRIPTION: This YAML snippet illustrates how to enable encryption for specific fields within an ElasticGraph entity using the TOML schema. It exemplifies a 'mobileNumber' field that is marked as encrypted to ensure data privacy and integrity.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n[mobileNumber]\ntype =\"String\"\nsort = true\nencrypted = true\n```\n\n----------------------------------------\n\nTITLE: Switch Function (com.gs.switch) Usage in YAML\nDESCRIPTION: Illustrates the use of com.gs.switch function for implementing switch-case flow execution in a workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: create loan application for lender\n  tasks:\n      - id: step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n        description: create account in the bank\n        fn: com.gs.switch\n        value: <%inputs.headers['lender']%>\n        cases:\n          httpbin:\n            - id: 1st\n              fn: com.biz.loan_application.httpbin_create_loan_application\n              args: <%inputs%>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pino Log Bindings - YAML\nDESCRIPTION: This YAML snippet configures the Pino logger to include the process ID (pid) and hostname in each log entry by enabling them in the 'bindings' section. Other standard log settings such as redaction, log level, sync behavior, and timestamp format are also present. This ensures logs include key metadata for tracing issues in distributed systems.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\\n  redact: ['a.b.c', 'a.b.*', 'req.headers', 'mobileNumber'] #pino redact rules. Default null.\\n  level: debug #by default info\\n  sync: true #By default sync is false. For debugging, keep it true. For performance keep it false.\\n  timestamp: stdTimeFunctions.isoTime #Pino date formats\\n  bindings: # should pid and hostname be enabled in pino log bindings.\\n    pid: true\\n    hostname: true \n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Trace Span Example in Workflow Task - YAML\nDESCRIPTION: Shows a YAML workflow task configuring a custom trace span named `httpbin_trace` with runtime attributes referring to task input data. When executed, this creates and exports an OpenTelemetry span for the task. Dependency: OTel tracing integration in the workflow engine. Attributes are dynamic, using expressions. Inputs: trace name, attributes. Output: trace records. Limitations: trace attributes must be serializable.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/custom-metrics-logs-traces.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n  - id: httpbin_step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n    name: http bin step\n    description: Hit http bin with some dummy data. It will send back same as response\n    fn: datasource.api.post./anything\n    trace:\n      name: httpbin_trace\n      attributes:\n          request: <%inputs.body%>\n          param: <%inputs.query%>\n    args:\n      params: <% inputs.query %>\n      data: <% inputs.body %>\n```\n\n----------------------------------------\n\nTITLE: Example JWT Token Format\nDESCRIPTION: Shows the three-part structure of a JWT token (header, payload, and signature) in its encoded form. Each part is base64-encoded and separated by periods.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n\n----------------------------------------\n\nTITLE: Basic SQLite Connection URL Format\nDESCRIPTION: Shows the basic format for SQLite database connection URL\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLite.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfile: followed by the path to the file`\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in Application Code/Templates\nDESCRIPTION: Shows the syntax (likely specific to the framework's templating or scripting engine) for accessing a configuration value (`config.my_datasource.base_url`) within the application. This value is sourced from the corresponding environment variable defined in the YAML mapping.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/configuration/env-vars.md#2025-04-22_snippet_3\n\nLANGUAGE: template\nCODE:\n```\n`<% config.my_datasource.base_url %>`\n```\n\n----------------------------------------\n\nTITLE: Starting Godspeed Server for API Testing - Godspeed CLI - Bash\nDESCRIPTION: This bash snippet runs the Godspeed server by invoking 'godspeed serve' from the terminal. No extra dependencies are required other than having the Godspeed CLI installed and project context. This command launches the API backend defined in configuration files, making endpoints accessible for development and testing.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/create-api.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed serve\n\n```\n\n----------------------------------------\n\nTITLE: Setting Connection URL Environment Variable for SQL Server in .env\nDESCRIPTION: Defines the database connection URL as an environment variable in the .env file. This URL is used in the Prisma schema to establish a connection to the SQL Server database.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLServer.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=\"sqlserver://HOST[:PORT];database=DATABASE;user=USER;password=PASSWORD;encrypt=true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Windows PowerShell\nDESCRIPTION: This snippet provides the necessary commands to export JWT-related environment variables using Windows PowerShell. The JWT_SECRET and JWT_ISS are set as environment variables, accessible during runtime.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt-authentication.md#2025-04-22_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$env:JWT_SECRET= \"mysecret\"\n$env:JWT_ISS= \"mycompany\"  \n\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Configuration for SQLite\nDESCRIPTION: Configuration block for SQLite datasource in Prisma schema showing both relative and absolute path options\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLite.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider= \"sqlite\"\n  url  = \"file:./testing.db\"  # target files from the project root\n  or\n  url  = \"file:/Users/john/testing.db\"   # target files from any other place in your file system\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Log Configuration\nDESCRIPTION: This YAML snippet shows configuration settings for logging, including log level, masking rules, synchronization settings, and timestamp formats using the pino logger.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  redact: # ['a.b.c', 'a.b.*', 'req.headers', 'mobileNumber'] #pino redact rules. Default null.\n  level: debug #by default info\n  sync: true #By default sync is false. For debugging, keep it true. For performance keep it false.\n  timestamp: stdTimeFunctions.isoTime #Pino date formats\n  bindings: # should pid and hostname be enabled in pino log bindings.\n    pid: false\n    hostname: true  \n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Eventsource in YAML\nDESCRIPTION: This YAML configuration sets up Kafka as an eventsource. It specifies the type as 'kafka' and sets a group ID for the Kafka consumer.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ntype: kafka\ngroupId: \"kafka_proj\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Metrics in YAML\nDESCRIPTION: YAML configuration example showing how to implement custom metrics in a Godspeed application. This configuration allows defining various types of metrics (counter, gauge, histogram, summary) with labels and actions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics:\n- name: metric_name\n  type: counter|gauge|histogram|summary\n  labels: \n    label1: val1\n    label2: val2\n          \n  # following functions depending on the metric type and all of them could be scripts, can use inputs/outputs\n  inc: 10\n  dec: 10\n  set: 100\n  observe: 2000\n  timer: true|false(boolean) starts at the beginning of workflow/task and ends at the end of workflow/task\n```\n\n----------------------------------------\n\nTITLE: Configuring a Kafka Event Consumer in YAML\nDESCRIPTION: This YAML snippet shows the configuration for a Kafka event consumer within the Godspeed framework. The key `kafka-consumer1.kafka1.kafka_proj` specifies the topic (`kafka-consumer1`), datasource name (`kafka1`), and consumer group ID (`kafka_proj`). It defines the handler workflow (`fn`), an optional validation error handler (`on_validation_error`), and the expected schema (`body`) for incoming Kafka messages. This configuration ensures that messages on the specified topic are consumed by one instance within the consumer group and processed by the designated workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n kafka-consumer1.kafka1.kafka_proj: # This event will be triggered whenever\n  # a new message arrives on the topic_name\n  id: /kafkaWebhook\n  fn: com.jfs.publish_kafka #The event handler written in publish_kafka.yml, and\n  # kept in src/workflows/com/jfs folder (in this example)\n  on_validation_error: com.jfs.handle_validation_error # The validation error handler if event's json schema validation gets failed and\n  # kept in src/workflows/com/jfs folder (in this example)\n  body:\n    description: The body of the query\n    content:\n      application/json: # For ex. application/json application/xml\n        schema:\n          type: object\n          properties:\n            name:\n              type: string\n          required: [name]\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL using URL Format\nDESCRIPTION: Provides the standard connection URL format and a specific example for connecting to a MySQL database. This format is used when configuring MySQL connections, requiring username, password, host, port, and database name.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nConnection URL format: `mysql://username:password@host:port/database`\nExample connection URL: `mysql://root:root@localhost:3306/test`\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Datasource in YAML\nDESCRIPTION: This YAML configuration file (`src/datasources/kafka.yaml`) defines the settings for the Kafka data source. It specifies the `type` as 'Kafka' (linking to the TypeScript implementation), a `clientId` for the Kafka connection, and the list of Kafka `brokers` to connect to.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource_old.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: Kafka\nclientId: \"kafka_proj\"\nbrokers: [\"kafka:9092\"]\n```\n\n----------------------------------------\n\nTITLE: Initiating Interactive Godspeed Plugin Addition (Bash)\nDESCRIPTION: This command initiates an interactive session using the Godspeed CLI to select and add datasource plugins to the current project. It presents a list of available plugins for the user to choose from.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Overview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed plugin add\n```\n\nLANGUAGE: bash\nCODE:\n```\n\n\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n\n\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────────┬────────────────────────────────────────────────────────────────────────────────┐\n│      │ Name                                   │ Description                                                                    │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ cron-as-eventsource                    │ Cron as eventsource plugin for Godspeed Framework                              │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ aws-as-datasource                      │ aws as datasource plugin for Godspeed Framework                                │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ excel-as-datasource                    │ excel as datasource plugin for Godspeed Framework                              │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ mangoose-as-datasource                 │ mongoose-as-datasource as datasource plugin for Godspeed Framework             │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ mailer-as-datasource                   │ mailer as datasource plugin for Godspeed Framework                             │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ kafka-as-datasource-as-eventsource     │ kafka as datasource-as-eventsource plugin for Godspeed Framework               │\n└──────┴────────────────────────────────────────┴────────────────────────────────────────────────────────────────────────────────┘\n\n\n```\n\n----------------------------------------\n\nTITLE: General Database Connection URL Format (Bash)\nDESCRIPTION: Illustrates the general format for database connection URLs used to connect a Godspeed project to a database via Prisma. This format specifies the protocol, username, password, host, port, and database name.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CRUD_API.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprotocol://username:password@host:port/database_name\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch or Secondary Store Targeted Query (JavaScript-style, Request Shape)\nDESCRIPTION: This snippet provides an example of a search request directed at a secondary database such as Elasticsearch or another supported data source. The inclusion of the 'source' parameter changes the target database for the query. The filtering criteria can include range queries, match phrases, and field-specific filters for advanced text or attribute search. This structure is useful when leveraging secondary or non-transactional stores for specialized queries.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/api/v2/search\n{\n  source: 'elasticsearch', //can be 'cache', 'mongodb' or an in memory object etc.\n  query: {\n    type: 'user',\n    where: {\n      age: {\n        gte: 'ayush'\n      },\n      'city.name': {\n        matchPhrase: 'delhi' //Executes a text search\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Default Export for Epoch Conversion Plugin (TypeScript)\nDESCRIPTION: Implements a default-exported function 'convertEpoch' that formats a string epoch timestamp to a date string in 'yyyy-MM-dd HH:mm:ss' format with the 'date-fns/format' library. Expects a string timestamp as the parameter. Use requires the 'date-fns' package. In workflow scripts, can be called via 'epoch_convertEpoch' due to default export loading rules.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/script-plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport format from 'date-fns/format';\\n\\nexport default function convertEpoch(inputTimestamp: string){\\n    const newDateTime = new Date(inputTimestamp);\\n    return format(newDateTime, 'yyyy-MM-dd HH:mm:ss');\\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Task with Invalid Status Code\nDESCRIPTION: Example of an authorization task that attempts to return an invalid status code (200) for a failed authorization, which will be overridden to 403.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authorization/authz-usecases.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauthz: \n  id: task_authz\n  tasks:\n    - fn: com.gs.transform\n      id: try_auth_3\n      args:\n        success: false\n        code: 200\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Skipping in Godspeed Axios Plugin Workflow - YAML\nDESCRIPTION: This YAML snippet defines a workflow task using the Godspeed Axios Plugin where the skipAuth argument is set to true, instructing the plugin to ignore authentication for this request. This configuration is useful when making calls, such as generating tokens, where authentication should be bypassed. No external code dependencies are needed to enable skipAuth; the Godspeed Axios Plugin and its configuration are prerequisites, with args.skipAuth used as a Boolean toggle.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Axios Datasource.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nid: some_workflow\\ntasks:\\n  - id: post-anything\\n    # Fetching loan offers from rule engine for the given bank and pan card\\n    fn: datasource.api.post./anything\\n    args:\\n      skipAuth: true\\n\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Scripting in Workflow Task Arguments (YAML/JS)\nDESCRIPTION: This YAML snippet defines a task (`first_task`) within a Godspeed workflow (`helloworld`). It uses the `com.gs.return` function and employs inline scripting (`<% %>`) in its `args`. The script concatenates strings and accesses runtime input data (`inputs.body.name`, `inputs.body.gender`) to dynamically construct the return value.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nid: helloworld\ntasks:\n  - id: first_task\n    fn: com.gs.return\n    args: <% \"Hello, The gender of \" + inputs.body.name + \" is \" + inputs.body.gender %>\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable for Database Connection in .env - Plaintext\nDESCRIPTION: This snippet shows how to set the DATABASE_URL environment variable in an .env file with a typical local PostgreSQL connection string. Prisma's datasource configuration will reference this variable using env('DATABASE_URL'). No additional dependencies beyond a configured .env file are required.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PostgreSQL.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=\"postgresql://johndoe:password@localhost:5432/mydb?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: Authorization Response Format in Godspeed\nDESCRIPTION: This snippet illustrates the expected format for authorization workflow responses in Godspeed. It shows how to structure the response to indicate success or failure and include additional data.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authorization/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsuccess: true/false\ndata: true/false/JSON output\n```\n\n----------------------------------------\n\nTITLE: Sample Log Output Following OTEL Data Model - JSON\nDESCRIPTION: Example of JSON-structured logs as emitted by the workflow logging system, conforming to the OTEL Logging Data Model. Each log encapsulates both unstructured body and structured key-value attributes, including severity, timestamps, trace IDs, and contextual task/workflow metadata. No dependencies for reading output, but log production requires compatible logging provider.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/custom-metrics-logs-traces.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"Body\":\"Hello [{\\\"key1\\\":\\\"v1\\\",\\\"key2\\\":\\\"v2\\\"},\\\"v1\\\"]\",\"Timestamp\":\"2024-04-10T09:40:45.122Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"afde0bf5bb3533d932c1c04c30d91172\",\"SpanId\":\"ad477b2cf81ca711\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9ce06d358ba7\",\"process.pid\":67228},\"Attributes\":{\"request\":{\"status\":\"Hello\"},\"task_id\":\"if\",\"workflow_name\":\"if_else\"}}\n. . . . . . . . . . .\n{\"Body\":\"World {\\\"key1\\\":\\\"v1\\\",\\\"key2\\\":\\\"v2\\\"}\",\"Timestamp\":\"2024-04-10T09:40:45.127Z000000\",\"SeverityNumber\":17,\"SeverityText\":\"ERROR\",\"TraceId\":\"afde0bf5bb3533d932c1c04c30d91172\",\"SpanId\":\"ad477b2cf81ca711\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9ce06d358ba7\",\"process.pid\":67228},\"Attributes\":{\"customer_name\":\"Hell!\",\"task_id\":\"if\",\"workflow_name\":\"if_else\"}}\n```\n\n----------------------------------------\n\nTITLE: Finding Entities with Criteria - Godspeed API - JSON\nDESCRIPTION: Provides an example payload and response for the find operation, showing retrieval of multiple entities that match specific criteria with field selection, multilingual support, and relations. Dependencies: proper model setup and valid query, returnData, and langs fields. Input: JSON specifying type, query, retrieval fields, languages, etc. Output: List of entities with specified fields and relationships, count of matched records, or error object.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/CRUD API.md#2025-04-22_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n// Fetch borrower profile with selected fields and also some fields(GMV) from its relationship\n\n{\n  _type: 'borrower_profile',\n  query: {\n    name: 'दीप्ति'\n  },\n  langs: ['hindi'],\n  returnData: {\n    name: 1, //multi lingual field in DB model spec\n    mid: 1,\n    linkedProduct: {\n      name: 1\n    }\n  }\n}\n\n// Returns\n{\n    \"message\": \"Successfully read borrower_profile\",\n    \"status\": 200,\n    \"data\": {\n      \"count\" : 11,\n      \"data\": [\n          {\n            \"_type\": \"borrower_profile\",\n            \"_id\": \"AVeuJeQ9jGz7t7QfUg_M\",\n            \"data\": {\n              'hindi': {\n                  'name': 'दीप्ति'\n                },\n                'mid': '87asdf87',\n                'linkedProduct': {\n                  '_id': 5,\n                  '_type': 'product'\n                  'data': {\n                    'name': \"Existence\"\n                  }\n                }\n            }\n        }\n      ]\n    },\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 File Upload Event\nDESCRIPTION: This YAML snippet sets up an HTTP POST event for uploading a file to AWS S3. It specifies the endpoint, function to invoke, expected request body content type, and the response format.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/AWS Datasource.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# event for upload s3 file\n\n\"http.post./aws\":\n  fn: aws_upload\n  body:\n  content:\n    multipart/form-data:\n        schema:\n        $ref: '#/definitions/event/upload_file'\n  responses:\n    200:\n      content:\n         application/json:\n```\n\n----------------------------------------\n\nTITLE: Adding Function Summary in Godspeed DSL\nDESCRIPTION: Demonstrates how to add a basic summary to a function definition.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n__summary: A sample summary of the function\n```\n\n----------------------------------------\n\nTITLE: Custom Trace DSL Specification\nDESCRIPTION: Schema for defining custom traces in GodSpeed systems. The specification allows defining the span name and attributes for the trace.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ntrace:\n    name: span_name\n    attributes:\n        attribute1: value1\n        attribute2: value2\n```\n\n----------------------------------------\n\nTITLE: Godspeed CLI command usage and options\nDESCRIPTION: This block outputs the help information for Godspeed CLI, showing available options and commands for managing projects. This includes commands like create, versions, prepare, and version to manage Godspeed services.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ godspeed\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|\nUsage: godspeed [options] [command]\n\nOptions:\n  -v, --version                   output the version number\n  -h, --help                      display help for command\n\nCommands:\n  create [options] <projectName>\n  versions                        List all the available versions of gs_service\n  prepare                         prepare the containers, before launch or after cleaning the containers\n  version <version>\n  help [command]                  display help for command\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Service Docker Compose Configuration - YAML\nDESCRIPTION: This YAML snippet provides a Docker Compose file (version 3.0) that defines three services for a development environment: Zookeeper, Kafka (with Confluent images), and Elasticsearch. Networking, ports, environment variables, volume bindings, and restart policies are specified for local orchestration. The file must be used with 'docker-compose' or 'docker compose' command in an appropriately named directory, and the Elasticsearch data path must match local filesystem structure.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.0\"\\nservices:\\n  zookeeper:\\n    image: confluentinc/cp-zookeeper:7.0.1\\n    environment:\\n      ZOOKEEPER_CLIENT_PORT: 2181\\n      ZOOKEEPER_TICK_TIME: 2000\\n    ports:\\n      - 2181:2181\\n\\n  kafka:\\n    image: confluentinc/cp-kafka:7.0.1\\n    depends_on:\\n      - zookeeper\\n    ports:\\n      - 29092:29092\\n      - 9092:9092\\n    environment:\\n      KAFKA_BROKER_ID: 1\\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092\\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT\\n      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT\\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\\n\\n  elasticsearch:\\n    container_name: es01\\n    image: elasticsearch:7.4.2\\n    environment:\\n      - node.name=es01\\n      - discovery.type=single-node\\n      - bootstrap.memory_lock=true\\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\\n    ulimits:\\n      memlock:\\n        soft: -1\\n        hard: -1\\n    volumes:\\n      - /home/gurjot/elasticsearch/es-data:/usr/share/elasticsearch/data\\n    ports:\\n      - 9200:9200\\n      - 9300:9300\\n    networks:\\n      - elastic\\n    restart: always\\n\\nnetworks:\\n  elastic:\\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Creating Data Directory for Elasticsearch - Shell\nDESCRIPTION: This step instructs the developer to create a dedicated data directory (e.g., 'es-data') under the application folder to be mounted as a volume for Elasticsearch's persistent data. Required before starting Elasticsearch Compose service; typically accomplished via 'mkdir' or in a file explorer.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncreate a folder under file with name:\\nes-data\n```\n\n----------------------------------------\n\nTITLE: Creating New Godspeed Project\nDESCRIPTION: Example of creating a new Godspeed project using the create command\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n $ godspeed create my-service\n\n     ~~~~~~ Godspeed CLI ~~~~~~\n\n      …  waiting   Cloning project template.\n        success   Cloning template successful.\n       …  waiting   Generating project with default examples.\n       …  waiting   Generating project files.\n         success   Successfully generated godspeed project files.\n       …  waiting   Installing project dependencies.\n         success   Successfully installed project dependencies.\n         success  \n\n       Successfully created the project my-service.\n       Use `godspeed --help` command for available commands. Happy building microservices with Godspeed!.\n```\n\n----------------------------------------\n\nTITLE: Parallel Function Execution in Godspeed DSL\nDESCRIPTION: Demonstrates parallel execution of multiple functions using __parallel keyword.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n__parallel:\n  - __ref: __modules.imported_module_1.some_function\n  - __ref: __modules.imported_module_2.some_function_2\n```\n\n----------------------------------------\n\nTITLE: Starting Godspeed Server (Bash) - Bash\nDESCRIPTION: Provides the bash command to launch the Godspeed backend server. No code dependencies other than requiring the godspeed CLI in the environment. Should be used in the project root. Input is the command invocation, output is the running server ready for API requests.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed serve\n\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Prisma Schema (Prisma ORM, Prisma)\nDESCRIPTION: This Prisma schema defines two models, User and Post, for a MongoDB database, including their attributes, types, relationships, and a Role enum. It configures the datasource via an environment variable, specifies the Prisma client generator output path, and includes mapping annotations required for MongoDB. The file must reside in the 'src/datasources' directory and references 'MONGO_TEST_URL', which should be set in the .env file, with expected output clients at './prisma-clients/mongo'.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"MONGO_TEST_URL\")  //Connection string added in the .env file\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output = \"./prisma-clients/mongo\"\n}\n\nmodel User {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt DateTime @default(now())\n  email     String   @unique\n  name      String?\n  role      Role     @default(USER)\n  posts     Post[]\n}\n\nmodel Post {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  published Boolean  @default(false)\n  title     String\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  String   @db.ObjectId\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Output Format for Authentication Workflow (YAML)\nDESCRIPTION: Illustrates the expected YAML structure for the output of a Godspeed datasource authentication workflow. It should return necessary `headers` (e.g., Authorization) and `params` to be injected into the main request, and a list of `statusCodes` (e.g., 401, 403) which, if received from the target datasource, will trigger re-execution of this authentication workflow.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nheaders: \n  header1: val1\nparams:\n  param1: val1\nstatusCodes: [401, 403, ....]\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs\nDESCRIPTION: Command to generate CRUD APIs based on the Prisma schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MariaDB.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Development Log Format Example\nDESCRIPTION: Example of the development log format which displays logs in a more readable format. The format follows the pattern 'datetime [SeverityText] TraceId SpanId {Attributes} Body' and is designed to be more human-readable than the default OTEL format.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n16/02/23, 12:44:42 pm [INFO]   {} adding body schema for /upload_doc.http.post\n16/02/23, 12:44:42 pm [INFO]   {} adding body schema for /upload_multiple_docs.http.post\n16/02/23, 12:44:42 pm [INFO]   {} adding body schema for /upload_s3.http.post\n16/02/23, 12:44:42 pm [INFO]   {} registering http handler /another_workflow post\n16/02/23, 12:44:42 pm [INFO]   {} registering http handler /create/:entity_type post\n16/02/23, 12:44:42 pm [INFO]   {} registering http handler /document post\n16/02/23, 12:44:42 pm [INFO]   {} registering http handler /fn_script post\n. . . . . . . . . . \n16/02/23, 12:44:43 pm [INFO] f9f61d4940e3a8e5be8bc80faf6e36a2 96e746f5cbbee1ac {\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"task_id\":\"test_step1\"} args.retry {\"max_attempts\":3,\"type\":\"constant\",\"interval\":5000}\n16/02/23, 12:44:44 pm [INFO] f9f61d4940e3a8e5be8bc80faf6e36a2 96e746f5cbbee1ac {\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"task_id\":\"test_step1\"} Result of _executeFn test_step1 {\"success\":true,\"code\":200,\"data\":{\"args\":{},\"data\":\"{\\\"data\\\":{\\\"lan\\\":\\\"12345\\\"}}\",\"files\":{},\"form\":{},\"headers\":{\"Accept\":\"application/json, text/plain, */*\",\"Content-Length\":\"24\",\"Content-Type\":\"application/json\",\"Host\":\"httpbin.org\",\"Traceparent\":\"00-f9f61d4940e3a8e5be8bc80faf6e36a2-f6c0a5ce67f5b07c-01\",\"User-Agent\":\"axios/0.25.0\",\"X-Amzn-Trace-Id\":\"Root=1-63edd7e4-0b8b6ba319833492520e6b0c\"},\"json\":{\"data\":{\"lan\":\"12345\"}},\"method\":\"POST\",\"origin\":\"180.188.224.177\",\"url\":\"https://httpbin.org/anything\"},\"message\":\"OK\",\"headers\":{\"date\":\"Thu, 16 Feb 2023 07:14:44 GMT\",\"content-type\":\"application/json\",\"content-length\":\"598\",\"connection\":\"close\",\"server\":\"gunicorn/19.9.0\",\"access-control-allow-origin\":\"*\",\"access-control-allow-credentials\":\"true\"}}\n16/02/23, 12:44:44 pm [INFO] f9f61d4940e3a8e5be8bc80faf6e36a2 96e746f5cbbee1ac {\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"task_id\":\"\"} Validate Response JSON Schema Success\n```\n\n----------------------------------------\n\nTITLE: Illustrating Godspeed Project Folder Structure\nDESCRIPTION: Shows the standard directory layout for a Godspeed project, indicating the locations for documentation (`src/docs`), datasources (`src/datasources`), events (`src/events`), eventsources (`src/eventsources`), and functions (`src/functions`). This structure is essential for understanding where configuration files like `http.yaml` are located.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/swagger-specs.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\\n├── src\\n    ├── docs\\n    │    └── http-swagger.json \\n    ├── datasources\\n    │   ├── types\\n    │   |    └── axios.ts\\n    |   |\\n    │   └── api.yaml\\n    │\\n    ├── events\\n    |   |\\n    │   └── helloworld.yaml\\n    |\\n    ├── eventsources\\n    │   ├── types\\n    │   |    └── express.ts\\n    |   |\\n    │   └── http.yaml\\n    |\\n    └── functions\\n        |\\n        └── helloworld.yaml\n```\n\n----------------------------------------\n\nTITLE: Cloning the Git Repository Using Shell\nDESCRIPTION: Clone the necessary Git repository containing Kubernetes manifests and configuration files. This step initializes the process by retrieving required manifests for deployment.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/infra-and-system/Application.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ https://github.com/Mindgreppers/demo-k8s-manifests.git\n```\n\n----------------------------------------\n\nTITLE: Creating CI/CD for Master Branch Using Shell\nDESCRIPTION: Setup continuous integration and delivery pipeline for the master branch to automate builds and deployments. This ensures that changes pushed to the master branch are automatically processed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/infra-and-system/Application.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl create -f spring-master-CI.yaml\n```\n\n----------------------------------------\n\nTITLE: Serving Godspeed Project\nDESCRIPTION: Command to run a Godspeed project in development mode. Uses the serve command to start the application.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n godspeed serve\n```\n\n----------------------------------------\n\nTITLE: Setting Local PostgreSQL Connection URL as Environment Variable - Plaintext\nDESCRIPTION: This snippet presents an example of configuring the DATABASE_URL environment variable for a locally running PostgreSQL server. It highlights the use of local network parameters and is meant to be placed inside an environment file (.env) for use in downstream Prisma datasource settings.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PostgreSQL.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=\"postgresql://johndoe:password@localhost:5432/mydb?schema=public\"\n```\n\n----------------------------------------\n\nTITLE: Logging Example with Sum Operation\nDESCRIPTION: Demonstrates using com.gs.log function to log the result of a sum operation. The workflow adds two numbers, logs the result using different log levels, and returns the sum.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Summing x + y\ndescription: Here we sum two hardcoded x and y values. Feel free to try using API inputs from body or params!\ntasks:\n  - id: sum_step1\n    description: add two numbers\n    fn: com.jfs.sum\n    args:\n      x: 1\n      y: 2\n  - id: sum_step2\n    description: log the output in logs\n    fn: com.gs.log\n    args:\n      level: info # log levels: info, debug, error, warn, fatal, silent, trace\n      data: <% outputs.sum_step1 %>\n  - id: sum_step3\n    description: return the response\n    fn: com.gs.transform\n    args: <% outputs.sum_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Defining Epoch Timestamp to Formatted Date Plugin (TypeScript)\nDESCRIPTION: Creates and exports 'convertEpochToDate', a function that converts a string-based epoch timestamp to a formatted date string using the 'date-fns/format' package. The input is a string representing a timestamp. The output format is 'yyyy-MM-dd HH:mm:ss'. Requires 'date-fns' as a dependency and must be imported for use. Accessed in workflows with file prefix (e.g., 'time_epoch_convertEpochToDate').\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/script-plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport format from 'date-fns/format';\\n\\nexport function convertEpochToDate(inputTimestamp: string){\\n    const newDateTime = new Date(inputTimestamp);\\n    return format(newDateTime, 'yyyy-MM-dd HH:mm:ss');\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Express.js Custom Authentication Handler\nDESCRIPTION: A TypeScript implementation of an event source handler for Express.js that supports custom authentication. It includes JWT authentication by default but can be modified to support other authentication strategies like OAuth2. The code provides hooks for adding custom middleware both globally and per-route.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/custom-authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PlainObject, GSActor, GSCloudEvent, GSStatus, GSEventSource } from \"@godspeedsystems/core\";\nimport express from \"express\";\nimport bodyParser from 'body-parser';\nimport _ from \"lodash\";\nimport promClient from '@godspeedsystems/metrics';\n//@ts-ignore\nimport promMid from '@mindgrep/express-prometheus-middleware';\nimport passport from \"passport\";\nimport fileUpload from \"express-fileupload\"\nimport { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';\n\nexport default class EventSource extends GSEventSource {\n  async initClient(): Promise<PlainObject> {\n    const app = express();\n    const {\n      port = 3000,\n      request_body_limit = 50 * 1024 * 1024,\n      file_size_limit = 50 * 1024 * 1024,\n      jwt: jwtConfig\n    } = this.config;\n\n    // If the developer has a custom strategy, he can set Global middleware here!! \n\n    app.use(bodyParser.urlencoded({ extended: true, limit: request_body_limit }));\n    app.use(bodyParser.json({ limit: file_size_limit }));\n    app.use(\n      fileUpload({\n        useTempFiles: true,\n        //@ts-ignore\n        limits: { fileSize: file_size_limit },\n      })\n    );\n  \n    if (jwtConfig) {\n      app.use(passport.initialize());\n      passport.use(\n        new JwtStrategy(\n          {\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: jwtConfig.secretOrKey,\n            ignoreExpiration: true,\n            jsonWebTokenOptions: {\n              audience: jwtConfig.audience,\n              issuer: jwtConfig.issuer,\n            },\n          },\n          function (jwtPayload, done) {\n            return done(null, jwtPayload);\n          },\n        ),\n      );\n    };\n\n    app.listen(port);\n\n    if (process.env.OTEL_ENABLED == 'true') {\n      app.use(\n        promMid({\n          metricsPath: false,\n          collectDefaultMetrics: true,\n          requestDurationBuckets: promClient.exponentialBuckets(0.2, 3, 6),\n          requestLengthBuckets: promClient.exponentialBuckets(512, 2, 10),\n          responseLengthBuckets: promClient.exponentialBuckets(512, 2, 10),\n        })\n      );\n    }\n\n    return app;\n  }\n\n  private authnHOF(authn: boolean) {\n    return (req: express.Request, res: express.Response, next: express.NextFunction) => {\n      if (authn) {\n        return passport.authenticate('jwt', { session: false })(req, res, next)\n      } else {\n        next();\n      }\n    };\n  };\n\n  subscribeToEvent(eventRoute: string, eventConfig: PlainObject, processEvent: (event: GSCloudEvent, eventConfig: PlainObject) => Promise<GSStatus>, event?: PlainObject): Promise<void> {\n    const routeSplit = eventRoute.split('.');\n    const httpMethod: string = routeSplit[1];\n    const endpoint = routeSplit[2].replace(/{(.*?)}/g, ':$1');\n    const app: express.Express = this.client as express.Express;\n   \n    // The custom middleware can also be added here\n\n    app[httpMethod](endpoint, this.authnHOF(event.authn), async (req: express.Request, res: express.Response) => {\n      const gsEvent: GSCloudEvent = EventSource.createGSEvent(req, endpoint)\n      const status: GSStatus = await processEvent(gsEvent, { key: eventRoute, ...eventConfig });\n      res\n        .status(status.code || 200)\n        // if data is a integer, it takes it as statusCode, so explicitly converting it to string\n        .send(Number.isInteger(status.data) ? String(status.data) : status.data);\n    });\n    return Promise.resolve();\n  }\n\n  static createGSEvent(req: express.Request, endpoint: string) {\n    const reqProp = _.omit(req, [\n      '_readableState',\n      'socket',\n      'client',\n      '_parsedUrl',\n      'res',\n      'app'\n    ]);\n    const reqHeaders = _.pick(req, ['headers']);\n    let data = { ...reqProp, ...reqHeaders };\n\n    const event: GSCloudEvent = new GSCloudEvent(\n      'id',\n      endpoint,\n      new Date(),\n      'http',\n      '1.0',\n      data,\n      'REST',\n      new GSActor('user'),\n      {}\n    );\n\n    return event;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Connection String Environment Variable in Shell\nDESCRIPTION: Shell command demonstrating how to set the `MONGO_URL` environment variable using `export` in a Unix-like shell. This variable is crucial for the Mongoose datasource plugin to establish a connection with the MongoDB database instance. The user needs to replace the placeholder values with their actual MongoDB username, password, and cluster URI.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n    export MONGO_URL='mongodb+srv://<user_name>:<password>@cluster0.xyzabc.mongodb.net/?retryWrites=true&w=majority'\n```\n\n----------------------------------------\n\nTITLE: Detailed Directory Structure for Elasticgraph Configuration Files\nDESCRIPTION: Provides a sample directory structure for organizing Elasticgraph-specific configuration files (like `*.toml`, `*.txt`) under `src/datasources/eg_config/`. It shows separate subdirectories (`eg1`, `eg2`) for different datasource configurations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n.\\n├── elasticgraph1.yaml\\n├── elasticgraph2.yaml\\n├── eg1\\n│   ├── collect.toml\\n│   ├── common.toml\\n│   ├── config.toml\\n│   ├── custom.toml\\n│   ├── elasticsearch.toml\\n│   ├── joins\\n│   │   └── search.txt\\n│   └── schema\\n│       ├── aggregation.toml\\n│       ├── dependencies.toml\\n│       ├── entities\\n│       │   ├── reconciled.toml\\n│       │   └── auth_user.toml\\n│       ├── entitiesInfo.toml\\n│       ├── relationships.txt\\n│       ├── suggestions.toml\\n│       └── union.toml\\n└── eg2\\n    ├── collect.toml\\n    ├── common.toml\\n    ├── config.toml\\n    ├── custom.toml\\n    ├── elasticsearch.toml\\n    ├── joins\\n    │   └── search.txt\\n    └── schema\\n        ├── aggregation.toml\\n        ├── dependencies.toml\\n        ├── entities\\n        │   ├── reconciled.toml\\n        │   └── auth_user.toml\\n        ├── entitiesInfo.toml\\n        ├── relationships.txt\\n        ├── suggestions.toml\\n        └── union.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Datasource Base URL using Loadtime Scripting (YAML)\nDESCRIPTION: This YAML snippet defines an Axios datasource type and uses inline scripting (`<% %>`) to dynamically set the `base_url` property at loadtime by accessing a value from the Godspeed configuration (`config.api.base_url`). This allows centralizing configuration values.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: axios\nbase_url: <% config.api.base_url %>\n```\n\n----------------------------------------\n\nTITLE: Configuring CockroachDB Connection URL Format\nDESCRIPTION: The standard format for CockroachDB connection URLs, which follows PostgreSQL format. This URL needs to be defined as an environment variable in your .env file.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/CokroachDB.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncockroachDB://USER:PASSWORD@HOST:PORT/DATABASE\n```\n\n----------------------------------------\n\nTITLE: Expected Output Format for Authorization Workflow (YAML)\nDESCRIPTION: Shows the required YAML output format for a Godspeed authorization workflow. It must include a `success` boolean (indicating if the authorization check itself passed) and a `data` field. `data` can be a boolean (true for allow, false for deny) or a JSON object which will be merged with the main task's `args.data` if `success` is true.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsuccess: true/false\ndata: true/false/JSON output\n```\n\n----------------------------------------\n\nTITLE: Updating Devops Plugins using Godspeed CLI\nDESCRIPTION: Command to update installed devops plugins. Displays an interactive selection menu for choosing which plugin to update from the list of installed plugins.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed plugin update\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n    ? Please select a devops plugin to update. (Use arrow keys)\n  ❯ @godspeedsystems/plugins-express-as-http\n    @godspeedsystems/plugins-prisma-as-datastore\n```\n\n----------------------------------------\n\nTITLE: OTEL Format Logs\nDESCRIPTION: Logs formatted as per the OpenTelemetry logging specification for use in environments where observability is enabled, correlating logs with tracing for enhanced observability and debugging.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Body\":\"[START] Load definitions from /home/gurjot/data/cli-test/v2_test2/dist/definitions\",\"Timestamp\":\"2024-04-10T09:40:45.122Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"sample_app\",\"env\":\"production\",\"host.hostname\":\"ThinkPadT480s\"},\"Attributes\":{}}\n{\"Body\":\"Definitions loaded and registered to ajvInstance\",\"Timestamp\":\"2024-04-10T09:40:45.124Z000000\",\"SeverityNumber\":5,\"SeverityText\":\"DEBUG\",\"Resource\":{\"service.name\":\"sample_app\",\"env\":\"production\",\"host.hostname\":\"ThinkPadT480s\"},\"Attributes\":{}}\n{\"Body\":\"[END] Load definitions\",\"Timestamp\":\"2024-04-10T09:40:45.125Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"sample_app\",\"env\":\"production\",\"host.hostname\":\"ThinkPadT480s\"},\"Attributes\":{}}\n{\"Body\":\"[START] Load mappings from /home/gurjot/data/cli-test/v2_test2/dist/mappings\",\"Timestamp\":\"2024-04-10T09:40:45.125Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"sample_app\",\"env\":\"production\",\"host.hostname\":\"ThinkPadT480s\"},\"Attributes\":{}}\n{\"Body\":\"[END] Load mappings\",\"Timestamp\":\"2024-04-10T09:40:45.126Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"sample_app\",\"env\":\"production\",\"host.hostname\":\"ThinkPadT480s\"},\"Attributes\":{}}\n{\"Body\":\"[START] Load data sources from /home/gurjot/data/cli-test/v2_test2/dist/datasources\",\"Timestamp\":\"2024-04-10T09:40:45.126Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"sample_app\",\"env\":\"production\",\"host.hostname\":\"ThinkPadT480s\"},\"Attributes\":{}}\n. . . . . . . . .\n{\"Body\":\"JS/TS functions found in src/functions my_bank_api.auth_workflow,validations.request.standardResponse\",\"Timestamp\":\"2024-04-10T09:40:45.210Z000000\",\"SeverityNumber\":5,\"SeverityText\":\"DEBUG\",\"Resource\":{\"service.name\":\"sample_app\",\"env\":\"production\",\"host.hostname\":\"ThinkPadT480s\"},\"Attributes\":{\"section\":\"loading_functions\"}}\n. . . . . . . . .\n{\"Body\":\"Starting to parse and load GSFunction id: helloworld name: helloworld\",\"Timestamp\":\"2024-04-10T09:40:45.210Z000000\",\"SeverityNumber\":5,\"SeverityText\":\"DEBUG\",\"Resource\":{\"service.name\":\"sample_app\",\"env\":\"production\",\"host.hostname\":\"ThinkPadT480s\"},\"Attributes\":{\"workflow_name\":\"helloworld\",\"task_id\":\"helloworld\"}}\n```\n\n----------------------------------------\n\nTITLE: Logging Intermediate Results with com.gs.log in YAML\nDESCRIPTION: Illustrates how to use com.gs.log for recording intermediate inputs and outputs during workflow execution. It uses Pino logging format and allows setting log levels.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Summing x + y\ndescription: Here we sum two hardcoded x and y values. Feel free to try using API inputs from body or params!\ntasks:\n  - id: sum_step1\n    description: add two numbers\n    fn: com.gs.transform\n    args: <% inputs.body.x + inputs.body.y %>\n\n  - id: sum_step2\n    fn: com.gs.log\n    args: \n      level: info \n      data: <% outputs.sum_step1 %>\n\n  - id: sum_step3\n    fn: com.gs.return\n    args: <js% (outputs.sum_step1) %>\n```\n\n----------------------------------------\n\nTITLE: Generating a Data Source Plugin\nDESCRIPTION: Command to invoke the Yeoman generator for creating a new Godspeed plugin. When executed, it prompts for a plugin name and type.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-datasource-plugin2.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyo godspeed-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating CI/CD for Non-Master Branch Using Shell\nDESCRIPTION: Configure a CI/CD pipeline for non-master branches to handle builds and deployments differently from the master branch, which may have different logic or restrictions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/infra-and-system/Application.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl create -f spring-non-master-CI.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Plugin via Godspeed CLI\nDESCRIPTION: Command to add the Prisma datasource plugin using Godspeed CLI from the project root directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/data_sources/datasource_plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed add plugin prisma-as-datastore\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Eventsource Type\nDESCRIPTION: This YAML snippet from `src/eventsources/cron.yaml` defines the minimal configuration for a Cron eventsource. It only specifies the `type` as `cron`, indicating that the system should use the Cron eventsource implementation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntype: cron\n\n```\n\n----------------------------------------\n\nTITLE: Generating a React Web App with Godspeed UI Kit\nDESCRIPTION: Runs the Godspeed UI Kit specifically to generate a React web application. This command starts the interactive process, prompting the user for project details like name and OpenAPI specification file location.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @godspeedsystems/uikit react-web\n```\n\n----------------------------------------\n\nTITLE: Sample Output Logs with Custom Attributes - JSON\nDESCRIPTION: These JSON log entries show Pino logger outputs with custom attributes injected according to the YAML logging configuration. Fields like 'mobileNumber', 'id', and 'lan' are captured from corresponding parts of the API request, and context properties such as service name, hostname, and pid are included for observability. The log events cover various stages of the event lifecycle, supporting easy filtering and analysis.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\"Body\":\"Processing event /test/:id.http.post\",\"Timestamp\":\"2024-04-10T09:40:45.191Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"3b66e6f8ec6624f6467af1226503a39e\",\"SpanId\":\"eb6e7d89ac381e9f\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"sample_app\",\"host.hostname\":\"5252603e08be\",\"process.pid\":828},\"Attributes\":{\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"mobileNumber\":\"9878987898\",\"id\":\"12\",\"lan\":\"12345\"}}\n{\"Body\":\"event inputs {\\\"baseUrl\\\":\\\"\\\",\\\"body\\\":{\\\"data\\\":{\\\"lan\\\":\\\"12345\\\"}},\\\"fresh\\\":false,\\\"hostname\\\":\\\"localhost\\\",\\\"ip\\\":\\\"::ffff:172.22.0.1\\\",\\\"ips\\\":[],\\\"method\\\":\\\"POST\\\",\\\"originalUrl\\\":\\\"/test/12?mobileNumber=9878987898\\\",\\\"params\\\":{\\\"id\\\":\\\"12\\\"},\\\"path\\\":\\\"/test/12\\\",\\\"protocol\\\":\\\"http\\\",\\\"query\\\":{\\\"mobileNumber\\\":\\\"9878987898\\\"},\\\"route\\\":{\\\"path\\\":\\\"/test/:id\\\",\\\"stack\\\":[{\\\"name\\\":\\\"<anonymous>\\\",\\\"keys\\\":[],\\\"regexp\\\":{\\\"fast_star\\\":false,\\\"fast_slash\\\":false},\\\"method\\\":\\\"post\\\"},{\\\"name\\\":\\\"<anonymous>\\\",\\\"keys\\\":[],\\\"regexp\\\":{\\\"fast_star\\\":false,\\\"fast_slash\\\":false},\\\"method\\\":\\\"post\\\"}],\\\"methods\\\":{\\\"post\\\":true}},\\\"secure\\\":false,\\\"stale\\\":true,\\\"subdomains\\\":[],\\\"xhr\\\":false,\\\"headers\\\":{\\\"content-type\\\":\\\"application/json\\\",\\\"user-agent\\\":\\\"PostmanRuntime/7.29.2\\\",\\\"accept\\\":\\\"*/*\\\",\\\"postman-token\\\":\\\"9e57df7d-0a75-48b6-bc52-921bd5c045b7\\\",\\\"host\\\":\\\"localhost:4000\\\",\\\"accept-encoding\\\":\\\"gzip, deflate, br\\\",\\\"connection\\\":\\\"keep-alive\\\",\\\"content-length\\\":\\\"46\\\"},\\\"files\\\":[]}\",\"Timestamp\":\"2024-04-10T09:40:45.196Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"3b66e6f8ec6624f6467af1226503a39e\",\"SpanId\":\"eb6e7d89ac381e9f\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"sample_app\",\"host.hostname\":\"5252603e08be\",\"process.pid\":828},\"Attributes\":{\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"mobileNumber\":\"9878987898\",\"id\":\"12\",\"lan\":\"12345\"}}\n{\"Body\":\"event body and eventSpec exist\",\"Timestamp\":\"2024-04-10T09:40:45.197Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"3b66e6f8ec6624f6467af1226503a39e\",\"SpanId\":\"eb6e7d89ac381e9f\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"sample_app\",\"host.hostname\":\"5252603e08be\",\"process.pid\":828},\"Attributes\":{\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"mobileNumber\":\"9878987898\",\"id\":\"12\",\"lan\":\"12345\"}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Speaker and Translator Assignment in ElasticGraph using ESQL\nDESCRIPTION: Complex ESQL script demonstrating iteration, conditional logic, and entity linking to process audio content and associate speakers/translators with events. Includes both ESQL statements and embedded JavaScript functions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst fillSpeakersTranslatorsAndLinkWithEvent = [\n\t'iterate over old-contents where {$exist: event_id} as old-content. Get 25 at a time. Flush every 5 cycles. Wait for 100 millis',\n\t[\n\t\t'get event *old-content.event_id',\n\t\t'if *event is empty, display \"empty event\", *old-content.event_id',\n\t\t'if *event is empty, stop here',\n\t\t'search old-content-to-audio-channel where {content_id: *old-content._id} as cac',\n\t\t'async each *cac.hits.hits as old-content-to-audio-channel'\n\t\t[\n\t\t\t'get old-audio-channel *old-content-to-audio-channel.audiochannel_id as old-audio-channel',\n\t\t\t'search first person where {_id: *old-audio-channel.speaker_id} as person.',\n\t\t\t'roleType is speaker if *old-audio-channel.translation_type is empty. Else is translator',\n\t\t\t'roleFeatures are {person._id: *old-audio-channel.speaker_id, primaryLanguages._id: *old-audio-channel.language_id}',\n\t\t\t(ctx) => {\n\t\t\t\tif (ctx.get('roleType') === 'translator') {\n\t\t\t\tconst translationType = ctx.get('old-audio-channel')._source.translation_type\n\t\t\t\tctx.get('roleFeatures').translationType = translationType\n\t\t\t\t}\n\t\t\t\treturn ctx\n\t\t\t},\n\t\t\t'search first *roleType where *roleFeatures as speakerOrTranslator. Create if not exists.',\n\t\t\t'if *speakerOrTranslator is empty, display \"empty speaker\", *roleFeatures, *roleType',\n\t\t\t'if *speakerOrTranslator is empty, stop here',\n\t\t\t(ctx) => {\n\t\t\t\tconst speaker = ctx.get('speakerOrTranslator')\n\t\t\t\tconst speakerBody = speaker._source || speaker.fields\n\t\t\t\tconst pmName = _.get(_.first(speakerBody.primaryLanguages), 'fields.english.name')\n\t\t\t\tif (_.isObject(pmName)) {\n\t\t\t\t\tdebug('throw stopHere error to break the loop', JSON.stringify(speaker))\n\t\t\t\t\tthrow new Error('stopHere')\n\t\t\t\t}\n\t\t\t},\n\t\t\t'link *speakerOrTranslator with *event as events',\n\t\t],\n\t],\n\t(ctx) => debug('Done ' + n++ + ' iterations')\n];\n//Now run the script\neg.dsl.execute(fillSpeakersTranslatorsAndLinkWithEvent);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Server URL for Swagger Specs - YAML\nDESCRIPTION: This YAML configuration snippet shows how to specify a custom server URL that will appear in the 'servers' list of the autogenerated OpenAPI/Swagger documentation. This requires updating the Godspeed static configuration file as referenced. The key 'server_url' should be set to the desired API gateway URL (including scheme, host, port, and base path), so that generated specs reflect the real API endpoint for consumers.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/swagger-specs.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver_url: https://api.example.com:8443/v1/api\n```\n\n----------------------------------------\n\nTITLE: Generate CRUD API Command\nDESCRIPTION: Example of using the gen-crud-api command to generate CRUD APIs from Prisma schema\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed gen-crud-api\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n\n    > cli@1.0.0 gen-crud-api\n    > npx @godspeedsystems/api-generator\n\n    Select datasource / schema to generate CRUD APIs\n    (x) mongo.prisma\n    ( ) For all\n    ( ) Cancel\n```\n\n----------------------------------------\n\nTITLE: Generic Log Field Masking\nDESCRIPTION: YAML configuration demonstrating how to mask specific fields at all nesting levels using the generic convention\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nredact: ['**.mobileNumber']\n```\n\n----------------------------------------\n\nTITLE: Sample OTEL Formatted Logs\nDESCRIPTION: Example output showing the format of logs generated by the custom logging configuration. These logs follow the OpenTelemetry logging data model with fields like Body, Timestamp, Severity, and Attributes.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\"Body\":\"Hello [{\\\"key1\\\":\\\"v1\\\",\\\"key2\\\":\\\"v2\\\"},\\\"v1\\\"]\",\"Timestamp\":\"1676011973016000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"afde0bf5bb3533d932c1c04c30d91172\",\"SpanId\":\"ad477b2cf81ca711\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9ce06d358ba7\",\"process.pid\":67228},\"Attributes\":{\"request\":{\"status\":\"Hello\"},\"task_id\":\"if\",\"workflow_name\":\"if_else\"}}\n. . . . . . . . . . .\n{\"Body\":\"World {\\\"key1\\\":\\\"v1\\\",\\\"key2\\\":\\\"v2\\\"}\",\"Timestamp\":\"1676011973019000000\",\"SeverityNumber\":17,\"SeverityText\":\"ERROR\",\"TraceId\":\"afde0bf5bb3533d932c1c04c30d91172\",\"SpanId\":\"ad477b2cf81ca711\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9ce06d358ba7\",\"process.pid\":67228},\"Attributes\":{\"customer_name\":\"Hell!\",\"task_id\":\"if\",\"workflow_name\":\"if_else\"}}\n```\n\n----------------------------------------\n\nTITLE: Installing Express Plugin via CLI\nDESCRIPTION: CLI command interface for adding the Express plugin to a Godspeed project, showing the interactive plugin selection process.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n> godspeed plugin add\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo Application with Git Repository Using Shell\nDESCRIPTION: Create and configure an ArgoCD application to synchronize with a specified Git repository and directory path. The synchronization policy is set to automatic for continuous deployment.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/infra-and-system/Application.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ argocd app create spring-app --repo https://github.com/Mindgreppers/demo-k8s-manifests.git --path spring-app --dest-namespace demo --dest-server https://kubernetes.default.svc --directory-recurse --sync-policy auto\n```\n\n----------------------------------------\n\nTITLE: Adding Mem-Cache Plugin via Godspeed CLI\nDESCRIPTION: CLI interaction showing how to add the mem-cache plugin to a Godspeed project using the Godspeed CLI tool. The command 'godspeed plugin add' displays an interactive menu to select the desired plugin.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Memcached Datasource.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmacbookpro@MacbookPros-MBP gs-test-project % godspeed plugin add   \n\n\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n\n\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌────┬───────────────────────────────────┬─────────────────────────────────────────────────────────────────┐\n│    │ Name                              │ Description                                                     │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ kafka-as-datasource-as-eventsource│ kafka as datasource-as-eventsource plugin for Godspeed Framework│\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ cron-as-eventsource               │ Cron as eventsource plugin for Godspeed Framework               │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│ ❯◯ │ mem-cache-as-datasource           │ mem-cache as datasource plugin for Godspeed Framework           │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ elasticgraph-as-datasource        │ elasticgraph as datasource plugin for Godspeed Framework        │\n├────┼───────────────────────────────────┼─────────────────────────────────────────────────────────────────┤\n│  ◯ │ axios-as-datasource               │ Axios as datasource plugin for Godspeed Framework               │\n└────┴───────────────────────────────────┴─────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring CockroachDB Datasource in Prisma Schema\nDESCRIPTION: Basic configuration block for the CockroachDB datasource in a Prisma schema file. It specifies CockroachDB as the provider and references the DATABASE_URL environment variable.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/CokroachDB.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"cockroachDB\"\n  url      = env(\"DATABASE_URL\") \n}\n```\n\n----------------------------------------\n\nTITLE: Denormalized Event Document in JSON\nDESCRIPTION: This JSON snippet shows a denormalized storage representation within a Godspeed event document, embedding related speakers' information directly inside the event entity. Dependencies include enabling denormalization configurations in schema settings and utilizing NoSQL databases like ElasticSearch or MongoDB for efficient querying.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/model-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"_index\": \"events\",\n  \"_type\": \"event\",\n  \"_id\": \"294464\",\n  \"_version\": 4,\n  \"_source\": {\n    \"speakers\": [\n      {\n        \"_id\": \"c6c35e3b21815a4209054505ac5e1680a954efdf\",\n        \"own\": true,\n        \"data\": {\n          \"person\": {\n            \"_id\": \"1\",\n            \"_version\": 1,\n            \"data\": {\n              \"english\": {\n                \"name\": \"His Holiness the 14th Dalai Lama\"\n              },\n              \"tibetan\": {\n\t\t\t\t  \"name\" : \"ང་ས་སྐུ་ཕྲེང་བཅུ་བཞི་\"\n\t\t\t  }\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Godspeed Workflow to Consume Kafka Events (YAML)\nDESCRIPTION: This YAML snippet defines a Godspeed workflow named `kafka_consumer`. It's triggered by the corresponding Kafka event source. The workflow consists of a single task `set_consume` which uses the built-in `com.gs.return` function to return the content of the consumed Kafka message, accessed via the `inputs.body` expression.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/kafka-events.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n   # function for consume data\nid: kafka_consumer\nsummary: consumer\ntasks:\n    - id: set_consume\n      fn: com.gs.return\n      args: <% inputs.body %>\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation - Shell\nDESCRIPTION: This shell command runs the official Docker hello-world image to confirm successful Docker installation and functionality. It requires Docker to be fully installed and the user to have the appropriate group membership. Outputs a message from the container if setup is correct.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Setting Default Scripting Language Globally (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the default inline scripting language globally within the `config/default.yaml` file. By setting the `defaults.lang` key to `js` (or `coffee`), all inline scripts using `<% %>` will be evaluated using that language unless explicitly overridden.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  lang: js #coffee\n```\n\n----------------------------------------\n\nTITLE: Sample OTEL Format Logs with Event-Level Custom Attributes\nDESCRIPTION: Example of OTEL format logs showing how event-level custom attributes are included in the structured log output. These logs include the custom attributes defined at the event level such as msgparameter and identifier.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{ Body: \"return value [] 200 %o\"\n    Timestamp: \"1688565778237000000\"\n    SeverityNumber: 9\n    SeverityText: \"INFO\"\n    TraceId: \"3fba9b9bd5d10d00b1b730b74c8eba51\"\n    SpanId: \"985e8a8d6a18568b\"\n    TraceFlags: \"01\"\n    Resource: {\n      \"service.name\": \"unknown_service:node\",\n      \"host.hostname\": \"6295f63d9181\",\n      \"process.pid\": 13956\n    }\n    Attributes: {\n      \"event\": \"/postgres/user/search.http.post\",\n      \"workflow_name\": \"com.biz.postgres.user.search\",\n      \"file_name\": \"com.biz.postgres.user.search\",\n      \"msgparameter\": {\n        \"fruit\": \"apple\"\n      },\n      \"identifier\": 1,\n      \"task_id\": \"\"\n    }}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Docusaurus Website\nDESCRIPTION: Command to install all required dependencies for the website using Yarn package manager.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Using Default Cache in Godspeed Configuration\nDESCRIPTION: Defines how to set a default cache datasource in the static configuration file under the 'caching' key. This establishes a default caching method (Redis or Mem-cache) for the Godspeed application, impacting how tasks handle cached data.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/caching.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlog_level: debug\ndefaults:\n  lang: coffee\nserver_url: https://api.example.com:8443/v1/api\ncaching: <redis or mem-cache>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Godspeed Project\nDESCRIPTION: Uses the `godspeed create` command followed by a project name (`my-service`) to scaffold a new Godspeed microservice project. This command sets up the basic directory structure and includes default example files.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed create my-service\n```\n\n----------------------------------------\n\nTITLE: Read-Time Join Configuration for Views - Custom DSL\nDESCRIPTION: This snippet illustrates how to specify read-time join rules using a custom configuration DSL within a text file. Settings determine which subfields and relations are expanded when a join is requested (e.g., for different views like read or search). Intended for placement in configFolder/joins/{name}.txt, it allows complex nested relationship traversals. Prerequisite: ElasticGraph or similar engine that interprets this DSL. Input: configuration file. Output: dynamically joined data in API responses.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n[event]\nsessions{title, description}\nspeakers.person{name}\nspeakers.primaryLanguages{name}\n```\n\n----------------------------------------\n\nTITLE: Defining Godspeed Project Scaffolding Structure (Text)\nDESCRIPTION: Illustrates the standard directory layout for a Godspeed project. It shows the separation of concerns with dedicated folders for source code (`src`), tests (`test`), UI (`ui`), and configuration (`config`). The `config` directory is further broken down to manage settings for source code, imported modules, middleware, exported functions, tests, and microservice/serverless specific details.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/scaffolding/intro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n./                                              // Project root directory\n  src/                                          // It includes your authored functions which you wish to expose via the microservice interfaces as API. The FQN of any exported from any function, is the folder path to that function relative to /src\n  test/                                         // Test cases for the project\n  ui/                                           // Any UI related code including static files\n      static //html, images, css\n      src //React, react-native, Ionic,\n  config/                                       // All the configuration for this project, including that of imported modules and also own exported functions.\n    src/                                        // Any config required by the code in src folder\n    imported_modules\n      auth/                                     // Auth related config\n      telemetry/                                // Telemetry related config\n      data/                                     // Data related config, including model, databases used, batch settings, internationalization/localization etc.\n    middleware/                                 // Inserting pre and post function hooks to functions ;\n      common/                                   // Applicable to all functions, be it imported functions or functions defined in src\n      function_overrides/                       // Middleware related config\n    exported_functions/                         // Configuration for function/modules to be exported over REST, message bus or socket (whether from /src or imported modules)\n    test/                                       // Any config required by the tests\n    microservice/                               // When exposed as microservice this is required. It contains any microservice level settings. For example, the microservice name, domain name, open API channels (like message bus, REST).\n      domainName: 'lending'\n      microserviceName: 'credit_card'\n      enabled_channels: ['REST', 'messageBus', 'socket']  //By default all exported functions will be exported via all enabled channels\n    serverless/                                 // When exposed as serverless function this is required. It contains any FAAS level settings.\n      domainName: 'lending'\n      FAASName: 'some_ETL'\n      trigger: 'messageBus' | 'gitOps' ...      //For full list of supported triggers, see the ArgoEvents for supported sources\n  package.json                                  // All package info including the imported modules and dependencies\n  ReadMe.md\n```\n\n----------------------------------------\n\nTITLE: Specifying Cache Plugin in Godspeed\nDESCRIPTION: This command shows how to specify and add a desired cache plugin directly to your project, facilitating immediate use of caching functionalities.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/caching.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed plugin add <plugin-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Log Format in Bash\nDESCRIPTION: Command to set the NODE_ENV environment variable to 'dev' to enable the more readable development log format. When set to 'dev', logs are transformed from OTEL format to a more developer-friendly format.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_ENV=dev\n```\n\n----------------------------------------\n\nTITLE: Setting OTEL Exporter Endpoint\nDESCRIPTION: Command to configure the OpenTelemetry collector endpoint using environment variables\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://172.17.0.1:4317\n```\n\n----------------------------------------\n\nTITLE: Pushing Elasticgraph Configurations using godspeed eg-push\nDESCRIPTION: Shows the `godspeed eg-push` command used to apply Elasticgraph configurations. The command iterates through configurations in `src/datasources/eg_config/` and uses a Node.js script (`reIndexer.js`) to process them. Example output is included. Requires Godspeed CLI.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed eg-push\\n                      _                                   _\\n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\\n  |___/                        |_|\\n\\n> eg_test@1.0.0 eg-push\\n> for f in src/datasources/eg_config/*; do echo ${f}; node ../gs_service/elasticgraph/lib/mappingGenerator/reIndexer.js ${f} all; done\\n\\nsrc/datasources/eg_config/eg1\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Fields in ElasticGraph Schema (YAML)\nDESCRIPTION: This snippet demonstrates how to define entity field types and settings in ElasticGraph using a TOML/YAML-like format. Developers specify attributes such as type (String, Boolean, Number, Object, Date), multilingual support, autosuggestion, encryption, and sortability per field in a schema file, typically located at configFolder/schema/entities/{entityType}.toml. This configuration drives entity mapping and API behavior, with field options like encryption automatically activating cryptographic protections.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n[title]\ntype = 'String'\nmultiLingual = true\nautoSuggestion = true\nencrypted = true\nsort = true # Mark this field to be index as sortable or searchable\n[description]\ntype = 'String' # String | Boolean | Number(stored as Long) | Object | Date\nmultiLingual = true\n[startingDate]\ntype = 'date'\nmultiLingual = false\n\n```\n\n----------------------------------------\n\nTITLE: Masked Logs Example\nDESCRIPTION: Sample JSON output showing how sensitive information is masked in the logs based on redaction configuration\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"Body\":\"args after evaluation: step1 {\\\"name\\\":\\\"ABC\\\",\\\"gender\\\":\\\"M\\\",\\\"age\\\":25,\\\"mobileNumber\\\":\\\"*****\\\"}\",\"Timestamp\":\"1684221387896000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"4030f41a75cb\",\"process.pid\":3593},\"Attributes\":{\"event\":\"/helloworld.http.get\",\"workflow_name\":\"helloworld\",\"task_id\":\"step1\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Port\nDESCRIPTION: The YAML snippet configures the HTTP server in the application to use port 3000 by default. Modifications can be made to change the default port.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/advance-guide.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: express\nport: 3000\n```\n\n----------------------------------------\n\nTITLE: SendWhatsAppText Response Parameter (JSON)\nDESCRIPTION: Defines the JSON response parameter for the sendWhatsAppText request. It returns an integer representing the HTTP status code of the operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n   Status_Code: INTEGER\n```\n\n----------------------------------------\n\nTITLE: Executing a Complex ESQL Script for Speaker and Translator Management\nDESCRIPTION: This script demonstrates how to use ESQL to iterate over content, retrieve related events, and link speakers and translators with events. It showcases ESQL's ability to handle complex operations including conditionals, async iteration, and embedding JavaScript functions within the script.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst fillSpeakersTranslatorsAndLinkWithEvent = [\n\t'iterate over old-contents where {$exist: event_id} as old-content. Get 25 at a time. Flush every 5 cycles. Wait for 100 millis',\n\t[\n\t\t'get event *old-content.event_id',\n\t\t'if *event is empty, display \"empty event\", *old-content.event_id',\n\t\t'if *event is empty, stop here',\n\t\t'search old-content-to-audio-channel where {content_id: *old-content._id} as cac',\n\t\t'async each *cac.hits.hits as old-content-to-audio-channel'\n\t\t[\n\t\t\t'get old-audio-channel *old-content-to-audio-channel.audiochannel_id as old-audio-channel', //No need to mention _source or fields. Both places, including top level object will be checked for existence of audiochannelId field\n\t\t\t'search first person where {_id: *old-audio-channel.speaker_id} as person.', //Creates person in index if not found there. Also sets person entity viz id+type as key in ctx.data, query as key with value being result in ctx.data\n\t\t\t//Handle event.speakers/translators. This guy is either a speaker or a translator. Set the relevent linking\n\t\t\t//Initializer\n\t\t\t'roleType is speaker if *old-audio-channel.translation_type is empty. Else is translator',\n\t\t\t'roleFeatures are {person._id: *old-audio-channel.speaker_id, primaryLanguages._id: *old-audio-channel.language_id}',\n\t\t\t//Can include pure JS functions within the script also\n\t\t\t(ctx) => {\n\t\t\t\t//TODO fix this 'roleFeatures.translationType is *old-audio-channel.translation_type if *roleType is translator.',\n\t\t\t\tif (ctx.get('roleType') === 'translator') {\n\t\t\t\tconst translationType = ctx.get('old-audio-channel')._source.translation_type\n\t\t\t\tctx.get('roleFeatures').translationType = translationType\n\t\t\t\t}\n\t\t\t\treturn ctx\n\t\t\t},\n\t\t\t'search first *roleType where *roleFeatures as speakerOrTranslator. Create if not exists.',\n\t\t\t'if *speakerOrTranslator is empty, display \"empty speaker\", *roleFeatures, *roleType',\n\t\t\t'if *speakerOrTranslator is empty, stop here',\n\t\t\t(ctx) => {\n\t\t\t\tconst speaker = ctx.get('speakerOrTranslator')\n\t\t\t\tconst speakerBody = speaker._source || speaker.fields\n\t\t\t\tconst pmName = _.get(_.first(speakerBody.primaryLanguages), 'fields.english.name')\n\t\t\t\tif (_.isObject(pmName)) {\n\t\t\t\t\tdebug('throw stopHere error to break the loop', JSON.stringify(speaker))\n\t\t\t\t\tthrow new Error('stopHere')\n\t\t\t\t}\n\t\t\t},\n\t\t\t//'display *roleType, *speakerOrTranslator._id, *roleFeatures',\n\t\t\t'link *speakerOrTranslator with *event as events',\n\t\t],\n\t],\n\t(ctx) => debug('Done ' + n++ + ' iterations')\n];\n//Now run the script\neg.dsl.execute(fillSpeakersTranslatorsAndLinkWithEvent);\n```\n\n----------------------------------------\n\nTITLE: React Development Server Successful Startup Output\nDESCRIPTION: Shows the console output when the React development server starts successfully after running `npm start`. It indicates that the compilation was successful and provides the local and network URLs where the application can be accessed (usually `http://localhost:3000`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nCompiled successfully!\n\nYou can now view gskit-react in the browser.\n\n  Local:            http://localhost:3000\n  On Your Network:  http://192.168.0.188:3000\n\nNote that the development build is not optimized.\nTo create a production build, use npm run build.\n\nwebpack compiled successfully\n```\n\n----------------------------------------\n\nTITLE: Preparing Prisma Client\nDESCRIPTION: Command to generate the Prisma client and sync the database with the Prisma schema. This is necessary for database operations in the Godspeed project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Setting OTEL Service Name\nDESCRIPTION: Command to set the service name for OpenTelemetry observability\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_SERVICE_NAME=sample_proj1\n```\n\n----------------------------------------\n\nTITLE: API Conventions (Glossary)\nDESCRIPTION: Defines general conventions used throughout the Notification API. Specifies that 'Status' refers to the HTTP status code, all responses are in JSON format, and request parameters are mandatory unless marked optional.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n      Status - HTTP status code of response.\n\n      All response is in JSON format.\n\n      All request parameters are mandatory unless explicitly marked as [optional]\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Godspeed Project from Example\nDESCRIPTION: Command to create a new Godspeed project named 'blog-app' using the 'mongo-as-prisma' example. This sets up a project with MongoDB and Prisma integration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed create blog-app --from-example mongo-as-prisma # blog-app is the name of the app\n```\n\n----------------------------------------\n\nTITLE: Denormalized Event Document Example in ElasticSearch - JSON\nDESCRIPTION: This snippet presents a sample ElasticGraph event document as stored in an ElasticSearch index. The document illustrates the storage format for a denormalized speakers relationship, showing how speaker details (including multilingual names) are embedded within the event. No explicit dependencies required; this is a data structure example. Expected input/output: standard ElasticSearch _source JSON objects. Useful for designing or analyzing denormalized document models.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_index\": \"events\",\n  \"_type\": \"event\",\n  \"_id\": \"294464\",\n  \"_version\": 4,\n  \"found\": true,\n  \"_source\": {\n    \"speakers\": [\n      {\n        \"_id\": \"c6c35e3b21815a4209054505ac5e1680a954efdf\",\n        \"own\": true,\n        \"fields\": {\n          \"person\": {\n            \"_id\": \"1\",\n            \"_version\": 1,\n            \"fields\": {\n              \"english\": {\n                \"name\": \"His Holiness the 14th Dalai Lama\"\n              },\n              \"tibetan\": {\n\t\t\t\t  \"name\" : \"ང་ས་སྐུ་ཕྲེང་བཅུ་བཞི་\"\n\t\t\t  }\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Axios DataSource Retry Policy Configuration in Godspeed (YAML)\nDESCRIPTION: This YAML snippet configures retry logic for the Axios datasource at the global datasource level. It declares retry conditions on HTTP statuses and message content, setting maximum attempts, retry strategy (constant, exponential, random), and retry intervals per ISO Temporal Duration standard. Used in the datasource yaml (e.g., src/datasources/api.yaml), it enables robust error recovery on network or server faults. Requires the Godspeed framework and proper plugin setup.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Axios Datasource.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: axios\nbase_url: http://localhost:4000\nretry:\n    when: #the condition\n      status: [500, 501, 502] # an array or single value of codes\n      message: my custom expected message for retry\n    max_attempts: 5\n    type: constant ##[constant,exponential,random]\n    interval: PT15s\n```\n\n----------------------------------------\n\nTITLE: Adding Before/After Custom Logs Example to Workflow Task - YAML\nDESCRIPTION: A YAML workflow task snippet illustrating logging of structured custom log entries both before and after a task's execution. Defines log messages, levels, parameters, and log attributes drawing on workflow inputs and outputs. Logs are emitted per OTEL Logging Data Model. Inputs: structured message, params, attributes, log levels; outputs: logs with contextual metadata. Dependency: compatible log ingestion/processing stack.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/custom-metrics-logs-traces.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n    - id: httpbin_step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      name: http bin step\n      description: Hit http bin with some dummy data. It will send back same as response\n      fn: datasource.api.post./anything\n      logs:\n        before:\n          level: error\n          message: 'Hello'\n          params: \n            - key1: v1\n              key2: v2\n            - v1\n          attributes: \n            request: <%inputs.query%>\n        after:\n          level: error\n          message: 'World'\n          params: \n            key1: v1\n            key2: v2\n          attributes: \n            customer_name: <% outputs.httpbin_step1.data.json.customer_name %> \n      args:\n        params: <% inputs.query %>\n        data: <% inputs.body %>\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Commands in Godspeed Dev Container\nDESCRIPTION: The prisma command allows running any Prisma CLI command within the dev container. This is particularly useful for database migration and introspection tasks.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed prisma <prisma command with args>\n```\n\n----------------------------------------\n\nTITLE: AWS Datasource Configuration with Mappings\nDESCRIPTION: Configuration for AWS services using dynamic values from mappings.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/mappings.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntype: aws\ndefault_client_config:\n  region: <% mappings.aws_region %>\nservices:\n  s3:\n    type: s3\n    config:\n      bucket: <% mappings.aws_s3_bucket %>\n  dynamodb:\n    type: dynamodb\n    config:\n      tableName: <% mappings.aws_table_name %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Denormalized Joins for Graph Queries (YAML)\nDESCRIPTION: This YAML snippet defines join and denormalization rules for entities in ElasticGraph, typically found in joins/index.txt. It specifies which related entity fields (e.g., sessions, speakers.person) should be copied into the main entity (event) for fast querying and aggregation. Dependencies include proper config referencing and that entities/fields exist. The configuration enables complex graph queries to be performed efficiently with a single database hit, leveraging denormalized storage.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n[event]\nsessions{title, description}\nspeakers.person{name}\n\n```\n\n----------------------------------------\n\nTITLE: Log Field Masking Configuration\nDESCRIPTION: YAML configuration for specifying which fields should be masked in logs for security purposes\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nredact: ['a.b.c', 'a.b.*', 'req.headers']\n```\n\n----------------------------------------\n\nTITLE: Example MySQL Connection URL (Local)\nDESCRIPTION: Shows an example connection URL for connecting to a locally running MySQL server. It uses typical local credentials and the default MySQL port.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MySQL.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"mysql://root:password@localhost:3306/yourdb\"\n```\n\n----------------------------------------\n\nTITLE: SendSMS API Endpoint Definition (HTTP)\nDESCRIPTION: Defines the HTTP request details for sending a single SMS message. It specifies the required Content-Type, the HTTP method (POST), and the API endpoint URL.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_9\n\nLANGUAGE: http\nCODE:\n```\n   Content Type: application/json ; charset= utf- 8\n   Method: POST\n   URL: URL: /api/notification/v1/publish/sendSMS\n```\n\n----------------------------------------\n\nTITLE: Adding Docker apt Repository - Shell\nDESCRIPTION: This shell snippet registers the Docker apt repository by echoing a properly formatted line to a sources list file. It dynamically determines system architecture and distribution codename, referencing the previously imported GPG key for verification. It's crucial for enabling subsequent Docker installation via package manager.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \\\\\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \\\\\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Defining GSError Interface in TypeScript\nDESCRIPTION: GSError interface defines the structure of errors in the Godspeed SDK. It includes an error code, message, stack trace, and nested errors if applicable.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions_old.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    code: //An error code extending the standards\n    message: String\n    stack: [String]//Stack trace\n    errors: [GSError]\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Examples (Text)\nDESCRIPTION: This snippet gives concrete examples of how to define entities and their relationships in ElasticGraph using the relationships.txt format. By specifying lines such as 'speakers <> events' and '[event] <> [speaker]', developers can easily describe complex connections. This format helps ElasticGraph establish entity links and supports graph operations in queries and analytics.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nspeakers <> events\n[event] <> [speaker]\nsessions <> event\nevent <> [session]\n\n```\n\n----------------------------------------\n\nTITLE: Start Godspeed Server\nDESCRIPTION: Command to start the server for the newly created Godspeed project. Ensure that all dependencies are installed and that the current directory is set to the project’s root folder.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed serve\n```\n\n----------------------------------------\n\nTITLE: Running Godspeed Project in Development Mode\nDESCRIPTION: The dev command launches the project in development mode, allowing real-time testing and debugging of the microservice.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed serve\n```\n\n----------------------------------------\n\nTITLE: Plugin Management Help\nDESCRIPTION: Help information for the plugin command showing available subcommands\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed help plugin\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n    Usage: Godspeed CLI plugin [options] [command]\n\n    manage(add, remove, update) eventsource and datasource plugins for godspeed.\n\n    Options:\n    -h, --help      display help for command\n\n    Commands:\n    add             Add an eventsource/datasource plugin.\n    remove          Remove an eventsource/datasource plugin.\n    update          Update an eventsource/datasource plugin.\n    help [command]  display help for command\n```\n\n----------------------------------------\n\nTITLE: Implementing SOAP Event Workflow\nDESCRIPTION: Workflow implementation for handling SOAP requests with method and data configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Returning sum\nid: soap_sum\ntasks:\n    - id: step1 \n      description: Return sum\n      fn: com.gs.soap\n      args:\n        datasource: soap\n        config:\n          method: Subtract\n        data: \n          intA: 1\n          intB: 2\n```\n\n----------------------------------------\n\nTITLE: Querying with SQL and Native Queries - Godspeed API - JavaScript\nDESCRIPTION: Demonstrates executing generic and vendor-specific find/findOrCreate operations using the Godspeed API. The snippet includes examples for querying PostgreSQL via raw SQL and MongoDB using native queries. Dependencies: Godspeed framework configured for necessary database sources. Parameters include source, _sql_query (for SQL), _native_query (for MongoDB), and _type for entity reference. Output is the result of the query using the specified backend. Only one query clause (_sql_query or _native_query) should be provided per call.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/CRUD API.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  //SQL query to Postgres\n  godspeed.find({\n    _sql_query: “select * from….”,\n    source: “postgres” //Can be any configured database which supports SQL\n  })\n\n  //Mongodb query\n  godspeed.findOrCreate({\n    _type: “article”, //Godspeed uses the terminology _type for entity type. It translates to collection/index/table names automatically in its pluralized form.\n    _native_query : { tags: [\"technology\", \"low-code\"] },\n    source: “mongodb”\n  })\n\n```\n\n----------------------------------------\n\nTITLE: Generating Postman Test Suite for Godspeed API\nDESCRIPTION: The gen-test-suite command generates a Postman collection for API testing based on the OpenAPI documentation. The test suite is saved as JSON in the tests directory and can be imported into Postman.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n godspeed gen-test-suite\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|                          \n\n> proj_upd@1.0.0 gen-test-suite\n> npm run gen-api-docs && mkdir -p tests && openapi2postmanv2 -s docs/api-doc.yaml -o tests/test-suite.json -p -O folderStrategy=Tags,includeAuthInfoInExample=false\n\n\n> proj_upd@1.0.0 gen-api-docs\n> node ../gs_service/dist/api-specs/api-spec.js | pino-pretty\n\n[1657529443249] INFO (GS-logger/8145 on 4c20ee3c4c38): Loading events from /workspace/development/app/src/events\n[1657529443273] DEBUG (GS-logger/8145 on 4c20ee3c4c38): parsing files: /workspace/development/app/src/events/call_another_workflow.yaml,/workspace/development/app/src/events/create_user_then_show_all.yaml,/workspace/development/app/src/events/cross_db_join.yaml,/workspace/development/app/src/events/document.yaml,/workspace/development/app/src/events/helloworld.yaml,/workspace/development/app/src/events/httpbin_anything_coffee.yaml,/workspace/development/app/src/events/httpbin_anything.yaml,/workspace/development/app/src/events/run_tasks_in_parallel.yaml,/workspace/development/app/src/events/sum.yaml,/workspace/development/app/src/events/switch_case.yaml\n[1657529443374] INFO (GS-logger/8145 on 4c20ee3c4c38): /workspace/development/app/docs/api-doc.yaml file is saved!\nInput file:  /workspace/development/app/docs/api-doc.yaml\nWriting to file:  true /workspace/development/app/tests/test-suite.json { result: true, output: [ { type: 'collection', data: [Object] } ] }\nConversion successful, collection written to file\n```\n\n----------------------------------------\n\nTITLE: SendBulkEmail Response Parameter (JSON)\nDESCRIPTION: Defines the JSON response parameter for the sendBulkEmail request. It returns an integer representing the HTTP status code of the operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n   Status_Code: INTEGER\n```\n\n----------------------------------------\n\nTITLE: Example MySQL Connection URL (AWS RDS)\nDESCRIPTION: Provides an example connection URL for a MySQL database hosted on AWS RDS. It demonstrates the structure with specific user, password, host, port, and database details.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MySQL.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"mysql://johndoe:password@mysql–instance1.123456789012.us-east-1.rds.amazonaws.com:3306/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Module Configuration in YAML - YAML\nDESCRIPTION: Demonstrates a straightforward approach for expressing small project module configurations in a single YAML file. Dependencies: YAML parser (compatible with Godspeed config loader). The configuration consists of a nested structure for 'user', including nested 'address', 'city', and 'locality' fields. Used for scenarios with simple, flat configuration needs. Input is the YAML file, output is a corresponding in-memory configuration object.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/scaffolding/config-loading.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  user\n    name: 'Ayush'\n      address:\n        city: 'Dharamsala'\n        locality:\n          pincode: 176052\n          landmark: 'Hill ventures adventure park'\n\n```\n\n----------------------------------------\n\nTITLE: Defining GSReturn Interface in TypeScript\nDESCRIPTION: GSReturn interface defines the structure of the return value from a GSInstruction execution. It includes the response, error (if any), and events that occurred during execution.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions_old.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    res: GSResponse //On successful execution\n    error: GSError //On Error\n    events: [GSEvent] //Any events that happened when the instruction was running, in order of occurence. Usefor for Business Process Monitoring.\n```\n\n----------------------------------------\n\nTITLE: OTEL Log Format Example in JSON\nDESCRIPTION: Example of the default OTEL (OpenTelemetry) log format used when deploying Godspeed services. This format follows the OpenTelemetry logging specification with fields like Body, Timestamp, SeverityNumber, SeverityText, Resource, and Attributes.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"Body\":\"adding body schema for /upload_doc.http.post\",\"Timestamp\":\"1676531763727000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9537a882ae58\",\"process.pid\":61741},\"Attributes\":{}}\n{\"Body\":\"adding body schema for /upload_multiple_docs.http.post\",\"Timestamp\":\"1676531763727000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9537a882ae58\",\"process.pid\":61741},\"Attributes\":{}}\n{\"Body\":\"adding body schema for /upload_s3.http.post\",\"Timestamp\":\"1676531763727000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9537a882ae58\",\"process.pid\":61741},\"Attributes\":{}}\n{\"Body\":\"registering http handler /another_workflow post\",\"Timestamp\":\"1676531763727000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9537a882ae58\",\"process.pid\":61741},\"Attributes\":{}}\n{\"Body\":\"registering http handler /create/:entity_type post\",\"Timestamp\":\"1676531763728000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9537a882ae58\",\"process.pid\":61741},\"Attributes\":{}}\n. . . . . . . . . . . \n{\"Body\":\"args.retry {\\\"max_attempts\\\":3,\\\"type\\\":\\\"constant\\\",\\\"interval\\\":5000}\",\"Timestamp\":\"1676531764656000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"a58ef2d7ff7725c39f1e058bf22fe724\",\"SpanId\":\"751bc314bb6286b4\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9537a882ae58\",\"process.pid\":61741},\"Attributes\":{\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"task_id\":\"test_step1\"}}\n{\"Body\":\"Result of _executeFn test_step1 {\\\"success\\\":true,\\\"code\\\":200,\\\"data\\\":{\\\"args\\\":{},\\\"data\\\":\\\"{\\\\\\\"data\\\\\\\":{\\\\\\\"lan\\\\\\\":\\\\\\\"12345\\\\\\\"}}\\\",\\\"files\\\":{},\\\"form\\\":{},\\\"headers\\\":{\\\"Accept\\\":\\\"application/json, text/plain, */*\\\",\\\"Content-Length\\\":\\\"24\\\",\\\"Content-Type\\\":\\\"application/json\\\",\\\"Host\\\":\\\"httpbin.org\\\",\\\"Traceparent\\\":\\\"00-a58ef2d7ff7725c39f1e058bf22fe724-2f13e28430d61bdb-01\\\",\\\"User-Agent\\\":\\\"axios/0.25.0\\\",\\\"X-Amzn-Trace-Id\\\":\\\"Root=1-63edd835-22cff8e60555fa522c8544cf\\\"},\\\"json\\\":{\\\"data\\\":{\\\"lan\\\":\\\"12345\\\"}},\\\"method\\\":\\\"POST\\\",\\\"origin\\\":\\\"180.188.224.177\\\",\\\"url\\\":\\\"https://httpbin.org/anything\\\"},\\\"message\\\":\\\"OK\\\",\\\"headers\\\":{\\\"date\\\":\\\"Thu, 16 Feb 2023 07:16:05 GMT\\\",\\\"content-type\\\":\\\"application/json\\\",\\\"content-length\\\":\\\"598\\\",\\\"connection\\\":\\\"close\\\",\\\"server\\\":\\\"gunicorn/19.9.0\\\",\\\"access-control-allow-origin\\\":\\\"*\\\",\\\"access-control-allow-credentials\\\":\\\"true\\\"}}\",\"Timestamp\":\"1676531765810000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"a58ef2d7ff7725c39f1e058bf22fe724\",\"SpanId\":\"751bc314bb6286b4\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9537a882ae58\",\"process.pid\":61741},\"Attributes\":{\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"task_id\":\"test_step1\"}}\n{\"Body\":\"Validate Response JSON Schema Success\",\"Timestamp\":\"1676531765811000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"TraceId\":\"a58ef2d7ff7725c39f1e058bf22fe724\",\"SpanId\":\"751bc314bb6286b4\",\"TraceFlags\":\"01\",\"Resource\":{\"service.name\":\"unknown_service:node\",\"host.hostname\":\"9537a882ae58\",\"process.pid\":61741},\"Attributes\":{\"event\":\"/test/:id.http.post\",\"workflow_name\":\"com.jfs.test\",\"task_id\":\"\"}}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Godspeed Project\nDESCRIPTION: Initializes a new Godspeed project directory by running the 'godspeed create' command. Prompts for necessary configurations such as data stores and Kafka integration during setup. This setup defaults to the latest version of gs_service unless otherwise specified.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed create my_test_project\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script on Ubuntu\nDESCRIPTION: This snippet provides instructions to run a shell script for installing prerequisites and the Godspeed framework on Ubuntu. Use sudo to ensure necessary permissions are granted for script execution.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash setup.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Generates the Prisma client necessary for database interactions within the Godspeed project, based on the defined schema file. This is required if it is not automatically generated during the build process.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/getting-started.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed prisma generate --schema=<path/to/prisma/schema>\n```\n\n----------------------------------------\n\nTITLE: Implementing Kafka Consumer Workflow in YAML\nDESCRIPTION: This YAML file defines a workflow for the Kafka consumer. It specifies the workflow ID, summary, and a task to handle the consumed message.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nid: kafka-conumer\nsummary: consumer\ntasks:\n    - id: set_con\n      fn: com.gs.return\n      args: <% inputs %>\n```\n\n----------------------------------------\n\nTITLE: Example Event Specification in YAML\nDESCRIPTION: Shows a YAML configuration example for an event specification. Defines a POST type event with a specified function and a request body which includes required JSON schema properties. This setup is intended for integrating events with the framework.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/extensible-datasources.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n/sample_helloworld.http.post:\n  id: sample_event\n  fn: com.jfs.sample_helloworld\n  body: \n    description: The body of the query\n    required: true\n    content:\n      application/json: # For ex. application/json application/xml\n        schema: \n          type: object\n          properties:\n            name: \n              type: string\n          required: [name]\n```\n\n----------------------------------------\n\nTITLE: Using a Datasource with Authentication in Workflow (YAML)\nDESCRIPTION: A sample Godspeed workflow task (`httpbin_step1`) that utilizes the `httpbin` datasource (which has authentication configured). When the `com.gs.http` function is invoked with this datasource, the framework automatically triggers the associated `com.jfs.httpbin_auth` workflow first to handle authentication.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n    - id: httpbin_step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      description: Hit http bin with some dummy data. It will send back same as response\n      fn: com.gs.http\n      args:\n        datasource: httpbin\n        data: <% inputs.body %>\n        config:\n          url : /anything\n          method: post\n```\n\n----------------------------------------\n\nTITLE: API Status Code Categories (Glossary)\nDESCRIPTION: Provides a general overview of the standard HTTP status code categories used in the API responses (2XX for success, 4XX for client errors, 5XX for server errors).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n     2XX - Success of some kind\n\n     4XX - Error occurred in client’s part\n\n     5XX - Error occurred in server’s part\n\n```\n\n----------------------------------------\n\nTITLE: Interactively Adding Godspeed Plugins via CLI (Bash)\nDESCRIPTION: This command initiates an interactive prompt within the Godspeed CLI to add plugins. It displays a list of available plugins, allowing the user to select one or more for installation into their project. Dependencies include having the Godspeed framework CLI installed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Overview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed plugin add\n```\n\nLANGUAGE: bash\nCODE:\n```\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n\n\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────────┬────────────────────────────────────────────────────────────────────────────────┐\n│      │ Name                                   │ Description                                                                    │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ cron-as-eventsource                    │ Cron as eventsource plugin for Godspeed Framework                              │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ aws-as-datasource                      │ aws as datasource plugin for Godspeed Framework                                │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ excel-as-datasource                    │ excel as datasource plugin for Godspeed Framework                              │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ mailer-as-datasource                   │ mailer as datasource plugin for Godspeed Framework                             │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ kafka-as-datasource-as-eventsource     │ kafka as datasource-as-eventsource plugin for Godspeed Framework               │\n└──────┴────────────────────────────────────────┴────────────────────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: SendBulkEmail API Endpoint Definition (HTTP)\nDESCRIPTION: Defines the HTTP request details for sending bulk emails. It specifies the required Content-Type, the HTTP method (POST), and the API endpoint URL.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n   Content Type: application/json ; charset= utf- 8\n   Method: POST\n   URL: URL: /api/notification/v1/publish/sendBulkEmail\n```\n\n----------------------------------------\n\nTITLE: Godspeed CLI create command\nDESCRIPTION: The `create` command sets up a new microservice project structure. It prompts users for service components and versions, tailoring the setup appropriately. The command accepts options like `--noexamples` to create without examples or `--directory` to specify a template directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ godspeed create my_service\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|\nprojectDir:  /home/gurjot/cli-test/my_service projectTemplateDir undefined\nproject created\nDo you need mongodb? [y/n] [default: n] n\nDo you need postgresdb? [y/n] [default: n] y\nPlease enter name of the postgres database [default: test] \nDo you need kafka? [y/n] [default: n] n\nDo you need elastisearch? [y/n] [default: n] n\nPlease enter host port on which you want to run your service [default: 3000] 3100\nFetching release version information...\nPlease select release version of gs_service from the available list:\nlatest\n1.0.0\n1.0.1\n1.0.10\n1.0.11\n1.0.12\n1.0.13\n1.0.2\n1.0.3\n1.0.4\n1.0.5\n1.0.6\n1.0.7\n1.0.8\n1.0.9\nbase\ndev\nv1.0.13\nEnter your version [default: latest] 1.0.13\nSelected version 1.0.13\n. . . . . . . .\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variable Values in Shell and PowerShell\nDESCRIPTION: This example shows how to temporarily export environment variable values in shell/git bash and Windows PowerShell environments, which can be useful for testing changes or configurations without permanently altering the .env file.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/config.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export MY_DATASOURCE_BASE_URL=https://httpbin.org\n$ export JWT_SECRET=mysecret\n$ export JWT_ISS= mycompany\n```\n\n----------------------------------------\n\nTITLE: Illustrating Datasource File Location\nDESCRIPTION: Shows the typical directory structure for the project, highlighting the location of datasource configuration files like `redis.yaml` within the `src/datasources` directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/redis.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\\n├── config\\n└── src\\n    ├── datasources\\n    │   └── httpbin.yaml\\n    │   ├── redis.yaml\\n    ├── events\\n    ├── functions\\n    └── mappings\n```\n\n----------------------------------------\n\nTITLE: Highlighting UI Elements - React Functional Component - JavaScript\nDESCRIPTION: Defines a small React component named `Highlight` that renders its children with a customizable background color and basic highlight effect. Relies on React as dependency. Inputs are the `children` prop for content and a `color` prop for highlight color. Outputs a styled `span`. The code is intended for documentation clarity in user interfaces.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/datastore.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '0px',\n      color: 'black',\n      padding: '5px',\n      cursor: 'pointer',\n    }}\n   >\n    {children}\n  </span>\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB using URL Format\nDESCRIPTION: Provides the standard connection URL format and a specific example for connecting to a MongoDB database. This format is used when configuring MongoDB connections, typically requiring username, password, host, port, and database name.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nConnection URL format: `mongodb://username:password@host:port/database`\nExample connection URL: `mongodb://admin:mindgrep@localhost:27017/test`\n```\n\n----------------------------------------\n\nTITLE: Removing Devops Plugins using Godspeed CLI\nDESCRIPTION: Command to remove installed devops plugins from the system. Shows interactive selection menu for choosing which plugin to remove from available options like express-as-http and prisma-as-datastore.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed plugin remove\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n    ? Please select a devops plugin to remove.\n  ❯ @godspeedsystems/plugins-express-as-http\n    @godspeedsystems/plugins-prisma-as-datastore\n```\n\n----------------------------------------\n\nTITLE: Including JWT Token in Authorization Header (Bash)\nDESCRIPTION: Demonstrates the correct format for including a JWT token in the Authorization header using the Bearer schema. This is essential for authenticating requests in a microservices architecture.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authentication/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAuthorization: Bearer <token>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Database with Prisma Models\nDESCRIPTION: Updates the database schema based on your Prisma models by pushing changes from the schema file, ensuring that your database structure aligns with your code models.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/getting-started.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed prisma push --schema=<path/to/prisma/schema>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Scripting Language per Expression (YAML/JS/CoffeeScript)\nDESCRIPTION: This YAML snippet demonstrates how to override the globally configured default scripting language for specific expressions. By using tags like `<js%` or `<coffee%`, you can specify JavaScript or CoffeeScript respectively for evaluating the embedded code, allowing mixed languages within the same configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: axios\nbase_url: <js% config.api.base_url %>\nport: <coffee% config.port %>\n```\n\n----------------------------------------\n\nTITLE: SendEmail Response Parameter (JSON)\nDESCRIPTION: Defines the JSON response parameter for the sendEmail request. It returns an integer representing the HTTP status code of the operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n   Status_Code: INTEGER\n```\n\n----------------------------------------\n\nTITLE: Unlinking Entities via Relation Using ElasticGraph Deep API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to remove an established relationship between two entities in ElasticGraph using the deep.unlink method. Each entity is specified by its type and identifier, and the relation name is provided. Like the link operation, this requires the relevant ElasticGraph module and configuration, and it is commonly used to maintain graph data integrity by programmatically removing links. A promise is returned to signal operation success.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nes.deep.unlink({\n\t\te1: {\n\t\t\t_type: ‘event’,\n\t\t\t_id: ‘674’\n\t\t},\n\t\te2: {\n\t\t\t_type: session,\n\t\t\t_id: 4\n\t\t},\n\t\te1ToE2Relation: ‘sessions’\n\t})\n\t.then(console.log)\n\n```\n\n----------------------------------------\n\nTITLE: Create Command Help Output\nDESCRIPTION: Detailed help information for the create command showing available options and arguments\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed help create\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n    Usage: Godspeed CLI create [options] <projectName>\n\n    create a new godspeed project.\n\n    Arguments:\n    projectName                            name of the project.\n\n    Options:\n    --from-template <projectTemplateName>  create a project from a template.\n    --from-example <exampleName>           create a project from examples.\n    -h, --help                             display help for command\n\n\n    For detailed documentation visit https://godspeed.systems\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed CLI via Yarn\nDESCRIPTION: Installs the Godspeed CLI globally using the Yarn package manager. This alternative method also makes the `godspeed` command available system-wide. Requires Node.js and Yarn to be installed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add @godspeedsystems/godspeed\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Kafka Eventsource Example\nDESCRIPTION: This snippet shows the directory structure for implementing Kafka as both a datasource and eventsource. It includes the necessary files and their locations within the project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n    ├── src\n        ├── datasources\n        │   ├── types\n        │   |    └── kafka.ts\n        |   |\n        │   └── kafka.yaml\n        │\n        ├── events\n        |   |\n        │   ├── kafka_publish_event.yaml\n        |   |\n        |   └── kafka_consumer_event.yaml\n\n        ├── eventsources\n        │   ├── types\n        │   |    └── kafka.ts\n        |   |\n        │   └── kafka.yaml\n        |\n        └── functions\n            |\n            ├── kafka-publish.yaml\n            |\n            └── kafka-consume.yaml\n```\n\n----------------------------------------\n\nTITLE: Godspeed UI Kit: Project Name Prompt\nDESCRIPTION: Illustrates the initial interactive prompt from the Godspeed UI Kit CLI tool after running the generation command. It asks the user to provide a name for the new project being created. A deprecation warning for 'langchain' might also be displayed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n> npx @godspeedsystems/uikit react-web\n[WARN] Importing from 'langchain' is deprecated. See https://js.langchain.com/docs/getting-started/install#updating-from-0052 for upgrade instructions.\n┌  Generate front-end boilerplate using Godspeed\n│\n◆  What is the name of your project?\n│  gskit-app_GodspeedTrialProject\n└\n```\n\n----------------------------------------\n\nTITLE: Implementing Express.js Event Source in TypeScript\nDESCRIPTION: This TypeScript code defines an `EventSource` class for Godspeed Systems, utilizing Express.js to handle HTTP requests. The `initClient` method initializes an Express application, configures middleware like CORS, session management, Passport for JWT and GitHub OAuth2 authentication, body-parser for request body parsing, file uploads, and optionally Prometheus metrics. The `authnHOF` provides conditional JWT authentication. The `subscribeToEvent` method dynamically creates Express routes based on Godspeed event configurations, applies authentication, converts incoming requests into `GSCloudEvent` objects, processes them using a provided handler, and sends back the response. Helper functions `trimSlashes` and `createGSEvent` assist in route handling and event creation. Constants for plugin identification and default configuration are also exported.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/custom-authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PlainObject, GSActor, GSCloudEvent, GSStatus, GSEventSource, logger } from \"@godspeedsystems/core\";\nimport express from \"express\";\nimport bodyParser from 'body-parser';\nimport promClient from '@godspeedsystems/metrics';\nimport cors from 'cors';\n//@ts-ignore\nimport promMid from '@godspeedsystems/express-prometheus-middleware';\nimport passport from \"passport\";\nconst session = require('express-session');\nimport fileUpload from \"express-fileupload\";\nimport jwt from 'jsonwebtoken';\nimport { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';\nimport { Strategy as GithubStrategy } from 'passport-github2';\n\nexport default class EventSource extends GSEventSource {\n  async initClient(): Promise<PlainObject> {\n    const app = express();\n    const {\n      port = 3000,\n      request_body_limit = 50 * 1024 * 1024,\n      file_size_limit = 50 * 1024 * 1024,\n    } = this.config;\n    \n    const jwtConfig = this.config.authn?.jwt || this.config.jwt;\n    const githubConfig = this.config.authn.oauth2?.github || this.config.oauth2.github;\n    app.use(cors());\n    app.use(session({\n      secret: 'mysecret',\n      resave: false,\n      saveUninitialized: false\n    }));\n    app.use(passport.initialize());\n    app.use(passport.session());\n    if (githubConfig) {\n      if (!githubConfig.client_id || !githubConfig.client_secret || !githubConfig.callback_url) {\n        logger.fatal('Github Setting error in http event source. Check all three Github settings are set properly for Express HTTP event source: client_id, client_secret or callback_url. Exiting');\n        process.exit(1);\n      }\n      passport.use(\n        new GithubStrategy(\n          {\n            clientID: githubConfig.client_id,\n            clientSecret: githubConfig.client_secret,\n            callbackURL: githubConfig.callback_url,\n            scope: ['user:email']\n          },\n          async function (accessToken: any, refreshToken: any, profile: any, done: any) {\n            return done(null, profile);\n          }\n        ),\n      );\n    }\n    // Authentication routes\n    app.get('/login', passport.authenticate('github', { session: true, scope: ['user:email'] }), (req, res) => {\n    });\n    app.get('/auth/github/callback', passport.authenticate('github', {\n      failureRedirect: '/user/error'\n    }), async (req, res) => {   \n      const user: any = req.user;\n    }\n  );\n    passport.serializeUser(function (user, done) {\n      done(null, user);\n    });\n    passport.deserializeUser(function (obj: any, done) {\n      done(null, obj);\n    });\n\n    app.use(bodyParser.urlencoded({ extended: true, limit: request_body_limit }));\n    app.use(bodyParser.json({ limit: file_size_limit }));\n    app.use(\n      fileUpload({\n        useTempFiles: true,\n        //@ts-ignore\n        limits: { fileSize: file_size_limit },\n        abortOnLimit:true,\n      })\n    );\n  \n    if (jwtConfig) {\n      if (!jwtConfig.secretOrKey || !jwtConfig.audience || !jwtConfig.issuer) {\n        logger.fatal('JWT Setting error in http event source. Check all three JWT values are set properly for Express HTTP event source: secretOrKey, audience or issuer. Exiting');\n        process.exit(1);\n      }\n      app.use(passport.initialize());\n      app.use(passport.session());\n      passport.use(\n        new JwtStrategy(\n          {\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: jwtConfig.secretOrKey,\n            ignoreExpiration: true,\n            jsonWebTokenOptions: {\n              audience: jwtConfig.audience,\n              issuer: jwtConfig.issuer,\n            },\n          },\n          function (jwtPayload, done) {\n            return done(null, jwtPayload);\n          },\n        ),\n      );\n    };\n\n    app.listen(port);\n    // logger.info('Started Express server at port %s', port);\n    if (process.env.OTEL_ENABLED == 'true') {\n      app.use(\n        promMid({\n          metricsPath: false,\n          collectDefaultMetrics: true,\n          requestDurationBuckets: promClient.exponentialBuckets(0.2, 3, 6),\n          requestLengthBuckets: promClient.exponentialBuckets(512, 2, 10),\n          responseLengthBuckets: promClient.exponentialBuckets(512, 2, 10),\n        })\n      );\n    }\n    return app;\n  }\n\n  private authnHOF(authn: boolean) {\n    return (req: express.Request, res: express.Response, next: express.NextFunction) => {\n      if (authn !== false && this.config.authn?.jwt) {\n        // if authn is true and JWT config exists\n        return passport.authenticate('jwt', { session: false })(req, res, next);\n      }else {\n        next();   // No authentication required \n      }\n    };\n  }\n  subscribeToEvent(eventRoute: string, eventConfig: PlainObject, processEvent: (event: GSCloudEvent, eventConfig: PlainObject) => Promise<GSStatus>, event?: PlainObject): Promise<void> {\n    const routeSplit = eventRoute.split('.');\n    const httpMethod: string = routeSplit[1];\n    let endpoint = routeSplit[2].replace(/{(.*?)}/g, ':$1');\n    let baseUrl = this.config.base_url;\n    let fullUrl;\n    if (baseUrl) {\n      fullUrl = \"/\" + baseUrl + \"/\" + endpoint;\n      fullUrl = fullUrl.replace(/\\/\\//g, '/');\n    } else {\n      fullUrl = endpoint;\n    }\n\n    const app: express.Express = this.client as express.Express;\n    //@ts-ignore\n    app[httpMethod](fullUrl, this.authnHOF(event.authn), async (req: express.Request, res: express.Response) => {\n      const gsEvent: GSCloudEvent = createGSEvent(req, endpoint)\n      const status: GSStatus = await processEvent(gsEvent, { key: eventRoute, ...eventConfig });\n      res\n        .status(status.code || 200)\n        .send(Number.isInteger(status.data) ? String(status.data) : status.data);\n    });\n    return Promise.resolve();\n  }\n}\n// Remove leading and trailing / (slash) if present\nfunction trimSlashes(endpoint: string) {\n  if (endpoint[0] === '/') {\n    endpoint = endpoint.substring(1);\n  }\n  if (endpoint[endpoint.length - 1] === '/') {\n    endpoint = endpoint.substring(0, endpoint.length - 1);\n  }\n  return endpoint;\n}\nfunction createGSEvent(req: express.Request, endpoint: string) {\n  const reqProp = omit(req, [\n    '_readableState',\n    'socket',\n    'client',\n    '_parsedUrl',\n    'res',\n    'app'\n  ]);\n  const reqHeaders = pick(req, ['headers']);\n  let data = { ...reqProp, ...reqHeaders };\n\n  const event: GSCloudEvent = new GSCloudEvent(\n    'id',\n    endpoint,\n    new Date(),\n    'http',\n    '1.0',\n    data,\n    'REST',\n    new GSActor('user'),\n    {}\n  );\n\n  return event;\n }\n\nconst SourceType = 'ES';\nconst Type = 'express'; // this is the loader file of the plugin, So the final loader file will be `types/${Type.js}`\nconst CONFIG_FILE_NAME = 'http'; // in case of event source, this also works as event identifier, and in case of datasource works as datasource name\nconst DEFAULT_CONFIG = { port: 3000, docs: { endpoint: '/api-docs' } };\n\nexport {\n  EventSource,\n  SourceType,\n  Type,\n  CONFIG_FILE_NAME,\n  DEFAULT_CONFIG\n};\n\n```\n\n----------------------------------------\n\nTITLE: Updating Plugins Using Godspeed CLI - Bash\nDESCRIPTION: This bash snippet demonstrates the usage of the 'godspeed plugin update' command, which provides an interactive interface to select and update available Godspeed plugins. No additional dependencies are required except an existing Godspeed project with CLI installed. The command displays a formatted selection prompt where users can choose plugins such as 'express-as-http', 'prisma-as-datastore', or 'axios-as-datasource'; after selection, the plugin(s) will be updated. The command provides a user-friendly workflow but requires a terminal with interactive prompt support.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed plugin update\n```\n\nLANGUAGE: bash\nCODE:\n```\n\n\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n\n\n? Please select godspeed plugin to update: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────────┬────────────────────────────────────────────────────────────────────────────────┐\n│      │ Name                                   │ Description                                                                    │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ express-as-http                        │ Godspeed event source plugin for express as http server                        │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ prisma-as-datastore                    │ Prisma as a datasource plugin for Godspeed Framework.                          │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ axios-as-datasource                    │ Axios as datasource plugin for Godspeed Framework                              │\n└──────┴────────────────────────────────────────┴────────────────────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Adding Godspeed Plugin via CLI Command\nDESCRIPTION: This snippet demonstrates the CLI command for integrating a Godspeed plugin into your project. The user is prompted to select from a list of available plugins for installation. This requires the Godspeed CLI to be installed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed plugin add\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client (Godspeed CLI, Bash)\nDESCRIPTION: This Bash command is used within a Godspeed project to generate Prisma clients and synchronize the database schema, based on the Prisma schema files present. Running this command triggers client creation in the specified output directory, and requires that the Prisma plugin, schema, and environment variables are properly configured in advance.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Mongoose Datasource Error Response Structure\nDESCRIPTION: This YAML snippet illustrates the structure of the `GSStatus` object returned by the Godspeed Mongoose datasource when an error occurs during a database operation. It includes a `code` (typically 500), `success: false`, and a `data` object containing an error `message`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncode: 500\nsuccess: false\ndata: \n    message: Internal Server Error\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Module Configuration with Nested YAML Structure - YAML\nDESCRIPTION: Illustrates a hierarchical folder/file layout for representing large or complex configurations in Godspeed. Each directory can contain an 'index.yaml' file for root keys, and other YAML files or subfolders for deeper nesting. Dependencies: Godspeed config loader with support for recursive directory reading and YAML parsing. Input folder structure mirrors desired configuration hierarchy; output is a unified object merged from all sources. Comments clarify each file's content.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/scaffolding/config-loading.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n./sample_project_module\n  index.yaml\n    name: 'Ayush'                     //Contents of index.yaml file\n  address\n    index.yaml\n      city: 'Dharamsala'              //Content of address/index.yaml file\n    locality.yaml\n      pincode: 176052\n      landmark: 'Hill ventures adventure park'\n\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Payload in Workflow DSL (YAML)\nDESCRIPTION: Illustrates how to access the decoded JWT payload using `<% inputs.user %>` within a Godspeed workflow task definition (YAML). This allows using user-specific information from the validated token in subsequent task arguments, such as passing the entire payload (`jwt_payload`) within the request body of an HTTP call.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n    - id: httpbin_step1\n      description: Hit http bin with some dummy data. It will send back same as response\n      fn: com.gs.http\n      args:\n        datasource: httpbin\n        data: <% inputs.body %>\n          jwt_payload: <% inputs.user %>\n        config:\n          url : /anything\n          method: post\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed Plugins using CLI\nDESCRIPTION: This snippet demonstrates how to use the Godspeed CLI to browse and install plugins for event sources. It shows the interactive command-line interface where users can select from various plugins such as express, prisma, axios, cron, and kafka.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/event_sources/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n > godspeed plugin add\n\n ~~~~~~ Godspeed CLI ~~~~~~\n? Please select godspeed plugin to install. (Use arrow keys)\n❯ @godspeedsystems/plugins-express-as-http\n  @godspeedsystems/plugins-prisma-as-datastore\n  @godspeedsystems/plugins-axios-as-datasource\n  @godspeedsystems/plugins-cron\n  @godspeedsystems/plugins-kafka\n```\n\n----------------------------------------\n\nTITLE: Setting Value in Redis using Godspeed Workflow\nDESCRIPTION: Godspeed workflow YAML for setting a value in Redis. It uses the 'datasource.redis.set' function with specified key and value.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Redis Datasource.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: set_redis_value\ntasks:\n  - id: set_task\n    fn: datasource.redis.set\n    args:\n      key: 'example_key'\n      value: 'example_value'\n```\n\n----------------------------------------\n\nTITLE: Defining Customized Request Error Handling in YAML\nDESCRIPTION: This snippet defines a task in YAML that customizes the error response for a request validation failure using the 'on_request_validation_error' handler. It uses the 'com.gs.transform' function to modify the error message and code.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/validations/validation-error.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: customizing req_response_error\ntasks:\n  - id: customized_request_error\n    fn: com.gs.transform \n    args: \n      success: false \n      code: 400\n      data:    \n        message: <% inputs.validation_error.data.message %>\n     #  inputs.validation_error returns the default framework error\n     #  or you can give \n     #  message: <% inputs.validation_error.data.errors[0] %>\n```\n\n----------------------------------------\n\nTITLE: Datasource Configuration Context Example in JSON\nDESCRIPTION: This JSON snippet provides an example of how a datasouce of type 'api' might be configured. It includes fields such as base_url, method, and body payload.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/before-and-after-hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"api\",\n  \"base_url\": \"https://dummyjson.com\",\n  \"gsName\": \"testdatasource\",\n  \"url\": \"/products/1\",\n  \"method\": \"post\",\n  \"body\": {\n    \"test\": \"key\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Prepare Command Output\nDESCRIPTION: Example output when running the prisma prepare command to generate Prisma client and sync database\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed prisma prepare\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n    Environment variables loaded from .env\n    Prisma schema loaded from src/datasources/mongo.prisma\n\n    ✔ Generated Prisma Client (v5.3.1) to ./node_modules/@prisma/client in 54ms\n\n    Start using Prisma Client in Node.js (See: https://pris.ly/d/client)\n    ```\n    import { PrismaClient } from '@prisma/client'\n    const prisma = new PrismaClient()\n    ```\n    or start using Prisma Client at the edge (See: https://pris.ly/d/accelerate)\n    ```\n    import { PrismaClient } from '@prisma/client/edge'\n    const prisma = new PrismaClient()\n    ```\n\n    See other ways of importing Prisma Client: http://pris.ly/d/importing-client\n\n    Environment variables loaded from .env\n    Prisma schema loaded from src/datasources/mongo.prisma\n    Datasource \"db\": MongoDB database \"test\" at \"cluster0.ni9izd6.mongodb.net\"\n\n    The database is already in sync with the Prisma schema.\n\n    ✔ Generated Prisma Client (v5.3.1) to ./node_modules/@prisma/client in 62ms\n```\n\n----------------------------------------\n\nTITLE: Using Mongoose in TypeScript Workflow\nDESCRIPTION: This TypeScript code demonstrates how to use Mongoose operations in a Godspeed workflow. It shows two approaches: direct model function calls and using the execute method with error handling.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Mongoose Datasource.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSContext, GSDataSource, GSStatus } from \"@godspeedsystems/core\";\n\n// Option 1: \n// Calling function on Mongoose model directly and sending data with status code\n// Here you handle errors/try/catch yourself\nexport default async function (ctx: GSContext, args: any) {\n    const ds: GSDataSource = ctx.datasources.mongoose;\n    // If this function is called by another function (yaml or JS), the caller may have passed args object. In case not, then initialize args yourself.\n    args = args || [{name: 'mastersilv3r'}, 'name age', {}];\n    try {\n      const response = ds.SomeModel.findOne(...args);\n      return {\n        code: 200,\n        data: response\n      }\n      //return response; Framework will automatically add code: 200 in case of HTTP\n    } catch (err: any) {\n      ctx.childLogger.error(`Found error in Mongoose query ${err}`);\n      return {\n        code: 500,\n        data: {\n          error: err,\n          message: err.message\n        }\n      }\n    }\n}\n\n//Option 2: Handles response codes, errors creation of GSStatus directly\nexport default async function (ctx: GSContext, args: any) {\n    const ds: GSDataSource = ctx.datasources.mongoose;\n    args = args || [{name: 'mastersilv3r'}, 'name age', {}];\n    //Will need to set a meta object in the args to pass entitType and method\n    args.meta = {entityType: 'SomeModel', method: 'findOne'};\n    const response = await ds.execute(ctx, args);\n    // response.code will be 500 in case of error, and 200 otherwise\n    // In case or error, response.data will have message and error keys, like we saw \n    // in the above TS example\n    return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Project Structure for Cron Eventsource\nDESCRIPTION: Shows the typical directory layout for implementing a custom Cron eventsource within a Godspeed project. It highlights the locations for eventsource configuration (`cron.yaml`), type definition (`types/cron.ts`), event definitions (`events/every_minute_task.yaml`), and associated functions (`functions/every_minute.yaml`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/create-custom-event-source.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n    ├── src\n        ├── datasources\n        │\n        ├── events\n        |   |\n        │   └── every_minute_task.yaml\n        |   \n        ├── eventsources\n        |   |\n        │   ├── types\n        |   |    |\n        │   |    └── cron.ts\n        |   |\n        │   └── cron.yaml\n        |\n        └── functions\n            |        \n            └── every_minute.yaml\n\n```\n\n----------------------------------------\n\nTITLE: Example JWT Payload Structure\nDESCRIPTION: Demonstrates a typical JWT payload with standard claims (iss, sub, aud, exp, nbf, iat, jti) and custom claims (username, email, roles). The payload contains user identification and authorization information.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/authentication/jwt.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"iss\": \"https://your-app.com\",\n  \"sub\": \"user123\",\n  \"aud\": \"https://your-app.com/api\",\n  \"exp\": 1692425600,\n  \"nbf\": 1692425000,\n  \"iat\": 1692424400,\n  \"jti\": \"token123\",\n  \"username\": \"john.doe\",\n  \"email\": \"john.doe@example.com\",\n  \"roles\": [\"admin\", \"user\"]\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Workflow with Mappings\nDESCRIPTION: Example of accessing mappings within a YAML workflow definition.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/mappings.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- id: httpbinCof_step1\n  description: Hit http bin with some dummy data. It will send back same as response\n  fn: datasource.api.post./anything\n  args:\n    params:\n    data:\n      personal_email_id: 'ala.eforwich@email.com'\n      gender: <% mappings.Gender[inputs.body.Gender] %>\n      id:  <% mappings.generate.genId %>\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Help in Godspeed CLI\nDESCRIPTION: The help command provides usage guidance for any Godspeed command. This example shows the help output for the 'create' command, displaying available options and syntax.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed help create\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|                          \nUsage: godspeed create [options] <projectName>\n\nOptions:\n  -n, --noexamples                      create blank project without examples\n  -d, --directory <projectTemplateDir>  local project template dir\n  -h, --help                            display help for command\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Creating a Godspeed Project\nDESCRIPTION: Example output when creating a new Godspeed project named 'hello-world'. It shows the process of cloning the template, generating project files, and installing dependencies.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> **godspeed create hello-world** # hello-world is the name of the app\n\n~~~~~~ Godspeed CLI ~~~~~~\n\n …  waiting   Cloning project template.\n   success   Cloning template successful.\n  …  waiting   Generating project with default examples.\n  …  waiting   Generating project files.\n    success   Successfully generated godspeed project files.\n  …  waiting   Installing project dependencies.\n    success   Successfully installed project dependencies.\n    success   \n\n  Successfully created the project hello-world.\n  Use `godspeed --help` command for available commands. Happy building microservices with Godspeed!.\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: This command executes the development server, launching the application for testing and development in a local environment.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/advance-guide.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed serve\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Local Development Server\nDESCRIPTION: Command to start a local development server that opens a browser window and reflects most changes live without server restarts.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Running the Godspeed Service\nDESCRIPTION: Command to start the Godspeed service. This runs the application on localhost:3000 by default.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> godspeed serve\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Instance in Godspeed\nDESCRIPTION: YAML configuration for a GraphQL event source. This establishes the GraphQL server settings including port, authentication with JWT, and authorization policies to run on every event.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Apollo GraphQl Eventsource.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: graphql\nport: 4000\n\n#jwt settings to run by default on every event (endpoint)\nauthn:\n  jwt:\n    secretOrKey: mysecret #the secret\n    audience: mycompany #aud in jwt token\n    issuer: mycompany #iss in jwt token\n\n# authorization policies to run by default on every event\n# Uncomment this to start checking user roles.\n# This will require jwt to be setup, or another middleware to parse the user information in inputs. Currently Graphql, Epress and Fastify support creating user object from JWT token in incoming request.\nauthz:\n  - id: check_user_role\n    fn: com.gs.transform\n    args: <%inputs.user.role === 'admin'%> #an inline JS based check of user role\n\n# validation error handling, to transform error responses on wrong input or response\non_request_validation_error: validations.request.standardResponse\non_response_validation_error:\n  - id: response_validation_error_handler\n    fn: com.gs.return\n    args: <%inputs%>\n```\n\n----------------------------------------\n\nTITLE: Plugin Update Command Example\nDESCRIPTION: Example of updating a plugin using the plugin update command\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed plugin update\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n    ? Please select a eventsource/datasource plugin to update. (Use arrow keys)\n  ❯ @godspeedsystems/plugins-express-as-http\n    @godspeedsystems/plugins-prisma-as-datastore\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Data in Arguments\nDESCRIPTION: Shows how to access response data from previous steps and configuration in function arguments.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n__args:\n  create_user_url: ${__config.los.urls.create_user}\n  user_id: ${__response.data.step1.data.user_id}\n  user_name: ${__request.params.user_name}\n```\n\n----------------------------------------\n\nTITLE: DevOps Plugin Add Command Example\nDESCRIPTION: Example of adding a devops plugin using the devops-plugin add command\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed plugin add\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n    ? Please select devops plugin to install. (Use arrow keys)\n\n  ❯ @godspeedsystems/plugins-express-as-http\n    @godspeedsystems/plugins-prisma-as-datastore\n    @godspeedsystems/plugins-axios-as-datasource\n```\n\n----------------------------------------\n\nTITLE: Defining a 'Highlight' React Component for Text Styling (JSX)\nDESCRIPTION: This commented-out snippet defines a React functional component named `Highlight`. It accepts `children` and a `color` prop, rendering the children within a `<span>` tag styled with the provided background color and other fixed visual properties like font size, padding, and cursor style. It appears intended for visually highlighting text segments within the documentation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/communication/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<!-- export const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '0px',\n      color: 'black',\n      fontSize:'22px',\n      padding: '5px',\n      cursor: 'pointer',\n    }}\n   >\n    {children}\n  </span>\n);\n -->\n```\n\n----------------------------------------\n\nTITLE: Changing Service Version with Godspeed CLI\nDESCRIPTION: The version command allows changing the version of gs_service for any microservice. It should be executed from the project root directory and displays a confirmation with environment loading status.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed version 1.0.13\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|                          \nGenerating prisma modules\nStarting test1_devcontainer_postgres_1 ... \nStarting test1_devcontainer_postgres_1 ... done\nCreating test1_devcontainer_node_run   ... \nCreating test1_devcontainer_node_run   ... done\nEnvironment variables loaded from .env\n. . . . . . . . . .\n```\n\n----------------------------------------\n\nTITLE: Displaying Godspeed CLI Help\nDESCRIPTION: Command to show all available Godspeed CLI commands and options. This is useful for understanding the capabilities of the Godspeed CLI.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed --help\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Folder\nDESCRIPTION: This command is used to change the directory to the newly created blog application project folder.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/advance-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd blog-app\n```\n\n----------------------------------------\n\nTITLE: Deep Linking Calls in Entity Systems\nDESCRIPTION: A code snippet outlining a deep linking function call using the Godspeed framework to connect entities like events and sessions. The snippet highlights the linkage function and relationships mapping in JavaScript syntax. It requires Godspeed API access, configured relationships, and two entities to link.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/model-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: Unknown\nCODE:\n```\nes.deep.link({\n\te1: {\n\t\t_type: ‘event’,\n\t\t_id: ‘674’\n\t},\n\te2: {\n\t\t_type: session,\n\t\t_id: 4\n\t},\n\te1ToE2Relation: ‘sessions’\n})\n.then(console.log)\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Without SSH\nDESCRIPTION: Command to deploy the website without SSH, using a GitHub username for authentication. This builds the website and pushes to the 'gh-pages' branch.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Settings in YAML\nDESCRIPTION: Provides a sample YAML configuration snippet for setting up JWT authentication parameters like issuer (`iss`), audience (`aud`), and the secret key (`secretOrKey`). These values are typically sourced from environment variables (JWT_ISS, JWT_AUD, JWT_SECRET) and are essential for validating incoming JWTs. Failure to provide `secretOrKey` or `secretOrKeyProvider` will result in an error.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njwt:\n  issuer: JWT_ISS #iss\n  audience: JWT_AUD #aud\n  secretOrKey: JWT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Godspeed CLI Help Output\nDESCRIPTION: Shows the typical output displayed when running the `godspeed` command without arguments. It includes a welcome message and a list of primary commands like `create`, `serve`, `build`, `plugin`, etc., along with brief descriptions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\nUsage: Godspeed CLI [options] [command]\nCLI tool for godspeed framework.\nOptions:\n  -V, --version                   output the version number\n  -h, --help                      display help for command\nCommands:\n  create [options] <projectName>  create a new godspeed project.\n  serve                           run the development server in watch mode.\n  build                           build the godspeed project.\n  clean                           clean the previous build.\n  preview                         run the build in a hosted environment like            production                      or development.\n  gen-crud-api                    scans your prisma datasources and generate\n                                  CRUD APIs events and workflows\n  plugin                          manage(add, remove, update) eventsource and\n                                  datasource plugins for godspeed.\n  prisma                          proxy to prisma commands with some add-on\n                                  commands to handle prisma datasources.\n  help [command]                  display help for command\n\n```\n\n----------------------------------------\n\nTITLE: Inline Authz in Godspeed Workflow Task (YAML)\nDESCRIPTION: This YAML file (`fetch_author.yaml`) defines a Godspeed workflow task (`fetch_author`) that uses an inline `authz` instruction. The authorization logic restricts access by disallowing `col3` (`no_access`) and applying a `where` clause filtering by `client_id`, applied before fetching data using `datasource.mysql.author.findUnique`. The specific columns to allow (`can_access`) are commented out in this example.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Fetch author\ntasks:\n  - id: fetch_author\n    fn: datasource.mysql.author.findUnique\n    authz:\n      - fn: com.gs.transform\n        args:\n          # can_access: \n          #   - col1\n          #   - col2\n          no_access:\n            - col3\n          where:\n            tenant: <% inputs.headers.client_id %>\n    args:\n      where:\n        id: <% inputs.params.id %>\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integer Plugin (TypeScript)\nDESCRIPTION: Exports a TypeScript function `randomInt` that generates a random integer between the provided `min` and `max` values (inclusive). As it's defined in `plugins/index.ts`, it can be accessed directly in workflows using its function name without the file path prefix.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport function randomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs for SQL Server Models\nDESCRIPTION: Command to automatically generate CRUD (Create, Read, Update, Delete) APIs based on the defined Prisma schema for SQL Server. This creates event handlers and workflows for the models.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLServer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Godspeed Project\nDESCRIPTION: The test command runs the previously generated test suite from the CLI using Newman. This requires the service to be up and running before executing the tests.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n godspeed test\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|                          \n\n> proj_upd@1.0.0 test\n> newman run tests/test-suite.json\n\nnewman\n\nGodspeed: Sample Microservice\n\n→ Call another (sub) workflow from main workflow\n  POST http://localhost:3000/another_workflow?bank_id=<string> [200 OK, 630B, 2.6s]\n. . . . . . . . \n```\n\n----------------------------------------\n\nTITLE: Sample Output Logs at EventSource Level - JSON\nDESCRIPTION: This JSON log sample corresponds to logs generated with eventsource-specific log attributes (e.g., 'event_type'), overriding any default attributes. System metadata and informational fields are provided alongside custom fields, enabling advanced log categorization based on service or event type.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{ Body: \"return value [] 200 %o\"\n    Timestamp: \"2024-04-10T09:40:45.197Z000000\"\n    SeverityNumber: 9\n    SeverityText: \"INFO\"\n    TraceId: \"3fba9b9bd5d10d00b1b730b74c8eba51\"\n    SpanId: \"985e8a8d6a18568b\"\n    TraceFlags: \"01\"\n    Resource: {\n      \"service.name\": \"sample_app\",\n      \"host.hostname\": \"6295f63d9181\",\n      \"process.pid\": 13956\n    }\n    Attributes: {\n      \"event\": \"/helloworld\",\n      \"workflow_name\": \"helloworld\",\n      \"file_name\": \"helloworld\",\n      \"event_type\": \"myevent\"\n    }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exported Functions in Godspeed (YAML)\nDESCRIPTION: Demonstrates the configuration structure within `/config/exported_functions` used to expose functions as APIs. It shows how to define the Fully Qualified Name (FQN) based on the directory path and specify which communication channels (e.g., REST, messageBus, socket) the function should be available on. Channel-specific settings, like the HTTP method for REST endpoints, can also be configured here.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/scaffolding/intro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n./config\n  exported_functions/\n    com\n      abc\n        functionA                               // The Fullly qualified name (FQN) of the exported function to external consumer will be `${domainName}.${microserviceName}.com.abc.functionA`\n                                                // On event interfaces, the microservie or serverless will be registered to listen on the FQN of this function. For REST, the FQN will itself become the URL for that endpoint.\n          enabled_channels:                     // If channels are not specified for this function, it is exportd via all the channels exposed by this service. In case of HTTP, default export will be POST.\n            REST:\n              methodType: 'GET' | 'POST'...     // The params of GET request and payload of POST request become the arguments of the underlying function, to be called with its middleware\n            messageBus: true | false            // Default value: true. By default every function is exported on all the exported channels of this microservice (see microservice config detailed in above section)\n            socket: true | false                // If a channel is not set at the microservice config level, yet a function can be exported on that channel by this local override\n```\n\n----------------------------------------\n\nTITLE: Error Hook Example in Godspeed DSL\nDESCRIPTION: Demonstrates how to implement error handling using the __on_error hook.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n__hooks:\n  __on_error:\n    - __ref: __log\n      __args:\n        data:\n          key1:value1\n          key2:value2\n```\n\n----------------------------------------\n\nTITLE: Linking Entities via Relationship in ElasticGraph\nDESCRIPTION: This JavaScript snippet demonstrates how to link two entities by a relationship in ElasticGraph. It shows how to use the 'es.deep.link' function to connect an 'event' to a 'session' via a specified relation name.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nes.deep.link({\n  e1: {\n    _type: ‘event’,\n    _id: ‘674’\n  },\n  e2: {\n    _type: session,\n    _id: 4\n  },\n  e1ToE2Relation: ‘sessions’\n})\n.then(console.log)\n```\n\n----------------------------------------\n\nTITLE: Opening Project in Visual Studio Code\nDESCRIPTION: Command to open the current project directory in Visual Studio Code.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Opening Project in Visual Studio Code\nDESCRIPTION: The command opens the blog application project in Visual Studio Code for editing and development.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/advance-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Example Log for Godspeed Server\nDESCRIPTION: A sample log output indicating the successful start of the Express server on port 3000. It shows server details and the URL to access API documentation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nINFO:[Production Server Running]('express:' eventsource, '3000' port) Try it out at: http://localhost:3000/api-docs\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Database Connection\nDESCRIPTION: Environment variable configuration in .env file for MariaDB database connection.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MariaDB.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=\"mariadb://USER:PASSWORD@HOST:PORT/DATABASE\"\n```\n\n----------------------------------------\n\nTITLE: Generate ID Mapping\nDESCRIPTION: Simple mapping for generating an ID value.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/mappings.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngenId: 12345\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Godspeed Plugin via CLI\nDESCRIPTION: This snippet showcases the command to add a specific plugin to your project using the Godspeed CLI by specifying the plugin name. This helps to streamline the process of adding known plugins directly.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed plugin add <plugin-name>\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Static Content\nDESCRIPTION: Command to generate static website content in the 'build' directory that can be served using any static content hosting service.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Hello World Workflow in YAML\nDESCRIPTION: This snippet demonstrates a basic workflow that returns a 'Hello World!' message using the com.gs.return function.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nid: hello_world_function\nsummary: Call an API and return the task message\ntasks:\n    - id: return_fn_step1\n      description: add a message property\n      fn: com.gs.return #It's a inbuilt function that returns args.\n      args: \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Using SSH\nDESCRIPTION: Command to deploy the website using SSH authentication method.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: SendBulkTemplateEmail Request Parameters (JSON)\nDESCRIPTION: Specifies the JSON payload parameters required for the sendBulkTemplateEmail request. Includes a list of recipient addresses, the template ID, placeholder values, sender address, and email subject. Templates must be pre-configured on the provider.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n   recipientsToList      [STRING, STRING...]\n   templateId             INTEGER\n   templateParam          [{“placeholder1” : “value1”}, {“placeholder2” : “value2”} ]\n   from                   STRING\n   Subject                STRING\n\n```\n\n----------------------------------------\n\nTITLE: Godspeed Plugin Help Output\nDESCRIPTION: Shows the output of the `godspeed help plugin` command. It lists the available plugin subcommands (`add`, `remove`, `update`) and their descriptions, along with general options and a link to documentation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n\nUsage: Godspeed CLI plugin [options] [command]\n\nmanage(add, remove, update) eventsource and datasource plugins for godspeed.\n\nOptions:\n  -h, --help           display help for command\n\nCommands:\n  add [pluginName]     Add an eventsource/datasource plugin.\n  remove [pluginName]  Remove an eventsource/datasource plugin.\n  update               Update an eventsource/datasource plugin.\n  help [command]       display help for command\n\nFor detailed documentation visit https://godspeed.systems\n\n\n```\n\n----------------------------------------\n\nTITLE: YAML Log Redaction Configuration\nDESCRIPTION: Shows an example of how to configure fields in logs to be redacted using Pino's redaction paths, ensuring sensitive information such as mobile numbers are hidden.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  redact: ['a.b.c', 'a.b.*', 'req.headers', 'mobileNumber'] #pino redact rules. Default null.\n  level: debug #by default info\n  sync: true #By default sync is false. For debugging, keep it true. For performance keep it false.\n  timestamp: stdTimeFunctions.isoTime #Pino date formats\n  bindings: # should pid and hostname be enabled in pino log bindings.\n    pid: false\n    hostname: true  \n```\n\n----------------------------------------\n\nTITLE: Godspeed Project Structure with Kafka Integration - Shell\nDESCRIPTION: Displays the recommended directory and file structure for a Godspeed project that includes Kafka as a datasource and event source. The tree lists locations for datasource configuration, event and eventsource YAML files, and function workflow definitions. This aids users in organizing implementation files correctly within their projects.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Kafka Datasource.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n.\\n├── src\\n│   ├── datasources\\n│   │   ├── types\\n│   │   │    └── kafka.ts                    # Custom datasource logic\\n│   │   └── kafka.yaml                       # Datasource configuration\\n│   ├── events\\n│   │   ├── kafka_publish_event.yaml         # Event to trigger the Kafka publish\\n│   │   └── kafka_consumer_event.yaml        # Event to trigger the Kafka consume\\n│   ├── eventsources\\n│   │   └── kafka.yaml                       # Eventsource configuration\\n│   └── functions\\n│       ├── kafka-publish.yaml               # Workflow to publish message\\n│       └── kafka-consume.yaml               # Workflow to consume message\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Connection String Environment Variable (Shell)\nDESCRIPTION: This shell command demonstrates how to set the `MONGO_URL` environment variable, which is required by the Godspeed Mongoose datasource plugin to connect to the MongoDB instance. Replace the placeholder values with the actual MongoDB username, password, and cluster address.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nexport MONGO_URL='mongodb+srv://<user_name>:<password>@cluster0.xyzabc.mongodb.net/?retryWrites=true&w=majority'\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client with Godspeed\nDESCRIPTION: Shows the Godspeed command `godspeed prisma prepare` used to generate the Prisma client based on the schema and synchronize the database schema with the defined models.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MySQL.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Godspeed CLI version option\nDESCRIPTION: The `--version` option for Godspeed CLI displays the current version of the tool. This is useful for verifying the installed version.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ godspeed -v\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|\n0.0.26\n```\n\n----------------------------------------\n\nTITLE: Returning Greetings in Godspeed Workflow - Godspeed User Function - TypeScript\nDESCRIPTION: This TypeScript workflow implements a 'greet user' function in Godspeed, extracting 'name' from the request body and returning a personalized greeting with a GSStatus object. It requires the '@godspeedsystems/core' library for typing and output construction. The main input is the execution context containing request data. The output is a GSStatus instance containing status, code, error, message, and headers, ensuring consistency with Godspeed's expected result structure.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/create-api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GSCloudEvent, GSContext, PlainObject, GSStatus } from \"@godspeedsystems/core\";\nexport default function (ctx: GSContext, args: PlainObject) {\n    const {\n      inputs: {\n            data: {\n              body\n            }\n        }, \n    }= ctx;\n    return new GSStatus(true, 200, undefined, 'Hello ' + body.name, undefined);  \n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring User Permissions and Rebooting - Shell\nDESCRIPTION: The following snippet adds the current user to the 'docker' group, allowing Docker commands to be run without sudo. A system reboot is then triggered to ensure permission changes take effect. Requires sudo and will briefly interrupt the session by restarting the machine.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo usermod -aG docker $USER\\n$ reboot\n```\n\n----------------------------------------\n\nTITLE: Configuring Mongoose DataSource Type in TypeScript\nDESCRIPTION: This code defines the Mongoose DataSource type for use in the Godspeed project. It imports the DataSource from the Mongoose plugin and exports it as the default.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Mongoose Datasource.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from '@godspeedsystems/plugins-mongoose-as-datastore';\nexport default DataSource;\n```\n\n----------------------------------------\n\nTITLE: React Development Server Port Conflict Prompt\nDESCRIPTION: Illustrates the prompt displayed by the development server if the default port (e.g., 3000) is already in use by another process. It identifies the potential conflict and asks the user if they want to attempt running the application on a different port.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n? Something is already running on port 3000. Probably:\n  node /Users/other_port_path\n  in /Users/other_port_path\n\nWould you like to run the app on another port instead? › (Y/n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Gender Mappings in Godspeed using YAML\nDESCRIPTION: Defines a mapping called 'Gender' with values for 'Male', 'Female', and 'Others' as short codes within a YAML file (`index.yaml`). This file is placed in `src/mappings/index.yaml` and its keys are accessible globally in workflows as `mappings.Gender`. No dependencies other than basic YAML support and the Godspeed framework's mapping loading mechanism. The mapping can be referenced using keys in workflow scripts to convert gender labels to codes.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/mappings.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nGender:\n  Male: M\n  Female: F\n  Others: O\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SOAP Event Handler\nDESCRIPTION: SOAP event configuration with HTTP GET endpoint, parameters, and response schemas.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n'/wsdltest.http.get':\n  fn: soap\n  summary: add soap\n  description: print sum\n  produces:\n    - application/json\n  parameters:\n    - name: status\n      in: query\n      schema:\n        type: string\n  responses:\n    '200':\n      description: Returns the greeting.\n      schema:\n        type: string\n    '400':\n      description: Invalid status value\n```\n\n----------------------------------------\n\nTITLE: Sample Masked Logs\nDESCRIPTION: An example of masked logs generated when fields are specified in the redaction configuration, demonstrating the concealment of sensitive data like mobile numbers.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"Body\":\"args after evaluation: step1 {\\\"name\\\":\\\"ABC\\\",\\\"gender\\\":\\\"M\\\",\\\"age\\\":25,\\\"mobileNumber\\\":\\\"*****\\\"}\",\"Timestamp\":\"2024-04-10T09:40:45.124Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"sample_app\",\"host.hostname\":\"4030f41a75cb\",\"process.pid\":3593},\"Attributes\":{\"event\":\"/helloworld.http.get\",\"workflow_name\":\"helloworld\",\"task_id\":\"step1\"}}\n{\"Body\":\"Executing handler step1 {\\\"name\\\":\\\"ABC\\\",\\\"gender\\\":\\\"M\\\",\\\"age\\\":25,\\\"mobileNumber\\\":\\\"*****\\\"}\",\"Timestamp\":\"2024-04-10T09:40:45.124Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"sample_app\",\"host.hostname\":\"4030f41a75cb\",\"process.pid\":3593},\"Attributes\":{\"event\":\"/helloworld.http.get\",\"workflow_name\":\"helloworld\",\"task_id\":\"step1\"}}\n{\"Body\":\"Result of _executeFn step1 {\\\"name\\\":\\\"ABC\\\",\\\"gender\\\":\\\"M\\\",\\\"age\\\":25,\\\"mobileNumber\\\":\\\"*****\\\"}\",\"Timestamp\":\"2024-04-10T09:40:45.130Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"sample_app\",\"host.hostname\":\"4030f41a75cb\",\"process.pid\":3593},\"Attributes\":{\"event\":\"/helloworld.http.get\",\"workflow_name\":\"helloworld\",\"task_id\":\"step1\"}}\n{\"Body\":\"Result of _executeFn add_mobileNumber_transformation_step2 {\\\"request_data\\\":{\\\"payload\\\":{\\\"data\\\":{\\\"body\\\":{\\\"mobileNumber\\\":\\\"*****\\\"}}}}}\",\"Timestamp\":\"2024-04-10T09:40:45.190Z000000\",\"SeverityNumber\":9,\"SeverityText\":\"INFO\",\"Resource\":{\"service.name\":\"sample_app\",\"host.hostname\":\"4030f41a75cb\",\"process.pid\":3593},\"Attributes\":{\"event\":\"/helloworld.http.get\",\"workflow_name\":\"helloworld\",\"task_id\":\"add_mobileNumber_transformation_step2\"}}\n{\"Body\":\"this.id: hello_world, output: {\\\"request_data\\\":{\\\"payload\\\":{\\\"data\\\":{\\\"body\\\":{\\\"mobileNumber\\\":\\\"*****\\\"}}}}}\",\"Timestamp\":\"2024-04-10T09:40:45.191Z000000\",\"SeverityNumber\":5,\"SeverityText\":\"DEBUG\",\"Resource\":{\"service.name\":\"sample_app\",\"host.hostname\":\"4030f41a75cb\",\"process.pid\":3593},\"Attributes\":{\"event\":\"/helloworld.http.get\",\"workflow_name\":\"helloworld\",\"task_id\":\"hello_world\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Response Event in YAML\nDESCRIPTION: This snippet shows the definition of an HTTP response event. It includes the event naming convention, data schema, and example response structure.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/events.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndo_KYC.__http.post.response: #this URI can be customized. By default eventName.response is the actual response event.\n  # __handler: __http.response_handler # provided by the framework. No need to specify here\n  __data: # Bank API POST url is: /create_loan/${pan}/?user_id=${user_id} & body takes {user_name, address}\n    __example:\n        body:\n          user_id: 1\n        headers:\n    __schema: #Validation will happen after recieving and before sending out event. In case of HTTP channel, payload will have metadata.http.{headers, params, query}\n    # Schema can be in any shape, which is supported by the event handler attached to this event\n        200: *200-json-schema\n        400: *400-json-schema\n        500: *500-json-schema\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticgraph Datasource (elasticgraph1.yaml) in YAML\nDESCRIPTION: Defines an Elasticgraph datasource configuration in YAML format. Specifies the type as `elasticgraph`, the relative path to schema configuration files (`schema_backend`), and flags for enabling/disabling Elasticgraph's `deep` search and Elasticsearch's `collect` features.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  type: elasticgraph\\n  schema_backend: ./eg_config/eg1/ # relative path to config files\\n  deep: false # deep feature of Elasticgraph to use graph algorithms\\n  collect: true # collect feature of elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Project-Level Batching Configuration for CRUD Queries (TOML)\nDESCRIPTION: This snippet shows how to use a TOML configuration file to specify batching behavior for CRUD query categories in a Godspeed project. You can enable/disable batching globally, set batch sizes, and tune per-query-type timeouts in milliseconds. This file must exist at 'config/collect.toml' and guides how queries are grouped for optimal throughput and response characteristics.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/intro.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n//Project level setting for batching.\n//Specify the batch size or timeout, for every query category\n\nnoBatch = false // Can be set to true, in which case batching will not happen by default.\n[batchSizes]\n  find = 20\n  create = 20\n  get = 20\n  update = 20\n  delete = 20\n[timeouts] //in milli seconds\n  find = 20\n  create = 20\n  get = 20\n  update = 20\n  delete = 20\n\n```\n\n----------------------------------------\n\nTITLE: Implementing CRON Event Handler\nDESCRIPTION: Workflow implementation for handling CRON events with logging functionality.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: this workflow will be running every minute\ntasks:\n  - id: print\n    description: print every\n    fn: com.gs.log\n    args:\n      level: info\n      data: HELLO from CRON\n```\n\n----------------------------------------\n\nTITLE: Uploading Files via Express Plugin in YAML\nDESCRIPTION: This YAML example outlines configuring an event for uploading files with a maximum file size of 50MB. Defines the structure of the HTTP POST request with multipart/form-data to handle file uploads.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./helloworld:\n  fn: helloworld\n  body:\n    content:\n      multipart/form-data:\n        schema:\n          type: object\n          properties:\n            fileName:\n              type: string\n              format: binary\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Updating an Entity - Godspeed API - JSON\nDESCRIPTION: Illustrates updating an entity (event) using complex update instructions, including set, push, addToSet, and unset operations, following the js-object-updater API. Requires correct _id, _type, and valid update object according to the referenced API. Input: JSON payload specifying entity to update and update instructions. Output: Response with status and updated data or error on failure.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/CRUD API.md#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  _id: 'AVeawbnNW2vhiwtp9F2D',\n  _type: 'event',\n  update: {\n    set: {\n      title: 'Finding Common Ground',\n      x: [1, 2],\n      yString: ['Music']\n    },\n    push: {\n      x: 567,\n      yString: ['for', 'life']\n    },\n    addToSet: {\n      x: [567],\n      yString: ['for']\n    },\n    unset: [\n      'y'\n    ]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variable Values in PowerShell\nDESCRIPTION: Demonstrates setting environment variables for the current PowerShell session using the $env: prefix, allowing the application to access the configuration at runtime.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/config.md#2025-04-22_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$env:JWT_SECRET=\"mysecret\"\n$env:JWT_ISS=\"mycompany\"\n```\n\n----------------------------------------\n\nTITLE: On-the-Fly Read-Time Joins via API Query - JSON\nDESCRIPTION: This snippet provides an example of specifying read-time join requirements directly in the API query as a JSON object. The joins object describes which fields and nested fields should be included in the response. Dependencies: ElasticGraph API supporting such structured join queries. Key parameters: field paths and nested field configuration within the 'joins' parameter. Inputs: JSON query. Outputs: JSON with joined fields expanded.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\t  \"joins\": {\n\t\t  \"name\": 1,\n\t\t  \"city.name\": 1,\n\t\t  \"city.state.name\": 1,\n\t\t  \"city\": { // Same effect as above two lines\n\t\t\t  \"name\": 1,\n\t\t\t  \"state\": {\n\t\t\t\t  \"name\": 1\n\t\t\t  }\n\t\t  }\n\t  }\n\t  }\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Parallel Iteration with com.gs.each_parallel in YAML\nDESCRIPTION: This snippet shows how to implement error handling in com.gs.each_parallel at both task level and loop level. Task-level errors affect only current value's execution, while loop-level errors are triggered only when all tasks for all values fail.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: For each sample\n  description: Here we transform the response of for loop\n  tasks:\n    - id: each_parallel_step1\n      description: for each\n      fn: com.gs.each_parallel\n      value: [1, 2, 3, 4]\n      tasks:\n        - id: each_task1\n          fn: com.gs.transform\n          args: <% 'each_task1 ' + task_value %>\n          on_error: # on_error at task level\n            continue: false\n            response: <%Coffee/JS expression%> | String\n        - id: each_task2\n          fn: com.gs.transform\n          args: <% 'each_task2 ' + task_value %>\n      on_error: # on_error at loop level\n        continue: true\n        response: <%Coffee/JS expression%> | String\n    - id: each_parallel_step2\n      description: return the response\n      fn: com.gs.transform\n      args: <% outputs.each_parallel_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Entity Configuration in TOML\nDESCRIPTION: This configuration snippet defines the schema of an entity in TOML format, specifying the main database for the entity, field types, multilingual support, and indexing strategies. Dependencies include a PostgreSQL and Elasticsearch installation for optimal operation and data syncing. The entity schema is used to auto-generate database tables/indices and manage migrations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/model-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\nsstDB = postgres //The main DB for this entity as its SST.\nAll writes will happen here first, and later the other DBs\nwill get eventually (automatically) synced through CDC mechanism.\n\n[name]\ntype = 'String'\nenum = ['value1', 'value2']\nmultiLingual = true\n[name.postgres]\nsortable = true //Will create index for this to sort on, in PG\n[name.elasticsearch] //Create appropriate indices in ES for\nthe queries we wish to do on this field\nautoSuggestion = true\nexactMatch = true\nsortable = true\n```\n\n----------------------------------------\n\nTITLE: Implementing DB Query Authorization in Godspeed DSL\nDESCRIPTION: This snippet demonstrates how to implement authorization for database queries in Godspeed DSL. It shows the structure for calling an authorization function before executing a database query.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authorization/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: datastore demo\ntasks:\n  - id: find_user\n    description: find users\n    authz:\n      fn: com.jfs.auth\n      args: <% inputs %>\n    fn: datasource.mongo.user.findMany\n    args:\n      data:\n        include: <% inputs.body.include %>\n        where: <% inputs.body.where %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Highlight React Component (Commented Out) in JavaScript\nDESCRIPTION: This commented-out JavaScript code defines a simple React functional component named `Highlight`. It accepts `children` and `color` props and renders a `<span>` element with inline styles for background color, border radius, text color, font size, padding, and cursor style. It's intended for highlighting text within a React application but is currently inactive in the documentation source.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/serverless workflows/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '0px',\n      color: 'black',\n      fontSize:'22px',\n      padding: '5px',\n      cursor: 'pointer',\n    }}\n   >\n    {children}\n  </span>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticgraph Datasource (elasticgraph2.yaml) in YAML\nDESCRIPTION: Defines a second Elasticgraph datasource configuration, similar to `elasticgraph1.yaml`. It specifies the type, schema location, and feature flags (`deep`, `collect`).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: elasticgraph\\nschema_backend: ./eg_config/eg1/ # relative path to config files\\ndeep: false # deep feature of Elasticgraph to use graph algorithms\\ncollect: true # collect feature of elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Defining Godspeed Workflow for Kafka Producer YAML\nDESCRIPTION: YAML configuration for the `kafka-publish` workflow function defined in `src/functions/kafka-publish.yaml`. This workflow consists of a single task that invokes the `datasource.kafka.producer` function. It passes the target Kafka `topic` (\"publish-producer1\") and the `message` extracted from the input body (`<% inputs.body.message %>`) as arguments.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Kafka Eventsource.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: kafka-publish\nsummary: kafka publish message\ntasks:\n    - id: publish\n      fn: datasource.kafka.producer\n      args:\n        topic: \"publish-producer1\"\n        message: <% inputs.body.message %>\n```\n\n----------------------------------------\n\nTITLE: Multilingual Field Example in Entity Document - JSON\nDESCRIPTION: This snippet displays how multilingual data is stored for an entity's field in ElasticGraph. Each language gets its own object containing the field value. No dependencies, serves as a reference for structuring entities with multilingual support. Inputs: entity field data per language. Outputs: keyed by language code. Limitation: field paths must include the specific language to access or search data.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"english\": {\n\t\"name\": \"His Holiness the 14th Dalai Lama\"\n},\n\"tibetan\": {\n\t\"name\": \"ྋགོང་ས་སྐུ་ཕྲེང་བཅུ་བཞི་པ།\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Batched and Non-Batched CRUD Operations in Godspeed SDK (JavaScript)\nDESCRIPTION: This snippet shows how to invoke batched or non-batched database operations from JavaScript using the Godspeed SDK. The '.collect()' method is used to enable batching for CRUD operations, while omitting it or setting 'noBatch: true' overrides batching defaults. This is relevant for both direct SDK usage in JS and when exposing via microservices, and interacts with batching settings from the configuration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/intro.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nWhen invoking through JS\n  gs.find.collect() //Executes with batching\n\n//When exposing the function externally through a microservice, it is batched by default\n  gs.find({\n    query: {}\n  })\n```\n\nLANGUAGE: javascript\nCODE:\n```\n//When invoking through JS, don't add .collect() to the CRUD function calls\n  gs.find()\n  //When exposing the function externally through a microservice, you can add noBatch: true\n  gs.find({\n    noBatch: true\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining a Kafka Datasource Configuration - YAML\nDESCRIPTION: Demonstrates a sample configuration file for a Kafka datasource. This YAML snippet sets the connector type to kafka, assigns a client_id (used for Kafka client identification), and lists available broker endpoints for the Kafka cluster. Required dependencies include the Kafka client supported by the Godspeed framework. The 'type' field selects the connector, 'client_id' identifies the client for metrics/tracing, and 'brokers' is a list of Kafka bootstrap servers. The file is typically named kafka1.yaml and placed in src/datasources.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/kafka.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: kafka\\nclient_id: my_service\\nbrokers: [ \\\"kafka:9092\\\" ]\\n\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Sequential Iteration with com.gs.each_sequential in YAML\nDESCRIPTION: This snippet shows how to implement error handling in com.gs.each_sequential at both task level and loop level. Task-level errors can be configured to continue or break the loop, while loop-level errors are triggered only when all tasks fail.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: For each sample\n  description: Here we transform the response of for loop\n  tasks:\n    - id: each_sequential_step1\n      description: for each\n      fn: com.gs.each_sequential\n      value: [1, 2, 3, 4]\n      tasks:\n        - id: each_task1\n          fn: com.gs.transform\n          args: <% 'each_task1 ' + task_value %>\n          on_error: # on_error at task level\n            continue: false\n            response: <%Coffee/JS expression%> | String\n      on_error: # on_error at loop level\n        continue: true\n        response: <%Coffee/JS expression%> | String\n    - id: each_sequential_step2\n      description: return the response\n      fn: com.gs.transform\n      args: <% outputs.each_sequential_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP POST Event for Email Sending in Godspeed (YAML)\nDESCRIPTION: This YAML snippet defines an HTTP POST event in the Godspeed framework used to trigger the mail sending workflow. The event listens on the '/mail' endpoint and expects a JSON body with a 'name' field. On success, it responds with a 200 HTTP status and a JSON schema object. This event is linked to the 'mail_send' function, serving as the entry point for the email sending process.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Nodemailer Datasource.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nhttp.post./mail:\\n  summary: sending_mail\\n  description: sending_mail\\n  fn: mail_send\\n  body:\\n      type: object\\n      properties:\\n        name:\\n          type: string\\n  responses:\\n    200:\\n      content:\\n        application/json:\\n          schema:\\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Godspeed UI Kit: Successful Project Generation Output\nDESCRIPTION: Shows the final console messages indicating the successful completion of the project scaffolding. It confirms that the React Query fetch hooks were generated and written to the appropriate files within the new project directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n> npx @godspeedsystems/uikit react-web\n\n[WARN] Importing from 'langchain' is deprecated. See https://js.langchain.com/docs/getting-started/install#updating-from-0052 for upgrade instructions.\n┌  Generate front-end boilerplate using Godspeed\n│\n◇  What is the name of your project?\n│  gskit-app-godspeedTrial\n{ name: 'gskit-app-godspeedTrial' }\n│\n◇  Where is your OpenAPI spec file located?\n│  ./api.yaml\n│\n◒  Cloning template.cloned godspeedsystems/gskit-react#main to ./gskit-app-godspeedTrial\n◇  Template cloned\n│\n◇  Pick a Data fetching library\n│  React Query\n│\n◇  react-query fetch hooks generated\n│\n◇  Fetch hooks written to file\n```\n\n----------------------------------------\n\nTITLE: Generate CRUD APIs Command\nDESCRIPTION: Command to generate CRUD APIs based on Prisma schema\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLite.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Time Joins in ElasticGraph\nDESCRIPTION: Example configuration for defining read-time joins in ElasticGraph. This shows how to specify which related entity fields should be included when fetching data.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n[event]\nsessions{title, description}\nspeakers.person{name}\nspeakers.primaryLanguages{name}\n```\n\n----------------------------------------\n\nTITLE: Example JWT Authorization Header\nDESCRIPTION: Presents a complete example of an HTTP `Authorization` header containing a sample encoded JWT (`eyJhbGciOi...`). This demonstrates the format clients should use when sending a pre-generated token (e.g., from jwt.io or an auth service) that matches the server's JWT configuration (issuer, audience, secret).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/authen-author.md#2025-04-22_snippet_4\n\nLANGUAGE: PlainText\nCODE:\n```\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJtcy5zYW1wbGUuY29tIiwiYXVkIjoic2FtcGxlLmNvbSJ9._1fpM6VYq1rfKdTEqi8BcPTm8KIm4cNP8VhX0kQOEts\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Operations with com.gs.redis in YAML\nDESCRIPTION: This snippet shows how to use the com.gs.redis function to read and write data to a Redis datasource. It demonstrates setting a key-value pair and then retrieving that value using standard Redis client functions.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: demonstration of redis functions\nid: accessing_redis\ntasks:\n  - id: store_value_to_key\n    description: Writing user info in redis with key user\n    fn: com.gs.redis\n    args:\n      config:\n        method: set\n      data:\n        key: user\n        value: Adam\n  - id: retrieve_user_set_in_previous_task\n    description: Retriving user from redis\n    fn: com.gs.redis\n    args:\n      config:\n        method: get\n      data:\n        key: user\n```\n\n----------------------------------------\n\nTITLE: Illustrating Kafka Example Project Structure\nDESCRIPTION: This depicts the project structure for the Kafka data source example. It shows the locations for the Kafka datasource configuration (`kafka.yaml`), type definition (`kafka.ts`), related event definitions (`kafka_publish_event.yaml`, `kafka_consumer_event.yaml`), event source files, and associated function workflows (`kafka-publish.yaml`, `kafka-consume.yaml`) within the `src` directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource_old.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n    .\n    ├── src\n        ├── datasources\n        │   ├── types\n        │   |    └── kafka.ts\n        |   |\n        │   └── kafka.yaml\n        │\n        ├── events\n        |   |\n        │   ├── kafka_publish_event.yaml\n        |   |\n        |   └── kafka_consumer_event.yaml\n\n        ├── eventsources\n        │   ├── types\n        │   |    └── kafka.ts\n        |   |\n        │   └── kafka.yaml\n        |\n        └── functions\n            |\n            ├── kafka-publish.yaml\n            |\n            └── kafka-consume.yaml\n```\n\n----------------------------------------\n\nTITLE: Sample Error Log Structure in JSON for Godspeed Systems\nDESCRIPTION: This JSON snippet illustrates the structure of error logs in a Godspeed Systems application. It includes timestamp, severity, trace information, resource details, and attributes that provide context about the error such as workflow name, event, error type, and error message.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{Timestamp: \"1688563866502000000\"\nSeverityNumber: 17\nSeverityText: \"ERROR\"\nTraceId: \"7563f0bd1e6c6508e58a4d1de1464635\"\nSpanId: \"c4c65132ef79982f\"\nTraceFlags: \"01\"\nResource: {\n  \"service.name\": \"sample_app\",\n  \"host.hostname\": \"6295f63d9181\",\n  \"process.pid\": 8455\n}\nAttributes: {\n  \"event\": \"/helloworld\",\n  \"workflow_name\": \"helloworld\",\n  \"file_name\": \"helloworld\",\n  \"msgparameter\": {\n    \"fruit\": \"apple\"\n  },\n  \"task_id\": \"response_validation_error_handler\",\n  \"error\": {\n    \"error_type\": \"enter your custom error type here\",\n    \"error_message\": \"xyz value is required\"\n  }\n}}\n```\n\n----------------------------------------\n\nTITLE: Godspeed UI Kit: Project Generation Progress Output\nDESCRIPTION: Displays the console output during the project generation phase. It shows the cloning of the base React template (`gskit-react`), confirmation of the chosen data fetching library (React Query), and the start of the fetch hook generation process based on the provided OpenAPI spec.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n> npx @godspeedsystems/uikit react-web\n\n[WARN] Importing from 'langchain' is deprecated. See https://js.langchain.com/docs/getting-started/install#updating-from-0052 for upgrade instructions.\n┌  Generate front-end boilerplate using Godspeed\n│\n◇  What is the name of your project?\n│  gskit-app-godspeedTrial\n{ name: 'gskit-app-godspeedTrial' }\n│\n◇  Where is your OpenAPI spec file located?\n│  ./api.yaml\n│\n◒  Cloning template.cloned godspeedsystems/gskit-react#main to ./gskit-app-godspeedTrial\n◇  Template cloned\n│\n◇  Pick a Data fetching library\n│  React Query\n│\n◓  Generating Fetch Hooks...\n```\n\n----------------------------------------\n\nTITLE: Creating a Highlight React Component in JavaScript\nDESCRIPTION: Defines a React functional component `Highlight` that accepts `children` and a `color` prop. It renders the children within a `<span>` tag, styled with the provided background color, black text, padding, zero border radius, and a pointer cursor. This component is likely used within the documentation framework (Docusaurus) for visually highlighting text segments.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/infra-and-system/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '0px',\n      color: 'black',\n      padding: '5px',\n      cursor: 'pointer',\n    }}\n   >\n    {children}\n  </span>\n);\n```\n\n----------------------------------------\n\nTITLE: Storing Denormalized Speaker Relationships in ElasticGraph\nDESCRIPTION: Example of how denormalized speaker relationships are stored within an ElasticGraph event document, demonstrating the JSON document structure with nested entities and multilingual support.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_index\": \"events\",\n  \"_type\": \"event\",\n  \"_id\": \"294464\",\n  \"_version\": 4,\n  \"found\": true,\n  \"_source\": {\n    \"speakers\": [\n      {\n        \"_id\": \"c6c35e3b21815a4209054505ac5e1680a954efdf\",\n        \"own\": true,\n        \"fields\": {\n          \"person\": {\n            \"_id\": \"1\",\n            \"_version\": 1,\n            \"fields\": {\n              \"english\": {\n                \"name\": \"His Holiness the 14th Dalai Lama\"\n              },\n              \"tibetan\": {\n\t\t\t\t  \"name\" : \"ང་ས་སྐུ་ཕྲེང་བཅུ་བཞི་\"\n\t\t\t  }\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling HTML Table with CSS in Markdown\nDESCRIPTION: This snippet defines CSS styles for a heat map table, including background colors for specific rows and general table formatting. The styles are commented out in the Markdown file.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/tech-stack.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- <style>\n.heatMap {\n    width:70%;\n    text-align: center;\n}\n.heatMap th {\nbackground: grey;\nword-wrap: break-word;\ntext-align: center;\n}\n .heatMap tr:nth-child(1) { background: red; }\n.heatMap tr:nth-child(2) { background: orange; }\n.heatMap tr:nth-child(3) { background: green; }\n<!-- </style> -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Graphql in YAML\nDESCRIPTION: This snippet demonstrates the configuration of an Apollo Graphql event source in YAML format. It includes settings like the Graphql type and port, without support for Swagger or file uploads. Key parameters include `authn`, `authz`, and validation error handlers, which are placeholders for authentication, authorization, and request/response validations respectively.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-types/graphql-events.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: graphql\nport: 4000\n# eventsource level default settings (can be overriden at event level)\nauthn:\nauthz:\non_request_validation_error:\non_response_validation_error:\n\n```\n\n----------------------------------------\n\nTITLE: Sample Log Outputs\nDESCRIPTION: The purpose of these logs is to display sample output from Godspeed System logs, illustrating different scenarios including data retrieval and function loading processes.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[14:46:00.881] DEBUG: Datasources found in src/datasources [\"api\",\"mem-cache\"]\n    section: \"loading_functions\"\n[14:46:00.882] DEBUG: Starting to parse and load GSFunction id: first_task name: helloworld\n    parent: {\n      \"workflow_name\": \"helloworld\",\n      \"task_id\": \"helloworld\"\n    }\n    workflow_name: \"helloworld\"\n    task_id: \"first_task\"     \n```\n\n----------------------------------------\n\nTITLE: SQLite Connection URL Example\nDESCRIPTION: Example of a SQLite connection URL pointing to a database file\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLite.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfile:./testing.db\n```\n\n----------------------------------------\n\nTITLE: Dynamic Function Execution Example\nDESCRIPTION: Shows how to use com.gs.dynamic_fn to execute workflows dynamically. Includes event definition, dynamic function implementation, and the actual workflow being called.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n'/sum.http.get':\n  fn: com.jfs.sum_dynamic\n  summary: A workflow to sum x and y\n  description: This workflow sums two integers\n  params:\n    - name: x\n      in: query\n      required: true\n      allow_empty_value: false\n      schema:\n        type: string\n\n    - name: y\n      in: query\n      required: true\n      allow_empty_value: false\n      schema:\n        type: string\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Dynamic function to call com.jfs.sum_workflow.yaml\ndescription: This function dynamically is taking workflow name and executing it at the runtime.\ntasks:\n  - id: sum_dynamic_step1\n    description: add two numbers\n    fn: com.gs.dynamic_fn\n    tasks:\n      - id: get_wf_name_step1\n        fn: com.gs.transform\n        args: com.jfs.sum_workflow\n      - id: get_wf_name_step2\n        fn: com.gs.transform\n        args: <% outputs.get_wf_name_step1.data %>\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Summing x + y\ndescription: Here we sum two hardcoded x and y values. Feel free to try using API inputs from body or params!\ntasks:\n  - id: sum_step1\n    description: add two numbers\n    fn: com.gs.return\n    args: |\n     <%\n       +inputs.query.x + +inputs.query.y\n     %>\n```\n\n----------------------------------------\n\nTITLE: Godspeed Plugin Add Interactive Prompt Output\nDESCRIPTION: Displays the interactive interface shown when `godspeed plugin add` is run. It presents a list of available Godspeed plugins (e.g., AWS, Excel, Kafka datasources, Cron eventsource) for the user to select and install.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────────┬────────────────────────────────────────────────────────────────────────────────┐\n│      │ Name                                   │ Description                                                                    │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ aws-as-datasource                      │ aws as datasource plugin for Godspeed Framework                                │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ excel-as-datasource                    │ excel as datasource plugin for Godspeed Framework                              │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ mailer-as-datasource                   │ mailer as datasource plugin for Godspeed Framework                             │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ kafka-as-datasource-as-eventsource     │ kafka as datasource-as-eventsource plugin for Godspeed Framework               │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ cron-as-eventsource                    │ Cron as eventsource plugin for Godspeed Framework                              │\n└──────┴────────────────────────────────────────┴────────────────────────────────────────────────────────────────────────────────┘\n\n```\n\n----------------------------------------\n\nTITLE: Defining AI Workflow in YAML - YAML\nDESCRIPTION: Demonstrates a YAML-based Godspeed workflow (prompt.yaml) that encapsulates a single task invoking the ChatGPT datasource's chat function with input mapping. Requires appropriate datasource, event, and function setup. Input expects a prompt field extracted from the HTTP body using template syntax. Output is the AI response as received from the specified datasource method.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: \"Get AI-driven response from ChatGPT with configurations from YAML file\"\ntasks:\n  - id: request_chatgpt\n    fn: datasource.chatgpt.chat\n    args:\n      prompt: <% inputs.body.prompt %>\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Output using Bracket Notation Scripting (YAML/JS)\nDESCRIPTION: This YAML snippet demonstrates accessing the output of a parallel task whose ID (`1st`) is not a standard JavaScript identifier. The `step2` task uses inline scripting with bracket notation (`<% outputs[\"1st\"] %>`) to retrieve the output from the task named `1st` within the preceding parallel execution block.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/inline-scripting/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: parallel function\n  tasks:\n    - id: parallel\n      fn: com.gs.parallel\n      tasks:\n        - id: 1st\n          fn: com.gs.return\n          args: \"నమస్కారం\"\n\n        - id: 2nd\n          fn: com.gs.return\n          args: \"नमस्ते\"\n\n        - id: 3rd\n          fn: com.gs.return\n          args: \"Hello\"\n    - id: step2\n      fn: com.gs.return\n      args: |\n        <% outputs[\"1st\"] %>\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed CLI using npm\nDESCRIPTION: This shell command installs the Godspeed CLI globally using npm. The user must have Node.js and npm pre-installed on their system to execute this command. Once installed, the `godspeed` command becomes available in the terminal for managing Godspeed projects.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @mindgrep/godspeed\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Definition for SQLite\nDESCRIPTION: Setting up the database URL in environment file\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLite.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL= file:./testing.db\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity - Godspeed API - JSON\nDESCRIPTION: Provides an example payload for creating a new entity (borrower_profile) with multilingual and linked object fields. The snippet demonstrates field population, linkage, and optional id provision. Dependencies: pre-existing model specification; correct _type and body structure required. The entity can link to another entity (e.g., product) using its _id. Input: JSON payload describing the object. Output: Confirmation with new _id and status or error object on failure.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/CRUD/CRUD API.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  '_type': 'borrower_profile',\n  'body': {\n    'english': {\n      'name': 'Deepti'\n    },\n    'hindi': {\n      'name': 'दीप्ति'\n    },\n    pan: 'AKJPG810**',\n    pincode: 176057,\n    product: { //While creating an entity, it can also be linked to an existing entity, by their valid relationship\n      _id: 5 //Link to the product with id 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Open Telemetry Observability - Godspeed CLI - Bash\nDESCRIPTION: This bash snippet shows how to disable observability features in a Godspeed project using the 'godspeed otel disable' command. Upon execution, it uninstalls the '@godspeedsystems/tracing' package, sets the OTEL_ENABLED environment variable to false, and halts auto-instrumentation, metrics, and log exposure initiated by enabling observability. Only the Godspeed CLI is required as a dependency. The output confirms successful deactivation and displays project branding.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed otel disable\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\notel uninstalled successfully!\nObservability has been disabled in the project\n```\n\n----------------------------------------\n\nTITLE: Default YAML Configuration for Static Variables\nDESCRIPTION: Defines static variables along with their default values used within the Godspeed framework. This YAML example highlights server configurations, logging levels, and other pivotal settings that stable deployments rely on.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/config.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  redact: # ['a.b.c', 'a.b.*', 'req.headers', 'mobileNumber'] #pino redact rules. Default null.\n  level: debug #by default info\n  sync: true #By default sync is false. For debugging, keep it true. For performance keep it false.\n  timestamp: stdTimeFunctions.isoTime #Pino date formats\n  bindings: # should pid and hostname be enabled in pino log bindings.\n    pid: false\n    hostname: true \ndefaults:\n  lang: coffee #default language of inline scripting e.g. js/coffee\n  on_error:\n    continue: false # default behavior of on_error.continue property\nserver_url: https://api.example.com:8443/v1/api\nhttpbin: # sample api datasource url\n  base_url: https://httpbin.org\n```\n\n----------------------------------------\n\nTITLE: Defining Kafka Publish Event Trigger in YAML\nDESCRIPTION: This YAML configuration (`src/events/kafka_publish_event.yaml`) defines an event listener. It maps an HTTP POST request on the path `/kafka-pub` to trigger the `kafka-publish` workflow function. It specifies the expected JSON request body structure (requiring a `message` property) and defines the schema for a successful (200) JSON response.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource_old.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n'http.post./kafka-pub':\n  fn: kafka-publish\n  body:\n    content:\n      application/json:\n        schema:\n          type: object\n          properties:\n            message:\n              type: string\n          required: ['message']\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Logic with com.gs.if in YAML\nDESCRIPTION: Demonstrates how to use com.gs.if for conditional execution in workflows. It includes examples of if-elif-else structures and condition evaluation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: The subtasks will be triggered if the condition returns true\ndescription: Here in each task the condition will be checked,if condition turns true then the corresponding task will be triggered and returns the output \ntasks:\n  - id: if\n    fn: com.gs.if\n    condition: <% inputs.query.greet == 'hello' %>\n    tasks:\n      - id: step1\n        fn: com.gs.return\n        args: 'Hello!'\n\n  - id: elif1\n    fn: com.gs.elif\n    condition: <% inputs.query.greet == 'pavan' %>\n    tasks:\n      - id: step2\n        fn: com.gs.return\n        args: 'Hello pavan'\n\n  - id: elif2\n    fn: com.gs.elif\n    condition: <% inputs.query.greet == 'hari' %>\n    tasks:\n      - id: step3\n        fn: com.gs.return\n        args: 'Hello Hari'\n\n  - id: else\n    fn: com.gs.else\n    tasks:\n      - id: step4\n        fn: com.gs.return\n        args: 'Hi developer'\n```\n\n----------------------------------------\n\nTITLE: Displaying Godspeed CLI Help\nDESCRIPTION: Executes the base `godspeed` command without any arguments. This action displays the main help menu, listing available commands and general usage information.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed\n```\n\n----------------------------------------\n\nTITLE: Defining Kafka Publish Workflow in YAML\nDESCRIPTION: This YAML file (`src/functions/kafka-publish.yaml`) defines the `kafka-publish` workflow. It consists of a single task named `publish` which invokes the `producer` method of the `datasource.kafka` data source. It passes a hardcoded `topic` (\"publish-producer1\") and the `message` extracted from the input body (`<% inputs.body.message%>`) as arguments.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource_old.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nid: kafka-publish\nsummary: kafka publish message\ntasks:\n    - id: publish\n      fn: datasource.kafka.producer\n      args:\n        topic: \"publish-producer1\"\n        message: <% inputs.body.message%>\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow to Process Callbacks in YAML\nDESCRIPTION: Details a workflow for processing callback data using YAML configuration. The workflow consists of tasks for validating callback data, processing it, and responding with a success message. Parameters include 'data' and 'status' which are extracted from the callback payload. Success is indicated with a 200 status response.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/callbacks.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nid: handleCallback\nsummary: Process callback data from external service\ntasks:\n  - id: validate_callback\n    fn: validateCallbackData\n    args:\n      data: <% inputs.body.data %>\n      status: <% inputs.body.status %>\n\n  - id: process_data\n    fn: processData\n    args:\n      data: <% validate_callback.result %>\n\n  - id: respond_success\n    args:\n      statusCode: 200\n      body:\n        message: Callback received and processed successfully\n```\n\n----------------------------------------\n\nTITLE: Configuring CRON Event Schedule\nDESCRIPTION: CRON event configuration example showing schedule expression and handler function.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"* * * * *.cron.Asia/Kolkata\":\n  fn: com.every_minute\n```\n\n----------------------------------------\n\nTITLE: Viewing Open Telemetry Command Help - Godspeed CLI - Bash\nDESCRIPTION: This bash code snippet shows how to access help information for the 'godspeed otel' command using 'godspeed help otel'. It outputs usage instructions, available options, and subcommands for enabling or disabling observability in a Godspeed project. This snippet does not require dependencies other than the Godspeed CLI and a compatible terminal. It is intended for users seeking guidance on controlling observability features via Godspeed's built-in otel (Open Telemetry) integration.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed help otel\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\nUsage: Godspeed CLI otel [options] [command]\nenable/disable Observability in Godspeed.\n\nOptions:\n  -h, --help      display help for command\n\nCommands:\n  enable          enable Observability in project.\n  disable         disable Observability in project.\n  help [command]  display help for command\n\nFor detailed documentation visit https://godspeed.systems\n```\n\n----------------------------------------\n\nTITLE: Godspeed UI Kit: OpenAPI Specification File Prompt\nDESCRIPTION: Shows the second prompt from the UI Kit, asking for the file path to the OpenAPI (Swagger) specification file (`.yaml` or `.json`). This file is essential as the AI agent uses it to understand the API structure and generate corresponding fetch hooks.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n> npx @godspeedsystems/uikit react-web\n[WARN] Importing from 'langchain' is deprecated. See https://js.langchain.com/docs/getting-started/install#updating-from-0052 for upgrade instructions.\n┌  Generate front-end boilerplate using Godspeed\n│\n◇  What is the name of your project?\n│  gskit-app-godspeedTrial\n{ name: 'gskit-app-godspeedTrial' }\n│\n◆  Where is your OpenAPI spec file located?\n│  ./api.yaml_\n└\n```\n\n----------------------------------------\n\nTITLE: Implementing a MongoDB Create Operation in JavaScript Workflow\nDESCRIPTION: This JavaScript workflow handles creating a MongoDB document. It prepares arguments for the datasource, executes the operation using executeDatasource, and returns a standardized GSStatus response with appropriate success or error information.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GSStatus, executeDatasource } = require('#core/interfaces');\n\nmodule.exports = async (ctx, fn) => {\n  const { inputs } = ctx;\n  try {\n    inputs.body = inputs.data.body;\n\n    let args = {\n      datasource: 'mongo',\n      data: { data: inputs.body },\n      config: { method: 'Category.create' },\n    };\n\n    const responseData = await executeDatasource(\n      ctx,\n      fn['com.gs.datastore'],\n      args,\n    );\n    // return GSStatus response from a workflow\n    return new GSStatus(true, 200, undefined, responseData, undefined);\n\n  } catch (error) {\n    return new GSStatus(false, 500, undefined, error, undefined);\n  }\n};\n\nmodule.exports.id = 'main';\n```\n\n----------------------------------------\n\nTITLE: Invoking Datasource Clients from GSContext in JavaScript\nDESCRIPTION: Demonstrates calling a method on a MongoDB datasource client from the datasources property in GSContext. This JavaScript snippet performs a database create operation within a workflow step, using the event body as input data. Depends on datasources being properly configured and loaded in the project configuration, and the MongoDB client exposed by Godspeed.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/native-language-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\nconst { datasources} = ctx;\nconst responseData = await datasources.mongo.client.Restaurant.create({\n    data: inputs.body\n})\n\n```\n\n----------------------------------------\n\nTITLE: Plugin Remove Command Example\nDESCRIPTION: Example of removing a plugin using the plugin remove command\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed plugin remove\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n    ? Please select a eventsource/datasource plugin to remove.\n  ❯ @godspeedsystems/plugins-express-as-http\n    @godspeedsystems/plugins-prisma-as-datastore\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP Event Endpoint Configuration\nDESCRIPTION: This YAML snippet defines an HTTP event in a Godspeed project, which triggers the 'aws_list' function upon receiving a POST request. It accepts JSON objects within the request body and specifies the necessary responses.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/AWS Datasource.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"http.post./aws\":\n  fn: aws_list\n  body:\n    type: object\n  responses:\n    200:\n      content:\n         application/json:\n```\n\n----------------------------------------\n\nTITLE: Defining Language at Workflow Level in YAML\nDESCRIPTION: Demonstrates how to override global language configuration by specifying a language inside <coffee/js% %> tags within a workflow task.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    - id: httpbinCof_step2\n      fn: com.gs.transform\n      args: |\n          <coffee% if outputs.httpbinCof_step1.data.json.code == 200 then {\n              code: 200,\n              success: true,\n              data: outputs.httpbinCof_step1.data.json,\n              headers: outputs.httpbinCof_step1.data.headers\n          } else {\n              code: 500,\n              success: false,\n              message: 'error in httpbinCof_step1'\n          } %>\n```\n\n----------------------------------------\n\nTITLE: Removing a Godspeed Plugin (Interactive)\nDESCRIPTION: Executes the `godspeed plugin remove` command without specifying a plugin name. This triggers an interactive prompt where the user can select installed plugins to uninstall from the project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed plugin remove\n\n\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Definitions\nDESCRIPTION: This text-based format defines relationships between entities in a microservice project. Cardinalities of relationships (one-to-one, many-to-one, etc.) are represented using symbols. Proper maintenance of these definitions is required to ensure accurate data traversal in applications.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/data-at-flow-and-at-rest/model-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: Unknown\nCODE:\n```\nrelationNameFromAToB <> relationNameFromBToA\nentityTypeA <> entityTypeB //One to one\n\nrelationNameFromAToB <> relationNameFromBToA\n[entityTypeA] <> entityTypeB //Many to one\n\nrelationNameFromAToBs <> relationNameFromBToA\nentityTypeA <> [entityTypeB] //One to many\n\nrelationNameFromAsToBs <> relationNameFromBsToAs\n[entityTypeA] <> [entityTypeB] //many to many\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Button with React in Docusaurus Blog\nDESCRIPTION: This snippet demonstrates how to create a simple interactive button using React within a Docusaurus blog post. It requires Docusaurus with MDX support. The button shows an alert message when clicked. There are no additional dependencies other than standard React. The main parameter is the onClick event handler that defines the alert functionality.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/blog/2021-08-01-mdx-blog-post.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Exporting Mongoose Model Structure in TypeScript/JavaScript\nDESCRIPTION: Defines the required export structure for Mongoose model files located in the `datasources/<datasource_name>/models` directory. Each model file (either .ts or .js) must export an object containing a 'type' property (a string representing the model name used for access) and a 'model' property (the actual Mongoose Model object).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n    type: 'SomeModel', //The name by which you will access methods of this collection/model\n    model: SomeModel //The Mongoose Model\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Task-Level Error Handling with Nested Tasks\nDESCRIPTION: Shows advanced error handling pattern where error handling includes additional task execution instead of just custom responses. Demonstrates how to execute specific tasks when an error occurs.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: testing tsaks within workflow\ntasks:\n  - id: task_level_1 \n    fn: com.gs.transform \n    args: \n      success: false # if we use this args in transform function they will set as response \n      code: 500\n      data: \"task 1 executed\"\n    on_error: \n      continue: true \n      tasks:  \n        - id: on_error_task1\n          fn: com.gs.transform\n          args: \n            code: 400\n            data: \"on error task 1 executed\"\n    \n  - id: task_level_2\n    fn: com.gs.return\n    args: <% outputs.task_level_1 %>\n```\n\n----------------------------------------\n\nTITLE: DevOps Plugin Help Command\nDESCRIPTION: Help information for the devops-plugin command showing available subcommands\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed help devops-plugin\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n    Usage: Godspeed CLI devops-plugin [options] [command]\n\n    manage(add, remove, update) godspeed plugins for devops.\n\n    Options:\n    -h, --help      display help for command\n\n    Commands:\n    add             Add a godspeed devops plugin.\n    remove          Remove a godspeed devops plugin.\n    update          Update a godspeed devops plugin.\n    help [command]  display help for command\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for elasticsearch.toml Configuration\nDESCRIPTION: Illustrates the typical location (`config/backend/elasticsearch.toml`) for the `elasticsearch.toml` file used for backend data store configuration, including switching to OpenSearch.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nsample_project\\n└── config\\n      ├── backend\\n           └── elasticsearch.toml\n```\n\n----------------------------------------\n\nTITLE: Accessing the Swagger UI Endpoint\nDESCRIPTION: This URL pattern represents the local address where the Swagger UI for the running Godspeed application can be accessed. Replace `{port}` with the specific port number the application is configured to use. The Swagger UI allows developers to interact with and test the project's APIs.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/debugger-in-yaml.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nlocalhost:{port}/api-docs\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Connection URL Environment Variable\nDESCRIPTION: Demonstrates how to define the MySQL database connection URL as an environment variable named `DATABASE_URL` in a `.env` file. This practice keeps sensitive credentials out of the main codebase.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MySQL.md#2025-04-22_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"mysql://root:password@localhost:3306/yourdb\"\n```\n\n----------------------------------------\n\nTITLE: Calling Separate Authz Workflow in Godspeed Task (YAML)\nDESCRIPTION: This YAML file (`fetch_author.yaml`) demonstrates a Godspeed workflow task (`fetch_author`) that delegates authorization logic to a separate, reusable workflow named `authz_wf`. It passes the entire input context (`<% inputs %>`) to the authorization workflow for evaluation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Fetch author\ntasks:\n  - id: fetch_author\n    fn: datasource.mysql.author.findUnique\n    authz:\n      - fn: authz_wf\n        args: <% inputs %>\n    args:\n      where:\n        id: <% inputs.params.id %>\n```\n\n----------------------------------------\n\nTITLE: Adding Docker apt Repository (Ubuntu) - Shell\nDESCRIPTION: This command adds the Docker repository for Ubuntu distributions, dynamically resolving architecture and codename. It enables the latest Docker packages to be installed smoothly via apt.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \\\\\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\\\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Event Definition for Dynamic Function Execution in YAML\nDESCRIPTION: This snippet defines an HTTP GET endpoint for a dynamic function execution that will sum two integers. It specifies the required query parameters x and y that will be used in the summation operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n'/sum.http.get':\n  fn: com.jfs.sum_dynamic\n  summary: A workflow to sum x and y\n  description: This workflow sums two integers\n  params:\n    - name: x\n      in: query\n      required: true\n      allow_empty_value: false\n      schema:\n        type: string\n\n    - name: y\n      in: query\n      required: true\n      allow_empty_value: false\n      schema:\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Access Swagger UI in Godspeed\nDESCRIPTION: Instructions to access the Swagger UI associated with the Godspeed project at the /api-docs endpoint. Confirm that the server is running on the correct port and base URL.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:3000/api-docs\n```\n\n----------------------------------------\n\nTITLE: Adding Mongoose Plugin via Godspeed CLI\nDESCRIPTION: This command initiates the Godspeed plugin installation process through its interactive command-line interface. Users can select 'mongoose-as-datasource' from the list to add the plugin to their project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> godspeed plugin add\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────┬────────────────────────────────────────────────────────────────────┐\n│      │ Name                               │ Description                                                        │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ mongoose-as-datasource            │ Mongoose as a datasource plugin for Godspeed Framework             │\n└──────┴────────────────────────────────────┴────────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining a React Highlight Component (Commented Out) in JSX\nDESCRIPTION: This snippet contains a commented-out definition for a React functional component named `Highlight` written in JSX. The component is designed to wrap its `children` in a `<span>` element with inline styles provided, including background color (passed as a `color` prop), border radius, text color, font size, padding, and cursor style. As it is within HTML comments (`<!-- -->`), this code is currently inactive and not rendered.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<!--\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '0px',\n      color: 'black',\n      fontSize:'22px',\n      padding: '5px',\n      cursor: 'pointer',\n    }}\n   >\n    {children}\n  </span>\n);-->\n```\n\n----------------------------------------\n\nTITLE: Starting the Godspeed Service\nDESCRIPTION: Command to start the Godspeed service, making the API backend available for testing and use.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Datasource Block for PostgreSQL - Prisma\nDESCRIPTION: This snippet provides the datasource configuration block in a Prisma schema file for connecting to a PostgreSQL database. It references the DATABASE_URL environment variable for the connection string. The provider is set to 'postgresql', and the configuration is required for proper database connectivity within Prisma-powered projects.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/PostgreSQL.md#2025-04-22_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\") \n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Workflow in Godspeed DSL\nDESCRIPTION: This snippet shows the structure of an authorization workflow in Godspeed DSL. It includes steps for calling an authorization API and transforming the response to allow/deny format.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authorization/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Authorization workflow\ntasks:\n  - id: authz_step1\n    description: return allow/deny based upon user\n    fn: datasource.authz.authorize.post\n    args: \n      data: <% inputs.body.user %>\n  - id: authz_step2\n    description: transform response from authz api\n    fn: com.gs.transform\n    args: |\n        <coffee% if outputs.authz_step1.data.code == 200 then {\n            success: true\n            data: true\n        } else if outputs.authz_step1.data.code == 201 then {\n            success: true\n            data:\n              where:\n                role: 'USER'\n        } else {\n            success: false\n            data: false\n        } %>\n```\n\n----------------------------------------\n\nTITLE: Formatting Swagger UI Endpoint Example - Godspeed Server - Plaintext\nDESCRIPTION: This snippet shows a direct example of how the Swagger UI endpoint would look for a Godspeed server hosted at 'example.com' on port 8080. It clarifies the endpoint structure for real deployments and is intended as documentation clarity rather than executable code.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/how-to/create-api.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://example.com:8080/api-docs\n\n```\n\n----------------------------------------\n\nTITLE: Installing Mongoose Plugin via NPM\nDESCRIPTION: This command directly installs the Godspeed Mongoose datasource plugin using the Node Package Manager (npm). This is an alternative to using the Godspeed CLI.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @godspeedsystems/plugins-mongoose-as-datasource\n```\n\n----------------------------------------\n\nTITLE: Exporting a Highlight Component in React (JavaScript)\nDESCRIPTION: This snippet defines and exports a Highlight React component that accepts children and a color prop, rendering a span with the specified background color and styling. It is used for inlined highlighting within documentation pages, particularly in MDX files, and requires React as a dependency. Inputs are 'children' (the content to highlight) and 'color' (the highlight color), and output is the styled JSX span element; the component is stateless and suitable for presentation purposes.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '0px',\n      color: 'black',\n      padding: '5px',\n      cursor: 'pointer',\n    }}\n   >\n    {children}\n  </span>\n);\n```\n\n----------------------------------------\n\nTITLE: HTTP Event Schema Structure\nDESCRIPTION: YAML schema showing the structure for defining HTTP events in Godspeed, including method definitions, endpoint URLs, and Swagger parameters.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/event-source-plugins/Express Http Eventsource.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.<method>./<endpoint_url>:\n  fn: path.to.function\n  body:\n  params:\n  responses:\n  id:\n  operationId:\n  tags:\n  summary:\n  description:\n  on_request_validation_error:\n  on_response_validation_error:\n  authn:\n  authz:\n  log:\n    attributes:\n```\n\n----------------------------------------\n\nTITLE: Godspeed CLI Help Command Output\nDESCRIPTION: Display of available commands and options when running godspeed CLI without arguments\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n $ godspeed\n\n        ~~~~~~ Godspeed CLI ~~~~~~\n\n        Usage: Godspeed CLI [options] [command]\n\n        CLI tool for godspeed framework.\n\n        Options:\n        -V, --version                   output the version number\n        -h, --help                      display help for command\n\n        Commands:\n        create [options] <projectName>  create a new godspeed project.\n\n        dev                             run godspeed development server.\n\n        clean                           clean the previous build.\n\n        gen-crud-api                    scans your prisma datasources and generate\n                                        CRUD APIs events and workflows\n\n        build                           build the godspeed project.\n\n        devops-plugin                   manage(add, remove, update) godspeed plugins\n                                        for devops.\n\n        plugin                          manage(add, remove, update) eventsource and\n                                        datasource plugins for godspeed.\n\n        prisma                          proxy to prisma commands with some add-on\n                                        commands to handle prisma datasources.\n\n        help [command]                  display help for command\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships in ElasticGraph\nDESCRIPTION: This snippet in plain text demonstrates how to define relationships between different entities in ElasticGraph. The format indicates different cardinality types, including one-to-one, one-to-many, and many-to-many.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nrelationNameFromAToB <> relationNameFromBToA\nentityTypeA <> entityTypeB //One to one\nrelationNameFromAToB <> relationNameFromBToA\n[entityTypeA] <> entityTypeB //Many to one\nrelationNameFromAToBs <> relationNameFromBToA\nentityTypeA <> [entityTypeB] //One to many\nrelationNameFromAsToBs <> relationNameFromBsToAs\n[entityTypeA] <> [entityTypeB] //many to many\n```\n\nLANGUAGE: text\nCODE:\n```\nspeakers <> events\n[event] <> [speaker]\nsessions <> event\nevent <> [session]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Keys in .env File\nDESCRIPTION: Creates a `.env` file in the project root directory to store OpenAI API credentials. The `OPENAI_API_KEY` is required, while `OPENAI_ORG_KEY` is optional. These keys are used by the Godspeed UI Kit's AI agent during the scaffolding process.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOPENAI_API_KEY=sk-xxx\nOPENAI_ORG_KEY=org-xxx\n```\n\n----------------------------------------\n\nTITLE: Workflow for Uploading Multiple Files with Different File Keys\nDESCRIPTION: This workflow demonstrates how to upload multiple files with different file keys. It uses the file_obj input to handle multiple files with their individual keys when sending to an HTTP endpoint.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: upload multiple documents\ntasks:\n    - id: upload_multiple_files_step1\n      description: upload multiple documents\n      fn: com.gs.http\n      args:\n        datasource: httpbin\n        data: <% inputs.body %>\n        files: <% inputs.file_obj %>\n        config:\n          url : /anything\n          method: post\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Environment Variables in YAML for Godspeed\nDESCRIPTION: This YAML snippet demonstrates how to define custom environment variables in the custom-environment-variables.yaml file. It includes examples for datasource, Kafka, JWT, and Prisma configurations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/config/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmy_datasource:\n  base_url: MY_DATASOURCE_BASE_URL\n  api_key: MY_DATASOURCE_API_KEY\n  api_token: MY_DATASOURCE_API_TOKEN\n\nkafka:\n  brokers:\n    __name: KAFKA_BROKERS\n    __format: json\n  client_id: KAFKA_CLIENT_ID\n\njwt:\n  issuer: JWT_ISS\n  audience: JWT_AUD\n  secretOrKey: JWT_SECRET\n\nprisma_secret: PRISMA_SECRET\n```\n\n----------------------------------------\n\nTITLE: Defining Event Request Body in YAML\nDESCRIPTION: Shows how to specify the request body schema for an event, emphasizing the need for describing the JSON content type and data type expectations. The snippet illustrates YAML usage for defining schema and expected data types in payloads.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/vscode-extension/language-tools.md#2025-04-22_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nbody:\\n  description: This is the Description of body\\n  required: false\\n  content:\\n    application/json:\\n      schema:\\n        type: string\n```\n\n----------------------------------------\n\nTITLE: Exporting Mongoose DataSource Type in TypeScript\nDESCRIPTION: This TypeScript code snippet, located at `src/datasources/types/mongoose.ts`, imports the `DataSource` type definition from the installed `@godspeedsystems/plugins-mongoose-as-datasource` package and exports it. This makes the type available for use within the Godspeed project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from '@godspeedsystems/plugins-mongoose-as-datasource';\nexport default DataSource;\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server\nDESCRIPTION: Command executed within the project directory to start the local development server. This typically utilizes React Scripts (or a similar tool configured in the template) to build the application and serve it locally, often with hot-reloading enabled.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Listing Watched File Patterns for Godspeed Auto Build\nDESCRIPTION: This snippet lists the file patterns within the `src` directory that trigger the auto watch and build feature in the Godspeed framework's dev container. Changes to files matching these patterns (YAML, YML, JS, JSON, TypeScript, Prisma schema, and TOML) will initiate corresponding actions like datastore setup or reindexing Elasticgraph configurations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/auto-watch.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsrc/**/*.yaml|yml|js|json\nsrc/**/*.ts\nsrc/**/*.prisma\nsrc/**/*.toml\n```\n\n----------------------------------------\n\nTITLE: Defining GSInstruction Constructor in TypeScript\nDESCRIPTION: The GSInstruction constructor defines the structure of a core building block in the Godspeed SDK. It wraps business logic with pre and post hooks, providing flexibility and separation of concerns.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions_old.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    name: String,\n    preAuthHooks?: [GSInstruction] // Auto telemetry, custom business logic, pre-loading.\n    auths?: [GSAssert] //RBAC/ABAC/JWT\n    onAuthError?:[GSAction] // What to do on error in auths\n    validations?: [GSAssert | GSL] //GSL when parsed, its command should be implemented via a GSAssert interface\n    onValidationsError?:[GSAction] // What to do on error in validations\n    preFunctionHooks: [GSAction]\n    onPreFunctionHooksError?:[GSAction]  // What to do on error in  PreFunctionHooks\n    _function: [GSAction]\n    onFunctionError?:[GSAction] //What to do on error in _functions\n    postFunctionHooks?: [GSAction] //To act upon error, or success cases.\n    finally?: [GSAction]\n```\n\n----------------------------------------\n\nTITLE: Target Workflow for Dynamic Function Execution in YAML\nDESCRIPTION: This snippet defines the target workflow (com.jfs.sum_workflow) that will be dynamically executed by com.gs.dynamic_fn. It sums two query parameters x and y and returns the result.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Summing x + y\ndescription: Here we sum two hardcoded x and y values. Feel free to try using API inputs from body or params!\ntasks:\n  - id: sum_step1\n    description: add two numbers\n    fn: com.gs.return\n    args: |\n     <%\n       +inputs.query.x + +inputs.query.y\n     %>\n```\n\n----------------------------------------\n\nTITLE: Defining Event Parameters in YAML\nDESCRIPTION: Defines the mandatory parameter fields within an event in YAML syntax, illustrating the necessity of specifying parameter names, location, and requirement status. This snippet requires familiarity with the Godspeed Framework and proper YAML indentation practices.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/vscode-extension/language-tools.md#2025-04-22_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nparams:\\n  - name: world\\n    in: query\\n    required: true\n```\n\n----------------------------------------\n\nTITLE: Parallel Iteration with com.gs.each_parallel in YAML\nDESCRIPTION: Illustrates the use of com.gs.each_parallel function for concurrent execution of tasks for each value in a list.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/inbuilt_workflows.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: For each sample\n  description: Here we transform the response of for loop\n  tasks:\n    - id: each_parallel_step1\n      description: for each\n      fn: com.gs.each_parallel\n      value: [1, 2, 3, 4]\n      tasks:\n        - id: each_task1\n          fn: com.gs.transform\n          args: <% 'each_task1 ' + task_value %>\n    - id: each_parallel_step2\n      description: return the response\n      fn: com.gs.transform\n      args: <% outputs.each_parallel_step1 %>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Load Function in TypeScript\nDESCRIPTION: Implements the load function in TypeScript which initializes the client for the datasource. It processes the YAML datasource configuration and returns an object including the client. The function is expected to be part of the project's 'src/functions/com/sample' directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/extensible-datasources.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function(args:{[key:string]:any;}) {\n    const ds = {\n        ...args,\n        client: new SampleClient(args)\n        };\n    return ds;    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event-Level Custom Log Attributes in YAML\nDESCRIPTION: Example YAML configuration for setting custom log attributes specific to an event. This configuration overrides global attributes and allows for event-specific logging customization.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nlog_attributes: \n  msgparameter:\n    fruit: apple\n  identifier: 1\n```\n\n----------------------------------------\n\nTITLE: Exporting the Prisma DataSource (Prisma Plugin, TypeScript)\nDESCRIPTION: This TypeScript snippet imports the DataSource from Godspeed’s Prisma plugin and exports it as the default for use elsewhere in the application. The file acts as the entry point for Prisma datasource configuration required by Godspeed. The dependency is '@godspeedsystems/plugins-prisma-as-datastore', and there are no configurable parameters in this file.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from '@godspeedsystems/plugins-prisma-as-datastore';\nexport default DataSource;\n```\n\n----------------------------------------\n\nTITLE: Auto-Generating CRUD APIs from Data Store Models - Bash\nDESCRIPTION: Executes the Godspeed CLI command to auto-generate CRUD event and workflow definitions for all models in the datastore. Stores generated files in model-named folders under events and functions directories. Requires a valid schema/model presence and proper Godspeed/framework configuration. Outputs new API artifacts without further manual intervention.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/datastore.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Reindexing Elasticsearch Data After Elasticgraph Mapping Updates\nDESCRIPTION: Shows the command to reindex Elasticsearch data after modifying Elasticgraph entity mappings. It uses `node` and the `reIndexer.js` script with the `backend` flag to apply changes to existing documents for specified entities (or all). Requires Node.js and access to the `gs_service` directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/elasticgraph.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <path-to-elasticgraph-repo>\\nDEBUG=*,-elasticsearch node ../gs_service/elasticgraph/lib/mappingGenerator/reIndexer.js ./datasources/eg_config/eg1 backend all|<comma seprated list of defined entity types>\n```\n\n----------------------------------------\n\nTITLE: Using Logger Instance in Custom JavaScript Functions\nDESCRIPTION: Example JavaScript code showing how to use the Logger Instance in custom JS/TS functions. The function demonstrates logging errors in a loop using the childLogger parameter.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/telemetry/intro.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(args, {childLogger, promClient, tracer}) {\n    for (let i = 0; i < 1000; i++) {\n        childLogger.error(\"print log i: %s\", i);\n    }\n    return \"OK\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GSAssert Interface in TypeScript\nDESCRIPTION: GSAssert interface, extending GSInstruction, defines a condition check against given data or data promise. It includes context, data, and conditions to evaluate.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions_old.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n    ctx: GSContext\n    data: JSON | GSDataFetch // Internally GSAssert invokes GSDataFetch.getData() and applies the pass/fail condition to it.\n    condition: [GSCondition] // to run on the data, evaluating to true or false.\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script on Windows\nDESCRIPTION: This code snippet guides the execution of a batch script to install prerequisites and the Godspeed framework on Windows. It involves changing directories using the command prompt and running the setup file. Ensure Command Prompt is run as Administrator.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsetup.bat\n```\n\n----------------------------------------\n\nTITLE: Sample Workflow Using Authenticated Datasource\nDESCRIPTION: Example workflow demonstrating the usage of an authenticated API datasource\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/authentication/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Call an API and transform the \ntasks:\n    - id: api_step1 # the response of this will be accessible within the parent step key, under the step1 sub key\n      description: Hit with some dummy data. It will send back same as response\n      fn: datasource.api.anything.post\n      args:\n        data: <% inputs.body %>\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection URL Format\nDESCRIPTION: Specifies the standard format for a MySQL database connection URL, including placeholders for user, password, host, port, and database name. This format is used to establish a connection to the MySQL server.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MySQL.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE\n```\n\n----------------------------------------\n\nTITLE: Test Function for Validation in YAML\nDESCRIPTION: This YAML snippet describes a simple test function used to check the validation of query parameters. It returns a message concatenated with a query parameter value.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/event-sources/validations/validation-error.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: This is test function\ntasks:\n  - id: test_function\n    fn: com.gs.return\n    args: \n      data: <% \"This is number two \" + inputs.query.num_2 %>\n```\n\n----------------------------------------\n\nTITLE: Creating Event Source with Git Secret Using Shell\nDESCRIPTION: Setup event sources in Kubernetes by creating Git credentials secrets and defining ingress for webhooks. This ensures secure and authenticated access to the Git repository.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/infra-and-system/Application.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd demo-k8s-manifests/CI-manifests/\n$ kubectl create secret generic git-credentials  \\\n  --from-literal=GIT_TOKEN=TOKEN\n$ kubectl create -f spring-webhook.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Plugin Commands\nDESCRIPTION: Uses the `godspeed help plugin` command to show help specific to the plugin management subcommands. This provides information on how to add, remove, or update Godspeed plugins.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed help plugin\n```\n\n----------------------------------------\n\nTITLE: Previewing the Built Godspeed Project\nDESCRIPTION: Executes the `godspeed preview` command to run the production build of the project, usually served from the `/dist` folder. This command requires `godspeed build` to have been run previously.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n godspeed preview\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm\nDESCRIPTION: Command to be executed inside the newly created project directory. It uses npm to install all the required packages and dependencies defined in the project's `package.json` file.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Preparing Prisma Database Setup in Godspeed Framework\nDESCRIPTION: Command to automatically set up the database when a new Prisma schema file is created in the src/datasources folder. This prepares the database according to the specified schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/Overview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n 'godspeed prisma prepare'\n```\n\n----------------------------------------\n\nTITLE: Defining Salesforce Event Handler\nDESCRIPTION: Example of a Salesforce event configuration with topic name, handler function, and JSON schema validation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/events.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n{topic_name}.salesforce.{datasourceName}\nid: /salesforcetopic\nfn: com.jfs.handle_title_events\non_validation_error: com.jfs.handle_validation_error\nbody:\n  description: The body of the query\n  content:\n    application/json:\n      schema:\n        type: object\n        properties:\n          name:\n            type: string\n        required: [name]\n```\n\n----------------------------------------\n\nTITLE: Configuring ElasticGraph Collect Performance Feature\nDESCRIPTION: YAML configuration for the Collect feature of ElasticGraph. This file defines batch sizes and timeouts for various Elasticsearch operations (msearch, index, get, etc.) to optimize bulk requests and improve performance.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n[batchSizes]\nmsearch = 200\nindex = 200\nmget = 200\nget = 200\nsearch = 200\nbulk = 200\n[timeouts] #in milliseconds\nindex = 30\nget = 30\nbulk = 30\nmget = 30\nmsearch = 30\nsearch = 30\n```\n\n----------------------------------------\n\nTITLE: Adding Godspeed Mongoose Plugin via CLI\nDESCRIPTION: Shows the command line interface interaction when using `godspeed plugin add` to install the Mongoose datasource plugin. It displays the prompt where the user selects the '@godspeedsystems/plugins-mongoose-as-datastore' plugin for integration into their Godspeed project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n> godspeed plugin add\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────┬────────────────────────────────────────────────────────────────────┐\n│      │ Name                               │ Description                                                        │\n├──────┼────────────────────────────────────┼────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ mongoose-as-datastore                │ Mongoose as a datasource plugin for Godspeed Framework.              │\n└──────┴────────────────────────────────────┴────────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Test Helloworld API in Swagger UI\nDESCRIPTION: Demonstrates testing of the /helloworld API endpoint using Swagger UI. The example shows how to fill the required name parameter and observe the server's response.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nHello `John`\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Datasource for SQL Server\nDESCRIPTION: Sets up the datasource block in the Prisma schema file to use SQL Server as the provider and references the environment variable for the connection URL.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLServer.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlserver\"\n  url      = env(\"DATABASE_URL\") \n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Comment for Blog Post Truncation in Markdown\nDESCRIPTION: This snippet demonstrates how to use an HTML comment to truncate a long blog post in list views. The comment '<!-- truncate -->' is placed where the truncation should occur.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/blog/2019-05-29-long-blog-post.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--truncate-->\n```\n\n----------------------------------------\n\nTITLE: Applying Prisma Schema to Database and Generating Client - Bash\nDESCRIPTION: Uses the Godspeed CLI to push local Prisma schema changes to the connected database and generate updated Prisma client code. The command synchronizes the schema and regenerates the client if needed. Relies on a valid schema path, database connectivity, and .env configuration. Output is a synced database schema and regenerated client in the defined output directory.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/datastore.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed prisma db push --schema=./src/datasources/mongo.prisma \n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|                          \nEnvironment variables loaded from .env\nPrisma schema loaded from src/datasources/mongo.prisma\nDatasource \"db\"\n\nThe database is already in sync with the Prisma schema.\n\n\\u2714 Generated Prisma Client (3.15.2 | library) to ./src/datasources/generated-clients/mongo in 149ms\n```\n\n----------------------------------------\n\nTITLE: Adding Docker GPG Key - Shell\nDESCRIPTION: This snippet adds Docker's official GPG key to the system keyring to enable verification of Docker packages before installation. It uses 'curl' to fetch the key securely and pipes it to 'gpg --dearmor', saving it in the expected system location. This command requires elevated permissions and is essential for secure Docker installation via apt.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n```\n\n----------------------------------------\n\nTITLE: Installing Mongoose Plugin via Godspeed CLI\nDESCRIPTION: This snippet shows how to add the Mongoose plugin to a Godspeed project using the CLI command. It demonstrates the interactive prompt for selecting the plugin.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Mongoose Datasource.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> godspeed plugin add\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: Changes the shell directory to the specified project directory, which is an essential step before performing further project-specific commands and operations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd <your project directory>\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Mechanisms in YAML\nDESCRIPTION: These snippets show different retry configurations for workflows, including constant, exponential, and random interval strategies.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nretry:\n  max_attempts: 5\n  type: constant\n  interval: PT15m\n```\n\nLANGUAGE: yaml\nCODE:\n```\nretry:\n  max_attempts: 5\n  type: exponential\n  interval: PT15s\n```\n\nLANGUAGE: yaml\nCODE:\n```\nretry:\n  max_attempts: 5\n  type: random\n  min_interval: PT5s\n  max_interval: PT10s\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Connection Environment Variable\nDESCRIPTION: This shell command demonstrates how to set the MONGO_URL environment variable for connecting to a MongoDB instance.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Mongoose Datasource.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport MONGO_URL='mongodb+srv://<user_name>:<password>@cluster0.xyzabc.mongodb.net/?retryWrites=true&w=majority'\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs\nDESCRIPTION: Command to automatically generate CRUD (Create, Read, Update, Delete) APIs based on the Prisma schema defined in the project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments via YAML Workflows in Godspeed\nDESCRIPTION: This YAML snippet demonstrates how to pass custom arguments from a YAML workflow to a native function. The 'args' field is used in the task configuration to send data (such as the user's name) to the function, which will then be available in the function's arguments parameter. This requires Godspeed's YAML workflow engine, and the expected output is that the native function can consume these arguments by their keys.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/native-language-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  summary: some workflow\n  tasks:\n    - id: first_task\n      fn: some_function\n      args:\n        name: mastersilv3r\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma and Pulling Database Schema\nDESCRIPTION: Command to install Prisma as a development dependency and pull an existing database schema. This is useful when working with an existing database to generate Prisma models.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma --save-dev\n\nprisma db pull --schema = src/datasources/schema.prisma\n```\n\n----------------------------------------\n\nTITLE: API Response Example for Successful Query Parameter - Plaintext\nDESCRIPTION: This is the expected plaintext API service output when making a GET request to the '/helloworld' endpoint with a valid 'name' query parameter. No dependencies or parameters beyond providing the correct request URL are required. The input is an HTTP GET request such as 'localhost:3000/helloworld?name=mastersilv3r', and the output is a customized greeting response. This demonstrates correct validation and dynamic response.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nHello mastersilv3r\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed UI Kit via npm\nDESCRIPTION: Installs the Godspeed UI Kit package globally or locally using npm. This command downloads and installs the `@godspeedsystems/uikit` package, making the `npx @godspeedsystems/uikit` command available for project generation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/ai-modules/react-app.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @godspeedsystems/uikit\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed Plugins using CLI\nDESCRIPTION: This snippet demonstrates how to use the Godspeed CLI to add plugins to a project. It shows the interactive plugin selection process.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed plugin add\n```\n\nLANGUAGE: bash\nCODE:\n```\n       ,_,   ╔════════════════════════════════════╗\n      (o,o)  ║        Welcome to Godspeed         ║\n     ({___}) ║    World's First Meta Framework    ║\n       \" \"   ╚════════════════════════════════════╝\n\n\n? Please select godspeed plugin to install: (Press <space> to select, <Up and Down> to move rows)\n┌──────┬────────────────────────────────────────┬────────────────────────────────────────────────────────────────────────────────┐\n│      │ Name                                   │ Description                                                                    │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│ ❯◯   │ cron-as-eventsource                    │ Cron as eventsource plugin for Godspeed Framework                              │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ aws-as-datasource                      │ aws as datasource plugin for Godspeed Framework                                │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ excel-as-datasource                    │ excel as datasource plugin for Godspeed Framework                              │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ mangoose-as-datasource                 │ mongoose-as-datasource as datasource plugin for Godspeed Framework             │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ mailer-as-datasource                   │ mailer as datasource plugin for Godspeed Framework                             │\n├──────┼────────────────────────────────────────┼────────────────────────────────────────────────────────────────────────────────┤\n│  ◯   │ kafka-as-datasource-as-eventsource     │ kafka as datasource-as-eventsource plugin for Godspeed Framework               │\n└──────┴────────────────────────────────────────┴────────────────────────────────────────────────────────────────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in a YAML Workflow\nDESCRIPTION: This example demonstrates how to configure error handling in a workflow, including logging specific attributes and defining the error response.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/workflows/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Hello world\ndescription: Hello world example which invokes the com.gs.return workflow\nid: hello_world \non_error:\n  continue: false\n  log_attributes:  \n        error_message: <% outputs.transform_error.message %>\n        error_type: 'your custom error type'\n  response:\n    success: false\n    code: 500\n    data: \"Default error\"\ntasks: \n  - id: step1 \n    fn: com.gs.return\n    args: 'Hello World!' \n```\n\n----------------------------------------\n\nTITLE: Editing the Elasticsearch Data Path - Shell\nDESCRIPTION: This line documents modifying the 'esdata' path to the user's application directory (e.g., '~/support-apps/es-data'). Ensures that the path in the docker-compose file or volume declaration matches local filesystem structure for correct data persistence.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nedit the path of esdata:-\\n ~/support-apps/es-data.\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory\nDESCRIPTION: Change the current directory to the newly created project directory. It is crucial for running subsequent project-specific commands.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd my_new_project\n```\n\n----------------------------------------\n\nTITLE: Configuring MariaDB Connection URL\nDESCRIPTION: The basic connection string format for connecting to a MariaDB database.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MariaDB.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmariadb://USER:PASSWORD@HOST:PORT/DATABASE\n```\n\n----------------------------------------\n\nTITLE: Building Godspeed Project\nDESCRIPTION: Compiles and builds the Godspeed project using the CLI, preparing the environment for execution and further development.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/getting-started.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed build\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Plugin via NPM\nDESCRIPTION: Command to manually install the Prisma datasource plugin using npm package manager.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/data_sources/datasource_plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @godspeedsystems/plugins-prisma-as-datastore\n```\n\n----------------------------------------\n\nTITLE: Sequential Function Execution in Godspeed DSL\nDESCRIPTION: Shows how to define sequential execution of multiple functions using __sequence keyword.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n__sequence:\n  - __ref: __modules.imported_module_1.some_function\n  - __ref: __modules.imported_module_2.some_function_2\n```\n\n----------------------------------------\n\nTITLE: Plugin Add Command Example\nDESCRIPTION: Example of adding a plugin using the plugin add command\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ godspeed plugin add\n\n    ~~~~~~ Godspeed CLI ~~~~~~\n\n    ? Please select godspeed plugin to install. (Use arrow keys)\n\n  ❯ @godspeedsystems/plugins-express-as-http\n    @godspeedsystems/plugins-prisma-as-datastore\n    @godspeedsystems/plugins-axios-as-datasource\n```\n\n----------------------------------------\n\nTITLE: Defining GSInstruction.execute() Method in TypeScript\nDESCRIPTION: The execute method of GSInstruction takes a context and parameters as input. It's responsible for running the instruction with the given context and parameters.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions_old.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    // Arguments\n    ctx: GSContext,\n    params: JSON\n```\n\n----------------------------------------\n\nTITLE: Updating and Installing Docker Dependencies - Shell\nDESCRIPTION: This snippet demonstrates updating the system's apt package index and installing prerequisite packages required for Docker installation on Debian-based systems. Dependencies include 'ca-certificates', 'curl', 'gnupg', and 'lsb-release' to ensure that the repository over HTTPS is appropriately handled. Inputs are direct shell commands, and there are no outputs unless errors occur; these steps should be run as root or with sudo privileges.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get update\\n$ sudo apt-get install \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    gnupg \\\\\\n    lsb-release\n```\n\n----------------------------------------\n\nTITLE: Verify Godspeed Installation\nDESCRIPTION: Command to verify if Godspeed is installed by checking its version. It ensures that the installation step was successful.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/guide/get-started.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed --version\n```\n\n----------------------------------------\n\nTITLE: Building Godspeed Project in Dev Container\nDESCRIPTION: The build command compiles the entire project. This is typically the first command to run when opening a project in the VScode Dev container environment.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed build\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in TypeScript Files\nDESCRIPTION: The syntax to directly access environment variables within TypeScript code in Godspeed projects.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/env.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.env.VARIABLE_NAME         //without scripting\n```\n\n----------------------------------------\n\nTITLE: Setting Function Arguments Example in Godspeed DSL\nDESCRIPTION: Shows how to define example arguments for a function using __example keyword.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/writing-business-logic/functions.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n__example:\n  sample_arg_1: sample_value_1\n  sample_arg_2: sample_value_2\n```\n\n----------------------------------------\n\nTITLE: Adding Docker GPG Key (Ubuntu) - Shell\nDESCRIPTION: A shell command for Ubuntu systems to add Docker's official GPG key for package authentication. Functionality and dependencies are parallel to the Debian example, but points to the Ubuntu-specific Docker GPG endpoint.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/local-development-setup/install the docker.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n```\n\n----------------------------------------\n\nTITLE: Adding a Godspeed Plugin (Interactive)\nDESCRIPTION: Runs the `godspeed plugin add` command without specifying a plugin name. This initiates an interactive prompt allowing the user to select one or more available eventsource or datasource plugins to install into the project.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/CLI.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$  godspeed plugin add\n```\n\n----------------------------------------\n\nTITLE: Godspeed CLI update command\nDESCRIPTION: The `update` command refreshes an existing Godspeed project with new settings or loads it from a copy. It also updates container images if specified, ensuring that the containers reflect the latest configurations or code. This command should be run from the project root.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/introduction-cli.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ godspeed update\n                      _                                   _ \n   __ _    ___     __| |  ___   _ __     ___    ___    __| |\n  / _` |  / _ \\   / _` | / __| | '_ \\   / _ \\  / _ \\  / _` |\n | (_| | | (_) | | (_| | \\__ \\ | |_) | |  __/ |  __/ | (_| |\n  \\__, |  \\___/   \\__,_| |___/ | .__/   \\___|  \\___|  \\__,_|\n  |___/                        |_|\nDo you need postgresdb? [y/n] [default: n] \nDo you need kafka? [y/n] [default: n] \nDo you need elastisearch? [y/n] [default: n] \nPlease enter host port on which you want to run your service [default: 3000] \nFetching release version information...\nPlease select release version of gs_service from the available list:\nlatest\n1.0.0\n1.0.1\n1.0.2\n1.0.3\n1.0.4\ndev\nstable\nEnter your version [default: latest] \nSelected version latest\nRemoving dev_test_devcontainer_node_1                ... \n. . . . . . . . . .\nStep 1/9 : FROM adminmindgrep/gs_service:latest\nlatest: Pulling from adminmindgrep/gs_service\n824b15f81d65: Already exists\n325d38bcb229: Already exists\nd6d638bf61bf: Already exists\n55daac95cedf: Already exists\n4c701498752d: Already exists\na48b0ae49665: Pulling fs layer\n4c393fb6deac: Pulling fs layer\n4f4fb700ef54: Pulling fs layer\n8992963a9530: Pulling fs layer\n4f4fb700ef54: Verifying Checksum\n4f4fb700ef54: Download complete\n4c393fb6deac: Verifying Checksum\n4c393fb6deac: Download complete\n8992963a9530: Verifying Checksum\n8992963a9530: Download complete\na48b0ae49665: Verifying Checksum\na48b0ae49665: Download complete\na48b0ae49665: Pull complete\n4c393fb6deac: Pull complete\n4f4fb700ef54: Pull complete\n8992963a9530: Pull complete\nDigest: sha256:7195b3c921f1278153c911e6e77cbcfb385a84c435bfcb7b8272ffcf9a3278ee\nStatus: Downloaded newer image for adminmindgrep/gs_service:latest\n ---> 988917710d1a\nStep 2/9 : ARG USERNAME=node\n ---> Running in c70404bb4f3e\nRemoving intermediate container c70404bb4f3e\n ---> 47a7406b2473\nStep 3/9 : ARG USER_UID=1000\n ---> Running in 51e68336d8d8\nRemoving intermediate container 51e68336d8d8\n ---> ce913f6898bb\nStep 4/9 : ARG USER_GID=$USER_UID\n ---> Running in 7cf1c1f2a3ec\nRemoving intermediate container 7cf1c1f2a3ec\n ---> 91f045b32e0f\nStep 5/9 : USER root\n ---> Running in f338d755a032\nRemoving intermediate container f338d755a032\n ---> fa9898eb4c23\nStep 6/9 : RUN sudo groupmod --gid $USER_GID $USERNAME     && usermod --uid $USER_UID --gid $USER_GID $USERNAME     && chown -R $USER_UID:$USER_GID /workspace/development\n ---> Running in eba3659fb919\nRemoving intermediate container eba3659fb919\n ---> 414f34560b0d\nStep 7/9 : USER node\n ---> Running in 23818c5f4882\nRemoving intermediate container 23818c5f4882\n ---> 1bd65323ae91\nStep 8/9 : RUN sudo npm i -g @mindgrep/godspeed\n ---> Running in a66cb062390d\n. . . . . . . . . .\n godspeed update dev_test is done.\n```\n\n----------------------------------------\n\nTITLE: Installing Godspeed CLI via Yarn\nDESCRIPTION: Command to install Godspeed CLI globally using Yarn package manager\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/CLI.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add @godspeedsystems/godspeed\n```\n\n----------------------------------------\n\nTITLE: Cross-Reference Mappings Example\nDESCRIPTION: Example of using mapping values across multiple files.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/config-and-mappings/mappings.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nGender:\n  Male: M\n  Female: F\n  Others: O\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"title\": \"Hello World\",\n    \"completed\": false,\n    \"gender\": \"<%mappings.Gender.Male%>\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nNewGender: <% mappings.Gender.Others %>\ntitle:  <% mappings.relations.title %>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Custom Datasource Directory Structure\nDESCRIPTION: This shows the recommended directory layout within the `src` folder for defining a custom data source. It highlights the placement of the configuration (`.yaml`) in `src/datasources` and the corresponding type definition (`.ts`) in `src/datasources/types`.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/create-custom-datasource_old.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    .\n    ├── src\n        ├── datasources\n        │   ├── types\n        │   |    └── custom_datasource.ts\n        |   |\n        │   └── custom_datasource.yaml\n        │\n        ├── events\n        | \n        |\n        |\n        ├── eventsources\n        │   \n        |\n        └── functions\n```\n\n----------------------------------------\n\nTITLE: Pino Pretty Format Logs\nDESCRIPTION: These logs are generated in a human-readable format using the pino-pretty package, typically utilized during development when observability is disabled or the environment is set to development.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/telemetry/logging.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[14:46:00.813] INFO: [START] Load definitions from /home/gurjot/data/cli-test/v2_test2/dist/definitions\n[14:46:00.816] DEBUG: Definitions loaded and registered to ajvInstance\n[14:46:00.817] INFO: [END] Load definitions\n[14:46:00.818] INFO: [START] Load mappings from /home/gurjot/data/cli-test/v2_test2/dist/mappings\n[14:46:00.819] INFO: [END] Load mappings\n[14:46:00.819] INFO: [START] Load data sources from /home/gurjot/data/cli-test/v2_test2/dist/datasources\n. . . . . . . . .\n[14:46:00.881] DEBUG: JS/TS functions found in src/functions my_bank_api.auth_workflow,validations.request.standardResponse\n    section: \"loading_functions\"\n. . . . . . . . .\n[14:46:00.882] DEBUG: Starting to parse and load GSFunction id: helloworld name: helloworld\n    workflow_name: \"helloworld\"\n    task_id: \"helloworld\"\n```\n\n----------------------------------------\n\nTITLE: Sample Axios Configuration with Authentication\nDESCRIPTION: This YAML configuration demonstrates a more advanced setup for the Axios DataSource, including authentication and logging options.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntype: axios\nbase_url: https://httpbin.org\n\n# print all api calls in curl format\ncurlifiedLogs: true \n\n# Authentication of API calls with token refresh logic\nauthn: \n  fn: my_bank.authn\n  refreshOn:\n    statusCode: [401]\n```\n\n----------------------------------------\n\nTITLE: Workflow Function for Fetching a Single Post\nDESCRIPTION: YAML configuration for a workflow function that retrieves a single Post record from the database. The function uses the Prisma datasource to perform the findUnique operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: Fetch Post\ntasks:\n  - id: mysql_post_one\n    fn: datasource.mysql.Post.findUnique\n    args:\n      where:\n        id: <% inputs.params.id %>\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Structure for Configuration Files - YAML - Markdown\nDESCRIPTION: This snippet visually represents the expected directory layout for configuration files using a tree structure in Markdown code fencing. The main config/ directory contains multiple YAML files, such as custom-environment-variables.yaml and default.yaml, to separate concerns and handle default values versus environment-specific settings. While there are no operational dependencies, the snippet serves to guide users in creating and organizing their configuration files according to project guidelines.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/setup/configuration/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n├── config\n│   ├── custom-environment-variables.yaml\n│   ├── default.yaml\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Workflow-Level Error Handling in YAML\nDESCRIPTION: Shows how to implement error handling at the workflow level using the on_error property. This example demonstrates custom error responses for workflow failures.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/workflows/yaml-workflows/inbuilt-workflows.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: calling the thirdparty api with headers to check on error\ndescription: testing on_error in workflow level with custom message\non_error:\n  response:\n    success: false\n    code: 500\n    data: 'Workflow is broken, returned custom response'  \ntasks:\n    - id: on_error_at_workflow_04\n      fn: datasource.api.get./profile\n      args:\n        headers:\n          Content-Type: application/json\n          x-hasura-admin-secret: <% inputs.headers['auth'] %>\n          x-hasura-role: <% inputs.headers['role'] %>\n          x-hasura-user-id: <% inputs.headers['id'] %>\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Godspeed Plugin\nDESCRIPTION: This command shows how to install a specific Godspeed plugin directly using the CLI.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngodspeed plugin add <plugin-name>\n```\n\n----------------------------------------\n\nTITLE: Elasticgraph Function (com.gs.elasticgraph) Usage in YAML\nDESCRIPTION: Illustrates the use of com.gs.elasticgraph function for CRUD operations on Elasticsearch datastores in a workflow task.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/workflows.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: eg\ntasks:\n  - id: create_entity1\n    description: create_entity1\n    fn: com.gs.elasticgraph\n    args:\n      datasource: elasticgraph1\n      data:\n        index: <% inputs.params.entity_type + 's' %>\n        type: '_doc'\n        body: <% inputs.body %>\n      config:\n        method: index\n    on_error:\n      continue: false\n```\n\n----------------------------------------\n\nTITLE: Defining Mailer Event Producer Endpoint in YAML\nDESCRIPTION: Defines a Godspeed event configuration (typically in `src/events/mail_send_event.yaml`) for handling incoming HTTP POST requests to the `/mail` endpoint. It maps this endpoint to trigger the `mail_send` function, describes the expected request body (an object with a 'name' string property), and specifies the schema for a successful JSON response (200 OK).\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/list-of-plugins.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.post./mail:\n  summary: sending_mail\n  description: sending_mail\n  fn: mail_send\n  body:\n      type: object\n      properties:\n        name:\n          type: string\n  responses:\n    200:\n      content:\n        application/json:\n          schema:\n            type: object\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Plugin via Godspeed CLI\nDESCRIPTION: Command-line interface interaction to add the Redis plugin to a Godspeed project. It demonstrates the selection process for the Redis plugin from available options.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Redis Datasource.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmacbookpro@MacbookPros-MBP gs-test-project % godspeed plugin add\n```\n\n----------------------------------------\n\nTITLE: Starting the Godspeed Service\nDESCRIPTION: This bash command starts the Godspeed application. When using the Mongoose datasource plugin, ensure the `MONGO_URL` environment variable is set before running this command.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/MongoDB.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed serve\n```\n\n----------------------------------------\n\nTITLE: SendBulkSMS Response Parameter (JSON)\nDESCRIPTION: Defines the JSON response parameter for the sendBulkSMS request. It returns an integer representing the HTTP status code of the operation.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/notification-api.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n   Status_Code: INTEGER\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Data Source in YAML\nDESCRIPTION: YAML configuration for Redis data source. It specifies the type as 'redis' and provides the connection URL with authentication details.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Redis Datasource.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: redis\nurl: redis://alice:foobared@awesome.redis.server:6380\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Folder\nDESCRIPTION: Command to change the current directory to the newly created 'blog-app' project folder.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v2.0.0.alpha/getting_started.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd blog-app\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD APIs Command\nDESCRIPTION: Command to automatically generate CRUD API endpoints based on the Prisma schema. This creates events and workflows for database operations.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/Prisma Datasource.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed gen-crud-api\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client for SQL Server\nDESCRIPTION: Command to generate the Prisma client and synchronize the database with the Prisma schema. This step is necessary after defining or updating the schema.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/databases/SQLServer.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngodspeed prisma prepare\n```\n\n----------------------------------------\n\nTITLE: Example Workflow Specification in YAML\nDESCRIPTION: Provides a YAML configuration for a simple 'hello world' workflow specification. It defines a task that executes a function, passing in arguments for the datasource and input data, along with configuration method details.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/extensible-datasources.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsummary: hello world\ntasks:\n  - id: helloworld_step1\n    fn: com.sample.execute\n    args:\n      datasource: newDatasource\n      data: <% inputs %>\n      config:\n        method: sample\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Configuration in TOML Format\nDESCRIPTION: This YAML snippet shows how to define entity configurations such as field type, multilingual settings, and encryption within the ElasticGraph framework. The example configures an 'event' entity type with fields like title and description, setting attributes for searching and sorting in Elasticsearch.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/docs/microservices-framework/datasources/datasource-plugins/elasticgraph/feature-set-of-elasticgraph.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[title]\ntype = 'String'\nmultiLingual = true\nautoSuggestion = true\nencrypted = true\nsort = true # Mark this field to be index as sortable or searchable\n[description]\ntype = 'String' # String | Boolean | Number(stored as Long) | Object | Date\nmultiLingual = true\n[startingDate]\ntype = 'date'\nmultiLingual = false\n```\n\n----------------------------------------\n\nTITLE: Setting Up Before Hook in Yaml\nDESCRIPTION: This snippet shows how to configure a before_method_hook for a datasource of type 'api'. It triggers a custom workflow before executing any method on the datasource.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/datasources/before-and-after-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: api\nschema:\nbase_url: <% config.httpbin.base_url %>    \nbefore_method_hook: com.jfs.audit_log_workflow\n```\n\n----------------------------------------\n\nTITLE: Sample Workflow Accessing Mapping Values in Godspeed DSL\nDESCRIPTION: Demonstrates a workflow step referencing values from both `index.yaml` (`Gender`) and `generate.yaml` (`genId`) using mapping expressions in a Godspeed workflow. The snippet shows how to interpolate mapped data using `<% ... %>` syntax. Inputs such as `inputs.body.Gender` and the global mapping object are used to derive payload parameters for an HTTP call. No extra dependencies apart from the Godspeed workflow engine.\nSOURCE: https://github.com/godspeedsystems/gs-documentation/blob/main/versioned_docs/version-v1/microservices/mappings.md#2025-04-22_snippet_2\n\nLANGUAGE: unknown\nCODE:\n```\n  - id: httpbinCof_step1\n    description: Hit http bin with some dummy data. It will send back same as response\n    fn: com.gs.http\n    args:\n      datasource: httpbin\n      params:\n      data:\n        personal_email_id: 'ala.eforwich@email.com'\n        gender: <% mappings.Gender[inputs.body.Gender] %>\n        id:  <% mappings.generate.genId %>\n      config:\n        url : /anything\n        method: post\n\n```"
  }
]