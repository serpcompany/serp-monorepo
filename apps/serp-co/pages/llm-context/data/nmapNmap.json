[
  {
    "owner": "nmap",
    "repo": "nmap",
    "content": "TITLE: Installing Nmap from Source\nDESCRIPTION: Basic commands for configuring, building, and installing Nmap from source code. This is the standard installation process for Unix-like systems.\nSOURCE: https://github.com/nmap/nmap/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./configure\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Echo client mode with TCP port scanning\nDESCRIPTION: Example showing how to use Nping in echo client mode to connect to an echo server while scanning TCP ports 1-1024 with ACK flags.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/nping-usage.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnping --echo-client \"public\" echo.nmap.org --tcp -p1-1024 --flags ack\n```\n\n----------------------------------------\n\nTITLE: Nping Command Examples\nDESCRIPTION: Practical examples of Nping commands demonstrating various usage scenarios, including basic host scanning, TCP probing with specific port and TTL settings, and debug mode with ICMP probes.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/NpingCommandLine.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnping scanme.nmap.org\nnping --tcp --dest-port 80  --ttl 2 192.168.1.1\nnping --debug --icmp -I17 --delay 2s microsoft.com\n```\n\n----------------------------------------\n\nTITLE: Basic Nmap Usage Syntax\nDESCRIPTION: The fundamental syntax for using Nmap, showing how to specify scan types, options, and target specifications.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/nmap.usage.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnmap [Scan Type(s)] [Options] {target specification}\n```\n\n----------------------------------------\n\nTITLE: Performing TCP Connect Operations with Nping\nDESCRIPTION: Examples of using Nping to perform TCP connect operations to single or multiple hosts and across port ranges. These commands require no special privileges and use the --tcp-connect parameter.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/NpingExamples.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/* Do simple TCP connect()s to one host */\nnping --tcp-connect google.com\n\n/* Do simple TCP connect()s to multiple hosts */\nnping --tcp-connect google.com ask.com yahoo.com bing.com\n\n/* Try to TCP connect() to a range of ports */\nnping --tcp-connect google.com -p75-85 -c 1\n```\n\n----------------------------------------\n\nTITLE: Nmap Port Specification Examples\nDESCRIPTION: Examples of how to specify port ranges and types for Nmap scans, including UDP and TCP ports.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/nmap.usage.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9\n```\n\n----------------------------------------\n\nTITLE: General Packet Format Structure for Nping Echo Protocol\nDESCRIPTION: This diagram illustrates the bit-by-bit structure of the Nping Echo Protocol packet format. It defines the header fields including Version, OP Code, Total Length, Sequence Number, Reserved fields, DATA section, and Checksum.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/EchoProtoRFC_v0.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |   Version     |    OP Code    |          Total Length         |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                         Sequence Number                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                            Reserved                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                            Reserved                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                               |\n    .                                                               .\n    .                              DATA                             .\n    .                                                               .\n    |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                               |\n    .                            Checksum                           .\n    |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Displaying Ncat Usage and Options in Command-Line\nDESCRIPTION: This snippet shows the full usage instructions and available command-line options for Ncat. It includes details on connection types, protocols, timeout settings, and advanced features like SSL and proxying.\nSOURCE: https://github.com/nmap/nmap/blob/master/ncat/docs/ncat.usage.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNcat 7.95SVN ( https://nmap.org/ncat )\nUsage: ncat [options] [hostname] [port]\n\nOptions taking a time assume seconds. Append 'ms' for milliseconds,\n's' for seconds, 'm' for minutes, or 'h' for hours (e.g. 500ms).\n  -4                         Use IPv4 only\n  -6                         Use IPv6 only\n  -U, --unixsock             Use Unix domain sockets only\n      --vsock                Use vsock sockets only\n  -C, --crlf                 Use CRLF for EOL sequence\n  -c, --sh-exec <command>    Executes the given command via /bin/sh\n  -e, --exec <command>       Executes the given command\n      --lua-exec <filename>  Executes the given Lua script\n  -g hop1[,hop2,...]         Loose source routing hop points (8 max)\n  -G <n>                     Loose source routing hop pointer (4, 8, 12, ...)\n  -m, --max-conns <n>        Maximum <n> simultaneous connections\n  -h, --help                 Display this help screen\n  -d, --delay <time>         Wait between read/writes\n  -o, --output <filename>    Dump session data to a file\n  -x, --hex-dump <filename>  Dump session data as hex to a file\n  -i, --idle-timeout <time>  Idle read/write timeout\n  -p, --source-port port     Specify source port to use\n  -s, --source addr          Specify source address to use (doesn't affect -l)\n  -l, --listen               Bind and listen for incoming connections\n  -k, --keep-open            Accept multiple connections in listen mode\n  -n, --nodns                Do not resolve hostnames via DNS\n  -t, --telnet               Answer Telnet negotiations\n  -u, --udp                  Use UDP instead of default TCP\n      --sctp                 Use SCTP instead of default TCP\n  -v, --verbose              Set verbosity level (can be used several times)\n  -w, --wait <time>          Connect timeout\n  -z                         Zero-I/O mode, report connection status only\n      --append-output        Append rather than clobber specified output files\n      --send-only            Only send data, ignoring received; quit on EOF\n      --recv-only            Only receive data, never send anything\n      --no-shutdown          Continue half-duplex when receiving EOF on stdin\n      --allow                Allow only given hosts to connect to Ncat\n      --allowfile            A file of hosts allowed to connect to Ncat\n      --deny                 Deny given hosts from connecting to Ncat\n      --denyfile             A file of hosts denied from connecting to Ncat\n      --broker               Enable Ncat's connection brokering mode\n      --chat                 Start a simple Ncat chat server\n      --proxy <addr[:port]>  Specify address of host to proxy through\n      --proxy-type <type>    Specify proxy type (\"http\", \"socks4\", \"socks5\")\n      --proxy-auth <auth>    Authenticate with HTTP or SOCKS proxy server\n      --proxy-dns <type>     Specify where to resolve proxy destination\n      --ssl                  Connect or listen with SSL\n      --ssl-cert             Specify SSL certificate file (PEM) for listening\n      --ssl-key              Specify SSL private key (PEM) for listening\n      --ssl-verify           Verify trust and domain name of certificates\n      --ssl-trustfile        PEM file containing trusted SSL certificates\n      --ssl-ciphers          Cipherlist containing SSL ciphers to use\n      --ssl-servername       Request distinct server name (SNI)\n      --ssl-alpn             ALPN protocol list to use\n      --version              Display Ncat's version information and exit\n\nSee the ncat(1) manpage for full options, descriptions and usage examples\n```\n\n----------------------------------------\n\nTITLE: Nmap Target Specification Examples\nDESCRIPTION: Examples of how to specify targets for Nmap scans, including hostnames, IP addresses, and network ranges.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/nmap.usage.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nscanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254\n```\n\n----------------------------------------\n\nTITLE: Nmap Usage Examples\nDESCRIPTION: Practical examples of Nmap commands for different scanning scenarios, including verbose output, aggressive scanning, and network sweeps.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/nmap.usage.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nnmap -v -A scanme.nmap.org\nnmap -v -sn 192.168.0.0/16 10.0.0.0/8\nnmap -v -iR 10000 -Pn -p 80\n```\n\n----------------------------------------\n\nTITLE: Nping Basic Usage Syntax\nDESCRIPTION: Shows the basic syntax for using the Nping tool, with placeholders for probe mode, options, and target specification.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/NpingCommandLine.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNping 0.01a ( https://nmap.org/nping )\nUsage: nping [Probe mode] [Options] {target specification}\n```\n\n----------------------------------------\n\nTITLE: ECHOPKT Packet Structure Diagram - ASCII Diagram\nDESCRIPTION: This snippet describes the ECHOPKT packet, sent by the server to echo a received network packet. The diagram illustrates headers including Version, OpCode (0x05), Total Length, Sequence Number, Reserved areas, DLT Type (libpcap link-layer type), Packet Length, variable-length embedded Packet data, padding for 16-byte alignment, and a SHA256 checksum. This format is crucial for safe and correct decoding and reassembly of network frames, as well as checksum validation in clients and servers.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/EchoProtoRFC_v0.txt#2025-04-23_snippet_6\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n0                   1                   2                   3\\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\\n0   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |   Version     | OP Code 0x05  |          Total Length         |\\n1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |                         Sequence Number                       |\\n2   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |           Reserved            |           Reserved            |\\n4   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |          DLT Type             |       Packet Length           |\\n5   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n.   .                                                               .\\n.   .                         Packet                                .\\n.   .                                                               .\\nn   .                                               +-+-+-+-+-+-+-+-+\\n|                                               |    Padding    |\\nn+1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |                                                               |\\n.   .                                                               .\\n.   .                        SHA256 Checksum                        .\\n.   .                                                               .\\n    |                                                               |\\nn+9 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Sending ARP Requests with Nping\nDESCRIPTION: Examples of using Nping to send ARP requests to individual hosts or entire network ranges with custom delay between probes. These commands require root privileges.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/NpingExamples.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Send ARP requests to 192.168.1.1\nsudo nping --arp 192.168.1.1\n\n# Send ARP requests to all host in network 192.168.1.0 (inter-probe delay = 100ms)\nsudo nping --arp 192.168.1.0/24 --delay 100\n```\n\n----------------------------------------\n\nTITLE: Documenting NEP_PACKET_SPEC Message Packet Format with Field Breakdown - plaintext\nDESCRIPTION: This snippet uses ASCII art to depict the message layout for the NEP_PACKET_SPEC operation, specifying how clients should communicate expected packet formats to the server. The structure includes version, message type, total length, sequence number, timestamp, reserved fields, IP version, protocol, packet count, dynamic PacketSpec region, and the authentication code. The annotation marks blocks to be encrypted and details the arrangement of variable fields, providing implementers with a reference for building or parsing protocol messages. Constraints such as proper field width and alignment must be observed, with explanatory comments to ensure precise message compliance.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/EchoProtoRFC.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n            0                   1                   2                   3\\n            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\\n          ###################### ENCRYPTION STARTS HERE #######################\\n        0   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |   Version     |  Message Type |          Total Length         |\\n        1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |                        Sequence Number                        |\\n        2   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |                           Timestamp                           |\\n        3   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |                            Reserved                           |\\n        4   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |  IP version   |   Protocol    |         Packet Count          |\\n        5   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n        .   |                                                               |\\n        .   .                                                               .\\n        .   .                           PacketSpec                          .\\n        n   .                                                               .\\n            |                                                               |\\n        32  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n          ####################### ENCRYPTION ENDS HERE ########################\\n        32  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |                                                               |\\n        .   .                                                               .\\n        .   .                   Message Authentication Code                 .\\n        .   .                                                               .\\n            |                                                               |\\n        40  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Sending UDP Packets with Nping\nDESCRIPTION: Example of using Nping to send UDP packets with specified data length to a target host on a specific port. This command requires no special privileges.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/NpingExamples.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/* Send an UDP packet with 100 bytes of random data */\nnping --udp google.com -p 53 --data-length 100\n```\n\n----------------------------------------\n\nTITLE: Client-Server Session Flow Diagram - ASCII Diagram\nDESCRIPTION: This snippet illustrates the overall protocol exchange sequence between a Nping client and server, displaying key message types in chronological order using an ASCII diagram. It outlines handshakes, capability negotiation, probe declaration, readiness acknowledgment, packet echoing, and the intended exchange patterns. This diagram provides a macro-level context for developers implementing state machines or debugging session protocol conformance.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/EchoProtoRFC_v0.txt#2025-04-23_snippet_8\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n+------+             +------+\\n|CLIENT|             |SERVER|\\n+------+             +------+\\n   |                    |\\n   |       HELLO        |  :: Hi. I'm an Nping Client.\\n   |------------------>>|     I support version 1.\\n   |                    |\\n   |                    |\\n   |   HELLO RESPONSE   |\\n   |<<------------------|  :: Nice 2 meet u. Im a server..\\n   |                    |      I also support version 1\\n   |                    |\\n   |       SPECS        |\\n   |------------------>>|  :: I'll be sending 5 ICMP\\n   |                    |     Destination Unreachable probes.\\n   |                    |\\n   |                    |\\n   |       READY        |\\n   |<<-- ---------------|  :: OK, I'm ready for those probes.\\n   |                    |\\n   |                    |\\n   |                    |\\n   |                    |\\n   |       ECHOPKT      |\\n   |<<------------------|   :: Here's what I received.\\n   |                    |\\n   |       ECHOPKT      |\\n   |<<------------------|   :: Here's what I received.\\n   |                    |\\n   |       ECHOPKT      |\\n   |<<------------------|   :: Here's what I received.\\n   |         .          |\\n   |         .          |\\n   |         .          |\\n   |       ECHOPKT      |\\n   |<<------------------|   :: Here's what I received.\\n   |                    |\\n   |                    |\n```\n\n----------------------------------------\n\nTITLE: Basic Nping usage example for host scanning\nDESCRIPTION: A simple example showing how to use Nping to scan a target host, specifically scanme.nmap.org.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/nping-usage.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnping scanme.nmap.org\n```\n\n----------------------------------------\n\nTITLE: Defining User-Configurable Build Options for PCRE2 - CMake\nDESCRIPTION: This section declares user-customizable build flags with set, option, and set_property commands, allowing the user to toggle shared/static library builds, debugging, feature support (e.g. Unicode, JIT, various PCRE2 flavors), and dependency use. These settings are provided as cache entries or switches, often with documentation for use in CMake GUIs like CMakeSetup. User parameters affect the features and output of the built PCRE2 library and related tools.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_SHARED_LIBS OFF CACHE BOOL \"Build shared libraries.\")\n\noption(BUILD_STATIC_LIBS \"Build static libraries.\" ON)\n\noption(PCRE2_BUILD_PCRE2_8 \"Build 8 bit PCRE2 library\" ON)\n\noption(PCRE2_BUILD_PCRE2_16 \"Build 16 bit PCRE2 library\" OFF)\n\noption(PCRE2_BUILD_PCRE2_32 \"Build 32 bit PCRE2 library\" OFF)\n\noption(PCRE2_STATIC_PIC \"Build the static library with the option position independent code enabled.\" OFF)\n\nset(PCRE2_DEBUG \"IfDebugBuild\" CACHE STRING \"Include debugging code\")\nset_property(CACHE PCRE2_DEBUG PROPERTY STRINGS \"IfDebugBuild\" \"ON\" \"OFF\")\n\noption(PCRE2_DISABLE_PERCENT_ZT \"Disable the use of %zu and %td (rarely needed)\" OFF)\n\nset(\n  PCRE2_EBCDIC\n  OFF\n  CACHE BOOL\n  \"Use EBCDIC coding instead of ASCII. (This is rarely used outside of mainframe systems.)\"\n)\n\nset(PCRE2_EBCDIC_NL25 OFF CACHE BOOL \"Use 0x25 as EBCDIC NL character instead of 0x15; implies EBCDIC.\")\n\nset(\n  PCRE2_LINK_SIZE\n  \"2\"\n  CACHE STRING\n  \"Internal link size (2, 3 or 4 allowed). See LINK_SIZE in config.h.in for details.\"\n)\n\nset(\n  PCRE2_PARENS_NEST_LIMIT\n  \"250\"\n  CACHE STRING\n  \"Default nested parentheses limit. See PARENS_NEST_LIMIT in config.h.in for details.\"\n)\n\nset(\n  PCRE2_HEAP_LIMIT\n  \"20000000\"\n  CACHE STRING\n  \"Default limit on heap memory (kibibytes). See HEAP_LIMIT in config.h.in for details.\"\n)\n\nset(PCRE2_MAX_VARLOOKBEHIND \"255\" CACHE STRING \"Default limit on variable lookbehinds.\")\n\nset(\n  PCRE2_MATCH_LIMIT\n  \"10000000\"\n  CACHE STRING\n  \"Default limit on internal looping. See MATCH_LIMIT in config.h.in for details.\"\n)\n\nset(\n  PCRE2_MATCH_LIMIT_DEPTH\n  \"MATCH_LIMIT\"\n  CACHE STRING\n  \"Default limit on internal depth of search. See MATCH_LIMIT_DEPTH in config.h.in for details.\"\n)\n\nset(\n  PCRE2GREP_BUFSIZE\n  \"20480\"\n  CACHE STRING\n  \"Buffer starting size parameter for pcre2grep. See PCRE2GREP_BUFSIZE in config.h.in for details.\"\n)\n\nset(\n  PCRE2GREP_MAX_BUFSIZE\n  \"1048576\"\n  CACHE STRING\n  \"Buffer maximum size parameter for pcre2grep. See PCRE2GREP_MAX_BUFSIZE in config.h.in for details.\"\n)\n\nset(PCRE2_NEWLINE \"LF\" CACHE STRING \"What to recognize as a newline (one of CR, LF, CRLF, ANY, ANYCRLF, NUL).\")\n\nset(PCRE2_HEAP_MATCH_RECURSE OFF CACHE BOOL \"Obsolete option: do not use\")\n\nset(PCRE2_SUPPORT_JIT OFF CACHE BOOL \"Enable support for Just-in-time compiling.\")\n\nif(${CMAKE_SYSTEM_NAME} MATCHES Linux|NetBSD)\n  set(PCRE2_SUPPORT_JIT_SEALLOC OFF CACHE BOOL \"Enable SELinux compatible execmem allocator in JIT (experimental).\")\nelse()\n  set(PCRE2_SUPPORT_JIT_SEALLOC IGNORE)\nendif()\n\nset(PCRE2GREP_SUPPORT_JIT ON CACHE BOOL \"Enable use of Just-in-time compiling in pcre2grep.\")\n\nset(PCRE2GREP_SUPPORT_CALLOUT ON CACHE BOOL \"Enable callout string support in pcre2grep.\")\n\nset(PCRE2GREP_SUPPORT_CALLOUT_FORK ON CACHE BOOL \"Enable callout string fork support in pcre2grep.\")\n\nset(PCRE2_SUPPORT_UNICODE OFF CACHE BOOL \"Enable support for Unicode and UTF-8/UTF-16/UTF-32 encoding.\")\n\nset(\n  PCRE2_SUPPORT_BSR_ANYCRLF\n  OFF\n  CACHE BOOL\n  \"ON=Backslash-R matches only LF CR and CRLF, OFF=Backslash-R matches all Unicode Linebreaks\"\n)\n\nset(PCRE2_NEVER_BACKSLASH_C OFF CACHE BOOL \"If ON, backslash-C (upper case C) is locked out.\")\n\nset(PCRE2_SUPPORT_VALGRIND OFF CACHE BOOL \"Enable Valgrind support.\")\n\noption(PCRE2_SHOW_REPORT \"Show the final configuration report\" ON)\noption(PCRE2_BUILD_PCRE2GREP \"Build pcre2grep\" OFF)\noption(PCRE2_BUILD_TESTS \"Build the tests\" OFF)\n\nset(\n  PCRE2_INSTALL_CMAKEDIR\n  \"${CMAKE_INSTALL_LIBDIR}/cmake/pcre2\"\n  CACHE STRING\n  \"Path used during CMake install for placing PCRE2's CMake config files, relative to the installation root (prefix)\"\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring the Nping Echo Server\nDESCRIPTION: Command line syntax for starting Nping in server mode with a passphrase for encryption. The server listens for connection requests and captures packets sent by clients.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/echo_proposal.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnping --echo-server \"Squemmish Ossifrage\"\n```\n\n----------------------------------------\n\nTITLE: Displaying the NEP Message Format Structure in ASCII Diagram\nDESCRIPTION: ASCII diagram showing the bit-by-bit structure of the general NEP (Nping Echo Protocol) message format, including fields for Version, Message Type, Total Length, Sequence Number, Timestamp, Reserved space, DATA, and Message Authentication Code.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/EchoProtoRFC.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|   Version     |  Message Type |          Total Length         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Sequence Number                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Timestamp                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Reserved                            |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n.                                                               .\n.                              DATA                             .\n.                                                               .\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n.                                                               .\n.                    Message Authentication Code                .\n.                                                               .\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Operation Codes for Nping Echo Protocol\nDESCRIPTION: This snippet defines the operation codes used in the Nping Echo Protocol to identify different types of packets in the communication flow between client and server.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/EchoProtoRFC_v0.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    Operation HELLO:            0x01\n    Operation HELLO RESPONSE:   0x02\n    Operation SPECS:            0x03\n    Operation READY:            0x04\n    Operation ECHOPKT:          0x05\n    Operation QUIT:             0x06\n```\n\n----------------------------------------\n\nTITLE: Basic Nmap Usage Example\nDESCRIPTION: Simple example showing how to use Nmap to scan a target host. The scanme.nmap.org is a test server provided by the Nmap project for learning purposes.\nSOURCE: https://github.com/nmap/nmap/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnmap scanme.nmap.org\n```\n\n----------------------------------------\n\nTITLE: Executing Nping Broadcast Ping Command (Bug Demonstration)\nDESCRIPTION: This shell command demonstrates an issue where Nping fails to capture replies for a broadcast ping. It sends one packet (`-c 1`) to the broadcast address `192.168.0.255` with the destination MAC address set to the broadcast MAC `ff:ff:ff:ff:ff:ff`. The expected behavior is to capture replies, but the text notes that currently, no packets are captured, possibly due to an overly restrictive BPF filter.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/nping.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnping 192.168.0.255 --dest-mac ff:ff:ff:ff:ff:ff -c 1\n```\n\n----------------------------------------\n\nTITLE: Common RTSP URL Paths for Video Surveillance Equipment\nDESCRIPTION: A comprehensive list of URL paths used for accessing video streams via RTSP protocol in surveillance cameras and systems. These paths follow various conventions for different manufacturers and support different video codecs including H.264, MPEG4, and MJPEG. This list can be used for device fingerprinting or connection testing with video surveillance equipment.\nSOURCE: https://github.com/nmap/nmap/blob/master/nselib/data/rtsp-urls.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#!comment: The following dictionary contains a list of well-known RTSP URLs\n#!comment: used by common video surveillance equipment.\n/\n/0\n/0/video1\n/1\n/1.AMP\n/1/1:1/main\n/1/cif\n/1/stream1\n/11\n/12\n/4\n/CAM_ID.password.mp2\n/CH001.sdp\n/GetData.cgi\n/H264\n/HighResolutionVideo\n/HighResolutionvideo\n/Image.jpg\n/LowResolutionVideo\n/MJPEG.cgi\n/MediaInput/h264\n/MediaInput/h264/stream_1\n/MediaInput/mpeg4\n/ONVIF/MediaInput\n/ONVIF/channel1\n/PSIA/Streaming/channels/0?videoCodecType=H.264\n/PSIA/Streaming/channels/1\n/PSIA/Streaming/channels/1?videoCodecType=MPEG4\n/PSIA/Streaming/channels/h264\n/Possible\n/ROH/channel/11\n/Streaming/Channels/1\n/Streaming/Channels/101\n/Streaming/Channels/102\n/Streaming/Channels/103\n/Streaming/Channels/2\n/Streaming/Unicast/channels/101\n/Streaming/channels/101\n/Video?Codec=MPEG4&Width=720&Height=576&Fps=30\n/VideoInput/1/h264/1\n/access_code\n/access_name_for_stream_1_to_5\n/av0_0\n/av0_1\n/av2\n/avn=2\n/axis-media/media.amp\n/axis-media/media.amp?videocodec=h264&resolution=640x480\n/cam\n/cam/realmonitor\n/cam/realmonitor?channel=1&subtype=00\n/cam/realmonitor?channel=1&subtype=01\n/cam/realmonitor?channel=1&subtype=1\n/cam0_0\n/cam0_1\n/cam1/h264\n/cam1/h264/multicast\n/cam1/mjpeg\n/cam1/mpeg4\n/cam1/onvif-h264\n/cam4/mpeg4\n/camera.stm\n/cgi-bin/viewer/video.jpg?resolution=640x480\n/ch0\n/ch0.h264\n/ch001.sdp\n/ch01.264\n/ch0_0.h264\n/ch0_unicast_firststream\n/ch0_unicast_secondstream\n/channel1\n/dms.jpg\n/dms?nowprofileid=2\n/h264\n/h264.sdp\n/h264/ch1/sub/\n/h264/media.amp\n/h264Preview_01_main\n/h264Preview_01_sub\n/h264_vga.sdp\n/image.jpg\n/image.mpg\n/image/jpeg.cgi\n/img/media.sav\n/img/video.asf\n/img/video.sav\n/ioImage/1\n/ipcam.sdp\n/ipcam/stream.cgi?nowprofileid=2\n/ipcam_h264.sdp\n/jpg/image.jpg?size=3\n/live\n/live.sdp\n/live/av0\n/live/ch0\n/live/ch00_0\n/live/ch00_1\n/live/ch1\n/live/ch2\n/live/h264\n/live/mpeg4\n/live0.264\n/live1.264\n/live1.sdp\n/live2.sdp\n/live3.sdp\n/live_h264.sdp\n/live_mpeg4.sdp\n/livestream\n/livestream/\n/media\n/media.amp\n/media/media.amp\n/media/video1\n/media/video2\n/media/video3\n/medias1\n/mjpeg.cgi\n/mjpeg/media.smp\n/mp4\n/mpeg4\n/mpeg4/1/media.amp\n/mpeg4/media.amp\n/mpeg4/media.amp?resolution=640x480\n/mpeg4/media.smp\n/mpeg4cif\n/mpeg4unicast\n/mpg4/rtsp.amp\n/multicaststream\n/now.mp4\n/nph-h264.cgi\n/nphMpeg4/g726-640x\n/nphMpeg4/g726-640x480\n/nphMpeg4/nil-320x240\n/onvif-media/media.amp\n/onvif/live/2\n/onvif1\n/onvif2\n/play1.sdp\n/play2.sdp\n/profile\n/recognizer\n/rtpvideo1.sdp\n/rtsp_tunnel\n/rtsph264\n/rtsph2641080p\n/stream1\n/stream2\n/streaming/mjpeg\n/synthesizer\n/tcp/av0_0\n/ucast/11\n/unicast/c1/s1/live\n/user.pin.mp2\n/user_defined\n/video\n/video.3gp\n/video.cgi\n/video.cgi?resolution=VGA\n/video.cgi?resolution=vga\n/video.h264\n/video.mjpg\n/video.mp4\n/video.pro1\n/video.pro2\n/video.pro3\n/video/mjpg.cgi\n/video1\n/video1+audio1\n/video2.mjpg\n/videoMain\n/videoinput_1:0/h264_1/onvif.stm\n/videostream.cgi?rate=0\n/vis\n/wfov\n/user=admin_password=tlJwpbo6_channel=1_stream=0.sdp?real_stream\n```\n\n----------------------------------------\n\nTITLE: Conditional Feature Variable Expansion for the Build - CMake\nDESCRIPTION: This snippet translates enabled configuration options (such as Unicode, JIT, bsr-anycrlf) into corresponding preprocessor variable definitions used within the PCRE2 build. It determines the platform/library support by checking option states and sets variables for internal use, making features available to later build logic or to be written into headers. Inputs are the user-chosen options, outputs are CMake and preprocessor variables.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(PCRE2_BUILD_PCRE2_8)\n  set(SUPPORT_PCRE2_8 1)\nendif()\n\nif(PCRE2_BUILD_PCRE2_16)\n  set(SUPPORT_PCRE2_16 1)\nendif()\n\nif(PCRE2_BUILD_PCRE2_32)\n  set(SUPPORT_PCRE2_32 1)\nendif()\n\nif(PCRE2_SUPPORT_BSR_ANYCRLF)\n  set(BSR_ANYCRLF 1)\nendif()\n\nif(PCRE2_NEVER_BACKSLASH_C)\n  set(NEVER_BACKSLASH_C 1)\nendif()\n\nif(PCRE2_SUPPORT_UNICODE)\n  set(SUPPORT_UNICODE 1)\nendif()\n\nif(PCRE2_SUPPORT_JIT)\n  set(SUPPORT_JIT 1)\n  if(UNIX)\n    find_package(Threads REQUIRED)\n    if(CMAKE_USE_PTHREADS_INIT)\n      set(REQUIRE_PTHREAD 1)\n    endif()\n  endif()\nendif()\n\nif(PCRE2_SUPPORT_JIT_SEALLOC)\n  set(CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)\n  check_symbol_exists(mkostemp stdlib.h REQUIRED)\n  unset(CMAKE_REQUIRED_DEFINITIONS)\n  if(${REQUIRED})\n    if(${CMAKE_SYSTEM_NAME} MATCHES Linux|NetBSD)\n      add_compile_definitions(_GNU_SOURCE)\n      set(SLJIT_PROT_EXECUTABLE_ALLOCATOR 1)\n    else()\n      message(FATAL_ERROR \"Your configuration is not supported\")\n    endif()\n  else()\n    set(PCRE2_SUPPORT_JIT_SEALLOC OFF)\n  endif()\nendif()\n\nif(PCRE2GREP_SUPPORT_JIT)\n  set(SUPPORT_PCRE2GREP_JIT 1)\nendif()\n\nif(PCRE2GREP_SUPPORT_CALLOUT)\n  set(SUPPORT_PCRE2GREP_CALLOUT 1)\n  if(PCRE2GREP_SUPPORT_CALLOUT_FORK)\n    set(SUPPORT_PCRE2GREP_CALLOUT_FORK 1)\n  endif()\nendif()\n\nif(PCRE2_SUPPORT_VALGRIND)\n  set(SUPPORT_VALGRIND 1)\nendif()\n\nif(PCRE2_DISABLE_PERCENT_ZT)\n  set(DISABLE_PERCENT_ZT 1)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Generating Cryptographic Keys for NEP using SHA-256\nDESCRIPTION: This snippet demonstrates the process of deriving cryptographic keys for the Nping Echo Protocol. It uses SHA-256 hashing with a passphrase, nonces, and a key type identifier, iterating 1000 times to generate the final key.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/EchoProtoRFC.txt#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nh=SHA256( \"passphrase\" + NONCES + KEY_TYPE_ID )\ndo(1000 times){\n    h=SHA256(h);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ncat Listener with SSL\nDESCRIPTION: This shell command starts Ncat in listening mode (`-l`) on localhost, keeping connections alive (`-k`), enabling verbose output (`-v`), and using SSL (`--ssl`). This command was used as part of the setup to reproduce a segmentation fault in Ncat when scanned with Nmap's SSL NSE scripts.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nncat -v -k --ssl -l localhost\n```\n\n----------------------------------------\n\nTITLE: Generating Pkg-Config and CMake Package Metadata for libssh2 (CMake)\nDESCRIPTION: This CMake script segment configures the correct linker flags, dependency settings, and variables needed for both pkg-config and CMake to find and use libssh2. It iterates over system and custom library directories to build linker flags, manages public and private dependencies for static or shared linking, and provides context-aware assignments for installable files (like .pc and -config-version.cmake). Dependencies include variables like CMAKE_SYSTEM_PREFIX_PATH, LIBSSH2_LIBDIRS, and related CMake built-in modules. Key parameters are lists of library directories and build flags, and the expected output are generated and installed package configuration files under the target lib directory.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n# Avoid getting unnecessary -L options for known system directories.\nunset(_sys_libdirs)\nforeach(_libdir IN LISTS CMAKE_SYSTEM_PREFIX_PATH)\n  if(_libdir MATCHES \"/$\")\n    set(_libdir \"${_libdir}lib\")\n  else()\n    set(_libdir \"${_libdir}/lib\")\n  endif()\n  if(IS_DIRECTORY \"${_libdir}\")\n    list(APPEND _sys_libdirs \"${_libdir}\")\n  endif()\n  if(DEFINED CMAKE_LIBRARY_ARCHITECTURE)\n    set(_libdir \"${_libdir}/${CMAKE_LIBRARY_ARCHITECTURE}\")\n    if(IS_DIRECTORY \"${_libdir}\")\n      list(APPEND _sys_libdirs \"${_libdir}\")\n    endif()\n  endif()\nendforeach()\n\nforeach(_libdir IN LISTS LIBSSH2_LIBDIRS)\n  list(FIND _sys_libdirs \"${_libdir}\" _libdir_index)\n  if(_libdir_index LESS 0)\n    list(APPEND _ldflags \"-L${_libdir}\")\n  endif()\nendforeach()\n\nunset(_implicit_libs)\nif(NOT MINGW AND NOT UNIX)\n  set(_implicit_libs ${CMAKE_C_IMPLICIT_LINK_LIBRARIES})\nendif()\n\nforeach(_lib IN LISTS _implicit_libs LIBSSH2_LIBS)\n  if(TARGET \"${_lib}\")\n    set(_libname \"${_lib}\")\n    get_target_property(_imported \"${_libname}\" IMPORTED)\n    if(NOT _imported)\n      # Reading the LOCATION property on non-imported target will error out.\n      # Assume the user will not need this information in the .pc file.\n      continue()\n    endif()\n    get_target_property(_lib \"${_libname}\" LOCATION)\n    if(NOT _lib)\n      message(WARNING \"Bad lib in library list: ${_libname}\")\n      continue()\n    endif()\n  endif()\n  if(_lib MATCHES \"^-\")\n    list(APPEND _ldflags \"${_lib}\")\n  elseif(_lib MATCHES \".*/.*\")\n    # This gets a bit more complex, because we want to specify the\n    # directory separately, and only once per directory\n    get_filename_component(_libdir ${_lib} DIRECTORY)\n    get_filename_component(_libname ${_lib} NAME_WE)\n    if(_libname MATCHES \"^lib\")\n      list(FIND _sys_libdirs \"${_libdir}\" _libdir_index)\n      if(_libdir_index LESS 0)\n        list(APPEND _ldflags \"-L${_libdir}\")\n      endif()\n      string(REGEX REPLACE \"^lib\" \"\" _libname \"${_libname}\")\n      list(APPEND LIBSSH2_PC_LIBS_PRIVATE \"-l${_libname}\")\n    else()\n      list(APPEND LIBSSH2_PC_LIBS_PRIVATE \"${_lib}\")\n    endif()\n  else()\n    list(APPEND LIBSSH2_PC_LIBS_PRIVATE \"-l${_lib}\")\n  endif()\nendforeach()\n\nif(LIBSSH2_PC_REQUIRES_PRIVATE)\n  string(REPLACE \";\" \",\" LIBSSH2_PC_REQUIRES_PRIVATE \"${LIBSSH2_PC_REQUIRES_PRIVATE}\")\nendif()\nif(LIBSSH2_PC_LIBS_PRIVATE)\n  list(REMOVE_DUPLICATES LIBSSH2_PC_LIBS_PRIVATE)\n  string(REPLACE \";\" \" \" LIBSSH2_PC_LIBS_PRIVATE \"${LIBSSH2_PC_LIBS_PRIVATE}\")\nendif()\nif(_ldflags)\n  list(REMOVE_DUPLICATES _ldflags)\n  string(REPLACE \";\" \" \" _ldflags \"${_ldflags}\")\n  set(LIBSSH2_PC_LIBS_PRIVATE \"${_ldflags} ${LIBSSH2_PC_LIBS_PRIVATE}\")\n  string(STRIP \"${LIBSSH2_PC_LIBS_PRIVATE}\" LIBSSH2_PC_LIBS_PRIVATE)\nendif()\n\n# Merge pkg-config private fields into public ones when static-only\nif(BUILD_SHARED_LIBS)\n  set(LIBSSH2_PC_REQUIRES \"\")\n  set(LIBSSH2_PC_LIBS \"\")\nelse()\n  set(LIBSSH2_PC_REQUIRES \"${LIBSSH2_PC_REQUIRES_PRIVATE}\")\n  set(LIBSSH2_PC_LIBS \"${LIBSSH2_PC_LIBS_PRIVATE}\")\nendif()\n\nset(prefix       \"${CMAKE_INSTALL_PREFIX}\")\nset(exec_prefix  \"\\${prefix}\")\nif(IS_ABSOLUTE ${CMAKE_INSTALL_INCLUDEDIR})\n  set(includedir \"${CMAKE_INSTALL_INCLUDEDIR}\")\nelse()\n  set(includedir \"\\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\")\nendif()\nif(IS_ABSOLUTE ${CMAKE_INSTALL_LIBDIR})\n  set(libdir     \"${CMAKE_INSTALL_LIBDIR}\")\nelse()\n  set(libdir     \"\\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}\")\nendif()\n\n# Generate a pkg-config file for client projects not using CMake.\n# Consumed variables:\n#   exec_prefix\n#   includedir\n#   LIBSSH2_PC_LIBS\n#   LIBSSH2_PC_LIBS_PRIVATE\n#   LIBSSH2_PC_REQUIRES\n#   LIBSSH2_PC_REQUIRES_PRIVATE\n#   LIBSSH2_VERSION\n#   libdir\n#   prefix\nconfigure_file(\"${PROJECT_SOURCE_DIR}/libssh2.pc.in\" \"libssh2.pc\" @ONLY)\ninstall(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/libssh2.pc\"\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\n#\n\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\"\n  VERSION \"${LIBSSH2_VERSION_MAJOR}.${LIBSSH2_VERSION_MINOR}.${LIBSSH2_VERSION_PATCH}\"\n  COMPATIBILITY SameMajorVersion)\ninstall(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\"\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n```\n\n----------------------------------------\n\nTITLE: Connecting Through Chained Ncat Proxy\nDESCRIPTION: This Ncat command connects to the final target `C.C.C.C` by using the local Ncat listener (presumably set up by a command like `ncat -l localhost 1234 --sh-exec \\\"ncat --proxy A.A.A.A B.B.B.B\\\"`) as its proxy. It directs its connection to `localhost:1234`, which in turn forwards the connection through the proxy chain defined in the listener's `--sh-exec` command. This demonstrates the client side of Ncat proxy chaining.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/nmap.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nncat --proxy localhost:1234 C.C.C.C\n```\n\n----------------------------------------\n\nTITLE: Chaining Ncat Proxies (Listener Setup)\nDESCRIPTION: This Ncat command sets up a listener on localhost port 1234. When a connection is received, it executes a nested Ncat command (`ncat --proxy A.A.A.A B.B.B.B`). This nested command connects to the target `B.B.B.B` via the proxy server `A.A.A.A`. This command is the first part of an example demonstrating one method to chain multiple proxies using Ncat.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/nmap.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nncat -l localhost 1234 --sh-exec \"ncat --proxy A.A.A.A B.B.B.B\"\n```\n\n----------------------------------------\n\nTITLE: File Compression Implementation with Size Storage\nDESCRIPTION: Complete implementation of file compression using ZLIB with original file size storage. Includes compression and decompression functions with error handling and progress tracking.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/old/visual-basic.txt#2025-04-23_snippet_1\n\nLANGUAGE: Visual Basic\nCODE:\n```\nOption Explicit\nPrivate lngpvtPcnSml As Long 'Stores value for 'lngPercentSmaller'\nPrivate Const SUCCESS As Long = 0\nPrivate Const strFilExt As String = \".cpr\"\nPrivate Declare Function lngfncCpr Lib \"zlib.dll\" Alias \"compress2\" (ByRef\ndest As Any, ByRef destLen As Any, ByRef src As Any, ByVal srcLen As Long,\nByVal level As Integer) As Long\nPrivate Declare Function lngfncUcp Lib \"zlib.dll\" Alias \"uncompress\" (ByRef\ndest As Any, ByRef destLen As Any, ByRef src As Any, ByVal srcLen As Long)\nAs Long\n\nPublic Sub subCompressFile(ByVal strargOriFilPth As String, Optional ByVal\nstrargCprFilPth As String, Optional ByVal intLvl As Integer = 9)\n    Dim strCprPth As String\n    Dim lngOriSiz As Long\n    Dim lngCprSiz As Long\n    Dim bytaryOri() As Byte\n    Dim bytaryCpr() As Byte\n    lngOriSiz = FileLen(strargOriFilPth)\n    ReDim bytaryOri(lngOriSiz - 1)\n    Open strargOriFilPth For Binary Access Read As #1\n        Get #1, , bytaryOri()\n    Close #1\n    strCprPth = IIf(strargCprFilPth = \"\", strargOriFilPth, strargCprFilPth)\n'Select file path and name\n    strCprPth = strCprPth & IIf(Right(strCprPth, Len(strFilExt)) =\nstrFilExt, \"\", strFilExt) 'Add file extension if not exists\n    lngCprSiz = (lngOriSiz * 1.01) + 12 'Compression needs temporary a bit\nmore space then original file size\n    ReDim bytaryCpr(lngCprSiz - 1)\n    If lngfncCpr(bytaryCpr(0), lngCprSiz, bytaryOri(0), lngOriSiz, intLvl) =\nSUCCESS Then\n        lngpvtPcnSml = (1# - (lngCprSiz / lngOriSiz)) * 100\n        ReDim Preserve bytaryCpr(lngCprSiz - 1)\n        Open strCprPth For Binary Access Write As #1\n            Put #1, , bytaryCpr()\n            Put #1, , lngOriSiz 'Add the original size value to the end\n(last 4 bytes)\n        Close #1\n    Else\n        MsgBox \"Compression error\"\n    End If\n    Erase bytaryCpr\n    Erase bytaryOri\nEnd Sub\n\nPublic Sub subUncompressFile(ByVal strargFilPth As String)\n    Dim bytaryCpr() As Byte\n    Dim bytaryOri() As Byte\n    Dim lngOriSiz As Long\n    Dim lngCprSiz As Long\n    Dim strOriPth As String\n    lngCprSiz = FileLen(strargFilPth)\n    ReDim bytaryCpr(lngCprSiz - 1)\n    Open strargFilPth For Binary Access Read As #1\n        Get #1, , bytaryCpr()\n    Close #1\n    'Read the original file size value:\n    lngOriSiz = bytaryCpr(lngCprSiz - 1) * (2 ^ 24) _\n              + bytaryCpr(lngCprSiz - 2) * (2 ^ 16) _\n              + bytaryCpr(lngCprSiz - 3) * (2 ^ 8) _\n              + bytaryCpr(lngCprSiz - 4)\n    ReDim Preserve bytaryCpr(lngCprSiz - 5) 'Cut of the original size value\n    ReDim bytaryOri(lngOriSiz - 1)\n    If lngfncUcp(bytaryOri(0), lngOriSiz, bytaryCpr(0), lngCprSiz) = SUCCESS\nThen\n        strOriPth = Left(strargFilPth, Len(strargFilPth) - Len(strFilExt))\n        Open strOriPth For Binary Access Write As #1\n            Put #1, , bytaryOri()\n        Close #1\n    Else\n        MsgBox \"Uncompression error\"\n    End If\n    Erase bytaryCpr\n    Erase bytaryOri\nEnd Sub\nPublic Property Get lngPercentSmaller() As Long\n    lngPercentSmaller = lngpvtPcnSml\nEnd Property\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom BPF Filter Packet Layout - ASCII Diagram\nDESCRIPTION: This snippet presents an ASCII-art diagram representing the layout of a custom field appended to a network packet when the Protocol field holds 0xAA. It shows the byte alignment and boundaries for the BPF Filter Specification Length, the actual filter specification string (in tcpdump format), and necessary padding to 16-byte multiples. The diagram guides developers in constructing and parsing packet buffers and ensures that the filter length, its network byte order, and padding logic are implemented according to protocol requirements.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/EchoProtoRFC_v0.txt#2025-04-23_snippet_3\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n0                   1                   2                   3\\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n|    BPF Filter Spec Length     |                               .\\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               .\\n.                                                               .\\n.                       BFP Filter Spec                         .\\n.                                               +-+-+-+-+-+-+-+-+\\n|                                               |    Padding    |\\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Integration for Remote Functionality in CMake\nDESCRIPTION: Configuration logic for detecting and integrating OpenSSL when ENABLE_REMOTE is enabled. Handles OpenSSL library paths and flags for both pkg-config and manual configuration scenarios.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_REMOTE)\n  #\n  # OpenSSL/libressl.\n  #\n  find_package(OpenSSL)\n  if(OPENSSL_FOUND)\n    #\n    # We have OpenSSL.\n    #\n    include_directories(SYSTEM ${OPENSSL_INCLUDE_DIR})\n    set(PCAP_LINK_LIBRARIES ${PCAP_LINK_LIBRARIES} ${OPENSSL_LIBRARIES})\n\n    #\n    # The find_package() module CMake provides for OpenSSL uses does not\n    # give us a defined indication of whether it found OpenSSL with\n    # pkg-config or not.  We need to know that as, if it was found with\n    # pkg-config, we should set the Requires.private value in libpcap.pc\n    # to include its package name, openssl, otherwise we should add the\n    # names for the static libraries to Libs.private.\n    #\n    # On UN*X, FindOpenSSL happens to use pkg-config to find OpenSSL, but\n    # it doesn't appear to be documented as doing so; therefore, we don't\n    # assume that, if we got here, we have pkg-config.\n    #\n    # So we use pkg_get_link_info() to run pkg-config ourselves, both\n    # because FindOpenSSL doesn't set the OPENSSL_LDFLAGS or\n    # OPENSSL_STATIC_LDFLAGS variables and because, for reasons explained\n    # in the comment before the pkg_get_link_info() macro, even if it did,\n    # it wouldn't be what we want anyway.\n    #\n    if (PKG_CONFIG_EXECUTABLE)\n      pkg_get_link_info(OPENSSL openssl)\n      if (OPENSSL_FOUND_WITH_PKG_CONFIG)\n        #\n        # pkg-config failed; assume that means that there is no openssl\n        # package for it to find.  Just add OPENSSL_LIBRARIES to\n        # LIBS_PRIVATE AND LIBS_STATIC, as that's the\n        # best we can do. XXX - need list of -l and -L flags to add....\n        #\n        set(LIBS \"${LIBS} ${OPENSSL_LIBS}\")\n        set(LIBS_STATIC \"${LIBS_STATIC} ${OPENSSL_LIBS_STATIC}\")\n        set(REQUIRES_PRIVATE \"${REQUIRES_PRIVATE} ${OPENSSL_PACKAGE_NAME}\")\n      endif()\n    else()\n      # Get it from OPENSSL_LIBRARIES\n      foreach(_lib IN LISTS OPENSSL_LIBRARIES)\n        #\n        # Get the directory in which the library resides.\n        #\n        get_filename_component(_lib_directory \"${_lib}\" DIRECTORY)\n\n        #\n        # Is the library directory in CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES?\n        # (See comment above on why we use that.)\n        #\n        list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES \"${_lib_directory}\" _lib_index)\n        if(_lib_index EQUAL -1)\n          #\n          # No, so add a -L flag to get the linker to search in that\n          # directory.\n          #\n          set(LIBS \"${LIBS} -L${_lib_directory}\")\n          set(LIBS_STATIC \"${LIBS_STATIC} -L${_lib_directory}\")\n          set(LIBS_PRIVATE \"${LIBS_PRIVATE} -L${_lib_directory}\")\n        endif()\n\n        #\n        # Get the file name of the library, without the extension.\n        #\n        get_filename_component(_lib_filename \"${_lib}\" NAME_WE)\n\n        #\n        # Strip off the \"lib\" prefix to get the library name, and\n        # add a -l flag based on that.\n        #\n        string(REGEX REPLACE \"^lib\" \"\" _library_name \"${_lib_filename}\")\n        set(LIBS \"${LIBS} -l${_library_name}\")\n        set(LIBS_STATIC \"${LIBS_STATIC} -l${_library_name}\")\n        set(LIBS_PRIVATE \"${LIBS_PRIVATE} -l${_library_name}\")\n      endforeach()\n    endif()\n    set(HAVE_OPENSSL YES)\n  endif(OPENSSL_FOUND)\nendif(ENABLE_REMOTE)\n```\n\n----------------------------------------\n\nTITLE: Running autogen.sh with specific autoreconf version in shell\nDESCRIPTION: Command to run the autogen.sh script with a specific version of autoreconf, which builds the configure and config.h.in files when building from a git clone.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/INSTALL.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTORECONF=autoreconf-2.69 ./autogen.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Packet Capture Type in CMake\nDESCRIPTION: Determines the packet capture mechanism type based on platform and available libraries. For Windows, checks for packet.dll (NPF). For Unix systems, checks for various capture mechanisms like BPF, DLPI, Linux packet sockets, etc. Provides fallback to null capture type if no mechanism is available.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    if(PCAP_TYPE STREQUAL \"\")\n        if(HAVE_PACKET32)\n            set(PCAP_TYPE npf)\n        else()\n            message(FATAL_ERROR \"No supported packet capture interface was found.\\nIn order to build a version of libpcap that supports packet capture\\non Windows, you will need to install Npcap and the Npcap SDK, or\\nWinPcap and the WinPcap SDK, and run cmake with -DPacket_ROOT={path of SDK},\\nwhere {path of SDK} is the path name of the top-level directory of the SDK.\\nThat argument may have to be quoted if the path contains blanks.\\nIf you want a libpcap that cannot capture packets but that can read\\npcap and pcapng files, run cmake with -DPCAP_TYPE=null.\")\n        endif()\n    endif()\nelse()\n    if(PCAP_TYPE STREQUAL \"\")\n        check_include_files(\"sys/types.h;net/bpf.h\" HAVE_NET_BPF_H)\n        if(HAVE_NET_BPF_H)\n            if(HAVE_SYS_IOCCOM_H)\n                check_symbol_exists(BIOCSETIF \"sys/types.h;sys/time.h;sys/ioctl.h;sys/socket.h;sys/ioccom.h;net/bpf.h;net/if.h\" BPF_H_DEFINES_BIOCSETIF)\n            else(HAVE_SYS_IOCCOM_H)\n                check_symbol_exists(BIOCSETIF \"sys/types.h;sys/time.h;sys/ioctl.h;sys/socket.h;net/bpf.h;net/if.h\" BPF_H_DEFINES_BIOCSETIF)\n            endif(HAVE_SYS_IOCCOM_H)\n        endif(HAVE_NET_BPF_H)\n        check_include_file(net/pfilt.h HAVE_NET_PFILT_H)\n        check_include_file(net/enet.h HAVE_NET_ENET_H)\n        check_include_file(net/nit.h HAVE_NET_NIT_H)\n        check_include_file(sys/net/nit.h HAVE_SYS_NET_NIT_H)\n        check_include_file(linux/socket.h HAVE_LINUX_SOCKET_H)\n        check_include_file(net/raw.h HAVE_NET_RAW_H)\n        check_include_file(sys/dlpi.h HAVE_SYS_DLPI_H)\n        check_include_file(config/HaikuConfig.h HAVE_CONFIG_HAIKUCONFIG_H)\n\n        if(BPF_H_DEFINES_BIOCSETIF)\n            set(PCAP_TYPE bpf)\n        elseif(HAVE_LINUX_SOCKET_H)\n            set(PCAP_TYPE linux)\n        elseif(HAVE_NET_PFILT_H)\n            set(PCAP_TYPE pf)\n        elseif(HAVE_NET_ENET_H)\n            set(PCAP_TYPE enet)\n        elseif(HAVE_NET_NIT_H)\n            set(PCAP_TYPE snit)\n        elseif(HAVE_SYS_NET_NIT_H)\n            set(PCAP_TYPE nit)\n        elseif(HAVE_NET_RAW_H)\n            set(PCAP_TYPE snoop)\n        elseif(HAVE_SYS_DLPI_H)\n            set(PCAP_TYPE dlpi)\n        elseif(HAVE_CONFIG_HAIKUCONFIG_H)\n            set(PCAP_TYPE haiku)\n        else()\n            message(FATAL_ERROR \"No supported packet capture interface was found.\\nSee the INSTALL.md file for information on packet capture support in\\nvarious operating systems.\\nIf you want a libpcap that cannot capture packets but that can read\\npcap and pcapng files, run cmake with -DPCAP_TYPE=null.\")\n        endif()\n    endif()\nendif(WIN32)\nmessage(STATUS \"Packet capture mechanism type: ${PCAP_TYPE}\")\n\nfind_package(PkgConfig QUIET)\n```\n\n----------------------------------------\n\nTITLE: Adding C99 Compiler Flags for Various Compilers in CMake\nDESCRIPTION: This block, executed for non-MSVC compilers, attempts to enable C99 features required by the project. It uses the `require_and_add_compiler_option` macro to test and add the appropriate C99 flag based on the detected compiler ID (`CMAKE_C_COMPILER_ID`). Flags tested include `-std=gnu99` for GCC/Clang, `-qlanglvl=extc99` for IBM XL, `-AC99` for HP C, `-xc99` for Sun C, and `-c99` for Intel C. If the required flag isn't supported, the build fails.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n    #\n    # Try to enable as many C99 features as we can.\n    # At minimum, we want C++/C99-style // comments.\n    #\n    # Newer versions of compilers might default to supporting C99, but\n    # older versions may require a special flag.\n    #\n    # Prior to CMake 3.1, setting CMAKE_C_STANDARD will not have any effect,\n    # so, unless and until we require CMake 3.1 or later, we have to do it\n    # ourselves on pre-3.1 CMake, so we just do it ourselves on all versions\n    # of CMake.\n    #\n    # Note: with CMake 3.1 through 3.5, the only compilers for which CMake\n    # handles CMAKE_C_STANDARD are GCC and Clang.  3.6 adds support only\n    # for Intel C; 3.9 adds support for PGI C, Sun C, and IBM XL C, and\n    # 3.10 adds support for Cray C and IAR C, but no version of CMake has\n    # support for HP C.  Therefore, even if we use CMAKE_C_STANDARD with\n    # compilers for which CMake supports it, we may still have to do it\n    # ourselves on other compilers.\n    #\n    # See the CMake documentation for the CMAKE_<LANG>_COMPILER_ID variables\n    # for a list of compiler IDs.\n    #\n    # XXX - this just tests whether the option works, fails if it doesn't,\n    # and adds it if it does.  We don't test whether it's necessary in order\n    # to get the C99 features that we use, or whether, if it's used, it\n    # enables all the features that we require.\n    #\n    if(CMAKE_C_COMPILER_ID MATCHES \"GNU\" OR\n       CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n        require_and_add_compiler_option(\"-std=gnu99\")\n    elseif(CMAKE_C_COMPILER_ID MATCHES \"XL\")\n        #\n        # We want support for extensions picked up for GNU C compatibility,\n        # so we use -qlanglvl=extc99.\n        #\n        require_and_add_compiler_option(\"-qlanglvl=extc99\")\n    elseif(CMAKE_C_COMPILER_ID MATCHES \"HP\")\n        require_and_add_compiler_option(\"-AC99\")\n    elseif(CMAKE_C_COMPILER_ID MATCHES \"Sun\")\n        require_and_add_compiler_option(\"-xc99\")\n    elseif(CMAKE_C_COMPILER_ID MATCHES \"Intel\")\n        require_and_add_compiler_option(\"-c99\")\n    endif()\nendif(MSVC)\n```\n\n----------------------------------------\n\nTITLE: Configuring wolfSSL Backend for libssh2 in CMake\nDESCRIPTION: Detects and configures wolfSSL as a cryptographic backend for libssh2. Sets up include directories, libraries, compiler flags, and handles additional dependencies like ZLIB.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(CRYPTO_BACKEND STREQUAL \"wolfSSL\" OR NOT CRYPTO_BACKEND)\n\n  find_package(WolfSSL ${_specific_crypto_requirement})\n\n  if(WOLFSSL_FOUND)\n    set(CRYPTO_BACKEND \"wolfSSL\")\n    set(CRYPTO_BACKEND_DEFINE \"LIBSSH2_WOLFSSL\")\n    set(CRYPTO_BACKEND_INCLUDE_DIR ${WOLFSSL_INCLUDE_DIRS})\n    list(APPEND LIBSSH2_LIBS ${WOLFSSL_LIBRARIES})\n    list(APPEND LIBSSH2_LIBDIRS ${WOLFSSL_LIBRARY_DIRS})\n    list(APPEND LIBSSH2_PC_REQUIRES_PRIVATE \"wolfssl\")\n    link_directories(${WOLFSSL_LIBRARY_DIRS})\n    if(WOLFSSL_CFLAGS)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${WOLFSSL_CFLAGS}\")\n    endif()\n\n    if(WIN32)\n      list(APPEND LIBSSH2_LIBS \"crypt32\")\n    endif()\n\n    find_package(ZLIB)\n\n    if(ZLIB_FOUND)\n      list(APPEND CRYPTO_BACKEND_INCLUDE_DIR ${ZLIB_INCLUDE_DIR})  # Public wolfSSL headers require zlib headers\n      list(APPEND LIBSSH2_LIBS ${ZLIB_LIBRARIES})\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic Nmap Installation Commands on Mac OS X\nDESCRIPTION: Standard commands for configuring, building, and installing Nmap on Mac OS X from the root folder. This is the simplest installation method when all prerequisites are met.\nSOURCE: https://github.com/nmap/nmap/blob/master/macosx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./configure\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Nping Random Value Usage Examples\nDESCRIPTION: Examples showing how to use random values for parameters like port numbers, IP addresses, and MAC addresses in Nping commands.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/NpingCommandLine.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnping --tcp --dest-port random 192.168.1.1\nnping --udp --source-port random  --source-mac random 207.46.197.32\nnping --arp --sender-ip random --ttl random scanme.nmap.org\n```\n\n----------------------------------------\n\nTITLE: Configuring PCAP for Linux Platforms in CMake\nDESCRIPTION: Sets up PCAP for Linux platforms. Checks for wireless extensions and configures libnl libraries (version 3) if they are available and if BUILD_WITH_LIBNL is enabled.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\n    elseif(PCAP_TYPE STREQUAL \"linux\")\n        #\n        # Do we have the wireless extensions?\n        # linux/wireless.h requires sys/socket.h.\n        #\n        check_include_files(\"sys/socket.h;linux/wireless.h\" HAVE_LINUX_WIRELESS_H)\n\n        #\n        # Do we have libnl?\n        # We only want version 3.  Version 2 was, apparently,\n        # short-lived, and version 1 is source and binary\n        # incompatible with version 3, and it appears that,\n        # these days, everybody's using version 3.  We're\n        # not supporting older versions of the Linux kernel;\n        # let's drop support for older versions of libnl, too.\n        #\n        if(BUILD_WITH_LIBNL)\n            pkg_check_modules(LIBNL libnl-genl-3.0)\n            if(LIBNL_FOUND)\n                set(PCAP_LINK_LIBRARIES ${LIBNL_LIBRARIES} ${PCAP_LINK_LIBRARIES})\n\n                #\n                # Get raw link flags from pkg-config.\n                #\n                pkg_get_link_info(LIBNL libnl-genl-3.0)\n                set(LIBS \"${LIBNL_LIBS} ${LIBS}\")\n                set(LIBS_STATIC \"${LIBNL_LIBS_STATIC} ${LIBS_STATIC}\")\n                set(REQUIRES_PRIVATE \"${LIBNL_PACKAGE_NAME} ${REQUIRES_PRIVATE}\")\n            else()\n                cmake_push_check_state()\n                set(CMAKE_REQUIRED_LIBRARIES nl-3)\n                check_function_exists(nl_socket_alloc HAVE_LIBNL)\n                cmake_pop_check_state()\n                if(HAVE_LIBNL)\n                    #\n                    # Yes, we have libnl 3.x.\n                    #\n                    set(PCAP_LINK_LIBRARIES nl-genl-3 nl-3 ${PCAP_LINK_LIBRARIES})\n                    include_directories(\"/usr/include/libnl3\")\n                    set(LIBS \"-lnl-genl-3 -lnl-3 ${LIBS}\")\n                    set(LIBS_STATIC \"-lnl-genl-3 -lnl-3 ${LIBS_STATIC}\")\n                    set(LIBS_PRIVATE \"-lnl-genl-3 -lnl-3 ${LIBS_PRIVATE}\")\n                endif()\n            endif()\n        else()\n            unset(HAVE_LIBNL CACHE) # check_function_exists stores results in cache\n        endif()\n\n        check_struct_has_member(\"struct tpacket_auxdata\" tp_vlan_tci linux/if_packet.h HAVE_STRUCT_TPACKET_AUXDATA_TP_VLAN_TCI)\n```\n\n----------------------------------------\n\nTITLE: HELLO Operation Packet Structure for Nping Echo Protocol\nDESCRIPTION: This diagram shows the structure of the HELLO packet used in the initial handshake between client and server. The HELLO packet informs the server of the protocol version supported by the client.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/EchoProtoRFC_v0.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n         0                   1                   2                   3\n         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    0   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared and Static PCAP Library Targets in CMake\nDESCRIPTION: Sets up CMake targets for building shared and static versions of the PCAP library. Includes source files, dependencies, and compilation settings.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_54\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(SerializeTarget\n    DEPENDS\n    ${CMAKE_CURRENT_BINARY_DIR}/grammar.c\n    ${CMAKE_CURRENT_BINARY_DIR}/scanner.c\n)\n\nset_source_files_properties(${PROJECT_EXTERNAL_OBJECT_LIST} PROPERTIES\n    EXTERNAL_OBJECT TRUE)\n\nif(BUILD_SHARED_LIBS)\n    add_library(${LIBRARY_NAME} SHARED\n        ${PROJECT_SOURCE_LIST_C}\n        ${CMAKE_CURRENT_BINARY_DIR}/grammar.c\n        ${CMAKE_CURRENT_BINARY_DIR}/scanner.c\n        ${PROJECT_EXTERNAL_OBJECT_LIST}\n    )\n    target_include_directories(${LIBRARY_NAME} PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n        $<INSTALL_INTERFACE:include>\n    )\n    add_dependencies(${LIBRARY_NAME} SerializeTarget)\n    set_target_properties(${LIBRARY_NAME} PROPERTIES\n        COMPILE_DEFINITIONS BUILDING_PCAP)\n    set_target_properties(${LIBRARY_NAME} PROPERTIES\n        DEFINE_SYMBOL pcap_EXPORTS)\n    if(NOT \"${LINKER_FLAGS}\" STREQUAL \"\")\n        set_target_properties(${LIBRARY_NAME} PROPERTIES\n            LINK_FLAGS \"${LINKER_FLAGS}\")\n    endif()\nendif(BUILD_SHARED_LIBS)\n\nadd_library(${LIBRARY_NAME}_static STATIC\n    ${PROJECT_SOURCE_LIST_C}\n    ${CMAKE_CURRENT_BINARY_DIR}/grammar.c\n    ${CMAKE_CURRENT_BINARY_DIR}/scanner.c\n    ${PROJECT_EXTERNAL_OBJECT_LIST}\n)\ntarget_include_directories(${LIBRARY_NAME}_static PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n    $<INSTALL_INTERFACE:include>\n)\nadd_dependencies(${LIBRARY_NAME}_static SerializeTarget)\nset_target_properties(${LIBRARY_NAME}_static PROPERTIES\n    COMPILE_DEFINITIONS BUILDING_PCAP)\n```\n\n----------------------------------------\n\nTITLE: Executing Nping TCP Scan and Observing Resource Errors (Bash)\nDESCRIPTION: This example demonstrates running an Nping command to send a single TCP packet (`-c1`) to port 80 (`-p80`) of 'scanme.nmap.org' using the TCP protocol (`--tcp`). The output shows the sent (SENT) and received (RCVD) packets, followed by error messages 'nping_event_handler(): ... killed: Resource temporarily unavailable', indicating a potential bug or resource issue within Nping version 0.5.61TEST4 that requires investigation.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# nping --tcp -p80 -c1 scanme.nmap.org\n\nStarting Nping 0.5.61TEST4 ( https://nmap.org/nping ) at 2012-02-16 17:52 PST\nSENT (0.3307s) TCP 192.168.0.5:42005 > 74.207.244.221:80 S ttl=64 id=23109 iplen=40  seq=1015357225 win=1480\nRCVD (0.3524s) TCP 74.207.244.221:80 > 192.168.0.5:42005 SA ttl=51 id=0 iplen=44  seq=3197025741 win=14600 <mss 1460>\nnping_event_handler(): READ-PCAP killed: Resource temporarily unavailable\nnping_event_handler(): TIMER killed: Resource temporarily unavailable\n[...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Adler-32 Checksum in C\nDESCRIPTION: Sample C code demonstrating the implementation of the Adler-32 checksum algorithm for data buffers. The code shows how to update a running checksum with new bytes and includes usage examples.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1950.txt#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define BASE 65521 /* largest prime smaller than 65536 */\n\n/*\n   Update a running Adler-32 checksum with the bytes buf[0..len-1]\n and return the updated checksum. The Adler-32 checksum should be\n initialized to 1.\n\n Usage example:\n\n   unsigned long adler = 1L;\n\n   while (read_buffer(buffer, length) != EOF) {\n     adler = update_adler32(adler, buffer, length);\n   }\n   if (adler != original_adler) error();\n*/\nunsigned long update_adler32(unsigned long adler,\n   unsigned char *buf, int len)\n{\n  unsigned long s1 = adler & 0xffff;\n  unsigned long s2 = (adler >> 16) & 0xffff;\n  int n;\n\n  for (n = 0; n < len; n++) {\n\n```\n\n----------------------------------------\n\nTITLE: READY Packet Structure Diagram - ASCII Diagram\nDESCRIPTION: This snippet provides the structure for the READY operation packet, which the server uses to confirm readiness for a session after a SPECS packet is received. The diagram identifies the protocol fields: Version, OpCode (0x04), Total Length, Sequence Number, Reserved fields, and the SHA256 checksum. This representation helps developers lay out packet buffers, correctly place/check reserved areas, and position integrity checks within binary protocol implementations.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/EchoProtoRFC_v0.txt#2025-04-23_snippet_5\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n0                   1                   2                   3\\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\\n0   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |   Version     | OP Code 0x04  |          Total Length         |\\n1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |                         Sequence Number                       |\\n2   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |                            Reserved                           |\\n3   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |                            Reserved                           |\\n4   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |                                                               |\\n.   .                                                               .\\n.   .                        SHA256 Checksum                        .\\n.   .                                                               .\\n    |                                                               |\\n12  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing PCAP Library Files in CMake\nDESCRIPTION: Generates configuration files, sets up the grammar file, and defines installation rules for the PCAP library, including headers and man pages.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_56\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmakeconfig.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/grammar.y.in ${CMAKE_CURRENT_BINARY_DIR}/grammar.y @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Executing Nping Port Scan Without Specifying Protocol (Bash)\nDESCRIPTION: This command attempts to use Nping to target port 80 (`-p80`) on 'google.com'. However, as noted in the surrounding text, without explicitly specifying a protocol (like `--tcp` or `--udp`), Nping ignores the port specifier. The documentation suggests Nping should issue a warning or error in this scenario, as the user likely intended to perform a protocol-specific scan (e.g., TCP) on that port.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnping -p80 google.com\n```\n\n----------------------------------------\n\nTITLE: Debugging NSE HTTP Pipelining with Nmap Scan (Bash)\nDESCRIPTION: This command runs Nmap with root privileges (`sudo`) executing the 'http-enum' script (`--script=http-enum`) against 'bamsoftware.com' on port 80 (`-p80`), using debug level 2 (`-d2`) for verbose output. The subsequent NSE output illustrates a problem with HTTP pipelining: it initially attempts 100 pipelined requests but drastically reduces this number due to receiving fewer responses than expected, eventually reverting to one request at a time. This indicates an inefficiency or bug in NSE's pipelining mechanism that needs investigation.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo nmap --script=http-enum bamsoftware.com -p80 -d2\nquickly (within a few seconds) gives:\n  NSE: http-enum: Searching for entries under path '' (change with 'http-enum.basepath' argument)\n  NSE: Total number of pipelined requests: 2081\n  NSE: Number of requests allowed by pipeline: 100\n  NSE: Received only 41 of 100 expected responses.\n  Decreasing max pipelined requests to 41.\n  NSE: Received only 1 of 41 expected responses.\n  Decreasing max pipelined requests to 1.\n```\n\n----------------------------------------\n\nTITLE: Configuring 32-bit PCRE2 Libraries in CMake\nDESCRIPTION: Configures both static and shared libraries for the 32-bit version of PCRE2. Sets version information, compile definitions, and platform-specific settings. Creates library aliases based on build configuration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nif(PCRE2_BUILD_PCRE2_32)\n  if(BUILD_STATIC_LIBS)\n    add_library(pcre2-32-static STATIC ${PCRE2_HEADERS} ${PCRE2_SOURCES} ${PROJECT_BINARY_DIR}/config.h)\n    target_include_directories(pcre2-32-static PUBLIC ${PROJECT_BINARY_DIR})\n    set_target_properties(\n      pcre2-32-static\n      PROPERTIES\n        UNITY_BUILD OFF\n        COMPILE_DEFINITIONS PCRE2_CODE_UNIT_WIDTH=32\n        MACHO_COMPATIBILITY_VERSION \"${LIBPCRE2_32_MACHO_COMPATIBILITY_VERSION}\"\n        MACHO_CURRENT_VERSION \"${LIBPCRE2_32_MACHO_CURRENT_VERSION}\"\n        VERSION ${LIBPCRE2_32_VERSION}\n        SOVERSION ${LIBPCRE2_32_SOVERSION}\n    )\n    target_compile_definitions(pcre2-32-static PUBLIC PCRE2_STATIC)\n    if(REQUIRE_PTHREAD)\n      target_link_libraries(pcre2-32-static Threads::Threads)\n    endif()\n    set(TARGETS ${TARGETS} pcre2-32-static)\n\n    if(MSVC)\n      set_target_properties(pcre2-32-static PROPERTIES OUTPUT_NAME pcre2-32-static)\n    else()\n      set_target_properties(pcre2-32-static PROPERTIES OUTPUT_NAME pcre2-32)\n    endif()\n    if(PCRE2_STATIC_PIC)\n      set_target_properties(pcre2-32-static PROPERTIES POSITION_INDEPENDENT_CODE 1)\n    endif()\n  endif()\n\n  if(BUILD_SHARED_LIBS)\n    add_library(pcre2-32-shared SHARED ${PCRE2_HEADERS} ${PCRE2_SOURCES} ${PROJECT_BINARY_DIR}/config.h)\n    target_include_directories(pcre2-32-shared PUBLIC ${PROJECT_BINARY_DIR})\n    set_target_properties(\n      pcre2-32-shared\n      PROPERTIES\n        UNITY_BUILD OFF\n        COMPILE_DEFINITIONS PCRE2_CODE_UNIT_WIDTH=32\n        MACHO_COMPATIBILITY_VERSION \"${LIBPCRE2_32_MACHO_COMPATIBILITY_VERSION}\"\n        MACHO_CURRENT_VERSION \"${LIBPCRE2_32_MACHO_CURRENT_VERSION}\"\n        VERSION ${LIBPCRE2_32_VERSION}\n        SOVERSION ${LIBPCRE2_32_SOVERSION}\n        OUTPUT_NAME pcre2-32\n    )\n    if(REQUIRE_PTHREAD)\n      target_link_libraries(pcre2-32-shared Threads::Threads)\n    endif()\n    set(TARGETS ${TARGETS} pcre2-32-shared)\n    set(DLL_PDB_FILES $<TARGET_PDB_FILE_DIR:pcre2-32-shared>/pcre2-32.pdb ${DLL_PDB_FILES})\n    set(DLL_PDB_DEBUG_FILES $<TARGET_PDB_FILE_DIR:pcre2-32-shared>/pcre2-32d.pdb ${DLL_PDB_DEBUG_FILES})\n\n    if(MINGW)\n      if(NON_STANDARD_LIB_PREFIX)\n        set_target_properties(pcre2-32-shared PROPERTIES PREFIX \"\")\n      endif()\n      if(NON_STANDARD_LIB_SUFFIX)\n        set_target_properties(pcre2-32-shared PROPERTIES SUFFIX \"-0.dll\")\n      endif()\n    endif()\n  endif()\n\n  if(BUILD_STATIC_LIBS)\n    add_library(pcre2-32 ALIAS pcre2-32-static)\n  else()\n    add_library(pcre2-32 ALIAS pcre2-32-shared)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Verifying Nmap Release Files with GPG\nDESCRIPTION: Command example showing how to verify an Nmap release file using GPG and the Nmap Project signing key. The example demonstrates verifying nmap-3.81.tar.bz2 using its detached signature file.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/nmap_gpgkeys.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngpg --verify nmap-3.81.tar.bz2.gpg.txt nmap-3.81.tar.bz2\n```\n\n----------------------------------------\n\nTITLE: Illustrating Proposed Nmap --data-string Option\nDESCRIPTION: These shell command examples demonstrate the usage of a proposed `--data-string` option for Nmap. This feature would allow users to embed a custom string within the data portion of scan packets, potentially for identification, comments, or testing purposes.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n--data-string \"Scan conducted by Marc Reis from SecOps, extension 2147\"\n--data-string \"pH33r my l3eT s|<iLLz!  I'll 0wN UR b0x!\"\n```\n\n----------------------------------------\n\nTITLE: Build Configuration for libssh2 Components in CMake\nDESCRIPTION: Configures building of libssh2 components including the main library, examples, tests, and documentation. Includes options for lint checking and sets up package versioning for CPack.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(src)\n\nif(BUILD_EXAMPLES)\n  add_subdirectory(example)\nendif()\n\nif(BUILD_TESTING)\n  enable_testing()\n  add_subdirectory(tests)\nendif()\n\noption(LINT \"Check style while building\" OFF)\nif(LINT)\n  add_custom_target(lint ALL \"./ci/checksrc.sh\" WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})\n  if(BUILD_STATIC_LIBS)\n    add_dependencies(${LIB_STATIC} lint)\n  else()\n    add_dependencies(${LIB_SHARED} lint)\n  endif()\nendif()\n\nadd_subdirectory(docs)\n\nfeature_summary(WHAT ALL)\n\nset(CPACK_PACKAGE_VERSION_MAJOR ${LIBSSH2_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${LIBSSH2_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${LIBSSH2_VERSION_PATCH})\nset(CPACK_PACKAGE_VERSION ${LIBSSH2_VERSION})\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Sending TCP Packets with Custom Flags\nDESCRIPTION: Example of using Nping to send TCP SYN packets with additional ECN flag to specific ports. This command requires root privileges.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/NpingExamples.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Send TCP Syn with the ECN flag also set\nsudo nping --tcp google.com --flags syn,ecn -p80,443\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Installation Paths Configuration in CMake\nDESCRIPTION: Configures platform-specific installation paths for Windows, Cygwin, MSYS, and other platforms. Handles 32-bit vs 64-bit differences and MSVC vs MinGW build environments.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_60\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32 OR CYGWIN OR MSYS)\n    #\n    # XXX - according to the CMake documentation, WIN32 is set if\n    # the target is Windows; would there ever be a case where\n    # CYGWIN or MSYS are set but WIN32 *isn't* set?\n    #\n    if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 8)\n        #\n        # Install 64-bit code built with MSVC in the x64 subdirectories,\n        # as that's where it expects it to be.\n        #\n        install(TARGETS ${LIBRARIES_TO_INSTALL}\n                RUNTIME DESTINATION bin/x64\n                LIBRARY DESTINATION lib/x64\n                ARCHIVE DESTINATION lib/x64)\n        if(NOT MINGW)\n            install(FILES $<TARGET_FILE_DIR:${LIBRARY_NAME_STATIC}>/${LIBRARY_NAME_STATIC}.pdb\n                    DESTINATION bin/x64 OPTIONAL)\n            if(BUILD_SHARED_LIBS)\n                install(FILES $<TARGET_PDB_FILE:${LIBRARY_NAME}>\n                        DESTINATION bin/x64 OPTIONAL)\n            endif(BUILD_SHARED_LIBS)\n        endif(NOT MINGW)\n    else(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 8)\n        #\n        # Install 32-bit code, and 64-bit code not built with MSVC\n        # in the top-level directories, as those are where they\n        # expect it to be.\n        #\n        install(TARGETS ${LIBRARIES_TO_INSTALL}\n                RUNTIME DESTINATION bin\n                LIBRARY DESTINATION lib\n                ARCHIVE DESTINATION lib)\n        if(MSVC)\n            install(FILES $<TARGET_FILE_DIR:${LIBRARY_NAME_STATIC}>/${LIBRARY_NAME_STATIC}.pdb\n                    DESTINATION bin OPTIONAL)\n            if(BUILD_SHARED_LIBS)\n                install(FILES $<TARGET_PDB_FILE:${LIBRARY_NAME}>\n                        DESTINATION bin OPTIONAL)\n            endif(BUILD_SHARED_LIBS)\n        endif(MSVC)\n    endif(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 8)\nelse(WIN32 OR CYGWIN OR MSYS)\n    install(TARGETS ${LIBRARIES_TO_INSTALL} DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif(WIN32 OR CYGWIN OR MSYS)\n```\n\n----------------------------------------\n\nTITLE: Ncat Verbose Mode Output Example\nDESCRIPTION: Example showing the current verbose output from Ncat which displays excessive debug information compared to the more concise output from Eric Jackson's nc tool which only shows the essential connection information.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n# ncat -C -v scanme.nmap.org 80\nNSOCK (0.0000s) TCP connection requested to 64.13.134.52:80 (IOD #1) EID 8\nNSOCK (0.0200s) Callback: CONNECT SUCCESS for EID 8 [64.13.134.52:80]\nNSOCK (0.0200s) Read request from IOD #1 [64.13.134.52:80] (timeout: -1ms) EID 18\nNSOCK (0.0200s) Read request for 0 bytes from IOD #2 (peer unspecified) EID 26\nGET / HTTP/1.0\nNSOCK (4.4280s) Callback READ SUCCESS for EID 26 (peer unspecified) (15 bytes)\nNSOCK (4.4280s) Write request for 16 bytes to IOD #1 EID 35 [64.13.134.52:80]\nNSOCK (4.4280s) Callback: WRITE SUCCESS for EID 35 [64.13.134.52:80]\nNSOCK (4.4280s) Read request for 0 bytes from IOD #2 (peer unspecified) EID 42\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific PCAP Library Settings in CMake\nDESCRIPTION: Applies platform-specific settings for the PCAP library on Windows, macOS, and other UNIX systems. Includes version information, output names, and architecture-specific configurations.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_55\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    if(BUILD_SHARED_LIBS)\n        set_target_properties(${LIBRARY_NAME} PROPERTIES\n            VERSION ${PACKAGE_VERSION_NOSUFFIX}\n        )\n    endif(BUILD_SHARED_LIBS)\n    if(MSVC)\n        set(CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY $<TARGET_FILE_DIR:${LIBRARY_NAME}_static>)\n        set_target_properties(${LIBRARY_NAME}_static PROPERTIES\n            COMPILE_PDB_NAME ${LIBRARY_NAME}_static\n            OUTPUT_NAME \"${LIBRARY_NAME}_static\"\n        )\n    elseif(MINGW)\n        set_target_properties(${LIBRARY_NAME} PROPERTIES\n            PREFIX \"\"\n            OUTPUT_NAME \"${LIBRARY_NAME}\"\n        )\n        set_target_properties(${LIBRARY_NAME}_static PROPERTIES\n            OUTPUT_NAME \"${LIBRARY_NAME}\"\n        )\n    endif()\nelse(WIN32) # UN*X\n    if(BUILD_SHARED_LIBS)\n        if(APPLE)\n            set_target_properties(${LIBRARY_NAME} PROPERTIES\n                VERSION ${PACKAGE_VERSION}\n                SOVERSION A\n            )\n        else(APPLE)\n            set_target_properties(${LIBRARY_NAME} PROPERTIES\n                VERSION ${PACKAGE_VERSION}\n                SOVERSION ${PACKAGE_VERSION_MAJOR}\n            )\n        endif(APPLE)\n    endif(BUILD_SHARED_LIBS)\n    set_target_properties(${LIBRARY_NAME}_static PROPERTIES\n        OUTPUT_NAME \"${LIBRARY_NAME}\"\n    )\nendif(WIN32)\n\nif(BUILD_SHARED_LIBS)\n    if(NOT C_ADDITIONAL_FLAGS STREQUAL \"\")\n        set_target_properties(${LIBRARY_NAME} PROPERTIES COMPILE_FLAGS ${C_ADDITIONAL_FLAGS})\n    endif()\n\n    if(APPLE AND \"${CMAKE_OSX_ARCHITECTURES}\" STREQUAL \"\")\n        set_target_properties(${LIBRARY_NAME} PROPERTIES\n            OSX_ARCHITECTURES \"${OSX_LIBRARY_ARCHITECTURES}\")\n    endif()\n    target_link_libraries(${LIBRARY_NAME} ${PCAP_LINK_LIBRARIES})\nendif(BUILD_SHARED_LIBS)\n\nif(NOT C_ADDITIONAL_FLAGS STREQUAL \"\")\n    set_target_properties(${LIBRARY_NAME}_static PROPERTIES COMPILE_FLAGS ${C_ADDITIONAL_FLAGS})\nendif()\n\nif(APPLE AND \"${CMAKE_OSX_ARCHITECTURES}\" STREQUAL \"\")\n    set_target_properties(${LIBRARY_NAME}_static PROPERTIES\n        OSX_ARCHITECTURES \"${OSX_LIBRARY_ARCHITECTURES}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Sending ICMP Packets with Custom Parameters\nDESCRIPTION: Examples of using Nping to send various types of ICMP packets including echo requests, echo replies, parameter problems, source quench, time exceeded, and router advertisements with custom parameters. These commands require root privileges.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/NpingExamples.txt#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Send ICMP echo request wit custom ID and Seq fields\nsudo nping google.com --icmp --icmp-type echo --icmp-id 31337 --icmp-seq 1\n\n# Send ICMP echo reply\nsudo nping google.com --icmp --icmp-type echo-reply\n\n# Send ICMP Parameter problem with custom pointer\nsudo nping google.com --icmp --icmp-type parameter-problem --icmp-param-pointer 9\n\n# Send ICMP Source Quench\nsudo nping google.com --icmp --icmp-type source-quench -v6\n\n# Send ICMP Time Exceeded because time exceeded during reassembly\nsudo nping google.com --icmp --icmp-type te --icmp-code frag-exc -v5\n\n# Send ICMP Router Advertising with 2 entries\nsudo nping google.com --icmp --icmp-type 9 --icmp-advert-entry 1.1.1.1,300 --icmp-advert-entry 33.33.33.33,12345 -v6\n```\n\n----------------------------------------\n\nTITLE: Library Target Definition\nDESCRIPTION: Defines the main library target with all source files and platform-specific implementations.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${PROJECT_NAME}\n    src/addr-util.c\n    src/addr.c\n    src/blob.c\n    src/err.c\n    src/ip-util.c\n    src/ip6.c\n    src/rand.c\n    ${PLATFORM_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Network Capture Support\nDESCRIPTION: Comprehensive CMake configuration that sets up various network capture capabilities. Includes checks for Bluetooth, D-Bus, RDMA, DAG cards, Septel cards, and Myricom SNF support. Configures necessary compiler flags, libraries, and source files based on available system features.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DISABLE_BLUETOOTH)\n    if(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n        check_include_file(bluetooth/bluetooth.h HAVE_BLUETOOTH_BLUETOOTH_H)\n        if(HAVE_BLUETOOTH_BLUETOOTH_H)\n            set(PCAP_SUPPORT_BT TRUE)\n            set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} pcap-bt-linux.c)\n            check_struct_has_member(\"struct sockaddr_hci\" hci_channel \"bluetooth/bluetooth.h;bluetooth/hci.h\" HAVE_STRUCT_SOCKADDR_HCI_HCI_CHANNEL)\n            if(HAVE_STRUCT_SOCKADDR_HCI_HCI_CHANNEL)\n                check_c_source_compiles(...)\n            endif()\n        endif()\n    endif()\nelse()\n    unset(PCAP_SUPPORT_BT_MONITOR CACHE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Nping Echo Client without Capture Option\nDESCRIPTION: This shell command demonstrates running the Nping echo client (`--ec public`) against `echo.nmap.org` over TCP (`--tcp`) on ports 90-92 (`-p90-92`), sending one packet per port (`--count 1`). The `--no-capture` option disables packet capture. The example output highlights a bug where the final packet's CAPT (capture) line is missing when this option is used.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/nping.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nluis@Aberdeen:~$ sudo nping --ec public echo.nmap.org -p90-92 --tcp --count 1 --no-capture\n\n  Starting Nping 0.5.52.IPv6.Beta2 ( https://nmap.org/nping ) at 2011-07-05 12:53 CEST\n  SENT (7.3302s) TCP 163.117.203.253:18554 > 74.207.244.221:90 S ttl=64 \n  CAPT (7.4625s) TCP 163.117.203.253:18554 > 74.207.244.221:90 S ttl=54 \n  SENT (8.3309s) TCP 163.117.203.253:18554 > 74.207.244.221:91 S ttl=64 \n  CAPT (8.4429s) TCP 163.117.203.253:18554 > 74.207.244.221:91 S ttl=54 \n  SENT (9.3310s) TCP 163.117.203.253:18554 > 74.207.244.221:92 S ttl=64 \n   \n  Max rtt: N/A | Min rtt: N/A | Avg rtt: N/A\n  Raw packets sent: 3 (120B) | Rcvd: 0 (0B) | Lost: 3 (100.00%)| Echoed: 2 (80B) \n  Tx time: 2.00181s | Tx bytes/s: 59.95 | Tx pkts/s: 1.50\n  Rx time: 2.00193s | Rx bytes/s: 0.00 | Rx pkts/s: 0.00\n  Nping done: 1 IP address pinged in 9.33 seconds\n```\n\n----------------------------------------\n\nTITLE: Initializing and Calculating Adler-32 Checksum in C\nDESCRIPTION: A function that calculates the Adler-32 checksum of a byte buffer. It initializes the checksum to 1 and then calls update_adler32 to process the buffer data.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1950.txt#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n      unsigned long adler32(unsigned char *buf, int len)\n      {\n        return update_adler32(1L, buf, len);\n      }\n```\n\n----------------------------------------\n\nTITLE: Utility Function for Converting Makefiles to CMake in libssh2\nDESCRIPTION: Defines a CMake function that transforms GNU Make variable assignments into CMake set() commands. This helps with compatibility between build systems and allows reusing existing Makefile configuration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\n# Convert GNU Make assignments into CMake ones.\nfunction(transform_makefile_inc _input_file _output_file)\n  file(READ ${_input_file} _makefile_inc_cmake)\n\n  string(REGEX REPLACE \"\\\\\\\\\\n\" \"\" _makefile_inc_cmake ${_makefile_inc_cmake})\n  string(REGEX REPLACE \"([A-Za-z_]+) *= *([^\\n]*)\" \"set(\\\\1 \\\\2)\" _makefile_inc_cmake ${_makefile_inc_cmake})\n\n  file(WRITE ${_output_file} ${_makefile_inc_cmake})\n  set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS \"${_input_file}\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining NEP Message Type Codes\nDESCRIPTION: Defines the message type code constants used in the Network Echo Protocol (NEP). These codes identify different message types exchanged during communication between client and server.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/EchoProtoRFC.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nMessage NEP_HANDSHAKE_SERVER:      0x01\nMessage NEP_HANDSHAKE_CLIENT:      0x02\nMessage NEP_HANDSHAKE_FINAL:       0x03\nMessage NEP_PACKET_SPEC:           0x04\nMessage NEP_READY:                 0x05\nMessage NEP_ECHO:                  0x06\nMessage NEP_ERROR:                 0x07\n```\n\n----------------------------------------\n\nTITLE: GTK Mac Bundler Installation\nDESCRIPTION: Commands to clone and install gtk-mac-bundler for creating application bundles.\nSOURCE: https://github.com/nmap/nmap/blob/master/macosx/BUNDLING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git://git.gnome.org/gtk-mac-bundler\n$ cd gtk-mac-bundler\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Sending UDP Packets with Invalid Checksums\nDESCRIPTION: Example of using Nping to send UDP packets with deliberately invalid checksums from a specific source port. This command requires root privileges and includes verbose output level 6.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/NpingExamples.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Send UDP packet with a bogus checksum from port 1337\nsudo nping --udp --badsum --source-port 1337 -p 53 google.com -v6\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exports for LibSSH2\nDESCRIPTION: Sets up CMake package configuration for use by other projects. This includes exporting targets and registering the package.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Package config\n\n## During package installation, install libssh2-targets.cmake\ninstall(EXPORT \"${PROJECT_NAME}-targets\"\n  NAMESPACE \"${PROJECT_NAME}::\"\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n\n## During build, register directly from build tree\n# create libssh2-targets.cmake\nexport(TARGETS ${_libssh2_export} NAMESPACE \"${PROJECT_NAME}::\" FILE \"${PROJECT_NAME}-targets.cmake\")\nexport(PACKAGE ${PROJECT_NAME})  # register it\n```\n\n----------------------------------------\n\nTITLE: Compiling Java Sources Command\nDESCRIPTION: Shell command to compile all Java source files in the current directory.\nSOURCE: https://github.com/nmap/nmap/blob/master/nselib/data/jdwp-class/README.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njavac *.java\n```\n\n----------------------------------------\n\nTITLE: Configuring PCRE2 Testing Framework in CMake\nDESCRIPTION: Sets up testing for PCRE2 if testing is enabled, including building the pcre2test utility. Special handling is added for MSVC to avoid stack overflow issues.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nif(PCRE2_BUILD_TESTS)\n  enable_testing()\n\n  set(PCRE2TEST_SOURCES src/pcre2test.c)\n\n  if(MSVC)\n    # This is needed to avoid a stack overflow error in the standard tests. The\n    # flag should be indicated with a forward-slash instead of a hyphen, but\n    # then CMake treats it as a file path.\n    set(PCRE2TEST_LINKER_FLAGS -STACK:2500000)\n  endif()\n\n  add_executable(pcre2test ${PCRE2TEST_SOURCES})\n  set(TARGETS ${TARGETS} pcre2test)\n  if(PCRE2_BUILD_PCRE2_8)\n    list(APPEND PCRE2TEST_LIBS pcre2-posix pcre2-8)\n  endif()\n  if(PCRE2_BUILD_PCRE2_16)\n    list(APPEND PCRE2TEST_LIBS pcre2-16)\n  endif()\n  if(PCRE2_BUILD_PCRE2_32)\n    list(APPEND PCRE2TEST_LIBS pcre2-32)\n  endif()\n  target_link_libraries(pcre2test ${PCRE2TEST_LIBS} ${PCRE2TEST_LINKER_FLAGS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Large File Support in Unix Systems with CMake\nDESCRIPTION: Sets up Large File Support (LFS) on Unix systems by including the FindLFS module and adding necessary definitions when LFS is found. Also checks for fseeko function support.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Large file support on UN*X, a/k/a LFS.\n#\nif(NOT WIN32)\n  include(FindLFS)\n  if(LFS_FOUND)\n    #\n    # Add the required #defines.\n    #\n    add_definitions(${LFS_DEFINITIONS})\n  endif()\n\n  #\n  # Check for fseeko as well.\n  #\n  include(FindFseeko)\n  if(FSEEKO_FOUND)\n    set(HAVE_FSEEKO ON)\n\n    #\n    # Add the required #defines.\n    #\n    add_definitions(${FSEEKO_DEFINITIONS})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing Package Config Files for LibSSH2\nDESCRIPTION: Generates a config file for use with find_package() and installs it along with additional find modules for dependencies.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# Generate libssh2-config.cmake into build tree and install it with dependencies\nconfigure_file(\"${PROJECT_SOURCE_DIR}/cmake/libssh2-config.cmake.in\" \"${PROJECT_NAME}-config.cmake\" @ONLY)\ninstall(\n  FILES\n    \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake\"\n    \"${PROJECT_SOURCE_DIR}/cmake/FindLibgcrypt.cmake\"\n    \"${PROJECT_SOURCE_DIR}/cmake/FindMbedTLS.cmake\"\n    \"${PROJECT_SOURCE_DIR}/cmake/FindWolfSSL.cmake\"\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n```\n\n----------------------------------------\n\nTITLE: Defining NEP_HANDSHAKE_FINAL Message Packet Structure using ASCII Art and Annotations - plaintext\nDESCRIPTION: This snippet illustrates the binary layout for the NEP_HANDSHAKE_FINAL protocol message packet in plaintext, using an annotated ASCII diagram. The layout provides offsets and field sizes for version, message type, total length, sequence number, timestamp, reserved fields, client nonce, partner IP address, IP version, and authentication code, clearly marking sections that are encrypted and decrypted. No code is executed: it's used for documentation and protocol implementation guidance. The snippet relies on standard NEP field conventions, with additional comments explaining the field requirements and constraints as per protocol specification. Inputs and outputs reflect the actual bytes on the wire and must correspond to this specification.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/EchoProtoRFC.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n             0                   1                   2                   3\\n             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\\n        0   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |   Version     |  Message Type |          Total Length         |\\n        1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |                        Sequence Number                        |\\n        2   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |                           Timestamp                           |\\n        3   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |                            Reserved                           |\\n        4   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |                                                               |\\n        5   +--                                                           --+\\n            |                                                               |\\n        6   +--                                                           --+\\n            |                                                               |\\n        7   +--                                                           --+\\n            |                          Client Nonce                         |\\n        8   +--                                                           --+\\n            |                                                               |\\n        9   +--                                                           --+\\n            |                                                               |\\n       10   +--                                                           --+\\n            |                                                               |\\n       11   +--                                                           --+\\n            |                                                               |\\n       12   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n          ###################### ENCRYPTION STARTS HERE #######################\\n       12   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |                                                               |\\n       13   +--                                                           --+\\n            |                                                               |\\n       14   +--                    Partner IP address                     --+\\n            |                                                               |\\n       15   +--                                                           --+\\n            |                                                               |\\n       16   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |  IP Version   |                                               |\\n       17   +---------------+                                             --+\\n            |                                                               |\\n       18   +--                         Reserved                          --+\\n            |                                                               |\\n       19   +--                                                           --+\\n            |                                                               |\\n       20   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n          ####################### ENCRYPTION ENDS HERE ########################\\n       20   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n            |                                                               |\\n        .   .                                                               .\\n        .   .                   Message Authentication Code                 .\\n        .   .                                                               .\\n            |                                                               |\\n       28   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Running Nmap SSL Script Scan with Tracing\nDESCRIPTION: This shell command executes Nmap against localhost on port 31337 (`-p 31337`). It specifically runs all scripts related to SSL (`--script '+ssl*'`) and enables script execution tracing (`--script-trace`) for debugging purposes. This command was used in conjunction with an Ncat listener to trigger and investigate a segmentation fault.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./nmap --script-trace --script '+ssl*' localhost -p 31337\n```\n\n----------------------------------------\n\nTITLE: UNIX Network Function Detection\nDESCRIPTION: Comprehensive checks for networking functions in standard and additional libraries on UNIX systems, including handling for Solaris, Haiku and HP-UX specific cases.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_function_exists(getaddrinfo STDLIBS_HAVE_GETADDRINFO)\nif(NOT STDLIBS_HAVE_GETADDRINFO)\n    cmake_push_check_state()\n    set(CMAKE_REQUIRED_LIBRARIES nsl)\n    check_library_exists(socket getaddrinfo \"\" LIBSOCKET_HAS_GETADDRINFO)\n    cmake_pop_check_state()\n    if(LIBSOCKET_HAS_GETADDRINFO)\n        set(PCAP_LINK_LIBRARIES socket nsl ${PCAP_LINK_LIBRARIES})\n        set(LIBS \"-lsocket -lnsl ${LIBS}\")\n        set(LIBS_STATIC \"-lsocket -lnsl ${LIBS_STATIC}\")\n        set(LIBS_PRIVATE \"-lsocket -lnsl ${LIBS_PRIVATE}\")\n    endif(LIBSOCKET_HAS_GETADDRINFO)\nendif(NOT STDLIBS_HAVE_GETADDRINFO)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project Configuration for PCRE2\nDESCRIPTION: Defines the minimum required CMake version, establishes the PCRE2 project with C language, sets the C standard to C99, and configures basic project settings like symbol visibility.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Increased minimum to 3.15 to allow use of string(REPEAT).\ncmake_minimum_required(VERSION 3.15 FATAL_ERROR)\nproject(PCRE2 C)\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_STANDARD_REQUIRED TRUE)\n\nset(CMAKE_C_VISIBILITY_PRESET hidden)\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: NEP_HANDSHAKE_CLIENT Message Format Specification\nDESCRIPTION: Specifies the binary packet structure for the NEP_HANDSHAKE_CLIENT message that provides client authentication. The format includes client and server nonce values and supports encryption for sensitive fields like IP addresses.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/EchoProtoRFC.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|   Version     |  Message Type |          Total Length         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Sequence Number                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Timestamp                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                            Reserved                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                          Server Nonce                         |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                          Client Nonce                         |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n###################### ENCRYPTION STARTS HERE #######################\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                    Partner IP address                     --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  IP Version   |                                               |\n+---------------+                                             --+\n```\n\n----------------------------------------\n\nTITLE: Defining Project Source Files\nDESCRIPTION: Sets up the core C source files for the project and handles platform-specific source file inclusions based on available system functions\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROJECT_SOURCE_LIST_C\n    bpf_dump.c\n    bpf_filter.c\n    bpf_image.c\n    etherent.c\n    fmtutils.c\n    gencode.c\n    nametoaddr.c\n    optimize.c\n    pcap-common.c\n    pcap-util.c\n    pcap.c\n    savefile.c\n    sf-pcapng.c\n    sf-pcap.c\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying RTT in Standard Ping Output (Example)\nDESCRIPTION: This snippet shows the output of the standard `ping` command, demonstrating how Round Trip Time (RTT) is displayed (e.g., `time=169 ms`). This format is suggested as a model for adding RTT information to Nping's RECV output line, based on a feature request.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/nping.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ping nmap.org\nPING nmap.org (173.255.243.189) 56(84) bytes of data.\n64 bytes from nmap.org (173.255.243.189): icmp_req=1 ttl=48 time=169 ms\n64 bytes from nmap.org (173.255.243.189): icmp_req=2 ttl=48 time=177 ms\n64 bytes from nmap.org (173.255.243.189): icmp_req=3 ttl=48 time=179 ms\n^C\n--- nmap.org ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2000ms\nrtt min/avg/max/mdev = 169.097/175.137/179.152/4.347 ms\n```\n\n----------------------------------------\n\nTITLE: Importing Nmap GPG Keys\nDESCRIPTION: Command for importing the Nmap Project and Fyodor's GPG keys into your local GPG keyring. This is required before you can verify signatures from these keys.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/nmap_gpgkeys.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngpg --import nmap_gpgkeys.txt\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ping Scan Statistics Issue\nDESCRIPTION: Example output showing the bug where ping scans incorrectly report \"0 [hosts] undergoing Ping Scan\" in statistics despite active scanning. Shows different outputs where the issue is consistently present.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nStats: 25:34:33 elapsed; 991232 hosts completed (72530 up), 0 undergoing Ping Scan\nPing Scan Timing: About 53.69% done; ETC: 22:49 (0:00:09 remaining)\nStats: 0:01:10 elapsed; 0 hosts completed (0 up), 0 undergoing Ping Scan\nPing Scan Timing: About 24.03% done; ETC: 22:42 (0:03:41 remaining)\nStats: 0:03:28 elapsed; 4096 hosts completed (284 up), 0 undergoing Ping Scan\nPing Scan Timing: About 3.06% done; ETC: 22:44 (0:03:07 remaining)\n```\n\n----------------------------------------\n\nTITLE: NEP_HANDSHAKE_SERVER Message Format Specification\nDESCRIPTION: Specifies the binary packet structure for the NEP_HANDSHAKE_SERVER message that initiates authentication. The format includes fields for version, message type, sequence number, timestamp, nonce values, and authentication code.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/EchoProtoRFC.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n 0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|   Version     |  Message Type |          Total Length         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Sequence Number                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                           Timestamp                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                            Reserved                           |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                          Server Nonce                         |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n+                                                             --+\n|                                                               |\n+--                         Reserved                          --+\n|                                                               |\n+--                                                           --+\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n.   .                                                               .\n.   .                   Message Authentication Code                 .\n\n.   .                                                               .\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Library Target for LibSSH2\nDESCRIPTION: Sets up the static library target with appropriate compile definitions, link libraries, and properties. This is only built when BUILD_STATIC_LIBS is enabled.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# we want it to be called libssh2 on all platforms\nif(BUILD_STATIC_LIBS)\n  list(APPEND _libssh2_export ${LIB_STATIC})\n  add_library(${LIB_STATIC} STATIC ${_sources})\n  add_library(${PROJECT_NAME}::${LIB_STATIC} ALIAS ${LIB_STATIC})\n  target_compile_definitions(${LIB_STATIC} PRIVATE ${PRIVATE_COMPILE_DEFINITIONS} ${_libssh2_definitions})\n  target_link_libraries(${LIB_STATIC} PRIVATE ${LIBSSH2_LIBS})\n  set_target_properties(${LIB_STATIC} PROPERTIES\n    PREFIX \"\" OUTPUT_NAME \"libssh2\" SOVERSION \"${_libssh2_soversion}\" VERSION \"${_libssh2_libversion}\"\n    SUFFIX \"${STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n\n  target_include_directories(${LIB_STATIC}\n    PRIVATE\n      \"${PROJECT_SOURCE_DIR}/include\"\n      ${libssh2_INCLUDE_DIRS}\n      ${PRIVATE_INCLUDE_DIRECTORIES}\n    PUBLIC\n      \"$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\"\n      \"$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building DotZLib with NAnt\nDESCRIPTION: Example commands for building the DotZLib library using NAnt with different configuration options for debug mode and unit tests inclusion.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/contrib/dotzlib/readme.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnant -D:debug=false -D:nunit=false\n```\n\nLANGUAGE: bash\nCODE:\n```\nnant\n```\n\nLANGUAGE: bash\nCODE:\n```\nnant clean\n```\n\n----------------------------------------\n\nTITLE: Defining zlib Source Files and Headers\nDESCRIPTION: Defines the lists of public headers, private headers, and source files needed to build the zlib library.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZLIB_PUBLIC_HDRS\n    ${CMAKE_CURRENT_BINARY_DIR}/zconf.h\n    zlib.h\n)\nset(ZLIB_PRIVATE_HDRS\n    crc32.h\n    deflate.h\n    gzguts.h\n    inffast.h\n    inffixed.h\n    inflate.h\n    inftrees.h\n    trees.h\n    zutil.h\n)\nset(ZLIB_SRCS\n    adler32.c\n    compress.c\n    crc32.c\n    deflate.c\n    gzclose.c\n    gzlib.c\n    gzread.c\n    gzwrite.c\n    inflate.c\n    infback.c\n    inftrees.c\n    inffast.c\n    trees.c\n    uncompr.c\n    zutil.c\n)\n```\n\n----------------------------------------\n\nTITLE: HTTP Header Format Example\nDESCRIPTION: Example of multi-line HTTP header format where a header field can extend to multiple lines as long as each continuation line begins with whitespace. This format is not properly handled by the HTTP parser in http.lua.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nContent-type:\\r\\n\n___text/html\\r\\n\n```\n\n----------------------------------------\n\nTITLE: NEP_ECHO Message Format ASCII Diagram\nDESCRIPTION: ASCII art diagram showing the binary format of a NEP_ECHO message, including version, message type, length fields, DLT type, packet data, and MAC fields. Shows byte-level structure with field positions and encryption boundaries.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/EchoProtoRFC.txt#2025-04-23_snippet_6\n\nLANGUAGE: ascii-art\nCODE:\n```\n            0                   1                   2                   3\n            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n          ###################### ENCRYPTION STARTS HERE #######################\n        0   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |   Version     |  Message Type |          Total Length         |\n        1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |                        Sequence Number                        |\n        2   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |                           Timestamp                           |\n        3   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |                            Reserved                           |\n        4   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |          DLT Type             |       Packet Length           |\n        5   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Enabling outbound packet promiscuous mode on HP-UX 10\nDESCRIPTION: Command to enable outbound packet capturing on HP-UX 10 by modifying a kernel switch using adb. This needs to be arranged to run on system reboots.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/INSTALL.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho 'lanc_outbound_promisc_flag/W 1' | adb -w /stand/vmunix /dev/mem\n```\n\n----------------------------------------\n\nTITLE: Checking for Required System Functions in PCRE2 Build\nDESCRIPTION: Tests for the availability of specific system functions that PCRE2 may utilize, setting corresponding HAVE_* variables for conditional compilation.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_symbol_exists(bcopy \"strings.h\" HAVE_BCOPY)\ncheck_symbol_exists(memfd_create \"sys/mman.h\" HAVE_MEMFD_CREATE)\ncheck_symbol_exists(memmove \"string.h\" HAVE_MEMMOVE)\ncheck_symbol_exists(secure_getenv \"stdlib.h\" HAVE_SECURE_GETENV)\ncheck_symbol_exists(strerror \"string.h\" HAVE_STRERROR)\n```\n\n----------------------------------------\n\nTITLE: Describing GZIP CRC32 and ISIZE Field Layout - ASCII Diagram\nDESCRIPTION: This ASCII-art code snippet defines the exact byte layout for the CRC32 and ISIZE (Input Size) fields at the end of a GZIP file. It visually shows the positions and widths (in bytes) of the CRC32 and ISIZE fields in an 8-byte structure, which is critical for developers building or debugging GZIP file readers and writers. No programmatic dependencies are required, but understanding of the GZIP file format and binary file parsing is assumed.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1952.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n     0   1   2   3   4   5   6   7\\n   +---+---+---+---+---+---+---+---+\\n   |     CRC32     |     ISIZE     |\\n   +---+---+---+---+---+---+---+---+\n```\n\n----------------------------------------\n\nTITLE: Library Version Parsing Macro Definition\nDESCRIPTION: Defines a macro to parse library version numbers and calculate soversion, compatibility version, and current version for different library components.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(PARSE_LIB_VERSION variable_prefix)\n  string(REPLACE \":\" \";\" ${variable_prefix}_VERSION_LIST ${${variable_prefix}_VERSION})\n  list(GET ${variable_prefix}_VERSION_LIST 0 ${variable_prefix}_VERSION_CURRENT)\n  list(GET ${variable_prefix}_VERSION_LIST 1 ${variable_prefix}_VERSION_REVISION)\n  list(GET ${variable_prefix}_VERSION_LIST 2 ${variable_prefix}_VERSION_AGE)\n\n  math(EXPR ${variable_prefix}_SOVERSION \"${${variable_prefix}_VERSION_CURRENT} - ${${variable_prefix}_VERSION_AGE}\")\n  math(EXPR ${variable_prefix}_MACHO_COMPATIBILITY_VERSION \"${${variable_prefix}_VERSION_CURRENT} + 1\")\n  math(EXPR ${variable_prefix}_MACHO_CURRENT_VERSION \"${${variable_prefix}_VERSION_CURRENT} + 1\")\n  set(\n    ${variable_prefix}_MACHO_CURRENT_VERSION\n    \"${${variable_prefix}_MACHO_CURRENT_VERSION}.${${variable_prefix}_VERSION_REVISION}}\"\n  )\n  set(\n    ${variable_prefix}_VERSION\n    \"${${variable_prefix}_SOVERSION}.${${variable_prefix}_VERSION_AGE}.${${variable_prefix}_VERSION_REVISION}\"\n  )\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: NEP_ERROR Message Format ASCII Diagram\nDESCRIPTION: ASCII art diagram showing the binary format of a NEP_ERROR message, including version, message type, length fields, error message field, and MAC fields. Shows byte-level structure with field positions and encryption boundaries.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/EchoProtoRFC.txt#2025-04-23_snippet_7\n\nLANGUAGE: ascii-art\nCODE:\n```\n            0                   1                   2                   3\n            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n          ###################### ENCRYPTION STARTS HERE #######################\n        0   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |   Version     |  Message Type |          Total Length         |\n        1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |                        Sequence Number                        |\n        2   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |                           Timestamp                           |\n        3   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n            |                            Reserved                           |\n        4   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Setting Up zlib Installation Rules\nDESCRIPTION: Configures the installation of libraries, headers, man pages, and pkg-config files to the appropriate directories.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL )\n    install(TARGETS zlib zlibstatic\n        RUNTIME DESTINATION \"${INSTALL_BIN_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\" )\nendif()\nif(NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL )\n    install(FILES ${ZLIB_PUBLIC_HDRS} DESTINATION \"${INSTALL_INC_DIR}\")\nendif()\nif(NOT SKIP_INSTALL_FILES AND NOT SKIP_INSTALL_ALL )\n    install(FILES zlib.3 DESTINATION \"${INSTALL_MAN_DIR}/man3\")\nendif()\nif(NOT SKIP_INSTALL_FILES AND NOT SKIP_INSTALL_ALL )\n    install(FILES ${ZLIB_PC} DESTINATION \"${INSTALL_PKGCONFIG_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for Large File Support\nDESCRIPTION: Checks if the system supports large files by verifying the off64_t type exists, and adds the appropriate definition if needed.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_REQUIRED_DEFINITIONS -D_LARGEFILE64_SOURCE=1)\n# We add these other definitions here because CheckTypeSize.cmake\n# in CMake 2.4.x does not automatically do so and we want\n# compatibility with CMake 2.4.x.\nif(HAVE_SYS_TYPES_H)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_SYS_TYPES_H)\nendif()\nif(HAVE_STDINT_H)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDINT_H)\nendif()\nif(HAVE_STDDEF_H)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDDEF_H)\nendif()\ncheck_type_size(off64_t OFF64_T)\nif(HAVE_OFF64_T)\n   add_definitions(-D_LARGEFILE64_SOURCE=1)\nendif()\nset(CMAKE_REQUIRED_DEFINITIONS) # clear variable\n```\n\n----------------------------------------\n\nTITLE: Echo server mode with wireless interface\nDESCRIPTION: Example demonstrating how to run Nping in echo server mode on a wireless interface with maximum verbosity.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/nping-usage.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnping --echo-server \"public\" -e wlan0 -vvv\n```\n\n----------------------------------------\n\nTITLE: Parsing Version Numbers from configure.ac\nDESCRIPTION: Reads and parses version numbers and date information from configure.ac file using regex matching. Limited to first 50 lines of the file.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nfile(\n  STRINGS\n  ${PROJECT_SOURCE_DIR}/configure.ac\n  configure_lines\n  LIMIT_COUNT\n    50 # Read only the first 50 lines of the file\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Empty BPF Filter (Capture-All) Packet Layout - ASCII Diagram\nDESCRIPTION: This snippet depicts the packet structure when a client specifies an empty (capture all packets) BPF filter. The diagram displays a zero-length filter field and the required padding field, clarifying expected byte layout so implementations avoid filter misinterpretation. It supports binary packet assembly and validation in tools or testing environments that parse these Nping proto fields.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/EchoProtoRFC_v0.txt#2025-04-23_snippet_4\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n0                   1                   2                   3\\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n|           Length=0            |            Padding            |\\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Setting Libpcap Library Name Based on OS in CMake\nDESCRIPTION: Determines the base name for the libpcap library being built. If the target system is Windows (`WIN32` is true), it defines a CMake cache variable `LIBRARY_NAME` with a default value of 'pcap', allowing users to override this name (e.g., for custom builds). On non-Windows (UN*X-like) systems, it directly sets the `LIBRARY_NAME` variable to 'pcap', as this name is standard.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    #\n    # On Windows, allow the library name to be overridden, for the\n    # benefit of projects that combine libpcap with their own\n    # kernel-mode code to support capturing.\n    #\n    set(LIBRARY_NAME pcap CACHE STRING \"Library name\")\nelse()\n    #\n    # On UN*X, it's always been libpcap.\n    #\n    set(LIBRARY_NAME pcap)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache SSL Certificate Chain File\nDESCRIPTION: Specifies the intermediate SSL certificate chain file for Apache. This directive is used within an Apache configuration file (e.g., httpd.conf or a virtual host configuration) to provide intermediate certificates needed to build a trusted certificate chain for clients.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_0\n\nLANGUAGE: apacheconf\nCODE:\n```\nSSLCertificateChainFile /etc/apache2/rapidssl.pem\n```\n\n----------------------------------------\n\nTITLE: ICMP timestamp request with delay to network router\nDESCRIPTION: Example showing how to send ICMP timestamp request packets with a 500ms delay between each probe to a router IP.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/nping-usage.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnping --icmp --icmp-type time --delay 500ms 192.168.254.254\n```\n\n----------------------------------------\n\nTITLE: PCAP Version String Processing\nDESCRIPTION: Extracts and formats version information from VERSION file, handling major, minor and patch components. For Windows, converts version format to DLL-compatible style.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nfile(STRINGS ${pcap_SOURCE_DIR}/VERSION\n    PACKAGE_VERSION\n    LIMIT_COUNT 1 # Read only the first line\n)\n\nstring(REGEX MATCH \"^([0-9]+)\" PACKAGE_VERSION_MAJOR \"${PACKAGE_VERSION}\")\n\nstring(REGEX MATCH \"^([0-9]+.)?([0-9]+.)?([0-9]+)\" PACKAGE_VERSION_NOSUFFIX \"${PACKAGE_VERSION}\")\n\nif(WIN32)\n    string(REPLACE \".\" \",\" PACKAGE_VERSION_PREDLL ${PACKAGE_VERSION_NOSUFFIX})\n    set(PACKAGE_VERSION_DLL ${PACKAGE_VERSION_PREDLL},0)\nendif(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes for NpingOps Class in C++\nDESCRIPTION: Template for declaring attributes and their corresponding state flags in the NpingOps class. Each attribute has a value variable and a boolean flag to track whether it has been set.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/pythonscripts/TemplateNpingOps.txt#2025-04-23_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nTYPE ATTRNAME;\nbool ATTRNAME_set;\n```\n\n----------------------------------------\n\nTITLE: Configuring Build with Config Header for libssh2\nDESCRIPTION: Sets up the build to use a configuration header file, generating libssh2_config.h from a template with the platform-specific settings detected during configuration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\n# Config file\n\nadd_definitions(\"-DHAVE_CONFIG_H\")\n\nconfigure_file(\"src/libssh2_config_cmake.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/src/libssh2_config.h\")\n```\n\n----------------------------------------\n\nTITLE: Setting C compiler path for SPARCompiler on Solaris\nDESCRIPTION: Environment variable setting to specify the correct compiler path when using SPARCompiler on Solaris to avoid issues with the /usr/ucb/cc interface.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/INSTALL.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsetenv CC /opt/SUNWspro/bin/cc\n```\n\n----------------------------------------\n\nTITLE: Controlling Packet Rate with Nping\nDESCRIPTION: Example of using Nping to send TCP packets at a specified rate (packets per second) with a count limit. This command requires root privileges.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/NpingExamples.txt#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Send 300 TCP packets at a rate of 100pkts/sec\nsudo nping --tcp google.com --rate 100 -c 300\n```\n\n----------------------------------------\n\nTITLE: Installing CMake Target Export File\nDESCRIPTION: Installs the CMake target export file (`${PROJECT_NAME}Targets.cmake`) which allows other CMake projects to find and use the installed target (`${PROJECT_NAME}`). The file is placed in the standard CMake package directory structure and associated with the `${PROJECT_NAME}::` namespace. This is part of the 'devel' component.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(EXPORT ${PROJECT_NAME}Targets\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}/\n    FILE ${PROJECT_NAME}Targets.cmake\n    NAMESPACE ${PROJECT_NAME}::\n    COMPONENT devel\n)\n```\n\n----------------------------------------\n\nTITLE: NSE String Literal Example\nDESCRIPTION: Example of a string literal used in NSE script containing octal escape sequences that caused documentation parsing issues.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal req_id = '\\222\\173'\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warning Options in CMake\nDESCRIPTION: Sets up compiler warning options based on compiler type (MSVC vs others) and development mode. Includes specific warning suppressions for MSVC and GCC-style warning flags for other compilers.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.devel OR EXISTS ${CMAKE_BINARY_DIR}/.devel)\n    if(MSVC AND NOT ${CMAKE_C_COMPILER} MATCHES \"clang*\")\n        check_and_add_compiler_option(-Wall)\n        check_and_add_compiler_option(-wd4100)\n        check_and_add_compiler_option(-wd4255)\n        check_and_add_compiler_option(-wd4548)\n        check_and_add_compiler_option(-wd4574)\n        check_and_add_compiler_option(-wd4668)\n        check_and_add_compiler_option(-wd4710)\n        check_and_add_compiler_option(-wd4711)\n        check_and_add_compiler_option(-wd4820)\n        check_and_add_compiler_option(-wd5045)\n        check_and_add_compiler_option(-WX)\n    else()\n        check_and_add_compiler_option(-W)\n        check_and_add_compiler_option(-Wall)\n        check_and_add_compiler_option(-Wcomma)\n        check_and_add_compiler_option(-Wdocumentation)\n        check_and_add_compiler_option(-Wformat-nonliteral)\n        check_and_add_compiler_option(-Wmissing-noreturn)\n        check_and_add_compiler_option(-Wmissing-prototypes)\n        check_and_add_compiler_option(-Wmissing-variable-declarations)\n        check_and_add_compiler_option(-Wnull-pointer-subtraction)\n        check_and_add_compiler_option(-Wpointer-arith)\n        check_and_add_compiler_option(-Wpointer-sign)\n        check_and_add_compiler_option(-Wshadow)\n        check_and_add_compiler_option(-Wshorten-64-to-32)\n        check_and_add_compiler_option(-Wsign-compare)\n        check_and_add_compiler_option(-Wstrict-prototypes)\n        check_and_add_compiler_option(-Wundef)\n        check_and_add_compiler_option(-Wunreachable-code)\n        check_and_add_compiler_option(-Wunused-but-set-parameter)\n        check_and_add_compiler_option(-Wunused-but-set-variable)\n        check_and_add_compiler_option(-Wunused-parameter)\n        check_and_add_compiler_option(-Wused-but-marked-unused)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Cryptography Backend Option for libssh2\nDESCRIPTION: Configures the cryptography backend option for libssh2, allowing the user to select from OpenSSL, wolfSSL, Libgcrypt, WinCNG, mbedTLS, or leave it empty to use any available backend.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\n## Cryptography backend choice\n\nset(CRYPTO_BACKEND \"\" CACHE\n  STRING \"The backend to use for cryptography: OpenSSL, wolfSSL, Libgcrypt, WinCNG, mbedTLS, or empty to try any available\")\n```\n\n----------------------------------------\n\nTITLE: Configuring libpcap Installation Paths and RPATH in CMake\nDESCRIPTION: Sets up installation paths for libpcap and configures RPATH options based on the target platform. This ensures the correct library paths are used at runtime.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_62\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT MSVC)\n    set(prefix ${CMAKE_INSTALL_PREFIX})\n    set(exec_prefix \"\\${prefix}\")\n    set(includedir \"\\${prefix}/include\")\n    set(libdir \"\\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}\")\n\n    if(NOT CMAKE_INSTALL_PREFIX STREQUAL \"/usr\")\n        if(CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\" OR\n           CMAKE_SYSTEM_NAME STREQUAL \"NetBSD\" OR\n           CMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\" OR\n           CMAKE_SYSTEM_NAME STREQUAL \"DragonFly BSD\" OR\n           CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n            set(RPATH \"-Wl,-rpath,\\${libdir}\")\n        elseif(CMAKE_SYSTEM_NAME STREQUAL \"SunOS\" AND CMAKE_SYSTEM_VERSION MATCHES \"5[.][0-9.]*\")\n            set(RPATH \"-Wl,-R,\\${libdir}\")\n        else()\n            set(RPATH \"\")\n        endif()\n    endif()\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/pcap-config.in ${CMAKE_CURRENT_BINARY_DIR}/pcap-config @ONLY)\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libpcap.pc.in ${CMAKE_CURRENT_BINARY_DIR}/libpcap.pc @ONLY)\n    install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/pcap-config DESTINATION bin)\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libpcap.pc DESTINATION lib/pkgconfig)\nendif(NOT MSVC)\n```\n\n----------------------------------------\n\nTITLE: Function Detection with MSVC Warning Handling for libssh2\nDESCRIPTION: Configures special handling for function detection with MSVC, temporarily disabling warnings as errors during symbol existence checks to prevent detection failures.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# CMake uses C syntax in check_symbol_exists() that generates a warning with\n# MSVC. To not break detection with ENABLE_WERRROR, we disable it for the\n# duration of these tests.\nif(MSVC AND ENABLE_WERROR)\n  cmake_push_check_state()\n  set(CMAKE_REQUIRED_FLAGS \"/WX-\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring the Nping Echo Client\nDESCRIPTION: Command line syntax for starting Nping in client mode, connecting to an Echo server and sending a TCP SYN packet with specific flags and window size.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/echo_proposal.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnping --echo-client \"SquemmishOssifrage\" --tcp --flags syn --win 0 -c1 echo.insecure.org\n```\n\n----------------------------------------\n\nTITLE: Setting NULL Device Path Based on Platform\nDESCRIPTION: Determines the appropriate null device path based on whether the build is running on Windows or Unix-like systems.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    set(NULL_DEVICE \"NUL:\")\nelse()\n    set(NULL_DEVICE \"/dev/null\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Version Requirements\nDESCRIPTION: Sets minimum required CMake version based on platform. Windows requires 3.12+ for CMP0074 policy, while other platforms use version 2.8.12 or 3.5 depending on the current CMake version.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    cmake_minimum_required(VERSION 3.12)\nelse(WIN32)\n    if(CMAKE_VERSION VERSION_LESS \"3.5\")\n        cmake_minimum_required(VERSION 2.8.12)\n    else()\n        cmake_minimum_required(VERSION 3.5)\n    endif()\nendif(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Describing GZIP Extra Field Binary Layout - ASCII Diagram\nDESCRIPTION: This ASCII-art diagram illustrates the binary layout used for 'extra fields' present in the GZIP header if the FEXTRA flag is set. It displays how a subfield consists of two identifier bytes (SI1 and SI2), a two-byte length (LEN), and then the variable-length subfield data, formatted for byte-level binary structuring. This is especially useful for implementers needing to parse or validate custom or vendor-specific extensions in the GZIP format and presumes familiarity with byte-oriented binary file structures.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1952.txt#2025-04-23_snippet_1\n\nLANGUAGE: ascii-art\nCODE:\n```\n+---+---+---+---+==================================+\\n|SI1|SI2|  LEN  |... LEN bytes of subfield data ...|\\n+---+---+---+---+==================================+\n```\n\n----------------------------------------\n\nTITLE: Executing Nmap Scan with Multiple Options in Bash\nDESCRIPTION: Complex Nmap scan command demonstrating various options including performance tuning, output formatting, and target specification.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\n/home/fyodor/nmap-exp/fyodor-perf/nmap -nogcc -T4 -n -v -p- --portpingfreq 250 -oA /home/fyodor/nmap-misc/logs/WorldScan/portpingfreq/logs/portpingfreq-250-1%T-%D 67.15.236.34 67.15.236.36 81.174.236.66 81.174.236.119 170.140.20.160 170.140.20.174 202.138.180.9 202.138.180.17 202.138.180.132 209.20.64.112\n```\n\n----------------------------------------\n\nTITLE: Alternate NC Tool Verbose Output Comparison\nDESCRIPTION: Example of Eric Jackson's nc tool's verbose output which is much more concise and user-friendly compared to Ncat's verbose output, showing just the essential connection information.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n# nc -v scanme.nmap.org 80\nConnection to scanme.nmap.org 80 port [tcp/http] succeeded!\n```\n\n----------------------------------------\n\nTITLE: Configuring Symbol Visibility for libssh2\nDESCRIPTION: Sets up symbol visibility options for libssh2, hiding symbols that are not part of the official API. Handles compiler-specific visibility flags for GCC, Clang, Intel, and Sun compilers.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\noption(HIDE_SYMBOLS \"Hide all libssh2 symbols that are not officially external\" ON)\nmark_as_advanced(HIDE_SYMBOLS)\nif(HIDE_SYMBOLS)\n  set(LIB_SHARED_DEFINITIONS \"LIBSSH2_EXPORTS\")\n  if(WIN32)\n  elseif((CMAKE_C_COMPILER_ID MATCHES \"Clang\") OR\n         (CMAKE_COMPILER_IS_GNUCC AND NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 4.0) OR\n         (CMAKE_C_COMPILER_ID MATCHES \"Intel\" AND NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 9.1))\n    set(LIB_SHARED_C_FLAGS \"-fvisibility=hidden\")\n    set(LIBSSH2_API \"__attribute__ ((__visibility__ (\\\"default\\\")))\")\n  elseif(CMAKE_C_COMPILER_ID MATCHES \"SunPro\" AND NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 8.0)\n    set(LIB_SHARED_C_FLAGS \"-xldscope=hidden\")\n    set(LIBSSH2_API \"__global\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Installation in CMake\nDESCRIPTION: Sets up installation configuration for shared and static libraries. Determines which libraries should be installed based on the build configuration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_59\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n    set(LIBRARIES_TO_INSTALL \"${LIBRARY_NAME}\" \"${LIBRARY_NAME_STATIC}\")\nelse(BUILD_SHARED_LIBS)\n    set(LIBRARIES_TO_INSTALL \"${LIBRARY_NAME_STATIC}\")\nendif(BUILD_SHARED_LIBS)\n```\n\n----------------------------------------\n\nTITLE: Configuring zlib.pc and zconf.h Files\nDESCRIPTION: Generates the zlib.pc pkg-config file and zconf.h header from templates, and sets up include directories.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZLIB_PC ${CMAKE_CURRENT_BINARY_DIR}/zlib.pc)\nconfigure_file( ${CMAKE_CURRENT_SOURCE_DIR}/zlib.pc.cmakein\n\t\t${ZLIB_PC} @ONLY)\nconfigure_file(\t${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.cmakein\n\t\t${CMAKE_CURRENT_BINARY_DIR}/zconf.h @ONLY)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Creating CTest Configuration for PCRE2 Testing in CMake\nDESCRIPTION: Generates a custom CTest configuration file with informational messages about test output location.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\n  # =================================================\n  # Write out a CTest configuration file\n  #\n  file(\n    WRITE\n    ${PROJECT_BINARY_DIR}/CTestCustom.ctest\n    \"# This is a generated file.\nMESSAGE(\\\"When testing is complete, review test output in the\n\\\\\\\"${PROJECT_BINARY_DIR}/Testing/Temporary\\\\\\\" folder.\\\")\nMESSAGE(\\\" \\\")\n\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring mbedTLS Backend for libssh2 in CMake\nDESCRIPTION: Detects and configures mbedTLS as a cryptographic backend for libssh2. Sets up include directories, libraries, and compiler flags for this lightweight TLS implementation.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif(CRYPTO_BACKEND STREQUAL \"mbedTLS\" OR NOT CRYPTO_BACKEND)\n\n  find_package(MbedTLS ${_specific_crypto_requirement})\n\n  if(MBEDTLS_FOUND)\n    set(CRYPTO_BACKEND \"mbedTLS\")\n    set(CRYPTO_BACKEND_DEFINE \"LIBSSH2_MBEDTLS\")\n    set(CRYPTO_BACKEND_INCLUDE_DIR ${MBEDTLS_INCLUDE_DIRS})\n    list(APPEND LIBSSH2_LIBS ${MBEDTLS_LIBRARIES})\n    list(APPEND LIBSSH2_LIBDIRS ${MBEDTLS_LIBRARY_DIRS})\n    list(APPEND LIBSSH2_PC_REQUIRES_PRIVATE \"mbedcrypto\")\n    link_directories(${MBEDTLS_LIBRARY_DIRS})\n    if(MBEDTLS_CFLAGS)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${MBEDTLS_CFLAGS}\")\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: QUIT Packet Structure Diagram - ASCII Diagram\nDESCRIPTION: This snippet details the packet format for the QUIT operation, which is used by either client or server to terminate the session. The diagram covers Version, OpCode (0x06), Total Length, Sequence Number, Reserved fields, and the SHA256 checksum, aiding in the correct handling of session teardown signals and orderly resource cleanup on both protocol ends.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/EchoProtoRFC_v0.txt#2025-04-23_snippet_7\n\nLANGUAGE: ascii-diagram\nCODE:\n```\n0                   1                   2                   3\\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\\n0   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |   Version     | OP Code 0x06  |          Total Length         |\\n1   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |                         Sequence Number                       |\\n2   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |                            Reserved                           |\\n3   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |                            Reserved                           |\\n4   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n    |                                                               |\\n.   .                                                               .\\n.   .                        SHA256 Checksum                        .\\n.   .                                                               .\\n    |                                                               |\\n12  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n----------------------------------------\n\nTITLE: Web Directory Enumeration Wordlist in Plaintext\nDESCRIPTION: A comprehensive list of common web directory paths organized alphabetically. This wordlist can be used with directory bruteforcing tools to discover accessible directories on web servers during security assessments.\nSOURCE: https://github.com/nmap/nmap/blob/master/nselib/data/http-folders.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/.git/\n/.htaccess/\n/1/\n/2/\n/3/\n/4/\n/5/\n/6/\n/7/\n/8/\n/9/\n/10/\n/a/\n/acceso/\n/access/\n/accesswatch/\n/acciones/\n/account/\n/accounting/\n/active/\n/activex/\n/adm/\n/admcgi/\n/admentor/\n/admin/\n/admin_/\n/admin.back/\n/admin-bak/\n/Admin_files/\n/administration/\n/administrator/\n/admin-old/\n/adminuser/\n/adminweb/\n/adminWeb/\n/admisapi/\n/AdvWebAdmin/\n/Agent/\n/agentes/\n/Agents/\n/Album/\n/AlbumArt/\n/AlbumArt_/\n/allow/\n/analog/\n/anthill/\n/apache/\n/apache2/\n/app/\n/appl/\n/applets/\n/application/\n/applications/\n/applmgr/\n/apply/\n/apps/\n/appsec/\n/ar/\n/archive/\n/archives/\n/arcsight/\n/asa/\n/asp/\n/atc/\n/atom/\n/aut/\n/auth/\n/authadmin/\n/author/\n/authors/\n/aw/\n/ayuda/\n/b/\n/b2-include/\n/back/\n/backend/\n/backup/\n/backups/\n/bad/\n/bak/\n/banca/\n/banco/\n/bank/\n/banner/\n/banner01/\n/banners/\n/bar/\n/batch/\n/bb-dnbd/\n/bbv/\n/bdata/\n/bdatos/\n/beef/\n/beta/\n/billpay/\n/bin/\n/binaries/\n/binary/\n/blog/\n/boadmin/\n/boot/\n/bottom/\n/browse/\n/browser/\n/bsd/\n/btauxdir/\n/bug/\n/bugs/\n/bugzilla/\n/buy/\n/buynow/\n/c/\n/cache/\n/cached/\n/cache-stats/\n/caja/\n/card/\n/cards/\n/cart/\n/cash/\n/caspsamp/\n/catalog/\n/category/\n/cbi-bin/\n/ccard/\n/ccards/\n/cd/\n/cd-cgi/\n/cdrom/\n/ce_html/\n/cert/\n/certificado/\n/certificate/\n/cfappman/\n/cfdocs/\n/cfide/\n/cgi/\n/cgi-914/\n/cgi-915/\n/cgi-auth/\n/cgibin/\n/cgi-bin/\n/cgi-bin2/\n/cgi.cgi/\n/cgi-csc/\n/cgi-exe/\n/cgi-home/\n/cgilib/\n/cgi-lib/\n/cgi-local/\n/cgi-perl/\n/cgis/\n/cgiscripts/\n/cgi-scripts/\n/cgi-shl/\n/cgi-shop/\n/cgi-sys/\n/cgi-weddico/\n/cgiwin/\n/cgi-win/\n/Citrix/\n/class/\n/classes/\n/client/\n/cliente/\n/clientes/\n/clients/\n/cm/\n/cmsample/\n/cobalt-images/\n/code/\n/com/\n/comments/\n/common/\n/communicator/\n/comp/\n/company/\n/components/\n/compra/\n/compras/\n/compressed/\n/conecta/\n/conf/\n/config/\n/configs/\n/configure/\n/connect/\n/console/\n/contact/\n/contacts/\n/contactUs/\n/content/\n/content.ie5/\n/controlpanel/\n/core/\n/corp/\n/correo/\n/counter/\n/credit/\n/cron/\n/crons/\n/crypto/\n/CS/\n/csr/\n/css/\n/cuenta/\n/cuentas/\n/currency/\n/cust/\n/custom/\n/customer/\n/customers/\n/CVS/\n/cvsweb/\n/cybercash/\n/d/\n/darkportal/\n/dat/\n/data/\n/database/\n/databases/\n/datafiles/\n/dato/\n/datos/\n/db/\n/dbase/\n/dcforum/\n/ddreport/\n/ddrint/\n/debug/\n/debugs/\n/default/\n/delete/\n/deleted/\n/demo/\n/demoauct/\n/demomall/\n/demos/\n/demouser/\n/deny/\n/derived/\n/design/\n/dev/\n/devel/\n/development/\n/dir/\n/directories/\n/directory/\n/directorymanager/\n/dl/\n/dm/\n/DMR/\n/dms/\n/dms0/\n/dmsdump/\n/dnn/\n/doc/\n/doc1/\n/doc-html/\n/docs/\n/docs1/\n/DocuColor/\n/document/\n/documentation/\n/documents/\n/dotnetnuke/\n/down/\n/download/\n/downloads/\n/dump/\n/durep/\n/e/\n/easylog/\n/eforum/\n/ejemplo/\n/ejemplos/\n/email/\n/emailclass/\n/employees/\n/empoyees/\n/empris/\n/enter/\n/envia/\n/enviamail/\n/error/\n/errors/\n/es/\n/estmt/\n/etc/\n/etcpasswd/\n/example/\n/examples/\n/exc/\n/excel/\n/exchange/\n/exchweb/\n/exe/\n/exec/\n/exit/\n/export/\n/external/\n/extranet/\n/f/\n/failure/\n/fbsd/\n/fcgi/\n/fcgi-bin/\n/features/\n/file/\n/fileadmin/\n/filemanager/\n/files/\n/find/\n/flash/\n/foldoc/\n/foo/\n/foobar/\n/form/\n/forms/\n/formsmgr/\n/form-totaller/\n/forum/\n/forums/\n/foto/\n/fotos/\n/fpadmin/\n/fpclass/\n/fpdb/\n/fpe/\n/fpsample/\n/frames/\n/framesets/\n/frontpage/\n/ftp/\n/ftproot/\n/fun/\n/func/\n/function/\n/functions/\n/g/\n/general/\n/gfx/\n/gif/\n/gifs/\n/global/\n/globals/\n/good/\n/graphics/\n/grocery/\n/guest/\n/guestbook/\n/guests/\n/GXApp/\n/h/\n/HB/\n/HBTemplates/\n/help/\n/helpdesk/\n/hidden/\n/hide/\n/hitmatic/\n/hit_tracker/\n/hlstats/\n/home/\n/host/\n/hosted/\n/hosting/\n/hostingcontroller/\n/hp/\n/ht/\n/htbin/\n/htdocs/\n/htm/\n/html/\n/http/\n/https/\n/hyperstat/\n/I/\n/i18n/\n/ibank/\n/ibill/\n/IBMWebAS/\n/icons/\n/idea/\n/ideas/\n/iisadmin/\n/iissamples/\n/image/\n/imagenes/\n/imagery/\n/Images/\n/images/\n/img/\n/imp/\n/import/\n/impreso/\n/in/\n/inc/\n/include/\n/includes/\n/incoming/\n/index/\n/inet/\n/inf/\n/info/\n/information/\n/ingresa/\n/ingreso/\n/install/\n/internal/\n/internet/\n/intranet/\n/inventory/\n/invitado/\n/isapi/\n/j/\n/j2ee/\n/j2eeexamples/\n/j2eeexamplesjsp/\n/japidoc/\n/java/\n/javascript/\n/javasdk/\n/javatest/\n/jave/\n/JBookIt/\n/jdbc/\n/job/\n/jrun/\n/js/\n/jsa/\n/jscript/\n/jserv/\n/jslib/\n/jsp/\n/junk/\n/k/\n/keygen/\n/kiva/\n/known/\n/l/\n/labs/\n/lcgi/\n/lib/\n/libraries/\n/library/\n/libro/\n/license/\n/licenses/\n/links/\n/linux/\n/loader/\n/local/\n/location/\n/locations/\n/log/\n/logfile/\n/logfiles/\n/logg/\n/logger/\n/logging/\n/login/\n/logo/\n/logos/\n/logon/\n/logout/\n/logs/\n/lost+found/\n/m/\n/mail/\n/mail_log_files/\n/mailman/\n/mailroot/\n/makefile/\n/mall_log_files/\n/man/\n/manage/\n/management/\n/manager/\n/manual/\n/map/\n/maps/\n/marketing/\n/media/\n/mediawiki/\n/mem/\n/member/\n/members/\n/mem_bin/\n/message/\n/messaging/\n/metacart/\n/microsoft/\n/misc/\n/mkstats/\n/mod/\n/module/\n/modules/\n/movimientos/\n/mpcgi/\n/mqseries/\n/ms/\n/msfpe/\n/msql/\n/Msword/\n/mxhtml/\n/mxportal/\n/my/\n/My Shared Folder/\n/mysql/\n/mysql_admin/\n/n/\n/name/\n/names/\n/ncadmin/\n/nchelp/\n/ncsample/\n/net/\n/netbasic/\n/netcat/\n/NetDynamic/\n/NetDynamics/\n/netmagstats/\n/netscape/\n/netshare/\n/nettracker/\n/network/\n/new/\n/news/\n/News/\n/nextgeneration/\n/nl/\n/notes/\n/noticias/\n/NSearch/\n/o/\n/objects/\n/odbc/\n/officescan/\n/ojspdemos/\n/old/\n/oldfiles/\n/old_files/\n/oprocmgr-service/\n/oprocmgr-status/\n/oracle/\n/oradata/\n/order/\n/orders/\n/os/\n/out/\n/outgoing/\n/owa/\n/owners/\n/ows-bin/\n/p/\n/page/\n/pages/\n/_pages/\n/partner/\n/partners/\n/passport/\n/password/\n/passwords/\n/path/\n/payment/\n/payments/\n/pccsmysqladm/\n/PDG_Cart/\n/perl/\n/perl5/\n/personal/\n/pforum/\n/phorum/\n/php/\n/phpBB/\n/php_classes/\n/phpclassifieds/\n/phpimageview/\n/phpmyadmin/\n/phpMyAdmin/\n/phpnuke/\n/phpPhotoAlbum/\n/phpprojekt/\n/phpSecurePages/\n/pics/\n/pictures/\n/pike/\n/piranha/\n/pls/\n/plsql/\n/plssample/\n/plssampleadmin/\n/plssampleadmin_/\n/plssampleadmin_help/\n/poll/\n/polls/\n/porn/\n/portal/\n/portals/\n/postgres/\n/postnuke/\n/ppwb/\n/printer/\n/printers/\n/priv/\n/privacy/\n/privado/\n/private/\n/_private/\n/proc/\n/prod/\n/projectserver/\n/protected/\n/proxy/\n/prueba/\n/pruebas/\n/prv/\n/pub/\n/public/\n/_public/\n/publica/\n/publicar/\n/publico/\n/publish/\n/purchase/\n/purchases/\n/pw/\n/python/\n/q/\n/r/\n/random_banner/\n/rdp/\n/Readme/\n/recycler/\n/register/\n/registered/\n/registry/\n/remote/\n/remove/\n/report/\n/reports/\n/reseller/\n/restricted/\n/retail/\n/reveal/\n/reviews/\n/ROADS/\n/robot/\n/robots/\n/root/\n/rsrc/\n/rss/\n/ruby/\n/s/\n/sales/\n/sample/\n/samples/\n/save/\n/script/\n/ScriptLibrary/\n/scripts/\n/search/\n/search-ui/\n/sec/\n/secret/\n/secure/\n/secured/\n/security/\n/sell/\n/server/\n/server-info/\n/servers/\n/serverstats/\n/server_stats/\n/server-status/\n/service/\n/services/\n/servicio/\n/servicios/\n/servlet/\n/servlets/\n/session/\n/setup/\n/share/\n/shared/\n/sharedtemplates/\n/shell-cgi/\n/shipping/\n/shop/\n/shopper/\n/show/\n/SilverStream/\n/site/\n/siteadmin/\n/sitemgr/\n/siteminder/\n/siteminderagent/\n/sites/\n/siteserver/\n/sitestats/\n/siteupdate/\n/smreports/\n/smreportsviewer/\n/soap/\n/soapdocs/\n/software/\n/solaris/\n/source/\n/spam/\n/sql/\n/squid/\n/src/\n/srchadm/\n/ssi/\n/ssl/\n/sslkeys/\n/staff/\n/stat/\n/state/\n/statistic/\n/statistics/\n/stats/\n/stats-bin-p/\n/stats_old/\n/status/\n/storage/\n/store/\n/StoreDB/\n/storemgr/\n/stronghold-info/\n/stronghold-status/\n/stuff/\n/style/\n/styles/\n/stylesheet/\n/stylesheets/\n/subir/\n/sun/\n/super_stats/\n/supplier/\n/suppliers/\n/supply/\n/support/\n/supporter/\n/.svn/\n/sys/\n/sysadmin/\n/sysbackup/\n/system/\n/systems/\n/t/\n/tar/\n/target/\n/tarjetas/\n/tech/\n/technote/\n/te_html/\n/temp/\n/template/\n/templates/\n/temporal/\n/test/\n/test-cgi/\n/testing/\n/tests/\n/testweb/\n/themes/\n/ticket/\n/tickets/\n/tip/\n/tips/\n/tmp/\n/ToDo/\n/tool/\n/tools/\n/top/\n/TopAccess/\n/tpv/\n/trabajo/\n/track/\n/tracking/\n/transfer/\n/transito/\n/transpolar/\n/tree/\n/trees/\n/trick/\n/tricks/\n/u/\n/u02/\n/ui/\n/unix/\n/unknown/\n/updates/\n/upload/\n/uploads/\n/us/\n/usage/\n/user/\n/userdb/\n/users/\n/usr/\n/ustats/\n/usuario/\n/usuarios/\n/util/\n/utils/\n/v/\n/vendor/\n/vfs/\n/view/\n/vmware/\n/vpn/\n/_vti_bin/\n/vti_bin/\n/vti_bot/\n/_vti_cnf/\n/_vti_log/\n/vti_log/\n/_vti_pvt/\n/vti_pvt/\n/vti_shm/\n/_vti_txt/\n/vti_txt/\n/w/\n/w2000/\n/w2k/\n/w3perl/\n/w-agora/\n/way-board/\n/web/\n/web800fo/\n/webaccess/\n/webadmin/\n/webAdmin/\n/webalizer/\n/webapps/\n/WebBank/\n/webboard/\n/WebCalendar/\n/webcart/\n/webcart-lite/\n/webcgi/\n/webdata/\n/webdav/\n/webdb/\n/webDB/\n/webimages/\n/webimages2/\n/web-inf/\n/weblog/\n/weblogs/\n/webmail/\n/webmaster/\n/webmaster_logs/\n/webMathematica/\n/webpub/\n/webpub-ui/\n/webreports/\n/webreps/\n/webservices/\n/webshare/\n/WebShop/\n/website/\n/webstat/\n/webstats/\n/Web_store/\n/webtrace/\n/WebTrend/\n/webtrends/\n/web_usage/\n/wiki/\n/win/\n/win2k/\n/window/\n/windows/\n/winnt/\n/word/\n/wordpress/\n/work/\n/world/\n/wp-admin/\n/wp-login/\n/wsdocs/\n/WS_FTP/\n/wstats/\n/wusage/\n/www/\n/www0/\n/www2/\n/www3/\n/www4/\n/wwwjoin/\n/wwwlog/\n/wwwrooot/\n/www-sql/\n/wwwstat/\n/wwwstats/\n/x/\n/xGB/\n/xml/\n/XSL/\n/xtemp/\n/xymon/\n/y/\n/z/\n/zb41/\n/zip/\n/zipfiles/\n```\n\n----------------------------------------\n\nTITLE: Setting Up Windows-Specific DLL Resources\nDESCRIPTION: Configures resources for Windows DLL builds, handling both MSVC and MinGW compilers differently.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT MINGW)\n    set(ZLIB_DLL_SRCS\n        win32/zlib1.rc # If present will override custom build rule below.\n    )\nendif()\n\n# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\nfile(READ ${CMAKE_CURRENT_SOURCE_DIR}/zlib.h _zlib_h_contents)\nstring(REGEX REPLACE \".*#define[ \\t]+ZLIB_VERSION[ \\t]+\\\"([-0-9A-Za-z.]+)\\\".*\"\n    \"\\\\1\" ZLIB_FULL_VERSION ${_zlib_h_contents})\n\nif(MINGW)\n    # This gets us DLL resource information when compiling on MinGW.\n    if(NOT CMAKE_RC_COMPILER)\n        set(CMAKE_RC_COMPILER windres.exe)\n    endif()\n\n    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj\n                       COMMAND ${CMAKE_RC_COMPILER}\n                            -D GCC_WINDRES\n                            -I ${CMAKE_CURRENT_SOURCE_DIR}\n                            -I ${CMAKE_CURRENT_BINARY_DIR}\n                            -o ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj\n                            -i ${CMAKE_CURRENT_SOURCE_DIR}/win32/zlib1.rc)\n    set(ZLIB_DLL_SRCS ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj)\nendif(MINGW)\n```\n\n----------------------------------------\n\nTITLE: Configuring 8-bit PCRE2 Libraries in CMake\nDESCRIPTION: Configures both static and shared libraries for the 8-bit version of PCRE2, including the POSIX wrapper. Sets version information, compile definitions, and platform-specific settings. Creates library aliases based on build configuration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(PCRE2_BUILD_PCRE2_8)\n  if(BUILD_STATIC_LIBS)\n    add_library(pcre2-8-static STATIC ${PCRE2_HEADERS} ${PCRE2_SOURCES} ${PROJECT_BINARY_DIR}/config.h)\n    set_target_properties(\n      pcre2-8-static\n      PROPERTIES\n        COMPILE_DEFINITIONS PCRE2_CODE_UNIT_WIDTH=8\n        MACHO_COMPATIBILITY_VERSION \"${LIBPCRE2_8_MACHO_COMPATIBILITY_VERSION}\"\n        MACHO_CURRENT_VERSION \"${LIBPCRE2_8_MACHO_CURRENT_VERSION}\"\n        VERSION ${LIBPCRE2_8_VERSION}\n        SOVERSION ${LIBPCRE2_8_SOVERSION}\n    )\n    target_compile_definitions(pcre2-8-static PUBLIC PCRE2_STATIC)\n    target_include_directories(pcre2-8-static PUBLIC ${PROJECT_BINARY_DIR})\n    if(REQUIRE_PTHREAD)\n      target_link_libraries(pcre2-8-static Threads::Threads)\n    endif()\n    set(TARGETS ${TARGETS} pcre2-8-static)\n    add_library(pcre2-posix-static STATIC ${PCRE2POSIX_HEADERS} ${PCRE2POSIX_SOURCES})\n    set_target_properties(\n      pcre2-posix-static\n      PROPERTIES\n        COMPILE_DEFINITIONS PCRE2_CODE_UNIT_WIDTH=8\n        MACHO_COMPATIBILITY_VERSION \"${LIBPCRE2_POSIX_MACHO_COMPATIBILITY_VERSION}\"\n        MACHO_CURRENT_VERSION \"${LIBPCRE2_POSIX_MACHO_CURRENT_VERSION}\"\n        VERSION ${LIBPCRE2_POSIX_VERSION}\n        SOVERSION ${LIBPCRE2_POSIX_SOVERSION}\n    )\n    target_link_libraries(pcre2-posix-static pcre2-8-static)\n    target_include_directories(pcre2-posix-static PUBLIC ${PROJECT_SOURCE_DIR}/src)\n    set(TARGETS ${TARGETS} pcre2-posix-static)\n\n    if(MSVC)\n      set_target_properties(pcre2-8-static PROPERTIES OUTPUT_NAME pcre2-8-static)\n      set_target_properties(pcre2-posix-static PROPERTIES OUTPUT_NAME pcre2-posix-static)\n    else()\n      set_target_properties(pcre2-8-static PROPERTIES OUTPUT_NAME pcre2-8)\n      set_target_properties(pcre2-posix-static PROPERTIES OUTPUT_NAME pcre2-posix)\n    endif()\n    if(PCRE2_STATIC_PIC)\n      set_target_properties(pcre2-8-static pcre2-posix-static PROPERTIES POSITION_INDEPENDENT_CODE 1)\n    endif()\n  endif()\n\n  if(BUILD_SHARED_LIBS)\n    add_library(pcre2-8-shared SHARED ${PCRE2_HEADERS} ${PCRE2_SOURCES} ${PROJECT_BINARY_DIR}/config.h)\n    target_include_directories(pcre2-8-shared PUBLIC ${PROJECT_BINARY_DIR})\n    set_target_properties(\n      pcre2-8-shared\n      PROPERTIES\n        COMPILE_DEFINITIONS PCRE2_CODE_UNIT_WIDTH=8\n        MACHO_COMPATIBILITY_VERSION \"${LIBPCRE2_8_MACHO_COMPATIBILITY_VERSION}\"\n        MACHO_CURRENT_VERSION \"${LIBPCRE2_8_MACHO_CURRENT_VERSION}\"\n        VERSION ${LIBPCRE2_8_VERSION}\n        SOVERSION ${LIBPCRE2_8_SOVERSION}\n        OUTPUT_NAME pcre2-8\n    )\n    if(REQUIRE_PTHREAD)\n      target_link_libraries(pcre2-8-shared Threads::Threads)\n    endif()\n    set(TARGETS ${TARGETS} pcre2-8-shared)\n    set(DLL_PDB_FILES $<TARGET_PDB_FILE_DIR:pcre2-8-shared>/pcre2-8.pdb ${DLL_PDB_FILES})\n    set(DLL_PDB_DEBUG_FILES $<TARGET_PDB_FILE_DIR:pcre2-8-shared>/pcre2-8d.pdb ${DLL_PDB_DEBUG_FILES})\n\n    add_library(pcre2-posix-shared SHARED ${PCRE2POSIX_HEADERS} ${PCRE2POSIX_SOURCES})\n    target_include_directories(pcre2-posix-shared PUBLIC ${PROJECT_SOURCE_DIR}/src)\n    set_target_properties(\n      pcre2-posix-shared\n      PROPERTIES\n        COMPILE_DEFINITIONS PCRE2_CODE_UNIT_WIDTH=8\n        MACHO_COMPATIBILITY_VERSION \"${LIBPCRE2_POSIX_MACHO_COMPATIBILITY_VERSION}\"\n        MACHO_CURRENT_VERSION \"${LIBPCRE2_POSIX_MACHO_CURRENT_VERSION}\"\n        VERSION ${LIBPCRE2_POSIX_VERSION}\n        SOVERSION ${LIBPCRE2_POSIX_SOVERSION}\n        OUTPUT_NAME pcre2-posix\n    )\n    set(PCRE2POSIX_CFLAG \"-DPCRE2POSIX_SHARED\")\n    target_compile_definitions(pcre2-posix-shared PUBLIC ${PCRE2POSIX_CFLAG})\n    target_link_libraries(pcre2-posix-shared pcre2-8-shared)\n    set(TARGETS ${TARGETS} pcre2-posix-shared)\n    set(DLL_PDB_FILES $<TARGET_PDB_FILE_DIR:pcre2-posix-shared>/pcre2-posix.pdb ${DLL_PDB_FILES})\n    set(DLL_PDB_DEBUG_FILES $<TARGET_PDB_FILE_DIR:pcre2-posix-shared>/pcre2-posixd.pdb ${DLL_PDB_DEBUG_FILES})\n\n    if(MINGW)\n      if(NON_STANDARD_LIB_PREFIX)\n        set_target_properties(pcre2-8-shared pcre2-posix-shared PROPERTIES PREFIX \"\")\n      endif()\n      if(NON_STANDARD_LIB_SUFFIX)\n        set_target_properties(pcre2-8-shared pcre2-posix-shared PROPERTIES SUFFIX \"-0.dll\")\n      endif()\n    endif()\n  endif()\n\n  if(BUILD_STATIC_LIBS)\n    add_library(pcre2-8 ALIAS pcre2-8-static)\n    add_library(pcre2-posix ALIAS pcre2-posix-static)\n  else()\n    add_library(pcre2-8 ALIAS pcre2-8-shared)\n    add_library(pcre2-posix ALIAS pcre2-posix-shared)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC-Specific Settings\nDESCRIPTION: Sets Microsoft Visual C++ compiler-specific settings, including debug postfix and disabling security and non-standard deprecation warnings.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    set(CMAKE_DEBUG_POSTFIX \"d\")\n    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)\n    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)\n    include_directories(${CMAKE_CURRENT_SOURCE_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSSL Backend for libssh2 in CMake\nDESCRIPTION: Detects and configures OpenSSL as a cryptographic backend for libssh2. Sets up include directories, libraries, and handles Windows-specific requirements including DLL detection.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif(CRYPTO_BACKEND STREQUAL \"OpenSSL\" OR NOT CRYPTO_BACKEND)\n\n  find_package(OpenSSL ${_specific_crypto_requirement})\n\n  if(OPENSSL_FOUND)\n    set(CRYPTO_BACKEND \"OpenSSL\")\n    set(CRYPTO_BACKEND_DEFINE \"LIBSSH2_OPENSSL\")\n    set(CRYPTO_BACKEND_INCLUDE_DIR ${OPENSSL_INCLUDE_DIR})\n    list(APPEND LIBSSH2_LIBS OpenSSL::Crypto)\n    list(APPEND LIBSSH2_PC_REQUIRES_PRIVATE \"libcrypto\")\n\n    if(WIN32)\n      # Statically linking to OpenSSL requires crypt32 for some Windows APIs.\n      # This should really be handled by FindOpenSSL.cmake.\n      list(APPEND LIBSSH2_LIBS \"crypt32\" \"bcrypt\")\n\n      #set(CMAKE_FIND_DEBUG_MODE ON)\n\n      find_file(DLL_LIBCRYPTO\n        NAMES \"crypto.dll\"\n          \"libcrypto-1_1.dll\" \"libcrypto-1_1-x64.dll\"\n          \"libcrypto-3.dll\" \"libcrypto-3-x64.dll\"\n        HINTS ${_OPENSSL_ROOT_HINTS} PATHS ${_OPENSSL_ROOT_PATHS}\n        PATH_SUFFIXES \"bin\" NO_DEFAULT_PATH)\n      if(DLL_LIBCRYPTO)\n        list(APPEND _RUNTIME_DEPENDENCIES ${DLL_LIBCRYPTO})\n        message(STATUS \"Found libcrypto DLL: ${DLL_LIBCRYPTO}\")\n      else()\n        message(WARNING \"Unable to find OpenSSL libcrypto DLL, executables may not run\")\n      endif()\n\n      #set(CMAKE_FIND_DEBUG_MODE OFF)\n    endif()\n\n    find_package(ZLIB)\n\n    if(ZLIB_FOUND)\n      list(APPEND LIBSSH2_LIBS ${ZLIB_LIBRARIES})\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating the Final Build Configuration Header - CMake\nDESCRIPTION: This snippet writes out the finalized configuration options into config.h by substituting values into a template header file using configure_file. The generated header contains all the macros and settings established by the CMake logic, and will be included by PCRE2 sources at build time. Prerequisite: config-cmake.h.in template must be present in the project tree.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(config-cmake.h.in ${PROJECT_BINARY_DIR}/config.h @ONLY)\n\n```\n\n----------------------------------------\n\nTITLE: Creating zlib Library Targets\nDESCRIPTION: Creates shared and static library targets for zlib with appropriate configuration, including include directories and version properties.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(zlib SHARED ${ZLIB_SRCS} ${ZLIB_DLL_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})\ntarget_include_directories(zlib PUBLIC ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR})\nadd_library(zlibstatic STATIC ${ZLIB_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})\ntarget_include_directories(zlibstatic PUBLIC ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR})\nset_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)\nset_target_properties(zlib PROPERTIES SOVERSION 1)\n\nif(NOT CYGWIN)\n    # This property causes shared libraries on Linux to have the full version\n    # encoded into their final filename.  We disable this on Cygwin because\n    # it causes cygz-${ZLIB_FULL_VERSION}.dll to be created when cygz.dll\n    # seems to be the default.\n    #\n    # This has no effect with MSVC, on that platform the version info for\n    # the DLL comes from the resource file win32/zlib1.rc\n    set_target_properties(zlib PROPERTIES VERSION ${ZLIB_FULL_VERSION})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting LibSSH2 Version Information in CMake\nDESCRIPTION: Defines the version information for the LibSSH2 library, setting the soversion (shared object version) and libversion (library version) variables.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(_libssh2_soversion 1)\nset(_libssh2_libversion 1.0.1)\n```\n\n----------------------------------------\n\nTITLE: Platform Source File Configuration\nDESCRIPTION: Configures platform-specific source files based on available system features and detected operating system.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (HAVE_ROUTE_RT_MSGHDR)\n    list(APPEND PLATFORM_SOURCES src/arp-bsd.c)\nelseif (HAVE_IOCTL_ARP)\n    list(APPEND PLATFORM_SOURCES src/arp-ioctl.c)\nelseif (HAVE_IPHLPAPI_H)\n    list(APPEND PLATFORM_SOURCES src/arp-win32.c)\nelse()\n    list(APPEND PLATFORM_SOURCES src/arp-none.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for Required Header Files\nDESCRIPTION: Checks if the necessary system header files exist on the build system using CMake's CheckIncludeFile module.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_include_file(sys/types.h HAVE_SYS_TYPES_H)\ncheck_include_file(stdint.h    HAVE_STDINT_H)\ncheck_include_file(stddef.h    HAVE_STDDEF_H)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Feature Detection for libssh2\nDESCRIPTION: Pre-populates platform capability variables based on known compiler and platform combinations, particularly for Windows (MSVC, MinGW) environments.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# Prefill values with known detection results\n# Keep this synced with src/libssh2_setup.h\nif(WIN32)\n  if(MINGW)\n    set(HAVE_SNPRINTF 1)\n    set(HAVE_UNISTD_H 1)\n    set(HAVE_INTTYPES_H 1)\n    set(HAVE_SYS_TIME_H 1)\n    set(HAVE_GETTIMEOFDAY 1)\n    set(HAVE_STRTOLL 1)\n  elseif(MSVC)\n    set(HAVE_GETTIMEOFDAY 0)\n    if(NOT MSVC_VERSION LESS 1800)\n      set(HAVE_INTTYPES_H 1)\n      set(HAVE_STRTOLL 1)\n    else()\n      set(HAVE_INTTYPES_H 0)\n      set(HAVE_STRTOLL 0)\n      set(HAVE_STRTOI64 1)\n    endif()\n    if(NOT MSVC_VERSION LESS 1900)\n      set(HAVE_SNPRINTF 1)\n    else()\n      set(HAVE_SNPRINTF 0)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Detecting Interface Enumeration Mechanism on UNIX Systems\nDESCRIPTION: Detects the available method for listing network interfaces on UNIX systems. It first checks for getifaddrs(), then falls back to SIOCGLIFCONF or SIOCGIFCONF if necessary, and adds the appropriate source file to the build.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WIN32)\n    #\n    # UN*X - figure out what type of interface list mechanism we\n    # have.\n    #\n    # If the capture type is null, that means we can't capture,\n    # so we can't open any capture devices, so we won't return\n    # any interfaces.\n    #\n    if(NOT PCAP_TYPE STREQUAL \"null\")\n        cmake_push_check_state()\n        set(CMAKE_REQUIRED_LIBRARIES ${PCAP_LINK_LIBRARIES})\n        check_function_exists(getifaddrs HAVE_GETIFADDRS)\n        cmake_pop_check_state()\n        if(NOT HAVE_GETIFADDRS)\n            #\n            # It's not in the libraries that, at this point, we've\n            # found we need to link libpcap with.\n            #\n            # It's in libsocket on Solaris and possibly other OSes;\n            # as long as we're not linking with libxnet, check there.\n            #\n            # NOTE: if you hand check_library_exists as its last\n            # argument a variable that's been set, it skips the test,\n            # so we need different variables.\n            #\n            if(NOT LIBXNET_HAS_GETHOSTBYNAME)\n                check_library_exists(socket getifaddrs \"\" SOCKET_HAS_GETIFADDRS)\n                if(SOCKET_HAS_GETIFADDRS)\n                    set(PCAP_LINK_LIBRARIES socket ${PCAP_LINK_LIBRARIES})\n                    set(LIBS \"-lsocket ${LIBS}\")\n                    set(LIBS_STATIC \"-lsocket ${LIBS_STATIC}\")\n                    set(LIBS_PRIVATE \"-lsocket ${LIBS_PRIVATE}\")\n                    set(HAVE_GETIFADDRS TRUE)\n                endif()\n            endif()\n        endif()\n        if(HAVE_GETIFADDRS)\n            #\n            # We have \"getifaddrs()\"; make sure we have <ifaddrs.h>\n            # as well, just in case some platform is really weird.\n            # It may require that sys/types.h be included first,\n            # so include it first.\n            #\n            check_include_files(\"sys/types.h;ifaddrs.h\" HAVE_IFADDRS_H)\n            if(HAVE_IFADDRS_H)\n                #\n                # We have the header, so we use \"getifaddrs()\" to\n                # get the list of interfaces.\n                #\n                set(FINDALLDEVS_TYPE getad)\n            else()\n                #\n                # We don't have the header - give up.\n                # XXX - we could also fall back on some other\n                # mechanism, but, for now, this'll catch this\n                # problem so that we can at least try to figure\n                # out something to do on systems with \"getifaddrs()\"\n                # but without \"ifaddrs.h\", if there is something\n                # we can do on those systems.\n                #\n                message(FATAL_ERROR \"Your system has getifaddrs() but doesn't have a usable <ifaddrs.h>.\")\n            endif()\n        else()\n            #\n            # Well, we don't have \"getifaddrs()\", at least not with the\n            # libraries with which we've decided we need to link\n            # libpcap with, so we have to use some other mechanism.\n            #\n            # Note that this may happen on Solaris, which has\n            # getifaddrs(), but in -lsocket, not in -lxnet, so we\n            # won't find it if we link with -lxnet, which we want\n            # to do for other reasons.\n            #\n            # For now, we use either the SIOCGIFCONF ioctl or the\n            # SIOCGLIFCONF ioctl, preferring the latter if we have\n            # it; the latter is a Solarisism that first appeared\n            # in Solaris 8.  (Solaris's getifaddrs() appears to\n            # be built atop SIOCGLIFCONF; using it directly\n            # avoids a not-all-that-useful middleman.)\n            #\n            try_compile(HAVE_SIOCGLIFCONF ${CMAKE_CURRENT_BINARY_DIR} \"${pcap_SOURCE_DIR}/cmake/have_siocglifconf.c\" )\n            if(HAVE_SIOCGLIFCONF)\n                set(FINDALLDEVS_TYPE glifc)\n            else()\n                set(FINDALLDEVS_TYPE gifc)\n            endif()\n        endif()\n        message(STATUS \"Find-interfaces mechanism type: ${FINDALLDEVS_TYPE}\")\n        set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} fad-${FINDALLDEVS_TYPE}.c)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring PCRE2 Variant Support Flags in CMake\nDESCRIPTION: Sets up boolean flags for different PCRE2 character width variants (8-bit, 16-bit, and 32-bit) based on build configuration options.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(PCRE2_BUILD_PCRE2_8)\n  set(enable_pcre2_8 \"yes\")\nelse()\n  set(enable_pcre2_8 \"no\")\nendif()\n\nif(PCRE2_BUILD_PCRE2_16)\n  set(enable_pcre2_16 \"yes\")\nelse()\n  set(enable_pcre2_16 \"no\")\nendif()\n\nif(PCRE2_BUILD_PCRE2_32)\n  set(enable_pcre2_32 \"yes\")\nelse()\n  set(enable_pcre2_32 \"no\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing ICMP Ping with Non-Zero ID in Lua\nDESCRIPTION: Suggests randomizing the ICMP ID field for -PO1 and \"-sO -p1\" scans to improve response rates, as some hosts drop packets with ID 0.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\n-PO1\n```\n\nLANGUAGE: Lua\nCODE:\n```\n\"-sO -p1\"\n```\n\n----------------------------------------\n\nTITLE: Installing PCRE2 Documentation Files in CMake\nDESCRIPTION: Configures installation of PCRE2 documentation files like license, authors, and security information.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\nfile(\n  GLOB txts\n  AUTHORS.md\n  LICENCE.md\n  SECURITY.md\n)\n\ninstall(FILES ${txts} DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/doc/pcre2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket Libraries for libssh2\nDESCRIPTION: Sets up platform-specific socket libraries required by libssh2, handling Windows (ws2_32) and UNIX-like systems (socket, nsl) differently based on platform detection.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBSSH2_LIBS_SOCKET \"\")\nset(LIBSSH2_LIBS \"\")\nset(LIBSSH2_LIBDIRS \"\")\nset(LIBSSH2_PC_REQUIRES_PRIVATE \"\")\n\n# Add socket libraries\nif(WIN32)\n  list(APPEND LIBSSH2_LIBS_SOCKET \"ws2_32\")\nelse()\n  check_function_exists_may_need_library(\"socket\" HAVE_SOCKET \"socket\")\n  if(NEED_LIB_SOCKET)\n    list(APPEND LIBSSH2_LIBS_SOCKET \"socket\")\n  endif()\n  check_function_exists_may_need_library(\"inet_addr\" HAVE_INET_ADDR \"nsl\")\n  if(NEED_LIB_NSL)\n    list(APPEND LIBSSH2_LIBS_SOCKET \"nsl\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting _WIN32_WINNT Definition for MinGW Builds in CMake\nDESCRIPTION: Checks if the MinGW compiler is being used on Windows (`MINGW` is true). If so, it adds a preprocessor definition `-D_WIN32_WINNT=0x0601` using `add_definitions`. This sets the minimum required Windows API version to Windows 7 (NT 6.1) or higher, which is necessary to access certain APIs like the full IPv6 API (including `inet_ntop`) and `NdisMediumIP` used within libpcap.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# If we're building with MinGW, we need to specify _WIN32_WINNT as\n# 0x0600 (\"NT 6.0\", a/k/a Vista/Windows Server 2008) or higher\n# in order to get the full IPv6 API, including inet_ntop(), and we\n# need to specify it as 0x0601 (\"NT 6.1\", a/k/a Windows 7) or higher\n# in order to get NdisMediumIP.\n#\n# NOTE: pcap does *NOT* work with msvcrt.dll; it must link with\n# a newer version of the C library, i.e. Visual Studio 2015 or\n# later, as it depends on C99 features introduced in VS 2015.\n#\nif(MINGW)\n    add_definitions(-D_WIN32_WINNT=0x0601)\nendif(MINGW)\n```\n\n----------------------------------------\n\nTITLE: Configuring PCAP Library Dependencies for Windows in CMake\nDESCRIPTION: Sets up the packet capture libraries for Windows based on the selected PCAP type. For 'npf' type, it links with packet.dll before Winsock2.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    if(PCAP_TYPE STREQUAL \"npf\")\n        #\n        # Link with packet.dll before Winsock2.\n        #\n        set(PCAP_LINK_LIBRARIES ${Packet_LIBRARIES} ${PCAP_LINK_LIBRARIES})\n    elseif(PCAP_TYPE STREQUAL \"null\")\n    else()\n        message(FATAL_ERROR \"${PCAP_TYPE} is not a valid pcap type\")\n    endif()\nelse(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter/Setter Method Prototypes in C++\nDESCRIPTION: Function prototypes for getter and setter methods. Defines the interface for accessing and modifying a class attribute of type TYPE.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/pythonscripts/TemplateGettersSetters.txt#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nint setMETHNAME(TYPE val);\nTYPE getMETHNAME();\n```\n\n----------------------------------------\n\nTITLE: Configuring 16-bit PCRE2 Libraries in CMake\nDESCRIPTION: Configures both static and shared libraries for the 16-bit version of PCRE2. Sets version information, compile definitions, and platform-specific settings. Creates library aliases based on build configuration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif(PCRE2_BUILD_PCRE2_16)\n  if(BUILD_STATIC_LIBS)\n    add_library(pcre2-16-static STATIC ${PCRE2_HEADERS} ${PCRE2_SOURCES} ${PROJECT_BINARY_DIR}/config.h)\n    target_include_directories(pcre2-16-static PUBLIC ${PROJECT_BINARY_DIR})\n    set_target_properties(\n      pcre2-16-static\n      PROPERTIES\n        UNITY_BUILD OFF\n        COMPILE_DEFINITIONS PCRE2_CODE_UNIT_WIDTH=16\n        MACHO_COMPATIBILITY_VERSION \"${LIBPCRE2_32_MACHO_COMPATIBILITY_VERSION}\"\n        MACHO_CURRENT_VERSION \"${LIBPCRE2_32_MACHO_CURRENT_VERSION}\"\n        VERSION ${LIBPCRE2_16_VERSION}\n        SOVERSION ${LIBPCRE2_16_SOVERSION}\n    )\n    target_compile_definitions(pcre2-16-static PUBLIC PCRE2_STATIC)\n    if(REQUIRE_PTHREAD)\n      target_link_libraries(pcre2-16-static Threads::Threads)\n    endif()\n    set(TARGETS ${TARGETS} pcre2-16-static)\n\n    if(MSVC)\n      set_target_properties(pcre2-16-static PROPERTIES OUTPUT_NAME pcre2-16-static)\n    else()\n      set_target_properties(pcre2-16-static PROPERTIES OUTPUT_NAME pcre2-16)\n    endif()\n    if(PCRE2_STATIC_PIC)\n      set_target_properties(pcre2-16-static PROPERTIES POSITION_INDEPENDENT_CODE 1)\n    endif()\n  endif()\n\n  if(BUILD_SHARED_LIBS)\n    add_library(pcre2-16-shared SHARED ${PCRE2_HEADERS} ${PCRE2_SOURCES} ${PROJECT_BINARY_DIR}/config.h)\n    target_include_directories(pcre2-16-shared PUBLIC ${PROJECT_BINARY_DIR})\n    set_target_properties(\n      pcre2-16-shared\n      PROPERTIES\n        UNITY_BUILD OFF\n        COMPILE_DEFINITIONS PCRE2_CODE_UNIT_WIDTH=16\n        MACHO_COMPATIBILITY_VERSION \"${LIBPCRE2_32_MACHO_COMPATIBILITY_VERSION}\"\n        MACHO_CURRENT_VERSION \"${LIBPCRE2_32_MACHO_CURRENT_VERSION}\"\n        VERSION ${LIBPCRE2_16_VERSION}\n        SOVERSION ${LIBPCRE2_16_SOVERSION}\n        OUTPUT_NAME pcre2-16\n    )\n    if(REQUIRE_PTHREAD)\n      target_link_libraries(pcre2-16-shared Threads::Threads)\n    endif()\n    set(TARGETS ${TARGETS} pcre2-16-shared)\n    set(DLL_PDB_FILES $<TARGET_PDB_FILE_DIR:pcre2-16-shared>/pcre2-16.pdb ${DLL_PDB_FILES})\n    set(DLL_PDB_DEBUG_FILES $<TARGET_PDB_FILE_DIR:pcre2-16-shared>/pcre2-16d.pdb ${DLL_PDB_DEBUG_FILES})\n\n    if(MINGW)\n      if(NON_STANDARD_LIB_PREFIX)\n        set_target_properties(pcre2-16-shared PROPERTIES PREFIX \"\")\n      endif()\n      if(NON_STANDARD_LIB_SUFFIX)\n        set_target_properties(pcre2-16-shared PROPERTIES SUFFIX \"-0.dll\")\n      endif()\n    endif()\n  endif()\n\n  if(BUILD_STATIC_LIBS)\n    add_library(pcre2-16 ALIAS pcre2-16-static)\n  else()\n    add_library(pcre2-16 ALIAS pcre2-16-shared)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Original Source Information for libpcap\nDESCRIPTION: This snippet shows the historical information about libpcap's origin from Lawrence Berkeley National Laboratory Network Research Group, including the FTP link to an older version.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nformerly from\tLawrence Berkeley National Laboratory\n\t\tNetwork Research Group <libpcap@ee.lbl.gov>\n\t\tftp://ftp.ee.lbl.gov/old/libpcap-0.4a7.tar.Z\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options for Examples and Tests in libssh2\nDESCRIPTION: Configures options to control whether example programs and test suites are built as part of the libssh2 build process, both enabled by default.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_EXAMPLES \"Build libssh2 examples\" ON)\noption(BUILD_TESTING \"Build libssh2 test suite\" ON)\n\nif(NOT BUILD_STATIC_LIBS AND NOT BUILD_SHARED_LIBS)\n  set(BUILD_STATIC_LIBS ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: YACC/Bison Parser Configuration\nDESCRIPTION: Configures parser generation using either YACC or Bison, including version checks and reentrant parser settings.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/grammar.c ${CMAKE_CURRENT_BINARY_DIR}/grammar.h\n    SOURCE ${pcap_BINARY_DIR}/grammar.y\n    COMMAND ${YACC_EXECUTABLE} -p pcap_ -o ${CMAKE_CURRENT_BINARY_DIR}/grammar.c -d ${pcap_BINARY_DIR}/grammar.y\n    DEPENDS ${pcap_BINARY_DIR}/grammar.y\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Capture Support in CMake\nDESCRIPTION: Sets up remote capture functionality by checking struct msghdr members and adding required source files when remote capture is enabled.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_REMOTE)\n    cmake_push_check_state()\n    set(CMAKE_REQUIRED_INCLUDES ${CMAKE_CURRENT_SOURCE_DIR})\n    check_struct_has_member(\"struct msghdr\" msg_control \"ftmacros.h;sys/socket.h\" HAVE_STRUCT_MSGHDR_MSG_CONTROL)\n    check_struct_has_member(\"struct msghdr\" msg_flags \"ftmacros.h;sys/socket.h\" HAVE_STRUCT_MSGHDR_MSG_FLAGS)\n    cmake_pop_check_state()\n    set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C}\n        pcap-new.c pcap-rpcap.c rpcap-protocol.c sockutils.c sslutils.c)\nendif(ENABLE_REMOTE)\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter Method in C++\nDESCRIPTION: Implementation of a setter method that assigns a value to a class attribute. Returns OP_SUCCESS on successful assignment and OP_FAILURE on error.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/pythonscripts/TemplateGettersSetters.txt#2025-04-23_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nint CLASSNAME::setMETHNAME(TYPE val){\n    this->ATTRNAME=val;\n    return OP_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing libssh2 Version from Header File\nDESCRIPTION: Extracts version information from libssh2.h using regex pattern matching to determine the full version string and its major, minor, and patch components.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfile(READ \"${PROJECT_SOURCE_DIR}/include/libssh2.h\" _header_contents)\nstring(REGEX REPLACE \".*#define LIBSSH2_VERSION[ \\t]+\\\"([^\\\"]+)\\\".*\" \"\\\\1\" LIBSSH2_VERSION \"${_header_contents}\")\nstring(REGEX REPLACE \".*#define LIBSSH2_VERSION_MAJOR[ \\t]+([0-9]+).*\" \"\\\\1\" LIBSSH2_VERSION_MAJOR \"${_header_contents}\")\nstring(REGEX REPLACE \".*#define LIBSSH2_VERSION_MINOR[ \\t]+([0-9]+).*\" \"\\\\1\" LIBSSH2_VERSION_MINOR \"${_header_contents}\")\nstring(REGEX REPLACE \".*#define LIBSSH2_VERSION_PATCH[ \\t]+([0-9]+).*\" \"\\\\1\" LIBSSH2_VERSION_PATCH \"${_header_contents}\")\nunset(_header_contents)\n\nif(NOT LIBSSH2_VERSION OR\n   NOT LIBSSH2_VERSION_MAJOR MATCHES \"^[0-9]+$\" OR\n   NOT LIBSSH2_VERSION_MINOR MATCHES \"^[0-9]+$\" OR\n   NOT LIBSSH2_VERSION_PATCH MATCHES \"^[0-9]+$\")\n  message(FATAL_ERROR \"Unable to parse version from ${PROJECT_SOURCE_DIR}/include/libssh2.h\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adjusting PKG_CONFIG_PATH for SunOS Builds in CMake\nDESCRIPTION: Adjusts the PKG_CONFIG_PATH environment variable on SunOS systems based on the architecture (32-bit or 64-bit). For 64-bit builds, it ensures '/usr/lib/amd64/pkgconfig' precedes '/usr/lib/pkgconfig' if present, or appends it otherwise. For 32-bit builds, it ensures '/usr/lib/pkgconfig' precedes '/usr/lib/amd64/pkgconfig' if the latter exists. This ensures pkg-config finds the correct libraries for the target architecture.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#\nif(CMAKE_SYSTEM_NAME STREQUAL \"SunOS\" AND CMAKE_SYSTEM_VERSION MATCHES \"5[.][0-9.]*\")\n    #\n    # Note: string(REPLACE) does not appear to support using ENV{...}\n    # as an argument, so we set a variable and then use set() to set\n    # the environment variable.\n    #\n    if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n        #\n        # 64-bit build.  If /usr/lib/pkgconfig appears in the path,\n        # prepend /usr/lib/amd64/pkgconfig to it; otherwise,\n        # put /usr/lib/amd64 at the end.\n        #\n        if((NOT DEFINED ENV{PKG_CONFIG_PATH}) OR \"$ENV{PKG_CONFIG_PATH}\" EQUAL \"\")\n            #\n            # Not set, or empty.  Set it to /usr/lib/amd64/pkgconfig.\n            #\n            set(fixed_path \"/usr/lib/amd64/pkgconfig\")\n        elseif(\"$ENV{PKG_CONFIG_PATH}\" MATCHES \"/usr/lib/pkgconfig\")\n            #\n            # It contains /usr/lib/pkgconfig.  Prepend\n            # /usr/lib/amd64/pkgconfig to /usr/lib/pkgconfig.\n            #\n            string(REPLACE \"/usr/lib/pkgconfig\"\n                \"/usr/lib/amd64/pkgconfig:/usr/lib/pkgconfig\"\n                fixed_path \"$ENV{PKG_CONFIG_PATH}\")\n        else()\n            #\n            # Not empty, but doesn't contain /usr/lib/pkgconfig.\n            # Append /usr/lib/amd64/pkgconfig to it.\n            #\n            set(fixed_path \"$ENV{PKG_CONFIG_PATH}:/usr/lib/amd64/pkgconfig\")\n        endif()\n        set(ENV{PKG_CONFIG_PATH} \"${fixed_path}\")\n    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)\n        #\n        # 32-bit build.  If /usr/amd64/lib/pkgconfig appears in the path,\n        # prepend /usr/lib/pkgconfig to it.\n        #\n        if(\"$ENV{PKG_CONFIG_PATH}\" MATCHES \"/usr/lib/amd64/pkgconfig\")\n            #\n            # It contains /usr/lib/amd64/pkgconfig.  Prepend\n            # /usr/lib/pkgconfig to /usr/lib/amd64/pkgconfig.\n            #\n            string(REPLACE \"/usr/lib/amd64/pkgconfig\"\n                \"/usr/lib/pkgconfig:/usr/lib/amd64/pkgconfig\"\n                fixed_path \"$ENV{PKG_CONFIG_PATH}\")\n            set(ENV{PKG_CONFIG_PATH} \"${fixed_path}\")\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux USB Monitoring Support\nDESCRIPTION: Checks for and configures USB monitoring (usbmon) support on Linux systems. This includes verifying the availability of required headers and structure definitions for USB device communication.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    # Check for usbmon USB sniffing support.\n    if(NOT DISABLE_LINUX_USBMON)\n        set(PCAP_SUPPORT_LINUX_USBMON TRUE)\n        set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} pcap-usb-linux.c)\n        #\n        # Do we have a version of <linux/compiler.h> available?\n        # If so, we might need it for <linux/usbdevice_fs.h>.\n        #\n        check_include_files(\"linux/compiler.h\" HAVE_LINUX_COMPILER_H)\n        if(HAVE_LINUX_COMPILER_H)\n            #\n            # Yes - include it when testing for <linux/usbdevice_fs.h>.\n            #\n            check_include_files(\"linux/compiler.h;linux/usbdevice_fs.h\" HAVE_LINUX_USBDEVICE_FS_H)\n        else(HAVE_LINUX_COMPILER_H)\n            check_include_files(\"linux/usbdevice_fs.h\" HAVE_LINUX_USBDEVICE_FS_H)\n        endif(HAVE_LINUX_COMPILER_H)\n        if(HAVE_LINUX_USBDEVICE_FS_H)\n            #\n            # OK, does it define bRequestType?  Older versions of the kernel\n            # define fields with names like \"requesttype, \"request\", and\n            # \"value\", rather than \"bRequestType\", \"bRequest\", and\n            # \"wValue\".\n            #\n            if(HAVE_LINUX_COMPILER_H)\n                check_struct_has_member(\"struct usbdevfs_ctrltransfer\" bRequestType \"linux/compiler.h;linux/usbdevice_fs.h\" HAVE_STRUCT_USBDEVFS_CTRLTRANSFER_BREQUESTTYPE)\n            else(HAVE_LINUX_COMPILER_H)\n                check_struct_has_member(\"struct usbdevfs_ctrltransfer\" bRequestType \"linux/usbdevice_fs.h\" HAVE_STRUCT_USBDEVFS_CTRLTRANSFER_BREQUESTTYPE)\n            endif(HAVE_LINUX_COMPILER_H)\n        endif()\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Checking for Required Header Files in PCRE2 Build\nDESCRIPTION: Tests for the presence of necessary system header files that PCRE2 may use during compilation, setting corresponding HAVE_* variables based on availability.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_include_file(assert.h HAVE_ASSERT_H)\ncheck_include_file(dirent.h HAVE_DIRENT_H)\ncheck_include_file(sys/stat.h HAVE_SYS_STAT_H)\ncheck_include_file(sys/types.h HAVE_SYS_TYPES_H)\ncheck_include_file(unistd.h HAVE_UNISTD_H)\ncheck_include_file(windows.h HAVE_WINDOWS_H)\n```\n\n----------------------------------------\n\nTITLE: Defining Install Manpage Symlink Function in CMake\nDESCRIPTION: This function creates symbolic links for man pages during installation, with special handling for MinGW environments. It sets up commands to create the symlinks and registers them in the installation manifest.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_57\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(install_manpage_symlink SOURCE TARGET MANDIR)\n    if(MINGW)\n        #\n        # If we haven't found an ln executable with MinGW, we don't try\n        # generating and installing the man pages, so if we get here,\n        # we've found that executable.\n        set(LINK_COMMAND \"\\\"${LINK_EXECUTABLE}\\\" \\\"-s\\\" \\\"${SOURCE}\\\" \\\"${TARGET}\\\"\")\n    else(MINGW)\n        set(LINK_COMMAND \"\\\"${CMAKE_COMMAND}\\\" \\\"-E\\\" \\\"create_symlink\\\" \\\"${SOURCE}\\\" \\\"${TARGET}\\\"\")\n    endif(MINGW)\n\n    install(CODE \"\n         if(NOT ${CMAKE_INSTALL_MESSAGE} STREQUAL \\\"NEVER\\\")\n             message(STATUS \\\"Symlinking: \\$ENV{DESTDIR}\\${CMAKE_INSTALL_PREFIX}/${MANDIR}/${SOURCE} to ${TARGET}\\\")\n         endif()\n         execute_process(\n            COMMAND \\\"${CMAKE_COMMAND}\\\" \\\"-E\\\" \\\"remove\\\" \\\"${TARGET}\\\"\n            WORKING_DIRECTORY \\$ENV{DESTDIR}\\${CMAKE_INSTALL_PREFIX}/${MANDIR}\n          )\n         execute_process(\n            COMMAND ${LINK_COMMAND}\n            WORKING_DIRECTORY \\$ENV{DESTDIR}\\${CMAKE_INSTALL_PREFIX}/${MANDIR}\n            RESULT_VARIABLE EXIT_STATUS\n          )\n          if(NOT EXIT_STATUS EQUAL 0)\n              message(FATAL_ERROR \\\"Could not create symbolic link from \\${CMAKE_INSTALL_PREFIX}/${MANDIR}/${SOURCE} to ${TARGET}\\\")\n          endif()\n          set(CMAKE_INSTALL_MANIFEST_FILES \\${CMAKE_INSTALL_MANIFEST_FILES} \\${CMAKE_INSTALL_PREFIX}/${MANDIR}/${TARGET})\")\nendfunction(install_manpage_symlink)\n```\n\n----------------------------------------\n\nTITLE: Running Nmap Script Scan on Localhost in Bash\nDESCRIPTION: Example command for running an Nmap script scan on localhost, which was failing for non-root users due to a permissions issue in Makefile.in.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nnmap -sC localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Unity Build Settings for libssh2\nDESCRIPTION: Sets the default behavior for Unity builds in libssh2, which combines multiple source files into a single compilation unit. The batch size is set to 0 if not previously defined.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED CMAKE_UNITY_BUILD_BATCH_SIZE)\n  set(CMAKE_UNITY_BUILD_BATCH_SIZE 0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pthreads Support for Unix Systems in CMake\nDESCRIPTION: Configures threading library support for Unix systems. Sets up POSIX threads if available, clearing the thread library variable if not using pthreads.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Pthreads.\n# We might need them, because some libraries we use might use them,\n# but we don't necessarily need them.\n# That's only on UN*X; on Windows, if they use threads, we assume\n# they're native Windows threads.\n#\nif(NOT WIN32)\n  set(CMAKE_THREAD_PREFER_PTHREAD ON)\n  find_package(Threads)\n  if(NOT CMAKE_USE_PTHREADS_INIT)\n    #\n    # If it's not pthreads, we won't use it; we use it for libraries\n    # that require it.\n    #\n    set(CMAKE_THREAD_LIBS_INIT \"\")\n  endif(NOT CMAKE_USE_PTHREADS_INIT)\nendif(NOT WIN32)\n```\n\n----------------------------------------\n\nTITLE: Installing CMake Target and Public Headers\nDESCRIPTION: Installs the built target (`${PROJECT_NAME}`) and associated files. It exports the target for use by other CMake projects, installs runtime components (executables) to `CMAKE_INSTALL_BINDIR`, archive components (static libraries) to `CMAKE_INSTALL_LIBDIR`, and public headers (defined by the `PUBLIC_HEADER` property) to `CMAKE_INSTALL_INCLUDEDIR/${PROJECT_NAME}/${PROJECT_NAME}`. Installation is separated into 'runtime' and 'devel' components.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${PROJECT_NAME}\n    EXPORT ${PROJECT_NAME}Targets DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT runtime\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT devel\n    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/${PROJECT_NAME} COMPONENT devel\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Sanitizer Testing Macro in CMake\nDESCRIPTION: A CMake macro that tests if a specified sanitizer is supported by the compiler. It tries both modern and legacy compiler flags and sets the appropriate flag if supported.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(test_sanitizer _sanitizer _sanitizer_flag)\n    message(STATUS \"Checking sanitizer ${_sanitizer}\")\n    set(sanitizer_variable \"sanitize_${_sanitizer}\")\n    # Set -Werror to catch \"argument unused during compilation\" warnings\n    set(CMAKE_REQUIRED_FLAGS \"-Werror -fsanitize=${_sanitizer}\")\n    check_c_compiler_flag(\"-fsanitize=${_sanitizer}\" ${sanitizer_variable})\n    if(${${sanitizer_variable}})\n        set(${_sanitizer_flag} \"-fsanitize=${_sanitizer}\")\n    else()\n        #\n        # Try the versions supported prior to Clang 3.2.\n        # If the sanitizer is \"address\", try -fsanitize-address.\n        # If it's \"undefined\", try -fcatch-undefined-behavior.\n        # Otherwise, give up.\n        #\n        set(sanitizer_variable \"OLD_${sanitizer_variable}\")\n        if (\"${_sanitizer}\" STREQUAL \"address\")\n            set(CMAKE_REQUIRED_FLAGS \"-Werror -fsanitize-address\")\n            check_c_compiler_flag(\"-fsanitize-address\" ${sanitizer_variable})\n            if(${${sanitizer_variable}})\n                set(${_sanitizer_flag} \"-fsanitize-address\")\n            endif()\n        elseif(\"${_sanitizer}\" STREQUAL \"undefined\")\n            set(CMAKE_REQUIRED_FLAGS \"-Werror -fcatch-undefined-behavior\")\n            check_c_compiler_flag(\"-fcatch-undefined-behavior\" ${sanitizer_variable})\n            if(${${sanitizer_variable}})\n                set(${_sanitizer_flag} \"-fcatch-undefined-behavior\")\n            endif()\n        endif()\n    endif()\n    unset(CMAKE_REQUIRED_FLAGS)\nendmacro(test_sanitizer)\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Flags for Profiling\nDESCRIPTION: Configures linker flags for profiling support, handling both MSVC and other compilers differently\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nset(LINKER_FLAGS \"${SANITIZER_FLAGS}\")\nif(ENABLE_PROFILING)\n    if(MSVC)\n        set(LINKER_FLAGS \" /PROFILE\")\n    else()\n        set(LINKER_FLAGS \" -pg\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Crypto Backend in LibSSH2 CMake Build\nDESCRIPTION: Validates and configures the cryptography backend for LibSSH2. If a crypto backend is found, it adds the appropriate definitions and include directories. Otherwise, it exits with an error.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CRYPTO_BACKEND)\n  list(APPEND PRIVATE_COMPILE_DEFINITIONS ${CRYPTO_BACKEND_DEFINE})\n  list(APPEND PRIVATE_INCLUDE_DIRECTORIES ${CRYPTO_BACKEND_INCLUDE_DIR})\n  add_feature_info(\"Crypto backend\" ON \"${CRYPTO_BACKEND}\")\nelse()\n  message(FATAL_ERROR \"No suitable cryptography backend found.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules for System Configuration Checks\nDESCRIPTION: Imports various CMake modules used for feature detection, system compatibility checks, and installation directory configuration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Configuration checks\n\ninclude(CheckCSourceCompiles)\ninclude(CheckFunctionExists)\ninclude(CheckSymbolExists)\ninclude(CheckIncludeFile)\ninclude(CheckTypeSize)\ninclude(GNUInstallDirs) # for CMAKE_INSTALL_LIBDIR\n```\n\n----------------------------------------\n\nTITLE: Configuring PCAP for DLPI Platforms in CMake\nDESCRIPTION: Sets up PCAP for platforms using DLPI (Data Link Provider Interface), primarily Solaris. It checks for required headers and libraries, and configures libdlpi if available.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\n    if(PCAP_TYPE STREQUAL \"dlpi\")\n        #\n        # Needed for common functions used by pcap-[dlpi,libdlpi].c\n        #\n        set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} dlpisubs.c)\n\n        #\n        # Checks for some header files.\n        #\n        check_include_file(sys/bufmod.h HAVE_SYS_BUFMOD_H)\n        check_include_file(sys/dlpi_ext.h HAVE_SYS_DLPI_EXT_H)\n\n        #\n        # Checks to see if Solaris has the public libdlpi(3LIB) library.\n        # Note: The existence of /usr/include/libdlpi.h does not mean it is the\n        # public libdlpi(3LIB) version. Before libdlpi was made public, a\n        # private version also existed, which did not have the same APIs.\n        # Due to a gcc bug, the default search path for 32-bit libraries does\n        # not include /lib, we add it explicitly here.\n        # [http://bugs.opensolaris.org/view_bug.do?bug_id=6619485].\n        # Also, due to the bug above applications that link to libpcap with\n        # libdlpi will have to add \"-L/lib\" option to \"configure\".\n        #\n        cmake_push_check_state()\n        set(CMAKE_REQUIRED_FLAGS \"-L/lib\")\n        set(CMAKE_REQUIRED_LIBRARIES dlpi)\n        check_function_exists(dlpi_walk HAVE_LIBDLPI)\n        cmake_pop_check_state()\n        if(HAVE_LIBDLPI)\n            #\n            # XXX - add -L/lib\n            #\n            set(PCAP_LINK_LIBRARIES ${PCAP_LINK_LIBRARIES} dlpi)\n            set(LIBS \"${LIBS} -ldlpi\")\n            set(LIBS_STATIC \"${LIBS_STATIC} -ldlpi\")\n            set(LIBS_PRIVATE \"${LIBS_PRIVATE} -ldlpi\")\n            set(PCAP_TYPE libdlpi)\n        endif()\n\n        #\n        # This check is for Solaris with DLPI support for passive modes.\n        # See dlpi(7P) for more details.\n        #\n        # XXX - there's no check_type() macro that's like check_type_size()\n        # except that it only checks for the existence of the structure type,\n        # so we use check_type_size() and ignore the size.\n        #\n        cmake_push_check_state()\n        set(CMAKE_EXTRA_INCLUDE_FILES sys/types.h sys/dlpi.h)\n        check_type_size(dl_passive_req_t DL_PASSIVE_REQ_T)\n        cmake_pop_check_state()\n```\n\n----------------------------------------\n\nTITLE: Generating CRC Lookup Table in C\nDESCRIPTION: Defines the `make_crc_table` function. This function populates the global `crc_table` array by calculating the CRC-32 value for each possible 8-bit input (0-255). It uses the standard CRC-32 polynomial 0xEDB88320L. The function sets the `crc_table_computed` flag to true once the table is generated. This precomputation speeds up subsequent CRC calculations.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1952.txt#2025-04-23_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n/* Make the table for a fast CRC. */\nvoid make_crc_table(void)\n{\n  unsigned long c;\n  int n, k;\n  for (n = 0; n < 256; n++) {\n    c = (unsigned long) n;\n    for (k = 0; k < 8; k++) {\n      if (c & 1) {\n        c = 0xedb88320L ^ (c >> 1);\n      } else {\n        c = c >> 1;\n      }\n    }\n    crc_table[n] = c;\n  }\n  crc_table_computed = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Configuration\nDESCRIPTION: Configures Windows-specific build settings including Packet library dependencies and WinSock features.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    find_package(Packet)\n    if(Packet_FOUND)\n        set(HAVE_PACKET32 TRUE)\n        set(HAVE_PCAP_H TRUE)\n        include_directories(${Packet_INCLUDE_DIRS})\n        set(DNET_LINK_LIBS ${Packet_LIBRARIES} ${DNET_LINK_LIBS})\n    endif(Packet_FOUND)\nendif(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Configuring Profiling Support in CMake\nDESCRIPTION: Adds profiling flags (-pg) to the C compiler flags when profiling is enabled, except for MSVC builds.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_PROFILING)\n    if(NOT MSVC)\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -pg\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining General and Generated Header Files in CMake\nDESCRIPTION: Creates a CMake variable `DNET_HEADERS1` listing general header files directly under `include/` and the generated `config.h` located in the build directory. This variable is likely used for installing these specific headers.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(DNET_HEADERS1\n    include/dnet.h\n    include/err.h\n    include/queue.h\n    ${CMAKE_CURRENT_BINARY_DIR}/config.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PCAP for BPF Platforms in CMake\nDESCRIPTION: Sets up PCAP for platforms using BPF (Berkeley Packet Filter), primarily BSD systems. Checks for BSD-style ioctls, BPF_TIMEVAL struct, and Solaris \"any\" device support.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\n    elseif(PCAP_TYPE STREQUAL \"bpf\")\n        #\n        # Check whether we have the *BSD-style ioctls.\n        #\n        check_include_files(\"sys/types.h;net/if_media.h\" HAVE_NET_IF_MEDIA_H)\n\n        #\n        # Check whether we have struct BPF_TIMEVAL.\n        #\n        # XXX - there's no check_type() macro that's like check_type_size()\n        # except that it only checks for the existence of the structure type,\n        # so we use check_type_size() and ignore the size.\n        #\n        cmake_push_check_state()\n        if(HAVE_SYS_IOCCOM_H)\n            set(CMAKE_EXTRA_INCLUDE_FILES sys/types.h sys/ioccom.h net/bpf.h)\n            check_type_size(\"struct BPF_TIMEVAL\" STRUCT_BPF_TIMEVAL)\n        else()\n            set(CMAKE_EXTRA_INCLUDE_FILES  sys/types.h net/bpf.h)\n            check_type_size(\"struct BPF_TIMEVAL\" STRUCT_BPF_TIMEVAL)\n        endif()\n        cmake_pop_check_state()\n\n        #\n        # Check whether there's a inet/ipnet.h header and,\n        # if so, whether it defines IPNET_ANY_LINK - if so,\n        # we assume we have the \"any\" device (that's a\n        # Solaris header, and later versions of Solaris\n        # have an \"any\" device).\n        #\n        # Attempting to include it at compile time could\n        # be a pain, as it's a kernel header.\n        #\n        message(STATUS \"Checking whether the Solaris \\\"any\\\" device is supported\")\n        if(EXISTS /usr/include/inet/ipnet.h)\n            file(STRINGS /usr/include/inet/ipnet.h IPNET_ANY_LINK_LINES REGEX IPNET_ANY_LINK)\n            if(NOT IPNET_ANY_LINK_LINES STREQUAL \"\")\n                set(HAVE_SOLARIS_ANY_DEVICE TRUE)\n            endif()\n        endif()\n        if(HAVE_SOLARIS_ANY_DEVICE)\n            message(STATUS \"Checking whether the Solaris \\\"any\\\" device is supported - supported\")\n        else()\n            message(STATUS \"Checking whether the Solaris \\\"any\\\" device is supported - not supported\")\n        endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up pkg-config Variables for LibSSH2\nDESCRIPTION: Sets up variables for pkg-config file generation, including platform-specific library dependencies.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n# Calculate variables for pkg-config\nset(LIBSSH2_PC_LIBS_PRIVATE \"\")\n\nif(WIN32)\n  list(APPEND LIBSSH2_PC_LIBS_PRIVATE \"-lws2_32\")\nendif()\n\nset(_ldflags \"\")\n```\n\n----------------------------------------\n\nTITLE: Package Link Information Retrieval Macro\nDESCRIPTION: Defines a macro that executes pkg-config to get linking information for packages, handling both regular and static linking flags while avoiding system library paths.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(pkg_get_link_info _prefix _package)\n  if (PKG_CONFIG_EXECUTABLE)\n    unset(ENV{PKG_CONFIG_ALLOW_SYSTEM_LIBS})\n    set(_pkg_config_result \"\")\n    execute_process(\n      COMMAND ${PKG_CONFIG_EXECUTABLE} \"--libs\" ${_package}\n      OUTPUT_VARIABLE _pkg_config_result\n      RESULT_VARIABLE _pkg_config_failed\n      OUTPUT_STRIP_TRAILING_WHITESPACE)\n\n    if (_pkg_config_failed)\n      set(${_prefix}_FOUND_WITH_PKG_CONFIG FALSE)\n    else()\n      string(REGEX REPLACE \"[\\r\\n]\" \" \" ${_prefix}_LIBS \"${_pkg_config_result}\")\n\n      set(_pkg_config_result \"\")\n      execute_process(\n        COMMAND ${PKG_CONFIG_EXECUTABLE} \"--libs\" \"--static\" ${_package}\n        OUTPUT_VARIABLE _pkg_config_result\n        RESULT_VARIABLE _pkg_config_failed\n        OUTPUT_STRIP_TRAILING_WHITESPACE)\n\n      if (_pkg_config_failed)\n        set(${_prefix}_FOUND_WITH_PKG_CONFIG FALSE)\n      else()\n        string(REGEX REPLACE \"[\\r\\n]\" \" \" ${_prefix}_LIBS_STATIC \"${_pkg_config_result}\")\n        set(${_prefix}_PACKAGE_NAME \"${_package}\")\n        set(${_prefix}_FOUND_WITH_PKG_CONFIG TRUE)\n      endif()\n    endif()\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Initializing Attributes in NpingOps Constructor in C++\nDESCRIPTION: Template for initializing attributes in the NpingOps class constructor. Each attribute is set to a default value (0) and its state flag is set to false to indicate it hasn't been explicitly set.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/pythonscripts/TemplateNpingOps.txt#2025-04-23_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nATTRNAME=0;\nATTRNAME_set=false;\n```\n\n----------------------------------------\n\nTITLE: Displaying Ncat ASCII Art Logo\nDESCRIPTION: An ASCII art representation of the Ncat logo, featuring a stylized face or creature design with the Ncat name and a subtitle describing it as a modern interpretation of classic Netcat.\nSOURCE: https://github.com/nmap/nmap/blob/master/ncat/docs/ncat-ascii-art.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n            .       .\n            \\`-\"'\"-'/\n             } 6 6 {\n            ==. Y ,==\n              /^^^\\  .\n             /     \\  )  Ncat: A modern interpretation of classic Netcat\n            (  )-(  )/\n            -\"\"---\"\"---   /\n           /   Ncat    \\_/\n          (     ____\n           \\_.=|____E\n```\n\n----------------------------------------\n\nTITLE: Configuring DPDK Packet Capture Support\nDESCRIPTION: Sets up DPDK (Data Plane Development Kit) support if available and not explicitly disabled. Checks for the required API functions, sets appropriate compiler flags, and configures the build environment for DPDK integration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\n# Check for DPDK sniffing support\nif(NOT DISABLE_DPDK)\n    find_package(dpdk)\n    if(dpdk_FOUND)\n        #\n        # We call rte_eth_dev_count_avail(), and older versions of DPDK\n        # didn't have it, so check for it.\n        #\n        cmake_push_check_state()\n        set(CMAKE_REQUIRED_INCLUDES ${dpdk_INCLUDE_DIRS})\n        set(CMAKE_REQUIRED_LIBRARIES ${dpdk_LIBRARIES})\n        check_function_exists(rte_eth_dev_count_avail HAVE_RTE_ETH_DEV_COUNT_AVAIL)\n        cmake_pop_check_state()\n        if(HAVE_RTE_ETH_DEV_COUNT_AVAIL)\n            set(DPDK_C_FLAGS \"-march=native\")\n            set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${DPDK_C_FLAGS}\")\n            include_directories(AFTER ${dpdk_INCLUDE_DIRS})\n            link_directories(AFTER ${dpdk_LIBRARIES})\n            set(PCAP_LINK_LIBRARIES ${PCAP_LINK_LIBRARIES} ${dpdk_LIBRARIES})\n            set(LIBS \"${LIBS} ${dpdk_LIBS}\")\n            set(LIBS_STATIC \"${LIBS_STATIC} ${dpdk_LIBS_STATIC}\")\n            set(REQUIRES_PRIVATE \"${REQUIRES_PRIVATE} ${dpdk_PACKAGE_NAME}\")\n            set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} pcap-dpdk.c)\n            set(PCAP_SUPPORT_DPDK TRUE)\n\n            #\n            # Check whether the rte_ether.h file defines\n            # struct ether_addr or struct rte_ether_addr.\n            #\n            # (\"API compatibility?  That's for losers!\")\n            #\n            cmake_push_check_state()\n            set(CMAKE_REQUIRED_INCLUDES ${dpdk_INCLUDE_DIRS})\n            set(CMAKE_EXTRA_INCLUDE_FILES rte_ether.h)\n            check_type_size(\"struct rte_ether_addr\" STRUCT_RTE_ETHER_ADDR)\n            cmake_pop_check_state()\n        endif()\n    else()\n      message(WARNING,\n\"We couldn't find DPDK with pkg-config.  If you want DPDK support,\nmake sure that pkg-config is installed, that DPDK 18.02.2 or later is\ninstalled, and that DPDK provides a .pc file.\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating Running CRC Value in C\nDESCRIPTION: Defines the `update_crc` function which calculates the CRC-32 for a given block of data (`buf` of length `len`) and updates an existing CRC value (`crc`). It uses the precomputed `crc_table` for efficiency. If the table hasn't been computed yet, it calls `make_crc_table`. The function performs the required pre-inversion (crc ^ 0xffffffffL) and post-inversion (c ^ 0xffffffffL) steps internally. The initial CRC value passed to this function should typically be 0L.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1952.txt#2025-04-23_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n/*\n   Update a running crc with the bytes buf[0..len-1] and return\n the updated crc. The crc should be initialized to zero. Pre- and\n post-conditioning (one's complement) is performed within this\n function so it shouldn't be done by the caller. Usage example:\n\n   unsigned long crc = 0L;\n\n   while (read_buffer(buffer, length) != EOF) {\n     crc = update_crc(crc, buffer, length);\n   }\n   if (crc != original_crc) error();\n*/\nunsigned long update_crc(unsigned long crc,\n                unsigned char *buf, int len)\n{\n  unsigned long c = crc ^ 0xffffffffL;\n  int n;\n\n  if (!crc_table_computed)\n    make_crc_table();\n  for (n = 0; n < len; n++) {\n    c = crc_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);\n  }\n  return c ^ 0xffffffffL;\n}\n```\n\n----------------------------------------\n\nTITLE: Library Path Link Information Macro\nDESCRIPTION: Defines a macro that generates linking flags for libraries based on their paths, handling system and non-system library directories appropriately.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(get_link_info_from_library_path  _library_prefix _library_name)\n  if(NOT ${_library_prefix}_LIBRARY STREQUAL \"${_library_prefix}_LIBRARY-NOTFOUND\")\n    get_filename_component(_lib_directory \"${${_library_prefix}_LIBRARY}}\" DIRECTORY)\n    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES \"${_lib_directory}\" _lib_index)\n    if(_lib_index EQUAL -1)\n      set(${_library_prefix}_LIBS \"-L${_lib_directory}\")\n      set(${_library_prefix}_LIBS_STATIC \"-L${_lib_directory}\")\n      set(${_libraryprefix}_LIBS_PRIVATE \"-L${_lib_directory}\")\n    endif()\n    set(${_library_prefix}_LIBS \"${${_library_prefix}_LIBS} -l${_library_name}\")\n    set(${_library_prefix}_LIBS_STATIC \"${${_library_prefix}_LIBS} -l${_library_name}\")\n    set(${_library_prefix}_LIBS_PRIVATE \"${${_library_prefix}_LIBS} -l${_library_name}\")\n  endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Source Files for LibSSH2 Build\nDESCRIPTION: Includes a transformed Makefile to get the source and header files needed for the build. This extracts 'CSOURCES' and 'HHEADERS' variables from the included file.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GNUInstallDirs)\ntransform_makefile_inc(\"Makefile.inc\" \"${CMAKE_CURRENT_BINARY_DIR}/Makefile.inc.cmake\")\n# Get 'CSOURCES' and 'HHEADERS' variables\ninclude(\"${CMAKE_CURRENT_BINARY_DIR}/Makefile.inc.cmake\")\nset(_sources ${CSOURCES} ${HHEADERS})\n```\n\n----------------------------------------\n\nTITLE: Handling zconf.h for Out-of-Source Builds\nDESCRIPTION: Manages the zconf.h header file for out-of-source builds by renaming any existing file to avoid conflicts with the generated version.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n    # If we're doing an out of source build and the user has a zconf.h\n    # in their source tree...\n    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h)\n        message(STATUS \"Renaming\")\n        message(STATUS \"    ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h\")\n        message(STATUS \"to 'zconf.h.included' because this file is included with zlib\")\n        message(STATUS \"but CMake generates it automatically in the build directory.\")\n        file(RENAME ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.included)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring ZLIB Compression Support in LibSSH2\nDESCRIPTION: Sets up ZLIB compression support as an optional feature. When enabled, it finds the ZLIB package and adds the necessary include directories, libraries, and compile definitions.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\noption(ENABLE_ZLIB_COMPRESSION \"Use zlib for compression\" OFF)\nadd_feature_info(Compression ENABLE_ZLIB_COMPRESSION\n  \"using zlib for compression\")\nif(ENABLE_ZLIB_COMPRESSION)\n  find_package(ZLIB REQUIRED)\n\n  list(APPEND libssh2_INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS})\n  list(APPEND LIBSSH2_LIBS ${ZLIB_LIBRARIES})\n  list(APPEND LIBSSH2_PC_REQUIRES_PRIVATE \"zlib\")\n  if(ZLIB_FOUND)\n    list(APPEND _libssh2_definitions \"LIBSSH2_HAVE_ZLIB\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Assigning Numerical Values to Huffman Codes\nDESCRIPTION: Algorithm for assigning numerical values to all Huffman codes, using consecutive values for codes of the same length with base values determined in the previous step. This is step 3 of the Huffman code generation process.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1951.txt#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nfor (n = 0;  n <= max_code; n++) {\n    len = tree[n].Len;\n    if (len != 0) {\n        tree[n].Code = next_code[len];\n        next_code[len]++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bluetooth Monitor Support Check in C\nDESCRIPTION: C code snippet that checks if HCI_CHANNEL_MONITOR is defined in the Bluetooth headers. This determines if Bluetooth monitor sniffing is supported on the system.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_44\n\nLANGUAGE: c\nCODE:\n```\n#include <bluetooth/bluetooth.h>\n#include <bluetooth/hci.h>\n\nint\nmain(void)\n{\n    int i = HCI_CHANNEL_MONITOR;\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter Method for NpingOps Class in C++\nDESCRIPTION: Template implementation of a setter method for the NpingOps class. The method updates the attribute value, sets the state flag to true, and returns OP_SUCCESS to indicate successful operation.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/pythonscripts/TemplateNpingOps.txt#2025-04-23_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n/** Sets METHNAME.\n *  @return OP_SUCCESS on success and OP_FAILURE in case of error.           */    \nint NpingOps::setMETHNAME(TYPE val){\n    \n    ATTRNAME=val;\n    ATTRNAME_set=true; \n        \n    return OP_SUCCESS;   \n    \n} /* End of setMETHNAME() */\n```\n\n----------------------------------------\n\nTITLE: Configuring CPack Debian Generator Settings (Unix)\nDESCRIPTION: Conditionally configures CPack settings if the build system is Unix. It sets the default CPack generator to `DEB` if not already set, enables automatic shared library dependency detection for Debian packages (`CPACK_DEBIAN_PACKAGE_SHLIBDEPS`), enables stripping of installed files (`CPACK_STRIP_FILES`), and sets the Debian package filename format for newer CMake versions.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX)\n  if(NOT CPACK_GENERATOR)\n    set(CPACK_GENERATOR \"DEB\")\n  endif()\n\n  set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\n  set(CPACK_STRIP_FILES 1)\n  if(${CMAKE_VERSION} VERSION_GREATER \"3.5\")\n    set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Library Variables\nDESCRIPTION: Sets up initial empty variables for various library configurations including PCAP linkage and private requirements.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(PCAP_LINK_LIBRARIES \"\")\nset(LIBS \"\")\nset(LIBS_STATIC \"\")\nset(REQUIRES_PRIVATE \"\")\nset(LIBS_PRIVATE \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring PCRE2 Config File Generation in CMake\nDESCRIPTION: Generates the pcre2-config file from a template using the configured variables.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(pcre2-config.in pcre2-config @ONLY NEWLINE_STYLE LF)\n```\n\n----------------------------------------\n\nTITLE: Flex Scanner Generation Configuration\nDESCRIPTION: Sets up custom commands for generating scanner.c and scanner.h files using Flex/Lex with specific parameters for libpcap.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/scanner.c ${CMAKE_CURRENT_BINARY_DIR}/scanner.h\n    SOURCE ${pcap_SOURCE_DIR}/scanner.l\n    COMMAND ${LEX_EXECUTABLE} -P pcap_ --header-file=scanner.h --nounput -o${CMAKE_CURRENT_BINARY_DIR}/scanner.c ${pcap_SOURCE_DIR}/scanner.l\n    DEPENDS ${pcap_SOURCE_DIR}/scanner.l\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Netfilter Support\nDESCRIPTION: Verifies if the Linux netfilter packet capture mechanism is available by testing if all required headers can be included properly. If available, adds the corresponding source file to the build.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\n    #\n    # Check for netfilter sniffing support.\n    #\n    # Life's too short to deal with trying to get this to compile\n    # if you don't get the right types defined with\n    # __KERNEL_STRICT_NAMES getting defined by some other include.\n    #\n    # Check whether the includes Just Work.  If not, don't turn on\n    # netfilter support.\n    #\n    check_c_source_compiles(\n\"#include <sys/socket.h>\n#include <netinet/in.h>\n#include <linux/types.h>\n\n#include <linux/netlink.h>\n#include <linux/netfilter.h>\n#include <linux/netfilter/nfnetlink.h>\n#include <linux/netfilter/nfnetlink_log.h>\n#include <linux/netfilter/nfnetlink_queue.h>\n\nint\nmain(void)\n{\n    return 0;\n}\n\"\n        PCAP_SUPPORT_NETFILTER)\n    if(PCAP_SUPPORT_NETFILTER)\n        set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} pcap-netfilter-linux.c)\n    endif(PCAP_SUPPORT_NETFILTER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing State Verification Method for NpingOps Class in C++\nDESCRIPTION: Template implementation of a state verification method for the NpingOps class. The method returns a boolean indicating whether the attribute has been explicitly set.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/pythonscripts/TemplateNpingOps.txt#2025-04-23_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n/* Returns true if option has been set */\nbool NpingOps::issetMETHNAME(){\n    \n    return this->ATTRNAME_set;\n    \n} /* End of issetMETHNAME() */\n```\n\n----------------------------------------\n\nTITLE: Using Nmap Script Arguments in Bash\nDESCRIPTION: Example of using --script-args with Nmap, demonstrating the need for improved character handling and error messages.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\n--script-args=smbuser=admin,smbpass=pass^word\n```\n\n----------------------------------------\n\nTITLE: GLib Library License Header in C\nDESCRIPTION: Standard GPL license header for the GLib library, which provides core application building blocks for libraries and applications written in C. The license grants rights to redistribute and modify under LGPL terms.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/* GLIB - Library of useful routines for C programming\n * Copyright (C) 1995-1997  Peter Mattis, Spencer Kimball and Josh MacDonald\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/*\n * Modified by the GLib Team and others 1997-2000.  See the AUTHORS\n * file for a list of people on the GLib Team.  See the ChangeLog\n * files for a list of changes.  These files are distributed with\n * GLib at ftp://ftp.gtk.org/pub/gtk/.\n */\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration\nDESCRIPTION: Handles platform-specific settings for various Unix-like systems including AIX, HP-UX, IRIX, OSF1, Solaris, and Haiku.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_53\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n    set(_SUN TRUE)\n    if(PCAP_TYPE STREQUAL \"bpf\")\n        set(PCAP_LINK_LIBRARIES ${PCAP_LINK_LIBRARIES} odm cfg)\n        set(LIBS \"${LIBS} -lodm -lcfg\")\n        set(LIBS_STATIC \"${LIBS_STATIC} -lodm -lcfg\")\n        set(LIBS_PRIVATE \"${LIBS_PRIVATE} -lodm -lcfg\")\n    endif()\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"HP-UX\")\n    # HP-UX specific configuration\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Haiku\")\n    add_definitions(-D_BSD_SOURCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Non-blocking Socket Support Check for libssh2\nDESCRIPTION: Tests for non-blocking socket support on non-Windows platforms, linking only against the required socket libraries to avoid dependencies on libraries that might not be built yet.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n# Non-blocking socket support tests. Use a separate, yet unset variable\n# for the socket libraries to not link against the other configured\n# dependencies which might not have been built yet.\nif(NOT WIN32)\n  cmake_push_check_state()\n  set(CMAKE_REQUIRED_LIBRARIES ${LIBSSH2_LIBS_SOCKET})\n  check_nonblocking_socket_support()\n  cmake_pop_check_state()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter Method in C++\nDESCRIPTION: Implementation of a getter method that returns the value of a class attribute. Provides read access to the private attribute ATTRNAME.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/pythonscripts/TemplateGettersSetters.txt#2025-04-23_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nTYPE CLASSNAME::getMETHNAME(){\n    return this->ATTRNAME;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Nping Echo Server with Custom Parameters\nDESCRIPTION: Command line syntax for starting Nping in server mode with custom port number and increased verbosity level.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/echo_proposal.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnping --echo-server \"SquemmishOssifrage\" --echo-port 9999 -vvv\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Library Target for LibSSH2\nDESCRIPTION: Sets up the shared library target with appropriate compile definitions, link libraries, and properties. This is only built when BUILD_SHARED_LIBS is enabled. On Windows, it also includes the resource file.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n  list(APPEND _libssh2_export ${LIB_SHARED})\n  add_library(${LIB_SHARED} SHARED ${_sources})\n  add_library(${PROJECT_NAME}::${LIB_SHARED} ALIAS ${LIB_SHARED})\n  if(WIN32)\n    set_property(TARGET ${LIB_SHARED} APPEND PROPERTY SOURCES \"libssh2.rc\")\n  endif()\n  target_compile_definitions(${LIB_SHARED} PRIVATE ${PRIVATE_COMPILE_DEFINITIONS} ${_libssh2_definitions} ${LIB_SHARED_DEFINITIONS})\n  target_compile_options(${LIB_SHARED} PRIVATE ${LIB_SHARED_C_FLAGS})\n  target_link_libraries(${LIB_SHARED} PRIVATE ${LIBSSH2_LIBS})\n  set_target_properties(${LIB_SHARED} PROPERTIES\n    PREFIX \"\" OUTPUT_NAME \"libssh2\" SOVERSION \"${_libssh2_soversion}\" VERSION \"${_libssh2_libversion}\"\n    IMPORT_PREFIX \"\" IMPORT_SUFFIX \"${IMPORT_LIB_SUFFIX}${CMAKE_IMPORT_LIBRARY_SUFFIX}\"\n    POSITION_INDEPENDENT_CODE ON)\n\n  target_include_directories(${LIB_SHARED}\n    PRIVATE\n      \"${PROJECT_SOURCE_DIR}/include\"\n      ${libssh2_INCLUDE_DIRS}\n      ${PRIVATE_INCLUDE_DIRECTORIES}\n    PUBLIC\n      \"$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\"\n      \"$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: PyGObject License Header\nDESCRIPTION: License header for PyGObject library showing copyright information and LGPL license terms.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n# pygobject - Python bindings for the GObject library\n# Copyright (C) 2006-2008 Johan Dahlin\n#\n#   glib/__init__.py: initialisation file for glib module\n#\n# This library is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301\n# USA\n```\n\n----------------------------------------\n\nTITLE: Configuring Man Page Installation Lists in CMake\nDESCRIPTION: Defines various sets of man pages to be installed with the libpcap library. These lists separate man pages into categories based on whether they need expansion of variables and their man section.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_58\n\nLANGUAGE: CMake\nCODE:\n```\nset(MAN1_NOEXPAND pcap-config.1)\nset(MAN3PCAP_EXPAND\n    pcap.3pcap.in\n    pcap_compile.3pcap.in\n    pcap_datalink.3pcap.in\n    pcap_dump_open.3pcap.in\n    pcap_get_tstamp_precision.3pcap.in\n    pcap_list_datalinks.3pcap.in\n    pcap_list_tstamp_types.3pcap.in\n    pcap_open_dead.3pcap.in\n    pcap_open_offline.3pcap.in\n    pcap_set_immediate_mode.3pcap.in\n    pcap_set_tstamp_precision.3pcap.in\n    pcap_set_tstamp_type.3pcap.in\n)\nset(MAN3PCAP_NOEXPAND\n    pcap_activate.3pcap\n    pcap_breakloop.3pcap\n    pcap_can_set_rfmon.3pcap\n    pcap_close.3pcap\n    pcap_create.3pcap\n    pcap_datalink_name_to_val.3pcap\n    pcap_datalink_val_to_name.3pcap\n    pcap_dump.3pcap\n    pcap_dump_close.3pcap\n    pcap_dump_file.3pcap\n    pcap_dump_flush.3pcap\n    pcap_dump_ftell.3pcap\n    pcap_file.3pcap\n    pcap_fileno.3pcap\n    pcap_findalldevs.3pcap\n    pcap_freecode.3pcap\n    pcap_get_required_select_timeout.3pcap\n    pcap_get_selectable_fd.3pcap\n    pcap_geterr.3pcap\n    pcap_init.3pcap\n    pcap_inject.3pcap\n    pcap_is_swapped.3pcap\n    pcap_lib_version.3pcap\n    pcap_lookupdev.3pcap\n    pcap_lookupnet.3pcap\n    pcap_loop.3pcap\n    pcap_major_version.3pcap\n    pcap_next_ex.3pcap\n    pcap_offline_filter.3pcap\n    pcap_open_live.3pcap\n    pcap_set_buffer_size.3pcap\n    pcap_set_datalink.3pcap\n    pcap_set_promisc.3pcap\n    pcap_set_protocol_linux.3pcap\n    pcap_set_rfmon.3pcap\n    pcap_set_snaplen.3pcap\n    pcap_set_timeout.3pcap\n    pcap_setdirection.3pcap\n    pcap_setfilter.3pcap\n    pcap_setnonblock.3pcap\n    pcap_snapshot.3pcap\n    pcap_stats.3pcap\n    pcap_statustostr.3pcap\n    pcap_strerror.3pcap\n    pcap_tstamp_type_name_to_val.3pcap\n    pcap_tstamp_type_val_to_name.3pcap\n)\nset(MANFILE_EXPAND\n    pcap-savefile.manfile.in\n)\nset(MANMISC_EXPAND\n    pcap-filter.manmisc.in\n    pcap-linktype.manmisc.in\n    pcap-tstamp.manmisc.in\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Library Settings\nDESCRIPTION: Sets platform-specific library properties, such as output names and link flags for UNIX and Windows platforms.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX)\n    # On unix-like platforms the library is almost always called libz\n   set_target_properties(zlib zlibstatic PROPERTIES OUTPUT_NAME z)\n   if(NOT APPLE AND NOT(CMAKE_SYSTEM_NAME STREQUAL AIX))\n     set_target_properties(zlib PROPERTIES LINK_FLAGS \"-Wl,--version-script,\\\"${CMAKE_CURRENT_SOURCE_DIR}/zlib.map\\\"\")\n   endif()\nelseif(BUILD_SHARED_LIBS AND WIN32)\n    # Creates zlib1.dll when building shared library version\n    set_target_properties(zlib PROPERTIES SUFFIX \"1.dll\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Illustrating Script Arguments Issue in Output Files\nDESCRIPTION: Example showing how multiple comma-separated script arguments are lost in the Nmap command representation in output files. Only the first argument is preserved while subsequent arguments are omitted.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n# Nmap 4.85BETA4 scan initiated Thu Mar 26 15:40:05 2009 as: ./nmap -oN - --script=discovery scanme.nmap.org\n```\n\n----------------------------------------\n\nTITLE: MSVC Static Runtime Configuration\nDESCRIPTION: Configures MSVC compiler flags to use static runtime library when PCRE2_STATIC_RUNTIME is enabled. Modifies various compiler flag variables.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC AND PCRE2_STATIC_RUNTIME)\n  message(STATUS \"** MSVC and PCRE2_STATIC_RUNTIME: modifying compiler flags to use static runtime library\")\n  foreach(\n    flag_var\n    CMAKE_C_FLAGS\n    CMAKE_C_FLAGS_DEBUG\n    CMAKE_C_FLAGS_RELEASE\n    CMAKE_C_FLAGS_MINSIZEREL\n    CMAKE_C_FLAGS_RELWITHDEBINFO\n  )\n    string(REGEX REPLACE \"/MD\" \"/MT\" ${flag_var} \"${${flag_var}}\")\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Link-Time Dependency and Variable Assignment for PCRE2 Tools - CMake\nDESCRIPTION: This block sets up variables to link the appropriate libraries to PCRE2 sub-tools (like pcre2test, pcre2grep), checking which optional dependencies are enabled and setting per-tool linker lists. This is required for the correct build of executables depending on third-party libraries. Modification must happen before the targets' add_executable or add_library commands.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(PCRE2_SUPPORT_LIBREADLINE)\n  set(SUPPORT_LIBREADLINE 1)\n  set(PCRE2TEST_LIBS ${READLINE_LIBRARY} ${NCURSES_LIBRARY})\nendif()\n\n# libedit is a plug-compatible alternative to libreadline\n\nif(PCRE2_SUPPORT_LIBEDIT)\n  set(SUPPORT_LIBEDIT 1)\n  set(PCRE2TEST_LIBS ${EDITLINE_LIBRARY})\nendif()\n\nif(PCRE2_SUPPORT_LIBZ)\n  set(SUPPORT_LIBZ 1)\n  set(PCRE2GREP_LIBS ${PCRE2GREP_LIBS} ${ZLIB_LIBRARIES})\nendif()\n\nif(PCRE2_SUPPORT_LIBBZ2)\n  set(SUPPORT_LIBBZ2 1)\n  set(PCRE2GREP_LIBS ${PCRE2GREP_LIBS} ${BZIP2_LIBRARIES})\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Including CPack Module in CMake\nDESCRIPTION: Includes the standard CMake `CPack` module. This command enables CPack functionality, allowing the generation of installers or source packages based on the CPack variables set previously (e.g., generator type, package information).\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Invoking JDWP Object Method in Lua\nDESCRIPTION: Lua code snippet demonstrating how to create a string, pack arguments with type tags, and invoke a method via JDWP. Shows the process of passing arguments to the run() method of an injected class.\nSOURCE: https://github.com/nmap/nmap/blob/master/nselib/data/jdwp-class/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal cmdID\nstatus,cmdID = jdwp.createString(socket,0,cmd)\nlocal runArgs = string.pack(\">B I8\", 0x4c, cmdID) -- 0x4c is object type tag\n-- invoke run method\nlocal result\nstatus, result = jdwp.invokeObjectMethod(socket,0,injectedClass.instance,injectedClass.thread,injectedClass.id,runMethodID,1,runArgs)\n```\n\n----------------------------------------\n\nTITLE: Creating Uninstall Target for libpcap in CMake\nDESCRIPTION: Generates an uninstall target for libpcap, allowing easy removal of installed files. This is useful for package maintainers and developers.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_64\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY)\n\nadd_custom_target(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Version Detection String Length Issue\nDESCRIPTION: Example of a version detection string that exceeds the current 128 character limit, showing the need for increased string length capacity to preserve complete server information.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n\"Apache httpd 2.0.52 ((Red Hat) mod_perl/1.99_16 Perl/v5.8.5 DAV/2 mod_jk/1.2.19 PHP/4.3.9 mod_python/3.1.3 Python/2.3.4 mod_ssl/2.0.52 OpenSSL/0.9.7a)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Library File Naming for LibSSH2\nDESCRIPTION: Ensures that static and import library filenames are different when building both library types. This is primarily to handle Windows platforms where libraries might otherwise have the same filename.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Ensure that the static library and import library filenames are different,\n# when building both static and shared library. On Windows, with certain\n# toolchains (e.g. MSVC) these libraries get the same by default, overwriting\n# each other. MinGW is not affected.\nif(WIN32 AND BUILD_STATIC_LIBS AND BUILD_SHARED_LIBS AND\n   NOT STATIC_LIB_SUFFIX AND NOT IMPORT_LIB_SUFFIX AND\n   CMAKE_STATIC_LIBRARY_SUFFIX STREQUAL CMAKE_IMPORT_LIBRARY_SUFFIX)\n  set(STATIC_LIB_SUFFIX \"_static\")\nendif()\n\nunset(_libssh2_export)\n```\n\n----------------------------------------\n\nTITLE: Nsock Debug Output Showing Excessive wait_for_events Messages\nDESCRIPTION: Example of verbose nsock debug output with --version-trace showing repetitive wait_for_events messages that flood the logs, making the trace output hard to read and less useful.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nNSOCK (22.3570s) Callback: WRITE SUCCESS for EID 283 [74.125.19.147:443]\nNSOCK (22.3570s) msevent_delete (IOD #4) (EID #283)\nNSOCK (22.3570s) wait_for_events\nNSOCK (22.3570s) wait_for_events\nNSOCK (22.3570s) wait_for_events\nNSOCK (22.3570s) wait_for_events\nNSOCK (22.3570s) wait_for_events\nNSOCK (22.3570s) wait_for_events\nNSOCK (22.3570s) wait_for_events\nNSOCK (22.3570s) wait_for_events\nNSOCK (22.3570s) wait_for_events\n```\n\n----------------------------------------\n\nTITLE: Defining Method Prototypes for NpingOps Class in C++\nDESCRIPTION: Template for declaring setter, getter, and state verification method prototypes in the NpingOps class. These methods follow a naming convention where METHNAME is replaced with the actual attribute name and TYPE is replaced with the attribute's data type.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/pythonscripts/TemplateNpingOps.txt#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nint setMETHNAME(TYPE val);\nTYPE getMETHNAME();\nbool issetMETHNAME();\n```\n\n----------------------------------------\n\nTITLE: Reentrant Network Function Detection\nDESCRIPTION: Tests for reentrant versions of network functions like getnetbyname_r and getprotobyname_r across different platform implementations.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_push_check_state()\nset(CMAKE_REQUIRED_LIBRARIES ${PCAP_LINK_LIBRARIES})\ncheck_symbol_exists(getnetbyname_r netdb.h NETDB_H_DECLARES_GETNETBYNAME_R)\nif(NETDB_H_DECLARES_GETNETBYNAME_R)\n    check_c_source_compiles(\n\"#include <netdb.h>\n\nint\nmain(void)\n{\n    struct netent netent_buf;\n    char buf[1024];\n    struct netent *resultp;\n    int h_errnoval;\n\n    return getnetbyname_r((const char *)0, &netent_buf, buf, sizeof buf, &resultp, &h_errnoval);\n}\"\n        HAVE_LINUX_GETNETBYNAME_R)\nendif(NETDB_H_DECLARES_GETNETBYNAME_R)\ncmake_pop_check_state()\n```\n\n----------------------------------------\n\nTITLE: Configuring Deprecated API Support for libssh2\nDESCRIPTION: Adds an option to build libssh2 without deprecated APIs, which when enabled adds the LIBSSH2_NO_DEPRECATED definition to exclude deprecated code.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\noption(LIBSSH2_NO_DEPRECATED \"Build without deprecated APIs\" OFF)\nadd_feature_info(\"Without deprecated APIs\" LIBSSH2_NO_DEPRECATED \"\")\nif(LIBSSH2_NO_DEPRECATED)\n  add_definitions(\"-DLIBSSH2_NO_DEPRECATED\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory in CMake\nDESCRIPTION: Sets the `CMAKE_RUNTIME_OUTPUT_DIRECTORY` variable to point to a 'run' subdirectory within the top-level binary directory (`CMAKE_BINARY_DIR`). This configuration ensures that all executable files (runtime artifacts) generated during the build are placed in this specific directory. This is particularly helpful on Windows, as it keeps executables and their required DLLs (like pcap.dll) together, simplifying execution.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Build all runtimes in the top-level binary directory; that way,\n# on Windows, the executables will be in the same directory as\n# the DLLs, so the system will find pcap.dll when any of the\n# executables are run.\n#\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/run)\n```\n\n----------------------------------------\n\nTITLE: AES CBC Encryption Memory Access Suppression\nDESCRIPTION: Valgrind suppression rule to ignore 8-byte memory access warnings from AES_cbc_encrypt function calls. Multiple variations are defined to cover different call stack depths.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/valgrind_supress.txt#2025-04-23_snippet_0\n\nLANGUAGE: valgrind\nCODE:\n```\n{\n   <SUPPRESSION_AES_cbc_encrypt>\n   Memcheck:Addr8\n   fun:AES_cbc_encrypt\n   obj:*\n}\n```\n\n----------------------------------------\n\nTITLE: Testing for C Compiler Attribute Support in PCRE2\nDESCRIPTION: Checks if the compiler supports the uninitialized attribute and visibility control attributes for symbol export, which are used for performance and API management.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_c_source_compiles(\n  \"int main(void) { char buf[128] __attribute__((uninitialized)); (void)buf; return 0; }\"\n  HAVE_ATTRIBUTE_UNINITIALIZED\n)\n\ncheck_c_source_compiles(\n  [=[\n  extern __attribute__ ((visibility (\"default\"))) int f(void);\n  int main(void) { return f(); }\n  int f(void) { return 42; }\n  ]=]\n  HAVE_VISIBILITY\n)\n```\n\n----------------------------------------\n\nTITLE: OpenSSL License Text Declaration\nDESCRIPTION: Copyright and license text for the OpenSSL Project defining the terms and conditions for redistribution and use of the OpenSSL toolkit. It specifies six conditions along with warranty disclaimers and liability limitations.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/licenses/OpenSSL-license.txt#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2016 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\"\n *\n * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    openssl-core@openssl.org.\n *\n * 5. Products derived from this software may not be called \"OpenSSL\"\n *    nor may \"OpenSSL\" appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\"\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Path and Including Directories\nDESCRIPTION: Configures the CMake module path to include custom modules from the project's cmake directory and sets up the include directories for source files.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n\ninclude_directories(${PROJECT_SOURCE_DIR}/src)\n```\n\n----------------------------------------\n\nTITLE: Configuring MSYS-Specific Test Commands in CMake\nDESCRIPTION: Adds MSYS-specific test commands for running both shell script and batch file versions of PCRE2 tests in MSYS environments.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\n    if(\"$ENV{OSTYPE}\" STREQUAL \"msys\")\n      # Both the sh and bat file versions of RunTest are run if make test is used\n      # in msys\n      add_test(pcre2_test_sh sh.exe ${PROJECT_BINARY_DIR}/pcre2_test.sh)\n      if(PCRE2_BUILD_PCRE2GREP)\n        add_test(pcre2_grep_test sh.exe ${PROJECT_BINARY_DIR}/pcre2_grep_test.sh)\n      endif()\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Macro to Check and Add Compiler Option\nDESCRIPTION: Defines a CMake macro `check_and_add_compiler_option` that checks if a given C compiler flag (`_option`) is supported using `check_c_compiler_flag`. If the flag works, it's appended to the `C_ADDITIONAL_FLAGS` variable. This allows adding optional compiler flags safely without breaking the build if the flag is unsupported.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckCCompilerFlag)\n\n#\n# For checking if a compiler flag works and adding it if it does.\n#\nmacro(check_and_add_compiler_option _option)\n    message(STATUS \"Checking C compiler flag ${_option}\")\n    string(REPLACE \"=\" \"-\" _temp_option_variable ${_option})\n    string(REGEX REPLACE \"^-\" \"\" _option_variable ${_temp_option_variable})\n    check_c_compiler_flag(\"${_option}\" ${_option_variable})\n    if(${${_option_variable}})\n        set(C_ADDITIONAL_FLAGS \"${C_ADDITIONAL_FLAGS} ${_option}\")\n    endif()\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: SVN Path Configuration\nDESCRIPTION: Command to update the PATH variable to use the correct SVN version.\nSOURCE: https://github.com/nmap/nmap/blob/master/macosx/BUNDLING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export PATH=/opt/subversion/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Installation for libssh2\nDESCRIPTION: Configures the installation of documentation files including COPYING, NEWS, README, and other documentation to the specified documentation directory.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GNUInstallDirs)\ninstall(\n  FILES\n    COPYING NEWS README RELEASE-NOTES\n    docs/AUTHORS docs/BINDINGS.md docs/HACKING.md\n  DESTINATION ${CMAKE_INSTALL_DOCDIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Error Detection\nDESCRIPTION: Saves original compiler flags and conditionally adds -Werror for compilers that support it (excluding MSVC and XL) to ensure compiler warnings are treated as errors during feature checks.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(ORIG_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})\nif(NOT MSVC AND NOT CMAKE_C_COMPILER_ID STREQUAL \"XL\")\n  set(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -Werror\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: NEP Protocol Flow Diagram - Normal Session\nDESCRIPTION: ASCII art diagram showing the typical message flow between client and server in a successful NEP session, including handshake, packet specification, and echo messages.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/EchoProtoRFC.txt#2025-04-23_snippet_8\n\nLANGUAGE: ascii-art\nCODE:\n```\n         +------+                +------+\n         |CLIENT|                |SERVER|\n         +------+                +------+\n            |                       |\n            | NEP_HANDSHAKE_SERVER  |\n            |<<---------------------|\n            |                       |\n            |                       |\n            | NEP_HANDSHAKE_CLIENT  |\n            |--------------------->>|\n            |                       |\n            |                       |\n            |  NEP_HANDSHAKE_FINAL  |\n            |<<---------------------|\n            |                       |\n            |                       |\n            |                       |\n            |    NEP_PACKET_SPEC    |\n            |--------------------->>|\n            |                       |\n            |                       |\n            |                       |\n            |       NEP_READY       |\n            |<<---------------------|\n            |                       |\n            |                       |\n            |                       |\n            |                       |\n            |       NEP_ECHO        |\n            |<<---------------------|\n            |                       |\n            |       NEP_ECHO        |\n            |<<---------------------|\n            |                       |\n            |       NEP_ECHO        |\n            |<<---------------------|\n            |         .             |\n            |         .             |\n            |         .             |\n            |       NEP_ECHO        |\n            |<<---------------------|\n            |                       |\n            |                       |\n            |                       |\n            |  TCP Connection Close |\n            |<<------------------->>|\n```\n\n----------------------------------------\n\nTITLE: Investigating GCC 4.1.2 Compiler Warnings in Nping\nDESCRIPTION: This text snippet shows compiler warnings generated by an older GCC version (g++ 4.1.2 on Red Hat) when building Nping. The warnings highlight potential issues in `ARPHeader.h` and `RawData.h` where classes have virtual functions but non-virtual destructors. These warnings need investigation to ensure code correctness and potentially improve compatibility with older compilers.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/nping.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nARPHeader.h:169: warning: ‘class ARPHeader’ has virtual functions but\n  non-virtual destructor\nRawData.h:99: warning: ‘class RawData’ has virtual functions but\n  non-virtual destructor\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Variable Dump Function for libssh2\nDESCRIPTION: Implements a utility function to dump all defined CMake variables with their values, helpful for debugging build issues and inspecting configuration state.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(libssh2_dumpvars)  # Dump all defined variables with their values\n  message(\"::group::CMake Variable Dump\")\n  get_cmake_property(_vars VARIABLES)\n  foreach(_var ${_vars})\n    message(\"${_var} = ${${_var}}\")\n  endforeach()\n  message(\"::endgroup::\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Building OpenSSL Dependencies with Jhbuild for Nmap\nDESCRIPTION: Command to build the OpenSSL dependencies required for Nmap, Ncat, and Nping using Jhbuild moduleset. This builds all necessary dependencies before compiling Nmap itself.\nSOURCE: https://github.com/nmap/nmap/blob/master/macosx/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ jhbuild -m openssl.modules build nmap-deps\n```\n\n----------------------------------------\n\nTITLE: Illustrating DocBook Stylesheet Bug with indexterm\nDESCRIPTION: These XML snippets illustrate a bug in DocBook stylesheets affecting nroff (man page) rendering. When an <indexterm> element is immediately followed by non-whitespace characters (like a comma) or another element without intervening whitespace and CDATA, the subsequent text or element gets commented out in the nroff output. This was causing issues with Nmap's man page generation.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<indexterm>blah</indexterm> is  ok\n<indexterm>blah</indexterm>, is not ok because of the comma\n<indexterm>blah</indexterm>   <command>nmap -A</command> is bad no matter how much whitespace intervenes\n```\n\n----------------------------------------\n\nTITLE: Configuring Symbol Visibility for PCRE2 Exports\nDESCRIPTION: Sets up the PCRE2_EXPORT macro based on whether the compiler supports symbol visibility attributes. This controls how functions are exported from the library.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(HAVE_VISIBILITY)\n  set(PCRE2_EXPORT [=[__attribute__ ((visibility (\"default\")))]=])\nelse()\n  set(PCRE2_EXPORT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories in CMake\nDESCRIPTION: Specifies the include directories for the CMake target defined by `${PROJECT_NAME}`. It adds directories from the source tree, binary tree, and defines install interface paths for includes, ensuring headers are found during both build and after installation.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${PROJECT_NAME} PUBLIC\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n    $<INSTALL_INTERFACE:include>\n    $<INSTALL_INTERFACE:include/dnet>\n)\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules for libssh2 Build\nDESCRIPTION: Includes both standard CMake modules and custom modules needed for the libssh2 build process, such as function existence checks and non-blocking socket support verification.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckFunctionExists)\ninclude(CheckSymbolExists)\ninclude(CheckIncludeFiles)\ninclude(CMakePushCheckState)\ninclude(FeatureSummary)\n\ninclude(CheckFunctionExistsMayNeedLibrary)\ninclude(CheckNonblockingSocketSupport)\n\nproject(libssh2 C)\n```\n\n----------------------------------------\n\nTITLE: Testing for Compiler-Specific Builtin Functions\nDESCRIPTION: Checks for compiler-specific built-in functions like __assume, overflow detection, and unreachable code marking that can optimize PCRE2 performance.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_c_source_compiles(\"int main(void) { __assume(1); return 0; }\" HAVE_BUILTIN_ASSUME)\n\ncheck_c_source_compiles(\n  [=[\n  #include <stddef.h>\n  int main(void) { int a,b; size_t m; __builtin_mul_overflow(a,b,&m); return 0; }\n  ]=]\n  HAVE_BUILTIN_MUL_OVERFLOW\n)\n\ncheck_c_source_compiles(\n  \"int main(int c, char *v[]) { if (c) __builtin_unreachable(); return (int)(*v[0]); }\"\n  HAVE_BUILTIN_UNREACHABLE\n)\n```\n\n----------------------------------------\n\nTITLE: Generating PCRE2 Test Shell Script in CMake\nDESCRIPTION: Creates a shell script for running PCRE2 tests on Unix systems, setting up the correct paths to test executables and test scripts.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\n  file(\n    WRITE\n    ${PROJECT_BINARY_DIR}/pcre2_test.sh\n    \"#! /bin/sh\n# This is a generated file.\nsrcdir=${PROJECT_SOURCE_DIR}\npcre2test=${PROJECT_BINARY_DIR}/pcre2test\ntest -z \\\"$CMAKE_CONFIG_TYPE\\\" || pcre2test=${PROJECT_BINARY_DIR}/$CMAKE_CONFIG_TYPE/pcre2test\n. ${PROJECT_SOURCE_DIR}/RunTest\nif test \\\"$?\\\" != \\\"0\\\"; then exit 1; fi\n# End\n\"\n  )\n\n  if(UNIX)\n    add_test(pcre2_test sh ${PROJECT_BINARY_DIR}/pcre2_test.sh)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring AirPcap Support in CMake\nDESCRIPTION: Checks for and configures Riverbed AirPcap support by finding required headers and libraries. If found, adds necessary include directories and source files.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DISABLE_AIRPCAP)\n    find_package(AirPcap)\n    if(AirPcap_FOUND)\n        include_directories(AFTER ${AirPcap_INCLUDE_DIRS})\n        set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} pcap-airpcap.c)\n        set(HAVE_AIRPCAP_API TRUE)\n        set(PCAP_LINK_LIBRARIES ${PCAP_LINK_LIBRARIES} ${AirPcap_LIBRARIES})\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings for MSVC Compiler in CMake\nDESCRIPTION: Checks if the Microsoft Visual C++ (MSVC) compiler is being used. It enforces a minimum requirement of Visual Studio 2015 (MSVC_VERSION >= 1900) due to C99 compatibility needs, issuing a fatal error if the version is older. It also adds the `/utf-8` flag to `C_ADDITIONAL_FLAGS` if the MSVC compiler is not using the Clang front-end, ensuring source files are interpreted as UTF-8.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# If we're building with Visual Studio, we require Visual Studio 2015,\n# in order to get sufficient C99 compatibility.  Check for that.\n#\n# If not, try the appropriate flag for the compiler to enable C99\n# features.\n#\nset(C_ADDITIONAL_FLAGS \"\")\nif(MSVC)\n    if(MSVC_VERSION LESS 1900)\n        message(FATAL_ERROR \"Visual Studio 2015 or later is required\")\n    endif()\n\n    #\n    # Treat source files as being in UTF-8 with MSVC if it's not using\n    # the Clang front end.\n    # We assume that UTF-8 source is OK with other compilers and with\n    # MSVC if it's using the Clang front end.\n    #\n    if(NOT ${CMAKE_C_COMPILER} MATCHES \"clang*\")\n        set(C_ADDITIONAL_FLAGS \"${C_ADDITIONAL_FLAGS} /utf-8\")\n    endif(NOT ${CMAKE_C_COMPILER} MATCHES \"clang*\")\n```\n\n----------------------------------------\n\nTITLE: Generating PCRE2GREP Test Shell Script in CMake\nDESCRIPTION: Creates a shell script for testing the pcre2grep utility on Unix systems if it is being built.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\n  if(PCRE2_BUILD_PCRE2GREP)\n    file(\n      WRITE\n      ${PROJECT_BINARY_DIR}/pcre2_grep_test.sh\n      \"#! /bin/sh\n# This is a generated file.\nsrcdir=${PROJECT_SOURCE_DIR}\npcre2grep=${PROJECT_BINARY_DIR}/pcre2grep\ntest -z \\\"$CMAKE_CONFIG_TYPE\\\" || pcre2grep=${PROJECT_BINARY_DIR}/$CMAKE_CONFIG_TYPE/pcre2grep\npcre2test=${PROJECT_BINARY_DIR}/pcre2test\ntest -z \\\"$CMAKE_CONFIG_TYPE\\\" || pcre2test=${PROJECT_BINARY_DIR}/$CMAKE_CONFIG_TYPE/pcre2test\n. ${PROJECT_SOURCE_DIR}/RunGrepTest\nif test \\\"$?\\\" != \\\"0\\\"; then exit 1; fi\n# End\n\"\n    )\n\n    if(UNIX)\n      add_test(pcre2_grep_test sh ${PROJECT_BINARY_DIR}/pcre2_grep_test.sh)\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Generating CMake Package Version Configuration File\nDESCRIPTION: Uses `configure_file` to generate a `${PROJECT_NAME}ConfigVersion.cmake` file from the template `${PROJECT_NAME}-config-version.cmake.in`. This file typically contains version information used by `find_package` to check compatibility. The generated file is placed in the build directory.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}-config-version.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n    @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Checking for ether_hostton function across Unix variants in CMake\nDESCRIPTION: Performs a series of checks to determine if ether_hostton() is available and in which header file it's declared. This handles the variability of Ethernet function declarations across different Unix systems.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_push_check_state()\nset(CMAKE_REQUIRED_LIBRARIES ${PCAP_LINK_LIBRARIES})\ncheck_function_exists(ether_hostton HAVE_ETHER_HOSTTON)\nif(HAVE_ETHER_HOSTTON)\n    #\n    # OK, we have ether_hostton().  Is it declared in <net/ethernet.h>?\n    #\n    # This test fails if we don't have <net/ethernet.h> or if we do\n    # but it doesn't declare ether_hostton().\n    #\n    check_symbol_exists(ether_hostton net/ethernet.h NET_ETHERNET_H_DECLARES_ETHER_HOSTTON)\n    if(NET_ETHERNET_H_DECLARES_ETHER_HOSTTON)\n        #\n        # Yes - we have it declared.\n        #\n        set(HAVE_DECL_ETHER_HOSTTON TRUE)\n    endif()\n    #\n    # Did that succeed?\n    #\n    if(NOT HAVE_DECL_ETHER_HOSTTON)\n        #\n        # No - how about <netinet/ether.h>, as on Linux?\n        #\n        # This test fails if we don't have <netinet/ether.h>\n        # or if we do but it doesn't declare ether_hostton().\n        #\n        check_symbol_exists(ether_hostton netinet/ether.h NETINET_ETHER_H_DECLARES_ETHER_HOSTTON)\n        if(NETINET_ETHER_H_DECLARES_ETHER_HOSTTON)\n            #\n            # Yes - we have it declared.\n            #\n            set(HAVE_DECL_ETHER_HOSTTON TRUE)\n        endif()\n    endif()\n    #\n    # Did that succeed?\n    #\n    if(NOT HAVE_DECL_ETHER_HOSTTON)\n        #\n        # No - how about <sys/ethernet.h>, as on Solaris 10 and later?\n        #\n        # This test fails if we don't have <sys/ethernet.h>\n        # or if we do but it doesn't declare ether_hostton().\n        #\n        check_symbol_exists(ether_hostton sys/ethernet.h SYS_ETHERNET_H_DECLARES_ETHER_HOSTTON)\n        if(SYS_ETHERNET_H_DECLARES_ETHER_HOSTTON)\n            #\n            # Yes - we have it declared.\n            #\n            set(HAVE_DECL_ETHER_HOSTTON TRUE)\n        endif()\n    endif()\n    #\n    # Did that succeed?\n    #\n    if(NOT HAVE_DECL_ETHER_HOSTTON)\n        #\n        # No, how about <arpa/inet.h>, as on AIX?\n        #\n        # This test fails if we don't have <arpa/inet.h>\n        # or if we do but it doesn't declare ether_hostton().\n        #\n        check_symbol_exists(ether_hostton arpa/inet.h ARPA_INET_H_DECLARES_ETHER_HOSTTON)\n        if(ARPA_INET_H_DECLARES_ETHER_HOSTTON)\n            #\n            # Yes - we have it declared.\n            #\n            set(HAVE_DECL_ETHER_HOSTTON TRUE)\n        endif()\n    endif()\n    #\n    # Did that succeed?\n    #\n    if(NOT HAVE_DECL_ETHER_HOSTTON)\n        #\n        # No, how about <netinet/if_ether.h>?\n        # On some platforms, it requires <net/if.h> and\n        # <netinet/in.h>, and we always include it with\n        # both of them, so test it with both of them.\n        #\n        # This test fails if we don't have <netinet/if_ether.h>\n        # and the headers we include before it, or if we do but\n        # <netinet/if_ether.h> doesn't declare ether_hostton().\n        #\n        check_symbol_exists(ether_hostton \"sys/types.h;sys/socket.h;net/if.h;netinet/in.h;netinet/if_ether.h\" NETINET_IF_ETHER_H_DECLARES_ETHER_HOSTTON)\n        if(NETINET_IF_ETHER_H_DECLARES_ETHER_HOSTTON)\n            #\n            # Yes - we have it declared.\n            #\n            set(HAVE_DECL_ETHER_HOSTTON TRUE)\n        endif()\n    endif()\n    #\n    # After all that, is ether_hostton() declared?\n    #\n    if(NOT HAVE_DECL_ETHER_HOSTTON)\n        #\n        # No, we'll have to declare it ourselves.\n        # Do we have \"struct ether_addr\" if we include <netinet/if_ether.h>?\n        #\n        # XXX - there's no check_type() macro that's like check_type_size()\n        # except that it only checks for the existence of the structure type,\n        # so we use check_type_size() and ignore the size.\n        #\n        cmake_push_check_state()\n        set(CMAKE_EXTRA_INCLUDE_FILES sys/types.h sys/socket.h net/if.h netinet/in.h netinet/if_ether.h)\n        check_type_size(\"struct ether_addr\" STRUCT_ETHER_ADDR)\n        cmake_pop_check_state()\n    endif()\nendif()\ncmake_pop_check_state()\n```\n\n----------------------------------------\n\nTITLE: Configuring PCRE2 CMake Integration Files Installation in CMake\nDESCRIPTION: Generates and installs CMake configuration files to allow other projects to find and use PCRE2 via CMake's find_package mechanism.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\n# CMake config files.\nset(PCRE2_CONFIG_IN ${CMAKE_CURRENT_SOURCE_DIR}/cmake/pcre2-config.cmake.in)\nset(PCRE2_CONFIG_OUT ${CMAKE_CURRENT_BINARY_DIR}/cmake/pcre2-config.cmake)\nconfigure_file(${PCRE2_CONFIG_IN} ${PCRE2_CONFIG_OUT} @ONLY)\nset(PCRE2_CONFIG_VERSION_IN ${CMAKE_CURRENT_SOURCE_DIR}/cmake/pcre2-config-version.cmake.in)\nset(PCRE2_CONFIG_VERSION_OUT ${CMAKE_CURRENT_BINARY_DIR}/cmake/pcre2-config-version.cmake)\nconfigure_file(${PCRE2_CONFIG_VERSION_IN} ${PCRE2_CONFIG_VERSION_OUT} @ONLY)\ninstall(FILES ${PCRE2_CONFIG_OUT} ${PCRE2_CONFIG_VERSION_OUT} DESTINATION \"${PCRE2_INSTALL_CMAKEDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring PCRE2 Installation Targets in CMake\nDESCRIPTION: Sets up installation rules for PCRE2 binaries, libraries, headers, and documentation files for all supported platforms.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\n# Installation\n\nset(CMAKE_INSTALL_ALWAYS 1)\n\ninstall(\n  TARGETS ${TARGETS}\n  RUNTIME DESTINATION bin\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\ninstall(FILES ${pkg_config_files} DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\ninstall(\n  FILES \"${CMAKE_CURRENT_BINARY_DIR}/pcre2-config\"\n  DESTINATION bin\n  # Set 0755 permissions\n  PERMISSIONS OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n)\n\ninstall(FILES ${PCRE2_HEADERS} ${PCRE2POSIX_HEADERS} DESTINATION include)\n```\n\n----------------------------------------\n\nTITLE: Configuring PCRE2 Package Version and Path Variables in CMake\nDESCRIPTION: Sets up package version and directory path variables for PCRE2 pkg-config files. It defines installation paths and conditionally applies debug postfix for Windows builds.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nset(PACKAGE_VERSION \"${PCRE2_MAJOR}.${PCRE2_MINOR}\")\nset(prefix ${CMAKE_INSTALL_PREFIX})\nset(exec_prefix \"\\${prefix}\")\nset(libdir \"\\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}\")\nset(includedir \"\\${prefix}/include\")\nif(WIN32 AND (CMAKE_BUILD_TYPE MATCHES Debug))\n  set(LIB_POSTFIX ${CMAKE_DEBUG_POSTFIX})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing libpcap Man Pages with CMake\nDESCRIPTION: Configures and installs man pages for libpcap, including expanding templates and creating symlinks for related pages. This ensures proper documentation is available after installation.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_63\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX OR (MINGW AND LINK_EXECUTABLE))\n    set(MAN1 \"\")\n    foreach(MANPAGE ${MAN1_NOEXPAND})\n        set(MAN1 ${MAN1} ${CMAKE_CURRENT_SOURCE_DIR}/${MANPAGE})\n    endforeach(MANPAGE)\n    install(FILES ${MAN1} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)\n\n    set(MAN3PCAP \"\")\n    foreach(MANPAGE ${MAN3PCAP_NOEXPAND})\n        set(MAN3PCAP ${MAN3PCAP} ${CMAKE_CURRENT_SOURCE_DIR}/${MANPAGE})\n    endforeach(MANPAGE)\n    foreach(TEMPLATE_MANPAGE ${MAN3PCAP_EXPAND})\n        string(REPLACE \".in\" \"\" MANPAGE ${TEMPLATE_MANPAGE})\n        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${TEMPLATE_MANPAGE} ${CMAKE_CURRENT_BINARY_DIR}/${MANPAGE} @ONLY)\n        set(MAN3PCAP ${MAN3PCAP} ${CMAKE_CURRENT_BINARY_DIR}/${MANPAGE})\n    endforeach(TEMPLATE_MANPAGE)\n    install(FILES ${MAN3PCAP} DESTINATION ${CMAKE_INSTALL_MANDIR}/man3)\n    install_manpage_symlink(pcap_datalink_val_to_name.3pcap pcap_datalink_val_to_description.3pcap ${CMAKE_INSTALL_MANDIR}/man3)\n    # ... (more symlink installations)\nendif(UNIX OR (MINGW AND LINK_EXECUTABLE))\n```\n\n----------------------------------------\n\nTITLE: Checking CET Support and Compilability - CMake/C\nDESCRIPTION: This code snippet checks if CET (Control-flow Enforcement Technology) is enabled in the C compiler by attempting to compile a small C source buffer that requires the __CET__ macro definition. If the compilation test passes, the CMake variable INTEL_CET_ENABLED is set, and additional compiler flags are appended. Relies on CMake's check_c_source_compiles function and proper CMake toolchain setup. Input is a code block as a string, output is a cache variable.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_c_source_compiles(\n  [=[\n  #ifndef __CET__\n  #error CET is not enabled\n  #endif\n  int main() { return 0; }\n  ]=]\n  INTEL_CET_ENABLED\n)\n\nif(INTEL_CET_ENABLED)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mshstk\")\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Creating Library Aliases for LibSSH2\nDESCRIPTION: Creates library aliases for more convenient target referencing in dependent projects.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PROJECT_NAME}::${LIB_NAME} ALIAS ${LIB_SELECTED})\nadd_library(${LIB_NAME} ALIAS ${LIB_SELECTED})\n```\n\n----------------------------------------\n\nTITLE: Adding Direct Test Commands for PCRE2 JIT and POSIX Tests in CMake\nDESCRIPTION: Adds direct test commands for JIT and POSIX API tests without using shell or batch scripts.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\n  # Changed to accommodate testing whichever location was just built\n\n  if(PCRE2_SUPPORT_JIT)\n    add_test(pcre2_jit_test pcre2_jit_test)\n  endif()\n\n  if(PCRE2_BUILD_PCRE2_8)\n    add_test(pcre2posix_test pcre2posix_test)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Runtime Configuration Settings\nDESCRIPTION: Configures runtime settings for MSVC and MinGW, including static/dynamic runtime selection and compiler-specific definitions.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(USE_STATIC_RT)\n    message(STATUS \"Use STATIC runtime\")\n        if(MSVC)\n            foreach(RT_FLAG\n                CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n                CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO)\n                string(REGEX REPLACE \"/MD\" \"/MT\" ${RT_FLAG} \"${${RT_FLAG}}\")\n            endforeach(RT_FLAG)\n        elseif(MINGW)\n            set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -static-libgcc\")\n        endif()\nelse (USE_STATIC_RT)\n    message(STATUS \"Use DYNAMIC runtime\")\nendif(USE_STATIC_RT)\n```\n\n----------------------------------------\n\nTITLE: Installing LibSSH2 Header Files\nDESCRIPTION: Configures the installation of LibSSH2 header files into the include directory.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES\n  \"${PROJECT_SOURCE_DIR}/include/libssh2.h\"\n  \"${PROJECT_SOURCE_DIR}/include/libssh2_publickey.h\"\n  \"${PROJECT_SOURCE_DIR}/include/libssh2_sftp.h\"\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Paths for zlib\nDESCRIPTION: Defines installation directories for various components of the zlib library, including binaries, libraries, headers, and documentation.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BIN_DIR \"${CMAKE_INSTALL_PREFIX}/bin\" CACHE PATH \"Installation directory for executables\")\nset(INSTALL_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\" CACHE PATH \"Installation directory for libraries\")\nset(INSTALL_INC_DIR \"${CMAKE_INSTALL_PREFIX}/include\" CACHE PATH \"Installation directory for headers\")\nset(INSTALL_MAN_DIR \"${CMAKE_INSTALL_PREFIX}/share/man\" CACHE PATH \"Installation directory for manual pages\")\nset(INSTALL_PKGCONFIG_DIR \"${CMAKE_INSTALL_PREFIX}/share/pkgconfig\" CACHE PATH \"Installation directory for pkgconfig (.pc) files\")\n```\n\n----------------------------------------\n\nTITLE: Setting Static Library Build Option in CMake for PCRE2\nDESCRIPTION: Determines whether to build static libraries based on the BUILD_STATIC_LIBS variable. If not explicitly set, it defaults to OFF.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_45\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_STATIC_LIBS)\n  set(BUILD_STATIC_LIBS ON)\nelse()\n  set(BUILD_STATIC_LIBS OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules and Enabling Testing\nDESCRIPTION: Includes necessary CMake modules for checking types, functions, and files, and enables testing for the project.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckTypeSize)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFile)\ninclude(CheckCSourceCompiles)\nenable_testing()\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Clearing Option in LibSSH2\nDESCRIPTION: Configures an option to enable or disable clearing of memory before being freed. By default, memory clearing is enabled.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nunset(_libssh2_definitions)\n\noption(CLEAR_MEMORY \"Enable clearing of memory before being freed\" ON)\nif(NOT CLEAR_MEMORY)\n  list(APPEND _libssh2_definitions \"LIBSSH2_NO_CLEAR_MEMORY\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: IPv6 Support Configuration in CMake\nDESCRIPTION: Simple conditional check that outputs a status message if IPv6 support is enabled in the build configuration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(INET6)\n    message(STATUS \"Support IPv6\")\nendif(INET6)\n```\n\n----------------------------------------\n\nTITLE: Detecting and Configuring Optional Dependencies (zlib, bzip2, editline, readline) - CMake\nDESCRIPTION: This block detects and conditionally includes support for optional libraries (bzip2, zlib, editline, readline) based on prior discovery results (like BZIP2_FOUND). Feature-flags are exposed for the user to link these libraries to PCRE2 components, with appropriate include_directories and fatal error handling if required headers are not found. Dependencies must be discoverable by CMake; enabling some might require user-supplied directories.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# bzip2 lib\nif(BZIP2_FOUND)\n  option(PCRE2_SUPPORT_LIBBZ2 \"Enable support for linking pcre2grep with libbz2.\" ON)\nendif()\nif(PCRE2_SUPPORT_LIBBZ2)\n  include_directories(${BZIP2_INCLUDE_DIR})\nendif()\n\n# zlib\nif(ZLIB_FOUND)\n  option(PCRE2_SUPPORT_LIBZ \"Enable support for linking pcre2grep with libz.\" ON)\nendif()\nif(PCRE2_SUPPORT_LIBZ)\n  include_directories(${ZLIB_INCLUDE_DIR})\nendif()\n\n# editline lib\nif(EDITLINE_FOUND)\n  option(PCRE2_SUPPORT_LIBEDIT \"Enable support for linking pcre2test with libedit.\" OFF)\nendif()\nif(EDITLINE_FOUND)\n  if(PCRE2_SUPPORT_LIBEDIT)\n    include_directories(${EDITLINE_INCLUDE_DIR})\n  endif()\nelse()\n  if(PCRE2_SUPPORT_LIBEDIT)\n    message(\n      FATAL_ERROR\n      \" libedit not found, set EDITLINE_INCLUDE_DIR to a compatible header\\n\"\n      \" or set Editline_ROOT to a full libedit installed tree, as needed\\n\"\n      \" Might need to enable policy CMP0074 in CMakeLists.txt\"\n    )\n  endif()\nendif()\n\n# readline lib\nif(READLINE_FOUND)\n  option(PCRE2_SUPPORT_LIBREADLINE \"Enable support for linking pcre2test with libreadline.\" ON)\nendif()\nif(PCRE2_SUPPORT_LIBREADLINE)\n  include_directories(${READLINE_INCLUDE_DIR})\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Generating CMake Package Configuration File\nDESCRIPTION: Uses `configure_file` to generate a `${PROJECT_NAME}Config.cmake` file from the template `${PROJECT_NAME}-config.cmake.in`. Variables marked with `@VAR@` in the template are replaced with their current CMake values. The generated file is placed in the build directory.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}-config.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\n    @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Netmap Packet Capture Support\nDESCRIPTION: Tests if netmap packet capture support can be enabled by checking if the netmap header can be compiled with NETMAP_WITH_LIBS defined. Some platforms (like DragonFly BSD 4.6) have issues with this configuration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\n# Check for netmap sniffing support.\nif(NOT DISABLE_NETMAP)\n    #\n    # Check whether net/netmap_user.h is usable if NETMAP_WITH_LIBS is\n    # defined; it's not usable on DragonFly BSD 4.6 if NETMAP_WITH_LIBS\n    # is defined, for example, as it includes a nonexistent malloc.h\n    # header.\n    #\n    check_c_source_compiles(\n\"#define NETMAP_WITH_LIBS\n#include <net/netmap_user.h>\n\nint\nmain(void)\n{\n    return 0;\n}\n\"\n        PCAP_SUPPORT_NETMAP)\n    if(PCAP_SUPPORT_NETMAP)\n        set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} pcap-netmap.c)\n    endif(PCAP_SUPPORT_NETMAP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanitizer Flags in CMake\nDESCRIPTION: CMake configuration logic that processes the ENABLE_SANITIZERS variable to determine which sanitizers to enable. It handles both boolean and list values, testing each requested sanitizer for compiler support.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nset(SANITIZER_FLAGS \"\")\nif(\"${ENABLE_SANITIZERS}\")\n    #\n    # This appears to indicate that ENABLE_SANITIZERS was set to a\n    # string value that is \"one of the true constants\", meaning\n    # \"1, ON, YES, TRUE, Y, or a non-zero number\".\n    #\n    # It does not appear to happen for other settings, including\n    # setting it to a list of one or more sanitizers.\n    #\n    # This setting means \"enable all sanitizers that the compiler\n    # supports\".\n    #\n    foreach(sanitizer \"address\" \"undefined\")\n        unset(SANITIZER_FLAG)\n        test_sanitizer(${sanitizer} SANITIZER_FLAG)\n        if(SANITIZER_FLAG)\n            message(STATUS \"${sanitizer} sanitizer supported using ${SANITIZER_FLAG}\")\n            set(SANITIZER_FLAGS \"${SANITIZER_FLAGS} ${SANITIZER_FLAG}\")\n        else()\n            message(STATUS \"${sanitizer} isn't a supported sanitizer\")\n        endif()\n    endforeach()\n    if(\"${SANITIZER_FLAGS}\" STREQUAL \"\")\n        message(FATAL_ERROR \"No supported sanitizers found\")\n    endif()\nelse()\n    #\n    # This appears to indicate that ENABLE_SANITIZERS was either:\n    #\n    #   not set;\n    #   set to a set to a string value that is not \"one of the true\n    #   constants\", meaning \"1, ON, YES, TRUE, Y, or a non-zero number\".\n    #\n    # The latter includes setting it to \"one of the false constants\",\n    # meaning the string \"is 0, OFF, NO, FALSE, N, IGNORE, NOTFOUND,\n    # the empty string, or ends in the suffix -NOTFOUND.\"\n    #\n    # It also includes setting it to a list of one or more sanitizers.\n    #\n    # We want to treat \"not set\" and \"set to one of the false constants\"\n    # as meaning \"do not enable any sanitizers\".\n    #\n    # We want to treat \"set to a list of one or more sanitizers\" as\n    # meaning \"enable all the sanitizers in the list\".\n    #\n    # This requires that we distinguish between those two cases.\n    #\n    if(ENABLE_SANITIZERS)\n        #\n        # This appears to indicate that ENABLE_SANITIZERS was set to\n        # a string value that is \"not one of the false constants\".\n        #\n        # We already know it's \"not one of the true constants\", so\n        # we treat it as a list of sanitizers.\n        #\n        foreach(sanitizer IN LISTS ENABLE_SANITIZERS)\n            unset(SANITIZER_FLAG)\n            test_sanitizer(${sanitizer} SANITIZER_FLAG)\n            if(SANITIZER_FLAG)\n                message(STATUS \"${sanitizer} sanitizer supported using ${SANITIZER_FLAG}\")\n                set(SANITIZER_FLAGS \"${SANITIZER_FLAGS} ${SANITIZER_FLAG}\")\n            else()\n                message(FATAL_ERROR \"${sanitizer} isn't a supported sanitizer\")\n            endif()\n        endforeach()\n    else()\n        #\n        # This appears to indicate that ENABLE_SANITIZERS was either:\n        #\n        #   not set;\n        #   set to a value that's \"one of the false constants\";\n        #\n        # so we don't enable any sanitizers.\n        #\n        message(STATUS \"Not enabling sanitizers\")\n    endif()\nendif()\n\nif(NOT \"${SANITIZER_FLAGS}\" STREQUAL \"\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O1 -g ${SANITIZER_FLAGS} -fno-omit-frame-pointer -fno-optimize-sibling-calls\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Dependencies for LibSSH2\nDESCRIPTION: Sets a cache variable for runtime dependencies that must be co-located with executables.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(RUNTIME_DEPENDENCIES ${_RUNTIME_DEPENDENCIES} CACHE INTERNAL\n  \"Files that must be in the same directory as the executables at runtime.\")\n```\n\n----------------------------------------\n\nTITLE: PCAP Socket Option Suppression\nDESCRIPTION: Suppression rule for memory warnings related to setting socket options in libpcap during probe mode operations. Specifically targets the filter setting and opening of PCAP captures.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/valgrind_supress.txt#2025-04-23_snippet_1\n\nLANGUAGE: valgrind\nCODE:\n```\n{\n   <SUPPRESSION_PCAP_SETSOCKOPT>\n   Memcheck:Param\n   socketcall.setsockopt(optval)\n   fun:setsockopt\n   obj:/usr/lib/libpcap.so.1.0.0\n   obj:/usr/lib/libpcap.so.1.0.0\n   fun:nsock_pcap_set_filter\n   fun:nsock_pcap_open\n   fun:_ZN9ProbeMode5startEv\n   fun:_ZN10EchoClient5startEP11NpingTargett\n   fun:main\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for unistd.h Header\nDESCRIPTION: Checks if the unistd.h header file is available on the system.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_include_file(unistd.h Z_HAVE_UNISTD_H)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options for Static and Shared Libraries in libssh2\nDESCRIPTION: Defines CMake options for building static and shared versions of the libssh2 library, both enabled by default, and adds this information to the feature summary.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_STATIC_LIBS \"Build static libraries\" ON)\nadd_feature_info(\"Static library\" BUILD_STATIC_LIBS \"creating libssh2 static library\")\n\noption(BUILD_SHARED_LIBS \"Build shared libraries\" ON)\nadd_feature_info(\"Shared library\" BUILD_SHARED_LIBS \"creating libssh2 shared library (.so/.dll)\")\n```\n\n----------------------------------------\n\nTITLE: HTML Favicon Link Example\nDESCRIPTION: Example of an HTML link tag used to specify a favicon location in the Insecure.org websites. This shows how favicons can be specified in locations other than the default /favicon.ico path.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<link REL=\"SHORTCUT ICON\" HREF=\"http://images.insecure.org/images/tiny-eyeicon.png\" TYPE=\"image/png\">\n```\n\n----------------------------------------\n\nTITLE: Sanity Checks and Configuration Enforcement - CMake\nDESCRIPTION: This section enforces valid combinations of build options and library features, issuing FATAL_ERROR or adjusting settings when encountering invalid or conflicting configurations (for example, requiring at least one build type, ensuring at least one PCRE2 flavor is enabled, or exclusive use of readline/editline). It helps guard against user misconfiguration and ensures build scripts will fail early and clearly upon errors.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT BUILD_SHARED_LIBS AND NOT BUILD_STATIC_LIBS)\n  message(FATAL_ERROR \"At least one of BUILD_SHARED_LIBS or BUILD_STATIC_LIBS must be enabled.\")\nendif()\n\nif(NOT PCRE2_BUILD_PCRE2_8 AND NOT PCRE2_BUILD_PCRE2_16 AND NOT PCRE2_BUILD_PCRE2_32)\n  message(\n    FATAL_ERROR\n    \"At least one of PCRE2_BUILD_PCRE2_8, PCRE2_BUILD_PCRE2_16 or PCRE2_BUILD_PCRE2_32 must be enabled\"\n  )\nendif()\n\nif(PCRE2_BUILD_PCRE2GREP AND NOT PCRE2_BUILD_PCRE2_8)\n  message(STATUS \"** PCRE2_BUILD_PCRE2_8 must be enabled for the pcre2grep program\")\n  set(PCRE2_BUILD_PCRE2GREP OFF)\nendif()\n\nif(PCRE2_SUPPORT_LIBREADLINE AND PCRE2_SUPPORT_LIBEDIT)\n  if(READLINE_FOUND)\n    message(\n      FATAL_ERROR\n      \" Only one of the readline compatible libraries can be enabled.\\n\"\n      \" Disable libreadline with -DPCRE2_SUPPORT_LIBREADLINE=OFF\"\n    )\n  endif()\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Initializing zlib Project with CMake\nDESCRIPTION: Sets up basic CMake configuration for the zlib project, including minimum version requirements, project name, and version information.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.4.4...3.15.0)\nset(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)\n\nproject(zlib C)\n\nset(VERSION \"1.3.1\")\n\noption(ZLIB_BUILD_EXAMPLES \"Enable Zlib Examples\" ON)\n```\n\n----------------------------------------\n\nTITLE: Calculating CRC for a Buffer in C\nDESCRIPTION: Defines the `crc` function, which serves as a simple wrapper around `update_crc`. It calculates the CRC-32 for an entire buffer (`buf` of length `len`) by initializing the CRC to 0L and calling `update_crc` with these initial values.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1952.txt#2025-04-23_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n/* Return the CRC of the bytes buf[0..len-1]. */\nunsigned long crc(unsigned char *buf, int len)\n{\n  return update_crc(0L, buf, len);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and MSVC Debug Settings for LibSSH2\nDESCRIPTION: Adds binary directory to include path for generated headers and sets specific debug flags for MSVC builds.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND LIBSSH2_LIBS ${LIBSSH2_LIBS_SOCKET})\n\n# to find generated header\nlist(APPEND libssh2_INCLUDE_DIRS ${CMAKE_CURRENT_BINARY_DIR})\n\nif(MSVC)\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /Zi /Od\")\n  set(CMAKE_SHARED_LINKER_FLAGS_DEBUG \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG} /DEBUG\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Original SSLeay License Text\nDESCRIPTION: Copyright and license text written by Eric Young for the original SSLeay library. It details the conditions for redistribution, attribution requirements, and disclaimers that apply to all code in the distribution including cryptographic components.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/licenses/OpenSSL-license.txt#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n * \n * This library is free for commercial and non-commercial use as long as\n * the following conditions are aheared to.  The following conditions\n * apply to all code found in this distribution, be it the RC4, RSA,\n * lhash, DES, etc., code; not just the SSL code.  The SSL documentation\n * included with this distribution is covered by the same copyright terms\n * except that the holder is Tim Hudson (tjh@cryptsoft.com).\n * \n * Copyright remains Eric Young's, and as such any Copyright notices in\n * the code are not to be removed.\n * If this package is used in a product, Eric Young should be given attribution\n * as the author of the parts of the library used.\n * This can be in the form of a textual message at program startup or\n * in documentation (online or textual) provided with the package.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *    \"This product includes cryptographic software written by\n *     Eric Young (eay@cryptsoft.com)\"\n *    The word 'cryptographic' can be left out if the rouines from the library\n *    being used are not cryptographic related :-).\n * 4. If you include any Windows specific code (or a derivative thereof) from \n *    the apps directory (application code) you must include an acknowledgement:\n *    \"This product includes software written by Tim Hudson (tjh@cryptsoft.com)\"\n * \n * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * \n * The licence and distribution terms for any publically available version or\n * derivative of this code cannot be changed.  i.e. this code cannot simply be\n * copied and put under another distribution licence\n * [including the GNU Public Licence.]\n */\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Header Files in CMake\nDESCRIPTION: Installs the list of header files specified in the `DNET_HEADERS1` variable into the `${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}` directory. These files are marked as part of the 'devel' component, intended for development purposes.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES ${DNET_HEADERS1}\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}\n        COMPONENT devel)\n```\n\n----------------------------------------\n\nTITLE: Displaying IJG JPEG License Text\nDESCRIPTION: This text block contains the legalese version of the Independent JPEG Group (IJG) license. It includes copyright details (Thomas G. Lane, Guido Vollbeding), disclaimers of warranty, and conditions for use, copying, modification, and distribution, emphasizing acknowledgement and liability limitations. Commercial use is permitted.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nIn plain English:\n\n1. We don't promise that this software works.  (But if you find any bugs,\n   please let us know!)\n2. You can use this software for whatever you want.  You don't have to pay us.\n3. You may not pretend that you wrote this software.  If you use it in a\n   program, you must acknowledge somewhere in your documentation that\n   you've used the IJG code.\n\nIn legalese:\n\nThe authors make NO WARRANTY or representation, either express or implied,\nwith respect to this software, its quality, accuracy, merchantability, or\nfitness for a particular purpose.  This software is provided \"AS IS\", and you,\nits user, assume the entire risk as to its quality and accuracy.\n\nThis software is copyright (C) 1991-2010, Thomas G. Lane, Guido Vollbeding.\nAll Rights Reserved except as specified below.\n\nPermission is hereby granted to use, copy, modify, and distribute this\nsoftware (or portions thereof) for any purpose, without fee, subject to these\nconditions:\n(1) If any part of the source code for this software is distributed, then this\nREADME file must be included, with this copyright and no-warranty notice\nunaltered; and any additions, deletions, or changes to the original files\nmust be clearly indicated in accompanying documentation.\n(2) If only executable code is distributed, then the accompanying\ndocumentation must state that \"this software is based in part on the work of\nthe Independent JPEG Group\".\n(3) Permission for use of this software is granted only if the user accepts\nfull responsibility for any undesirable consequences; the authors accept\nNO LIABILITY for damages of any kind.\n\nThese conditions apply to any software derived from or based on the IJG code,\nnot just to the unmodified library.  If you use our work, you ought to\nacknowledge us.\n\nPermission is NOT granted for the use of any IJG author's name or company name\nin advertising or publicity relating to this software or products derived from\nit.  This software may be referred to only as \"the Independent JPEG Group's\nsoftware\".\n\nWe specifically permit and encourage the use of this software as the basis of\ncommercial products, provided that all warranty or liability claims are\nassumed by the product vendor.\n```\n\n----------------------------------------\n\nTITLE: Defining dnet Specific Header Files in CMake\nDESCRIPTION: Creates a CMake variable `DNET_HEADERS` containing a list of header files located within the `include/dnet` directory. This variable is typically used later for installation or setting target properties.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(DNET_HEADERS\n    include/dnet/addr.h\n    include/dnet/arp.h\n    include/dnet/blob.h\n    include/dnet/eth.h\n    include/dnet/fw.h\n    include/dnet/icmp.h\n    include/dnet/icmpv6.h\n    include/dnet/intf.h\n    include/dnet/ip.h\n    include/dnet/ip6.h\n    include/dnet/ndisc.h\n    include/dnet/os.h\n    include/dnet/rand.h\n    include/dnet/route.h\n    include/dnet/sctp.h\n    include/dnet/tcp.h\n    include/dnet/tun.h\n    include/dnet/udp.h\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping User-Facing Option Strings to Preprocessor Defines - CMake\nDESCRIPTION: These statements translate human-readable (string) configuration options for newlines/EBCDIC into compile-time integer defines used to configure PCRE2's source, to be injected into generated headers. Only accepted values will be set, with newlines encoded as integers and EBCDIC booleans, helping to maintain configuration integrity during the build.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nset(NEWLINE_DEFAULT \"\")\n\nif(PCRE2_NEWLINE STREQUAL \"CR\")\n  set(NEWLINE_DEFAULT \"1\")\nendif()\nif(PCRE2_NEWLINE STREQUAL \"LF\")\n  set(NEWLINE_DEFAULT \"2\")\nendif()\nif(PCRE2_NEWLINE STREQUAL \"CRLF\")\n  set(NEWLINE_DEFAULT \"3\")\nendif()\nif(PCRE2_NEWLINE STREQUAL \"ANY\")\n  set(NEWLINE_DEFAULT \"4\")\nendif()\nif(PCRE2_NEWLINE STREQUAL \"ANYCRLF\")\n  set(NEWLINE_DEFAULT \"5\")\nendif()\nif(PCRE2_NEWLINE STREQUAL \"NUL\")\n  set(NEWLINE_DEFAULT \"6\")\nendif()\n\nif(NEWLINE_DEFAULT STREQUAL \"\")\n  message(\n    FATAL_ERROR\n    \"The PCRE2_NEWLINE variable must be set to one of the following values: \\\"LF\\\", \\\"CR\\\", \\\"CRLF\\\", \\\"ANY\\\", \\\"ANYCRLF\\\".\"\n  )\nendif()\n\nif(PCRE2_EBCDIC)\n  set(EBCDIC 1)\nendif()\n\nif(PCRE2_EBCDIC_NL25)\n  set(EBCDIC 1)\n  set(EBCDIC_NL25 1)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Completing the update_adler32 Function in C\nDESCRIPTION: The end of a function that updates an Adler-32 checksum by processing bytes in a buffer. It combines two 16-bit sums (s1 and s2) to create the final 32-bit checksum value.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1950.txt#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n          s1 = (s1 + buf[n]) % BASE;\n          s2 = (s2 + s1)     % BASE;\n        }\n        return (s2 << 16) + s1;\n      }\n```\n\n----------------------------------------\n\nTITLE: Displaying bzip2 License Text\nDESCRIPTION: This text block details the copyright (Julian R Seward) and license conditions for the bzip2 program and libbzip2 library. It permits redistribution and use in source/binary forms (modified or unmodified) provided conditions like retaining the copyright notice, list of conditions, and the disclaimer are met.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nThis program, \"bzip2\", the associated library \"libbzip2\", and all\ndocumentation, are copyright (C) 1996-2010 Julian R Seward.  All\nrights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n```\n\n----------------------------------------\n\nTITLE: Pango Library License Header in C\nDESCRIPTION: License header for the Pango library, which handles text layout and internationalization. This Library GPL license allows for redistribution and modification under specific conditions.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n/* Pango\n *\n * Copyright (C) 1999 Red Hat Software\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Library General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n```\n\n----------------------------------------\n\nTITLE: PyGTK License Header\nDESCRIPTION: License header for PyGTK library showing copyright information and LGPL license terms.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n# pygtk - Python bindings for the GTK toolkit.\n# Copyright (C) 1998-2003  James Henstridge\n#               2004-2006  Johan Dahlin\n#\n# This library is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301\n# USA\n```\n\n----------------------------------------\n\nTITLE: Executing PCRE2 Build Script on OpenVMS using DCL\nDESCRIPTION: This command executes the main build procedure, typically named `BUILD.COM` by convention in OpenVMS when the extension is omitted. It compiles the source code and links the object files to create the PCRE2 shared and static libraries, as well as the `pcre2grep` executable, based on the preceding configuration step.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/vms/openvms_readme.txt#2025-04-23_snippet_1\n\nLANGUAGE: dcl\nCODE:\n```\n@BUILD\n```\n\n----------------------------------------\n\nTITLE: Restoring Original Compiler Flags\nDESCRIPTION: Restores the original compiler flags after feature detection tests that may have modified them.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})\n```\n\n----------------------------------------\n\nTITLE: Displaying LibTIFF License Text\nDESCRIPTION: This text block presents the copyright notice and license terms for LibTIFF, attributed to Sam Leffler and Silicon Graphics, Inc. It grants permission for use, modification, and distribution under specific conditions regarding copyright notice retention and name usage, along with a standard \"AS-IS\" warranty disclaimer and limitation of liability.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 1988-1997 Sam Leffler\nCopyright (c) 1991-1997 Silicon Graphics, Inc.\n\nPermission to use, copy, modify, distribute, and sell this software and \nits documentation for any purpose is hereby granted without fee, provided\nthat (i) the above copyright notices and this permission notice appear in\nall copies of the software and related documentation, and (ii) the names of\nSam Leffler and Silicon Graphics may not be used in any advertising or\npublicity relating to the software without the specific, prior written\npermission of Sam Leffler and Silicon Graphics.\n\nTHE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \nEXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \nWARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \n\nIN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR\nANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND,\nOR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF \nLIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE \nOF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Defining Libpcap Build Configuration Options in CMake\nDESCRIPTION: Defines various CMake options (`option()`) and cache variables (`set(... CACHE ...)` to control the libpcap build process and included features. These parameters allow customization of features like IPv6 support (`INET6`), building shared vs. static libraries (`BUILD_SHARED_LIBS`), using static runtime on Windows (`USE_STATIC_RT`), enabling remote capture (`ENABLE_REMOTE`), setting paths for dependencies (DPDK, Packet.dll, AirPcap.dll, Septel), and enabling/disabling specific capture mechanisms (Libnl, USBMon, Bluetooth, Netmap, DPDK, D-Bus, RDMA, DAG, Septel, SNF, TC) or debugging features (`ENABLE_PROFILING`, `NO_PROTOCHAIN`, `BDEBUG`, `YYDEBUG`). Defaults are provided, often based on the operating system.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n###################################################################\n#   Parameters\n###################################################################\n\noption(INET6 \"Enable IPv6\" ON)\nif(WIN32)\n    option(USE_STATIC_RT \"Use static Runtime\" ON)\nendif(WIN32)\noption(BUILD_SHARED_LIBS \"Build shared libraries\" ON)\nset(dpdk_ROOT \"\" CACHE PATH \"Path to directory with include and lib subdirectories for DPDK\")\nif(WIN32)\n    set(Packet_ROOT \"\" CACHE PATH \"Path to directory with include and lib subdirectories for packet.dll\")\n    set(AirPcap_ROOT \"\" CACHE PATH \"Path to directory with include and lib subdirectories for airpcap.dll\")\nendif(WIN32)\n\noption(ENABLE_PROFILING \"Enable code profiling\" OFF)\n\n# To pacify those who hate the protochain instruction\noption(NO_PROTOCHAIN \"Disable protochain instruction\" OFF)\n\n#\n# Start out with the capture mechanism type unspecified; the user\n# can explicitly specify it and, if they don't, we'll pick an\n# appropriate one.\n#\nset(PCAP_TYPE \"\" CACHE STRING \"Packet capture type\")\n\n#\n# Default to having remote capture support on Windows and, for now, to\n# not having it on UN*X.\n#\nif(WIN32)\n    option(ENABLE_REMOTE \"Enable remote capture\" ON)\nelse()\n    option(ENABLE_REMOTE \"Enable remote capture\" OFF)\nendif(WIN32)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    option(BUILD_WITH_LIBNL \"Build with libnl\" ON)\nendif()\n\n#\n# Additional capture modules.\n#\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    option(DISABLE_LINUX_USBMON \"Disable Linux usbmon USB sniffing support\" OFF)\nendif()\noption(DISABLE_BLUETOOTH \"Disable Bluetooth sniffing support\" OFF)\noption(DISABLE_NETMAP \"Disable netmap support\" OFF)\noption(DISABLE_DPDK \"Disable DPDK support\" OFF)\n\n#\n# We don't support D-Bus sniffing on macOS; see\n#\n# https://bugs.freedesktop.org/show_bug.cgi?id=74029\n#\nif(APPLE)\n    option(DISABLE_DBUS \"Disable D-Bus sniffing support\" ON)\nelse(APPLE)\n    option(DISABLE_DBUS \"Disable D-Bus sniffing support\" OFF)\nendif(APPLE)\noption(DISABLE_RDMA \"Disable RDMA sniffing support\" OFF)\n\noption(DISABLE_DAG \"Disable Endace DAG card support\" OFF)\n\noption(DISABLE_SEPTEL \"Disable Septel card support\" OFF)\nset(SEPTEL_ROOT \"${CMAKE_CURRENT_SOURCE_DIR}/../septel\" CACHE PATH \"Path to directory with include and lib subdirectories for Septel API\")\n\noption(DISABLE_SNF \"Disable Myricom SNF support\" OFF)\n\noption(DISABLE_TC \"Disable Riverbed TurboCap support\" OFF)\n\n#\n# Debugging options.\n#\noption(BDEBUG \"Build optimizer debugging code\" OFF)\noption(YYDEBUG \"Build parser debugging code\" OFF)\n```\n\n----------------------------------------\n\nTITLE: TCP RST packet with custom TTL to specific IP\nDESCRIPTION: Example of sending TCP RST packets to port 80 with a TTL value of 2 to a specific IP address.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/docs/nping-usage.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnping --tcp -p 80 --flags rst --ttl 2 192.168.1.1\n```\n\n----------------------------------------\n\nTITLE: ATK Library License Header in C\nDESCRIPTION: License header for the ATK (Accessibility Toolkit) library, which provides a set of interfaces for accessibility technologies. The license is the GNU Library GPL, allowing for redistribution and modification.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n/* ATK -  Accessibility Toolkit\n * Copyright 2001 Sun Microsystems Inc.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Library General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n```\n\n----------------------------------------\n\nTITLE: Example of OS Detection Warning Messages\nDESCRIPTION: Example of repetitive OS detection warnings that don't specify which host they apply to, making the messages less useful for troubleshooting when scanning multiple hosts.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/done.txt#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nInsufficient responses for TCP sequencing (0), OS detection may be less accurate\nInsufficient responses for TCP sequencing (0), OS detection may be less accurate\nInsufficient responses for TCP sequencing (0), OS detection may be less accurate\nInsufficient responses for TCP sequencing (0), OS detection may be less accurate\nInsufficient responses for TCP sequencing (0), OS detection may be less accurate\n```\n\n----------------------------------------\n\nTITLE: Running Nping Echo Client with Spurious Nsock Error Messages\nDESCRIPTION: This shell command executes the Nping echo client (`--ec public`) against `echo.nmap.org` over TCP (`--tcp`) on port 90 (`-p90`), sending a single packet (`--count 1`). The output demonstrates an issue where Nping may display error messages (`nping_event_handler(): READ-PCAP killed: Resource temporarily unavailable`, `nping_event_handler(): TIMER killed: Resource temporarily unavailable`) related to Nsock event cleanup, even when the operation seemingly completes successfully.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/nping.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nluis@Aberdeen:~$ sudo nping --ec public echo.nmap.org -p90 --tcp --count 1\n\n  Starting Nping 0.5.52.IPv6.Beta2 ( https://nmap.org/nping ) at 2011-07-05 12:51 CEST\n  SENT (1.8965s) TCP 163.117.203.253:64288 > 74.207.244.221:90 S ttl=64\n  CAPT (2.0293s) TCP 163.117.203.253:64288 > 74.207.244.221:90 S ttl=54\n  RCVD (2.1233s) TCP 74.207.244.221:90 > 163.117.203.253:64288 RA ttl=51\n  nping_event_handler(): READ-PCAP killed: Resource temporarily unavailable\n  nping_event_handler(): TIMER killed: Resource temporarily unavailable\n   \n  Max rtt: 226.762ms | Min rtt: 226.762ms | Avg rtt: 226.762ms\n  Raw packets sent: 1 (40B) | Rcvd: 1 (40B) | Lost: 0 (0.00%)| Echoed: 1 (40B) \n  Tx time: 0.00136s | Tx bytes/s: 29411.76 | Tx pkts/s: 735.29\n  Rx time: 1.00082s | Rx bytes/s: 39.97 | Rx pkts/s: 1.00\n  Nping done: 1 IP address pinged in 2.93 seconds\n```\n\n----------------------------------------\n\nTITLE: Project Directory Configuration\nDESCRIPTION: Sets up include directories and performs Windows-specific checks for Packet library and Npcap headers. Includes validation of loopback adapter functionality.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n    ${CMAKE_CURRENT_BINARY_DIR}\n    ${pcap_SOURCE_DIR}\n)\n\nif(WIN32)\n    if(IS_DIRECTORY ${CMAKE_HOME_DIRECTORY}/../../Common)\n        include_directories(${CMAKE_HOME_DIRECTORY}/../../Common)\n    endif()\n\n    find_package(Packet)\n    if(Packet_FOUND)\n        set(HAVE_PACKET32 TRUE)\n        include_directories(${Packet_INCLUDE_DIRS})\n        cmake_push_check_state()\n        set(CMAKE_REQUIRED_LIBRARIES ${Packet_LIBRARIES})\n        check_function_exists(PacketIsLoopbackAdapter HAVE_PACKET_IS_LOOPBACK_ADAPTER)\n        check_function_exists(PacketGetTimestampModes HAVE_PACKET_GET_TIMESTAMP_MODES)\n        cmake_pop_check_state()\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Character Table Generation Configuration\nDESCRIPTION: Configures character table generation for PCRE2, either rebuilding tables or using distributed version. Includes option for runtime table generation.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\noption(PCRE2_REBUILD_CHARTABLES \"Rebuild char tables\" OFF)\nif(PCRE2_REBUILD_CHARTABLES)\n  add_executable(pcre2_dftables src/pcre2_dftables.c)\n  add_custom_command(\n    OUTPUT ${PROJECT_BINARY_DIR}/pcre2_chartables.c\n    COMMAND pcre2_dftables\n    ARGS ${PROJECT_BINARY_DIR}/pcre2_chartables.c\n    DEPENDS pcre2_dftables\n    COMMENT \"Generating character tables (pcre2_chartables.c) for current locale\"\n    VERBATIM\n  )\nelse()\n  configure_file(${PROJECT_SOURCE_DIR}/src/pcre2_chartables.c.dist ${PROJECT_BINARY_DIR}/pcre2_chartables.c COPYONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: SDK Configuration for Jhbuild\nDESCRIPTION: Configuration snippet for setting the target SDK version in Jhbuild custom configuration file.\nSOURCE: https://github.com/nmap/nmap/blob/master/macosx/BUNDLING.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsetup_sdk(target=\"10.11\")\n```\n\n----------------------------------------\n\nTITLE: Building Nmap Dependencies\nDESCRIPTION: Command to build Nmap dependencies using the openssl moduleset with Jhbuild.\nSOURCE: https://github.com/nmap/nmap/blob/master/macosx/BUNDLING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ jhbuild -m openssl.modules build nmap-deps\n```\n\n----------------------------------------\n\nTITLE: Displaying PCRE2 Configuration Summary in CMake\nDESCRIPTION: Generates a detailed configuration summary for PCRE2 build, including compiler settings, build types, and various PCRE2 options. This is only displayed if PCRE2_SHOW_REPORT is enabled.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_46\n\nLANGUAGE: CMake\nCODE:\n```\nif(PCRE2_SHOW_REPORT)\n  message(STATUS \"\")\n  message(STATUS \"\")\n  message(STATUS \"PCRE2-${PCRE2_MAJOR}.${PCRE2_MINOR} configuration summary:\")\n  message(STATUS \"\")\n  message(STATUS \"  Install prefix .................... : ${CMAKE_INSTALL_PREFIX}\")\n  message(STATUS \"  C compiler ........................ : ${CMAKE_C_COMPILER}\")\n\n  if(CMAKE_C_FLAGS)\n    set(CFSP \" \")\n  endif()\n  if(CMAKE_CONFIGURATION_TYPES)\n    foreach(config IN LISTS CMAKE_CONFIGURATION_TYPES)\n      string(TOUPPER \"${config}\" buildtype)\n      string(LENGTH \" (${config})\" buildtypelen)\n      math(EXPR dotslen \"18 - ${buildtypelen}\")\n      string(REPEAT \".\" ${dotslen} dots)\n      message(STATUS \"  C compiler flags (${config}) ${dots} : ${CMAKE_C_FLAGS}${CFSP}${CMAKE_C_FLAGS_${buildtype}}\")\n    endforeach()\n  else()\n    string(TOUPPER \"${CMAKE_BUILD_TYPE}\" buildtype)\n    message(STATUS \"  C compiler flags .................. : ${CMAKE_C_FLAGS}${CFSP}${CMAKE_C_FLAGS_${buildtype}}\")\n  endif()\n\n  message(STATUS \"\")\n  if(CMAKE_CONFIGURATION_TYPES)\n    message(STATUS \"  Build configurations .............. : ${CMAKE_CONFIGURATION_TYPES}\")\n  else()\n    message(STATUS \"  Build type ........................ : ${CMAKE_BUILD_TYPE}\")\n  endif()\n  message(STATUS \"  Build 8 bit PCRE2 library ......... : ${PCRE2_BUILD_PCRE2_8}\")\n  message(STATUS \"  Build 16 bit PCRE2 library ........ : ${PCRE2_BUILD_PCRE2_16}\")\n  message(STATUS \"  Build 32 bit PCRE2 library ........ : ${PCRE2_BUILD_PCRE2_32}\")\n  message(STATUS \"  Include debugging code ............ : ${PCRE2_DEBUG}\")\n  message(STATUS \"  Enable JIT compiling support ...... : ${PCRE2_SUPPORT_JIT}\")\n  message(STATUS \"  Use SELinux allocator in JIT ...... : ${PCRE2_SUPPORT_JIT_SEALLOC}\")\n  message(STATUS \"  Enable Unicode support ............ : ${PCRE2_SUPPORT_UNICODE}\")\n  message(STATUS \"  Newline char/sequence ............. : ${PCRE2_NEWLINE}\")\n  message(STATUS \"  \\\\R matches only ANYCRLF ........... : ${PCRE2_SUPPORT_BSR_ANYCRLF}\")\n  message(STATUS \"  \\\\C is disabled .................... : ${PCRE2_NEVER_BACKSLASH_C}\")\n  message(STATUS \"  EBCDIC coding ..................... : ${PCRE2_EBCDIC}\")\n  message(STATUS \"  EBCDIC coding with NL=0x25 ........ : ${PCRE2_EBCDIC_NL25}\")\n  message(STATUS \"  Rebuild char tables ............... : ${PCRE2_REBUILD_CHARTABLES}\")\n  message(STATUS \"  Internal link size ................ : ${PCRE2_LINK_SIZE}\")\n  message(STATUS \"  Maximum variable lookbehind ....... : ${PCRE2_MAX_VARLOOKBEHIND}\")\n  message(STATUS \"  Parentheses nest limit ............ : ${PCRE2_PARENS_NEST_LIMIT}\")\n  message(STATUS \"  Heap limit ........................ : ${PCRE2_HEAP_LIMIT}\")\n  message(STATUS \"  Match limit ....................... : ${PCRE2_MATCH_LIMIT}\")\n  message(STATUS \"  Match depth limit ................. : ${PCRE2_MATCH_LIMIT_DEPTH}\")\n  message(STATUS \"  Build shared libs ................. : ${BUILD_SHARED_LIBS}\")\n  message(STATUS \"  Build static libs ................. : ${BUILD_STATIC_LIBS}\")\n  message(STATUS \"     with PIC enabled ............... : ${PCRE2_STATIC_PIC}\")\n  message(STATUS \"  Build pcre2grep ................... : ${PCRE2_BUILD_PCRE2GREP}\")\n  message(STATUS \"  Enable JIT in pcre2grep ........... : ${PCRE2GREP_SUPPORT_JIT}\")\n  message(STATUS \"  Enable callouts in pcre2grep ...... : ${PCRE2GREP_SUPPORT_CALLOUT}\")\n  message(STATUS \"  Enable callout fork in pcre2grep .. : ${PCRE2GREP_SUPPORT_CALLOUT_FORK}\")\n  message(STATUS \"  Buffer size for pcre2grep ......... : ${PCRE2GREP_BUFSIZE}\")\n  message(STATUS \"  Build tests (implies pcre2test .... : ${PCRE2_BUILD_TESTS}\")\n  message(STATUS \"               and pcre2grep)\")\n  if(ZLIB_FOUND)\n    message(STATUS \"  Link pcre2grep with libz .......... : ${PCRE2_SUPPORT_LIBZ}\")\n  else()\n    message(STATUS \"  Link pcre2grep with libz .......... : Library not found\")\n  endif()\n  if(BZIP2_FOUND)\n    message(STATUS \"  Link pcre2grep with libbz2 ........ : ${PCRE2_SUPPORT_LIBBZ2}\")\n  else()\n    message(STATUS \"  Link pcre2grep with libbz2 ........ : Library not found\")\n  endif()\n  if(EDITLINE_FOUND)\n    message(STATUS \"  Link pcre2test with libeditline ... : ${PCRE2_SUPPORT_LIBEDIT}\")\n  else()\n    message(STATUS \"  Link pcre2test with libeditline ... : Library not found\")\n  endif()\n  if(READLINE_FOUND)\n    message(STATUS \"  Link pcre2test with libreadline ... : ${PCRE2_SUPPORT_LIBREADLINE}\")\n  else()\n    message(STATUS \"  Link pcre2test with libreadline ... : Library not found\")\n  endif()\n  message(STATUS \"  Support Valgrind .................. : ${PCRE2_SUPPORT_VALGRIND}\")\n  if(PCRE2_DISABLE_PERCENT_ZT)\n    message(STATUS \"  Use %zu and %td ................... : OFF\")\n  else()\n    message(STATUS \"  Use %zu and %td ................... : AUTO\")\n  endif()\n\n  if(MINGW AND BUILD_SHARED_LIBS)\n    message(STATUS \"  Non-standard dll names (prefix) ... : ${NON_STANDARD_LIB_PREFIX}\")\n    message(STATUS \"  Non-standard dll names (suffix) ... : ${NON_STANDARD_LIB_SUFFIX}\")\n  endif()\n\n  if(MSVC)\n    message(STATUS \"  Install MSVC .pdb files ........... : ${INSTALL_MSVC_PDB}\")\n  endif()\n\n  message(STATUS \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform Feature Detection\nDESCRIPTION: Performs comprehensive checks for required system headers, functions and compiler features across different platforms. Includes special handling for Windows vs Unix environments.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_include_file(inttypes.h HAVE_INTTYPES_H)\ncheck_include_file(stdint.h HAVE_STDINT_H)\ncheck_include_file(unistd.h HAVE_UNISTD_H)\nif(NOT HAVE_UNISTD_H)\n    add_definitions(-DYY_NO_UNISTD_H)\nendif()\n\ncheck_c_source_compiles(\n\"int\nmain(void)\n{\n\tint i = 17;\n\treturn __atomic_load_n(&i, __ATOMIC_RELAXED);\n}\"\n            HAVE___ATOMIC_LOAD_N)\n\ncheck_function_exists(strerror_r HAVE_STRERROR_R)\nif(HAVE_STRERROR_R)\n    check_c_source_compiles(\n\"#define _GNU_SOURCE\n#include <string.h>\nextern char *strerror_r(int, char *, size_t);\nint\nmain(void)\n{\n\treturn 0;\n}\"\n            HAVE_GNU_STRERROR_R)\n```\n\n----------------------------------------\n\nTITLE: Building Zlib with Visual Studio 2008 using vcbuild command\nDESCRIPTION: Command line instruction for building Zlib using Visual Studio 2008's vcbuild utility, targeting the Release configuration for Win32 platform.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/contrib/vstudio/readme.txt#2025-04-23_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nvcbuild /rebuild contrib\\vstudio\\vc9\\zlibvc.sln \"Release|Win32\"\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Module Path for libssh2\nDESCRIPTION: Defines the minimum required CMake version (3.7) for building libssh2 and sets up the module path to include the local cmake directory.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.7)\nmessage(STATUS \"Using CMake version ${CMAKE_VERSION}\")\n\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\" ${CMAKE_MODULE_PATH})\n```\n\n----------------------------------------\n\nTITLE: Windows Network Library Detection\nDESCRIPTION: Checks for getaddrinfo availability in Windows ws2_32 library and configures necessary linkage.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_push_check_state()\nset(CMAKE_REQUIRED_LIBRARIES ws2_32)\ncheck_symbol_exists(getaddrinfo \"winsock2.h;ws2tcpip.h\" LIBWS2_32_HAS_GETADDRINFO)\ncmake_pop_check_state()\nif(LIBWS2_32_HAS_GETADDRINFO)\n    set(PCAP_LINK_LIBRARIES ws2_32 ${PCAP_LINK_LIBRARIES})\nelse(LIBWS2_32_HAS_GETADDRINFO)\n    message(FATAL_ERROR \"getaddrinfo is required, but wasn't found\")\nendif(LIBWS2_32_HAS_GETADDRINFO)\n```\n\n----------------------------------------\n\nTITLE: Setting PCAP Source Files in CMake\nDESCRIPTION: Sets the PCAP source files based on the previously determined PCAP type. This ensures the correct platform-specific implementation is included in the build.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED PCAP_SRC)\nset(PCAP_SRC pcap-${PCAP_TYPE}.c)\nendif()\n\nset(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} ${PCAP_SRC})\n```\n\n----------------------------------------\n\nTITLE: Building PCRE2GREP Executable in CMake\nDESCRIPTION: Configures the build for the pcre2grep utility if enabled. Sets the code unit width to 8 bits and links against the required libraries.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nif(PCRE2_BUILD_PCRE2GREP)\n  add_executable(pcre2grep src/pcre2grep.c)\n  set_property(TARGET pcre2grep PROPERTY COMPILE_DEFINITIONS PCRE2_CODE_UNIT_WIDTH=8)\n  set(TARGETS ${TARGETS} pcre2grep)\n  target_link_libraries(pcre2grep pcre2-posix ${PCRE2GREP_LIBS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring PCAP for Haiku and Other Platforms in CMake\nDESCRIPTION: Sets up PCAP for Haiku OS and handles other platform types. For Haiku, it checks for required network headers.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\n    elseif(PCAP_TYPE STREQUAL \"haiku\")\n        #\n        # Check for some headers just in case.\n        #\n        check_include_files(\"net/if.h;net/if_dl.h;net/if_types.h\" HAVE_NET_IF_TYPES_H)\n        set(PCAP_SRC pcap-${PCAP_TYPE}.c)\n    elseif(PCAP_TYPE STREQUAL \"null\")\n    else()\n        message(FATAL_ERROR \"${PCAP_TYPE} is not a valid pcap type\")\n    endif()\nendif(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Macro to Require and Add Compiler Option\nDESCRIPTION: Defines a CMake macro `require_and_add_compiler_option` intended for use with non-MSVC compilers. It checks if a specified C compiler flag (`_option`) is supported using `check_c_compiler_flag`. If the flag is supported, it appends it to the `C_ADDITIONAL_FLAGS` variable. If the flag is *not* supported, it halts the build with a fatal error, indicating that the required feature (e.g., C99 support) is unavailable.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n    #\n    # For checking if a compiler flag works, failing if it doesn't,\n    # and adding it otherwise.\n    #\n    macro(require_and_add_compiler_option _option)\n        message(STATUS \"Checking C compiler flag ${_option}\")\n        string(REPLACE \"=\" \"-\" _temp_option_variable ${_option})\n        string(REGEX REPLACE \"^-\" \"\" _option_variable ${_temp_option_variable})\n        check_c_compiler_flag(\"${_option}\" ${_option_variable})\n        if(${${_option_variable}})\n            set(C_ADDITIONAL_FLAGS \"${C_ADDITIONAL_FLAGS} ${_option}\")\n        else()\n            message(FATAL_ERROR \"C99 support is required, but the compiler doesn't support a compiler flag to enable it\")\n        endif()\n    endmacro()\n```\n\n----------------------------------------\n\nTITLE: Time and String Function Detection for libssh2\nDESCRIPTION: Performs checks for various time-related and string manipulation functions needed by libssh2, with platform-specific handling and fallbacks for functions like strtoll.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(HAVE_SYS_TIME_H)\n  check_symbol_exists(\"gettimeofday\" \"sys/time.h\" HAVE_GETTIMEOFDAY)\nelse()\n  check_function_exists(\"gettimeofday\" HAVE_GETTIMEOFDAY)\nendif()\ncheck_symbol_exists(\"strtoll\" \"stdlib.h\" HAVE_STRTOLL)\nif(NOT HAVE_STRTOLL)\n  # Try _strtoi64() if strtoll() is not available\n  check_symbol_exists(\"_strtoi64\" \"stdlib.h\" HAVE_STRTOI64)\nendif()\ncheck_symbol_exists(\"snprintf\" \"stdio.h\" HAVE_SNPRINTF)\nif(NOT WIN32)\n  check_symbol_exists(\"explicit_bzero\" \"string.h\" HAVE_EXPLICIT_BZERO)\n  check_symbol_exists(\"explicit_memset\" \"string.h\" HAVE_EXPLICIT_MEMSET)\n  check_symbol_exists(\"memset_s\" \"string.h\" HAVE_MEMSET_S)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Computing Numerical Values for Huffman Codes\nDESCRIPTION: Algorithm for generating Huffman codes as integers based on code lengths. This is step 2 of the process that finds the numerical value of the smallest code for each code length.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1951.txt#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ncode = 0;\nbl_count[0] = 0;\nfor (bits = 1; bits <= MAX_BITS; bits++) {\n    code = (code + bl_count[bits-1]) << 1;\n    next_code[bits] = code;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Library Names and Selected Library Type for libssh2\nDESCRIPTION: Sets up library name variables for both static and shared builds of libssh2, and selects which library type (static or shared) to use for examples and tests.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB_NAME \"libssh2\")\nset(LIB_STATIC \"${LIB_NAME}_static\")\nset(LIB_SHARED \"${LIB_NAME}_shared\")\n\n# lib flavour selected for example and test programs.\nif(BUILD_SHARED_LIBS)\n  set(LIB_SELECTED ${LIB_SHARED})\nelse()\n  set(LIB_SELECTED ${LIB_STATIC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Poll and Select Function Detection for libssh2\nDESCRIPTION: Detects availability of poll() and select() functions with special handling for platforms where poll() is known to be problematic, such as Darwin (macOS) and Interix.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\" OR\n   CMAKE_SYSTEM_NAME STREQUAL \"Interix\")\n  # poll() does not work on these platforms\n  #\n  # Interix: \"does provide poll(), but the implementing developer must\n  # have been in a bad mood, because poll() only works on the /proc\n  # filesystem here\"\n  #\n  # macOS poll() has funny behaviors, like:\n  # not being able to do poll on no filedescriptors (10.3?)\n  # not being able to poll on some files (like anything in /dev)\n  # not having reliable timeout support\n  # inconsistent return of POLLHUP where other implementations give POLLIN\n  message(STATUS \"poll use is disabled on this platform\")\nelseif(NOT WIN32)\n  check_function_exists(\"poll\" HAVE_POLL)\nendif()\nif(WIN32)\n  set(HAVE_SELECT 1)\nelse()\n  check_function_exists(\"select\" HAVE_SELECT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files in CMake\nDESCRIPTION: Configures the installation of header files for the libpcap library. Installs header files from the source directory to the include directory.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_61\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/pcap/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/pcap)\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/pcap.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/pcap-bpf.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/pcap-namedb.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Libgcrypt Backend for libssh2 in CMake\nDESCRIPTION: Detects and configures Libgcrypt as a cryptographic backend for libssh2. Sets up include directories, libraries, and compiler flags needed for integration.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(CRYPTO_BACKEND STREQUAL \"Libgcrypt\" OR NOT CRYPTO_BACKEND)\n\n  find_package(Libgcrypt ${_specific_crypto_requirement})\n\n  if(LIBGCRYPT_FOUND)\n    set(CRYPTO_BACKEND \"Libgcrypt\")\n    set(CRYPTO_BACKEND_DEFINE \"LIBSSH2_LIBGCRYPT\")\n    set(CRYPTO_BACKEND_INCLUDE_DIR ${LIBGCRYPT_INCLUDE_DIRS})\n    list(APPEND LIBSSH2_LIBS ${LIBGCRYPT_LIBRARIES})\n    list(APPEND LIBSSH2_LIBDIRS ${LIBGCRYPT_LIBRARY_DIRS})\n    list(APPEND LIBSSH2_PC_REQUIRES_PRIVATE \"libgcrypt\")\n    link_directories(${LIBGCRYPT_LIBRARY_DIRS})\n    if(LIBGCRYPT_CFLAGS)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LIBGCRYPT_CFLAGS}\")\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking for Hardware Timestamp Support on Linux\nDESCRIPTION: Checks if the Linux system has hardware timestamp support by looking for the linux/net_tstamp.h header file.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\n# Check for hardware timestamp support.\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    check_include_file(linux/net_tstamp.h HAVE_LINUX_NET_TSTAMP_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Generated CMake Configuration Files\nDESCRIPTION: Installs the previously generated `${PROJECT_NAME}Config.cmake` and `${PROJECT_NAME}ConfigVersion.cmake` files into the standard CMake package directory structure (`${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}/`). These files allow `find_package(${PROJECT_NAME})` to work correctly after installation. This is part of the 'devel' component.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    FILES\n        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\n        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}/\n    COMPONENT devel\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Static Library Target for LibSSH2\nDESCRIPTION: Configures the installation of the static library, including export targets. This is only done when BUILD_STATIC_LIBS is enabled.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_STATIC_LIBS)\n  install(TARGETS ${LIB_STATIC}\n    EXPORT \"${PROJECT_NAME}-targets\"\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for libssh2\nDESCRIPTION: Sets up debug logging configuration for libssh2, enabling it by default for debug builds and providing an option to explicitly enable or disable it.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Enable debugging logging by default if the user configured a debug build\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  set(DEBUG_LOGGING_DEFAULT ON)\nelse()\n  set(DEBUG_LOGGING_DEFAULT OFF)\nendif()\noption(ENABLE_DEBUG_LOGGING \"Log execution with debug trace\" ${DEBUG_LOGGING_DEFAULT})\nadd_feature_info(Logging ENABLE_DEBUG_LOGGING \"Logging of execution with debug trace\")\nif(ENABLE_DEBUG_LOGGING)\n  # Must be visible to the library and tests using internals\n  add_definitions(\"-DLIBSSH2DEBUG\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Shared Library Target for LibSSH2\nDESCRIPTION: Configures the installation of the shared library, including export targets. This is only done when BUILD_SHARED_LIBS is enabled.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/src/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n  install(TARGETS ${LIB_SHARED}\n    EXPORT \"${PROJECT_NAME}-targets\"\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\n\n  list(APPEND _RUNTIME_DEPENDENCIES $<TARGET_FILE:${LIB_SHARED}>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform Header Detection for libssh2\nDESCRIPTION: Checks for the existence of various system headers on different platforms, which affects how libssh2 will be built and which features will be available.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n## Platform checks\ncheck_include_files(\"inttypes.h\" HAVE_INTTYPES_H)\nif(NOT MSVC)\n  check_include_files(\"unistd.h\" HAVE_UNISTD_H)\n  check_include_files(\"sys/time.h\" HAVE_SYS_TIME_H)\nendif()\nif(NOT WIN32)\n  check_include_files(\"sys/select.h\" HAVE_SYS_SELECT_H)\n  check_include_files(\"sys/uio.h\" HAVE_SYS_UIO_H)\n  check_include_files(\"sys/socket.h\" HAVE_SYS_SOCKET_H)\n  check_include_files(\"sys/ioctl.h\" HAVE_SYS_IOCTL_H)\n  check_include_files(\"sys/un.h\" HAVE_SYS_UN_H)\n  check_include_files(\"arpa/inet.h\" HAVE_ARPA_INET_H)  # example and tests\n  check_include_files(\"netinet/in.h\" HAVE_NETINET_IN_H)  # example and tests\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TurboCap Support in CMake\nDESCRIPTION: Checks for and configures Riverbed TurboCap support by finding required headers and libraries. If found, adds necessary include directories and source files.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DISABLE_TC)\n    find_package(TC)\n    if(TC_FOUND)\n        include_directories(AFTER ${TC_INCLUDE_DIRS})\n        set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} pcap-tc.c)\n        set(HAVE_TC_API TRUE)\n        set(PCAP_LINK_LIBRARIES ${PCAP_LINK_LIBRARIES} ${TC_LIBRARIES} ${CMAKE_USE_PTHREADS_INIT} stdc++)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Core CMake Project Configuration\nDESCRIPTION: Sets up basic CMake project parameters including version requirements, project name, and language settings.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nproject(dnet VERSION 1.18.0 LANGUAGES C)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Architecture Support in CMake\nDESCRIPTION: Complex conditional logic to determine appropriate architectures (ppc, i386, x86_64, arm64) based on OS X version. Handles pre-Tiger through post-Catalina systems and sets architecture variables for both libraries and executables.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/CMakeLists.txt#2025-04-23_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE AND \"${CMAKE_OSX_ARCHITECTURES}\" STREQUAL \"\")\n    string(REGEX MATCH \"^([0-9]+)\" SYSTEM_VERSION_MAJOR \"${CMAKE_SYSTEM_VERSION}\")\n    if(SYSTEM_VERSION_MAJOR LESS 8)\n        set(OSX_LIBRARY_ARCHITECTURES \"ppc\")\n        set(OSX_EXECUTABLE_ARCHITECTURES \"ppc\")\n    #... [additional conditionals omitted for brevity]\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Public Headers for a CMake Target\nDESCRIPTION: Sets the `PUBLIC_HEADER` property for the CMake target `${PROJECT_NAME}`. This property lists the header files defined in the `DNET_HEADERS` variable, marking them as part of the target's public interface, which influences installation and usage requirements.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(\n    ${PROJECT_NAME}\n    PROPERTIES\n    PUBLIC_HEADER \"${DNET_HEADERS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Linking Libraries in CMake\nDESCRIPTION: Checks if the `DNET_LINK_LIBS` variable is not empty. If it contains library names, it links these libraries publicly to the `${PROJECT_NAME}` target using `target_link_libraries`. This allows for optional dependencies.\nSOURCE: https://github.com/nmap/nmap/blob/master/libdnet-stripped/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT(DNET_LINK_LIBS STREQUAL \"\"))\n    target_link_libraries(${PROJECT_NAME} PUBLIC ${DNET_LINK_LIBS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting AUTOCONF_VERSION environment variable for OpenBSD make\nDESCRIPTION: Command to set the AUTOCONF_VERSION environment variable before running make on OpenBSD systems, which may be necessary for the build process.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcap/INSTALL.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nAUTOCONF_VERSION=2.69 make\n```\n\n----------------------------------------\n\nTITLE: Creating Example Binaries for zlib\nDESCRIPTION: Builds example applications to demonstrate zlib functionality, including standard and 64-bit large file variants when supported.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(ZLIB_BUILD_EXAMPLES)\n    add_executable(example test/example.c)\n    target_link_libraries(example zlib)\n    add_test(example example)\n\n    add_executable(minigzip test/minigzip.c)\n    target_link_libraries(minigzip zlib)\n\n    if(HAVE_OFF64_T)\n        add_executable(example64 test/example.c)\n        target_link_libraries(example64 zlib)\n        set_target_properties(example64 PROPERTIES COMPILE_FLAGS \"-D_FILE_OFFSET_BITS=64\")\n        add_test(example64 example64)\n\n        add_executable(minigzip64 test/minigzip.c)\n        target_link_libraries(minigzip64 zlib)\n        set_target_properties(minigzip64 PROPERTIES COMPILE_FLAGS \"-D_FILE_OFFSET_BITS=64\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: ZLIB Function Declarations for Win16/Win32\nDESCRIPTION: DLL function declarations for ZLIB compression library supporting both 16-bit and 32-bit Windows. Includes core functions like compress, uncompress, gzopen, gzread, gzwrite, and gzclose.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/old/visual-basic.txt#2025-04-23_snippet_0\n\nLANGUAGE: Visual Basic\nCODE:\n```\n#If Win16 Then   'Use Win16 calls.\nDeclare Function compress Lib \"ZLIB.DLL\" (ByVal compr As \n        String, comprLen As Any, ByVal buf As String, ByVal buflen \n        As Long) As Integer\nDeclare Function uncompress Lib \"ZLIB.DLL\" (ByVal uncompr \n        As String, uncomprLen As Any, ByVal compr As String, ByVal \n        lcompr As Long) As Integer\nDeclare Function gzopen Lib \"ZLIB.DLL\" (ByVal filePath As \n        String, ByVal mode As String) As Long\nDeclare Function gzread Lib \"ZLIB.DLL\" (ByVal file As \n        Long, ByVal uncompr As String, ByVal uncomprLen As Integer) \n        As Integer\nDeclare Function gzwrite Lib \"ZLIB.DLL\" (ByVal file As \n        Long, ByVal uncompr As String, ByVal uncomprLen As Integer) \n        As Integer\nDeclare Function gzclose Lib \"ZLIB.DLL\" (ByVal file As \n        Long) As Integer\n#Else\nDeclare Function compress Lib \"ZLIB32.DLL\" \n        (ByVal compr As String, comprLen As Any, ByVal buf As \n        String, ByVal buflen As Long) As Integer\nDeclare Function uncompress Lib \"ZLIB32.DLL\" \n        (ByVal uncompr As String, uncomprLen As Any, ByVal compr As \n        String, ByVal lcompr As Long) As Long\nDeclare Function gzopen Lib \"ZLIB32.DLL\" \n        (ByVal file As String, ByVal mode As String) As Long\nDeclare Function gzread Lib \"ZLIB32.DLL\" \n        (ByVal file As Long, ByVal uncompr As String, ByVal \n        uncomprLen As Long) As Long\nDeclare Function gzwrite Lib \"ZLIB32.DLL\" \n        (ByVal file As Long, ByVal uncompr As String, ByVal \n        uncomprLen As Long) As Long\nDeclare Function gzclose Lib \"ZLIB32.DLL\" \n        (ByVal file As Long) As Long\n#End If\n```\n\n----------------------------------------\n\nTITLE: Building ZLib.Ada with GNAT Make\nDESCRIPTION: Command-line examples for building ZLib.Ada using GNAT. The first approach uses gnatmake directly linking the libz library, while the second approach uses a GNAT project file for GNAT 3.15 or later.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/contrib/ada/readme.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngnatmake test -largs -L<directory where libz.a is> -lz\n```\n\nLANGUAGE: bash\nCODE:\n```\ngnatmake -Pzlib.gpr -L<directory where libz.a is>\n```\n\n----------------------------------------\n\nTITLE: Generating Windows PCRE2GREP Test Batch File in CMake\nDESCRIPTION: Creates Windows-specific batch files for testing the pcre2grep utility on Windows platforms if it is being built.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\n    if(PCRE2_BUILD_PCRE2GREP)\n      file(\n        WRITE\n        ${PROJECT_BINARY_DIR}/pcre2_grep_test.bat\n        \"\\@REM This is a generated file.\n\\@echo off\nsetlocal\nSET srcdir=\\\"${winsrc}\\\"\nSET pcre2test=\\\"${winbin}\\\\pcre2test.exe\\\"\nif not [%CMAKE_CONFIG_TYPE%]==[] SET pcre2test=\\\"${winbin}\\\\%CMAKE_CONFIG_TYPE%\\\\pcre2test.exe\\\"\nSET pcre2grep=\\\"${winbin}\\\\pcre2grep.exe\\\"\nif not [%CMAKE_CONFIG_TYPE%]==[] SET pcre2grep=\\\"${winbin}\\\\%CMAKE_CONFIG_TYPE%\\\\pcre2grep.exe\\\"\ncall %srcdir%\\\\RunGrepTest.bat\nif errorlevel 1 exit /b 1\necho RunGrepTest.bat tests successfully completed\n\"\n      )\n\n      add_test(NAME pcre2_grep_test_bat COMMAND pcre2_grep_test.bat)\n      set_tests_properties(\n        pcre2_grep_test_bat\n        PROPERTIES PASS_REGULAR_EXPRESSION \"RunGrepTest\\\\.bat tests successfully completed\"\n      )\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenSSL License Text\nDESCRIPTION: Full text of the OpenSSL License, which is a BSD-style open source license. It outlines redistribution conditions, attribution requirements, and liability disclaimers for the OpenSSL Project.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n/* ====================================================================\n * Copyright (c) 1998-2008 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\"\n *\n * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    openssl-core@openssl.org.\n *\n * 5. Products derived from this software may not be called \"OpenSSL\"\n *    nor may \"OpenSSL\" appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\"\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n *\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows CNG Backend for libssh2 in CMake\nDESCRIPTION: Detects and configures Windows Cryptography Next Generation (WinCNG) as a cryptographic backend for libssh2. Handles Windows-specific requirements and optional ECDSA support for Windows 10+.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nif(CRYPTO_BACKEND STREQUAL \"WinCNG\" OR NOT CRYPTO_BACKEND)\n  if(WIN32)\n    set(CRYPTO_BACKEND \"WinCNG\")\n    set(CRYPTO_BACKEND_DEFINE \"LIBSSH2_WINCNG\")\n    set(CRYPTO_BACKEND_INCLUDE_DIR \"\")\n    list(APPEND LIBSSH2_LIBS \"crypt32\" \"bcrypt\")\n\n    option(ENABLE_ECDSA_WINCNG \"Enable WinCNG ECDSA support (requires Windows 10 or later)\" OFF)\n    add_feature_info(WinCNG ENABLE_ECDSA_WINCNG \"WinCNG ECDSA support\")\n    if(ENABLE_ECDSA_WINCNG)\n      add_definitions(\"-DLIBSSH2_ECDSA_WINCNG\")\n      if(MSVC)\n        set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /SUBSYSTEM:WINDOWS,10\")\n      elseif(MINGW)\n        set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--subsystem,windows:10\")\n      endif()\n    endif()\n  elseif(_specific_crypto_requirement STREQUAL \"REQUIRED\")\n    message(FATAL_ERROR \"WinCNG not available\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Variables for CRC Calculation in C\nDESCRIPTION: Declares global variables used for the CRC calculation. `crc_table` is an array to store precomputed CRC values for all 256 possible byte values, optimizing the calculation. `crc_table_computed` is a flag to indicate whether the `crc_table` has been initialized.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/doc/rfc1952.txt#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/* Table of CRCs of all 8-bit messages. */\nunsigned long crc_table[256];\n\n/* Flag: has the table been computed? Initially false. */\nint crc_table_computed = 0;\n```\n\n----------------------------------------\n\nTITLE: Displaying Original SSLeay License Text\nDESCRIPTION: Full text of the Original SSLeay License, which applies to cryptographic software written by Eric Young. It outlines redistribution conditions, attribution requirements, and liability disclaimers.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n * \n * This library is free for commercial and non-commercial use as long as\n * the following conditions are aheared to.  The following conditions\n * apply to all code found in this distribution, be it the RC4, RSA,\n * lhash, DES, etc., code; not just the SSL code.  The SSL documentation\n * included with this distribution is covered by the same copyright terms\n * except that the holder is Tim Hudson (tjh@cryptsoft.com).\n * \n * Copyright remains Eric Young's, and as such any Copyright notices in\n * the code are not to be removed.\n * If this package is used in a product, Eric Young should be given attribution\n * as the author of the parts of the library used.\n * This can be in the form of a textual message at program startup or\n * in documentation (online or textual) provided with the package.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *    \"This product includes cryptographic software written by\n *     Eric Young (eay@cryptsoft.com)\"\n *    The word 'cryptographic' can be left out if the rouines from the library\n *    being used are not cryptographic related :-).\n * 4. If you include any Windows specific code (or a derivative thereof) from \n *    the apps directory (application code) you must include an acknowledgement:\n *    \"This product includes software written by Tim Hudson (tjh@cryptsoft.com)\"\n * \n * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * \n * The licence and distribution terms for any publically available version or\n * derivative of this code cannot be changed.  i.e. this code cannot simply be\n * copied and put under another distribution licence\n * [including the GNU Public Licence.]\n */\n```\n\n----------------------------------------\n\nTITLE: GTK+ Library License Header in C\nDESCRIPTION: License header for the GTK+ (GIMP Toolkit) library, a multi-platform toolkit for creating graphical user interfaces. This LGPL license allows for redistribution and modification under specific conditions.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n/* GTK - The GIMP Toolkit\n * Copyright (C) 1995-1997 Peter Mattis, Spencer Kimball and Josh MacDonald\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n\n/*\n * Modified by the GTK+ Team and others 1997-2000.  See the AUTHORS\n * file for a list of people on the GTK+ Team.  See the ChangeLog\n * files for a list of changes.  These files are distributed with\n * GTK+ at ftp://ftp.gtk.org/pub/gtk/.\n */\n```\n\n----------------------------------------\n\nTITLE: Building Nmap Installer in Cygwin Shell\nDESCRIPTION: Command to build the Nmap installer and create executable installer and zip archive in the mswin32 directory.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/win32-installer-zenmap-buildguide.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Displaying libpng License in C Comments\nDESCRIPTION: This C-style comment block details the copyright information and the specific libpng license terms. It includes version history, contributing authors, disclaimers of warranty, and permissions granted for use, modification, and distribution, subject to certain conditions like retaining the copyright notice.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n/*\n * libpng version 1.2.44 - June 26, 2010\n * Copyright (c) 1998-2010 Glenn Randers-Pehrson\n * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)\n * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)\n *\n * This code is released under the libpng license (See LICENSE, below)\n */\n\n/*\n * COPYRIGHT NOTICE, DISCLAIMER, and LICENSE:\n *\n * If you modify libpng you may insert additional notices immediately following\n * this sentence.\n *\n * This code is released under the libpng license.\n *\n * libpng versions 1.2.6, August 15, 2004, through 1.2.44, June 26, 2010, are\n * Copyright (c) 2004, 2006-2010 Glenn Randers-Pehrson, and are\n * distributed according to the same disclaimer and license as libpng-1.2.5\n * with the following individual added to the list of Contributing Authors:\n *\n *    Cosmin Truta\n *\n * libpng versions 1.0.7, July 1, 2000, through 1.2.5, October 3, 2002, are\n * Copyright (c) 2000-2002 Glenn Randers-Pehrson, and are\n * distributed according to the same disclaimer and license as libpng-1.0.6\n * with the following individuals added to the list of Contributing Authors:\n *\n *    Simon-Pierre Cadieux\n *    Eric S. Raymond\n *    Gilles Vollant\n *\n * and with the following additions to the disclaimer:\n *\n *    There is no warranty against interference with your enjoyment of the\n *    library or against infringement.  There is no warranty that our\n *    efforts or the library will fulfill any of your particular purposes\n *    or needs.  This library is provided with all faults, and the entire\n *    risk of satisfactory quality, performance, accuracy, and effort is with\n *    the user.\n *\n * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are\n * Copyright (c) 1998, 1999, 2000 Glenn Randers-Pehrson, and are\n * distributed according to the same disclaimer and license as libpng-0.96,\n * with the following individuals added to the list of Contributing Authors:\n *\n *    Tom Lane\n *    Glenn Randers-Pehrson\n *    Willem van Schaik\n *\n * libpng versions 0.89, June 1996, through 0.96, May 1997, are\n * Copyright (c) 1996, 1997 Andreas Dilger\n * Distributed according to the same disclaimer and license as libpng-0.88,\n * with the following individuals added to the list of Contributing Authors:\n *\n *    John Bowler\n *    Kevin Bracey\n *    Sam Bushell\n *    Magnus Holmgren\n *    Greg Roelofs\n *    Tom Tanner\n *\n * libpng versions 0.5, May 1995, through 0.88, January 1996, are\n * Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.\n *\n * For the purposes of this copyright and license, \"Contributing Authors\"\n * is defined as the following set of individuals:\n *\n *    Andreas Dilger\n *    Dave Martindale\n *    Guy Eric Schalnat\n *    Paul Schmidt\n *    Tim Wegner\n *\n * The PNG Reference Library is supplied \"AS IS\".  The Contributing Authors\n * and Group 42, Inc. disclaim all warranties, expressed or implied,\n * including, without limitation, the warranties of merchantability and of\n * fitness for any purpose.  The Contributing Authors and Group 42, Inc.\n * assume no liability for direct, indirect, incidental, special, exemplary,\n * or consequential damages, which may result from the use of the PNG\n * Reference Library, even if advised of the possibility of such damage.\n *\n * Permission is hereby granted to use, copy, modify, and distribute this\n * source code, or portions hereof, for any purpose, without fee, subject\n * to the following restrictions:\n *\n * 1. The origin of this source code must not be misrepresented.\n *\n * 2. Altered versions must be plainly marked as such and\n * must not be misrepresented as being the original source.\n *\n * 3. This Copyright notice may not be removed or altered from\n *    any source or altered source distribution.\n *\n * The Contributing Authors and Group 42, Inc. specifically permit, without\n * fee, and encourage the use of this source code as a component to\n * supporting the PNG file format in commercial products.  If you use this\n * source code in a product, acknowledgment is not required but would be\n * appreciated.\n */\n```\n\n----------------------------------------\n\nTITLE: Finding External Package Dependencies for PCRE2\nDESCRIPTION: Searches for external library dependencies BZip2 and ZLIB that may be used by PCRE2 for compression support.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# external packages\nfind_package(BZip2)\nfind_package(ZLIB)\n```\n\n----------------------------------------\n\nTITLE: Displaying zlib License Text\nDESCRIPTION: This text block outlines the zlib license terms, crediting Jean-loup Gailly and Mark Adler. It's a permissive license allowing free use, modification, and redistribution (even for commercial purposes) with restrictions concerning origin misrepresentation, marking altered versions, and retaining the notice. It includes a standard 'as-is' warranty disclaimer.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n (C) 1995-2010 Jean-loup Gailly and Mark Adler\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n\n  Jean-loup Gailly        Mark Adler\n  jloup@gzip.org          madler@alumni.caltech.edu\n```\n\n----------------------------------------\n\nTITLE: Displaying libgailutil License (LGPL v2+) in C Comments\nDESCRIPTION: This C-style comment block contains the copyright notice and license terms for the GAIL (GNOME Accessibility Implementation Library). It states that the library is free software distributed under the GNU Library General Public License (LGPL), version 2 or later, and includes the standard warranty disclaimer.\nSOURCE: https://github.com/nmap/nmap/blob/master/docs/3rd-party-licenses.txt#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/* GAIL - The GNOME Accessibility Implementation Library\n * Copyright 2001 Sun Microsystems Inc.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Library General Public\n * License as published by the Free Software Foundation; either\n * version 2 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Library General Public License for more details.\n *\n * You should have received a copy of the GNU Library General Public\n * License along with this library; if not, write to the\n * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n * Boston, MA 02111-1307, USA.\n */\n```\n\n----------------------------------------\n\nTITLE: Initial Jhbuild Setup Commands\nDESCRIPTION: Initial setup commands for installing and configuring Jhbuild, including running the setup script and adding it to PATH.\nSOURCE: https://github.com/nmap/nmap/blob/master/macosx/BUNDLING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sh gtk-osx-build-setup.sh\n$ export PATH=$HOME/.local/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Building PCRE2 POSIX Test Executable in CMake\nDESCRIPTION: Conditionally builds the POSIX API test executable for PCRE2 when 8-bit mode is enabled.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\n  if(PCRE2_BUILD_PCRE2_8)\n    add_executable(pcre2posix_test src/pcre2posix_test.c)\n    target_link_libraries(pcre2posix_test pcre2-posix pcre2-8)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Restoring MSVC Warning State for libssh2\nDESCRIPTION: Restores the previous warning settings after completing function detection tests with MSVC, reverting any temporary changes made to facilitate detection.\nSOURCE: https://github.com/nmap/nmap/blob/master/libssh2/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC AND ENABLE_WERROR)\n  cmake_pop_check_state()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building PCRE2 JIT Test Executable in CMake\nDESCRIPTION: Conditionally builds the JIT (Just-In-Time compiler) test executable if JIT support is enabled in the PCRE2 build.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\n  if(PCRE2_SUPPORT_JIT)\n    add_executable(pcre2_jit_test src/pcre2_jit_test.c)\n    set(PCRE2_JIT_TEST_LIBS)\n    if(PCRE2_BUILD_PCRE2_8)\n      list(APPEND PCRE2_JIT_TEST_LIBS pcre2-8)\n    endif()\n    if(PCRE2_BUILD_PCRE2_16)\n      list(APPEND PCRE2_JIT_TEST_LIBS pcre2-16)\n    endif()\n    if(PCRE2_BUILD_PCRE2_32)\n      list(APPEND PCRE2_JIT_TEST_LIBS pcre2-32)\n    endif()\n    target_link_libraries(pcre2_jit_test ${PCRE2_JIT_TEST_LIBS})\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Checking for fseeko Function Support\nDESCRIPTION: Checks if the fseeko function exists for file seeking operations and adds a definition if it's not available.\nSOURCE: https://github.com/nmap/nmap/blob/master/libz/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_function_exists(fseeko HAVE_FSEEKO)\nif(NOT HAVE_FSEEKO)\n    add_definitions(-DNO_FSEEKO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Windows Test Batch Files for PCRE2 in CMake\nDESCRIPTION: Creates Windows-specific batch files for running PCRE2 tests on Windows platforms, with proper path handling for different environments.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WIN32)\n    # Provide environment for executing the bat file version of RunTest\n    file(TO_NATIVE_PATH ${PROJECT_SOURCE_DIR} winsrc)\n    file(TO_NATIVE_PATH ${PROJECT_BINARY_DIR} winbin)\n\n    file(\n      WRITE\n      ${PROJECT_BINARY_DIR}/pcre2_test.bat\n      \"\\@REM This is a generated file.\n\\@echo off\nsetlocal\nSET srcdir=\\\"${winsrc}\\\"\nSET pcre2test=\\\"${winbin}\\\\pcre2test.exe\\\"\nif not [%CMAKE_CONFIG_TYPE%]==[] SET pcre2test=\\\"${winbin}\\\\%CMAKE_CONFIG_TYPE%\\\\pcre2test.exe\\\"\ncall %srcdir%\\\\RunTest.bat\nif errorlevel 1 exit /b 1\necho RunTest.bat tests successfully completed\n\"\n    )\n\n    add_test(NAME pcre2_test_bat COMMAND pcre2_test.bat)\n    set_tests_properties(pcre2_test_bat PROPERTIES PASS_REGULAR_EXPRESSION \"RunTest\\\\.bat tests successfully completed\")\n```\n\n----------------------------------------\n\nTITLE: Installing Visual Studio Debug Files for PCRE2 in CMake\nDESCRIPTION: Conditionally installs Visual Studio Program Database (PDB) files for debugging when building with MSVC and debug info is requested.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC AND INSTALL_MSVC_PDB)\n  install(FILES ${DLL_PDB_FILES} DESTINATION bin CONFIGURATIONS RelWithDebInfo)\n  install(FILES ${DLL_PDB_DEBUG_FILES} DESTINATION bin CONFIGURATIONS Debug)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing for realpath Function in PCRE2 Build\nDESCRIPTION: Checks if the realpath function is available on the system by compiling a test program that uses it. Sets HAVE_REALPATH if the function exists.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_c_source_compiles(\n  [=[\n  #include <stdlib.h>\n  #include <limits.h>\n  int main(int c, char *v[]) { char buf[PATH_MAX]; realpath(v[c], buf); return 0; }\n  ]=]\n  HAVE_REALPATH\n)\n```\n\n----------------------------------------\n\nTITLE: Maintainers Table in Markdown\nDESCRIPTION: A markdown table listing the current maintainers of PCRE2, their roles, and contact information.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/AUTHORS.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n<thead>\n<tr>\n  <th>Name</th>\n  <th>Role</th>\n<tr>\n</thead>\n<tbody>\n<tr>\n  <td>\n\n  Nicholas Wilson<br/>\n  `nicholas@nicholaswilson.me.uk`<br/>\n  Currently of Microsoft Research Cambridge, UK\n\n  </td>\n  <td>\n\n  * General project administration & maintenance\n  * Release management\n  * Code maintenance\n\n  </td>\n</tr>\n<tr>\n  <td>\n\n  Zoltán Herczeg<br/>\n  `hzmester@freemail.hu`<br/>\n  Currently of the University of Szeged, Hungary\n\n  </td>\n  <td>\n\n  * Code maintenance\n  * Ownership of `sljit` and PCRE2's JIT\n\n  </td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Running PCRE2 Configuration Script on OpenVMS using DCL\nDESCRIPTION: This command executes the `CONFIGURE.COM` script located in the `[.VMS]` subdirectory. This step is necessary to configure the PCRE2 build environment for the OpenVMS platform before compilation. It prepares the source code and build system based on the system's specifics and requires bzip2 and zlib libraries to be available.\nSOURCE: https://github.com/nmap/nmap/blob/master/libpcre/vms/openvms_readme.txt#2025-04-23_snippet_0\n\nLANGUAGE: dcl\nCODE:\n```\n@[.VMS]CONFIGURE.COM\n```\n\n----------------------------------------\n\nTITLE: Bootstrap and Core GTK Installation\nDESCRIPTION: Commands to bootstrap GTK-OSX and install core dependencies using Jhbuild.\nSOURCE: https://github.com/nmap/nmap/blob/master/macosx/BUNDLING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ jhbuild bootstrap-gtk-osx\n$ jhbuild build meta-gtk-osx-bootstrap\n$ jhbuild build meta-gtk-osx-core\n```\n\n----------------------------------------\n\nTITLE: Python2 and GTK Bindings Installation\nDESCRIPTION: Series of commands to install Python2 and its GTK bindings, including pycairo configuration.\nSOURCE: https://github.com/nmap/nmap/blob/master/macosx/BUNDLING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ jhbuild build python\n$ jhbuild build pycairo\n$ rm -rf ~/.cache/jhbuild/build/pycairo-*\n$ sed -i 's/python3/python2/' ~/gtk/source/pycairo-*/meson_options.txt\n$ jhbuild build pycairo\n$ jhbuild build meta-gtk-osx-python\n```\n\n----------------------------------------\n\nTITLE: Implementing Getter Method for NpingOps Class in C++\nDESCRIPTION: Template implementation of a getter method for the NpingOps class. The method returns the current value of the attribute regardless of whether it has been explicitly set.\nSOURCE: https://github.com/nmap/nmap/blob/master/nping/nping-dev/pythonscripts/TemplateNpingOps.txt#2025-04-23_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n/** Returns value of attribute ATTRNAME */    \nTYPE NpingOps::getMETHNAME(){\n\n    return this->ATTRNAME;    \n    \n} /* End of getMETHNAME() */\n```\n\n----------------------------------------\n\nTITLE: Debugging Missing Hexdump in Nping ARP Mode\nDESCRIPTION: This snippet shows the command and output when running Nping in ARP mode with high verbosity (`-vvv`) and debug level (`-d1`). It illustrates a bug (marked as fixed) where the hexdump for received ARP replies was not displayed, while the hexdump for sent ARP requests was correctly shown. This output was used to diagnose the issue.\nSOURCE: https://github.com/nmap/nmap/blob/master/todo/nping.txt#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo nping --arp 192.168.240.139 -vvv -d1\n\nStarting Nping 0.5.59BETA1 ( https://nmap.org/nping ) at 2011-07-11 12:32 CEST\nBPF-filter: arp and arp[6]==0x00 and arp[7]==0x02\nSENT (0.0562s) ARP who has 192.168.240.139? Tell 192.168.240.1\n0000   ff ff ff ff ff ff 00 50  56 c0 00 01 08 06 00 01  .......PV.......\n0010   08 00 06 04 00 01 00 50  56 c0 00 01 c0 a8 f0 01  .......PV.......\n0020   00 00 00 00 00 00 c0 a8  f0 8b                    ..........      \nRCVD (0.0568s) ARP reply 192.168.240.139 is at 00:0C:29:E4:90:CD\nSENT (1.0580s) ARP who has 192.168.240.139? Tell 192.168.240.1\n0000   ff ff ff ff ff ff 00 50  56 c0 00 01 08 06 00 01  .......PV.......\n0010   08 00 06 04 00 01 00 50  56 c0 00 01 c0 a8 f0 01  .......PV.......\n0020   00 00 00 00 00 00 c0 a8  f0 8b                    ..........      \n```"
  }
]