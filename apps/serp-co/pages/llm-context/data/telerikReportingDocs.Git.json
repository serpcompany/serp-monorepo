[
  {
    "owner": "telerik",
    "repo": "reporting-docs.git",
    "content": "TITLE: Using If Function in Telerik Reporting Expressions\nDESCRIPTION: Demonstrates how to use the If function to check conditions and return different values based on the result. Examples include checking budget status, performing calculations based on conditions, and handling null values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/conditional-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n=If(Fields.A > Fields.B, \"Over Budget\", \"OK\")\n=If(Fields.A = 500, Fields.B - Fields.C, \"\")\n=If(Fields.VendorID, Sum(Fields.ContractAmount), \"\")\n=If(Fields.VendorName IS null, \"\", Sum(Fields.ContractAmount))\n```\n\n----------------------------------------\n\nTITLE: Dynamically Styling React Report Viewer Using useState Hook in TypeScript\nDESCRIPTION: This code example demonstrates how to dynamically control the styling of a Telerik React Report Viewer using the useState hook. The component initializes with base styling and includes a button that can hide the viewer by updating the styles state object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-dynamically-style-react-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { TelerikReportViewer } from '@progress/telerik-react-report-viewer/dist/cjs/main';\n\nexport function ReportViewer() {\n\n\tlet viewer;\n\n\tconst [styles, setStyles] = useState({\n\t\tposition: 'absolute',\n\t\tleft: '5px',\n\t\tright: '5px',\n\t\ttop: '40px',\n\t\tbottom: '5px',\n\t\toverflow: 'hidden',\n\t\tclear: 'both',\n\t\tfontFamily: 'ms sans serif'\n\t})\n\n\treturn (\n\t\t<>\n\t\t\t<TelerikReportViewer\n\t\t\t\tref={el => viewer = el}\n\t\t\t\tserviceUrl=\"http://localhost:59655/api/reports/\"\n\t\t\t\treportSource={{\n\t\t\t\t\treport: 'Barcodes Report.trdp',\n\t\t\t\t}}\n\t\t\t\tviewerContainerStyle={styles}\n\t\t\t\tviewMode=\"INTERACTIVE\"\n\t\t\t\tscaleMode=\"SPECIFIC\"\n\t\t\t\tscale={1.0}\n\t\t\t\tenableAccessibility={false} />\n\t\t\t<button onClick={() => setStyles(prev => ({ ...prev, display: \"none\" }))}>Hide</button>\n\t\t</>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Report Viewer Configuration Parameters Specification\nDESCRIPTION: Configuration parameters table defining the positioning, behavior, and appearance settings for the Telerik Report Viewer component. Includes parameters for UI element positioning, search functionality, background images, and client session management.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/api-reference/options.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| __parametersAreaPosition__ | *string*, *optional*. Specifies where the Parameters Area should be displayed <br/>The available values are: <ul><li>*\"RIGHT\"*</li> <li>*\"TOP\"*</li> <li>*\"LEFT\"*</li> <li>*\"BOTTOM\"*</li></ul>Default value: *RIGHT*;|\n| __documentMapAreaPosition__ | *string*, *optional*. Specifies where the Document Map should be displayed <br/>The available values are: <ul><li>*\"RIGHT\"*</li> <li>*\"LEFT\"*</li></ul>Default value: *LEFT*;|\n| __searchMetadataOnDemand__ | *boolean*, *optional*. Determines whether the search metadata will be delivered on demand __(true)__ or by default __(false)__. <br/>Default value: *false*;|\n| __initialPageAreaImageUrl__ | *string*, *optional*. The image URL for the PageArea background image. Used only when the parameter values are missing or invalid. The image should be in __PNG__, __GIF__, or __JPG__ file format.|\n| __keepClientAlive__ | *boolean* | *optional*. Determines whether the client will be kept alive. When set to true expiration of the client will be prevented by continually sending a request to the server, determined by the Reporting REST service's __ClientSessionTimeout__. <br/>Default Value is: *true*;|\n```\n\n----------------------------------------\n\nTITLE: Setting View Mode for HTML5 Report Viewer\nDESCRIPTION: Demonstrates how to change the view mode of a Telerik Report Viewer using the viewMode method. The method takes a view mode parameter and returns the current ReportViewer object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/viewmode(vm).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.viewMode(telerikReportViewer.PrintModes.PRINT_PREVIEW);\n```\n\n----------------------------------------\n\nTITLE: Adding jQuery Dependency\nDESCRIPTION: HTML script tag to include jQuery from CDN in the React application\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-html5-viewer-in-react-js.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Executing Expression in Body Scope Context (C#)\nDESCRIPTION: Demonstrates the use of Exec function with two scope parameters to execute an expression in the context of a specific body scope in a crosstab.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/data-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n=Sum(Fields.LineTotal) / Exec('Year', 'Category', Sum(Fields.LineTotal))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ReportSource Resolver for Complex Reports in C#\nDESCRIPTION: This implementation of IReportSourceResolver can retrieve Report Books and Reports with SubReports from a Report Server instance. It resolves nested reports by recursively fetching their definitions, replacing UriReportSources with InstanceReportSources, and handling different report formats (trdx, trbp).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/displaying-reportbooks-and-reports-with-subreports-from-report-server-using-custom-report-source-resolver.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomReportSourceResolver : IReportSourceResolver\n{\n\tpublic Telerik.Reporting.ReportSource Resolve(string reportId, OperationOrigin operationOrigin, IDictionary<string, object> currentParameterValues)\n\t{\n\t\tvar report = GetReportDocument(reportId);\n\t\tInstanceReportSource rs = new InstanceReportSource() { ReportDocument = report };\n\t\treturn rs;\n\t}\n\n\tpublic IReportDocument GetReportDocument(string reportId)\n\t{\n\t\tvar categoryAndReport = reportId.Split(new char[] { '/' });\n\t\tvar categoryName = categoryAndReport[0];\n\t\tvar reportName = categoryAndReport[1];\n\n\t\tvar settings = new Telerik.ReportServer.HttpClient.Settings()\n\t\t{\n\t\t\tBaseAddress = \"http://localhost:83/\"\n\t\t};\n\t\tTelerik.Reporting.IReportDocument report = null;\n\n\t\tusing (var rsClient = new ReportServerClient(settings))\n\t\t{\n\t\t\trsClient.Login(\"admin\", \"password\");\n\t\t\tvar categories = rsClient.GetCategories();\n\t\t\tvar myCategoryId = categories.Where(item => item.Name == categoryName).First().Id;\n\t\t\tvar reportInfos = rsClient.GetReportInfosInCategory(myCategoryId);\n\t\t\tvar myReportId = reportInfos.Where(item => item.Name == reportName).First().Id;\n\n\t\t\tvar reportDefinition = rsClient.GetLatestReportRevision(myReportId);\n\t\t\tvar extension = reportDefinition.Extension;\n\n\t\t\tusing (var sourceStream = new MemoryStream(reportDefinition.Content))\n\t\t\t{\n\t\t\t\tif (extension.Contains(\"trdx\"))\n\t\t\t\t{\n\t\t\t\t\tusing (System.Xml.XmlReader xmlReader = System.Xml.XmlReader.Create(sourceStream))\n\t\t\t\t\t{\n\t\t\t\t\t\tReportXmlSerializer xmlSerializer = new ReportXmlSerializer();\n\n\t\t\t\t\t\treport = ResolveSubReports((Report)xmlSerializer.Deserialize(xmlReader));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar reportPackager = new ReportPackager();\n\t\t\t\t\tif (extension.Contains(\"trbp\"))\n\t\t\t\t\t{\n\t\t\t\t\t\treport = ResolveReportBookMembers((ReportBook)reportPackager.UnpackageDocument(sourceStream));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treport = ResolveSubReports((Report)reportPackager.UnpackageDocument(sourceStream));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn report;\n\t}\n\n\tpublic ReportBook ResolveReportBookMembers(ReportBook reportBook)\n\t{\n\t\tvar invalidReportSourceIds = reportBook.ReportSources.Select(x => ((UriReportSource)x).Uri).ToList();\n\t\treportBook.ReportSources.Clear();\n\t\tforeach (var id in invalidReportSourceIds)\n\t\t{\n\t\t\tIReportDocument report = GetReportDocument(id);\n\t\t\tInstanceReportSource reportIRS = new InstanceReportSource() { ReportDocument = report };\n\t\t\treportBook.ReportSources.Add(reportIRS);\n\t\t}\n\t\treturn reportBook;\n\t}\n\n\tpublic Report ResolveSubReports(Report report)\n\t{\n\t\tforeach (ReportItem reportItem in report.Items.Find(typeof(SubReport), true))\n\t\t{\n\t\t\tvar id = ((UriReportSource)((SubReport)reportItem).ReportSource).Uri;\n\t\t\tvar subReport = GetReportDocument(id);\n\t\t\tvar subReportIRS = new InstanceReportSource() { ReportDocument = subReport };\n\n\t\t\t((SubReport)reportItem).ReportSource = subReportIRS;\n\t\t}\n\t\treturn report;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Report Parameters at Runtime\nDESCRIPTION: Demonstrates how to access and manipulate report parameters through the Telerik.Reporting.Processing.Report.Parameters dictionary at runtime\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/using-report-parameters-programmatically.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Accessing report parameters at runtime\nReport.Parameters[\"ParameterName\"]\n```\n\n----------------------------------------\n\nTITLE: Date Calculation Expression in Telerik Reporting\nDESCRIPTION: Expression that adds 7 days to a submission date to calculate a work completion date. Uses AddDays method with type conversion.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/calculated-fields.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n=Fields.SubmittedDate.AddDays(CDbl(7))\n```\n\n----------------------------------------\n\nTITLE: Installing Telerik Reporting Schematics with NPM\nDESCRIPTION: This snippet installs the Native Angular Report Viewer Schematic via NPM, a prerequisite for using the Telerik Reporting Productivity Tools in Angular applications. The '@progress/telerik-reporting-schematics' package is needed, and if authentication errors occur, logging in on npmjs.com is necessary.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/integrating-with-project-item-generator.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install @progress/telerik-reporting-schematics\n```\n\nLANGUAGE: powershell\nCODE:\n```\nnpm login --registry=https://registry.npmjs.org --scope=@progress\n```\n\n----------------------------------------\n\nTITLE: Report Definition - Type Report Definition\nDESCRIPTION: Describes how report definitions are handled in Visual Studio's Report Designer. The designer creates classes inheriting `Telerik.Reporting.Report`, called Type Report Definitions. These definitions (CLR, CS, or VB) can be passed to the Reporting engine via the `TypeReportSource`.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/about-telerik-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIf you design a report in the Report Designer for Visual Studio, the result is a class inheriting `Telerik.Reporting.Report`. These are the so-called __Type Report Definitions__. They may be referenced also as _CLR_ (Common Language Runtime), _CS_ (C Sharp), or _VB_ (Visual Basic) report definitions. These separate CLR types may be passed to the Reporting engine through the built-in [TypeReportSource](/api/telerik.reporting.typereportsource).\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML5 Report Viewer Page with jQuery and Kendo UI\nDESCRIPTION: Complete HTML page setup for the Telerik HTML5 Report Viewer including required jQuery and Kendo UI dependencies, styling, and viewer initialization. The viewer is configured to display a barcode report with specific view and scale modes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer-in-asp.net-core-2.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title></title>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\" integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\" crossorigin=\"anonymous\"></script>\n    <link href=\"http://cdn.kendostatic.com/2022.1.301/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n    <link href=\"http://cdn.kendostatic.com/2022.1.301/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n    <script src=\"telerikReportViewer.kendo-<token>buildversion</token>\"></script>\n    <script src=\"/api/reports/resources/js/telerikReportViewer-<token>buildversion</token>\"></script>\n    <style>\n        #reportViewer1 {\n            position: absolute;\n            left: 5px;\n            right: 5px;\n            top: 50px;\n            bottom: 5px;\n            overflow: hidden;\n            font-family: Verdana, Arial;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"reportViewer1\">\n        loading...\n    </div>\n    <script>\n        $(document).ready(function () {\n            $(\"#reportViewer1\")\n             .telerik_ReportViewer({\n                    serviceUrl: \"api/reports/\",\n                    reportSource: {\n                        //report: \"Telerik.Reporting.Examples.CSharp.ReportCatalog, CSharp.ReportLibrary\",\n                        report: \"Barcodes Report.trdp\",\n                        parameters: {}\n                    },\n                    viewMode: telerikReportViewer.ViewModes.INTERACTIVE,\n                    scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,\n                    scale: 1.0\n                });\n        });\n    </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Packaging CLR Report Definition in Telerik Reporting with C#\nDESCRIPTION: This code snippet demonstrates how to package a predefined CLR (C#) report definition using the ReportPackager class. It loads the report object and packages it into a .TRDP file, storing the compiled report definition and its resources in a compressed format.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/package-report-definition.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.Report report = new MyReportClass();\nstring packageFilePath = @\"C:\\Packages\\MyClrReport.trdp\";\n\nTelerik.Reporting.ReportPackager reportPackager = new Telerik.Reporting.ReportPackager();\nusing (FileStream packageStream = new FileStream(packageFilePath, FileMode.Create))\n{\n    reportPackager.Package(report, packageStream);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Function in Telerik Reporting Expressions\nDESCRIPTION: Creates an array of object instances. This function takes multiple arguments and returns them as an array.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/utility-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n=Array(\"item1\",\"item2\")\n```\n\n----------------------------------------\n\nTITLE: React Report Viewer Event Callback Functions\nDESCRIPTION: Comprehensive list of callback functions available in the React Report Viewer component. These events handle various operations including initialization, export, print, rendering, email sending, UI updates, page handling, error management, and interactive actions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/api-reference/events.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  ready: function(), // Called when viewer content is loaded\n  exportBegin: function(e, args), // Called before report export\n  exportEnd: function(e, args), // Called when export is ready\n  printBegin: function(e, args), // Called before print command\n  printEnd: function(e, args), // Called when print document is ready\n  renderingBegin: function(e, args), // Called when rendering starts\n  renderingEnd: function(e, args), // Called when rendering ends\n  sendEmailBegin: function(e, args), // Called before email is sent\n  sendEmailEnd: function(e, args), // Called after export, before email send\n  updateUi: function(e), // Called when UI needs update\n  pageReady: function(e, args), // Called when page is rendered\n  error: function(e, args), // Called on error occurrence\n  interactiveActionExecuting: function(e, args), // Called before interactive action\n  interactiveActionEnter: function(e, args), // Called on mouse enter\n  interactiveActionLeave: function(e, args), // Called on mouse leave\n  viewerToolTipOpening: function(e, args) // Called when tooltip opens\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CORS Policy in ConfigureServices Method\nDESCRIPTION: C# code for adding a CORS policy to enable cross-origin requests to the Reporting REST Service. This adds a policy that allows any origin, method, and header.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-5.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddCors(corsOption => corsOption.AddPolicy(\n\t\"ReportingRestPolicy\",\n\tcorsBuilder =>\n\t{\n\t\tcorsBuilder.AllowAnyOrigin()\n\t\t\t.AllowAnyMethod()\n\t\t\t.AllowAnyHeader();\n\t}\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductRepository with Dependency Injection in C#\nDESCRIPTION: This snippet shows how to create a ProductRepository class that depends on an injected database context. It demonstrates the challenge of using such a class with Telerik Reporting's ObjectDataSource due to the lack of a parameterless constructor.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-inject-custom-dependency-in-reports-controller-of-dot-net-core-application.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ProductRepository : IProductRepository\n{\n    private readonly ApplicationDbContext context;\n\n    public ProductRepository(ApplicationDbContext context)\n    {\n        this.context = context;\n    }\n\n    public IEnumerable<Product> GetProducts()\n    {\n        // return the data here, e.g.\n        return this.context.Product.Take(20).ToList();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding ObjectDataSource to DataTable in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a DataTable, add a calculated field, configure an ObjectDataSource, and set up a report to use it. It also shows how to preview the report in a Windows Forms Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/bind-to-data-table.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void HowToBindToDataTable()\n{\n    DataTable dt = new DataTable();\n    dt.Columns.Add(\"ProductID\", typeof(int));\n    dt.Columns.Add(\"ProductName\", typeof(string));\n    dt.Columns.Add(\"UnitPrice\", typeof(decimal));\n    dt.Columns.Add(\"UnitsInStock\", typeof(Int16));\n    dt.Rows.Add(1, \"Chai\", 18.00, 39);\n    dt.Rows.Add(2, \"Chang\", 19.00, 17);\n    dt.Rows.Add(3, \"Aniseed Syrup\", 10.00, 13);\n\n    DataColumn calcColumn = new DataColumn(\"Total\");\n    calcColumn.DataType = typeof(decimal);\n    calcColumn.Expression = \"UnitPrice * UnitsInStock\";\n    dt.Columns.Add(calcColumn);\n\n    ObjectDataSource objectDataSource = new ObjectDataSource();\n    objectDataSource.DataSource = dt;\n\n    Report report = new Report();\n    report.DataSource = objectDataSource;\n\n    ReportProcessor reportProcessor = new ReportProcessor();\n    RenderingResult result = reportProcessor.RenderReport(\"PDF\", report, null);\n\n    System.IO.File.WriteAllBytes(\"report.pdf\", result.DocumentBytes);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Report with C#\nDESCRIPTION: This code snippet demonstrates how to create a Telerik Reporting report using C#. It instantiates a Report object, sets up a SQL data source with a specified connection string, and assigns that data source to the report. The select command retrieves data from the Sales.Store table in the AdventureWorks database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/create-report-programmatically.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.Report report = new Telerik.Reporting.Report();\nstring selectCommand = @\"SELECT * FROM Sales.Store\";\nstring connectionString = \"Data Source=(local)\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True\";\nTelerik.Reporting.SqlDataSource sqlDataSource = new Telerik.Reporting.SqlDataSource(connectionString, selectCommand);\nreport.DataSource = sqlDataSource;\n```\n\n----------------------------------------\n\nTITLE: Configuring Blazor Report Viewer Source\nDESCRIPTION: Example of setting up a ReportSource for the Blazor Report Viewer using ReportSourceOptions model with parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_5\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer ViewerId=\"rv1\"\n\t\t\t...\n\t\t\tReportSource=\"@(new ReportSourceOptions\n\t\t\t\t\t{\n\t\t\t\t\t\tReport = \"Product Line Sales.trdp\",\n\t\t\t\t\t\t//or \"Telerik.Reporting.Examples.CSharp.ProductLineSales, CSharp.ReportLibrary\",\n\t\t\t\t\t\tParameters = new Dictionary<string, object>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t{ \"ProductCategory\", \"Clothing\" },\n\t\t\t\t\t\t\t{ \"ProductSubcategory\", new [] { \"Caps\", \"Gloves\" } }\n\t\t\t\t\t\t}\n\t\t\t\t\t})\"\n\t\t\t.../>\n```\n\n----------------------------------------\n\nTITLE: Using Blazor Report Viewer with REST Service in CSHTML\nDESCRIPTION: This code snippet demonstrates how to place the Blazor Report Viewer component in a Razor page and configure it to use a Telerik Reporting web service. It sets the `ServiceUrl`, `ReportSource`, `Parameters`, `ScaleMode`, and `Scale` properties. When referencing the Reports service from another application, the `ServiceUrl` setting should be the absolute URI to the service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/how-to-use-blazor-report-viewer.md#2025-04-21_snippet_5\n\nLANGUAGE: CSHTML\nCODE:\n```\n````CSHTML\n@page \"/\"\n\t@* For Blazor Web Apps, an interactive render mode should be used, for example: *@\n\t@* @rendermode InteractiveServer *@\n\t@using Telerik.ReportViewer.Blazor\n\t<style>\n\t\t#rv1 {\n\t\t\tposition: relative;\n\t\t\twidth: 1200px;\n\t\t\theight: 600px;\n\t\t}\n\t</style>\n\t<ReportViewer ViewerId=\"rv1\"\n\t\t\t\t  ServiceUrl=\"/api/reports\"\n\t\t\t\t  ReportSource=\"@(new ReportSourceOptions()\n\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\tReport = \\\"YOUR_REPORT_HERE.trdp\\\"\n\t\t\t\t\t\t\t\t  })\"\n\t\t\t\t  Parameters=\"@(new ParametersOptions { Editors = new EditorsOptions { MultiSelect = EditorType.ComboBox, SingleSelect = EditorType.ComboBox } })\"\n\t\t\t\t  ScaleMode=\"@(ScaleMode.Specific)\"\n\t\t\t\t  Scale=\"1.0\" />\n````\n```\n\n----------------------------------------\n\nTITLE: Setting Report Parameter in NeedDataSource Event Handler\nDESCRIPTION: Shows how to programmatically set a report parameter's value within the NeedDataSource event handler, specifically for connecting to a SQL data source\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/using-report-parameters-programmatically.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void Report_NeedDataSource(object sender, EventArgs e)\n{\n    Report report = sender as Report;\n    report.Parameters[\"ManagerID\"].Value = selectedManagerId;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SqlDataSource with Stored Procedure in C#\nDESCRIPTION: This C# code snippet demonstrates how to configure a SqlDataSource component to use a stored procedure by setting the SelectCommand and SelectCommandType properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/selecting-data-with-the-sqldatasource-component.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nSqlDataSource sqlDataSource = new SqlDataSource();\nsqlDataSource.ConnectionString = \"Data Source=MYSERVER;Initial Catalog=AdventureWorks;Integrated Security=True\";\nsqlDataSource.SelectCommand = \"GetAllContacts\";\nsqlDataSource.SelectCommandType = SqlCommandType.StoredProcedure;\n```\n\n----------------------------------------\n\nTITLE: Handling ItemDataBinding Event in Telerik Reporting\nDESCRIPTION: This snippet demonstrates how to handle the ItemDataBinding event to modify the properties of a processing item before it gets data-bound. The event handler receives the processing item instance as a parameter, which allows for custom modifications based on the current data context.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/understanding-events.md#2025-04-21_snippet_1\n\nLANGUAGE: .NET\nCODE:\n```\nprivate void TextBox_ItemDataBinding(object sender, EventArgs e)\n{\n    var processingItem = (Telerik.Reporting.Processing.TextBox)sender;\n    // Modify properties of processing item here\n    processingItem.Style.Color = System.Drawing.Color.Red;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding ObjectDataSource to SqlDataAdapter in C#\nDESCRIPTION: This code snippet demonstrates how to create a SqlDataAdapter, configure an ObjectDataSource to use it, and set up a report with a calculated field. It also shows how to preview the report in a Windows Forms Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/bind-to-data-adapter.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void BindToDataAdapter()\n{\n    Report report = new Report();\n    DetailSection detail = new DetailSection();\n    report.Items.Add(detail);\n\n    // Create the ObjectDataSource component\n    Telerik.Reporting.ObjectDataSource objectDataSource = new Telerik.Reporting.ObjectDataSource();\n\n    SqlConnection sqlConnection = new SqlConnection(\"connection string\");\n    SqlDataAdapter sqlDataAdapter = new SqlDataAdapter(\"SELECT * FROM Employees\", sqlConnection);\n\n    // Specify the data adapter\n    objectDataSource.DataSource = sqlDataAdapter;\n    objectDataSource.DataMember = \"Table\";\n\n    // Add a calculated field\n    Telerik.Reporting.CalculatedField calculatedField = new Telerik.Reporting.CalculatedField();\n    calculatedField.Name = \"FullName\";\n    calculatedField.Expression = \"FirstName + \\\" \\\" + LastName\";\n    objectDataSource.CalculatedFields.Add(calculatedField);\n\n    // Set the data source of the report\n    report.DataSource = objectDataSource;\n\n    // Add a TextBox item to the detail section to display the calculated field\n    Telerik.Reporting.TextBox textBox = new Telerik.Reporting.TextBox();\n    textBox.Size = new SizeU(Unit.Inch(5), Unit.Inch(1));\n    textBox.Name = \"textBox\";\n    textBox.Value = \"= Fields.FullName\";\n    detail.Items.Add(textBox);\n\n    // Preview the report\n    ReportProcessor reportProcessor = new ReportProcessor();\n    Telerik.ReportViewer.WinForms.ReportViewer viewer = new Telerik.ReportViewer.WinForms.ReportViewer();\n    viewer.ReportSource = new Telerik.Reporting.InstanceReportSource() { ReportDocument = report };\n    viewer.RefreshReport();\n    viewer.ShowDialog();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parameter Editor with Kendo DropDownList\nDESCRIPTION: Example showing how to create a custom parameter editor using Kendo UI DropDownList for single-value parameters with available values. The implementation includes match and createEditor methods required for the parameter editor factory.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n\tmatch: function (parameter) {\n\t\t// Here you can use all of the parameter properties to\n\t\t// create a more specific editor\n\t\treturn Boolean(parameter.availableValues) && !parameter.multivalue;\n\t},\n\tcreateEditor: function (placeholder, options) {\n\t\tvar dropDownElement = $(placeholder).html('<div></div>');\n\t\tvar parameter,\n\t\t\tvalueChangedCallback = options.parameterChanged,\n\t\t\tdropDownList;\n\t\tfunction onChange() {\n\t\t\tvar val = dropDownList.value();\n\t\t\tvalueChangedCallback(parameter, val);\n\t\t}\n\t\treturn {\n\t\t\tbeginEdit: function (param) {\n\t\t\t\tparameter = param;\n\t\t\t\t$(dropDownElement).kendoDropDownList({\n\t\t\t\t\tdataTextField: \"name\",\n\t\t\t\t\tdataValueField: \"value\",\n\t\t\t\t\tvalue: parameter.value,\n\t\t\t\t\tdataSource: parameter.availableValues,\n\t\t\t\t\tchange: onChange\n\t\t\t\t});\n\t\t\t\tdropDownList = $(dropDownElement).data(\"kendoDropDownList\");\n\t\t\t}\n\t\t};\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Report with VB.NET\nDESCRIPTION: This snippet shows how to create a Telerik Reporting report using VB.NET. Similar to the C# example, this code initializes a new Report object, sets a SQL data source with the connection string and select command, and assigns the data source to the report for data retrieval from the Sales.Store table in the AdventureWorks database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/create-report-programmatically.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim report As New Telerik.Reporting.Report()\nDim selectCommand As String = \"SELECT * FROM Sales.Store\"\nDim connectionString As String = \"Data Source=(local)\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True\"\nDim sqlDataSource As New Telerik.Reporting.SqlDataSource(connectionString, selectCommand)\nreport.DataSource = sqlDataSource\n```\n\n----------------------------------------\n\nTITLE: Exporting to Single Document Formats in C# using Telerik Reporting\nDESCRIPTION: This snippet demonstrates how to export a report to a single document format (PDF, XLSX, DOCX, etc.) using the RenderReport method of the ReportProcessor class. The report is rendered and saved to a file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/generate-reports-locally.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nReportProcessor reportProcessor = new ReportProcessor();\nInstanceReportSource instanceReportSource = new InstanceReportSource();\ninstanceReportSource.ReportDocument = new Report1();\n\ntry\n{\n    RenderingResult result = reportProcessor.RenderReport(\"PDF\", instanceReportSource, null);\n\n    using (FileStream fs = new FileStream(\"report.pdf\", FileMode.Create))\n    {\n        fs.Write(result.DocumentBytes, 0, result.DocumentBytes.Length);\n    }\n}\ncatch (Exception ex)\n{\n    MessageBox.Show(ex.Message);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery and Kendo UI Packages for React\nDESCRIPTION: Install jQuery and Kendo UI packages using npm for use in the React component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-web-report-designer-in-react-js.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install jquery\nnpm install @progress/kendo-ui\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Meta Tag\nDESCRIPTION: Sets up the viewport meta tag for mobile browser layout control\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource for HTML5 ASP.NET MVC Report Viewer\nDESCRIPTION: Demonstrates how to set the ReportSource for the HTML5 ASP.NET MVC Report Viewer using different methods and parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n@(Html.TelerikReporting().ReportViewer()\n    .Id(\"reportViewer1\")\n    .ServiceUrl(Url.Content(\"~/api/reports\"))\n    .ReportSource(new UriReportSource()\n    {\n        Uri = \"SampleReport.trdp\",\n        Parameters = new {\n            Parameter1 = \"Value1\",\n            Parameter2 = \"Value2\"\n        }\n    })\n    .ViewMode(ViewModes.Interactive)\n    .Width(\"100%\")\n    .Height(\"400px\")\n    .ScaleMode(ScaleModes.Specific)\n    .Scale(1.0)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ReportSource Resolver for Telerik Report Server in C#\nDESCRIPTION: This code demonstrates how to implement a custom ReportSource resolver that connects to Telerik Report Server, retrieves report definitions, and converts them to usable report sources. It handles both TRDX and report package formats, authenticating with the server and fetching reports based on category and report name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/displaying-reports-from-report-server-through-custom-report-source-resolver.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class CustomReportSourceResolver : IReportSourceResolver\n{\n\tpublic Telerik.Reporting.ReportSource Resolve(string reportId, OperationOrigin operationOrigin, IDictionary<string, object> currentParameterValues)\n\t{\n\t\tvar categoryAndReport = reportId.Split(new char[] { '-' });\n\t\tvar categoryName = categoryAndReport[0];\n\t\tvar reportName = categoryAndReport[1];\n\n\t\tvar settings = new Telerik.ReportServer.HttpClient.Settings()\n\t\t{\n\t\t\tBaseAddress = \"http://localhost:83/\"\n\t\t};\n\t\tTelerik.Reporting.Report report = null;\n\n\t\tusing (var rsClient = new ReportServerClient(settings))\n\t\t{\n\t\t\trsClient.Login(\"myusername\", \"mypass\");\n\t\t\tvar categories = rsClient.GetCategories();\n\t\t\tvar myCategoryId = categories.Where(item => item.Name == categoryName).First().Id;\n\t\t\tvar reportInfos = rsClient.GetReportInfosInCategory(myCategoryId);\n\t\t\tvar myReportId = reportInfos.Where(item => item.Name == reportName).First().Id;\n\n\t\t\tvar reportDefinition = rsClient.GetLatestReportRevision(myReportId);\n\t\t\tvar extension = reportDefinition.Extension;\n\n\t\t\tusing (var sourceStream = new MemoryStream(reportDefinition.Content))\n\t\t\t{\n\t\t\t\tif (extension == \"trdx\")\n\t\t\t\t{\n\t\t\t\t\tusing (System.Xml.XmlReader xmlReader = System.Xml.XmlReader.Create(sourceStream))\n\t\t\t\t\t{\n\t\t\t\t\t\tTelerik.Reporting.XmlSerialization.ReportXmlSerializer xmlSerializer =\n\t\t\t\t\t\t\tnew Telerik.Reporting.XmlSerialization.ReportXmlSerializer();\n\t\n\t\t\t\t\t\treport = (Telerik.Reporting.Report)\n\t\t\t\t\t\txmlSerializer.Deserialize(xmlReader);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar reportPackager = new ReportPackager();\n\t\t\t\t\treport = (Report)reportPackager.UnpackageDocument(sourceStream);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tInstanceReportSource rs = new InstanceReportSource() { ReportDocument = report };\n\t\treturn rs;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying IsVisible Attribute to User Functions in VB.NET\nDESCRIPTION: Shows how to use the IsVisible attribute in VB.NET to control the visibility of user functions in the Edit Expression dialog.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/extending-expressions/user-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Module UserFunctions\n    <Function(IsVisible:=True)> _\n    Public Function VisibleFunction() As String\n        Return \"This function will be visible in the Edit Expression dialog\"\n    End Function\n\n    <Function(IsVisible:=False)> _\n    Public Function InvisibleFunction() As String\n        Return \"This function will NOT be visible in the Edit Expression dialog\"\n    End Function\nEnd Module\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiSelect Parameter Editor in HTML5 Report Viewer\nDESCRIPTION: This snippet demonstrates how to configure the multiSelect parameter editor type for the HTML5 Report Viewer. It sets the editor type to COMBO_BOX using the telerikReportViewer.ParameterEditorTypes enum.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/report-viewer-initialization.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"#reportViewer1\").telerik_ReportViewer({...parameters: {editors: {multiSelect: telerikReportViewer.ParameterEditorTypes.COMBO_BOX,}}});\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Report Viewer Options in HTML Template\nDESCRIPTION: This code demonstrates how to configure the Telerik Report Viewer component in an Angular HTML template. Options include setting the service URL, report source, view mode, scale settings, and event handlers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/api-reference/options.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer #viewer1\n\t[containerStyle]=\"viewerContainerStyle\"\n\t[serviceUrl]=\"'http://localhost:59655/api/reports/'\"\n\t[reportSource]=\"{\n\t\treport: 'Report2.trdp',\n\t\tparameters: {}\n\t}\"\n\t[viewMode]=\"'INTERACTIVE'\" [scaleMode]=\"'SPECIFIC'\" [scale]=\"1.0\" [ready]=\"ready\"\n\t[viewerToolTipOpening]=\"viewerToolTipOpening\" [enableAccessibility]=\"false\">\n</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Setting ObjectDataSource Parameters in C#\nDESCRIPTION: This code snippet demonstrates how to programmatically set parameters for an ObjectDataSource component in C#. It creates an ObjectDataSource, adds parameters with names and values, and sets the DataSource and DataMember properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/using-parameters-with-the-objectdatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nObjectDataSource objectDataSource = new ObjectDataSource();\n\nobjectDataSource.DataSource = typeof(SampleData);\nobjectDataSource.DataMember = \"GetOrders\";\n\nobjectDataSource.Parameters.Add(new Parameter(\"productName\", \"Chai\"));\nobjectDataSource.Parameters.Add(new Parameter(\"orderDate\", \"=Today()\"));\n\nthis.DataSource = objectDataSource;\n```\n\n----------------------------------------\n\nTITLE: Using ReportClient to Render Reports with Telerik Reporting REST Service in C#\nDESCRIPTION: This snippet demonstrates how to use the ReportClient class to render a report using the Telerik Reporting REST Service. It includes steps for registering a client, creating a report instance, creating a document, and retrieving the rendered report as a byte array.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-reporting-rest-service-api-with-csharp-client.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\n// 1. Register client\nReportClient restServiceClient = InitializeReportClient(restServiceUrl);\n\n\n// 2. Create Report Instance\n\nReportSourceModel reportSourceModel = new ReportSourceModel()\n{\n\tReport = \"Barcodes Report.trdp\"\n};\n\nstring reportSource = JsonConvert.SerializeObject(reportSourceModel);\nstring reportInstanceId = CreateReportInstance(restServiceClient, reportSource);\n\n\n// 3. Create Document\nstring reportDocumentId = CreateDocument(restServiceClient, reportInstanceId, \"PDF\");\n\n\n// 4. Get Document\nbyte[] result = GetDocument(restServiceClient, reportInstanceId, reportDocumentId);\nFile.WriteAllBytes(\"c:\\\\temp\\\\Barcodes Report.pdf\", result);\n```\n\n----------------------------------------\n\nTITLE: Creating a Panel and TextBox in Telerik Reporting (C#)\nDESCRIPTION: This C# snippet illustrates how to create a Panel and a TextBox report item, set their properties such as location and size, and add them to a detail section of a report. It demonstrates the instantiation of the report items and configuration of their styles.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/create-report-items-programmatically.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.Panel panel1 = new Telerik.Reporting.Panel();\nTelerik.Reporting.TextBox textBox1 = new Telerik.Reporting.TextBox();\n// panel1\npanel1.Location = new Telerik.Reporting.Drawing.PointU(new Telerik.Reporting.Drawing.Unit(1.0, Telerik.Reporting.Drawing.UnitType.Cm), new Telerik.Reporting.Drawing.Unit(1.0, Telerik.Reporting.Drawing.UnitType.Cm));\npanel1.Size = new Telerik.Reporting.Drawing.SizeU(new Telerik.Reporting.Drawing.Unit(8.5, Telerik.Reporting.Drawing.UnitType.Cm), new Telerik.Reporting.Drawing.Unit(3.5, Telerik.Reporting.Drawing.UnitType.Cm));\npanel1.Style.BorderStyle.Default = Telerik.Reporting.Drawing.BorderType.Solid;\n// textBox1\ntextBox1.Location = new Telerik.Reporting.Drawing.PointU(new Telerik.Reporting.Drawing.Unit(0, Telerik.Reporting.Drawing.UnitType.Cm), new Telerik.Reporting.Drawing.Unit(0, Telerik.Reporting.Drawing.UnitType.Cm));\ntextBox1.Name = \"NameDataTextBox\";\ntextBox1.Size = new Telerik.Reporting.Drawing.SizeU(new Telerik.Reporting.Drawing.Unit(5.0, Telerik.Reporting.Drawing.UnitType.Cm), new Telerik.Reporting.Drawing.Unit(0.6, Telerik.Reporting.Drawing.UnitType.Cm));\ntextBox1.Style.BorderStyle.Default = Telerik.Reporting.Drawing.BorderType.Solid;\ntextBox1.StyleName = \"Data\";\ntextBox1.Value = \"=Fields.CustomerID\";\npanel1.Items.AddRange(new Telerik.Reporting.ReportItemBase[] {textBox1});\ndetail.Items.AddRange(new Telerik.Reporting.ReportItemBase[] {panel1});\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Operator in Telerik Reporting Expressions\nDESCRIPTION: This example demonstrates the use of the conditional operator '?:' in Telerik Reporting expressions. It returns Fields.X if DiscountAvailable is true, otherwise Fields.Y.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/operators.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n=Fields.DiscountAvailable ? Fields.X : Fields.Y\n```\n\n----------------------------------------\n\nTITLE: Flattened 3D Data Representation for Dynamic Tables in CSV\nDESCRIPTION: This CSV structure represents a flattened 3D data format used for creating dynamic Tables, Crosstabs, or List items in Telerik Reporting. It includes column names, row indices, and cell contents.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-a-dynamic-table-crosstab-list-item.md#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\ncolumnName,rowIndex,cellContent\ncolumn1,1,11\ncolumn2,1,21\ncolumn3,1,31\ncolumn1,2,12\ncolumn2,2,22\ncolumn3,2,32\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom IReportSourceResolver in C#\nDESCRIPTION: This code snippet demonstrates how to implement a custom IReportSourceResolver to decrypt connection strings for SqlDataSource components in Telerik Reporting. It involves unpacking a TRDP/TRDX report, obtaining references to all SqlDataSource components, and decrypting the connection string before assigning it to the SqlDataSource component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-encrypted-connection-strings-telerik-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nusing Microsoft.Extensions.Configuration;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Telerik.Reporting;\nusing Telerik.Reporting.Services;\n\nnamespace CSharp.Net8.Html5IntegrationDemo\n{\n    public class CustomReportSourceResolver(IConfiguration configuration) : IReportSourceResolver\n    {\n        private IConfiguration _configuration = configuration;\n\n        public Telerik.Reporting.ReportSource Resolve(string reportId, OperationOrigin operationOrigin, IDictionary<string, object> currentParameterValues)\n        {\n            var reportPacker = new ReportPackager();\n            Report report = null;\n\n            using (var sourceStream = System.IO.File.OpenRead(reportId))\n            {\n                report = (Report)reportPacker.UnpackageDocument(sourceStream);\n            }\n\n            var sqlDataSources = report.GetDataSources().OfType<SqlDataSource>();\n\n            foreach (var sqlDataSource in sqlDataSources)\n            {\n                string encryptedConnectionString = _configuration.GetSection($\"ConnectionStrings:{sqlDataSource.ConnectionString}\").Value; // Get the encrypted connection string from the config\n                sqlDataSource.ConnectionString = DecryptClass.DecryptConnectionString(encryptedConnectionString); // Decrypt the connection string and assign it to the SqlDataSource component \n            }\n\n            return new InstanceReportSource() { ReportDocument = report };\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add TextBox ItemDataBinding in C#\nDESCRIPTION: This code snippet demonstrates how to add an ItemDataBinding event handler to a TextBox in C#. The event handler checks the value of the TextBox and changes its color if it matches a specific condition. It expects a Processing.TextBox as the sender and uses its Value property to determine the color.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/using-report-item-events.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n \"private void textBox1_ItemDataBinding(object sender, EventArgs e)\\n{\\n    Telerik.Reporting.Processing.TextBox txtBox = (Telerik.Reporting.Processing.TextBox)sender;\\n\\n    if (txtBox.Value.ToString().Contains(\\\"Developer\\\"))\\n    {\\n        txtBox.Style.Color = System.Drawing.Color.Blue;\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Panel and TextBox in Telerik Reporting (VB.NET)\nDESCRIPTION: This VB.NET snippet shows how to create a Panel and a TextBox report item, adjust properties like location and size, and add them to a detail section of a report. This example includes setting the style and value of the TextBox with dynamic field data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/create-report-items-programmatically.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim panel1 As New Telerik.Reporting.Panel()\nDim textBox1 As New Telerik.Reporting.TextBox()\n'panel1\npanel1.Location = New Telerik.Reporting.Drawing.PointU(New Telerik.Reporting.Drawing.Unit(1, Telerik.Reporting.Drawing.UnitType.Cm), New Telerik.Reporting.Drawing.Unit(1, Telerik.Reporting.Drawing.UnitType.Cm))\npanel1.Size = New Telerik.Reporting.Drawing.SizeU(New Telerik.Reporting.Drawing.Unit(8.5, Telerik.Reporting.Drawing.UnitType.Cm), New Telerik.Reporting.Drawing.Unit(3.5, Telerik.Reporting.Drawing.UnitType.Cm))\npanel1.Style.BorderStyle.Default = Telerik.Reporting.Drawing.BorderType.Solid\n'textBox1\ntextBox1.Location = New Telerik.Reporting.Drawing.PointU(New Telerik.Reporting.Drawing.Unit(0, Telerik.Reporting.Drawing.UnitType.Cm), New Telerik.Reporting.Drawing.Unit(0, Telerik.Reporting.Drawing.UnitType.Cm))\ntextBox1.Name = \"NameDataTextBox\"\ntextBox1.Size = New Telerik.Reporting.Drawing.SizeU(New Telerik.Reporting.Drawing.Unit(5, Telerik.Reporting.Drawing.UnitType.Cm), New Telerik.Reporting.Drawing.Unit(0.6, Telerik.Reporting.Drawing.UnitType.Cm))\ntextBox1.Style.BorderStyle.Default = Telerik.Reporting.Drawing.BorderType.Solid\ntextBox1.StyleName = \"Data\"\ntextBox1.Value = \"=Fields.CustomerID\"\npanel1.Items.AddRange(New Telerik.Reporting.ReportItemBase() {textBox1})\ndetail.Items.AddRange(New Telerik.Reporting.ReportItemBase() {panel1})\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery in Angular Application - PowerShell\nDESCRIPTION: This snippet shows the command to install jQuery as an npm package which is required for integrating the Angular Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-report-server.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install jquery\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache in C#\nDESCRIPTION: This code snippet demonstrates the implementation of a custom cache in C# for Telerik Reporting. The `MyCache` class implements the `ICache` interface, providing custom logic for storing and retrieving data.  It requires the `Telerik.Reporting.Cache.Interfaces` namespace.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-custom-cache-provider.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections;\nusing Telerik.Reporting.Cache.Interfaces;\n\nnamespace MyNameSpace\n{\n    public class MyCache : ICache\n    {\n        private Hashtable hashtable = new Hashtable();\n\n        public object this[string key]\n        {\n            get\n            {\n                return hashtable[key];\n            }\n            set\n            {\n                hashtable[key] = value;\n            }\n        }\n\n        public void Remove(string key)\n        {\n            hashtable.Remove(key);\n        }\n\n        public void Clear()\n        {\n            hashtable.Clear();\n        }\n\n        public void Dispose()\n        {\n            // Clean up any resources being used.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Drillthrough Action Programmatically in C#\nDESCRIPTION: This snippet demonstrates how to add a NavigateToReportAction to a report item programmatically in C#. It creates a new NavigateToReportAction, sets the ReportSource to a TypeReportSource, and adds a parameter to the action. This allows users to navigate to a detail report when clicking on a summary report item.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/drillthrough-report-action.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n \"// The following example demonstrates how to add a NavigateToReportAction to an item\\n//\\n// Example:\\n//\\n// item.Action = AddNewNavigateToReportAction(item);\\n//\\npublic static Telerik.Reporting.Action AddNewNavigateToReportAction(Telerik.Reporting.ReportItem item)\\n{\\n    Telerik.Reporting.NavigateToReportAction action = new Telerik.Reporting.NavigateToReportAction();\\n    //\\n    // TypeReportSource settings\\n    //\\n    Telerik.Reporting.TypeReportSource typeReportSource = new Telerik.Reporting.TypeReportSource();\\n    typeReportSource.TypeName = typeof(Telerik.Reporting.Examples.ReportLibrary.ProductCatalog).AssemblyQualifiedName;\\n    action.ReportSource = typeReportSource;\\n    //\\n    // Parameters settings\\n    //\\n    Telerik.Reporting.ActionParameter parameter = new Telerik.Reporting.ActionParameter();\\n    parameter.Name = \"ReportParameter1\";\\n    parameter.Value = \"ReportParameterValue\";\\n    action.Parameters.Add(parameter);\\n\\n    return action;\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Master-Detail Report Using SubReport Item in C#\nDESCRIPTION: This C# code demonstrates how to programmatically create a master-detail report by configuring SubReport items. The code creates instance report sources for both the main report and subreport, sets parameters, establishes the relationship between them, and renders the report to a PDF file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-programmatically-create-a-master-detail-report-using-subreport-item.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Security;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Telerik.Reporting;\nusing Telerik.Reporting.Processing;\n\nstatic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tConsole.WriteLine(\"Enter Number: 1, 2 or 3\");\n\t\tobject Input = Console.ReadLine();\n\n\t\tReportProcessor ReportProcessor = new ReportProcessor();\n\t\tHashtable DeviceInfo = new Hashtable();\n\n\t\t// Create MainReport InstanceReportSource\n\t\tInstanceReportSource MainInstanceReportSource = new InstanceReportSource();\n\n\t\t// Create SubReport InstanceReportSource\n\t\tInstanceReportSource SubInstanceReportSource = new InstanceReportSource()\n\t\t{\n\t\t\tReportDocument = new SubReport() // Set ReportDocument of SubInstanceReportSource\n\t\t};\n\n\t\t// Set Parameters of SubInstanceReportSource\n\t\tSubInstanceReportSource.Parameters.Add(\"PersonId\", Input);\n\n\t\t// Create MainReport Object\n\t\tMainReport MainReportObject = new MainReport();\n\n\t\t// Find SubReport Report Item of Main Report\n\t\tTelerik.Reporting.SubReport SubReportSource = MainReportObject.Items.Find(\"SubReport1\", true)(0);\n\n\t\t// Set Report Source of SubReport in MainReport\n\t\tSubReportSource.ReportSource = SubInstanceReportSource;\n\n\t\t// Set the ReportDocument of the MainInstanceReportSource\n\t\tMainInstanceReportSource.ReportDocument = MainReportObject;\n\n\t\t// Set Parameters of MainInstanceReportSource\n\t\tMainInstanceReportSource.Parameters.Add(\"PersonId\", Input);\n\n\t\t// Continue with Embedding the Report Engine in Application\n\t\tRenderingResult PdfRendering = ReportProcessor.RenderReport(\"PDF\", MainInstanceReportSource, DeviceInfo);\n\n\t\tstring FileName = PdfRendering.DocumentName + \".\" + PdfRendering.Extension;\n\n\t\t// Saves the Report in Temp Folder C:\\Users\\[USER]\\AppData\\Local\\Temp\n\t\tstring Path = System.IO.Path.GetTempPath();\n\t\tstring FilePath = System.IO.Path.Combine(Path, FileName);\n\n\t\t// Writes File To Disk\n\t\tusing (FileStream Stream = new FileStream(FilePath, FileMode.Create))\n\t\t{\n\t\t\tStream.Write(PdfRendering.DocumentBytes, 0, PdfRendering.DocumentBytes.Length);\n\t\t}\n\n\t\tConsole.WriteLine($\"File Created: {FilePath}\");\n\n\t\tConsole.WriteLine(\"Press Enter to Exit\");\n\n\t\tConsole.ReadKey();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorFromName User Function in C#\nDESCRIPTION: This C# function takes a color name as a string and returns the corresponding Color object. It's used as a helper function for conditional formatting in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/using-expressions/conditional-formatting.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static Color ColorFromName(string colorName)\n{\n\tif (!string.IsNullOrEmpty(colorName))\n\t{\n\t\treturn Color.FromName(colorName);\n\t}\n\treturn Color.Transparent;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Report Designer with Dynamic Script Loading in React\nDESCRIPTION: Create a React component that dynamically loads the necessary scripts for the Web Report Designer and initializes it after the scripts are loaded.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-web-report-designer-in-react-js.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { Component } from 'react';\nimport * as $ from 'jquery';\nimport '@progress/kendo-ui';\n\nexport default class ReportDesigner extends Component {\n\n    componentDidMount() {\n        window.jQuery = $;\n        window.$ = $;\n        this.loadScriptPromise(\"https://demos.telerik.com/reporting/api/reportdesigner/designerresources/js/webReportDesigner/\").then(a => {\n            $('#reportDesigner1')\n            .telerik_WebReportDesigner({\n                toolboxArea: {\n                    layout: \"list\" //Change to \"grid\" to display the contents of the Components area in a flow grid layout.\n                },\n                serviceUrl: \"https://demos.telerik.com/reporting/api/reportdesigner/\",\n                report: \"Barcodes report.trdx\"\n            }).data(\"telerik_WebDesigner\");\n        })\n\n\tthis.loadScriptPromise(\"https://demos.telerik.com/reporting/api/reportdesigner/resources/js/telerikReportViewer/\")\n    }\n\n    render() {\n        return <div id=\"reportDesigner1\"></div>\n    }\n\n    loadScriptPromise(scriptUrl) {\n        return new Promise(resolve => {\n          const scriptElement = document.createElement('script');\n          scriptElement.src = scriptUrl;\n          scriptElement.onload = resolve;\n          document.body.appendChild(scriptElement);\n        });\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Report Viewer\nDESCRIPTION: Install required npm packages including jQuery and Telerik React Report Viewer, preparing the project for report rendering\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-rest-service.md#2025-04-21_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install jquery\nnpm install @progress/telerik-react-report-viewer\n```\n\n----------------------------------------\n\nTITLE: Setting Page Mode in HTML5 Report Viewer\nDESCRIPTION: Demonstrates how to use the pageMode method to change the page display mode of the report viewer to single page. The method accepts a string parameter specifying the page mode and returns the current ReportViewer object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/pagemode(psm).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.pageMode(telerikReportViewer.PageModes.SINGLE_PAGE);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Aggregate Function in C#\nDESCRIPTION: This code snippet demonstrates how to create a custom aggregate function called 'Concatenate' in C#. It implements the IAggregateFunction interface and uses the AggregateFunctionAttribute to define the function name for use in expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/extending-expressions/user-aggregate-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[AggregateFunction(Name = \"Concatenate\")]\npublic class ConcatenateAggregateFunction : IAggregateFunction\n{\n    StringBuilder sb = new StringBuilder();\n\n    public void Accumulate(object[] values)\n    {\n        if (values[0] != null)\n        {\n            sb.Append(values[0].ToString());\n        }\n    }\n\n    public void Merge(IAggregateFunction aggregateFunction)\n    {\n        ConcatenateAggregateFunction agg = (ConcatenateAggregateFunction)aggregateFunction;\n        this.sb.Append(agg.sb.ToString());\n    }\n\n    public object GetValue()\n    {\n        return sb.ToString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling NeedDataSource Event in Telerik Reporting (C#)\nDESCRIPTION: This C# code snippet demonstrates how to handle the NeedDataSource event of a Telerik report. This event is used to dynamically assign a data source at runtime when it is not set (i.e., null). Key dependencies include the Telerik Reporting framework, and the primary parameter is the report object which needs its DataSource property set.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/using-report-events.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\Processing\\ReportEvents.cs region=NeedDataSourceEventHandlerSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Filters Programmatically in VB.NET\nDESCRIPTION: Demonstrates how to programmatically add a filter to a Graph item using VB.NET. The code shows creating a new Filter object and adding it to the Graph's Filters collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/filtering-data/how-to-add-filtering-to-graph-item.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim graph As New Graph()\nDim filter As New Filter()\nfilter.Expression = \"=Fields.UnitsInStock\"\nfilter.Operator = FilterOperator.GreaterThan\nfilter.Value = \"10\"\ngraph.Filters.Add(filter)\n```\n\n----------------------------------------\n\nTITLE: Sorting Report Data Based on Parameter - C#\nDESCRIPTION: This code snippet shows how to use a 'SortColumn' parameter to determine the sorting criteria for the report. It checks the value of 'SortColumn' and sorts by 'VendorID' if zero, otherwise sorts by 'VendorName'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/using-report-parameters-in-expressions.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n=Iif(Parameters.SortColumn == 0, \"VendorID\", \"VendorName\")\n```\n\n----------------------------------------\n\nTITLE: Modifying SqlDataSource Connection String and Query at Runtime in C#\nDESCRIPTION: This code snippet demonstrates how to unpackage a TRDP report file, access its SqlDataSource components using the GetDataSources method, and modify the connection string and SQL query for each data source. The modified report is then used to create an InstanceReportSource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/edit-report-datasources-at-runtime.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar query = \"SQL_QUERY_HERE\";\nvar reportPackager = new ReportPackager();\nTelerik.Reporting.Report report = null;\n\nusing (var sourceStream = System.IO.File.OpenRead(\"Report1.trdp\"))\n{\n\treport = (Telerik.Reporting.Report)reportPackager.UnpackageDocument(sourceStream);\n}\n\nvar sqlDS = report.GetDataSources().OfType<SqlDataSource>();\n\nforeach (var sqlDataSource in sqlDS)\n{\n\tsqlDataSource.ConnectionString = \"CONNECTION_STRING_HERE\";\n\tsqlDataSource.SelectCommand = query;\n}\n\nvar irs = new InstanceReportSource() { ReportDocument = report };\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Aggregate Function for Total Overtime Hours in C#\nDESCRIPTION: This code snippet demonstrates a custom aggregate function that accumulates overtime hours from groups. It handles worker reports grouped by weeks, calculating total overtime hours exceeding 40 hours per week.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/accumulate-expression-from-group-total-in-overall-total.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\nusing System;\nusing Telerik.Reporting.Expressions;\n\nnamespace CustomAggregates\n{\n    public class TotalOvertimeHours : IAggregateFunction\n    {\n        private Dictionary<long, TimeSpan> workTimeByWeek;\n\n        public void Accumulate(object[] values)\n        {\n            var week = (long)values[0];\n            var workTime = (TimeSpan)values[1];\n\n            TimeSpan weekWorkTime;\n            if (!this.workTimeByWeek.TryGetValue(week, out weekWorkTime))\n            {\n                this.workTimeByWeek.Add(week, workTime);\n            }\n            else\n            {\n                this.workTimeByWeek[week] = weekWorkTime + workTime;\n            }\n        }\n\n        public object GetValue()\n        {\n            TimeSpan regularWorkHoursPerWeek = new TimeSpan(40, 0, 0);\n            TimeSpan result = new TimeSpan();\n            foreach (var value in this.workTimeByWeek.Values)\n            {\n                if (value > regularWorkHoursPerWeek)\n                {\n                    result += value - regularWorkHoursPerWeek;\n                }\n            }\n\n            return result;\n        }\n\n        public void Init()\n        {\n            this.workTimeByWeek = new Dictionary<long, TimeSpan>();\n        }\n\n        public void Merge(IAggregateFunction aggregateFunction)\n        {\n            var otherAggregateFunction = (TotalOvertimeHours)aggregateFunction;\n            foreach (var pair in otherAggregateFunction.workTimeByWeek)\n            {\n                TimeSpan weekWorkTime;\n                if (!this.workTimeByWeek.TryGetValue(pair.Key, out weekWorkTime))\n                {\n                    this.workTimeByWeek.Add(pair.Key, pair.Value);\n                }\n                else\n                {\n                    this.workTimeByWeek[pair.Key] = weekWorkTime + pair.Value;\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Viewer Component\nDESCRIPTION: HTML template configuration for the reporting-angular-viewer component with Report Server settings\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-report-server.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<reporting-angular-viewer\n\t\tserviceType=\"reportServer\"\n\t\t[reportServer]=\"{\n\t\t\turl:'http://localhost:83/',\n\t\t\tusername:'username',\n\t\t\tpassword: 'password'\n\t\t}\"\n\t\t[reportSource]=\"{\n\t\t\treport: 'Samples/Invoice',\n\t\t\tparameters: {}\n\t\t}\"\n\t\tviewMode=\"interactive\"\n\t\t[keepClientAlive]=\"true\">\n\t</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Report Source and Document Resolvers in C#\nDESCRIPTION: Implementation of custom IReportSourceResolver and IReportDocumentResolver to handle report definition XML from database and dynamic data source assignment for both main reports and subreports. Includes handling of different report source types and data source assignment timing considerations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-report-source-resolver/use-custom-report-source-and-document-resolvers.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\nusing System.IO;\nusing Telerik.Reporting;\nusing Telerik.Reporting.Services;\nusing Telerik.Reporting.XmlSerialization;\nnamespace MyReportSourceResolverDemo\n{\n\tpublic class MyReportSourceResolver : IReportSourceResolver\n\t{\n\t\tpublic ReportSource Resolve(string reportId, OperationOrigin operationOrigin, IDictionary<string, object> currentParameterValues)\n\t\t{\n\t\t\tReportXmlSerializer xmlSerializer = new ReportXmlSerializer();\n\t\t\tReport reportInstance = (Report)xmlSerializer.Deserialize(new StringReader(MyService.GetMainReportXml(reportId)));\n\t\t\tif (operationOrigin == OperationOrigin.GenerateReportDocument)\n\t\t\t{\n\t\t\t\t// Set the data source for the main report\n\t\t\t\treportInstance.DataSource = MyService.GetMyData();\n\t\t\t}\n\t\t\tvar instanceReportSource = new InstanceReportSource\n\t\t\t{\n\t\t\t\tReportDocument = reportInstance\n\t\t\t};\n\t\t\treturn instanceReportSource;\n\t\t}\n\t}\n\tpublic class MyReportDocumentResolver : IReportDocumentResolver\n\t{\n\t\tpublic IReportDocument Resolve(ReportSource reportSource)\n\t\t{\n\t\t\t// The main report is wrapped in an InstanceReportSource by MyReportSourceResolver\n\t\t\tif (reportSource is InstanceReportSource)\n\t\t\t{\n\t\t\t\treturn (reportSource as InstanceReportSource).ReportDocument;\n\t\t\t}\n\t\t\t//The subreport is resolved in the context of the main report SubReport\n\t\t\telse if (reportSource is UriReportSource)\n\t\t\t{\n\t\t\t\tReportXmlSerializer xmlSerializer = new ReportXmlSerializer();\n\t\t\t\tReport report = (Report)xmlSerializer.Deserialize(new StringReader(MyService.GetSubReportXml((reportSource as UriReportSource).Uri)));\n\t\t\t\t// Set the data source for the subreport\n\t\t\t\treport.DataSource = MyService.GetMySubreportData();\n\t\t\t\t// Set the data source for another data item in the subreport\n\t\t\t\tvar table1 = report.Items.Find(\"table1\", true)[0] as Table;\n\t\t\t\ttable1.DataSource = MyService.GetMyTableData();\n\t\t\t\treturn report;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportDesignerService with Custom Definition Storage in C#\nDESCRIPTION: This code snippet demonstrates how to configure the ReportDesignerService with a custom implementation of the IDefinitionStorage.  It shows setting the DefinitionStorage property of the ReportDesignerServiceConfiguration to an instance of the custom storage class.  This allows the Web Report Designer to use the custom storage for loading and saving reports.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-implement-a-report-definition-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton(sp =>\n{\n    var configuration = sp.GetService<IConfiguration>();\n    var reportDesignerServiceConfiguration = new ReportDesignerServiceConfiguration\n    {\n        DefinitionStorage = new CustomDefinitionStorage()\n    };\n\n    //Configure the dependencies for the ReportDesignerServiceConfiguration\n    return reportDesignerServiceConfiguration;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Sorting to Table/Crosstab Data Item Programmatically in C#\nDESCRIPTION: This code snippet demonstrates how to programmatically add sorting to a Table or Crosstab data item in C#. It creates a new Sorting object, sets its Expression and Direction properties, and adds it to the table's Sortings collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/ordering-data/how-to-add-sorting-to-table-item-and-crosstab-item.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.Sorting sorting = new Telerik.Reporting.Sorting();\nsorting.Expression = \"=Fields.ProductName\";\nsorting.Direction = Telerik.Reporting.SortDirection.Asc;\ntable.Sortings.Add(sorting);\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Report Designer\nDESCRIPTION: This function handles error events that occur during the operation of the Telerik Web Report Designer. It uses jQuery events and logs the error message along with its type to the console, providing clear feedback for debugging. Requires the jQuery library.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onError(e, args) {\n\t// e: jQuery event;\n\t// args: IErrorEventArgs ->\n\t\t// message: error message, string;\n\t\t// error: JS's Error instance.\n\t\n\tif (args.error) {\n\t\tconsole.log(`An error occurred! Message: ${args.message}; Error type: ${args.error.constructor.name}`);\n\t} else {\n\t\tconsole.log(`An error occurred! Message: ${args.message};`);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Print Command in Telerik HTML5 Report Viewer\nDESCRIPTION: This snippet demonstrates how to trigger the print command in the Telerik Reporting HTML5 Report Viewer using jQuery. It requires jQuery to select the print button element and access the report viewer. The `exec()` method of the `print` command is called when the button is clicked. This command does not take any parameters and initiates the printing process of the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/properties/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\\\"#printButton\\\").click(function () {\\n\\tvar rv = $(\\\"#reportViewer1\\\").data(\\\"telerik_ReportViewer\\\");\\n\\trv.commands.print.exec();\\n});\n```\n\n----------------------------------------\n\nTITLE: Supported Interactive Action Types in Telerik Reports\nDESCRIPTION: Defines the range of interactive actions available in Telerik reporting system, allowing users to create dynamic and interactive report experiences.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n* `Navigate to Report`: Jump to other reports from the main report (Drillthrough report)\n* `Navigate to Bookmark`: Jump to areas within a report\n* `Navigate to Url`: Jump to external web URLs that specify the address of web pages\n* `Toggle Visibility`: Show or hide report items within the same report\n* `Sorting`: Apply sorting on report items like `Table`, `Crosstab` or `Graph`\n* `Custom`: An action that contains collection of parameters that are evaluated during report processing\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Restrictions for Query Builder in C#\nDESCRIPTION: This code snippet shows how to set schema restrictions for the Query Builder to load a specific table schema in the SqlDataSource component. The schema restrictions allow for optimized querying of database information by restricting the schema data returned to only what is necessary for the report creation, leading to improved load times.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/tools/query-builder-in-the-web-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"null,Production,ProductCategory\"\n```\n\n----------------------------------------\n\nTITLE: Attaching Interactive Action Handlers in HTML for ASP.NET WebForms Report Viewer\nDESCRIPTION: This snippet illustrates how to attach interactive action event handlers directly in the HTML markup of the ASP.NET WebForms Report Viewer. The event handlers manage user interactions for navigating reports and altering display styles.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-with-html5-based-report-viewers.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<telerik:ReportViewer\n\tID=\"reportViewer1\"\n\trunat=\"server\">\n\t<ReportSource\n\t\tIdentifierType=\"TypeReportSource\"\n\t\tIdentifier=\"Telerik.Reporting.Examples.CSharp.ProductSales, CSharp.ReportLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\">\n\t</ReportSource>\n\t<ClientEvents\n\t\tInteractiveActionExecuting=\"onInteractiveActionExecuting\"\n\t\tInteractiveActionEnter=\"onInteractiveActionEnter\"\n\t\tInteractiveActionLeave=\"onInteractiveActionLeave\">\n\t</ClientEvents>\n</telerik:ReportViewer>\n<script>\n\tfunction onInteractiveActionExecuting(e, args) {\n\t\tif (args.action.Type === 'navigateToReport') {\n\t\t\targs.cancel = !confirm('You are about to navigate to report ' + args.action.Value.Report + '.\\r\\n\\nContinue?');\n\t\t}\n\t}\n\tfunction onInteractiveActionEnter(e, args) {\n\t\tif (args.action.Type === 'navigateToReport') {\n\t\t\t$(args.element).css({ 'font-weight': 'bolder', 'background-color': 'darkSeaGreen' });\n\t\t}\n\t}\n\tfunction onInteractiveActionLeave(e, args) {\n\t\tif (args.action.Type === 'navigateToReport') {\n\t\t\t$(args.element).css({ 'font-weight': 'normal', 'background-color': 'white' });\n\t\t}\n\t}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomReportResolver with Dependency Injection in C#\nDESCRIPTION: This snippet demonstrates how to create a CustomReportResolver that accepts an IProductRepository in its constructor. It shows how to use the repository to dynamically set the data source for a report at runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-inject-custom-dependency-in-reports-controller-of-dot-net-core-application.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomReportResolver : IReportResolver\n{\n    ...\n    private IProductRepository repository;\n \n    public CustomReportResolver(IProductRepository repository)\n    {\n        this.repository = repository;\n    }\n     \n    ReportSource IReportResolver.Resolve(string reportName)\n    {\n        var reportPackager = new ReportPackager();\n        Report report = null;\n        using (var sourceStream = System.IO.File.OpenRead(reportName))\n        {\n          report = (Report)reportPackager.UnpackageDocument(sourceStream);\n        }\n\n        DetailSection detail = (DetailSection)report.Items[\"detailSection1\"];\n        Table table = (Table)detail.Items[\"table1\"];\n        table.DataSource = this.repository.GetProducts();\n        \n        InstanceReportSource instanceReportSource = new InstanceReportSource();\n        instanceReportSource.ReportDocument = report;\n        \n        return instanceReportSource;\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TRDP Report DataSource with JsonDataSource in C#\nDESCRIPTION: This code snippet demonstrates how to update a TRDP report's DataSource with a new JsonDataSource. It can be used in a custom ReportSourceResolver's Resolve method, which is called when the engine needs to create a ReportSource instance based on the 'report' parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-display-a-report-via-instancereportsource-in-the-html5-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nReport report;\nvar reportPackager = new Telerik.Reporting.ReportPackager(); \nvar reportSource = new Telerik.Reporting.UriReportSource();\nreportSource.Uri = \"someReport.trdp\";\n\nusing (var sourceStream = File.OpenRead(reportSource.Uri))\n{\n\treport = reportPackager.Unpackage(sourceStream);\n}\n            \nreport.DataSource = new JsonDataSource() { Source = ... };\n// For example, if instead a report item, such as a table, needs to have its DataSource updated\n// Table item = (Table)report.Items.Find(\"table1\", true).FirstOrDefault();\n// item.DataSource = new JsonDataSource() { Source = ... };\n\nreturn new InstanceReportSource() { ReportDocument = report };\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ReportSource Resolver in C#\nDESCRIPTION: A custom implementation of IReportSourceResolver that enables dynamic data source assignment during report rendering. The resolver can load report definitions from a specified path, unpackage them, and modify data sources based on the operation origin.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-report-source-resolver/use-custom-report-source-and-document-resolvers.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\nusing System.IO;\nusing Telerik.Reporting;\nusing Telerik.Reporting.Services;\nnamespace MyReportSourceResolverDemo\n{\n\tpublic class MyReportSourceResolver : IReportSourceResolver\n\t{\n\t\tpublic string ReportsPath { get; set; }\n\t\tpublic MyReportSourceResolver(string reportsPath)\n\t\t{\n\t\t\tthis.ReportsPath = reportsPath;\n\t\t}\n\t\tpublic ReportSource Resolve(string reportId, OperationOrigin operationOrigin, IDictionary<string, object> currentParameterValues)\n\t\t{\n\t\t\tstring reportPath = Path.Combine(this.ReportsPath, reportId);\n\t\t\tvar reportPackager = new ReportPackager();\n\t\t\tReport report = null;\n\t\t\tusing (var sourceStream = System.IO.File.OpenRead(reportPath))\n\t\t\t{\n\t\t\t\treport = (Report)reportPackager.UnpackageDocument(sourceStream);\n\t\t\t}\n\t\t\tif (operationOrigin == OperationOrigin.GenerateReportDocument)\n\t\t\t{\n\t\t\t\t// Set the data source for the report\n\t\t\t\treport.DataSource = MyService.GetMyData();\n\t\t\t\t// Set the data source for another data item\n\t\t\t\tvar table1 = report.Items.Find(\"table1\", true)[0] as Table;\n\t\t\t\ttable1.DataSource = MyService.GetMyTableData();\n\t\t\t};\n\t\t\treturn new InstanceReportSource\n\t\t\t{\n\t\t\t\tReportDocument = report\n\t\t\t};\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Viewer Component Template\nDESCRIPTION: HTML template code for implementing the report viewer component with configuration options\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-reporting-service.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#report\n\t[reportSource]=\"{\n\t\treport: 'Report Catalog.trdx',\n\t\tparameters: {}\n\t}\"\n\tserviceUrl=\"https://demos.telerik.com/reporting/api/reports\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Manipulating Strings in C# Expressions\nDESCRIPTION: Shows how to use string methods like ToUpper() and access properties like Length in expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/member-access.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n= 'abc'.ToUpper()\n```\n\nLANGUAGE: C#\nCODE:\n```\n= 'abc'.Length\n```\n\n----------------------------------------\n\nTITLE: Setting up API Endpoints for the Reporting Controller in ASP.NET Core\nDESCRIPTION: Configures the ASP.NET Core application routing to map controller endpoints, enabling the Telerik Reporting REST service to handle API requests for report generation and management.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\napp.UseEndpoints(endpoints =>\n\t{\n\t\tendpoints.MapControllers();\n\t\t//...\n\t});\n```\n\n----------------------------------------\n\nTITLE: Implementing NeedDataSource Event Handler in CityReport\nDESCRIPTION: Creates a custom report class with a NeedDataSource event handler that provides a static data source for the report. Requires Telerik.Reporting NuGet package and compatible .NET framework.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/using-event-handlers-in-srd.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nnamespace ClassLibrary\n{\n\tpublic class CityReport : Telerik.Reporting.Report\n\t{\n\t\tprivate void CityReport_NeedDataSource(object sender, System.EventArgs e)\n\t\t{\n\t\t\tTelerik.Reporting.Processing.Report processingReport = (Telerik.Reporting.Processing.Report)sender;\n\t\t\tprocessingReport.DataSource = new string[] { \"Sofia\", \"London\", \"Tokyo\" };\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: HTML5 Report Viewer Page Structure\nDESCRIPTION: Defines the HTML structure for the report viewer page, including necessary scripts, styles, and viewer initialization.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/how-to-use-html5-report-viewer-in-an-asp.net-core-in-.net-5-application.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title>Telerik HTML5 Report Viewer Demo in ASP.NET Core in .NET 6</title>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"> </script>\n  <link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n  <link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n  <script src=\"/api/reports/resources/js/telerikReportViewer\"> </script>\n  <style>\n    #reportViewer1 {\n      position: absolute;\n      left: 5px;\n      right: 5px;\n      top: 50px;\n      bottom: 5px;\n      overflow: hidden;\n      font-family: Verdana, Arial;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"reportViewer1\">\n    loading...\n  </div>\n  <script>\n    $(document).ready(function () {\n      $(\"#reportViewer1\")\n       .telerik_ReportViewer({\n          serviceUrl: \"api/reports/\",\n          reportSource: {\n            report: \"Barcodes Report.trdp\",\n            parameters: {}\n          },\n          viewMode: telerikReportViewer.ViewModes.INTERACTIVE,\n          scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,\n          scale: 1.0,\n          enableAccessibility: false,\n          sendEmail: { enabled: true }\n        });\n    });\n  </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Designer Controller\nDESCRIPTION: Create a custom Report Designer controller inheriting from ReportDesignerControllerBase. This snippet demonstrates initializing the report designer and service configurations required for handling report operations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-dotnet.md#2025-04-21_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nnamespace CSharp.AspNetCoreDemo.Controllers\n\t{\n\t\tusing Microsoft.AspNetCore.Mvc;\n\t\tusing Telerik.Reporting.Services;\n\t\tusing Telerik.WebReportDesigner.Services;\n\t\tusing Telerik.WebReportDesigner.Services.Controllers;\n\t\t[Route(\"api/reportdesigner\")]\n\t\tpublic class ReportDesignerController : ReportDesignerControllerBase\n\t\t{\n\t\t\tpublic ReportDesignerController(IReportDesignerServiceConfiguration reportDesignerServiceConfiguration, IReportServiceConfiguration reportServiceConfiguration)\n\t\t\t\t: base(reportDesignerServiceConfiguration, reportServiceConfiguration)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: SubReport Source Selection Function in C#\nDESCRIPTION: User Function that dynamically selects and configures a ReportSource for a SubReport based on a field value. The function creates a TypeReportSource, adds parameters, and returns different report types based on a 'yes/no' condition.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/change-sub-report-based-on-main-report-s-data.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static ReportSource SetReportSource(string field)\n{\n\tvar TRS = new TypeReportSource();\n\tTRS.Parameters.Add(\"Parameter1\", field);\n\tif (field.ToLower() == \"yes\")\n\t\tTRS.TypeName = typeof(SubReport1).AssemblyQualifiedName;\n\telse\n\t\tTRS.TypeName = typeof(SubReport2).AssemblyQualifiedName;\n\treturn TRS;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Events to Blazor Report Viewer\nDESCRIPTION: This snippet demonstrates how to bind the ExportBegin and ExportEnd events of the Telerik Reporting Blazor Report Viewer using the ClientEventsOptions object. It sets the event handlers to JavaScript functions defined within the global scope. The functions will be triggered at the beginning and end of the export process.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/event-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: CSHTML\nCODE:\n```\n\t\t\t\t<ReportViewer\n...\n\tClientEvents=\"@(new ClientEventsOptions() {\n\t\tExportBegin = \\\"trvEventHandlers.exportBegin\\\",\n\t\tExportEnd = \\\"trvEventHandlers.exportEnd\\\"\n\t})\" />\n```\n\n----------------------------------------\n\nTITLE: Binding Event Handler to HTML5 Report Viewer in JavaScript\nDESCRIPTION: Demonstrates how to bind an event handler to the PAGE_READY event of a Telerik HTML5 Report Viewer instance. The example shows getting the viewer reference from a jQuery selector and attaching a simple console logging callback.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/bind(eventname,-eventhandler).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onPageReady(e) {\n  console.log('page ready!');\n}\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.bind(telerikReportViewer.Events.PAGE_READY, onPageReady);\n```\n\n----------------------------------------\n\nTITLE: Adding HTML5 Report Viewer Dependencies and Structure\nDESCRIPTION: This snippet provides the complete structure for an HTML document integrating the HTML5 Report Viewer, including references to jQuery and Kendo UI CSS and JS files. It specifies the layout and styling necessary for rendering the report viewer correctly. Note that local paths referenced are required before deployment.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer-in-asp.net-core.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n@{\n\t\tLayout = null;\n\t}\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>APS.NET Core HTML5 Report Viewer Demo</title>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\" integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\" crossorigin=\"anonymous\"></script>>\n\t\t<link href=\"https://kendo.cdn.telerik.com/2022.1.301/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t\t<link href=\"https://kendo.cdn.telerik.com/2022.1.301/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n\t\t<!-- the required Kendo subset is located in {Telerik Reporting installation path}\\Html5\\ReportViewer\\js -->\n\t\t<script src=\"/ReportViewer/js/telerikReportViewer.kendo-x.x.x.x.min.js\"></script>>\n\t\t<!--If Kendo CDN is prefered here are the required Kendo widgets and bundles\n\t\tThe minimum required widgets:\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.core.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.fx.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.userevents.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.draganddrop.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.mobile.scroller.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.data.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.popup.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.list.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.combobox.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.selectable.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.calendar.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.datepicker.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.listview.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.menu.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.data.odata.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.panelbar.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.tooltip.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.treeview.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.window.min.js\"></script>>\n\t<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.touch.min.js\"></script>>\n\t\tWidgets bundle:\n\t\tkendo.all.min.js can be used instead of the above widget list\n\t\t-->\n\t\t<script src=\"/api/reports/resources/js/telerikReportViewer-16.0.22.119.min.js\"></script>>\n\t\t<style>\n\t\t\t#reportViewer1 {\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 5px;\n\t\t\t\tright: 5px;\n\t\t\t\t top: 5px;\n\t\t\t\tbottom: 5px;\n\t\t\t\toverflow: hidden;\n\t\t\t\tfont-family: Verdana, Arial;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"reportViewer1\">\n\t\t\tloading...\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\t$(document).ready(function () {\n\t\t\t\t$(\"#reportViewer1\")\n\t\t\t\t .telerik_ReportViewer({\n\t\t\t\t\t// The URL of the service which will serve reports.\n\t\t\t\t\t// The URL corresponds to the name of the controller class (ReportsController).\n\t\t\t\t\t// For more information on how to configure the service please check http://www.telerik.com/help/reporting/telerik-reporting-rest-conception.html.\n\t\t\t\t\tserviceUrl: '@Url.Content(\"~/api/reports/\")',\n\t\t\t\t\t// The URL for the report viewer template. The template can be edited -\n\t\t\t\t\t// new functionalities can be added and unneeded ones can be removed.\n\t\t\t\t\t// For more information please check http://www.telerik.com/help/reporting/html5-report-viewer-templates.html.\n\t\t\t\t\t@*templateUrl: '@Url.Content(\"~/ReportViewer/templates/telerikReportViewerTemplate-FA.html\")',*@\n\t\t\t\t\t//ReportSource - report description\n\t\t\t\t\treportSource: {\n\t\t\t\t\t\t// The report can be set to a report file name\n\t\t\t\t\t\t// or CLR type name (report class definition).\n\t\t\t\t\t\treport: \"Barcodes Report.trdp\",\n\t\t\t\t\t\t// Parameters name value dictionary\n\t\t\t\t\t\tparameters: {}\n\t\t\t\t\t},\n\t\t\t\t\t// Specifies whether the viewer is in interactive or print preview mode.\n\t\t\t\t\t// PRINT_PREVIEW - Displays the paginated report as if it is printed on paper. Interactivity is not enabled.\n\t\t\t\t\t// INTERACTIVE - Displays the report in its original width and height without paging. Additionally interactivity is enabled.\n\t\t\t\t\tviewMode: telerikReportViewer.ViewModes.INTERACTIVE,\n\t\t\t\t\t// Sets the scale mode of the viewer.\n\t\t\t\t\t// Three modes exist currently:\n\t\t\t\t\t// FIT_PAGE - The whole report will fit on the page (will zoom in or out), regardless of its width and height.\n\t\t\t\t\t// FIT_PAGE_WIDTH - The report will be zoomed in or out so that the width of the screen and the width of the report match.\n\t\t\t\t\t// SPECIFIC - Uses the scale to zoom in and out the report.\n\t\t\t\t\tscaleMode: telerikReportViewer.ScaleModes.SPECIFIC,\n\t\t\t\t\t// Zoom in and out the report using the scale\n\t\t\t\t\t// 1.0 is equal to 100%, i.e. the original size of the report\n\t\t\t\t\tscale: 1.0,\n\t\t\t\t});\n\t\t\t});\n\t\t</script>\n\t</body>\n\t</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Print Command in React Report Viewer\nDESCRIPTION: Example showing how to create a Print button that executes the print command of the React Report Viewer. The code demonstrates how to render the viewer component alongside a custom print button that triggers the viewer's print functionality.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/api-reference/properties.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet viewer;\nReactDOM.render(\n\t<div>\n\t\t<TelerikReportViewer\n\t\t...\n\t\t/>\n\t\t<button onClick={ () => viewer.commands.print.exec() }>Print</button>\n\t</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Parameter Editor JavaScript Functions\nDESCRIPTION: This code snippet defines the JavaScript functions required for a custom parameter editor in the Blazor Report Viewer.  It includes the `matchFunction` to determine if the editor is suitable for a given parameter and the `createEditorFunction` to create the editor UI and handle value changes. The `matchFunction` checks if the parameter has available values and is not multi-valued.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!--Kendo all is needed for the DropDownList widget itself-->\n    <script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/kendo.all.min.js\"></script>\n\n    <script>\n        window.trvParameterEditors = {\n\n            matchFunction: function (parameter) {\n             return Boolean(parameter.availableValues) && !parameter.multivalue;\n            },\n\n            createEditorFunction: function createEditorFunction(placeholder, options) {\n        \n                let dropDownListElement = $(placeholder).html('<input style=\"width: 50px;\" />');\n                let valueChangedCallback = options.parameterChanged;\n                let parameter;\n\n                    function onChange(e) {\n                        var years = $(dropDownListElement).data(\"kendoDropDownList\");\n                        var val = years.value();\n                        valueChangedCallback(parameter, val);\n                    }\n\n                return {\n                    beginEdit: function (param) {\n                    parameter = param;\n\n                    $(dropDownListElement).kendoDropDownList({\n                        dataSource: param.availableValues.map((el) => el.value),\n                        change: onChange\n                    });\n\n                    dropDownList = $(dropDownListElement).data(\"kendoDropDownList\");\n                }\n            };\n        }\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Boolean Parameter Editor\nDESCRIPTION: Implements a custom parameter editor for boolean values using Kendo UI DropDownList. Includes parameter matching logic and editor creation functionality for boolean parameters with available values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction customMatch(parameter) {\n    return Boolean(parameter.availableValues)\n        && !parameter.multivalue\n        && parameter.type === telerikReportViewer.ParameterTypes.BOOLEAN;\n}\nfunction createCustomEditor(placeholder, options) {\n    var dropDownElement = $(placeholder).html('<div></div>');\n    var parameter,\n          valueChangedCallback = options.parameterChanged,\n          dropDownList;\n    function onChange() {\n        var val = dropDownList.value();\n        valueChangedCallback(parameter, val);\n    }\n    return {\n        beginEdit: function (param) {\n            parameter = param;\n            $(dropDownElement).kendoDropDownList({\n                dataTextField: \"name\",\n                dataValueField: \"value\",\n                value: parameter.value,\n                dataSource: parameter.availableValues,\n                change: onChange\n            });\n            dropDownList = $(dropDownElement).data(\"kendoDropDownList\");\n        }\n    };\n}\n```\n\nLANGUAGE: CSHTML\nCODE:\n```\n@(Html.TelerikReporting().ReportViewer()\n     .Id(\"reportViewer1\")\n     .ParameterEditors(\n                    editors => editors\n                     .CustomEditors(new CustomParameterEditor\n                        {\n                            MatchFunction = \"customMatch\",\n                            CreateEditorFunction = \"createCustomEditor\"\n                        })\n         )\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Print Command to Button in HTML5 Report Viewer\nDESCRIPTION: Demonstrates how to add a print command to a button using data attributes in the HTML5 Report Viewer. The data-command attribute specifies the action, while data-target-report-viewer targets a specific viewer instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/data-attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button id=\"printButton\" data-command=\"telerik_ReportViewer_print\" data-target-report-viewer=\"#reportViewer1\">Print report</button>\n```\n\n----------------------------------------\n\nTITLE: Applying JsonConfigFilter to ReportsController\nDESCRIPTION: This code demonstrates how to apply the custom JsonConfigFilter attribute to the ReportsController class. This ensures that only the reports controller uses the specific JSON serialization settings needed for proper report rendering.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resolve-no-report-instance-error-telerik-reporting.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Route(\"api/[controller]\")]\n[ApiController]\n[JsonConfigFilter]\npublic class ReportsController : ReportsControllerBase\n{\n\tpublic ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n\t: base(reportServiceConfiguration)\n\t\t{\n\t\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Report Definition to XML in C#\nDESCRIPTION: Shows how to use ReportXmlSerializer to serialize a report definition to an XML file using XmlWriter\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/serialize-report-definition-in-xml.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Snippet from CodeSnippets\\CS\\API\\Telerik\\Reporting\\XmlSerializationSnippets.cs region=XmlWriterSerializationSnippet\n```\n\n----------------------------------------\n\nTITLE: Configuring Services for Telerik Reporting in ASP.NET Core Startup\nDESCRIPTION: This snippet shows how to configure services in the Startup class of an ASP.NET Core application. It registers the ConfigurationService, IProductRepository, and sets up the ReportServiceConfiguration with a custom report resolver.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-inject-custom-dependency-in-reports-controller-of-dot-net-core-application.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext<...>(options => ...);\n    ...\n    services.AddScoped<IProductRepository, ProductRepository>();\n    ...\t\n\tservices.TryAddSingleton<ConfigurationService>(sp => new ConfigurationService(sp.GetService<IHostingEnvironment>()));\n    services.TryAddScoped<IReportResolver, CustomReportResolver>();\n    services.TryAddScoped<IReportServiceConfiguration>(sp =>\n      new ReportServiceConfiguration\n      {\n        ReportingEngineConfiguration = sp.GetRequiredService<ConfigurationService>().Configuration,\n        HostAppId = \"Html5DemoAppCore\",\n        Storage = new FileStorage(),\n        ReportResolver = sp.GetRequiredService<IReportResolver>()\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Recommendations for Report Design\nDESCRIPTION: A comprehensive list of performance factors that can impact report rendering speed and efficiency in Telerik Reporting\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/performance-considerations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Minimize PageCount usage\n* Reduce report item count\n* Optimize rendering media\n* Align Excel report items\n* Filter data efficiently\n* Simplify expressions\n* Limit subreport items\n* Minimize HtmlTextBox usage\n* Optimize event handling\n* Use Graph over Chart items\n```\n\n----------------------------------------\n\nTITLE: Report Viewer Component Implementation\nDESCRIPTION: React component implementing the Telerik Report Viewer with configuration options\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-html5-viewer-in-react-js.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { Component } from 'react';\n\n\texport default class ReportViewer extends Component {\n\t\tcomponentDidMount() {\n\t\t\twindow.jQuery('#reportViewer1')\n\t\t\t\t.telerik_ReportViewer({\n\t\t\t\t\tserviceUrl: 'https://demos.telerik.com/reporting/api/reports/',\n\t\t\t\t\treportSource: {\n\t\t\t\t\t\treport: 'ReportBook.trbp'\n\t\t\t\t\t},\n\t\t\t\t\tscale: 1.0,\n\t\t\t\t\tviewMode: 'INTERACTIVE',\n\t\t\t\t\tprintMode: 'SPECIFIC',\n\t\t\t\t\tsendEmail: { enabled: true }\n\t\t\t\t});\n\t\t}\n\n\t\trender() {\n\t\t\treturn <div id=\"reportViewer1\"></div>\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection String Manager in C#\nDESCRIPTION: A C# class that manages connection strings for Telerik Reports. It handles different report source types (URI, XML, Instance, Type) and updates connection strings dynamically for SQL data sources, including nested items and drill-through reports.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/changing-the-connection-string-dynamically-according-to-runtime-data.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclass ReportConnectionStringManager\n{\n\treadonly string connectionString;\n\n\tpublic ReportConnectionStringManager(string connectionString)\n\t{\n\t\tthis.connectionString = connectionString;\n\t}\n\n\tpublic ReportSource UpdateReportSource(ReportSource sourceReportSource)\n\t{\n\t\tif (sourceReportSource is UriReportSource)\n\t\t{\n\t\t\tvar uriReportSource = (UriReportSource)sourceReportSource;\n\t\t\t// unpackage TRDP report\n\t\t\tvar reportInstance = UnpackageReport(uriReportSource);\n\t\t\t// or deserialize TRDX report(legacy format)\n\t\t\t// var reportInstance = DeserializeReport(uriReportSource);\n\t\t\tValidateReportSource(uriReportSource.Uri);\n\t\t\tthis.SetConnectionString(reportInstance);\n\t\t\treturn CreateInstanceReportSource(reportInstance, uriReportSource);\n\t\t}\n\n\t\tif (sourceReportSource is XmlReportSource)\n\t\t{\n\t\t\tvar xml = (XmlReportSource)sourceReportSource;\n\t\t\tValidateReportSource(xml.Xml);\n\t\t\tvar reportInstance = this.DeserializeReport(xml);\n\t\t\tthis.SetConnectionString(reportInstance);\n\t\t\treturn CreateInstanceReportSource(reportInstance, xml);\n\t\t}\n\n\t\tif (sourceReportSource is InstanceReportSource)\n\t\t{\n\t\t\tvar instanceReportSource = (InstanceReportSource)sourceReportSource;\n\t\t\tthis.SetConnectionString((ReportItemBase)instanceReportSource.ReportDocument);\n\t\t\treturn instanceReportSource;\n\t\t}\n\n\t\tif (sourceReportSource is TypeReportSource)\n\t\t{\n\t\t\tvar typeReportSource = (TypeReportSource)sourceReportSource;\n\t\t\tvar typeName = typeReportSource.TypeName;\n\t\t\tValidateReportSource(typeName);\n\t\t\tvar reportType = Type.GetType(typeName);\n\t\t\tvar reportInstance = (Report)Activator.CreateInstance(reportType);\n\t\t\tthis.SetConnectionString((ReportItemBase)reportInstance);\n\t\t\treturn CreateInstanceReportSource(reportInstance, typeReportSource);\n\t\t}\n\n\t\tthrow new NotImplementedException(\"Handler for the used ReportSource type is not implemented.\");\n\t}\n\n\tReportSource CreateInstanceReportSource(IReportDocument report, ReportSource originalReportSource)\n\t{\n\t\tvar instanceReportSource = new InstanceReportSource { ReportDocument = report };\n\t\tinstanceReportSource.Parameters.AddRange(originalReportSource.Parameters);\n\t\treturn instanceReportSource;\n\t}\n\n\tvoid ValidateReportSource(string value)\n\t{\n\t\tif (value.Trim().StartsWith(\"=\"))\n\t\t{\n\t\t\tthrow new InvalidOperationException(\"Expressions for ReportSource are not supported when changing the connection string dynamically\");\n\t\t}\n\t}\n\n\tReport UnpackageReport(UriReportSource uriReportSource)\n\t{\n\t\tvar reportPackager = new ReportPackager();\n\t\tusing (var sourceStream = System.IO.File.OpenRead(uriReportSource.Uri))\n\t\t{\n\t\t\tvar report = (Report)reportPackager.UnpackageDocument(sourceStream);\n\t\t\treturn report;\n\t\t}\n\t}\n\n\tReport DeserializeReport(UriReportSource uriReportSource)\n\t{\n\t\tvar settings = new System.Xml.XmlReaderSettings();\n\t\tsettings.IgnoreWhitespace = true;\n\t\tusing (var xmlReader = System.Xml.XmlReader.Create(uriReportSource.Uri, settings))\n\t\t{\n\t\t\tvar xmlSerializer = new Telerik.Reporting.XmlSerialization.ReportXmlSerializer();\n\t\t\tvar report = (Telerik.Reporting.Report)xmlSerializer.Deserialize(xmlReader);\n\t\t\treturn report;\n\t\t}\n\t}\n\n\tReport DeserializeReport(XmlReportSource xmlReportSource)\n\t{\n\t\tvar settings = new System.Xml.XmlReaderSettings();\n\t\tsettings.IgnoreWhitespace = true;\n\t\tvar textReader = new System.IO.StringReader(xmlReportSource.Xml);\n\t\tusing (var xmlReader = System.Xml.XmlReader.Create(textReader, settings))\n\t\t{\n\t\t\tvar xmlSerializer = new Telerik.Reporting.XmlSerialization.ReportXmlSerializer();\n\t\t\tvar report = (Telerik.Reporting.Report)xmlSerializer.Deserialize(xmlReader);\n\t\t\treturn report;\n\t\t}\n\t}\n\n\tvoid SetConnectionString(ReportItemBase reportItemBase)\n\t{\n\t\tif (reportItemBase.Items.Count < 1)\n\t\t\treturn;\n\n\t\tif (reportItemBase is Report)\n\t\t{\n\t\t\tvar report = (Report)reportItemBase;\n\n\t\t\tif (report.DataSource is SqlDataSource)\n\t\t\t{\n\t\t\t\tvar sqlDataSource = (SqlDataSource)report.DataSource;\n\t\t\t\tsqlDataSource.ConnectionString = connectionString;\n\t\t\t}\n\t\t\tforeach (var parameter in report.ReportParameters)\n\t\t\t{\n\t\t\t\tif (parameter.AvailableValues.DataSource is SqlDataSource)\n\t\t\t\t{\n\t\t\t\t\tvar sqlDataSource = (SqlDataSource)parameter.AvailableValues.DataSource;\n\t\t\t\t\tsqlDataSource.ConnectionString = connectionString;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tforeach (var item in reportItemBase.Items)\n\t\t{\n\t\t\t//recursively set the connection string to the items from the Items collection\n\t\t\tSetConnectionString(item);\n\n\t\t\t//set the drillthrough report connection strings\n\t\t\tvar drillThroughAction = item.Action as NavigateToReportAction;\n\t\t\tif (null != drillThroughAction)\n\t\t\t{\n\t\t\t\tvar updatedReportInstance = this.UpdateReportSource(drillThroughAction.ReportSource);\n\t\t\t\tdrillThroughAction.ReportSource = updatedReportInstance;\n\t\t\t}\n\n\t\t\tif (item is SubReport)\n\t\t\t{\n\t\t\t\tvar subReport = (SubReport)item;\n\t\t\t\tsubReport.ReportSource = this.UpdateReportSource(subReport.ReportSource);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Covers all data items(Crosstab, Table, List, Graph, Map and Chart)\n\t\t\tif (item is DataItem)\n\t\t\t{\n\t\t\t\tvar dataItem = (DataItem)item;\n\t\t\t\tif (dataItem.DataSource is SqlDataSource)\n\t\t\t\t{\n\t\t\t\t\tvar sqlDataSource = (SqlDataSource)dataItem.DataSource;\n\t\t\t\t\tsqlDataSource.ConnectionString = connectionString;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IDefinitionStorage Interface in C#\nDESCRIPTION: Implements the IDefinitionStorage interface for custom report storage functionality. Handles CRUD operations for reports and folders using Entity Framework Core.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/implement-database-definition-storage-efcore.md#2025-04-21_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nusing CSharp.Net7.Html5IntegrationDemo.EFCore;\nusing Microsoft.EntityFrameworkCore;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Telerik.WebReportDesigner.Services;\nusing Telerik.WebReportDesigner.Services.Models;\nusing CSharp.Net7.Html5IntegrationDemo.EFCore.Models;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\n\nnamespace CSharp.Net7.Html5IntegrationDemo\n{\n\tpublic class CustomDefinitionStorage : IDefinitionStorage\n\t{\n\t\tprivate SqlDefinitionStorageContext _dbContext { get; }\n\t\n\t\tpublic CustomDefinitionStorage(SqlDefinitionStorageContext context)\n\t\t{\n\t\t\tthis._dbContext = context;\n\t\t}\n\n\t\tpublic Task<ResourceFolderModel> CreateFolderAsync(CreateFolderModel model)\n\t\t{\n\n\t\t\tif(this._dbContext.ReportFolders.Any(f => f.Uri == model.ParentUri + \"\\\\\" + model.Name)) {\n\t\t\t\tthrow new ResourceFolderAlreadyExistsException();\n\t\t\t}\n\n\t\t\tvar entityEntry = this._dbContext.ReportFolders.Add(model.ToDbReportFolderModel());\n\n\t\t\tif (!string.IsNullOrEmpty(model.ParentUri))\n\t\t\t{\n\t\t\t\tvar parentFolder = this._dbContext.ReportFolders\n\t\t\t\t.FirstOrDefault(f => f.Uri == model.ParentUri);\n\n\t\t\t\tif (parentFolder != null)\n\t\t\t\t{\n\t\t\t\t\tparentFolder.HasSubFolders = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._dbContext.SaveChanges();\n\n\t\t\treturn Task.FromResult(entityEntry.Entity.ToResourceFolderModel());\n\t\t}\n\n\t\tpublic Task DeleteAsync(string uri)\n\t\t{\n\t\t\tvar report = this._dbContext.Reports\n\t\t\t\t\t.FirstOrDefault(r => r.Uri == this.PrepareResourceUri(uri)) ?? throw new ReportNotFoundException();\n\t\t\tthis._dbContext.Reports.Remove(report);\n\t\t\tthis._dbContext.SaveChanges();\n\t\t\treturn Task.CompletedTask;\n\t\t}\n\n\t\tpublic Task DeleteFolderAsync(string uri)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar folderForDeletion = this._dbContext.ReportFolders.FirstOrDefault(f => f.Uri == uri);\n\t\t\t\tvar parentUri = folderForDeletion.ParentUri;\n\t\t\t\tif (folderForDeletion != null)\n\t\t\t\t{\n\t\t\t\t\tDeleteFolder(folderForDeletion);\n\t\t\t\t\tthis._dbContext.SaveChanges();\n\t\t\t\t\tvar subFoldersCount = this._dbContext.ReportFolders.Count(f => f.ParentUri == parentUri);\n\t\t\t\t\tif (subFoldersCount > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parentFolderName = parentUri.Split(\"\\\\\").Last();\n\t\t\t\t\t\tvar parentFolder = this._dbContext.ReportFolders.FirstOrDefault(f => f.Name == parentFolderName);\n\t\t\t\t\t\t\tif(parentFolder != null) parentFolder.HasSubFolders = false;\n\t\t\t\t\t\tthis._dbContext.SaveChanges();\n\t\t\t\t\t}\n\t\t\t\t\treturn Task.CompletedTask;\n\t\t\t\t}\n\t\t\t\treturn Task.FromException(new ResourceFolderNotFoundException());\n\t\t\t}\n\t\t\tcatch (Exception)\n\t\t\t{\n\t\t\t\tthrow;\n\t\t\t}\n\n\t\t}\n\n\t\tpublic Task<byte[]> GetAsync(string resourceName)\n\t\t{\n\t\t\tvar reportBytes = this.GetDbReportModel(this.PrepareResourceUri(resourceName))?.Bytes;\n\t\t\treturn reportBytes == null ? throw new ReportNotFoundException() : Task.FromResult(reportBytes);\n\t\t}\n\n\t\tpublic Task<ResourceFolderModel> GetFolderAsync(string uri)\n\t\t{\n\t\t\t// it is not necessar to implement this one\n\t\t\tvar folder = this._dbContext.ReportFolders.FirstOrDefault(f => f.Uri == uri);\n\t\t\treturn folder == null \n\t\t\t\t? throw new ResourceFolderNotFoundException() \n\t\t\t\t: Task.FromResult(folder.ToResourceFolderModel());\n\t\t}\n\n\t\tpublic Task<IEnumerable<ResourceModelBase>> GetFolderContentsAsync(string uri)\n\t\t{\n\t\t\turi = (uri ?? string.Empty);\n\n\t\t\tvar reps = this._dbContext.Reports\n\t\t\t\t.Where(r => r.ParentUri == uri)\n\t\t\t\t.Select(r => r.ToResourceFileModel()).AsEnumerable<ResourceModelBase>();\n\t\t\t\n\t\t\tvar folders = this._dbContext.ReportFolders\n\t\t\t\t.Where(f => f.ParentUri == uri)\n\t\t\t\t.Select(f => f.ToResourceFolderModel()).AsEnumerable<ResourceModelBase>();\n\n\t\t\tvar result = folders.Union(reps);\n\n\t\t\treturn Task.FromResult<IEnumerable<ResourceModelBase>>(result);\n\t\t}\n\n\t\tpublic Task<ResourceFileModel> GetModelAsync(string uri)\n\t\t{\n\t\t\treturn Task.FromResult(\n\t\t\t\tthis.GetDbReportModel(uri)\n\t\t\t\t\t\t.ToResourceFileModel());\n\t\t}\n\n\t\tpublic Task<ResourceFileModel> RenameAsync(RenameResourceModel model)\n\t\t{\n\t\t\tstring oldName = model.OldUri.Split(\"\\\\\").Last();\n\t\t\tvar report = this._dbContext.Reports.FirstOrDefault(r => r.Uri == this.PrepareResourceUri(model.OldUri));\n\t\t\tif (report != null)\n\t\t\t{\n\t\t\t\treport.Name = model.Name;\n\t\t\t\treport.Uri = report.Uri.Replace(oldName, model.Name);\n\t\t\t\treport.ModifiedOn = DateTime.Now;\n\n\t\t\t\tthis._dbContext.SaveChanges();\n\n\t\t\t\treturn Task.FromResult(report.ToResourceFileModel());\n\t\t\t}\n\t\t\tthrow new ResourceNotFoundException();\n\t\t}\n\n\t\tpublic async Task<ResourceFolderModel> RenameFolderAsync(RenameFolderModel model)\n\t\t{\n\t\t\tvar folder = this._dbContext.ReportFolders.FirstOrDefault(r => r.Uri == model.OldUri);\n\t\t\tif (folder != null)\n\t\t\t{\n\t\t\t\tawait RenameFolderAndSubFolders(folder, model);\n\t\t\t\tfolder.ModifiedOn = DateTime.Now;\n\t\t\t\tthis._dbContext.SaveChanges();\n\n\t\t\t\treturn folder.ToResourceFolderModel();\n\t\t\t}\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Registering Telerik Reporting Middleware in ASP.NET Core Pipeline\nDESCRIPTION: Registers the Telerik Reporting middleware in the ASP.NET Core application pipeline and enables endpoint routing which is required for the reporting service to function properly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-5.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\napp.UseTelerikReporting();\napp.UseRouting();\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Telerik Reporting SqlDataSource in C#\nDESCRIPTION: Code snippet showing how to create a custom component by inheriting from Telerik.Reporting.SqlDataSource in C#. This allows reuse of a configured data source across multiple reports.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/reuse-data-source-components-across-reports.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic partial class Component1 : Telerik.Reporting.SqlDataSource\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Print Mode for Telerik Report Viewer\nDESCRIPTION: JavaScript code that dynamically sets the print mode based on browser type. Forces PDF plugin for Chrome and PDF file download for other browsers. Initializes the report viewer with custom print mode and other configuration options.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/printing-reports.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar printMode = /(chrome)/.test(navigator.userAgent.toLowerCase())\n\t? telerikReportViewer.PrintModes.FORCE_PDF_PLUGIN\n\t: telerikReportViewer.PrintModes.FORCE_PDF_FILE;\n$(\"#reportViewer1\")\n\t.telerik_ReportViewer({\n\t\tserviceUrl: \"../api/reports/\",\n\t\ttemplateUrl: 'src/templates/telerikReportViewerTemplate-{{buildversion}}.html',\n\t\treportSource: { report: \"product catalog.trdp\" },\n\t\tprintMode: printMode\n\t});\n```\n\n----------------------------------------\n\nTITLE: Reports Initializer Extension Class in C#\nDESCRIPTION: This C# extension class, `ReportsInitializer`, provides a method `Seed` to populate the report database with a sample report if it's empty. It uses Entity Framework Core to interact with the database through `SqlDefinitionStorageContext`, reads the sample report from a file, converts it to a database entity, and saves it to the database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/implement-database-definition-storage-efcore.md#2025-04-21_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\npublic static class ReportsInitializer\n\t{\n\t\tpublic static WebApplication Seed(this WebApplication app)\n\t\t{\n\t\t\tusing var scope = app.Services.CreateScope();\n\t\t\tvar context =  scope.ServiceProvider.GetRequiredService<SqlDefinitionStorageContext>();\n\n\t\t\ttry {\n\n\t\t\t\tif (!context.Reports.Any())\n\t\t\t\t{\n\t\t\t\t\t\tvar saveResourceModel = new SaveResourceModel()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName = \"SampleReport.trdp\",\n\t\t\t\t\t\t\tParentUri = string.Empty\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvar reportBytes = System.IO.File.ReadAllBytes(pathToSampleReport);\n\t\t\t\t\t\tvar entity = saveResourceModel.ToDbReportModel(reportBytes);\n\n\t\t\t\t\t\tcontext.Reports.Add(entity);\n\t\t\t\t\t\tcontext.SaveChanges();\n\t\t\t\t}\n\n\t\t\t\treturn app;\n\t\t\t}\n\t\t\tcatch (Exception)\n\t\t\t{\n\t\t\t\tthrow;\n\t\t\t}\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting Report DataSource in NeedDataSource Event (C#)\nDESCRIPTION: This C# code snippet demonstrates how to set the report's DataSource within the `NeedDataSource` event handler. It retrieves the 'Year' parameter value from the report, converts it to a string, and passes it to the `GetData` method. The returned DataTable is then assigned as the report's DataSource, effectively filtering the data based on the selected year.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/use-parameters-to-retrieve-specific-data.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Report2_NeedDataSource(object sender, EventArgs e)\n\t{\n\t\tTelerik.Reporting.Processing.Report report = (Telerik.Reporting.Processing.Report)sender;\n\t\treport.DataSource = GetData(report.Parameters[\"Year\"].Value.ToString());\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting Service Dependencies in ASP.NET Core 3.1\nDESCRIPTION: Sets up the required IReportServiceConfiguration for the ReportsController. This configuration includes the reporting engine configuration, host application ID, storage provider, and a URI-based report source resolver that points to the Reports folder in the content root path.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Configure dependencies for ReportsController.\n\tservices.TryAddSingleton<IReportServiceConfiguration>(sp =>\n\t\tnew ReportServiceConfiguration\n\t\t{\n\t\t\tReportingEngineConfiguration = ConfigurationHelper.ResolveConfiguration(sp.GetService<IWebHostEnvironment>()),\n\t\t\tHostAppId = \"ReportingCore3App\",\n\t\t\tStorage = new FileStorage(),\n\t\t\tReportSourceResolver = new UriReportSourceResolver(\n\t\t\t\tSystem.IO.Path.Combine(sp.GetService<IWebHostEnvironment>().ContentRootPath, \"Reports\"))\n\t\t});\n```\n\n----------------------------------------\n\nTITLE: Creating a Stored Procedure for Data Selection in SQL Server\nDESCRIPTION: This SQL code creates a simple stored procedure named GetAllContacts that retrieves first and last names from the Person.Contact table.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/selecting-data-with-the-sqldatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE PROCEDURE GetAllContacts AS\nSELECT FirstName, LastName FROM Person.Contact;\nGO\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Telerik Reporting REST Service on Linux\nDESCRIPTION: Complete Dockerfile for building and running a Telerik Reporting REST Service with CORS enabled on a Linux Docker container. It includes steps for setting up the environment, copying necessary files, and configuring the build process.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/dot-net-core-support.md#2025-04-21_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\n# command to BUILD docker IMAGE from the Windows Terminal:\n# docker image build -f \"{Replace With Installation Folder}\\Examples\\CSharp\\.NET 8\\ReportingRestServiceCorsDemo\\Dockerfile\" -t net8reportingrestservicecorsdemo --build-arg TelerikNugetServerApiKey={Replace With Your TelerikNuGetApiKey} \"{Replace With Installation Folder}\"\n\n# command to RUN docker CONTAINER from the Windows Terminal:\n# docker run -e ConnectionStrings__Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString__connectionString=\"{Replace With Connection String to AdventureWorks Database Accessible From the Docker Container}\" -it -p 4040:8080 net8reportingrestservicecorsdemo\n\n\n#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\n\nWORKDIR /app\nEXPOSE 8080\n\nRUN apt-get update && \\\n    apt-get install -y libfreetype6 libfontconfig1\n\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nARG BUILD_CONFIGURATION=Release\nWORKDIR /src\n\nCOPY [\"Report Designer/Examples\", \"Reports\"]\nCOPY [\"Examples/CSharp/.NET 8/ReportingRestServiceCorsDemo\", \".NET 8/ReportingRestServiceCorsDemo/\"]\nCOPY [\"Examples/CSharp/Business Objects\", \"Business Objects/\"]\nCOPY [\"Examples/CSharp/nuget.config\", \"\"]\n\nARG TelerikNugetServerApiKey\nENV TelerikNugetServer_API_KEY $TelerikNugetServerApiKey\n\nRUN dotnet restore \"/src/.NET 8/ReportingRestServiceCorsDemo/CSharp.Net8.ReportingRestServiceCorsDemo.csproj\"\n\nWORKDIR \"/src/.NET 8/ReportingRestServiceCorsDemo\"\nRUN dotnet build \"./CSharp.Net8.ReportingRestServiceCorsDemo.csproj\" -c $BUILD_CONFIGURATION -o /app/build\n\nFROM build AS publish\nARG BUILD_CONFIGURATION=Release\nRUN dotnet publish \"./CSharp.Net8.ReportingRestServiceCorsDemo.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\n\nFROM base AS final\nWORKDIR /app/Examples/CSharp/NET8/ReportingRestServiceCorsDemo\nCOPY --from=publish /app/publish .\nCOPY --from=build [\"/src/Reports\", \"/app/Report Designer/Examples\"]\nENTRYPOINT [\"dotnet\", \"CSharp.Net8.ReportingRestServiceCorsDemo.dll\"]\n```\n\n----------------------------------------\n\nTITLE: Command Method Table Structure in Markdown\nDESCRIPTION: Markdown table structure defining the key methods and properties of the HTML5 Report Viewer command interface, including exec, enabled, and checked methods.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/command.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Method | Description |\n| ------ | ------ |\n| __exec__ |The method that triggers the command.|\n| __enabled__ |Returns a bool value and can be used to find in what state the UI associated with the command should be.|\n| __checked__ |Returns a bool value and can be used to find in what state the UI associated with the command should be.|\n```\n\n----------------------------------------\n\nTITLE: Creating Master-Detail Report Using SubReport Item in VB.NET\nDESCRIPTION: This VB.NET code shows how to programmatically create a master-detail report using SubReport items. It creates instance report sources for both the main report and subreport, sets up the necessary parameters, establishes the relationship between reports, and generates a PDF output file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-programmatically-create-a-master-detail-report-using-subreport-item.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports System.Reflection\nImports Telerik.Reporting\nImports Telerik.Reporting.Processing\nImports System.IO\n\nModule Module1\n\tSub Main()\n\n\t\tConsole.WriteLine(\"Enter Number: 1, 2 or 3\")\n\t\tDim Input As Object = Console.ReadLine()\n\n\t\tDim ReportProcessor As New ReportProcessor()\n\t\tDim DeviceInfo As New Hashtable()\n\n\t\t'Create MainReport InstanceReportSource\n\t\tDim MainInstanceReportSource As New InstanceReportSource()\n\n\t\t'Create SubReport InstanceReportSource\n\t\tDim SubInstanceReportSource As New InstanceReportSource With {\n\t\t\t.ReportDocument = New SubReport() '   Set ReportDocument of SubInstanceReportSource\n\t\t}\n\n\t\t'Set Parameters of SubReport InstanceReportSource\n\t\tSubInstanceReportSource.Parameters.Add(\"PersonId\", Input)\n\n\t\t'Create MainReport Object\n\t\tDim MainReportObject As New MainReport()\n\n\t\t'Find SubReport Report Item of Main Report\n\t\tDim SubReportSource As Telerik.Reporting.SubReport = MainReportObject.Items.Find(\"SubReport1\", True)(0)\n\n\t\t'Set Report Source of SubReport in MainReport\n\t\tSubReportSource.ReportSource = SubInstanceReportSource\n\n\t\t'Set the ReportDocument of the MainInstanceReportSource\n\t\tMainInstanceReportSource.ReportDocument = MainReportObject\n\n\t\t'Set Parameters of MainInstanceReportSource\n\t\tMainInstanceReportSource.Parameters.Add(\"PersonId\", Input)\n\n\t\t'Continue with Embedding the Report Engine in Application\n\t\tDim PdfRendering As RenderingResult = ReportProcessor.RenderReport(\"PDF\", MainInstanceReportSource, DeviceInfo)\n\n\t\tDim FileName As String = PdfRendering.DocumentName + \".\" + PdfRendering.Extension\n\n\t\t'Saves the Report in Temp Folder C:\\Users\\[USER]\\AppData\\Local\\Temp\n\t\tDim Path As String = IO.Path.GetTempPath()\n\t\tDim FilePath As String = IO.Path.Combine(Path, FileName)\n\n\t\t'Writes File To Disk\n\t\tUsing Stream As New FileStream(FilePath, FileMode.Create)\n\t\t\tStream.Write(PdfRendering.DocumentBytes, 0, PdfRendering.DocumentBytes.Length)\n\t\tEnd Using\n\n\t\tConsole.WriteLine($\"File Created: {FilePath}\")\n\n\t\tConsole.WriteLine(\"Press Enter to Exit\")\n\n\t\tConsole.ReadKey()\n\tEnd Sub\nEnd Module\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Angular Report Viewer Component\nDESCRIPTION: TypeScript component implementation showing the report viewer configuration and command execution functionality. Includes interface definition, component setup, and command button configurations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild  } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\nimport { ReportSourceOptions } from '@progress/telerik-common-report-viewer'\n\ninterface commandButtons {\n\tname: string;\n\tcommandName: string;\n\tcommandValue?: any\n}\n\n@Component({\n\tselector: 'app-root',\n\tstyles: [`.func-btn-wrapper {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tflex-wrap: wrap;\n\t\tgap: 1rem;\n\t\tpadding: 2rem;\n\t\tpadding-top: 0.5rem;\n\t\tmargin-top: 2rem;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tborder-top: 1px solid #7e7d7d;\n\t}`],\n\ttemplateUrl: './app.component.html',\n\tstyleUrls: ['./app.component.scss']\n})\n\nexport class AppComponent {\n\ttitle = 'Native Angular Report Viewer Demo';\n\n\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\treportSource: ReportSourceOptions = { report: \"Dashboard.trdx\", parameters: { ReportYear: 2004 } };\n\tserviceUrl: string = \"https://demos.telerik.com/reporting/api/reports\";\n\n\tpublic buttons: Array<commandButtons> = [\n\t\t{ name: 'navigateBackward', commandName: 'navigateBackward' },\n\t\t{ name: 'navigateForward', commandName: 'navigateForward' },\n\t\t{ name: 'stopRendering', commandName: 'stopRendering' },\n\t\t{ name: 'refreshReport', commandName: 'refreshReport' },\n\t\t{ name: 'navigateToFirstPage', commandName: 'navigateToFirstPage' },\n\t\t{ name: 'navigateToPrevPage', commandName: 'navigateToPrevPage' },\n\t\t{ name: 'navigateToNextPage', commandName: 'navigateToNextPage' },\n\t\t{ name: 'navigateToLastPage', commandName: 'navigateToLastPage' },\n\t\t{ name: 'toggleDocumentMap', commandName: 'toggleDocumentMap' },\n\t\t{ name: 'toggleParametersSection', commandName: 'toggleParametersSection' },\n\t\t{ name: 'setViewMode', commandName: 'setViewMode' },\n\t\t{ name: 'zoomIn', commandName: 'zoomIn' },\n\t\t{ name: 'zoomOut', commandName: 'zoomOut' },\n\t\t{ name: 'setScaleMode', commandName: 'setScaleMode', commandValue: { scale: 3, scaleMode: 'Specific' } },\n\t\t{ name: 'setReportSource', commandName: 'setReportSource', commandValue: { report: 'Invoice.trdx', parameters: { OrderNumber: 'SO51088' }}},\n\t\t{ name: 'exportReport', commandName: 'exportReport', commandValue: 'csv'  },\n\t\t{ name: 'setAuthenticationToken', commandName: 'setAuthenticationToken', commandValue: 'Sample Authentication Token'  },\n\t\t{ name: 'printReport', commandName: 'printReport' },\n\t\t{ name: 'toggleSearchWindow', commandName: 'toggleSearchWindow' },\n\t]\n\n\tpublic execute(commandName: string, commandValue?: any): void {\n\t\tthis.viewer.executeCommand(commandName, commandValue);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers in Angular Component TypeScript\nDESCRIPTION: This snippet demonstrates how to create event handler functions in an Angular component for the report viewer. It shows implementation of the 'ready' and 'viewerToolTipOpening' events in the component's TypeScript file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/api-reference/events.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ReportViewerComponent implements AfterViewInit {\n\t\t@ViewChild('viewer1') viewer: TelerikReportViewerComponent;\n\t\t...\n\t\tready() {\n\t\t\tconsole.log('ready');\n\t\t}\n\t\tviewerToolTipOpening(e: any, args: any) {\n\t\t\tconsole.log('viewerToolTipOpening ' + args.toolTip.text);\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportService with MsSqlServerStorage - C#\nDESCRIPTION: This C# snippet demonstrates how to initialize the ReportServiceConfiguration with MsSqlServerStorage settings for the Reporting REST Service. It requires a properly configured instance and specified properties like ReportSourceResolver and Storage.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-storage/how-to-configure-an-mssql-database-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\MvcCS\\Controllers\\ReportsController.cs region=MSSqlReportsControllerImplementation}}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportDesignerService in C#\nDESCRIPTION: Sets up a custom ReportDesignerServiceConfiguration in the application's service collection. This snippet incorporates CustomSettingsStorage and is dependent on Telerik.WebReportDesigner Services. It establishes the storage configurations for definitions, resources, and shared data sources.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-encrypted-connection-strings-telerik-reporting.md#2025-04-21_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nbuilder.Services.TryAddSingleton<IReportDesignerServiceConfiguration>(sp => new ReportDesignerServiceConfiguration\n{\n    DefinitionStorage = new FileDefinitionStorage(reportsPath, new[] { \"Resources\", \"Shared Data Sources\" }),\n    ResourceStorage = new ResourceStorage(Path.Combine(reportsPath, \"Resources\")),\n    SharedDataSourceStorage = new FileSharedDataSourceStorage(Path.Combine(reportsPath, \"Shared Data Sources\")),\n    SettingsStorage = new CustomSettingsStorage(sp.GetService<IConfiguration>(), Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"Telerik Reporting\"))\n});\n```\n\n----------------------------------------\n\nTITLE: ReportsController Implementation in ASP.NET MVC (C#)\nDESCRIPTION: This code snippet demonstrates how to implement the ReportsController in an ASP.NET MVC application using C#. It shows the inheritance from ReportsControllerBase, setting the ReportServiceConfiguration, and resolving report definitions from the Reports subfolder. The code requires references to Telerik.Reporting and Telerik.Reporting.Services.WebApi assemblies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/how-to-implement-the-reportscontroller-in-an-application.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Web.Http;\nusing Telerik.Reporting.Cache.File;\nusing Telerik.Reporting.Services;\nusing Telerik.Reporting.Services.WebApi;\n\nnamespace MvcCS.Controllers\n{\n    public class ReportsController : ReportsControllerBase\n    {\n        static ReportServiceConfiguration reportServiceConfigurationValue;\n\n        static ReportsController()\n        {\n            //This is the folder that contains Reports definitions\n            string reportsPath = System.Web.Hosting.HostingEnvironment.MapPath(\"~/Reports\");\n\n            //Uncomment to use the default FileStorage implementation. You may optionally specify a path to persist reports.\n            //The default path is in the %TEMP% folder under the user name that the application runs under.\n            //The storage folder of the FileStorage component can be set through the constructor parameter:\n            //string storagePath = System.Web.Hosting.HostingEnvironment.MapPath(\"~/ReportCache\");\n            //var storage = new FileStorage(storagePath);\n\n            //Pass a custom storage implementation (e.g. DatabaseStorage) in order to persist report documents. Note that the storage must be initialized.\n            //The initialization requires a connection string to the storage database, and a DDL script for the database schema.\n            //Refer to the DatabaseStorage class documentation for more details.\n            //var storage = new DatabaseStorage(connectionString);\n\n\n            //Initialize the ReportServiceConfiguration object with the needed dependencies.\n            reportServiceConfigurationValue = new ReportServiceConfiguration\n            {\n                ReportingEngineConfiguration = Configuration.Current.ReportingConfiguration,\n                ReportResolver = new ReportFileResolver(reportsPath)\n                    .AddFallbackResolver(new ReportTypeResolver()),\n                Storage = new FileStorage(),\n                //Storage = storage,//Uncomment to use custom storage (e.g. DatabaseStorage).\n                //ClientSessionTimeout = 20,\n                //UseNativeNumberParsing = true\n            };\n        }\n\n        public ReportsController()\n        {\n            //Initialize the ReportServiceConfiguration object.\n            this.ReportServiceConfiguration = reportServiceConfigurationValue;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the Web Report Designer Component in React App\nDESCRIPTION: Import and render the Web Report Designer component in the main App component of the React application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-web-report-designer-in-react-js.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { Component } from 'react';\nimport './App.css';\n\nimport ReportDesigner from './components/ReportDesigner';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<ReportDesigner />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Binding SubReport DataSource to Main Report's DataObject\nDESCRIPTION: This snippet demonstrates how to bind the DataSource property of a Telerik Reporting subreport to the DataObject property of the ReportItem (SubReport control) in the main report. The expression `=ReportItem.DataObject` assigns the data associated with the SubReport item to the DataSource of the subreport, allowing it to display the corresponding data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-bind-sub-report-to-main-report-s-data.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n\nProperty path: DataSource\nExpression: =ReportItem.DataObject\n\n```\n\n----------------------------------------\n\nTITLE: Setting Report Definition Path in ASP.NET Core\nDESCRIPTION: Configures the path where TRDP or TRDX report definitions are stored, using dependency injection to access the web host environment and construct the path to the Reports folder in wwwroot.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-dotnet.md#2025-04-21_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nPath.Combine(sp.GetService<IWebHostEnvironment>().WebRootPath, \"Reports\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Telerik ReportViewer with Custom Parameters in JavaScript\nDESCRIPTION: This JavaScript code initializes the Telerik ReportViewer with custom parameters. It sets up the report source and uses the selected value from the custom UI to set the initial OrderNumber parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\",\n\t\t\tparameters: { OrderNumber: $('#invoiceId option:selected').val() }\n\t\t},\n\t\tready: function () {\n\t\t\t//this.refreshReport();\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files in ASP.NET Core 3.1\nDESCRIPTION: Configuration code in Startup.cs to enable serving static files in the ASP.NET Core application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/how-to-use-html5-report-viewer-in-an-asp.net-core-3.1-application.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\napp.UseStaticFiles();\n```\n\n----------------------------------------\n\nTITLE: Handling loadedReportChange Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `loadedReportChange` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `loadedReportChange` event is emitted when the previewed report is changed or refreshed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\tloadedReportChange() {\n\t\t\tconsole.log(\"This event will be emitted when the loaded report is changed.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Binding Event Handlers in Angular Component Template\nDESCRIPTION: This code shows how to bind event handlers to the Angular Report Viewer component in the HTML template. It demonstrates setting up the viewer with a service URL, report source, and attaching event handlers for 'ready' and 'viewerToolTipOpening' events.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/api-reference/events.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer #viewer1 [containerStyle]=\"viewerContainerStyle\" [serviceUrl]=\"'http://localhost:59655/api/reports/'\"\n\t\t[reportSource]=\"{\n\t\t\treport: 'Report1.trdp',\n\t\t\tparameters: {}\n\t\t}\"\n\t\t[ready]=\"ready\"\n\t\t[viewerToolTipOpening]=\"viewerToolTipOpening\"\n\t\t[enableAccessibility]=\"false\">\n\t</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Using dispose() method in HTML5 Report Viewer (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the dispose() method of the Telerik Reporting HTML5 Report Viewer. It retrieves the report viewer instance from a DOM element and calls the dispose() method to stop sending keep-alive requests to the server.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/dispose().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.dispose();\n```\n\n----------------------------------------\n\nTITLE: Handling ItemDataBinding Event in VB.NET for Telerik Reporting\nDESCRIPTION: This snippet demonstrates how to handle the ItemDataBinding event in a section of a Telerik report using VB.NET. It retrieves a reference to a specific TextBox in the section and modifies its value based on data source column values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/using-section-events.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPrivate Sub Detail_ItemDataBinding(sender As Object, e As EventArgs)\n    ' Get reference to the section object\n    Dim section As Telerik.Reporting.Processing.ReportSection = CType(sender, Telerik.Reporting.Processing.ReportSection)\n    ' Find specific TextBox in the section\n    Dim textBox As Telerik.Reporting.Processing.TextBox = section.Items.Find(\"textBox1\", True).FirstOrDefault()\n    ' Alter the TextBox value based on the data source\n    textBox.Value = section.DataObject.GetColumnValue(\"ColumnName\")\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular Report Viewer Component in TypeScript\nDESCRIPTION: This TypeScript code shows how to implement the component class for the Angular Report Viewer. It includes defining viewer styles, event handlers, and accessing the viewer through ViewChild.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/api-reference/options.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ReportViewerComponent implements AfterViewInit {\n\t@ViewChild('viewer1') viewer: TelerikReportViewerComponent;\n\n\t...\n\n\ttitle = \"Report Viewer\";\n\tviewerContainerStyle = {\n\t\tposition: 'absolute',\n\t\tleft: '5px',\n\t\tright: '5px',\n\t\ttop: '40px',\n\t\tbottom: '5px',\n\t\toverflow: 'hidden',\n\t\tclear: 'both',\n\t\t['font-family']: 'ms sans serif'\n\t};\n\n\tready() {\n\t\tconsole.log('ready');\n\t}\n\tviewerToolTipOpening(e: any, args: any) {\n\t\tconsole.log('viewerToolTipOpening ' + args.toolTip.text);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CubeDataSource Connection and Query\nDESCRIPTION: C# and VB.NET code demonstrating how to configure the ConnectionString and SelectCommand properties of a CubeDataSource component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/selecting-data-from-an-olap-cube-with-the-cubedatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\CubeDataSourceSnippets.cs region=SelectCommandSnippet}}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\CubeDataSourceSnippets.vb region=SelectCommandSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Using RankByCategory Aggregate in Telerik Expression\nDESCRIPTION: Example of how to use the custom RankByCategory aggregate function in a Telerik Reporting expression to rank associates based on their calculated scores.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-rank-categories-based-on-total-of-another-field-with-custom-aggregate.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n= Exec('crosstab1', RankByCategory(Fields.AssociateName, CDbl(Fields.CalculatedScore))).GetRank(Fields.AssociateName)\n```\n\n----------------------------------------\n\nTITLE: Packaging CLR Report Definition in Telerik Reporting with VB.NET\nDESCRIPTION: This code snippet demonstrates how to package a predefined CLR (VB) report definition using the ReportPackager class. It loads the report object and packages it into a .TRDP file, storing the compiled report definition and its resources in a compressed format.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/package-report-definition.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim report As New MyReportClass()\nDim packageFilePath As String = \"C:\\\\Packages\\\\MyClrReport.trdp\"\n\nDim reportPackager As New Telerik.Reporting.ReportPackager()\nUsing packageStream As New FileStream(packageFilePath, FileMode.Create)\n\treportPackager.Package(report, packageStream)\nEnd Using\n```\n\n----------------------------------------\n\nTITLE: Initializing UriReportSource for Embedded Reporting\nDESCRIPTION: This snippet demonstrates how to instantiate a UriReportSource and set its Uri for embedding reports from a local folder in a Windows Forms application. Ensure the report files are set to copy to the output directory.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/how-to-add-report-viewer-to-a-windows-forms'-.net-core-project.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\ReportViewer\\WinForms\\Form1.cs region=DesktopViewer_Core_UriReportSource}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Method to Convert HTML to Image in C#\nDESCRIPTION: A C# static method that uses HtmlRenderer.WinForms library to convert HTML string into a System.Drawing.Image that can be used in a Telerik report. This function will be called as a User Function from the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-render-any-html-tags-in-reports.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace UserFunctions\n{\n\tpublic class Functions\n\t{\n\t\tpublic static System.Drawing.Image HtmlToImage(string html)\n\t\t{\n\t\t\treturn TheArtOfDev.HtmlRenderer.WinForms.HtmlRender.RenderToImage(html);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Export Option Filtering in HTML5 Report Viewer\nDESCRIPTION: This code snippet shows how to customize export options in the Telerik HTML5 Report Viewer based on the selected report. It uses the renderingEnd event to get the report name and dynamically hide specific export formats.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-customize-export-options-of-html5-viewer-based-on-report.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n    ...\n\n    <script type=\"text/javascript\">\n        $(document).ready(function () {\n            var reportName = \"\",\n                hideOptions,\n                largeMenuBound = false,\n                sideMenuBound = false,\n                reportViewer;\n\n            reportViewer = $(\"#reportViewer1\")\n                .telerik_ReportViewer({\n                    serviceUrl: \"api/reports/\",\n                    reportSource: {\n                        report: \"Telerik.Reporting.Examples.CSharp.ReportCatalog, CSharp.ReportLibrary\",\n                    },\n                    renderingEnd: onRenderingEnd\n                }).data(\"telerik_ReportViewer\");\n\n            function onRenderingEnd(e, args) {\n                reportName = reportViewer.reportSource().report;\n\n                if (reportName.indexOf(\"Dashboard\") !== -1) {\n                    reportName = \"Dashboard\";\n                }\n\n                if (!sideMenuBound || !largeMenuBound) {\n                    setBindings();\n                }\n            }\n\n            function setBindings() {\n                var smallMenu = $(\".trv-menu-small\"),\n                    sideMenu = $(\".trv-side-menu\").children(\"ul\").data('kendoPanelBar'),\n                    largeMenu = $(\".trv-menu-large\").data(\"kendoMenu\");\n\n                if (!largeMenuBound && largeMenu) {\n                    largeMenu.bind(\"activate\", function (e) {\n                        hidingOptions();\n                    });\n\n                    largeMenuBound = true;\n                }\n\n                if (!sideMenuBound && smallMenu) {\n                    sideMenu.bind(\"expand\", function (e) {\n                        hidingOptions();\n                    });\n\n                    sideMenuBound = true;\n                }\n            }\n\n            function hidingOptions() {\n                switch (reportName) {\n                    case \"Dashboard\":\n                        hideOptions = [\"XLSX\", \"XLS\"];\n                        break;\n                    default:\n                        hideOptions = [];\n                        break;\n                }\n\n                $('[data-command-parameter]').show();\n\n                $.each(hideOptions, function (index, item) {\n                    var hiddenOption = $('[data-command-parameter=\"' + item + '\"]');\n                    if (hiddenOption && hiddenOption.length) {\n                        hiddenOption.hide();\n                    }\n\n                });\n            }\n\n            $(window).resize(function () {\n                setBindings();\n            })\n\n        });\n    </script>\n    \n</body>\n```\n\n----------------------------------------\n\nTITLE: Managing Report Connection Strings with Telerik Reporting REST Service in C#\nDESCRIPTION: The C# snippet defines a class `ReportConnectionStringManager` to manage report connection strings in Telerik Reporting. It updates connection strings for different report sources such as UriReportSource, XmlReportSource, InstanceReportSource, and TypeReportSource. The class handles unpackaging, deserializing, and setting new connection strings while validating report sources. Its methods include processing report documents and iterating through report items to recursively update connection strings, especially in nested data items and sub-reports. Dependencies include Telerik Reporting libraries and the system's IO and XML capabilities.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/navigate-to-report-not-working-when-custom-report-resolver-changes-connectionstring-dynamically.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nclass ReportConnectionStringManager\n{\n\treadonly string connectionString;\n\t\n\tpublic ReportConnectionStringManager(string connectionString)\n\t{\n\t\tthis.connectionString = connectionString;\n\t}\n\t\n\tpublic ReportSource UpdateReportSource(ReportSource sourceReportSource)\n\t{\n\t\tif (sourceReportSource is UriReportSource)\n\t\t{\n\t\t\tvar uriReportSource = (UriReportSource)sourceReportSource;\n\t\t\t// unpackage TRDP report\n\t\t\tvar reportInstance = UnpackageReport(uriReportSource);\n\t\t\t// or deserialize TRDX report(legacy format)\n\t\t\t// var reportInstance = DeserializeReport(uriReportSource);\n\t\t\tValidateReportSource(uriReportSource.Uri);\n\t\t\tthis.SetConnectionString(reportInstance);\n\t\t\treturn CreateInstanceReportSource(reportInstance, uriReportSource);\n\t\t}\n\t\n\t\tif (sourceReportSource is XmlReportSource)\n\t\t{\n\t\t\tvar xml = (XmlReportSource)sourceReportSource;\n\t\t\tValidateReportSource(xml.Xml);\n\t\t\tvar reportInstance = this.DeserializeReport(xml);\n\t\t\tthis.SetConnectionString(reportInstance);\n\t\t\treturn CreateInstanceReportSource(reportInstance, xml);\n\t\t}\n\t\n\t\tif (sourceReportSource is InstanceReportSource)\n\t\t{\n\t\t\tvar instanceReportSource = (InstanceReportSource)sourceReportSource;\n\t\t\tthis.SetConnectionString((ReportItemBase)instanceReportSource.ReportDocument);\n\t\t\treturn instanceReportSource;\n\t\t}\n\t\n\t\tif (sourceReportSource is TypeReportSource)\n\t\t{\n\t\t\tvar typeReportSource = (TypeReportSource)sourceReportSource;\n\t\t\tvar typeName = typeReportSource.TypeName;\n\t\t\tValidateReportSource(typeName);\n\t\t\tvar reportType = Type.GetType(typeName);\n\t\t\tvar reportInstance = (Report)Activator.CreateInstance(reportType);\n\t\t\tthis.SetConnectionString((ReportItemBase)reportInstance);\n\t\t\treturn CreateInstanceReportSource(reportInstance, typeReportSource);\n\t\t}\n\t\n\t\tthrow new NotImplementedException(\"Handler for the used ReportSource type is not implemented.\");\n\t}\n\t\n\tReportSource CreateInstanceReportSource(IReportDocument report, ReportSource originalReportSource)\n\t{\n\t\tvar instanceReportSource = new InstanceReportSource { ReportDocument = report };\n\t\tinstanceReportSource.Parameters.AddRange(originalReportSource.Parameters);\n\t\treturn instanceReportSource;\n\t}\n\t\n\tvoid ValidateReportSource(string value)\n\t{\n\t\tif (value.Trim().StartsWith(\"=\"))\n\t\t{\n\t\t\tthrow new InvalidOperationException(\"Expressions for ReportSource are not supported when changing the connection string dynamically\");\n\t\t}\n\t}\n\t\n\tReport UnpackageReport(UriReportSource uriReportSource)\n\t{\n\t\tvar reportPackager = new ReportPackager();\n\t\tusing (var sourceStream = System.IO.File.OpenRead(uriReportSource.Uri))\n\t\t{\n\t\t\tvar report = (Report)reportPackager.UnpackageDocument(sourceStream);\n\t\t\treturn report;\n\t\t}\n\t}\n\t\n\tReport DeserializeReport(UriReportSource uriReportSource)\n\t{\n\t\tvar settings = new System.Xml.XmlReaderSettings();\n\t\tsettings.IgnoreWhitespace = true;\n\t\tusing (var xmlReader = System.Xml.XmlReader.Create(uriReportSource.Uri, settings))\n\t\t{\n\t\t\tvar xmlSerializer = new Telerik.Reporting.XmlSerialization.ReportXmlSerializer();\n\t\t\tvar report = (Telerik.Reporting.Report)xmlSerializer.Deserialize(xmlReader);\n\t\t\treturn report;\n\t\t}\n\t}\n\t\n\tReport DeserializeReport(XmlReportSource xmlReportSource)\n\t{\n\t\tvar settings = new System.Xml.XmlReaderSettings();\n\t\tsettings.IgnoreWhitespace = true;\n\t\tvar textReader = new System.IO.StringReader(xmlReportSource.Xml);\n\t\tusing (var xmlReader = System.Xml.XmlReader.Create(textReader, settings))\n\t\t{\n\t\t\tvar xmlSerializer = new Telerik.Reporting.XmlSerialization.ReportXmlSerializer();\n\t\t\tvar report = (Telerik.Reporting.Report)xmlSerializer.Deserialize(xmlReader);\n\t\t\treturn report;\n\t\t}\n\t}\n\t\n\tvoid SetConnectionString(ReportItemBase reportItemBase)\n\t{\n\t\tif (reportItemBase.Items.Count < 1)\n\t\t\treturn;\n\t\n\t\tif (reportItemBase is Report)\n\t\t{\n\t\t\tvar report = (Report)reportItemBase;\n\t\n\t\t\tif (report.DataSource is SqlDataSource)\n\t\t\t{\n\t\t\t\tvar sqlDataSource = (SqlDataSource)report.DataSource;\n\t\t\t\tsqlDataSource.ConnectionString = connectionString;\n\t\t\t}\n\t\t\tforeach (var parameter in report.ReportParameters)\n\t\t\t{\n\t\t\t\tif (parameter.AvailableValues.DataSource is SqlDataSource)\n\t\t\t\t{\n\t\t\t\t\tvar sqlDataSource = (SqlDataSource)parameter.AvailableValues.DataSource;\n\t\t\t\t\tsqlDataSource.ConnectionString = connectionString;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tforeach (var item in reportItemBase.Items)\n\t\t{\n\t\t\t//recursively set the connection string to the items from the Items collection\n\t\t\tSetConnectionString(item);\n\t\n\t\t\tif (item is SubReport)\n\t\t\t{\n\t\t\t\tvar subReport = (SubReport)item;\n\t\t\t\tsubReport.ReportSource = this.UpdateReportSource(subReport.ReportSource);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t//Covers all data items(Crosstab, Table, List, Graph, Map and Chart)\n\t\t\tif (item is DataItem)\n\t\t\t{\n\t\t\t\tvar dataItem = (DataItem)item;\n\t\t\t\tif (dataItem.DataSource is SqlDataSource)\n\t\t\t\t{\n\t\t\t\t\tvar sqlDataSource = (SqlDataSource)dataItem.DataSource;\n\t\t\t\t\tsqlDataSource.ConnectionString = connectionString;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectionStrings with Array in JSON\nDESCRIPTION: This JSON snippet shows how to configure ConnectionStrings as an array within a JSON-based configuration file, providing flexibility in managing multiple connection strings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n````JSON\n{\n\t//...\n\t\"ConnectionStrings\": [\n\t\t{\n\t\t\t\"name\": \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\",\n\t\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t]\n}\n````\n```\n\n----------------------------------------\n\nTITLE: Declaring ParameterTypes Enum Members in JavaScript\nDESCRIPTION: Defines the core parameter types supported by the telerikReportViewer for report parameters. Includes INTEGER, FLOAT, STRING, DATETIME, and BOOLEAN data types.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/telerikreportviewer-namespace/parametertypes.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntelerikReportViewer.ParameterTypes = {\n    INTEGER: \"INTEGER\",\n    FLOAT: \"FLOAT\",\n    STRING: \"STRING\",\n    DATETIME: \"DATETIME\",\n    BOOLEAN: \"BOOLEAN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Report Source Resolver Implementation in Telerik CSharp\nDESCRIPTION: The class CustomReportSourceResolver implements IReportSourceResolver to resolve reports stored in the database. It retrieves the report by URI, unpacks the document using the ReportPackager, and wraps it in an InstanceReportSource. This configuration is critical for handling custom report retrieval in Telerik Reporting. It depends on a SqlDefinitionStorageContext instance for database operations, and a ReportPackager for document unpackaging.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/implement-database-definition-storage-efcore.md#2025-04-21_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class CustomReportSourceResolver : IReportSourceResolver {\nprivate SqlDefinitionStorageContext _dbContext { get; }\npublic CustomReportSourceResolver(SqlDefinitionStorageContext context) {\n    this._dbContext = context;\n}\npublic ReportSource Resolve(string uri, OperationOrigin operationOrigin, IDictionary<string, object> currentParameterValues) {\n    var reportPackager = new ReportPackager();\n    var report = this._dbContext.Reports.FirstOrDefault(r => r.Uri == uri.Replace(\"/\", \"\\\\\"));\n    if (report == null) {\n        throw new FileNotFoundException();\n    }\n    MemoryStream stream = new(report.Bytes);\n    Telerik.Reporting.Report report1 = (Telerik.Reporting.Report)reportPackager.UnpackageDocument(stream);\n    var instanceReportSource = new InstanceReportSource {\n        ReportDocument = report1\n    };\n    return instanceReportSource;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: HTML5 Report Viewer Implementation\nDESCRIPTION: Complete HTML markup for implementing the HTML5 Report Viewer, including necessary scripts, styles, and viewer initialization code.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/how-to-use-html5-report-viewer-in-an-asp.net-core-3.1-application.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<title>Telerik HTML5 Report Viewer Demo in ASP.NET Core</title>\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>>\n\t\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n\t\t<script src=\"/api/reports/resources/js/telerikReportViewer\"></script>>\n\t\t<style>\n\t\t\t#reportViewer1 {\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 5px;\n\t\t\t\tright: 5px;\n\t\t\t\ttop: 50px;\n\t\t\t\tbottom: 5px;\n\t\t\t\toverflow: hidden;\n\t\t\t\tfont-family: Verdana, Arial;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"reportViewer1\">\n\t\t\tloading...\n\t\t</div>\n\t\t<script>\n\t\t\t$(document).ready(function () {\n\t\t\t\t$(\"#reportViewer1\")\n\t\t\t\t\t.telerik_ReportViewer({\n\t\t\t\t\t\tserviceUrl: \"api/reports/\",\n\t\t\t\t\t\treportSource: {\n\t\t\t\t\t\t\treport: \"Barcodes Report.trdp\",\n\t\t\t\t\t\t\tparameters: {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tviewMode: telerikReportViewer.ViewModes.INTERACTIVE,\n\t\t\t\t\t\tscaleMode: telerikReportViewer.ScaleModes.SPECIFIC,\n\t\t\t\t\t\tscale: 1.0,\n\t\t\t\t\t\tenableAccessibility: false,\n\t\t\t\t\t\tsendEmail: { enabled: true }\n\t\t\t\t\t});\n\t\t\t});\n\t\t</script>\n\t</body>\n\t</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with Custom Template in JavaScript\nDESCRIPTION: This snippet shows how to initialize the HTML5 Report Viewer with a custom template URL. It sets the serviceUrl and templateUrl options for the telerik_ReportViewer widget.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/styling-and-appearance/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n\t$(\"#reportViewer1\")\n\t.telerik_ReportViewer({\n\t\tserviceUrl: \"/api/reports/\",\n\t\ttemplateUrl: /ReportViewer/templates/telerikReportViewerTemplate-{{buildversion}}.html\n\t\t......\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportsController in C# for ASP.NET Core\nDESCRIPTION: Defines a ReportsController class that inherits from ReportsControllerBase to handle report-related API requests. It includes a constructor and an overridden SendMailMessage method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-reporting-net-core-mvc.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace WebApplication1.Controllers\n{\n\tusing Microsoft.AspNetCore.Mvc;\n\tusing System.Net;\n\tusing System.Net.Mail;\n\tusing Telerik.Reporting.Services;\n\tusing Telerik.Reporting.Services.AspNetCore;\n\n\t[Route(\"api/reports\")]\n\tpublic class ReportsController : ReportsControllerBase\n\t{\n\t\tpublic ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n\t\t\t: base(reportServiceConfiguration)\n\t\t{\n\t\t}\n\n\t\tprotected override HttpStatusCode SendMailMessage(MailMessage mailMessage)\n\t\t{\n\t\t\tthrow new System.NotImplementedException(\"This method should be implemented in order to send mail messages\");\n\n\t\t\t//using (var smtpClient = new SmtpClient(\"smtp01.mycompany.com\", 25))\n\t\t\t//{\n\t\t\t//    smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;\n\t\t\t//    smtpClient.EnableSsl = false;\n\n\t\t\t//    smtpClient.Send(mailMessage);\n\t\t\t//}\n\t\t\t//return HttpStatusCode.OK;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Binding ObjectDataSource to BusinessObject in VB.NET\nDESCRIPTION: This VB.NET code snippet demonstrates creating a custom business object, configuring an ObjectDataSource, and previewing a report using the Windows Forms Report Viewer. The business object includes methods returning various data types and supports method parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/bind-to-a-businessobject.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n<DataObject()> _\nPublic Class Business\n    <DataObjectMethod()> _\n    Public Function GetDataTable() As DataTable\n        Dim table As New DataTable()\n        table.Columns.Add(\"ID\", GetType(Integer))\n        table.Columns.Add(\"Name\", GetType(String))\n        table.Rows.Add(1, \"John\")\n        table.Rows.Add(2, \"Jane\")\n        Return table\n    End Function\n\n    <DataObjectMethod()> _\n    Public Function GetPersons() As IEnumerable(Of Person)\n        Return New List(Of Person) From { _\n            New Person With {.ID = 1, .Name = \"John\"}, _\n            New Person With {.ID = 2, .Name = \"Jane\"} _\n        }\n    End Function\n\n    <DataObjectMethod()> _\n    Public Function GetPersonsWithParameters(ByVal id As Integer, ByVal name As String) As IEnumerable(Of Person)\n        Return New List(Of Person) From { _\n            New Person With {.ID = id, .Name = name} _\n        }\n    End Function\nEnd Class\n\nPublic Class Person\n    Public Property ID As Integer\n    Public Property Name As String\nEnd Class\n\nDim report As New Report()\nDim detail As New DetailSection()\nreport.Items.Add(detail)\n\nDim objectDataSource As New ObjectDataSource()\nobjectDataSource.DataMember = \"GetPersons\"\nobjectDataSource.DataSource = GetType(Business)\n\nDim table As New Table()\nDim body As New TableBody()\ntable.Bodies.Add(body)\n\nDim row As New TableRow()\nbody.Rows.Add(row)\n\nDim cell As New TableCell()\nrow.Cells.Add(cell)\n\nDim textBox As New TextBox()\ntextBox.Value = \"= Fields.Name\"\ncell.Items.Add(textBox)\n\ndetail.Items.Add(table)\nreport.DataSource = objectDataSource\n\nDim reportProcessor As New ReportProcessor()\nDim result As RenderingResult = reportProcessor.RenderReport(\"PDF\", report, Nothing)\n\nSystem.IO.File.WriteAllBytes(\"report.pdf\", result.DocumentBytes)\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Page for Custom Parameter Report Viewer\nDESCRIPTION: This HTML snippet shows the complete structure of the page, including the custom parameter UI, report viewer initialization, and parameter update logic. It combines all the previous snippets into a functional HTML page.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n\t<title>Telerik HTML5 Report Viewer Demo With Custom Parameter</title>\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n\t<script src=\"/ReportViewer/js/telerikReportViewer.kendo.{{buildversion}}.min.js\"></script>\n\t<script src=\"ReportViewer/js/telerikReportViewer-{{buildversion}}.min.js\"></script>\n\t<style>\n\t\t#reportViewer1 {\n\t\t\tposition: absolute;\n\t\t\tleft: 5px;\n\t\t\tright: 5px;\n\t\t\ttop: 40px;\n\t\t\tbottom: 5px;\n\t\t\toverflow: hidden;\n\t\t\tfont-family: Verdana, Arial;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div id=\"invoiceIdSelector\">\n\t\t<label for=\"invoiceId\">Invoices</label>\n\t\t<select id=\"invoiceId\" title=\"Select the Invoice ID\">\n\t\t\t<option value=\"SO51081\">SO51081</option>\n\t\t\t<option value=\"SO51082\" selected=\"selected\">SO51082</option>\n\t\t\t<option value=\"SO51083\">SO51083</option>\n\t\t</select>\n\t</div>\n\t<div id=\"reportViewer1\">\n\t\tloading...\n\t</div>\n\t<script type=\"text/javascript\">\n\t\t$(document).ready(function () {\n\t\t\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\t\t\t\tserviceUrl: \"api/reports/\",\n\t\t\t\t\treportSource: {\n\t\t\t\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\",\n\t\t\t\t\t\tparameters: { OrderNumber: $('#invoiceId option:selected').val() }\n\t\t\t\t\t},\n\t\t\t});\n\t\t});\n\t\t$('#invoiceId').change(function () {\n\t\t\tvar viewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n\t\t\tviewer.reportSource({\n\t\t\t\treport: viewer.reportSource().report,\n\t\t\t\tparameters: { OrderNumber: $(this).val() }\n\t\t\t});\n\t\t\t//setting the HTML5 Viewer's reportSource, causes a refresh automatically\n\t\t\t//if you need to force a refresh for other cases, use:\n\t\t\t//viewer.refreshReport();\n\t\t});\n\t</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring SqlDataSource with SQL Query in C#\nDESCRIPTION: This C# code snippet demonstrates how to set the ConnectionString and SelectCommand properties of a SqlDataSource component to retrieve data using an SQL query.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/selecting-data-with-the-sqldatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nSqlDataSource sqlDataSource = new SqlDataSource();\nsqlDataSource.ConnectionString = \"Data Source=MYSERVER;Initial Catalog=AdventureWorks;Integrated Security=True\";\nsqlDataSource.SelectCommand = \"SELECT FirstName, LastName FROM Person.Contact\";\n```\n\n----------------------------------------\n\nTITLE: Custom Boolean Parameter Editor Implementation\nDESCRIPTION: Implements a custom boolean parameter editor with available values using Kendo UI DropDownList widget, including parameter type matching logic.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction customMatch(parameter) {\n\treturn Boolean(parameter.availableValues)\n\t\t&& !parameter.multivalue\n\t\t&& parameter.type === telerikReportViewer.ParameterTypes.BOOLEAN;\n}\nfunction createCustomEditor(placeholder, options) {\n\tvar dropDownElement = $(placeholder).html('<div></div>');\n\tvar parameter,\n\t\tvalueChangedCallback = options.parameterChanged,\n\t\tdropDownList;\n\tfunction onChange() {\n\t\tvar val = dropDownList.value();\n\t\tvalueChangedCallback(parameter, val);\n\t}\n\treturn {\n\t\tbeginEdit: function (param) {\n\t\t\tparameter = param;\n\t\t\t$(dropDownElement).kendoDropDownList({\n\t\t\t\tdataTextField: \"name\",\n\t\t\t\tdataValueField: \"value\",\n\t\t\t\tvalue: parameter.value,\n\t\t\t\tdataSource: parameter.availableValues,\n\t\t\t\tchange: onChange\n\t\t\t});\n\t\t\tdropDownList = $(dropDownElement).data(\"kendoDropDownList\");\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Report Viewer Initialization\nDESCRIPTION: JavaScript code to initialize the HTML5 Report Viewer with configuration options.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/manual-setup.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n\t\t$(\"#reportViewer1\")\n\t\t\t.telerik_ReportViewer({\n\t\t\t\tserviceUrl: \"/api/reports/\",\n\t\t\t\treportSource: {\n\t\t\t\t\treport: \"Telerik.Reporting.Examples.CSharp.ProductCatalog, CSharp.ReportLibrary\",\n\t\t\t\t\tparameters: {\n\t\t\t\t\t\tCultureID: \"en\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Component for Angular 17\nDESCRIPTION: This snippet demonstrates how to define a component for incorporating the report viewer in Angular 17 applications. Different steps include importing necessary modules, setting up the component's selector, and defining the root component configuration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/integrating-with-project-item-generator.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { ReportViewerPageComponent } from './report-viewer-page/report-viewer-page.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [ RouterOutlet, ReportViewerPageComponent ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'my-angular-application';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportViewerSettings HTML\nDESCRIPTION: This HTML code snippet demonstrates how to configure the ReportViewerSettings, including ReportServerSettings and SendEmailDialogSettings. It sets the URL, username, and password for the Report Server, as well as the From, To, and Format settings for the Send Email dialog. These settings customize the behavior of the Report Viewer component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/api-reference/options.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n&lt;ReportViewerSettings&gt;\n\t&lt;ReportServerSettings Url=\"https://reportinghost:83\" Username=\"user\" Password=\"pass\"&gt;&lt;/ReportServerSettings&gt;\n\t&lt;SendEmailDialogSettings From=\"from@mail.com\" To=\"to@mail.com\" Format=\"CSV\"&gt;&lt;/SendEmailDialogSettings&gt;\n&lt;/ReportViewerSettings&gt;\n```\n\n----------------------------------------\n\nTITLE: Creating a Report Book in C# using Telerik Reporting\nDESCRIPTION: This code snippet demonstrates how to create a report book at runtime in C# by instantiating the ReportBook class, adding One TypeReportSource, which contains the 'WeekdayReport', and another UriReportSource for 'Glossary.trdp'. It showcases the process of adding multiple reports to the report book.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-book/how-to-create-a-report-book-at-run-time.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar reportBook = new Telerik.Reporting.ReportBook();\nreportBook.ReportSources.Add(new Telerik.Reporting.TypeReportSource { ReportTypeName = \"WeekdayReport\" });\nreportBook.ReportSources.Add(new Telerik.Reporting.UriReportSource { Uri = \"Glossary.trdp\" });\nreportBook.ReportSources.Add(new Telerik.Reporting.TocReportSource());\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters in Controller\nDESCRIPTION: This C# code demonstrates how to create an instance of the `ReportSourceModel` in an ASP.NET Core controller and populate it with report parameters. It adds a report name and two parameters (ProductCategory and ProductSubcategory) to the model before passing it to the view.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pass-parameters-to-html5-report-viewer-from-a-views-model.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class HomeController : Controller\n\t{\n\t\tpublic IActionResult Index()\n\t\t{\n\t\t\tvar reportSourceModel = new ReportSourceModel()\n\t\t\t{\n\t\t\t\tReport = \"Product Line Sales.trdp\",\n\t\t\t\tParameters = new Dictionary<string, object>()\n\t\t\t};\n\t\t\treportSourceModel.Parameters.Add(\"ProductCategory\", \"Clothing\");\n\t\t\treportSourceModel.Parameters.Add(\"ProductSubcategory\", new string[] { \"Caps\", \"Gloves\", \"Vests\" });\n\n\t\t\treturn View(reportSourceModel);\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Save Operation With EF Core in CSharp\nDESCRIPTION: This snippet defines an asynchronous save operation for resources using Entity Framework Core in CSharp. It checks if a report entity already exists and updates it; otherwise, it adds a new entry to the database. The function accepts a SaveResourceModel and a byte array representing the resource. The updated or newly created entity is then converted back into a ResourceFileModel object. Dependencies include a DbContext instance for managing database operations. This pattern follows the typical database save or update operations with EF Core.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/implement-database-definition-storage-efcore.md#2025-04-21_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\npublic Task<ResourceFileModel> SaveAsync(SaveResourceModel model, byte[] resource) {\n    var entity = this._dbContext.Reports.FirstOrDefault(r => r.Uri == model.ParentUri + model.Name);\n    if (entity != null) {\n        entity.Bytes = resource;\n        entity.ModifiedOn = DateTime.Now;\n        this._dbContext.SaveChanges();\n        return Task.FromResult(entity.ToResourceFileModel());\n    }\n    var entityEntry = this._dbContext.Reports.Add(model.ToDbReportModel(resource));\n    this._dbContext.SaveChanges();\n    return Task.FromResult(entityEntry.Entity.ToResourceFileModel());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class Report Definition in C#\nDESCRIPTION: Demonstrates creating a custom report class definition dynamically for XML serialization in Telerik Reporting\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/serialize-report-definition-in-xml.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Snippet from CodeSnippets\\CS\\API\\Telerik\\Reporting\\XmlSerializationSnippets.cs region=ReportDefinitionSnippet\n```\n\n----------------------------------------\n\nTITLE: Structuring _Layout.cshtml for HTML5 MVC Report Viewer Integration\nDESCRIPTION: This snippet demonstrates how to structure the _Layout.cshtml file to include all necessary links, scripts, and meta information for the report viewer. It includes the HTML structure, CSS references, JavaScript libraries, and custom styles required for the report viewer to function properly within the master layout.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-html5-mvc-report-viewer-inside-master-page-layout.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>@ViewBag.Title - My ASP.NET Application</title>\n    @Styles.Render(\"~/Content/css\")\n    @Scripts.Render(\"~/bundles/modernizr\")\n\n    @* Links and scripts from the report viewer *@\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n    <script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\n    <link href=\"http://kendo.cdn.telerik.com/2015.3.930/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n    <link href=\"http://kendo.cdn.telerik.com/2015.3.930/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n    <style>\n        #reportViewer1 {\n            position: relative;\n            width: 1300px;\n            height: 900px;\n            font-family: Verdana, Arial;\n        }\n    </style>\n    @* End of the head resources*@\n\t\n</head>\n<body>\n    <div class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n                @Html.ActionLink(\"Application name\", \"Index\", \"Home\", new { area = \"\" }, new { @class = \"navbar-brand\" })\n            </div>\n            <div class=\"navbar-collapse collapse\">\n                <ul class=\"nav navbar-nav\">\n                    <li>@Html.ActionLink(\"Home\", \"Index\", \"Home\")</li>\n                    <li>@Html.ActionLink(\"About\", \"About\", \"Home\")</li>\n                    <li>@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")</li>\n                    <li>@Html.ActionLink(\"Report\", \"Report\", \"Home\")</li>\n                </ul>\n                @Html.Partial(\"_LoginPartial\")\n            </div>\n        </div>\n    </div>\n    <div class=\"container body-content\">\n        @RenderBody()\n        <hr />\n        <footer>\n            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>\n        </footer>\n    </div>\n\n    @Scripts.Render(\"~/bundles/jquery\")\n    @Scripts.Render(\"~/bundles/bootstrap\")\n    @RenderSection(\"scripts\", required: false)\n\n    @* Scripts from the report view. Note that in order to be fired, they need to be at the end of the body *@\n    <script src=\"@Url.Content(\"~/ReportViewer/js/telerikReportViewer.kendo-12.0.18.315.min.js\")\"></script>\n    <script src=\"@Url.Content(\"~/ReportViewer/js/telerikReportViewer-12.0.18.315.min.js\")\"></script>\n    @*End of the scripts*@\n\t\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Parameter Editors in Blazor Report Viewer\nDESCRIPTION: Example showing how to set up default parameter editors for different parameter types including Integer, Double, DateTime, Boolean, String, and multi-select options using Telerik UI components.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/customizing/how-to-create-custom-parameter-editors.md#2025-04-21_snippet_0\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer\n\tServiceUrl=\"/api/reports\"\n\t@bind-ReportSource=\"@ReportSource\"\n\tServiceType=\"@ReportViewerServiceType.REST\"\n\tHeight=\"800px\"\n\tWidth=\"100%\">\n\t<ParameterIntegerTemplate>\n\t\t<TelerikNumericTextBox Value=\"@((long)context.Value)\"\n\t\t\t\t\t\tValueChanged=\"@((long value) => context.Value = value)\">\n\t\t</TelerikNumericTextBox>\n\t</ParameterIntegerTemplate>\n\t<ParameterDoubleTemplate>\n\t\t<TelerikNumericTextBox Value=\"@((double)context.Value)\"\n\t\t\t\t\t\tValueChanged=\"@((double value) => context.Value = value)\">\n\t\t</TelerikNumericTextBox>\n\t</ParameterDoubleTemplate>\n\t<ParameterDateTimeTemplate>\n\t\t<TelerikDatePicker Value=\"@((DateTime)context.Value)\"\n\t\t\t\t\tValueChanged=\"@((DateTime value) => context.Value = value)\">\n\t\t</TelerikDatePicker>\n\t</ParameterDateTimeTemplate>\n\t<ParameterBooleanTemplate>\n\t\t<TelerikCheckBox Value=\"@((bool)context.Value)\"\n\t\t\t\t\tValueChanged=\"@((bool value) => context.Value = value)\">\n\t\t</TelerikCheckBox>\n\t</ParameterBooleanTemplate>\n\t<ParameterStringTemplate>\n\t\t<TelerikTextBox Value=\"@((string)context.Value)\"\n\t\t\t\t\tValueChanged=\"@((string value) => context.Value = value)\">\n\t\t</TelerikTextBox>\n\t</ParameterStringTemplate>\n\t<ParameterSingleSelectTemplate>\n\t\t<TelerikDropDownList Data=\"@context.Parameter.AvailableValues\"\n\t\t\t\t\t\tValue=\"@context.Value\"\n\t\t\t\t\t\tDefaultText=\"\"\n\t\t\t\t\t\tTItem=\"ReportParameterValue\"\n\t\t\t\t\t\tTValue=\"object\"\n\t\t\t\t\t\tTextField=\"Name\"\n\t\t\t\t\t\tValueField=\"Value\"\n\t\t\t\t\t\tOnChange=\"@((object value) => context.Value = value)\">\n\t\t</TelerikDropDownList>\n\t</ParameterSingleSelectTemplate>\n\t<ParameterMultiSelectTemplate>\n\t\t@{ var selectedValue = ((IEnumerable)context.Parameter.Value).Cast<object>().ToList(); }\n\t\n\t\t<TelerikMultiSelect Data=\"@context.Parameter.AvailableValues\"\n\t\t\t\t\t\tValue=\"@selectedValue\"\n\t\t\t\t\t\tFilterable=\"true\"\n\t\t\t\t\t\tFilterOperator=\"@StringFilterOperator.Contains\"\n\t\t\t\t\t\tTItem=\"ReportParameterValue\"\n\t\t\t\t\t\tTValue=\"object\"\n\t\t\t\t\t\tTextField=\"Name\"\n\t\t\t\t\t\tValueField=\"Value\"\n\t\t\t\t\t\tClearButton=\"false\"\n\t\t\t\t\t\tOnChange=\"@((object value) => context.Value = value)\">\n\t\t</TelerikMultiSelect>\n\t</ParameterMultiSelectTemplate>\n</ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Email Endpoint in C#\nDESCRIPTION: This code creates a new API endpoint that handles creating report images, embedding them in email bodies, and sending the emails. It includes methods for creating mail messages and embedding images in HTML.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/send-telerik-report-embedded-email-body.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\n[Route(\"cmail\")]\npublic HttpStatusCode CustomEmailMessage([FromBody] ReportMail message)\n{\n\n\tusing var smtpClient = new SmtpClient(\"SMTP_HOST\", PORT);\n\tsmtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;\n\tsmtpClient.EnableSsl = false;\n\n\tvar mailMessage = GetMailWithImg(message);\n\tsmtpClient.Send(mailMessage);\n\treturn HttpStatusCode.OK;\n}\n\nprivate MailMessage GetMailWithImg(ReportMail message)\n{\n\tMailMessage mail = new()\n\t{\n\t\tIsBodyHtml = true,\n\t\tSubject = message.Subject,\n\t\tFrom = new MailAddress(message.From),\n\t};\n\n\tif (!string.IsNullOrEmpty(message.To))\n\t{\n\t\tmail.To.Add(message.To);\n\t}\n\telse throw new Exception(\"Please provide an email address.\");\n\n\tif (!string.IsNullOrEmpty(message.CC)) mail.CC.Add(message.CC);\n\n\tmail.AlternateViews.Add(GetEmbeddedImage(message.Body ?? string.Empty, message.ReportSource));\n\treturn mail;\n}\n\nprivate AlternateView GetEmbeddedImage(string htmlBody, ReportSourceModel reportSource)\n{\n\tvar reportsPath = \"PATH_TO_REPORTS_FOLDER\";\n\tvar reportRenderer = new ReportRenderer(reportsPath);\n\tvar images = reportRenderer.Render(reportSource);\n\thtmlBody += \"\\r\\n\";\n\n\tforeach (var image in images)\n\t{\n\t\thtmlBody += $\"<img src=\\\"data:image/png;base64, {image}\\\" />\";\n\t}\n\n\tAlternateView alternateView = AlternateView.CreateAlternateViewFromString(htmlBody, null, MediaTypeNames.Text.Html);\n\treturn alternateView;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up UriReportSource for REST Service\nDESCRIPTION: Shows how to configure a UriReportSource to specify the report to be rendered through the REST Service, including setting the report URL.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/how-to-use-windows-forms-report-viewer-with-rest-service.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Configure Report Source for REST Service\nvar reportSource = new UriReportSource() {\n    Uri = \"https://your-rest-service-url/path/to/report\"\n};\n\nreportViewer.ReportSource = reportSource;\n```\n\n----------------------------------------\n\nTITLE: Integrating DateTimePicker in Blazor Report Viewer\nDESCRIPTION: This snippet demonstrates how to integrate the Telerik DateTimePicker widget within the Native Blazor Report Viewer as a custom editor for DateTime report parameters. The `ParameterDateTimeTemplate` is used to override the default DatePicker and bind the `Value` and `ValueChanged` properties to the report parameter context.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-datetimepicker-native-blazor-reportviewer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSHTML\nCODE:\n```\n\"<ReportViewer ... >\\n\\t<ParameterDateTimeTemplate>\\n\\t\\t<TelerikDateTimePicker Value=\\\"@((DateTime)context.Value)\\\"\\n\\t\\t\\t\\t\\t\\tValueChanged=\\\"@((DateTime value) => context.Value = value))\\\">\\n\\t\\t</TelerikDateTimePicker>\\n\\t</ParameterDateTimeTemplate>\\n</ReportViewer>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Initializing WinForms Report Viewer for Embedded Reporting\nDESCRIPTION: This snippet outlines how to instantiate and configure the WinForms Report Viewer for use with an Embedded Reporting engine. The viewer must be added to the Form's controls.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/how-to-add-report-viewer-to-a-windows-forms'-.net-core-project.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\ReportViewer\\WinForms\\Form1.cs region=DesktopViewer_Core_Init}}\n```\n\n----------------------------------------\n\nTITLE: Logging Conversion Process with ConsoleLogger in C#\nDESCRIPTION: This snippet defines a ConsoleLogger class in C# that implements the ILog interface to log messages to the console during the conversion process. It provides methods for logging errors, warnings, and informational messages, facilitating the monitoring of the conversion process. An understanding of console applications and interface implementation in C# is required.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/crystal-reports-convert-programmatically.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nusing System;\nusing Telerik.Reporting.Interfaces;\n\nnamespace CrystalReportsConverter\n{\n\tclass ConsoleLogger : Telerik.Reporting.Interfaces.ILog\n\t{\n\t\tpublic void LogError(string message)\n\t\t{\n\t\t\tConsole.WriteLine($\"Error: {message}\");\n\t\t}\n\n\t\tpublic void LogWarning(string message)\n\t\t{\n\t\t\tConsole.WriteLine($\"Warning: {message}\");\n\t\t}\n\n\t\tpublic void LogInfo(string message)\n\t\t{\n\t\t\tConsole.WriteLine(message);\n\t\t}\n\n\t\tvoid ILog.Log(string message)\n\t\t{\n\t\t\tthis.LogInfo(message);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing DateTime Parameter Format in Telerik Report Viewer\nDESCRIPTION: This code snippet demonstrates how to change the format of DateTime parameters in the HTML5 Report Viewer. It uses the renderingEnd event of the Telerik Report Viewer to find all DatePicker widgets and set a custom date format.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/change-datetime-parameters-format.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n\t.telerik_ReportViewer({                  \n\t\trenderingEnd: function () {\n        var datepickers = $(\"#reportViewer1\").find(\"[data-role='datepicker']\");\n        \n        if (datepickers.length) {\n            datepickers.each(function (index) {\n                $(this).data(\"kendoDatePicker\").setOptions({\n                    format: \"MM/dd/yy\"\n                });\n            });\n\n        }\n    }\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Serving in ASP.NET Core\nDESCRIPTION: Adds middleware to serve static files in the ASP.NET Core application's Startup.cs file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/how-to-use-html5-report-viewer-in-an-asp.net-core-in-.net-5-application.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\napp.UseStaticFiles();\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorFromName User Function in VB.NET\nDESCRIPTION: This VB.NET function takes a color name as a string and returns the corresponding Color object. It's used as a helper function for conditional formatting in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/using-expressions/conditional-formatting.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Shared Function ColorFromName(ByVal colorName As String) As Color\n\tIf Not String.IsNullOrEmpty(colorName) Then\n\t\tReturn Color.FromName(colorName)\n\tEnd If\n\tReturn Color.Transparent\nEnd Function\n```\n\n----------------------------------------\n\nTITLE: Rendering React Report Viewer in NextJS Client Component\nDESCRIPTION: This code snippet demonstrates how to render the Telerik React Report Viewer within a NextJS Client Component. It uses the `use client` directive to enable client-side rendering and dynamic import to load the React Report Viewer component.  The `ssr: false` option in the dynamic import ensures that the component is only rendered on the client-side, preventing the \"window is not defined\" error.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/window-is-not-defined-nextjs.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"use client\"\n\nimport dynamic from 'next/dynamic'\n\nconst ReactReportViewer = dynamic(() => import('@progress/telerik-react-report-viewer')\n                          .then(types => types.TelerikReportViewer), { ssr: false });\n\nexport default function Home() {\n  return (\n    <>\n        <link href=\"https://kendo.cdn.telerik.com/{}kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n        <link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n\n      <ReactReportViewer\n        serviceUrl=\"https://demos.telerik.com/reporting/api/reports/\"\n        reportSource={{\n            report: 'Dashboard.trdx',\n            parameters: {}\n        }}\n        viewerContainerStyle = {{\n            position: 'absolute',\n            inset: '5px'\n        }}\n        viewMode=\"INTERACTIVE\"\n        scaleMode=\"SPECIFIC\"\n        scale={1.0}\n        enableAccessibility={false} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ItemDataBinding Event in C# for Telerik Reporting\nDESCRIPTION: This snippet demonstrates how to handle the ItemDataBinding event in a section of a Telerik report. It retrieves a reference to a specific TextBox in the section and modifies its value based on data source column values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/using-section-events.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Detail_ItemDataBinding(object sender, EventArgs e) {\n    // Get reference to the section object\n    var section = (Telerik.Reporting.Processing.ReportSection)sender;\n    // Find specific TextBox in the section\n    var textBox = section.Items.Find(\"textBox1\", true).FirstOrDefault() as Telerik.Reporting.Processing.TextBox;\n    // Alter the TextBox value based on the data source\n    textBox.Value = section.DataObject.GetColumnValue(\"ColumnName\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handling OnRenderingBegin Event in Native Blazor Report Viewer\nDESCRIPTION: This snippet demonstrates how to handle the OnRenderingBegin event in the Native Blazor Report Viewer, enabling search functionality in the rendered document. The event receives a RenderingBeginEventArgs argument to customize the rendering behavior.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/api-reference/events.md#2025-04-21_snippet_0\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer @ref=\"reportViewer1\"\n\tServiceUrl=\"https://demos.telerik.com/reporting/api/reports\"\n\t@bind-ReportSource=\"@ReportSource\"\n\tServiceType=\"@ReportViewerServiceType.REST\"\n\tHeight=\"800px\"\n\tWidth=\"100%\"\n\tOnRenderingBegin=\"@RenderingBegin\"></ReportViewer>\n\n@code {\n\tReportViewer reportViewer1;\n\tpublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions(\"Report Catalog.trdx\", new Dictionary<string, object>{});\n\t\n\tvoid RenderingBegin(RenderingBeginEventArgs args)\n\t{\n\t\t// Enable search in the rendered document\n\t\targs.EnableSearch = true; //default value\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with pageReady Event Handler in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Telerik HTML5 Report Viewer and attach a handler for the pageReady event. The event handler logs a message and the page content to the console when a report page is ready.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/pageready(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\tpageReady: function(e, args) {\n\t\t\tconsole.log(\"This event handler will be called after a page of the report is ready.\");\n\t\t\tconsole.log(\"The content of the page is: \" + args.pageContent);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring the Telerik Reporting Service in ASP.NET Core Dependency Injection\nDESCRIPTION: Adds the ReportServiceConfiguration to the ASP.NET Core dependency injection container. The configuration specifies the host app ID, storage provider, and a resolver that locates report definitions in the Reports folder.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n// Configure dependencies for ReportsController.\nbuilder.Services.TryAddSingleton<IReportServiceConfiguration>(sp =>\n\tnew ReportServiceConfiguration\n\t{\n\t\t// The default ReportingEngineConfiguration will be initialized from appsettings.json or appsettings.{EnvironmentName}.json:\n\t\tReportingEngineConfiguration = sp.GetService<IConfiguration>(),\n\t\t// In case the ReportingEngineConfiguration needs to be loaded from a specific configuration file, use the approach below:\n\t\t//ReportingEngineConfiguration = ResolveSpecificReportingConfiguration(sp.GetService<IWebHostEnvironment>()),\n\t\tHostAppId = \"ReportingNet6\",\n\t\tStorage = new FileStorage(),\n\t\tReportSourceResolver = new UriReportSourceResolver(System.IO.Path.Combine(sp.GetService<IWebHostEnvironment>().ContentRootPath, \"Reports\"))\n\t});\n```\n\n----------------------------------------\n\nTITLE: Creating a Report Viewer Component in React\nDESCRIPTION: This snippet defines a functional React component that renders a report viewer with a dropdown for selecting invoice IDs. The component updates the report parameters based on the selected value using the viewer's reportSource method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport { React, useRef} from 'react';\nimport './index.css';\nimport { TelerikReportViewer } from '@progress/telerik-react-report-viewer'\n\nexport function ReportViewer() {\n\tconst viewerRef = useRef(null);\n\n\treturn (\n\t\t<>\n\t\t<div id=\"invoiceIdSelector\">\n\t\t\t<label htmlFor=\"invoiceId\">Invoices</label>\n\t\t\t<select defaultValue=\"SO51081\" id=\"invoiceId\" onChange={(e => {\n\t\t\t\tconst { viewerObject } = viewerRef.current;\n\t\t\t\tviewerObject.reportSource({ report: viewerObject.reportSource().report, parameters: { OrderNumber: e.target.value } })\n\t\t\t})} title=\"Select the Invoice ID\">\n\t\t\t\t<option value=\"SO51081\">SO51081</option>\n\t\t\t\t<option value=\"SO51082\">SO51082</option>\n\t\t\t\t<option value=\"SO51083\">SO51083</option>\n\t\t\t</select>\n\t\t</div>\n\t\t<TelerikReportViewer\n\t\t\tref={viewerRef}\n\t\t\tserviceUrl=\"https://demos.telerik.com/reporting/api/reports/\"\n\t\t\treportSource={{\n\t\t\t\treport: 'Invoice.trdx',\n\t\t\t\tparameters: {}\n\t\t\t}}\n\t\t\tviewerContainerStyle={{\n\t\t\t\tposition: 'absolute',\n\t\t\t\tleft: '5px',\n\t\t\t\tright: '5px',\n\t\t\t\ttop: '40px',\n\t\t\t\tbottom: '5px',\n\t\t\t\toverflow: 'hidden',\n\t\t\t\tclear: 'both',\n\t\t\t\tfontFamily: 'ms sans serif'\n\t\t\t}}\n\t\t\tviewMode=\"INTERACTIVE\"\n\t\t\tscaleMode=\"SPECIFIC\"\n\t\t\tscale={1.0}\n\t\t\tenableAccessibility={false} />\n\t\t</>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Method in AdventureWorksEntities Context in VB.NET\nDESCRIPTION: This VB.NET code defines a custom method 'GetProductsByCategory' in the AdventureWorksEntities context using a partial class. It retrieves products based on a category name parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/connecting-to-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nPartial Public Class AdventureWorksEntities\n    Public Function GetProductsByCategory(ByVal categoryName As String) As IEnumerable(Of Product)\n        Return Me.Products.Where(Function(p) p.ProductCategory.Name = categoryName)\n    End Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting Service in ASP.NET Core\nDESCRIPTION: Sets up the Telerik Reporting service configuration by specifying a host application ID and reports path. This code configures the report source resolver to locate report definitions in a specific folder.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-5.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar reportsPath = Path.Combine(builder.Environment.ContentRootPath, \"Reports\");\n\nservices.AddTelerikReporting(\"ReportingNet\", reportsPath);\n```\n\n----------------------------------------\n\nTITLE: Configuring MVC Controllers with Newtonsoft JSON in ASP.NET Core 3.1\nDESCRIPTION: Adds MVC controller support with Newtonsoft JSON serialization in the ConfigureServices method. This configuration is required for the Telerik Reporting REST Service to function properly in ASP.NET Core 3.1.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddControllers().AddNewtonsoftJson();\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Page Number in Telerik Reporting (C#)\nDESCRIPTION: Shows how to display the current page number using the PageNumber property in a report expression.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/page-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n= \"Current Page Number is \" + PageNumber\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer in Angular Component\nDESCRIPTION: TypeScript code that initializes the Telerik HTML5 Report Viewer in an Angular component, configuring the service URL and report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-web-report-designer-in-angular-application.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.viewer = $(\"#reportViewer\").telerik_ReportViewer({\n\t\tserviceUrl: \"https://demos.telerik.com/reporting/api/reports/\",\n\t\treportSource: {\n\t\treport: 'Product Sales.trdx',\n\t\t\tparameters: {}\n\t\t}\n\t}).data(\"telerik_ReportViewer\");\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportDesignerController in C# for ASP.NET Core\nDESCRIPTION: This code snippet defines the ReportDesignerController class, which inherits from ReportDesignerControllerBase. It sets up the routing for the API and injects the necessary configurations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-web-report-designer-in-net-core-mvc.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace WebApplication1.Controllers\n{\n\tusing Microsoft.AspNetCore.Mvc;\n\tusing Telerik.Reporting.Services;\n\tusing Telerik.WebReportDesigner.Services;\n\tusing Telerik.WebReportDesigner.Services.Controllers;\n\n\t[Route(\"api/reportdesigner\")]\n\tpublic class ReportDesignerController : ReportDesignerControllerBase\n\t{\n\t\tpublic ReportDesignerController(IReportDesignerServiceConfiguration reportDesignerServiceConfiguration, IReportServiceConfiguration reportServiceConfiguration)\n\t\t\t: base(reportDesignerServiceConfiguration, reportServiceConfiguration)\n\t\t{\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Single Select Parameter Editor with Kendo DropDownList\nDESCRIPTION: Implements a custom single select parameter editor using Kendo UI DropDownList widget. The editor handles parameter value changes and updates the viewer accordingly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createSingleSelectEditor(placeholder, options) {\n\tvar dropDownElement = $(placeholder).html('<div></div>');\n\tvar parameter,\n\t\tvalueChangedCallback = options.parameterChanged,\n\t\tdropDownList;\n\tfunction onChange() {\n\t\tvar val = dropDownList.value();\n\t\tvalueChangedCallback(parameter, val);\n\t}\n\treturn {\n\t\tbeginEdit: function (param) {\n\t\t\tparameter = param;\n\t\t\t$(dropDownElement).kendoDropDownList({\n\t\t\t\tdataTextField: \"name\",\n\t\t\t\tdataValueField: \"value\",\n\t\t\t\tvalue: parameter.value,\n\t\t\t\tdataSource: parameter.availableValues,\n\t\t\t\tchange: onChange\n\t\t\t});\n\t\t\tdropDownList = $(dropDownElement).data(\"kendoDropDownList\");\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting REST Service with RedisStorage in C#\nDESCRIPTION: Implementation of a ReportsController class that configures Telerik Reporting REST service to use Redis for storage. The code sets up report resolvers and establishes a connection to Redis using a connection string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reporting-rest-service-with-redisstorage-returns-error-500-to-requests.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReportsController : ReportsControllerBase\n    {\n        static ReportServiceConfiguration configurationInstance;\n  \n        static ReportsController()\n        {\n            //This is the folder that contains the XML (trdx/trdp) report definitions\n            //In this case this is the Reports folder\n            var appPath = HttpContext.Current.Server.MapPath(\"~/\");\n            var reportsPath = Path.Combine(appPath, \"Reports\");\n  \n            //Add resolver for trdx report definitions,\n            //then add resolver for class report definitions as fallback resolver;\n            //finally create the resolver and use it in the ReportServiceConfiguration instance.\n            var resolver = new ReportFileResolver(reportsPath).AddFallbackResolver(new ReportTypeResolver());\n  \n            //Setup the ReportServiceConfiguration      \n            configurationInstance = new ReportServiceConfiguration\n            {\n                HostAppId = \"Html5App\",\n                Storage = new RedisStorage(ConnectionMultiplexer.Connect(\"RedisConnectionStringHERE\")),           \n                ReportResolver = resolver,\n                // ReportSharingTimeout = 0,\n                // ClientSessionTimeout = 15,\n            };\n        }\n  \n        public ReportsController()\n        {\n            //Initialize the service configuration\n            this.ReportServiceConfiguration = configurationInstance;\n        }  \n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Information with Custom Business Object in VB.NET\nDESCRIPTION: Defines a method in a custom business object that retrieves information about all products from an Entity Data Model of the Adventure Works sample database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/maintaining-the-lifecycle-of-the-context-with-the-entitydatasource-component.md#2025-04-21_snippet_4\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Function GetProducts() As IEnumerable(Of Product)\n    Using context As New AdventureWorksEntities()\n        Return context.Products.ToList()\n    End Using\nEnd Function\n```\n\n----------------------------------------\n\nTITLE: Specifying Data Provider in JSON\nDESCRIPTION: This JSON snippet demonstrates how to specify both the connection string and the provider name within the ConnectionStrings section of a JSON configuration file, allowing the use of different data providers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n````JSON\n{\n\t\"ConnectionStrings\": {\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": {\n\t\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t}\n}\n````\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Value Dynamically in Telerik Reporting Expression\nDESCRIPTION: Demonstrates how to use the Fields(name) function to dynamically access a field value based on a parameter. This is useful for scenarios like dynamic sorting in reports.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/report-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n= Fields(Parameters.SortField)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tooltip Template in Blazor Native Report Viewer\nDESCRIPTION: Demonstrates how to set a custom tooltip template for the Blazor Native Report Viewer using TooltipTemplate. The example shows the default tooltip structure with access to tooltip title and text through data attributes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/customizing/tooltips-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n<ReportViewer\n\tServiceUrl=\"/api/reports\"\n\t...>\n\t<TooltipTemplate>\n\t\t<div class=\"trv-pages-area-kendo-tooltip\">\n\t\t\t<div class=\"trv-pages-area-kendo-tooltip-title\">@context.DataAttributes[\"tooltipTitle\"]</div>\n\t\t\t<div class=\"trv-pages-area-kendo-tooltip-text\">@context.DataAttributes[\"tooltipText\"]</div>\n\t\t</div>\n\t</TooltipTemplate>\n</ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Configuring NavigateToReportAction with TypeReportSource in C#\nDESCRIPTION: Shows how to specify a report for NavigateToReportAction and its corresponding report parameters using TypeReportSource in C#.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.TypeReportSource reportSource = new Telerik.Reporting.TypeReportSource();\nreportSource.TypeName = \"ReportLibrary1.InvoiceReport, ReportLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\";\nreportSource.Parameters.Add(new Telerik.Reporting.Parameter(\"OrderNumber\", \"SO43659\"));\nTelerik.Reporting.NavigateToReportAction reportAction1 = new Telerik.Reporting.NavigateToReportAction();\nreportAction1.ReportSource = reportSource;\ntextBox1.Action = reportAction1;\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Resize Function for HTML5 Report Viewer in JavaScript\nDESCRIPTION: JavaScript code to subscribe to the pageReady event and implement a function to resize the viewer based on the report page content.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-resize-the-report-viewer-to-accommodate-its-content.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n\t$(\"#reportViewer1\")\n\t\t.telerik_ReportViewer({\n\t\t\tserviceUrl: \"api/reports/\",\n\t\t\treportSource: {\n\t\t\t\treport: \"Telerik.Reporting.Examples.CSharp.ReportCatalog, CSharp.ReportLibrary\"\n\t\t\t},\n\t\t\t//Resize the viewer when the page is ready\n\t\t\tpageReady: function (e, args) {\n\t\t\t\tresizeViewer();\n\t\t\t}\n\t\t});\n\t\n\tfunction resizeViewer() {\n\t\tvar pageHeight = $(\".trv-pages-area .trv-page-wrapper\").height() + $(\".trv-nav\").outerHeight() + 2, // Calculate the report page height\n\t\t\tviewer = $(\"#reportViewer1\"),\n\t\t\tviewerHeight = viewer.height();\n\t\n\t\tif (viewerHeight !== pageHeight ) {\n\t\t\tviewer.height(pageHeight);\n\t\t\tvar documentMapSplitter = $(\".trv-document-map-splitter\").data(\"kendoSplitter\");\n\t\t\tdocumentMapSplitter.resize(true);\n\t\n\t\t\tvar parameterSplitter = $(\".trv-parameters-splitter\").data(\"kendoSplitter\");\n\t\t\tparameterSplitter.resize(true);\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String in Web.config\nDESCRIPTION: XML configuration for setting up the default connection string used by Telerik Reporting sample reports in the web.config file. Establishes connection to AdventureWorks database using integrated security.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/manual-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<connectionStrings>\n\t\t<add name=\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\"\n\t\t\t\t\tconnectionString=\"Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=SSPI\"\n\t\t\t\t\tproviderName=\"System.Data.SqlClient\" />\n\t</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML5 Report Viewer in .NET MAUI WebView\nDESCRIPTION: HTML code for embedding the Telerik HTML5 Report Viewer into a .NET MAUI application using WebView. The snippet includes the necessary scripts, styling, and viewer configuration pointing to a Telerik demo reporting service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/displaying-telerik-report-in-net-maui-and-maui-blazor-applications.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<WebView HeightRequest=\"600\" WidthRequest=\"800\">\n\t\t<WebView.Source>\n\t\t\t<HtmlWebViewSource>\n\t\t\t\t<HtmlWebViewSource.Html>\n\t\t\t\t\t<![CDATA[\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t\t<head>\n\t\t\t<title>Telerik HTML5 Report Viewer Demo</title>\n\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t\t\t<link href=\"https://kendo.cdn.telerik.com/{{site.kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" id=\"common-css\" />\n\t\t\t<link href=\"https://kendo.cdn.telerik.com/{{site.kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" id=\"skin-css\" />\n\t\t\t<script src=\"https://demos.telerik.com/reporting/api/reports/resources/js/telerikReportViewer\"></script>\n\t\t\t<style>\n\t\t\t\tbody {\n\t\t\t\t\tfont-family: Verdana, Arial, sans-serif;\n\t\t\t\t\tmargin: 5px;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t#reportViewer1 {\n\t\t\t\t. . .\n\t\t\t\t}\n\t\t\t</style>\n\t\t</head>\n\t\t<body>\n\n\t\t\t<div id=\"reportViewer1\">\n\t\t\t\tloading...\n\t\t\t</div>\n\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t$(document).ready(function () {\n\t\t\t\t\t$(\"#reportViewer1\")\n\t\t\t\t\t\t.telerik_ReportViewer({\n\t\t\t\t\t\t\tserviceUrl: \"https://demos.telerik.com/reporting/api/reports/\",\n\t\t\t\t\t\t\treportSource: {\n\t\t\t\t\t\t\t\t//parameters: {}\n\t\t\t\t\t\t\t\t//parameters: { Year: [2001, 2003, 2004] }\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t// Report Server connection configuration\n\t\t\t\t\t\t\t// If Report Server is used instead of hosting a REST Service, comment out 'serviceUrl' and 'reportSource' above\n\t\t\t\t\t\t\t// uncomment 'reportServer' and 'reportSource' below\n\t\t\t\t\t\t\t//reportServer: {\n\t\t\t\t\t\t\t//    url: \"http://report-server-host:83\",\n\t\t\t\t\t\t\t//    username: \"admin\",\n\t\t\t\t\t\t\t//    password: \"adminpass\"\n\t\t\t\t\t\t\t//},\n\t\t\t\t\t\t\t//reportSource: {\n\t\t\t\t\t\t\t//    // For Report Server, use \"{Category}/{ReportName}\"\n\t\t\t\t\t\t\t//    report: \"Samples/Dashboard\"\n\t\t\t\t\t\t\t//},\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t</script>\n\n\t\t</body>\n\t</html>\n\t]]>\n\t\t\t\t</HtmlWebViewSource.Html>\n\t\t\t</HtmlWebViewSource>\n\t\t</WebView.Source>\n\t</WebView>\n```\n\n----------------------------------------\n\nTITLE: Implementing Export Options Customization in TypeScript\nDESCRIPTION: This TypeScript code defines classes for selectively hiding export options in the Angular Report Viewer. It includes a HideOption class for specifying which formats to hide for each report, and an ExportOptionsHider class that manages the hiding logic and event bindings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-customize-export-options-of-angular-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as $ from 'jquery';\n\nclass HideOption {\n\n    reportName: string;\n    formatsToHide = [];\n\n    constructor(reportName: string, formatsToHide: any) {\n        this.reportName = reportName;\n        this.formatsToHide = formatsToHide;\n    }\n}\n\nexport class ExportOptionsHider {\n\n    public static instance : ExportOptionsHider;\n    public static init(){\n        if(!ExportOptionsHider.instance){\n            ExportOptionsHider.instance = new ExportOptionsHider();\n        }\n        ExportOptionsHider.instance.bindEvents();\n    }\n\n    private largeMenuBound = false;\n    private sideMenuBound = false;\n    private reportSource = \"\";\n    private hideOptions = [\n        new HideOption(\"Dashboard.trdp\", [\"XLSX\"]),\n        new HideOption(\"ReportCatalog.trdp\", [\"PDF\", \"XLSX\"])\n    ];\n\n    public update(reportSource: string){\n        this.reportSource = reportSource;\n        // show all extensions\n        $('[data-command-parameter]').show();\n    }\n\n    private bindEvents() {\n        const sideMenu = $(\".trv-side-menu\").children(\"ul\").data('kendoPanelBar');\n        const largeMenu = $(\".trv-menu-large\").data(\"kendoMenu\");\n        const smallMenu = $(\".trv-menu-small\");\n\n        // bind to the 'open' event of the main menu\n        if (!this.largeMenuBound && largeMenu) {\n            largeMenu.bind(\"open\", () => {\n                this.hideUnwantedOptions();\n            });\n\n            this.largeMenuBound = true;\n        }\n\n        // bind to the 'expand' event of the side menu\n        if (!this.sideMenuBound && smallMenu) {\n            sideMenu.bind(\"expand\", () => {\n                this.hideUnwantedOptions();\n            });\n\n            this.sideMenuBound = true;\n        }\n    }\n\n    private hideUnwantedOptions() {\n        this.hideOptions.forEach((hideOption) => {\n            if (this.reportSource.startsWith(hideOption.reportName)) {\n                hideOption.formatsToHide.forEach((item) => {\n                    const hiddenOption = $('[data-command-parameter=\"' + item + '\"]');\n                    if (hiddenOption && hiddenOption.length) {\n                        hiddenOption.hide();\n                    }\n                });\n                return;\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Service Report Viewer\nDESCRIPTION: Implementation of the Report Viewer component using REST service configuration\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/how-to-use-native-blazor-report-viewer.md#2025-04-21_snippet_5\n\nLANGUAGE: CSHTML\nCODE:\n```\n@page \"/\"\n\n<PageTitle>Report Viewer</PageTitle>\n\n<ReportViewer\n\tServiceType=\"@ReportViewerServiceType.REST\"\n\tServiceUrl=\"https://demos.telerik.com/reporting/api/reports\"\n\t@bind-ReportSource=\"@ReportSource\"\n\t@bind-ScaleMode=\"@ScaleMode\"\n\t@bind-ViewMode=\"@ViewMode\"\n\t@bind-ParametersAreaVisible=\"@ParametersAreaVisible\"\n\t@bind-DocumentMapVisible=\"@DocumentMapVisible\"\n\t@bind-Scale=\"@Scale\">\n</ReportViewer>\n\n@code {\n\tpublic ScaleMode ScaleMode { get; set; } = ScaleMode.Specific;\n\tpublic ViewMode ViewMode { get; set; } = ViewMode.Interactive;\n\tpublic bool ParametersAreaVisible { get; set; }\n\tpublic bool DocumentMapVisible { get; set; }\n\tpublic double Scale { get; set; } = 1.0;\n\n\tpublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions(\"Report Catalog.trdx\", \n\t\tnew Dictionary<string, object>\n\t\t{\n\t\t\t// Add parameters if applicable\n\t\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Section Children in C# for Telerik Reporting\nDESCRIPTION: This snippet shows how to access all children of a detail section in a Telerik report and set a background color for each child element. It emphasizes the importance of using the correct interfaces for accessing children.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/using-section-events.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Detail_ItemDataBound(object sender, EventArgs e) {\n    // Get reference to the section object\n    var section = (Telerik.Reporting.Processing.ReportSection)sender;\n    // Loop through all children and set BackgroundColor\n    foreach(var child in section.Children) {\n        child.Style.BackgroundColor = Color.LightGray;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportsController with HttpContext Access\nDESCRIPTION: Custom implementation of ReportsController that injects IHttpContextAccessor to access HttpContext information and passes it to the reporting engine through UserIdentity.Context.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/core-how-to-pass-information-from-httpcontext-to-reporting-engine.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Route(\"api/reports\")]\npublic class ReportsController : ReportsControllerBase\n{\n    private IHttpContextAccessor httpContextAccessor;\n\t\n    public ReportsController(IReportServiceConfiguration reportServiceConfiguration, IHttpContextAccessor httpContextAccessor)\n        : base(reportServiceConfiguration)\n    {\n        this.httpContextAccessor = httpContextAccessor;\n    }\n\n    protected override UserIdentity GetUserIdentity()\n    {\n        var identity = base.GetUserIdentity();\n        identity.Context = new System.Collections.Concurrent.ConcurrentDictionary<string, object>();\n\n        // *The following code line is suitable for .NET and not for .NET Core. When used in .NET Core\n        // *compile time there will be an error\n        // *\"'HttpContext' is inaccessible due to its protection level\"\n        //identity.Context[\"UrlReferrer\"] = System.Web.HttpContext.Current.Request.UrlReferrer;\n\t\t\n        // *The following code line is suitable for .NET Core \n        identity.Context[\"UrlReferrer\"] = httpContextAccessor.HttpContext.Request.Headers[\"Referer\"].ToString();\n\n        // Any other available information can be stored in the identity.Context in the same way\n\n        return identity;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ReportSourceResolver for ReportBook in C#\nDESCRIPTION: This code snippet shows how to create a custom IReportSourceResolver to dynamically create a ReportBook at runtime. It adds multiple reports to the ReportBook and returns it as an InstanceReportSource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-display-reportbook-in-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyReportSourceResolver : IReportSourceResolver\n{\n    public ReportSource Resolve(string reportId, OperationOrigin operationOrigin, IDictionary<string, object> currentParameterValues)\n    {\n        // Creating a new report book\n        var reportBook = new ReportBook();\n\n        //Add first report\n        var firstReportSource = new TypeReportSource();\n        firstReportSource.TypeName = typeof(FirstReport).AssemblyQualifiedName;\n        reportBook.ReportSources.Add(firstReportSource);\n\n        //Add second report\n        var secondReportSource = new TypeReportSource();\n        secondReportSource.TypeName = typeof(SecondReport).AssemblyQualifiedName;\n        reportBook.ReportSources.Add(secondReportSource);\n\n        //Return the new instance\n        var result = new InstanceReportSource { ReportDocument = reportBook };\n\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Report Source Resolver Implementation\nDESCRIPTION: Implements a custom report source resolver that handles report IDs and parameters for dynamic report generation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/reportsource-model-binding.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class DatabaseReportSourceResolver : IReportSourceResolver\n{\n    public Telerik.Reporting.ReportSource Resolve(string reportId, OperationOrigin operationOrigin, IDictionary<string, object> parameters)\n    {\n        var reportIdParts = reportId.Split('/');\n        var id = reportIdParts[0];\n        var report = GetReportFromDatabase(id);\n        var result = new TypeReportSource();\n        result.TypeName = report.Type;\n        result.Parameters = parameters;\n        return result;\n    }\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Class DatabaseReportSourceResolver\n    Implements IReportSourceResolver\n    Public Function Resolve(reportId As String, operationOrigin As OperationOrigin, parameters As IDictionary(Of String, Object)) As Telerik.Reporting.ReportSource\n        Dim reportIdParts = reportId.Split(\"/\"c)\n        Dim id = reportIdParts(0)\n        Dim report = GetReportFromDatabase(id)\n        Dim result = New TypeReportSource()\n        result.TypeName = report.Type\n        result.Parameters = parameters\n        Return result\n    End Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Report Designer React Component\nDESCRIPTION: Create a new React component for the Web Report Designer, configuring the designer with necessary options and rendering it within the component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-web-report-designer-in-react-js.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { Component } from 'react';\n\nexport default class ReportDesigner extends Component {\n\n\tcomponentDidMount() {\n\t\twindow.jQuery('#reportDesigner1')\n\t\t\t.telerik_WebReportDesigner({\n\t\t\t\ttoolboxArea: {\n\t\t\t\t\tlayout: \"list\" //Change to \"grid\" to display the contents of the Components area in a flow grid layout.\n\t\t\t\t},\n\t\t\t\tserviceUrl: \"https://demos.telerik.com/reporting/api/reportdesigner/\",\n\t\t\t\treport: \"Barcodes report.trdx\"\n\t\t\t}).data(\"telerik_WebDesigner\");\n\t}\n\n\trender() {\n\t\treturn <div id=\"reportDesigner1\"></div>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Report Viewer and Action Handlers - CSharp\nDESCRIPTION: The snippet sets the ReportSource property for the report viewer and assigns event handlers for interactive actions in the report viewer's constructor. These handlers include Choropleth_ ActionEnter, Choropleth_ ActionLeave, and Choropleth_ ActionExecuting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-wpf-report-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\n// This code block sets the report viewer's ReportSource property and creates the handlers to the interactive actions.\nthis .ReportViewer1.ReportSource = new Telerik.Reporting.TypeReportSource()\n{\n\tTypeName = typeof (Telerik.Reporting.Examples.CSharp.Choropleth.PopulationDensity).AssemblyQualifiedName\n};\n\nthis.ReportViewer1.InteractiveActionEnter += Choropleth_ActionEnter;\nthis.ReportViewer1.InteractiveActionLeave += Choropleth_ActionLeave;\nthis.ReportViewer1.InteractiveActionExecuting += Choropleth_ActionExecuting;\n```\n\n----------------------------------------\n\nTITLE: Creating a ReportModel class in C#\nDESCRIPTION: Defines a model class with properties for the report name and a dictionary of parameters. This model will be passed from the controller to the view to set up the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-report-source-and-parameters-through-model.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReportModel\n{\n\tpublic string ReportName { get; set; }\n\tpublic Dictionary<string,object> Parameters { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching PDF Report Data\nDESCRIPTION: Implementation of PDF report retrieval logic supporting both local web API and online demo service endpoints.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-reports-in-maui-blazor-pdf-viewer.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprivate async Task GetPdfAsync(string reportName)\n{\n\tswitch (ReportingService)\n\t{\n\t\t// Render report in the project RenderReports\n\t\tcase ReportService.ReportingWebApi:\n\t\t\t{\n\t\t\t\tFileData = await WebClient.GetByteArrayAsync($\"{BaseAddress}/{reportName}\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t// Render report in the Reporting online demo\n\t\tcase ReportService.ReportingOnlineDemo:\n\t\t\t{\n\t\t\t\tFileData = await ExportReportFromServiceAsync(reportName);\n\t\t\t\treturn;\n\t\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Endpoint Routing for API Controllers in ASP.NET Core 3.1\nDESCRIPTION: Sets up endpoint routing to map controllers in the Configure method of Startup.cs. This is required for the RESTful API endpoints provided by the Telerik Reporting service to be accessible.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\napp.UseEndpoints(endpoints =>\n\t{\n\t\tendpoints.MapControllers();\n\t\t//...\n\t});\n```\n\n----------------------------------------\n\nTITLE: Creating ReportFolder Entity Model in C#\nDESCRIPTION: Defines the ReportFolder entity model for organizing reports in a hierarchical structure. Includes properties for folder metadata and relationships.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/implement-database-definition-storage-efcore.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class ReportFolder\n{\n\t[Column(\"Id\")]\n\t[Required]\n\t[DatabaseGenerated(DatabaseGeneratedOption.Identity)]\n\t[Key]\n\tpublic string Id { get; set; }\n\n\t[Column(\"Name\")]\n\t[Required]\n\tpublic string Name { get; set; }\n\n\t[Column(\"ParentUri\")]\n\t[Required]\n\tpublic string ParentUri { get; set; }\n\n\t[Column(\"HasSubFolders\")]\n\tpublic bool HasSubFolders { get; set; }\n\n\t[Column(\"Uri\")]\n\tpublic string Uri { get; set; }\n\n\t[Column(\"CreatedOn\")]\n\t[Required]\n\tpublic DateTime CreatedOn { get; set; }\n\n\t[Column(\"ModifiedOn\")]\n\tpublic DateTime ModifiedOn { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the HTML5 Report Viewer and Dynamic Margin Update - JavaScript\nDESCRIPTION: This JavaScript snippet initializes the HTML5 Report Viewer and subscribes to the updateUi event to dynamically adjust the pages area margins based on the visibility of the Document Map and Parameters Area.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resize-the-html5-report-viewer-to-accommodate-its-content.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function () {\n    $(\"#reportViewer1\")\n        .telerik_ReportViewer({\n            serviceUrl: \"api/reports/\",\n            reportSource: {\n                report: \"Telerik.Reporting.Examples.CSharp.ReportCatalog, CSharp.ReportLibrary\"\n            },\n            // Set the pages area margins to achieve responsive size when toggling the Document Map and Parameters Area on/off.\n            updateUi: function (e) {\n                var rv = e.data.sender;\n                updatePagesAreaMargin(rv.commands.toggleDocumentMap.checked(), \"margin-left\");\n                updatePagesAreaMargin(rv.commands.toggleParametersArea.checked(), \"margin-right\");\n            }\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Event Handlers in HTML5 ReportViewer\nDESCRIPTION: Demonstrates two approaches for binding event handlers to the report viewer - during initialization and using the bind method. Shows how to set up the report viewer with service URL, template, and report source configuration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/event-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\ttemplateUrl: 'ReportViewer/templates/telerikReportViewerTemplate-{{buildversion}}.html',\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\tpageReady: function(e) { console.log(\"this event handler was attached in the constructor\"); }\n\t});\n\tvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n\treportViewer.bind(telerikReportViewer.Events.PAGE_READY, function(e) {\n\t\tconsole.log(\"this event handler was attached using the bind method\");\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportClient for Telerik Reporting REST Service in C#\nDESCRIPTION: This snippet defines a ReportClient class that uses HttpClient to interact with the Telerik Reporting REST Service. It includes methods for registering a client, creating instances and documents, checking document processing status, and retrieving documents.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-reporting-rest-service-api-with-csharp-client.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class ReportClient : IDisposable\n{\n\tpublic string BaseAddress { get; set; }\n\tpublic HttpClient client;\n\tpublic string ClientId;\n\n\tpublic ReportClient(string uri)\n\t{\n\t\tthis.client = new HttpClient();\n\t\tthis.BaseAddress = uri;\n\n\t\tthis.client.BaseAddress = new Uri(this.BaseAddress);\n\t}\n\n\tpublic void Dispose()\n\t{\n\t\tusing (this.client) { }\n\t}\n\n\tpublic void RegisterClient()\n\t{\n\t\tvar headers = new List<KeyValuePair<string, string>>();\n\t\tvar content = new FormUrlEncodedContent(headers);\n\n\t\tvar registerClientTask = this.client.PostAsync(this.BaseAddress + \"/clients\", content);\n\t\tvar response = registerClientTask.Result;\n\n\t\tif (response.IsSuccessStatusCode)\n\t\t{\n\t\t\tvar clientIdTask = response.Content.ReadAsAsync<ClientIDModel>();\n\t\t\tvar clientId = clientIdTask.Result;\n\t\t\tthis.ClientId = clientId.ClientId;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar error = response.Content.ReadAsAsync<ErrorModel>().Result;\n\t\t\tthrow new Exception(error.Description);\n\t\t}\n\t}\n\n\tpublic string CreateInstance(string reportSource)\n\t{\n\t\tHttpContent content = new StringContent(reportSource, Encoding.UTF8, \"application/json\");\n\n\t\tstring route = $\"{this.BaseAddress}/clients/{this.ClientId}/instances\";\n\t\tvar instanceTask = this.client.PostAsync(route, content);\n\n\t\tInstanceIdModel instanceId = null;\n\t\tvar response = instanceTask.Result;\n\t\tif (response.IsSuccessStatusCode)\n\t\t{\n\t\t\tinstanceId = response.Content.ReadAsAsync<InstanceIdModel>().Result;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar error = response.Content.ReadAsAsync<ErrorModel>().Result;\n\t\t\tthrow new Exception(error.Description);\n\t\t}\n\n\t\treturn instanceId.InstanceId;\n\t}\n\n\tpublic string CreateDocument(string instanceId, string format, string deviceInfo = null, string useCache = \"true\")\n\t{\n\t\tstring contentBody = $\"{{ \\\"useCache\\\": {useCache}, \\\"format\\\": \\\"{format}\\\" }}\";\n\t\tHttpContent content = new StringContent(contentBody, Encoding.UTF8, \"application/json\");\n\n\t\tstring route = $\"{this.BaseAddress}/clients/{this.ClientId}/instances/{instanceId}/documents\";\n\t\tvar documentTask = this.client.PostAsync(route, content);\n\n\t\tDocumentIdModel documentId = null;\n\t\tvar response = documentTask.Result;\n\t\tif (response.IsSuccessStatusCode)\n\t\t{\n\t\t\tdocumentId = response.Content.ReadAsAsync<DocumentIdModel>().Result;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar error = response.Content.ReadAsAsync<ErrorModel>().Result;\n\t\t\tthrow new Exception(error.Description);\n\t\t}\n\n\t\treturn documentId.DocumentId;\n\t}\n\n\tpublic bool DocumentIsProcessing(string instanceId, string documentId)\n\t{\n\t\tstring route = $\"{this.BaseAddress}/clients/{this.ClientId}/instances/{instanceId}/documents/{documentId}/Info\";\n\n\t\tvar documentInfoTask = this.client.GetAsync(route);\n\n\t\tDocumentInfoModel documentInfo = null;\n\t\tvar response = documentInfoTask.Result;\n\t\tif (response.IsSuccessStatusCode)\n\t\t{\n\t\t\tdocumentInfo = response.Content.ReadAsAsync<DocumentInfoModel>().Result;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar error = response.Content.ReadAsAsync<ErrorModel>().Result;\n\t\t\tthrow new Exception(error.Description);\n\t\t}\n\n\t\treturn !documentInfo.DocumentReady;\n\t}\n\n\tpublic byte[] GetDocument(string instanceId, string documentId)\n\t{\n\t\tstring route = $\"{this.BaseAddress}/clients/{this.ClientId}/instances/{instanceId}/documents/{documentId}\";\n\n\t\tvar getDocumentTask = this.client.GetAsync(route);\n\n\t\tbyte[] documentBytes = null;\n\t\tvar response = getDocumentTask.Result;\n\t\tif (response.IsSuccessStatusCode)\n\t\t{\n\t\t\tdocumentBytes = response.Content.ReadAsByteArrayAsync().Result;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar error = response.Content.ReadAsAsync<ErrorModel>().Result;\n\t\t\tthrow new Exception(error.Description);\n\t\t}\n\n\t\treturn documentBytes;\n\t}\n\n\tprivate static void EnsureSuccessStatusCode(HttpResponseMessage response)\n\t{\n\t\tif (!response.IsSuccessStatusCode)\n\t\t{\n\t\t\tthrow\n\t\t\t\tnew Exception(\n\t\t\t\t\tresponse.ReasonPhrase +\n\t\t\t\t\tEnvironment.NewLine +\n\t\t\t\t\tresponse.RequestMessage.RequestUri);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Phone Class in C#\nDESCRIPTION: Defines a Phone class with a Number property and a GetFormattedNumber method to format the phone number.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/how-to-use-the-reportitem.dataobject-property-in-expressions.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Phone\n{\n\tpublic string Number { get; set; }\n\tpublic string GetFormattedNumber()\n\t{\n\t\treturn Number.Replace(' ','-');\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling error Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `error` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `error` event is emitted when the viewer encounters an error.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(error)=\"error($event)\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Handling Report Errors in C#\nDESCRIPTION: This C# code snippet demonstrates how to handle errors during report processing using the Error event of the Telerik Reporting Report class. It includes initializing the component, attaching an error event handler, and manually canceling the event to throw a new exception.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/handling-errors-occurring-in-a-custom-resolver-used-by-a-reporting-rest-service.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n````C#\n//the report\npublic partial class ReportTest : Telerik.Reporting.Report\n    {\n        public ReportTest()\n        {\n            //\n            // Required for telerik Reporting designer support\n            //\n            InitializeComponent();\n            this.Error += new Telerik.Reporting.ErrorEventHandler(this.rptTest_Error);           \n        }\n        private void rptTest_Error(object sender, ErrorEventArgs eventArgs)\n        {\n            eventArgs.Cancel = true;\n            throw new Exception(\"Manually cancelled.\");\n        }\n    }\n````\n```\n\n----------------------------------------\n\nTITLE: Binding PictureBox to Image Objects in C# and VB.NET\nDESCRIPTION: Demonstrates how to directly assign Image objects to a PictureBox's Value property using both file and stream sources.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/picturebox.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Drawing;\nImage image1 = Image.FromFile(@\"C:\\MyPictures\\MyPicture.jpg\");\nthis.pictureBox1.Value = image1;\nImage image2 = Image.FromStream(imageStream);\nthis.pictureBox2.Value = image2;\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports System.Drawing\nDim image1 As Image = Image.FromFile(\"C:\\MyPictures\\MyPicture.jpg\")\nMe.PictureBox1.Value = image1\nDim image2 As Image = Image.FromStream(imageStream)\nMe.PictureBox2.Value = image2\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Viewer Commands in Blazor\nDESCRIPTION: Example showing how to implement report viewer commands including refresh, export to PDF, and authentication token updates in a Blazor component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/api-reference/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n<button type=\"button\" class=\"btn btn-light btn-sm\" @onclick=\"RefreshReport\">Refresh Report</button>\n<button type=\"button\" class=\"btn btn-light btn-sm\" @onclick=\"Export\">Export Report to PDF</button>\n<button type=\"button\" class=\"btn btn-light btn-sm\" @onclick=\"UpdateToken\">Update Authentication Token</button>\n\n<ReportViewer\n\tServiceUrl=\"/api/reports\"\n\t@ref=\"@ViewerInstance\"\n</ReportViewer>\n\n@code {\n\tpublic ReportViewer ViewerInstance { get; set; }\n\n\tvoid RefreshReport()\n\t{\n\t\tViewerInstance.ExecuteCommand(\"Refresh\");\n\t}\n\tvoid Export()\n\t{\n\t\tViewerInstance.ExecuteCommand(\"Export\", \"PDF\");\n\t}\n\n\tvoid SetToken()\n\t{\n\t\tViewerInstance.ExecuteCommand(\"SetAuthenticationToken\", \"SAMPLE_TOKEN\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Oracle Connection Strings from Environment Variables in .NET Core\nDESCRIPTION: This method loads a reporting configuration from environment variables by setting and reading Oracle connection string information. It demonstrates how to format environment variable keys with specific delimiters for proper hierarchical structure and filtering with a prefix.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-retrieve-the-connection-strings-from-environment-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\n/// <summary>\n/// Loads a reporting configuration from a specific JSON-based configuration file.\n/// </summary>\n/// <param name=\"environment\">The current web hosting environment used to obtain the content root path</param>\n/// <returns>IConfiguration instance used to initialize the Reporting engine</returns>\nstatic IConfiguration ResolveSpecificReportingConfiguration(IWebHostEnvironment environment)\n{\n\tEnvironment.SetEnvironmentVariable(\"MyOracleApp_ConnectionStrings:OracleConn:connectionString\", \"Data Source=reportingvista;User Id=telerik;Password=telerikpass\");\n\tEnvironment.SetEnvironmentVariable(\"MyOracleApp_ConnectionStrings:OracleConn:providerName\", \"Oracle.ManagedDataAccess.Client\");\n\treturn new ConfigurationBuilder()\n\t\t.AddEnvironmentVariables(\"MyOracleApp_\")\n\t\t.Build();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML View for Telerik Report Viewer in ASP.NET Core MVC\nDESCRIPTION: Creates an HTML view with necessary scripts and styles to render the Telerik Report Viewer. It includes jQuery, Kendo UI styles, and the Telerik Report Viewer initialization script.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-reporting-net-core-mvc.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n\n\t\t<link href=\"https://kendo.cdn.telerik.com/2019.1.115/styles/kendo.common.min.css\" rel=\"stylesheet\" id=\"common-css\" />\n\t\t<link href=\"https://kendo.cdn.telerik.com/2019.1.115/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" id=\"skin-css\" />\n\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tmargin: 5px;\n\t\t\t\tfont-family: Verdana, Arial, sans-serif;\n\t\t\t}\n\n\t\t\t#reportViewer1 {\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 5px;\n\t\t\t\tright: 5px;\n\t\t\t\ttop: 160px;\n\t\t\t\tbottom: 5px;\n\t\t\t\toverflow: hidden;\n\t\t\t\tclear: both;\n\t\t\t}\n\t\t</style>\n\n\t\t<title>Telerik HTML5 Report Viewer Demo</title>\n\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t</head>\n\t<body>\n\t\t<div id=\"reportViewer1\">\n\t\t\tloading...\n\t\t</div>\n\t</body>\n</html>\n\n@section scripts\n{\n\t<script src=\"/api/reports/resources/js/telerikReportViewer\"></script>\n\n\t<script type=\"text/javascript\">\n\t\t$(document).ready(function () {\n\t\t\t$(\"#reportViewer1\")\n\t\t\t\t.telerik_ReportViewer({\n\t\t\t\t\tserviceUrl: \"api/reports/\",\n\t\t\t\t\treportSource: {\n\t\t\t\t\t\treport: \"Product Sales.trdp\",\n\t\t\t\t\t\t// Parameters name value dictionary\n\t\t\t\t\t\t//parameters: {}\n\t\t\t\t\t},\n\t\t\t\t\tviewMode: telerikReportViewer.ViewModes.INTERACTIVE,\n\t\t\t\t\tscaleMode: telerikReportViewer.ScaleModes.SPECIFIC,\n\t\t\t\t\tscale: 1.0,\n\t\t\t\t\tenableAccessibility: false,\n\t\t\t\t\tsendEmail: { enabled: true }\n\t\t\t\t});\n\t\t});\n\t</script>\n}\n```\n\n----------------------------------------\n\nTITLE: Catching Resolver Errors in C#\nDESCRIPTION: This C# code snippet demonstrates how to override the GetParameters method in the ReportsControllerBase class to catch exceptions that occur during report resolving. It includes wrapping the base method call in a try-catch block and throwing a new exception when an error occurs.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/handling-errors-occurring-in-a-custom-resolver-used-by-a-reporting-rest-service.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n````C#\npublic override System.Net.Http.HttpResponseMessage GetParameters(string clientID, ClientReportSource reportSource)\n{\n    try {\n        return base.GetParameters(clientID, reportSource);\n    } catch (Exception ex) {\n        throw new Exception(\"Report resolving error.\");\n    }\n}\n````\n```\n\n----------------------------------------\n\nTITLE: Inline CSS Styling for Report Viewer Tooltips\nDESCRIPTION: CSS styles defined directly in the HTML page to customize the tooltip appearance, overriding default styles with important declarations and adding italic text formatting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n\t.trv-pages-area-kendo-tooltip {\n\t\tbackground: DarkSeaGreen!important;\n\t}\n \n\t.trv-pages-area-kendo-tooltip-text {\n\t\tfont-style: italic;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Exporting to Multi-Document Formats in C# using Telerik Reporting\nDESCRIPTION: This snippet shows how to export a report to multi-document formats like HTML or image formats using the CreateStream callback. The example demonstrates exporting a report to JPEG images with each page exported as a separate file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/generate-reports-locally.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Exporting to image format:\nInstanceReportSource rs = new InstanceReportSource();\nrs.ReportDocument = new Report1();\n\nReportProcessor reportProcessor = new ReportProcessor();\n\n// An instance of the Hashtable class to create a deviceInfo.\nSystem.Collections.Hashtable deviceInfo = new System.Collections.Hashtable();\n\n// Setting the DPI.\ndeviceInfo.Add(\"DpiX\", \"300\");\ndeviceInfo.Add(\"DpiY\", \"300\");\n\n// Setting the image quality. The quality must be between 0 and 100.\ndeviceInfo.Add(\"OutputFormat\", \"JPEG\");\ndeviceInfo.Add(\"JpegQuality\", \"80\");\n\nreportProcessor.RenderReport(\n    \"IMAGE\",\n    rs,\n    deviceInfo,\n    CreateStream,\n    null);\n\nprivate static MemoryStream CreateStream(string name, string extension, string encoding, string mimeType, bool willSeek)\n{\n    // We only need to care about the extension, a more general implementation would\n    // pay attention to name, encoding, and mimeType as well.\n    // To check the working of this, add method below to an appropriate class:\n    string fileName = \"\" + Guid.NewGuid().ToString() + \".\" + extension.Replace(\".\", \"\");\n\n    if (File.Exists(fileName))\n        File.Delete(fileName);\n\n    MemoryStream stream = new MemoryStream();\n\n    return stream;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Data Source Selection\nDESCRIPTION: Demonstrates the process of selecting a JSON data source, with options for external file or inline string input and optional JSONPath filtering\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/tools/data-source-wizards/jsondatasource-wizard.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. __Choose a JSON Source__ Choose between external file or inline string.\n```\n\n----------------------------------------\n\nTITLE: Modifying SqlDataSource Connection String and Query at Runtime in VB.NET\nDESCRIPTION: This VB.NET code example shows how to unpackage a TRDP report file, access its SqlDataSource components using the GetDataSources method, and modify the connection string and SQL query for each data source. The modified report is then used to create an InstanceReportSource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/edit-report-datasources-at-runtime.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim query As String = \"SQL_QUERY_HERE\"\nDim reportPackager As New ReportPackager()\nDim report As Telerik.Reporting.Report = Nothing\n\nUsing sourceStream As FileStream = File.OpenRead(\"Report1.trdp\")\n    report = CType(reportPackager.UnpackageDocument(sourceStream), Telerik.Reporting.Report)\nEnd Using\n\nDim sqlDS As IEnumerable(Of SqlDataSource) = report.GetDataSources().OfType(Of SqlDataSource)()\n\nFor Each sqlDataSource As SqlDataSource In sqlDS\n    sqlDataSource.ConnectionString = \"CONNECTION_STRING_HERE\"\n    sqlDataSource.SelectCommand = query\nNext\n\nDim irs As New InstanceReportSource() With {.ReportDocument = report}\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Settings Example\nDESCRIPTION: Example demonstrating how to configure device information settings and export parameters through the RuntimeSettings property introduced in R2 2021.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/report-item/properties.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nreport.RuntimeSettings = new RuntimeSettings() {\n    EnableExportFormat = true,\n    Description = \"Custom Export Format\",\n    Parameters = new Dictionary<string, string>() {\n        { \"Parameter1\", \"Value1\" },\n        { \"Parameter2\", \"Value2\" }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Telerik Reporting Configuration\nDESCRIPTION: This snippet shows the complete structure of the Telerik Reporting configuration in JSON format for use in appsettings.json and other key-value-based configuration files in .NET Core applications.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"extensions\": [\n\t\t{\n\t\t\t\"name\": null,\n\t\t\t\"parameters\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": null,\n\t\t\t\t\t\"value\": null\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"cache\": {\n\t\t\"provider\": null,\n\t\t\"providers\": [\n\t\t\t{\n\t\t\t\t\"name\": null,\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Name\": null,\n\t\t\t\t\t\t\"Value\": null\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t},\n\t\"processing\": {\n\t\t\"graphicsEngine\": {\n\t\t\t\"engineName\": null\n\t\t},\n\t\t\"cacheDefinitionProperties\": null,\n\t\t\"resourceResolver\": {\n\t\t\t\"provider\": null,\n\t\t\t\"parameters\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": null,\n\t\t\t\t\t\"value\": null\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": null,\n\t\t\t\t\t\"value\": null\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"sharedDataSourceResolver\": {\n\t\t\t\"provider\": null,\n\t\t\t\t\"parameters\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": null,\n\t\t\t\t\t\"value\": null\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n\t\"restReportService\": {\n\t\t\"hostAppId\": null,\n\t\t\"workerCount\": 0,\n\t\t\"reportSharingTimeout\": 0,\n\t\t\"clientSessionTimeout\": 0,\n\t\t\"reportResolver\": {\n\t\t\t\"provider\": null,\n\t\t\t\"parameters\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": null,\n\t\t\t\t\t\"value\": null\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"storage\": {\n\t\t\t\"provider\": null,\n\t\t\t\"parameters\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": null,\n\t\t\t\t\t\"value\": null\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n\t\"assemblyReferences\": [\n\t\t{\n\t\t\t\"name\": null,\n\t\t\t\"version\": null,\n\t\t\t\"culture\": null\n\t\t}\n\t],\n\t\"privateFonts\": [\n\t\t{\n\t\t\t\"fontFamily\": null,\n\t\t\t\"path\": null,\n\t\t\t\"fontStyle\": null\n\t\t}\n\t],\n\t\"fontLibrary\":{\n\t\t\"useDefaultLocations\": \"true\",\n\t\t\"fontLocations\": [\n\t\t\t{\n\t\t\t\t\"path\": null,\n\t\t\t\t\"searchSubfolders\": null\n\t\t\t}\n\t\t]\n\t},\n\t\"dpiAware\": {\n\t\t\"dpiAwareness\": null\n\t},\n\t\"appData\": {\n\t\t\"Path\": null\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: ReportsController ConfigSection Implementation in ASP.NET MVC (C#)\nDESCRIPTION: This C# code snippet shows how to configure the ReportsController using a configuration section in ASP.NET. It involves inheriting from ReportsControllerBase and setting the ReportServiceConfiguration property to an instance of ConfigSectionReportServiceConfiguration. This approach requires a 'restReportService' configuration element in the application's configuration file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/how-to-implement-the-reportscontroller-in-an-application.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Web.Http;\nusing Telerik.Reporting.Services;\nusing Telerik.Reporting.Services.WebApi;\n\nnamespace MvcCS.Controllers\n{\n\tpublic class ReportsController : ReportsControllerBase\n\t{\n\t\tpublic ReportsController()\n\t\t{\n\t\t\t//The configuration section is the recommended way to configure the service\n\t\t\t//as it allows you to modify the service configuration without\n\t\t\t//recompiling the application.\n\t\t\tthis.ReportServiceConfiguration = new ConfigSectionReportServiceConfiguration();\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Field Validation Function in C#\nDESCRIPTION: A User Function that checks if a specified field exists in the data object and returns either the field value or a default value. The function takes the data object, field name, and default value as parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/check-if-data-field-exists-before-using-it.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static object IfFieldDoesNotExist(Telerik.Reporting.Processing.IDataObject dataObject, string fieldName, object defaultValue)\n{\n    object result;\n    if (dataObject.TryGetValue(fieldName, out result))\n    {\n        return result;\n    }\n\n    return defaultValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik Report Viewer in React\nDESCRIPTION: Import the TelerikReportViewer component into the index.js file, enabling the report viewer functionality in the React application\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-rest-service.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { TelerikReportViewer } from '@progress/telerik-react-report-viewer'\n```\n\n----------------------------------------\n\nTITLE: Calling Refresh and Print Methods in Blazor Report Viewer\nDESCRIPTION: This snippet demonstrates how to create buttons in a Blazor application that call methods to refresh and print the report displayed in the Report Viewer. The report viewer is referenced using the @ref attribute, allowing the application to access its API methods. The RefreshReport method asynchronously refreshes the report, while the Print method executes the print command.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/methods-and-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\n<button type=\"button\" class=\"btn btn-light btn-sm\" @onclick=\"RefreshReport\">Refresh Report</button>\n<button type=\"button\" class=\"btn btn-light btn-sm\" @onclick=\"Print\">Print Report</button>\n...\n<ReportViewer @ref=\"reportViewer1\"\n...\n@code {\n\tReportViewer reportViewer1;\n\tasync void RefreshReport()\n\t{\n\t\tawait reportViewer1.RefreshReportAsync();\n\t}\n\tasync void Print()\n\t{\n\t\tawait reportViewer1.Commands.Print.ExecuteAsync();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Row Number within Year Group (C#)\nDESCRIPTION: Uses the RowNumber function to get a running count of rows within a specific group (Year in this case).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/data-functions.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n=RowNumber(\"Year\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ListView Parameter Editor in Blazor Report Viewer\nDESCRIPTION: Example demonstrating how to implement a custom parameter editor using Telerik UI ListView component for both single and multi-select parameters, including the necessary click handling logic.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/customizing/how-to-create-custom-parameter-editors.md#2025-04-21_snippet_1\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer\n\tServiceUrl=\"/api/reports\"\n\t@bind-ReportSource=\"@ReportSource\"\n\tServiceType=\"@ReportViewerServiceType.REST\"\n\tHeight=\"800px\"\n\tWidth=\"100%\">\n\t<ParameterSingleSelectTemplate>\n\t\t<TelerikListView Data=\"@context.Parameter.AvailableValues\">\n\t\t\t<Template Context=\"listViewContext\">\n\t\t\t\t@{\n\t\t\t\t\tvar isSelected = context.Value?.Equals(listViewContext.Value) ?? false;\n\t\t\t\t\tvar className = (isSelected ? \"k-selected\" : string.Empty) + \" k-list-item\";\n\t\t\t\t}\n\t\t\t\t<div class=\"@className\" @onclick=\"@(()=> context.Value = listViewContext.Value)\">@listViewContext.Name</div>\n\t\t\t</Template>\n\t\t</TelerikListView>\n\t</ParameterSingleSelectTemplate>\n\t<ParameterMultiSelectTemplate>\n\t\t@{\n\t\t\tvar selectedValue = ((IEnumerable)context.Parameter.Value)?.Cast<object>()?.ToList();\n\t\t}\n\t\t<TelerikListView Data=\"@context.Parameter.AvailableValues\">\n\t\t\t<Template Context=\"listViewContext\">\n\t\t\t\t@{\n\t\t\t\t\tvar isSelected = selectedValue?.Contains(listViewContext.Value) ?? false;\n\t\t\t\t\tvar className = (isSelected ? \"k-selected\" : string.Empty) + \" k-list-item\";\n\t\t\t\t}\n\t\t\t\t<div class=\"@className\" @onclick=\"@(()=> MultiSelectParameterTemplateItemClick(context, listViewContext.Value))\">@listViewContext.Name</div>\n\t\t\t</Template>\n\t\t</TelerikListView>\n\t</ParameterMultiSelectTemplate>\n</ReportViewer>\n\n@code {\n\tpublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions(\"Dashboard.trdp\", new Dictionary<string, object>{});\n\n\tvoid MultiSelectParameterTemplateItemClick(ReportParameterContext reportParameterContext, object reportParameterValue)\n\t{\n\t\tvar selectedValue = ((IEnumerable)reportParameterContext.Parameter.Value).Cast<object>().ToList();\n\n\t\tif (selectedValue.Contains(reportParameterValue))\n\t\t{\n\t\t\tselectedValue.Remove(reportParameterValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tselectedValue.Add(reportParameterValue);\n\t\t}\n\n\t\treportParameterContext.Value = selectedValue;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Expressions in Telerik Reporting Parameters\nDESCRIPTION: This snippet shows how to use embedded expressions in Telerik Reporting parameters. It combines static text with field values using curly braces for embedding expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/using-expressions/report-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: expression\nCODE:\n```\nMr. {Fields.LastName}, {Fields.FirstName}\n```\n\n----------------------------------------\n\nTITLE: Deserializing Report Definition from XML in C#\nDESCRIPTION: Demonstrates how to use ReportXmlSerializer to deserialize a report definition from an XML file using XmlReader\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/serialize-report-definition-in-xml.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Snippet from CodeSnippets\\CS\\API\\Telerik\\Reporting\\XmlSerializationSnippets.cs region=XmlReaderDeserializationSnippet\n```\n\n----------------------------------------\n\nTITLE: Instantiating ReportConnectionStringManager in C#\nDESCRIPTION: In this C# snippet, a new connection string is assigned to a ReportConnectionStringManager object. The manager is used to update the report source, which is then set for a ReportViewer object. The snippet shows how to update and refresh a report with a new connection string. Requires Telerik.Reporting libraries and a valid connection string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/changing-the-connection-string-dynamically-according-to-runtime-data.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar connectionString = \"Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=SSPI\";\nvar connectionStringHandler = new ReportConnectionStringManager(connectionString);\nvar sourceReportSource = new UriReportSource { Uri = \"Employee Sales Summary.trdx\" };\n//var sourceReportSource = new InstanceReportSource { ReportDocument = new EmployeeSalesSummary() };\nvar reportSource = connectionStringHandler.UpdateReportSource(sourceReportSource);\nthis.reportViewer1.ReportSource = reportSource;\nthis.reportViewer1.RefreshReport();\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Registration Order in C# for Telerik Reporting Service\nDESCRIPTION: Code snippet demonstrating how to register Telerik Reporting routes before default routes in Web API configuration to prevent routing conflicts. This ensures reporting routes have priority over more general routes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resolve-reporting-rest-service-access-issues.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nTelerik.Reporting.Services.WebApi.ReportsControllerConfiguration.RegisterRoutes(config);\n\n    config.Routes.MapHttpRoute(\n        name: \"DefaultApi\",\n        routeTemplate: \"api/{controller}/{action}/{id}\",\n        defaults: new { id = RouteParameter.Optional }\n    );\n```\n\n----------------------------------------\n\nTITLE: Creating UriReportSource for Telerik Reporting in C#\nDESCRIPTION: This snippet demonstrates how to create a UriReportSource for use in the Telerik Reporting framework. It is necessary for determining the location of the report definition that is to be displayed in a Report Viewer. The snippet requires references to the Telerik Reporting libraries and proper configuration of the report parameters if needed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nUriReportSource uriReportSource = new UriReportSource();\nuriReportSource.Uri = \"http://reports.example.com/report.trdx\";\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Report Designer with Viewer Authentication in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize the Web Report Designer with custom options, including setting up the viewer initialization event. It shows how to set the authentication token for the HTML5 Report Viewer that is used within the Web Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-authentication-header-webreportdesigner.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n    $(\"#webReportDesigner\").telerik_WebReportDesigner({\n        persistSession: false,\n        toolboxArea: {\n            layout: \"list\"\n        },\n        serviceUrl: \"api/reportdesigner/\",\n        report: \"Dashboard.trdp\",\n        // design/preview\n        startMode: \"design\",\n        viewerInitializing: onViewerInitializing\n    }).data(\"telerik_WebReportDesigner\");\n});\n\nfunction onViewerInitializing(e, args) {\n    // e: jQuery event;\n    // args: IViewerPreInitEventArgs ->\n    //      reportViewerOptions: report viewer's options. All viewer's options available.\n\n    args.reportViewerOptions.authenticationToken = token;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Hosted REST Service for Telerik Reporting\nDESCRIPTION: Code for implementing the starting point of a self-hosted REST service for Telerik Reporting in a console application. The code sets up the Web API configuration, enables CORS, and starts a self-host server.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/how-to-self-host-telerik-reporting-rest-web-api.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\MvcCS\\SelfHostedSnippets\\Program.cs region=SelfHostedRestService}}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\MvcVB\\SelfHostedSnippets\\Program.vb region=SelfHostedRestService}}\n```\n\n----------------------------------------\n\nTITLE: Initializing ConfigSectionReportServiceConfiguration for ReportsControllerBase in C#\nDESCRIPTION: Shows how to initialize a ConfigSectionReportServiceConfiguration instance to be used with ReportsControllerBase. This setup allows the REST service to read configuration settings from the application's config file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/restreportservice-element.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconfigurationInstance = new ConfigSectionReportServiceConfiguration\n{\n\tHostAppId = \"Html5DemoApp\",\n\tReportSourceResolver = new UriReportSourceResolver(\"PATH_TO_REPORTS_FOLDER\")\n\t\t.AddFallbackResolver(new TypeReportSourceResolver());,\n};\n```\n\n----------------------------------------\n\nTITLE: Localizing Report Viewer using useEffect Hook\nDESCRIPTION: This snippet illustrates how to use the `useEffect` hook in a React component to extend the Report Viewer object with string resources for a specific culture after the component mounts. It retrieves the viewer object using a ref, determines the desired language, and then uses `Object.assign` to merge the localized strings from `StringResources` into the viewer's `stringResources` object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/customizing/localization.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function ReportViewer() {\n\t\tconst viewerRef = useRef(null);\n\t\tconst [language, setLanguage] = useState(navigator.language);\n\t\t\n\t\tuseEffect(() => {\n\t\t\tif (viewerRef) {\n\t\t\tconst { viewerObject } = viewerRef.current;\n\t\t\tswitch (language) {\n\t\t\t\tcase \"ja\":\n\t\t\t\tviewerObject.stringResources = Object.assign(viewerObject.stringResources, StringResources.japanese);\n\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tviewerObject.stringResources = Object.assign(viewerObject.stringResources, StringResources.english);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t}\n\t\t}, [language])\n\t\t\n\t\treturn (\n\t\t\t<TelerikReportViewer\n\t\t\tref = {viewerRef}\n\t\t\tserviceUrl = \"https://demos.telerik.com/reporting/api/reports/\"\n\t\t\treportSource = {{\n\t\t\t\treport: 'Dashboard.trdx',\n\t\t\t\tparameters: {}\n\t\t\t}}\n\t\t\tviewerContainerStyle = {{\n\t\t\t\tposition: 'absolute',\n\t\t\t\tleft: '5px',\n\t\t\t\tright: '5px',\n\t\t\t\ttop: '40px',\n\t\t\t\tbottom: '5px',\n\t\t\t\toverflow: 'hidden',\n\t\t\t\tclear: 'both',\n\t\t\t\tfontFamily: 'ms sans serif'\n\t\t\t}}\n\t\t\tviewMode = \"INTERACTIVE\"\n\t\t\tscaleMode = \"SPECIFIC\"\n\t\t\tscale = {1.0}\n\t\t\tenableAccessibility = {false} />\n\t\t)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Adding Newtonsoft JSON Support for REST Service\nDESCRIPTION: Adds Newtonsoft JSON serialization support to the service, which is required for the Telerik Reporting REST service to function properly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-6-with-minimal-api.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nbuilder.Services.AddNewtonsoftJson();\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiValue Report Parameter Expression\nDESCRIPTION: Creates a multivalue report parameter using AllDistinctValues function to select all distinct values from a specific field for pie chart filtering\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-filter-pie-chart-multiple-parameters-telerik-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: telerik-reporting-expression\nCODE:\n```\n= AllDistinctValue(Fields.StoreName)\n```\n\n----------------------------------------\n\nTITLE: Styling Parameters Area Container with CSS\nDESCRIPTION: CSS code to limit the visible height of the parameter values list and enable scrolling. Sets a maximum height of 100px for the parameter editor's available values list and forces a scrollbar to appear.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/modify-parameter-area-html5-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.trv-parameter-editor-available-values .k-listview {\n    max-height: 100px !important;\n    overflow: scroll !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing and Rendering Report Source in View\nDESCRIPTION: This HTML and Razor code snippet shows how to serialize the `ReportSourceModel` to JSON and then use `Html.Raw()` to prevent HTML encoding. This allows the model to be passed as a parameter to the Telerik Report Viewer widget in the view. The telerik_ReportViewer is initialized with serviceUrl and reportSource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pass-parameters-to-html5-report-viewer-from-a-views-model.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n@using Demo.Models\n\t@model ReportSourceModel\n\n\t<div id=\"reportViewer1\">\n\t\tloading...\n\t</div>\n\n\t@{\n\t\tvar reportSource = Html.Raw(Json.Serialize(Model));\n\t}\n\n\t<script type=\"text/javascript\">\n\n\t\t$(\"#reportViewer1\")\n\t\t\t.telerik_ReportViewer({\n\t\t\t\tid: \"reportviewer1\",\n\t\t\t\tserviceUrl: \"/api/reports/\",\n\t\t\t\treportSource: @reportSource\n\t\t\t});\n\t\t});\n\t</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a New React Application with NPX\nDESCRIPTION: Use NPX to create a new React application and start the development server. This requires Node >= 6 and npm >= 5.2 on your machine.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-web-report-designer-in-react-js.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx create-react-app my-app\ncd my-app\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Using the report viewer in AppComponent Template\nDESCRIPTION: This snippet illustrates how to use the report viewer selector in the AppComponent template, including binding parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer\n\t\t[containerStyle]=\"viewerContainerStyle\"\n\t\t[serviceUrl]=\"'http://localhost/api/reports'\"\n\t\t[reportSource]=\"{\n\t\t\treport: 'Product Catalog.trdp',\n\t\t\tparameters: {}\n\t\t}\"\n\t\t[viewMode]=\"'INTERACTIVE'\"\n\t\t[scaleMode]=\"'SPECIFIC'\"\n\t\t[scale]=\"1.0\">\n\t</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Creating a Number Editor using kendoNumericTextBox in JavaScript\nDESCRIPTION: This snippet defines a function 'createNumberEditor' which utilizes the kendoNumericTextBox widget to create a custom number parameter editor. It initializes the numeric text box with available values and sets up a change event callback to handle parameter changes. It requires jQuery and Kendo UI.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-kendonumerictextbox-widget-to-create-custom-parameter-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createNumberEditor(placeholder, options) {\n\t$(placeholder).html('<input type=\"number\"/>');\n\tvar inputElement = $(placeholder).find(\"input[type=number]\");\n\tvar parameter,\n\t\tvalueChangedCallback = options.parameterChanged,\n\t\tinputBox;\n\t\tfunction onChange() {\n\t\t\tvar dtv = inputBox.value();\n\t\t\tvalueChangedCallback(parameter, dtv);\n\t\t}\n\n\t\treturn {\n\t\t\tbeginEdit: function (param) {\n\t\t\t\tparameter = param;\n\n\t\t\t\t$(inputElement).kendoNumericTextBox({\n\t\t\t\t\tvalue: parameter.value,\n\t\t\t\t\tdataSource: parameter.availableValues,\n\t\t\t\t\tchange: onChange\n\t\t\t\t});\n\n\t\t\t\tinputBox = $(inputElement).data(\"kendoNumericTextBox\");\n\t\t\t}\n\t\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Information with Custom Business Object in C#\nDESCRIPTION: Defines a method in a custom business object that retrieves information about all products from an Entity Data Model of the Adventure Works sample database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/maintaining-the-lifecycle-of-the-context-with-the-entitydatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<Product> GetProducts()\n{\n    using (AdventureWorksEntities context = new AdventureWorksEntities())\n    {\n        return context.Products.ToList();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Client Events to Report Viewer in CSHTML\nDESCRIPTION: This snippet demonstrates how to attach client events 'RenderingBegin' and 'RenderingEnd' to the Telerik Report Viewer using the CSHTML syntax. It specifies which JavaScript functions to call for each event using the 'ClientEvents' method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/customizing/client-events.md#2025-04-21_snippet_1\n\nLANGUAGE: CSHTML\nCODE:\n```\n@(Html.TelerikReporting().ReportViewer()\n\t.ClientEvents(\n\t\tevents => events\n\t\t.RenderingBegin(\"onRenderingBegin\")\n\t\t.RenderingEnd(\"onRenderingEnd\")\n\t)\n)\n```\n\n----------------------------------------\n\nTITLE: Running Angular Application - PowerShell\nDESCRIPTION: This PowerShell command runs the Angular application using the Angular CLI, allowing the user to see the report viewer in action.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-report-server.md#2025-04-21_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Initialization of Telerik Web Report Designer\nDESCRIPTION: This snippet demonstrates how to initialize the Telerik Web Report Designer using jQuery. It specifies parameters such as 'persistSession', 'toolboxArea', 'serviceUrl', 'report', and 'event handlers' like 'error' for error handling. It's essential to set these configurations to properly start the designer in the desired mode and connect it to the necessary services.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n\t$(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\tpersistSession: false,\n\t\ttoolboxArea: {\n\t\t\tlayout: \"list\"\n\t\t},\n\t\tserviceUrl: \"api/reportdesigner/\",\n\t\treport: \"Dashboard.trdp\",\n\t\t// design/preview\n\t\tstartMode: \"design\",\n\t\terror: onError\n\t}).data(\"telerik_WebReportDesigner\");\n});\n\nfunction onError(e, args) {\n\t// e: jQuery event;\n\t// args: IErrorEventArgs ->\n\t\t// message: error message, string;\n\t\t// error: JS's Error instance.\n\t\n\tif (args.error) {\n\t\tconsole.log(`An error occurred! Message: ${args.message}; Error type: ${args.error.constructor.name}`);\n\t} else {\n\t\tconsole.log(`An error occurred! Message: ${args.message};`);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Binding ObjectDataSource to BusinessObject in C#\nDESCRIPTION: This C# code snippet demonstrates creating a custom business object, configuring an ObjectDataSource, and previewing a report using the Windows Forms Report Viewer. The business object includes methods returning various data types and supports method parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/bind-to-a-businessobject.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[DataObject]\npublic class Business\n{\n    [DataObjectMethod]\n    public DataTable GetDataTable()\n    {\n        DataTable table = new DataTable();\n        table.Columns.Add(\"ID\", typeof(int));\n        table.Columns.Add(\"Name\", typeof(string));\n        table.Rows.Add(1, \"John\");\n        table.Rows.Add(2, \"Jane\");\n        return table;\n    }\n\n    [DataObjectMethod]\n    public IEnumerable<Person> GetPersons()\n    {\n        return new List<Person>\n        {\n            new Person { ID = 1, Name = \"John\" },\n            new Person { ID = 2, Name = \"Jane\" }\n        };\n    }\n\n    [DataObjectMethod]\n    public IEnumerable<Person> GetPersonsWithParameters(int id, string name)\n    {\n        return new List<Person>\n        {\n            new Person { ID = id, Name = name }\n        };\n    }\n}\n\npublic class Person\n{\n    public int ID { get; set; }\n    public string Name { get; set; }\n}\n\nReport report = new Report();\nDetailSection detail = new DetailSection();\nreport.Items.Add(detail);\n\nObjectDataSource objectDataSource = new ObjectDataSource();\nobjectDataSource.DataMember = \"GetPersons\";\nobjectDataSource.DataSource = typeof(Business);\n\nTable table = new Table();\nTableBody body = new TableBody();\ntable.Bodies.Add(body);\n\nTableRow row = new TableRow();\nbody.Rows.Add(row);\n\nTableCell cell = new TableCell();\nrow.Cells.Add(cell);\n\nTextBox textBox = new TextBox();\ntextBox.Value = \"= Fields.Name\";\ncell.Items.Add(textBox);\n\ndetail.Items.Add(table);\nreport.DataSource = objectDataSource;\n\nReportProcessor reportProcessor = new ReportProcessor();\nRenderingResult result = reportProcessor.RenderReport(\"PDF\", report, null);\n\nSystem.IO.File.WriteAllBytes(\"report.pdf\", result.DocumentBytes);\n```\n\n----------------------------------------\n\nTITLE: Adding Report Parameter Programmatically in C#\nDESCRIPTION: Demonstrates how to add a report parameter to a Telerik Reporting report programmatically using C#. This snippet adds a new ReportParameter to the ReportParameters collection with specified Name, Type, and Text. The report parameter allows users to input values, filter report data, and connect related reports.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/how-to-add-report-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n            Telerik.Reporting.Report report = new Telerik.Reporting.Report();\n            Telerik.Reporting.ReportParameter parameter = new Telerik.Reporting.ReportParameter();\n            parameter.Name = \"ReportParameter1\";\n            parameter.Type = Telerik.Reporting.ReportParameterType.Integer;\n            parameter.Text = \"Please enter value for ReportParameter1\";\n            report.ReportParameters.Add(parameter);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data with a Parameter in Telerik Reporting (C#)\nDESCRIPTION: This C# code defines a static method `GetData` that retrieves data based on the provided 'year' parameter. It creates a DataTable and adds a \"Name\" column.  It then conditionally adds rows based on the value of the 'year' parameter. This method serves as the data source for the report, filtered by the year parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/use-parameters-to-retrieve-specific-data.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic DataTable GetData(string year)\n\t{\n\t\tDataTable table = new DataTable();\n\t\ttable.Columns.Add(\"Name\", typeof(string));\n\t\tif (\"2007\" == year)\n\t\t{\n\t\t\ttable.Rows.Add(\"Peter\");\n\t\t}\n\t\telse if (\"2008\" == year)\n\t\t{\n\t\t\ttable.Rows.Add(\"Scott\");\n\t\t}\n\t\treturn table;\n\t}\n```\n\n----------------------------------------\n\nTITLE: Updating Report Parameters in Blazor Report Viewer\nDESCRIPTION: C# method that handles the change event from the custom dropdown and updates the report viewer's parameters. It retrieves the current report source options, updates the OrderNumber parameter with the selected value, and refreshes the report viewer with the new configuration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-dynamically-select-and-filter-data-in-blazor.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync void changeId(ChangeEventArgs e)\n    {\n        ReportSourceOptions rso = await reportViewer1.GetReportSourceAsync();\n        rso.Parameters[\"OrderNumber\"] = e.Value;\n        await reportViewer1.SetReportSourceAsync(rso);\n    }\n```\n\n----------------------------------------\n\nTITLE: Exporting Report to PDF Stream in VB.NET using Telerik Reporting\nDESCRIPTION: This VB.NET code snippet shows how to export a Telerik Report to a PDF stream and write it directly to the ASP.NET Response object to be displayed in the browser. It makes use of the Telerik Reporting engine's `ReportProcessor` for rendering the report and adjusts the response headers for proper PDF rendering.  The method requires the Assembly Qualified Name of the report as input.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-do-i-display-pdf-directly-in-the-browser-without-exporting-first.md#2025-04-21_snippet_1\n\nLANGUAGE: VB\nCODE:\n```\nSub ExportToPDF(ByVal reportToExport As String)\n  Dim reportProcessor As New Telerik.Reporting.Processing.ReportProcessor()\n  Dim typeReportSource As New Telerik.Reporting.TypeReportSource()\n\n  ' reportToExport is the Assembly Qualified Name of the report\n  typeReportSource.TypeName = reportToExport\n\n  Dim result As Telerik.Reporting.Processing.RenderingResult = reportProcessor.RenderReport(\"PDF\", typeReportSource, Nothing)\n\n  Response.Clear()\n  Response.ContentType = result.MimeType\n  Response.Cache.SetCacheability(HttpCacheability.Private)\n  Response.Expires = -1\n  Response.Buffer = True\n  'Uncomment to handle the file as attachment\n  'Response.AddHeader(\"Content-Disposition\", String.Format(\"{0};FileName=\\\"{1}\\\"\", \"attachment\", fileName))\n  Response.BinaryWrite(result.DocumentBytes)\n  Response.End()\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration Helper for JSON Settings in ASP.NET Core\nDESCRIPTION: Helper class that resolves configuration from a custom JSON file. It creates a ConfigurationBuilder and adds a JSON configuration file named 'reportingAppSettings.json' from the content root path.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nstatic class ConfigurationHelper\n{\n\tpublic static IConfiguration ResolveConfiguration(IWebHostEnvironment environment)\n\t{\n\t\tvar reportingConfigFileName = System.IO.Path.Combine(environment.ContentRootPath, \"reportingAppSettings.json\");\n\t\treturn new ConfigurationBuilder()\n\t\t\t.AddJsonFile(reportingConfigFileName, true)\n\t\t\t.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Unpackaging TRDP Report Definition in Telerik Reporting with VB.NET\nDESCRIPTION: This code snippet demonstrates how to unpackage a predefined .TRDP report definition using the ReportPackager class in VB.NET. It reads a .TRDP file and extracts the report definition, returning a Report object.  This allows the report to be loaded and used within the application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/package-report-definition.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim packageFilePath As String = \"C:\\\\Packages\\\\MyReport.trdp\"\nDim report As Telerik.Reporting.Report = Nothing\n\nDim reportPackager As New Telerik.Reporting.ReportPackager()\nUsing packageStream As New FileStream(packageFilePath, FileMode.Open)\n\treport = reportPackager.Unpackage(packageStream)\nEnd Using\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Method for EntityDataSource\nDESCRIPTION: Example of defining a custom method in AdventureWorksEntities context to retrieve filtered product data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/connecting-to-an-entity-data-model-with-the-entitydatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic IQueryable<Product> GetProductsBySubCategory(string subCategory)\n{\n    return this.Products.Where(p => p.ProductSubcategory.Name == subCategory);\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Function GetProductsBySubCategory(ByVal subCategory As String) As IQueryable(Of Product)\n    Return Me.Products.Where(Function(p) p.ProductSubcategory.Name = subCategory)\nEnd Function\n```\n\n----------------------------------------\n\nTITLE: Implementing a Workaround for React Report Viewer StrictMode Issue\nDESCRIPTION: A code example showing how to avoid errors by not using React's StrictMode on the TelerikReportViewer component while still using it for other components in the application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/react-viewer-does-not-load-dispose-error.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\n\nfunction ExampleApplication() {\n\treturn (\n\t<div>\n\t\t<TelerikReportViewer ... />\n\t\t<React.StrictMode>\n\t\t<div>\n\t\t\t<ComponentOne />\n\t\t\t<ComponentTwo />\n\t\t</div>\n\t\t</React.StrictMode>\n\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Anti-Forgery in ASP.NET Core Services\nDESCRIPTION: This snippet demonstrates how to configure anti-forgery in ASP.NET Core services without automatically applying it to all controllers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/anti-forgery-token-issue-in-asp-net-core-application.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddMvc();\nservices.AddAntiforgery(options => options.HeaderName = \"__RequestVerificationToken\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Designer Service in CSharp\nDESCRIPTION: This code snippet configures the Telerik Report Designer Service in a CSharp application. It sets up custom resolvers and storages, ensuring the application uses database-stored reports effectively. The configuration ties services like IReportSourceResolver and IReportDocumentResolver to their custom implementations while establishing path configurations for report resources. It's contingent on a properly initialized WebApplication Builder and the usage of dependency injection for service resolution in ASP.NET Core.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/implement-database-definition-storage-efcore.md#2025-04-21_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddRazorPages()\n                .AddNewtonsoftJson();\n// Add the custom resolvers and storages\nbuilder.Services.AddDbContext<SqlDefinitionStorageContext>();\nbuilder.Services.AddScoped<IDefinitionStorage, CustomDefinitionStorage>();\nbuilder.Services.AddScoped<IReportSourceResolver, CustomReportSourceResolver>();\nbuilder.Services.AddScoped<IReportDocumentResolver, CustomReportDocumentResolver>();\nvar reportsPath = Path.Combine(builder.Environment.ContentRootPath, \"..\", \"..\", \"..\", \"..\", \"Report Designer\", \"Examples\");\n// Configure dependencies for ReportsController.\nbuilder.Services.TryAddScoped<IReportServiceConfiguration>(sp =>\n    new ReportServiceConfiguration\n    {\n        ReportingEngineConfiguration = sp.GetService<IConfiguration>(),\n        HostAppId = \"SqlDefinitionStorageExample\",\n        Storage = new FileStorage(),\n        ReportSourceResolver = sp.GetRequiredService<IReportSourceResolver>(),\n        ReportDocumentResolver = sp.GetRequiredService<IReportDocumentResolver>()\n    });\n// Configure dependencies for ReportDesignerController.\nbuilder.Services.TryAddScoped<IReportDesignerServiceConfiguration>(sp => new ReportDesignerServiceConfiguration\n{\n    DefinitionStorage =sp.GetRequiredService<IDefinitionStorage>(),\n    ResourceStorage = new ResourceStorage(Path.Combine(reportsPath, \"Resources\")),\n    SharedDataSourceStorage = new FileSharedDataSourceStorage(Path.Combine(reportsPath, \"Shared Data Sources\")),\n    SettingsStorage = new FileSettingsStorage(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"Telerik Reporting\"))\n});\nvar app = builder.Build();\nusing (var serviceScope = app.Services.CreateScope())\n{\n    serviceScope.ServiceProvider\n        .GetService<SqlDefinitionStorageContext>()\n        .Database\n        .EnsureCreated();\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Positioning for jQuery UI Tooltips\nDESCRIPTION: CSS style to set absolute positioning for jQuery UI tooltips, ensuring proper display within the report viewer interface.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\n.ui-tooltip {\n\t\tposition: absolute;\n\t}\n```\n\n----------------------------------------\n\nTITLE: Initializing Blazor Report Viewer with Custom Parameter Editor\nDESCRIPTION: This code snippet demonstrates how to initialize the Blazor Report Viewer with a custom parameter editor. It defines the `ParameterEditors` array with a `ParameterEditor` object, specifying the `Match` and `CreateEditor` properties to point to the JavaScript functions defined in the previous snippet. The snippet also sets the `Report` property in the `ReportSourceOptions` to \"Dashboard.trdp\".\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer @ref=\"reportViewer1\"\n              ViewerId=\"rv1\"\n              ServiceUrl=\"/api/reports\"\n              ReportSource=\"@(new ReportSourceOptions\n                              {\n                                  Report = \\\"Dashboard.trdp\\\",\n                              })\"\n              ParameterEditors=\"@(new ParameterEditor[] { new ParameterEditor() { CreateEditor = \\\"trvParameterEditors.createEditorFunction\\\", Match = \\\"trvParameterEditors.matchFunction\\\" } })\"\n```\n\n----------------------------------------\n\nTITLE: Configuring React Report Viewer Source\nDESCRIPTION: Example of setting up a reportSource for the React Report Viewer component using either a TRDP file path or assembly qualified name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<TelerikReportViewer\n\t\t...\n\t\treportSource={{\n\t\t\treport: 'Product Catalog.trdp',\n\t\t\tparameters: { CultureID: 'en' }\n\t\t}}\n\t\t... />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<TelerikReportViewer\n\t\t...\n\t\treportSource={{\n\t\t\treport: 'Telerik.Reporting.Examples.CSharp.ProductCatalog, CSharp.ReportLibrary',\n\t\t\tparameters: { CultureID: 'en' }\n\t\t}}\n\t\t... />\n```\n\n----------------------------------------\n\nTITLE: Implement Send Mail Message in C#\nDESCRIPTION: This C# code snippet demonstrates how to implement the SendMailMessage method in the ReportsController using MailMessage and SMTP client. It outlines the steps to configure and send emails from the Telerik Reporting REST service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/implement-send-mail-message.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"// Consider passing the credentials as parameters from the client\n// Alternatively configure the SMTP client from the application's configuration file.\n//\n// smtp.Credentials = new NetworkCredential(\"user\", \"password\");\n\nusing (MailMessage message = new MailMessage())\n{\n    message.From = new MailAddress(mailSettings.SenderEmail);\n\n    foreach (string recipient in mailSettings.Recipients)\n    {\n        message.To.Add(recipient);\n    }\n\n    message.Subject = sendEmail.Subject;\n    message.Body = sendEmail.Body;\n    message.IsBodyHtml = true;\n\n    if (sendEmail.Attachments != null)\n    {\n        foreach (string attachment in sendEmail.Attachments)\n        {\n            message.Attachments.Add(new Attachment(attachment));\n        }\n    }\n\n    using (SmtpClient smtp = new SmtpClient(mailSettings.SmtpServer, mailSettings.Port))\n    {\n        smtp.EnableSsl = mailSettings.UseSsl;\n        smtp.Send(message);\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Applying CORS Policy in ASP.NET Core Middleware\nDESCRIPTION: Code to apply the CORS policy to the application's request pipeline. This should be added to the Configure method in Startup.cs to enable the previously defined CORS policy.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\napp.UseCors(\"ReportingRestPolicy\");\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS Policy in Configure Method\nDESCRIPTION: C# code to activate the previously defined CORS policy in the ASP.NET Core application pipeline.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-5.md#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\napp.UseCors(\"ReportingRestPolicy\");\n```\n\n----------------------------------------\n\nTITLE: Report Server Configuration Block\nDESCRIPTION: JavaScript configuration block for connecting HTML5 Report Viewer to Report Server with authentication settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/how-to-use-html5-report-viewer-with-report-server.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nreportServer: {\n\t\turl: \"https://yourReportServerUrl:port\",\n\t\tusername: null,\n\t\tpassword: null\n\t},\n```\n\n----------------------------------------\n\nTITLE: Modifying Report Width with Telerik Reporting in C#\nDESCRIPTION: This C# snippet demonstrates how to adjust a report's width, including its paper size and item positioning, to fit different printer paper widths. It utilizes a width factor to proportionally expand report elements within a Telerik Reporting object. Required dependencies include Telerik Reporting library, and the report constructor must invoke the SetReportWidth method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/programmatically-modify-report-physical-width-proportionally.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic partial class Report1 : Telerik.Reporting.Report\n{\n    public Report1()\n    {\n        //\n        // Required for telerik Reporting designer support\n        //\n        InitializeComponent();\n\n        double widthFactor = 1.5;\n        this.SetReportWidth(widthFactor);\n    }\n\n    private void SetReportWidth(double widthFactor)\n    {\n        // This will effectively resize each report section as well\n        this.Width *= widthFactor;\n\t\n        this.PageSettings.PaperKind = System.Drawing.Printing.PaperKind.Custom;\n        SizeU oldPaperSize = this.PageSettings.PaperSize;\n        SizeU newPaperSize = new SizeU(oldPaperSize.Width * widthFactor, oldPaperSize.Height);\n        this.PageSettings.PaperSize = newPaperSize;\n\n        this.UpdateItemWidthAndLocation(this, widthFactor);\n    }\n\n    private void UpdateItemWidthAndLocation(ReportItemBase reportItem, double widthFactor)\n    {\n        if (reportItem is ReportItem)\n        {\n            ReportItem item = (ReportItem)reportItem;\n            item.Width *= widthFactor;\n            Unit oldItemX = item.Location.X;\n            double xValue = oldItemX.Value * widthFactor;\n            Unit newItemX = new Unit(xValue, oldItemX.Type);\n                \n            item.Location = new PointU(newItemX, item.Location.Y);\n        }\n\n        foreach (ReportItemBase item in reportItem.Items)\n        {\n            this.UpdateItemWidthAndLocation(item, widthFactor);\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic HTML5 Report Viewer Configuration with REST Service\nDESCRIPTION: Initial JavaScript configuration for HTML5 Report Viewer using REST service endpoint and report source configuration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/how-to-use-html5-report-viewer-with-report-server.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n\t\t.telerik_ReportViewer({\n\t\t\tserviceUrl: \"/api/reports/\",\n\t\t\ttemplateUrl: '/ReportViewer/templates/telerikReportViewerTemplate-{{buildversion}}.html',\n\t\t\treportSource: {\n\t\t\t\treport: \"Telerik.Reporting.Examples.CSharp.ProductCatalog, CSharp.ReportLibrary\",\n\t\t\t\tparameters: {\n\t\t\t\t\tCultureID: \"en\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n```\n\n----------------------------------------\n\nTITLE: Handling navigateToReport Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `navigateToReport` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `navigateToReport` event is emitted when the viewer navigates to a new report through the Drillthrough/Navigate To Report action.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(navigateToReport)=\"navigateToReport($event)\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Handling Interactive Action Executing in WinForms Report Viewer (C#)\nDESCRIPTION: This snippet retrieves custom action parameters within the InteractiveActionExecuting event handler of a WinForms Report Viewer. Requires Telerik Reporting and Report Viewer libraries. The main function of this snippet is to process and evaluate custom action parameters during the event execution.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/custom-action.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\ReportViewer\\WinForms\\Form1.cs region=WinFormsCustomInteractiveActionExecutingEventSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly References in Report Designer XML\nDESCRIPTION: XML configuration for the Report Designer to reference the custom UserFunctions library and the HtmlRenderer.WinForms library. This needs to be added to the Telerik.ReportDesigner.exe.config file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-render-any-html-tags-in-reports.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<AssemblyReferences>\n\t\t<add name=\"UserFunctions\" />\n\t\t<add name=\"HtmlRenderer.WinForms\" />\n\t</AssemblyReferences>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Setting Report Source in HTML5 Report Viewer with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the reportSource(rs) method to set the report source for the HTML5 Report Viewer. It sets the report file and a culture parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/reportsource(rs).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.reportSource({\n\treport: \"product catalog.trdx\",\n\tparameters: { \"CultureID\": \"fr\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Report Rendering Method\nDESCRIPTION: Implementation of an async method that uses the AsyncWrappers class to render a report and save it to a file. The method demonstrates proper async/await usage and file handling.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-render-reports-asynchronously-by-using-the-async-and-await-keywords.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<string> RenderReportAsync()\n{\n    var asyncWrappers = new AsyncWrappers();\n  \n    Console.WriteLine(\"Rendering started on: {0}\", Thread.CurrentThread.ManagedThreadId);\n  \n    var result = await asyncWrappers.RenderReportAsync( typeof(Telerik.Reporting.Report) );// pass the type of your report here\n  \n    string fileName = result.DocumentName + \".\" + result.Extension;\n    string path = System.IO.Path.GetTempPath();\n    string filePath = System.IO.Path.Combine(path, fileName);\n  \n    using (System.IO.FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Create))\n    {\n        fs.Write(result.DocumentBytes, 0, result.DocumentBytes.Length);\n    }\n  \n    Console.WriteLine(\"Rendering finished on: {0}\\n\", Thread.CurrentThread.ManagedThreadId);\n  \n    // You can return void but that is not recommended\n    return string.Format(\"Successfully rendered! File saved in {0}\\n\", filePath);\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Function RenderReportAsync() As Task(Of String)\n    Dim asyncWrappers = New AsyncWrappers()\n \n    Console.WriteLine(\"Rendering started on: {0}\", Thread.CurrentThread.ManagedThreadId)\n \n    Dim result = Await asyncWrappers.RenderReportAsync(GetType(Telerik.Reporting.Report))\n    ' pass the type of your report here\n    Dim fileName As String = Convert.ToString(result.DocumentName) & \".\" & Convert.ToString(result.Extension)\n    Dim path As String = System.IO.Path.GetTempPath()\n    Dim filePath As String = System.IO.Path.Combine(path, fileName)\n \n    Using fs As New System.IO.FileStream(filePath, System.IO.FileMode.Create)\n        fs.Write(result.DocumentBytes, 0, result.DocumentBytes.Length)\n    End Using\n \n    Console.WriteLine(\"Rendering finished on: {0}\" & vbLf, Thread.CurrentThread.ManagedThreadId)\n \n    ' You can return void but that is not recommended\n    Return String.Format(\"Successfully rendered! File saved in {0}\" & vbLf, filePath)\nEnd Function\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 ReportViewer with jQuery\nDESCRIPTION: Creates a ReportViewer instance by configuring the service URL, template URL and report source with parameters\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\").telerik_ReportViewer({\n\tserviceUrl: \"api/reports/\",\n\ttemplateUrl: 'src/templates/telerikReportViewerTemplate-{{buildversion}}.html',\n\treportSource: { report: \"Product Catalog.trdp\", parameters: {CultureID: \"en\"} }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportsController in C#\nDESCRIPTION: This C# code demonstrates the basic implementation of a ReportsController, inheriting from ReportsControllerBase and injecting the IReportServiceConfiguration.  It includes a placeholder for implementing the SendMailMessage method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\n````CSharp\nnamespace TopLevelStatements.Controllers\n\t{\n\t\tusing System.Net;\n\t\tusing System.Net.Mail;\n\t\tusing Microsoft.AspNetCore.Mvc;\n\t\tusing Telerik.Reporting.Services;\n\t\tusing Telerik.Reporting.Services.AspNetCore;\n\n\t\t[Route(\"api/[controller]\")]\n\t\t[ApiController]\n\t\tpublic class ReportsController : ReportsControllerBase\n\t\t{\n\t\t\tpublic ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n\t\t\t: base(reportServiceConfiguration)\n\t\t\t{\n\t\t\t}\n\n\t\t\tprotected override HttpStatusCode SendMailMessage(MailMessage mailMessage)\n\t\t\t{\n\t\t\t\tthrow new System.NotImplementedException(\"This method should be implemented in order to send mail messages\");\n\n\t\t\t\t// using (var smtpClient = new SmtpClient(\"smtp01.mycompany.com\", 25))\n\t\t\t\t// {\n\t\t\t\t//     smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;\n\t\t\t\t//     smtpClient.EnableSsl = false;\n\t\t\t\t//     smtpClient.Send(mailMessage);\n\t\t\t\t// }\n\t\t\t\t// return HttpStatusCode.OK;\n\t\t\t}\n\t\t}\n\t}\n````\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAccessDataSource with Live Instance in C#\nDESCRIPTION: This C# snippet shows how to configure the OpenAccessDataSource using a live instance of the OpenAccessContext. It emphasizes the responsibility of destroying the instance when done with the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/connecting-to-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nOpenAccessDataSource oaDataSource = new OpenAccessDataSource();\nAdventureWorksEntities context = new AdventureWorksEntities();\noaDataSource.ObjectContext = context;\noaDataSource.ObjectContextMember = \"Products\";\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML5 Report Viewer Source\nDESCRIPTION: Example of setting up a reportSource for the HTML5 Report Viewer using either a TRDP file path or assembly qualified name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\nreportSource: {\n\treport: \"Product Catalog.trdp\",\n\tparameters: { CultureID: \"en\" }\n}\n```\n\nLANGUAGE: HTML\nCODE:\n```\nreportSource: {\n\treport: \"Telerik.Reporting.Examples.CSharp.ProductCatalog, CSharp.ReportLibrary\",\n\tparameters: { CultureID: \"en\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Total Count of Books\nDESCRIPTION: This code snippet displays the total count of books in the query result using an embedded expression. It concatenates a string with the totalItems field and the search term parameter value to create a dynamic message within the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-connect-to-google-books-apis.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n\"Found {Fields.totalItems} books related to \\\"{Parameters.q.Value}\\\".\"\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource to Type Definition C#\nDESCRIPTION: This C# code snippet shows how to set the ReportSource of the Report Viewer to a type definition. It initializes a ReportSourceOptions object with the assembly qualified name of the report's type and an optional dictionary for report parameters. The assembly qualified name includes the type and assembly name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/api-reference/options.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions(\"Telerik.Reporting.Examples.CSharp.ReportCatalog, CSharp.ReportLibrary\", new Dictionary&lt;string, object&gt;\n{\n\t// Add parameters if applicable\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigurationHelper in C# for ASP.NET Core\nDESCRIPTION: Defines a static ConfigurationHelper class with a ResolveConfiguration method to load the application configuration from appsettings.json.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-reporting-net-core-mvc.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\n\nnamespace WebApplication1\n{\n\tstatic class ConfigurationHelper\n\t{\n\t\tpublic static IConfiguration ResolveConfiguration(IWebHostEnvironment environment)\n\t\t{\n\t\t\tvar reportingConfigFileName = System.IO.Path.Combine(environment.ContentRootPath, \"appsettings.json\");\n\t\t\treturn new ConfigurationBuilder()\n\t\t\t\t.AddJsonFile(reportingConfigFileName, true)\n\t\t\t\t.Build();\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling printEnd Event in HTML5 Report Viewer Initialization (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize the Telerik HTML5 Report Viewer and attach a handler for the printEnd event. The event handler logs messages to the console after the report is printed, including the URL of the printed report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/printend(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\tprintEnd: function(e, args) {\n\t\t\tconsole.log(\"This event handler will be called after printing the report.\");\n\t\t\tconsole.log(\"The printed report can be found at \" + args.url);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportViewer.cshtml for HTML5 MVC Report Viewer\nDESCRIPTION: This snippet shows how to set up the ReportViewer.cshtml file to include only the body part of the report viewer. It specifies the layout, initializes the TelerikReporting().ReportViewer() control, and sets various properties such as service URL, report source, and view mode.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-html5-mvc-report-viewer-inside-master-page-layout.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\n@using DemoWebMVCApplication\n@using Telerik.Reporting\n@using Telerik.ReportViewer.Mvc\n@{  \n Layout = \"~/Views/Shared/_Layout.cshtml\";\n}\n\n@(Html.TelerikReporting().ReportViewer()\n        .Id(\"reportViewer1\")\n        .ServiceUrl(Url.Content(\"~/api/reports\"))\n        .ReportSource(new UriReportSource() { Uri = \"SampleReport.trdp\" })\n        .ViewMode(ViewMode.Interactive)\n        .ScaleMode(ScaleMode.Specific)\n        .Scale(1.0)\n        .PersistSession(false)\n        .PrintMode(PrintMode.AutoSelect)\n        .EnableAccessibility(false)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DateTimePicker Parameter Editor in TypeScript\nDESCRIPTION: TypeScript implementation for the Angular component that provides the custom parameter editor functionality. It includes the match function to identify DateTime parameters and the createEditor function that instantiates and configures the KendoDateTimePicker widget.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-kendodatetimepicker-for-parameter-editors-in-the-angular-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class AppComponent implements OnInit {\n\t\t\n\t\t@ViewChild('viewer1', { static: false }) viewer: TelerikReportViewerComponent;\n\t\tpublic visible: boolean = false;\n\n\t\tngOnInit(): void {\n\t\t\tthis.loadScript(\"http://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/kendo.all.min.js\")\n\t\t\tthis.visible = true;    \n\t\t}\n\n\t\tmatch(parameter) {\n\t\t\treturn parameter.type === \"System.DateTime\";\n\t\t}\n\n\t\tcreateEditor (placeholder, options){\n\t\t\tlet input = document.createElement('input');\n\t\t\tinput.classList.add(\"trv-parameter-value\");\n\t\t\t//@ts-ignore\n\t\t\t$(placeholder).parent().append(input);\n\t\t\tlet dateTimePicker;\n\t\t\tlet valueChangedCallback = options.parameterChanged;\n\t\t\tlet parameter;\n\n\t\t\tfunction onChange(e) {\n\t\t\t\t//@ts-ignore\n\t\t\t\tvar date = $(input).data(\"kendoDateTimePickerPicker\");\n\t\t\t\tvar val = date.value();\n\t\t\t\tvalueChangedCallback(parameter, val);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbeginEdit: function (param) {\n\t\t\t\t\tparameter = param;\n\t\t\t\t\t\n\t\t\t\t\t//@ts-ignore\n\t\t\t\t\t$(input).kendoDateTimePicker({\n\t\t\t\t\t\tvalue: param.value,\n\t\t\t\t\t\tformat: \"dd/MM/yyyy\",\n\t\t\t\t\t\tchange: onChange\n\t\t\t\t\t});\n\n\t\t\t\t\t//@ts-ignore\n\t\t\t\t\tdateTimePicker = $(input).data(\"kendoDateTimePicker\");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Endpoints in Startup.cs\nDESCRIPTION: Add the necessary configuration for API endpoints in the Configure method of Startup.cs by invoking the endpoint mapping for controllers. This ensures the application can handle API requests.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-dotnet.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\napp.UseEndpoints(endpoints =>\n\t{\n\t\tendpoints.MapControllers();\n\t\t//...\n\t});\n```\n\n----------------------------------------\n\nTITLE: Initializing Telerik Web Report Designer in CSHTML\nDESCRIPTION: This snippet sets up the HTML structure and initializes the Telerik Web Report Designer widget. It loads necessary libraries including jQuery and Kendo UI, and defines the configuration for the Web Report Designer including the report to load.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-framework-application.md#2025-04-21_snippet_2\n\nLANGUAGE: cshtml\nCODE:\n```\n@using Telerik.Reporting\n\t@{\n\t\tLayout = null;\n\t}\n\t<!DOCTYPE html>\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<title>Telerik Web Report Designer Demo</title>\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500&display=swap\" rel=\"stylesheet\">\n\t</head>\n\t<body>\n\t\t<div id=\"webReportDesigner\">\n\t\t\tloading...\n\t\t</div>\n\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t\t<script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}//js/kendo.all.min.js\"></script>\n\t\t<script src=\"/api/reportdesigner/resources/js/telerikReportViewer\"></script>\n\t\t<script src=\"/api/reportdesigner/designerresources/js/webReportDesigner\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t\t$(document).ready(function () {\n\t\t\t\t$(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\t\t\t\tpersistSession: false,\n\t\t\t\t\ttoolboxArea: {\n\t\t\t\t\t\tlayout: \"list\"\n\t\t\t\t\t},\n\t\t\t\t\tserviceUrl: \"/api/reportdesigner/\",\n\t\t\t\t\treport: \"SampleReport.trdp\"\n\t\t\t\t}).data(\"telerik_WebDesigner\");\n\t\t\t});\n\t\t</script>\n\t</body>\n\t</html>\n```\n\n----------------------------------------\n\nTITLE: Web Report Designer Vue Component\nDESCRIPTION: Vue component implementation for the Web Report Designer including template, script logic, and styling\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-the-web-designer-in-vue.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <div id=\"wrd1\">...</div>\n</template>\n\n<script>\nexport default {\n  name: \"WebReportDesigner\",\n  mounted() {\n    this.$nextTick(function () {\n      $(\"#wrd1\")\n        .telerik_WebReportDesigner({\n          toolboxArea: {\n            layout: \"list\", //Change to \"grid\" to display the contents of the Components area in a flow grid layout.\n          },\n          serviceUrl: \"https://demos.telerik.com/reporting/api/reportdesigner/\",\n          report: \"Barcodes Report.trdx\",\n        })\n        .data(\"telerik_WebDesigner\");\n    });\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#wrd1 {\n  position: relative;\n  height: 880px;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files Serving in C#\nDESCRIPTION: This code snippet demonstrates how to ensure that the application can serve static files, which is a prerequisite for the Blazor Report Viewer to function correctly. It adds the `UseStaticFiles()` method to the application's configuration pipeline within the `Configure` method of `Startup.cs` or `Program.cs` for .NET 6+ projects.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/how-to-use-blazor-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\n````CSharp\napp.UseStaticFiles();\n````\n```\n\n----------------------------------------\n\nTITLE: Implementing Reports Controller for Telerik Reporting REST Service\nDESCRIPTION: Creates a ReportsController class that inherits from ReportsControllerBase and configures the ReportServiceConfiguration with file storage and resolver settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer-in-asp.net-core.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace WebApplication1.Controllers\n{\n\tusing System.IO;\n\tusing Microsoft.AspNetCore.Hosting;\n\tusing Telerik.Reporting.Cache.File;\n\tusing Telerik.Reporting.Services;\n\tusing Telerik.Reporting.Services.AspNetCore;\n\tpublic class ReportsController : ReportsControllerBase\n\t{\n\t\tpublic ReportsController(IHostingEnvironment environment)\n\t\t{\n\t\t\tvar reportsPath =\n\t\t\t\tPath.Combine(environment.WebRootPath, \"Reports\");\n\t\t\tthis.ReportServiceConfiguration =\n\t\t\t\tnew ReportServiceConfiguration\n\t\t\t\t{\n\t\t\t\t\tHostAppId = \"Html5DemoApp\",\n\t\t\t\t\tStorage = new FileStorage(),\n\t\t\t\t\tReportResolver = new ReportFileResolver(reportsPath),\n\t\t\t\t\t// ReportSharingTimeout = 0,\n\t\t\t\t\t// ClientSessionTimeout = 15,\n\t\t\t\t};\n\t\t }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ASP.NET Report Viewer Programmatically - Pre Q2 2012\nDESCRIPTION: Code examples demonstrating how to programmatically set reports in ASP.NET Report Viewer before Q2 2012 in both C# and VB.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nReport1 report1 = new Report1();\n// perform additional operations on the report object if needed\nReportViewer1.Report = report1;\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim report1 As New Report1()\nReportViewer1.Report = report1\n```\n\n----------------------------------------\n\nTITLE: Handling interactiveActionEnter Event in HTML5 Report Viewer\nDESCRIPTION: This code snippet demonstrates how to handle the interactiveActionEnter event in the Telerik HTML5 Report Viewer. It sets up the report viewer and defines a custom handler for the event that changes the font weight of the element when the mouse enters an interactive action area.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/interactiveactionenter(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.ProductSales, CSharp.ReportLibrary\"\n\t\t},\n\t\tinteractiveActionEnter: function(e, args) {\n\t\t\t$(args.element).css('font-weight', 'bolder');\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Loading jQuery and Local Report Viewer Script in HTML\nDESCRIPTION: Includes jQuery library and local Report Viewer JavaScript file in the index.html file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-load-telerik-report-viewer-resources-locally-in-angular-application-and-use-them-to-customize-the-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n<script src=\"assets/telerikReportViewer-{{buildversion}}.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Viewer Initialization in Web Report Designer\nDESCRIPTION: The snippet captures the 'viewerInitializing' event for further modifying viewer options during initial start-up. It allows attachment of additional event handlers like 'renderingBegin' and 'renderingEnd', giving greater control over the reporting process.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n\t$(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\tpersistSession: false,\n\t\ttoolboxArea: {\n\t\t\tlayout: \"list\"\n\t\t},\n\t\tserviceUrl: \"api/reportdesigner/\",\n\t\treport: \"Dashboard.trdp\",\n\t\t// design/preview\n\t\tstartMode: \"design\",\n\t\tviewerInitializing: onViewerInitializing\n\t}).data(\"telerik_WebReportDesigner\");\n});\n\nfunction onViewerInitializing(e, args) {\n\t// e: jQuery event;\n\t// args: IViewerPreInitEventArgs ->\n\t//      reportViewerOptions: report viewer's options. All viewer's options available.\n\n\targs.reportViewerOptions.parameters = {\n\t\teditors: {\n\t\t\tsingleSelect: telerikReportViewer.ParameterEditorTypes.COMBO_BOX,\n\t\t\tmultiSelect: telerikReportViewer.ParameterEditorTypes.COMBO_BOX\n\t\t}\n\t};\n\targs.reportViewerOptions.renderingBegin = onViewerRenderingBegin;\n\targs.reportViewerOptions.renderingEnd = onViewerRenderingEnd;\n}\n\nfunction onViewerRenderingBegin(e) {\n\tconsole.log('TRV rendering begin.');\n}\n\nfunction onViewerRenderingEnd(e) {\n\tconsole.log('TRV rendering end');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Reporting Services Configuration\nDESCRIPTION: Set up the reporting services within the ConfigureServices method by defining the necessary configurations for reporting engine and designer service. This involves initializing relevant services with correct storage and configuration settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-dotnet.md#2025-04-21_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n\t{\n\t\tservices.AddControllers().AddNewtonsoftJson();\n\t\tservices.TryAddSingleton<IReportServiceConfiguration>(sp =>\n\t\t\tnew ReportServiceConfiguration\n\t\t\t{\n\t\t\t\tReportingEngineConfiguration = ResolveSpecificReportingConfiguration(sp.GetService<IWebHostEnvironment>()),\n\t\t\t\tHostAppId = \"ReportingCoreApp\",\n\t\t\t\tStorage = new FileStorage(),\n\t\t\t\tReportSourceResolver = new TypeReportSourceResolver().AddFallbackResolver\n\t\t\t\t\t\t\t\t   (new UriReportSourceResolver(Path.Combine(sp.GetService<IWebHostEnvironment>().WebRootPath,  \"Reports\")))\n\t\t\t});\n\t\tservices.TryAddSingleton<IReportDesignerServiceConfiguration>(sp => new ReportDesignerServiceConfiguration\n\t\t{\n\t\t\tDefinitionStorage = new FileDefinitionStorage(Path.Combine(sp.GetService<IWebHostEnvironment>().WebRootPath, \"Reports\"), new[] { \"Resources\", \"Shared Data Sources\" }),\n\t\t\tResourceStorage = new ResourceStorage(Path.Combine(sp.GetService<IWebHostEnvironment>().WebRootPath, \"Reports\", \"Resources\")),\n\t\t\tSharedDataSourceStorage = new FileSharedDataSourceStorage(Path.Combine(sp.GetService<IWebHostEnvironment>().WebRootPath, \"Reports\", \"Shared Data Sources\")),\n\t\t\t\tSettingsStorage = new FileSettingsStorage(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"Telerik Reporting\"))\n\t\t});\n\t}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportsController for Telerik Reporting REST Service in ASP.NET Core\nDESCRIPTION: A basic implementation of a Reports controller that inherits from ReportsControllerBase to create a Telerik Reporting REST service. The controller is configured with a route to 'api/reports' and requires an IReportServiceConfiguration dependency injected through the constructor.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-core-2.1-and-2.2.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nnamespace AspNetCoreDemo.Controllers\n\t{\n\t\tusing Microsoft.AspNetCore.Mvc;\n\t\tusing Telerik.Reporting.Services;\n\t\tusing Telerik.Reporting.Services.AspNetCore;\n\t\t[Route(\"api/reports\")]\n\t\tpublic class ReportsController : ReportsControllerBase\n\t\t{\n\t\t\tpublic ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n\t\t\t\t: base(reportServiceConfiguration)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Implementing Configuration Service\nDESCRIPTION: C# class implementation for loading configuration from appsettings.json file in ASP.NET Core application. Includes environment and configuration setup.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/migrate-an-existing-asp-net-core-project-from-full-dotnet-framework-4-6-to-dotnet-core-2-2.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ConfigurationService\n{\n    public IConfiguration Configuration { get; private set; }\n\n    public IHostingEnvironment Environment { get; private set; }\n    public ConfigurationService(IHostingEnvironment environment)\n    {\n        this.Environment = environment;\n\n        var configFileName = System.IO.Path.Combine(environment.ContentRootPath,\"appsettings.json\");\n        var config = new ConfigurationBuilder()\n                        .AddJsonFile(configFileName, true)\n                        .Build();\n\n        this.Configuration = config;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ReportSource Configuration Examples\nDESCRIPTION: Code examples showing how to configure reportSource for physical files and type definitions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/options.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nreportSource: ReportSourceOptions = { report: \"Dashboard.trdx\", parameters: { ReportYear: 2004 } };\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nreportSource: ReportSourceOptions = { report: \"Telerik.Reporting.Examples.CSharp.ReportCatalog, CSharp.ReportLibrary\", parameters: { ReportYear: 2004 } };\n```\n\n----------------------------------------\n\nTITLE: MDX Query for Product Sales by Category\nDESCRIPTION: MDX query that retrieves product sales data grouped by category and subcategory from the Adventure Works cube.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/selecting-data-from-an-olap-cube-with-the-cubedatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect non empty { [Measures].[Sales Amount] } on columns,\n\tnon empty { [Product].[Category].[Category] *\n\t[Product].[Subcategory].[Subcategory] } on rows\nfrom [Adventure Works]\n```\n\n----------------------------------------\n\nTITLE: Configuring IIS for Synchronous Operations in ASP.NET Core 3.0\nDESCRIPTION: Code to enable synchronous I/O operations in IIS by setting AllowSynchronousIO to true in the Startup.cs file's ConfigureServices method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/images-not-displayed-in-dotnet-core-3.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nthis.services.Configure<IISServerOptions>(options =>\n{\n        options.AllowSynchronousIO = true;\n });\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource to Physical File C#\nDESCRIPTION: This C# code snippet demonstrates how to set the ReportSource of the Report Viewer to a physical report file (TRDP/TRDX/TRBP). It initializes a ReportSourceOptions object with the relative path to the report file and an optional dictionary for report parameters. The ReportSourceOptions object is then assigned to the ReportSource property.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/api-reference/options.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions(\"Report Catalog.trdp\", new Dictionary&lt;string, object&gt;\n{\n\t// Add parameters if applicable\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Events in React Report Viewer HTML\nDESCRIPTION: Shows how to attach event handlers for 'ready' and 'viewerToolTipOpening' events directly in the component's JSX\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/event-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<TelerikReportViewer\n\t...\n\tready='myReadyHandler'\n\tviewerToolTipOpening='myViewerToolTipOpeningHandler' />\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting Service in ASP.NET Core Startup\nDESCRIPTION: Code for adding the Telerik Reporting service configuration to the ASP.NET Core dependency injection container in Startup.cs. It sets up the report engine configuration, storage, and report source resolver.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-core-2.1-and-2.2.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Configure dependencies for ReportsController.\nservices.TryAddSingleton<IReportServiceConfiguration>(sp =>\n\tnew ReportServiceConfiguration\n\t{\n\t\tReportingEngineConfiguration = ConfigurationHelper.ResolveConfiguration(sp.GetService<IHostingEnvironment>()),\n\t\tHostAppId = \"ReportingCore2App\",\n\t\tStorage = new FileStorage(),\n\t\tReportSourceResolver = new UriReportSourceResolver(\n\t\t\tSystem.IO.Path.Combine(sp.GetService<IHostingEnvironment>().ContentRootPath, \"Reports\"))\n\t});\n```\n\n----------------------------------------\n\nTITLE: Configuring EntityDataSource with Method Binding\nDESCRIPTION: Shows how to bind EntityDataSource to a custom method and pass parameters for data filtering.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/connecting-to-an-entity-data-model-with-the-entitydatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nentityDataSource.Context = typeof(AdventureWorksEntities);\nentityDataSource.ContextMember = \"GetProductsBySubCategory\";\nentityDataSource.Parameters.Add(\"subCategory\", \"Mountain Bikes\");\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nentityDataSource.Context = GetType(AdventureWorksEntities)\nentityDataSource.ContextMember = \"GetProductsBySubCategory\"\nentityDataSource.Parameters.Add(\"subCategory\", \"Mountain Bikes\")\n```\n\n----------------------------------------\n\nTITLE: Printing Report in WinForms/WPF Report Viewer with C#\nDESCRIPTION: This C# snippet showcases how to print a report using the `ReportProcessor` class in Telerik Reporting. It creates a `ReportProcessor` instance and calls the `PrintReport` method, passing a `TypeReportSource` that specifies the report type and `PrinterSettings` for configuring the printer. It requires the `Telerik.Reporting` and `System.Drawing.Printing` namespaces.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-a-report-programmatically.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nReportProcessor reportProcessor = new ReportProcessor();\nreportProcessor.PrintReport(new TypeReportSource() { TypeName = typeof(BarcodesReport).AssemblyQualifiedName }, new PrinterSettings());\n```\n\n----------------------------------------\n\nTITLE: Defining ParameterValue JSON Object\nDESCRIPTION: Represents a JSON entity for a single parameter value used in Telerik Reporting REST services. The object consists of fields for the parameter name and its corresponding value, which can be of various types like String, Number, etc. This structure is necessary for passing parameters to the reporting engine remotely.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/parametervalue.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"name\": \"Sofia\",\n\t\"value\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CORS Policy for REST Service in ASP.NET Core\nDESCRIPTION: Code to add a CORS (Cross-Origin Resource Sharing) policy for the Reporting REST Service. This should be added to the ConfigureServices method in Startup.cs to allow cross-domain requests.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddCors(corsOption => corsOption.AddPolicy(\n\t\"ReportingRestPolicy\",\n\tcorsBuilder =>\n\t{\n\t\tcorsBuilder.AllowAnyOrigin()\n\t\t\t.AllowAnyMethod()\n\t\t\t.AllowAnyHeader();\n\t}\n));\n```\n\n----------------------------------------\n\nTITLE: Custom Newtonsoft JSON Model Binder\nDESCRIPTION: A custom model binder that uses Newtonsoft.Json to deserialize request bodies, providing an alternative to the default System.Text.Json model binding\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-two-json-serializers-in-same-asp-net-core-project.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class NewtonsoftJsonModelBinder : IModelBinder \n{\n\tpublic async Task BindModelAsync(ModelBindingContext bindingContext) \n\t{\n\t\tif (bindingContext == null) throw new ArgumentNullException(nameof(bindingContext));\n\n\t\tusing var reader = new StreamReader(bindingContext.HttpContext.Request.Body);\n\n\t\tstring body = await reader.ReadToEndAsync().ConfigureAwait(continueOnCapturedContext: false);\n\t\tobject? value = Newtonsoft.Json.JsonConvert.DeserializeObject(body, bindingContext.ModelType);\n\t\tbindingContext.Result = ModelBindingResult.Success(value);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Parameter Editors in HTML5 MVC Report Viewer with C#\nDESCRIPTION: This C# snippet configures the ReportViewer to use custom parameter editors defined in JavaScript. Key aspects include setting the parameter match function and the editor creation function. The snippet requires an HTML helper and assumes familiarity with MVC conventions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-change-report-parameter-date-format-in-html5-mvc-report-viewer.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\n<body>\n\t@(Html.TelerikReporting().ReportViewer()\n\t\t.Id(\"reportViewer1\")\n\t\t.ServiceUrl(Url.Content(\"~/api/reports\"))\n\t\t.ReportSource(new TypeReportSource() { TypeName = \"ReportLibrary1.Report1, ReportLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" })\n\t\t.ViewMode(ViewMode.Interactive)\n\t\t.ScaleMode(ScaleMode.Specific)\n\t\t.Scale(1.0)\n\t\t.PersistSession(false)\n\t\t.PrintMode(PrintMode.AutoSelect)\n\t\t.ParameterEditors(\n\t\t\t\t\teditors => editors\n\t\t\t\t\t\t.CustomEditors(new CustomParameterEditor\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMatchFunction = \"customMatch\",\n\t\t\t\t\t\t\tCreateEditorFunction = \"createCustomEditor\"\n\t\t\t\t\t\t})\n\t\t)\n\t)\n</body>\n```\n\n----------------------------------------\n\nTITLE: Adding Newtonsoft JSON Support for Telerik Reporting in ASP.NET Core\nDESCRIPTION: Adds Newtonsoft JSON serialization support to the ASP.NET Core services collection, which is required for the Telerik Reporting REST service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-5.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddNewtonsoftJson();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom IReportSourceResolver in C#\nDESCRIPTION: A code snippet demonstrating the implementation of a custom ReportSource Resolver that retrieves XML report definitions from a SQL Server database\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-report-source-resolver/how-to-implement-a-custom-report-source-resolver.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Placeholder for CustomReportResolver_Implementation\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Reference to React Index HTML\nDESCRIPTION: Add a reference to Kendo UI library in the head section of the public/index.html file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-web-report-designer-in-react-js.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/kendo.all.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Designer Controller in C# ASP.NET Core\nDESCRIPTION: This snippet demonstrates the implementation of a Report Designer controller that inherits from ReportDesignerControllerBase. It is responsible for handling report operations in the Telerik Reporting framework, requiring specific service configurations to function correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-core-2.1-application.md#2025-04-21_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nnamespace CSharp.AspNetCoreDemo.Controllers\n{\n\tusing Microsoft.AspNetCore.Mvc;\n\tusing Telerik.Reporting.Services;\n\tusing Telerik.WebReportDesigner.Services;\n\tusing Telerik.WebReportDesigner.Services.Controllers;\n\t[Route(\"api/reportdesigner\")]\n\tpublic class ReportDesignerController : ReportDesignerControllerBase\n\t{\n\t\tpublic ReportDesignerController(IReportDesignerServiceConfiguration reportDesignerServiceConfiguration, IReportServiceConfiguration reportServiceConfiguration)\n\t\t\t: base(reportDesignerServiceConfiguration, reportServiceConfiguration)\n\t\t{\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Localization After Component Initialization in Angular\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `AfterViewInit` lifecycle hook to extend the `TelerikReportViewerComponent` with localized messages after the Angular component is initialized. It selects the appropriate language resources based on the browser's language setting, and updates the viewer's `stringResources`. Requires Angular and Telerik Angular Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/customizing/localization.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { TelerikReportViewerComponent } from '@progress/telerik-angular-report-viewer';\nimport { StringResources } from './stringResources';\n...\nexport class AppComponent implements AfterViewInit {\n\t@ViewChild('viewer1') viewer: TelerikReportViewerComponent;\n\tngAfterViewInit(): void {\n\t\tconst language = navigator.language;\n\t\tlet resources = StringResources.english; // default\n\t\tif(language === 'ja-JP'){\n\t\t\tresources = StringResources.japanese;\n\t\t}\n\t\tthis.viewer.viewerObject.stringResources = Object.assign(this.viewer.viewerObject.stringResources, resources);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Parameter Range Restrictions in Telerik ReportViewer\nDESCRIPTION: JavaScript implementation for creating custom parameter editors that restrict date ranges between two DateTime parameters. Uses Kendo DatePicker and includes timezone adjustment functions. The solution allows setting a maximum date range of 3 months from the first selected date.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-report-parameter-date-range.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n                .telerik_ReportViewer({\n                    serviceUrl: \"api/reports/\",                  \n                    reportSource: {\n                        report: \"ReportDateRange.trdp\",\n                    },\n                    parameterEditors: [\n\t\t\t\t\t\t{\n                        match: customMatch,\n                        createEditor: createCustomEditor\n                       }\n                    ],\n\t\t\t\t\t//set the initial max date when the report viewer loads\n                    renderingEnd: function (e, args) {\n                        var firstDate = getDatePicker(\"First date\").value();\n                        var dateCopy = new Date(firstDate);\n                        var newDate = new Date(dateCopy.setMonth(dateCopy.getMonth() + 3));\n\n                        getDatePicker(\"Second date\").max(newDate);\n                    }\n                });\n        }).data(\"telerik_ReportViewer\");\n\n        function customMatch(parameter) {\n\t\t\t// Setting the name exactly to DateRangeParam1(or another name that you prefer) is important in order to do this check\n            return parameter.type === \"System.DateTime\" && parameter.name === \"DateRangeParam1\" ;\n        }\n\n        function createCustomEditor(placeholder, options) {\n\n            $(placeholder).html('<input type=\"datetime\"/>');\n            var datePicker = $(placeholder),\n                parameter,\n                valueChangedCallback = options.parameterChanged;\n\n            function onChange(e) {\n                var datePickerEndDate = getDatePicker(\"Second date\");\n\n                var dtv = this.value();\n                var dateCopy = new Date(dtv);\n\t\t\t\t// for this example, we add a range of 3 months from the first date\n                var newMaxDate = new Date(dateCopy.setMonth(dateCopy.getMonth() + 3));\n\n                datePickerEndDate.max(newMaxDate);\n\n\t\t\t\t//timezone needs adjustments, see the function code down below\n                valueChangedCallback(parameter, adjustTimezone(dtv));\n            }\n\n            return {\n                beginEdit: function (param) {\n                    parameter = param;\n\n                    var date = null;\n                    try {\n                        if (param.value) {\n                            date = param.value;\n                            date = unadjustTimezone(date);\n                        }\n                    } catch (e) {\n                        date = null;\n                    }\n\n                    $(datePicker).find(\"input\").kendoDatePicker({\n                        change: onChange,\n                        value: date\n                    });\n\n                    datePicker = $(datePicker).find(\"input\").data(\"kendoDatePicker\");\n                }\n            };\n        }\n\n\t\tfunction adjustTimezone(date) {\n            return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        }\n\n        function unadjustTimezone(date) {\n            return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n        }\n\n\t\tfunction getDatePicker(dateText) {\n            return $(\".trv-parameter-header div[title='${dateText}']\").parent().parent().find(\".trv-parameter-value input\").data(\"kendoDatePicker\");\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Reports Controller in ASP.NET Core\nDESCRIPTION: Implementation of a REST service controller for handling report operations in ASP.NET Core. Includes configuration for report source resolution and storage.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer-in-asp.net-core-2.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace WebApplication1.Controllers\n{\n    using System.IO;\n    using System.Linq;\n    using System.Collections.Generic;\n    using Microsoft.AspNetCore.Hosting;\n    using Microsoft.AspNetCore.Mvc;\n    using Telerik.Reporting.Cache.File;\n    using Telerik.Reporting.Services;\n    using Telerik.Reporting.Services.AspNetCore;\n    [Route(\"api/reports\")]\n    public class ReportsController : ReportsControllerBase\n    {\n        string reportsPath = string.Empty;\n        public ReportsController(IHostingEnvironment environment)\n        {\n            this.reportsPath = Path.Combine(environment.WebRootPath, \"Reports\");\n            this.ReportServiceConfiguration = new ReportServiceConfiguration\n            {\n                HostAppId = \"Html5DemoApp\",\n                Storage = new FileStorage(),\n                ReportSourceResolver = new TypeReportSourceResolver()\n                                 .AddFallbackResolver(new UriReportSourceResolver(this.reportsPath)),\n            };\n        }\n        [HttpGet(\"reportlist\")]\n        public IEnumerable<string> GetReports()\n        {\n            return Directory\n             .GetFiles(this.reportsPath)\n             .Select(path =>\n                    Path.GetFileName(path));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportRenderer Class in C#\nDESCRIPTION: This class handles rendering reports to images. It includes methods for creating streams, rendering reports to PNG format, and converting the images to base64 strings for embedding in HTML.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/send-telerik-report-embedded-email-body.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class ReportRenderer\n{\n\tpublic List<Stream> streams = new();\n\tstring ReportsPath { get; set; }\n\n\tpublic ReportRenderer(string reportsPath)\n\t{\n\t\tthis.ReportsPath = reportsPath;\n\t}\n\n\tvoid CloseStreams()\n\t{\n\t\tforeach (Stream stream in this.streams)\n\t\t{\n\t\t\tstream.Close();\n\t\t}\n\t\tthis.streams.Clear();\n\t}\n\n\tpublic Stream CreateStream(string name, string extension, Encoding encoding, string mimeType)\n\t{\n\t\tMemoryStream ms = new();\n\t\tthis.streams.Add(ms);\n\t\treturn ms;\n\t}\n\n\tpublic List<string> Render(ReportSourceModel reportSourceModel)\n\t{\n\t\tvar list = new List<string>();\n\t\tvar report = Path.Combine(this.ReportsPath, reportSourceModel.Report);\n\n\t\tvar deviceInfo = new Hashtable\n\t\t{\n\t\t\t{ \"OutputFormat\", \"PNG\" }\n\t\t};\n\n\t\tTelerik.Reporting.Processing.ReportProcessor reportProcessor = new();\n\n\t\tvar reportSource = new Telerik.Reporting.UriReportSource() { Uri = report };\n\t\tforeach (string key in reportSourceModel.Parameters.Keys)\n\t\t{\n\t\t\treportSource.Parameters.Add(key, reportSourceModel.Parameters[key]);\n\t\t}\n\n\t\tbool result = reportProcessor.RenderReport(\"IMAGEPrintPreview\", reportSource, deviceInfo, this.CreateStream, out string documentName);\n\n\t\tforeach (MemoryStream ms in this.streams)\n\t\t{\n\t\t\tvar str = Convert.ToBase64String(ms.ToArray());\n\t\t\tlist.Add(str);\n\t\t}\n\n\t\tthis.CloseStreams();\n\n\t\treturn list;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Custom Shape in C#\nDESCRIPTION: This C# code snippet demonstrates how to create an instance of a custom shape and add it to a report container at runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/shape.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nShape shape = new Shape();\nshape.ShapeType = new CustomShape();\nshape.Location = new PointU(Telerik.Reporting.Drawing.Unit.Inch(1), Telerik.Reporting.Drawing.Unit.Inch(1));\nshape.Size = new SizeU(Telerik.Reporting.Drawing.Unit.Inch(1), Telerik.Reporting.Drawing.Unit.Inch(1));\n\n// Add the shape to a container\nthis.Items.Add(shape);\n```\n\n----------------------------------------\n\nTITLE: Report Client Implementation with Async/Await\nDESCRIPTION: Complete implementation of ReportClient class handling REST service communication with async/await pattern for improved performance and resource management.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-reporting-rest-service-api-with-csharp-client.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReportClient : IDisposable\n{\n\tpublic string BaseAddress { get; set; }\n\tpublic HttpClient client;\n\tpublic string ClientId;\n\n\tpublic ReportClient(string uri)\n\t{\n\t\tthis.client = HttpClientFactory.Create();\n\t\tthis.BaseAddress = uri;\n\n\t\tthis.client.BaseAddress = new Uri(this.BaseAddress);\n\t}\n\n\tpublic void Dispose()\n\t{\n\t\tusing (this.client) { }\n\t}\n\n\tpublic async Task RegisterClient()\n\t{\n\t\tvar headers = new List<KeyValuePair<string, string>>();\n\t\tvar content = new FormUrlEncodedContent(headers);\n\n\t\tvar response = await this.client.PostAsync(this.BaseAddress + \"/clients\", content);\n\n\t\tif (response.IsSuccessStatusCode)\n\t\t{\n\t\t\tvar clientIdTask = await response.Content.ReadAsAsync<ClientIDModel>();\n\t\t\tthis.ClientId = clientIdTask.ClientId;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar error = await response.Content.ReadAsAsync<ErrorModel>();\n\t\t\tthrow new Exception(error.Description);\n\t\t}\n\t}\n\n\tpublic async Task<string> CreateInstance(string reportSource)\n\t{\n\t\tHttpContent content = new StringContent(reportSource, Encoding.UTF8, \"application/json\");\n\n\t\tstring route = $\"{this.BaseAddress}/clients/{this.ClientId}/instances\";\n\t\tvar response = await this.client.PostAsync(route, content);\n\n\t\tInstanceIdModel instanceId = null;\n\t\tif (response.IsSuccessStatusCode)\n\t\t{\n\t\t\tinstanceId = await response.Content.ReadAsAsync<InstanceIdModel>();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar error = await response.Content.ReadAsAsync<ErrorModel>();\n\t\t\tthrow new Exception(error.Description);\n\t\t}\n\n\t\treturn instanceId.InstanceId;\n\t}\n\n\tpublic async Task<string> CreateDocument(string instanceId, string format, string deviceInfo = null, string useCache = \"true\")\n\t{\n\t\tstring contentBody = $\"{{ \\\"useCache\\\": {useCache}, \\\"format\\\": \\\"{format}\\\" }}\";\n\t\tHttpContent content = new StringContent(contentBody, Encoding.UTF8, \"application/json\");\n\n\t\tstring route = $\"{this.BaseAddress}/clients/{this.ClientId}/instances/{instanceId}/documents\";\n\t\tvar response = await this.client.PostAsync(route, content);\n\n\t\tDocumentIdModel documentId = null;\n\t\tif (response.IsSuccessStatusCode)\n\t\t{\n\t\t\tdocumentId = await response.Content.ReadAsAsync<DocumentIdModel>();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar error = await response.Content.ReadAsAsync<ErrorModel>();\n\t\t\tthrow new Exception(error.Description);\n\t\t}\n\n\t\treturn documentId.DocumentId;\n\t}\n\n\tpublic async Task<bool> DocumentIsProcessing(string instanceId, string documentId)\n\t{\n\t\tstring route = $\"{this.BaseAddress}/clients/{this.ClientId}/instances/{instanceId}/documents/{documentId}/Info\";\n\n\t\tvar response = await this.client.GetAsync(route);\n\n\t\tDocumentInfoModel documentInfo = null;\n\t\tif (response.IsSuccessStatusCode)\n\t\t{\n\t\t\tdocumentInfo = await response.Content.ReadAsAsync<DocumentInfoModel>();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar error = await response.Content.ReadAsAsync<ErrorModel>();\n\t\t\tthrow new Exception(error.Description);\n\t\t}\n\n\t\treturn !documentInfo.DocumentReady;\n\t}\n\n\tpublic async Task<byte[]> GetDocument(string instanceId, string documentId)\n\t{\n\t\tstring route = $\"{this.BaseAddress}/clients/{this.ClientId}/instances/{instanceId}/documents/{documentId}\";\n\n\t\tvar response = await this.client.GetAsync(route);\n\t\tbyte[] documentBytes;\n\n\t\tif (response.IsSuccessStatusCode)\n\t\t{\n\t\t\tdocumentBytes = await response.Content.ReadAsByteArrayAsync();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar error = await response.Content.ReadAsAsync<ErrorModel>();\n\t\t\tthrow new Exception(error.Description);\n\t\t}\n\n\t\treturn documentBytes;\n\t}\n\n\tprivate static void EnsureSuccessStatusCode(HttpResponseMessage response)\n\t{\n\t\tif (!response.IsSuccessStatusCode)\n\t\t{\n\t\t\tthrow\n\t\t\t\tnew Exception(\n\t\t\t\t\tresponse.ReasonPhrase +\n\t\t\t\t\tEnvironment.NewLine +\n\t\t\t\t\tresponse.RequestMessage.RequestUri);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ReportSource with Query Parameters\nDESCRIPTION: Implements the OnParametersSetAsync lifecycle method to update the ReportSource with values from query parameters after they are set.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-query-parameters-native-blazor-report-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override Task OnParametersSetAsync()\n{\n\tReportSource.Report = ReportName ?? \"Dashboard.trdp\";\n\tReportSource.Parameters.Add(\"ReportYear\", ReportYear ?? 2002);\n\n\treturn base.OnParametersSetAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Stored Procedure in MSSQL\nDESCRIPTION: This SQL snippet demonstrates how to manually execute a stored procedure in Microsoft SQL Server as a workaround for the SqlCommand conversion error in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-mysqlcommand--to-sqlcommand-conversion-error.md#2025-04-21_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nEXEC Stored_Procedure;\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Theme\nDESCRIPTION: HTML code to include Kendo UI Less-Based Theme stylesheets for viewer styling\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-html5-viewer-in-react-js.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n\t\t<link href=\"http://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t\t<link href=\"http://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.default.min.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Updating ReportsController Constructor for Dependency Injection in ASP.NET Core\nDESCRIPTION: This code demonstrates how to modify the ReportsController constructor to use Dependency Injection by accepting an IReportServiceConfiguration parameter. This change is required to address the 'ReportsControllerBase is obsolete' warning after upgrading to Telerik Reporting version 14.0.20.115+.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-fix-reportscontrollerbase-is-obsolete.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n            : base(reportServiceConfiguration)\n        {\n        }\n```\n\n----------------------------------------\n\nTITLE: SQL Database Creation Script for Reports\nDESCRIPTION: SQL script to create a database and table to store report definitions for the custom report resolver\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-report-source-resolver/how-to-implement-a-custom-report-source-resolver.md#2025-04-21_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nUSE [master]\nGO\nCREATE DATABASE [Reports]\nCONTAINMENT = NONE\nON PRIMARY\n(NAME = N'Reports', FILENAME = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL11.SQLEXPRESS\\MSSQL\\DATA\\Reports.mdf', SIZE = 4096KB, MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB)\nLOG ON\n(NAME = N'Reports_log', FILENAME = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL11.SQLEXPRESS\\MSSQL\\DATA\\Reports_log.ldf', SIZE = 1024KB, MAXSIZE = 2048GB, FILEGROWTH = 10%)\nGO\nUSE [Reports]\nGO\nCREATE TABLE [dbo].[Reports](\n[ID] [int] NOT NULL,\n[Definition] [nvarchar](max) NOT NULL\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\n```\n\n----------------------------------------\n\nTITLE: Configuring Newtonsoft.Json Serializer in ASP.NET Core 3+\nDESCRIPTION: Code examples showing how to add Newtonsoft.Json support to different ASP.NET Core service configurations. Requires Microsoft.AspNetCore.Mvc.NewtonsoftJson NuGet package.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/jsonresult-serializersettings-must-be-an-instance-of-type-systemtextjson-jsonserializeroptions.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddControllers().AddNewtonsoftJson();\nservices.AddControllersWithViews().AddNewtonsoftJson();\nservices.AddRazorPages().AddNewtonsoftJson();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parameter Editor Functions in JavaScript\nDESCRIPTION: This code defines the matchFunction and createEditorFunction for the custom parameter editor. The matchFunction determines if the editor should be used for a given parameter, while createEditorFunction creates the CheckBoxGroup widget and handles value changes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-multiselect-checkbox-parameter-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction matchFunction(parameter) {\n\treturn Boolean(parameter.availableValues) && parameter.multivalue;\n}\n\nfunction createEditorFunction(placeholder, options) {\n\tlet checkboxGroupElement = $(placeholder).html(\"<ul></ul>\");\n\tlet valueChangedCallback = options.parameterChanged;\n\tlet parameter;\n\n\tfunction onChange() {\n\t\tlet val = checkboxList.value();\n\t\tvalueChangedCallback(parameter, val);\n\t}\n\n\treturn {\n\t\tbeginEdit: function (param) {\n\n\t\t\tparameter = param;\n\n\t\t\t$(checkboxGroupElement).kendoCheckBoxGroup({\n\t\t\t\tlayout: \"vertical\",\n\t\t\t\titems: parameter.availableValues.map((param) => ({ ...param, label: param.name })),\n\t\t\t\tchange: onChange,\n\t\t\t\tvalue: parameter.value\n\t\t\t});\n\n\t\t\tcheckboxList = $(checkboxGroupElement).data(\"kendoCheckBoxGroup\");\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Customized Toolbar in Blazor\nDESCRIPTION: This code snippet demonstrates how to customize the toolbar of the Telerik ReportViewer by specifying a custom ordered list of tools. It removes the default _Search_, _SendEmail_, and _Zoom_ functionalities while bringing _Refresh_ to the beginning of the toolbar.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/customizing/toolbar-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: CSHTML\nCODE:\n```\n\"@page \\\"/\\\"\\n\\n@using Telerik.ReportViewer.BlazorNative.Tools\\n\\n<ReportViewer\\n\\tServiceUrl=\\\"/api/reports\\\"\\n\\t@bind-ReportSource=\\\"@ReportSource\\\"\\n\\tTools=\\\"@Tools\\\">\\n</ReportViewer>\\n\\n@code {\\n\\tpublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions(\\\"Report Catalog.trdp\\\", new Dictionary<string, object> {});\\n\\tpublic List<IReportViewerTool> Tools = new List<IReportViewerTool>\\n\\t{\\n\\t\\tnew Refresh(),\\n\\t\\tnew NavigateBackward(),\\n\\t\\tnew NavigateForward(),\\n\\t\\tnew StopRendering(),\\n\\t\\tnew FirstPage(),\\n\\t\\tnew PreviousPage(),\\n\\t\\tnew PageNumber(),\\n\\t\\tnew NextPage(),\\n\\t\\tnew LastPage(),\\n\\t\\tnew ToggleViewMode(),\\n\\t\\tnew Export(),\\n\\t\\tnew Print(),\\n\\t\\tnew ToggleDocumentMap(),\\n\\t\\tnew ToggleParametersArea()\\n\\t};\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring API Endpoints\nDESCRIPTION: The following C# snippet configures API endpoints for the Blazor application by mapping controllers in the Program.cs file. This setup is crucial for the API routing mechanism.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-blazor-application.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\napp.UseEndpoints(endpoints =>\n\t{\n\t\tendpoints.MapControllers();\n\t});\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in HTML5 Viewer via JavaScript\nDESCRIPTION: This JavaScript code configures the Telerik HTML5 Report Viewer and handles errors that occur during report rendering. It shows how to attach an error event handler to the viewer, which can then be used to display a custom error message instead of the default yellow message box.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/handling-errors-occurring-in-a-custom-resolver-used-by-a-reporting-rest-service.md#2025-04-21_snippet_2\n\nLANGUAGE: JS\nCODE:\n```\n```JS\n//the client\n$(document).ready(function () {\n       $(\"#reportViewer1\")\n           .telerik_ReportViewer({\n               serviceUrl: \"api/reports/\",\n               templateUrl: 'ReportViewer/templates/telerikReportViewerTemplate.html',\n               reportSource: {\n                   report: \"Telerik.Reporting.Examples.CSharp.ReportCatalog, CSharp.ReportLibrary\",\n                   parameters: { }\n               },\n               viewMode: telerikReportViewer.ViewModes.INTERACTIVE,\n               scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,\n               scale: 1.0,\n              error: function (e, args) {\n                  //hide the yellow message box\n                  $('.trv-error-pane').toggle();\n                  //display the error message with via custom UI            \n                  alert(\"Error!\");\n               }\n           });\n   });\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding CreateDocument Method with Authorization in ASP.NET Core\nDESCRIPTION: This code snippet demonstrates how to override the CreateDocument method in the ReportsController with the [RESTAuthorize] attribute in an ASP.NET Core application. This allows specific resource access without affecting overall class authorization.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reporting-rest-service-authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\n[RESTAuthorize]\n\tpublic override IActionResult CreateDocument(string clientID, string instanceID, [FromBody] CreateDocumentArgs args)\n\t{\n\t\treturn base.CreateDocument(clientID, instanceID, args);\n\t}\n```\n\n----------------------------------------\n\nTITLE: Adding Report Sorting Programmatically - VB\nDESCRIPTION: Visual Basic implementation for adding sorting to a Telerik Report using SortingCollection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/ordering-data/how-to-add-sorting-to-report.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim sorting As New Sorting()\nsorting.Expression = \"=Fields.CategoryName\"\nsorting.Direction = SortDirection.Asc\nreport.Sortings.Add(sorting)\n```\n\n----------------------------------------\n\nTITLE: Configuring Denied Permissions for All Users in C#\nDESCRIPTION: This snippet demonstrates how to configure denied permissions for all users of the Web Report Designer by using the ReportDesignerServiceConfiguration. It specifically shows how to prevent the addition of PictureBox and HTMLTextBox components.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/customize-web-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nservices.TryAddSingleton((Func<IServiceProvider, IReportDesignerServiceConfiguration>)(sp => new ReportDesignerServiceConfiguration\n{\n\t//...\n\tDeniedPermissions = ReportDesignerPermissionsBuilder.Build(\n\t\tPermission.Create_Components_ReportItems_PictureBox,\n\t\tPermission.Create_Components_ReportItems_HTMLTextBox\n\t\t)\n}));\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource for HTML5 ASP.NET WebForms Report Viewer in Code-Behind\nDESCRIPTION: Shows how to set the ReportSource for the HTML5 ASP.NET WebForms Report Viewer in the code-behind file, including setting the identifier type, identifier, and parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar clientReportSource = new Telerik.ReportViewer.Html5.WebForms.ReportSource();\nclientReportSource.IdentifierType = IdentifierType.TypeReportSource;\nclientReportSource.Identifier = typeof(ReportCatalog).AssemblyQualifiedName;//or <namespace>.<class>, <assembly> e.g. \"MyReports.Report1, MyReportsLibrary\"\nclientReportSource.Parameters.Add(\"Parameter1\", 123);\nreportViewer1.ReportSource = clientReportSource;\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim clientReportSource As New Telerik.ReportViewer.Html5.WebForms.ReportSource\nclientReportSource.IdentifierType = Telerik.ReportViewer.Html5.WebForms.IdentifierType.TypeReportSource\nclientReportSource.Identifier = GetType(ReportCatalog).AssemblyQualifiedName 'or <namespace>.<class>, <assembly> e.g. \"MyReports.Report1, MyReportsLibrary\"\nclientReportSource.Parameters.Add(\"Parameter1\", 123)\nreportViewer1.ReportSource = clientReportSource\n```\n\n----------------------------------------\n\nTITLE: Seeding Application in Program.cs C#\nDESCRIPTION: This C# code snippet demonstrates how to call the `Seed` extension method during the application's initialization in `Program.cs`. This ensures that the report database is populated with a sample report if it's initially empty. The `app.Run()` call starts the application after the database has been seeded.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/implement-database-definition-storage-efcore.md#2025-04-21_snippet_9\n\nLANGUAGE: CSharp\nCODE:\n```\n// Add initial data to database\n\tapp.Seed();\n\n\tapp.Run();\n```\n\n----------------------------------------\n\nTITLE: Printing PDF in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to load a generated PDF file within a hidden iframe and trigger the browser's print dialog. It fetches the PDF from the specified endpoint, creates a blob URL, creates an invisible iframe, sets the iframe's source to the blob URL, and then calls `window.print()` on the iframe's content window. Input: Report Name, Output: triggers browser print dialog.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-a-report-directly-at-client-side-without-displaying-it-in-a-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction printReport() {\n\t\tfetch(\"/Home/GenerateReportPDF?reportName=Barcodes Report.trdp\")\n\t\t\t.then(res => {\n\t\t\t\tif (res.status === 200) {\n\t\t\t\t\treturn res.blob();\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Could not retrieve PDF document.\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(blob => {\n\t\t\t\tlet objectURL = URL.createObjectURL(blob);\n\t\t\t\t\n\t\t\t\tvar iframe = document.createElement(\"iframe\");\n\t\t\t\tiframe.style.display = \"none\";\n\t\t\t\tiframe.src = objectURL;\n\t\t\t\tiframe.onload = function () {\n\t\t\t\t\tiframe.contentWindow.print();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdocument.body.appendChild(iframe);\n\t\t\t});\n\t}\n```\n\n----------------------------------------\n\nTITLE: Creating a Detail Section in Telerik Reporting (VB.NET)\nDESCRIPTION: This VB.NET snippet shows how to create a DetailSection for Telerik Reporting. It constructs a new DetailSection object, assigns a height and name to it, and then adds it to the report's Items collection. This requires the Telerik.Reporting library to function correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/create-sections-programmatically.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim detail As New Telerik.Reporting.DetailSection()\nMe.detail.Height = New Telerik.Reporting.Drawing.Unit(3, Telerik.Reporting.Drawing.UnitType.Inch)\nMe.detail.Name = \"detail\";\nreport.Items.Add(DirectCast(detail, Telerik.Reporting.ReportItemBase))\n```\n\n----------------------------------------\n\nTITLE: Creating XmlReportSource from TRDX File Contents in C# and VB.NET\nDESCRIPTION: Shows how to create an XmlReportSource object by reading the XML content of a TRDX file. This approach allows loading report definitions directly from XML content rather than from a file path.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-deploy-a-report-created-with-standalone-report-designer.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nXmlReportSource xmlReportSource = new XmlReportSource();\n// Read as string\nxmlReportSource.Xml = System.IO.File.ReadAllText(\"../../DemoReport.trdx\");\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim xmlReportSource As New XmlReportSource()\n' Read as string\nxmlReportSource.Xml = System.IO.File.ReadAllText(\"../../DemoReport.trdx\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays with Price Condition\nDESCRIPTION: Demonstrates filtering JSON data using a price condition with JSONPath expression '$.store.book[?(@.price<10)]' to return only books under $10.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/graphqldatasource-component/how-to-use-jsonpath-to-filter-json-data.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"category\": \"reference\",\n\t\t\"author\": \"Nigel Rees\",\n\t\t\"title\": \"Sayings of the Century\",\n\t\t\"price\": 8.95\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating React Application with NPX\nDESCRIPTION: Initialize a new React application using create-react-app CLI tool, setting up the base project structure for integrating the Telerik Report Viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-rest-service.md#2025-04-21_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpx create-react-app my-app-with-viewer\ncd my-app-with-viewer\n```\n\n----------------------------------------\n\nTITLE: Constructing a Binding Instance in Telerik Reporting\nDESCRIPTION: This snippet demonstrates the key components required when creating a Binding instance. It specifies the property name to bind and an expression that will return the value for the property at runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/using-expressions/bindings.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* the `Name` of the property to bind; alternatively a period-delimited navigation path can be used to reference a property down the object hierarchy. For example the following navigation paths define valid properties:\n\n\t+ `DataSource`\n\t+ `Style.BackgroundColor`\n\t+ `Style.Font.Name` Only write-enabled properties can be set through binding expressions, so read-only properties are not suitable for data-binding.\n\n\t>tip Not all item properties support expression bindings. Please refer to the [Reporting API Reference](/api/) to check if a property supports binding.\n\n* an [`Expression`]({%slug telerikreporting/designing-reports/connecting-to-data/expressions/overview%}) that will return the value for the property when evaluated at runtime.\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Action Enter Event Handler\nDESCRIPTION: Handles mouse enter events for interactive actions, showing tooltips for custom actions and tracking bounds for navigation actions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-winforms-report-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nvoid reportViewer1_ActionEnter(object sender, ReportViewer.Common.InteractiveActionEventArgs args)\n{\n    var customAction = args.Action as Telerik.Reporting.Processing.CustomAction;\n    if (null != customAction)\n    {\n        var p = this.PointToClient(Cursor.Position);\n        p.Offset(Cursor.Current.Size.Width, Cursor.Current.Size.Height);\n        this.toolTip.Show(this.GetCategoryInfo(customAction.Parameters), this, p, 5000);\n    }\n    else\n    {\n        var reportAction = args.Action as Telerik.Reporting.Processing.NavigateToReportAction;\n        if (null != reportAction)\n        {\n            this.borderBounds = System.Drawing.Rectangle.Round(args.Bounds);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Report Using Report Processor in C#\nDESCRIPTION: This snippet demonstrates how to manually render a report using the Report Processor in C#. It highlights the usage of TypeReportSource to specify the report by its Assembly Qualified Name and utilizes Reflection to create an instance of the report class.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/report-definitions.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\Processing\\ReportProcessorSnippets.cs region=Export_Single_Stream_Snippet}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Method in Entity Framework Context for EntityDataSource in C# and VB.NET\nDESCRIPTION: This snippet shows how to extend an Entity Framework context using a partial class to define a method that accepts parameters. The method filters SalesOrderHeader entities by status and date.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/using-parameters-with-the-entitydatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class AdventureWorksEntities\n{\n    //method with two parameters\n    public ObjectResult<SalesOrderHeader> GetOrdersByStatusAndDate(byte status, DateTime orderDate)\n    {\n        return this.CreateQuery<SalesOrderHeader>(\"SELECT VALUE o FROM SalesOrderHeaders AS o WHERE o.Status = @status AND o.OrderDate = @orderDate\")\n            .AddParameter(\"status\", status)\n            .AddParameter(\"orderDate\", orderDate);\n    }\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Partial Class AdventureWorksEntities\n    'method with two parameters\n    Public Function GetOrdersByStatusAndDate(status As Byte, orderDate As DateTime) As ObjectResult(Of SalesOrderHeader)\n        Return Me.CreateQuery(Of SalesOrderHeader)(\"SELECT VALUE o FROM SalesOrderHeaders AS o WHERE o.Status = @status AND o.OrderDate = @orderDate\") _\n            .AddParameter(\"status\", status) _\n            .AddParameter(\"orderDate\", orderDate)\n    End Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Token in HTML5 Report Viewer\nDESCRIPTION: This snippet demonstrates how to use the authenticationToken() method to set the authentication token for a Telerik HTML5 Report Viewer. It first gets the ReportViewer object from a DOM element with ID 'reportViewer1', then calls the authenticationToken() method with a token string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/authenticationtoken(token).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.authenticationToken(\"bad18eba1ff45jk7858b8ae88a77fa30\");\n```\n\n----------------------------------------\n\nTITLE: Creating TypeSelector StyleRule in VB.NET\nDESCRIPTION: VB.NET implementation of creating a TypeSelector style rule programmatically that applies formatting to all TextBox report items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/creating-style-rules.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n'Create a StyleRule\nDim MyStyleRule As Telerik.Reporting.Drawing.StyleRule = New Telerik.Reporting.Drawing.StyleRule\n'Add a TypeSelector\nMyStyleRule.Selectors.AddRange(New Telerik.Reporting.Drawing.ISelector() _ \n{New Telerik.Reporting.Drawing.TypeSelector(GetType(Telerik.Reporting.TextBox))})\n'Add formatting\nMyStyleRule.Style.BackgroundColor = System.Drawing.Color.LinenMyStyleRule.Style.Color = System.Drawing.Color.DodgerBlue\nMyStyleRule.Style.Font.Name = \"Courier New\"\n'Add rule to Style Sheet\nMe.StyleSheet.AddRange(New Telerik.Reporting.Drawing.StyleRule() {MyStyleRule})\n```\n\n----------------------------------------\n\nTITLE: Initializing UriReportSource for Telerik Report Server\nDESCRIPTION: This snippet illustrates how to set up the UriReportSource for reports rendered by the Telerik Report Server. The report definition must be hosted on the server.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/how-to-add-report-viewer-to-a-windows-forms'-.net-core-project.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\ReportViewer\\WinForms\\Form1.cs region=DesktopViewer_Core_RportServer_UriReportSource}}\n```\n\n----------------------------------------\n\nTITLE: Stream Creation and Finalization in C#\nDESCRIPTION: Code demonstrating how to create and finalize the rendering stream for the custom extension.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/custom-rendering-extension.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar stream = createStreamCallback(\"report/CustomExtensionName\", \"xml\", Encoding.UTF8, \"application/xml\");\n\nvar renderingStream = stream as IRenderStream;\n\nif (null != renderingStream)\n{\n    renderingStream.Finish();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RuntimeConfig for System.Drawing Support in .NET 6\nDESCRIPTION: This JSON configuration enables Unix support for System.Drawing in .NET 6 applications. It should be added to a file named 'runtimeconfig.template.json' in the project folder.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/system-drawing-common-is-not-supported-on-non-windows-platforms.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"configProperties\": {\n\t\t\"System.Drawing.EnableUnixSupport\": true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling interactiveActionLeave Event in HTML5 Report Viewer\nDESCRIPTION: Example showing how to handle the interactiveActionLeave event in a Telerik Report Viewer initialization. The event handler modifies the font weight of the element when the mouse leaves the interactive action area.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/interactiveactionleave(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.ProductSales, CSharp.ReportLibrary\"\n\t\t},\n\t\tinteractiveActionLeave: function(e, args) {\n\t\t\t$(args.element).css('font-weight', 'normal');\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Querying AdventureWorks Database for Line Chart Data (SQL)\nDESCRIPTION: This SQL query retrieves data from the AdventureWorks database, specifically the product category name, order date, and line total. This data is used to populate a Line chart, displaying the LineTotal of Product Categories over Years.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/line.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n\"SELECT\\n\\t[Production].[ProductCategory].[Name] AS 'Category',\\n\\t[Sales].[SalesOrderHeader].[OrderDate],\\n\\t[Sales].[SalesOrderDetail].[LineTotal]\\nFROM\\n\\t[Production].[Product] INNER JOIN\\n\\t[Production].[ProductSubcategory] ON [Production].[Product].[ProductSubcategoryID] = [Production].[ProductSubcategory].[ProductSubcategoryID] INNER JOIN\\n\\t[Production].[ProductCategory] ON [Production].[ProductSubcategory].[ProductCategoryID] = [Production].[ProductCategory].[ProductCategoryID] INNER JOIN\\n\\t[Sales].[SalesOrderDetail] ON [Production].[Product].[ProductID] = [Sales].[SalesOrderDetail].[ProductID] INNER JOIN\\n\\t[Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] AND [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] AND \\n\\t[Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID]\"\n```\n\n----------------------------------------\n\nTITLE: Importing Report Viewer Module in Angular\nDESCRIPTION: TypeScript code showing how to import and configure the ReportingAngularViewerModule in the application root module\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-reporting-service.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ReportingAngularViewerModule } from '@progress/telerik-angular-native-report-viewer';\n\n@NgModule({\n\tdeclarations: [\n\t\tAppComponent\n\t],\n\timports: [\n\t\tBrowserModule,\n\t\tAppRoutingModule,\n\t\tBrowserAnimationsModule,\n\t\tReportingAngularViewerModule\n\t],\n\tproviders: [],\n\tbootstrap: [AppComponent]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring EntityDataSource with Property Binding\nDESCRIPTION: Shows how to connect EntityDataSource to AdventureWorksEntities context using property binding to retrieve product information.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/connecting-to-an-entity-data-model-with-the-entitydatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nentityDataSource.Context = typeof(AdventureWorksEntities);\nentityDataSource.ContextMember = \"Products\";\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nentityDataSource.Context = GetType(AdventureWorksEntities)\nentityDataSource.ContextMember = \"Products\"\n```\n\n----------------------------------------\n\nTITLE: Generating Trace Log in PowerShell\nDESCRIPTION: This PowerShell snippet adds a trace listener to generate a trace log. This is useful for debugging Telerik Reporting issues encountered during report generation. The log file location needs to be specified.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/exporting-reports-powershell.md#2025-04-21_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$listener = New-Object System.Diagnostics.TextWriterTraceListener \"Location\\Of\\Trace\\Log.txt\"\n\t[System.Diagnostics.Trace]::Listeners.Add($listener)\n\t[System.Diagnostics.Trace]::AutoFlush = $True;\n```\n\n----------------------------------------\n\nTITLE: Accessing Report Items from Calling Applications in C#\nDESCRIPTION: This snippet shows how to access a report item from a WinForm or WPF application using the report hierarchy with an InstanceReportSource assigned to a ReportViewer control. It demonstrates finding and accessing a TextBox item in the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/access-report-items-programmatically.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected void Button1_Click(object sender, EventArgs e)\n{\n    Telerik.Reporting.InstanceReportSource instanceReportSource = (Telerik.Reporting.InstanceReportSource)this.reportViewer1.ReportSource;\n    Telerik.Reporting.Report report = (Telerik.Reporting.Report)instanceReportSource.ReportDocument;\n    Telerik.Reporting.TextBox txt = report.Items.Find(\"productNameDataTextBox\", true)[0] as Telerik.Reporting.TextBox;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Corner Radius in XAML for WPF Report Viewer\nDESCRIPTION: This XAML snippet demonstrates how to customize the `CornerRadius`, `Padding`, `BorderThickness`, and `BorderBrush` properties of the WPF Report Viewer using a Style.  It targets the `tr:ReportViewer` type and sets the desired property values using Setters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/customizing/how-to-use-rounded-corners.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n````XAML\n<tr:ReportViewer.ReportSource>\n\t<telerikReporting:UriReportSource Uri=\"../../../../../../../Report Designer\\Examples\\Report Catalog.trdp\" />\n\t\t\t\t\t\t</tr:ReportViewer.ReportSource>\n\t\t\t\t\t\t<tr:ReportViewer.Style>\n\t\t\t\t\t\t\t<Style TargetType=\"tr:ReportViewer\" BasedOn=\"{StaticResource {x:Type tr:ReportViewer}}\">\n\t\t\t\t\t\t\t\t<Setter Property=\"CornerRadius\" Value=\"5\"/>\n\t\t\t\t\t\t\t\t<Setter Property=\"Padding\" Value=\"5\"/>\n\t\t\t\t\t\t\t\t<Setter Property=\"BorderThickness\" Value=\"3\"/>\n\t\t\t\t\t\t\t\t<Setter Property=\"BorderBrush\" Value=\"Yellow\"/>\n\t\t\t\t\t\t\t</Style>\n\t\t\t\t\t\t</tr:ReportViewer.Style>\n</tr:ReportViewer>\n````\n```\n\n----------------------------------------\n\nTITLE: Running Vue Application\nDESCRIPTION: Command to start the Vue.js development server\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-the-web-designer-in-vue.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Overriding RegisterClient Method to Suppress Stack Trace in C#\nDESCRIPTION: This code snippet demonstrates how to override the RegisterClient method of the ReportsController to catch exceptions and return a custom HTTP response without exposing the stack trace. It returns a NotImplemented status code instead of the default Internal Server Error with stack trace.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-prevent-error-stack-trace-from-being-sent-with-response.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic override HttpResponseMessage RegisterClient()\n{\n    try\n    {\n        return base.RegisterClient();\n    }\n    catch (System.Exception)\n    {\n        return new HttpResponseMessage(HttpStatusCode.NotImplemented);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom RankByCategory Aggregate Function in C#\nDESCRIPTION: Custom aggregate function that calculates ranks for categories based on accumulated values. The implementation includes initialization, accumulation, merging, and value retrieval logic. Equal values receive the same rank with subsequent ranks being skipped.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-rank-categories-based-on-total-of-another-field-with-custom-aggregate.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\nusing System.Linq;\nusing Telerik.Reporting.Expressions;\n\nnamespace CustomAggregates\n{\n    [AggregateFunction(Name = \"RankByCategory\",\n        Description = \"Defines an aggregate function to get the rank of a field based on total value of another field.\")]\n\n    public class RankByCategoryAggregate : IAggregateFunction\n    {\n        private Dictionary<string, double> sums;\n        private Ranks result;\n\n        public void Init()\n        {\n            this.sums = new Dictionary<string, double>();\n        }\n\n        public void Accumulate(object[] values)\n        {\n            this.AccumulateCore((string)values[0], (double)values[1]);\n        }\n\n        void AccumulateCore(string key, double value)\n        {\n            double currentValue;\n            if (this.sums.TryGetValue(key, out currentValue))\n            {\n                this.sums[key] = currentValue + value;\n            }\n            else\n            {\n                this.sums[key] = value;\n            }\n            this.result = null;\n        }\n\n        public void Merge(IAggregateFunction aggregate)\n        {\n            foreach (KeyValuePair<string, double> pair in ((RankByCategoryAggregate)aggregate).sums)\n            {\n                this.AccumulateCore(pair.Key, pair.Value);\n            }\n        }\n\n        public object GetValue()\n        {\n            if (this.result == null)\n            {\n                this.result = Ranks.FromValues(this.sums);\n            }\n\n            return this.result;\n        }\n    }\n\n    class Ranks\n    {\n        private Dictionary<string, int> ranks;\n\n        public Ranks(Dictionary<string, int> newRanks)\n        {\n            this.ranks = newRanks;\n        }\n\n        public static Ranks FromValues(Dictionary<string, double> values)\n        {\n            List<KeyValuePair<string, double>> myList = values.ToList();\n\n            myList.Sort(\n                delegate (KeyValuePair<string, double> firstPair,\n                KeyValuePair<string, double> nextPair)\n                {\n                    return nextPair.Value.CompareTo(firstPair.Value);\n                });\n\n            int currentRank = 1;\n            double currentValue = double.MaxValue;\n            Dictionary<string, int> newRanks = new Dictionary<string, int>();\n            for (int i = 0; i < myList.Count; i++)\n            {\n                if (currentValue != myList[i].Value)\n                {\n                    currentRank = i + 1;\n                    currentValue = myList[i].Value;\n                }\n\n                newRanks.Add(myList[i].Key, currentRank);\n            }\n\n            return new Ranks(newRanks);\n        }\n\n        public int GetRank(string key)\n        {\n            return this.ranks[key];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Windows Forms Report Viewer in VB.NET Desktop Application\nDESCRIPTION: Demonstrates how to add a Windows Forms Report Viewer control to a form, configure a report source, set parameters, and display a TRDP report using Telerik Reporting\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/vb-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: VB.NET\nCODE:\n```\nPrivate Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n    Dim reportSource1 As UriReportSource = New UriReportSource()\n    reportSource1.Uri = \"Reports\\SampleReport.trdp\"\n    reportSource1.Parameters.Add(\"Parameter1_Name\", \"Parameter1_Value\")\n    reportSource1.Parameters.Add(\"Parameter2_Name\", \"Parameter2_Value\")\n\n    Dim reportViewer = New Telerik.ReportViewer.WinForms.ReportViewer()\n    reportViewer.ReportSource = reportSource1\n    reportViewer.Dock = System.Windows.Forms.DockStyle.Fill\n    reportViewer.Name = \"reportViewer1\"\n    reportViewer.TabIndex = 1\n    reportViewer.RefreshReport()\n\n    Me.Controls.Add(reportViewer)\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields Collection in Telerik Reporting Expressions\nDESCRIPTION: Demonstrates how to access the Fields collection in Telerik Reporting expressions. The Fields collection represents the set of fields specified by the report data source and any additional calculated fields.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/global-objects.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nFields.ProductID\n```\n\nLANGUAGE: C#\nCODE:\n```\nFields.[My Column]\n```\n\nLANGUAGE: C#\nCODE:\n```\nFields.[Field\\[1\\]]\n```\n\nLANGUAGE: C#\nCODE:\n```\nFields.Item\n```\n\nLANGUAGE: C#\nCODE:\n```\nFields(\"Item\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Telerik Report Viewer with Configuration\nDESCRIPTION: Configure and render the TelerikReportViewer component with specific service URL, report source, styling, and viewer modes\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-rest-service.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet viewer;\nReactDOM.render(\n\t<div>\n\t<TelerikReportViewer\n\t\tref={ el => viewer = el }\n\t\tserviceUrl=\"http://localhost:[portnumber]/api/reports/\"\n\t\treportSource={{\n\t\t\treport: 'ProductCatalog.trdp',\n\t\t\tparameters: {}\n\t\t}}\n\t\tviewerContainerStyle = {{\n\t\t\tposition: 'absolute',\n\t\t\tleft: '5px',\n\t\t\tright: '5px',\n\t\t\ttop: '40px',\n\t\t\tbottom: '5px',\n\t\t\toverflow: 'hidden',\n\t\t\tclear: 'both',\n\t\t\tfontFamily: 'ms sans serif'\n\t\t}}\n\t\tviewMode=\"INTERACTIVE\"\n\t\tscaleMode=\"SPECIFIC\"\n\t\tscale={1.0}\n\t\tenableAccessibility={false} />\n\t</div>,\n\tdocument.getElementById('root')\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Report Viewer with Local Template\nDESCRIPTION: Sets up the Angular Report Viewer component with a local template URL and other configuration options.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-load-telerik-report-viewer-resources-locally-in-angular-application-and-use-them-to-customize-the-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer #viewer1 \n\t\t[serviceUrl]=\"'http://localhost:12345/api/reports/'\"\n\t\t[templateUrl]=\"'assets\\\\telerikReportViewerTemplate-{{buildversion}}.html'\"\n\t\t[reportSource]=\"{\n\t\t\treport: 'SampleReport.trdp',\n\t\t\tparameters: {}\n\t\t}\"\n\t\t>\n\t</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Report Designer in Angular Component\nDESCRIPTION: TypeScript code that initializes the Telerik Web Report Designer in an Angular component, specifying the service URL and report to load.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-web-report-designer-in-angular-application.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.designer = $(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\tserviceUrl: \"https://demos.telerik.com/reporting/api/reportdesigner/\",\n\t\treport: \"Product Catalog.trdp\"\n\t}).data(\"telerik_WebDesigner\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Reports Controller for REST Service in ASP.NET Core\nDESCRIPTION: Implementation of a Reports controller that inherits from ReportsControllerBase. This controller handles report-related requests and requires an IReportServiceConfiguration dependency injected through the constructor.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nnamespace AspNetCoreDemo.Controllers\n\t{\n\t\tusing Microsoft.AspNetCore.Mvc;\n\t\tusing System.Net;\n\t\tusing System.Net.Mail;\n\t\tusing Telerik.Reporting.Services;\n\t\tusing Telerik.Reporting.Services.AspNetCore;\n\t\t[Route(\"api/reports\")]\n\t\tpublic class ReportsController : ReportsControllerBase\n\t\t{\n\t\t\tpublic ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n\t\t\t\t: base(reportServiceConfiguration)\n\t\t\t{\n\t\t\t}\n\t\t\tprotected override HttpStatusCode SendMailMessage(MailMessage mailMessage)\n\t\t\t{\n\t\t\t\tthrow new System.NotImplementedException(\"This method should be implemented in order to send mail messages\");\n\t\t\t\t//using (var smtpClient = new SmtpClient(\"smtp01.mycompany.com\", 25))\n\t\t\t\t//{\n\t\t\t\t//\tsmtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;\n\t\t\t\t//\tsmtpClient.EnableSsl = false;\n\t\t\t\t//\tsmtpClient.Send(mailMessage);\n\t\t\t\t//}\n\t\t\t\t//return HttpStatusCode.OK;\n\t\t\t}\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Initializing ReportingEngineConfiguration in C#\nDESCRIPTION: This C# code snippet demonstrates how to initialize the ReportingEngineConfiguration from the IConfiguration interface, which is typically populated from appSettings.json or appsettings.{EnvironmentName}.json.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\n````CSharp\nReportingEngineConfiguration = sp.GetService<IConfiguration>();\n````\n```\n\n----------------------------------------\n\nTITLE: Configuring Service in Startup.cs in C#\nDESCRIPTION: This C# code snippet demonstrates how to register the ConfigurationService as a singleton service within the ASP.NET Core's dependency injection container. This ensures that only one instance of the service is created and shared throughout the application. The ConfigureServices method in Startup.cs is used to configure the application's services.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pass-configuration-to-report-processor-in-asp-dot-net-core-without-rest-service.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n\t{\n\t\tthis.services = services;\n\t\tthis.services.Configure<CookiePolicyOptions>(options =>\n\t\t{\n\t\t\toptions.CheckConsentNeeded = context => true;\n\t\t\toptions.MinimumSameSitePolicy = SameSiteMode.None;\n\t\t});\n\t\t\n\t\tthis.services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n\t\tthis.services.AddSingleton<ConfigurationService>();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Services for Report and Report Designer Controllers\nDESCRIPTION: This code snippet configures the services required for the ReportController and ReportDesignerController in the ConfigureServices method. It registers IReportServiceConfiguration and IReportDesignerServiceConfiguration as singletons, providing settings such as the reporting engine configuration, host application ID, storage mechanisms (FileStorage, FileDefinitionStorage, FileSettingsStorage, ResourceStorage, FileSharedDataSourceStorage), and report source resolvers (TypeReportSourceResolver, UriReportSourceResolver).  This sets up the dependencies necessary for the controllers to function correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-core-2.1-application.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n````CSharp\npublic void ConfigureServices(IServiceCollection services)\n\t{\n\t\tservices.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n\t\tvar reportsPath = Path.Combine(this.HostingEnvironment.ContentRootPath, \"Reports\");\n\t\t// Configure dependencies for ReportsController.\n\t\tservices.TryAddSingleton<IReportServiceConfiguration>(sp =>\n\t\t\tnew ReportServiceConfiguration\n\t\t\t{\n\t\t\t\t// The default ReportingEngineConfiguration will be initialized from appsettings.json or appsettings.{EnvironmentName}.json:\n\t\t\t\tReportingEngineConfiguration = sp.GetService<IConfiguration>(),\n\t\t\t\t// In case the ReportingEngineConfiguration needs to be loaded from a specific configuration file, use the approach below:\n\t\t\t\t// ReportingEngineConfiguration = ResolveSpecificReportingConfiguration(sp.GetService<IHostingEnvironment>()),\n\t\t\t\tHostAppId = \"Html5DemoAppCore\",\n\t\t\t\tStorage = new FileStorage(),\n\t\t\t\tReportSourceResolver = new TypeReportSourceResolver()\n\t\t\t\t .AddFallbackResolver(new UriReportSourceResolver(reportsPath)),\n\t\t\t});\n\t\t// Configure dependencies for ReportDesignerController.\n\t\tservices.TryAddSingleton<IReportDesignerServiceConfiguration>(sp => new ReportDesignerServiceConfiguration\n\t\t{\n\t\t\tDefinitionStorage = new FileDefinitionStorage(reportsPath),\n\t\t\tSettingsStorage = new FileSettingsStorage(\n\t\t\t\tPath.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"Telerik Reporting\")),\n\t\t\tResourceStorage = new ResourceStorage(\n\t\t\t\tPath.Combine(reportsPath, \"Resources\")),\n\t\t\tSharedDataSourceStorage = new FileSharedDataSourceStorage(reportsPath, \"Shared Data Sources\"))\n\t\t});\n\t}\n````\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component Template for Export Options Customization\nDESCRIPTION: This HTML snippet shows how to attach the necessary events to the tr-viewer component in the Angular template. It binds the 'ready' and 'renderingEnd' events to the corresponding component methods.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-customize-export-options-of-angular-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n....\n    [ready]=\"ready\"\n    [renderingEnd]=\"onRenderingEnd\">\n</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Using Ifs Function in Telerik Reporting Expressions\nDESCRIPTION: Shows how to use the Ifs function to evaluate multiple conditions and return corresponding values. This example demonstrates replacing nested If statements with a single Ifs function.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/conditional-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n=Ifs(Fields.A >= 10, \"Green\", Fields.A >= 1, \"Gray\", \"Red\")\n```\n\n----------------------------------------\n\nTITLE: Handling Scroll Event in Html5 Report Viewer with JavaScript\nDESCRIPTION: This code snippet demonstrates how to handle the scroll event on a specific element in the Html5 Report Viewer when in SINGLE_PAGE mode. The implementation attaches an event handler to the element with CSS class `trv-page-container` and checks whether the scroll position indicates reaching the end or the beginning of the page. It uses viewer commands `goToNextPage` and `goToPrevPage` to facilitate page navigation. Dependencies include jQuery for element selection and event handling, and the viewer commands require the reportDocument to be rendered and initialized.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/move-to-next-page-with-scroll-in-html5-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onRenderingEnd(e, args) {\n   var changedPage = false;\n    $('.trv-page-container').scroll(function (e) {\n        var elem = $(e.currentTarget);\n        if (elem[0].scrollHeight - elem.scrollTop() - elem.outerHeight() < 1) {\n            var rv = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n            rv.commands.goToNextPage.exec();\n            changedPage = true;\n        } else {\n            if (!changedPage && elem.scrollTop() === 0) {\n                var rv = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n                if (rv.currentPage() > 1) {\n                    rv.commands.goToPrevPage.exec();\n                }\n            }\n            changedPage = false;\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: ReportsController Implementation in ASP.NET MVC (VB.NET)\nDESCRIPTION: This code snippet demonstrates how to implement the ReportsController in an ASP.NET MVC application using VB.NET.  It mirrors the C# implementation, showing inheritance from ReportsControllerBase, setting the ReportServiceConfiguration, and resolving report definitions. The code requires references to Telerik.Reporting and Telerik.Reporting.Services.WebApi assemblies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/how-to-implement-the-reportscontroller-in-an-application.md#2025-04-21_snippet_1\n\nLANGUAGE: vbnet\nCODE:\n```\nImports System.Web.Http\nImports Telerik.Reporting.Cache.File\nImports Telerik.Reporting.Services\nImports Telerik.Reporting.Services.WebApi\n\nNamespace MvcVB.Controllers\n    Public Class ReportsController\n        Inherits ReportsControllerBase\n        Private Shared reportServiceConfigurationValue As ReportServiceConfiguration\n\n        Shared Sub New()\n            'This is the folder that contains Reports definitions\n            Dim reportsPath As String = HostingEnvironment.MapPath(\"~/Reports\")\n\n            'Uncomment to use the default FileStorage implementation. You may optionally specify a path to persist reports.\n            'The default path is in the %TEMP% folder under the user name that the application runs under.\n            'The storage folder of the FileStorage component can be set through the constructor parameter:\n            'Dim storagePath As String = HostingEnvironment.MapPath(\"~/ReportCache\")\n            'Dim storage = New FileStorage(storagePath)\n\n            'Pass a custom storage implementation (e.g. DatabaseStorage) in order to persist report documents. Note that the storage must be initialized.\n            'The initialization requires a connection string to the storage database, and a DDL script for the database schema.\n            'Refer to the DatabaseStorage class documentation for more details.\n            'Dim storage = New DatabaseStorage(connectionString)\n\n\n            'Initialize the ReportServiceConfiguration object with the needed dependencies.\n            reportServiceConfigurationValue = New ReportServiceConfiguration With {\n                .ReportingEngineConfiguration = Configuration.Current.ReportingConfiguration,\n                .ReportResolver = New ReportFileResolver(reportsPath).AddFallbackResolver(New ReportTypeResolver()),\n                .Storage = New FileStorage()\n            }\n        End Sub\n\n        Public Sub New()\n            'Initialize the ReportServiceConfiguration object.\n            Me.ReportServiceConfiguration = reportServiceConfigurationValue\n        End Sub\n    End Class\nEnd Namespace\n```\n\n----------------------------------------\n\nTITLE: Installing Epel Repository on CentOS and Amazon Linux\nDESCRIPTION: Commands for installing the Epel repository which contains the libgdiplus library. Includes an alternative manual update method if the standard installation doesn't work.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-install-libgdiplus-centos-amazon-linux.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install epel-release -y\n# Note: if 'yum install epel-release' doesn't work for you, try manually update the source\n# rpm -ihv --nodeps https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\n```\n\n----------------------------------------\n\nTITLE: Configuring React Report Viewer with Custom Template\nDESCRIPTION: Code snippet showing how to set up a TelerikReportViewer component with a custom template URL and report source configuration. The templateUrl property points to the custom template file while reportSource specifies the report file and parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/customizing/custom-report-viewer-template.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<TelerikReportViewer\n\t\tref={el => viewer = el}\n\t\ttemplateUrl=\"telerikReportViewerTemplate-VERSION.html/\"\n\t\treportSource={{\n\t\t\treport: 'MyReport.trdp',\n\t\t\tparameters: {}\n\t\t}}\n\t\t>\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings as Array in JSON Format\nDESCRIPTION: Example of configuring database connection strings as an array in JSON format. This format uses an array of objects, each containing name, connectionString, and providerName properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t//...\n\t\"ConnectionStrings\": [\n\t{\n\t\t\"name\": \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\",\n\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\"providerName\": \"System.Data.SqlClient\"\n\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Designer Component in Razor Page\nDESCRIPTION: This HTML snippet demonstrates placing the Telerik Web Report Designer component in a Razor page, with specific layout, scale mode, and report viewer options. The report source is indicated through the 'ServiceUrl' and 'Report' properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-blazor-application.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n@page \"/\"\n\t@* For Blazor Web Apps, an interactive render mode should be used, for example: *@\n\t@* @rendermode InteractiveServer *@\n\t@using Telerik.WebReportDesigner.Blazor\n\n\t<style>\n\t\t#wrd1 {\n\t\t\tposition: relative;\n\t\t\twidth: 1300px;\n\t\t\theight: 880px;\n\t\t\tpadding-right: 50px;\n\t\t}\n\t</style>\n\t@* Create the WebReportDesignerWidget *@\n\t<WebReportDesigner DesignerId=\"wrd1\"\n\t\t\t\tServiceUrl=\"/api/reportdesigner\"\n\t\t\t\tReport=\"SampleReport.trdp\"\n\t\t\t\tReportViewerOptions=\"@(new ReportViewerOptions() {\n\t\t\t\t\ttemplateUrl = \"api/reportdesigner/resources/templates/telerikReportViewerTemplate.html\",\n\t\t\t\t\tscaleMode = ScaleMode.Specific,\n\t\t\t\t\tscale = 1.0,\n\t\t\t\t\tpageMode = PageMode.ContinuousScroll,\n\t\t\t\t\tviewMode = ViewMode.Interactive\n\t\t\t\t})\"\n\t\t\t\tToolboxArea=\"new ToolboxAreaOptions() { Layout = ToolboxAreaLayout.List }\"\n\t\t\t\tPropertiesArea=\"new PropertiesAreaOptions() { Layout = PropertiesAreaLayout.Categorized }\" />\n```\n\n----------------------------------------\n\nTITLE: Complete Report Server Viewer Configuration\nDESCRIPTION: Full JavaScript configuration for HTML5 Report Viewer with Report Server integration, including server URL, authentication, and report source settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/how-to-use-html5-report-viewer-with-report-server.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n\t\t.telerik_ReportViewer({\n\t\t\treportServer: {\n\t\t\t\turl: \"https://yourReportServerUrl:port\",\n\t\t\t\tusername: null,\n\t\t\t\tpassword: null\n\t\t\t},\n\t\t\t//templateUrl: '/ReportViewer/templates/telerikReportViewerTemplate-{{buildversion}}.html',\n\t\t\treportSource: {\n\t\t\t\t// The report value should contain the Category and ReportName in the following format\n\t\t\t\t// {Category/ReportName}\n\t\t\t\treport: \"Samples/Dashboard\"\n\t\t\t\tparameters: {\n\t\t\t\t\tReportYear: 2004\n\t\t\t\t}\n\t\t\t}\n\t\t});\n```\n\n----------------------------------------\n\nTITLE: Setting Report Source in WinForms Form Load Event\nDESCRIPTION: This C# code snippet demonstrates how to set the Report Source for a Telerik ReportViewer control in the Form_Load event of a WinForms application. It uses UriReportSource to specify the location of the report file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/connecting-to-mssql-database-in-net-core-winforms-application.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Form1_Load(object sender, EventArgs e)\n{\n    reportViewer1.ReportSource = new Telerik.Reporting.UriReportSource()\n    {\n        Uri = \"path/to/your/report.trdx\"\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Singleton Services and Report Configuration\nDESCRIPTION: This snippet sets up singleton service configurations for ReportService and ReportDesignerService within a Blazor project. It defines paths for storage and resolves report source configurations. Assumes necessary directory structure like 'Reports' folder is present.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-blazor-application.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nbuilder.Services.TryAddSingleton<IReportServiceConfiguration>(sp => new ReportServiceConfiguration\n\t{\n\t\tReportingEngineConfiguration = sp.GetService<IConfiguration>(),\n\t\tHostAppId = \"BlazorWebReportDesignerDemo\",\n\t\tStorage = new FileStorage(),\n\t\tReportSourceResolver = new UriReportSourceResolver(Path.Combine(sp.GetService<IWebHostEnvironment>().WebRootPath, \"Reports\"))\n\t});\n\tbuilder.Services.TryAddSingleton<IReportDesignerServiceConfiguration>(sp => new ReportDesignerServiceConfiguration\n\t{\n\t\tDefinitionStorage = new FileDefinitionStorage(Path.Combine(sp.GetService<IWebHostEnvironment>().ContentRootPath, \"Reports\")),\n\t\tSettingsStorage = new FileSettingsStorage(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"Telerik Reporting\")),\n\t\tResourceStorage = new ResourceStorage(Path.Combine(sp.GetService<IWebHostEnvironment>().ContentRootPath, \"Resources\")),\n\t\tSharedDataSourceStorage = new FileSharedDataSourceStorage(Path.Combine(sp.GetService<IWebHostEnvironment>().ContentRootPath, \"Reports\", \"Shared Data Sources\")),\n\t});\n```\n\n----------------------------------------\n\nTITLE: Adding Table Footer Totals in C#\nDESCRIPTION: Optional C# code extension that adds a totals row to the table footer. Demonstrates how to add aggregates for numerical fields in the table.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-modify-table-with-preset-styles-and-width-dynamically.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvoid FormatTableBasedOnColumnNames(Table table, IList<string> columnNames, bool addTotalRow)\n{\n\tif (addTotalRow)\n\t{\n\t\tTableGroup totalsRowGroup = new TableGroup();\n\t\ttotalsRowGroup.Name = \"TotalsRowGroup\";\n\t\ttable.RowGroups.Add(totalsRowGroup);\n\t}\n```\n\n----------------------------------------\n\nTITLE: Printing Report in HTML5 Report Viewer with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to trigger the print command in the HTML5 Report Viewer using jQuery. It attaches a click event handler to a button that, when clicked, retrieves the Report Viewer instance and executes its `print` command. This relies on the Telerik Reporting library and jQuery.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-a-report-programmatically.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('#printButton').click(function () {\n\tvar rv = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n\trv.commands.print.exec();\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding CreateDocument Method with Authorization in ASP.NET\nDESCRIPTION: This code snippet shows how to implement the [RESTAuthorize] attribute in an override of the CreateDocument method for the ReportsController in an ASP.NET application, allowing for control over authorization at the method level.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reporting-rest-service-authorization.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n[RESTAuthorize]\n\tpublic override HttpResponseMessage CreateDocument(string clientID, string instanceID, CreateDocumentArgs args)\n\t{\n\t\treturn base.CreateDocument(clientID, instanceID, args);\n\t}\n```\n\n----------------------------------------\n\nTITLE: Performing Search in a Document via HTTP POST - REST API\nDESCRIPTION: This snippet demonstrates how to make a POST request to search for a token within a report document using the Telerik Reporting REST API. The client ID, instance ID, and document ID are required as path parameters. The request body should include the search parameters, such as searchToken and options for match case, whole word, and use of regular expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/search-in-a-document.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /api/reports/clients/f3c380da635/instances/c71aeb824cf/documents/495ff8766803332209ef12/search HTTP/1.1\n{\n\t\"searchToken\": \"foo\",\n\t\"matchCase\": false,\n\t\"matchWholeWord\": false,\n\t\"useRegularExpressions\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling pageReady Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `pageReady` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `pageReady` event is emitted when the viewer content has been loaded from the template and is ready to display reports or perform any other operations on it.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(pageReady)=\"pageReady($event)\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Adding Assembly Binding Redirect for ADOMD.NET in XML Configuration\nDESCRIPTION: XML configuration snippet showing how to add assembly binding redirect for Microsoft.AnalysisServices.AdomdClient when using a version different from 10.0.0.0. This needs to be added to the start application's configuration file or Visual Studio's devenv.exe.config for ClassLibrary projects.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/configuring-your-project-for-using-microsoft-analysis-services.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"Microsoft.AnalysisServices.AdomdClient\"\n\t\t\t\tpublicKeyToken=\"89845dcd8080cc91\"\n\t\t\t\tculture=\"neutral\" />\n\t\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\"\n\t\t\t\tnewVersion=\"<Your Version>\" />\n\t\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Passing Culture in WPF/WinForms with Telerik Reporting in C#\nDESCRIPTION: This C# code snippet demonstrates how to set the culture on the Telerik Reporting REST Service using the RenderingBegin event in WPF or WinForms report viewers. It requires the Telerik.ReportViewer.Common library and involves setting 'CurrentCulture' and 'CurrentUICulture' in the DeviceInfo object within the RenderingBeginEventArgs.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pass-culture-from-report-viewer-to-rest-service.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nprivate void ReportViewer1_RenderingBegin(object sender, Telerik.ReportViewer.Common.RenderingBeginEventArgs args) {\n    string culture = \"yourCulture\";\n    args.DeviceInfo[\"CurrentCulture\"] = culture;\n    args.DeviceInfo[\"CurrentUICulture\"] = culture;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth_ActionEnter Handler Method - CSharp\nDESCRIPTION: The method responds to interactive actions when the mouse enters an action area, changing visual properties of elements and updating tooltips with country information. It checks the Action.ReportItemName to distinguish action types and customize behavior accordingly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-wpf-report-viewer.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nvoid Choropleth_ActionEnter( object sender, Telerik.ReportViewer.Wpf.InteractiveActionEventArgs args)\n{\n\tif (args.Action.ReportItemName == \"textBoxTitle\" )\n\t{\n\t\tvar b = args.Element as System.Windows.Controls.Border;\n\t\tif ( null != b)\n\t\t{\n\t\t\tb.BorderThickness = new Thickness(0, 0, 0, 1.33);\n\t\t\tb.BorderBrush = System.Windows.Media.Brushes.RoyalBlue;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar p = args.Element as System.Windows.Shapes.Path;\n\t\tif (p != null )\n\t\t{\n\t\t\tthis .fillBrush = p.Fill;\n\t\t\tthis .stroke = p.Stroke;\n\t\t\tp.Stroke = System.Windows.Media.Brushes.SaddleBrown;\n\t\t\tp.Fill = System.Windows.Media.Brushes.MediumSeaGreen;\n\t\t}\n\t\tvar action = args.Action as Telerik.Reporting.Processing.CustomAction;               \n\t\tif ( null != action)\n\t\t{\n\t\t\tp.ToolTip = this .GetCountryInfo(action.Parameters);\n\t\t}\n\t}\n}\n\nstring GetCountryInfo(System.Collections.Generic.IDictionary< string , object > paramValues)\n{\n\tvar strB = new System.Text.StringBuilder();\n\tstrB.AppendFormat( \"Country: {0}{1}\" , paramValues[ \"country\" ], Environment.NewLine);\n\tstrB.AppendFormat( \"Area: {0} km²{1}\" , paramValues[ \"area\" ], Environment.NewLine);\n\tstrB.AppendFormat( \"Population: {0}{1}\" , paramValues[ \"population\" ], Environment.NewLine);\n\tstrB.AppendFormat( \"Density: {0} ppl/km²\" , paramValues[ \"populationDensity\" ]);\n\treturn strB.ToString();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling parametersLoaded Event in Angular Viewer\nDESCRIPTION: Shows how to implement the parametersLoaded event handler which is triggered after the Get Report Parameters request is made. The event provides access to the report parameter values through the event object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_21\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(parametersLoaded)=\"parametersLoaded($event)\">\n</reporting-angular-viewer>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\nimport { ReportParameterInfo } from '@progress/telerik-common-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\tparametersLoaded(e: ReportParameterInfo[]) {\n\t\t\tconsole.log(\"An array of the parameter values is sent via the event object.\", e);\n\t\t\tconsole.log(\"This event will be emitted after the Get Report Parameters request is made.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Querying Sales Data from AdventureWorks Database in SQL\nDESCRIPTION: This SQL query retrieves sales data including sales person name, order year, and product category from the AdventureWorks database. It joins multiple tables to gather the required information for the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/how-to-nest-a-graph-item-in-a-table-item.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\tC.FirstName + ' ' + COALESCE (C.MiddleName, '') + ' ' + C.LastName AS SalesPersonName\n\t\t, YEAR(SOH.OrderDate) as OrderYear\n\t\t, PC.Name as CategoryName\n\t\tFROM\n\t\tSales.SalesPerson AS SP\n\t\tINNER JOIN Sales.SalesOrderHeader AS SOH ON SOH.SalesPersonID = SP.SalesPersonID\n\t\tINNER JOIN Sales.SalesOrderDetail AS SOD ON SOD.SalesOrderID = SOH.SalesOrderID\n\t\tINNER JOIN Production.Product AS P ON P.ProductID = SOD.ProductID\n\t\tINNER JOIN Production.ProductSubcategory AS PSC ON PSC.ProductSubcategoryID = P.ProductSubcategoryID\n\t\tINNER JOIN Production.ProductCategory AS PC ON PC.ProductCategoryID = PSC.ProductCategoryID\n\t\tINNER JOIN HumanResources.Employee AS E ON E.EmployeeID = SP.SalesPersonID\n\t\tINNER JOIN Person.Contact AS C ON C.ContactID = E.ContactID\n```\n\n----------------------------------------\n\nTITLE: Creating a Telerik ReportViewer in JavaScript\nDESCRIPTION: Demonstrates how to initialize a Telerik ReportViewer with basic configuration options. It sets the service URL, template URL, and specifies the report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/report-viewer-initialization.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\").telerik_ReportViewer({\n\tserviceUrl: \"api/reports\",\n\ttemplateUrl: 'src/templates/telerikReportViewerTemplate-{{buildversion}}.html',\n\treportSource: { report: \"Product Catalog.trdp\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom IReportDocumentResolver in C#\nDESCRIPTION: This code snippet demonstrates how to implement a custom IReportDocumentResolver interface to decrypt connection strings for SqlDataSource components in Telerik Reporting SubReports or reports loaded through Navigate To Report action. The Resolve method identifies UriReportSource, unpacks the report, retrieves SqlDataSources, decrypts connection strings using configuration, and returns the modified Report object.  It relies on a configuration object for accessing encrypted connection strings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-encrypted-connection-strings-telerik-reporting.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nusing System.IO;\nusing System;\nusing Telerik.Reporting;\nusing Telerik.Reporting.Services;\nusing System.Linq;\nusing Microsoft.Extensions.Configuration;\n\nnamespace CSharp.Net8.Html5IntegrationDemo\n{\n    public class CustomDocumentResolver(IConfiguration configuration) : IReportDocumentResolver\n    {\n        private IConfiguration _configuration = configuration;\n        readonly string BaseDir = \"C:\\\\Reports\";\n        public IReportDocument Resolve(ReportSource reportSource)\n        {\n            // The main report is wrapped in an InstanceReportSource by CustomReportSourceResolver\n            if (reportSource is InstanceReportSource)\n            {\n                return (reportSource as InstanceReportSource).ReportDocument;\n            }\n            // the subreport is resolved in the context of the main report SubReport\n            else if (reportSource is UriReportSource)\n            {\n                var reportPackager = new ReportPackager();\n                var uri = (reportSource as UriReportSource).Uri.Replace(AppDomain.CurrentDomain.BaseDirectory, string.Empty);\n\n                var reportPacker = new ReportPackager();\n                Report report = null;\n\n                using (var sourceStream = System.IO.File.OpenRead(Path.Combine(BaseDir, uri)))\n                {\n                    report = (Report)reportPacker.UnpackageDocument(sourceStream);\n                }\n\n                var sqlDataSources = report.GetDataSources().OfType<SqlDataSource>();\n\n                foreach (var sqlDataSource in sqlDataSources)\n                {\n                    string encryptedConnectionString = _configuration.GetSection($\"ConnectionStrings:{sqlDataSource.ConnectionString}\").Value; // Get the encrypted connection string from the config\n                    sqlDataSource.ConnectionString = DecryptClass.DecryptConnectionString(encryptedConnectionString); // Decrypt the connection string and assign it to the SqlDataSource component \n                }\n\n                return report;\n            }\n            return null;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Report Viewer Styling\nDESCRIPTION: CSS styles for the Report Viewer component layout and positioning\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-html5-viewer-in-react-js.md#2025-04-21_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n\t\tfont-family: Verdana, Arial;\n\t\tmargin: 5px;\n\t}\n\n\t#reportViewer1 {\n\t\tposition: absolute;\n\t\ttop: 70px;\n\t\tbottom: 10px;\n\t\tleft: 10px;\n\t\tright: 10px;\n\t\toverflow: hidden;\n\t\tclear: both;\n\t}\n```\n\n----------------------------------------\n\nTITLE: Initializing Report Viewer with Custom Parameter Editors in ASP.NET MVC\nDESCRIPTION: Configures a Telerik Report Viewer with custom parameter editors using the ParameterEditors method, setting up SingleSelectEditor and NumberEditor for parameter validation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-validate-report-parameters-on-the-client.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n@(Html.TelerikReporting().ReportViewer()\n\t\t.Id(\"reportViewer1\")\n\t\t.ServiceUrl(Url.Content(\"~/api/reports\"))\n\t\t.ReportSource(new UriReportSource() { Uri = \"TestReport.trdp\" })\n\t\t.ViewMode(ViewMode.Interactive)\n\t\t.ScaleMode(ScaleMode.Specific)\n\t\t.Scale(1.0)\n\t\t.ParameterEditors(\n\t\t\t\teditors => editors\n\t\t\t\t\t.SingleSelectEditor(\"createSingleSelectEditor\")\n\t\t\t\t\t.NumberEditor(\"createNumberEditor\")\n\t\t\t)\n\t)\n```\n\n----------------------------------------\n\nTITLE: Parameter Value Assignment Expression\nDESCRIPTION: Expression to set textbox values in table header cells using report parameters\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/switch-hide-show-table-columns.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\n= Parameters.Column1.Value\n```\n\n----------------------------------------\n\nTITLE: Accessing Report Items from Events in C#\nDESCRIPTION: This snippet demonstrates how to access a TextBox item from within the ItemDataBinding event handler of a report's detail section using the ElementTreeHelper.GetChildByName() method. It focuses on using Processing.TextBox during report processing instead of defining report items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/access-report-items-programmatically.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Example code snippet for accessing report items from events in C#\n// This is a placeholder for the actual code.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Parameter Editor for DateTime in HTML5 MVC Report Viewer\nDESCRIPTION: This script sets up a custom parameter editor for a DateTime parameter in the HTML5 MVC Report Viewer. It replaces the default editor with a custom date picker input formatted to a specified date format. Dependencies include jQuery and Kendo UI components. Key parameter: parameter determines if the editor applies to DateTime types.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-change-report-parameter-date-format-in-html5-mvc-report-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n\tfunction customMatch(parameter) {\n\t\treturn parameter.type === \"System.DateTime\";\n\t}\n\n\tfunction createCustomEditor(placeholder, options) {\n\t\t$(placeholder).html('<input type=\"datetime\"/>');\n\t\tvar datePicker = $(placeholder),\n\t\t\t\t\tparameter,\n\t\t\t\t\tvalueChangedCallback = options.parameterChanged,\n\t\t\t\t\tdropDownList;\n\n\t\tfunction onChange() {\n\t\t\tvar dtv = this.value();\n\t\t\tvalueChangedCallback(parameter, dtv);\n\t\t}\n\n\t\treturn {\n\t\t\tbeginEdit: function (param) {\n\t\t\t\tparameter = param;\n\t\n\t\t\t\tvar dt = null;\n\t\t\t\ttry {\n\t\t\t\t\tif (param.value) {\n\t\t\t\t\t\tdt = param.value;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdt = null;\n\t\t\t\t}\n\n\t\t\t\t$(datePicker).find(\"input\").kendoDatePicker({\n\t\t\t\t\tformat: \"MM/dd/yyyy\",//SPECIFY THE DATE FORMAT HERE\n\t\t\t\t\tchange: onChange,\n\t\t\t\t\tvalue: dt\n\t\t\t\t});\n\t\n\t\t\t\tdropDownList = $(datePicker).find(\"input\").data(\"kendoDatePicker\");\n\t\t\t}\n\t\t};\n\t}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Shape Class in C#\nDESCRIPTION: Creates a new class that inherits from ShapeBase to represent a custom shape in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-custom-shape.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nclass MyCustomShape : Telerik.Reporting.Drawing.Shapes.ShapeBase\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Action Handlers in JavaScript for HTML5 Report Viewer\nDESCRIPTION: This snippet implements three interactive handlers for different user actions in the HTML5 report viewer. It confirms navigation actions and alters styles when mouse hovers over report elements.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-with-html5-based-report-viewers.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ninteractiveActionExecuting: function (e, args) {\n\tif (args.action.Type === 'navigateToReport') {\n\t\targs.cancel = !confirm(\"You are about to navigate to report \" + args.action.Value.Report + \".\\r\\n\\nContinue?\");\n\t}\n},\ninteractiveActionEnter: function (e, args) {\n\tif (args.action.Type === 'navigateToReport') {\n\t\t$(args.element).css({ 'font-weight': 'bolder', 'background-color': 'darkSeaGreen' });\n\t}\n},\ninteractiveActionLeave: function (e, args) {\n\tif (args.action.Type === 'navigateToReport') {\n\t\t$(args.element).css({ 'font-weight': 'normal', 'background-color': 'white' });\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DbContext for Report Storage in C#\nDESCRIPTION: Creates a custom DbContext for handling database operations with Report and ReportFolder entities. Includes connection string configuration and DbSet definitions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/implement-database-definition-storage-efcore.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nusing CSharp.Net7.Html5IntegrationDemo.EFCore.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace CSharp.Net7.Html5IntegrationDemo.EFCore\n{\n\tpublic class SqlDefinitionStorageContext : DbContext\n\t{\n\t\tpublic DbSet<Report> Reports { get; set; }\n\n\t\tpublic DbSet<ReportFolder> ReportFolders { get; set; }\n\n\t\tpublic SqlDefinitionStorageContext(DbContextOptions<SqlDefinitionStorageContext> options) : base(options) { }\n\n\t\tprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n\t\t{\n\t\t\tif (!optionsBuilder.IsConfigured)\n\t\t\t{\n\t\t\t\tvar connenctionString = @\"Server=.\\SQLEXPRESS;Database=DefinitionStorage;Trusted_Connection=True;TrustServerCertificate=True;\";\n\t\t\t\toptionsBuilder.UseSqlServer(connectionString);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic EntityDataSource Setup in C#\nDESCRIPTION: Demonstrates the minimum code necessary to setup the EntityDataSource component using an ObjectContext/DbContext and a member.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/configuring-the-database-connectivity-with-the-entitydatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nentityDataSource.EntityContextType = typeof(AdventureWorksContext);\nentityDataSource.EntityMember = \"Employees\";\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Axis Scale Maximum Using Bindings in Telerik Reporting\nDESCRIPTION: This expression sets the Y-axis scale maximum to 10% above the highest data point value. It uses the Max function to find the highest SalesAmount, then adds 10% to that value. The result is cast to double to match the property type.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/graph-bindings-to-control-coordinate-system-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n=CDbl(Max(Fields.SalesAmount) + Max(Fields.SalesAmount) * 0.1)\n```\n\n----------------------------------------\n\nTITLE: Creating Async Report Rendering Wrapper Class\nDESCRIPTION: Implementation of an async wrapper class that encapsulates the ReportProcessor's RenderReport method using Task<RenderingResult>. The wrapper method accepts a report type parameter and returns the rendering result asynchronously.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-render-reports-asynchronously-by-using-the-async-and-await-keywords.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class AsyncWrappers\n{\n    // Wrap the RenderingResult like this:\n    public async Task<RenderingResult> RenderReportAsync(Type reportType) // Pass parameters here, like device info and report to render\n    {\n        ReportProcessor reportProcessor = new ReportProcessor();\n \n        // Apply any deviceInfo settings if necessary\n        Hashtable deviceInfo = new Hashtable();\n \n        // Any other Report Source can be used instead\n        // For example InstanceReportSource can be used if the instantiated report is passed as parameter of the method\n        TypeReportSource typeReportSource = new TypeReportSource();\n \n        typeReportSource.TypeName = reportType.AssemblyQualifiedName;\n \n        return await Task.Run(() => reportProcessor.RenderReport(\"PDF\", typeReportSource, deviceInfo));\n    }\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Class AsyncWrappers\n    ' Wrap the RenderingResult like this:\n    Public Function RenderReportAsync(reportType As Type) As Task(Of RenderingResult)\n    ' Pass parameters here, like device info and report to render\n        Dim reportProcessor As New ReportProcessor()\n  \n        ' Apply any deviceInfo settings if necessary\n        Dim deviceInfo As New Hashtable()\n  \n        ' Any other Report Source can be used instead\n        ' For example InstanceReportSource can be used if the instantiated report is passed as parameter of the method\n        Dim typeReportSource As New TypeReportSource()\n  \n        typeReportSource.TypeName = reportType.AssemblyQualifiedName\n  \n        Return Await Task.Run(Function() reportProcessor.RenderReport(\"PDF\", typeReportSource, deviceInfo))\n    End Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to All Responses in .NET 6/7 REST Service\nDESCRIPTION: This code snippet shows how to configure a .NET 6/7 application to add custom headers to all responses, including those from the Reporting REST Service. It uses middleware to intercept and modify responses.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-custom-headers-to-responses-of-rests-service.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar app = builder.Build();\n\napp.Use(async (context, next) =>\n{\n\tcontext.Response.OnStarting(() =>\n\t{\n\t\tcontext.Response.Headers.Add(\"cross-origin-embedder-policy\", \"require-corp\");\n\t\treturn Task.FromResult(0);\n\t});\n\n\tawait next();\n});\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Report Source from HTML5 Report Viewer\nDESCRIPTION: Demonstrates how to get the current report source from an HTML5 Report Viewer instance. The method returns an object containing the report configuration and parameter values that are currently active in the viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/reportsource().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nvar rs = reportViewer.reportSource();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Injection for ReportServiceConfiguration in .NET Core\nDESCRIPTION: Shows how to configure the ReportServiceConfiguration as a Singleton in the Dependency Injection container for .NET Core applications\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-report-source-resolver/how-to-implement-a-custom-report-source-resolver.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.TryAddSingleton<IReportServiceConfiguration>(sp =>\n    new ReportServiceConfiguration\n    {\n        ReportingEngineConfiguration = sp.GetService<IConfiguration>(),\n        HostAppId = \"ReportingNet6\",\n        Storage = new FileStorage(),\n        ReportSourceResolver = new TypeReportSourceResolver()\n            .AddFallbackResolver(new UriReportSourceResolver(reportsPath)\n                .AddFallbackResolver(new CustomReportSourceResolver()))\n    });\n```\n\n----------------------------------------\n\nTITLE: Assign Report Programmatically in C#\nDESCRIPTION: This code snippet demonstrates how to programmatically assign a report to the Telerik ReportViewer control in a Windows Forms application using C#. It creates an instance of a report source, sets its ReportDocument property to a report instance, assigns the report source to the ReportViewer's ReportSource property, and refreshes the ReportViewer to display the report. This code requires a reference to the Telerik Reporting library and a report definition.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/how-to-add-manually-report-viewer-to-a-windows-forms'-.net-framework-project.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n \"Telerik.Reporting.InstanceReportSource instanceReportSource = new Telerik.Reporting.InstanceReportSource();\ninstanceReportSource.ReportDocument = new Telerik.Reporting.Report1();\nthis.reportViewer1.ReportSource = instanceReportSource;\nthis.reportViewer1.RefreshReport();\"\n```\n\n----------------------------------------\n\nTITLE: Executing Command to Update Report Source - Angular\nDESCRIPTION: This TypeScript class snippet illustrates the event handler that executes a command to update the report source with new parameter values. The 'onChange' method is triggered when the user selects a different order number, updating the report source accordingly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/customizing/passing-parameter-values.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class AppComponent {\n\t@ViewChild('report') public report: ReportingAngularViewerComponent;\n\n\tonChange(OrderNumber: string) {\n\t\tthis.report.executeCommand(\"setReportSource\", {\n\t\t\treport: \"Invoice.trdx\",\n\t\t\tparameters: {\n\t\t\t\tOrderNumber\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Report PDF in ASP.NET Core\nDESCRIPTION: This C# code snippet demonstrates creating a controller endpoint in an ASP.NET Core application that generates a report in PDF format using Telerik Reporting's ReportProcessor. It takes a report name as input, renders the report to PDF, and returns the PDF file as a response. Dependencies: Telerik.Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-a-report-directly-at-client-side-without-displaying-it-in-a-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class HomeController : Controller\n\t{\n\t\tprivate IWebHostEnvironment _environment;\n\t\n\t\tpublic HomeController(IWebHostEnvironment environment)\n\t\t{\n\t\t\t_environment = environment;\n\t\t}\n\t\n\t\tpublic IActionResult GenerateReportPDF(string reportName)\n\t\t{\n\t\t\tReportProcessor reportProcessor = new ReportProcessor();\n\t\t\tTelerik.Reporting.UriReportSource uriReportSource = new Telerik.Reporting.UriReportSource();\n\t\t\turiReportSource.Uri = Path.Combine(_environment.ContentRootPath, \"Reports\", reportName);\n\t\t\tRenderingResult result = reportProcessor.RenderReport(\"PDF\", uriReportSource, null);\n\t\t\t\n\t\t\treturn File(result.DocumentBytes, result.MimeType);\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Provider in C#\nDESCRIPTION: This code snippet demonstrates how to implement a custom cache provider in C# for Telerik Reporting. It shows the creation of a `MyCacheProvider` class that implements the `ICacheProvider` interface and returns an instance of a custom cache class `MyCache`.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-custom-cache-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Reporting.Cache.Interfaces;\n\nnamespace MyNameSpace\n{\n    public class MyCacheProvider : ICacheProvider\n    {\n        public ICache GetCache()\n        {\n            return new MyCache();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Replacement for Export in HTML5 Viewer\nDESCRIPTION: This code demonstrates how to replace a report when exporting from an HTML5 Report Viewer. It uses a hidden secondary viewer to handle the export process with a different report definition. The solution hooks into the exportBegin event and cancels the default export to trigger a custom one from the secondary viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/replace-report-on-export-in-html5-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n#reportViewer1 {\n            ...\n        }\n\t\t\n        #reportViewer2 {\n            position: absolute;\n            overflow: hidden;\n            clear: both;\n            display: none;\n        }\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<head>\n    ... \n    <style>\n \t...\n\t#reportViewer1 {\n            ...\n        }\n\t\t\n        #reportViewer2 {\n            position: absolute;\n            overflow: hidden;\n            clear: both;\n            display: none;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"reportViewer1\">\n        loading...\n    </div>\n \n    <div id=\"reportViewer2\">\n    </div>\n\t\n   <script type=\"text/javascript\">\n        $(document).ready(function () {\n         \n        \tvar exportReportViewerInstance;\n        \tvar format = \"PDF\";\n \n        \tfunction onExportBegin(e, args) {\n            \t\targs.handled = true;\n            \t\texportReport(\"Barcodes Report.trdp\", args.format);\n        \t}\n \n        \tfunction exportReport(reportName, exportFormat) {\n            \t\tformat = exportFormat;\n \n            \t\tif (!exportReportViewerInstance) {\n                \t\texportReportViewerInstance = $(\"#reportViewer2\").telerik_ReportViewer({\n                        \t\tserviceUrl: \"api/reports\",\n                        \t\treportSource: {\n                            \t\t\treport: reportName\n                        \t\t},\n                        \t\trenderingEnd: function (e, args) {\n                            \t\t\te.target.commands.export.exec(format);\n                        \t\t}\n                    \t\t}).data(\"telerik_ReportViewer\");\n \n            \t\t} else {\n                \t\texportReportViewerInstance.reportSource({\n                    \t\t\treport: reportName\n                \t\t});\n            \t\t}\n        \t}\n\t\t\n\t\t$(\"#reportViewer1\")\n            \t\t.telerik_ReportViewer({\n\t    \t\t\tserviceUrl: \"/api/reports\",\n\t\t\t\texportBegin: onExportBegin,\n\t\t\t\t...\n\t    \t\t})\n\t})\n    </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Cloning and building libgdiplus from source\nDESCRIPTION: These commands demonstrate how to clone the libgdiplus repository and build it from source on Debian-based distributions. It requires several development packages as prerequisites. The process involves running autogen script, making the project, running tests, and installation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-build-and-Install-libgdiplus-linux.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/mono/libgdiplus.git\ncd libgdiplus\n```\n\nLANGUAGE: shell\nCODE:\n```\n./autogen.sh\nmake\n```\n\n----------------------------------------\n\nTITLE: Initializing ReportProcessor with IConfiguration in C#\nDESCRIPTION: This snippet demonstrates how to create an IConfiguration instance and use it to initialize a ReportProcessor. It shows loading configuration from an appsettings.json file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/connecting-the-objectdatasource-component-to-a-data-source.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nIConfiguration configuration = new ConfigurationBuilder()\n\t.SetBasePath(Directory.GetCurrentDirectory())\n\t.AddJsonFile(\"appsettings.json\")\n\t.Build();\n       \nvar reportProcessor = new ReportProcessor(configuration);\n```\n\n----------------------------------------\n\nTITLE: Handling JSON Value Too Large Error in C#\nDESCRIPTION: This snippet shows the C# error log related to the System.ArgumentException that occurs when JSON data is too large to be processed by the Telerik Reporting service. It highlights the method calls leading to the exception. The error is likely caused by the report viewer's attempt to handle large metadata.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/json-length-is-too-large-net-core.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nCSharp.Net6.Html5IntegrationDemo Error: 0 : An error occurred while rendering the report in separate thread: System.ArgumentException: The JSON value of length 174438958 is too large and not supported.\n   at System.Text.Json.ThrowHelper.ThrowArgumentException_ValueTooLarge(Int32 tokenLength)\n   at System.Text.Json.Serialization.Converters.ByteArrayConverter.Write(Utf8JsonWriter writer, Byte[] value, JsonSerializerOptions options)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)\n   at System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1.GetMemberAndWriteJson(Object obj, WriteStack& state, Utf8JsonWriter writer)\n   at System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1.OnTryWrite(Utf8JsonWriter writer, T value, JsonSerializerOptions options, WriteStack& state)\n   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)\n   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)\n   at System.Text.Json.JsonSerializer.WriteUsingSerializer[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo)\n   at System.Text.Json.JsonSerializer.WriteBytesUsingSerializer[TValue](TValue& value, JsonTypeInfo jsonTypeInfo)\n   at Telerik.Reporting.Services.Engine.DocumentResources.AddResource(RenderingResource resource)\n   at Telerik.Reporting.Services.Engine.Document.AddClientSearchItemsResource(IList searchItems)\n   at Telerik.Reporting.Services.Engine.Document.FinishRendering(ReportRendererResult result)\n   at Telerik.Reporting.Services.Engine.Rendering.SaveResult(ReportRendererResult result)\n   at Telerik.Reporting.Services.Engine.CompressPagesRendering.SaveResult(ReportRendererResult result)\n   at Telerik.Reporting.Services.Engine.Rendering.ThreadFunc(Object o)\n```\n\n----------------------------------------\n\nTITLE: Using Default JsonSerializerSettings in ASP.NET Core\nDESCRIPTION: This code snippet shows how to configure the AddNewtonsoftJson method in Program.cs to use default JsonSerializerSettings, which prevents the 'No report instance' error in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resolve-no-report-instance-error-telerik-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddNewtonsoftJson();\n```\n\n----------------------------------------\n\nTITLE: Selecting Data with SQL Query in SqlDataSource\nDESCRIPTION: This SQL query retrieves the first and last names of all persons from the Contact table in the AdventureWorks database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/selecting-data-with-the-sqldatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT FirstName, LastName FROM Person.Contact;\n```\n\n----------------------------------------\n\nTITLE: Controlling Search Metadata Retrieval Strategy\nDESCRIPTION: Configures how search metadata is obtained during report rendering. Allows controlling performance and memory usage by setting SearchMetadataOnDemand property.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/search-in-report-contents.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Default behavior: Search metadata included during initial rendering\nreportViewer.SearchMetadataOnDemand = false;\n\n// On-demand metadata retrieval for large reports\nreportViewer.SearchMetadataOnDemand = true;\n```\n\n----------------------------------------\n\nTITLE: Adding Required Scripts to MAUI Blazor Index.html\nDESCRIPTION: JavaScript references needed in the index.html file for a .NET MAUI Blazor application to support the Telerik Blazor Report Viewer. This includes jQuery, Kendo UI, and the Telerik Report Viewer scripts.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/displaying-telerik-report-in-net-maui-and-maui-blazor-applications.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<head>\n\t…\n\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t\t<script src=\"https://kendo.cdn.telerik.com/{{site.kendosubsetversion}}/js/kendo.all.min.js\"></script>\n\t\t<script src=\"https://demos.telerik.com/reporting/api/reports/resources/js/telerikReportViewer\"></script>\n\t</head>\n\t<body>\n\t…\n\t\t<script src=\"_content/Telerik.ReportViewer.Blazor/interop.js\" defer></script>\n\t</body>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom String Localizer for Telerik Reporting\nDESCRIPTION: Implement a custom string localizer that implements the ITelerikReportingStringLocalizer interface to provide localized strings from resource files\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/customizing/localization.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomStringLocalizer : ITelerikReportingStringLocalizer\n{\n\tpublic string this[string name]\n\t{\n\t\tget\n\t\t{\n\t\t\treturn GetStringFromResource(name);\n\t\t}\n\t}\n\n\tpublic string GetStringFromResource(string key)\n\t{\n\t\treturn Messages.ResourceManager.GetString(key, Messages.Culture);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Viewer Container Style in AppComponent\nDESCRIPTION: This TypeScript code defines a style object for the report viewer container in the AppComponent, specifying layout properties such as position, width, height, and font.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class AppComponent {\n\t\tviewerContainerStyle = {\n\t\t\tposition: 'relative',\n\t\t\twidth: '1000px',\n\t\t\theight: '800px',\n\t\t\t['font-family']: 'ms sans serif'\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Update Logic with JavaScript\nDESCRIPTION: JavaScript code that handles the dropdown change event and updates the report parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('#invoiceId').change(function () {\n\t\tvar viewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n\t\tviewer.reportSource({\n\t\t\treport: viewer.reportSource().report,\n\t\t\tparameters: { OrderNumber: $(\"#invoiceId :selected\").text() }\n\t\t});\n\t\t//setting the HTML5 Viewer's reportSource, causes a refresh automatically\n\t\t//if you need to force a refresh for other case, use:\n\t\t//viewer.refreshReport();\n\t});\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Service with Environment-based Connection in Startup.cs\nDESCRIPTION: This code snippet shows how to register the IReportServiceConfiguration in the dependency injection container with a custom reporting engine configuration. It demonstrates using the ResolveSpecificReportingConfiguration method to load connection settings from environment variables.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-retrieve-the-connection-strings-from-environment-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n// Configure dependencies for ReportsController.\nservices.TryAddSingleton<IReportServiceConfiguration>(sp =>\n\tnew ReportServiceConfiguration\n\t{\n\n\t\t// In case the ReportingEngineConfiguration needs to be loaded from a specific configuration file, use the approach below:\n\t\tReportingEngineConfiguration = ResolveSpecificReportingConfiguration(this.WebHostEnvironment),\n\t\tHostAppId = \"Html5DemoAppCore3\",\n\t\tStorage = new FileStorage(),\n\t\tReportSourceResolver = new TypeReportSourceResolver().AddFallbackResolver(\n\t\t\t\t\t\tnew UriReportSourceResolver(reportsPath))\n\t});\n```\n\n----------------------------------------\n\nTITLE: Importing Report Viewer Module in Standalone Component\nDESCRIPTION: Demonstrates importing the ReportingAngularViewerModule and configuring a standalone Angular component with the report viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-standalone-components.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\n\timport { RouterOutlet } from '@angular/router';\n\timport { ReportingAngularViewerComponent, ReportingAngularViewerModule } from '@progress/telerik-angular-native-report-viewer'\n\n\t@Component({\n\t\tselector: 'app-root',\n\t\tstandalone: true,\n\t\timports: [RouterOutlet, ReportingAngularViewerModule],\n\t\ttemplatePath: './app.component.html',\n\t\tstyleUrl: './app.component.scss'\n\t\t})\n\t\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Localization Services in Blazor Program.cs\nDESCRIPTION: Configure localization services in the Blazor application, setting up supported cultures and default request culture\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/customizing/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddLocalization(options => options.ResourcesPath = \"Resources\");\nbuilder.Services.Configure<RequestLocalizationOptions>(options =>\n{\n\tvar supportedCultures = new List<CultureInfo>()\n\t{\n\t\tnew CultureInfo(\"en-US\"),\n\t\tnew CultureInfo(\"bg-BG\")\n\t};\n\n\toptions.DefaultRequestCulture = new RequestCulture(\"en-US\");\n\n\toptions.SupportedCultures = supportedCultures;\n\toptions.SupportedUICultures = supportedCultures;\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Kendo Culture Scripts in Angular Component Constructor\nDESCRIPTION: This TypeScript code shows how to load Kendo culture scripts in the constructor of an Angular component that uses the Telerik Report Viewer. It references the viewer with ViewChild and calls the loadScript helper function.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-culture-of-date-picker-in-angular-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class ReportViewerComponent implements AfterViewInit {\n\t@ViewChild('viewer1') viewer: TelerikReportViewerComponent;\n\t\n\tconstructor() {\n\t\tthis.loadScript(`http://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/cultures/kendo.culture.bg-BG.min.js`);\n\t}\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Aggregate Function for Distinct Sum in C#\nDESCRIPTION: This code snippet defines a custom aggregate function 'CustomSumAggregate' that sums values for distinct groups. It maintains a list of processed groups to avoid duplicates and accumulates the sum accordingly. The function is designed to be used in Telerik Reporting expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/sum-disctinct-group-values.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[AggregateFunction(Description = \"Disctinct Sum Aggregate\", Name = \"DisctinctSumAggregate\")]\nclass CustomSumAggregate : IAggregateFunction\n{\n\treadonly List<string> coveredGroups = new List<string>();\n\tfloat sum;\n\n\tpublic void Accumulate(object[] values)\n\t{\n\t\t// The aggregate function expects two parameters\n\t\tobject groupObj = values[0];\n\t\tobject totalObj = values[1];\n\n\t\t// null values are not aggregated\n\t\tif (null == groupObj || null == totalObj)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif(coveredGroups.IndexOf(groupObj.ToString()) == -1)\n\t\t{\n\t\t\tcoveredGroups.Add(groupObj.ToString());\n\n\t\t\tfloat.TryParse(totalObj.ToString(), out float total);\n\n\t\t\t// The actual accumulation\n\t\t\tthis.sum += total;\n\t\t}\n\t}\n\n\tpublic object GetValue()\n\t{\n\t\treturn string.Format(\"{0:C}\", this.sum.ToString());\n\t}\n\n\tpublic void Init() {}\n\n\tpublic void Merge(IAggregateFunction aggregateFunction)\n\t{\n\t\tCustomSumAggregate aggregate = (CustomSumAggregate)aggregateFunction;\n\n\t\tif (aggregate.sum > 0)\n\t\t{\n\t\t\tthis.sum += aggregate.sum;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Connection String Constructor to ADO.NET Entity Context Class\nDESCRIPTION: This code demonstrates how to add a constructor that accepts a connection string parameter to an Entity Framework context class. This constructor is required for design-time functionality when using Database First or Model First approaches with the EntityDataSource component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npartial class AdventureWorksContext\n{\n\tpublic AdventureWorksContext(string connectionString) : base(connectionString) {}\n}\n```\n\nLANGUAGE: VB\nCODE:\n```\nPartial Class AdventureWorksContext\n\tPublic Sub New(connectionString As String)\n\t\tMyBase.New(connectionString)\n\tEnd Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Culture for Report Localization in C#\nDESCRIPTION: This C# snippet demonstrates how to set the current thread's `CurrentUICulture` and `CurrentCulture` properties to a specific culture, ensuring that the Telerik report is rendered using the correct localized resources. The culture settings must be applied before creating an instance of the report. The `CultureInfo` constructor takes the culture code of the language to display, such as \"en-US\" or \"es-MX\".\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/globalization/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Threading;\nusing System.Globalization;\n\npublic static void SetThreadCulture(string cultureCode)\n{\n    CultureInfo culture = CultureInfo.CreateSpecificCulture(cultureCode);\n    Thread.CurrentThread.CurrentCulture = culture;\n    Thread.CurrentThread.CurrentUICulture = culture;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying IsValidXhtml Method in VB Event Handlers\nDESCRIPTION: This VB snippet shows how to use the IsValidXhtml method within the HtmlTextBox ItemDataBinding event handler. This approach requires handling events to validate XHTML content. Ensure XHTML content is valid during data binding events.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/htmltextbox/xhtml-validation.md#2025-04-21_snippet_3\n\nLANGUAGE: VB\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\Processing\\HtmlTextBoxSnippets.vb region=Validate_Xhtml_Using_Event_And_IsValidXhtml_Snippet}}\n```\n\n----------------------------------------\n\nTITLE: Handling currentPageChanged Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `currentPageChanged` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `currentPageChanged` event is emitted when the viewer changes its currently displayed page.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\tcurrentPageChanged(e: { page number, reportDocumentId: string }) {\n\t\t\tconsole.log(\"The page number and document id\", e)\n\t\t\tconsole.log(\"This event will be emitted when the viewer changes its currently displayed page.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Unbinding Event Handlers in HTML5 Report Viewer\nDESCRIPTION: Demonstrates how to bind and later unbind an event handler for the PAGE_READY event in the HTML5 Report Viewer. The example shows getting the viewer instance, binding a console logging function, and then unbinding it.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/unbind(eventname,-eventhandler).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onPageReady(e) {\n\tconsole.log('page ready!');\n}\n\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.bind(telerikReportViewer.Events.PAGE_READY, onPageReady);\n\n// later\nreportViewer.unbind(telerikReportViewer.Events.PAGE_READY, onPageReady);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Aggregate Function in VB.NET\nDESCRIPTION: This code snippet shows the implementation of a custom aggregate function 'Concatenate' in VB.NET. It implements the IAggregateFunction interface and uses the AggregateFunctionAttribute to define the function name for use in expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/extending-expressions/user-aggregate-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n<AggregateFunction(Name:=\"Concatenate\")> _\nPublic Class ConcatenateAggregateFunction\n    Implements IAggregateFunction\n    Private sb As New StringBuilder()\n\n    Public Sub Accumulate(ByVal values As Object()) Implements IAggregateFunction.Accumulate\n        If values(0) IsNot Nothing Then\n            sb.Append(values(0).ToString())\n        End If\n    End Sub\n\n    Public Sub Merge(ByVal aggregateFunction As IAggregateFunction) Implements IAggregateFunction.Merge\n        Dim agg As ConcatenateAggregateFunction = DirectCast(aggregateFunction, ConcatenateAggregateFunction)\n        Me.sb.Append(agg.sb.ToString())\n    End Sub\n\n    Public Function GetValue() As Object Implements IAggregateFunction.GetValue\n        Return sb.ToString()\n    End Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Importing TelerikReportingModule in Angular Module - TypeScript\nDESCRIPTION: This TypeScript snippet imports the TelerikReportingModule into the root module of the Angular application, which allows the usage of the report viewer component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-report-server.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TelerikReportingModule } from '@progress/telerik-angular-report-viewer';\n\t...\n\timports: [TelerikReportingModule]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Mode in HTML5 Report Viewer using JavaScript\nDESCRIPTION: This snippet demonstrates how to get the current page mode of a Telerik HTML5 Report Viewer. It uses jQuery to select the report viewer element and calls the pageMode() method on the viewer instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/pagemode().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nvar psm = reportViewer.pageMode();\n```\n\n----------------------------------------\n\nTITLE: Resolving DocumentFormat.OpenXml Version Compatibility\nDESCRIPTION: Provides specific version recommendations for resolving OpenXML export issues in Telerik Reporting. Addresses compatibility conflicts between Telerik Reporting and DocumentFormat.OpenXml library versions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/exporting-reports-excel-not-working-after-upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nFor Telerik Reporting prior to 2024 Q1 (18.0.24.130):\n- Use DocumentFormat.OpenXml version 2.7.2 or higher, but lower than 3.0.0\n\nFor Telerik Reporting 18.0.24.130 or newer:\n- Reference Telerik.Reporting.OpenXmlRendering.3.0.1\n- Use DocumentFormat.OpenXml version 3.0.1 or newer\n```\n\n----------------------------------------\n\nTITLE: Activating CORS Policy in C#\nDESCRIPTION: This C# code activates the previously defined CORS policy named \"ReportingRestPolicy\" for the application. This enables the policy and applies its rules to incoming requests.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_10\n\nLANGUAGE: CSharp\nCODE:\n```\n````CSharp\napp.UseCors(\"ReportingRestPolicy\");\n````\n```\n\n----------------------------------------\n\nTITLE: Implementing JsonConfigFilterAttribute for Custom JsonSerializerSettings\nDESCRIPTION: This code creates a custom ActionFilter attribute that configures specific JsonSerializerSettings for the report controllers. The filter sets appropriate serialization settings to ensure proper report rendering while maintaining custom settings for other controllers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resolve-no-report-instance-error-telerik-reporting.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Serialization;\nusing Microsoft.AspNetCore.Mvc.Formatters;\nusing System.Buffers;\nusing Microsoft.Extensions.Options;\n\npublic class JsonConfigFilterAttribute : ActionFilterAttribute\n{\n\tpublic override void OnResultExecuting(ResultExecutingContext context)\n\t{\n\t\tif (context.Result is ObjectResult objectResult)\n\t\t{\n\t\t\tvar serializerSettings = new JsonSerializerSettings\n\t\t\t{\n\t\t\t\tNullValueHandling = NullValueHandling.Include,\n\t\t\t\tDateTimeZoneHandling = DateTimeZoneHandling.Unspecified,\n\t\t\t\tContractResolver = new CamelCasePropertyNamesContractResolver()\n\t\t\t};\n\n\t\t\tvar jsonOutputFormatter = new NewtonsoftJsonOutputFormatter(\n\t\t\t\tserializerSettings,\n\t\t\t\tArrayPool<char>.Shared,\n\t\t\t\tnew MvcOptions { },\n\t\t\t\tnew MvcNewtonsoftJsonOptions()\n\t\t\t\t);\n\n\t\t\tobjectResult.Formatters.Add(jsonOutputFormatter);\n\t\t}\n\n\t\tbase.OnResultExecuting(context);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting WebServiceDataSource URL Dynamically in Telerik Reporting\nDESCRIPTION: This code snippet demonstrates how to use a binding expression to dynamically set the ServiceUrl property of a WebServiceDataSource based on data from a parent data source. It constructs the URL for retrieving country details by combining a base URL with a country name from the main data source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/combine-data-from-multiple-web-services-in-one-table.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n=\"https://restcountries.com/v3.1/name/\" + Fields.CountryName\n```\n\n----------------------------------------\n\nTITLE: Setting Scale and Scale Mode in HTML5 Report Viewer\nDESCRIPTION: Demonstrates how to use the scale() method to set the scale factor and scale mode of a report viewer. The method accepts an object with scale and scaleMode properties, where scale is the zoom factor and scaleMode determines how scaling is applied.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/scale(scale).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.scale({\n\tscaleMode: \"SPECIFIC\",\n\tscale: 0.75\n});\n```\n\n----------------------------------------\n\nTITLE: Using IsNull Function in Telerik Reporting Expressions\nDESCRIPTION: Demonstrates the use of the IsNull function to handle null values in expressions. This example shows how to provide a default value when a field is null.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/conditional-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n=IsNull(Fields.Price, 0)\n```\n\n----------------------------------------\n\nTITLE: Filtering Vendor List Using a Parameter - C#\nDESCRIPTION: In this snippet, an expression is set up to filter the vendor listing by comparing the 'VendorName' from the database with the 'VendorSelect' parameter value using a Like operator. The expression includes a wildcard for matching vendor names.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/using-report-parameters-in-expressions.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n= Fields.VendorName Like Parameters.VendorSelect + \"%\"\n```\n\n----------------------------------------\n\nTITLE: Report Service Configuration (XML)\nDESCRIPTION: This XML snippet shows an example of the 'restReportService' configuration element used to configure the Telerik Reporting REST service. It includes settings like the ReportingEngineConfiguration, Storage type, and ReportResolver configurations. This configuration is used when the ReportServiceConfiguration is set to an instance of ConfigSectionReportServiceConfiguration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/how-to-implement-the-reportscontroller-in-an-application.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configSections>\n    <section name=\"reportingConfiguration\" type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting, Version=18.2.24.926, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" allowLocation=\"true\" allowDefinition=\"Everywhere\" />\n    <section name=\"restReportService\" type=\"Telerik.Reporting.Services.ConfigSectionReportServiceConfiguration, Telerik.Reporting.Services.WebApi, Version=18.2.24.926, Culture=neutral, PublicKeyToken=a9d7983dfcc261be, processorArchitecture=MSIL\" allowLocation=\"true\" allowDefinition=\"Everywhere\" />\n  </configSections>\n<restReportService\n    reportingEngineConfiguration=\"reportingConfiguration\"   \n  \tstorageType=\"File\"\n  \tstoragePath=\"~/ReportCache\"\n  \tbaseUri=\"/api/reports/\"\n  \t>\n\t<reportResolver>\n\t\t<reportFileResolver path=\"~/Reports\" />\n\t</reportResolver>\n</restReportService>\n```\n\n----------------------------------------\n\nTITLE: Configuring Barcode Report Item in Telerik Reporting\nDESCRIPTION: Demonstrates how to set up a Barcode report item with various configuration properties including encoder, value, stretch, and alignment\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/barcode/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\BarcodeSnippets.cs region=Barcode_Common_Settings}}\n```\n\nLANGUAGE: vb.net\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\BarcodeSnippets.vb region=Barcode_Common_Settings}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Invariant Globalization in .NET Project File\nDESCRIPTION: This XML snippet from a .NET project file enables or disables the invariant globalization setting. Setting 'InvariantGlobalization' to 'true' runs the application in invariant mode, while 'false' enables cultural data access. No additional dependencies are required. The key parameter here is 'InvariantGlobalization', which determines the globalization mode.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/only-invariant-culture-is-supported-in-globalization-invariant-mode-error.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Project Sdk=\\\"Microsoft.NET.Sdk\\\">\n\t<PropertyGroup>\n\t\t<InvariantGlobalization>true</InvariantGlobalization>\n\t</PropertyGroup>\n</Project>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<Project Sdk=\\\"Microsoft.NET.Sdk\\\">\n\t<PropertyGroup>\n\t\t<InvariantGlobalization>false</InvariantGlobalization>\n\t</PropertyGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Setting Kendo Culture in the renderingBegin Event\nDESCRIPTION: This TypeScript function sets the Kendo UI culture to Bulgarian (bg-BG) when the report rendering begins. This function is passed to the renderingBegin event of the Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-culture-of-date-picker-in-angular-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nrenderingBegin() {\n\tkendo.culture(\"bg-BG\");\n}\n```\n\n----------------------------------------\n\nTITLE: WPF Report Viewer with REST Service Connection\nDESCRIPTION: XAML declaration of WPF Report Viewer connected to a Telerik Reporting REST Service with a report source and parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add-report-viewer-to-a-wpf-.net-core-project.md#2025-04-21_snippet_4\n\nLANGUAGE: XAML\nCODE:\n```\n<tr:ReportViewer Grid.Row=\"1\" x:Name=\"ReportViewer1\" HorizontalAlignment=\"Stretch\"\n\t\t\t\t\t\tReportEngineConnection=\"engine=RestService;uri=http://localhost:59654/api/reports;timeout=100;keepClientAlive=True\">\n\t\t\t<tr:ReportViewer.ReportSource>\n\t\t\t\t<telerikReporting:UriReportSource Uri=\"MyReportName.trdp\">\n\t\t\t\t\t<telerikReporting:ReportSource.Parameters>\n\t\t\t\t\t\t<telerikReporting:Parameter Name=\"ParameterName_01\" Value=\"ParameterValue_01\"/>\n\t\t\t\t\t\t<telerikReporting:Parameter Name=\"ParameterName_02\" Value=\"ParameterValue_02\"/>\n\t\t\t\t\t</telerikReporting:ReportSource.Parameters>\n\t\t\t\t</telerikReporting:UriReportSource>\n\t\t\t</tr:ReportViewer.ReportSource>\n\t\t</tr:ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-line Text in Tooltips with JavaScript\nDESCRIPTION: JavaScript implementation for the viewerToolTipOpening event to replace newline characters with HTML line breaks, enabling multi-line text display in tooltips.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n\t$(document).ready(function () {\n\t\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\t\t…,\n\t\t\tviewerToolTipOpening: function (e, args) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tlet elements = document.getElementsByClassName(\n\t\t\t\t\t\t\t\"trv-pages-area-kendo-tooltip-text\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\t\t\t\t\tconst el = elements[i];\n\t\t\t\t\t\t\tel.innerHTML = el.innerHTML.replace(/\\n/g, \"<br />\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 100)\n\t\t\t\t},\n\t\t});\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Metadata On Demand in Javascript\nDESCRIPTION: This JavaScript snippet configures the Telerik Report Viewer to generate search metadata only on demand, avoiding potential JSON size issues during report rendering. By setting the searchMetadataOnDemand property to true, metadata generation is delayed until explicitly needed, which can mitigate problems with large JSON data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/json-length-is-too-large-net-core.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(function () {\n  $(\"#reportViewer1\").telerik_ReportViewer({\n    serviceUrl: \"api/reports/\",\n    reportSource: {\n        report: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n    },\n    searchMetadataOnDemand: true // set this property to true to generate the search metadata only when needed\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Report Viewer Module\nDESCRIPTION: TypeScript code showing how to import and configure the ReportingAngularViewerModule in the application root module\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-report-server.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReportingAngularViewerModule } from '@progress/telerik-angular-native-report-viewer';\n\n@NgModule({\n\tdeclarations: [\n\t\tAppComponent\n\t],\n\timports: [\n\t\tBrowserModule,\n\t\tBrowserAnimationsModule,\n\t\tAppRoutingModule,\n\t\tReportingAngularViewerModule\n\t],\n\tproviders: [],\n\tbootstrap: [AppComponent]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring jQuery AJAX Headers for Angular Report Viewer\nDESCRIPTION: Implementation showing how to set up custom headers for REST API calls using jQuery's ajaxSetup within the component's ngOnInit lifecycle hook. This approach enables cross-origin credentials and applies to all jQuery AJAX calls made by the Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/custom-headers-with-reportviewer-rest-api-calls.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nngOnInit(): void {\n\tlet $: any = (window as any)[\"jQuery\"];\n\t$.ajaxSetup({xhrFields: { withCredentials: true } });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling interactiveActionExecuting Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `interactiveActionExecuting` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `interactiveActionExecuting` event is emitted before an interactive action is executed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\tinteractiveActionExecuting() {\n\t\t\tconsole.log(\"This event will be emitted before an interactive action is executed.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Using Report Viewer Print Command in Angular\nDESCRIPTION: This example demonstrates how to create a Print button that invokes the report viewer's print command. The code connects a button click event to the viewer's print command execution method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/api-reference/properties.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer #viewer1 />\n...\n<button (click)=\"viewer1.commands.print.exec()\">Print</button>\n```\n\n----------------------------------------\n\nTITLE: Using Report Viewer in Angular Template - HTML\nDESCRIPTION: This HTML snippet demonstrates how to utilize the report viewer component in the Angular template, passing various configurations for server details and report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-report-server.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer\n\t\t[containerStyle]=\"viewerContainerStyle\"\n\t\t[reportServer]=\"{\n\t\t\turl: 'http://localhost:83/',\n\t\t\tusername: 'myusername',\n\t\t\tpassword: 'mypass'\n\t\t}\"\n\t\t[reportSource]=\"{\n\t\t\treport: 'Samples/Dashboard',\n\t\t\tparameters: {}\n\t\t}\" \n\t\t[viewMode]=\"'INTERACTIVE'\"\n\t\t[scaleMode]=\"'SPECIFIC'\"\n\t\t[scale]=\"1.0\">\n\t</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: WPF Report Viewer with Embedded Reporting Engine\nDESCRIPTION: XAML declaration of WPF Report Viewer using the Embedded Reporting engine with a local report file and parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add-report-viewer-to-a-wpf-.net-core-project.md#2025-04-21_snippet_3\n\nLANGUAGE: XAML\nCODE:\n```\n<tr:ReportViewer Grid.Row=\"1\" x:Name=\"ReportViewer1\" HorizontalAlignment=\"Stretch\">\n\t\t\t<tr:ReportViewer.ReportSource>\n\t\t\t\t<telerikReporting:UriReportSource Uri=\"Reports\\MyReportName.trdp\">\n\t\t\t\t\t<telerikReporting:ReportSource.Parameters>\n\t\t\t\t\t\t<telerikReporting:Parameter Name=\"ParameterName_01\" Value=\"ParameterValue_01\"/>\n\t\t\t\t\t\t<telerikReporting:Parameter Name=\"ParameterName_02\" Value=\"ParameterValue_02\"/>\n\t\t\t\t\t</telerikReporting:ReportSource.Parameters>\n\t\t\t\t</telerikReporting:UriReportSource>\n\t\t\t</tr:ReportViewer.ReportSource>\n\t\t</tr:ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Modifying Data Connections with Fetch API in JavaScript\nDESCRIPTION: This JavaScript code snippet intercepts the `fetch` API to modify the response from the `GetDataConnections` endpoint in the Web Report Designer. It filters the array of data connections returned by the API.  The example removes the first element of the array, but the logic can be adapted for more complex filtering based on user roles or other criteria.  The `GetDataConnections` URL may change, so ensure to configure it correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/edit-sqldatasource-wizard-available-connections.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst originalFetch = window.fetch;\nwindow.fetch = async (...args) => {\n\n\tlet [resource, config] = args;\n\tlet response = await originalFetch(resource, config);\n\n\tif (resource === \"api/reportdesigner/dataconnections\") {\n\t\t// response interceptor\n\t\tlet json = () =>\n\t\t\tresponse\n\t\t\t\t.clone()\n\t\t\t\t.json()\n\t\t\t\t.then((data) => {\n\t\t\t\t\tdata.shift();\n\t\t\t\t\treturn data;\n\t\t\t\t});\n\n\t\tresponse.json = json;\n\t}\n\n\treturn response;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Rendering Extension in C#\nDESCRIPTION: Complete C# implementation of the CustomRenderingExtension class that implements IRenderingExtension interface for custom XML rendering.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/custom-rendering-extension.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace NameSpace\n{\n    public class CustomRenderingExtension : Telerik.Reporting.Processing.IRenderingExtension\n    {\n        static bool ShouldCountOnly(IDictionary renderingContext)\n        {\n            if (renderingContext.Contains(\"CountOnly\"))\n            {\n                return (bool)renderingContext[\"CountOnly\"];\n            }\n\n            return false; // Default\n        }\n\n        public bool Render(Telerik.Reporting.Processing.Report report\n            , System.Collections.Hashtable renderingContext\n            , System.Collections.Hashtable deviceInfo\n            , Telerik.Reporting.Processing.CreateStream createStreamCallback\n            , Telerik.Reporting.Processing.EvaluateHeaderFooterExpressions evalHeaderFooterCallback)\n        {\n            if (ShouldCountOnly(renderingContext))\n            { // Our custom rendering extension format (XML) does not have pages, so we do not need to count pages.\n                return true;\n            }\n\t    \n\t    evalHeaderFooterCallback(1, 1, report);\n\n            var stream = createStreamCallback(\"report/CustomExtensionName\", \"xml\", Encoding.UTF8, \"application/xml\");\n\n            using (var xmlWriter = new XmlTextWriter(stream, Encoding.UTF8))\n            {\n                new XmlReportWriter(xmlWriter).Write(report);\n            }\n\n            var renderingStream = stream as IRenderStream;\n\n            if (null != renderingStream)\n            {\n                renderingStream.Finish();\n            }\n\n            return true;\n        }\n\n        void Telerik.Reporting.IExtension.Initialize(System.Collections.Hashtable deviceInfo)\n        {\n        }\n\n        public void Dispose()\n        {\n        }\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Trace Listener in C#\nDESCRIPTION: Example code showing how to initialize and use the custom trace listener to filter Telerik.Reporting assembly logs while maintaining other trace outputs.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/disable-logging-tracing-information-from-telerik-reporting.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar reportingAssembly = Assembly.Load(\"Telerik.Reporting\");\nvar listener = new CustomTraceListener(reportingAssembly, stream);\nTrace.AutoFlush = true;\nTrace.Listeners.Clear();\nTrace.Listeners.Add(listener);\nlistener.WriteLine(\"This line should be persisted in the trace output!\");\n\n//Render the report here with the ReportProcessor and the logs from Telerik.Reporting would be skipped\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Report Viewer Event Handlers\nDESCRIPTION: This snippet shows how to create event handler functions for the `ready` and `viewerToolTipOpening` events within the Angular component. The `myReadyHandler` logs a message when the viewer is ready, while `myViewerToolTipOpeningHandler` logs the tooltip text when a tooltip is about to open. The second handler shows the standard event arguments that are passed to event handlers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/event-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class AppComponent {\n\tmyReadyHandler() {\n\t\tconsole.log('The viewer is ready!');\n\t}\n\tmyViewerToolTipOpeningHandler(e: any, args: any) {\n\t\tconsole.log('Tooltip shows: ' + args.toolTip.text);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Single Value Parameter for CubeDataSource in C#\nDESCRIPTION: Demonstrates how to pass a single value to the @Year parameter of the MDX query using the Parameters collection of the CubeDataSource component in C#.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/specifying-query-parameters-with-the-cubedatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCubeDataSource cubeDataSource = new CubeDataSource();\ncubeDataSource.ConnectionString = \"Data Source=localhost;\";\ncubeDataSource.Cube = \"Adventure Works\";\ncubeDataSource.SelectCommand = \"select non empty { [Measures].[Sales Amount] } on columns, non empty { [Product].[Category].[Category] * [Product].[Subcategory].[Subcategory] } on rows from [Adventure Works] where StrToMember(@Year)\";\nCubeDataSourceParameter yearParameter = new CubeDataSourceParameter();\nyearParameter.Name = \"@Year\";\nyearParameter.Value = \"[Date].[Calendar Year].&[2006]\";\ncubeDataSource.Parameters.Add(yearParameter);\n```\n\n----------------------------------------\n\nTITLE: Initializing Report Viewer with Custom Event Handlers\nDESCRIPTION: JavaScript code to initialize the Telerik Report Viewer with custom event handlers for the viewerToolTipOpening and pageReady events, used for implementing custom tooltips.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\">\n\t\t$(document).ready(function () {\n\t\t\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\t\t\t…,\n\t\t\t\tviewerToolTipOpening: onToolTipOpening,\n\t\t\t\tpageReady: onPageReady,\n\t\t\t});\n\t\t});\n\t</script>\n```\n\n----------------------------------------\n\nTITLE: Registering Firebird DbProviderFactory with Provider Instance in .NET Core\nDESCRIPTION: This snippet demonstrates how to register the Firebird database provider factory using its instance. This code should be executed before any report processing takes place to ensure the provider is available.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-register-db-provider-factory-in-net-core-project.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.Processing.Data.DbProviderFactories.RegisterFactory(\"FirebirdSql.Data.FirebirdClient\", FirebirdSql.Data.FirebirdClient.FirebirdClientFactory.Instance);\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Output with Custom Settings\nDESCRIPTION: This CSV snippet demonstrates the output after applying custom rendering settings, removing headers and static text.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/configuring-the-csv-rendering-extension.md#2025-04-21_snippet_3\n\nLANGUAGE: CSV\nCODE:\n```\n20,Bothell,98011\n21,Bothell,98011\n22,Portland,97205\n23,Seattle,98104\n24,Duluth,55802\n25,Dallas,75201\n26,San Francisco,94109\n27,Nevada,84407\n28,Phoenix,85004\n29,Memphis,38103\n30,Orlando,32804\n31,Ottawa,K4B 1T7\n32,Montreal,H1Y 2H5\n```\n\n----------------------------------------\n\nTITLE: Localizing Parameter Editor Labels in HTML5 Viewer\nDESCRIPTION: JavaScript event handler for the renderingEnd event that updates parameter editor labels based on the selected culture. Uses jQuery to locate and modify the parameter header text.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/localize-report-serverside-based-on-parameter.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderingEnd: function (e, args) {\n\tvar langValue = e.data.sender.reportSource().parameters[\"lang\"];\n\n\tvar langParam = $(\".trv-parameter-header div[title='Language']\");\n\tif (langValue == \"bg-BG\") {\n\t\tlangParam.text(\"Език\");\n\t} else {\n\t\tlangParam.text(\"Language\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Template-Based Report Viewer Model\nDESCRIPTION: Defines a view model class for template-based report viewer configuration with template URL and report source properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/reportsource-model-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TemplatedReportViewerViewModel\n{\n    public string TemplateUrl { get; set; }\n    public IReportSource ReportSource { get; set; }\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Class TemplatedReportViewerViewModel\n    Public Property TemplateUrl As String\n    Public Property ReportSource As IReportSource\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Defining Client Event Handlers in HTML\nDESCRIPTION: This snippet illustrates how to define custom client event handlers for the HTML5 MVC Report Viewer. The functions 'onRenderingBegin' and 'onRenderingEnd' are designed to log messages to the console when rendering begins and ends, respectively.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/customizing/client-events.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n\tfunction onRenderingBegin() {\n\t\tconsole.log(\"rendering begin!\");\n\t}\n\tfunction onRenderingEnd() {\n\t\tconsole.log(\"rendering end!\");\n\t}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Binding Redirects for WPF ReportViewer Configurations\nDESCRIPTION: This code snippet provides the necessary XML configuration to set up binding redirects in the app.config file for ensuring compatibility between different versions of the Telerik UI for WPF assemblies used with the ReportViewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add--manually-report-viewer-to-a-wpf-.net-framework-project.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <runtime>\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n      <dependentAssembly>\n        <assemblyIdentity name=\"Telerik.Windows.Controls\" publicKeyToken=\"1211007f0304c9b5\" culture=\"neutral\" />\n        <bindingRedirect oldVersion=\"0.0.0.0-2010.1.421.35\" newVersion=\"2010.1.421.35\" />\n      </dependentAssembly>\n      <!-- Add other redirects here -->\n    </assemblyBinding>\n  </runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Initializing WinForms Report Viewer for Telerik Report Server\nDESCRIPTION: This snippet details the initialization of the WinForms Report Viewer for reports served by the Telerik Report Server, requiring a valid username and password.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/how-to-add-report-viewer-to-a-windows-forms'-.net-core-project.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\ReportViewer\\WinForms\\Form1.cs region=DesktopViewer_Core_RportServer_Init}}\n```\n\n----------------------------------------\n\nTITLE: Using Today Function in Telerik Reporting\nDESCRIPTION: The `Today` function returns the current date on the computer processing the report. It is expressed as the local time. The returned value is a DateTime instance representing the current date with the time set to midnight (12:00:00 AM).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=Today()\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache in VB.NET\nDESCRIPTION: This code snippet shows the implementation of a custom cache in VB.NET for Telerik Reporting. The `MyCache` class implements the `ICache` interface, providing custom logic for storing and retrieving cached data. It requires the `Telerik.Reporting.Cache.Interfaces` namespace.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-custom-cache-provider.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports System\nImports System.Collections\nImports Telerik.Reporting.Cache.Interfaces\n\nNamespace MyNameSpace\n    Public Class MyCache\n        Implements ICache\n        Private hashtable As New Hashtable()\n\n        Public Property Item(key As String) As Object Implements ICache.Item\n            Get\n                Return hashtable(key)\n            End Get\n            Set(value As Object)\n                hashtable(key) = value\n            End Set\n        End Property\n\n        Public Sub Remove(key As String) Implements ICache.Remove\n            hashtable.Remove(key)\n        End Sub\n\n        Public Sub Clear() Implements ICache.Clear\n            hashtable.Clear()\n        End Sub\n\n        Public Sub Dispose() Implements IDisposable.Dispose\n            ' Clean up any resources being used.\n        End Sub\n    End Class\nEnd Namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Report Source Programmatically in WPF Report Viewer\nDESCRIPTION: This snippet illustrates how to assign a report source to the WPF ReportViewer during the Loaded event. This method provides dynamic report management capabilities at runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add--manually-report-viewer-to-a-wpf-.net-framework-project.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void Window_Loaded(object sender, RoutedEventArgs e)\n{\n    reportViewer.ReportSource = new Uri(\"Reports/MyReport.trdx\", UriKind.Relative);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Value Parameter for CubeDataSource in VB.NET\nDESCRIPTION: Shows how to assign an array of years to the data source parameter in VB.NET, allowing multiple values to be passed to the MDX query.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/specifying-query-parameters-with-the-cubedatasource-component.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim cubeDataSource As New CubeDataSource()\ncubeDataSource.ConnectionString = \"Data Source=localhost;\"\ncubeDataSource.Cube = \"Adventure Works\"\ncubeDataSource.SelectCommand = \"select non empty { [Measures].[Sales Amount] } on columns, non empty { [Product].[Category].[Category] * [Product].[Subcategory].[Subcategory] } on rows from [Adventure Works] where StrToSet(@Year)\"\nDim yearParameter As New CubeDataSourceParameter()\nyearParameter.Name = \"@Year\"\nyearParameter.Value = New String() {\"[Date].[Calendar Year].&[2005]\", \"[Date].[Calendar Year].&[2006]\"}\ncubeDataSource.Parameters.Add(yearParameter)\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connection String in appsettings.json\nDESCRIPTION: This JSON snippet demonstrates how to configure a MySQL connection string in the appsettings.json file for a .NET application. It specifies the connection string and provider name for a MySQL database connection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-data-providers/using-mysql-data-provider.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"ConnectionStrings\":{\n\t\t\"mysql\":{\n\t\t\t\"connectionString\":\"Server=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword;\",\n\t\t\t\"providerName\":\"MySql.Data.MySqlClient\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Template with Report Viewer Event Binding\nDESCRIPTION: HTML template showing the Report Viewer component with event binding and conditional rendering\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/angular-component-properties-in-viewer-events.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div *ngIf=\"isReportRendered\">Report has been rendered!</div>\n<tr-viewer #viewer1\n\t...\n\t[renderingEnd]=\"reportRendered\">\n</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Handling OnExportStart Event in Native Blazor Report Viewer\nDESCRIPTION: This snippet describes how to intercept the OnExportStart event in the Native Blazor Report Viewer to cancel CSV exports based on the ExportStartEventArgs properties. It allows for customized export handling.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/api-reference/events.md#2025-04-21_snippet_2\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer @ref=\"reportViewer1\"\n\tServiceUrl=\"https://demos.telerik.com/reporting/api/reports\"\n\t@bind-ReportSource=\"@ReportSource\"\n\tServiceType=\"@ReportViewerServiceType.REST\"\n\tHeight=\"800px\"\n\tWidth=\"100%\"\n\tOnExportStart=\"@ExportStart\"></ReportViewer>\n\n@code {\n\tReportViewer reportViewer1;\n\tpublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions(\"Report Catalog.trdx\", new Dictionary<string, object>{});\n\t\n\tasync Task ExportStart(ExportStartEventArgs args)\n\t{\n\t\t// Cancel CSV exporting\n\t\tif(args.Format == \"CSV\")\n\t\t{\n\t\t\targs.IsCancelled = true;\n\t\t\tawait JsRuntime.InvokeVoidAsync(\"alert\", $\"Exporting the report in the {args.Format} format is disabled\");\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Report Viewer Configuration with Styles and Scripts\nDESCRIPTION: Complete setup of Telerik Report Viewer including required Kendo UI styles, custom positioning styles, jQuery dependency, and viewer initialization with specified report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n@section styles\n{\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n\t<style>\n\t   #reportViewer1 {\n\t\t\tposition: absolute;\n\t\t\tleft: 5px;\n\t\t\tright: 5px;\n\t\t\ttop: 5px;\n\t\t\tbottom: 5px;\n\t\t\toverflow: hidden;\n\t\t}\n\t</style>\n}\n@section scripts\n{\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t<script src=\"~/api/reports/resources/js/telerikReportViewer\"></script>\n\t@(Html.TelerikReporting().DeferredScripts())\n}\n@(Html.TelerikReporting().ReportViewer()\n\t .Id(\"reportViewer1\")\n\t .ServiceUrl(\"/api/reports/\")\n\t .ReportSource(new UriReportSource() { Uri = \"Product Catalog.trdp\" })\n\t .Deferred()\n)\n```\n\n----------------------------------------\n\nTITLE: Binding OpenAccessDataSource to LINQ Query Method in C#\nDESCRIPTION: Shows how to bind the OpenAccessDataSource component to a custom LINQ query method. This approach provides optimized data retrieval and avoids lazy loading issues.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/retrieving-data-from-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nOpenAccessDataSource openAccessDataSource = new OpenAccessDataSource();\nopenAccessDataSource.ContextTypeName = \"AdventureWorksModel.AdventureWorksContext, AdventureWorksModel\";\nopenAccessDataSource.ConnectionId = \"AdventureWorks\";\nopenAccessDataSource.MethodName = \"GetProductInfos\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Business Object for Data Access\nDESCRIPTION: Demonstrates creating a custom business object with a method to retrieve product information from a Telerik Data Access Model.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/maintaining-the-lifecycle-of-the-openaccesscontext-with-the-openaccessdatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class AdventureWorksBO\n{\n    public IEnumerable GetProducts()\n    {\n        using (var context = new AdventureWorksModel())\n        {\n            return context.Products.ToList();\n        }\n    }\n}\n```\n\nLANGUAGE: VB\nCODE:\n```\nPublic Class AdventureWorksBO\n    Public Function GetProducts() As IEnumerable\n        Using context = New AdventureWorksModel()\n            Return context.Products.ToList()\n        End Using\n    End Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Using EntityDataSource for Automatic Context Management in C#\nDESCRIPTION: Shows how to use EntityDataSource to automatically manage the lifecycle of ObjectContext/DbContext, ensuring proper lazy loading of related entities.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/maintaining-the-lifecycle-of-the-context-with-the-entitydatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.EntityDataSource entityDataSource = new Telerik.Reporting.EntityDataSource();\nentityDataSource.Context = typeof(AdventureWorksEntities);\nentityDataSource.EntitySet = \"Products\";\n```\n\n----------------------------------------\n\nTITLE: Binding Angular Report Viewer Events\nDESCRIPTION: This snippet demonstrates how to bind to the `ready` and `viewerToolTipOpening` events of the Telerik Angular Report Viewer component by specifying the event handler functions as input properties. This allows the component to trigger custom logic when these events occur.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/event-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer\n\t...\n\t[ready]=\"myReadyHandler\"\n\t[viewerToolTipOpening]=\"myViewerToolTipOpeningHandler\">\n</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Binding ObjectDataSource to DataView in C#\nDESCRIPTION: This code snippet demonstrates how to create a DataView, configure an ObjectDataSource with it, and set up a report using this data source in C#. It also shows how to add a calculated field and preview the report in a Windows Forms Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/bind-to-a-dataview.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nDataTable table = new DataTable();\ntable.Columns.Add(\"ID\", typeof(int));\ntable.Columns.Add(\"Name\", typeof(string));\n\nDataView view = table.DefaultView;\nview.Sort = \"ID\";\n\nObjectDataSource objectDataSource = new ObjectDataSource();\nobjectDataSource.DataSource = view;\nobjectDataSource.DataMember = \"\";\n\n// add calculated field\nobjectDataSource.CalculatedFields.Add(\"IdPlusOne\",\n    typeof(int),\n    \"= Fields.ID + 1\");\n\nReport report = new Report();\nreport.DataSource = objectDataSource;\n\nReportProcessor reportProcessor = new ReportProcessor();\nRenderingResult result = reportProcessor.RenderReport(\"PDF\", report, null);\n\nReportViewer viewer = new ReportViewer();\nviewer.ReportSource = report;\nviewer.RefreshReport();\nviewer.ShowDialog();\n```\n\n----------------------------------------\n\nTITLE: Expanding Document Map Tree Automatically in Telerik Report Viewer\nDESCRIPTION: This JavaScript code expands all nodes in the Document Map tree when the report initially loads. It uses the RenderingEnd event of the Telerik Report Viewer and recursively expands all nodes in the Kendo UI TreeView that represents the Document Map.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-expand-document-map-tree-by-default-in-html5-viewers.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n  ...\n  function expandAllNodes(treeview, e) {\n    var nodes = $(e).find(\"li\");\n    if (nodes.length > 0) {\n        treeview.expand(nodes);\n        for (var i = 0; i < nodes.length; i++) {\n            expandAllNodes(treeview, nodes[i]);\n        }\n    }\n    \n    return;\n  }\n\n  function onRenderingEnd(e, args) {\n    if (args.documentMapAvailable) {\n    \tvar documentMapSelector = \"#\" + $(\"#reportViewer1\").attr(\"data-selector\") + \"-documentMap\";\n        var kendoTreeView = $(documentMapSelector).data(\"kendoTreeView\");\n        expandAllNodes(kendoTreeView, kendoTreeView.element);\n    }\n  }\n\n  $(document).ready(function () {\n     ...\n     // Viewer configuration\n     $(\"#reportViewer1\")\n\t.telerik_ReportViewer({\n\t\t...\n\t\trenderingEnd: onRenderingEnd\n    });\n    ...\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining parameterEditorFactory Interface for HTML5 Report Viewer\nDESCRIPTION: This code snippet defines the interface for the parameterEditorFactory of the HTML5 Report Viewer. It includes two methods: match for determining if an editor is suitable for a parameter, and createEditor for creating a parameter editor instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/parametereditorfactory.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  match: function(parameter) {\n    // Returns boolean\n  },\n  createEditor: function(placeholder, options) {\n    // Returns parameterEditor object\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Theme to Angular Configuration\nDESCRIPTION: Configures the Kendo UI Default Theme in the Angular project's styles configuration\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-standalone-components.md#2025-04-21_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"styles\": [\n\t\t\"src/styles.scss\",\n\t\t\"node_modules/@progress/kendo-theme-default/dist/default-ocean-blue.scss\"\n\t]\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Report Engine Connection in WinForms Viewer\nDESCRIPTION: Demonstrates how to configure a WinForms Report Viewer to use the embedded report engine. The code shows creating an EmbeddedConnectionInfo and setting it to the report viewer's ReportEngineConnection property.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-construct-a-string-to-connect-to-report-engine.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nreportViewer1.ReportEngineConnection = new EmbeddedConnectionInfo();\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nReportViewer1.ReportEngineConnection = New EmbeddedConnectionInfo()\n```\n\n----------------------------------------\n\nTITLE: Creating Model Extension Methods in C#\nDESCRIPTION: Implements extension methods for converting between database models and Telerik Reporting service models. Handles data transformation and mapping between different model types.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/implement-database-definition-storage-efcore.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nusing System;\nusing Telerik.WebReportDesigner.Services.Models;\n\nnamespace CSharp.Net7.Html5IntegrationDemo.EFCore.Models\n{\n\tpublic static class DbModelExtensions\n\t{\n\t\tpublic static ResourceFileModel ToResourceFileModel(this EFCore.Models.Report dbReportModel)\n\t\t{\n\t\t\tif (dbReportModel == null)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn new ResourceFileModel()\n\t\t\t{\n\t\t\t\tFileName = dbReportModel.Name,\n\t\t\t\tParentPath = dbReportModel.ParentUri,\n\t\t\t\tUri = dbReportModel.Uri,\n\t\t\t\tSize = dbReportModel.Bytes.Length / 1024f,\n\t\t\t\tCreatedOn = dbReportModel.CreatedOn,\n\t\t\t\tModifiedOn = dbReportModel.ModifiedOn,\n\t\t\t};\n\t\t}\n\n\t\tpublic static ResourceFolderModel ToResourceFolderModel(this EFCore.Models.ReportFolder dbReportFolderModel)\n\t\t{\n\t\t\tif (dbReportFolderModel == null)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn new ResourceFolderModel()\n\t\t\t{\n\t\t\t\tName = dbReportFolderModel.Name,\n\t\t\t\tParentUri = dbReportFolderModel.ParentUri,\n\t\t\t\tHasSubFolders = dbReportFolderModel.HasSubFolders,\n\t\t\t\tCreatedOn = dbReportFolderModel.CreatedOn,\n\t\t\t\tModifiedOn = dbReportFolderModel.ModifiedOn,\n\t\t\t\tUri = dbReportFolderModel.Uri\n\t\t\t};\n\t\t}\n\n\t\tpublic static EFCore.Models.ReportFolder ToDbReportFolderModel(this CreateFolderModel createFolderModel)\n\t\t{\n\t\t\treturn new EFCore.Models.ReportFolder() {\n\t\t\t\tName = createFolderModel.Name,\n\t\t\t\tParentUri = createFolderModel.ParentUri,\n\t\t\t\tUri = (string.IsNullOrEmpty(createFolderModel.ParentUri) \n\t\t\t\t\t? createFolderModel.ParentUri \n\t\t\t\t\t: createFolderModel.ParentUri + \"\\\\\") + createFolderModel.Name,\n\t\t\t\tCreatedOn = DateTime.Now,\n\t\t\t\tModifiedOn = DateTime.Now\n\t\t\t};\n\t\t}\n\n\t\tpublic static EFCore.Models.Report ToDbReportModel(this SaveResourceModel saveResourceModel, byte[] data)\n\t\t{\n\t\t\treturn new Models.Report()\n\t\t\t{\n\t\t\t\tName = saveResourceModel.Name,\n\t\t\t\tBytes = data,\n\t\t\t\tParentUri = saveResourceModel.ParentUri,\n\t\t\t\tUri = (string.IsNullOrEmpty(saveResourceModel.ParentUri) \n\t\t\t\t\t? saveResourceModel.ParentUri \n\t\t\t\t\t: saveResourceModel.ParentUri + \"\\\\\") + saveResourceModel.Name,\n\t\t\t\tSize = data.Length,\n\t\t\t\tCreatedOn = DateTime.Now,\n\t\t\t\tModifiedOn = DateTime.Now\n\t\t\t};\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom jQuery UI Tooltips in Page Ready Event\nDESCRIPTION: JavaScript function that handles the pageReady event to create jQuery UI tooltips for elements with tooltip data attributes, allowing custom tooltip implementation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onPageReady(e, args) { \n\t\t\t\tvar selector = \"[data-tooltip-title],[data-tooltip-text]\";\n\t\t\t\t$(selector).each(function (i) {\n\t\t\t\n\t\t\t\t\t\tvar $this = $(this);\n\t\t\t\t\t\tvar title = $this.attr(\"data-tooltip-title\");\n\t\t\t\t\t\tvar text = $this.attr(\"data-tooltip-text\");\n\t\t\t\n\t\t\t\t\t\t$this.tooltip({\n\t\t\t\t\t\t\t\titems: selector,\n\t\t\t\t\t\t\t\tcontent: title + \"<br />\" + text,\n\t\t\t\t\t\t\t\tposition: {\n\t\t\t\t\t\t\t\t\t\tmy: \"left top\",\n\t\t\t\t\t\t\t\t\t\tat: \"center bottom\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting Kendo DatePicker Culture to French\nDESCRIPTION: Configure the Kendo UI culture to French before initializing the report viewer. This ensures that the DatePicker displays dates in the French format.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-change-the-culture-of-the-datepicker-in-html5-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nkendo.culture(\"fr-FR\");\n```\n\n----------------------------------------\n\nTITLE: Registering Routes in Application_Start() for VB.NET\nDESCRIPTION: This VB.NET snippet mirrors the C# version for registering the Telerik reporting routes in the application startup method. The routes are crucial for the Web Report Designer functionality in an ASP.NET MVC application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-framework-application.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports System.Web.Optimization\n\nPublic Class MvcApplication\n\tInherits System.Web.HttpApplication\n\n\tSub Application_Start()\n\t\tAreaRegistration.RegisterAllAreas()\n\t\tFilterConfig.RegisterGlobalFilters(GlobalFilters.Filters)\n\n\t\tTelerik.Reporting.Services.WebApi.ReportsControllerConfiguration.RegisterRoutes(System.Web.Http.GlobalConfiguration.Configuration)\n\t\tTelerik.WebReportDesigner.Services.WebApi.ReportDesignerControllerConfiguration.RegisterRoutes(System.Web.Http.GlobalConfiguration.Configuration)\n\n\t\tRouteConfig.RegisterRoutes(RouteTable.Routes)\n\t\tBundleConfig.RegisterBundles(BundleTable.Bundles)\n\t\tEnd Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: WebServiceDataSource Authentication Configuration\nDESCRIPTION: Explains the two primary authentication methods supported by the WebServiceDataSource component: Basic Authentication and 2-Step (Bearer) Authentication with OAuth 2.0 support.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/webservicedatasource-component/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Basic Authentication Settings\n\n| Setting | Description |\n| ------ | ------ |\n|Username|The username used to authenticate. Required.|\n|Password|The password used to authenticate.|\n\n## 2-Step (Bearer) Authentication Settings\n\n| Setting | Description |\n| ------ | ------ |\n|Login URL|URL returning the authentication token or session key.|\n|Username|Optional username for authentication.|\n|Password|Optional password for authentication.|\n|Response|Specifies expected response type (JSON or plain text).|\n|Login Method|HTTP request method for login.|\n|Body|Login HTTP request body for specific authentication schemes.|\n|Token Path|Regular expression to extract authentication token from response.|\n```\n\n----------------------------------------\n\nTITLE: HTML Dependencies Setup\nDESCRIPTION: HTML markup for including required JavaScript dependencies including jQuery, Kendo UI, and Telerik reporting components\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-viewer-and-designer-in-vue.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n\t<div id=\"app\"></div>\n\t<script src=\"https://code.jquery.com/jquery-3.2.1.min.js\"></script>\n\t<script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/kendo.all.min.js\"></script>\n\t<script src=\"https://demos.telerik.com/reporting/api/reports/resources/js/telerikReportViewer\"></script>\n\t<script src=\"https://demos.telerik.com/reporting/api/reportdesigner/designerresources/js/webReportDesigner\"></script>\n\t<script type=\"module\" src=\"/src/main.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Registering Routes in Application_Start() for C#\nDESCRIPTION: This C# snippet details the necessary route registration for the Telerik reporting services and the Web Report Designer during the application start phase. It ensures controllers are registered properly before the default routes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-framework-application.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected void Application_Start()\n{\n\tAreaRegistration.RegisterAllAreas();\n\tFilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n\tTelerik.Reporting.Services.WebApi.ReportsControllerConfiguration.RegisterRoutes(System.Web.Http.GlobalConfiguration.Configuration);\n\tTelerik.WebReportDesigner.Services.WebApi.ReportDesignerControllerConfiguration.RegisterRoutes(System.Web.Http.GlobalConfiguration.Configuration);\n\tRouteConfig.RegisterRoutes(RouteTable.Routes);\n\tBundleConfig.RegisterBundles(BundleTable.Bundles);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportService with Fallback Mechanism in C#\nDESCRIPTION: C# implementation of a ReportService that creates a chain of IReportResolver implementations with fallback capability. If the custom resolver fails, it will try the default resolvers in sequence.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-implement-and-use-custom-ireportresolver.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nclass ReportServiceWithResolverFallback : ReportService\n{\n\tstatic readonly IReportResolver resolvers = new ReportResolverWithFallBack(\n\t\t\t\t\t\t\t\t\t  new ReportTypeResolver(\n\t\t\t\t\t\t\t\t\t   new ReportFileResolverWeb(null)));\n\tpublic ReportServiceWithResolverFallback()\n\t{\n\t\tthis.ReportResolver = resolvers;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Select Parameter Editor with Kendo DropDownList\nDESCRIPTION: Creates a custom single select parameter editor using Kendo UI DropDownList widget. The editor handles single value parameters with available values and provides value change callback functionality.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction createSingleSelectEditor(placeholder, options) {\n    var dropDownElement = $(placeholder).html('<div></div>');\n    var parameter,\n          valueChangedCallback = options.parameterChanged,\n          dropDownList;\n    function onChange() {\n        var val = dropDownList.value();\n        valueChangedCallback(parameter, val);\n    }\n    return {\n        beginEdit: function (param) {\n            parameter = param;\n            $(dropDownElement).kendoDropDownList({\n                dataTextField: \"name\",\n                dataValueField: \"value\",\n                value: parameter.value,\n                dataSource: parameter.availableValues,\n                change: onChange\n            });\n            dropDownList = $(dropDownElement).data(\"kendoDropDownList\");\n        }\n    };\n}\n```\n\nLANGUAGE: CSHTML\nCODE:\n```\n@(Html.TelerikReporting().ReportViewer()\n     .Id(\"reportViewer1\")\n     .ParameterEditors(\n                    editors => editors\n                     .SingleSelectEditor(\"createSingleSelectEditor\")\n         )\n)\n```\n\n----------------------------------------\n\nTITLE: Using Blazor Report Viewer with Report Server in CSHTML\nDESCRIPTION: This snippet shows how to place the Blazor Report Viewer component in a Razor page and configure it to display reports from a Telerik Report Server instance.  It sets the `ReportServer`, `ReportSource`, `ScaleMode`, and `Scale` properties, ensuring the correct `ReportServer` and `ReportSource` settings are configured.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/how-to-use-blazor-report-viewer.md#2025-04-21_snippet_6\n\nLANGUAGE: CSHTML\nCODE:\n```\n````CSHTML\n@page \"/\"\n\t@* For Blazor Web Apps, an interactive render mode should be used, for example: *@\n\t@* @rendermode InteractiveServer *@\n\t@using Telerik.ReportViewer.Blazor\n\t<style>\n\t\t#rv1 {\n\t\t\tposition: relative;\n\t\t\twidth: 1200px;\n\t\t\theight: 600px;\n\t\t}\n\t</style>\n\t<ReportViewer ViewerId=\"rv1\"\n\t\t\t\t  ReportServer=\"@(new ReportServerOptions {  Url = \\\"https://demos.telerik.com/report-server/\\\", Username = \\\"demouser\\\", Password = \\\"demopass\\\" })\"\n\t\t\t\t  ReportSource=\"@(new ReportSourceOptions()\n\t\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\t\tReport = \\\"Published/Dashboard\\\"\n\t\t\t\t\t\t\t\t  })\"\n\t\t\t\t  ScaleMode=\"@(ScaleMode.Specific)\"\n\t\t\t\t  Scale=\"1.0\" />\n````\n```\n\n----------------------------------------\n\nTITLE: Binding SQL SelectCommand to Use Dynamic Schema in Telerik Reporting\nDESCRIPTION: Uses the Format text function to integrate a schema name parameter into the SQL query. This allows for dynamic selection of data from different schemas based on the user/tenant without creating multiple data sources.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/sql-data-source-with-schema-per-tenant-design.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT {0}.[Production].[Product].[Name],{0}.[Production].[Product].[ProductNumber],{0}.[Production].[Product].[ListPrice],{0}.[Production].[Product].[StandardCost] FROM {0}.[Production].[Product]\n```\n\n----------------------------------------\n\nTITLE: Dynamic XAML Theme Loading in CSharp\nDESCRIPTION: The C# code demonstrates how to dynamically clear and load theme-related XAML resources in a WPF application. The `MergeResourceDictionaries` method replaces any existing themes with new ones specified by the user through a `theme` parameter, promoting flexibility in theme management. Ensure themes exist at designated paths for this method to function correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/wpf-viewer-themes-from-xaml.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic partial class ReportViewerWindow1 : Window\n\t{\n\tstatic readonly string[] dictionaries = new[]\n\t\t\t{\n\t\t\t\t\"Themes/{0}/System.Windows.xaml\",\n\t\t\t\t\"Themes/{0}/Telerik.Windows.Controls.xaml\",\n\t\t\t\t\"Themes/{0}/Telerik.Windows.Controls.Input.xaml\",\n\t\t\t\t\"Themes/{0}/Telerik.Windows.Controls.Navigation.xaml\",\n\t\t\t\t\"Themes/{0}/Telerik.ReportViewer.Wpf.xaml\"\n\t\t\t};\n\n\t\tpublic ReportViewerWindow1()\n\t\t{\n\t\t\tInitializeComponent();\n\t\t\tMergeResourceDictionaries(\"Material\"); // Set the required theme name here\n\t\t}\n\n\t\tstatic void MergeResourceDictionaries(string theme)\n\t\t{\n\t\t\tvar mergedDictionaries = Application.Current.Resources.MergedDictionaries;\n\t\t\tmergedDictionaries.Clear();\n\t\t\tforeach (var dictionary in dictionaries)\n\t\t\t{\n\t\t\t\tvar uri = string.Format(dictionary, theme);\n\t\t\t\tmergedDictionaries.Add(new ResourceDictionary()\n\t\t\t\t{\n\t\t\t\t\tSource = new Uri(uri, UriKind.RelativeOrAbsolute)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with exportEnd Event Handler\nDESCRIPTION: Example showing how to initialize a Telerik Report Viewer with a custom exportEnd event handler that opens exported reports in a new window and logs export information to console. The handler receives event data and arguments containing export details like URL and format.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/exportend(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\texportEnd: function(e, args) {\n\t\t\targs.windowOpenTarget = \"_blank\";\n\t\t\tconsole.log(\"This event handler will be called after exporting the report.\");\n\t\t\tconsole.log(\"The exported report can be found at \" + args.url);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String in appsettings.json\nDESCRIPTION: JSON configuration showing how to specify the Npgsql provider and connection string in application settings for .NET applications using shared connections.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-data-providers/using-npgsql-data-provider.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"ConnectionStrings\":{\n\t\t\"postgres\":{\n\t\t\t\"connectionString\":\"Server=127.0.0.1;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\",\n\t\t\t\"providerName\":\"Npgsql\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal ReportsController Implementation in ASP.NET MVC (VB.NET)\nDESCRIPTION: This code snippet demonstrates a minimal implementation of the ReportsController in an ASP.NET MVC application using VB.NET with the `AddTelerikReporting` extension method.  It mirrors the C# minimal implementation, initializing the ReportServiceConfiguration with less code by referencing a configured Telerik Reporting instance. The code requires references to Telerik.Reporting and Telerik.Reporting.Services.WebApi assemblies, and a pre-configured Telerik Reporting instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/how-to-implement-the-reportscontroller-in-an-application.md#2025-04-21_snippet_3\n\nLANGUAGE: vbnet\nCODE:\n```\nImports Microsoft.Extensions.DependencyInjection\nImports System.Web.Http\nImports Telerik.Reporting.Services.WebApi\n\nNamespace MvcVB.Controllers\n\tPublic Class ReportsController\n\t\tInherits ReportsControllerBase\n\t\tPublic Sub New(reportServiceConfiguration As IReportServiceConfiguration)\n\t\t\tMe.ReportServiceConfiguration = reportServiceConfiguration OrElse\n\t\t\t\tThrow New ArgumentNullException(NameOf(reportServiceConfiguration))\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n```\n\n----------------------------------------\n\nTITLE: Rendering PDF with Bookmarks in Telerik Reporting using DeviceInfo properties\nDESCRIPTION: This code demonstrates how to render a report to PDF with bookmarks by setting either the 'OutputDocumentMap' or 'ProcessItemActions' property in the device information. The snippet shows the complete process of creating a ReportProcessor, setting up deviceInfo with the required property, and saving the rendered PDF to a file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-render-reports-to-pdf-with-bookmarks-r2-2021.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar reportProcessor = new Telerik.Reporting.Processing.ReportProcessor();\n\nvar deviceInfo = new System.Collections.Hashtable();\n//choose one of the two\ndeviceInfo[\"OutputDocumentMap\"] = true;\ndeviceInfo[\"ProcessItemActions\"] = true; \n\nvar reportSource = new Telerik.Reporting.UriReportSource();\n\nreportSource.Uri = \"Report_with_Bookmarks.trdp\";\n\nTelerik.Reporting.Processing.RenderingResult result = reportProcessor.RenderReport(\"PDF\", reportSource, deviceInfo);\n\nstring fileName = result.DocumentName + \".\" + result.Extension;\nstring path = \"../../../\";\nstring filePath = System.IO.Path.Combine(path, fileName);\n\nusing (System.IO.FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Create))\n{\n    fs.Write(result.DocumentBytes, 0, result.DocumentBytes.Length);\n}\n```\n\n----------------------------------------\n\nTITLE: Binding OpenAccessDataSource to Custom Method with Parameters in C#\nDESCRIPTION: Illustrates how to bind the OpenAccessDataSource to a custom method that accepts parameters. This approach allows for more flexibility in data retrieval.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/retrieving-data-from-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nOpenAccessDataSource openAccessDataSource = new OpenAccessDataSource();\nopenAccessDataSource.ContextTypeName = \"AdventureWorksModel.AdventureWorksContext, AdventureWorksModel\";\nopenAccessDataSource.ConnectionId = \"AdventureWorks\";\nopenAccessDataSource.MethodName = \"GetProductsByCategory\";\nopenAccessDataSource.Parameters.Add(\"categoryName\", \"Bikes\");\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource Programmatically (VB.NET)\nDESCRIPTION: This VB.NET code snippet demonstrates how to programmatically set the ReportSource of the Telerik ReportViewer within the Page_Load event. It shows how to create a TypeReportSource, set its TypeName property, and assign it to the ReportViewer's ReportSource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/how-to-add-report-viewer-to-a-web-page.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\n\"{{\\source=CodeSnippets\\\\VB\\\\API\\\\Telerik\\\\ReportViewer\\\\WebForms\\\\WebForm1.aspx.vb region=Webviewer_SetReportSource}}\"\n```\n\n----------------------------------------\n\nTITLE: WPF Report Viewer with Report Server Connection\nDESCRIPTION: XAML declaration of WPF Report Viewer connected to Telerik Report Server with authentication and category-based report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add-report-viewer-to-a-wpf-.net-core-project.md#2025-04-21_snippet_5\n\nLANGUAGE: XAML\nCODE:\n```\n<tr:ReportViewer Grid.Row=\"1\" x:Name=\"ReportViewer1\" HorizontalAlignment=\"Stretch\"\n\t\t\t\t\t\t ReportEngineConnection=\"engine=ReportServer;uri=http://yourreportserver:83/;username=yourusername;password=yourpassword\">\n\t\t\t<tr:ReportViewer.ReportSource>\n\t\t\t\t<telerikReporting:UriReportSource Uri=\"MyCategory/MyReportName.trdp\" />\n\t\t\t\t\t<telerikReporting:ReportSource.Parameters>\n\t\t\t\t\t\t<telerikReporting:Parameter Name=\"ParameterName_01\" Value=\"ParameterValue_01\"/>\n\t\t\t\t\t\t<telerikReporting:Parameter Name=\"ParameterName_02\" Value=\"ParameterValue_02\"/>\n\t\t\t\t\t</telerikReporting:ReportSource.Parameters>\n\t\t\t\t</telerikReporting:UriReportSource>\n\t\t\t</tr:ReportViewer.ReportSource>\n\t\t</tr:ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Querying AdventureWorks Database for Products\nDESCRIPTION: SQL query to select top 100 products with color information from the AdventureWorks database, ordered by name and color.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/how-to-use-the-reportitem.dataobject-property-in-expressions.md#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nselect top 100 Product.Name, Product.ProductNumber, Product.Color, Product.SafetyStockLevel\n\t\tfrom Production.Product\n\t\twhere Product.Color is not null\n\t\torder by Product.Name, Product.Color\n```\n\n----------------------------------------\n\nTITLE: Adding Report Group Programmatically - C#\nDESCRIPTION: Demonstrates how to programmatically add a new group to a Telerik Report using C#. Creates a group with sorting, filtering, and bookmarking capabilities.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/grouping-data/how-to-add-groups-to-report.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nReport report = new Report();\nGroup group = new Group();\ngroup.Name = \"ProductGroup\";\ngroup.Groupings.Add(new Grouping(\"=Fields.ProductName\"));\ngroup.Sortings.Add(new Sorting(\"=Fields.ProductName\", SortDirection.Asc));\ngroup.Filters.Add(new Filter(\"=Fields.UnitPrice\", FilterOperator.GreaterThan, \"=10\"));\ngroup.GroupKeepTogether = GroupKeepTogether.All;\ngroup.DocumentMapText = \"=Fields.ProductName\";\nreport.Groups.Add(group);\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Report Viewer with Custom Parameter Editor in HTML\nDESCRIPTION: HTML template configuration for the Angular Report Viewer component that specifies custom parameter editors. This snippet sets up the viewer with a service URL and defines functions for matching parameters and creating editors.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-kendodatetimepicker-for-parameter-editors-in-the-angular-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer #viewer1 *ngIf=\"visible\"\n\t\t[containerStyle]=\"viewerContainerStyle\"\n\t\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports/'\"\n\t\t[reportSource]=\"{\n\t\t\treport: 'Product Line Sales.trdx',\n\t\t\tparameters: {}\n\t\t}\" \n\t\t[parameterEditors]=\"[{\n\t\t\tmatch: match,\n\t\t\tcreateEditor: createEditor\n\t\t}]\" >\n\t</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Switching Functions\nDESCRIPTION: Defines JavaScript functions for switching reports and initializing the Kendo Window with custom actions and configuration options.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-switch-reports-in-kendo-mvc-modal-window.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction switchReport() {\n            var viewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n\n                showFirst = !showFirst;\n                viewer.reportSource({\n                    report: showFirst ? FirstReport : SecondReport,\n                    parameters: {}\n                });\n        }\n\n        function showWindow() {\n            var windowOptions = {\n                actions: [ \"Custom\", \"Close\"],\n                title: {\n                    text: \"Reports\",\n                },\n                modal: true,\n                draggable: true,\n                visible: false,\n                width: \"1200px\",\n                open: switchReport\n            };\n\n            const kendoWindow = $(\"#winReports\").kendoWindow(windowOptions).data(\"kendoWindow\");\n\n            kendoWindow.center(true).open();\n\n            // custom action for report switching\n            var customAction = kendoWindow.wrapper.find(\".k-window-actions [aria-label='Custom']\");\n\n            // edit custom button look\n            customAction.find(\"span\").removeClass().text(\"Switch Report\");\n\n            customAction.click(function (e) {\n                e.preventDefault();\n                switchReport();\n            });\n        }\n```\n\n----------------------------------------\n\nTITLE: Expression Binding for JSON DataSource in Reporting\nDESCRIPTION: Dynamic binding expression to connect a JSON data source to a child data item using the DataObject property at runtime. Enables flexible data passing between report items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pass-sqldatasource-columns-as-datasource-for-nested-data-items.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\nProperty path\t\t|\tExpression\nDataSource.Source\t|\t=ReportItem.DataObject.JSONOUT\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Style References\nDESCRIPTION: Includes required Kendo UI CSS stylesheets for the report viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- the required Kendo styles -->\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Overriding BaseAddress for Custom Report Service in C#\nDESCRIPTION: This C# code snippet demonstrates how to inherit from ReportService and override the BaseAddress property to handle URL rewriting or load balancing scenarios where the Reporting WCF Service URL differs from the browser-displayed URL.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/images-charts-barcodes-and-shapes-are-not-being-displayed-in-the-silverlight-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace CSharp.SilverlightDemo.Web\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Web;\n    using Telerik.Reporting.Service;\n \n    public class MyService : ReportService\n    {\n        protected override Uri BaseAddress\n        {\n            get\n            {\n                // Sample\n                return new Uri(\"http://www.mysite.com/ReportService.svc\");\n \n                // Original logic quoted for reference\n                //var request = this.HttpContext.Request;\n                //var response = this.HttpContext.Response;\n                //return new UriBuilder(request.Url.GetLeftPart(UriPartial.Authority))\n                //    {\n                //        Path = response.ApplyAppPathModifier(request.RawUrl)\n                //    }\n                //    .Uri;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended NuGet Package Installation\nDESCRIPTION: Instructions for obtaining required third-party assemblies through NuGet, specifically the Microsoft ASP.NET Web API Client package version 6.0.0\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/requirements-for-desktop-viewers-using-remote-report-sources.md#2025-04-21_snippet_1\n\nLANGUAGE: NuGet\nCODE:\n```\nInstall-Package Microsoft.AspNet.WebApi.Client -Version 6.0.0\n```\n\n----------------------------------------\n\nTITLE: Angular Report Viewer Send Mail Message Template Configuration\nDESCRIPTION: Configures the specific HTML template required for send mail message functionality in Angular Report Viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/send-mail-message.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Angular Report Viewer template configuration\nreportViewer = {\n    templateUrl: 'node_modules/@progress/telerik-angular-report-viewer/dist/dependencies/telerikReportViewerTemplate-ng.html'\n};\n```\n\n----------------------------------------\n\nTITLE: Showing Notifications in Report Designer\nDESCRIPTION: This function manages the display of notification messages within the Telerik Web Report Designer. It logs various types of messages to the console and allows for the cancellation of certain notifications based on their type. Dependencies include jQuery.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onNotificationShowing(e, args) {\n\t// e: jQuery event\n\t// args: INotificationErrorEventArgs ->\n\t\t// type: string, obtained from NotificationTypes. Available values: info, warning, error, success\n\t\t// message: notification message, string.\n\t\t// error: JS's Error instance\n\t\t// cancel: boolean, determines if showing the notification will be canceled.\n\tswitch (args.type) {\n\t\tcase \"success\":\n\t\tcase \"info\":\n\t\tcase \"warning\":                    \n\t\t\tconsole.log(`Message: ${args.message}`);\n\t\t\t// disable the notification pop-up.\n\t\t\targs.cancel = true;\n\t\t\tbreak;\n\t\t\n\t\tcase \"error\":\n\t\t\tif (args.error) {\n\t\t\t\tconsole.log(`Error message: ${args.message}; Error type: ${args.error.constructor.name}`);\n\t\t\t} else {\n\t\t\t\tconsole.log(`Error message: ${args.message};`);\n\t\t\t}\n\t\t\tbreak;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets in Angular CLI JSON\nDESCRIPTION: Adds the assets folder to the Angular CLI configuration file to serve custom files in production builds.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-load-telerik-report-viewer-resources-locally-in-angular-application-and-use-them-to-customize-the-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"assets\": [\n\t\"src/assets\",\n\t...\n],\n```\n\n----------------------------------------\n\nTITLE: LINQ Query Binding Configuration\nDESCRIPTION: Demonstrates how to configure EntityDataSource to use a custom LINQ query method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/retrieving-data-from-an-entity-data-model-with-the-entitydatasource-component.md#2025-04-21_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nentityDataSource.Entity = typeof(AdventureWorksEntities);\nentityDataSource.EntityProvider = typeof(System.Data.Objects.ObjectContext);\nentityDataSource.MethodName = \"GetProductsInfo\";\n```\n\nLANGUAGE: VB\nCODE:\n```\nentityDataSource.Entity = GetType(AdventureWorksEntities)\nentityDataSource.EntityProvider = GetType(System.Data.Objects.ObjectContext)\nentityDataSource.MethodName = \"GetProductsInfo\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Documents in Web API Controller\nDESCRIPTION: Shows how to override the OnGetDocument method in a Web API controller to modify PDF documents before serving them to web viewers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/modify-exported-report-document-before-serving-it-to-the-viewer-client.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReportController : Telerik.Reporting.Services.WebApi.ReportsControllerBase\n{\n\tprotected override void OnGetDocument(Telerik.Reporting.Services.GetDocumentEventArgs args)\n\t{\n\t\tif(args.Extension.Equals(\"pdf\"))\n\t\t{\n\t\t\t//modify the rendered document in args.DocumentBytes \n\t\t}\n\t}\n}\n```\n\nLANGUAGE: VB\nCODE:\n```\nPublic Class ReportController Inherits Telerik.Reporting.Services.WebApi.ReportsControllerBase\n\tProtected Overrides Sub OnGetDocument(args As Telerik.Reporting.Services.GetDocumentEventArgs)\n\t\tIf args.Extension = \"PDF\" Then\n\t\t\t'modify the rendered document in args.DocumentBytes\n\t\tEnd If\n\tEnd Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Getting Localized Text using C# and RESX\nDESCRIPTION: This C# code snippet defines a function that retrieves localized text from a RESX file based on a given culture name and a base path. It first checks if the culture's language dictionary is already loaded; if not, it reads the RESX file, populates the dictionary, and returns the localized text.  It depends on System.Resources.ResXResourceReader and System.Collections.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/localization-of-reports-based-on-report-parameter-and-resx-files.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\n       public static string GetLocalizedText(string name, string cultureName, string basePath)\n        {\n            Dictionary<string, string> language;\n            if (languages.TryGetValue(cultureName, out language))\n            {\n                return language[name];\n            }\n\n            var filePath = new Uri(new Uri(basePath), string.Format(\"bin\\\\Resources.{0}resx\", cultureName)).AbsolutePath;\n\n            filePath = Uri.UnescapeDataString(filePath);\n\n            var reader = new ResXResourceReader(filePath);\n\n            language = new Dictionary<string, string>();\n            foreach (DictionaryEntry k in reader)\n            {\n                language.Add((string)k.Key, k.Value + string.Empty);\n            }\n\n            languages.GetOrAdd(cultureName, language);\n\n            return language[name];\n        }\n```\n\n----------------------------------------\n\nTITLE: Handling Print Events in Angular Report Viewer\nDESCRIPTION: Shows implementation of printStarted and printDocumentReady events for monitoring the printing process in the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(printStarted)=\"printStarted()\">\n</reporting-angular-viewer>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\tprintStarted() {\n\t\t\tconsole.log(\"This event will be emitted when the printing starts.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Parameter Editor API Methods Table\nDESCRIPTION: Markdown table defining the key methods of the parameterEditor component, including parameter editing, accessibility features, and editor state management functions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/parametereditor.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter | Description |\n| ------ | ------ |\n| __beginEdit(parameter)__ |creates the editor UI and populates it with the parameter settings<ul><li>parameter</li></ul>|\n| __addAccessibility(parameter)__ |adds accessibility to the parameter editor and populates its string resources<ul><li>parameter</li></ul>|\n| __setAccessibilityErrorState(parameter)__ |sets the error state of the parameter editor's accessibility functionality and its error attributes<ul><li>parameter</li></ul>|\n| __enable(enable)__ |enables or disables the parameter editor<ul><li>enable</li></ul>|\n| __clearPendingChange__ |function that would be invoked when parameter changes|\n| __destroy__ |function invoked to destroy the parameter editor|\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel for WPF Report Viewer Binding in C#\nDESCRIPTION: This snippet defines a ViewModel that implements INotifyPropertyChanged, facilitating data binding with the WPF Report Viewer by providing a property for ReportSource. The ViewModel includes a command to change the displayed report based on a counter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/using-the-wpf-report-viewer-in-an-mvvm-scenario.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nclass ViewModel : INotifyPropertyChanged\n{\n    private int testCounter = 0;\n    public event PropertyChangedEventHandler PropertyChanged;\n    Telerik.Reporting.ReportSource _myReportSource;\n    public Telerik.Reporting.ReportSource MyReportSource\n    {\n        get { return this._myReportSource; }\n        set\n        {\n            if (this._myReportSource != value)\n            {\n                this._myReportSource = value;\n                if (null != this.PropertyChanged)\n                {\n                    this.PropertyChanged(this, new PropertyChangedEventArgs(\"MyReportSource\"));\n                }\n            }\n        }\n    }\n    public ViewModel()\n    {\n        this.MyReportSource = null;// new InstanceReportSource { ReportDocument = null };\n        _thisCommand = new Telerik.Windows.Controls.DelegateCommand(x => ChangeReport());\n    }\n    ICommand _thisCommand;\n    public ICommand ThisCommand\n    {\n        get\n        {\n            return _thisCommand;\n        }\n    }\n    public void ChangeReport()\n    {\n        if (testCounter % 2 == 1)\n            this.MyReportSource = new InstanceReportSource { ReportDocument = new Report1() };\n        else\n            this.MyReportSource = new InstanceReportSource { ReportDocument = new Report2() };\n        testCounter++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Angular Report Viewer in TypeScript\nDESCRIPTION: Example demonstrating how to set up the report viewer component in TypeScript, including component decoration, view child reference, and setting reportSource and serviceUrl properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/options.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild  } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\nimport { ReportSourceOptions } from '@progress/telerik-common-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\t\n\t\treportSource: ReportSourceOptions = { report: \"Dashboard.trdx\", parameters: { ReportYear: 2004 } };\n\t\tserviceUrl: string = \"https://demos.telerik.com/reporting/api/reports\";\n\t}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with Custom Parameters in HTML\nDESCRIPTION: This snippet shows the HTML structure for setting up the HTML5 Report Viewer with custom parameter UI. It includes necessary script and style references, a custom dropdown for parameter selection, and a placeholder for the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n\t<title>Telerik HTML5 Report Viewer</title>\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t<link href=\"/kendo/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t<link href=\"/kendo/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n\t<script src=\"/ReportViewer/js/telerikReportViewer.kendo-{{buildversion}}.min.js\"></script>\n\t<script src=\"/ReportViewer/js/telerikReportViewer-{{buildversion}}.min.js\"></script>\n\t<style>\n\t\t#reportViewer1 {\n\t\t\tposition: absolute;\n\t\t\tleft: 5px;\n\t\t\tright: 5px;\n\t\t\ttop: 40px;\n\t\t\tbottom: 5px;\n\t\t\tfont-family: 'segoe ui', 'ms sans serif';\n\t\t\toverflow: hidden;\n\t\t}\n\t</style>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Body for Post Method in WebServiceDataSource - JSON\nDESCRIPTION: This snippet illustrates how to set the Body parameter of the WebServiceDataSource to include dynamic report parameter values for Name and Surname, formatted as JSON. The 'Surname' parameter is specifically noted for being an array of strings without quotation marks.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/post-method-to-pass-parameter-in-webservicedatasource.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"\"\"\n{\n\t\"Name\": \"@name\",\n\t\"Surname\": @surname\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Fetch API to Add Authorization Header in JavaScript\nDESCRIPTION: This code snippet overrides the global fetch function to add an Authorization header to all requests made by the Web Report Designer. It retrieves an authentication token and appends it to the request headers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-authentication-header-webreportdesigner.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fetchOverride = window.fetch;\n\nwindow.fetch = function (url, args) {\n    // Retrieve authData from your authentication provider\n    const authData = { token: \"your_token_here\" };\n\n    if (!args) {\n        args = {\n            headers: {\n                Authorization: \"Bearer \" + authData.token,\n            },\n        };\n    } else if (!args.headers || !args.headers.entries) {\n        args.headers = {\n            ...args.headers ?? {},\n            Authorization: \"Bearer \" + authData.token,\n        };\n    } else if (args.headers.entries) {\n        args.headers.append(\"Authorization\", \"Bearer \" + authData.token);\n    }\n\n    return fetchOverride(url, args);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Report Viewer Source\nDESCRIPTION: Example of setting up a reportSource for the Angular Report Viewer component using either a TRDP file path or assembly qualified name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer #viewer1\n\t...\n\t[reportSource]=\"{\n\t\treport: 'Product Catalog.trdp',\n\t\tparameters: { CultureID: 'en' }\n\t}\"\n\t...>\n</tr-viewer>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer #viewer1\n\t...\n\t[reportSource]=\"{\n\t\treport: 'Telerik.Reporting.Examples.CSharp.ProductCatalog, CSharp.ReportLibrary',\n\t\tparameters: { CultureID: 'en' }\n\t}\"\n\t...>\n</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Creating Client Button with Multivalue Query String\nDESCRIPTION: Demonstrates how to create an ASP.NET Button that generates a URL with a multivalue parameter for passing to the report viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/passing-multivalue-parameters-from-url-query-string-with-web-service-data-source.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n<asp:Button runat=\"server\" ID=\"myButton\"\n   OnClientClick=\"window.location.href='ReportViewerForm.aspx?Id=1,5,7'; return false;\"\n   Text=\"Id=1,5,7\"></asp:Button>\n```\n\n----------------------------------------\n\nTITLE: Enabling Send Email in Blazor Report Viewer\nDESCRIPTION: Basic configuration to enable the send email functionality in the Report Viewer component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/send-mail-message.md#2025-04-21_snippet_0\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer \n...\nEnableSendEmail=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with Font Awesome Template in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to initialize the HTML5 Report Viewer with a Font Awesome template. It sets the templateUrl option to use the Font Awesome specific template.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/styling-and-appearance/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n\t$(\"#reportViewer1\")\n\t.telerik_ReportViewer({\n\t\ttemplateUrl: /ReportViewer/templates/telerikReportViewerTemplate-FA-{{buildversion}}.html\n\t\t....\n</script>\n```\n\n----------------------------------------\n\nTITLE: Exporting Reports in Silverlight using ReportServiceClient\nDESCRIPTION: This code demonstrates how to export a Telerik report from a Silverlight application by instantiating the ReportServiceClient class, calling its RenderAsync method to generate a PDF report, and handling the RenderCompleted event to save the rendered report to a file selected by the user.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-export-report-in-silverlight.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class MainPage : UserControl\n{\n    public MainPage()\n    {\n        InitializeComponent();\n    }\n\n    Stream file;\n\n    private void Button_Click(object sender, RoutedEventArgs e)\n    { \n        var fileDlg = new SaveFileDialog();\n        fileDlg.Filter = \"PDF files|*.pdf|All files|*.*\";\n\n        if (fileDlg.ShowDialog() == true)\n        {\n            //set any deviceInfo settings if necessary\n            var deviceInfo = new NameValueDictionary();\n            //set any report parameter value if necessary\n            var parameters = new NameValueDictionary();\n\n            this.file = fileDlg.OpenFile();\n            var serviceClient = new ReportServiceClient(new Uri(App.Current.Host.Source, \"../ReportService.svc\"));\n            serviceClient.RenderAsync(\"PDF\", \n                \"ClassLibrary1.Report1, ClassLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", \n                deviceInfo, \n                parameters);\n            serviceClient.RenderCompleted += new EventHandler<RenderEventArgs>(serviceClient_RenderCompleted);\n        }\n    }\n\n    void serviceClient_RenderCompleted(object sender, RenderEventArgs e)\n    {\n        var result = e.RenderingResult;\n        if (this.file != null)\n        {\n            this.file.Write(result.DocumentBytes, 0, result.DocumentBytes.Length);\n            this.file.Close();\n            this.file.Dispose();\n            this.file = null;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Y Property for Waterfall Chart in Telerik Reporting Expression\nDESCRIPTION: This expression calculates the running total of values for each data point in the waterfall chart. It uses the RunningValue function to accumulate the sum of Values within the graph1 scope.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-waterfall-chart-using-graph.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= RunningValue('graph1', Sum(Fields.Value))\n```\n\n----------------------------------------\n\nTITLE: Accessing Report Fields from Table Item in VB.NET\nDESCRIPTION: This code snippet demonstrates the use of the Report API hierarchy to reference report fields from a table item. It shows how to access a TextBox within a table and use a data source directly to set the TextBox value during data binding.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/access-report-items-programmatically.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nPrivate Sub tableTextBox_ItemDataBinding(sender As Object, eventArgs As EventArgs)\n    'get the textbox from the sender object\n    Dim textBox As Telerik.Reporting.Processing.TextBox = DirectCast(sender, Telerik.Reporting.Processing.TextBox)\n    'get the table object\n    Dim table As Telerik.Reporting.Processing.Table = DirectCast(textBox.Parent, Telerik.Reporting.Processing.Table)\n    'get the detail section\n    Dim detail As Telerik.Reporting.Processing.DetailSection = DirectCast(table.Parent, Telerik.Reporting.Processing.DetailSection)\n    'get the raw value from the Report datasource directly\n    textBox.Value = detail.DataObject(\"Data\")\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Creating a Report Book in VB.NET using Telerik Reporting\nDESCRIPTION: This code snippet shows how to instantiate a report book at runtime in VB.NET by creating an instance of the ReportBook class and adding reports using TypeReportSource for 'WeekdayReport' and UriReportSource for 'Glossary.trdp'. It highlights the addition of a TOC (Table of Contents) report source as well.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-book/how-to-create-a-report-book-at-run-time.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim reportBook As New Telerik.Reporting.ReportBook()\nreportBook.ReportSources.Add(New Telerik.Reporting.TypeReportSource With {.ReportTypeName = \"WeekdayReport\"})\nreportBook.ReportSources.Add(New Telerik.Reporting.UriReportSource With {.Uri = \"Glossary.trdp\"})\nreportBook.ReportSources.Add(New Telerik.Reporting.TocReportSource())\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Register Client in Telerik Reporting REST API\nDESCRIPTION: This snippet demonstrates how to make a POST request to register a client with the Telerik Reporting REST Service. The request is sent to the '/api/reports/clients' endpoint.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/clients-api/register-client.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/reports/clients HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Adding Required Namespaces\nDESCRIPTION: Required using statements for Telerik components in _Imports.razor\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/how-to-use-native-blazor-report-viewer.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n@using Telerik.Blazor\n@using Telerik.Blazor.Components\n@using Telerik.ReportViewer.BlazorNative\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Connection Strings in JSON Configuration\nDESCRIPTION: Example of adding a basic SQL connection string to appSettings.json. This format uses System.Data.SqlClient as the default provider.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-6-with-minimal-api.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"ConnectionStrings\": {\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Editor XML Configuration\nDESCRIPTION: XML configuration for integrating the custom boolean parameter editor into the ReportViewer control.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n</telerik:ReportViewer>\n....\n\t<ParameterEditors>\n\t\t<CustomEditors>\n\t\t\t<telerik:CustomParameterEditor MatchFunction=\"customMatch\" CreateEditorFunction=\"createCustomEditor\"></telerik:CustomParameterEditor>\n\t\t</CustomEditors>\n\t</ParameterEditors>\n</telerik:ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Modifying Document Map Width with Kendo Splitter\nDESCRIPTION: JavaScript code to change the default Document Map area width to 350px using Kendo Splitter. This code should be placed in the renderingEnd or pageReady event handler of the viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/modify-html5-viewer-area-width-through-kendo-splitter.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderingEnd: function () {\n    var splitter = $(\"#reportViewerId\").find(\".trv-document-map-splitter\").data(\"kendoSplitter\");\n    splitter.options.panes[0].size = \"350px\";\n    splitter.resize(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentName Property Example\nDESCRIPTION: Example showing how to set the DocumentName property for controlling export file naming. The property accepts expressions and can include report parameters and global objects, but cannot access DataSource fields at the report level.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/report-item/properties.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nreport.DocumentName = \"Monthly Sales Report\"; // Static name\n// Or with expression\nreport.DocumentName = \"=Parameters.ReportMonth.Value + \\\" Sales Report\\\"\";\n```\n\n----------------------------------------\n\nTITLE: Registering Custom SharedDataSourceResolver in JSON\nDESCRIPTION: Configures the custom ISharedDataSourceResolver within the application's settings JSON. This inclusion enables the application's reporting engine to utilize the custom resolver for decrypting shared data source connections during processing.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-encrypted-connection-strings-telerik-reporting.md#2025-04-21_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"telerikReporting\": {\n    \"processing\": {\n      \"sharedDataSourceResolver\": {\n        \"provider\": \"custom\",\n        \"parameters\": [\n          {\n            \"name\": \"typename\",\n            \"value\": \"CSharp.Net8.Html5IntegrationDemo.CustomSharedDataSourceResolver, CSharp.Net8.Html5IntegrationDemo\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting X-Axis Label Step in Telerik Reporting\nDESCRIPTION: This expression sets the X-axis label step to 3 if there are more than 10 distinct data points, otherwise it sets it to 1. It uses the CountDistinct function to determine the number of unique MonthYear values in the data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/graph-bindings-to-control-coordinate-system-properties.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n=IIF(CountDistinct(Fields.MonthYear) > 10, 3, 1)\n```\n\n----------------------------------------\n\nTITLE: Initializing Telerik Web Report Designer\nDESCRIPTION: This JavaScript snippet initializes the Telerik Web Report Designer using jQuery. It sets configuration options such as the service URL, the report name, toolbox layout, and session persistence.  The `skipOnboarding` option is also set to `false`. It assumes that the required JavaScript files (jQuery, Kendo UI, and Telerik Reporting scripts) are already included in the page.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/web-designer-in-webforms-page.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\n\t\t$(document).ready(function () {\n\t\t\tvar reportName = \\\"Barcodes Report.trdp\\\";\n\t\n\t\t\t$(\\\"#webReportDesigner\\\").telerik_WebReportDesigner({\n\t\t\t\ttoolboxArea: {\n\t\t\t\t\tlayout: \\\"list\\\"\n\t\t\t\t},\n\t\t\t\tserviceUrl: \\\"http://localhost:59655/api/reportdesigner/\\\",\n\t\t\t\treport: reportName,\n\t\t\t\tpersistSession: true,\n\t\t\t\tskipOnboarding: false,\n\t\t\t}).data(\\\"telerik_WebDesigner\\\");\n\t\t});\n\t</script>\"\n```\n\n----------------------------------------\n\nTITLE: Vue Report Viewer Component\nDESCRIPTION: Vue component implementation for the Telerik Report Viewer with configuration and styling\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-viewer-and-designer-in-vue.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n\t<div class=\"hello\">\n\t\t<h1></h1>\n\t\t<div id=\"reportViewer1\">loading...</div>\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\tname: 'ReportViewer',\n\t\tdata () {\n\t\treturn {\n\t\t\tmsg: 'Welcome to Your Vue.js App'\n\t\t}\n\t},\n\tmounted () {\n\t\tthis.$nextTick(function () {\n\t\t\t$('#reportViewer1')\n\t\t\t.telerik_ReportViewer({\n\t\t\t\tserviceUrl: 'http://demos.telerik.com/reporting/api/reports/',\n\t\t\t\treportSource: {\n\t\t\t\treport: 'Dashboard.trdx'\n\t\t\t\t},\n\t\t\t\tviewMode: telerikReportViewer.ViewModes.INTERACTIVE,\n\t\t\t\tscaleMode: telerikReportViewer.ScaleModes.SPECIFIC,\n\t\t\t\tscale: 1.0,\n\t\t\t\tsendEmail: { enabled: true }\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n</script>\n\n<style scoped>\n\t#reportViewer1 {\n\t\tposition: relative;\n\t\twidth: 80vw;\n\t\theight: 1000px;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Handling OnRenderingEnd Event in Native Blazor Report Viewer\nDESCRIPTION: This snippet shows how to respond to the OnRenderingEnd event in the Native Blazor Report Viewer to display an alert with the rendered report's total page count. It uses the RenderingEndEventArgs argument to access rendering results.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/api-reference/events.md#2025-04-21_snippet_1\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer @ref=\"reportViewer1\"\n\tServiceUrl=\"https://demos.telerik.com/reporting/api/reports\"\n\t@bind-ReportSource=\"@ReportSource\"\n\tServiceType=\"@ReportViewerServiceType.REST\"\n\tHeight=\"800px\"\n\tWidth=\"100%\"\n\tOnRenderingEnd=\"@RenderingEnd\"></ReportViewer>\n\n@code {\n\tReportViewer reportViewer1;\n\tpublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions(\"Report Catalog.trdx\", new Dictionary<string, object>{});\n\t\n\tasync Task RenderingEnd(RenderingEndEventArgs args)\n\t{\n\t\t// Display alert with the page count of the rendered report\n\t\tawait JsRuntime.InvokeVoidAsync(\"alert\", $\"The total page count of rendered report is: {args.PageCount}\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding GetDeniedPermissions Method in C#\nDESCRIPTION: This snippet showcases how to override the GetDeniedPermissions method to create dynamic logic that returns denied permissions based on certain conditions, such as individual users. It specifies the permissions that will be denied to the users.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/customize-web-designer.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic override IActionResult GetDeniedPermissions()\n{\n\treturn this.Json(ReportDesignerPermissionsBuilder.Build(\n\t\tPermission.Create_Components_ReportItems_PictureBox,\n\t\tPermission.Create_Components_ReportItems_HTMLTextBox,\n\t\tPermission.Commands_Document_NewCombined,\n\t\tPermission.Commands_DataSources_SharedDataSource_Delete,\n\t\tPermission.Commands_DataSources_SharedDataSource_Edit,\n\t\tPermission.Commands_AssetsManager\n\t\t)\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing WinForms ReportViewer Report Display\nDESCRIPTION: Solution for rendering reports in WinForms ReportViewer by calling RefreshReport method after setting ReportSource. This ensures the report is properly loaded and displayed in the viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/winforms-viewer-does-not-display-report.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// After setting the ReportSource\nreportViewer1.RefreshReport();\n```\n\n----------------------------------------\n\nTITLE: Setting SubReport ReportSource Programmatically in C#\nDESCRIPTION: This code snippet demonstrates how to programmatically set the report source of a SubReport item using C#. It creates an InstanceReportSource, sets the ReportDocument, and adds a parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/subreport.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nInstanceReportSource instanceReportSource = new InstanceReportSource();\ninstanceReportSource.ReportDocument = new Telerik.Reporting.Report();\ninstanceReportSource.Parameters.Add(\"Parameter1\", \"ParameterValue\");\n\nTelerik.Reporting.SubReport subReport1 = new Telerik.Reporting.SubReport();\nsubReport1.ReportSource = instanceReportSource;\n```\n\n----------------------------------------\n\nTITLE: Basic Business Object Structure for ObjectDataSource\nDESCRIPTION: A code template showing the structure of a Product class and a Products class decorated with the DataObject attribute, which will serve as the data source for the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/steps-on-how-to-add-objectdatadource-in-a-report-designed-in-the-standalone-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nclass Product\n{\n . . .\n}\n \n[DataObject]\nclass Products\n{\n  . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Email and Report Source Models in C#\nDESCRIPTION: These model classes define the structure for email data and report source information to be sent to the custom API endpoint.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/send-telerik-report-embedded-email-body.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class ReportMail\n{\n\t[JsonPropertyName(\"to\")]\n\tpublic string To { get; set; }\n\t[JsonPropertyName(\"from\")]\n\tpublic string From { get; set; }\n\t[JsonPropertyName(\"cc\")]\n\tpublic string CC { get; set; }\n\t[JsonPropertyName(\"subject\")]\n\tpublic string Subject { get; set; }\n\t[JsonPropertyName(\"body\")]\n\tpublic string Body { get; set; }\n\t[JsonPropertyName(\"reportSource\")]\n\tpublic ReportSourceModel ReportSource { get; set; }\n}\n\npublic class ReportSourceModel\n{\n\t[JsonPropertyName(\"report\")]\n\tpublic string Report { get; set; }\n\t[JsonPropertyName(\"parameters\")]\n\tpublic Dictionary<string, object> Parameters { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Report Designer HTML Page\nDESCRIPTION: Complete HTML template for the Web Report Designer page, including necessary references to font, jQuery, Kendo UI libraries, and Telerik's report viewer and designer scripts. Initializes the telerik_WebReportDesigner widget with configuration options.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-dotnet.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<title>Telerik Web Report Designer</title>\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500&display=swap\" rel=\"stylesheet\">\n\t</head>\n\t<body>\n\t\t<div id=\"webReportDesigner\">\n\t\t\tloading...\n\t\t</div>\n\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t\t<script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/kendo.all.min.js\"></script>\n\t\t<script src=\"/api/reportdesigner/resources/js/telerikReportViewer/\"></script>\n\t\t<script src=\"/api/reportdesigner/designerresources/js/webReportDesigner/\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t\t$(document).ready(function () {\n\t\t\t\t$(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\t\t\t\ttoolboxArea: {\n\t\t\t\t\t\tlayout: \"list\" //Change to \"grid\" to display the contents of the Components area in a flow grid layout.\n\t\t\t\t\t},\n\t\t\t\t\tserviceUrl: \"/api/reportdesigner\",\n\t\t\t\t\treport: \"Barcodes Report.trdp\"\n\t\t\t\t}).data(\"telerik_WebDesigner\");\n\t\t\t});\n\t\t</script>\n\t</body>\n\t</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring WebServiceDataSource Web Service Request\nDESCRIPTION: Demonstrates the key configuration settings for a web service request in the WebServiceDataSource component, including URL, authentication, method, and parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/webservicedatasource-component/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting | Description |\n| ------ | ------ |\n|Service URL|The URL the request is sent to. Returns the data from the web service.|\n|IgnoreResponseErrors|When set to *true* treats any response errors as if no data is returned.|\n|Data Selector|The JSONPath expression string used to query JSON data.|\n|Authentication|Supports Basic and 2-step (Bearer) authentication.|\n|Encoding|Data encoding (default is UTF-8).|\n|Method|HTTP request method (GET and POST supported).|\n|Body|The body of the POST method.|\n|Parameters|Request parameters of types Query, Header, Cookie, and Inline.|\n```\n\n----------------------------------------\n\nTITLE: Handling Least Significant Group in Telerik Reporting\nDESCRIPTION: This expression is used to determine the border style for the least significant group in a multi-level grouped crosstab in Telerik Reporting. It checks for changes across all significant levels to decide on the border style. Required data fields should be properly structured in the datasource. Returns 'None' or 'Solid' as the border style.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hide-gridlines-crosstab-table-telerik-reporting.md#2025-04-21_snippet_2\n\nLANGUAGE: Expression\nCODE:\n```\n= (Previous(Fields.group0) = Fields.group0) Or\n  (Previous('group2', Fields.group0) = Fields.group0) Or\n  (Previous('group1', Fields.group0) = Fields.group0) ?\n\t\"None\" : \"Solid\"\n```\n\n----------------------------------------\n\nTITLE: Basic ReportSource Model Declaration\nDESCRIPTION: Demonstrates how to declare a basic model type for ReportSource in MVC views.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/reportsource-model-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n@model Telerik.Reporting.UriReportSource\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n@ModelType Telerik.Reporting.UriReportSource\n```\n\n----------------------------------------\n\nTITLE: Setting up report parameters in HomeController Index action\nDESCRIPTION: Creates a dictionary of parameter values and initializes a ReportModel instance to pass to the view. This example changes the default values of Parameter1 and Parameter2.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-report-source-and-parameters-through-model.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic ActionResult Index()\n{\n\tDictionary<string,object>values = new Dictionary<string, object>() { { \"Parameter1\", \"Item2\" }, { \"Parameter2\", \"Value2\" } };\n\tReportModel reportModel = new ReportModel()\n\t{\n\t\tReportName = \"SampleReport.trdp\",\n\t\tParameters = values\n\t};\n\treturn View(reportModel);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Culture in HTML5-based Report Viewers with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the culture for reports rendered in HTML5-based Telerik report viewers. It utilizes the renderingBegin event handler where the culture is set in the deviceInfo object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pass-culture-from-report-viewer-to-rest-service.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderingBegin(e, { deviceInfo }) {\n    const culture = \"yourCulture\"\n    deviceInfo[\"CurrentCulture\"] = culture;\n    deviceInfo[\"CurrentUICulture\"] = culture;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling error Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `error` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `error` event is emitted when the viewer encounters an error.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\terror(e: string) {\n\t\t\tconsole.log(\"This event will be emitted when viewer encounters an error.\");\n\t\t\tconsole.log(\"The error message\", e);\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource with model parameters in Razor view\nDESCRIPTION: Uses the model's properties to configure the report viewer's ReportSource. This approach passes both the report name and parameters from the model to the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-report-source-and-parameters-through-model.md#2025-04-21_snippet_3\n\nLANGUAGE: Razor\nCODE:\n```\n.ReportSource(Model.ReportName, Model.Parameters)\n```\n\n----------------------------------------\n\nTITLE: Binding to Inner Objects with JSONPath in JSON\nDESCRIPTION: This example demonstrates how to use JSONPath to access nested arrays within a JSON object, specifically extracting the 'book' array from the 'store' object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/webservicedatasource-component/how-to-use-jsonpath-to-filter-json-data.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"store\": {\n\t\t\"book\": [\n\t\t\t{\n\t\t\t\t\"category\": \"reference\",\n\t\t\t\t\"author\": \"Nigel Rees\",\n\t\t\t\t\"title\": \"Sayings of the Century\",\n\t\t\t\t\"price\": 8.95\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"category\": \"fiction\",\n\t\t\t\t\"author\": \"Evelyn Waugh\",\n\t\t\t\t\"title\": \"Sword of Honour\",\n\t\t\t\t\"price\": 12.99\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Parameter Updates in Angular Component\nDESCRIPTION: TypeScript implementation of a component that references the TelerikReportViewer and provides a method to update report parameters. Uses the setReportSource method to refresh the report with new parameter values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\n\timport { TelerikReportViewerComponent } from '@progress/telerik-angular-report-viewer';\n\t...\n\texport class AppComponent {\n\t\t@ViewChild('viewer1') viewer: TelerikReportViewerComponent;\n\t\t...\n\t\tonButtonClick(param: string) {\n\t\t\tvar rs = {\n\t\t\t\treport: 'Invoice.trdp',\n\t\t\t\tparameters: { OrderNumber: param }\n\t\t\t};\n\t\t\tthis.viewer.setReportSource(rs);\n\t\t}\n\t\t...\n\t}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Function to Split String Values for MultiValue Parameters\nDESCRIPTION: This SQL function splits a comma-separated string into a table of individual values. It's used to process multivalue parameters passed to stored procedures, as they need to be formatted as a single string containing comma-separated values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-multivalue-report-parameter-in-a-sql-query.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUSE AdventureWorks\n\tGO\n\tSET ANSI_NULLS ON\n\tGO\n\tSET QUOTED_IDENTIFIER ON\n\tGO\n\n\t-- FUNCTION TO SPLIT STRINGS.\n\tCREATE FUNCTION splitstring\n\t( @stringToSplit VARCHAR(MAX) )\n\tRETURNS\n\t@returnList TABLE ([Name] [nvarchar] (500))\n\tAS\n\tBEGIN\n\n\tDECLARE @name NVARCHAR(255)\n\tDECLARE @pos INT\n\n\tWHILE CHARINDEX(',', @stringToSplit) > 0\n\tBEGIN\n\t\tSELECT @pos  = CHARINDEX(',', @stringToSplit)\n\t\tSELECT @name = SUBSTRING(@stringToSplit, 1, @pos-1)\n\n\t\tINSERT INTO @returnList\n\t\tSELECT @name\n\n\t\tSELECT @stringToSplit = SUBSTRING(@stringToSplit, @pos+1, LEN(@stringToSplit)-@pos)\n\tEND\n\n\tINSERT INTO @returnList\n\tSELECT @stringToSplit\n\n\tRETURN\n\tEND\n\tGO\n\n\t-- STORED PROCEDURE.\n\tCREATE PROCEDURE UseMultiValues\n\t\t@SelectedValues nvarchar(150) = NULL\n\tAS\n\tBEGIN\n\t\t-- SET NOCOUNT ON added to prevent extra result sets from\n\t\t-- interfering with SELECT statements.\n\t\tSET NOCOUNT ON;\n\n\t\tselect * from HumanResources.Department\n\t\twhere (@SelectedValues IS NULL) OR DepartmentID IN (select [Name] from dbo.splitstring(@SelectedValues))\n\tEND\n\tGO\n```\n\n----------------------------------------\n\nTITLE: Using Item Function in Telerik Reporting Expressions\nDESCRIPTION: Retrieves an element from a collection at a specified index. The index is zero-based. This function is useful for accessing specific items in arrays or multi-value parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/utility-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n=Item(0, Array(10,20,30))\n```\n\nLANGUAGE: C#\nCODE:\n```\n= Item(1, Parameters.Parameter1.Value)\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpContext Accessor in Startup\nDESCRIPTION: Adds the IHttpContextAccessor service to the dependency injection container in the Startup.ConfigureServices method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/core-how-to-pass-information-from-httpcontext-to-reporting-engine.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<Microsoft.AspNetCore.Http.IHttpContextAccessor, Microsoft.AspNetCore.Http.HttpContextAccessor>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Header Properties\nDESCRIPTION: Demonstrates how to configure page header properties like PrintOnFirstPage and PrintOnLastPage, which control section visibility on specific pages\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/report-item/page-headers-footers.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* __PrintOnFirstPage__&mdash;If set to `False`, suppresses the page section on the first page of the report.\n\n* __PrintOnLastPage__&mdash;If set to `False`, suppresses the page section on the last page of the report.\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Messages in Telerik Report Viewer JavaScript\nDESCRIPTION: This JavaScript snippet customizes client-side error messages displayed by Telerik HTML5 Report Viewers. It modifies the message 'Unable to get report parameters.' by selecting the appropriate HTML element based on the culture setting. Requires jQuery for DOM manipulation. Handle any text changes within the function onError, which processes error events in the viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-custom-error-messages-on-web-based-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Use this logic if you want to change the error message content. Based on the browser culture, you can change the text to different languages.\\n<script type=\\\"text/javascript\\\">\\n    function onError(e, args) {\\n        if (args.indexOf(\\\"Unable to get report parameters.\\\")) {\\n            $(\\\".trv-pages-area .trv-error-pane .trv-error-message\\\").html(\\\"Custom message here!\\\")\\n        }\\n        ...\\n    }\\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTML5 Report Viewer Client-Side Configuration\nDESCRIPTION: JavaScript code demonstrating how to request a report from the HTML5 Report Viewer with a specific report source\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-report-source-resolver/how-to-implement-a-custom-report-source-resolver.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n    $(\"#reportViewer1\").telerik_ReportViewer({\n        serviceUrl: \"api/reports/\",\n        reportSource: { report: 1 }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Web Report Designer Resource Links with JavaScript\nDESCRIPTION: This JavaScript code iterates through all link elements in the DOM and removes those associated with the Report Designer. It should be executed after navigating away from the Web Report Designer page or when the designer has been removed from the DOM.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/dispose-of-the-web-report-designer-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"link\").each(function () \n\t{ \n\t\tvar isReportingLink = $(this).attr(\"href\").indexOf(\"api/reportdesigner\") > -1;\n\t\tif(isReportingLink){\n\t\t\t$(this).remove();\n\t\t}\n\t})\n```\n\n----------------------------------------\n\nTITLE: Styling Blazor Report Viewer\nDESCRIPTION: This code snippet demonstrates how to style the Blazor Report Viewer using a `<style>` element to set its width and height. The style is applied to an element with the ID `rv1`, setting a fixed width of 1200px and height of 600px. Adjustments can be made based on application needs and DOM structure.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-height-width-blazor-reportviewer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\\n    #rv1 {\\n        position: relative;\\n        width: 1200px;\\n        height: 600px;\\n    }\\n\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Increasing Z-index for ContextMenu in Blazor\nDESCRIPTION: This code snippet provides a CSS style adjustment to increase the z-index of the k-animation-container class to ensure the export context menu is displayed above the TelerikWindow modal window in Blazor. This solution addresses a known issue with the ContextMenu being hidden behind modal windows.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/export-of-blazor-native-viewer-in-telerik-window-not-working.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n\t.k-animation-container {\n\t\tz-index: 15000;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Multi-line String Expression in C# for Telerik Reporting\nDESCRIPTION: This expression shows how to create a multi-line string in a Telerik Reporting expression. It uses string concatenation and includes a new line character for formatting the output across multiple lines.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/using-expressions/expressions-as-values-of-item-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n='Hi Mr.' + Fields.LastName + ', ' + Fields.FirstName + '!\\n\\nHow are you today?'\n```\n\n----------------------------------------\n\nTITLE: Error Message for DocumentElement Exception in Telerik Reporting\nDESCRIPTION: The error message displayed when the ReportViewer control fails to set up the HTTP handler in the web.config file due to an existing DocumentElement node.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/this-document-already-has-a-documentelement-node-exception.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe ReportViewer control failed to setup the http handler in the web.config file. \nYou may experience troubles when viewing the report.   \n\nException details:  This document already has a 'DocumentElement' node.\n```\n\n----------------------------------------\n\nTITLE: Binding ObjectDataSource to DataSet\nDESCRIPTION: Demonstrates how to create a DataSet with three tables, configure an ObjectDataSource component to bind to one of the tables, and preview it in a Windows Forms Report Viewer. The code includes setting up sample data and configuring calculated fields.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/bind-to-data-set.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nDataSet dataSet = new DataSet();\n\nDataTable dt1 = new DataTable(\"Table1\");\ndt1.Columns.Add(\"ProductID\", typeof(int));\ndt1.Columns.Add(\"Name\", typeof(string));\ndt1.Columns.Add(\"Price\", typeof(decimal));\ndt1.Rows.Add(1, \"Product 1\", 10.0M);\ndt1.Rows.Add(2, \"Product 2\", 20.0M);\ndataSet.Tables.Add(dt1);\n\nDataTable dt2 = new DataTable(\"Table2\");\ndt2.Columns.Add(\"OrderID\", typeof(int));\ndt2.Columns.Add(\"OrderDate\", typeof(DateTime));\ndt2.Rows.Add(1, DateTime.Now);\ndt2.Rows.Add(2, DateTime.Now.AddDays(1));\ndataSet.Tables.Add(dt2);\n\nDataTable dt3 = new DataTable(\"Table3\");\ndt3.Columns.Add(\"CategoryID\", typeof(int));\ndt3.Columns.Add(\"CategoryName\", typeof(string));\ndt3.Rows.Add(1, \"Category 1\");\ndt3.Rows.Add(2, \"Category 2\");\ndataSet.Tables.Add(dt3);\n\ndt1.Columns.Add(\"Discount\", typeof(decimal), \"Price * 0.9\");\n\nObjectDataSource dataSource = new ObjectDataSource();\ndataSource.DataSource = dataSet;\ndataSource.DataMember = \"Table1\";\n\nReport report = new Report();\nreport.DataSource = dataSource;\n\nReportViewer viewer = new ReportViewer();\nviewer.Report = report;\nviewer.RefreshReport();\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim dataSet As New DataSet()\n\nDim dt1 As New DataTable(\"Table1\")\ndt1.Columns.Add(\"ProductID\", GetType(Integer))\ndt1.Columns.Add(\"Name\", GetType(String))\ndt1.Columns.Add(\"Price\", GetType(Decimal))\ndt1.Rows.Add(1, \"Product 1\", 10.0D)\ndt1.Rows.Add(2, \"Product 2\", 20.0D)\ndataSet.Tables.Add(dt1)\n\nDim dt2 As New DataTable(\"Table2\")\ndt2.Columns.Add(\"OrderID\", GetType(Integer))\ndt2.Columns.Add(\"OrderDate\", GetType(DateTime))\ndt2.Rows.Add(1, DateTime.Now)\ndt2.Rows.Add(2, DateTime.Now.AddDays(1))\ndataSet.Tables.Add(dt2)\n\nDim dt3 As New DataTable(\"Table3\")\ndt3.Columns.Add(\"CategoryID\", GetType(Integer))\ndt3.Columns.Add(\"CategoryName\", GetType(String))\ndt3.Rows.Add(1, \"Category 1\")\ndt3.Rows.Add(2, \"Category 2\")\ndataSet.Tables.Add(dt3)\n\ndt1.Columns.Add(\"Discount\", GetType(Decimal), \"Price * 0.9\")\n\nDim dataSource As New ObjectDataSource()\ndataSource.DataSource = dataSet\ndataSource.DataMember = \"Table1\"\n\nDim report As New Report()\nreport.DataSource = dataSource\n\nDim viewer As New ReportViewer()\nviewer.Report = report\nviewer.RefreshReport()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom String Resources for HTML5 ReportViewer\nDESCRIPTION: JavaScript code that defines localization string resources for the HTML5 ReportViewer. Contains translations for warnings, errors, UI elements, accessibility labels, search dialog, and email functionality.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n(() => {\n  var sr = {\n    //warning and error string resources\n    controllerNotInitialized: \"Controller is not initialized.\",\n    noReportInstance: \"No report instance.\",\n    missingTemplate: \"!obsolete resource!\",\n    noReport: \"No report.\",\n    noReportDocument: \"No report document.\",\n    missingOrInvalidParameter: \"There are missing or invalid parameter values. Please input valid data for the following parameters:\\n\",\n    invalidParameter: \"Please input a valid value.\",\n    invalidDateTimeValue: \"Please input a valid date.\",\n    parameterIsEmpty: \"Parameter value cannot be empty.\",\n    cannotValidateType: \"Cannot validate parameter of type {type}.\",\n    loadingFormats: \"Loading...\",\n    loadingReport: \"Loading report...\",\n    preparingDownload: \"Preparing document to download. Please wait...\",\n    preparingPrint: \"Preparing document to print. Please wait...\",\n    errorLoadingTemplates: \"Error loading the report viewer's templates. (templateUrl = '{0}').\",\n    errorServiceUrl: \"Cannot access the Reporting REST service. (serviceUrl = '{0}'). Make sure the service address is correct and enable CORS if needed. (https://enable-cors.org)\",\n    errorServiceVersion: \"The version of the Report Viewer '{1}' does not match the version of the Reporting REST Service '{0}'. Please make sure both are running same version.\",\n    loadingReportPagesInProgress: \"{0} pages loaded so far...\",\n    loadedReportPagesComplete: \"Done. Total {0} pages loaded.\",\n    noPageToDisplay: \"No page to display.\",\n    errorDeletingReportInstance: \"Error deleting report instance: '{0}'.\",\n    errorRegisteringViewer: \"Error registering the viewer with the service.\",\n    noServiceClient: \"No serviceClient has been specified for this controller.\",\n    errorRegisteringClientInstance: \"Error registering client instance.\",\n    errorCreatingReportInstance: \"Error creating report instance (Report = '{0}').\",\n    errorCreatingReportDocument: \"Error creating report document (Report = '{0}'; Format = '{1}').\",\n    unableToGetReportParameters: \"Unable to get report parameters.\",\n    errorObtainingAuthenticationToken: \"Error obtaining authentication token.\",\n    clientExpired: \"Click 'Refresh' to restore client session.\",\n    promisesChainStopError: \"Error shown. Throwing promises chain stop error.\",\n    renderingCanceled: \"Report processing was canceled.\",\n    tryReportPreview: \"The report may now be previewed.\",\n    //viewer template string resources\n    parameterEditorSelectNone: \"clear selection\",\n    parameterEditorSelectAll: \"select all\",\n    parametersAreaPreviewButton: \"Preview\",\n    menuNavigateBackwardText: \"Navigate Backward\",\n    menuNavigateBackwardTitle: \"Navigate Backward\",\n    menuNavigateForwardText: \"Navigate Forward\",\n    menuNavigateForwardTitle: \"Navigate Forward\",\n    menuStopRenderingText: \"Stop Rendering\",\n    menuStopRenderingTitle: \"Stop Rendering\",\n    menuRefreshText: \"Refresh\",\n    menuRefreshTitle: \"Refresh\",\n    menuFirstPageText: \"First Page\",\n    menuFirstPageTitle: \"First Page\",\n    menuLastPageText: \"Last Page\",\n    menuLastPageTitle: \"Last Page\",\n    menuPreviousPageTitle: \"Previous Page\",\n    menuNextPageTitle: \"Next Page\",\n    menuPageNumberTitle: \"Page Number Selector\",\n    menuDocumentMapTitle: \"Toggle Document Map\",\n    menuParametersAreaTitle: \"Toggle Parameters Area\",\n    menuZoomInTitle: \"Zoom In\",\n    menuZoomOutTitle: \"Zoom Out\",\n    menuPageStateTitle: \"Toggle FullPage/PageWidth\",\n    menuPrintText: \"Print...\",\n    menuContinuousScrollText: \"Toggle Continuous Scrolling\",\n    menuSendMailText: \"Send an email\",\n    menuPrintTitle: \"Print\",\n    menuContinuousScrollTitle: \"Toggle Continuous Scrolling\",\n    menuSendMailTitle: \"Send an email\",\n    menuExportText: \"Export\",\n    menuExportTitle: \"Export\",\n    menuPrintPreviewText: \"Toggle Print Preview\",\n    menuPrintPreviewTitle: \"Toggle Print Preview\",\n    menuSearchText: \"Search\",\n    menuSearchTitle: \"Toggle Search\",\n    menuSideMenuTitle: \"Toggle Side Menu\",\n    sendEmailFromLabel: \"From:\",\n    sendEmailToLabel: \"To:\",\n    sendEmailCCLabel: \"CC:\",\n    sendEmailSubjectLabel: \"Subject:\",\n    sendEmailFormatLabel: \"Format:\",\n    sendEmailSendLabel: \"Send\",\n    sendEmailCancelLabel: \"Cancel\",\n    //accessibility string resources\n    ariaLabelPageNumberSelector: \"Page number selector. Showing page {0} of {1}.\",\n    ariaLabelPageNumberEditor: \"Page number editor\",\n    ariaLabelExpandable: \"Expandable\",\n    ariaLabelSelected: \"Selected\",\n    ariaLabelParameter: \"parameter\",\n    ariaLabelErrorMessage: \"Error message\",\n    ariaLabelParameterInfo: \"Contains {0} options\",\n    ariaLabelMultiSelect: \"Multiselect\",\n    ariaLabelMultiValue: \"Multivalue\",\n    ariaLabelSingleValue: \"Single value\",\n    ariaLabelParameterDateTime: \"DateTime\",\n    ariaLabelParameterString: \"String\",\n    ariaLabelParameterNumerical: \"Numerical\",\n    ariaLabelParameterBoolean: \"Boolean\",\n    ariaLabelParametersAreaPreviewButton: \"Preview the report\",\n    ariaLabelMainMenu: \"Main menu\",\n    ariaLabelCompactMenu: \"Compact menu\",\n    ariaLabelSideMenu: \"Side menu\",\n    ariaLabelDocumentMap: \"Document map area\",\n    ariaLabelDocumentMapSplitter: \"Document map area splitbar.\",\n    ariaLabelParametersAreaSplitter: \"Parameters area splitbar.\",\n    ariaLabelPagesArea: \"Report contents area\",\n    ariaLabelSearchDialogArea: \"Search area\",\n    ariaLabelSendEmailDialogArea: \"Send email area\",\n    ariaLabelSearchDialogStop: \"Stop search\",\n    ariaLabelSearchDialogOptions: \"Search options\",\n    ariaLabelSearchDialogNavigateUp: \"Navigate up\",\n    ariaLabelSearchDialogNavigateDown: \"Navigate down\",\n    ariaLabelSearchDialogMatchCase: \"Match case\",\n    ariaLabelSearchDialogMatchWholeWord: \"Match whole word\",\n    ariaLabelSearchDialogUseRegex: \"Use regex\",\n    ariaLabelMenuNavigateBackward: \"Navigate backward\",\n    ariaLabelMenuNavigateForward: \"Navigate forward\",\n    ariaLabelMenuStopRendering: \"Stop rendering\",\n    ariaLabelMenuRefresh: \"Refresh\",\n    ariaLabelMenuFirstPage: \"First page\",\n    ariaLabelMenuLastPage: \"Last page\",\n    ariaLabelMenuPreviousPage: \"Previous page\",\n    ariaLabelMenuNextPage: \"Next page\",\n    ariaLabelMenuPageNumber: \"Page number selector\",\n    ariaLabelMenuDocumentMap: \"Toggle document map\",\n    ariaLabelMenuParametersArea: \"Toggle parameters area\",\n    ariaLabelMenuZoomIn: \"Zoom in\",\n    ariaLabelMenuZoomOut: \"Zoom out\",\n    ariaLabelMenuPageState: \"Toggle FullPage/PageWidth\",\n    ariaLabelMenuPrint: \"Print\",\n    ariaLabelMenuContinuousScroll: \"Continuous scrolling\",\n    ariaLabelMenuSendMail: \"Send an email\",\n    ariaLabelMenuExport: \"Export\",\n    ariaLabelMenuPrintPreview: \"Toggle print preview\",\n    ariaLabelMenuSearch: \"Search in report contents\",\n    ariaLabelMenuSideMenu: \"Toggle side menu\",\n    ariaLabelSendEmailFrom: \"From email address\",\n    ariaLabelSendEmailTo: \"Recipient email address\",\n    ariaLabelSendEmailCC: \"Carbon Copy email address\",\n    ariaLabelSendEmailSubject: \"Email subject:\",\n    ariaLabelSendEmailFormat: \"Report format:\",\n    ariaLabelSendEmailSend: \"Send email\",\n    ariaLabelSendEmailCancel: \"Cancel sending email\",\n    //search dialog resources\n    searchDialogTitle: \"Search in report contents\",\n    searchDialogSearchInProgress: \"searching...\",\n    searchDialogNoResultsLabel: \"No results\",\n    searchDialogResultsFormatLabel: \"Result {0} of {1}\",\n    searchDialogStopTitle: \"Stop Search\",\n    searchDialogNavigateUpTitle: \"Navigate Up\",\n    searchDialogNavigateDownTitle: \"Navigate Down\",\n    searchDialogMatchCaseTitle: \"Match Case\",\n    searchDialogMatchWholeWordTitle: \"Match Whole Word\",\n    searchDialogUseRegexTitle: \"Use Regex\",\n    searchDialogCaptionText: \"Find\",\n    searchDialogPageText: \"page\",\n    // Send Email dialog resources\n    sendEmailDialogTitle: \"Send Email\",\n    sendEmailValidationEmailRequired: \"Email field is required\",\n    sendEmailValidationEmailFormat: \"Email format is not valid\",\n    sendEmailValidationSingleEmail: \"The field accepts a single email address only\",\n    sendEmailValidationFormatRequired: \"Format field is required\",\n    errorSendingDocument: \"Error sending report document (Report = '{0}').\"\n  };\n  window.telerikReportViewer ||= {};\n  window.telerikReportViewer.sr ||= sr;\n})();\n```\n\n----------------------------------------\n\nTITLE: Converting IList to DataTable in C# for Telerik Reporting\nDESCRIPTION: This code snippet demonstrates how to convert an IList to a DataTable, which can be serialized for use with Telerik Reporting in ASP.NET WebForms. It creates a new DataTable, adds columns, and populates rows from the IList items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/cannot-serialize-sessions-state.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nDataTable dt = new DataTable();\nDataColumn col = new DataColumn(\"ColumnName\", typeof(string));\n//....\ndt.Columns.Add(col);\nforeach (object Item in MyIList)\n{\n\tDataRow row = dt.NewRow();\n\trow[\"ColumnName\"] = Item;\n\t//.....\n\tdt.Rows.Add(row);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Web.config\nDESCRIPTION: XML configuration for setting up the database connection string required for the report example.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<connectionStrings>\n\t\t <add name=\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\"\n\t\t\t\tconnectionString=\"Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=SSPI\"\n\t\t\t\tproviderName=\"System.Data.SqlClient\" />\n\t</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Adding Report Designer Resources\nDESCRIPTION: HTML code to include Telerik Report Designer and Viewer dependencies\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-the-web-designer-in-vue.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://demos.telerik.com/reporting/api/reports/resources/js/telerikReportViewer\"></script>\n<script src=\"https://demos.telerik.com/reporting/api/reportdesigner/designerresources/js/webReportDesigner\"></script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessibility Features in HTML5 Report Viewer\nDESCRIPTION: Setting the enableAccessibility option to true helps eliminate most warnings and violations reported by Axe testing tool. This is the first step in making the report viewer more accessible.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-fix-axe-errors-for-html5-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n                .telerik_ReportViewer({\n                        enableAccessibility: true,\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Viewer Options\nDESCRIPTION: This function configures various view options for the report viewer based on the report name. It adjusts page and view modes to enhance the user experience while using the Telerik report viewer. Dependencies include Telerik-specific types and constants.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setReportOptions(reportViewerOptions) {\n\tconst report = reportViewerOptions.reportSource.report;\n\tif (report === \"Product Tag Report.trdp\") {\n\t\treportViewerOptions.pageMode = telerikReportViewer.PageModes.CONTINUOUS_SCROLL;\n\t\treportViewerOptions.viewMode = telerikReportViewer.ViewModes.PRINT_PREVIEW;\n\t} else if (report === \"Product Catalog.trdp\") {\n\t\treportViewerOptions.pageMode = telerikReportViewer.PageModes.SINGLE_PAGE;\n\t\treportViewerOptions.viewMode = telerikReportViewer.ViewModes.INTERACTIVE;\n\t} else if (report === \"Dashboard.trdp\") {\n\t\treportViewerOptions.pageMode = telerikReportViewer.PageModes.CONTINUOUS_SCROLL;\n\t\treportViewerOptions.viewMode = telerikReportViewer.ViewModes.PRINT_PREVIEW;\n\t} else if (report === \"Report1.trdp\") {\n\t\treportViewerOptions.viewMode = telerikReportViewer.ViewModes.PRINT_PREVIEW;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Modified Report Definition in C# with Telerik Reporting\nDESCRIPTION: This code snippet demonstrates how to capture the final state of a report definition after programmatic modifications. It uses the ItemDataBound event to serialize the report definition and save it as a TRDX/XML file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-get-report-definition-of-processing-report.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nprivate void Report1_ItemDataBound(object sender, EventArgs e)\n{\n    var procReport = (Telerik.Reporting.Processing.Report)sender;\n    var definition = procReport.Report.ItemDefinition;\n \n    string trdxFileName = \"PathToSaveReportHere\";\n    SerializeReportDefinitionInTrdxFile(definition, trdxFileName);\n}\n \nprivate static void SerializeReportDefinitionInTrdxFile(ReportItemBase definition, string trdxFileName)\n{\n    using (System.Xml.XmlWriter xmlWriter = System.Xml.XmlWriter.Create(trdxFileName))\n    {\n        Telerik.Reporting.XmlSerialization.ReportXmlSerializer xmlSerializer = new Telerik.Reporting.XmlSerialization.ReportXmlSerializer();\n \n        xmlSerializer.Serialize(xmlWriter, definition);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Listeners for .NET in XML\nDESCRIPTION: This XML snippet demonstrates how to configure trace listeners specifically for the .NET version within the Telerik.Reporting section of the application configuration file.  It shows settings for the trace listener type, initialization data (log file path), and removal of the default listener, enabling targeted logging for troubleshooting in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/configuration/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Telerik.Reporting>\n\t\t<traceListeners>\n\t\t\t<add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\"  initializeData=\"Telerik.ReportDesigner.Net.log\" />\n\t\t\t<remove name=\"Default\" />\n\t\t</traceListeners>\n\t</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Adding the model reference to the Razor view\nDESCRIPTION: Specifies the model type for the Razor view that contains the report viewer. This must be added at the top of the view file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-report-source-and-parameters-through-model.md#2025-04-21_snippet_2\n\nLANGUAGE: Razor\nCODE:\n```\n@model PassParameter.Models.ReportModel\n```\n\n----------------------------------------\n\nTITLE: Configuring GenericTileProvider URL Template in C#\nDESCRIPTION: Demonstrates the format for the UrlTemplate property of the GenericTileProvider class. This template is used to construct tile request URLs for map imagery.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/structure/tile-providers.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n\"https://{subdomain}.tile.openstreetmap.org/{zoom}/{x}/{y}.png\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Provider in Telerik Reporting XML\nDESCRIPTION: This XML snippet demonstrates how to configure a cache provider within the Telerik Reporting configuration section, specifically setting the cache provider to 'File'. The 'provider' attribute specifies the current cache provider. Predefined providers can be utilized without additional setup.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-cache.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<Cache provider=\"File\" />\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Initializing Telerik Web Report Designer in HTML and JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize the Telerik Web Report Designer in an HTML page. It includes the necessary scripts and styles, and sets up the designer with specific configurations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-web-report-designer-in-net-core-mvc.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n\t\t<link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500&display=swap\" rel=\"stylesheet\">\n\n\t\t<title>Telerik HTML5 Report Viewer Demo</title>\n\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t</head>\n\t<body>\n\t\t<div id=\"webReportDesigner\">\n\t\t\tloading...\n\t\t</div>\n\t</body>\n</html>\n\n@section scripts\n{\n\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n\t<script src=\"https://kendo.cdn.telerik.com/2020.1.114/js/kendo.all.min.js\"></script>\n\n\t<script src=\"/api/reports/resources/js/telerikReportViewer\"></script>\n\t<script src=\"api/reportdesigner/designerresources/js/webReportDesigner-14.1.20.618.min.js/\"></script>\n\n\t<script type=\"text/javascript\">\n\t\t$(document).ready(function () {\n\t\t\t$(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\t\t\ttoolboxArea: {\n\t\t\t\t\tlayout: \"list\" //Change to \"grid\" to display the contents of the Components area in a flow grid layout.\n\t\t\t\t},\n\t\t\t\tserviceUrl: \"api/reportdesigner/\",\n\t\t\t\treport: \"Barcodes Report.trdp\"\n\t\t\t}).data(\"telerik_WebDesigner\");\n\t\t});\n\t</script>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll Mode Button for Mobile (Font Awesome Template)\nDESCRIPTION: HTML code to add the Scroll Mode button to the side menu for mobile screens using the Font Awesome template. This snippet should be inserted into the 'ul' element with the 'trv-side-menu-ul' id attribute.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-show-the-page-scroll-mode-button.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<li aria-label=\"ariaLabelMenuContinuousScroll\"><a data-command=\"telerik_ReportViewer_pageMode\" title=\"menuContinuousScrollTitle\" href=\"#\"><i class=\"fa fa-angle-double-down icon-angle-double-down\"></i><span>menuContinuousScrollText</span></a></li>\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Service Engine Connection in WinForms Viewer\nDESCRIPTION: Demonstrates how to connect a WinForms Report Viewer to a REST Service engine. The example creates a RestServiceConnectionInfo object with REST service URI, authentication token, and other settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-construct-a-string-to-connect-to-report-engine.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nreportViewer1.ReportEngineConnection = new RestServiceConnectionInfo()\n{\n    Uri = new Uri(\"http://localhost:18103/api/reports\"),\n    Token = \"authToken\",\n    UseDefaultCredentials = true,\n    Timeout = 30,\n    KeepClientAlive = true\n};\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nReportViewer1.ReportEngineConnection = New RestServiceConnectionInfo() With {\n    .Uri = New Uri(\"http://localhost:18103/api/reports\"),\n    .Token = \"authToken\",\n    .UseDefaultCredentials = True,\n    .Timeout = 30,\n    .KeepClientAlive = True\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters in Telerik Reporting Expressions\nDESCRIPTION: Shows how to access report parameters in Telerik Reporting expressions. Parameters can be single-value or multi-value and provide various properties like Value, Label, and Text.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/global-objects.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nParameters.Product.Value\n```\n\nLANGUAGE: C#\nCODE:\n```\nParameters.Product.Label\n```\n\nLANGUAGE: C#\nCODE:\n```\nParameters.Product.Text\n```\n\n----------------------------------------\n\nTITLE: Using Literal Text in Telerik Reporting Expressions\nDESCRIPTION: Demonstrates how to use literal text in Telerik Reporting expressions. Literal text can be enclosed in single or double quotation marks and concatenated with field values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/constants.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n=\"Product name: \" + Fields.ProductName\n```\n\nLANGUAGE: C#\nCODE:\n```\n='Product name: ' + Fields.ProductName\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportDesignerController in C#\nDESCRIPTION: Configuration of Telerik Web Report Designer REST service with file-based storage and report source resolution in an ASP.NET MVC application\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-framework-application.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace CSharp.MvcDemo.Controllers\n{\n    using System;\n    using System.IO;\n    using System.Web;\n    using System.Web.Http;\n    using Telerik.Reporting.Cache.File;\n    using Telerik.Reporting.Services;\n    using Telerik.Reporting.Services.WebApi;\n    using Telerik.WebReportDesigner.Services;\n    using Telerik.WebReportDesigner.Services.Controllers;\n\n    public class ReportDesignerController : ReportDesignerControllerBase\n    {\n        static ReportServiceConfiguration configurationInstance;\n        static ReportDesignerServiceConfiguration designerConfigurationInstance;\n        static ReportDesignerController()\n        {\n            var appPath = HttpContext.Current.Server.MapPath(\"~/\");\n            var reportsPath = Path.Combine(appPath, \"Reports\");\n            var resolver = new UriReportSourceResolver(reportsPath);\n\n            configurationInstance = new ReportServiceConfiguration\n            {\n                HostAppId = \"Html5App\",\n                Storage = new FileStorage(),\n                ReportSourceResolver = resolver,\n                ReportSharingTimeout = 1000,\n                ClientSessionTimeout = 20,\n            };\n\n            designerConfigurationInstance = new ReportDesignerServiceConfiguration\n            {\n                DefinitionStorage = new FileDefinitionStorage(reportsPath),\n                SettingsStorage = new FileSettingsStorage(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"Telerik Reporting\"))\n            };\n        }\n\n        public ReportDesignerController()\n        {\n            this.ReportServiceConfiguration = configurationInstance;\n            this.ReportDesignerServiceConfiguration = designerConfigurationInstance;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Report Designer Controller\nDESCRIPTION: This C# snippet provides a custom Web API controller base implementation for the Telerik Web Report Designer. The controller is set up in a 'Controllers' folder and extends ReportDesignerControllerBase to handle reporting services.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-blazor-application.md#2025-04-21_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nusing Microsoft.AspNetCore.Mvc;\n\tusing Telerik.Reporting.Services;\n\tusing Telerik.WebReportDesigner.Services;\n\tusing Telerik.WebReportDesigner.Services.Controllers;\n\t[Route(\"api/reportdesigner\")]\n\t[ApiController]\n\tpublic class ReportDesignerController : ReportDesignerControllerBase\n\t{\n\t\tpublic ReportDesignerController(IReportDesignerServiceConfiguration reportDesignerServiceConfiguration, IReportServiceConfiguration reportServiceConfiguration)\n\t\t\t: base(reportDesignerServiceConfiguration, reportServiceConfiguration)\n\t\t{\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining String Resources for Localization in TypeScript\nDESCRIPTION: This TypeScript snippet defines a class `StringResources` with static properties for different languages. These properties contain localized strings that can be used to override default messages in the Angular Report Viewer. The snippet requires TypeScript and provides the foundation for managing localized content.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/customizing/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class StringResources {\n\tstatic english = {\n\t\tloadingReport: 'Loading...',\n\t\t// override other string resources here\n\t}\n\tstatic japanese = {\n\t\tloadingReport: 'ちょっと、まってください...',\n\t\t// override other string resources here\n\t}\n\t// override string resources for other cultures here\n}\n```\n\n----------------------------------------\n\nTITLE: Using User Function in Binding Expression with Separate Colors\nDESCRIPTION: This snippet shows how to call the UserColorPalette function in a Binding Expression, providing each color as a separate parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/colorpalette-set-with-bindings.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n= UserColorPalette(\"#FAFAFA\", \"#FF8080\", \"#80FF80\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Send Mail Message Functionality\nDESCRIPTION: Demonstrates how to enable the send mail message toolbar button using viewer initialization options. Requires implementing server-side code for sending email messages with report attachments.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/send-mail-message.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of enabling send mail message in HTML5 Report Viewer\nvar reportViewer = new telerik.reportViewer({\n    SendEmail: true // Enable send mail message functionality\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection String Manager in VB.NET\nDESCRIPTION: A VB.NET implementation of the ReportConnectionStringManager class that provides functionality for managing connection strings in Telerik Reports, supporting various report source types and handling nested data items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/changing-the-connection-string-dynamically-according-to-runtime-data.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports Telerik.Reporting\n\nClass ReportConnectionStringManager\n\tReadOnly connectionString As String\n\n\tPublic Sub New(connectionString As String)\n\t\tMe.connectionString = connectionString\n\tEnd Sub\n\n\tPublic Function UpdateReportSource(sourceReportSource As ReportSource) As ReportSource\n\t\tIf TypeOf sourceReportSource Is UriReportSource Then\n\t\t\tDim uriReportSource = DirectCast(sourceReportSource, UriReportSource)\n\t\t\t' unpackage TRDP report\n\t\t\tDim reportInstance = UnpackageReport(uriReportSource)\n\t\t\t' or deserialize TRDX report(legacy format)\n\t\t\t' var reportInstance = DeserializeReport(uriReportSource);\n\t\t\tValidateReportSource(uriReportSource.Uri)\n\t\t\tMe.SetConnectionString(reportInstance)\n\t\t\tReturn CreateInstanceReportSource(reportInstance, uriReportSource)\n\t\tEnd If\n\n\t\tIf TypeOf sourceReportSource Is XmlReportSource Then\n\t\t\tDim xml = DirectCast(sourceReportSource, XmlReportSource)\n\t\t\tValidateReportSource(xml.Xml)\n\t\t\tDim reportInstance = Me.DeserializeReport(xml)\n\t\t\tMe.SetConnectionString(reportInstance)\n\t\t\tReturn CreateInstanceReportSource(reportInstance, xml)\n\t\tEnd If\n\n\t\tIf TypeOf sourceReportSource Is InstanceReportSource Then\n\t\t\tDim instanceReportSource = DirectCast(sourceReportSource, InstanceReportSource)\n\t\t\tMe.SetConnectionString(DirectCast(instanceReportSource.ReportDocument, ReportItemBase))\n\t\t\tReturn instanceReportSource\n\t\tEnd If\n\t\n\t\tIf TypeOf sourceReportSource Is TypeReportSource Then\n\t\t\tDim typeReportSource = DirectCast(sourceReportSource, TypeReportSource)\n\t\t\tDim typeName = typeReportSource.TypeName\n\t\t\tValidateReportSource(typeName)\n\t\t\tDim reportType = Type.[GetType](typeName)\n\t\t\tDim reportInstance = DirectCast(Activator.CreateInstance(reportType), Report)\n\t\t\tMe.SetConnectionString(DirectCast(reportInstance, ReportItemBase))\n\t\t\tReturn CreateInstanceReportSource(reportInstance, typeReportSource)\n\t\tEnd If\n\n\t\tThrow New NotImplementedException(\"Handler for the used ReportSource type is not implemented.\")\n\tEnd Function\n\t\n\tPrivate Function CreateInstanceReportSource(report As IReportDocument, originalReportSource As ReportSource) As ReportSource\n\t\tDim instanceReportSource = New InstanceReportSource() With { _\n\t\t\t.ReportDocument = report _\n\t\t}\n\t\tInstanceReportSource.Parameters.AddRange(originalReportSource.Parameters)\n\t\tReturn InstanceReportSource\n\tEnd Function\n\t\n\tPublic Sub ValidateReportSource(value As String)\n\t\tIf value.Trim().StartsWith(\"=\") Then\n\t\t\tThrow New InvalidOperationException(\"Expressions for ReportSource are not supported when changing the connection string dynamically\")\n\t\tEnd If\n\tEnd Sub\n\t\n\tPrivate Function UnpackageReport(uriReportSource As UriReportSource) As Report\n\t\tDim reportPackager = New ReportPackager()\n\t\tUsing sourceStream = System.IO.File.OpenRead(uriReportSource.Uri)\n\t\t\tDim report = DirectCast(reportPackager.UnpackageDocument(sourceStream), Report)\n\t\t\tReturn report\n\t\tEnd Using\n\tEnd Function\n\t\n\tPublic Function DeserializeReport(uriReportSource As UriReportSource) As Report\n\t\tDim settings = New System.Xml.XmlReaderSettings()\n\t\tsettings.IgnoreWhitespace = True\n\t\tUsing xmlReader = System.Xml.XmlReader.Create(uriReportSource.Uri, settings)\n\t\t\tDim xmlSerializer = New Telerik.Reporting.XmlSerialization.ReportXmlSerializer()\n\t\t\tDim report = DirectCast(xmlSerializer.Deserialize(xmlReader), Telerik.Reporting.Report)\n\t\t\tReturn report\n\t\tEnd Using\n\tEnd Function\n\t\n\tPublic Function DeserializeReport(xmlReportSource As XmlReportSource) As Report\n\t\tDim settings = New System.Xml.XmlReaderSettings()\n\t\tsettings.IgnoreWhitespace = True\n\t\tDim textReader = New System.IO.StringReader(xmlReportSource.Xml)\n\t\tUsing xmlReader = System.Xml.XmlReader.Create(textReader, settings)\n\t\t\tDim xmlSerializer = New Telerik.Reporting.XmlSerialization.ReportXmlSerializer()\n\t\t\tDim report = DirectCast(xmlSerializer.Deserialize(xmlReader), Telerik.Reporting.Report)\n\t\t\tReturn report\n\t\tEnd Using\n\tEnd Function\n\n\tPublic Sub SetConnectionString(reportItemBase As ReportItemBase)\n\t\tIf reportItemBase.Items.Count < 1 Then\n\t\t\tReturn\n\t\tEnd If\n\t\n\t\tIf TypeOf reportItemBase Is Report Then\n\t\t\tDim report = DirectCast(reportItemBase, Report)\n\t\n\t\t\tIf TypeOf report.DataSource Is SqlDataSource Then\n\t\t\t\tDim sqlDataSource = DirectCast(report.DataSource, SqlDataSource)\n\t\t\t\tsqlDataSource.ConnectionString = connectionString\n\t\t\tEnd If\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom TypeDescriptionProvider to ExpandoObject in C#\nDESCRIPTION: This code snippet demonstrates how to attach the custom TypeDescriptionProvider to a single ExpandoObject instance or to all instances of ExpandoObject type.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-objectdatasource-with-expandoobject.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n//attach to a single instance\ndynamic newObj = new ExpandoObject();\nTypeDescriptor.AddProvider(new ExpandoObjectTypeDescriptionProvider(), newObj);\n//attach to all instances\nTypeDescriptor.AddProvider(new ExpandoObjectTypeDescriptionProvider(), typeof(ExpandoObject));\n```\n\n----------------------------------------\n\nTITLE: Responsive Styling for Blazor Report Viewer\nDESCRIPTION: An alternative style for the Blazor Report Viewer sets the width to 85% and the height to 90%, making it responsive to the container element's size. This style positions the Report Viewer absolutely within its parent container.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-height-width-blazor-reportviewer.md#2025-04-21_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\\n   #rv1 {\\n            width: 85%;\\n            height: 90%;\\n            position: absolute;\\n        }\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using Custom User Function in Telerik Reporting Expression\nDESCRIPTION: This code demonstrates how to use a custom User function in a Binding expression to set the DataSource.Source property using a parameter value. The function converts the parameter value to a Uri that can be used by the DataSource component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-the-file-path-of-json-or-csv-datasource-through-report-parameter.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\n= MyUserFunction.Class1.setCsvSource(Parameters.csvSource.Value)\n```\n\n----------------------------------------\n\nTITLE: Managing Viewer Loading in Preview Mode\nDESCRIPTION: This snippet manages the 'viewerLoading' event, allowing developers to customize viewer options such as 'reportSource' and 'viewMode' in the Telerik Web Report Designer's preview mode. It includes a function to set specific report parameters and options based on the report being loaded.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n\t$(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\tpersistSession: false,\n\t\ttoolboxArea: {\n\t\t\tlayout: \"list\"\n\t\t},\n\t\tserviceUrl: \"api/reportdesigner/\",\n\t\treport: \"Dashboard.trdp\",\n\t\t// design/preview\n\t\tstartMode: \"design\",\n\t\tviewerLoading: onViewerLoading\n\t}).data(\"telerik_WebReportDesigner\");\n});\n\nfunction onViewerLoading(e, args) {\n\t// e: jQuery event;\n\t// args: IViewerPreLoadEventArgs ->\n\t//\treportViewerOptions: report viewer's options. Available options:\n\t//\t\treportSource: report viewer's report source.\n\t//\t\tviewMode: report viewer's view mode.\n\t//\t\tpageMode: report viewer's page mode.\n\tsetReportParameters(args.reportViewerOptions.reportSource);\n\tsetReportOptions(args.reportViewerOptions);\n}\n\nfunction setReportParameters(reportSource) {\n\tif (reportSource.report === \"Dashboard.trdp\") {\n\t\treportSource.parameters = { ReportYear: 2003 };\n\t}\n}\n\nfunction setReportOptions(reportViewerOptions) {\n\tconst report = reportViewerOptions.reportSource.report;\n\tif (report === \"Product Tag Report.trdp\") {\n\t\treportViewerOptions.pageMode = telerikReportViewer.PageModes.CONTINUOUS_SCROLL;\n\t\treportViewerOptions.viewMode = telerikReportViewer.ViewModes.PRINT_PREVIEW;\n\t} else if (report === \"Product Catalog.trdp\") {\n\t\treportViewerOptions.pageMode = telerikReportViewer.PageModes.SINGLE_PAGE;\n\t\treportViewerOptions.viewMode = telerikReportViewer.ViewModes.INTERACTIVE;\n\t} else if (report === \"Dashboard.trdp\") {\n\t\treportViewerOptions.pageMode = telerikReportViewer.PageModes.CONTINUOUS_SCROLL;\n\t\treportViewerOptions.viewMode = telerikReportViewer.ViewModes.PRINT_PREVIEW;\n\t} else if (report === \"Report1.trdp\") {\n\t\treportViewerOptions.viewMode = telerikReportViewer.ViewModes.PRINT_PREVIEW;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ReportsController for Telerik Reporting in ASP.NET Core MVC\nDESCRIPTION: Implements the ReportsController class for handling Telerik Reporting requests in an ASP.NET Core MVC application. Includes a placeholder for email sending functionality.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-implement-telerik-reporting-in-asp-net-core-mvc.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nnamespace AspNetCoreMvcDemo.Controllers\n{\n    using Microsoft.AspNetCore.Mvc;\n    using System.Net;\n    using System.Net.Mail;\n    using Telerik.Reporting.Services;\n    using Telerik.Reporting.Services.AspNetCore;\n\n    [Route(\"api/reports\")]\n    public class ReportsController : ReportsControllerBase\n    {\n        public ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n            : base(reportServiceConfiguration)\n        {\n        }\n    }\n\t\n\tprotected override HttpStatusCode SendMailMessage(MailMessage mailMessage)\n\t{\n      throw new System.NotImplementedException(\"This method should be implemented in order to send mail messages\");\n      //using (var smtpClient = new SmtpClient(\"smtp01.mycompany.com\", 25))\n      //{\n      //    smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;\n      //    smtpClient.EnableSsl = false;\n\n      //    smtpClient.Send(mailMessage);\n      //}\n      //return HttpStatusCode.OK;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Toolbar Icon in Angular Component\nDESCRIPTION: Demonstrates how to change the default toolbar icon using Kendo SVG Icons in the Angular component. It includes the importation of necessary Kendo packages and setting up component properties to modify the icon. The key dependency is '@progress/kendo-svg-icons'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/customizing/toolbar-icons.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild, AfterViewInit } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\nimport { ReportSourceOptions } from '@progress/telerik-common-report-viewer'\nimport { xOutlineIcon } from '@progress/kendo-svg-icons'\n\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\n\texport class AppComponent implements AfterViewInit {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\tngAfterViewInit(){\n\t\t\tthis.viewer.xCircleIcon = xOutlineIcon;\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Handling NeedDataSource Event in Telerik Reporting (VB)\nDESCRIPTION: This VB code snippet shows how to handle the NeedDataSource event of a Telerik report using Visual Basic syntax. This event facilitates the assignment of a data source at runtime when the DataSource property is initially null. It requires the Telerik Reporting framework, and the key focus is on the dynamic assignment to the DataSource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/using-report-events.md#2025-04-21_snippet_1\n\nLANGUAGE: VB\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\Processing\\ReportEvents.vb region=NeedDataSourceEventHandlerSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Sample Request and Response for Document Info - HTTP\nDESCRIPTION: This snippet provides an example that shows how to make a GET request to retrieve document information and the anticipated HTTP response format, including status codes and response body structure.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document-info.md#2025-04-21_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/reports/clients/2c3d/instances/4d3c/documents/5x3a/info HTTP/1.1\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 202 Accepted\n{\n\t\"documentReady\": false,\n\t\"PageCount\": 2,\n\t\"DocumentMapAvailable\": false,\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed TypeScript Component with Function Binding\nDESCRIPTION: Corrected component implementation using Function.prototype.bind() to maintain the proper 'this' context\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/angular-component-properties-in-viewer-events.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class AppComponent {\n\tboundReportRendered: Function;\n\tisReportRendered = false;\n\t...\n\tpublic ngOnInit(){\n\t\tthis.boundReportRendered = this.reportRendered.bind(this);\n\t}\n\n\treportRendered(e: any, args: any) {\n\t\tthis.isReportRendered = true; // displays the initially hidden div element\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Report Viewer with Interactive Action Handlers\nDESCRIPTION: Sets up the report viewer with a report source and attaches event handlers for interactive actions and viewer area painting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-winforms-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nthis.reportViewer1.ReportSource = new TypeReportSource() { TypeName = typeof(CSharp.EmployeeSalesSummary).AssemblyQualifiedName };\nthis.reportViewer1.InteractiveActionExecuting += reportViewer1_ActionExecuting;\nthis.reportViewer1.InteractiveActionEnter += reportViewer1_ActionEnter;\nthis.reportViewer1.InteractiveActionLeave += reportViewer1_ActionLeave;\nthis.reportViewer1.ViewerAreaPaint += reportViewer1_ViewerAreaPaint;\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Server Connection in JSON\nDESCRIPTION: JSON structure for configuring connection details to a Telerik Report Server, including URL, username, and password settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/api-reference/options.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"url\": \"string\",\n  \"username\": \"string\",\n  \"password\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Export Events in Angular Report Viewer\nDESCRIPTION: Demonstrates handling of exportStarted and exportDocumentReady events for monitoring export operations in the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(exportStarted)=\"exportStarted()\">\n</reporting-angular-viewer>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\texportStarted() {\n\t\t\tconsole.log(\"This event will be emitted when an export operation is triggered.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings in JSON\nDESCRIPTION: This JSON snippet illustrates how to define connection strings for Telerik Reporting, ensuring the use of the correct data provider for different databases, and sets necessary properties for database connection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"ConnectionStrings\": {\n\t\t//This connection string will use System.Data.SqlClient as data provider invariant name.\n\t\t//\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\"\n\t\t\n\t\t//This connection string explicitly states the data provider invariant name - mandatory for databases other than MSSQL Server.\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": {\n\t\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebServiceDataSource with Dynamic URL in Telerik Reporting\nDESCRIPTION: Set up the WebServiceDataSource with an inline parameter for the Service Url and configure a report parameter to provide the actual URL value at runtime. This allows for dynamic URL modification based on different environments.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-customize-web-service-data-source-url.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n_Service Url:_| __@Url__\n---|---\n```\n\nLANGUAGE: markdown\nCODE:\n```\n_Name_|_Type_|_Value_|_Design-Time Value_\n---|---|---|---\n@Url|__Inline__|= Parameters.Url.Value|https://www.googleapis.com/books/v1/volumes\n```\n\n----------------------------------------\n\nTITLE: Loading Kendo Script in React App\nDESCRIPTION: This snippet is an implementation in React for dynamically loading the Kendo All script to use Kendo widgets, as the application subset does not include this widget out of the box. It ensures jQuery loads before Kendo through script injection, with the loadScript function handling this asynchronously. The App2 component subsequently renders the TelerikReportViewer conditional on successful script loading.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet viewer;\n\t\n\tfunction loadScript(callback) {\n\t\tconst script = document.createElement(\"script\");\n\t\tscript.src = \"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.all.min.js\";\n\t\tscript.async = true;\n\t\tscript.onload = callback;\n\t\tdocument.body.appendChild(script);\n\t}\n\t\n\tclass App2 extends Component {\n\t\tcomponentDidMount() {\n\t\t\tloadScript(() => {\n\t\t\t\tthis.setState({ visible: true });\n\t\t\t});\n\t\t}\n\t\n\t\trender() {\n\t\t\treturn this.state?.visible ? (<div>\n\t\t\t\t<TelerikReportViewer\n\t\t\t\tref={el => viewer = el}     \n\t\t\t\treportSource={{\n\t\t\t\t\treport: 'MyReport.trdp',\n\t\t\t\t\tparameters: {}\n\t\t\t\t}}\n\t\t\t\tparameterEditors={{\n\t\t\t\t\tmatch: match,\n\t\t\t\t\tcreateEditor: createEditor\n\t\t\t\t}} />\n\t\t\n\t\t\t</div>) : null;\n\t\t}\n\t}\n\t\n\tReactDOM.render(\n\t\t<App2/>,\n\t\tdocument.getElementById('root')\n\t);\n```\n\n----------------------------------------\n\nTITLE: Handling reportLoadComplete Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `reportLoadComplete` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code.  The `reportLoadComplete` event is emitted after the rendering of a report ends and provides information about the rendered document.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(reportLoadComplete)=\"reportLoadComplete($event)\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Implement Send Mail Message in VB.NET\nDESCRIPTION: This VB.NET code snippet illustrates how to implement the SendMailMessage method in the ReportsController using MailMessage and SMTP client. It showcases the necessary steps to set up and send emails via the Telerik Reporting REST service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/implement-send-mail-message.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n' Consider passing the credentials as parameters from the client\n' Alternatively configure the SMTP client from the application's configuration file.\n'\n' smtp.Credentials = New NetworkCredential(\"user\", \"password\")\n\nUsing message As MailMessage = New MailMessage()\n\tmessage.From = New MailAddress(mailSettings.SenderEmail)\n\n\tFor Each recipient As String In mailSettings.Recipients\n\t\tmessage.To.Add(recipient)\n\tNext\n\n\tmessage.Subject = sendEmail.Subject\n\tmessage.Body = sendEmail.Body\n\tmessage.IsBodyHtml = True\n\n\tIf sendEmail.Attachments IsNot Nothing Then\n\t\tFor Each attachment As String In sendEmail.Attachments\n\t\t\tmessage.Attachments.Add(New Attachment(attachment))\n\t\tNext\n\tEnd If\n\n\tUsing smtp As SmtpClient = New SmtpClient(mailSettings.SmtpServer, mailSettings.Port)\n\t\tsmtp.EnableSsl = mailSettings.UseSsl\n\t\tsmtp.Send(message)\n\tEnd Using\nEnd Using\n```\n\n----------------------------------------\n\nTITLE: Configuring Pie Slice Merging in Telerik Reporting\nDESCRIPTION: Demonstrates how to merge small pie chart slices using MergedDataPoints properties to improve chart readability and data presentation\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/pie.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Set merge mode to SingleSlice\nMergedDataPoints.MergeMode = MergeMode.SingleSlice;\n\n// Choose threshold mode\nMergedDataPoints.ThresholdMode = ThresholdMode.Percentage;\n\n// Set threshold value for merging\nMergedDataPoints.ThresholdValue = 5; // Merge slices smaller than 5%\n\n// Customize merged slice label\nMergedDataPoints.LegendItemLabel = \"Other Categories\";\n```\n\n----------------------------------------\n\nTITLE: Creating Custom User Function for DataSource Uri Generation in C#\nDESCRIPTION: A static method implementation that converts a string path into a Uri object with Absolute UriKind. This custom function can be used when the built-in Uri function is not available in older versions of Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-the-file-path-of-json-or-csv-datasource-through-report-parameter.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic static Uri setCsvSource(string path)\n{\n    return new Uri(path, UriKind.Absolute);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Cache Provider in XML for Telerik Reporting\nDESCRIPTION: XML configuration for the Auto cache provider with a custom base path. This provider automatically selects the appropriate caching method based on resource characteristics and application permissions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t…\n\t<Telerik.Reporting>\n\t\t<cache provider=\"Auto\">\n\t\t\t<providers>\n\t\t\t\t<provider name=\"AutoProviderName\">\n\t\t\t\t\t<parameters>\n\t\t\t\t\t\t<parameter name=\"BasePath\" value=\"C:\\MyDataCache\" />\n\t\t\t\t\t</parameters>\n\t\t\t\t</provider>\n\t\t\t</providers>\n\t\t</cache>\n\t</Telerik.Reporting>\n\t…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Expression in Telerik Reporting\nDESCRIPTION: This snippet demonstrates the basic syntax for defining an expression in Telerik Reporting. Expressions begin with an equal sign and can include constants, operators, and references to built-in values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n=Fields.Data\n```\n\n----------------------------------------\n\nTITLE: Implementing updateUi Callback for Report Viewer UI Updates\nDESCRIPTION: This callback function is executed whenever the UI needs updating. It applies the margin functions based on the current state of document map and parameters area toggles, ensuring proper layout when components are shown or hidden.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-move-parameters-area.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdateUi: function (e) {\n    var rv = e.data.sender;\n\tupdatePagesAreaLeftMargin(rv.commands.toggleDocumentMap.checked(), \"margin-left\");\n\tupdatePagesAreaTopMargin(rv.commands.toggleParametersArea.checked(), \"margin-top\");\n\tupdateDocumentMapArea(rv.commands.toggleParametersArea.checked(), \"margin-top\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CORS Policy in ASP.NET Core for Reporting REST Service\nDESCRIPTION: C# code to add a CORS policy for the Reporting REST Service in Program.cs. This allows the service to be accessed from clients in different domains.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-6-with-minimal-api.md#2025-04-21_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nbuilder.Services.AddCors(corsOption => corsOption.AddPolicy(\n\t\"ReportingRestPolicy\",\n\tcorsBuilder =>\n\t{\n\t\tcorsBuilder.AllowAnyOrigin()\n\t\t\t.AllowAnyMethod()\n\t\t\t.AllowAnyHeader();\n\t}\n));\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML Structure for Report Viewer\nDESCRIPTION: Creates the basic HTML structure with nested div elements for the Kendo Window and Report Viewer initialization.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-switch-reports-in-kendo-mvc-modal-window.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"winReports\">\n        <div id=\"reportViewer1\">\n            Loading...\n        </div>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Accessing ReportViewer Client Object JavaScript\nDESCRIPTION: This JavaScript snippet shows how to access the client-side ReportViewer object using its ClientID. The `ReportViewer1.ClientID` is used to get a reference to the ReportViewer object in JavaScript.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/client-side-api.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar viewer = `<%=ReportViewer1.ClientID%>`\n```\n\n----------------------------------------\n\nTITLE: Configuring MVC Wrapper for HTML5 Report Viewer with Single Page Mode in C#\nDESCRIPTION: C# code to set up the MVC wrapper for the HTML5 Report Viewer with single page mode.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-resize-the-report-viewer-to-accommodate-its-content.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n@(Html.TelerikReporting().ReportViewer()\n\t.Id(\"reportViewer1\")\n\t//...\n\t.PageMode(PageMode.SinglePage)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Viewer in Component Template\nDESCRIPTION: HTML template configuration for the Native Angular Report Viewer, specifying report source, service URL, and view mode\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-standalone-components.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t\t#report\n\t\t[reportSource]=\"{\n\t\t\treport: 'Report Catalog.trdx',\n\t\t\tparameters: {}\n\t\t}\"\n\t\tserviceUrl=\"https://demos.telerik.com/reporting/api/reports\"\n\t\tviewMode=\"interactive\"\n\t\t[keepClientAlive]=\"true\">\n\t</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Creating UriReportSource for TRDX/TRDP Files in C# and VB.NET\nDESCRIPTION: Demonstrates how to create a UriReportSource object with a path to a TRDX or TRDP file. This method allows loading report definitions from a file location specified by a URI.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-deploy-a-report-created-with-standalone-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nUriReportSource uriReportSource = new UriReportSource();\n// Path to a TRDX or TRDP file\nuriReportSource.Uri = \"../../DemoReport.trdp\";\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim uriReportSource As New UriReportSource()\n' Path to a TRDX or TRDP file\nuriReportSource.Uri = \"../../DemoReport.trdp\"\n```\n\n----------------------------------------\n\nTITLE: Handling Interactive Action Executing in WinForms Report Viewer (VB)\nDESCRIPTION: This snippet demonstrates how to handle the InteractiveActionExecuting event in a WinForms Report Viewer using VB to retrieve custom action parameters. Ensure Telerik Reporting and associated libraries are available. It processes custom action parameters during the event's lifecycle.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/custom-action.md#2025-04-21_snippet_1\n\nLANGUAGE: VB\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\ReportViewer\\WinForms\\Form1.vb region=WinFormsCustomInteractiveActionExecutingEventSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Toggle Visibility Actions with Report Parameter in C#\nDESCRIPTION: This C# code snippet demonstrates how to control the visibility of drilldown report items based on a boolean report parameter. It accesses the ToggleVisibilityAction of text boxes within a Telerik Reporting Table and modifies the DisplayExpandedMark and Visible properties of the target report items and table groups.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/expand-or-collapse-entire-drill-down-report-with-a-report-parameter.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nprivate void table1_ItemDataBinding(object sender, EventArgs e)\n{\n    var table = sender as Telerik.Reporting.Processing.Table;\n    bool expand = (bool)table.Report.Parameters[\"Expand\"].Value;\n\n    ToggleVisibilityAction drillDownAction = (ToggleVisibilityAction)this.textBox11.Action;\n    ExpandDrillDownAction(expand, drillDownAction);\n\n    ToggleVisibilityAction drillDownAction17 = (ToggleVisibilityAction)this.textBox17.Action;\n    ExpandDrillDownAction(expand, drillDownAction17);\n}\n\nprivate static void ExpandDrillDownAction(bool expand, ToggleVisibilityAction drillDownAction)\n{\n    drillDownAction.DisplayExpandedMark = expand;\n    foreach (var t in drillDownAction.Targets.Cast<IToggleVisibilityTarget>())\n    {\n        if (t is ReportItemBase)\n        {\n            (t as ReportItemBase).Visible = expand;\n        }\n\n        if (t is TableGroup)\n        {\n            (t as TableGroup).Visible = expand;\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Report to PDF Stream in C# using Telerik Reporting\nDESCRIPTION: This C# code snippet demonstrates how to export a Telerik Report to a PDF stream and write it directly to the ASP.NET Response object for display in the browser. It utilizes the Telerik Reporting engine's `ReportProcessor` to render the report and sets the appropriate response headers to ensure the PDF is displayed correctly.  The method takes the Assembly Qualified Name of the report as input.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-do-i-display-pdf-directly-in-the-browser-without-exporting-first.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nvoid ExportToPDF(string reportToExport)\n{\n    var reportProcessor = new Telerik.Reporting.Processing.ReportProcessor();\n    var typeReportSource = new Telerik.Reporting.TypeReportSource();\n\n    // reportToExport is the Assembly Qualified Name of the report\n    typeReportSource.TypeName = reportToExport;\n\n    var result = reportProcessor.RenderReport(\"PDF\", typeReportSource, null);\n\n    this.Response.Clear();\n    this.Response.ContentType = result.MimeType;\n    this.Response.Cache.SetCacheability(HttpCacheability.Private);\n    this.Response.Expires = -1;\n    this.Response.Buffer = true;\n\n    /* Uncomment to handle the file as attachment\n     Response.AddHeader(\"Content-Disposition\",\n                    string.Format(\"{0};FileName=\\\"{1}\\\"\",\n                                    \"attachment\",\n                                    fileName));\n     */\n\n    this.Response.BinaryWrite(result.DocumentBytes);\n    this.Response.End();\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Report Using HTML5 Report Viewer in JavaScript\nDESCRIPTION: Demonstrates how to access the Report Viewer instance and call the refreshReport() method to reload the current report. The method returns the current ReportViewer object instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/refreshreport().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.refreshReport();\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Reference\nDESCRIPTION: HTML code to include Kendo UI library dependency\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-the-web-designer-in-vue.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://kendo.cdn.telerik.com/2022.1.301/js/kendo.all.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Report Viewer Package\nDESCRIPTION: NPM command to install the Native Angular Report Viewer package\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-reporting-service.md#2025-04-21_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install @progress/telerik-angular-native-report-viewer\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Source with Clear Text Credentials (PowerShell)\nDESCRIPTION: This PowerShell command adds the Telerik NuGet feed as a package source, storing the credentials in clear text.  This is required if encrypted passwords are not supported, such as on non-Windows systems. Ensure the NuGet CLI is installed and accessible from the command line.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/adding-private-nuget-feed.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n\"NuGet Sources Add -Name \\\"telerik.com\\\" -Source \\\"https://nuget.telerik.com/v3/index.json\\\" ^\n\t-UserName \\\"your login email\\\" -Password \\\"your password\\\" ^\n\t-StorePasswordInClearText\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files in Startup\nDESCRIPTION: Enables static file serving in the Blazor application configuration\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/how-to-use-native-blazor-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\napp.UseStaticFiles();\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Cache Provider in JSON for Telerik Reporting\nDESCRIPTION: JSON configuration for the Memory cache provider. This provider stores rendered pages and resources in memory without any additional parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"cache\": {\n\t\t\"provider\": \"Memory\",\n\t\t\"providers\": [\n\t\t\t{\n\t\t\t\t\"name\": \"MemoryProviderName\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Resolve Report Instance Request Example\nDESCRIPTION: This snippet demonstrates a sample POST request to resolve a report instance using the Telerik Reporting REST API. It includes the endpoint, client ID, report name, and parameter values. The expected output is a report instance identifier.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/report-instances-api/resolve-report-instance.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /api/reports/clients/2c3d/instances HTTP/1.1\n\n\t\t{\n\t\t\treport: \"MyReport1\",\n\t\t\tparameterValues: {\n\t\t\t\t\"p1\": \"v1\",\n\t\t\t\t\"p2\": 20\n\t\t\t},\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Calculated Field for Medal Names in Telerik Reporting\nDESCRIPTION: This expression creates a calculated field that converts numeric place values to medal names (Gold, Silver, Bronze) in a Telerik Reporting data source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/map-types/barchart-map.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n=IIF(Fields.Place = 1, 'Gold', IIF(Fields.Place = 2, 'Silver', IIF(Fields.Place = 3, 'Bronze', 'none')))\n```\n\n----------------------------------------\n\nTITLE: Handling reportVersionMismatch Event in Angular Viewer\nDESCRIPTION: Demonstrates how to handle the reportVersionMismatch event which fires when there is a version mismatch between the viewer and the reporting service. The example shows both the HTML component configuration and the TypeScript implementation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_20\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(reportVersionMismatch)=\"reportVersionMismatch()\">\n</reporting-angular-viewer>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\treportVersionMismatch() {\n\t\t\tconsole.log(\"This event will be emitted when there is mismatch between the version of the viewer and the reporting service.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Report Viewer with Report Server\nDESCRIPTION: Add the report viewer to the page with server configuration, report source, and styling options\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-report-server.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet viewer;\nReactDOM.render(\n\t<div>\n\t\t<TelerikReportViewer\n\t\t\tref={ el => viewer = el }\n\t\t\treportServer={{\n\t\t\t\turl: 'https://mytelerikreportserver:83/',\n\t\t\t\tusername: 'myusername',\n\t\t\t\tpassword: 'mypass'\n\t\t\t}}\n\t\t\treportSource={{\n\t\t\t\treport: 'Samples/Dashboard.trdp',\n\t\t\t\tparameters: {}\n\t\t\t}}\n\t\t\tviewerContainerStyle = {{\n\t\t\t\tposition: 'absolute',\n\t\t\t\tleft: '5px',\n\t\t\t\tright: '5px',\n\t\t\t\ttop: '40px',\n\t\t\t\tbottom: '5px',\n\t\t\t\toverflow: 'hidden',\n\t\t\t\tclear: 'both',\n\t\t\t\tfontFamily: 'ms sans serif'\n\t\t\t}}\n\t\t\tviewMode=\"INTERACTIVE\"\n\t\t\tscaleMode=\"SPECIFIC\"\n\t\t\tscale={1.0}\n\t\t\tenableAccessibility={false} />\n\t\t<button id=\"refresh-button\" onClick={ () => viewer.refreshReport() }>Refresh</button>\n\t\t<button onClick={ () => viewer.commands.print.exec() }>Print</button>\n\t</div>,\n\tdocument.getElementById('root')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableValues for ReportParameter UI in VB.NET\nDESCRIPTION: Illustrates how to define available values for a report parameter's user interface in Telerik Reporting programmatically using VB.NET. The code configures the DataSource, ValueMember, and DisplayMember to load values into the parameter's editor, enabling users to easily select predefined options and customize report data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/how-to-add-report-parameters.md#2025-04-21_snippet_3\n\nLANGUAGE: vbnet\nCODE:\n```\n            Dim report As New Telerik.Reporting.Report()\n\n            Dim parameter As New Telerik.Reporting.ReportParameter()\n\n            parameter.AvailableValues.DataSource = \"Categories\"\n            parameter.AvailableValues.ValueMember = \"CategoryID\"\n            parameter.AvailableValues.DisplayMember = \"CategoryName\"\n\n            report.ReportParameters.Add(parameter)\n```\n\n----------------------------------------\n\nTITLE: Complete WebForm Implementation\nDESCRIPTION: Shows the complete WebForm implementation including all necessary components, styling, and viewer configuration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/manual-setup.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<%@ Register TagPrefix=\"telerik\" Assembly=\"Telerik.ReportViewer.Html5.WebForms\" Namespace=\"Telerik.ReportViewer.Html5.WebForms\" %>\n\t<!DOCTYPE html>\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head runat=\"server\">\n\t\t<title>Telerik HTML5 Web Forms Report Viewer Demo</title>\n\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>>\n\t\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n\t\t<style>\n\t\t\t#reportViewer1\n\t\t\t{\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 5px;\n\t\t\t\tright: 5px;\n\t\t\t\ttop: 5px;\n\t\t\t\tbottom: 5px;\n\t\t\t\toverflow: hidden;\n\t\t\t\tfont-family: Verdana, Arial;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<form runat=\"server\">\n\t\t\t<telerik:ReportViewer\n\t\t\t\tID=\"reportViewer1\"\n\t\t\t\tServiceUrl=\"/api/reports/\"\n\t\t\t\tDeferred=\"true\"\n\t\t\t\trunat=\"server\">\n\t\t\t  <ReportSource Identifier=\"Product Catalog.trdp\" IdentifierType=\"UriReportSource\">\n\t\t\t\t\t<Parameters>\n\t\t\t\t\t\t<telerik:Parameter Name=\"CultureID\" Value=\"fr\" />\n\t\t\t\t\t</Parameters>\n\t\t\t  </ReportSource>\n\t\t\t</telerik:ReportViewer>\n\t\t\t<telerik:DeferredScripts runat=\"server\"></telerik:DeferredScripts>\n\t\t</form>\n\t</body>\n\t</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Culture-Aware ReportsController in C#\nDESCRIPTION: Custom ReportsController implementation that captures the culture parameter value and applies it during report rendering. Uses a static property to maintain the selected culture across requests.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/localize-report-serverside-based-on-parameter.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[Route(\"api/reports\")]\npublic class ReportsController : ReportsControllerBase\n{\n\tpublic static string Lang { get; set; }\n\n\tpublic ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n\t\t: base(reportServiceConfiguration)\n\t{\n\t}\n\n\t//...\n\n\tpublic override IActionResult CreateInstance(string clientID, [FromBody] ClientReportSource reportSource)\n\t{\n\t\tLang = reportSource.ParameterValues[\"lang\"].ToString();\n\n\t\treturn base.CreateInstance(clientID, reportSource);\n\t}\n\n\tpublic override IActionResult CreateDocument(string clientID, string instanceID, [FromBody] CreateDocumentArgs args)\n\t{\n\t\targs.DeviceInfo[\"CurrentCulture\"] = Lang;\n\t\targs.DeviceInfo[\"CurrentUICulture\"] = Lang;\n\n\t\treturn base.CreateDocument(clientID, instanceID, args);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Azure wwwroot Duplication with UseStaticFiles\nDESCRIPTION: Invoke UseStaticFiles method in Startup configuration to address Azure App Service wwwroot folder duplication issues\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/font-is-incorrect-on-first-render-azure.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n\t....\n\tapp.UseStaticFiles();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Page in HTML5 Report Viewer using JavaScript\nDESCRIPTION: Demonstrates how to get the current page number from a Telerik HTML5 Report Viewer instance. The method returns an integer representing the currently displayed page number.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/currentpage().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nvar currentPage = reportViewer.currentPage();\n```\n\n----------------------------------------\n\nTITLE: JSONPath Data Filtering Reference\nDESCRIPTION: Provides a reference link to using JSONPath for querying and filtering JSON data in Telerik Reporting\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/tools/data-source-wizards/jsondatasource-wizard.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nFor more information please refer to [How to Use JSONPath to filter JSON data]({%slug telerikreporting/designing-reports/connecting-to-data/data-source-components/webservicedatasource-component/how-to-use-jsonpath-to-filter-json-data%})\n```\n\n----------------------------------------\n\nTITLE: Implementing ITextResources Interface for Localization in C#\nDESCRIPTION: This code snippet demonstrates how to create a class that implements the ITextResources interface, allowing for flexible localization of tooltips and messages in the WPF Report Viewer. You need to define all required properties and pass an instance of your custom class to the TextResources property of the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/customizing/report-viewer-localization.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Implementing ITextResources interface\npublic class CustomTextResources : ITextResources\n{\n    public string this[string resourceKey]\n    {\n        get\n        {\n            // Custom logic to retrieve the resource string\n            return GetResourceString(resourceKey);\n        }\n    }\n\n    private string GetResourceString(string resourceKey)\n    {\n        // Logic to retrieve the translated string based on resourceKey\n        return \"Translated string for \" + resourceKey;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ASP.NET Web.config for ServiceStack\nDESCRIPTION: This XML snippet shows how to update the ASP.NET web.config file with a new location element for the ServiceStack configuration. It includes settings for handling requests, specifying the ServiceStackHttpHandlerFactory, and ensuring proper module management for all requests under the 'api' path.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/servicestack-implementation/add-rest-servicestack-to-web-application.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\\n\\t<location path=\\\"api\\\">\\n\\t\\t<system.web>\\n\\t\\t\\t<compilation debug=\\\"true\\\" targetFramework=\\\"4.0\\\" />\\n\\t\\t\\t<httpHandlers>\\n\\t\\t\\t\\t<add path=\\\"*\\\" type=\\\"ServiceStack.WebHost.Endpoints.ServiceStackHttpHandlerFactory, ServiceStack\\\" verb=\\\"*\\\"/>\\n\\t\\t\\t</httpHandlers>\\n\\t\\t</system.web>\\n\\t\\t<system.webServer>\\n\\t\\t\\t<modules runAllManagedModulesForAllRequests=\\\"true\\\"/>\\n\\t\\t\\t<validation validateIntegratedModeConfiguration=\\\"false\\\"/>\\n\\t\\t\\t<handlers>\\n\\t\\t\\t\\t<add path=\\\"*\\\" name=\\\"ServiceStack.Factory\\\" type=\\\"ServiceStack.WebHost.Endpoints.ServiceStackHttpHandlerFactory, ServiceStack\\\" verb=\\\"*\\\" preCondition=\\\"integratedMode\\\" resourceType=\\\"Unspecified\\\" allowPathInfo=\\\"true\\\" />\\n\\t\\t\\t</handlers>\\n\\t\\t</system.webServer>\\n\\t</location>\\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Initializing React Report Viewer with Refresh Button\nDESCRIPTION: Example showing how to initialize a React Report Viewer component with a refresh button that calls the refreshReport() method. The code demonstrates using a reference to access viewer methods.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/api-reference/methods.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet viewer;\nReactDOM.render(\n\t<div>\n\t\t<TelerikReportViewer\n\t\t...\n\t\t/>\n\t\t<button id=\"refresh-button\" onClick={ () => viewer.refreshReport() }>Refresh</button>\n\t</div>,\n\tdocument.getElementById('root')\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring QR Code Barcode Settings in Telerik Reporting\nDESCRIPTION: Demonstrates how to set various configuration options for QR Code barcodes, including version, error correction level, encoding mode, and extended channel interpretation\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/barcode/2d-barcodes/qr-code.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\BarcodeSnippets.cs region=Barcode_QRCodeEncoder_Settings}}\n```\n\nLANGUAGE: vbnet\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\BarcodeSnippets.vb region=Barcode_QRCodeEncoder_Settings}}\n```\n\n----------------------------------------\n\nTITLE: Testing Web Report Designer Service using REST API\nDESCRIPTION: This snippet demonstrates how to test the Web Report Designer Service by sending a GET request to the 'api/reportdesigner/cultureContext' endpoint. It verifies if the service is operational by checking the response containing separators based on the current culture. No additional dependencies are required beyond a client capable of making HTTP requests. The expected output is a JSON object with 'decimalSeparator' and 'listSeparator'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/test-web-report-designer-service.md#2025-04-21_snippet_0\n\nLANGUAGE: REST API\nCODE:\n```\n\"GET api/reportdesigner/cultureContext\"\n```\n\n----------------------------------------\n\nTITLE: Issuing Ajax Request through ASP.NET AJAX UpdatePanel\nDESCRIPTION: This snippet outlines how to wrap the ReportViewer control inside an ASP.NET AJAX UpdatePanel, enabling partial page updates when the associated button is clicked. This method also ensures minimal disruption to the UI, allowing for smooth transitions and updates without full page refreshes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/ajax-support.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<asp:ScriptManager ID=\"ScriptManager1\" runat=\"server\" />\n<asp:Button ID=\"Button1\" runat=\"server\" Text=\"Button\" onclick=\"Button1_Click\" />\n<asp:UpdatePanel ID=\"UpdatePanel1\" runat=\"server\">\n\t<Triggers>\n\t\t<asp:AsyncPostBackTrigger ControlID=\"Button1\" />\n\t</Triggers>\n\t<ContentTemplate>\n\t\t<telerik:ReportViewer ID=\"ReportViewer1\" runat=\"server\">\n\t\t</telerik:ReportViewer>\n\t</ContentTemplate>\n</asp:UpdatePanel>\n```\n\n----------------------------------------\n\nTITLE: Updating Application Resources for Embedded XAML Styles in WPF\nDESCRIPTION: The following code snippet demonstrates how to configure the Application Resources in 'Application.xaml' to leverage embedded implicit XAML styles from the 'Telerik.ReportViewer.Wpf.Themes' assembly. This is part of the migration process to embedded styles, which simplifies maintenance and updates.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/customizing/how-to-migrate-to-embedded-styles.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Application.Resources>\n    <ResourceDictionary>\n        <ResourceDictionary.MergedDictionaries>\n            <ResourceDictionary Source=\"pack://application:,,,/Telerik.ReportViewer.Wpf.Themes;component/Themes/Default.xaml\" />\n            <ResourceDictionary Source=\"pack://application:,,,/Telerik.Windows.Controls;component/Themes/Default.xaml\" />\n            <ResourceDictionary Source=\"pack://application:,,,/Telerik.Windows.Controls.Input;component/Themes/Default.xaml\" />\n            <ResourceDictionary Source=\"pack://application:,,,/Telerik.Windows.Controls.Navigation;component/Themes/Default.xaml\" />\n        </ResourceDictionary.MergedDictionaries>\n    </ResourceDictionary>\n</Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Sample Keep Client Alive HTTP Response\nDESCRIPTION: The successful response with HTTP status code 204 NoContent, indicating that the client expiration was successfully extended.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/clients-api/keep-client-alive.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 NoContent\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Report Viewer Package\nDESCRIPTION: NPM command to install the Native Angular Report Viewer package\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-report-server.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install @progress/telerik-angular-native-report-viewer\n```\n\n----------------------------------------\n\nTITLE: Including Scripts for Kendo DatePicker Localization\nDESCRIPTION: This code snippet illustrates how to add required scripts for jQuery and Kendo to enable the Spanish culture for the DatePicker widget. Dependencies include jQuery and the Kendo subset of the Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-change-the-culture-of-the-datepicker-in-html5-mvc-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n<script src=\"https://demos.telerik.com/reporting/api/reports/resources/js/telerikReportViewer-kendo\"></script>\n<script src=\"http://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/cultures/kendo.culture.es-PY.min.js\"></script>\n<script src=\"https://demos.telerik.com/reporting/api/reports/resources/js/telerikReportViewer\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Pie Charts with SQL DataSource - SQL\nDESCRIPTION: This SQL snippet retrieves store names and their associated sales subtotal from the AdventureWorks database to be used in a Pie chart report. It demonstrates a join operation across multiple tables to extract relevant sales data for visualization.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/pie.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t[Sales].[Store].[Name] AS 'StoreName',\n\t[Sales].[SalesOrderHeader].[SubTotal]\nFROM\n\t[Sales].[SalesOrderDetail] INNER JOIN\n\t[Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] INNER JOIN\n\t[Sales].[Store] ON [Sales].[SalesOrderHeader].[CustomerID] = [Sales].[Store].[CustomerID]\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet.Config with Local Package Source\nDESCRIPTION: Example XML configuration for the NuGet.Config file that includes the local folder as a package source alongside nuget.org and the Telerik private feed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/setup-local-nuget-feed.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<packageSources>\n  <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n  <add key=\"_TELERIK\" value=\"https://nuget.telerik.com/v3/index.json\" />\n  <add key=\"NuGet Local Folder\" value=\"/var/myofflinepackages/\" />\n</packageSources>\n```\n\n----------------------------------------\n\nTITLE: Configuring Required CsvDataSource Settings in C#\nDESCRIPTION: Demonstrates the mandatory configuration settings for CsvDataSource including source URI, field separators, and record separators to ensure proper data retrieval.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/csvdatasource-component/connecting-the-csvdatasource-component-to-a-csv-source.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nCsvDataSource csvDataSource = new CsvDataSource();\ncsvDataSource.Source = new Uri(\"C:\\\\temp\\\\data.csv\", UriKind.RelativeOrAbsolute);\ncsvDataSource.FieldSeparators = new string[] { \",\" };\ncsvDataSource.RecordSeparators = new string[] { \"\\r\\n\", \"\\n\" };\n```\n\n----------------------------------------\n\nTITLE: Setting KeepTogether Property in C#\nDESCRIPTION: Use the KeepTogether property to allow or prevent splitting of report items, sections, or groups across pages during rendering.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/understanding-pagination.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nreportItem.KeepTogether = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Fonts in JSON Configuration\nDESCRIPTION: Example of a JSON-based configuration that defines private fonts including Courier New with different styles and Ubuntu. Shows the JSON structure for specifying font family, path, and style attributes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/privatefonts-element.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"privateFonts\": [\n\t\t{\n\t\t\t\"fontFamily\": \"ubuntu\",\n\t\t\t\"path\": \"Ubuntu-R.ttf\",\n\t\t},\n\t\t{\n\t\t\t\"fontFamily\": \"Courier New\",\n\t\t\t\"path\": \"CourI.ttf\",\n\t\t\t\"fontStyle\": \"Italic\"\n\t\t},\n\t\t{\n\t\t\t\"fontFamily\": \"CourBI\",\n\t\t\t\"path\": \"CourBI.ttf\",\n\t\t\t\"fontStyle\": \"Bold,Italic\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Using MultiValue Parameter directly in SQL Text Command with NULL handling\nDESCRIPTION: This SQL query selects records from HumanResources.Department table where either the SelectedValues parameter is NULL or the DepartmentID matches any value in the SelectedValues array. The COALESCE function is used since multivalue parameters cannot be evaluated directly against NULL.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-multivalue-report-parameter-in-a-sql-query.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from HumanResources.Department\n\tWHERE (COALESCE(@SelectedValues,Null) IS NULL) OR DepartmentID IN (@SelectedValues)\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Rendering Extension in JSON Configuration\nDESCRIPTION: JSON configuration example showing how to set a DocumentAuthor parameter for the PDF rendering extension. This demonstrates the basic structure of the extensions element in a JSON-based configuration file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/extensions-element.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"extensions\": [\n\t\t{\n\t\t\t\"name\": \"PDF\",\n\t\t\t\"description\":  \"PDF Description\",\n\t\t\t\"parameters\": [\n\t\t\t\t{\n\t\t\t\t\t\"Name\": \"DocumentAuthor\",\n\t\t\t\t\t\"Value\": \"John Doe\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Reporting Routes in C#\nDESCRIPTION: This C# code snippet demonstrates how to register Telerik Reporting routes before the default ones to resolve issues with the Get Clients Session Timeout Seconds endpoint failing.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-report-viewer-throws-405-method-not-allowed-error.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nTelerik.Reporting.Services.WebApi.ReportsControllerConfiguration.RegisterRoutes(config);\n\nconfig.Routes.MapHttpRoute(\n\tname: \"DefaultApi\",\n\trouteTemplate: \"api/{controller}/{action}/{id}\",\n\tdefaults: new { id = RouteParameter.Optional }\n);\n```\n\n----------------------------------------\n\nTITLE: Assign Report Programmatically in VB.NET\nDESCRIPTION: This code snippet demonstrates how to programmatically assign a report to the Telerik ReportViewer control in a Windows Forms application using VB.NET. It creates an instance of a report source, sets its ReportDocument property to a report instance, assigns the report source to the ReportViewer's ReportSource property, and refreshes the ReportViewer to display the report. This code requires a reference to the Telerik Reporting library and a report definition.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/how-to-add-manually-report-viewer-to-a-windows-forms'-.net-framework-project.md#2025-04-21_snippet_1\n\nLANGUAGE: vb.net\nCODE:\n```\n \"Dim instanceReportSource As New Telerik.Reporting.InstanceReportSource()\ninstanceReportSource.ReportDocument = New Telerik.Reporting.Report1()\nMe.ReportViewer1.ReportSource = instanceReportSource\nMe.ReportViewer1.RefreshReport()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Execution Timeout\nDESCRIPTION: This XML snippet demonstrates how to configure the `executionTimeout` attribute in the `httpRuntime` section of the `web.config` file. This setting controls the maximum amount of time (in seconds) that an ASP.NET request is allowed to execute before being automatically terminated. The example sets the timeout to 600 seconds (10 minutes).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-increase-the-timeout-value-of-a-wcf-service.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n\t<system.web>\n\t\t<httpRuntime executionTimeout=\"600\"/>\n\t</system.web>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Provider in VB.NET\nDESCRIPTION: This code snippet demonstrates how to implement a custom cache provider in VB.NET for Telerik Reporting. It showcases the creation of a `MyCacheProvider` class that implements the `ICacheProvider` interface, returning an instance of a custom cache class `MyCache`.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-custom-cache-provider.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports Telerik.Reporting.Cache.Interfaces\n\nNamespace MyNameSpace\n    Public Class MyCacheProvider\n        Implements ICacheProvider\n\n        Public Function GetCache() As ICache Implements ICacheProvider.GetCache\n            Return New MyCache()\n        End Function\n    End Class\nEnd Namespace\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Grouping Records for Page Breaks\nDESCRIPTION: This SQL query uses the ROW_NUMBER function to create a 'GroupIdx' field. This field increments every N records (in this example, every 10 records) and can be used to create a group in Telerik Reporting, triggering a page break after each group.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/insert-pagebreak-per-n-records.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n    (row_number() over (order by EmployeeID) -1)/10 as 'GroupIdx',\n    [HumanResources].[vEmployee].[EmployeeID],\n    [HumanResources].[vEmployee].[FirstName],\n    [HumanResources].[vEmployee].[LastName],\n    [HumanResources].[vEmployee].[JobTitle],\n    [HumanResources].[vEmployee].[Phone]\nFROM [HumanResources].[vEmployee]\nWHERE [HumanResources].[vEmployee].[EmployeeID] <= 30\nORDER BY 1 ASC\n```\n\n----------------------------------------\n\nTITLE: Setting PDF Zoom Level Programmatically in C# with ReportProcessor\nDESCRIPTION: This C# code snippet demonstrates how to set the PDF zoom level to 100% programmatically using the ReportProcessor.RenderReport method. It creates a deviceInfo hashtable with a JavaScript parameter to set the zoom level.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-set-the-default-pdf-view-size-to-100-percentages.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.Processing.ReportProcessor reportProcessor =\n    new Telerik.Reporting.Processing.ReportProcessor();\n\n// set any deviceInfo settings if necessary\nSystem.Collections.Hashtable deviceInfo =\n    new System.Collections.Hashtable();\n\ndeviceInfo[\"JavaScript\"] = \"this.zoom=100\";\n\nTelerik.Reporting.TypeReportSource typeReportSource =\n             new Telerik.Reporting.TypeReportSource();\n\n// reportName is the Assembly Qualified Name of the report\ntypeReportSource.TypeName = reportName;\n\nTelerik.Reporting.Processing.RenderingResult result =\n    reportProcessor.RenderReport(\"PDF\", typeReportSource, deviceInfo);\n\nstring fileName = result.DocumentName + \".\" + result.Extension;\nstring path = System.IO.Path.GetTempPath();\nstring filePath = System.IO.Path.Combine(path, fileName);\n\nusing (System.IO.FileStream fs = new System.IO.FileStream(filePath, System.IO.FileMode.Create))\n{\n    fs.Write(result.DocumentBytes, 0, result.DocumentBytes.Length);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling renderingStopped Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `renderingStopped` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `renderingStopped` event is emitted when report rendering is cancelled.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(renderingStopped)=\"renderingStopped()\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Visibility Expression for Limited Details\nDESCRIPTION: Expression binding for showing only the first 3 rows of details. Applied to the TextBox's Visible property to control initial visibility.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-show-more-or-less-details-in-report-group.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n= RowNumber()<=3\n```\n\n----------------------------------------\n\nTITLE: Modifying Parameter Area Width with Kendo Splitter\nDESCRIPTION: JavaScript code to change the default Parameter area width to 350px using Kendo Splitter. This code should be placed in the renderingEnd or pageReady event handler of the viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/modify-html5-viewer-area-width-through-kendo-splitter.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderingEnd: function () {\n\tvar splitter = $(\"#reportViewerId\").find(\".k-splitter\").data(\"kendoSplitter\");\n\tsplitter.options.panes[1].size = \"350px\";\n\tsplitter.resize(true);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Data Structure for Dynamic Table Generation\nDESCRIPTION: This JSON structure serves as the data source for the Telerik Reporting report. It consists of an array of objects, each representing a table. Each object contains a 'Name' property for the table title and a 'Data' property, which is an array of column definitions containing 'ColumnName' and 'Values'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-multiple-tables-dynamically-based-on-data-source.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\n[\n\t{\n\t\t\"Name\": \"It\",\n\t\t\"Data\": [\n\t\t\t{\n\t\t\t\t\"ColumnName\": \"ColItId\",\n\t\t\t\t\"Values\": [\n\t\t\t\t\t45,\n\t\t\t\t\t46\n\t\t\t\t]\n\t\t\t\t\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"Name\": \"Part\",\n\t\t\"Data\": [\n\t\t\t{\n\t\t\t\t\"ColumnName\": \"Sales Order\",\n\t\t\t\t\"Values\": [\n\t\t\t\t\t171165,\n\t\t\t\t\t171166\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ColumnName\": \"Order No\",\n\t\t\t\t\"Values\": [\n\t\t\t\t\t227654,\n\t\t\t\t\t227655\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML5 Report Viewer with Single Page Mode in JavaScript\nDESCRIPTION: JavaScript code to initialize the report viewer with single page mode and set up the service URL and report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-resize-the-report-viewer-to-accommodate-its-content.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n\t$(\"#reportViewer1\")\n\t\t.telerik_ReportViewer({\n\t\t\tserviceUrl: \"api/reports/\",\n\t\t\treportSource: {\n\t\t\t\treport: \"Telerik.Reporting.Examples.CSharp.ReportCatalog, CSharp.ReportLibrary\"\n\t\t\t},\n\t\t\tpageMode: telerikReportViewer.PageModes.SINGLE_PAGE,\n\t\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Creating String Resources File\nDESCRIPTION: This snippet shows how to create a TypeScript file containing string resources for different languages to be used in the React Report Viewer for localization purposes. It defines a class `StringResources` with static properties representing different languages and their corresponding localized strings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/customizing/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class StringResources {\n\t\tstatic english = {\n\t\t\tloadingReport: 'Loading...',\n\t\t\t// override other string resources here\n\t\t}\n\t\tstatic japanese = {\n\t\t\tloadingReport: 'ちょっと、まってください...',\n\t\t\t// override other string resources here\n\t\t}\n\t\t// override string resources for other cultures here\n\t}\n```\n\n----------------------------------------\n\nTITLE: Initializing WinForms Report Viewer for REST Service\nDESCRIPTION: This snippet provides the setup for the WinForms Report Viewer when using the Telerik Reporting REST Service, assuming the service is running at a specified URL.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/how-to-add-report-viewer-to-a-windows-forms'-.net-core-project.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\ReportViewer\\WinForms\\Form1.cs region=DesktopViewer_Core_RestService_Init}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ISettingsStorage in C#\nDESCRIPTION: Defines a custom implementation of the ISettingsStorage interface to manage encrypted connection strings stored in a configuration file and WebReportDesigner.json. Dependencies include Microsoft.Extensions.Configuration and Telerik.Reporting.Data.Schema. It decrypts connection strings before use and encrypts them before storing.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-encrypted-connection-strings-telerik-reporting.md#2025-04-21_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nusing Microsoft.Extensions.Configuration;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Telerik.Reporting.Data.Schema;\nusing Telerik.WebReportDesigner.Services;\n\nnamespace CSharp.Net8.Html5IntegrationDemo\n{\n    public class CustomSettingsStorage(IConfiguration configuration, string settingsDirectory) : ISettingsStorage\n    {\n        readonly FileSettingsManager settingsManager = new FileSettingsManager(settingsDirectory);\n        readonly IConfiguration _configuration = configuration;\n\n        public IEnumerable<ConnectionInfo> GetConnections()\n        {\n            var configConnections = _configuration.GetSection(\"ConnectionStrings\").GetChildren();\n            var settingsConnections = this.settingsManager.GetConnections().ToList();\n\n            foreach (var settingConnection in settingsConnections)\n            {\n                // Decrypt the saved connections in the WebReportDesigner.json file \n                settingConnection.ConnectionString = DecryptClass.DecryptConnectionString(settingConnection.ConnectionString)\n            }\n\n            foreach (var connection in configConnections)\n            {\n                var connectionInfo = new ConnectionInfo\n                {\n                    Name = connection.Key,\n                    // Decrypt the connection saved in the .json configuration file loaded by the project itself\n                    ConnectionString = DecryptClass.DecryptConnectionString(connection.GetSection(\"connectionString\").Value),\n                    Provider = connection.GetSection(\"providerName\").Value\n                };\n                settingsConnections.Add(connectionInfo);\n            }\n\n            return settingsConnections;\n        }\n\n        public void AddConnection(ConnectionInfo connectionInfo)\n        {\n            // Encrypt the connection before saving it\n            connectionInfo.ConnectionString = EncryptClass.EncryptConnectionString(connectionInfo.ConnectionString);\n            this.settingsManager.AddConnection(connectionInfo);\n        }\n    }\n\n    class WebReportDesignerSettings\n    {\n        public List<ConnectionInfo> ConnectionStrings { get; set; }\n\n        public WebReportDesignerSettings()\n        {\n            this.ConnectionStrings = new List<ConnectionInfo>();\n        }\n    }\n\n    class FileSettingsManager\n    {\n        static object padlock = new object();\n\n        readonly string settingsDir;\n        readonly string settingsFilePath;\n        WebReportDesignerSettings settings;\n\n        public FileSettingsManager(string settingsDir)\n        {\n            const string SettingsFileName = \"WebReportDesignerSettings.json\";\n            this.settingsDir = settingsDir;\n            this.settingsFilePath = Path.Combine(settingsDir, SettingsFileName);\n\n            this.InitSettings();\n        }\n\n        void InitSettings()\n        {\n            lock (padlock)\n            {\n                if (File.Exists(this.settingsFilePath))\n                {\n                    var text = File.ReadAllText(this.settingsFilePath);\n                    this.settings = JsonConvert.DeserializeObject<WebReportDesignerSettings>(text);\n                }\n                else\n                {\n                    Directory.CreateDirectory(this.settingsDir);\n                    using (File.Create(this.settingsFilePath))\n                    {\n                    }\n                }\n            }\n\n            if (this.settings == null)\n            {\n                this.settings = new WebReportDesignerSettings();\n            }\n        }\n\n        public void AddConnection(ConnectionInfo connection)\n        {\n            lock (padlock)\n            {\n                this.settings.ConnectionStrings.Add(connection);\n                File.WriteAllText(this.settingsFilePath, JsonConvert.SerializeObject(this.settings));\n            }\n        }\n\n        public IEnumerable<ConnectionInfo> GetConnections()\n        {\n            return this.settings.ConnectionStrings;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Tables in SQL Stored Procedures\nDESCRIPTION: This SQL snippet provides a method for creating a stored procedure that uses temporary tables. By setting FMTONLY to OFF in a conditional block, it ensures the data schema is read correctly by the SqlDataSource Wizard during query execution. This method is applicable to MSSQL engines before SQL Server 2016.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-temporary-tables-in-stored-procedure.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nUSE AdventureWorks\nGO\nCREATE PROCEDURE dbo.Demo\n     \nAS\nBEGIN\n    SET NOCOUNT ON;\n     IF 1=0 BEGIN\n       SET FMTONLY OFF\n     END\n    \n    CREATE TABLE #Temp\n    (\n        ProductID   integer NOT NULL,\n        Name        nvarchar(50) COLLATE DATABASE_DEFAULT NOT NULL\n    );\n    \n    INSERT INTO #Temp\n        ([ProductID], [Name])\n    SELECT\n        p.[ProductID], p.[Name]\n    FROM Production.Product AS p\n     \n    SELECT\n        t.[Name], t.[ProductID]\n    FROM #Temp AS t\n    \n    DROP TABLE #Temp;\nEND;\n```\n\n----------------------------------------\n\nTITLE: Adding jQuery Reference\nDESCRIPTION: Adds jQuery library reference in a scripts section using CDN\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n@section scripts\n\t{\n\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models with System.Text.Json Serialization\nDESCRIPTION: Model classes for REST service communication using System.Text.Json attributes for JSON serialization. Includes models for client ID, report source, instance ID, document ID, document info, and error handling.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-reporting-rest-service-api-with-csharp-client.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ClientIDModel\n{\n\t[System.Text.Json.Serialization.JsonPropertyName(\"clientId\")]\n\tpublic string ClientId { get; set; }\n}\n\npublic class ReportSourceModel\n{\n\t[System.Text.Json.Serialization.JsonPropertyName(\"Report\")]\n\tpublic string Report { get; set; }\n\t[System.Text.Json.Serialization.JsonPropertyName(\"ParameterValues\")]\n\tpublic IDictionary<string, object> ParameterValues { get; set; }\n}\n\npublic class InstanceIdModel\n{\n\t[System.Text.Json.Serialization.JsonPropertyName(\"instanceId\")]\n\tpublic string InstanceId { get; set; }\n}\n\npublic class DocumentIdModel\n{\n\t[System.Text.Json.Serialization.JsonPropertyName(\"documentId\")]\n\tpublic string DocumentId { get; set; }\n}\n\npublic class DocumentInfoModel\n{\n\t[System.Text.Json.Serialization.JsonPropertyName(\"documentReady\")]\n\tpublic bool DocumentReady { get; set; }\n\n\t[System.Text.Json.Serialization.JsonPropertyName(\"PageCount\")]\n\tpublic int PageCount { get; set; }\n\n\t[System.Text.Json.Serialization.JsonPropertyName(\"DocumentMapAvailable\")]\n\tpublic bool DocumentMapAvailable { get; set; }\n}\n\npublic class ErrorModel\n{\n\t[System.Text.Json.Serialization.JsonPropertyName(\"error\")]\n\tpublic string Error { get; set; }\n\n\t[System.Text.Json.Serialization.JsonPropertyName(\"error_description\")]\n\tpublic string Description { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic privateFonts Element Structure in XML\nDESCRIPTION: Demonstrates the basic XML structure of the privateFonts element, showing how to add font entries to the collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/privatefonts-element.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<privateFonts>\n\t<add />\n</privateFonts>\n```\n\n----------------------------------------\n\nTITLE: Creating Helper Class for JSON Configuration Resolution in ASP.NET Core\nDESCRIPTION: A static class that resolves the reporting configuration from a JSON file. It combines the environment's content root path with the reporting settings filename and builds a configuration object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-core-2.1-and-2.2.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nstatic class ConfigurationHelper\n{\n\tstatic IConfiguration ResolveConfiguration(IHostingEnvironment environment)\n\t{\n\t\t// If a specific configuration needs to be passed to the reporting engine, add it through a new IConfiguration instance.\n\t\tvar reportingConfigFileName = System.IO.Path.Combine(environment.ContentRootPath, \"reportingAppSettings.json\");\n\t\treturn new ConfigurationBuilder()\n\t\t.AddJsonFile(reportingConfigFileName, true)\n\t\t.Build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Link in Layout for Report View\nDESCRIPTION: This code snippet demonstrates how to add a navigation link to the Report view in the Home page of an ASP.NET Core application by modifying the shared layout file. The link allows users to navigate to the Report page easily.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer-in-asp.net-core.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<li><a asp-area=\"\" asp-controller=\"Home\" asp-action=\"Report\">Report</a></li>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<li><a asp-area=\"\" asp-controller=\"Home\" asp-action=\"Index\">Home</a></li>\n<li><a asp-area=\"\" asp-controller=\"Home\" asp-action=\"About\">About</a></li>\n<li><a asp-area=\"\" asp-controller=\"Home\" asp-action=\"Contact\">Contact</a></li>\n<li><a asp-area=\"\" asp-controller=\"Home\" asp-action=\"Report\">Report</a></li>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies in package.json\nDESCRIPTION: JSON configuration showing the required resolutions for peer dependencies of the Native Angular Report Viewer. This ensures compatible versions of all Kendo UI and Progress packages.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-narv-using-yarn-package-manager.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\t...\n\t\t\"resolutions\": {\n\t\t\t\"@progress/kendo-angular-buttons\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-common\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-dateinputs\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-dialog\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-dropdowns\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-icons\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-indicators\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-inputs\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-intl\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-l10n\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-label\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-layout\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-listbox\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-navigation\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-pager\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-popup\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-progressbar\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-toolbar\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-tooltip\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-angular-treeview\": \"~13.2.0\",\n\t\t\t\"@progress/kendo-licensing\": \"^1.0.2\",\n\t\t\t\"@progress/telerik-common-report-viewer\": \"20.23.1010\"\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring SqlDataSource with Multivalue Parameter\nDESCRIPTION: This T-SQL example configures a SqlDataSource Component for a report with a multivalue parameter. It shows how to set the ValueMember and DisplayMember properties for displaying parameter values in the report's UI.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/using-multivalue-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ProductID, Name\nFROM Production.Product\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Viewer Component in Blazor\nDESCRIPTION: Implementation of the Telerik PDF Viewer component with toolbar configuration and loading state handling using TelerikLoaderContainer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-reports-in-maui-blazor-pdf-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSHTML\nCODE:\n```\n@if (FileData != null)\n{\n\t<TelerikPdfViewer @ref=\"@PdfViewerRef\"\n\t\t\t\t\tData=\"@FileData\">\n\t\t<PdfViewerToolBar>\n\t\t\t<PdfViewerToolBarPagerTool />\n\t\t\t<PdfViewerToolBarSpacer />\n\t\t\t<PdfViewerToolBarZoomTool />\n\t\t\t<PdfViewerToolBarSelectionTool />\n\t\t</PdfViewerToolBar>\n\t</TelerikPdfViewer>\n}\nelse\n{\n\t<TelerikLoaderContainer />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interactive Action Handlers in C# for ASP.NET MVC Report Viewer\nDESCRIPTION: This snippet demonstrates how to set up interactive action handlers within the ClientEvents of the ASP.NET MVC Report Viewer. The code assigns JavaScript functions to handle actions like executing, entering, and leaving interactive report elements.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-with-html5-based-report-viewers.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n.ClientEvents(e =>\n{\n\te.InteractiveActionExecuting(\"function (e, args) {\"+\n\t\t\t\"if (args.action.Type === 'navigateToReport') {\" +\n\t\t\t\t\"args.cancel = !confirm('You are about to navigate to report ' + args.action.Value.Report + '.\\r\\n\\nContinue?');\"+\n\t\t\t\"}\"+\n\t\t\"}\");\n\te.InteractiveActionEnter(\"function (e, args) {\" +\n\t\t\t\"if (args.action.Type === 'navigateToReport') {\" +\n\t\t\t\t\"$(args.element).css({ 'font-weight': 'bolder', 'background-color': 'darkSeaGreen' });\" +\n\t\t\t\"}\" +\n\t\t\"}\");\n\te.InteractiveActionLeave(\"function (e, args) {\" +\n\t\t\t\"if (args.action.Type === 'navigateToReport') {\" +\n\t\t\t\t\"$(args.element).css({ 'font-weight': 'normal', 'background-color': 'white' });\" +\n\t\t\t\"}\" +\n\t\t\"}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings in appsettings.json\nDESCRIPTION: This JSON snippet demonstrates how to configure connection strings within the `appsettings.json` file for an ASP.NET Core application using Telerik Reporting.  It defines a connection string named `Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString` that specifies the data source, initial catalog, and integrated security settings to connect to a SQL Server database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/first-steps-integrating.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"Logging\": {\n\t\t\"LogLevel\": {\n\t\t\t\"Default\": \"Information\",\n\t\t\t\"Microsoft.AspNetCore\": \"Warning\"\n\t\t}\n\t},\n\t\"AllowedHosts\": \"*\",\n\t\"ConnectionStrings\": [\n\t\t{\n\t\t\t\"name\": \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\",\n\t\t\t\"connectionString\": \"Data Source=(local)\\\\MSSQLSERVER01;Initial Catalog=AdventureWorks;Integrated Security=SSPI\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t]\n\t}\n```\n\n----------------------------------------\n\nTITLE: Listing Report Viewer Events in Markdown Table\nDESCRIPTION: A markdown table listing all available events in the telerikReportViewer object, including export, print, rendering, page, error, UI update, interactive action, tooltip, and email events.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/telerikreportviewer-namespace/events.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|   |\n| ------ |\n| Member name |\n| ------ |\n|EXPORT_BEGIN|\n|EXPORT_END|\n|PRINT_BEGIN|\n|PRINT_END|\n|RENDERING_BEGIN|\n|RENDERING_END|\n|PAGE_READY|\n|ERROR|\n|UPDATE_UI|\n|INTERACTIVE_ACTION_EXECUTING|\n|INTERACTIVE_ACTION_ENTER|\n|INTERACTIVE_ACTION_LEAVE|\n|VIEWER_TOOLTIP_OPENING|\n|SEND_EMAIL_BEGIN|\n|SEND_EMAIL_END|\n```\n\n----------------------------------------\n\nTITLE: Generating Unsupported Barcodes with IronBarCode in C#\nDESCRIPTION: A custom user function that uses the IronBarCode library to generate barcode images for types not supported natively by Telerik Reporting. The function creates barcode images that can be displayed in a PictureBox report item, supporting QR Code and Data Matrix encodings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-generate-and-display-unsupported-barcode-types.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nusing IronBarCode;\nusing System.Drawing;\n\npublic static class UserFunctions\n{\n    public static Image GetBarCodeImage(string value, string encoding)\n    {\n        BarcodeWriterEncoding barcodeEncoding = GetBarCodeEncoding(encoding);\n\n        Image barcodeImage = BarcodeWriter.CreateBarcode(value, barcodeEncoding).Image;\n\n        return barcodeImage;\n    }\n\n    private static BarcodeWriterEncoding GetBarCodeEncoding(string encoding)\n    {\n        // Include logic for selecting Barcode Encoding\n\n        BarcodeWriterEncoding coder;\n\n        switch (encoding)\n        {\n            case \"QRCode\":\n                coder = BarcodeWriterEncoding.QRCode;\n                break;\n            case \"Data Matrix\":\n                coder = BarcodeWriterEncoding.DataMatrix;\n                break;\n\t\t\t\t\n           // Include other options if required\t\n\t\t\t\t\n            default:\n                throw new System.Exception(\"Unavailable Barcode Encoder\");\n        }\n\n        return coder;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Report DocumentName as Browser Tab Title in HTML5 Report Viewer\nDESCRIPTION: This JavaScript code initializes a Telerik Report Viewer and uses the renderingEnd event to set the document title of the web page to match the report's name. The report name is retrieved from the bookmark nodes provided in the event arguments.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-set-report-documentname-as-web-page-document-title.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n\t\t\t.telerik_ReportViewer({\n\t\t\t\tserviceUrl: \"https://demos.telerik.com/reporting/api/reports/\",\n\t\t\t\treportSource: {\n\t\t\t\t\treport: \"ReportBook.trbp\",\n\t\t\t\t},\n\t\t\t\trenderingEnd: function (e, args) {\n\t\t\t\t\t\tdocument.title = args.bookmarkNodes[0].text;\n\t\t\t\t}\n\t\t\t});\n```\n\n----------------------------------------\n\nTITLE: Adding Required Dependencies\nDESCRIPTION: HTML markup for including necessary JavaScript and CSS dependencies for the Report Viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/how-to-use-native-blazor-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"_content/Telerik.UI.for.Blazor/js/telerik-blazor.js\" defer></script>\n\n<script src=\"_content/Telerik.ReportViewer.BlazorNative/js/reporting-blazor-viewer.js\" defer></script>\n\n<link href=\"https://kendo.cdn.telerik.com/themes/8.2.1/utils/all.css\" rel=\"stylesheet\" />\n\n<link rel=\"stylesheet\" href=\"_content/Telerik.UI.for.Blazor/css/kendo-theme-default/all.css\" />\n\n<link href=\"_content/Telerik.ReportViewer.BlazorNative/css/reporting-blazor-viewer.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Handling navigateToReport Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `navigateToReport` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `navigateToReport` event is emitted when the viewer navigates to a new report through the Drillthrough/Navigate To Report action.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\tnavigateToReport(e: any) {\n\t\t\tconsole.log(\"The report source object of the newly loaded report\", e)\n\t\t\tconsole.log(\"This event will be emitted when the viewer navigates to a new report through the Drillthrough/Navigate To Report action.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Adding Report Group Programmatically - VB.NET\nDESCRIPTION: Demonstrates how to programmatically add a new group to a Telerik Report using VB.NET. Creates a group with sorting, filtering, and bookmarking capabilities.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/grouping-data/how-to-add-groups-to-report.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim report As New Report()\nDim group As New Group()\ngroup.Name = \"ProductGroup\"\ngroup.Groupings.Add(New Grouping(\"=Fields.ProductName\"))\ngroup.Sortings.Add(New Sorting(\"=Fields.ProductName\", SortDirection.Asc))\ngroup.Filters.Add(New Filter(\"=Fields.UnitPrice\", FilterOperator.GreaterThan, \"=10\"))\ngroup.GroupKeepTogether = GroupKeepTogether.All\ngroup.DocumentMapText = \"=Fields.ProductName\"\nreport.Groups.Add(group)\n```\n\n----------------------------------------\n\nTITLE: Implementing User Function for Dynamic ColorPalette in C#\nDESCRIPTION: This C# function creates an IColorPalette object from a list of hex color strings. It can handle either multiple color parameters or a single string with colors separated by '#'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/colorpalette-set-with-bindings.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static IColorPalette UserColorPalette(params string[] hexColors)\n{\n    string[] colors = hexColors;\n\n    if (null == colors || colors.Length <= 0)\n    {\n        return null;\n    }\n\n    if (colors.Length == 1)\n    {\n        colors = colors[0]\n            .Split('#')\n            .Where(c => !string.IsNullOrWhiteSpace(c))\n            .Select(c => $\"#{c.Trim()}\")\n            .ToArray();\n    }\n\n    ColorPalette colorPalette = new ColorPalette(colors);\n\n    return colorPalette;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PictureBox Value with UserFunction in Telerik Reporting Expression\nDESCRIPTION: This expression sets the value of a PictureBox to the result of the ConvertToBitmap UserFunction. It assumes a report parameter named 'url' that holds the URL of the SVG image to be converted.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-convert-svg-to-png.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= UserFunctionClassName.ConvertToBitmap(Parameters.url.Value)\n```\n\n----------------------------------------\n\nTITLE: Altering SQL Server Stored Procedure to Handle NULL Optional Parameters\nDESCRIPTION: This SQL code modifies a stored procedure to check for NULL values in optional parameters and set them to default values. It works when the parameter is NULL, empty, or deleted from the SqlDataSource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-deal-with-stored-procedure-optional-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nALTER PROCEDURE [dbo].[GetForGrade] \n\t@grade int = 10\nAS\nBEGIN\n\tSET NOCOUNT ON;\n\tIF @grade IS NULL  \n\tBEGIN  \n\t\t SET @grade = 10\n\tEND \n\tSELECT [SchoolYear]\n      ,[School]\n      ,[LastName]\n      ,[FirstName]\n      ,[Grade]\n  FROM [dbo].[TestTable1]\n  Where [Grade]=@grade\nEND\n```\n\n----------------------------------------\n\nTITLE: Applying Function and Description Attributes to User Functions in VB.NET\nDESCRIPTION: Shows how to use Function and Description attributes in VB.NET to provide metadata for user functions, including category, name, namespace, and parameter descriptions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/extending-expressions/user-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Module MyFunctions\n    <Function(Category:=\"My Functions\", Name:=\"Greet\", [Namespace]:=\"My\", Description:=\"Returns a greeting message\")> _\n    Public Function Greet(<Description(\"The name to greet\")> ByVal name As String) As String\n        Return String.Format(\"Hello, {0}!\", name)\n    End Function\nEnd Module\n```\n\n----------------------------------------\n\nTITLE: Releasing a Report Instance with DELETE Request in Telerik Reporting REST API\nDESCRIPTION: Makes a DELETE request to the REST API endpoint to release/destroy a specific report instance. The request requires the clientId and instanceId path parameters, which are obtained from previous Register Client and Resolve Report Instance calls respectively.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/report-instances-api/release-report-instance.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/reports/clients/{clientId}/instances/{instanceId}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebServiceDataSource Parameter in Report Designer\nDESCRIPTION: Shows how to set up a WebServiceDataSource parameter with a report parameter using the WebServiceDataSource Wizard in Telerik Reporting\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/passing-multivalue-parameters-from-url-query-string-with-web-service-data-source.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nName: Id\nType: Query\nValue: = Parameters.Id.Value //report parameter with the same name (multi-value with available values set)\nDesing-Time Value: 1 //optional\n```\n\n----------------------------------------\n\nTITLE: Setting Up Map Report Item Properties\nDESCRIPTION: Code references for configuring key Map report item properties including IProjection, ITileProvider, Latitude, and Longitude coordinates. These properties are essential for proper map rendering and data point placement.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/map-set-up-manually.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIProjection\nITileProvider\nPointMapSeries.Latitude\nPointMapSeries.Longitude\n```\n\n----------------------------------------\n\nTITLE: Defining a SearchInfo JSON Entity\nDESCRIPTION: This JSON snippet defines a SearchInfo object used in Telerik Reporting REST Service to configure search operations. The object includes fields such as 'searchToken', 'matchCase', 'matchWholeWord', and 'useRegularExpressions', each controlling specific aspects of the search process. Essential for enabling search functionality in Telerik Reporting, these fields must be set according to the desired search criteria, such as case sensitivity, whole word matching, and the use of regular expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/searchinfo.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"searchToken\": \"foo\",\n\t\"matchCase\": false,\n\t\"matchWholeWord\": false,\n\t\"useRegularExpressions\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Angular 16 Specific Dependencies\nDESCRIPTION: PowerShell command showing how to install dependencies specifically for Angular 16 projects using yarn package manager.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-narv-using-yarn-package-manager.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nyarn add @angular-devkit/schematics@16 @angular-devkit/core@16 @progress/kendo-angular-upload @progress/kendo-drawing @progress/kendo-svg-icons\n```\n\n----------------------------------------\n\nTITLE: Highlighting Selected List Items in Web Report Designer with CSS\nDESCRIPTION: This CSS snippet enhances visualization by highlighting selected items in the list view of the Web Report Designer. Include it within the HTML head section. The main adjustment is to the background-color property of the .trv-listviewitem.k-listview-item.k-selected class. This changes the appearance of selected items to provide better visual feedback.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/customize-parameter-inputs-highlight-selection-web-report-designer.md#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\n            #webReportDesigner .trv-parameter-header {\n                width: auto;\n                margin-right: 15px;\n            }\n            #webReportDesigner .trv-listviewitem.k-listview-item.k-selected {\n                background-color: rgba(255, 99, 88, 0.25); /* Adjust the RGB color as desired */\n            }\n        </style>\n```\n\n----------------------------------------\n\nTITLE: Defining Response Models for Telerik Reporting REST Service in C#\nDESCRIPTION: This snippet defines C# classes representing the response models used in the Telerik Reporting REST Service API. It includes models for client ID, report source, instance ID, document ID, document info, and error responses.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-reporting-rest-service-api-with-csharp-client.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class ClientIDModel\n{\n\t[Newtonsoft.Json.JsonProperty(\"clientId\")]\n\tpublic string ClientId { get; set; }\n}\n\npublic class ReportSourceModel\n{\n\t[Newtonsoft.Json.JsonProperty(\"Report\")]\n\tpublic string Report { get; set; }\n\t[Newtonsoft.Json.JsonProperty(\"ParameterValues\")]\n\tpublic IDictionary<string, object> ParameterValues { get; set; }\n}\n\npublic class InstanceIdModel\n{\n\t[Newtonsoft.Json.JsonProperty(\"instanceId\")]\n\tpublic string InstanceId { get; set; }\n}\n\npublic class DocumentIdModel\n{\n\t[Newtonsoft.Json.JsonProperty(\"documentId\")]\n\tpublic string DocumentId { get; set; }\n}\n\npublic class DocumentInfoModel\n{\n\t[Newtonsoft.Json.JsonProperty(\"documentReady\")]\n\tpublic bool DocumentReady { get; set; }\n\n\t[Newtonsoft.Json.JsonProperty(\"PageCount\")]\n\tpublic int PageCount { get; set; }\n\n\t[Newtonsoft.Json.JsonProperty(\"DocumentMapAvailable\")]\n\tpublic bool DocumentMapAvailable { get; set; }\n}\n\npublic class ErrorModel\n{\n\t[Newtonsoft.Json.JsonProperty(\"error\")]\n\tpublic string Error { get; set; }\n\n\t[Newtonsoft.Json.JsonProperty(\"error_description\")]\n\tpublic string Description { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF417 Barcode Settings in Telerik Reporting with VB.NET\nDESCRIPTION: This code snippet shows how to configure settings of a PDF417 barcode in Telerik Reporting using VB.NET. It creates a Barcode object, sets the Symbology to PDF417, and configures properties such as EncodingMode, ErrorCorrectionLevel, Rows, and Columns.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/barcode/2d-barcodes/pdf417.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n \"' Sets the PDF417 settings of the Barcode report item.\nDim barcode As New Barcode()\nbarcode.Symbology = BarcodeSymbology.PDF417\nbarcode.PDF417.EncodingMode = PDF417EncodingMode.Byte\nbarcode.PDF417.ErrorCorrectionLevel = 8\nbarcode.PDF417.Rows = 5\nbarcode.PDF417.Columns = 10\"\n```\n\n----------------------------------------\n\nTITLE: MailMessage JSON Structure Example\nDESCRIPTION: Example of a complete MailMessage JSON entity showing the structure for configuring email messages in Telerik Reporting REST Service. It includes sender (from), primary recipient (to), carbon copy recipient (cc), subject, and body content fields.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/mailmessage.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"from\": \"john.doe@mycompany.com\",\n\t\"to\": \"jane.doe@mycompany.com\",\n\t\"cc\": \"john.doe.jr@mycompany.com\",\n\t\"subject\": \"my mail subject\",\n\t\"body\": \"my mail body\",\n}\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Database with Parameter in Telerik Reporting\nDESCRIPTION: This SQL query selects all columns from the HumanResources.Department table where the DepartmentID matches a provided parameter. It demonstrates how to use parameterized queries in Telerik Reporting's SqlDataSource component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/how-to-connect-to-a-sql-database.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM [HumanResources].[Department] WHERE [HumanResources].[Department].[DepartmentID]=@ID\n```\n\n----------------------------------------\n\nTITLE: Making a Resolve Document Request in REST\nDESCRIPTION: This snippet demonstrates how to perform a Resolve Document request to the Telerik Reporting REST Service. It requires valid 'clientId' and 'instanceId' path parameters, and an appropriate request body with format and device information. Upon success, it returns a document identifier.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/resolve-document.md#2025-04-21_snippet_0\n\nLANGUAGE: REST\nCODE:\n```\nPOST /api/reports/clients/{clientId}/instances/{instanceId}/documents\n```\n\nLANGUAGE: REST\nCODE:\n```\n{\n\t\"format\": \"HTML5\",\n\t\"deviceInfo\": { \"xxx\": \"zzz\" },\n\t\"useCache\": true,\n\t\"baseDocumentId\": \"xxxx\",\n\t\"actionId\": \"xxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Header Freezing in C# for Telerik Reporting\nDESCRIPTION: This code snippet demonstrates how to set the FreezeColumnHeaders and FreezeRowHeaders properties of a Table or Crosstab component in Telerik Reporting. These properties control whether column and row headers remain visible while scrolling.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/table-header-freezing.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ntable.FreezeColumnHeaders = true;\ntable.FreezeRowHeaders = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration Service in C#\nDESCRIPTION: This C# class, ConfigurationService, reads the appsettings.json file and exposes the configuration through the IConfiguration interface.  It depends on the IHostingEnvironment to locate the appsettings.json file within the application's content root. The Configuration property provides access to the configuration settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pass-configuration-to-report-processor-in-asp-dot-net-core-without-rest-service.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class ConfigurationService\n\t{\n\t\tpublic IConfiguration Configuration { get; private set; }\n\n\t\tpublic IHostingEnvironment Environment { get; private set; }\n\t\tpublic ConfigurationService(IHostingEnvironment environment)\n\t\t{\n\t\t\tthis.Environment = environment;\n\n\t\t\tvar configFileName = System.IO.Path.Combine(environment.ContentRootPath, \"appsettings.json\");\n\t\t\tvar config = new ConfigurationBuilder()\n\t\t\t\t\t\t\t.AddJsonFile(configFileName, true)\n\t\t\t\t\t\t\t.Build();\n\n\t\t\tthis.Configuration = config;\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Setting Device Rendering Parameters with HashTable\nDESCRIPTION: Code example showing how to set device rendering parameters using System.Collections.HashTable. The code allows configuration of rendering parameters, with unsupported parameters being automatically ignored by the rendering extension.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/extensions-element.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\Processing\\ReportProcessorSnippets.cs region=Add_Device_Settings_Snippet}}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\Processing\\ReportProcessorSnippets.vb region=Add_Device_Settings_Snippet}}\n```\n\n----------------------------------------\n\nTITLE: Configuring appData Path in JSON for Windows Systems\nDESCRIPTION: JSON configuration example showing how to set a Windows-based file path for temporary application data in Telerik Reporting. This specifies the absolute path to store temporary data such as Map tiles cache and SQLite assemblies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/appdata-element.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n  \"appData\": {\n    \"path\": \"c:\\\\temp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Localized Strings for Web Report Designer in JavaScript\nDESCRIPTION: This JavaScript snippet defines a class `WebReportDesignerStringsBase` that includes various localized strings used by the Web Report Designer interface. These strings cover menu actions, error messages, and UI elements. This snippet is meant for inclusion in a JavaScript file that can be referenced within a web application's HTML or view file where the Web Report Designer is initialized. There are no external dependencies required, and the expected output is a collection of string assignments within the JavaScript class. The snippet should be executed in an environment that supports ES6 class syntax.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/localizing-the-web-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport class WebReportDesignerStringsBase {\n    constructor() {\n        this.Report = \"Report\";\n        this.CombinedReport = \"Combined Report\";\n        this.SharedDataSource = \"Shared Data Source\";\n        this.ToolboxAreaTitle = \"Components\";\n        this.PropertiesTitle = \"Properties\";\n        this.PropertiesCategorized = \"Categorized\";\n        this.PropertiesAlphabetical = \"Alphabetical\";\n        this.ExplorerTitle = \"Explorer\";\n        this.CollapseToolbar = \"Collapse toolbar\";\n        this.MainMenu = \"Menu\";\n        this.More = \"more\";\n        this.Error = \"Error\";\n        this.Warning = \"Warning\";\n        this.Close = \"Close\";\n        this.SearchTitle = \"Search through the different options.\";\n        this.SearchAction = \"Press enter to filter the available options.\";\n        this.GeneratingPreview = \"GENERATING PREVIEW...\";\n        this.CreateNewReport = \"Create a Report\";\n        this.CreateNewCombinedReport = \"Create a Combined Report\";\n        this.ComponetsItemsList = \"List layout\";\n        this.ComponetsItemsGrid = \"Grid layout\";\n        this.NewReporFileName = \"File Name\";\n        this.NewReporFileType = \"Save as type\";\n        this.OverlapingMessage = \"Item '{firstItem}' overlaps '{secondItem}'.\\nOverlapping items may not appear as expected in some export formats.\";\n        this.InvalidPasteOfMultipleItemsInTableMessage = \"Pasting multiple items is not supported for a Table item. Paste a single item instead.\";\n        this.CannotFindValidPasteContainerMessage = \"Cannot find a valid target container for the pasted items.\";\n        this.ReportItemsGroupTitle = \"Report Items\";\n        this.TablesGroupTitle = \"Tables\";\n        this.Panel = \"Panel\";\n        this.TextBox = \"TextBox\";\n        this.HtmlTextBox = \"HtmlTextBox\";\n        this.PictureBox = \"PictureBox\";\n        this.Barcode = \"Barcode\";\n        this.Shape = \"Shape\";\n        this.CheckBox = \"CheckBox\";\n        this.Table = \"Table\";\n        this.TableGroup = \"Table Group\";\n        this.TableWizard = \"Table Wizard\";\n        this.Crosstab = \"Crosstab\";\n        this.CrosstabWizard = \"Crosstab Wizard\";\n        this.RadialGaugeWizard = \"Radial Gauge Wizard\";\n        this.LinearGaugeWizard = \"Linear Gauge Wizard\";\n        this.List = \"List\";\n        this.ReportsGroupTitle = \"Report\";\n        this.SubReport = \"SubReport\";\n        this.MapsGroupTitle = \"Maps\";\n        this.Map = \"Map\";\n        this.Choropleth = \"Choropleth\";\n        this.ChartsGroupTitle = \"Charts\";\n        this.Graph = \"Graph\";\n        this.BarGraphWizard = \"Bar\";\n        this.LineGraphWizard = \"Line\";\n        this.PieGraphWizard = \"Pie\";\n        this.AreaGraphWizard = \"Area\";\n        this.ColumnGraphWizard = \"Column\";\n        this.SectionsGroupTitle = \"Report Sections\";\n        this.PageHeaderSection = \"Page Header\";\n        this.PageFooterSection = \"Page Footer\";\n        this.ReportHeaderSection = \"Report Header\";\n        this.ReportFooterSection = \"Report Footer\";\n        this.TocSection = \"Table of Contents\";\n        this.DataSourcesGroupTitle = \"Data Sources\";\n        this.SqlDataSource = \"SQL Data Source\";\n        this.CsvDataSource = \"CSV Data Source\";\n        this.WebServiceDataSource = \"Web Service Data Source\";\n        this.JsonDataSource = \"JSON Data Source\";\n        this.ObjectDataSource = \"Object Data Source\";\n        this.AppearanceCategory = \"Appearance\";\n        this.BehaviorCategory = \"Behavior\";\n        this.DataCategory = \"Data\";\n        this.GeneralCategory = \"General\";\n        this.InteractivityCategory = \"Interactivity\";\n        this.LayoutCategory = \"Layout\";\n        this.SettingsCategory = \"Settings\";\n        this.ReportSourceCategory = \"Report source\";\n        this.RedoButton = \"Redo\";\n        this.UndoButton = \"Undo\";\n        this.PreviewButton = \"Preview\";\n        this.OpenButton = \"Open\";\n        this.OpenRecentButton = \"Open Recent...\";\n        this.ClearRecentDocuments = \"Clear Recent Documents\";\n        this.CloseButton = \"Close\";\n        this.CloseAllButThisButton = \"Close All But This\";\n        this.CloseAllButton = \"Close All\";\n        this.NewButton = \"New\";\n        this.NewReportButton = \"New Report\";\n        this.NewCombinedReportButton = \"New Combined Report\";\n        this.CreateButton = \"Create\";\n        this.SaveButton = \"Save\";\n        this.SaveAsButton = \"Save As...\";\n        this.PublishButton = \"Publish\";\n        this.RevertButton = \"Revert\";\n        this.CancelButton = \"Cancel\";\n        this.CutButton = \"Cut\";\n        this.CopyButton = \"Copy\";\n        this.PasteButton = \"Paste\";\n        this.DeleteButton = \"Delete\";\n        this.BringToFrontButton = \"Bring To Front\";\n        this.SendToBackButton = \"Send To Back\";\n        this.FinishButton = \"Finish\";\n        this.NextButton = \"Next\";\n        this.BackButton = \"Back\";\n        this.CopyStyleButton = \"Copy Style\";\n        this.PasteStyleButton = \"Paste Style\";\n        this.ResetStyleButton = \"Reset Style\";\n        this.NewSharedDataSourceButton = `${this.NewButton} ${this.SharedDataSource}`;\n        this.CreateSharedDataSourceTitle = `${this.CreateButton} ${this.SharedDataSource}`;\n        this.SaveSharedDataSourceAsTitle = `Save ${this.SharedDataSource} As`;\n        this.SaveAsSharedDataSource = `Save As ${this.SharedDataSource}`;\n        this.AddExistingSharedDataSource = `Add Existing ${this.SharedDataSource}`;\n        this.SaveAndOpenButton = `Save And Open`;\n        this.OpenLocalizedReportConfirmationMessage = \"This report is localized and cannot be edited using the Web Report Designer. You can only save the report without the localization data using 'Save As'. Continue?\";\n        this.OpenLocalizedReportConfirmationMessageOnReportServer = \"This report is localized and cannot be edited using the Web Report Designer. Editing localized reports is currently supported only in the Desktop Report Designer. If you continue, the Web Report Designer won't be able to save your changes. Continue?\";\n        this.MainMenuNewShortcut = \"Ctrl+Alt+N\";\n        this.MainMenuOpenShortcut = \"Ctrl+O\";\n        this.MainMenuSaveShortcut = \"Ctrl+S\";\n        this.MainMenuSaveAsShortcut = \"Ctrl+Shift+S\";\n        this.MainMenuCloseShortcut = \"Ctrl+Alt+W\";\n        this.DesignButton = \"Design\";\n        this.Workspace = \"Workspace Preferences\";\n        this.NoRecentDocuments = \"No recent documents\";\n        this.InlineDataSources = \"Inline Data Sources\";\n        this.SharedDataSources = \"Shared Data Sources\";\n        this.Groups = \"Groups\";\n        this.Parameters = \"Parameters\";\n        this.Styles = \"Styles\";\n        this.CrossSectionItems = \"CrossSectionItems\";\n        this.CrossSectionItem = \"CrossSectionItem\";\n        this.RowGroups = \"Row Groups\";\n        this.ColumnGroups = \"Column Groups\";\n        this.Search = \"Search\";\n        this.Body = \"Body\";\n        this.Corner = \"Corner\";\n        this.PreferencesHeader = \"Preferences\";\n        this.RulersGroupHeader = \"Ruler and Grid\";\n        this.RulerTitle = \"Show ruler (dimensions)\";\n        this.GridTitle = \"Show grid\";\n        this.SnappingGroupHeader = \"Snapping\";\n        this.SnappToGridLineTitle = \"Snap to grid lines\";\n        this.SnappToSnapLineTitle = \"Snap to snap lines\";\n        this.GeneralPreferencesHeader = \"General\";\n        this.RestoreReports = \"Preserve open reports on exit\";\n        this.MiscGroupHeader = \"Misc\";\n        this.Watermark = \"Watermark\";\n        this.Pan = \"Pan\";\n        this.LoadMore = \"Load More\";\n        this.Remove = \"Remove\";\n        this.AddImage = \"Add Image\";\n        this.ShowProperties = \"Show Properties\";\n        this.AddItem = \"Add New Item\";\n        this.EditItem = \"Edit Item\";\n        this.RemoveItem = \"Remove This Item\";\n        this.Edit = \"Edit\";\n        this.Configure = \"Configure\";\n        this.OpenForEditing = \"Open for Editing\";\n        this.Replace = \"Replace\";\n        this.Edited = \"&nbsp;-&nbsp;Edited\";\n        this.ChooseAnOption = \"Choose an option...\";\n        this.NoneSelected = \"(none)\";\n        this.SelectOrTypeToggleTarget = \"Select or type toggle target\";\n        this.SelectOrTypeSortingTarget = \"Select or type sorting target\";\n        this.ToggleTargets = \"Toggle targets\";\n        this.SortingTargets = \"Sorting targets\";\n        this.EmptyCollectionEditor = \"No items added.\";\n        this.SelectItem = \"Select {item}\";\n        this.AssetManager = \"Assets Manager\";\n        this.Upload = \"Upload\";\n        this.UploadToFolder = \"Upload To Folder\";\n        this.Download = \"Download\";\n        this.SortDirection = \"Sort direction\";\n        this.SortDirectionAsc = \"Sort Direction Ascending\";\n        this.SortDirectionDesc = \"Sort Direction Descending\";\n        this.SortBy = \"Sort By\";\n        this.DateModified = \"Date Modified\";\n        this.DateCreated = \"Date Created\";\n        this.ListView = \"List View\";\n        this.GridView = \"Grid View\";\n        this.ViewDetails = \"View Details\";\n        this.ViewDetailsChecked = \"On\";\n        this.ViewDetalisUnchecked = \"Off\";\n        this.NoFileSelected = \"No file selected\";\n        this.Extension = \"Extension\";\n        this.Rename = \"Rename\";\n        this.NewFolder = \"New Folder\";\n        this.CreateNewFolder = \"Create New Folder\";\n        this.CopyPath = \"Copy path\";\n        this.Browse = \"Browse\";\n        this.Items = \"items\";\n        this.RemoveFromRecent = \"Remove from recent\";\n        this.NewFolderWindowTitle = \"Create New Folder in\";\n        this.BrowseForFolderWindowTitle = \"Browse For Folder\";\n        this.UploadFilesTo = \"Upload files to\";\n        this.CloseUpload = \"Close upload\";\n        this.ClearSelectedFile = \"Clear file\";\n        this.DropFilesHere = \"Drop file here to upload\";\n        this.UploadingStatus = \"Uploading...\";\n        this.UploadedStatus = \"Upload finished\";\n        this.UploadFailed = \"Upload failed\";\n        this.UploadSuccess = \"Upload succeeded\";\n        this.UploadFail = \"Upload failed\";\n        this.InvalidFileExtension = \"Invalid file extension\";\n        this.InvalidFiles = \"Invalid files\";\n        this.Retry = \"Retry\";\n        this.SelectFile = \"Select file...\";\n        this.DragAndDropFilesHere = \"Drag & drop files here\";\n        this.Or = \"or\";\n        this.Background = \"Background\";\n        this.Borders = \"Borders\";\n        this.Alignment = \"Alignment\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring appData Path in JSON for Unix Systems\nDESCRIPTION: JSON configuration example showing how to set a Unix-based file path for temporary application data in Telerik Reporting. This specifies the absolute path to store temporary data such as Map tiles cache and SQLite assemblies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/appdata-element.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n  \"appData\": {\n    \"path\": \"/tmp/reportingAppData\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Repositioning Preview Button in HTML5 Viewer Using CSS\nDESCRIPTION: This HTML snippet includes the CSS modifications needed to move the Preview button from the bottom to the top of the parameters area. The code uses CSS selectors to target the footer area containing the button and the content area containing parameter editors, then adjusts their positions accordingly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-move-preview-button-at-the-top-of-parameters-area.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    ...\n    <style>\n\t\t...\n        #reportViewer1 {\n            ...\n        }\n\n        .trv-parameters-area.preview .trv-parameters-area-footer {\n            top: 0;\n        }\n\n        .trv-report-viewer .trv-parameters-area.preview .trv-parameters-area-content {\n            top: 3em;\n            bottom: 0;\n        }\n\t\t...\n    </style>\n</head>\n<body>\n\t...\n    <div id=\"reportViewer1\">\n        loading...\n    </div>\n\n    <script type=\"text/javascript\">\n        $(document).ready(function () {\n            $(\"#reportViewer1\")\n                .telerik_ReportViewer({\n                  ...\n\t\t\t\t });\n        });\n    </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Selection Dropdown\nDESCRIPTION: Setup of a TelerikDropDownList component for selecting available reports with default text and value change handling.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-reports-in-maui-blazor-pdf-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: CSHTML\nCODE:\n```\n<TelerikDropDownList @ref=\"@DropDownListRef\"\n\t\t\t\t\t\tData=\"@MyReports\"\n\t\t\t\t\t\tValue=\"@SelectedReport\"\n\t\t\t\t\t\tDefaultText=\"@( SelectedReport == null ? \"<Select Report>\" : null )\"\n\t\t\t\t\t\tValueChanged=\"@((string newValue) => OnDropDownValueChanged(newValue))\">\n</TelerikDropDownList>\n```\n\n----------------------------------------\n\nTITLE: Creating StyleSelector StyleRule in VB.NET\nDESCRIPTION: VB.NET implementation of creating a StyleSelector style rule programmatically that can be applied to any report item by setting its StyleName property.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/creating-style-rules.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\n'Create a StyleRule\nDim MyStyleRule As Telerik.Reporting.Drawing.StyleRule = New Telerik.Reporting.Drawing.StyleRule \n'Add a StyleSelector\nMyStyleRule.Selectors.AddRange(New Telerik.Reporting.Drawing.ISelector() _\n{New Telerik.Reporting.Drawing.StyleSelector(\"CaptionStyle\")})\n'Add(formatting)\nMyStyleRule.Style.BackgroundColor = System.Drawing.Color.Linen\nMyStyleRule.Style.Color = System.Drawing.Color.DodgerBlue\nMyStyleRule.Style.Font.Name = \"Courier New\"                   \n'Add rule to Style Sheet\nMe.StyleSheet.AddRange(New Telerik.Reporting.Drawing.StyleRule() {MyStyleRule})\n```\n\n----------------------------------------\n\nTITLE: Configuring ImagePrint Extension for Printing in Telerik Reporting\nDESCRIPTION: This XML snippet demonstrates how to configure the ImagePrint rendering extension in Telerik Reporting to use raster image formats (PNG in this example) instead of the default metafile format for printing. This is necessary when deploying to Azure environments where metafiles are not supported. It allows printing from WPF or WinForms viewers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/unable-to-print-reports-from-azure-environment.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<extensions>\n\t<render>\n\t\t<extension name=\"IMAGEPrint\">\n\t\t<parameters>\n\t\t\t<parameter name=\"OutputFormat\" value=\"PNG\"/>\n\t\t</parameters>\n\t\t</extension>\n\t</render>\n\t</extensions>\n</Telerik.Reporting>\n\n```\n\n----------------------------------------\n\nTITLE: Using the Custom User Function in HtmlTextBox Expression\nDESCRIPTION: This XML expression shows how to use the custom ParseHtml.HtmlAdapt function to process HTML markup. It takes the markup from Fields.MarkUp and converts it to a format that can be safely parsed by the HtmlTextBox.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/remove-unsupported-tags-from-htmltextbox.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n= HtmlParser.ParseHtml.HtmlAdapt(Fields.MarkUp)\n```\n\n----------------------------------------\n\nTITLE: Overriding ReportsController Methods with IgnoreAntiforgeryToken\nDESCRIPTION: This snippet shows how to override ReportsController public methods and add the IgnoreAntiforgeryToken attribute to bypass anti-forgery token validation for specific methods.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/anti-forgery-token-issue-in-asp-net-core-application.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[IgnoreAntiforgeryToken]\npublic override IActionResult RegisterClient()\n{\n    return base.RegisterClient();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Interactive Action Leave Event\nDESCRIPTION: Cleans up tooltips and action bounds when the mouse leaves an interactive action area.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-winforms-report-viewer.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nvoid reportViewer1_ActionLeave(object sender, ReportViewer.Common.InteractiveActionEventArgs args)\n{\n    this.toolTip.Hide(this);\n    this.borderBounds = System.Drawing.Rectangle.Empty;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Cache Provider in XML for Telerik Reporting\nDESCRIPTION: XML configuration for the Database cache provider. This provider requires backend name and connection string parameters to store rendered pages and resources in a database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t…\n\t<Telerik.Reporting>\n\t\t<cache provider=\"Database\">\n\t\t\t<providers>\n\t\t\t\t<provider name=\"DatabaseProviderName\">\n\t\t\t\t\t<parameters>\n\t\t\t\t\t\t<parameter name=\"BackendName\" value=\"DatabaseProviderBackendName\" />\n\t\t\t\t\t\t<parameter name=\"ConnectionString\" value=\"DatabaseProviderConnectionString\" />\n\t\t\t\t\t</parameters>\n\t\t\t\t</provider>\n\t\t\t</providers>\n\t\t</cache>\n\t</Telerik.Reporting>\n\t…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding jQuery CDN to React Index HTML\nDESCRIPTION: Add a CDN link to the jQuery library in the public/index.html file of the React application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-web-report-designer-in-react-js.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.0/jquery.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Application with CLI\nDESCRIPTION: Command to initialize a new Vue.js application using npm\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-viewer-and-designer-in-vue.md#2025-04-21_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm init vue@latest\n```\n\n----------------------------------------\n\nTITLE: XML Structure of Telerik.Reporting Configuration Section\nDESCRIPTION: This snippet demonstrates the complete structure of the Telerik.Reporting configuration section in XML-based configuration files. It includes all possible child elements that can be configured for the reporting engine.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<extensions>\n\t\t<render>\n\t\t\t<extension>\n\t\t\t\t<parameters>\n\t\t\t\t\t<parameter/>\n\t\t\t\t</parameters>\n\t\t\t</extension>\n\t\t</render>\n\t</extensions>\n\t<cache>\n\t\t<providers>\n\t\t\t<provider>\n\t\t\t\t<parameters>\n\t\t\t\t\t<parameter/>\n\t\t\t\t</parameters>\n\t\t\t</provider>\n\t\t</providers>\n\t</cache>\n\t<processing>\n\t\t<graphicsEngine>\n\t\t</graphicsEngine>\n\t\t<resourceResolver>\n\t\t\t<parameters>\n\t\t\t\t<parameter/>\n\t\t\t</parameters>\n\t\t</resourceResolver>\n\t\t<sharedResourceResolver>\n\t\t\t<parameters>\n\t\t\t\t<parameter/>\n\t\t\t</parameters>\n\t\t</sharedResourceResolver>\n\t</processing>\n\t<restReportService>\n\t\t<reportResolver/>\n\t\t<storage>\n\t\t\t<parameters>\n\t\t\t\t<parameter/>\n\t\t\t</parameters>\n\t\t</storage>\n\t</restReportService>\n\t<assemblyReferences>\n\t\t<add />\n\t\t<clear />\n\t\t<remove />\n\t</assemblyReferences>\n\t<privateFonts>\n\t\t<add />\n\t</privateFonts>\n\t<fontLibrary>\n\t</fontLibrary>\n\t<dpiAware>\n\t</dpiAware>\n\t<appData>\n\t</appData>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Binding Redirects for Telerik Data Access\nDESCRIPTION: XML configuration for binding redirects when using Telerik Data Access version greater than 2015.1.225.1. These redirects ensure all assemblies required by the Database Cache Provider are directed to their latest versions, replacing x.x.x.x with the exact version of Telerik Data Access assemblies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-the-database-cache-provider.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"Telerik.OpenAccess\" culture=\"neutral\" publicKeyToken=\"7ce17eeaf1d59342\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"x.x.x.x\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"Telerik.OpenAccess.35.Extensions\" culture=\"neutral\" publicKeyToken=\"7ce17eeaf1d59342\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"x.x.x.x\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"Telerik.OpenAccess.Runtime\" culture=\"neutral\" publicKeyToken=\"7ce17eeaf1d59342\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"x.x.x.x\"/>\n\t\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Building and Running .NET Core Angular Project\nDESCRIPTION: Commands for building and running the demo project that integrates Angular Report Viewer with .NET Core 3\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/angular-report-viewer-and-netcore-service.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: PDF Device Information Settings Table Configuration\nDESCRIPTION: Markdown table defining PDF export configuration options with properties, types, and descriptions for Telerik Reporting\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-export-formats/pdf-device-information-settings.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|__Name__|__Type__|__Description__|\n| ------ | ------ | ------ |\n|ComplianceLevel|String|The PDF/A compliance level...|\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Cross-section Item in C#\nDESCRIPTION: This code snippet demonstrates how to programmatically add and initialize a Cross-section report item by configuring its section-related properties in a Telerik Reporting project. Make sure to follow the order of assignments for proper section association.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/cross-section-item.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// C# code to create and initialize Cross-section item\nvar crossSectionItem = new CrossSectionItem();\ncrossSectionItem.BeginSection = reportHeader;\ncrossSectionItem.EndSection = reportFooter;\ncrossSectionItem.BeginMargin = new Unit(0);\ncrossSectionItem.EndMargin = new Unit(0);\nreport.Items.Add(crossSectionItem);\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Database for Column Chart Data - SQL\nDESCRIPTION: This SQL snippet demonstrates a query to retrieve necessary fields for generating a Column Chart in Telerik Reporting. It joins tables from the AdventureWorks database to obtain product categories, order dates, and line totals. Required dependencies include access to the AdventureWorks database, and the query assumes proper table structure and relationships. Inputs are not required as it runs on data selection; outputs include `Category`, `OrderDate`, and `LineTotal` fields.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/column.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t[Production].[ProductCategory].[Name] AS 'Category',\n\t[Sales].[SalesOrderHeader].[OrderDate],\n\t[Sales].[SalesOrderDetail].[LineTotal]\nFROM\n\t[Production].[Product] INNER JOIN\n\t[Production].[ProductSubcategory] ON [Production].[Product].[ProductSubcategoryID] = [Production].[ProductSubcategory].[ProductSubcategoryID] INNER JOIN\n\t[Production].[ProductCategory] ON [Production].[ProductSubcategory].[ProductCategoryID] = [Production].[ProductCategory].[ProductCategoryID] INNER JOIN\n\t[Sales].[SalesOrderDetail] ON [Production].[Product].[ProductID] = [Sales].[SalesOrderDetail].[ProductID] INNER JOIN\n\t[Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] AND [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] AND \n\t[Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID]\n```\n\n----------------------------------------\n\nTITLE: Accessing Location Data in Map Series Expressions\nDESCRIPTION: Example of the special expression syntax used to access the current data point coordinates in a Map series. The '= Location' expression returns a Location object whose Latitude and Longitude properties can be accessed directly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/structure/layers.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n= Location\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Telerik Reporting REST Service\nDESCRIPTION: Example of JSON-based configuration for the restReportService element. Demonstrates the JSON structure for configuring report service settings including storage providers and report resolvers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/restreportservice-element.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"restReportService\": {\n\t\t\"hostAppId\": \"Application1\",\n\t\t\"workerCount\": 4,\n\t\t\"reportSharingTimeout\": 10,\n\t\t\"clientSessionTimeout\": 10,\n\t\t\"exceptionsVerbosity\": \"detailed\",\n\t\t\"reportResolver\": {\n\t\t\t\"provider\": \"type\"\n\t\t},\n\t\t\"storage\": {\n\t\t\t\"provider\": \"file\",\n\t\t\t\"parameters\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"directory\",\n\t\t\t\t\t\"value\": \"c:\\\\temp\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Intercepting AJAX Requests to Set Culture in Telerik Reporting\nDESCRIPTION: This JavaScript code uses jQuery.ajaxPrefilter to intercept AJAX requests to the Telerik Reporting REST service. It specifically targets document creation requests and modifies them to include custom culture settings before they reach the server.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-send-culture-from-client-to-service.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n\t$.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n\t\tvar str = originalOptions.url;\n\t\tvar documentsSuffix = \"documents\";\n\t\tvar isDocumentsUrl = (str.indexOf(documentsSuffix) == str.length - documentsSuffix.length);\n\n\t\tif (isDocumentsUrl) {\n\t\t\tvar d = JSON.parse(originalOptions.data);\n\t\t\td.deviceInfo[\"CurrentCulture\"] = PlaceCultureStringHere;\n\t\t\td.deviceInfo[\"CurrentUICulture\"] = PlaceCultureStringHere;\n\t\t\toptions.data = JSON.stringify(d);\n\t\t}\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Rendering Settings in JSON Configuration File\nDESCRIPTION: JSON configuration example showing how to set device information settings for IMAGE, IMAGEPrintPreview, and IMAGEPrint rendering formats. This example demonstrates the JSON-based approach to configure the same settings as the XML example.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-export-formats/image-device-information-settings.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"extensions\": [\n\t{\n\t\t\"name\": \"IMAGE\",\n\t\t\"parameters\": [\n\t\t{\n\t\t\t\"Name\": \"OutputFormat\",\n\t\t\t\"Value\": \"TIFF\"\n\t\t},\n\t\t{\n\t\t\t\"Name\": \"TiffCompression\",\n\t\t\t\"Value\": \"RLE\"\n\t\t}\n\t]\n\t},\n\t{\n\t\t\"name\": \"IMAGEPrintPreview\",\n\t\t\"parameters\": [\n\t\t{\n\t\t\t\"Name\": \"OutputFormat\",\n\t\t\t\"Value\": \"JPEG\"\n\t\t}\n\t]\n\t},\n\t{\n\t\t\"name\": \"IMAGEPrint\",\n\t\t\"parameters\": [\n\t\t{\n\t\t\t\"Name\": \"OutputFormat\",\n\t\t\t\"Value\": \"PNG\"\n\t\t},\n\t\t{\n\t\t\t\"Name\": \"TextRenderingHint\",\n\t\t\t\"Value\": \"AntiAliasGridFit\"\n\t\t},\n\t\t{\n\t\t\t\"Name\": \"DpiX\",\n\t\t\t\"Value\": \"1200\"\n\t\t},\n\t\t{\n\t\t\t\"Name\": \"DpiY\",\n\t\t\t\"Value\": \"1200\"\n\t\t},\n\t]\n\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Rendering Extension in XML Configuration\nDESCRIPTION: XML configuration for modifying the Image Rendering Extension settings to generate high resolution (300x300 dpi) TIFF images and register additional TIFF formats with different compression methods including CCITT G3/G4, RLE, and None compression. This configuration should be placed in App.config or Web.config file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/configuring-the-image-rendering-extension-to-generate-tiff-files.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?> \n<configuration> \n  <!-- The configSectins element should be the first child element of configuration --> \n  <configSections> \n    <section \n      name=\"Telerik.Reporting\" \n      type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" \n      allowLocation=\"true\" \n      allowDefinition=\"Everywhere\"/> \n  </configSections> \n    <!-- Substitute Version=X.X.X.X with the assembly version you are using! --> \n  <Telerik.Reporting> \n    <Extensions> \n      <Render> \n        <!--This is the original Image rendering extension with modified settings to output high resolution TIFF – 300 x 300 dpi. Also we override the description attribute to hint on the changed resolution.--> \n        <Extension name=\"Image\" description=\"TIFF file Hi res\"> \n          <Parameters> \n            <Parameter name=\"DpiX\" value=\"300\" /> \n            <Parameter name=\"DpiY\" value=\"300\" /> \n          </Parameters> \n        </Extension> \n        <!--Each of the next Extension tags adds a new rendering extension with unique name. The value provided for the TiffCompression parameter defines the compression method to be used. The description attribute is the string to be displayed in the viewer controls, so that the end users can distinguish the export options.--> \n        <Extension name=\"TIFF_CCITT3\" \n                   type=\"Telerik.Reporting.ImageRendering.ImageReport, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" \n                   description=\"TIFF file (CCITT Group 3)\"> \n          <Parameters> \n            <Parameter name=\"TiffCompression\" value=\"ccitt3\" /> \n          </Parameters> \n        </Extension> \n        <Extension name=\"TIFF_CCITT4\" \n                   type=\"Telerik.Reporting.ImageRendering.ImageReport, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" \n                   description=\"TIFF file (CCITT Group 4)\"> \n          <Parameters> \n            <Parameter name=\"TiffCompression\" value=\"ccitt4\" /> \n          </Parameters> \n        </Extension> \n        <Extension name=\"TIFF_RLE\" \n                   type=\"Telerik.Reporting.ImageRendering.ImageReport, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" \n                   description=\"TIFF file (Rle)\"> \n          <Parameters> \n            <Parameter name=\"TiffCompression\" value=\"rle\" /> \n          </Parameters> \n        </Extension> \n        <Extension name=\"TIFF_NONE\" \n                   type=\"Telerik.Reporting.ImageRendering.ImageReport, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" \n                   description=\"TIFF file (None)\"> \n          <Parameters> \n            <Parameter name=\"TiffCompression\" value=\"none\" /> \n          </Parameters> \n        </Extension> \n      </Render> \n    </Extensions> \n  </Telerik.Reporting>   \n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Using Methods for Localization Resource Retrieval in VB\nDESCRIPTION: This code snippet showcases how to create a method that retrieves localization resource strings, allowing for dynamic resource management when customizing the WPF Report Viewer. The method can be adapted to pull data from various sources, such as databases.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/customizing/report-viewer-localization.md#2025-04-21_snippet_3\n\nLANGUAGE: vb\nCODE:\n```\n' Method to retrieve localized string from a source\nPublic Class CustomTextResources\n    Implements ITextResources\n\n    Default Public Property Item(ByVal resourceKey As String) As String Implements ITextResources.Item\n        Get\n            ' Logic to retrieve the resource string from a database or alternative source\n            Return GetResourceFromDatabase(resourceKey)\n        End Get\n    End Property\n\n    Private Function GetResourceFromDatabase(ByVal resourceKey As String) As String\n        ' Custom logic to retrieve the string from a database\n        Return \"Dynamic string for \" & resourceKey\n    End Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Converting SVG to Bitmap using UserFunction in C#\nDESCRIPTION: This code snippet defines a UserFunction that converts an SVG file to a Bitmap. It uses the Svg NuGet package to open and render the SVG document. The function takes a URL as input and returns a 120x120 pixel Bitmap.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-convert-svg-to-png.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic static Bitmap ConvertToBitmap(string url)\n{\n\tvar svgDocument = Svg.SvgDocument.Open(url);\n\tsvgDocument.ShapeRendering = SvgShapeRendering.Auto;\n\n\tBitmap bmp = svgDocument.Draw(120, 120); // Draw Bitmap in any Size you need - for example 120px x 120px\n\treturn bmp;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing HTML5 Report Viewer Template File in Telerik Reporting\nDESCRIPTION: Specifies the path to the default HTML template file used by the HTML5 Report Viewer. This file contains all the necessary markup for the viewer's functionality.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/styling-and-appearance/templates-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nReportViewer/templates/telerikReportViewerTemplate-{{site.buildversion}}.html\n```\n\n----------------------------------------\n\nTITLE: Adding Drillthrough Action Programmatically in VB.NET\nDESCRIPTION: This snippet shows how to add a NavigateToReportAction to a report item programmatically using VB.NET. It creates a new NavigateToReportAction, configures the ReportSource as a TypeReportSource, and adds a parameter with a specified name and value. When a user clicks the item, the associated detail report will open.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/drillthrough-report-action.md#2025-04-21_snippet_1\n\nLANGUAGE: vbnet\nCODE:\n```\n \"' The following example demonstrates how to add a NavigateToReportAction to an item\\n'\\n' Example:\\n'\\n' item.Action = AddNewNavigateToReportAction(item)\\n'\\nPublic Shared Function AddNewNavigateToReportAction(ByVal item As Telerik.Reporting.ReportItem) As Telerik.Reporting.Action\\n\tDim action As New Telerik.Reporting.NavigateToReportAction()\n\t'\\n\t' TypeReportSource settings\\n\t'\\n\tDim typeReportSource As New Telerik.Reporting.TypeReportSource()\n\ttypeReportSource.TypeName = GetType(Telerik.Reporting.Examples.ReportLibrary.ProductCatalog).AssemblyQualifiedName\n\taction.ReportSource = typeReportSource\n\t'\\n\t' Parameters settings\\n\t'\\n\tDim parameter As New Telerik.Reporting.ActionParameter()\n\tparameter.Name = \"ReportParameter1\"\n\tparameter.Value = \"ReportParameterValue\"\n\taction.Parameters.Add(parameter)\n\n\tReturn action\nEnd Function\"\n```\n\n----------------------------------------\n\nTITLE: Handling Get Report Parameters Response from Telerik Reporting REST Service\nDESCRIPTION: HTTP response containing an array of Parameter objects. Each parameter includes properties like name, type, text prompt, multivalue flag, validation settings, visibility, dependency information, available values, and current value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/report-parameters-api/get-report-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n\n[\n\t{\n\t\t\"name\": \"p1\",\n\t\t\"id\": \"p1\",\n\t\t\"type\": \"System.Integer\",\n\t\t\"text\": \"Input p1\",\n\t\t\"multivalue\": false,\n\t\t\"allowNull\": true,\n\t\t\"allowBlank\": false,\n\t\t\"isVisible\": true,\n\t\t\"autoRefresh\": false,\n\t\t\"hasChildParameters\": true,\n\t\t\"childParameters\": [\"p2\"],\n\t\t\"value\":1\n\t\t\"label\": \"1\",\n\t},\n\t{\n\t\t\"name\": \"p2\",\n\t\t\"id\": \"p2\",\n\t\t\"type\": \"System.String\",\n\t\t\"text\": \"Please input p2\",\n\t\t\"multivalue\": false,\n\t\t\"allowNull\": false,\n\t\t\"allowBlank\": false,\n\t\t\"isVisible\": true,\n\t\t\"autoRefresh\": false,\n\t\t\"hasChildParameters\": false,\n\t\t\"availableValues\": [\n\t\t\t  {\"name\": \"Sofia\", \"value\": \"Sofia\"}\n\t\t\t  {\"name\": \"Berlin\", \"value\": \"Berlin\"}\n\t\t],\n\t\t\"value\": \"Sofia\"\n\t\t\"label\": \"Sofia\",\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring PageSettings for Printer Compatibility\nDESCRIPTION: Demonstrates how to select appropriate PaperKind to ensure full report printing on printers with limited paper size support\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reports-with-continuouspaper-or-custom-paperkind-cut-on-some-printers.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Example of setting PageSettings to support longer paper\npageSettings.PaperKind = PaperKind.RollPaper3276mm;\npageSettings.ContinuousPaper = true;\n```\n\n----------------------------------------\n\nTITLE: Adding Report Filters Programmatically in C#\nDESCRIPTION: Demonstrates how to programmatically add filters to a report's FilterCollection using C#. Shows the creation of a new Filter object with an expression, operator, and value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/filtering-data/how-to-add-filtering-to-report.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nReport report = new Report();\nFilter filter = new Filter();\nfilter.Expression = \"=Fields.CategoryName\";\nfilter.Operator = FilterOperator.Equal;\nfilter.Value = \"Beverages\";\nreport.Filters.Add(filter);\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Send Document Endpoint in HTTP\nDESCRIPTION: Shows the HTTP endpoint format for sending a document as an email attachment. The endpoint requires clientId, instanceId, and documentId parameters which are obtained from previous API calls.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/send-document.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/reports/clients/{clientId}/instances/{instanceId}/documents/{documentId}/send\n```\n\n----------------------------------------\n\nTITLE: Cloning the Angular Quickstart Project\nDESCRIPTION: This PowerShell snippet shows commands for cloning the Angular Quickstart project repository, allowing users to set up their local development environment for integrating the Angular Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\ngit clone https://github.com/angular/quickstart.git\ncd quickstart\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Custom HTML Template for Report Viewer Toolbar\nDESCRIPTION: HTML template demonstrating structure of Report Viewer toolbar with various buttons that can be modified or removed\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hide-or-change-html5-report-viewer-toolbar-buttons.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"trv-content-wrapper k-content\">\n    <div class=\"trv-nav k-widget\">\n        <ul tabindex=\"1\" aria-label=\"Main menu\" class=\"trv-menu-large\" data-role=\"telerik_ReportViewer_MainMenu\">\n            <!-- start removing buttons from here -->\n            <li><a data-command=\"telerik_ReportViewer_historyBack\" title=\"Navigate Backward\" href=\"#\"><i class=\"t-font-icon t-i-undo\"></i></a></li>\n            <li><a data-command=\"telerik_ReportViewer_historyForward\" title=\"Navigate Forward\" href=\"#\"><i class=\"t-font-icon t-i-redo\"></i></a></li>\n            ...\n        </ul>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Styled Content in HtmlTextBox with HTML\nDESCRIPTION: This snippet shows the generated HTML code for an HtmlTextBox that contains a styled link to the Telerik Reporting online demos. The HTML is generated in the Standalone Report Designer after styling the text and adding a hyperlink. Key styling includes setting a background color and hyperlink attributes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/htmltextbox/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<span style=\\\"background-color: #ff8000\\\"><a href=\\\"https://demos.telerik.com/reporting/\\\">Telerik Reporting</a></span>\n```\n\n----------------------------------------\n\nTITLE: Including Required Scripts for Telerik HTML5 Report Viewer\nDESCRIPTION: This snippet demonstrates how to include the necessary jQuery and Telerik Kendo UI CSS/JS files in the HTML <head> to ensure proper loading of resources in the HTML5 ASP.NET WebForms ReportViewer. Dependencies include jQuery and specific versions of Kendo UI CSS and JS files. The code should be placed within the <head> tag of the HTML document.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/missing-icon-of-the-datetime-parameter-editor-in-the-html5--webforms-reportviewer.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <title>Telerik HTML5 Report Viewer Demo</title>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n \n    <script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\n    <link href=\"http://kendo.cdn.telerik.com/2015.3.930/styles/kendo.common.min.css\" rel=\"stylesheet\" id=\"common-css\" />\n    <link href=\"http://kendo.cdn.telerik.com/2015.3.930/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" id=\"skin-css\" />\n \n    <!--kendo.all.min.js can be used as well kendo.web.min.js and kendo.mobile.min.js-->\n    <script src=\"/ReportViewer/js/kendo.subset.2015.3.930.min.js\"></script>\n...\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring WCF Service Endpoints in Web.config\nDESCRIPTION: This XML configuration sets up the required service endpoints in web.config for the Telerik Reporting WCF Service. It includes endpoints for client access, resource access, and metadata exchange, along with the necessary service behaviors.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-add-telerik-reporting-wcf-service-to-web-application.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t...\n\t\t<system.serviceModel>\n\t\t\t<serviceHostingEnvironment aspNetCompatibilityEnabled=\"true\" />\n\t\t\t<services>\n\t\t\t\t<service\n\t\t\t\t\t\tname=\"Telerik.Reporting.Service.ReportService\"\n\t\t\t\t\t\tbehaviorConfiguration=\"ReportServiceBehavior\">\n\t\t\t\t\t<!-- endpoint allowing clients access to the Reporting WCF service -->\n\t\t\t\t\t<endpoint\n\t\t\t\t\t\taddress=\"\"\n\t\t\t\t\t\tbinding=\"basicHttpBinding\"\n\t\t\t\t\t\tcontract=\"Telerik.Reporting.Service.IReportService\">\n\t\t\t\t\t</endpoint>\n\t\t\t\t\t<!-- endpoint allowing clients access to resources as images -->\n\t\t\t\t\t<endpoint\n\t\t\t\t\t\t\taddress=\"resources\"\n\t\t\t\t\t\t\tbinding=\"webHttpBinding\"\n\t\t\t\t\t\t\tbehaviorConfiguration=\"WebBehavior\"\n\t\t\t\t\t\t\tcontract=\"Telerik.Reporting.Service.IResourceService\"/>\n\t\t\t\t\t<!-- endpoint allowing clients access to receive service's metadata via SOAP messages -->\n\t\t\t\t\t<endpoint\n\t\t\t\t\t\t\taddress=\"mex\"\n\t\t\t\t\t\t\tbinding=\"mexHttpBinding\"\n\t\t\t\t\t\t\tcontract=\"IMetadataExchange\" />\n\t\t\t\t</service>\n\t\t\t</services>\n\t\t\t<behaviors>\n\t\t\t\t<serviceBehaviors>\n\t\t\t\t\t<behavior name=\"ReportServiceBehavior\">\n\t\t\t\t\t\t<serviceMetadata httpGetEnabled=\"true\" />\n\t\t\t\t\t\t<serviceDebug includeExceptionDetailInFaults=\"false\" />\n\t\t\t\t\t</behavior>\n\t\t\t\t</serviceBehaviors>\n\t\t\t\t<endpointBehaviors>\n\t\t\t\t\t<behavior name=\"WebBehavior\">\n\t\t\t\t\t\t<webHttp />\n\t\t\t\t\t</behavior>\n\t\t\t\t</endpointBehaviors>\n\t\t\t</behaviors>\n\t\t</system.serviceModel>\n\t ...\n\t</configuration>\n```\n\n----------------------------------------\n\nTITLE: Enabling Telerik Reporting Middleware\nDESCRIPTION: Registers the Telerik Reporting Minimal API endpoints and enables the routing middleware required for the REST service to function.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-6-with-minimal-api.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\napp.UseTelerikReporting();\napp.UseRouting();\n```\n\n----------------------------------------\n\nTITLE: Getting Total Page Count in HTML5 Report Viewer - JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the total page count of the currently displayed report in the Telerik Reporting HTML5 Report Viewer by using the pageCount() method of the viewer instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/pagecount().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nvar pageCount = reportViewer.pageCount();\n```\n\n----------------------------------------\n\nTITLE: Invoking Stored Procedure in Oracle\nDESCRIPTION: This SQL snippet shows how to manually execute a stored procedure in Oracle as a workaround for the SqlCommand conversion error in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-mysqlcommand--to-sqlcommand-conversion-error.md#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nEXECUTE Stored_Procedure;\n```\n\n----------------------------------------\n\nTITLE: Adding NewtonsoftJson Serialization in Startup.cs\nDESCRIPTION: Modify the ConfigureServices method in the Startup.cs file to enable NewtonsoftJson serialization for the Web Report Designer service. This step ensures that the application is correctly configured for WebAPI controllers. No additional dependencies are required.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-dotnet.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nservices.AddControllers().AddNewtonsoftJson();\n```\n\n----------------------------------------\n\nTITLE: Add New Graph Column Chart Type in C#\nDESCRIPTION: This C# code snippet demonstrates how to programmatically add a new column chart type to a Telerik Reporting Graph item. It shows the basic steps for defining a chart without using the Report Designer. The code requires the Telerik Reporting library.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/graph-create-programmatically.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Telerik.Reporting;\nusing Telerik.Reporting.Charting;\n\nnamespace Telerik.Reporting\n{\n    public class GraphSnippets\n    {\n        public void AddNewGraphColumnChartType(Graph graph)\n        {\n            // Configure the new Chart.\n            Chart newChart = new Chart();\n            newChart.Name = \"Chart1\";\n            newChart.Width = new Telerik.Reporting.Drawing.Unit(5, Telerik.Reporting.Drawing.UnitType.Inch);\n            newChart.Height = new Telerik.Reporting.Drawing.Unit(3, Telerik.Reporting.Drawing.UnitType.Inch);\n\n            // Add the Chart to the Graph report item.\n            graph.Graphs.Add(newChart);\n\n            // Configure the Chart's CoordinateSystem.\n            CartesianCoordinateSystem cartesianCoordinateSystem = new CartesianCoordinateSystem();\n            cartesianCoordinateSystem.Name = \"cartesianCoordinateSystem1\";\n\n            // Add the CoordinateSystem to the Chart.\n            newChart.CoordinateSystems.Add(cartesianCoordinateSystem);\n\n            // Configure the Chart's X-Axis.\n            CategoryScale xAxis = new CategoryScale();\n            xAxis.Name = \"xAxis1\";\n            cartesianCoordinateSystem.XAxis = xAxis;\n\n            // Configure the Chart's Y-Axis.\n            LinearScale yAxis = new LinearScale();\n            yAxis.Name = \"yAxis1\";\n            cartesianCoordinateSystem.YAxis = yAxis;\n\n            // Configure the Column Series.\n            ColumnSeries columnSeries = new ColumnSeries();\n            columnSeries.Name = \"columnSeries1\";\n\n            // Set the CategoryGroup and ValueMember for the Series.\n            columnSeries.CategoryGroup = \"=Fields.Category\";\n            columnSeries.Y = \"=Fields.Value\";\n\n            // Add the Series to the Chart.\n            newChart.Series.Add(columnSeries);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Install required dependencies including jQuery and Telerik React Report Viewer package\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-report-server.md#2025-04-21_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install jquery\nnpm install @progress/telerik-react-report-viewer\n```\n\n----------------------------------------\n\nTITLE: Checking for Parameterless Constructor in C# Report Class\nDESCRIPTION: This snippet highlights the importance of ensuring that the report class inherits from Telerik.Reporting.Report and implements a default parameterless constructor that calls InitializeComponent. Without this, the VS Designer may remain blank.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/visual-studio-report-designer-is-blank.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyReport : Telerik.Reporting.Report\n{\n    public MyReport() // Parameterless constructor\n    {\n        InitializeComponent();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Report Designer Settings in XML\nDESCRIPTION: This XML snippet defines various settings for the Telerik Report Designer, including form positions, sizes, and default configurations. It specifies settings for different components like query designer, filter collection editor, and graph wizards.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/change-recent-folders-listed-in-the-standalone-report-designer-open-menu.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<setting name=\"TelerikReportingDesignQueryDesignerFormEditorsConditionsView\" serializeAs=\"String\">\n    <value>A0RQSQ4AAAAAAAAAAABiQBNDb25kaXRpb25zVmlldy5MZWZ0CQAAAN8GAAASQ29uZGl0aW9uc1ZpZXcuVG9wCQAAAPoDAAAUQ29uZGl0aW9uc1ZpZXcuV2lkdGgJAAAASAMAABVDb25kaXRpb25zVmlldy5IZWlnaHQJAAAAygEAAA==</value>\n</setting>\n<setting name=\"TelerikReportingFilterCollectionEditor\" serializeAs=\"String\">\n    <value>A0RQSQ4AAAAAAAAAAABiQBNDb2xsZWN0aW9uRm9ybS5MZWZ0CQAAAOQAAAASQ29sbGVjdGlvbkZvcm0uVG9wCQAAAOQAAAAUQ29sbGVjdGlvbkZvcm0uV2lkdGgJAAAA9wMAABVDb2xsZWN0aW9uRm9ybS5IZWlnaHQJAAAACAMAAAxDb2x1bW4uV2lkdGgJAAAAMgAAABZFeHByZXNzaW9uQ29sdW1uLldpZHRoCQAAAH0BAAAUT3BlcmF0b3JDb2x1bW4uV2lkdGgJAAAAUAAAABFWYWx1ZUNvbHVtbi5XaWR0aAkAAADRAQAA</value>\n</setting>\n<setting name=\"TelerikReportingDesignConditionalFormattingEditor+ConditionalFormattingEditorForm\" serializeAs=\"String\">\n    <value>A0RQSQ4AAAAAAAAAAABiQCRDb25kaXRpb25hbEZvcm1hdHRpbmdFZGl0b3JGb3JtLkxlZnQJAAAAbQEAACNDb25kaXRpb25hbEZvcm1hdHRpbmdFZGl0b3JGb3JtLlRvcAkAAACSAgAAJUNvbmRpdGlvbmFsRm9ybWF0dGluZ0VkaXRvckZvcm0uV2lkdGgJAAAAjgMAACZDb25kaXRpb25hbEZvcm1hdHRpbmdFZGl0b3JGb3JtLkhlaWdodAkAAADcAQAA</value>\n</setting>\n<setting name=\"TelerikReportingDesignGraphWizardOhlcGraphWizardForm\" serializeAs=\"String\">\n    <value>A0RQSQ4AAAAAAAAAAABiQBRPSExDR3JhcGhXaXphcmQuTGVmdAkAAABIAQAAE09ITENHcmFwaFdpemFyZC5Ub3AJAAAAOgIAABVPSExDR3JhcGhXaXphcmQuV2lkdGgJAAAAhAUAABZPSExDR3JhcGhXaXphcmQuSGVpZ2h0CQAAAE4FAAA=</value>\n</setting>\n<setting name=\"TelerikReportingDesignGraphWizardCategoryGraphWizardForm\" serializeAs=\"String\">\n    <value>A0RQSQ4AAAAAAAAAAABiQBhDYXRlZ29yeUdyYXBoV2l6YXJkLkxlZnQJAAAACAUAABdDYXRlZ29yeUdyYXBoV2l6YXJkLlRvcAkAAAA1AgAAGUNhdGVnb3J5R3JhcGhXaXphcmQuV2lkdGgJAAAA8AQAABpDYXRlZ29yeUdyYXBoV2l6YXJkLkhlaWdodAkAAADKAwAA</value>\n</setting>\n<setting name=\"TelerikReportingDesignTableWizardTableWizardForm\" serializeAs=\"String\">\n    <value>A0RQSQ4AAAAAAAAAAABiQBBUYWJsZVdpemFyZC5MZWZ0CQAAAMgIAAAPVGFibGVXaXphcmQuVG9wCQAAADUCAAARVGFibGVXaXphcmQuV2lkdGgJAAAA8AQAABJUYWJsZVdpemFyZC5IZWlnaHQJAAAAygMAAA==</value>\n</setting>\n<setting name=\"DefaultWorkingDir\" serializeAs=\"String\">\n    <value>C:\\Program Files (x86)\\Progress\\Telerik Reporting R1 2020\\Report Designer\\Examples\\</value>\n</setting>\n<setting name=\"AllowMultipleInstances\" serializeAs=\"String\">\n    <value>True</value>\n</setting>\n```\n\n----------------------------------------\n\nTITLE: XML Structure for assemblyReferences Element\nDESCRIPTION: Basic XML structure for configuring assembly references in Telerik Reporting. This enables the Reporting Engine to resolve custom user functions and types used by the ObjectDataSource component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/assemblyreferences-element.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<assemblyReferences>\n\t<add />\n\t<clear />\n\t<remove />\n</assemblyReferences>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Instances of Image Rendering Extension in JSON\nDESCRIPTION: JSON configuration example showing how to configure a custom TIFF rendering extension with CCITT Group 4 compression. This demonstrates how to create multiple instances of the same rendering extension with different parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/extensions-element.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"extensions\": [\n\t\t{\n\t\t\t\"name\": \"TIFF_CCITT4\",\n\t\t\t\"type\": \"Telerik.Reporting.ImageRendering.ImageReport, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n\t\t\t\"description\":  \"TIFF file (CCITT Group 4)\",\n\t\t\t\"parameters\": [\n\t\t\t\t{\n\t\t\t\t\t\"Name\": \"TiffCompression\",\n\t\t\t\t\t\"Value\": \"ccitt4\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling DropDownList Selection Change Event (C#)\nDESCRIPTION: This C# code handles the `SelectedIndexChanged` event of a DropDownList.  It retrieves the report from the ReportViewer's ReportSource, casts it to the appropriate types (InstanceReportSource and Report), and sets the value of the report's 'Year' parameter to the selected value of the DropDownList. Finally, it refreshes the report to reflect the new parameter value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/use-parameters-to-retrieve-specific-data.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)\n\t{\n\t\t InstanceReportSource reportsource = (InstanceReportSource)this.ReportViewer1.ReportSource;\n\t\t Report report = (Report)reportsource.ReportDocument;\n\t\t report.ReportParameters[\"Year\"].Value = ((DropDownList)sender).SelectedItem.Value;\n\t\t ReportViewer1.RefreshReport();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Moving and Configuring MVC Report Viewer View\nDESCRIPTION: Steps to properly set up the Report Viewer view file in an MVC project structure. This includes moving the auto-generated view file to the correct folder and setting up the corresponding controller action.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/how-to-use-html5-asp.net-mvc-report-viewer-with-rest-service.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1. Move ReportViewerView1.cshtml from main folder to View/Home\n2. Rename ReportViewerView1.cshtml to Reports.cshtml\n3. Add Reports action in HomeController that returns the view\n```\n\n----------------------------------------\n\nTITLE: Handling ItemDataBound Event in Telerik Reporting\nDESCRIPTION: This snippet shows how to handle the ItemDataBound event which allows developers to read values of a processing item after data binding has occurred. This enables validation and adjustments based on the resultant property values, although certain modifications may not take effect due to layout generation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/understanding-events.md#2025-04-21_snippet_2\n\nLANGUAGE: .NET\nCODE:\n```\nprivate void TextBox_ItemDataBound(object sender, EventArgs e)\n{\n    var processingItem = (Telerik.Reporting.Processing.TextBox)sender;\n    // Read processing item properties\n    var firstName = processingItem.Value;\n    // Potential adjustments can be made here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAccessDataSource with Minimum Settings in C#\nDESCRIPTION: This snippet demonstrates the minimum code necessary to set up the OpenAccessDataSource component using an OpenAccessContext and a member. This approach works in production but may not work at design-time.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/configuring-the-database-connectivity-with-the-openaccessdatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nOpenAccessDataSource openAccessDataSource = new OpenAccessDataSource();\nopenAccessDataSource.ContextTypeName = typeof(AdventureWorksModel.AdventureWorksEntities).AssemblyQualifiedName;\nopenAccessDataSource.OpenAccessContextOptions = OpenAccessContextOptions.Default;\nopenAccessDataSource.Member = \"SalesOrderHeaders\";\n```\n\n----------------------------------------\n\nTITLE: Basic HTML5 Page Structure\nDESCRIPTION: Initial HTML5 document structure for the report viewer implementation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/manual-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t\t<head>\n\t\t\t<title>Telerik HTML5 Report Viewer</title>\n\t\t</head>\n\t\t<body>\n\t\t</body>\n\t</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Typed DataSet from XML (Recommended Approach)\nDESCRIPTION: Create a strongly-typed DataSet from XML data which can be used with the ObjectDataSource Component in Telerik Reporting. This method provides design-time schema support and better type safety.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/xml-support.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Example of creating a typed DataSet\nDataSet myDataSet = new DataSet();\nmyDataSet.ReadXml(\"path/to/your/xmlfile.xml\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Server Viewer\nDESCRIPTION: Implementation of the Report Viewer component using Report Server configuration\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/how-to-use-native-blazor-report-viewer.md#2025-04-21_snippet_6\n\nLANGUAGE: CSHTML\nCODE:\n```\n@page \"/\"\n\n<PageTitle>Report Viewer</PageTitle>\n\n<ReportViewer \n\tServiceType=\"@ReportViewerServiceType.ReportServer\" \n\t@bind-ReportSource=\"@ReportSource\"\n\t@bind-ScaleMode=\"@ScaleMode\"\n\t@bind-ViewMode=\"@ViewMode\"\n\t@bind-ParametersAreaVisible=\"@ParametersAreaVisible\"\n\t@bind-DocumentMapVisible=\"@DocumentMapVisible\"\n\t@bind-Scale=\"@Scale\">\n\t<ReportViewerSettings>\n\t\t<ReportServerSettings Url=\"https://demos.telerik.com/report-server/\" Username=\"demouser\" Password=\"demopass\"></ReportServerSettings>\n\t</ReportViewerSettings>\n</ReportViewer>\n\n@code {\n\tpublic ScaleMode ScaleMode { get; set; } = ScaleMode.Specific;\n\tpublic ViewMode ViewMode { get; set; } = ViewMode.Interactive;\n\tpublic bool ParametersAreaVisible { get; set; }\n\tpublic bool DocumentMapVisible { get; set; }\n\tpublic double Scale { get; set; } = 1.0;\n\n\tpublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions(\"Published/Dashboard\", new Dictionary<string, object>\n\t{\n\t\t// Add parameters if applicable\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Binding SQL Parameters to Report Parameters\nDESCRIPTION: Example showing how to bind SQL query parameters to report parameters using expressions\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-parameters-with-the-sqldatasource-component.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\SqlDataSourceSnippets.cs region=BindingExpressionSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Getting Culture Context in JavaScript\nDESCRIPTION: This JavaScript snippet retrieves the culture context from the REST service, providing the format of decimal and list separators based on the current culture. This is important for formatting data correctly in reports.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-core-2.1-application.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"decimalSeparator\":\".\",\"listSeparator\":\",\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Assembly Binding Configuration for Crystal Reports Conversion\nDESCRIPTION: Base XML configuration template for setting up assembly binding redirections required for Crystal Reports conversion. This needs to be added to the configuration file of Visual Studio or Standalone Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/converting-reports-from-various-versions-of-crystalreports.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.CrystalReports.Engine\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"x.x.x.x\" newVersion=\"x.x.x.x\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Enterprise.Framework\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"x.x.x.x\" newVersion=\"x.x.x.x\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Enterprise.InfoStore\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"x.x.x.x\" newVersion=\"x.x.x.x\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Shared\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"x.x.x.x\" newVersion=\"x.x.x.x\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.ReportAppServer.DataDefModel\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"x.x.x.x\" newVersion=\"x.x.x.x\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.ReportAppServer.ReportDefModel\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"x.x.x.x\" newVersion=\"x.x.x.x\"/>\n\t\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Creating a Detail Section in Telerik Reporting (C#)\nDESCRIPTION: This code snippet demonstrates how to create a DetailSection in Telerik Reporting using C#. It involves creating a DetailSection object, setting its height and name, and subsequently adding it to the report's Items collection. No additional libraries are required other than the Telerik Reporting library.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/create-sections-programmatically.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.DetailSection detail = new Telerik.Reporting.DetailSection();\nthis.detail.Height = new Telerik.Reporting.Drawing.Unit(3.0, Telerik.Reporting.Drawing.UnitType.Inch);\nthis.detail.Name = \"detail\";\nreport.Items.Add((Telerik.Reporting.ReportItemBase)detail);\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing for Telerik Reporting in ASP.NET Core\nDESCRIPTION: This code snippet demonstrates how to enable tracing in an ASP.NET Core application using Telerik Reporting. It adds a TextWriterTraceListener to create a log file and enables auto-flushing for immediate logging.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-troubleshoot-errors-in-asp-net-core-applications.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static void Main(string[] args)\n{\n\tEnableTracing();\n\tBuildWebHost(args).Run();\n}\n\nstatic void EnableTracing()\n{\n\tSystem.Diagnostics.Trace.Listeners.Add(new System.Diagnostics.TextWriterTraceListener(File.CreateText(\"log.txt\")));\n\tSystem.Diagnostics.Trace.AutoFlush = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Parameters in POST Request Body (C#)\nDESCRIPTION: Demonstrates how to use inline parameters in the body of a POST request. Single-value parameters are quoted, while multi-value parameters are provided as-is.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/webservicedatasource-component/using-parameters-with-the-webservicedatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n{\\\"name\\\":\\\"@name\\\",\\\"surname\\\":@surname}\n```\n\n----------------------------------------\n\nTITLE: Importing TelerikReportingModule in Application Module\nDESCRIPTION: This snippet demonstrates how to import the TelerikReportingModule in the root module of the Angular application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TelerikReportingModule } from '@progress/telerik-angular-report-viewer';\n\t...\n\timports: [TelerikReportingModule]\n```\n\n----------------------------------------\n\nTITLE: Implementing Page-Aware Table Row Color Manipulation in C#\nDESCRIPTION: C# implementation that uses reflection to access GDI measurements and dynamically set table row background colors based on their physical page position. The code calculates available page space, tracks row positions, and ensures consistent coloring patterns across page breaks while preserving header properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/manipulate-table-rows-based-on-their-position-in-the-physical-page.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace ReportLibrary1\n{\n    using System;\n    using System.ComponentModel;\n    using System.Drawing;\n    using System.Linq;\n    using System.Reflection;\n    using Telerik.Reporting.Drawing;\n    using Telerik.Reporting.Processing;\n\n    /// <summary>\n    /// Summary description for Report1\n    /// </summary>\n    public partial class Report1 : Telerik.Reporting.Report\n    {\n        const int columnHeaderRowCount = 1;// This value should be tuned according to your setup\n        readonly Color mainColor = Color.Red;\n        readonly Color secondaryColor = Color.DarkCyan;\n\n        readonly static PropertyInfo measurementsProp;\n        static PropertyDescriptor heightProp = null;\n\n        // Used to avoid multiple item color modifications\n        Telerik.Reporting.Processing.Report processingReportInstance = null;\n\n        static Report1()\n        {\n            measurementsProp = typeof(Telerik.Reporting.Processing.TextBox).GetProperties(BindingFlags.Instance | BindingFlags.NonPublic)\n                .First(pi => pi.Name == \"Measurements\");\n        }\n\n        public Report1()\n        {\n            //\n            // Required for telerik Reporting designer support\n            //\n            InitializeComponent();\n\n            //\n            // TODO: Add any constructor code after InitializeComponent call\n            //\n        }\n\n        private void pageHeaderSection1_ItemDataBinding(object sender, EventArgs e)\n        {\n            Telerik.Reporting.Processing.PageSection processingPageHeader = (Telerik.Reporting.Processing.PageSection)sender;\n            Telerik.Reporting.Processing.Report processingReport = processingPageHeader.Report;\n\n            if (this.processingReportInstance == processingReport)\n            {\n                return;\n            }\n            else\n            {\n                this.processingReportInstance = processingReport;\n            }\n\n            var useMainColor = true;\n\n            // Get the instance of the Processing Table\n            Telerik.Reporting.Processing.Table processingTable =\n                (Telerik.Reporting.Processing.Table)ElementTreeHelper.FindChildByName(processingReport, \"table1\", true)[0];\n\n            int tableColumnCount = this.table1.ColumnGroups.Count;\n            var tableColumnHeaderHeight = 0f;\n\n            int rowIndex = 0;\n            for (; rowIndex < columnHeaderRowCount; rowIndex++)\n            {\n                var row = processingTable.Rows[rowIndex];\n                var textBox = (Telerik.Reporting.Processing.TextBox)row.GetCell(0).Item;\n                tableColumnHeaderHeight += GetMeasuredHeight(textBox);\n            }\n\n            // assumes all sizes are in the same Units (inch)\n            float pageSectionsHeight = this.pageFooterSection1.Height.Value + this.pageHeaderSection1.Height.Value;\n            float usablePageHeight = this.PageSettings.PaperSize.Height.Value - this.PageSettings.Margins.Top.Value - this.PageSettings.Margins.Bottom.Value;\n            float availableHeight = usablePageHeight - pageSectionsHeight - tableColumnHeaderHeight;//here we assume that the Table starts at vertical position 0 in its container section\n\n            float heightOccupiedByTable = 0f;\n            for (; rowIndex < processingTable.Rows.Count; rowIndex++)\n            {\n                var row = processingTable.Rows[rowIndex];\n                var textBox = (Telerik.Reporting.Processing.TextBox)row.GetCell(0).Item;\n\n                var rowHeight = GetMeasuredHeight(textBox);\n                heightOccupiedByTable += rowHeight;\n\n                if (heightOccupiedByTable > availableHeight)\n                {\n                    useMainColor = true;\n                    heightOccupiedByTable = rowHeight;\n                }\n\n                for (int columnIndex = 0; columnIndex < tableColumnCount; columnIndex++)\n                {\n                    var textBoxItem = (Telerik.Reporting.Processing.TextBox)row.GetCell(columnIndex).Item;\n                    textBoxItem.Style.BackgroundColor = useMainColor ? this.mainColor : this.secondaryColor;\n                }\n\n                useMainColor = !useMainColor;\n            }\n        }\n\n        private static float GetMeasuredHeight(Telerik.Reporting.Processing.TextBox textBox)\n        {\n            var m = measurementsProp.GetValue(textBox);\n            if (null == heightProp)\n            {\n                heightProp = TypeDescriptor.GetProperties(m)[\"Height\"];\n            }\n\n            return Unit.Mm((long)heightProp.GetValue(m) / 100.0).ChangeType(UnitType.Inch).Value;// the Measurements are internally kept in hundreds of millimeters, hence the division\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Report Designer Component\nDESCRIPTION: Vue component implementation for the Telerik Web Report Designer with configuration and styling\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-viewer-and-designer-in-vue.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n\t<div id=\"wrd1\">...</div>\n</template>\n\n<script>\n\texport default {\n\tname: \"WebReportDesigner\",\n\tmounted() {\n\t\tthis.$nextTick(function () {\n\t\t$(\"#wrd1\")\n\t\t\t.telerik_WebReportDesigner({\n\t\t\ttoolboxArea: {\n\t\t\t\tlayout: \"list\",\n\t\t\t},\n\t\t\tserviceUrl: \"https://demos.telerik.com/reporting/api/reportdesigner/\",\n\t\t\treport: \"Barcodes Report.trdx\",\n\t\t\t})\n\t\t\t.data(\"telerik_WebDesigner\");\n\t\t});\n\t},\n};\n</script>\n\n<style scoped>\n\t#wrd1 {\n\tposition: relative;\n\twidth: 100%;\n\theight: 880px;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Accessing Report Items from Calling Applications in VB.NET\nDESCRIPTION: This snippet shows how to access a report item from a WinForm or WPF application using the report hierarchy with an InstanceReportSource assigned to a ReportViewer control. It demonstrates finding and accessing a TextBox item in the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/access-report-items-programmatically.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nProtected Sub Button1_Click(sender As Object, e As EventArgs)\n    Dim instanceReportSource As Telerik.Reporting.InstanceReportSource = DirectCast(Me.reportViewer1.ReportSource, Telerik.Reporting.InstanceReportSource)\n    Dim report As Telerik.Reporting.Report = DirectCast(instanceReportSource.ReportDocument, Telerik.Reporting.Report)\n    Dim txt As Telerik.Reporting.TextBox = TryCast(report.Items.Find(\"productNameDataTextBox\", True)(0), Telerik.Reporting.TextBox)\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace in Angular Report Viewer\nDESCRIPTION: This code snippet shows the error stack trace thrown when attempting to open the search dialog. The error indicates that the kendoComboBox function is not defined, suggesting a missing Kendo UI widget.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/search-dialog-doesnt-appear-in-angular-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nERROR TypeError: $inputBox.kendoComboBox is not a function\n    at ensureInitialized (telerikReportViewer.js:5217)\n    at toggle (telerikReportViewer.js:5196)\n    at toggleSearchDialog (telerikReportViewer.js:5190)\n    at Object.eval (telerikReportViewer.js:5165)\n    at Object.trigger (telerikReportViewer.js:1330)\n    at Object.trigger (telerikReportViewer.js:1317)\n    at eventFactory (telerikReportViewer.js:1299)\n    at Object.setSearchDialogVisible (telerikReportViewer.js:1777)\n    at Object.CommandSet.toggleSearchDialog [as exec] (telerikReportViewer.js:4033)\n    at HTMLAnchorElement.commandHandler (telerikReportViewer.js:4677)\n```\n\n----------------------------------------\n\nTITLE: Declaring jQuery in Angular Component\nDESCRIPTION: TypeScript code to declare the jQuery variable in the Angular component where the Telerik Web Report Designer will be initialized.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-web-report-designer-in-angular-application.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare var $: any;\n```\n\n----------------------------------------\n\nTITLE: Implementing IAssetsStorage Async Methods in CustomDefinitionStorage\nDESCRIPTION: Demonstrates the implementation of new asynchronous methods required after the R2 2022 Telerik Reporting upgrade. These methods cover folder and resource management operations like creating, retrieving, deleting, and renaming.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/custom-definition-storage-does-not-implement-interface-member.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic Task<ResourceFolderModel> CreateFolderAsync(CreateFolderModel model)\n{\n\t// Creates a folder using the provided model.\n\tthrow new NotImplementedException();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic Task<ResourceFolderModel> GetFolderAsync(string uri)\n{\n\t// Retrieves the existing folder model by the provided URI.\n\tthrow new NotImplementedException();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic Task DeleteFolderAsync(string uri)\n{\n\t// Deletes a folder by the provided URI.\n\tthrow new NotImplementedException();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic Task<IEnumerable<ResourceModelBase>> GetFolderContentsAsync(string uri)\n{\n\t// Gets all resources contained in the given URI.\n\tthrow new NotImplementedException();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic Task<ResourceFolderModel> RenameFolderAsync(RenameFolderModel model)\n{\n\t// Renames a folder located at model.OldUri.\n\tthrow new NotImplementedException();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic Task<byte[]> GetAsync(string resourceName)\n{\n\t// Finds a resource by its name and returns its contents as byte array.\n\tthrow new NotImplementedException();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic Task DeleteAsync(string uri)\n{\n\t// Deletes the given resource\n\tthrow new NotImplementedException();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic Task<ResourceFileModel> GetModelAsync(string uri)\n{\n\t// Returns the resource model at provider URI or null if not found.\n\tthrow new NotImplementedException();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic Task<ResourceFileModel> RenameAsync(RenameResourceModel model)\n{\n\t// Renames the given resource\n\tthrow new NotImplementedException();\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic Task<ResourceFileModel> SaveAsync(SaveResourceModel model, byte[] resource)\n{\n\t// Saves the raw data of a resource and returns its model.\n\tthrow new NotImplementedException();\n}\n```\n\n----------------------------------------\n\nTITLE: Using EntityDataSource with Custom Context Management in C#\nDESCRIPTION: Demonstrates how to use EntityDataSource with a custom-managed instance of ObjectContext/DbContext for scenarios where you have your own lifecycle management.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/maintaining-the-lifecycle-of-the-context-with-the-entitydatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nAdventureWorksEntities context = new AdventureWorksEntities();\nTelerik.Reporting.EntityDataSource entityDataSource = new Telerik.Reporting.EntityDataSource();\nentityDataSource.Context = context;\nentityDataSource.EntitySet = \"Products\";\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Runtime Execution Timeout in Web.config\nDESCRIPTION: Sets the execution timeout value in the web.config file to extend the maximum allowed time for operations to complete. The example sets the timeout to 7200 seconds (2 hours).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/timeout-expired-the-timeout-period-elapsed-prior-to-completion-of-the-operation-or-the-server-is-not-responding.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<httpRuntime executionTimeout=\"7200\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Settings in JSON\nDESCRIPTION: JSON structure for configuring email functionality in the report viewer, including sender, recipient, and message details.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/api-reference/options.md#2025-04-21_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"enabled\": false,\n  \"from\": \"string\",\n  \"to\": \"string\",\n  \"cc\": \"string\",\n  \"subject\": \"string\",\n  \"body\": \"string\",\n  \"format\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Binding OpenAccessDataSource to Custom Method with Parameters in C#\nDESCRIPTION: This C# snippet demonstrates how to bind the OpenAccessDataSource to a custom method 'GetProductsByCategory' and pass a parameter for the category name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/connecting-to-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nOpenAccessDataSource oaDataSource = new OpenAccessDataSource();\noaDataSource.ObjectContext = typeof(AdventureWorksEntities);\noaDataSource.ObjectContextMember = \"GetProductsByCategory\";\noaDataSource.Parameters.Add(new Telerik.Reporting.Parameter(\"categoryName\", \"Bikes\"));\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying DescendantSelector StyleRule in Telerik Reporting C#\nDESCRIPTION: This code snippet demonstrates how to create a DescendantSelector StyleRule programmatically using C#. It involves creating a StyleRule and DescendantSelector, defining selectors and types, applying formatting, and adding the rule to the StyleSheet. Dependencies include Telerik.Reporting.Drawing namespace. Key parameters include selector types and style properties such as BorderStyle and Font Name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/creating-style-rules.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n//Create StyleRule and DescendantSelector\nTelerik.Reporting.Drawing.StyleRule myStyleRule = new Telerik.Reporting.Drawing.StyleRule();    \nTelerik.Reporting.Drawing.DescendantSelector myDescendantSelector = new Telerik.Reporting.Drawing.DescendantSelector();\n//Define the Selectors and Types of the DescendantSelector\nmyDescendantSelector.Selectors.AddRange(\n\tnew Telerik.Reporting.Drawing.ISelector[] \n\t{ new Telerik.Reporting.Drawing.TypeSelector(typeof(Telerik.Reporting.ReportHeaderSection)), \n\t\tnew Telerik.Reporting.Drawing.TypeSelector(typeof(Telerik.Reporting.TextBox))\n\t});\n//Add the DescendantSelector to the StyleRule\nmyStyleRule.Selectors.AddRange(\n\tnew Telerik.Reporting.Drawing.ISelector[] \n\t{ \n\tmyDescendantSelector\n\t});\n//Apply Formatting\nmyStyleRule.Style.BorderStyle.Default = Telerik.Reporting.Drawing.BorderType.Ridge;\nmyStyleRule.Style.Color = System.Drawing.Color.Navy;\nmyStyleRule.Style.Font.Name = \"Arial\";\n//Add rule to Style Sheet\nthis.StyleSheet.AddRange(new Telerik.Reporting.Drawing.StyleRule[] {myStyleRule});\n```\n\n----------------------------------------\n\nTITLE: FormatKey JSON Entity Structure Example\nDESCRIPTION: Example of a FormatKey JSON entity that specifies HTML5 format with SVG rendering, enables caching, and includes document references for interactivity. This entity is used when requesting document generation through the Telerik Reporting REST Service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/formatkey.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"format\": \"HTML5\",\n\t\"deviceInfo\": { \"UseSVG\": true },\n\t\"useCache\": true,\n\t\"baseDocumentId\": \"xxxx\",\n\t\"actionId\": \"xxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Click Event to Clear Report Source in JavaScript\nDESCRIPTION: This JavaScript snippet sets up an event listener that responds to the click event on the 'buttonChangeReportSource' button. It retrieves the Telerik Report Viewer instance from the DOM and calls the clearReportSource() method, resetting the viewer's internal report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/clearreportsource().md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n\t$(\"#buttonChangeReportSource\").on(\"click\", function () {\n\t\tvar viewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n\t\tviewer.clearReportSource();\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Working Directory for Report Designer in XML\nDESCRIPTION: This XML snippet demonstrates how to set the default working directory for the Telerik Report Designer using the `DefaultWorkingDir` attribute within the `Telerik.ReportDesigner` configuration section. This specifies the initial directory the Report Designer uses when opening or saving files.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/configuration/report-designer-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Telerik.ReportDesigner DefaultWorkingDir=\"Examples\">\n</Telerik.ReportDesigner>\n```\n\n----------------------------------------\n\nTITLE: Custom ReportSource Resolver with Fallback Mechanism Implementation\nDESCRIPTION: Demonstrates how to implement an IReportSourceResolver with a fallback mechanism to handle multiple report source resolution strategies\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-report-source-resolver/how-to-implement-a-custom-report-source-resolver.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// Placeholder for CustomReportSourceResolverFallBack_Implementation\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scale Settings in HTML5 Report Viewer\nDESCRIPTION: Demonstrates how to get the scale factor and scale mode from a Telerik Report Viewer instance. The method returns an object containing scale and scaleMode properties that define the viewer's scaling configuration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/scale().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nvar scale = reportViewer.scale();\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Aggregate Function in Telerik Reporting Expression\nDESCRIPTION: This code snippet shows how to use the custom aggregate function 'TotalOvertimeHours' in a Telerik Reporting expression. It takes the week number and work time as parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/accumulate-expression-from-group-total-in-overall-total.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= TotalOvertimeHours(Fields.Week, Fields.WorkTime)\n```\n\n----------------------------------------\n\nTITLE: Using HasChildren Property in AttributeSelector\nDESCRIPTION: Example of using AttributeSelector to apply styles based on the HasChildren property value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/understanding-style-selectors.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nHasChildren = True\n```\n\n----------------------------------------\n\nTITLE: Single Select Editor XML Configuration\nDESCRIPTION: XML configuration for integrating the single select parameter editor into the ReportViewer control.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n</telerik:ReportViewer>\n\t....\n\t<ParameterEditors SingleSelectEditor=\"createSingleSelectEditor\"/>\n</telerik:ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Connection String in C#\nDESCRIPTION: This code snippet demonstrates how to format a connection string for an SQLite database in a Telerik Web Report Designer project. It specifies the data source, SQLite version, and failure behavior.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/integrate-sqlite-databases-telerik-web-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nData Source=northwind.db;Version=3;FailIfMissing=True;\n```\n\n----------------------------------------\n\nTITLE: Main App Component Implementation\nDESCRIPTION: React App component that renders the Report Viewer component\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-html5-viewer-in-react-js.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { Component } from 'react';\n\timport './App.css';\n\timport ReportViewer from './components/ReportViewer';\n\n\tclass App extends Component {\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\tWelcome to React App\n\t\t\t\t\t<ReportViewer />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\texport default App;\n```\n\n----------------------------------------\n\nTITLE: Series Value Expressions for Bubble Chart\nDESCRIPTION: Expressions for configuring X, Y, and Size values in a Bubble chart, filtering and aggregating data by year\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/scatter.md#2025-04-21_snippet_1\n\nLANGUAGE: expression\nCODE:\n```\nX: `=Sum(IIF(Fields.OrderDate.Year=2003, Fields.SubTotal, 0))/1000.0`\nY: `=Sum(IIF(Fields.OrderDate.Year=2004, Fields.SubTotal, 0))/1000.0`\nSize: `=Sum(IIF(Fields.OrderDate.Year=2003, Fields.SubTotal, 0)) - Sum(IIF(Fields.OrderDate.Year=2004, Fields.SubTotal, 0))`\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Sales Data by Product Category and State in Adventure Works Database\nDESCRIPTION: SQL query that retrieves sales data grouped by product subcategory and state from the Adventure Works database. The query joins multiple tables to extract product information, sales details, and location data, filtering for Australian bike sales in 2003-2004.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\tPS.Name AS ProductSubCategory,\n\tSP.Name + ', ' + CR.Name AS State,\n\tSOD.LineTotal as LineTotal\n\tFROM\n\n\tProduction.Product AS P\n\tINNER JOIN Production.ProductSubcategory AS PS ON P.ProductSubcategoryID = PS.ProductSubcategoryID\n\tINNER JOIN Production.ProductCategory AS PC ON PS.ProductCategoryID = PC.ProductCategoryID\n\tINNER JOIN Sales.SalesOrderDetail AS SOD ON P.ProductID = SOD.ProductID\n\tINNER JOIN Sales.SalesOrderHeader AS SOH ON SOD.SalesOrderID = SOH.SalesOrderID\n\tINNER JOIN Person.Address AS ADDR ON ADDR.AddressID = SOH.ShipToAddressID\n\tINNER JOIN Person.StateProvince AS SP ON SP.StateProvinceID = ADDR.StateProvinceID\n\tINNER JOIN Person.CountryRegion AS CR ON CR.CountryRegionCode = SP.CountryRegionCode\n\n\tWHERE\n\tCR.Name IN ('Australia')\n\tAND DATEPART(YEAR, SOH.OrderDate) IN (2003, 2004)\n\tAND PC.Name = 'Bikes'\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting Service\nDESCRIPTION: Sets up the ReportServiceConfiguration by specifying the host application ID and the path to report definitions. This registers the Telerik Reporting services with the application's dependency injection container.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-6-with-minimal-api.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nvar reportsPath = Path.Combine(builder.Environment.ContentRootPath, \"Reports\");\n\nbuilder.Services.AddTelerikReporting(\"ReportingNet\", reportsPath);\n```\n\n----------------------------------------\n\nTITLE: Handling Export Events in Desktop Viewers\nDESCRIPTION: Demonstrates how to handle the ExportEnd event in Windows Form or WPF viewers to modify PDF documents before display. The code shows event handler setup and checking for PDF extension.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/modify-exported-report-document-before-serving-it-to-the-viewer-client.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic ReportViewerFormOrWindow()\n{\n\tInitializeComponent();\n\tthis.reportViewer1.ExportEnd += ReportViewer1ExportEnd;\n}\n\nprivate void ReportViewer1ExportEnd(object sender, Telerik.ReportViewer.Common.ExportEndEventArgs args)\n{\n\tif(args.DocumentExtension.Equals(\"pdf\"))\n\t{\n\t\t//modify the rendered document in args.DocumentBytes \n\t}\n}\n```\n\nLANGUAGE: VB\nCODE:\n```\nPublic Sub New()\n\tInitializeComponent()\n\tAddHandler Me.reportViewer1.ExportEnd, AddressOf ReportViewer1ExportEnd\nEnd Sub\n\nPrivate Sub ReportViewer1ExportEnd(sender As Object, args As Telerik.ReportViewer.Common.ExportEndEventArgs)\n\tIf args.DocumentExtension.Equals(\"pdf\") Then\n\t\t'modify the rendered document in args.DocumentBytes\n\tEnd If\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Angular Component Implementation for Multiple Report Viewers\nDESCRIPTION: TypeScript component that manages multiple report viewers, handles viewer references, and implements load functionality for different reports. Includes necessary imports, component configuration, and report loading methods.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/angular-report-viewer-in-multiple-tabs.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatButtonModule } from '@angular/material/button';\nimport { TelerikReportViewerComponent, TelerikReportingModule } from '@progress/telerik-angular-report-viewer';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, MatTabsModule, MatButtonModule, TelerikReportingModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\n\nexport class AppComponent {\n  //@ts-ignore\n  @ViewChild('rptViewer1', { static: false }) rptViewer1: TelerikReportViewerComponent;\n  //@ts-ignore\n  @ViewChild('rptViewer2', { static: false }) rptViewer2: TelerikReportViewerComponent;\n\n  title = 'my-app';\n  selectedTab: number = 0;\n  reportServerUrl: string;\n  viewerContainerStyle: any;\n\n  constructor() {\n    this.reportServerUrl = 'https://demos.telerik.com/reporting/api/reports';\n    this.viewerContainerStyle = {\n      \"position\": 'relative',\n      \"width\": '75vw',\n      \"height\": '90vh',\n      ['font-family']: 'ms sans serif'\n    };\n  }\n\n  onLoad1Click() {\n\n    var reportSource = {\n      report: \"Report Catalog.trdx\",\n    };\n\n    if (this.rptViewer1) {\n      this.rptViewer1.setReportSource(reportSource);\n    }\n  }\n\n  onLoad2Click() {\n\n    var reportSource = {\n      report: \"Dashboard.trdx\",\n    };\n\n    if (this.rptViewer2) {\n      this.rptViewer2.setReportSource(reportSource);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Filter Rules Example in Telerik Reporting\nDESCRIPTION: This example demonstrates how to create a filter rule using the 'In' operator to filter products by category.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/filtering-data/filter-rules.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFields.ProductCategory In (\"Bikes\", \"Clothing\", \"Accessories\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportServiceConfiguration with Custom Resolver in C#\nDESCRIPTION: This snippet shows how to set up the ReportServiceConfiguration to use a custom ReportSourceResolver. It's typically used in the ReportsController to configure the reporting service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-display-reportbook-in-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconfigurationInstance = new ReportServiceConfiguration\n{\n    HostAppId = \"Html5App\",\n    Storage = new FileStorage(),\n\n    ReportSourceResolver = new MyReportSourceResolver()\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ObjectDataSource for .NET Core - JSON\nDESCRIPTION: This JSON code snippet shows how to configure assembly references for a .NET Core application using the appsettings.json file. It specifies that the CarObjects assembly should be referenced.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/tools/objectdatasource-wizard.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"assemblyReferences\": [\n\t\t{\n\t\t\t\"name\": \"CarObjects\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Document Map to Address ARIA Role Violations\nDESCRIPTION: Sets the documentMapVisible option to false to hide the Document Map element. This helps resolve the 'Certain ARIA roles must contain particular children' violation when the Document Map has no items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-fix-axe-errors-for-html5-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n                .telerik_ReportViewer({\n                          documentMapVisible: false\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportService in ASP.NET Projects - CSharp\nDESCRIPTION: This snippet demonstrates how to set up the ReportServiceConfiguration in ASP.NET projects by defining the ReportsController class. The configuration sets the report resolver and a custom file storage folder.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-registering-the-viewer-with-the-service.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class ReportsController : ReportsControllerBase\n{\n\tstatic ReportServiceConfiguration configurationInstance;\n\n\tstatic ReportsController()\n\t{\n\t\tvar appPath = HttpContext.Current.Server.MapPath(\"~/\");\n\t\tvar reportsPath = Path.Combine(appPath, \"Reports\");\n\t\t\n\t\tvar resolver = new ReportFileResolver(reportsPath)\n\t\t\t.AddFallbackResolver(new ReportTypeResolver());\n\n\t//Setup the ReportServiceConfiguration\n\t\tconfigurationInstance = new ReportServiceConfiguration\n\t\t{\n\t\t\tHostAppId = \"Html5App\",\n\t\t\tStorage = new FileStorage(\"C:\\MyFolder\"),\n\t\t\tReportResolver = resolver,\n\t\t};\n\t}\n\n\tpublic ReportsController()\n\t{\n\t\tthis.ReportServiceConfiguration = configurationInstance;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: WPF ReportViewer Error Stack Trace\nDESCRIPTION: Stack trace showing the NullReferenceException thrown when unloading the WPF ReportViewer control, originating from DetachModelEventHandlers method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/nullreferenceexception-object-reference-not-set-to-an-instance-of-an-object.-when-you-load-and-unload-the-wpf-reportviewer-control-from-visual-tree.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nObject reference not set to an instance of an object.\n   at Telerik.ReportViewer.Wpf.ReportViewer.DetachModelEventHandlers()\n   at Telerik.ReportViewer.Wpf.ReportViewer.OnUnloaded(Object sender, RoutedEventArgs e)\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs e)\n   at System.Windows.BroadcastEventHelper.BroadcastEvent(DependencyObject root, RoutedEvent routedEvent)\n   at System.Windows.BroadcastEventHelper.BroadcastUnloadedEvent(Object root)\n   at MS.Internal.LoadedOrUnloadedOperation.DoWork()\n   at System.Windows.Media.MediaContext.FireLoadedPendingCallbacks()\n   at System.Windows.Media.MediaContext.FireInvokeOnRenderCallbacks()\n   at System.Windows.Media.MediaContext.RenderMessageHandlerCore(Object resizedCompositionTarget)\n   at System.Windows.Media.MediaContext.RenderMessageHandler(Object resizedCompositionTarget)\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Windows.Threading.DispatcherOperation.Invoke()\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\n   at System.Windows.Application.RunDispatcher(Object ignore)\n   at System.Windows.Application.RunInternal(Window window)\n   at System.Windows.Application.Run(Window window)\n   at System.Windows.Application.Run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting XML Output Format for Azure\nDESCRIPTION: XML configuration to force PNG output format for rendering extensions in Azure environments, addressing metafile rendering limitations in desktop viewers\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/preview-reports-using-rest-service-deployed-in-azure.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\\n\\t<extensions>\\n\\t<render>\\n\\t\\t<extension name=\"IMAGEInteractive\">\\n\\t\\t<parameters>\\n\\t\\t\\t<parameter name=\"OutputFormat\" value=\"PNG\"/>\\n\\t\\t</parameters>\\n\\t\\t</extension>\\n\\t\\t<extension name=\"IMAGE\">\\n\\t\\t<parameters>\\n\\t\\t\\t<parameter name=\"OutputFormat\" value=\"PNG\"/>\\n\\t\\t</parameters>\\n\\t\\t</extension>\\n\\t\\t<extension name=\"IMAGEPrintPreview\">\\n\\t\\t<parameters>\\n\\t\\t\\t<parameter name=\"OutputFormat\" value=\"PNG\"/>\\n\\t\\t</parameters>\\n\\t\\t</extension>\\n\\t\\t<extension name=\"IMAGEPrint\">\\n\\t\\t<parameters>\\n\\t\\t\\t<parameter name=\"OutputFormat\" value=\"PNG\"/>\\n\\t\\t</parameters>\\n\\t\\t</extension>\\n\\t</render>\\n\\t</extensions>\\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Registering Web API Routes with Telerik Reporting\nDESCRIPTION: This C# snippet demonstrates how to register REST API routes in a web application using Telerik Reporting. The routes defined adhere to ASP.NET Web API conventions and are customizable using ReportsControllerConfiguration.RegisterRoutes. Change 'api' to unique route segments like 'reportingapi' to prevent conflicts with other APIs. This requires Telerik Reporting R3 2017 SP1 or later.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-change-reporting-rest-web-api-routes-registered-by-default.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconfig.Routes.MapHttpRoute(\n    name: \"Resources\",\n    routeTemplate: \"api/{controller}/resources/{folder}/{resourceName}\",\n    defaults: new { action = \"Resources\" });\n \nconfig.Routes.MapHttpRoute(\n    name: \"Clients\",\n    routeTemplate: \"api/{controller}/clients/{clientID}\",\n    defaults: new { action = \"Clients\", clientID = RouteParameter.Optional });\n \nconfig.Routes.MapHttpRoute(\n    name: \"Instances\",\n    routeTemplate: \"api/{controller}/clients/{clientID}/instances/{instanceID}\",\n    defaults: new { action = \"Instances\", instanceID = RouteParameter.Optional });\n \nconfig.Routes.MapHttpRoute(\n    name: \"DocumentResources\",\n    routeTemplate: \"api/{controller}/clients/{clientID}/instances/{instanceID}/documents/{documentID}/resources/{resourceID}\",\n    defaults: new { action = \"DocumentResources\" });\n \nconfig.Routes.MapHttpRoute(\n    name: \"DocumentActions\",\n    routeTemplate: \"api/{controller}/clients/{clientID}/instances/{instanceID}/documents/{documentID}/actions/{actionID}\",\n    defaults: new { action = \"DocumentActions\" });\n \nconfig.Routes.MapHttpRoute(\n    name: \"DocumentPages\",\n    routeTemplate: \"api/{controller}/clients/{clientID}/instances/{instanceID}/documents/{documentID}/pages/{pageNumber}\",\n    defaults: new { action = \"DocumentPages\" });\n \nconfig.Routes.MapHttpRoute(\n    name: \"DocumentInfo\",\n    routeTemplate: \"api/{controller}/clients/{clientID}/instances/{instanceID}/documents/{documentID}/info\",\n    defaults: new { action = \"DocumentInfo\" });\n \nconfig.Routes.MapHttpRoute(\n    name: \"Documents\",\n    routeTemplate: \"api/{controller}/clients/{clientID}/instances/{instanceID}/documents/{documentID}\",\n    defaults: new { action = \"Documents\", documentID = RouteParameter.Optional });\n \nconfig.Routes.MapHttpRoute(\n    name: \"Parameters\",\n    routeTemplate: \"api/{controller}/clients/{clientID}/parameters\",\n    defaults: new { action = \"Parameters\" });\n \nconfig.Routes.MapHttpRoute(\n    name: \"ApiDefault\",\n    routeTemplate: \"api/{controller}/{action}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportServiceConfiguration in .NET Framework\nDESCRIPTION: Demonstrates how to set up the custom ReportSourceResolver in the ReportsControllerBase class for .NET Framework applications\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-report-source-resolver/how-to-implement-a-custom-report-source-resolver.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Placeholder for CustomReportResolver_ReportsController_Implementation\n```\n\n----------------------------------------\n\nTITLE: Binding CubeDataSource Parameter to Report Parameter in VB.NET\nDESCRIPTION: Demonstrates how to bind a CubeDataSourceParameter to a ReportParameter using an expression in VB.NET, allowing the use of the default parameter user interface in the Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/specifying-query-parameters-with-the-cubedatasource-component.md#2025-04-21_snippet_7\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim cubeDataSource As New CubeDataSource()\ncubeDataSource.ConnectionString = \"Data Source=localhost;\"\ncubeDataSource.Cube = \"Adventure Works\"\ncubeDataSource.SelectCommand = \"select non empty { [Measures].[Sales Amount] } on columns, non empty { [Product].[Category].[Category] * [Product].[Subcategory].[Subcategory] } on rows from [Adventure Works] where StrToMember(@Year)\"\nDim yearParameter As New CubeDataSourceParameter()\nyearParameter.Name = \"@Year\"\nyearParameter.Value = \"= Parameters.Year.Value\"\ncubeDataSource.Parameters.Add(yearParameter)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Text Fields Expression in Telerik Reporting\nDESCRIPTION: Expression that combines First Name and Last Name fields with a space separator to create a Full Name calculated field.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/calculated-fields.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n=Fields.CustFirstName + \" \" + Fields.CustLastName\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportService in ASP.NET Core Projects - CSharp\nDESCRIPTION: This snippet explains how to configure the ReportServiceConfiguration in ASP.NET Core projects, focusing on registering services. It details the setup for both default and specific configuration loading.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-registering-the-viewer-with-the-service.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n// Configure dependencies for ReportsController.\nbuilder.Services.TryAddSingleton<IReportServiceConfiguration>(sp =>\n    new ReportServiceConfiguration\n    {\n        // The default ReportingEngineConfiguration will be initialized from appsettings.json or appsettings.{EnvironmentName}.json:\n        ReportingEngineConfiguration = sp.GetService<IConfiguration>(),\n        // In case the ReportingEngineConfiguration needs to be loaded from a specific configuration file, use the approach below:\n        //ReportingEngineConfiguration = ResolveSpecificReportingConfiguration(sp.GetService<IWebHostEnvironment>()),\n        HostAppId = \"Html5App\",\n        Storage = new FileStorage(\"C:\\MyFolder\"),\n        ReportSourceResolver = new UriReportSourceResolver(System.IO.Path.Combine(sp.GetService<IWebHostEnvironment>().ContentRootPath, \"Reports\"))\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding MVC Controllers with NewtonsoftJson in ASP.NET Core for Reporting Service\nDESCRIPTION: Configures the ASP.NET Core application to use controllers with Newtonsoft.Json serialization, which is required for the Telerik Reporting REST service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nbuilder.Services.AddControllers().AddNewtonsoftJson();\n```\n\n----------------------------------------\n\nTITLE: Using IsLeapYear Function in Telerik Reporting\nDESCRIPTION: The `IsLeapYear` function returns an indication of whether the specified year is a leap year.  It takes a year as input and returns a boolean value (True or False).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_4\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=IsLeapYear(2020)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Report Parameter Selection UI in Blazor\nDESCRIPTION: HTML markup for a custom dropdown selector to choose invoice IDs outside of the standard report viewer. This element allows users to select from predefined invoice options and triggers the changeId event handler when a selection is made.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-dynamically-select-and-filter-data-in-blazor.md#2025-04-21_snippet_0\n\nLANGUAGE: Razor\nCODE:\n```\n<div id=\"invoiceIdSelector\">\n    <label for=\"invoiceId\">Invoices</label>\n    <select name=\"invoiceId\" title=\"Select the Invoice ID\"  @onchange=\"(args) => changeId(args)\">\n        <option value=\"SO51081\" selected=\"selected\">SO51081</option>\n        <option value=\"SO51082\">SO51082</option>\n        <option value=\"SO51083\">SO51083</option>\n    </select>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Newtonsoft.Json for Telerik UI for ASP.NET Core\nDESCRIPTION: This code adds Newtonsoft.Json serialization to Razor Pages configuration with the DefaultContractResolver to ensure compatibility between Telerik Reporting and Telerik UI for ASP.NET Core components.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reporting-and-telerik-ui-for-asp-net-core.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nservices.AddRazorPages().AddNewtonsoftJson(options => options.SerializerSettings.ContractResolver = new Newtonsoft.Json.Serialization.DefaultContractResolver());\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Restrictions Example\nDESCRIPTION: This code snippet demonstrates how to use schema restrictions to load the schema of a specific table (ProductCategory) from the Microsoft SQL Server AdventureWorks sample database. The `null` keyword is used to indicate null values for specific arguments. Schema restrictions are case-sensitive, empty arguments are respected and work only with .Net 6+\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/tools/data-source-wizards/query-designer-in-the-standalone-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"null,Production,ProductCategory\"\n```\n\n----------------------------------------\n\nTITLE: Setting SubReport ReportSource Programmatically in VB.NET\nDESCRIPTION: This code snippet demonstrates how to programmatically set the report source of a SubReport item using VB.NET. It creates an InstanceReportSource, sets the ReportDocument, and adds a parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/subreport.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim instanceReportSource As New InstanceReportSource()\ninstanceReportSource.ReportDocument = New Telerik.Reporting.Report()\ninstanceReportSource.Parameters.Add(\"Parameter1\", \"ParameterValue\")\n\nDim subReport1 As New Telerik.Reporting.SubReport()\nsubReport1.ReportSource = instanceReportSource\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom JSON Output Formatter in ASP.NET Core\nDESCRIPTION: A custom output formatter that dynamically selects between System.Text.Json and Newtonsoft.Json based on endpoint metadata, allowing flexible JSON serialization strategies\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-two-json-serializers-in-same-asp-net-core-project.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\ninternal class MySuperJsonOutputFormatter : TextOutputFormatter\n{\n\tpublic MySuperJsonOutputFormatter()\n\t{\n\t\tSupportedEncodings.Add(Encoding.UTF8);\n\t\tSupportedEncodings.Add(Encoding.Unicode);\n\t\tSupportedMediaTypes.Add(\"application/json\");\n\t}\n\n\tpublic override async Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\n\t{\n\t\tvar httpContext = context.HttpContext;\n\t\tvar mvcOpt = httpContext.RequestServices.GetRequiredService<IOptions<MvcOptions>>().Value;\n\t\tvar formatters = mvcOpt.OutputFormatters;\n\t\tTextOutputFormatter formatter = null;\n\n\t\tEndpoint endpoint = httpContext.GetEndpoint();\n\t\tif (endpoint.Metadata.GetMetadata<UseSystemTextJsonAttribute>() != null)\n\t\t{\n\t\t\tformatter = formatters.OfType<SystemTextJsonOutputFormatter>().FirstOrDefault();\n\t\t}\n\t\telse if (endpoint.Metadata.GetMetadata<UseNewtonsoftJsonAttribute>() != null)\n\t\t{\n\t\t\tformatter = (NewtonsoftJsonOutputFormatter)(formatters\n\t\t\t\t.Where(f => typeof(NewtonsoftJsonOutputFormatter) == f.GetType())\n\t\t\t\t.FirstOrDefault());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new Exception(\"This formatter is only used for System.Text.Json InputFormatter or NewtonsoftJson InputFormatter\");\n\t\t}\n\n\t\tawait formatter.WriteResponseBodyAsync(context, selectedEncoding);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Version Guidance\nDESCRIPTION: A markdown table showing the affected version and recommended update path for addressing the command injection vulnerability.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/command-injection-cve-2024-7840.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Current Version | Guidance |\n|-----------------|----------|\n| 2024 Q3 (18.2.24.806) or earlier | Update to 2024 Q3 (18.2.24.924) ([update instructions](({%slug telerikreporting/upgrade/overview%}))) |\n```\n\n----------------------------------------\n\nTITLE: Using Uri Function in Telerik Reporting Expressions\nDESCRIPTION: Creates a System.Uri instance from a string. It can optionally specify the URI kind (absolute, relative, or relative/absolute).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/utility-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n=Uri(\"c:\\temp\\myFile.json\", \"absolute\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings with Provider in JSON Configuration\nDESCRIPTION: Example of adding a SQL connection string with an explicit provider name to appSettings.json. This format allows specifying a custom data provider.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-6-with-minimal-api.md#2025-04-21_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"ConnectionStrings\": {\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": {\n\t\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Data Source with Parameter\nDESCRIPTION: This SQL query retrieves product data from several tables, filtering the results based on the ProductSubcategoryID parameter.  It joins Production.Product with Production.ProductSubcategory and filters by Production.Product.ProductSubcategoryID. The @ProductSubcategoryID parameter is used to dynamically filter the result set.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/how-to-cascade-parameters-with-applied-filtering-on-data-source-level.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\tProduction.Product.ProductNumber, Production.Product.Name AS ProductName, \n\t\tProduction.ProductSubcategory.Name AS SubcategoryName\n\tFROM\n\t\tProduction.Product \n\t\tINNER JOIN Production.ProductSubcategory \n\t\t\tON Production.Product.ProductSubcategoryID = Production.ProductSubcategory.ProductSubcategoryID\n\tWHERE\n\t\t(Production.Product.ProductSubcategoryID = @ProductSubcategoryID)\n```\n\n----------------------------------------\n\nTITLE: Structuring Custom HTML Template for HTML5 Report Viewer\nDESCRIPTION: This HTML snippet shows the structure of a custom template file for the HTML5 Report Viewer. It includes a template element with an ID that contains the viewer's HTML structure.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/styling-and-appearance/providing-custom-templates.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<title>Telerik HTML5 Report Viewer Templates</title>\n\t</head>\n\t<body>\n\t\t<template id=\"trv-report-viewer\">\n\t\t\t<div class=\"trv-report-viewer\" >\n\t\t\t...\n\t\t\t</div>\n\t\t</template>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Report Source Declaratively in WPF Report Viewer\nDESCRIPTION: This code snippet shows how to set the ReportSource for the WPF Report Viewer declaratively in XAML. It illustrates usage with a dedicated type report source, providing a template to specify report parameters directly in the user interface.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add--manually-report-viewer-to-a-wpf-.net-framework-project.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<telerik:ReportViewer x:Name=\"ReportViewer\" VerticalAlignment=\"Stretch\" HorizontalAlignment=\"Stretch\" ReportSource=\"{StaticResource MyReportSource}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining WKT Polygons for Map Report\nDESCRIPTION: This snippet defines custom polygon shapes using Well-known Text (WKT) for inclusion in a Telerik Reporting map report. It shows the explicit representation of states using WKT formatted text, facilitating the creation of map items. The data includes state names alongside their corresponding polygons. The CSV data should follow a semicolon delimiter, and the CSV requires headers for correct parsing.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/map-create-with-custom-polygons.md#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nState;WKT\n\tNorth Dakota;POLYGON((-104.064281 49.004828,-104.064281 45.945270,-96.557949 45.945270,-96.796902 46.641745,-96.763943 46.935113,-96.840847 47.006332,-96.879299 47.620830,-97.151211 48.176931,-97.105495 48.689066,-97.231838 49.004828,-104.064281 49.004828))\n\tWyoming;POLYGON((-111.064309 45.005438,-111.064309 41.006683,-104.066018 41.006683,-104.066018 45.005438,-111.064309 45.005438))\n\tNew Mexico;POLYGON((-109.065510 37.006785,-109.051777 31.332360,-108.208414 31.333407,-108.208493 31.783783,-106.528509 31.783783,-106.645607 31.896072,-106.614021 31.921719,-106.621574 31.971244,-106.638054 31.982311,-106.618623 32.000556,-103.064750 32.000519,-103.041428 36.500404,-103.002656 36.500529,-103.002220 36.999981,-109.065510 37.006785))\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeReferences in JSON Configuration for Telerik Reporting\nDESCRIPTION: JSON configuration that adds the UserReportBook type to the trusted type references list in the application's JSON configuration file (appsettings.json). This allows the Telerik Reporting engine to load the type without security exceptions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resolve-userreportbook-loading-exception.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"telerikReporting\": {\n    \"typeReferences\": [\n        {\n            \"typeName\": \"Telerik.Reporting.UserReportBook\",\n            \"assemblyName\": \"Telerik.Reporting\",\n            \"publicKeyToken\": \"a9d7983dfcc261be\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Date Function in Telerik Reporting\nDESCRIPTION: The `Date` function returns a DateTime object for a specified year, month, and day.  The returned value is a DateTime instance. To change the default date/time format, use the Format Builder or the Text Function `Format` or `FormatWithCulture`. \nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"= Date(2024, 7, 29)\"\n```\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=Date(2023, 5, 19)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Optional CsvDataSource Properties in VB.NET\nDESCRIPTION: VB.NET implementation of optional settings configuration including headers flag, escape format, and quote character.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/csvdatasource-component/connecting-the-csvdatasource-component-to-a-csv-source.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\ncsvDataSource.HasHeaders = True\ncsvDataSource.EscapeFormat = CsvEscapeFormat.QuotesMixed\ncsvDataSource.Quote = \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter UI HTML Implementation\nDESCRIPTION: HTML markup for creating a custom dropdown selector for invoice parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"invoiceIdSelector\" runat=\"server\">\n\t<label for=\"invoiceId\">Invoices</label>\n\t<select id=\"invoiceId\" title=\"Select the Invoice ID\" runat=\"server\">\n\t\t<option value=\"SO51081\">SO51081</option>\n\t\t<option value=\"SO51082\" selected=\"selected\">SO51082</option>\n\t\t<option value=\"SO51083\">SO51083</option>\n\t</select>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration Update for React StrictMode\nDESCRIPTION: This code snippet shows how to update the `next.config.js` file to disable React's `StrictMode`.  `StrictMode` can sometimes cause issues with certain components, and disabling it might be necessary for the React Report Viewer to function correctly in a Next.js environment. This configuration ensures that `reactStrictMode` is set to `false`.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/window-is-not-defined-nextjs.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n    reactStrictMode: false\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Angular Report Viewer in HTML\nDESCRIPTION: Sets up the reporting viewer in an Angular component using HTML. The component attributes configure the report source, service URL, and view mode. This setup assumes the viewer component is imported from Telerik's package.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/customizing/toolbar-icons.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Report Catalog.trdx',\n\t\tparameters: {}\n\t}\"\n\tserviceUrl=\"https://demos.telerik.com/reporting/api/reports\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Creating Report Entity Model in C#\nDESCRIPTION: Defines the Report entity model with properties for storing report metadata and content. Uses data annotations to configure database column mappings and constraints.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/implement-database-definition-storage-efcore.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class Report\n{\n\t[Column(\"Id\")]\n\t[Required]\n\t[DatabaseGenerated(DatabaseGeneratedOption.Identity)]\n\t[Key]\n\tpublic string Id { get; set; }\n\n\t[Column(\"Name\")]\n\t[Required]\n\tpublic string Name { get; set; }\n\n\t[Column(\"Bytes\")]\n\t[Required]\n\tpublic byte[] Bytes { get; set; }\n\n\t[Column(\"CreatedOn\")]\n\t[Required]\n\tpublic DateTime CreatedOn { get; set; }\n\n\t[Column(\"ModifiedOn\")]\n\tpublic DateTime ModifiedOn { get; set; }\n\n\t[Column(\"Size\")]\n\tpublic float Size { get; set; }\n\n\t[Column(\"ParentUri\")]\n\tpublic string ParentUri { get; set; }\n\n\t[Column(\"Uri\")]\n\tpublic string Uri { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request for Document Page in Telerik Reporting REST API\nDESCRIPTION: The endpoint pattern for retrieving a specific page from a document. It requires client ID, instance ID, document ID, and page number as path parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document-page.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/reports/clients/{clientId}/instances/{instanceId}/documents/{documentId}/pages/{pageNumber}\n```\n\n----------------------------------------\n\nTITLE: Adding a Hyperlink Action Programmatically - VB\nDESCRIPTION: This snippet illustrates the procedure for programmatically adding a hyperlink action to a report item using VB. The code allows for dynamic URL specification via expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/hyperlink-action.md#2025-04-21_snippet_1\n\nLANGUAGE: VB\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\ActionSnippets.vb region=AddNewNavigateToUrlSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Creating StyleSelector StyleRule in C#\nDESCRIPTION: Creates a StyleSelector style rule programmatically that can be applied to any report item by setting its StyleName property. Shows creating a StyleRule with a named StyleSelector and formatting properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/creating-style-rules.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n//Create a StyleRule\nTelerik.Reporting.Drawing.StyleRule myStyleRule = new Telerik.Reporting.Drawing.StyleRule();     \n//Add a StyleSelector\nmyStyleRule.Selectors.AddRange(new Telerik.Reporting.Drawing.ISelector[] {new Telerik.Reporting.Drawing.StyleSelector(\"CaptionStyle\")});\n//Add formatting\nmyStyleRule.Style.BackgroundColor = System.Drawing.Color.Linen;\nmyStyleRule.Style.Color = System.Drawing.Color.DodgerBlue;\nmyStyleRule.Style.Font.Name = \"Courier New\";\n//Add rule to Style Sheet\nthis.StyleSheet.AddRange(new Telerik.Reporting.Drawing.StyleRule[] {myStyleRule});\n```\n\n----------------------------------------\n\nTITLE: Applying CORS Policy in ASP.NET Core Application\nDESCRIPTION: C# code to activate the CORS policy in the application configuration part of Program.cs. This enables the policy for the entire application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-6-with-minimal-api.md#2025-04-21_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\napp.UseCors(\"ReportingRestPolicy\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom User Function to Parse HTML for HtmlTextBox in C#\nDESCRIPTION: This C# code creates a custom User Function that uses the HtmlFormatProvider from Telerik UI for WinForms to convert HTML markup into a format that can be parsed by the HtmlTextBox. The function configures export settings to ensure compatibility with HtmlTextBox parsing capabilities.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/remove-unsupported-tags-from-htmltextbox.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nusing Telerik.WinForms.Documents.FormatProviders.Html;\n\nnamespace HtmlParser\n{\n    public static class ParseHtml\n    {\n        public static string HtmlAdapt(string markup)\n        {\n            HtmlExportSettings exportSettings = new HtmlExportSettings();\n            exportSettings.ImageExportMode = ImageExportMode.None;\n            exportSettings.StylesExportMode = StylesExportMode.Inline;\n            exportSettings.DocumentExportLevel = DocumentExportLevel.Fragment;\n            exportSettings.StyleRepositoryExportMode = StyleRepositoryExportMode.DontExportStyles;\n\n            HtmlFormatProvider provider = new HtmlFormatProvider();\n            provider.ExportSettings = exportSettings;\n            string outputHtml = provider.Export(provider.Import(markup));\n\n            return outputHtml;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add New Graph Column Chart Type in VB.NET\nDESCRIPTION: This VB.NET code snippet illustrates how to programmatically add a new column chart type to a Telerik Reporting Graph item.  It provides an alternative approach to designing charts within the Report Designer. The Telerik Reporting library is required for this snippet to function correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/graph-create-programmatically.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports Telerik.Reporting\nImports Telerik.Reporting.Charting\n\nNamespace Telerik.Reporting\n\tPublic Class GraphSnippets\n\t\tPublic Sub AddNewGraphColumnChartType(ByVal graph As Graph)\n\t\t\t' Configure the new Chart.\n\t\t\tDim newChart As New Chart()\n\t\t\tnewChart.Name = \"Chart1\"\n\t\t\tnewChart.Width = New Telerik.Reporting.Drawing.Unit(5, Telerik.Reporting.Drawing.UnitType.Inch)\n\t\t\tnewChart.Height = New Telerik.Reporting.Drawing.Unit(3, Telerik.Reporting.Drawing.UnitType.Inch)\n\n\t\t\t' Add the Chart to the Graph report item.\n\t\t\tgraph.Graphs.Add(newChart)\n\n\t\t\t' Configure the Chart's CoordinateSystem.\n\t\t\tDim cartesianCoordinateSystem As New CartesianCoordinateSystem()\n\t\t\tcartesianCoordinateSystem.Name = \"cartesianCoordinateSystem1\"\n\n\t\t\t' Add the CoordinateSystem to the Chart.\n\t\t\tnewChart.CoordinateSystems.Add(cartesianCoordinateSystem)\n\n\t\t\t' Configure the Chart's X-Axis.\n\t\t\tDim xAxis As New CategoryScale()\n\t\t\txAxis.Name = \"xAxis1\"\n\t\t\tcartesianCoordinateSystem.XAxis = xAxis\n\n\t\t\t' Configure the Chart's Y-Axis.\n\t\t\tDim yAxis As New LinearScale()\n\t\t\tyAxis.Name = \"yAxis1\"\n\t\t\tcartesianCoordinateSystem.YAxis = yAxis\n\n\t\t\t' Configure the Column Series.\n\t\t\tDim columnSeries As New ColumnSeries()\n\t\t\tcolumnSeries.Name = \"columnSeries1\"\n\n\t\t\t' Set the CategoryGroup and ValueMember for the Series.\n\t\t\tcolumnSeries.CategoryGroup = \"=Fields.Category\"\n\t\t\tcolumnSeries.Y = \"=Fields.Value\"\n\n\t\t\t' Add the Series to the Chart.\n\t\t\tnewChart.Series.Add(columnSeries)\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n```\n\n----------------------------------------\n\nTITLE: XAML Binding for WPF Report Viewer in XML\nDESCRIPTION: This snippet demonstrates how to bind the ViewModel to the WPF Report Viewer in XAML. It sets the DataContext for the window and establishes a command to change the report displayed in the viewer through data binding.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/using-the-wpf-report-viewer-in-an-mvvm-scenario.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Window.DataContext>\n    <vm:ViewModel />\n</Window.DataContext>\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"50\" />\n        <RowDefinition Height=\"*\" />\n    </Grid.RowDefinitions>\n    <Button x:Name=\"ChangeReportButton\" Grid.Row=\"0\" Height=\"30\" Width=\"100\" Command=\"{Binding ThisCommand}\" Content=\"Change Report\"  >\n    </Button>\n    <tr:ReportViewer Grid.Row=\"1\" x:Name=\"ReportViewer1\" HorizontalAlignment=\"Stretch\" ReportSource=\"{Binding MyReportSource}\" >\n    </tr:ReportViewer>\n</Grid>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Blazor Report Viewer Source\nDESCRIPTION: Example of setting up a ReportSource for the Native Blazor Report Viewer using ReportSourceOptions model with parameters in code block.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_6\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer\n\t...\n\t@bind-ReportSource=\"@ReportSource\"\n\t...>\n</ReportViewer>\n\n@code {\n\t...\n\tpublic ReportSourceOptions ReportSource { get; set; } = \n\t\t\t\tnew ReportSourceOptions(\n\t\t\t\t\t\t\"Product Line Sales.trdp\",\n\t\t\t\t\t\t//or \"Telerik.Reporting.Examples.CSharp.ProductLineSales, CSharp.ReportLibrary\",\n\t\t\t\t\t\tnew Dictionary<string, object>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t{ \"ProductCategory\", \"Clothing\" },\n\t\t\t\t\t\t\t\t{ \"ProductSubcategory\", new [] { \"Caps\", \"Gloves\" } }\n\t\t\t\t\t\t\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stored Procedure with Cursor Variables in SQL\nDESCRIPTION: This SQL snippet demonstrates how to configure a stored procedure containing cursor variables by turning off FMTONLY in a seemingly never executed statement. This ensures the schema can be read by the Data Explorer during the execution of the SQL query by the SqlDataSource Wizard while skipping the check during runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-temporary-tables-in-stored-procedure.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nBEGIN\n        SET NOCOUNT ON;\n         IF 1=0 BEGIN\n           SET FMTONLY OFF\n     END\n    DECLARE @SQL NVARCHAR(MAX)\n    DECLARE @Next NVARCHAR(MAX)\n    DECLARE db_cursor CURSOR FOR SELECT  DISTINCT Gender From HumanResources.Employee\n        . . .\n \nEND\nGO\n```\n\n----------------------------------------\n\nTITLE: SVC File Configuration for Custom Report Service\nDESCRIPTION: Configuration of the .svc file to reference a custom ReportService implementation, required when hosting the service in IIS.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-implement-and-use-custom-ireportresolver.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<%@ServiceHost Service=\"CSharp.SilverlightDemo.Web.CustomReportService, CSharp.SilverlightDemo.Web\" %>\n```\n\n----------------------------------------\n\nTITLE: Implementing AddInSet Method in CacheStorage\nDESCRIPTION: This code snippet shows the implementation of the AddInSet method in the CacheStorage class. It handles adding a value to a set stored in the cache, with error handling for null deserialization.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-in-set-null-reference-exception.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic void AddInSet(string key, string value)\n{\n\tusing (this.AcquireSetLock(key))\n\t{\n\t\tvar raw = this.GetBytes(key);\n\t\tvar set = null == raw ? new HashSet<string>() : SerializationUtils.Deserialize<HashSet<string>>(raw);\n\t\tif (set == null)\n\t\t{\n\t\t\t// Not localizable by design\n\t\t\tconst string error = \"Incorrect value (null) deserialized. Make sure you are using CacheStorage inside single-instance application deployment only.\";\n\t\n\t\t\tSystem.Diagnostics.Trace.WriteLine(error);\n\t\t\tthrow new ApplicationException(error);\n\t\t}\n\t\tset.Add(value);\n\t\tthis.SetBytes(key, SerializationUtils.Serialize(set));\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Scripts\nDESCRIPTION: Adds deferred initialization statement for the Report Viewer when using deferred loading.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/manual-setup.md#2025-04-21_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:DeferredScripts runat=\"server\"></telerik:DeferredScripts>\n```\n\n----------------------------------------\n\nTITLE: Configuring ObjectDataSource Parameter in C#\nDESCRIPTION: Code showing how to properly configure an ObjectDataSource parameter to accept MultiValue parameters by using Object[] type instead of List<type>.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/object-must-implement-iconvertible.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnew Telerik.Reporting.ObjectDataSourceParameter(\"UserNames\", typeof(object[]), \"= Parameters.UserNames.Value\")\n```\n\n----------------------------------------\n\nTITLE: Setting SqlDataSource Connection String in C#\nDESCRIPTION: Demonstrates how to set the ProviderName and ConnectionString properties of a SqlDataSource component in C#.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/connecting-the-sqldatasource-component-to-a-data-source.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nsqlDataSource1.ProviderName = \"System.Data.SqlClient\";\nsqlDataSource1.ConnectionString = \"Data Source=.\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True\";\n```\n\n----------------------------------------\n\nTITLE: Required Libraries for Remote Reporting Services\nDESCRIPTION: Essential .NET assemblies needed to connect desktop report viewers to remote reporting services, including client HTTP libraries and JSON serialization support\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/requirements-for-desktop-viewers-using-remote-report-sources.md#2025-04-21_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\nTelerik.Reporting.Services.HttpClient.dll\n```\n\nLANGUAGE: .NET\nCODE:\n```\nSystem.Net.Http.Formatting.dll\n```\n\nLANGUAGE: .NET\nCODE:\n```\nSystem.Net.Http.dll\n```\n\nLANGUAGE: .NET\nCODE:\n```\nNewtonsoft.Json.dll\n```\n\n----------------------------------------\n\nTITLE: Report Styling Properties Documentation\nDESCRIPTION: Lists and describes the main styling properties available in Telerik Reports including StyleSheet for CSS-like styling, ExternalStyleSheets for importing styles, UnitOfMeasure for default measurements, and SnapGridSize for ruler control.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/report-item/properties.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `StyleSheet` - Enables you to create custom styles through a built-in styling model that is similar to CSS. You can assign these styles by using CSS selectors such as `Type`, `Attribute`, `Style`, and `Descendent`.\n\n* `ExternalStyleSheets` - Imports StyleSheets previously created and stored in XML files.\n\n* `UnitOfMeasure` - Specifies the default unit of measure for the report. All newly created report items will have their locations, sizes, and so on in this `UnitType`.\n\n* `SnapGridSize` - Controls the step of the `Rulers` in the Standalone Report Designer and in the Visual Studio Report Designer.\n```\n\n----------------------------------------\n\nTITLE: Configuring File Cache Provider in JSON for Telerik Reporting\nDESCRIPTION: JSON configuration for the File cache provider with a custom base path. This provider stores rendered pages and resources as temporary files in the file system.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"cache\": {\n\t\t\"provider\": \"File\",\n\t\t\"providers\": [\n\t\t\t{\n\t\t\t\t\"name\": \"FileProviderName\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"BasePath\",\n\t\t\t\t\t\t\"value\": \"c:\\\\MyDataCache\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal ReportsController Implementation in ASP.NET MVC (C#)\nDESCRIPTION: This code snippet demonstrates a minimal implementation of the ReportsController in an ASP.NET MVC application using C# with the `AddTelerikReporting` extension method. It simplifies the configuration process by initializing the ReportServiceConfiguration with less code, referencing a configured Telerik Reporting instance.  The code requires references to Telerik.Reporting and Telerik.Reporting.Services.WebApi assemblies, and a pre-configured Telerik Reporting instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/how-to-implement-the-reportscontroller-in-an-application.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.DependencyInjection;\nusing System.Web.Http;\nusing Telerik.Reporting.Services.WebApi;\n\nnamespace MvcCS.Controllers\n{\n    public class ReportsController : ReportsControllerBase\n    {\n        public ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n        {\n            ReportServiceConfiguration = reportServiceConfiguration ??\n                throw new System.ArgumentNullException(nameof(reportServiceConfiguration));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Values with Expression in Telerik Reporting Parameters\nDESCRIPTION: This snippet demonstrates how to use an expression to combine values from multiple columns as values/labels/text of parameters in Telerik Reporting. It concatenates 'Mr.', LastName, and FirstName fields.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/using-expressions/report-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n='Mr. ' + Fields.LastName + ', ' + Fields.FirstName\n```\n\n----------------------------------------\n\nTITLE: Overriding ProcessCmdKey in VB.NET for Key Event Handling in WinForms\nDESCRIPTION: This snippet is a VB.NET equivalent for overriding the ProcessCmdKey method to capture key combinations like Ctrl-S in a WinForms application that utilizes the Telerik ReportViewer. It allows key events to be processed by the host form.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/key-events-not-raised-when-winforms-viewer-is-added-to-form.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nProtected Overrides Function ProcessCmdKey(ByRef msg As Message, keyData As Keys) As Boolean\n\tIf (keyData = (Keys.S Or Keys.Control)) Then\n\t\t'do my job\n\tEnd If\n\n\tReturn MyBase.ProcessCmdKey(msg, keyData)\nEnd Function\n```\n\n----------------------------------------\n\nTITLE: Importing String Resources\nDESCRIPTION: This code snippet demonstrates how to import the `StringResources` class from the created TypeScript file into the React component where the Report Viewer is used. This import allows the component to access the localized strings defined in the `StringResources` class.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/customizing/localization.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StringResources } from './stringResources';\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Binding Redirects for WebAPI in XML Configuration\nDESCRIPTION: XML configuration code that redirects System.Web.Http and System.Net.Http.Formatting assemblies to a newer version when using a newer version of Microsoft.AspNet.WebApi.SelfHost NuGet package.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/how-to-self-host-telerik-reporting-rest-web-api.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"System.Web.Http\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"5.1.0.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"System.Net.Http.Formatting\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"5.1.0.0\"/>\n\t\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Handling renderingStopped Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `renderingStopped` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `renderingStopped` event is emitted when report rendering is cancelled.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\trenderingStopped() {\n\t\t\tconsole.log(\"This event will be emitted when report rendering is cancelled.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Calculating Y0 Property for Waterfall Chart in Telerik Reporting Expression\nDESCRIPTION: This complex expression determines the starting point (Y0) for each data point in the waterfall chart. It checks if the item is the first or last, setting Y0 to 0 for those cases. For other items, it calculates the difference between the running total and the current value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-waterfall-chart-using-graph.md#2025-04-21_snippet_2\n\nLANGUAGE: Expression\nCODE:\n```\n= IIF(Fields.Item = Exec('graph1', First(Fields.Item)), \n0, \nIIF(Fields.Item = Exec('graph1', Last(Fields.Item)),\n0,\nRunningValue('graph1', Sum(Fields.Value))- Sum(Fields.Value)))\n```\n\n----------------------------------------\n\nTITLE: Unbinding Event Handlers in HTML5 Report Viewer\nDESCRIPTION: This JavaScript code snippet demonstrates how to bind and unbind event handlers to the Telerik Reporting HTML5 Report Viewer. It first defines an event handler function, then binds it and an anonymous function to the `PAGE_READY` event. Finally, it unbinds all event handlers associated with the `PAGE_READY` event using the `unbind` method. Dependencies include jQuery and the Telerik Reporting HTML5 Report Viewer library.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/unbind(eventname).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n````JavaScript\nfunction onPageReady(e) {\n\tconsole.log('page ready!');\n}\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.bind(telerikReportViewer.Events.PAGE_READY, onPageReady);\nreportViewer.bind(telerikReportViewer.Events.PAGE_READY, function (e) {\n\tconsole.log('page ready from anonymous function');\n});\n\n// later\nreportViewer.unbind(telerikReportViewer.Events.PAGE_READY); // this will unbind ALL event handlers, including the anonymous.\n````\n```\n\n----------------------------------------\n\nTITLE: Defining PageScrollModes Enumeration for Telerik Report Viewer in Markdown\nDESCRIPTION: This code snippet defines the PageScrollModes enumeration for the telerikReportViewer object. It includes two modes: SINGLE_PAGE and CONTINUOUS_SCROLL.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/telerikreportviewer-namespace/pagescrollmodes.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|   |\n| ------ |\n| Member name |\n| ------ |\n|SINGLE_PAGE|\n|CONTINUOUS_SCROLL|\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Bindings for ReportServiceClient in VB.NET\nDESCRIPTION: This VB.NET code snippet demonstrates the implementation of the IReportServiceClientFactory interface to create a ReportServiceClient with a custom BasicHttpBinding. The factory is integrated with the ReportViewer to ensure that custom bindings are applied. Dependencies include Telerik.Reporting.Service.SilverlightClient and Telerik.ReportViewer.Silverlight, and System.ServiceModel. Key parameters such as binding MaxBufferSize and timeouts are configured to handle large messages and ensure robust service operations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/silverlight-application/using-custom-bindings.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports System\nImports System.ServiceModel\nImports System.Windows.Controls\nImports Telerik.Reporting.Service.SilverlightClient\nImports Telerik.ReportViewer.Silverlight\n\nPartial Public Class MainPage\n\tInherits UserControl\n\tImplements IReportServiceClientFactory\n\n\tPublic Sub New()\n\t\tInitializeComponent()\n\n\t\tMe.ReportViewer1.ReportServiceClientFactory = Me\n\n\tEnd Sub\n\t\n\tFunction Create(ByVal remoteAddress As Uri) As ReportServiceClient Implements IReportServiceClientFactory.Create\n\n\t\tDim binding = New BasicHttpBinding()\n\t\tbinding.MaxBufferSize = Integer.MaxValue\n\t\tbinding.MaxReceivedMessageSize = Integer.MaxValue\n\t\tbinding.ReceiveTimeout = New TimeSpan(0, 15, 0)\n\t\tbinding.SendTimeout = New TimeSpan(0, 15, 0)\n\n\t\tDim endpointAddress As New EndpointAddress(remoteAddress)\n\n\t\tReturn New ReportServiceClient(binding, endpointAddress)\n\n\tEnd Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Viewer with Custom Parameter Editor\nDESCRIPTION: This snippet demonstrates how to initialize the Telerik Report Viewer with the custom parameter editor. It includes the parameterEditors array with the custom editor functions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-multiselect-checkbox-parameter-editor.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n\t$(\"#reportViewer1\")\n\t\t.telerik_ReportViewer({\n\t\t\tserviceUrl: \"api/reports/\",\n\t\t\treportSource: {\n\t\t\t\treport: \"Product Line Sales.trdp\",\n\t\t\t\tparameters: {}\n\t\t\t},\n\t\t\tparameterEditors: [{\n\t\t\t\tmatch: matchFunction,\n\t\t\t\tcreateEditor: createEditorFunction\n\t\t\t}],\n\t\t\tviewMode: telerikReportViewer.ViewModes.INTERACTIVE,\n\t\t\tscaleMode: telerikReportViewer.ScaleModes.FIT_PAGE,\n\t\t\tscale: 1.0,\n\t\t\tenableAccessibility: false,\n\t\t\tsendEmail: { enabled: true },\n\t\t});\n\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HTML5 DOCTYPE Declaration\nDESCRIPTION: Declares the HTML5 DOCTYPE to ensure proper browser rendering mode.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/manual-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n```\n\n----------------------------------------\n\nTITLE: Adding Toggle Visibility Action Programmatically in C#\nDESCRIPTION: This C# code snippet demonstrates how to programmatically add a ToggleVisibilityAction to a Telerik Report item. It requires a reference to the Telerik.Reporting namespace and the report item for which the action is being added. The action allows toggling the visibility of another report item specified as the target.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/drilldown-report-action.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n\t\t\tReportItem reportItem = this.textBox1;\n\t\t\tTelerik.Reporting.Action action = new Telerik.Reporting.ToggleVisibilityAction();\n\t\t\t((Telerik.Reporting.ToggleVisibilityAction)(action)).Target = \"textBox2\";\n\t\t\treportItem.Actions.Add(action);\n\n```\n\n----------------------------------------\n\nTITLE: Adding Web Report Designer and Viewer Scripts to React Index HTML\nDESCRIPTION: Add references to the Web Report Designer and Viewer JavaScript files in the public/index.html file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-web-report-designer-in-react-js.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://demos.telerik.com/reporting/api/reports/resources/js/telerikReportViewer\"></script>\n<script src=\"https://demos.telerik.com/reporting/api/reportdesigner/designerresources/js/webReportDesigner-{{buildversion}}.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Refreshing Angular Report Viewer Example\nDESCRIPTION: Example showing how to refresh the report viewer by calling the refreshReport() method using a reference to the report viewer component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/api-reference/methods.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer #viewer1 />\n...\n<button (click)=\"viewer1.refreshReport()\">Refresh</button>\n```\n\n----------------------------------------\n\nTITLE: Using PageNumber Function with Scope in Telerik Reporting (C#)\nDESCRIPTION: Demonstrates how to use the PageNumber function with a scope and aggregate function to reset page numbering based on data in the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/page-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n= PageNumber(\"group1\", Fields.GroupName)\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for .NET 8 Designer in XML\nDESCRIPTION: This XML snippet shows the default configuration file (`Telerik.ReportDesigner.Net.dll.config`) distributed with the .NET 8 version of the Telerik Report Designer. It configures sections for Telerik Reporting and Report Designer, connection strings, the default working directory, and trace listeners within the Telerik.Reporting section.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/configuration/overview.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version =\"1.0\"?>\n<configuration>\n\t<configSections>\n\t\t<section\n\t\t\t\tname=\"Telerik.Reporting\"\n\t\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\"\n\t\t\t\tallowLocation=\"true\"\n\t\t\t\tallowDefinition=\"Everywhere\"/>\n\t\t<section\n\t\t\tname=\"Telerik.ReportDesigner\"\n\t\t\ttype=\"Telerik.ReportDesigner.Configuration.ReportDesignerConfigurationSection, Telerik.ReportDesigner.Configuration\"\n\t\t\tallowLocation=\"true\"\n\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\t<connectionStrings>\n\t\t<clear/>\n\t\t<add name=\"AdventureWorks\" connectionString=\"server=(local)\\sqlexpress;database=AdventureWorks;integrated security=true;\" providerName=\"System.Data.SqlClient\"/>\n\t\t<add name=\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\" connectionString=\"server=(local)\\sqlexpress;database=AdventureWorks;integrated security=true;\" providerName=\"System.Data.SqlClient\"/>\n\t</connectionStrings>\n\t\n\t<Telerik.ReportDesigner DefaultWorkingDir=\"Examples\">\n\t</Telerik.ReportDesigner>\n\t<Telerik.Reporting>\n\t<!-- Add assembly references (in .NET6 and later assemblies are resolved by file name) -->\n\t<!--\n\t\t<AssemblyReferences>\n\t\t\t<add name=\"MyUserFunctions\" />\n\t\t\t<add name=\"MyBusinessObjects\" />\n\t\t</AssemblyReferences>\n\t-->\n\t<!-- Add trace listeners (in .NET6 and later assemblies that contain custom listeners are resolved by file name)-->\n\t<!--\n\t\t<traceListeners>\n\t\t\t<add name=\"myCustomListener\" type=\"CustomListenersNamespace.CustomListener, CustomListenersAssembly\"  initializeData=\"Telerik.ReportDesigner.custom.log\" />\n\t\t\t<add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\"  initializeData=\"Telerik.ReportDesigner.Net.log\" />\n\t\t\t<remove name=\"Default\" />\n\t\t</traceListeners>\n\t-->\n\t</Telerik.Reporting>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectionStrings in XML Configuration File\nDESCRIPTION: This XML snippet demonstrates how to store a connection string in the application's configuration file using the connectionStrings element.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/connecting-the-cubedatasource-component-to-an-olap-database.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<connectionStrings>\n\t\t<add name=\"MyAdventureWorksDW\"\n\t\tconnectionString=\"Data Source=localhost;Initial Catalog=Adventure Works DW 2008R2\"\n\t\tproviderName=\"Microsoft.AnalysisServices.AdomdClient\" />\n\t</connectionStrings>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring WCF Service with SSL in web.config\nDESCRIPTION: A complete system.serviceModel configuration example that shows how to enable SSL for Telerik Reporting WCF service. It includes bindings configured for Transport security mode, service endpoints, and the necessary behaviors.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-enable-ssl-for-telerik-reporting-wcf-service.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<system.serviceModel>\n\t<serviceHostingEnvironment aspNetCompatibilityEnabled=\"true\" />\n\t<!--security settings -->\n\t\t<bindings>\n\t\t\t<basicHttpBinding>\n\t\t\t\t<binding name=\"BasicHttpBindingConfig\">\n\t\t\t\t\t<security mode=\"Transport\"/>\n\t\t\t\t</binding>\n\t\t\t</basicHttpBinding>\n\t\t\t<webHttpBinding>\n\t\t\t\t<binding name=\"WebHttpBindingConfig\">\n\t\t\t\t\t<security mode=\"Transport\"/>\n\t\t\t\t</binding>\n\t\t\t</webHttpBinding>\n\t\t</bindings>\n\t\t<services>\n\t\t\t<service name=\"Telerik.Reporting.Service.ReportService\"\n\t\t\t\t\t\tbehaviorConfiguration=\"ReportServiceBehavior\">\n\t\t\t\t<!-- endpoint allowing clients access to the Reporting WCF service -->\n\t\t\t\t<endpoint address=\"\"\n\t\t\t\t\t\t\tbinding=\"basicHttpBinding\"\n\t\t\t\t\t\t\tbindingConfiguration=\"BasicHttpBindingConfig\"\n\t\t\t\t\t\t\tcontract=\"Telerik.Reporting.Service.IReportService\">\n\t\t\t\t\t<identity>\n\t\t\t\t\t\t<dns value=\"localhost\" />\n\t\t\t\t\t</identity>\n\t\t\t\t</endpoint>\n\t\t\t\t<!-- endpoint allowing clients access to resources as images -->\n\t\t\t\t<endpoint address=\"resources\"\n\t\t\t\t\t\t\tbinding=\"webHttpBinding\"\n\t\t\t\t\t\t\tbindingConfiguration=\"WebHttpBindingConfig\"\n\t\t\t\t\t\t\tbehaviorConfiguration=\"WebBehavior\"\n\t\t\t\t\t\t\tcontract=\"Telerik.Reporting.Service.IResourceService\"/>\n\t\t\t\t<!-- endpoint allowing clients access to receive service's metadata via SOAP messages -->\n\t\t\t\t<endpoint address=\"mex\"\n\t\t\t\t\t\t\tbinding=\"mexHttpBinding\"\n\t\t\t\t\t\t\tcontract=\"IMetadataExchange\" />\n\t\t\t</service>\n\t\t</services>\n\t\t<behaviors>\n\t\t\t<serviceBehaviors>\n\t\t\t\t<behavior name=\"ReportServiceBehavior\">\n\t\t\t\t\t<serviceMetadata httpGetEnabled=\"true\" />\n\t\t\t\t\t<serviceDebug includeExceptionDetailInFaults=\"false\" />\n\t\t\t\t</behavior>\n\t\t\t</serviceBehaviors>\n\t\t\t<endpointBehaviors>\n\t\t\t\t<behavior name=\"WebBehavior\">\n\t\t\t\t\t<webHttp />\n\t\t\t\t</behavior>\n\t\t\t</endpointBehaviors>\n\t\t</behaviors>\n\t</system.serviceModel>\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with Ready Callback in JavaScript\nDESCRIPTION: This JavaScript code initializes the telerik_ReportViewer with a custom template and includes a ready callback function. The callback is executed when the viewer is fully loaded and operational.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/styling-and-appearance/providing-custom-templates.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\").telerik_ReportViewer({\n\tserviceUrl: \"../api/reports/\",\n\ttemplateUrl: '/ReportViewer/templates/telerikReportViewerTemplate',\n\treportSource: { report: \"product catalog.trdp\" },\n\tready: function() {\n\t\t// report viewer is now ready for action\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Blazor Report Viewer in .NET MAUI Blazor\nDESCRIPTION: Razor code for adding the Telerik Blazor Report Viewer component to a MAUI Blazor application. The example configures the viewer with specific dimensions, themes, and report source, pointing to a demo report from Telerik's service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/displaying-telerik-report-in-net-maui-and-maui-blazor-applications.md#2025-04-21_snippet_2\n\nLANGUAGE: Razor\nCODE:\n```\n@page \"/\"\n\t@using Telerik.ReportViewer.Blazor\n\t\n\t<h1>Telerik Reporting Blazor Report Viewer</h1>\n\t\n\t<style>\n\t\t.trv-report-viewer {\n\t\t\twidth: 85%;\n\t\t\theight: 600px;\n\t\t\tpadding-right: 50px;\n\t\t}\n\t</style>\n\t\n\t<link rel=\"stylesheet\" href=\"https://unpkg.com/@progress/kendo-theme-default@5.0.1/dist/all.css\" />\n\t\n\t<ReportViewer @ref=\"reportViewer1\"\n\t\tViewerId=\"rv1\"\n\t\tServiceUrl=\"https://demos.telerik.com/reporting/api/reports\"\n\t\tReportSource=\"@(new ReportSourceOptions\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tReport = \"Conference report.trdx\",\n\t\t\t\t\t\t\t\t\t\t\t})\"\n\t\tParameters=\"@(new ParametersOptions { Editors = new EditorsOptions { MultiSelect = EditorType.ComboBox, SingleSelect = EditorType.ComboBox } })\"\n\t\tScaleMode=\"@(ScaleMode.FitPage)\"\n\t\tScale=\"1.0\" />\n\t\t\n\t@code {\n\t\tReportViewer reportViewer1;\n\t}\n```\n\n----------------------------------------\n\nTITLE: Querying AdventureWorks with SQL in Telerik Reporting\nDESCRIPTION: This SQL snippet provides a query to retrieve sales order data from the AdventureWorks database. It is used as a data source in Telerik Reporting to plot graphical representations. The key parameters are `LineTotal` for sales amounts and `OrderDate` for the time axis. The query results include sales data for orders in the year 2003 associated with a specific sales person. The snippet connects to the database to extract, process, and visualize sales data in a graphical format.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/graph-with-column-line-series.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT SOD.LineTotal, SOH.OrderDate\n\t\tFROM\n\t\t\tSales.SalesPerson S\n\t\tINNER JOIN Sales.SalesOrderHeader SOH ON SOH.SalesPersonID = S.SalesPersonID\n\t\tINNER JOIN Sales.SalesOrderDetail SOD ON SOH.SalesOrderID = SOD.SalesOrderID\n\t\tWHERE SOH.OrderDate between cast('2003-01-01' as datetime) and cast('2003-12-31' as datetime)\n\t\t\tand S.SalesPersonId = 283\n```\n\n----------------------------------------\n\nTITLE: Setting List Group Expressions for Multi-Column Layout in C#\nDESCRIPTION: This snippet shows how to set the grouping expressions for the Detail row group and Static column group in a List item to achieve a multi-column layout. The expressions use integer division and modulo operations on an index field.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-multi-column-report---across-the-page-and-then-down.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n=Fields.MyDataIndex/3\n```\n\nLANGUAGE: C#\nCODE:\n```\n=Fields.MyDataIndex%3\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Retrieving Product Sales Data from AdventureWorks Database\nDESCRIPTION: An SQL query that retrieves product sales data from the AdventureWorks database, joining tables from Production and Sales schemas to provide product information along with sales details. The query includes product names, categories, subcategories, line totals, and order dates.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/table-crosstab-list/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\t[Production].[Product].[Name] AS 'ProductName', \n\t\t[Production].[ProductCategory].[Name] AS 'ProductCategory', \n\t\t[Production].[ProductSubcategory].[Name] AS 'ProductSubCategory', \n\t\t[Sales].[SalesOrderDetail].[LineTotal], \n\t\t[Sales].[SalesOrderHeader].[OrderDate]\n\tFROM (((([Sales].[SalesOrderDetail]\n\t\tINNER JOIN [Sales].[SalesOrderHeader]\n\t\tON [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID])\n\t\tINNER JOIN [Production].[Product]\n\t\tON [Sales].[SalesOrderDetail].[ProductID] = [Production].[Product].[ProductID])\n\t\tINNER JOIN [Production].[ProductSubcategory]\n\t\tON [Production].[Product].[ProductSubcategoryID] = [Production].[ProductSubcategory].[ProductSubcategoryID])\n\t\tINNER JOIN [Production].[ProductCategory]\n\t\tON [Production].[ProductSubcategory].[ProductCategoryID] = [Production].[ProductCategory].[ProductCategoryID])\n```\n\n----------------------------------------\n\nTITLE: Formatting Numeric Values in C# Expressions\nDESCRIPTION: Illustrates how to format a numeric value (Price) as currency using the ToString() method with a custom format string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/member-access.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n= Price.ToString('$0.')\n```\n\n----------------------------------------\n\nTITLE: Using Now Function in Telerik Reporting\nDESCRIPTION: The `Now` function returns the current date and time on the computer processing the report. It is expressed as the local time. The returned value is a DateTime instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=Now()\"\n```\n\n----------------------------------------\n\nTITLE: Handling DropDownList Change in ASP.NET Web Forms (C#)\nDESCRIPTION: This C# event handler updates a report parameter based on the selected value of a DropDownList. It assumes the use of a Telerik ReportViewer control. The InstanceReportSource is used to access the report document and update the 'Year' report parameter. The ReportViewer is then refreshed to display the updated report. Dependencies: Telerik Reporting, ASP.NET Web Forms. The sender, a DropDownList, provides the selected value, which is set to the report parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/modify-textbox-value-with-expression.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)\n\t{\n\t\t InstanceReportSource reportsource = (InstanceReportSource)this.ReportViewer1.ReportSource;\n\t\t Report report = (Report)reportsource.ReportDocument;\n\t\t report.ReportParameters[\"Year\"].Value = ((DropDownList)sender).SelectedItem.Value;\n\t\t ReportViewer1.RefreshReport();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Angular Modules\nDESCRIPTION: This code snippet shows how to import the newly generated report viewer component in an Angular module. It involves including necessary Angular modules such as BrowserAnimationsModule and the ReportViewerPageComponent in the root Angular module for applications using Angular 16 or earlier.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/integrating-with-project-item-generator.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ReportViewerPageComponent } from './report-viewer-page/report-viewer-page.component';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ReportViewerPageComponent\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Setting ASP.NET Report Viewer Programmatically - Q2 2012 and Later\nDESCRIPTION: Code examples showing how to programmatically set reports in ASP.NET Report Viewer after Q2 2012 using InstanceReportSource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nReport1 report1 = new Report1();\n// perform additional operations on the report object if needed            `\nTelerik.Reporting.InstanceReportSource instanceReportSource = new  Telerik.Reporting.InstanceReportSource();\ninstanceReportSource.ReportDocument = report1;\nthis.ReportViewer1.ReportSource = instanceReportSource;\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim report1 As New Report1()\nDim instanceReportSource As New Telerik.Reporting.InstanceReportSource()\ninstanceReportSource.ReportDocument = report1\nMe.ReportViewer1.ReportSource = instanceReportSource\n```\n\n----------------------------------------\n\nTITLE: Adding Web Report Designer Resources in Angular HTML\nDESCRIPTION: HTML code for adding references to jQuery, Kendo UI, and Telerik Web Report Designer resources in the main HTML page of an Angular application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-web-report-designer-in-angular-application.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head>\n\t\t//...\n\t\t<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n\t\t<script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/kendo.all.min.js\"></script>\n\n\t\t<script src=\"https://demos.telerik.com/reporting/api/reports/resources/js/telerikReportViewer\"></script>\n\t\t<script src=\"https://demos.telerik.com/reporting/api/reportdesigner/designerresources/js/webReportDesigner\"></script>\n\t</head>\n```\n\n----------------------------------------\n\nTITLE: Correct Item Data Binding Example in VB.NET\nDESCRIPTION: This snippet showcases the proper way to handle data binding to report items in VB.NET, utilizing the Items collection as recommended for out-proc session state implementation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\Processing\\OutProcSnippets.vb region=CorrectItemDataBinding}}\n```\n\n----------------------------------------\n\nTITLE: Loading Kendo Culture Script for French Localization\nDESCRIPTION: Include the Kendo UI culture script for French language from the CDN. This script provides localization support for the DatePicker widget in French.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-change-the-culture-of-the-datepicker-in-html5-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"http://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/cultures/kendo.culture.fr-FR.min.js\"><\\/script>\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource Programmatically in ASP.NET Web Forms (C#)\nDESCRIPTION: This snippet demonstrates how to programmatically set the ReportSource property of a ReportViewer control in an ASP.NET Web Forms application using C#. It creates a TypeReportSource object and sets its TypeName to specify the report class and assembly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-design-time-reportviewer-control-reportsource-property-from-the-property-grid-does-not-show-available-reports.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nprotected void Page_Load(object sender, EventArgs e)\n{\n\tif (!IsPostBack)\n\t{\n\t\tvar typeReportSource = new Telerik.Reporting.TypeReportSource();\n\t\ttypeReportSource.TypeName = \"Telerik.Reporting.Examples.CSharp.ListBoundReport, CSharp.ReportLibrary\";\n\t\tthis.ReportViewer1.ReportSource = typeReportSource;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HTML5 Report Viewer New References\nDESCRIPTION: Updated HTML and JavaScript code showing the new file reference structure required for Q2 2014\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2014/q2-2014.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"ReportViewer/js/telerikReportViewer-x.x.x.x.js\" /script>\n<script src=\"ReportViewer/js/telerikReportViewer-x.x.x.x.min.js\" /script>\n<script src=\"ReportViewer/styles/telerikReportViewer-x.x.x.x.css\" /script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n      $(\"#reportViewer1\")\n       .telerik_ReportViewer({\n           ...\n              templateUrl: '/ReportViewer/templates/telerikReportViewerTemplate-x.x.x.x.html',\n           ...\n          });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Checking Parameters Area Visibility with jQuery in Angular Report Viewer\nDESCRIPTION: This snippet demonstrates how to use jQuery to determine if the parameters area is currently visible in the Angular Report Viewer. It selects the parameters area element and checks its width, which will be 0 if the area is hidden.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-determine-effective-visibility-of-parameters-area.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\".trv-parameters-area\").width()\n```\n\n----------------------------------------\n\nTITLE: Unbinding Double Click Event in Telerik Html5 Report Viewer JavaScript\nDESCRIPTION: This code snippet demonstrates how to unbind the 'doubletap' event in the Html5 Report Viewer by using a handler in the 'pageReady' event. It utilizes jQuery to access and modify the kendoTouch settings on the '.trv-pages-area' element. The primary focus is to disable the default behavior of switching between scale modes on double-click.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/disable-switching-between-scale-modes-with-double-click.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n    function onReady(e, args) {\n        var kendoTouch = $(\".trv-pages-area\").data(\"kendoTouch\");\n\n        if (kendoTouch) {\n            kendoTouch.unbind(\"doubletap\");\n        }\n    }\n\t\n    $(document).ready(function () {\n        $(\"#reportViewer1\")\n            .telerik_ReportViewer({\n                ...\n                pageReady: onReady\n            });\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Programmatically Adding a Custom Action (C#)\nDESCRIPTION: This code snippet shows how to add a custom action programmatically in Telerik Reporting using C#. It requires Telerik Reporting libraries and details how to define parameters and integrate them into a report. Key operations include parameter definition and action integration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/custom-action.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\ActionSnippets.cs region=AddNewCustomActionSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Adding CORS Attribute to ReportsController in ASP.NET\nDESCRIPTION: C# and VB.NET code for adding the EnableCors attribute to the ReportsController class. This attribute configures which origins, headers, and methods are allowed to access the REST service endpoints.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/add-rest-web-api-to-web-application.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[EnableCors(origins:\"*\", headers:\"*\", methods:\"*\")]\n```\n\nLANGUAGE: VB\nCODE:\n```\n<EnableCors(origins:\"*\", headers:\"*\", methods:\"*\")>\n```\n\n----------------------------------------\n\nTITLE: Sample GET Request for Document Page in Telerik Reporting REST API\nDESCRIPTION: A complete example of a GET request to retrieve page 1 from a document with specific client, instance, and document IDs.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document-page.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /api/reports/clients/2c3d/instances/4d3c/documents/5x3a/pages/1 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigurationService for Telerik Reporting in ASP.NET Core\nDESCRIPTION: Creates a ConfigurationService class to read the appsettings.json configuration file for use with Telerik Reporting in an ASP.NET Core application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-implement-telerik-reporting-in-asp-net-core-mvc.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ConfigurationService\n{\n    public ConfigurationService(IHostingEnvironment environment)\n    {\n        this.Environment = environment;\n \n        var configFileName = System.IO.Path.Combine(environment.ContentRootPath, \"appsettings.json\");\n        var config = new ConfigurationBuilder()\n                        .AddJsonFile(configFileName, true)\n                        .Build();\n \n        this.Configuration = config;\n    }\n    \n    public IConfiguration Configuration { get; private set; }\n \n    public IHostingEnvironment Environment { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML5 Viewer with Custom kendoDateTimePicker Editor\nDESCRIPTION: This code snippet demonstrates how to configure the Telerik ReportViewer to use a custom parameter editor that replaces the default kendoDatePicker with kendoDateTimePicker. It includes timezone adjustment functions and widget configuration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-kendodatetimepicker-as-an-editor-in-the-html5-viewer-s-parameters-area.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\">\n    $(document).ready(function () {\n        $(\"#reportViewer1\")\n            .telerik_ReportViewer({\n                // The URL of the service which will serve reports.\n                serviceUrl: \"/api/reports\",\n                //ReportSource - string description of the report we want from the server\n                reportSource: { report: \"SampleReport.trdp\" },\n                // Specifies whether the viewer is in interactive or print preview mode.\n                viewMode: telerikReportViewer.ViewModes.INTERACTIVE,\n                // Sets the scale mode of the viewer.\n                scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,\n                // Zoom in and out the report using the scale\n                scale: 1.0,\n                //the custom parameter editor\n                parameterEditors: [\n                {\n                      match: function (parameter) {\n                      return parameter.type === \"System.DateTime\";\n                  },\n \n                  createEditor: function (placeholder, options) {\n                      $(placeholder).html('<input type=\"datetime\"/>');\n                      var dateTimePicker = $(placeholder),\n                                           parameter,\n                                           valueChangedCallback = options.parameterChanged,\n                                           dropDownList;\n \n                      function onChange() {\n                          var dtv = this.value();\n                          if (null !== dtv) {\n                              dtv = myadjustTimezone(dtv);\n                          }\n                          valueChangedCallback(parameter, dtv);\n                      }\n \n                      return {\n                          beginEdit: function (param) {\n                              parameter = param;\n \n                              var dt = null;\n                              try {\n                                  if (param.value) {\n                                      dt = myunadjustTimezone(param.value);\n                                  }\n                              } catch (e) {\n                                  dt = null;\n                              }\n                                //you can configure the widget\n                              $(dateTimePicker).find(\"input\").kendoDateTimePicker({\n                                  format: \"dd/MM/yyyy hh:mm:ss\",\n                                  min: new Date(2014, 0, 1, 8, 0, 0),\n                                  max: new Date(2018, 0, 4, 22, 0, 0),\n                                  change: onChange,\n                                  value: dt\n                              });\n                              dropDownList = $(dateTimePicker).find(\"input\").data(\"kendoDateTimePicker\");\n                          }\n                      }\n                  }\n              }]\n            });\n    });\n \n    //functions required for adjusting the Date and Time selection to avoid sending and receiving dates, which are not in UTC\n    function myadjustTimezone(date) {\n        return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    };\n    function myunadjustTimezone(date) {\n        return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n    };\n \n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in Global.asax for Telerik Reporting REST Service\nDESCRIPTION: C# and VB.NET code for enabling Cross-Origin Resource Sharing (CORS) in the Global.asax file of an ASP.NET application. This configuration allows cross-domain requests to the REST service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/add-rest-web-api-to-web-application.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nGlobalConfiguration.Configuration.EnableCors();\n```\n\nLANGUAGE: VB\nCODE:\n```\nGlobalConfiguration.Configuration.EnableCors()\n```\n\n----------------------------------------\n\nTITLE: Configuring Web.config Namespaces\nDESCRIPTION: Updates web.config to include required Telerik Reporting namespaces\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<system.web.webPages.razor>\n\t...\n\t   <pages pageBaseType=\"System.Web.Mvc.WebViewPage\">\n\t\t\t <namespaces>\n\t\t\t\t...\n\t\t\t   <add namespace=\"Telerik.Reporting\" />\n\t\t\t   <add namespace=\"Telerik.ReportViewer.Mvc\" />\n\t\t\t </namespaces>\n\t   </pages>\n\t</system.web.webPages.razor>\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Connection String in appsettings.json\nDESCRIPTION: JSON configuration example showing how to specify a shared connection string with the Microsoft.Data.SqlClient provider in the application settings file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-data-providers/using-microsoft-data-sqlclient-data-proivder.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ConnectionStrings\":{\n        \"mssql\":{\n            \"connectionString\":\"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;\",\n            \"providerName\":\"Microsoft.Data.SqlClient\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Report in Legacy ASP.NET WebForms Report Viewer with HTML and JavaScript\nDESCRIPTION: This HTML and JavaScript snippet illustrates how to print a report in the Legacy ASP.NET WebForms Report Viewer. It includes the ReportViewer control within a form and uses inline JavaScript to call the `PrintReport()` method of the ReportViewer client object. It relies on the Telerik Reporting ASP.NET WebForms ReportViewer and requires Adobe Acrobat Reader PDF plugin to be installed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-a-report-programmatically.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<form id=\"form1\" runat=\"server\">\n\t<telerik:ReportViewer runat=\"server\" id=\"ReportViewer1\"></telerik:ReportViewer>\n\t<script type=\"text/javascript\">\n\t\t<%=ReportViewer1.ClientID %>.PrintReport();\n\t</script>\n</form> \n```\n\n----------------------------------------\n\nTITLE: Registering ODBC Provider Factory in ReportDesignerController for .NET Core Applications\nDESCRIPTION: This code shows how to properly register the System.Data.ODBC provider in the DbProviderFactories for .NET and .NET Core applications by implementing it in the static constructor of the ReportDesignerController class. This ensures ODBC connections will work in the Web Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-odbc-connections-in-the-web-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[Route(\"api/reportdesigner\")]\npublic class ReportDesignerController : ReportDesignerControllerBase\n{\n\tstatic ReportDesignerController()\n\t{\n\t\tTelerik.Reporting.Processing.Data.DbProviderFactories.RegisterFactory(\"System.Data.Odbc\", System.Data.Odbc.OdbcFactory.Instance);\n\t}\n\n\tpublic ReportDesignerController(IReportDesignerServiceConfiguration reportDesignerServiceConfiguration, IReportServiceConfiguration reportServiceConfiguration)\n\t\t: base(reportDesignerServiceConfiguration, reportServiceConfiguration)\n\t{\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Expression in Parent Data Scope (C#)\nDESCRIPTION: Uses the Exec function to execute an expression in a parent data scope. This example calculates the LineTotal as a percentage of the total for the entire report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/data-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n=Fields.LineTotal / Exec('Report1', Sum(Fields.LineTotal))\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Populating Report Parameter Values\nDESCRIPTION: SQL query to retrieve available values for a report parameter from a database, specifically for populating manager IDs and names\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/using-report-parameters-programmatically.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT\n    e.ManagerID,\n    p.FirstName + ' ' + p.LastName AS Name\nFROM\n    HumanResources.Employee e\n    INNER JOIN Person.Person p ON e.ManagerID = p.BusinessEntityID\n```\n\n----------------------------------------\n\nTITLE: Identifying Telerik Reporting Redis Keys\nDESCRIPTION: This command uses the Redis CLI to find all keys related to Telerik Reporting. Replace '18.1.24.514' with your Telerik Reporting version or HostAppId pattern.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/clear-redis-storage-telerik-reporting-rest-service.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nredis-cli KEYS \"*18.1.24.514*\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Report Viewer with ReportSource\nDESCRIPTION: Shows the initial setup of the ReportViewer component with an empty ReportSource binding.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-query-parameters-native-blazor-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<ReportViewer @ref=rv1 ServiceUrl=\"/api/reports\"\n\t\t@bind-ReportSource=\"@ReportSource\"\n\t\tServiceType=\"@ReportViewerServiceType.REST\"\n\t\tHeight=\"800px\"\n\t\tWidth=\"100%\">\n</ReportViewer>\n\n\n@code {\n\tpublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF JavaScript Parameter in Application Configuration File\nDESCRIPTION: XML configuration that sets the JavaScript parameter for the PDF renderer extension in a Telerik Reporting configuration section. This allows the bookmarks pane to be shown automatically in all exported PDFs from a Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-expand-the-pdf-reader-s-bookmarks-pane-on-opening-a-pdf-file-produced-by-telerik-reporting.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n  <configSections>\n    <section\n        name=\"Telerik.Reporting\"\n        type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n        allowLocation=\"true\"\n        allowDefinition=\"Everywhere\"/>\n  </configSections>\n  …\n  <Telerik.Reporting>\n    <extensions>\n      <render>\n        <extension name=\"PDF\" >\n          <parameters>\n            <parameter name=\"JavaScript\" value=\"app.execMenuItem('ShowHideBookmarks')\"/>\n          </parameters>\n        </extension>\n      </render>\n    </extensions>\n  </Telerik.Reporting>\n  …\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Disabling Property Resolution Optimization Configuration\nDESCRIPTION: XML configuration to disable the property resolution optimization for legacy reports compatibility.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/changes-on-items-in-report-events-are-not-applied.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n\t<configSections>\n\t\t<section\n\t\t\tname=\"Telerik.Reporting\"\n\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting.Configuration, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n\t\t\tallowLocation=\"true\"\n\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\t<Telerik.Reporting>\n\t\t<processing cacheDefinitionProperties=\"false\" />\n\t</Telerik.Reporting>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Integrating UpdateUi Event in HTML5 MVC Report Viewer with C#\nDESCRIPTION: This C# snippet demonstrates how to integrate the UpdateUi JavaScript event into an MVC ReportViewer. It configures various viewer settings and links the UpdateUi event with the onUpdateUi JavaScript function. The setup assumes an existing HTML helper and View model environment.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-change-report-parameter-date-format-in-html5-mvc-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n<body>\n\t@(Html.TelerikReporting().ReportViewer()\n\t\t.Id(\"reportViewer1\")\n\t\t.ServiceUrl(Url.Content(\"~/api/reports\"))\n\t\t.ReportSource(new TypeReportSource() { TypeName = \"ReportLibrary1.Report1, ReportLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" })\n\t\t.ViewMode(ViewMode.Interactive)\n\t\t.ScaleMode(ScaleMode.Specific)\n\t\t.Scale(1.0)\n\t\t.PersistSession(false)\n\t\t.PrintMode(PrintMode.AutoSelect)\n\t\t.ClientEvents(\n\t\t\t\t\teditors => editors\n\t\t\t\t\t\t.UpdateUi(\"onUpdateUi\")\n\t\t)\n\t)\n</body>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Information via GET Request - HTTP\nDESCRIPTION: This snippet demonstrates how to construct a GET request to obtain information about a specific document in the Telerik Reporting REST Service. The request requires path parameters such as clientId, instanceId, and documentId, which are identifiers for the service client, report instance, and document, respectively.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document-info.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/reports/clients/{clientId}/instances/{instanceId}/documents/{documentId}/info\n```\n\n----------------------------------------\n\nTITLE: Fixing Web Report Designer undefinedundefined Issue with Custom IDefinitionStorage\nDESCRIPTION: This JavaScript code snippet provides a workaround for an issue in the Telerik Reporting Web Report Designer where reports display \"undefinedundefined\" when loaded from a custom IDefinitionStorage. The issue is caused by kendo.aspnetmvc.js. This fix modifies the `translateAggregateResults` function in `kendo.data.js` to correctly handle properties, resolving the display issue.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/web-report-designer-shows-undefinedundefined-when-openning-report.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n````JavaScript\nfunction translateAggregateResults(aggregate) {\n            var obj = {};\n            // LSS: support for camel case serialization\n            obj[(aggregate.AggregateMethodName || aggregate.aggregateMethodName).toLowerCase()] = (aggregate.Value || aggregate.value);\n            return obj;\n        }\n        function translateAggregate(aggregates) {\n            var functionResult = {}, key, functionName, aggregate;\n            for (key in aggregates) {\n                functionResult = {};\n                aggregate = aggregates[key];\n                for (functionName in aggregate) {\n                    functionResult[functionName.toLowerCase()] = aggregate[functionName];\n                }\n                aggregates[key] = functionResult;\n            }\n            return aggregates;\n        }\n        function convertAggregates(aggregates) {\n            var idx, length, aggregate;\n            var result = {};\n            for (idx = 0, length = aggregates.length; idx < length; idx++) {\n                aggregate = aggregates[idx];\n                // LSS: support for camel case serialization\n                result[(aggregate.Member || aggregate.member)] = extend(true, result[(aggregate.Member || aggregate.member)], translateAggregateResults(aggregate));\n            }\n            return result;\n        }\n        extend(true, kendo.data, {\n            schemas: {\n                'aspnetmvc-ajax': {\n                    groups: function (data) {\n                        return $.map(this._dataAccessFunction(data), translateGroup);\n                    },\n                    aggregates: function (data) {\n                        data = data.d || data;\n                        // LSS: support for camel case serialization\n                        var aggregates = data.AggregateResults || data.aggregateResults || [];\n                        if (!$.isArray(aggregates)) {\n                            for (var key in aggregates) {\n                                aggregates[key] = convertAggregates(aggregates[key]);\n                            }\n                            return aggregates;\n                        }\n                        return convertAggregates(aggregates);\n                    }\n                }\n            }\n        });\n````\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with Error Event Handler\nDESCRIPTION: Example showing how to initialize a Telerik Report Viewer with a custom error event handler. The code demonstrates setting up the viewer with a service URL, report source configuration, and an error callback function that logs messages to the console.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/error(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\terror: function(e, args) {\n\t\t\tconsole.log(\"This event handler will be called after a page of the report is ready.\");\n\t\t\tconsole.log(\"The error message is: \" + args);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data with a Parameter in Telerik Reporting (VB.NET)\nDESCRIPTION: This VB.NET code defines a shared function `GetData` that retrieves data based on the provided 'year' parameter. It creates a DataTable and adds a \"Name\" column. It then conditionally adds rows based on the value of the 'year' parameter. This function serves as the data source for the report, filtered by the year parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/use-parameters-to-retrieve-specific-data.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPrivate Shared Function GetData(ByVal year) As DataTable\n\t\tDim table As DataTable\n\t\ttable = New DataTable()\n\t\ttable.Columns.Add(\"Name\", GetType(String))\n\t\tIf (year = \"2007\") Then\n\t\t\ttable.Rows.Add(\"Peter\")\n\t\tElseIf (year = \"2008\") Then\n\t\t\ttable.Rows.Add(\"Scott\")\n\t\tEnd If\n\t\tReturn table\n\tEnd Function\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler Functions in React Component\nDESCRIPTION: Defines event handler methods that will be called when specific viewer events are triggered, demonstrating logging of event details\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/event-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport class AppComponent {\n\tmyReadyHandler() {\n\t\tconsole.log('The viewer is ready!');\n\t}\n\tmyViewerToolTipOpeningHandler(e: any, args: any) {\n\t\tconsole.log('Tooltip shows: ' + args.toolTip.text);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Tooltip Dependency for HTML5 Report Viewer\nDESCRIPTION: This code snippet shows how to include the additional Kendo UI Tooltip dependency required for the new Tooltips functionality in the HTML5 Report Viewer. It should be added if using Kendo CDN with minimum required widgets.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2017/r1-2017.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nIf Kendo CDN is used with the minimum required widgets only. You should add the following one:\n<script src=\"https://kendo.cdn.telerik.com/2015.3.930/js/kendo.tooltip.min.js\" /script>\n-->\n```\n\n----------------------------------------\n\nTITLE: Modifying .NET Framework Uri Behavior\nDESCRIPTION: This XML snippet configures the .NET Framework to prevent unescaping of path delimiters in URLs, which is necessary for correct behavior in applications using PictureBox in Telerik Reporting. This configuration is specific to .NET Framework 4.0 and affects HTTP and HTTPS schemes. It is implemented by adding specific entries in the client application configuration file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/picturebox-encoded-url-bad-request-not-found.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<uri>\n\t\t<schemeSettings>\n\t\t\t<add name=\"http\" genericUriParserOptions=\"DontUnescapePathDotsAndSlashes\"/>\n\t\t\t<add name=\"https\" genericUriParserOptions=\"DontUnescapePathDotsAndSlashes\"/>\n\t\t</schemeSettings>\n\t</uri>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring SubReport with ReportSource in C#\nDESCRIPTION: Demonstrates how to specify a report for the SubReport item and its corresponding report parameters using InstanceReportSource in C#.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nInvoiceReport report1 = new InvoiceReport();\nTelerik.Reporting.SubReport subReport1 = new Telerik.Reporting.SubReport();\nTelerik.Reporting.InstanceReportSource instanceReportSource1 = new  Telerik.Reporting.InstanceReportSource();\ninstanceReportSource1.ReportDocument = report1;\ninstanceReportSource1.Parameters.Add(new Telerik.Reporting.Parameter(\"SaledOrderID\", \"=Fields.SalesOrderID\"));\nsubReport1.ReportSource = instanceReportSource1;\n```\n\n----------------------------------------\n\nTITLE: Removing Table Border Extensions in Telerik Reporting\nDESCRIPTION: Set the Table item's BorderStyle.Default property to None to prevent borders from extending across page breaks. This approach ensures only cell borders are visible, suppressing the default page-spanning border behavior.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hide-table-borders-extending-to-the-next-page.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nStyle.BorderStyle.Default = None\n```\n\n----------------------------------------\n\nTITLE: Configuring Startup.cs for Telerik Reporting in ASP.NET Core\nDESCRIPTION: This code snippet shows how to configure the Startup.cs file for Telerik Reporting. It sets up the necessary services, configures the reporting engine, and sets up the HTTP request pipeline.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-web-report-designer-in-net-core-mvc.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Startup\n{\n\tpublic Startup(IConfiguration configuration)\n\t{\n\t\tConfiguration = configuration;\n\t}\n\n\tpublic IConfiguration Configuration { get; }\n\n\t// This method gets called by the runtime. Use this method to add services to the container.\n\tpublic void ConfigureServices(IServiceCollection services)\n\t{\n\t\tservices.AddControllersWithViews();\n\t\tservices.AddControllers();\n\t\tservices.Configure<IISServerOptions>(options =>\n\t\t{\n\t\t\toptions.AllowSynchronousIO = true;\n\t\t});\n\t\tservices.AddRazorPages()\n\t\t.AddNewtonsoftJson();\n\t\t// Configure dependencies for ReportsController.\n\t\tservices.TryAddSingleton<IReportServiceConfiguration>(sp =>\n\t\t\tnew ReportServiceConfiguration\n\t\t\t{\n\t\t\t\tReportingEngineConfiguration = ConfigurationHelper.ResolveConfiguration(sp.GetService<IWebHostEnvironment>()),\n\t\t\t\tHostAppId = \"ReportingCore3App\",\n\t\t\t\tStorage = new FileStorage(),\n\t\t\t\tReportResolver = new ReportFileResolver(\n\t\t\t\t\tSystem.IO.Path.Combine(sp.GetService<IWebHostEnvironment>().ContentRootPath, \"Reports\"))\n\t\t\t});\n\n\t\tservices.TryAddSingleton<IReportDesignerServiceConfiguration>(sp => new ReportDesignerServiceConfiguration\n\t\t{\n\t\t\tDefinitionStorage = new FileDefinitionStorage(\n\t\t\t\tPath.Combine(sp.GetService<Microsoft.AspNetCore.Hosting.IHostingEnvironment>().ContentRootPath, \"Reports\")),\n\t\t\tSettingsStorage = new FileSettingsStorage(\n\t\t\t\tPath.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"Telerik Reporting\"))\n\t\t});\n\t}\n\n\t// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n\tpublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n\t{\n\t\tif (env.IsDevelopment())\n\t\t{\n\t\t\tapp.UseDeveloperExceptionPage();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tapp.UseExceptionHandler(\"/Home/Error\");\n\t\t}\n\n\t\tapp.UseStaticFiles();\n\t\tapp.UseRouting();\n\t\tapp.UseAuthorization();\n\t\tapp.UseEndpoints(endpoints =>\n\t\t{\n\t\t\tendpoints.MapControllers();\n\t\t\tendpoints.MapControllerRoute(\n\t\t\t\tname: \"default\",\n\t\t\t\tpattern: \"{controller=Home}/{action=Index}/{id?}\");\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client Binding Timeouts in C#\nDESCRIPTION: This C# code snippet shows how to programmatically create a `BasicHttpBinding` with custom timeout settings for the client.  The `MaxBufferSize` and `MaxReceivedMessageSize` are set to `int.MaxValue`, and `ReceiveTimeout` and `SendTimeout` are configured to 10 minutes. The code then creates a `ReportServiceClient` instance using the configured binding and endpoint address.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-increase-the-timeout-value-of-a-wcf-service.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nReportServiceClient IReportServiceClientFactory.Create(System.Uri remoteAddress)\n{\n\tvar binding = new BasicHttpBinding() // or BasicHttpBinding(BasicHttpSecurityMode.Transport) overload if SSL is used\n\t{\n\t\tMaxBufferSize = int.MaxValue,\n\t\tMaxReceivedMessageSize = int.MaxValue,\n\t\tReceiveTimeout = new TimeSpan(0, 10, 0),\n\t\tSendTimeout = new TimeSpan(0, 10, 0)\n\t};\n\tvar endpointAddress = new EndpointAddress(remoteAddress);\n\treturn new ReportServiceClient(binding, endpointAddress);\n}\n```\n\n----------------------------------------\n\nTITLE: Registry Key for RIA Services (64-bit)\nDESCRIPTION: These registry keys are associated with RIA Services and may cause issues with the Visual Studio Toolbox. Removing these keys can resolve problems related to slow loading or duplicated toolbox items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Silverlight\\v4.0\\AssemblyFoldersEx\\Ria Services v1.0 Silverlight Libraries\\Toolbox\n```\n\nLANGUAGE: text\nCODE:\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Silverlight\\v5.0\\AssemblyFoldersEx\\Ria Services v1.0 Silverlight Libraries\\Toolbox\n```\n\n----------------------------------------\n\nTITLE: Registering Custom IReportDocumentResolver in C#\nDESCRIPTION: This C# code snippet demonstrates how to register the custom IReportDocumentResolver within the ReportServiceConfiguration in Program.cs or Startup.cs. It registers the CustomReportDocumentResolver, injecting the IConfiguration dependency which is required to access the encrypted connection strings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-encrypted-connection-strings-telerik-reporting.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\n// Configure dependencies for ReportsController.\nbuilder.Services.TryAddSingleton<IReportServiceConfiguration>(sp =>\n    new ReportServiceConfiguration\n    {\n        HostAppId = \"ReportingNet8\",\n        Storage = new FileStorage(),\n        ReportSourceResolver = new CustomReportSourceResolver(sp.GetService<IConfiguration>()),\n        ReportDocumentResolver = new CustomReportDocumentResolver(sp.GetService<IConfiguration>())\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring ADO.NET Database Cache Provider in XML\nDESCRIPTION: XML configuration for the ADO.NET cache provider, which requires specifying the ADO.NET provider name and connection string to the database. The ProviderName parameter indicates the SQL provider to use, and ConnectionString specifies the database connection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-the-database-cache-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<Cache provider=\"ADO.NET\">\n\t\t<Providers>\n\t\t\t<Provider name=\"ADO.NET\">\n\t\t\t\t<Parameters>\n\t\t\t\t\t<Parameter name=\"ProviderName\" value=\"System.Data.SqlClient\" />\n\t\t\t\t\t<Parameter name=\"ConnectionString\" value=\"MyConnectionString\" />\n\t\t\t\t</Parameters>\n\t\t\t</Provider>\n\t\t</Providers>\n\t</Cache>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Setting View Encapsulation for Style URLs in Angular\nDESCRIPTION: This TypeScript snippet changes the view encapsulation setting of the Angular component to None, which is necessary when using styleUrls to reference external CSS files.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewEncapsulation } from '@angular/core';\n@Component({\n\tencapsulation: ViewEncapsulation.None\n```\n\n----------------------------------------\n\nTITLE: Installing Required Assemblies for WPF Viewer\nDESCRIPTION: This solution outlines how to correctly install the necessary assemblies for the WPF ReportViewer through the Visual Studio NuGet Package Manager or the Package Manager Console. It emphasizes the importance of having the correct version of the Microsoft.AspNet.WebApi.Client package to avoid the MethodAccessException.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/wpf-viewer-method-access-exception.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nInstall-Package Microsoft.AspNet.WebApi.Client\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Rendering Extensions for PDF/A Support\nDESCRIPTION: XML configuration that sets up multiple PDF rendering extensions - one for PDF/A export with compliance level PDF/A-3b, and another hidden extension for printing functionality with default compliance level. This configuration allows both PDF/A export and JavaScript-enabled printing to work properly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-viewer-print-fails-due-to-pdfa-compliance-level.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n  <render>\n    <extension name=\"PdfExport\"\n               type=\"Telerik.Reporting.ImageRendering.PdfReport, Telerik.Reporting, Version=12.2.18.1129, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n               description=\"PDF/A\">\n      <parameters>\n        <parameter name=\"ComplianceLevel\" value=\"PDF/A-3b\"></parameter>\n      </parameters>\n    </extension>\n    <extension name=\"PDF\" visible=\"false\"></extension>\n      ....\n  </render>\n</extensions>\n```\n\n----------------------------------------\n\nTITLE: Sample DELETE Request for Releasing a Report Instance\nDESCRIPTION: Example of a DELETE request with specific client and instance IDs to release a report instance from the Telerik Reporting REST Service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/report-instances-api/release-report-instance.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/reports/clients/2c3d/instances/4d3c HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: HTML5 Report Viewer Template Changes\nDESCRIPTION: Modified template file showing the addition of trv-report-pager class and non-breaking space between Export button icons\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2017/r1-2017-sp2.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<li class=\"trv-report-pager\">\n    <!-- Page number input item -->\n</li>\n\n<!-- Export button icons with non-breaking space -->\n<span>&nbsp;</span>\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with Custom Template\nDESCRIPTION: JavaScript code for initializing the Telerik Report Viewer with a custom template URL. This enables customization of the tooltip appearance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\">\n\n\t\t$(document).ready(function () {\n\t\t\t$(\"#reportViewer1\")\n\t\t\t\t.telerik_ReportViewer({\n\t\t\t\t…,\n\t\t\t\ttemplateUrl: 'ReportViewer/templates/telerikReportViewerTemplate.html',…,\n\t\t\t});\n\t\t});\n\t</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring appData Path in XML for Windows Systems\nDESCRIPTION: XML configuration example showing how to set a Windows-based file path for temporary application data in Telerik Reporting. This specifies the absolute path to the folder (c:\\temp) that will be used to store temporary data like Map tiles cache and SQLite assemblies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/appdata-element.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    …\n    <Telerik.Reporting>\n        <appData path=\"c:\\temp\" />\n    </Telerik.Reporting>\n    …\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Unpackaging TRDP Report Definition in Telerik Reporting with C#\nDESCRIPTION: This code snippet demonstrates how to unpackage a predefined .TRDP report definition using the ReportPackager class in C#. It reads a .TRDP file and extracts the report definition, returning a Report object.  This allows the report to be loaded and used within the application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/package-report-definition.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstring packageFilePath = @\"C:\\Packages\\MyReport.trdp\";\nTelerik.Reporting.Report report = null;\n\nTelerik.Reporting.ReportPackager reportPackager = new Telerik.Reporting.ReportPackager();\nusing (FileStream packageStream = new FileStream(packageFilePath, FileMode.Open))\n{\n    report = reportPackager.Unpackage(packageStream);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OleDB Data Connection for MS Access\nDESCRIPTION: Steps to establish a database connection to a Microsoft Access database file using OleDB data provider in Telerik Reporting. Requires selecting the OleDB provider and browsing to the specific .accdb or .mdb file location.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/using-ms-access-database-in-the-report.md#2025-04-21_snippet_0\n\nLANGUAGE: OleDB\nCODE:\n```\nData Source = Microsoft Access Database File (OLE DB)\n```\n\n----------------------------------------\n\nTITLE: Configuring App.config for Npgsql in .NET Framework Report Designer\nDESCRIPTION: This XML configuration adds binding redirects and registers the Npgsql data provider for use with the Telerik Report Designer in a .NET Framework environment.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/configuring-postgres-with-npgsql.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n\t<configSections>\n\t\t<section\n\t\t\t\tname=\"Telerik.Reporting\"\n\t\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\"\n\t\t\t\tallowLocation=\"true\"\n\t\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\n\t<runtime>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"Npgsql\" culture=\"neutral\" publicKeyToken=\"5d8b90d52f46fda7\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-8.0.4.0\" newVersion=\"8.0.4.0\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"Microsoft.Bcl.AsyncInterfaces\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-8.0.0.0\" newVersion=\"8.0.0.0\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Numerics.Vectors\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-4.1.4.0\" newVersion=\"4.1.4.0\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-6.0.0.0\" newVersion=\"6.0.0.0\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Buffers\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-4.0.3.0\" newVersion=\"4.0.3.0\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Threading.Tasks.Extensions\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-4.2.0.1\" newVersion=\"4.2.0.1\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.ValueTuple\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-4.0.3.0\" newVersion=\"4.0.3.0\" />\n\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n\n\t<system.data>\n\t\t<DbProviderFactories>\n\t\t\t<add name=\"Npgsql Data Provider\"\n\t\t\t\tinvariant=\"Npgsql\"\n\t\t\t\tdescription=\".NET Framework Data Provider for Postgresql Server\"\n\t\t\t\ttype=\"Npgsql.NpgsqlFactory, Npgsql, Version=8.0.4.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\" />\n\t\t</DbProviderFactories>\n\t</system.data>\n<configuration>\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting Expression for Row Color\nDESCRIPTION: Expression to evaluate a Flag field value for conditional formatting. When the Flag field equals True, the specified background color will be applied to the row.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/change-row-color-based-on-value.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n=Fields.Flag\n```\n\n----------------------------------------\n\nTITLE: Report Viewer Styling\nDESCRIPTION: CSS styles for positioning and sizing the report viewer container.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/manual-setup.md#2025-04-21_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\n\t\t#reportViewer1 {\n\t\t\tposition: absolute;\n\t\t\tleft: 5px;\n\t\t\tright: 5px;\n\t\t\ttop: 5px;\n\t\t\tbottom: 5px;\n\t\t\tfont-family: 'segoe ui', 'ms sans serif';\n\t\t\toverflow: hidden;\n\t\t}\n\t</style>\n```\n\n----------------------------------------\n\nTITLE: Authenticating User and Obtaining Access Token\nDESCRIPTION: Logs in to the Report Server using username and password, obtaining a bearer token for subsequent authenticated requests\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/export-a-report-from-telerik-report-server-via-dot-net-client.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic string LogIn(string usernameInput, string passwordInput)\n{\n    var data = new FormUrlEncodedContent(new[]{\n        new KeyValuePair<string, string>( \"grant_type\" ,\"password\" ),\n        new KeyValuePair<string, string>( \"username\" , usernameInput ),\n        new KeyValuePair<string, string>( \"password\" , passwordInput )\n    });\n\n    HttpResponseMessage response = client.PostAsync(reportServerAddress + \"Token\", data).Result;\n    response.EnsureSuccessStatusCode();\n\n    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();\n    dynamic result = serializer.DeserializeObject(response.Content.ReadAsStringAsync().Result);\n    return result[\"access_token\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with sendEmailBegin Event Handler\nDESCRIPTION: Example showing how to initialize a Telerik Report Viewer with a sendEmailBegin event handler. The event triggers before the report is exported and emailed, allowing for custom handling of the export process.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/sendemailbegin(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\tsendEmailBegin: function(e) { console.log(\"This event handler will be called before exporting the report in \" + arguments.format + \" and sending the E-mail message\"); }\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Data and Grouping\nDESCRIPTION: This snippet initializes properties related to data binding, grouping, and filtering used in reports. It ensures that reports can dynamically receive data from specified sources and apply necessary filters and groupings for effective data representation. Specific dependencies include data sources that can be referenced from the Telerik Reporting backend.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/localizing-the-web-report-designer.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nthis.Groupings = \"Groupings\";\nthis.Sortings = \"Sortings\";\nthis.Filters = \"Filters\";\nthis.ReportParameters = \"Report parameters\";\nthis.AccessibleDescription = \"Accessible description\";\nthis.AccessibleRole = \"Accessible role\";\nthis.ConditionalFormatting = \"Conditional formatting\";\n```\n\n----------------------------------------\n\nTITLE: Canceling Default Kendo Tooltips for Custom Implementation\nDESCRIPTION: JavaScript function to handle the viewerToolTipOpening event and cancel the default Kendo UI tooltips when implementing custom tooltip functionality.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onToolTipOpening(e, args) {\n\t\tif (args) {\n\t\t\t\targs.cancel = true;\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Dependencies to HTML\nDESCRIPTION: This snippet shows how to add necessary JavaScript dependencies to the `head` element of the HTML page. It includes jQuery and the Telerik Report Viewer JavaScript file.  The path to `telerikReportViewer` changes depending on whether the Reports service is hosted in the same project or in another application/Report Server.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/how-to-use-blazor-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n````HTML\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t@* For Reports service hosted in the same project: *@\n\t<script src=\"/api/reports/resources/js/telerikReportViewer\"></script>\n\t@* For Reports service hosted in another application / Report Server use absolute URI: *@\n\t@*<script src=\"https://demos.telerik.com/report-server/api/reports/resources/js/telerikReportViewer\"></script>*@\n````\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings\nDESCRIPTION: This snippet shows an example of an XML configuration for setting the connection string in the web.config or appsettings.json files.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<connectionStrings>\n\t\t<add name=\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\"\n\t\t\tconnectionString=\"Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=SSPI\"\n\t\t\tproviderName=\"System.Data.SqlClient\" />\n\t</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Defining Miscellaneous Report Properties\nDESCRIPTION: This snippet includes additional properties that customize various features of the report, such as formatting options, column settings, and print configurations. These settings provide further control over how reports appear and behave when rendered, and dependencies include relevant Telerik Reporting features that support these properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/localizing-the-web-report-designer.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nthis.ExternalStyleSheets = \"External style sheets\";\nthis.StyleName = \"Style name\";\nthis.StyleSheet = \"Style sheet\";\nthis.CanShrink = \"Can shrink\";\nthis.KeepTogether = \"Keep together\";\nthis.Anchoring = \"Anchoring\";\nthis.Docking = \"Docking\";\nthis.Location = \"Location\";\nthis.PrintOnFirstPage = \"Print on first page\";\nthis.PrintOnLastPage = \"Print on last page\";\nthis.TextWrap = \"Text wrap\";\nthis.Multiline = \"Multiline\";\nthis.CanGrow = \"Can grow\";\nthis.Angle = \"Angle\";\nthis.Format = \"Format\";\nthis.Value = \"Value\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Action for Bar Series\nDESCRIPTION: Adds a custom action to bar series with parameters for category, year, and sales data. Demonstrates programmatic report definition modification for interactive reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-winforms-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nvar customAction = new Telerik.Reporting.CustomAction();\ncustomAction.Parameters.Add(\"category\", \"=Fields.Category\");\ncustomAction.Parameters.Add(\"year\", \"=Fields.OrderDate.Year\");\ncustomAction.Parameters.Add(\"sales\", \"=Format('{0:C}', Sum(Fields.LineTotal)/1000.0)\");\nbarSeries1.SeriesGroup.Action = customAction;\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Document Page Not Ready in Telerik Reporting REST API\nDESCRIPTION: Example response when the requested page is not yet ready, returning a 202 Accepted status code with a JSON object indicating the page is still processing.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document-page.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\n\n{\n\t\"pageReady\": false,\n\t\"pageNumber\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Wrong Item Data Binding Example in C#\nDESCRIPTION: This snippet illustrates an incorrect practice of accessing report item fields directly in the report's event handling, which is discouraged when using out-proc session state. It emphasizes the need for proper design by using the Items collection instead.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\Processing\\OutProcSnippets.cs region=WrongItemDataBinding}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings with Provider in JSON Format\nDESCRIPTION: Example of configuring database connection strings with explicit provider name in JSON format. This format allows specifying both the connection string and the provider name as properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t//...\n\t\"ConnectionStrings\": {\n\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": {\n\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\"providerName\": \"System.Data.SqlClient\"\n\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String in app.config for .NET Core WinForms\nDESCRIPTION: This XML snippet shows how to add a connection string to the app.config file of a .NET Core WinForms application. The connection string is used by the Telerik Report to connect to an MSSQL database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/connecting-to-mssql-database-in-net-core-winforms-application.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<connectionStrings>\n  <add name=\"MyDemoConnectionString\" connectionString=\"Data Source=.\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True\" />\n</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with renderingBegin Event Handler in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Telerik HTML5 Report Viewer with a renderingBegin event handler. The event is triggered before rendering the report and allows for customization of the viewer's behavior.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/renderingbegin(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\trenderingBegin: function(e) { console.log(\"This event handler will be called before rendering the report.\"); }\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Report Source Model\nDESCRIPTION: This C# code snippet defines a custom model class `ReportSourceModel` to represent the `reportSource` property for the HTML5 Report Viewer. It includes properties for the report name (Report) and a dictionary to hold parameters (Parameters).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pass-parameters-to-html5-report-viewer-from-a-views-model.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReportSourceModel\n\t{\n\t\tpublic string Report { get; set; }\n\t\tpublic Dictionary<string, object> Parameters { get; set; }\n\t}\n```\n\n----------------------------------------\n\nTITLE: New REST Service Endpoint Path\nDESCRIPTION: Defines the new REST service endpoint path that returns the version of the server-side service assembly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2021/r3-2021-sp1.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/api/reports/version\n```\n\n----------------------------------------\n\nTITLE: Fallback Pagination Strategy for Limited Printers\nDESCRIPTION: Shows how to configure report pagination when continuous paper is not supported by the printer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reports-with-continuouspaper-or-custom-paperkind-cut-on-some-printers.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Alternative approach for printers with limited paper sizes\npageSettings.ContinuousPaper = false;\npageSettings.PaperKind = PaperKind.A4;\n// Report will be paginated automatically\n```\n\n----------------------------------------\n\nTITLE: Overriding PreviewWebServiceData Method in ASP.NET Framework\nDESCRIPTION: This code snippet shows how to override the PreviewWebServiceData method in the ReportDesignerControllerBase class to return a plain text response instead of JSON. This adjustment ensures that the data can be correctly displayed on the user interface without encountering issues with displaying '[object Object]'. The required dependency is the Telerik Reporting library, specifically the ReportDesignerControllerBase class.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/webservicedatasource-preview-displays-object-object-in-net-framework.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic override IHttpActionResult PreviewWebServiceData(DataSourceInfo dataSourceInfo) {\n\tvar baseResult = (ResponseMessageResult)base.PreviewWebServiceData(dataSourceInfo);\n\tvar jsonString = baseResult.Response.Content.ReadAsStringAsync().Result;\n\n\treturn Ok(jsonString);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message for Unresolved Report in Telerik Reporting\nDESCRIPTION: This error message appears when the Telerik Reporting service cannot resolve the report definition file. It indicates issues with file paths, permissions, or environment restrictions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/unable-to-get-report-parameters-report-cannot-be-resolved.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUnable to get report parameters.\\nReport reportName.trdp/x cannot be resolved.\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with ready() Event Handler\nDESCRIPTION: Example showing how to initialize the Telerik Report Viewer with a ready event handler using jQuery. The viewer is configured with a service URL and report source, demonstrating the basic setup pattern.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/ready().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\tready: function() {\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Updating kendoDatePicker Date Format in HTML5 MVC Report Viewer\nDESCRIPTION: This script modifies the date format of the kendoDatePicker within the ReportViewer's UpdateUi event to the specified format. It uses a flag to ensure the date format change occurs only once during the viewer's lifecycle. Dependencies include jQuery and Kendo UI libraries. Key parameter: dateFormat, which defines the desired date format. Input is the existing date format in the viewer, output is the updated format.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-change-report-parameter-date-format-in-html5-mvc-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n\tvar dateUpdated = false;// Flag to indicate that date format has been set\n\n\tfunction setDateFormat(dateFormat) {\n\t\tvar datepicker = $(\"#reportViewer1\").find(\"[data-role='datepicker']\");\n\t\tif (datepicker.length > 0) {\n\t\t\tdateUpdated = true;\n\n\t\t\tfor (var i = 0; i < datepicker.length; i += 1) {\n\t\t\t\tvar dp = $(datepicker[i]).data(\"kendoDatePicker\");\n\t\t\t\tvar currentFormat = dp.options.format;\n\t\t\t\tvar oldValue = dp.value();\n\n\t\t\t\tdp.options.format = dateFormat;\n\t\t\t\tdp.value(oldValue);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction onUpdateUi() {\n\t\t// Skip if date format already set\n\t\tif (!dateUpdated) {\n\t\t\tsetDateFormat(\"dd/MM/yyyy\");//SPECIFY THE DATE FORMAT HERE\n\t\t}\n\t}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Table with Optional Footer in Telerik Reporting C#\nDESCRIPTION: The snippet shows how to add a row to a table and configure a totals row in Telerik Reporting using C#. It requires the Telerik Reporting library. The `table.Body.Rows.Add` method adds rows to the table, and conditionally, a totals row is created and assigned a formula using `Sum(Fields.[columnName])` for each column. The totals row is conditionally visible based on `addTotalRow` boolean value, allowing users to include a footer with summed values per column.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-modify-table-with-preset-styles-and-width-dynamically.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ntable.Body.Rows.Add(new TableBodyRow(Telerik.Reporting.Drawing.Unit.Inch(0.2395833283662796D)));\n}\n\nfor (int i = 0; i < columnNames.Count(); i++)\n{\n    //...\n\n    if (addTotalRow)\n    {\n        // \n        // textBoxTotalsRow\n        //\n        TextBox totalsRowTextBox = new TextBox();\n        totalsRowTextBox.Size = new Telerik.Reporting.Drawing.SizeU(columnnWidth, Telerik.Reporting.Drawing.Unit.Inch(0.2395833283662796D));\n        totalsRowTextBox.StyleName = tableHeaderStyleName;\n        totalsRowTextBox.Size = new Telerik.Reporting.Drawing.SizeU(Telerik.Reporting.Drawing.Unit.Inch(1), Telerik.Reporting.Drawing.Unit.Inch(0.2D));\n        totalsRowTextBox.Name = \"totalsRowTextBox\" + i.ToString();\n        totalsRowTextBox.Value = $\"= Sum(Fields.[{columnName}])\";\n\n        table.Body.SetCellContent(1, i, totalsRowTextBox);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Report Viewer Options\nDESCRIPTION: This function sets the necessary parameters for the report viewer before it initializes. It modifies the viewer's options based on the current report and sets rendering events to specific handler functions. Dependencies include jQuery and Telerik-specific libraries.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onViewerInitializing(e, args) {\n\t// e: jQuery event;\n\t// args: IViewerPreInitEventArgs ->\n\t//      reportViewerOptions: report viewer's options. All viewer's options available.\n\n\targs.reportViewerOptions.parameters = {\n\t\teditors: {\n\t\t\tsingleSelect: telerikReportViewer.ParameterEditorTypes.COMBO_BOX,\n\t\t\tmultiSelect: telerikReportViewer.ParameterEditorTypes.COMBO_BOX\n\t\t}\n\t};\n\targs.reportViewerOptions.renderingBegin = onViewerRenderingBegin;\n\targs.reportViewerOptions.renderingEnd = onViewerRenderingEnd;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ITextResources with Hardcoded Translations\nDESCRIPTION: Shows how to create a custom class implementing ITextResources interface with hardcoded Spanish translations for Report Viewer text resources.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/silverlight-application/report-viewer-localization.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomResources : Telerik.ReportViewer.Silverlight.ITextResources\n{\n\tpublic string AllFiles\n\t{\n\t\tget\n\t\t{\n\t\t\treturn \"Todos Archivos\";\n\t\t}\n\t}\n\n\tpublic string BackToolTip\n\t{\n\t\tget\n\t\t{\n\t\t\treturn \"Navega hacia atrás\";\n\t\t}\n\t}\n\n\tpublic string CurrentPageToolTip\n\t{\n\t\tget\n\t\t{\n\t\t\treturn \"Página corriente\";\n\t\t}\n\t}\n\n\t//...... Implement the rest of the properties ......\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Class CustomResources\n\tImplements Telerik.ReportViewer.Silverlight.ITextResources\n\n\tPublic ReadOnly Property AllFiles() As String Implements ReportViewer.Silverlight.ITextResources.AllFiles\n\t\tGet\n\t\t\tReturn \"Todos Archivos\"\n\t\tEnd Get\n\tEnd Property\n\n\tPublic ReadOnly Property BackToolTip() As String Implements ReportViewer.Silverlight.ITextResources.BackToolTip\n\t\tGet\n\t\t\tReturn \"Navega hacia atrás\"\n\t\tEnd Get\n\tEnd Property\n\n\tPublic ReadOnly Property CurrentPageToolTip() As String Implements ReportViewer.Silverlight.ITextResources.CurrentPageToolTip\n\t\tGet\n\t\t\tReturn \"Página corriente\"\n\t\tEnd Get\n\tEnd Property\n\n\t'...... Implement the rest of the properties ......\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Sample DELETE Request for Unregistering a Client\nDESCRIPTION: Example of an HTTP DELETE request to unregister a client with ID '2c3d' from the Telerik Reporting REST Service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/clients-api/unregister-client.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/reports/clients/2c3d HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Formatting MS SQL Time Data Type and .NET TimeSpan\nDESCRIPTION: This snippet shows how to apply custom formatting to MS SQL Time data types and .NET TimeSpan objects. It demonstrates handling conversions and formatting that involve TimeSpan since MS SQL Time is converted to TimeSpan by ADO.NET providers. Key formats include {0:hh\\:mm} for short time and {0:g} for long time. It cannot handle formats with 'AM' and 'PM' as TimeSpan only represents time intervals.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/format-mssql-time-and-dotnet-timespan.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"{0:hh\\\\:mm}\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"{0:g}\"\n```\n\n----------------------------------------\n\nTITLE: Attach Items Events Example in VB.NET\nDESCRIPTION: This snippet in VB.NET demonstrates how to properly attach events to report items within the ItemDataBinding event as part of utilizing out-proc session state.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/overview.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\Processing\\OutProcSnippets.vb region=AttachItemsEvents}}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAccessDataSource with Named Connection String in VB.NET\nDESCRIPTION: This snippet demonstrates how to use a named connection string from a configuration file for the OpenAccessDataSource component in VB.NET. This is the recommended approach for easier maintenance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/configuring-the-database-connectivity-with-the-openaccessdatasource-component.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim openAccessDataSource As New OpenAccessDataSource()\nopenAccessDataSource.ContextTypeName = GetType(AdventureWorksModel.AdventureWorksEntities).AssemblyQualifiedName\nopenAccessDataSource.OpenAccessContextOptions = OpenAccessContextOptions.Default\nopenAccessDataSource.Member = \"SalesOrderHeaders\"\nopenAccessDataSource.ConnectionString = \"AdventureWorksConnectionString\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PageFooterSumUntilNow Custom Aggregate Function in C#\nDESCRIPTION: This custom aggregate function accumulates values within a group up to the current point, showing the running total at the end of each page. It uses ThreadStatic fields to maintain state while ensuring thread safety in web applications.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/summary-per-page-when-group-is-on-multiple-pages.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[AggregateFunction(Description = \"Special sum aggregate. Output: (value1, value2, ...)\", Name = \"PageFooterSumUntilNow\")]\nclass PageFooterSumUntilNow : IAggregateFunction\n{\n    [ThreadStatic]\n    static decimal result;\n\n    [ThreadStatic]\n    static string currentGroupByValue;\n\n    public void Accumulate(object[] values)\n    {\n        // The aggregate function expects two parameters\n        object value = values[0];\n\n        // null values are not aggregated\n        if (null == value)\n        {\n            return;\n        }\n\n        var groupByValue = (string)values[1];\n\n        if (groupByValue != currentGroupByValue)\n        {\n            currentGroupByValue = groupByValue;\n            result = 0M;\n        }\n\n        result += (decimal)value;\n    }\n\n    public object GetValue()\n    {\n        return result;\n    }\n\n    public void Init()\n    {\n    }\n\n    public void Merge(IAggregateFunction aggregateFunction)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Telerik Web Report Designer with Settings\nDESCRIPTION: This snippet initializes the Telerik Web Report Designer and configures various settings like session persistence, service URL, and report options. It also specifies callback functions to handle errors and notifications during the operation. Dependencies include jQuery and the Telerik reporting library.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n\twindow.TelerikWebReportDesignerDebugMode = true;\n\t$(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\tpersistSession: false,\n\t\ttoolboxArea: {\n\t\t\tlayout: \"list\"\n\t\t},\n\t\tserviceUrl: \"api/reportdesigner/\",\n\t\treport: \"Dashboard.trdp\",\n\t\t// design/preview\n\t\tstartMode: \"design\",\n\t\treportViewerOptions: {\n\t\t\treportSourceParameters: {\n\t\t\t\tReportYear: 2002\n\t\t\t},\n\t\t\tscaleMode: \"SPECIFIC\",\n\t\t\tscale: 1.5,\n\t\t\tviewMode: \"INTERACTIVE\",\n\t\t\tpageMode: \"CONTINUOUS_SCROLL\"\n\t\t},\n\t\terror: onError,\n\t\tnotificationShowing: onNotificationShowing,\n\t\tviewerInitializing: onViewerInitializing,\n\t\tviewerLoading: onViewerLoading\n\t}).data(\"telerik_WebReportDesigner\");\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Report Viewer to ASP.NET Web Forms Page\nDESCRIPTION: This snippet shows how to add the Telerik Report Viewer control to an ASP.NET Web Forms page. It includes basic configuration options such as size, accessibility settings, and report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/combine-chart-and-report-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: ASP.NET\nCODE:\n```\n<telerik:ReportViewer\n    ID=\"reportViewer1\"\n    Width=\"1300px\"\n    Height=\"900px\"\n    EnableAccessibility=\"false\"\n    runat=\"server\">\n    <ReportSource IdentifierType=\"UriReportSource\" Identifier=\"SampleReport.trdp\"\n    </ReportSource>\n    <%-- If set to true shows the Send Mail Message toolbar button --%>\n    <SendEmail Enabled=\"false\" />\n</telerik:ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP PUT Request for Applying Document Action\nDESCRIPTION: Example HTTP PUT request demonstrating the proper format for applying an interactive action on a document, utilizing specific IDs for client, instance, document, and action.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/apply-interactive-action-on-document.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/reports/clients/2c3d/instances/4d3c/documents/5x3a/actions/4ah1 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Selecting Product Details - SQL Query\nDESCRIPTION: This SQL query fetches product name, ID, and number along with category ID from the AdventureWorks database. It joins the Product, ProductSubcategory, and ProductCategory tables to obtain all necessary details.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-master-detail-report-using-subreport-item.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n    P.Name,ProductID,ProductNumber,PC.ProductCategoryID\nFROM\n    Production.Product P,\n    Production.ProductSubcategory PS,\n    Production.ProductCategory PC\nWHERE\n    P.ProductSubcategoryID=PS.ProductSubcategoryID\n    AND PS.ProductCategoryID=PC.ProductCategoryID\n```\n\n----------------------------------------\n\nTITLE: Custom Filtering Method in OpenAccessContext in C#\nDESCRIPTION: Shows a custom method in the OpenAccessContext class that uses the Where extension method to filter Product entities. This allows for offloading certain tasks to the database level.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/retrieving-data-from-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<Product> GetProductsByCategory(string categoryName)\n{\n    return this.Products.Where(p => p.ProductSubcategory.ProductCategory.Name == categoryName);\n}\n```\n\n----------------------------------------\n\nTITLE: Viewport Meta Tag Configuration\nDESCRIPTION: Meta tag setup for controlling mobile browser layout.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/manual-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameter JSON Entity in Telerik Reporting\nDESCRIPTION: Example of a complete Parameter JSON Entity showing various configuration options for a report parameter, including name, type, available values, and settings\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/parameter.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"name\": \"p2\",\n\t\"id\": \"p2\",\n\t\"type\": \"System.String\",\n\t\"text\": \"Please input p2\",\n\t\"multivalue\": false,\n\t\"allowNull\": false,\n\t\"allowBlank\": false,\n\t\"isVisible\": true,\n\t\"autoRefresh\": false,\n\t\"hasChildParameters\": false,\n\t\"childParameters\": [\"p2\"],\n\t\"availableValues\": [\n\t\t\t{\"name\": \"Sofia\", \"value\": \"Sofia\"},\n\t\t\t{\"name\": \"Berlin\", \"value\": \"Berlin\"}\n\t],\n\t\"value\": \"Sofia\",\n\t\"label\": \"Sofia\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Accessibility Key Map in HTML5 Report Viewer\nDESCRIPTION: This snippet demonstrates how to use the accessibilityKeyMap() method to get the current key shortcuts map for the HTML5 Report Viewer when in accessible mode. It assumes a report viewer instance has been created with the ID 'reportViewer1'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/accessibilitykeymap().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nvar map = reportViewer.accessibilityKeyMap();\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Editors in Telerik ReportViewer\nDESCRIPTION: XML configuration for setting parameter editor types in the Telerik ReportViewer widget. This example shows how to specify ComboBox editors for both single and multi-select parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/how-to-change-parameter-editors-type.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:ReportViewer EnableAccessibility=\"false\" ID=\"reportViewer1\" runat=\"server\">\n\t...\n\t<Parameters>\n\t\t<Editors SingleSelect=\"ComboBox\" MultiSelect=\"ComboBox\"></Editors>\n\t</Parameters>\n</telerik:ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Instantiating Custom Shape in VB.NET\nDESCRIPTION: This VB.NET code snippet shows how to create an instance of a custom shape and add it to a report container at runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/shape.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim shape As New Shape()\nshape.ShapeType = New CustomShape()\nshape.Location = New PointU(Telerik.Reporting.Drawing.Unit.Inch(1), Telerik.Reporting.Drawing.Unit.Inch(1))\nshape.Size = New SizeU(Telerik.Reporting.Drawing.Unit.Inch(1), Telerik.Reporting.Drawing.Unit.Inch(1))\n\n' Add the shape to a container\nMe.Items.Add(shape)\n```\n\n----------------------------------------\n\nTITLE: HTML Template for KendoUI Tooltip in Report Viewer\nDESCRIPTION: HTML template definition for the KendoUI Tooltip used in the report viewer. It consists of a container with title and text elements that can be styled individually.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<template id=\"trv-pages-area-kendo-tooltip\">\n\t\t\t<div class=\"trv-pages-area-kendo-tooltip\">\n\t\t\t\t<div class=\"trv-pages-area-kendo-tooltip-title\"></div>\n\t\t\t\t<div class=\"trv-pages-area-kendo-tooltip-text\"></div>\n\t\t\t</div>\n\t\t</template>\n```\n\n----------------------------------------\n\nTITLE: Exporting to Single Document Formats in VB.NET using Telerik Reporting\nDESCRIPTION: This snippet shows how to export a report to a single document format (PDF, XLSX, DOCX, etc.) using the RenderReport method in VB.NET. The report is rendered to a byte array and saved to a file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/generate-reports-locally.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim reportProcessor As New ReportProcessor()\nDim instanceReportSource As New InstanceReportSource()\ninstanceReportSource.ReportDocument = New Report1()\n\nTry\n    Dim result As RenderingResult = reportProcessor.RenderReport(\"PDF\", instanceReportSource, Nothing)\n\n    Using fs As New FileStream(\"report.pdf\", FileMode.Create)\n        fs.Write(result.DocumentBytes, 0, result.DocumentBytes.Length)\n    End Using\nCatch ex As Exception\n    MessageBox.Show(ex.Message)\nEnd Try\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Application\nDESCRIPTION: NPM command to start the Angular application\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-reporting-service.md#2025-04-21_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Binding Redirects in XML\nDESCRIPTION: This XML snippet demonstrates how to configure assembly binding redirects within the runtime section of the application configuration file. It ensures interoperability with older versions of Telerik Reporting by specifying the assembly identity, old version range, and the new version to redirect to, ensuring compatibility and proper assembly resolution.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/configuration/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<runtime>\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t<!--\n\t<probing privatePath=\"path-to-the-assemblies\"/>\n\t-->\n\t<dependentAssembly>\n\t\t<!-- Required for interoperability with older versions of Telerik Reporting -->\n\t\t<assemblyIdentity name=\"Telerik.Reporting\" culture=\"neutral\" publicKeyToken=\"a9d7983dfcc261be\"/>\n\t\t<bindingRedirect oldVersion=\"0.0.0.0-{{buildversion}}\" newVersion=\"{{buildversion}}\"/>\n\t</dependentAssembly>\n</assemblyBinding>\n</runtime>\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Link for Modified Tooltip Styles\nDESCRIPTION: HTML link tag to reference a custom CSS file for styling the report viewer, including tooltip appearance customizations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"styles/my-telerikReportViewer.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Table Columns with CSS\nDESCRIPTION: CSS styling rules for configuring table column widths in the documentation. Sets the first column to 28% width and the second column to 72% width.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/api-reference/options.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntable th:first-of-type {\n    width: 28%;\n}\ntable th:nth-of-type(2) {\n    width: 72%;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ObjectDataSource Parameters in VB.NET\nDESCRIPTION: This code snippet demonstrates how to programmatically set parameters for an ObjectDataSource component in VB.NET. It creates an ObjectDataSource, adds parameters with names and values, and sets the DataSource and DataMember properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/using-parameters-with-the-objectdatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim objectDataSource As New ObjectDataSource()\n\nobjectDataSource.DataSource = GetType(SampleData)\nobjectDataSource.DataMember = \"GetOrders\"\n\nobjectDataSource.Parameters.Add(New Parameter(\"productName\", \"Chai\"))\nobjectDataSource.Parameters.Add(New Parameter(\"orderDate\", \"=Today()\"))\n\nMe.DataSource = objectDataSource\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectionStrings as Array in JSON for Telerik Reporting\nDESCRIPTION: A JSON configuration example that sets up connection strings as an array of objects, each containing name, connection string, and provider information. This format supports multiple connection strings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-core-2.1-and-2.2.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n...\n\t\"ConnectionStrings\": [\n\t{\n\t\t\"name\": \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\",\n\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\"providerName\": \"System.Data.SqlClient\"\n\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Methods for Localization Resource Retrieval in C#\nDESCRIPTION: This code snippet showcases how to create a method that retrieves localization resource strings, allowing for dynamic resource management when customizing the WPF Report Viewer. The method can be adapted to pull data from various sources, such as databases.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/customizing/report-viewer-localization.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Method to retrieve localized string from a source\npublic class CustomTextResources : ITextResources\n{\n    public string this[string resourceKey]\n    {\n        get\n        {\n            // Logic to retrieve the resource string from a database or alternative source\n            return GetResourceFromDatabase(resourceKey);\n        }\n    }\n\n    private string GetResourceFromDatabase(string resourceKey)\n    {\n        // Custom logic to retrieve the string from a database\n        return \"Dynamic string for \" + resourceKey;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing CubeDataSource Component in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the CubeDataSource component in markdown. It highlights the component's ability to retrieve data from OLAP cubes using Microsoft Analysis Services and ADOMD.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe `CubeDataSource` component enables data items to retrieve data from an __OLAP__ cube using __Microsoft Analysis Services__ with little or no extra code. `CubeDataSource` uses the __ADOMD.NET__ client data provider internally to connect to __Microsoft Analysis Services__ and execute an __MDX__ query against the desired OLAP cube. The returned result set can be visualized directly by the __Report__ itself or using a __Table/Crosstab__ report item.\n```\n\n----------------------------------------\n\nTITLE: Post-R3 2016 Table Event Modification\nDESCRIPTION: Example of correctly modifying table items in events after R3 2016 using the processing instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/changes-on-items-in-report-events-are-not-applied.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvoid table_NeedDataSource(object sender, EventArgs e)\n{\n\tTelerik.Reporting.Processing.Table processingTable = (Telerik.Reporting.Processing.Table)sender;\n\tprocessingTable.DataSource = GetTableData();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Services for Telerik Reporting in ASP.NET Core Startup\nDESCRIPTION: Configures the necessary services for Telerik Reporting in the ConfigureServices method of the Startup class in an ASP.NET Core application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-implement-telerik-reporting-in-asp-net-core-mvc.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nIServiceCollection services;\n \n// This method gets called by the runtime. Use this method to add services to the container.\npublic void ConfigureServices(IServiceCollection services)\n{\n    this.services = services;\n    this.services.Configure<CookiePolicyOptions>(options =>\n    {\n        // This lambda determines whether user consent for non-essential cookies is needed for a given request.\n        options.CheckConsentNeeded = context => true;\n        options.MinimumSameSitePolicy = SameSiteMode.None;\n    });\n    this.services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n\n    // Configure dependencies for ReportServiceConfiguration.\n    services.TryAddSingleton<ConfigurationService>(sp => new ConfigurationService(sp.GetService<IHostingEnvironment>()));\n    services.TryAddScoped<IReportResolver>(sp =>\n      new ReportTypeResolver().AddFallbackResolver(new ReportFileResolver(\n        Path.Combine(sp.GetRequiredService<ConfigurationService>().Environment.WebRootPath, \"Reports\"))));\n    services.TryAddScoped<IReportServiceConfiguration>(sp =>\n      new ReportServiceConfiguration\n      {\n        ReportingEngineConfiguration = sp.GetRequiredService<ConfigurationService>().Configuration,\n        HostAppId = \"Html5DemoAppCore\",\n        Storage = new FileStorage(),\n        ReportResolver = sp.GetRequiredService<IReportResolver>()\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Using ReportProcessor with Configuration in C#\nDESCRIPTION: This C# code demonstrates how to use the ReportProcessor with the configuration obtained from the ConfigurationService. The ConfigurationService is injected into the MVC controller, allowing access to the application's configuration.  The ReportProcessor is then instantiated with the configuration, enabling it to use settings from appsettings.json.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pass-configuration-to-report-processor-in-asp-dot-net-core-without-rest-service.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nprivate readonly ConfigurationService configuration;\n\n\tpublic HomeController(ConfigurationService configuration)\n\t{\n\t\tthis.configuration = configuration;\n\t}\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nvar configuration = this.HttpContext.RequestServices.GetService(typeof(ConfigurationService)) as ConfigurationService;\n```\n\nLANGUAGE: CSharp\nCODE:\n```\nReportProcessor reportProcessor = new ReportProcessor(configuration.Configuration);\n```\n\n----------------------------------------\n\nTITLE: Implementing a controller action for URL parameter passing\nDESCRIPTION: Creates an action method that accepts parameters from the URL and builds a ReportModel to pass to the view. This allows report parameters to be specified in the URL query string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-report-source-and-parameters-through-model.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic ActionResult Report(string id, string parameter1, string parameter2)\n{\n\tDictionary<string, object> values = new Dictionary<string, object>() { { \"Parameter1\", parameter1 }, { \"Parameter2\", parameter2 } };\n\tReportModel reportModel = new ReportModel()\n\t{\n\t\tReportName = $\"{id}.trdp\",\n\t\tParameters = values\n\t};\n\treturn View(\"Index\", reportModel);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Telerik Reporting UserIdentity Issue\nDESCRIPTION: Detailed error message indicating a field not found in Telerik Reporting processing, specifically related to UserIdentity.Current in an ASP.NET Core application\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/field-not-found-telerik-reporting-processing-useridentity-current-error.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUnable to get report parameters.\nAn error has occured.\nField not found: 'Telerik.Reporting.Processing.UserIdentity.Current'\n```\n\n----------------------------------------\n\nTITLE: Testing Report Designer REST Service\nDESCRIPTION: Ensure the REST service operates by navigating to the designated URL, which should return a JSON containing culture-specific settings, such as decimal and list separators. This serves as a verification step for the REST service setup.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-dotnet.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"decimalSeparator\":\".\",\"listSeparator\":\",\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring SystemJS for Angular Report Viewer\nDESCRIPTION: This JSON snippet outlines the necessary configuration settings for SystemJS, mapping package paths for the Angular Report Viewer and jQuery to ensure proper loading in the Angular application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\nmap: {\n\t\t\t//...\n\t\t\t'@progress': 'npm:@progress',\n\t\t\t'@telerik': 'npm:@telerik',\n\t\t\t'jquery': 'npm:jquery/dist/jquery.js',\n\t\t},\n\t\tpackages: {\n\t\t\t//...\n\t\t\t// Telerik Angular Report Viewer package\n\t\t\t'@progress/telerik-angular-report-viewer': {\n\t\t\t\tmain: 'dist/cjs/main',\n\t\t\t\tformat: 'cjs',\n\t\t\t\tdefaultExtension: 'js'\n\t\t\t}\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Manipulating ReportViewer State\nDESCRIPTION: Example of controlling the ReportViewer state by executing commands and methods within a jQuery ready handler\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\tvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n\treportViewer.commands.goToPage.exec(2);\n\treportViewer.scale(1.5);\n});\n```\n\n----------------------------------------\n\nTITLE: Sample No Content Response for Successfully Released Report Instance\nDESCRIPTION: Example of a successful response to a release report instance request, returning a 204 No Content status code indicating the report instance was successfully destroyed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/report-instances-api/release-report-instance.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 NoContent\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Localize Package\nDESCRIPTION: NPM command to add the Angular localize package required for viewer localization\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-reporting-service.md#2025-04-21_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nng add @angular/localize\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Editors in HTML5 MVC Report Viewer\nDESCRIPTION: Example showing how to set parameter editor types using the Parameters method when initializing the Telerik Report Viewer widget. This code changes both SingleSelect and MultiSelect editors to ComboBox type.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/customizing/how-to-change-parameter-editors-type.md#2025-04-21_snippet_0\n\nLANGUAGE: CSHTML\nCODE:\n```\n@(Html.TelerikReporting().ReportViewer()\n    ...\n    .Parameters(new Parameters { Editors = new Editors { SingleSelect = EditorTypes.ComboBox, MultiSelect = EditorTypes.ComboBox} }))\n```\n\n----------------------------------------\n\nTITLE: Merging Resource Dictionaries in Silverlight App.xaml\nDESCRIPTION: This code snippet demonstrates how to merge resource dictionaries in the App.xaml file for a Silverlight application. It includes the required XAML for the application to reference the styling resources necessary for the Telerik Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/silverlight-application/how-to-add-report-viewer-to-a-silverlight-application.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Application x:Class=\"SilverlightApplication1.App\"\n\t\t\t\txmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n\t\t\t\txmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n\t\t\t\t>\n\t <Application.Resources>\n\t   <ResourceDictionary>\n\t\t <ResourceDictionary.MergedDictionaries>\n\t\t   <ResourceDictionary Source=\"/SilverlightApplication1;component/Themes/System.Windows.xaml\"/>\n\t\t   <ResourceDictionary Source=\"/SilverlightApplication1;component/Themes/Telerik.Windows.Controls.xaml\"/>\n\t\t   <ResourceDictionary Source=\"/SilverlightApplication1;component/Themes/Telerik.Windows.Controls.Input.xaml\"/>\n\t\t   <ResourceDictionary Source=\"/SilverlightApplication1;component/Themes/Telerik.Windows.Controls.Navigation.xaml\"/>\n\t\t   <ResourceDictionary Source=\"/SilverlightApplication1;component/Themes/Telerik.ReportViewer.Silverlight.xaml\"/>\n\t\t </ResourceDictionary.MergedDictionaries>\n\t   </ResourceDictionary>\n\t </Application.Resources>\n\t</Application>\n```\n\n----------------------------------------\n\nTITLE: Removing AspNetCoreHostingModel from CSPROJ file\nDESCRIPTION: This XML snippet demonstrates the configuration setting that causes PDF export failures in ASP.NET Core 2.2 projects when using InProcess hosting. Removing this setting from the CSPROJ file resolves the issue.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/export-to-pdf-fails-from-asp-dot-net-core-2-2-projects.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>\n```\n\n----------------------------------------\n\nTITLE: Adding Localization Script to Html5 Viewer\nDESCRIPTION: This HTML snippet demonstrates how to include a localization script for the Kendo Editor in a Telerik Reporting HTML5 Viewer. By placing this script in the head section before the viewer\\'s script, you ensure proper localization of the toolbar messages according to the specified culture (e.g., bg-BG for Bulgarian). Ensure to adjust the script\\'s source to match the desired language/culture and include the meta charset tag for correct symbol display.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/localize-html5-viewer-mail-message-editor-toolbar.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\\\"https://kendo.cdn.telerik.com/2021.3.1109/js/messages/kendo.messages.bg-BG.min.js\\\"></script>\n<meta charset=\\\"utf-8\\\">\n```\n\n----------------------------------------\n\nTITLE: Defining Viewer Container Style in AppComponent\nDESCRIPTION: This snippet shows how to define the style for the report viewer container within the AppComponent class.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class AppComponent {\n\t\tviewerContainerStyle = {\n\t\t\tposition: 'relative',\n\t\t\twidth: '1000px',\n\t\t\theight: '800px',\n\t\t\t['font-family']: 'ms sans serif'\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: HttpContent Extension Method for JSON Deserialization\nDESCRIPTION: Extension method implementation for HttpContent to support async JSON deserialization using System.Text.Json instead of JSON.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-reporting-rest-service-api-with-csharp-client.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static class HttpContentExtensions\n{\n\tpublic static async Task<T> ReadAsAsync<T>(this HttpContent content) =>\n\t\tawait System.Text.Json.JsonSerializer.DeserializeAsync<T>(await content.ReadAsStreamAsync());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SqlDataSource with SQL Query in VB.NET\nDESCRIPTION: This VB.NET code snippet shows how to set the ConnectionString and SelectCommand properties of a SqlDataSource component to retrieve data using an SQL query.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/selecting-data-with-the-sqldatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim sqlDataSource As New SqlDataSource()\nsqlDataSource.ConnectionString = \"Data Source=MYSERVER;Initial Catalog=AdventureWorks;Integrated Security=True\"\nsqlDataSource.SelectCommand = \"SELECT FirstName, LastName FROM Person.Contact\"\n```\n\n----------------------------------------\n\nTITLE: Setting DataSource for SubReport in Telerik Reporting\nDESCRIPTION: This snippet shows how to set the DataSource for a SubReport item dynamically based on the presence of a parent report. It allows for hierarchical representation of data by linking subreports to their respective parent data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hierarchical-report-from-nested-data.md#2025-04-21_snippet_0\n\nLANGUAGE: Telerik Reporting\nCODE:\n```\n\"Property path\\t|\\tExpression\\nDataSource\\t|\\t= ReportItem.Parent is Null ? ReportItem.DataSource : ReportItem.Parent.DataObject.List\"\n```\n\n----------------------------------------\n\nTITLE: Required Assemblies for Web Site Deployment\nDESCRIPTION: Essential assemblies needed for Telerik Reporting deployment in a Web Site project. These core assemblies provide the fundamental reporting functionality and must be included in the project's bin folder.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/deploying-web-site.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* Telerik.Reporting.dll\n* Telerik.ReportViewer.WebForms.dll\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML Input for Changing Report Source\nDESCRIPTION: This HTML snippet creates an input button that allows users to change the report source of the viewer. It serves as a trigger for a JavaScript event that will execute the clearReportSource() method when clicked.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/clearreportsource().md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input id=\"buttonChangeReportSource\" type=\"submit\" value=\"Change Report Source\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Dependencies\nDESCRIPTION: Includes required Kendo UI styles and optional JavaScript components for enhanced functionality.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/manual-setup.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- the required Kendo styles -->\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Handling PLANET Barcode Length Requirements\nDESCRIPTION: PLANET barcodes have strict length requirements of 11 or 13 characters. When generating PLANET barcodes, ensure the input value matches these precise length specifications.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/encoder-requires-specific-barcode-length.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSupported PLANET Barcode Lengths: 11, 13 characters\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with printBegin Event Handler\nDESCRIPTION: Example showing how to initialize a Telerik Report Viewer with a printBegin event handler. The code demonstrates setting up the viewer with a service URL, report source, and event handler that logs to console before printing begins.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/printbegin(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\tprintBegin: function(e) { console.log(\"This event handler will be called before printing the report.\"); }\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Validating XHTML Using IsValidXhtml Method in C# Expressions\nDESCRIPTION: This snippet demonstrates how to use the IsValidXhtml method inside a HtmlTextBox Expression in C#. The method ensures that the provided XHTML content is valid. No external dependencies are required for this validation approach.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/htmltextbox/xhtml-validation.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\Processing\\HtmlTextBoxSnippets.cs region=Validate_Xhtml_Using_IsValidXhtml_InExpression_Snippet}}\n```\n\n----------------------------------------\n\nTITLE: Loading Localized Resources in HTML\nDESCRIPTION: HTML code showing how to load localized string resources before loading the report viewer component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/localization.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"/Scripts/stringResources.fr-BE.js\"></script>\n<script src=\"/api/reports/resources/js/telerikReportViewer\"></script>\n```\n\n----------------------------------------\n\nTITLE: Resolving Specific Reporting Configuration\nDESCRIPTION: Create a function to resolve specific reporting configurations by utilizing a JSON file different from the default appSettings.json. This function uses the ConfigurationBuilder to load specified configuration settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-dotnet.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nstatic IConfiguration ResolveSpecificReportingConfiguration(IWebHostEnvironment environment)\n\t{\n\t\tvar reportingConfigFileName = System.IO.Path.Combine(environment.ContentRootPath, \"reportingAppSettings.json\");\n\t\treturn new ConfigurationBuilder()\n\t\t .AddJsonFile(reportingConfigFileName, true)\n\t\t .Build();\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web.config for REST Service DPI Awareness\nDESCRIPTION: Configuration to set DPI awareness for Telerik Reporting REST Service using web.config, enabling proper scaling for report rendering\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-report-correctly-from-winforms-viewer-without-declaring-entire-application-as-dpi-aware.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dpiAware>\n    <dpiAwareness>PROCESS_SYSTEM_DPI_AWARE</dpiAwareness>\n</dpiAware>\n```\n\n----------------------------------------\n\nTITLE: Checking for Merged Data in Graph (C#)\nDESCRIPTION: Uses the IsMergedData function to determine if the current data context is of a merged data point in a Graph item.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/data-functions.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n= IsMergedData() | Operator.Equals | = True\n```\n\n----------------------------------------\n\nTITLE: Expression Reference Example for Data Fields\nDESCRIPTION: Example showing how to reference parent and child data fields in a filtering expression within Telerik Reporting\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n=ReportItem.DataObject.PrentFieldName\t=\t=Fields.ChildFieldName\n```\n\n----------------------------------------\n\nTITLE: Layout Page Section Rendering\nDESCRIPTION: Renders required sections in the layout page for scripts and styles\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n@RenderSection(\"styles\", required: false)\n\t@RenderSection(\"scripts\", required: false)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Custom Business Object with ObjectDataSource in C#\nDESCRIPTION: Demonstrates how to use ObjectDataSource to connect to a custom business object for retrieving product information.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/maintaining-the-lifecycle-of-the-context-with-the-entitydatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.ObjectDataSource objectDataSource = new Telerik.Reporting.ObjectDataSource();\nobjectDataSource.DataSource = typeof(SampleObject);\nobjectDataSource.DataMember = \"GetProducts\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reports from Telerik Report Server\nDESCRIPTION: Fetches a list of available reports from the Report Server using an authenticated HTTP GET request\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/export-a-report-from-telerik-report-server-via-dot-net-client.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic async Task<List<Dictionary<string, string>>> GetReportsAsync(string path)\n{\n    List<Dictionary<string, string>> reports = null;\n\n    HttpResponseMessage response = await client.GetAsync(path);\n    if (response.IsSuccessStatusCode)\n    {\n        reports = await response.Content.ReadAsAsync<List<Dictionary<string, string>>>();\n    }\n    return reports;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Available UI Cultures in Telerik Reporting (CSharp)\nDESCRIPTION: This snippet retrieves the list of available UI cultures by comparing directory names with all supported cultures in the .NET framework, particularly filtering the cultures applicable to the reporting application. It uses the CultureInfo class to obtain all cultures and checks against the folder names in a specified resource directory.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/culturenotfoundexception-culture-is-not-supported.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nIEnumerable<string> ILocalizationHandler.AvailableUICultures\n{\n\tget\n\t{\n\t\tvar dir = GetResourcesPath();\n\t\t//\n\t\tvar allCultures = CultureInfo.GetCultures(CultureTypes.AllCultures).Select(c => c.Name);\n\t\t//\n\t\tvar cultureInfos = new List<string>();\n\t\tif (Directory.Exists(dir))\n\t\t{\n\t\t\tforeach (var d in Directory.GetDirectories(dir))\n\t\t\t{\n\t\t\t\tvar directoryName = Path.GetFileName(d);\n\t\t\t\tvar culture = allCultures.FirstOrDefault(c => c == directoryName);\n\t\t\t\tif (culture != null)\n\t\t\t\t{\n\t\t\t\t\tcultureInfos.Add(culture);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn cultureInfos;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema Version for TRDX Files in Telerik Reporting\nDESCRIPTION: Specifies the XML schema version used in TRDX files created by the Standalone Report Designer in Telerik Reporting Q3 2014 SP1.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2014/q3-2014-sp1.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2012/3.7\n```\n\n----------------------------------------\n\nTITLE: Using IN Clause with Multivalue Parameters in T-SQL\nDESCRIPTION: This T-SQL example demonstrates how to use the IN keyword in a WHERE clause to filter results based on multivalue parameters. It illustrates the syntax for selecting ProductID, Name, and Color from the Production.Product table based on a set of ProductIDs passed as parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/using-multivalue-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ProductID, Name, Color\nFROM Production.Product\nWHERE ProductID IN (@ProductID)\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectionStrings in JSON\nDESCRIPTION: This JSON snippet shows how to configure ConnectionStrings within a JSON-based configuration file.  It uses a simple key-value format, assuming System.Data.SqlClient as the data provider.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n````JSON\n{\n\t//...\n\t\"ConnectionStrings\": {\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\"\n\t}\n}\n````\n```\n\n----------------------------------------\n\nTITLE: Adding Sorting to Chart Data Items Programmatically\nDESCRIPTION: Demonstrates how to programmatically add sorting to a Chart data item using the Telerik Reporting API. Shows implementation for both C# and VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/ordering-data/how-to-add-sorting-to-chart-item.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\ChartSnippets.cs region=AddNewSortSnippet}}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\ChartSnippets.vb region=AddNewSortSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Setting Optional CsvDataSource Properties in C#\nDESCRIPTION: Shows how to configure optional settings like headers flag, escape format, and quote character for enhanced CSV parsing functionality.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/csvdatasource-component/connecting-the-csvdatasource-component-to-a-csv-source.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ncsvDataSource.HasHeaders = true;\ncsvDataSource.EscapeFormat = CsvEscapeFormat.QuotesMixed;\ncsvDataSource.Quote = '\"';\n```\n\n----------------------------------------\n\nTITLE: Creating React Application with NPM\nDESCRIPTION: Commands to create and start a new React application using Create React App CLI\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-html5-viewer-in-react-js.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Exporting Report to PDF using Telerik Reporting in PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to export a report to PDF using Telerik Reporting. It loads the Telerik.Reporting assembly, creates a ReportProcessor instance, sets report parameters, renders the report, and saves the output to a file.  Requires the Telerik Reporting dll to be accessible.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/exporting-reports-powershell.md#2025-04-21_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-Type -path \"Telerik\\Reporting\\Installation\\Directory\\Bin\\netstandard2.0\\Telerik.Reporting.dll\";\n\t\n\t$reportProcessor = New-Object Telerik.Reporting.Processing.ReportProcessor;\n\t$format = \"PDF\"\n\t$deviceInfo = New-Object System.Collections.Hashtable;\n\t$reportSource = New-Object Telerik.Reporting.UriReportSource;\n\t$reportSource.Uri = \"Location\\Of\\TRDP\\Or\\TRDX\\Report.trdp\";\n\t$param1 = \"Necessary parameter\";\n\t$param2 = 10;\n\t$reportSource.Parameters.Add(\"ReportParameterName1\", $param1);\n\t$reportSource.Parameters.Add(\"ReportParameterName2\", $param2);\n\t\n\t$renderingResult = $reportProcessor.RenderReport($format, $reportSource, $deviceInfo)\n\t$fileName = $renderingResult.DocumentName + \".\" + $renderingResult.Extension;\n\t$path = \"Location\\Of\\PDF\\Export\\\" + $fileName\n\t\n\t[System.IO.File]::WriteAllBytes($path, $renderingResult.DocumentBytes)\n```\n\n----------------------------------------\n\nTITLE: Configuring ResourceResolver Element in XML\nDESCRIPTION: The resourceResolver element configures how report resources are resolved, supporting both path-based and custom implementations. It allows customization of resource resolution for images, stylesheets, and data sources.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/processing-element.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<resourceResolver provider=\"[path|custom]\">\n  <parameters>\n    <parameter name=\"[directory|typeName]\" value=\"[path|qualified.type.name]\" />\n  </parameters>\n</resourceResolver>\n```\n\n----------------------------------------\n\nTITLE: Setting Margin for PageNumber Input in CSS\nDESCRIPTION: This CSS snippet adjusts the margin-top of the PageNumber input in Telerik Reporting to prevent it from being cutoff at the top. It overrides the default margin with a value of 2px or greater. The snippet targets the specific input using a data attribute selector, ensuring that only the intended element is affected.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pagenumber-input-is-cutoff-html5.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ninput[data-role='telerik_ReportViewer_PageNumberInput'] {\n    margin-top: 2px !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource for ASP.NET ReportViewer in C#\nDESCRIPTION: This code snippet demonstrates how to programmatically set the ReportSource for an ASP.NET ReportViewer control in the Page_Load event. It creates a new instance of the Report1 class and assigns it to the ReportSource property of the ReportViewer1 control.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/cannot-show-report-reportviewer.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected void Page_Load(object sender, EventArgs e)\n{\n    if (!IsPostBack)\n    {\n        ReportViewer1.ReportSource = new Telerik.Reporting.Report1();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding ObjectDataSource to SqlDataAdapter in VB.NET\nDESCRIPTION: This VB.NET code snippet shows how to create a SqlDataAdapter, set up an ObjectDataSource to use it, and configure a report with a calculated field. It also demonstrates how to preview the report in a Windows Forms Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/bind-to-data-adapter.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Sub BindToDataAdapter()\n    Dim report As New Report()\n    Dim detail As New DetailSection()\n    report.Items.Add(detail)\n\n    ' Create the ObjectDataSource component\n    Dim objectDataSource As New Telerik.Reporting.ObjectDataSource()\n\n    Dim sqlConnection As New SqlConnection(\"connection string\")\n    Dim sqlDataAdapter As New SqlDataAdapter(\"SELECT * FROM Employees\", sqlConnection)\n\n    ' Specify the data adapter\n    objectDataSource.DataSource = sqlDataAdapter\n    objectDataSource.DataMember = \"Table\"\n\n    ' Add a calculated field\n    Dim calculatedField As New Telerik.Reporting.CalculatedField()\n    calculatedField.Name = \"FullName\"\n    calculatedField.Expression = \"FirstName + \\\" \\\" + LastName\"\n    objectDataSource.CalculatedFields.Add(calculatedField)\n\n    ' Set the data source of the report\n    report.DataSource = objectDataSource\n\n    ' Add a TextBox item to the detail section to display the calculated field\n    Dim textBox As New Telerik.Reporting.TextBox()\n    textBox.Size = New SizeU(Unit.Inch(5), Unit.Inch(1))\n    textBox.Name = \"textBox\"\n    textBox.Value = \"= Fields.FullName\"\n    detail.Items.Add(textBox)\n\n    ' Preview the report\n    Dim reportProcessor As New ReportProcessor()\n    Dim viewer As New Telerik.ReportViewer.WinForms.ReportViewer()\n    viewer.ReportSource = New Telerik.Reporting.InstanceReportSource() With {.ReportDocument = report}\n    viewer.RefreshReport()\n    viewer.ShowDialog()\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Configuring UseMetafile Parameter in .NET Core\nDESCRIPTION: This JavaScript configuration sets the UseMetafile parameter to false for the DOCX rendering extension in a .NET Core project. It achieves the same result as the XML configuration for .NET Framework projects, preventing image shrinking on Mac machines.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/images-are-shrunk-in-docx-xlsx-pptx-formats-on-mac-machines.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"telerikReporting\": {\n    \"extensions\": [\n      {\n        \"name\": \"DOCX\",\n        \"parameters\": [\n          {\n            \"Name\": \"UseMetafile\",\n            \"Value\": \"false\"\n          }\n        ]\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAccessDataSource with Minimum Settings in VB.NET\nDESCRIPTION: This snippet demonstrates the minimum code necessary to set up the OpenAccessDataSource component using an OpenAccessContext and a member in VB.NET. This approach works in production but may not work at design-time.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/configuring-the-database-connectivity-with-the-openaccessdatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim openAccessDataSource As New OpenAccessDataSource()\nopenAccessDataSource.ContextTypeName = GetType(AdventureWorksModel.AdventureWorksEntities).AssemblyQualifiedName\nopenAccessDataSource.OpenAccessContextOptions = OpenAccessContextOptions.Default\nopenAccessDataSource.Member = \"SalesOrderHeaders\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Chart Bar Border Properties\nDESCRIPTION: Demonstrates how to customize bar border appearance by setting LineWidth, LineColor, and LineStyle properties. Requires setting LineWidth to a positive value to display borders, and supports configuring border color and style.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/customize-column-chart-bar-borders.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nLineWidth: 5px\nLineColor: Color\nLineStyle: [solid, dashed, dotted]\n```\n\n----------------------------------------\n\nTITLE: Removing Problematic iPad Pro Media Query in CSS\nDESCRIPTION: CSS media query causing height rendering issues for devices with specific screen dimensions (1024px-1366px) and pixel ratio (1.5). This code needs to be removed or commented out from the telerikReportViewer.css file to resolve the height issue.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-report-viewer-height-issue-on-certain-screen-resolutions.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* ----------- iPad Pro ----------- */\n/* Portrait and Landscape */\n@media only screen\n  and (min-device-width: 1024px)\n  and (max-device-width: 1366px)\n  and (-webkit-min-device-pixel-ratio: 1.5) {\n    .sheet {\n        height: 100% !important;\n        overflow: scroll;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Cache Provider in JSON for Telerik Reporting\nDESCRIPTION: JSON configuration for the Database cache provider. This provider requires backend name and connection string parameters to store rendered pages and resources in a database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"cache\": {\n\t\t\"provider\": \"Database\",\n\t\t\"providers\": [\n\t\t\t{\n\t\t\t\t\"name\": \"DatabaseProviderName\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"BackendName\",\n\t\t\t\t\t\t\"value\": \"DatabaseProviderBackendName\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"ConnectionString\",\n\t\t\t\t\t\t\"value\": \"DatabaseProviderConnectionString\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Kendo UI Dependencies Configuration\nDESCRIPTION: Required script and CSS references for implementing Kendo UI widgets in the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\" /script>\n<script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/kendo.all.min.js\" /script>\n<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" id=\"commonCss\" />\n<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" id=\"skinCss\" />\n```\n\n----------------------------------------\n\nTITLE: Handling MethodAccessException in WPF ReportViewer\nDESCRIPTION: This section describes the occurrence of a MethodAccessException when connecting the WPF ReportViewer to the Telerik Report Server or REST API. This error typically arises due to incorrect versions of web client assemblies, specifically needing the Microsoft.AspNet.WebApi.Client NuGet package.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/wpf-viewer-method-access-exception.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAttempt by method 'Telerik.Reporting.Services.HttpClient.HttpRequestHelper.GetResponseFromPost(System.Net.Http.HttpResponseMessage)'\nto access method 'Telerik.Reporting.Services.HttpClient.HttpRequestHelper.GetResponseFromPost<T>\n(System.Net.Http.HttpResponseMessage, System.Collections.Generic.IEnumerable 1<System.Net.Http.Formatting.MediaTypeFormatter>)' failed.\n```\n\n----------------------------------------\n\nTITLE: Web Report Designer Async Methods\nDESCRIPTION: List of obsolete synchronous methods and their new asynchronous counterparts for the Web Report Designer REST Service\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2021/r1-2021-sp1.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nSaveReport -> SaveReportAsync\nRenderGraph -> RenderGraphAsync\nRenderMap -> RenderMapAsync\nRenderBarcode -> RenderBarcodeAsync\nRenderHtmlTextBox -> RenderHtmlTextBoxAsync\nRenderShape -> RenderShapeAsync\nRenderCrossSectionItem -> RenderCrossSectionItemAsync\nRenderCheckBox -> RenderCheckBoxAsync\nRenderPictureBox -> RenderPictureBoxAsync\n```\n\n----------------------------------------\n\nTITLE: Handling pageReady Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `pageReady` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `pageReady` event is emitted when the viewer content has been loaded from the template and is ready to display reports or perform any other operations on it.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\nimport { PageInfo } from '@progress/telerik-common-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\tpageReady(e: PageInfo) {\n\t\t\tconsole.log(\"The current page information such as the page number, the page content, etc.\", e)\n\t\t\tconsole.log(\"This event will be emitted when the viewer content has been loaded from the template and is ready to display reports or perform any other operations on it.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ReportViewer Instance\nDESCRIPTION: Gets the ReportViewer object reference from a target HTML element using jQuery's data method\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n```\n\n----------------------------------------\n\nTITLE: Sample DELETE Request\nDESCRIPTION: This snippet presents a sample DELETE request to release a document with specific client, instance, and document IDs. This request illustrates how to construct the API call with actual IDs. The HTTP version is specified as HTTP/1.1.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/release-document.md#2025-04-21_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /api/reports/clients/2c3d/instances/4d3c/documents/5x3a HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Adding Trace Listener Configuration in XML\nDESCRIPTION: XML configuration to add a trace listener to the Telerik.ReportDesigner.exe.config file for generating diagnostic log files. The trace listener will create logs at c:\\temp\\StandaloneDesigner.LOG\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/an-error-has-occurred-while-loading-the-reportdesigners-workbench.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<system.diagnostics>\n\t<trace autoflush=\"true\" indentsize=\"4\">\n\t\t<listeners>\n\t\t\t<add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"c:\\temp\\StandaloneDesigner.LOG\" />\n\t\t\t<remove name=\"Default\" />\n\t\t</listeners>\n\t</trace>\n</system.diagnostics>\n```\n\n----------------------------------------\n\nTITLE: Scoped Conditional Formatting Expression for Crosstab Row\nDESCRIPTION: A solution using the Exec function to scope the conditional formatting expression to the row group, ensuring it works for all cells in the Crosstab row.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/conditional-formatting-not-applied-to-the-entire-row.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n= Exec('rowGroupName', Fields.DataFieldName)  =   SomeValue\n```\n\n----------------------------------------\n\nTITLE: Binding to Inner Objects with JSONPath\nDESCRIPTION: Demonstrates how to access nested arrays within a JSON object using JSONPath. Shows the original JSON structure containing a store with books and the JSONPath expression to extract the book array.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/graphqldatasource-component/how-to-use-jsonpath-to-filter-json-data.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"store\": {\n\t\t\"book\": [\n\t\t\t{\n\t\t\t\t\"category\": \"reference\",\n\t\t\t\t\"author\": \"Nigel Rees\",\n\t\t\t\t\"title\": \"Sayings of the Century\",\n\t\t\t\t\"price\": 8.95\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"category\": \"fiction\",\n\t\t\t\t\"author\": \"Evelyn Waugh\",\n\t\t\t\t\"title\": \"Sword of Honour\",\n\t\t\t\t\"price\": 12.99\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly References in Telerik Reporting\nDESCRIPTION: This XML snippet demonstrates how to configure assembly references within the Telerik Reporting configuration file. It is used to resolve assembly loading issues, especially when using Entity Framework data models in the Standalone Report Designer. The `AssemblyReferences` section specifies the assemblies required by the report, including the EF model, EntityFramework, and EntityFramework.SqlServer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/data-source-components-problems.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n\"<Telerik.Reporting>\n\t\t<AssemblyReferences>\n\t\t\t<add name=\"MyEFModelCustomAssembly\" version=\"1.0.0.0\" culture=\"neutral\" publicKeyToken=\"null\" />\n\t\t\t<add name=\"EntityFramework\" version=\"6.0.0.0\" culture=\"neutral\" publicKeyToken=\\\"...\\\" />\n\t\t\t<add name=\"EntityFramework.SqlServer\" version=\"6.0.0.0\" culture=\"neutral\" publicKeyToken=\\\"...\\\" />\n\t\t</AssemblyReferences>\n\t</Telerik.Reporting>\"\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: This command is used to check the installed version of Node.js in a terminal or console window. It helps ensure that the installed version meets the minimum requirements for the Native Angular Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/requirements.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"node --version\"\n```\n\n----------------------------------------\n\nTITLE: Setting UriReportSource for HTML5 Report Viewer in JavaScript\nDESCRIPTION: This snippet demonstrates how to set a .TRBP file as the report source for an HTML5 Report Viewer using UriReportSource. It's a simple way to display a pre-created ReportBook.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-display-reportbook-in-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nreportSource: {\n    report: \"ReportBook1.trbp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in Configure Method\nDESCRIPTION: This code snippet ensures that the application can serve static files (like CSS, JavaScript, and images) by calling the UseStaticFiles() extension method in the Configure method of the Startup.cs file.  Serving static files is critical for the Web Report Designer's user interface to load properly and function correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-core-2.1-application.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n````CSharp\napp.UseStaticFiles();\n````\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Trace Listener in C#\nDESCRIPTION: A custom TextWriterTraceListener implementation that filters out trace messages from a specific assembly. The class checks the call stack to determine if the trace originated from the specified assembly to ignore.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/disable-logging-tracing-information-from-telerik-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Diagnostics;\nusing System.Reflection;\n\npublic class CustomTraceListener : TextWriterTraceListener\n{\n    Assembly assemblyToIgnore;\n\n    public CustomTraceListener(Assembly assemblyToIgnoreTracesFrom, Stream stream)\n        :base(stream)\n    {\n        this.assemblyToIgnore = assemblyToIgnoreTracesFrom;\n        //this.Filter = new CustomTraceFilter(SourceLevels.All);\n        this.Writer = new StreamWriter(stream);\n    }\n\n    public bool TraceIsFromAssemblyToIgnore()\n    {\n        var traceCallStack = new StackTrace();\n        foreach (StackFrame traceStackFrame in traceCallStack.GetFrames())\n        {\n            MethodBase callStackMethod = traceStackFrame.GetMethod();\n\n            bool methodIsFromAssemblyToIgnore = (callStackMethod.Module.Assembly == this.assemblyToIgnore);\n\n            if (methodIsFromAssemblyToIgnore)\n            {\n                return true;\n            }\n        }\n\n        // The assembly to ignore was not found in the call stack.\n        return false;\n    }\n\n\n    public override void WriteLine(string message)\n    {\n        if (!this.TraceIsFromAssemblyToIgnore())\n        {\n            base.WriteLine(message);\n        }\n    }\n\n    public override void Write(string message)\n    {\n        if (!this.TraceIsFromAssemblyToIgnore())\n        {\n            base.Write(message);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Razor Pages with NewtonsoftJson\nDESCRIPTION: This C# snippet configures Razor Pages and adds NewtonsoftJson support by utilizing the AddNewtonsoftJson extension method. It assumes the use of ASP.NET Core Web API project. The snippet modifies the Program.cs file to ensure proper service setup.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-blazor-application.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nbuilder.Services.AddRazorPages().AddNewtonsoftJson();\n\tbuilder.Services.AddControllers();\n```\n\n----------------------------------------\n\nTITLE: Configuring RadCompression XML Settings\nDESCRIPTION: XML configuration to exclude Reporting REST service requests from RadCompression to prevent export operation failures. The handlerPath should match the HTML5 Viewer's serviceUrl.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-viewer-export-operations-fail-with-err_connection_reset_error_504.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n  <configSections>\n    <sectionGroup name=\"telerik.web.ui\">\n      <section name=\"radCompression\" type=\"Telerik.Web.UI.RadCompressionConfigurationSection, Telerik.Web.UI, PublicKeyToken=121fae78165ba3d4\" allowDefinition=\"MachineToApplication\" requirePermission=\"false\"/>\n    </sectionGroup>\n  </configSections>\n   \n  <telerik.web.ui>\n    <radCompression>\n      <excludeHandlers>\n        <add handlerPath=\"api/reports/\" matchExact=\"false\"/>\n      </excludeHandlers>\n    </radCompression>\n  </telerik.web.ui>\n```\n\n----------------------------------------\n\nTITLE: Single Page Report Expression Handling\nDESCRIPTION: Provides a complex expression to handle aggregation for single-page reports using PageExec and conditional logic\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/summary-per-page-when-group-is-on-multiple-pages.md#2025-04-21_snippet_6\n\nLANGUAGE: Expression\nCODE:\n```\n= IIF(PageCount = 1, PageExec(\"detailSection1\", Sum(CDbl(Fields.value))), \n\t\tIIF(\n\t\tPageExec(\"detailSection1\", Last(Fields.account)) <> IsNull(PageExec(\"groupFooterSection\", Last(Fields.account)), \"N/A\"),     \n\t\tFormat(\"Account {0} continues on next page. Value transitioning to next page: {1}\", PageExec(\"detailSection1\", Last(Fields.account)), \n\t\tPageExec(\"detailSection1\", PageFooterSumUntilNow(Fields.value, Fields.account, ReportDefinition, PageNumber))),\n\t\t\"\")\n\t)\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Source with Encrypted Credentials (PowerShell)\nDESCRIPTION: This PowerShell command adds the Telerik NuGet feed as a package source using encrypted credentials.  It requires the NuGet CLI to be installed and the path to `nuget.exe` to be set in the command prompt. The command stores a token representing the credentials in the NuGet configuration file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/adding-private-nuget-feed.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n\"NuGet Sources Add -Name \\\"telerik.com\\\" -Source \\\"https://nuget.telerik.com/v3/index.json\\\" ^\n\t-UserName \\\"your login email\\\" -Password \\\"your password\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Formatting String with Format Function in C#\nDESCRIPTION: Uses the Format function to format a line total value in a string. This function takes a format string and a value as parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/text-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n=Format(\" LineTotal: {0} \", Fields.LineTotal)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swashbuckle to Resolve Conflicts with Telerik Reporting\nDESCRIPTION: Code snippet for configuring Swashbuckle in Program.cs/Startup.cs to handle conflicting paths and obsolete actions in Telerik Reporting controllers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/conflicting-actions-error-in-swagger-generation-net-core.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddSwaggerGen(options => {\n\toptions.ResolveConflictingActions(apiDescriptions => apiDescriptions.First());\n\toptions.IgnoreObsoleteActions();\n\toptions.IgnoreObsoleteProperties();\n\toptions.CustomSchemaIds(type => type.FullName);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling loadedReportChange Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `loadedReportChange` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code.  The `loadedReportChange` event is emitted when the previewed report is changed or refreshed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(loadedReportChange)=\"loadedReportChange()\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Pre-R3 2016 Report Event Modification\nDESCRIPTION: Example of modifying report items in events before R3 2016 version where changes were directly applied to item definitions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/changes-on-items-in-report-events-are-not-applied.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvoid report_NeedDataSource(object sender, EventArgs e)\n{\n\tthis.DataSource = GetReportData();\n\tthis.table.DataSource = GetTableData();\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the ReportViewer Control in MainPage.xaml\nDESCRIPTION: This code snippet illustrates how to declare the Telerik ReportViewer control in the MainPage.xaml file of a Silverlight application. It demonstrates the registration of the namespace and the control declaration necessary for rendering the Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/silverlight-application/how-to-add-report-viewer-to-a-silverlight-application.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<UserControl x:Class=\"Telerik.Reporting.CodeSnippets.SilverlightCS.API.MainPage\"\n\txmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n\txmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n\txmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n\txmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n\txmlns:telerik=\"clr-namespace:Telerik.ReportViewer.Silverlight;assembly=Telerik.ReportViewer.Silverlight\">\n\n\t\t<Grid x:Name=\"LayoutRoot\">\n\t\t\t<telerik:ReportViewer  x:Name=\"ReportViewer1\" Width=\"1000\"\n\t\t\tReportServiceUri=\"../ReportService.svc\"\n\t\t\tReport=\"Telerik.Reporting.Examples.CSharp.BarcodesReport, CSharp.ReportLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\">\n\t\t\t</telerik:ReportViewer>\n\t\t</Grid>\n\t</UserControl>\n```\n\n----------------------------------------\n\nTITLE: Common FileNotFoundException Error Message in Telerik Reporting R3 2023\nDESCRIPTION: Sample error message showing the exception that occurs when the System.Resources.NetStandard dependency is missing. The error includes the main CancelProcessingException and its inner FileNotFoundException.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/r3-2023-could-not-load-system-resources-netstandard.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTelerik.Reporting.Processing.CancelProcessingException: 'An error occurred while evaluating the report parameters. Report source cannot be processed. Check the InnerException for more information.'\n\nInner Exception:\n\nFileNotFoundException: Could not load file or assembly 'System.Resources.NetStandard, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified.\n```\n\n----------------------------------------\n\nTITLE: Handling currentPageChanged Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `currentPageChanged` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `currentPageChanged` event is emitted when the viewer changes its currently displayed page.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_16\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(currentPageChanged)=\"currentPageChanged($event)\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Legacy ASP.NET WebForms ReportViewer Styles\nDESCRIPTION: Provides guidance for handling styling issues with the Telerik ReportViewer in ASP.NET WebForms. Focuses on handler registration, browser proxy settings, and authorization configuration to resolve toolbar and content area style problems.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/old-webforms-viewer-messes-toolbar-content-area-styles.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nVerify Telerik.ReportViewer.axd handler registration\n```\n\nLANGUAGE: text\nCODE:\n```\nCheck browser proxy and security settings\n```\n\nLANGUAGE: text\nCODE:\n```\nConfirm user authorization for Telerik.ReportViewer.axd handler path\n```\n\n----------------------------------------\n\nTITLE: HTML5 Interactive Report Rendering\nDESCRIPTION: Renders a report in XHTML 1.1 compliant HTML with interactive page layout. Requires multi-stream rendering with RenderReport method. Telerik internal use.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/export-formats.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.Html5Rendering.Html5ReportInteractive, Telerik.Reporting, Version=x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Parameter UI for Invoice Selection in HTML\nDESCRIPTION: This HTML snippet creates a custom dropdown selector for choosing invoice IDs. It demonstrates how to create a simple parameter UI outside the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"invoiceIdSelector\">\n\t<label for=\"invoiceId\">Invoices</label>\n\t<select id=\"invoiceId\" title=\"Select the Invoice ID\">\n\t\t<option value=\"SO51081\">SO51081</option>\n\t\t<option value=\"SO51082\" selected=\"selected\">SO51082</option>\n\t\t<option value=\"SO51083\">SO51083</option>\n\t</select>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace for libgdiplus Issues on CentOS\nDESCRIPTION: An example of an error stack trace that might occur when there are problems with libgdiplus on CentOS, showing the specific 'Unable to load shared library libdl' error.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-install-libgdiplus-centos-amazon-linux.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nUnhandled exception. System.TypeInitializationException: The type initializer for 'Telerik.Reporting.Processing.Common.FontContainer' threw an exception.\n ---> System.TypeInitializationException: The type initializer for 'Gdip' threw an exception.\n ---> System.DllNotFoundException: Unable to load shared library 'libdl' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: liblibdl: cannot open shared object file: No such file or directory\n   at Interop.Libdl.dlopen(String fileName, Int32 flag)\n   at System.Drawing.SafeNativeMethods.Gdip.LoadNativeLibrary()\n   at System.Drawing.SafeNativeMethods.Gdip..cctor()\n   --- End of inner exception stack trace ---\n   at System.Drawing.SafeNativeMethods.Gdip.GdipNewPrivateFontCollection(IntPtr& fontCollection)\n   at System.Drawing.Text.PrivateFontCollection..ctor()\n   at Telerik.Reporting.Processing.Common.FontContainer..ctor()\n   at Telerik.Reporting.Processing.Common.FontContainer..cctor()\n   --- End of inner exception stack trace ---\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessReportSource(ReportSource reportSource, IRenderingContext context)\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessReportSource(ReportSource reportSource, Hashtable deviceInfo, IRenderingContext context)\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessAndRender(String format, ReportSource reportSource, Hashtable deviceInfo, IRenderingContext renderingContext, CreateStream createStreamCallback)\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessAndRenderStateless(String format, ReportSource reportSource, Hashtable deviceInfo, IRenderingContext renderingContext, CreateStream createStreamCallback)\n   at Telerik.Reporting.Processing.ReportProcessor.<>c__DisplayClass47_0.<RenderReport>b__0(SingleStreamManager sm)\n   at Telerik.Reporting.Processing.ReportProcessor.RenderReportSafe(Func`2 renderCallback, String format, IRenderingContext renderingContext)\n   at Telerik.Reporting.Processing.ReportProcessor.RenderReport(String format, ReportSource reportSource, Hashtable deviceInfo, CancellationToken cancellationToken)\n   at Telerik.Reporting.Processing.ReportProcessor.RenderReport(String format, ReportSource reportSource, Hashtable deviceInfo)\n   at Program.<Main>$(String[] args) in /home/projects/ConsoleApp1/ConsoleApp1/Program.cs:line 10\n```\n\n----------------------------------------\n\nTITLE: Binding OpenAccessDataSource to Model Property in C#\nDESCRIPTION: Demonstrates how to bind the OpenAccessDataSource component directly to an auto-generated property of the Telerik Data Access Model. This is the simplest approach to extract entities from the model.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/retrieving-data-from-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nOpenAccessDataSource openAccessDataSource = new OpenAccessDataSource();\nopenAccessDataSource.ContextTypeName = \"AdventureWorksModel.AdventureWorksContext, AdventureWorksModel\";\nopenAccessDataSource.ConnectionId = \"AdventureWorks\";\nopenAccessDataSource.MethodName = \"get_Products\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker container for System.Drawing\nDESCRIPTION: Dockerfile snippet for setting up a Linux Docker container with System.Drawing (libgdiplus) support for Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/dot-net-core-support.md#2025-04-21_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM microsoft/dotnet:6.0-runtime AS base\nRUN apt-get update \\\n\t&& apt-get install -y --allow-unauthenticated \\\n\t\tlibc6-dev \\\n\t\tlibgdiplus \\\n\t\tlibx11-dev \\\n\t&& rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Classes with C# for Telerik Report Designer\nDESCRIPTION: Example code that creates a Car class and a Cars collection class in C# that can be used as custom objects for Telerik Reporting. The Cars class is a List<Car> that initializes with sample car data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-external-assemblies-with-custom-clr-objects-in-the-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nnamespace MyAssembly\n{\n\tusing System.Collections;\n\tusing System.Collections.Generic;\n\n\tpublic class Car\n\t{\n\t\tstring model;\n\t\tint year;\n\n\t\tpublic Car(string model, int year)\n\t\t{\n\t\t\tthis.model = model;\n\t\t\tthis.year = year;\n\t\t}\n\n\t\tpublic string Model\n\t\t{\n\t\t\tget { return this.model; }\n\t\t\tset { this.model = value; }\n\t\t}\n\t\n\t\tpublic int Year\n\t\t{\n\t\t\tget { return this.year; }\n\t\t\tset { this.year = value; }\n\t\t}\n\t}\n\n\tpublic class Cars: List<Car>\n\t{\n\t\tpublic Cars()\n\t\t{\n\t\t\tCar car;\n\t\t\tcar = new Car(\"Honda NSX GT\", 2003);\n\t\t\tthis.Add(car);\n\t\n\t\t\tcar = new Car(\"Nissan Skyline R34 GT-R\", 2005);\n\t\t\tthis.Add(car);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Bindings to Page Sections in C#\nDESCRIPTION: Use Bindings to dynamically change the Height and Visible properties of Page sections, affecting the available space for report content on specific pages.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/understanding-pagination.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npageSection.Bindings.Add(new Binding(\"Height\", \"=IIF(PageNumber() % 2 = 0, 2cm, 1cm)\"));\n```\n\n----------------------------------------\n\nTITLE: PageInfo JSON Entity when page is available\nDESCRIPTION: This JSON snippet represents the PageInfo entity when a page is successfully rendered and available. It includes the 'pageReady' field set to 'true', the 'pageNumber', and the 'pageContent' field containing the rendered HTML content of the page. The pageContent is dependent on the output format.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/pageinfo.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"pageReady\": true,\n\t\"pageNumber\": 1,\n\t\"pageContent\": \"<html>My page content</html>\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Matrix Barcode Settings in C#\nDESCRIPTION: This C# code snippet demonstrates how to configure the settings of a Data Matrix barcode, including Encodation, SymbolSize, and TextEncoding, for use in Telerik Reporting. These settings allow fine-tuning the barcode's behavior to optimize for data density, readability, and specific encoding requirements. It uses the Telerik.Reporting namespace.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/barcode/2d-barcodes/data-matrix.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n \"// Creates a new instance of the DataMatrixEncoder class\\nTelerik.Reporting.DataMatrixEncoder dataMatrixEncoder = new Telerik.Reporting.DataMatrixEncoder();\\n\\n// Sets the DataMatrix encoder settings\\ndataMatrixEncoder.Encodation = Telerik.Reporting.DataMatrix.DataMatrixEncodation.ASCII;\\ndataMatrixEncoder.SymbolSize = Telerik.Reporting.DataMatrix.DataMatrixSymbolSize.SquareAuto;\\ndataMatrixEncoder.TextEncoding = System.Text.Encoding.UTF8;\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving the ReportViewer Object in JavaScript\nDESCRIPTION: Shows how to get the ReportViewer object from an HTML element after initialization. This allows for programmatic interaction with the viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/report-viewer-initialization.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Styles\nDESCRIPTION: JSON configuration for adding the Kendo UI theme to the Angular project styles\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-report-server.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"styles\": [\n\t\t\"src/styles.scss\",\n\t\t\"node_modules/@progress/kendo-theme-default/dist/default-ocean-blue.scss\"\n\t],\n```\n\n----------------------------------------\n\nTITLE: Accessing Report Fields from Table Item in C#\nDESCRIPTION: This code snippet demonstrates the use of the Report API hierarchy to reference report fields from a table item. It shows how to access a TextBox within a table and use a data source directly to set the TextBox value during data binding.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/access-report-items-programmatically.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprivate void tableTextBox_ItemDataBinding(object sender, EventArgs eventArgs)\n{\n    //get the textbox from the sender object\n    Telerik.Reporting.Processing.TextBox textBox = (Telerik.Reporting.Processing.TextBox)sender;\n    //get the table object\n    Telerik.Reporting.Processing.Table table = (Telerik.Reporting.Processing.Table)textBox.Parent;\n    //get the detail section\n    Telerik.Reporting.Processing.DetailSection detail = (Telerik.Reporting.Processing.DetailSection)table.Parent;\n    //get the raw value from the Report datasource directly\n    textBox.Value = detail.DataObject[\"Data\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Wrong Item Data Binding Example in VB.NET\nDESCRIPTION: Similar to the C# snippet, this VB.NET snippet exemplifies the incorrect approach of using report item fields directly in event handlers, thereby highlighting the importance of adhering to best practices.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\Processing\\OutProcSnippets.vb region=WrongItemDataBinding}}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Margin of CheckBox in Web Report Designer with CSS\nDESCRIPTION: This CSS snippet brings the CheckBox closer to its header text by adjusting the margin. It requires embedding within the HTML head section. The primary parameter involves modifying the margin-right property of the .trv-parameter-header CSS class. This impacts the visual spacing between text and checkbox.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/customize-parameter-inputs-highlight-selection-web-report-designer.md#2025-04-21_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\n            #webReportDesigner .trv-parameter-header {\n                width: auto;\n                margin-right: 15px;\n            }\n        </style>\n```\n\n----------------------------------------\n\nTITLE: Modifying ReportsController Constructor for Dependency Injection in C#\nDESCRIPTION: This code shows how to modify the ReportsController constructor to accept an additional IProductRepository parameter, allowing for custom dependency injection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-inject-custom-dependency-in-reports-controller-of-dot-net-core-application.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic ReportsController(IReportServiceConfiguration reportServiceConfiguration, IProductRepository productRepository)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Group to Table Data Item Programmatically in VB.NET\nDESCRIPTION: This code demonstrates how to programmatically add a new group to a Table data item in VB.NET. It creates a new RowGroup called 'regionRowGroup' that groups by the Region field, adds sorting by the Region field in ascending order, and adds the group to the Table's RowGroups collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/grouping-data/how-to-add-groups-to-table-item-and-crosstab-item.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Sub AddNewGroup()\n    'create a group that groups by the Region field.\n    Dim regionRowGroup As New Telerik.Reporting.TableGroup()\n    regionRowGroup.Name = \"regionRowGroup\"\n    'Specify the grouping expression\n    regionRowGroup.Groupings.Add(New Telerik.Reporting.Grouping(\"=Fields.Region\"))\n    'Specify the sort expression for the group\n    regionRowGroup.Sortings.Add(New Telerik.Reporting.Sorting(\"=Fields.Region\", Telerik.Reporting.SortDirection.Asc))\n\n    'add the region group to the table's RowGroups collection\n    Me.table1.RowGroups.Add(regionRowGroup)\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Configuring PageBreak with Expressions in Telerik Reporting\nDESCRIPTION: This snippet shows how to apply a conditional page break using an expression in Telerik Reporting. The PageBreak property uses an expression to determine whether to insert a page break before or not based on the row number. This solution helps to conditionally control the rendering behavior of report structure specifically in PDF rendering.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/conditional-page-breaks.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n\"|Property path|Expression|\\n| --- | --- |\\n|PageBreak|`= IIF(RowNumber() > 1, 'Before', 'None')`|\"\n```\n\n----------------------------------------\n\nTITLE: Applying High Contrast Theme to Fix Color Contrast Issues\nDESCRIPTION: Links to Kendo UI's high contrast theme CSS to address the 'Elements must have sufficient color contrast' warnings. This improves the viewer's compliance with color contrast accessibility requirements.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-fix-axe-errors-for-html5-viewer.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"https://kendo.cdn.telerik.com/2020.1.114/styles/kendo.highcontrast.min.css\" rel=\"stylesheet\" id=\"skin-css\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring ImageInteractive Extension Settings in XML\nDESCRIPTION: An example of configuring ImageInteractive rendering settings in an XML-based configuration file. It sets the output format to PNG and specifies the text rendering hint as AntiAliasGridFit.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-export-formats/imageinteractive-device-information-settings.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n…\n\t<Telerik.Reporting>\n\t\t<extensions>\n\t\t\t<render>\n\t\t\t\t<extension name=\"IMAGEInteractive\">\n\t\t\t\t\t<parameters>\n\t\t\t\t\t\t<parameter name=\"OutputFormat\" value=\"PNG\"/>\n\t\t\t\t\t\t<parameter name=\"TextRenderingHint\" value=\"AntiAliasGridFit\"/>\n\t\t\t\t\t</parameters>\n\t\t\t\t</extension>\n\t\t\t</render>\n\t\t</extensions>\n\t</Telerik.Reporting>\n…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kestrel for Synchronous Operations in ASP.NET Core 3.0\nDESCRIPTION: Code to enable synchronous I/O operations in Kestrel web server by configuring AllowSynchronousIO in the Program.cs file's CreateWebHostBuilder method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/images-not-displayed-in-dotnet-core-3.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n     WebHost.CreateDefaultBuilder(args)\n         .UseStartup<Startup>()\n         .ConfigureKestrel((context, options) =>\n         {\n             options.AllowSynchronousIO = true;\n         })\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parameter Editors with Validation Logic\nDESCRIPTION: Creates custom parameter editors with validation logic, including a Kendo ComboBox for selection and a number input that validates against the selected value. Implements change event handlers for real-time validation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-validate-report-parameters-on-the-client.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar basedParameterName = \"Parent\", //The parameter name that will be used for validaion\n\t\t\tparentParameterValue,\n\t\t\tchildParameter;\n\n\t\tfunction createSingleSelectEditor(placeholder, options) {\n\t\t\tvar kendoComboBoxElement = $(placeholder).html('<div></div>'),\n\t\t\t\tparameter,\n\t\t\t\tvalueChangedCallback = options.parameterChanged,\n\t\t\t\tkendoComboBox;\n\n\t\t\tfunction onChange() {\n\t\t\t\tvar val = kendoComboBox.value();\n\t\t\t\tvalueChangedCallback(parameter, val);\n\n\t\t\t\tif (parameter.name === basedParameterName) {\n\t\t\t\t\t//Save the value\n\t\t\t\t\tparentParameterValue = val;\n\t\t\t\t\t//Trigger change event on the childParameter to fire the validation\n\t\t\t\t\tchildParameter.trigger(\"change\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbeginEdit: function (param) {\n\t\t\t\t\tparameter = param;\n\n\t\t\t\t\t//Find the parameter based on its name if you have more than one parameter of this type\n\t\t\t\t\tif (parameter.name === basedParameterName) {\n\t\t\t\t\t\tparentParameterValue = parameter.value;\n\t\t\t\t\t}\n\n\t\t\t\t\tkendoComboBox = $(kendoComboBoxElement).kendoComboBox({\n\t\t\t\t\t\tdataTextField: \"name\",\n\t\t\t\t\t\tdataValueField: \"value\",\n\t\t\t\t\t\tvalue: parameter.value,\n\t\t\t\t\t\tdataSource: parameter.availableValues,\n\t\t\t\t\t\tchange: onChange\n\t\t\t\t\t}).data(\"kendoComboBox\");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction createNumberEditor(placeholder, options) {\n\t\t\tvar inputElement,\n\t\t\t\tplaceholder = $(placeholder),\n\t\t\t\tvalidation = placeholder.prev(), //Find the validation element for this specific editor\n\t\t\t\tparameter,\n\t\t\t\tvalueChangedCallback = options.parameterChanged;\n\n\t\t\tfunction onChange() {\n\t\t\t\tvar val = parseInt(inputElement.val());\n\t\t\t\t// Validate the input value.\n\t\t\t\tif (parentParameterValue >= val) {\n\t\t\t\t\tvalidation.find(\".trv-parameter-error-message\")\n\t\t\t\t\t\t.html(\"The value should be greater than \" + parentParameterValue);\n\t\t\t\t\tinputElement.addClass(\"k-invalid\");\n\t\t\t\t\tvalidation.show();\n\t\t\t\t} else {\n\t\t\t\t\tvalueChangedCallback(parameter, val);\n\t\t\t\t\tvalidation.hide();\n\t\t\t\t\tinputElement.removeClass(\"k-invalid\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbeginEdit: function (param) {\n\t\t\t\t\tparameter = param;\n\n\t\t\t\t\tplaceholder.html('<input type=\"text\" value=\"' + parameter.value + '\" class=\"k-textbox\" />');\n\t\t\t\t\tinputElement = placeholder.find(\"input\");\n\t\t\t\t\tchildParameter = inputElement;\n\t\t\t\t\t//Using a jQuery to detect changes in the input value\n\t\t\t\t\tplaceholder.on(\"change\", \"input\", onChange);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Converting Crystal Reports to Telerik Reports - Console Application in C#\nDESCRIPTION: This code snippet demonstrates how to create a C# console application to convert Crystal Reports (.rpt files) to Telerik Reporting (.trdx files) using a custom Converter class. It details the implementation of the conversion process, including scanning for report files and using Telerik's CrystalReportsConverter. Dependencies include Telerik.Reporting.dll and Telerik.ReportConverter.CrystalReports.dll.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/crystal-reports-convert-programmatically.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nnamespace CrystalReportsConverter\n{\n\tusing System;\n\tusing System.IO;\n\tusing Telerik.Reporting.Interfaces;\n\n\tclass Converter\n\t{\n\t\tpublic void Convert(string directory)\n\t\t{\n\t\t\tvar logger = new ConsoleLogger();\n\t\t\tlogger.LogInfo($\"Conversion started in folder {directory}.\");\n\t\t\tvar files = Directory.GetFiles(directory, \"*.rpt\");\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (int i = 0; i < files.Length; i++)\n\t\t\t\t{\n\t\t\t\t\tlogger.LogInfo($\"Converting file {i + 1}/{files.Length}: {Path.GetFileName(files[i])}...\");\n\t\t\t\t\tConvert(files[i], logger);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tlogger.LogError(ex.Message);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tlogger.LogInfo($\"Conversion of {files.Length} Crystal Report files completed.\");\n\t\t\t}\n\t\t}\n\n\t\tvoid Convert(string crystalReportFilePath, ILog logger)\n\t\t{\n\t\t\tvar crConverter = new Telerik.ReportConverter.CrystalReports.CrystalReportsConverter();\n\t\t\tvar trReport = crConverter.Convert(crystalReportFilePath, logger);\n\t\t\t\n\t\t\tvar telerikReportFilePath = Path.ChangeExtension(crystalReportFilePath, \"trdx\");\n\t\t\tnew Telerik.Reporting.XmlSerialization.ReportXmlSerializer()\n\t\t\t\t.Serialize(telerikReportFilePath, trReport);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Service Connection in Windows Forms Report Viewer\nDESCRIPTION: Demonstrates how to configure the ReportEngineConnection property to use a REST Service for report rendering, including setting the service URL and connection options.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/how-to-use-windows-forms-report-viewer-with-rest-service.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Configure Report Viewer Connection to REST Service\nreportViewer.ReportEngineConnection = \"Engine=RestService;Url=https://your-rest-service-url/api/reports;UseDefaultCredentials=true;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly References in XML Config\nDESCRIPTION: XML configuration for adding assembly references to the Telerik Reporting configuration section\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/connecting-the-objectdatasource-component-to-a-data-source.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<configuration>\n\t<configSections>\n\t\t<section name=\"Telerik.Reporting\" type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\" allowLocation=\"true\" allowDefinition=\"Everywhere\" />\n\t</configSections>\n...\n\t<Telerik.Reporting>\n\t\t<assemblyReferences>\n\t\t\t<add name=\"yourAssemblyName\"/>\n\t\t</assemblyReferences>\n\t</Telerik.Reporting>\n...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Attempt Error in WinForms with Telerik Reporting\nDESCRIPTION: This code snippet illustrates the error that occurs due to improper access to the HttpRequestHelper method when connecting the WinForms ReportViewer to the Telerik report service. It requires the Microsoft.AspNet.WebApi.Client package suitable for .NET4 as a dependency.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/winforms-reportviewer-failed-attempt-error-connecting-server-reporting-rest.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAttempt by method 'Telerik.Reporting.Services.HttpClient.HttpRequestHelper.GetResponseFromPost(System.Net.Http.HttpResponseMessage)' to access method 'Telerik.Reporting.Services.HttpClient.HttpRequestHelper.GetResponseFromPost <T> (System.Net.Http.HttpResponseMessage, System.Collections.Generic.IEnumerable <System.Net.Http.Formatting.MediaTypeFormatter>)' failed.\n```\n\n----------------------------------------\n\nTITLE: Interface Changes - IDefinitionStorage and IResourceStorage\nDESCRIPTION: Updates to key interfaces in the WebReportDesigner.Services namespace to support asynchronous report definition handling and asset storage functionality.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2022/r2-2022.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Required interface implementations:\nTelerik.WebReportDesigner.Services.IDefinitionStorage\nTelerik.WebReportDesigner.Services.IResourceStorage : IAssetsStorage\n```\n\n----------------------------------------\n\nTITLE: Implementing viewerToolTipOpening Event Handler in HTML5 Report Viewer\nDESCRIPTION: Example showing how to initialize a Telerik Report Viewer with a custom viewerToolTipOpening event handler that cancels tooltips containing '2004' in their title. The code demonstrates jQuery document ready handler usage and ReportViewer configuration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/viewertooltipopening(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.ProductSales, CSharp.ReportLibrary\"\n\t\t},\n\t\tviewerToolTipOpening: function(e, args)\n\t\t{\n\t\t\t//disable a tooltip that contains '2004' in its title\n\t\t\targs.cancel = (/2004/i.test(args.toolTip.title));\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: ConfigSection for ReportService in VB.NET\nDESCRIPTION: This VB.NET snippet demonstrates the use of ConfigSectionReportServiceConfiguration for the REST Service, enabling overriding of configuration file properties to set necessary parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-storage/how-to-configure-an-mssql-database-storage.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\MvcVB\\Controllers\\ReportsControllerConfigSection.vb region=ReportsControllerConfigSectionImplementation}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Report as Image Interactive\nDESCRIPTION: Renders a report with interactive page layout using image output. Defaults to EMF format, with fallback to other bitmap formats. TIFF not supported.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/export-formats.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.ImageRendering.ImageReportInteractive, Telerik.Reporting, Version=x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Creating Multiline Expressions in Edit Expression Dialog - Markdown\nDESCRIPTION: This snippet shows how to concatenate fields with a newline character to format output in the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/tools/edit-expression-dialog.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n>```  \n>= Fields.FirstLine + \"\\n\" + Fields.SecondLine  \n>```\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response for Document Request - HTTP\nDESCRIPTION: This is a sample HTTP response for a successful GET document request demonstrating the response headers, status code, and content-disposition for handling attachments.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document.md#2025-04-21_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\n\nContent-Disposition: attachment; filename=ProductCatalog.pdf\n\nbytes\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP GET Request to Fetch Document - HTTP\nDESCRIPTION: A sample GET request to demonstrate how to fetch a document from the Telerik Reporting REST Service using specific client, instance, and document IDs. This particular example returns a Product Catalog as a downloadable PDF, illustrating the expected format and response headers. This requires a properly configured environment with access to the specified server endpoints.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document.md#2025-04-21_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/reports/clients/2c3d/instances/4d3c/documents/5x3a HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: DocumentInfo JSON Structure Example in Telerik Reporting\nDESCRIPTION: An example of the DocumentInfo JSON entity structure that indicates the status of a document resource. It includes fields for document readiness, page count, document map availability, and bookmark nodes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/documentinfo.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"documentReady\": true,\n\t\"pageCount\": 10,\n\t\"documentMapAvailable\": false,\n\t\"BookmarkNodes\": [\n\t\t{\n\t\t\t\"id\": \"Bikes\",\n\t\t\t\"text\": \"Bikes\",\n\t\t\t\"page\": 3,\n\t\t\t\"items\": [\n\t\t\t\t{\n\t\t\t\t\"id\": \"Bikes\",\n\t\t\t\t\"text\": \"Bikes\",\n\t\t\t\t\"page\": 3,\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"Bikes\",\n\t\t\t\"text\": \"Bikes\",\n\t\t\t\"page\": 3,\n\t\t},\n\t],\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Positional Parameters for OLE DB/ODBC\nDESCRIPTION: Example of SQL query using positional parameters (?) for OLE DB and ODBC providers\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-parameters-with-the-sqldatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM Person.Contact WHERE FirstName = ? AND LastName = ?\n```\n\n----------------------------------------\n\nTITLE: Adding jQuery Reference\nDESCRIPTION: HTML code to include jQuery library dependency\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-the-web-designer-in-vue.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigurationService for Telerik Reporting in C#\nDESCRIPTION: This code defines a ConfigurationService class that encapsulates IHostingEnvironment and IConfiguration. It's used to provide configuration settings for the Telerik Reporting service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-inject-custom-dependency-in-reports-controller-of-dot-net-core-application.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ConfigurationService\n{\n    public ConfigurationService(IHostingEnvironment environment)\n    {\n        this.Environment = environment;\n \n        var configFileName = System.IO.Path.Combine(environment.ContentRootPath, \"appsettings.json\");\n        var config = new ConfigurationBuilder()\n                        .AddJsonFile(configFileName, true)\n                        .Build();\n \n        this.Configuration = config;\n    }\n    \n    public IConfiguration Configuration { get; private set; }\n \n    public IHostingEnvironment Environment { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MVC Compatibility Version in ConfigureServices\nDESCRIPTION: This code snippet adds MVC functionality and sets the compatibility version to Version 2.1 in the ConfigureServices method of the Startup.cs file. This ensures that the application is compatible with ASP.NET Core 2.1 and prevents potential breaking behavior changes between ASP.NET Core versions. This step is crucial for integrating the Web Report Designer service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-core-2.1-application.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n````CSharp\nservices.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n````\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting Expression for Group Row in Telerik Reporting\nDESCRIPTION: This expression applies alternating styles to group rows in a table. It uses the RowNumber() function to determine if the current row is even or odd.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/applying-conditional-formatting-rule-to-expandable-area.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\n= RowNumber()%2\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cache Provider in XML\nDESCRIPTION: This XML snippet demonstrates how to configure a custom cache provider within the Telerik Reporting configuration.  It involves specifying the provider's name and type, including the assembly qualified name.  This configuration allows the reporting engine to utilize the custom cache provider during report processing.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-custom-cache-provider.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<Cache provider=\"MyCacheProvider\">\n\t\t<Providers>\n\t\t\t<Provider name=\"MyCacheProvider\" type=\"MyNameSpace.MyCacheProvider, AssemblyName, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\">\n\t\t\t\t<Parameters>\n\t\t\t\t\t<Parameter />\n\t\t\t\t</Parameters>\n\t\t\t</Provider>\n\t\t</Providers>\n\t</Cache>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Hiding Print Dialog in C# for Telerik Reporting\nDESCRIPTION: This C# code snippet demonstrates how to hide the print progress dialog when printing a report programmatically using Telerik Reporting. It utilizes a StandardPrintController and custom printer settings to prevent the UI from appearing during batch printing or when printing from a service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-hide-print-dialog.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar reportName = \"Telerik.Reporting.Examples.CSharp.Dashboard, CSharp.ReportLibrary\";\n\n// Obtain the settings of the default printer\nSystem.Drawing.Printing.PrinterSettings printerSettings\n\t= new System.Drawing.Printing.PrinterSettings();\n\n// The standard print controller comes with no UI\nSystem.Drawing.Printing.PrintController standardPrintController =\n\tnew System.Drawing.Printing.StandardPrintController();\n\n// Print the report using the custom print controller\nTelerik.Reporting.Processing.ReportProcessor reportProcessor\n\t= new Telerik.Reporting.Processing.ReportProcessor();\n\nreportProcessor.PrintController = standardPrintController;\n\nTelerik.Reporting.TypeReportSource typeReportSource =\n\tnew Telerik.Reporting.TypeReportSource();\n\n// reportName is the Assembly Qualified Name of the report\ntypeReportSource.TypeName = reportName;\n\nreportProcessor.PrintReport(typeReportSource, printerSettings);\n```\n\n----------------------------------------\n\nTITLE: Data Method Snippet in C#\nDESCRIPTION: This is a placeholder for a C# data method snippet within the Cars class. It highlights the use of the DataObjectMethodAttribute to mark methods suitable for data binding.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/tools/data-source-wizards/objectdatasource-wizard.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\t\t{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\ObjectDataSourceSnippets.cs region=DataMethodSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Defining Report Layout and Document Properties\nDESCRIPTION: This snippet encompasses properties relevant to the layout and document settings of a report, including pagination styles, document names, and unit measures. These settings are crucial for configuring how reports are formatted and paginated when generated. The snippet is dependent on the Telerik Reporting engine for rendering the specified layout correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/localizing-the-web-report-designer.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.PageNumberingStyle = \"Page numbering style\";\nthis.PageSettings = \"Page settings\";\nthis.DocumentName = \"Document name\";\nthis.UnitOfMeasure = \"Unit of measure\";\nthis.Parent = \"Parent\";\nthis.Action = \"Action\";\nthis.BookmarkId = \"Bookmark ID\";\nthis.DocumentMapText = \"Document map text\";\nthis.TocText = \"ToC text\";\nthis.Name = \"Name\";\nthis.Bindings = \"Bindings\";\nthis.DataSource = \"Data source\";\nthis.DataSourceReference = `Data Source Reference`;\nthis.DataSourceReadOnlySuffix = \" (readonly)\";\nthis.DataSourceUnsupportedWarning = \" is initialized as readonly component.\";\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of TypeReferences Element in Telerik Reporting Configuration\nDESCRIPTION: Shows the basic JSON structure of the TypeReferences element in a Telerik Reporting configuration file. This element is an array of type references.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/typereferences-element.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"TypeReferences\": [\n],\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document via REST API (DELETE Request)\nDESCRIPTION: This snippet demonstrates the structure of a DELETE request to the Telerik Reporting REST API for releasing a specific document. It requires providing the client ID, instance ID, and document ID as path parameters. The expected response is 204 NoContent upon successful deletion.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/release-document.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /api/reports/clients/{clientId}/instances/{instanceId}/documents/{documentId}\n```\n\n----------------------------------------\n\nTITLE: Error Response from Swagger JSON Endpoint\nDESCRIPTION: Client-side error message that appears when trying to fetch the Swagger definition JSON file, showing a 500 server response.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/conflicting-actions-error-in-swagger-generation-net-core.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFetch error\n\nresponse status is 500 https://localhost:{port}/swagger/v1/swagger.json\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting Expression for Crosstab Row\nDESCRIPTION: An example of a conditional formatting expression that may not work correctly for all cells in a Crosstab row with dynamic groups.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/conditional-formatting-not-applied-to-the-entire-row.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n= Fields.DataFieldName  =   SomeValue\n```\n\n----------------------------------------\n\nTITLE: Setting Drillthrough Action Parameter Value in Telerik Reporting\nDESCRIPTION: This expression toggles the boolean parameter value when the drillthrough action is triggered, allowing the graph to switch between merged and expanded states.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-graph-with-merged-last-column-which-can-expand-and-collapse.md#2025-04-21_snippet_2\n\nLANGUAGE: Expression\nCODE:\n```\n= Parameters.paramMerged.Value = 'False'\n```\n\n----------------------------------------\n\nTITLE: Referencing report files in .NET Standard/.NET Core\nDESCRIPTION: This snippet describes how to reference `.cs` and `.resx` report files in a .NET Standard or .NET Core library. This enables the use of existing report definitions while retaining custom code. Required NuGet packages for missing classes like `System.Drawing.Common` should be added for compilation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-existing-report-library-in-net-core-app.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n\"If the custom code in the report definitions must be retained, reference the `.cs` and `.resx` files of your reports to a new .NET Standard or .NET Core library. The `.designer.cs` file will be added automatically with the `.cs` file. Add references to NuGet packages for the missing classes (i.e. `System.Drawing.Common` for the `PaperKind` class). Once the project compiles, the report classes it contains can be used through a [TypeReportSource](/api/telerik.reporting.typereportsource) or [InstanceReportSource](/api/telerik.reporting.instancereportsource) in a .NET Core application.\"\n```\n\n----------------------------------------\n\nTITLE: Correcting Client-side Object Reference for ReportViewer\nDESCRIPTION: This HTML snippet demonstrates the correct order of script referencing to ensure the client-side object for ReportViewer is registered post the control's creation. Placing the script after the control registration prevents 'undefined' errors when accessing the viewer's client-side object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reportviewer-is-undefined-javascript-error.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\"> \nvar viewer = <%=ReportViewer1.ClientID%> \n</script> \n<telerik:reportviewer id=\"ReportViewer1\" runat=\"server\"></telerik:reportviewer>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAccessDataSource with Named Connection String in C#\nDESCRIPTION: This snippet demonstrates how to use a named connection string from a configuration file for the OpenAccessDataSource component. This is the recommended approach for easier maintenance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/configuring-the-database-connectivity-with-the-openaccessdatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nOpenAccessDataSource openAccessDataSource = new OpenAccessDataSource();\nopenAccessDataSource.ContextTypeName = typeof(AdventureWorksModel.AdventureWorksEntities).AssemblyQualifiedName;\nopenAccessDataSource.OpenAccessContextOptions = OpenAccessContextOptions.Default;\nopenAccessDataSource.Member = \"SalesOrderHeaders\";\nopenAccessDataSource.ConnectionString = \"AdventureWorksConnectionString\";\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Strings in Telerik Reports VB\nDESCRIPTION: This Visual Basic code snippet iterates through report parameters and report items, updating connection strings for SqlDataSource instances. It allows recursive setting of connection strings, managing drill-through actions, sub-reports, and various data items such as Crosstabs, Tables, and Charts. Dependencies include Telerik.Reporting library for handling report parameters and items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/changing-the-connection-string-dynamically-according-to-runtime-data.md#2025-04-21_snippet_2\n\nLANGUAGE: VB\nCODE:\n```\nFor Each parameter As Telerik.Reporting.ReportParameter In report.ReportParameters\n\tIf TypeOf parameter.AvailableValues.DataSource Is SqlDataSource Then\n\t\tDim sqlDataSource = DirectCast(parameter.AvailableValues.DataSource, SqlDataSource)\n\t\tsqlDataSource.ConnectionString = connectionString\n\tEnd If\nNext\nEnd If\n\nFor Each item As Telerik.Reporting.ReportItemBase In reportItemBase.Items\n\t'set connection string\n\tSetConnectionString(item)\n\n\t'set drill-through report connection strings\n\tDim drillThroughAction = TryCast(item.Action, NavigateToReportAction)\n\tIf drillThroughAction IsNot Nothing Then\n\t\tDim updatedReportInstance = Me.UpdateReportSource(drillThroughAction.ReportSource)\n\t\tdrillThroughAction.ReportSource = updatedReportInstance\n\tEnd If\n\n\tIf TypeOf item Is SubReport Then\n\t\tDim subReport = DirectCast(item, SubReport)\n\t\tsubReport.ReportSource = Me.UpdateReportSource(subReport.ReportSource)\n\t\tContinue For\n\tEnd If\n\n\t'Covers all data items\n\tIf TypeOf item Is DataItem Then\n\t\tDim dataItem = DirectCast(item, DataItem)\n\t\tIf TypeOf dataItem.DataSource Is SqlDataSource Then\n\t\t\tDim sqlDataSource = DirectCast(dataItem.DataSource, SqlDataSource)\n\t\t\tsqlDataSource.ConnectionString = connectionString\n\t\t\tContinue For\n\t\tEnd If\n\n\tEnd If\nNext\nEnd Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Upgrading Angular ReportViewer via npm\nDESCRIPTION: Commands to upgrade the Angular ReportViewer to match the version used by the REST Service. Use either of these npm commands to install the latest version.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/angular-error-loading-report-viewers-templates.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @progress/telerik-angular-report-viewer\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @progress/telerik-angular-report-viewer\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Serving in ASP.NET Core\nDESCRIPTION: Ensures that the ASP.NET Core application can serve static files by adding the necessary middleware in the Startup.cs file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/how-to-use-html5-report-viewer-in-an-asp.net-core-2.1-and-2.2-application.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\napp.UseStaticFiles();\n```\n\n----------------------------------------\n\nTITLE: Overriding GetUserIdentity in ReportsController\nDESCRIPTION: Implementation of GetUserIdentity method to store HttpContext information in UserIdentity.Context. This code demonstrates how to capture the UrlReferrer and store it in the identity context for later use.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-pass-information-from-httpcontext-to-reporting-engine.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected override UserIdentity GetUserIdentity()\n{\n    var identity = base.GetUserIdentity();\n    identity.Context = new System.Collections.Concurrent.ConcurrentDictionary<string, object>();\n    identity.Context[\"UrlReferrer\"] = System.Web.HttpContext.Current.Request.UrlReferrer;\n    \n    // Any other available information can be stored in the identity.Context in the same way\n\n    return identity;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Footer Expression for Group Continuation in Telerik Reporting\nDESCRIPTION: This expression checks if a group continues onto the next page and displays a message with the running total. It uses the PageFooterSumUntilNow custom aggregate function to show the accumulated sum transitioning to the next page.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/summary-per-page-when-group-is-on-multiple-pages.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n= IIf(\nPageExec(\"detailSection1\", Last(Fields.account)) <> IsNull(PageExec(\"groupFooterSection\", Last(Fields.account)), \"N/A\"),     \nFormat(\"Account {0} continues on next page. Value transitioning to next page: {1}\", PageExec(\"detailSection1\", Last(Fields.account)), \nPageExec(\"detailSection1\", PageFooterSumUntilNow(Fields.value, Fields.account))),\n\"\")\n```\n\n----------------------------------------\n\nTITLE: Custom SharedDataSourceResolver Implementation in C#\nDESCRIPTION: Implements ISharedDataSourceResolver to resolve shared data sources by decrypting their connection strings. It requires a shared data sources directory and uses System.IO for file handling operations. The custom resolver integrates with Telerik's report processing infrastructure.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-encrypted-connection-strings-telerik-reporting.md#2025-04-21_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class CustomSharedDataSourceResolver : ISharedDataSourceResolver\n{\n    readonly string BaseDir = \"C:\\\\Shared Data Sources Directory\";\n    public DataSource Resolve(string sharedDataSourceUri)\n    {\n        var path = Path.Combine(BaseDir, sharedDataSourceUri);\n        using var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read);\n        var sqlDataSource = (Telerik.Reporting.SqlDataSource)new Telerik.Reporting.XmlSerialization.ReportXmlSerializer()\n            .Deserialize(fileStream);\n\n        sqlDataSource.ConnectionString = DecryptClass.DecryptConnectionString(sqlDataSource.ConnectionString);\n\n        return sqlDataSource;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Angular Component View Encapsulation - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to change the view encapsulation to None in an Angular component, allowing for global styles to be applied properly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-report-server.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewEncapsulation } from '@angular/core';\n\t@Component({\n\t\tecnapsulation: ViewEncapsulation.None\n\t})\n```\n\n----------------------------------------\n\nTITLE: Removing WebDAVModule in Web.config\nDESCRIPTION: This XML configuration removes the WebDAVModule from the web application to resolve conflicts with Telerik Reporting REST service's required PUT and DELETE verbs.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-report-viewer-throws-405-method-not-allowed-error.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<system.webServer>\n\t\t<modules runAllManagedModulesForAllRequests=\"true\">\n\t\t\t<remove name=\"WebDAVModule\"/>\n\t\t</modules>\n\t</system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Initializing UriReportSource for REST Service\nDESCRIPTION: This snippet shows how to configure the UriReportSource for reports that are rendered server-side via the Telerik Reporting REST Service. The referred report must be accessible by the service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/how-to-add-report-viewer-to-a-windows-forms'-.net-core-project.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\ReportViewer\\WinForms\\Form1.cs region=DesktopViewer_Core_RestService_UriReportSource}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting Extensions for Azure Web Apps - JSON\nDESCRIPTION: This JSON configuration defines rendering extensions parameters for Telerik Reporting to ensure proper report generation in Azure by disabling the use of Metafiles.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/outofmemoryexception-on-exporting-or-printing-telerik-report-from-azure-webapps.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\t\t\"telerikReporting\": {\n\t\t\t\t\"extensions\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"DOCX\",\n\t\t\t\t\t\t\"parameters\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"Name\": \"UseMetafile\",\n\t\t\t\t\t\t\t\t\"Value\": false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"PPTX\",\n\t\t\t\t\t\t\"parameters\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"Name\": \"UseMetafile\",\n\t\t\t\t\t\t\t\t\"Value\": false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"XLSX\",\n\t\t\t\t\t\t\"parameters\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"Name\": \"UseMetafile\",\n\t\t\t\t\t\t\t\t\"Value\": false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Sample Get Document Resource Response\nDESCRIPTION: This snippet shows a sample HTTP response after a successful request. It returns HTTP status code 200 OK and file-content.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document-resource.md#2025-04-21_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\n\"HTTP/1.1 200 OK\\n\\nfile-content\"\n```\n\n----------------------------------------\n\nTITLE: Applying Null-coalescing Operator in Telerik Reporting Expressions\nDESCRIPTION: This snippet illustrates the use of the null-coalescing operator '??' in Telerik Reporting expressions. It returns the Description field if it's not null, otherwise returns 'N/A'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/operators.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n=Fields.Description ?? \"N/A\"\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Dependencies\nDESCRIPTION: This HTML snippet includes necessary JavaScript dependencies and assets required for the Blazor Web Report Designer, integrating external scripts and stylesheets into the HTML head.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-blazor-application.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t<script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/kendo.all.min.js\"></script>\n\t<script src=\"/api/reportdesigner/resources/js/telerikReportViewer\"></script>\n\t<script src=\"/api/reportdesigner/designerresources/js/webReportDesigner/\"></script>\n\t<link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500&display=swap\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Running Angular Application Start Script\nDESCRIPTION: This snippet shows how to run the 'start' script for an Angular application using npm. This initializes the application and makes it accessible for testing and use.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/integrating-with-project-item-generator.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Listeners for .NET Framework in XML\nDESCRIPTION: This XML snippet demonstrates how to configure trace listeners within the system.diagnostics section of the application configuration file for .NET Framework.  It includes settings for the trace listener type, initialization data (log file path), and removal of the default listener to facilitate debugging and logging within Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/configuration/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<system.diagnostics>\n\t\t<trace autoflush=\"true\" indentsize=\"4\">\n\t\t\t<listeners>\n\t\t\t\t<add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"C:\\Temp\\Telerik.ReportDesigner.log\" />\n\t\t\t\t<remove name=\"Default\" />\n\t\t\t</listeners>\n\t\t</trace>\n\t</system.diagnostics>\n```\n\n----------------------------------------\n\nTITLE: Handling Intelligent Mail Barcode Length Requirements\nDESCRIPTION: Intelligent Mail barcodes require specific input lengths of 20, 25, 29, or 31 characters. Developers must ensure the barcode value meets these exact length constraints to prevent encoding errors.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/encoder-requires-specific-barcode-length.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSupported Intelligent Mail Barcode Lengths: 20, 25, 29, 31 characters\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Parameter UI in MVC View\nDESCRIPTION: HTML/Razor markup for creating a dropdown selector for invoice parameters in both C# and VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n@model MyMVCProject.Models.InvoiceViewModel\n\t<div id=\"invoiceIdSelector\">\n  \t@Html.LabelFor(m => m.SelectedInvoiceId)\n  \t@Html.DropDownListFor(m => m.SelectedInvoiceId, Model.InvoiceItems, new { id = \"invoiceId\", title = \"Select the Invoice ID\" })\n\t</div>\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n@ModelType MyMVCProject.InvoiceViewModel\n\t<div id=\"invoiceIdSelector\">\n  \t@Html.LabelFor(Function(m) m.SelectedInvoiceId)\n  \t@Html.DropDownListFor(Function(m) m.SelectedInvoiceId, Model.InvoiceItems, New With { Key.id = \"invoiceId\", Key.title = \"Select the Invoice ID\" })\n\t</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Native Angular Report Viewer NPM Package\nDESCRIPTION: PowerShell command for installing the Telerik Angular Native Report Viewer package via npm, with login instructions for restricted access\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-standalone-components.md#2025-04-21_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install @progress/telerik-angular-native-report-viewer\n\n# Optional login for restricted access\nnpm login --registry=https://registry.npmjs.org --scope=@progress\n```\n\n----------------------------------------\n\nTITLE: NSwag Exception on Duplicate Controller Methods\nDESCRIPTION: Server-side exception thrown by NSwag when there are duplicate method registrations in the Telerik Reporting controllers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/conflicting-actions-error-in-swagger-generation-net-core.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAn unhandled exception has occurred while executing the request.\n\nSystem.InvalidOperationException: The method 'get' on path '/api/ReportDesignerControllerBase' is registered multiple times.\n\tat NSwag.Generation.AspNetCore.AspNetCoreOpenApiDocumentGenerator.AddOperationDescriptionsToDocument(OpenApiDocument document, Type controllerType, List`1 operations, OpenApiDocumentGenerator swaggerGenerator, OpenApiSchemaResolver schemaResolver)\n\tat NSwag.Generation.AspNetCore.AspNetCoreOpenApiDocumentGenerator.GenerateApiGroups(OpenApiDocument document, IGrouping`2[] apiGroups, OpenApiSchemaResolver schemaResolver)\n\tat NSwag.Generation.AspNetCore.AspNetCoreOpenApiDocumentGenerator.GenerateAsync(ApiDescriptionGroupCollection apiDescriptionGroups)\n\tat NSwag.AspNetCore.Middlewares.OpenApiDocumentMiddleware.GenerateDocumentAsync(HttpContext context)\n\tat NSwag.AspNetCore.Middlewares.OpenApiDocumentMiddleware.GetDocumentAsync(HttpContext context)\n\tat NSwag.AspNetCore.Middlewares.OpenApiDocumentMiddleware.Invoke(HttpContext context)\n\tat Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Link in Report Viewer Template\nDESCRIPTION: Modifies the link to the stylesheet in the local Report Viewer template file to use a local CSS file instead of the default one.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-load-telerik-report-viewer-resources-locally-in-angular-application-and-use-them-to-customize-the-viewer.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"assets/telerikReportViewer-{{buildversion}}.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Sample GET Version Request in HTTP\nDESCRIPTION: Complete HTTP sample request for retrieving the Telerik Reporting REST Service version, showing the HTTP/1.1 protocol specification.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/general-api/get-version.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /api/reports/version HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Location Map Series Expression Update\nDESCRIPTION: Example showing the renamed LocationProvider expression to Location in LocationMapSeries\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2016/r3-2016.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n=\"Location\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Data in Report Resolver\nDESCRIPTION: Example of accessing the stored HttpContext information within a Custom Report Resolver method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/core-how-to-pass-information-from-httpcontext-to-reporting-engine.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// can be included in the Resolve() method of the Custom Report Resolver\nUri urlReferrer = (Uri)UserIdentity.Current.Context[\"UrlRefferer\"];\n```\n\n----------------------------------------\n\nTITLE: Embedded Image Configuration in RESX File\nDESCRIPTION: This XML snippet shows how an image is embedded as a `System.Drawing.Bitmap` object inside a RESX file. This format is incompatible with the Skia graphics engine, causing an error in Telerik Reporting. The assembly alias and data type specify the image as a Bitmap.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/embedded-image-clr-report-skia-error.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n\"<assembly alias=\\\"System.Drawing\\\" name=\\\"System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\\\" />\\n<data name=\\\"pictureBox2.Value\\\" type=\\\"System.Drawing.Bitmap, System.Drawing\\\" mimetype=\\\"application/x-microsoft.net.object.bytearray.base64\\\">\\n\t<value>\\n\t\tiVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8\\n\t\tYQUAAAAJcEhZcwAACxEAAAsRAX9kX5EAAAP8SURBVHhe7d2vbhRdHMbxGrgFLqFBIEm4AAQahysWg8CR\\n\t\tcAVwBYBDkeBRCEQFooYQBKKiAoFoQhAIxDBP05Jtec7s7O6cmXN+53uSj3pn2U2/Dx22f/LudV1Xhf2P\\n\t\tw96HaZlP9il6V8o8TOxH/CS9C+S+BnZD3op+hdI/MzsB74E/Ysj/gzsB39p/Qsj/kxsgCX1L4r4M7IR\\n\t\tltK/IOLPzIZYws0311+7F4i8bIy5EX85NsiciL8sG2UuxF+eDTMH4pfBxsmN+OWwgXIifllspFyIXx4b\\n\t\tKgfil8nGmhrxy2WDTYn4ZbPRpkL88tlwUyB+HWy8XRG/HjbgLohfFxtxW8Svjw25DeLXycbcFPHrZYNu\\n\t\tgvh1s1HHIn79bNgxiB+DjbsO8eOwgYcQPxYbOYX48djQDvFjsrGvIn5cNvgq4sdmo1+49eQav6sXnA0v\\n\t\tit+zD0Icg/EZQHyD8RlAfIPxGUB8g/HFPQhxDMYX9yDEMRhf3IMQhwZgw19wD0IcDKBxDKBxDKBxDKBx\\n\t\tDKBxDKBxDKBxYQfw8PO9bpvz889pd3j6oXtx/LS7f3TH/tmRMIA1R2O4+2nfPkcEDGDE0WeFqJ8NGMDI\\n\t\tE3UEDGCDo9uBe66aNTkA/Tfn8dcH3cuT52d/21NH17nnq1WTA3DXr9Kn+tQINBD3mFoxgIRn3x6dX335\\n\t\tRLsNMIAEvfVLHXd9rRjAgNRx19aKAQxIHXdtrRhAgt4RuPPl15G9vlYMwLh9eOMstDtvv7+yj6kVA1ih\\n\t\t8PrXfyq+jj4zuMfWqskBbHtOfh/b56oZA9jg6M90z1UzBjDy6Nbgnqd2DGDN0Vf+Iv9gCANInOjhLzQ5\\n\t\tgNXr9M0dd/TNIL0rWL02ouYHoMj6170773+8u3RtRM0PYN210d73X8UAzukrfO5EvxUwgHOKnPohkMi3\\n\t\tAgawIvUNIJ2otwIGcIX+trsT9VbAAK5o7VbAAAz9Wljq8N3ASuwyANFXAt2JditgAAn6odAWbgVhB4Bx\\n\t\tGEDjGEDjGEDjGEDbDhhAuw76NzR7DKBNZ/EZQJv+xWcA7bkUnwG05b/4DKAdNr4wgPiS8YUBBKb/7a+L\\n\t\tvooBBDUmvjCAgMbGFwYQzCbxhQEEsml8YQBBbBNfGEAA28YXBlC5XeILA6jYrvGFAVRqivjCACo0VXxh\\n\t\tAJWZMr4wgIpMHV8YQCVyxBcGUIFc8YUBFC5nfGEABcsdXxhAoeaILwygQHPFFwZQmDnjCwMoyNzxhQEU\\n\t\tYon4wgAKsFR8YQALWzK+MIAFLR1fGMBCSogvDGABpcSXtQPA5AZ/V29uDGBeRcUXBjCf4uILA5hHkfGF\\n\t\tAeRXbHxhAHkVHV8YQD7FxxcGkEcV8buu2/sLNx2vmOLdNKkAAAAASUVORK5CYII=\\n\t</value>\\n</data>\"\n```\n\n----------------------------------------\n\nTITLE: Handling interactiveActionExecuting Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `interactiveActionExecuting` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `interactiveActionExecuting` event is emitted before an interactive action is executed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(interactiveActionExecuting)=\"interactiveActionExecuting()\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Custom Filtering Method for Entity Data Model\nDESCRIPTION: Shows how to create a custom method using the Where extension to filter Product entities at the database level.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/retrieving-data-from-an-entity-data-model-with-the-entitydatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic IEnumerable<Product> GetProductsByColor(string color)\n{\n    return this.Products.Where(p => p.Color == color);\n}\n```\n\nLANGUAGE: VB\nCODE:\n```\nPublic Function GetProductsByColor(color As String) As IEnumerable(Of Product)\n    Return Me.Products.Where(Function(p) p.Color = color)\nEnd Function\n```\n\n----------------------------------------\n\nTITLE: Replacing Multiple Spaces with Non-Breaking Spaces in Telerik Reporting\nDESCRIPTION: This expression uses the built-in Replace Text Function to substitute double spaces with HTML non-breaking space entities (&nbsp;), preserving whitespace in HtmlTextBox elements.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-keep-whitespace-in-htmltextbox.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n=Replace(Fields.Value,'  ','&nbsp;&nbsp;')\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Cross-section Item in VB.NET\nDESCRIPTION: This code snippet provides a VB.NET implementation for adding and initializing a Cross-section report item within the Telerik Reporting framework. Ensure that the sections are correctly assigned based on their rendering needs.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/cross-section-item.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n' VB.NET code to create and initialize Cross-section item\nDim crossSectionItem As New CrossSectionItem()\ncrossSectionItem.BeginSection = reportHeader\ncrossSectionItem.EndSection = reportFooter\ncrossSectionItem.BeginMargin = New Unit(0)\ncrossSectionItem.EndMargin = New Unit(0)\nreport.Items.Add(crossSectionItem)\n```\n\n----------------------------------------\n\nTITLE: Handling reportLoadComplete Event in Angular\nDESCRIPTION: Demonstrates how to bind to the `reportLoadComplete` event of the Telerik Reporting Angular Viewer component and handle it in the component's TypeScript code. The `reportLoadComplete` event is emitted after the rendering of a report ends and provides information about the rendered document.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\nimport { DocumentInfo } from '@progress/telerik-common-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\treportLoadComplete(e: DocumentInfo) {\n\t\t\tconsole.log(\"The document information such as the page count, where it has document map, etc. will ve sent via the e object.\", e);\n\t\t\tconsole.log(\"This event will be emitted after the rendering of a report ends.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Expression for Multiple Table Groups in Telerik Reporting\nDESCRIPTION: This expression handles complex grouping scenarios in Telerik Reporting, accounting for multiple table groups. It checks previous grouping levels to set the border style conditionally. As prerequisites, the field identifiers like 'group0' and 'group1' must be defined in the dataset. This expression evaluates to 'None' or 'Solid' for the border style based on grouping changes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hide-gridlines-crosstab-table-telerik-reporting.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= (Previous(Fields.group0) = Fields.group0) Or\n  (Previous('group1', Fields.group0) = Fields.group0) ?\n\t\"None\" : \"Solid\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Silverlight Report Viewer Properties\nDESCRIPTION: Demonstrates key configuration properties for the Silverlight Report Viewer, including setting report service URI, specifying report type, and configuring printing mode\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/silverlight-application/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: silverlight\nCODE:\n```\n// Set Report Service URI\nreportViewer.ReportServiceUri = \"http://example.com/ReportService\"\n\n// Set Report Type\nreportViewer.Report = \"MyNamespace.MyReportType, MyAssembly\"\n\n// Configure Printing Mode\nreportViewer.UseNativePrinting = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String with Microsoft.Data.SqlClient Provider\nDESCRIPTION: JSON configuration example showing how to specify a connection string with Microsoft.Data.SqlClient provider name. The connection string includes Azure SQL Database connection details with Active Directory Integrated authentication.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/connecting-to-microsoft-data-sqlclient-in-web-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"ConnectionStrings\": {\n\t\"DefaultConnection\": {\n\t\t\"connectionString\": \"Data Source=tcp:fhwa-tmas-sql-svr-pool-dev.database.windows.net,1433;Initial Catalog=fhwa-tmas-sql-pool-dev;Persist Security Info=False;Authentication=Active Directory Integrated;Connection Timeout=30;\",\n\t\t\"providerName\": \"Microsoft.Data.SqlClient\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing printDesktop function in telerikReportViewer.js\nDESCRIPTION: This snippet demonstrates the replacement code for the `printDesktop` function. It leverages the Print.js library for Chrome to display the print dialog and utilizes an iframe for other browsers, effectively restoring print functionality. Requires Print.js and assumes the `trv` object is available in the scope.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-error-chrome.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"trv.printManager = function () {\\n   var iframe;\\n   function printDesktop(src) {\\n       if (window.navigator.userAgent.toLowerCase().indexOf(\\\"chrome\\\") > -1) {\\n           printJS({ printable: src, type: 'pdf', showModal: true });\\n       } else {\\n           if (!iframe) {\\n               iframe = document.createElement(\\\"IFRAME\\\");\\n               iframe.style = \\\"position:absolute; left: -10000px; top: -10000px;\\\";\\n           }\\n           iframe.src = src;\\n           document.body.appendChild(iframe);\\n       }\\n   }\\n\"\n```\n\n----------------------------------------\n\nTITLE: Complete XML Configuration Example for TypeReferences in Telerik Reporting\nDESCRIPTION: Demonstrates a complete XML configuration file setup for the TypeReferences element, including the configSections declaration and a sample type reference with typeName, assemblyName, and publicKeyToken attributes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/typereferences-element.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<configuration>\n\t<configSections>\n\t\t<section name=\"Telerik.Reporting\" type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\" allowLocation=\"true\" allowDefinition=\"Everywhere\" />\n\t</configSections>\n\t<Telerik.Reporting>\n\t\t<TypeReferences>\n\t\t\t<add typeName=\"MyNamespace.MyClassName\" assemblyName=\"MyAssemblyName\" publicKeyToken=\"my-assembly-public-key-token\" />\n\t\t</TypeReferences>\n\t</Telerik.Reporting>\n...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Enabling Text Input in Material UI Modal with React\nDESCRIPTION: This code snippet demonstrates how to configure a Material UI Modal in a React application to allow text input in the 'Send Email' dialog of the React Report Viewer. It sets the `disableEnforceFocus` property to `true` to resolve potential focus issues, ensuring that text fields are editable.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/enable-text-input-send-email-dialog-react-reportviewer-material-ui-modal.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\nimport { TelerikReportViewer } from '@progress/telerik-react-report-viewer';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 1000,\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nexport default function BasicModal() {\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div>\n      <Button onClick={handleOpen}>Open modal</Button>\n      <Modal\n        open={open}\n        disableAutoFocus={true}\n        disableEnforceFocus={true}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <TelerikReportViewer\n            serviceUrl=\"https://demos.telerik.com/reporting/api/reports/\"\n            reportSource={{\n                report: 'Dashboard.trdx',\n                parameters: {}\n            }}\n            viewerContainerStyle={{\n                width: '100%',\n                height: '600px'\n            }}\n            viewMode=\"INTERACTIVE\"\n            scaleMode=\"SPECIFIC\"\n            scale={1.0}\n            enableAccessibility={false}\n            sendEmail={{ enabled: true }}\n          />\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: HTML DOCTYPE Declaration for iOS Compatibility\nDESCRIPTION: Using an HTML4.1 DOCTYPE declaration instead of HTML5 DOCTYPE to resolve blank report display issues in the Legacy ASP.NET WebForms ReportViewer when viewing on iPad/iPhone devices.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/blank-report-in-asp.net-reportviewer-on-ipad-iphone.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportsHost in ASP.NET\nDESCRIPTION: This snippet provides a sample implementation for creating a ReportsHost class derived from ReportsHostBase, configuring the ReportServiceConfiguration property. The sample supports resolving .TRDP|.TRDX report definitions from the ASP.NET application root's Reports subfolder. The FileStorage method is used for caching. It includes dependencies on specific Telerik Reporting assemblies according to the functionality required, such as exporting reports in different formats.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/servicestack-implementation/add-rest-servicestack-to-web-application.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\MvcCS\\ServiceStack\\ReportsHost.cs region=ReportsHost_Implementation}}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\MvcVB\\ServiceStack\\ReportsHost.vb region=ReportsHost_Implementation}}\n```\n\n----------------------------------------\n\nTITLE: Understanding the Search Response - JSON\nDESCRIPTION: This snippet outlines the expected response format when searching in a document. A successful search will return an HTTP status code of 200 along with a JSON object containing the description, ID, and page number of the search result.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/search-in-a-document.md#2025-04-21_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 Ok\n{\n\t\"description\": \"Quarterly Sales Dashboard for 2003\",\n\t\"id\": \"a082030a03fa4e349abe183d161a35ea\",\n\t\"page\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SubReport Visibility Based on Data\nDESCRIPTION: This code snippet illustrates how to use a binding rule in Telerik Reporting to manage the visibility of a SubReport based on the presence of data. The SubReport's 'Visible' property is set to True only if there is at least one record in the data source, ensuring the SubReport Header is hidden when there are no records available.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hide-sub-report-if-there-is-no-data.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n= Count(Fields.SomeFieldValue) > 0\n```\n\n----------------------------------------\n\nTITLE: Registering Providers and Parameters in Telerik Reporting XML\nDESCRIPTION: This XML snippet exemplifies the registration of cache providers and their parameters in the Telerik Reporting configuration. The 'Provider' element registers individual providers, specifying optional parameters like 'BasePath' under 'Parameters'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-cache.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<Cache provider=\"File\">\n\t\t<Providers>\n\t\t\t<Provider name=\"File\">\n\t\t\t\t<Parameters>\n\t\t\t\t\t<Parameter name=\"BasePath\" value=\"C:\\MyDataCache\" />\n\t\t\t\t</Parameters>\n\t\t\t</Provider>\n\t\t</Providers>\n\t</Cache>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Registering Alternative Rendering Extensions\nDESCRIPTION: XML configuration demonstrating how to register alternative rendering extensions for various formats including XLSX, DOCX, PPTX, XLS, CSV, and PDF with custom names.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-same-rendering-extension-twice-with-different-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<extension name=\"XLSX1\" type=\"Telerik.Reporting.OpenXmlRendering.Spreadsheet.SpreadsheetReport, Telerik.Reporting.OpenXmlRendering\" description=\"xlsx1\" />\n<extension name=\"DOCX1\" type=\"Telerik.Reporting.OpenXmlRendering.Wordprocessing.WordprocessingReport, Telerik.Reporting.OpenXmlRendering\" description=\"docx1\" />\n<extension name=\"PPTX1\" type=\"Telerik.Reporting.OpenXmlRendering.Presentation.PresentationReport, Telerik.Reporting.OpenXmlRendering\" description=\"pptx1\" />\n<extension name=\"XLS1\" type=\"Telerik.Reporting.ExcelRendering.Excel97.ExcelReport, Telerik.Reporting\" description=\"xls1\" />\n<extension name=\"CSV1\" type=\"Telerik.Reporting.CsvRendering.CsvRenderingExtension, Telerik.Reporting\" description=\"csv1\" />\n<extension name=\"PDF1\" type=\"Telerik.Reporting.ImageRendering.PdfReport, Telerik.Reporting\" description=\"pdf1\" />\n```\n\n----------------------------------------\n\nTITLE: Binding OpenAccessDataSource to Custom Method with Parameters in VB.NET\nDESCRIPTION: This VB.NET code shows how to bind the OpenAccessDataSource to a custom method 'GetProductsByCategory' and pass a parameter for the category name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/connecting-to-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_7\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim oaDataSource As New OpenAccessDataSource()\noaDataSource.ObjectContext = GetType(AdventureWorksEntities)\noaDataSource.ObjectContextMember = \"GetProductsByCategory\"\noaDataSource.Parameters.Add(New Telerik.Reporting.Parameter(\"categoryName\", \"Bikes\"))\n```\n\n----------------------------------------\n\nTITLE: Binding EntityDataSource Parameters to Report Parameters in C# and VB.NET\nDESCRIPTION: This example shows how to bind EntityDataSource parameters to report parameters using expressions. This approach allows for dynamic parameter values that can be controlled through the report's parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/using-parameters-with-the-entitydatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nReport report = new Report();\n{\n    report.ReportParameters.Add(new Telerik.Reporting.ReportParameter(\"Status\", typeof(byte), 5));\n    report.ReportParameters.Add(new Telerik.Reporting.ReportParameter(\"OrderDate\", typeof(DateTime), new DateTime(2005, 7, 1)));\n\n    EntityDataSource entityDataSource = new EntityDataSource();\n    {\n        entityDataSource.ConnectionString = \"name=AdventureWorksEntities\";\n        entityDataSource.EntitySetName = string.Empty;\n        entityDataSource.ContextMember = \"GetOrdersByStatusAndDate\";\n\n        entityDataSource.Parameters.Add(new Parameter(\"status\", typeof(byte), \"=Parameters.Status.Value\"));\n        entityDataSource.Parameters.Add(new Parameter(\"orderDate\", typeof(DateTime), \"=Parameters.OrderDate.Value\"));\n    };\n};\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim report As New Report()\nWith report\n    .ReportParameters.Add(New Telerik.Reporting.ReportParameter(\"Status\", GetType(Byte), 5))\n    .ReportParameters.Add(New Telerik.Reporting.ReportParameter(\"OrderDate\", GetType(DateTime), New DateTime(2005, 7, 1)))\n\n    Dim entityDataSource As New EntityDataSource()\n    With entityDataSource\n        .ConnectionString = \"name=AdventureWorksEntities\"\n        .EntitySetName = String.Empty\n        .ContextMember = \"GetOrdersByStatusAndDate\"\n\n        .Parameters.Add(New Parameter(\"status\", GetType(Byte), \"=Parameters.Status.Value\"))\n        .Parameters.Add(New Parameter(\"orderDate\", GetType(DateTime), \"=Parameters.OrderDate.Value\"))\n    End With\nEnd With\n```\n\n----------------------------------------\n\nTITLE: Adding Polyfill for Promises - JavaScript\nDESCRIPTION: The snippet demonstrates how to include a polyfill for promises that allows the HTML5 Report Viewer to function in browsers that do not support promises. This code snippet is important for compatibility with older browsers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-promise-is-undefined.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script src=\"https://polyfill.io/v2/polyfill.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Field Access Expression\nDESCRIPTION: Expression to dynamically access field values based on parameter values using the Fields report function\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/switch-hide-show-table-columns.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= Fields(Parameters.Column1.Value)\n```\n\n----------------------------------------\n\nTITLE: Adding Private Fields in Window1 Class - CSharp\nDESCRIPTION: This snippet introduces two private fields of type System.Windows.Media.Brush, utilized later for preserving and restoring shapes’ stroke and fill properties. These fields are needed when handling interactive action events such as entering and leaving map data points.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-wpf-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nSystem.Windows.Media.Brush fillBrush;\nSystem.Windows.Media.Brush stroke;\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Header Expression for Group Continuation in Telerik Reporting\nDESCRIPTION: This expression checks if a group continues from the previous page and displays a message with the accumulated sum. It uses the PageHeaderSumFromPrevPage custom aggregate function to calculate running totals across pages.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/summary-per-page-when-group-is-on-multiple-pages.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n= IIf(\nPageExec(\"detailSection1\", Fields.account) <> IsNull(PageExec(\"groupHeaderSection\", Fields.account), \"N/A\"),\nFormat(\"Account {0} continues from previous page. Value up until this page {1}\", PageExec(\"detailSection1\", Fields.account), \nPageExec(\"detailSection1\", PageHeaderSumFromPrevPage(Fields.value, Fields.account, PageNumber))),\n\"\")\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource in HTML5 WebForms Viewer - C#\nDESCRIPTION: Example showing how to properly initialize and set the ReportSource property for HTML5 WebForms Report Viewer using C#. The code demonstrates setting the IdentifierType and Identifier properties within a Page_Load event handler.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/cannot-implicitly-convert-type-telerik.reporting.xxxreportsource-to-telerik.reportviewer_html5.webforms.reportsource-error.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprotected void Page_Load(object sender, EventArgs e)\n{\n\tif (!IsPostBack)\n\t{\n\t\tTelerik.ReportViewer.Html5.WebForms.ReportSource reportSource = new Telerik.ReportViewer.Html5.WebForms.ReportSource();\n\t\treportSource.IdentifierType = Telerik.ReportViewer.Html5.WebForms.IdentifierType.UriReportSource;\n\t\treportSource.Identifier = \"Report1.trdp\";\n\t\treportViewer1.ReportSource = reportSource;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic EntityDataSource Setup in VB.NET\nDESCRIPTION: Shows the minimum code required to configure the EntityDataSource component using an ObjectContext/DbContext and a member in VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/configuring-the-database-connectivity-with-the-entitydatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nentityDataSource.EntityContextType = GetType(AdventureWorksContext)\nentityDataSource.EntityMember = \"Employees\"\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Assembly in Report Designer Configuration\nDESCRIPTION: XML configuration for the Telerik Report Designer to register a custom assembly containing user functions. This needs to be added to the Telerik.ReportDesigner.exe.config file to make custom functions available in the designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-the-file-path-of-json-or-csv-datasource-through-report-parameter.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<AssemblyReferences>\n\t\t<add name=\"MyUserFunction\" />\n\t</AssemblyReferences>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Error Message for Font-Face Cross-Origin Request Failure in CSS\nDESCRIPTION: This CSS error message indicates that the @font-face failed a cross-origin request due to restricted resource access. This error is related to the caching issue in Internet Explorer that prevents the toolbar icons from rendering correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-viewer-toolbar-icons-not-shown-in-ie-browser.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nCSS3117: @font-face failed cross-origin request. Resource access is restricted.\n```\n\n----------------------------------------\n\nTITLE: GET Request to Retrieve Document from Telerik Reporting REST Service - HTTP\nDESCRIPTION: This code snippet demonstrates an HTTP GET request to retrieve a document from the Telerik Reporting REST Service. The request requires the clientId, instanceId, and documentId as path parameters. The response can return a document as an attachment with status code 200, or error messages with status codes 404 or 410. The expected output is the document content in bytes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/reports/clients/{clientId}/instances/{instanceId}/documents/{documentId}\n```\n\n----------------------------------------\n\nTITLE: Setting PrintPreview as Default ViewMode in Web Report Designer with JavaScript\nDESCRIPTION: This JavaScript snippet uses MutationObservers to detect when the Web Report Designer loads and when the Preview button is clicked. It then programmatically sets the viewMode to 'PRINT_PREVIEW' during the initialization of the ReportViewer. This workaround is necessary because the report viewer's options are not directly exposed in the current version.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/setting-the-viewmode-of-the-web-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n\t// Second callback for mutationObserver will fire once WebReportDesigner is finished loading\n\t// This callback listenes for a click on the Preview button and triggers Print-preview mode while initialization of the ReportViewer\n\tconst secondCallBack = function (mutationsList, observer) {\n\t\t$(\".top-menu-area__button.-preview\").on(\"click\", () => requestAnimationFrame(() =>\n\t\t\t$(\"#webReportDesigner_preview\").data(\"telerik_ReportViewer\").bind(telerikReportViewer.Events.RENDERING_BEGIN, () => {\n\t\t\t\t$(\"#webReportDesigner_preview\").data(\"telerik_ReportViewer\").unbind(telerikReportViewer.Events.RENDERING_BEGIN);\n\t\t\t\t$(\"#webReportDesigner_preview\").data(\"telerik_ReportViewer\").viewMode(\"PRINT_PREVIEW\");\n\t\t\t})));\n\t};\n\t// First callback waits for the loader HTML element to appear in the DOM, then creates a new MutationObserver for the loader\n\tconst firstCallback = function (mutationsList, observer) {\n\t\tnew MutationObserver(secondCallBack).observe(document.getElementsByClassName('twd-loader')[0], { attributes: true });\n\t};\n\t// Inital setup of the first MutationObserver\n\tconst targetNode = document.getElementById('webReportDesigner');\n\tnew MutationObserver(firstCallback).observe(targetNode, { childList: true });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Modifying CheckBox Alignment in Web Report Designer with JavaScript\nDESCRIPTION: This JavaScript snippet customizes the alignment of CheckBox parameters in the Web Report Designer by using the viewerInitializing event to apply CSS Flex Container styling. Dependencies include jQuery and Telerik Web Report Designer. Key parameters involve setting the reportViewerOptions.pageReady event handler. Inputs include initialization options for the web report designer, and outputs are the dynamically styled layout of checkboxes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/customize-parameter-inputs-highlight-selection-web-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n                function onViewerInitializing(e, args) {\n                    args.reportViewerOptions.pageReady = (e, args) => {   \n                        $(\".trv-parameter-editor-boolean\").parent().parent().parent().css(\"display\", \"flex\"); \n                    };\n                }\n                $(document).ready(function () {\n         \n                    // For a complete overview over all the options used to initialize Web Report Designer, check:\n                    // https://docs.telerik.com/reporting/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization\n                    $(\"#webReportDesigner\").telerik_WebReportDesigner({\n                        toolboxArea: {\n                            layout: \"list\" //Change to \"grid\" to display the contents of the Components area in a flow grid layout.\n                        },\n                        serviceUrl: \"api/reportdesigner/\",\n                        report: \"Reportbool.trdp\",\n                        viewerInitializing: onViewerInitializing,\n                        startMode: \"design\", // Change to \"preview\" to start the designer in a preview mode\n                    }).data(\"telerik_WebDesigner\");\n                });\n        </script>\n```\n\n----------------------------------------\n\nTITLE: Adding jQuery Reference in Angular Configuration\nDESCRIPTION: This snippet shows how to add a reference to jQuery in the Angular configuration file (angular.json) for the application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"scripts\": [\"./node_modules/jquery/dist/jquery.js\"]\n```\n\n----------------------------------------\n\nTITLE: Using OpenAccessDataSource with Type Property\nDESCRIPTION: Demonstrates configuring OpenAccessDataSource using Type property for automatic context lifecycle management.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/maintaining-the-lifecycle-of-the-openaccesscontext-with-the-openaccessdatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.OpenAccessDataSource openAccessDataSource = new Telerik.Reporting.OpenAccessDataSource();\nopenAccessDataSource.ContextType = typeof(AdventureWorksModel);\nopenAccessDataSource.SelectCommand = \"Products\";\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim openAccessDataSource As New Telerik.Reporting.OpenAccessDataSource()\nopenAccessDataSource.ContextType = GetType(AdventureWorksModel)\nopenAccessDataSource.SelectCommand = \"Products\"\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Application with NPM\nDESCRIPTION: Command to initialize a new Vue.js application using the CLI\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-the-web-designer-in-vue.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm init vue@latest\n```\n\n----------------------------------------\n\nTITLE: Direct Assembly Reference Example in XML Project File\nDESCRIPTION: Example of how Telerik Reporting is referenced directly as an assembly in a project file. This reference method requires additional steps to resolve the System.Resources.NetStandard dependency.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/r3-2023-could-not-load-system-resources-netstandard.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup>\n\t<Reference Include=\"Telerik.Reporting\">\n\t\t<HintPath>..\\..\\..\\.\\Bin\\netstandard2.0\\Telerik.Reporting.dll</HintPath>\n\t</Reference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Displaying Conversion Functions Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing conversion functions available in Telerik Reporting. It includes the function names and their descriptions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/conversion-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Description |\n| ------ | ------ |\n| `CBool(expression)` |Converts an expression to `Boolean` value.|\n| `CDbl(expression)` |Converts an expression to `Double` value.|\n| `CInt(expression)` |Converts an expression to `System.Int32`, i.e. `int` value.|\n| `CDate(expression)` |Converts an expression to `Date` value.|\n| `CStr(expression)` |Converts an expression to `String` value.|\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Fonts in Telerik Reporting\nDESCRIPTION: Configure private fonts in the application settings to specify custom font family and path for rendering reports\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/font-is-incorrect-on-first-render-azure.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"telerikReporting\": {\n\t\"privateFonts\": [{\n\t\t\"fontFamily\": \"ubuntu\",\n\t\t\"path\": \"Ubuntu-R.ttf\",\n\t}]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Property Binding in EntityDataSource\nDESCRIPTION: Demonstrates the simplest approach to extract entities by binding EntityDataSource directly to an auto-generated model property.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/retrieving-data-from-an-entity-data-model-with-the-entitydatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nentityDataSource.Entity = typeof(AdventureWorksEntities);\nentityDataSource.EntityProvider = typeof(System.Data.Objects.ObjectContext);\nentityDataSource.ContextName = \"Products\";\n```\n\nLANGUAGE: VB\nCODE:\n```\nentityDataSource.Entity = GetType(AdventureWorksEntities)\nentityDataSource.EntityProvider = GetType(System.Data.Objects.ObjectContext)\nentityDataSource.ContextName = \"Products\"\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Paper Sizes for Excel Export in Telerik Reporting\nDESCRIPTION: This snippet enumerates the standard paper sizes supported by the Excel renderer in Telerik Reporting. It includes both metric and imperial measurements for various paper types and envelopes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/design-considerations-for-report-rendering/excel-rendering-design-considerations.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* A3 (297mm x 420mm)\n* A4 (210mm x 297mm)\n* A5 (148mm x 210mm)\n* B4 (250mm x 353mm)\n* Quarto (215mm x 275mm)\n* DLEnvelope (110mm x 220mm)\n* C5Envelope (162mm x 229mm)\n* PrcEnvelopeNumber10 (324mm x 458mm)\n* PrcEnvelopeNumber9 (229mm x 324mm)\n* C6Envelope (114mm x 162mm)\n* C65Envelope (114mm x 229mm)\n* B4Envelope (250mm x 353mm)\n* B5 (176mm x 250mm)\n* B6Envelope (176mm x 125mm)\n* ItalyEnvelope (110mm x 230mm)\n* Letter (8.5\" x 11\")\n* Tabloid (11\" x 17\")\n* Ledger (17\" x 11\")\n* Legal (8.5\" x 14\")\n* Statement (5.5\" x 8.5\")\n* Folio (8.5\" x 13\")\n* Standard10x14 (10\" x 14\")\n* Number9Envelope (3.875\" x 8.875\")\n* Number10Envelope (4.125\" x 9.5\")\n* Number11Envelope (4.5\" x 10.375\")\n* Number12Envelope (4.75\" x 11\")\n* Number14Envelope (5\" x 11.5\")\n* DSheet (22\" x 34\")\n* ESheet (34\" x 44\")\n* MonarchEnvelope (3.875\" x 7.5\")\n* PersonalEnvelope (3.625\" x 6.5\")\n* USStandardFanfold (14.875\" x 11\")\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration Example for Assembly References\nDESCRIPTION: JSON configuration example showing how to add a custom assembly reference to be used by the Telerik Reporting Engine. It includes properties like name, version, culture, and publicKeyToken.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/assemblyreferences-element.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"assemblyReferences\": [\n\t\t{\n\t\t\t\"name\": \"MyUserFunctionsAssembly\",\n\t\t\t\"version\": \"1.0.0.0\",\n\t\t\t\"culture\": \"neutral\",\n\t\t\t\"publicKeyToken\": \"null\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAccessDataSource with ObjectContext Property in C#\nDESCRIPTION: This snippet demonstrates how to configure the OpenAccessDataSource component by setting the ObjectContext and ObjectContextMember properties to connect to an AdventureWorksEntities context and retrieve product information.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/connecting-to-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nOpenAccessDataSource oaDataSource = new OpenAccessDataSource();\noaDataSource.ObjectContext = typeof(AdventureWorksEntities);\noaDataSource.ObjectContextMember = \"Products\";\n```\n\n----------------------------------------\n\nTITLE: Setting Background and Color Properties in Telerik Reporting\nDESCRIPTION: This snippet initializes various visual properties related to report backgrounds, colors, and styles. Each property is set to a string value representing its corresponding label used in the Telerik Reporting UI. Dependencies include the Telerik Reporting libraries, which are required to render reports correctly using these properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/localizing-the-web-report-designer.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nthis.BackgroundImage = \"Background image\";\nthis.BackgroundColor = \"Background color\";\nthis.BeginColor = \"Begin color\";\nthis.EndColor = \"End color\";\nthis.MimeType = \"MIME type\";\nthis.ImageAlignment = \"Image alignment\";\nthis.Repeat = \"Repeat\";\nthis.Border = \"Border\";\nthis.Line = \"Line\";\nthis.Font = \"Font\";\nthis.FontStyle = \"Font style\";\nthis.Bold = \"Bold\";\nthis.Italic = \"Italic\";\nthis.Strikeout = \"Strikeout\";\nthis.Underline = \"Underline\";\nthis.Padding = \"Padding\";\nthis.Color = \"Color\";\nthis.Style = \"Style\";\nthis.TitleStyle = \"Title style\";\nthis.Opacity = \"Opacity\";\nthis.ToolTip = \"Tooltip\";\nthis.Visible = \"Visible\";\n```\n\n----------------------------------------\n\nTITLE: Report Definition - Declarative Report Definition\nDESCRIPTION: Describes how reports are defined using the Standalone Report Designer. The designer creates `TRDX` or `TRDP` files which contain a `Telerik.Reporting.Report` object serialized in XML format. These Declarative Report Definitions can be passed to the Reporting engine with `UriReportSource`.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/about-telerik-reporting.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nIf you design a report through the Standalone Report Designer, the result is a `TRDX` or `TRDP` file containing a `Telerik.Reporting.Report` object serialized in plain or compressed XML. These reports are referenced as __Declarative Report Definitions__. They may be passed to the Reporting engine with the built-in [UriReportSource](/api/Telerik.Reporting.UriReportSource).\n```\n\n----------------------------------------\n\nTITLE: Making Get Report Parameters Request to Telerik Reporting REST Service\nDESCRIPTION: HTTP request for retrieving report parameters from the Telerik Reporting REST Service. The request must include the client ID in the path and a ReportSource object in the body specifying the report name and parameter values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/report-parameters-api/get-report-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/reports/clients/2c3d/parameters HTTP/1.1\n\n{\n\treport: \"MyReport1\",\n\tparameterValues: {\n\t\t\"p1\": \"v1\",\n\t\t\"p2\": 20\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Page Borders in Blazor Report Viewer\nDESCRIPTION: This HTML snippet includes a style tag with CSS to apply borders around pages in ContinuousScroll mode of the Native Blazor Report Viewer. It defines a border for elements with the classes .sheet .layer and removes the border style for elements with the class .trv-report-page. Additionally, it adds a top margin to .trv-report-page elements. Ensure that this CSS is included in the page containing the report viewer for the workaround to take effect.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/page-borders-not-displayed-in-continuous-scroll-in-native-blazor-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n\t.sheet .layer {\n\t\tborder: 1px solid #cccc;\n\t}\n\t\n\t.trv-report-page {\n\t\tborder-style: none;\n\t\tmargin-top: 20px;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Initializing Report View\nDESCRIPTION: Implementation of the initialization logic that loads available reports and displays the first report on page load.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-reports-in-maui-blazor-pdf-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override async Task OnInitializedAsync()\n{\n\tawait ConfigureForService();\n\tSelectedReport = MyReports[0];\n\tawait GetPdfAsync(SelectedReport);\n\n\tawait base.OnInitializedAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Single Value Parameter for CubeDataSource in VB.NET\nDESCRIPTION: Demonstrates how to pass a single value to the @Year parameter of the MDX query using the Parameters collection of the CubeDataSource component in VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/specifying-query-parameters-with-the-cubedatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim cubeDataSource As New CubeDataSource()\ncubeDataSource.ConnectionString = \"Data Source=localhost;\"\ncubeDataSource.Cube = \"Adventure Works\"\ncubeDataSource.SelectCommand = \"select non empty { [Measures].[Sales Amount] } on columns, non empty { [Product].[Category].[Category] * [Product].[Subcategory].[Subcategory] } on rows from [Adventure Works] where StrToMember(@Year)\"\nDim yearParameter As New CubeDataSourceParameter()\nyearParameter.Name = \"@Year\"\nyearParameter.Value = \"[Date].[Calendar Year].&[2006]\"\ncubeDataSource.Parameters.Add(yearParameter)\n```\n\n----------------------------------------\n\nTITLE: Document Ready Initialization\nDESCRIPTION: Sets up global variables and initializes the report viewer and Kendo Window when the document is ready.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-switch-reports-in-kendo-mvc-modal-window.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\">\n        const FirstReport = \"Barcodes Report.trdx\";\n        const SecondReport = \"Dashboard.trdx\";\n        var showFirst = true;\n\n        $(document).ready(function () {\n\n            // init empty report viewer\n            $(\"#reportViewer1\")\n                .telerik_ReportViewer({\n                    serviceUrl: \"https://demos.telerik.com/reporting/api/reports/\",\n                });\n\n            // init and open kendo window\n            showWindow()\n        });\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Events in Web Report Designer\nDESCRIPTION: This snippet demonstrates how to handle 'notificationShowing' events in the Telerik Web Report Designer. It's used for displaying or suppressing notifications based on their type (success, info, warning, error). Developers can use this event to log messages or customize notification behavior.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n\t$(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\tpersistSession: false,\n\t\ttoolboxArea: {\n\t\t\tlayout: \"list\"\n\t\t},\n\t\tserviceUrl: \"api/reportdesigner/\",\n\t\treport: \"Dashboard.trdp\",\n\t\t// design/preview\n\t\tstartMode: \"design\",\n\t\tnotificationShowing: onNotificationShowing\n\t}).data(\"telerik_WebReportDesigner\");\n});\n\nfunction onNotificationShowing(e, args) {\n\t// e: jQuery event\n\t// args: INotificationErrorEventArgs ->\n\t\t// type: string, obtained from NotificationTypes. Available values: info, warning, error, success\n\t\t// message: notification message, string.\n\t\t// error: JS's Error instance\n\t\t// cancel: boolean, determines if showing the notification will be canceled.\n\tswitch (args.type) {\n\t\tcase \"success\":\n\t\tcase \"info\":\n\t\tcase \"warning\":\n\t\t\tconsole.log(`Message: ${args.message}`);\n\t\t\t// disable the notification pop-up.\n\t\t\targs.cancel = true;\n\t\t\tbreak;\n\t\t\n\t\tcase \"error\":\n\t\t\tif (args.error) {\n\t\t\t\tconsole.log(`Error message: ${args.message}; Error type: ${args.error.constructor.name}`);\n\t\t\t} else {\n\t\t\t\tconsole.log(`Error message: ${args.message};`);\n\t\t\t}\n\t\t\tbreak;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: XML Configuration: Hide RTF Rendering Extension in .NET Framework\nDESCRIPTION: XML configuration to hide the RTF export format in Windows and WPF applications by modifying the app.config file. Requires specifying the Telerik.Reporting configuration section with rendering extension visibility settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/limit-export-options-in-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <configSections>\n      <section\n        name=\"Telerik.Reporting\"\n        type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting, Version=13.0.19.222, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n        allowLocation=\"true\"\n        allowDefinition=\"Everywhere\"/>\n  </configSections>\n   <Telerik.Reporting>\n    <extensions>\n      <render>\n        <extension name=\"RTF\" visible=\"false\">       \n        </extension>\n      </render>\n    </extensions>\n  </Telerik.Reporting>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Custom Business Object with ObjectDataSource in VB.NET\nDESCRIPTION: Demonstrates how to use ObjectDataSource to connect to a custom business object for retrieving product information.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/maintaining-the-lifecycle-of-the-context-with-the-entitydatasource-component.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim objectDataSource As New Telerik.Reporting.ObjectDataSource()\nobjectDataSource.DataSource = GetType(SampleObject)\nobjectDataSource.DataMember = \"GetProducts\"\n```\n\n----------------------------------------\n\nTITLE: ReportsController ConfigSection Implementation in ASP.NET MVC (VB.NET)\nDESCRIPTION: This VB.NET code snippet mirrors the C# implementation, demonstrating how to configure the ReportsController using a configuration section in ASP.NET. It inherits from ReportsControllerBase and sets the ReportServiceConfiguration to an instance of ConfigSectionReportServiceConfiguration.  This approach requires a 'restReportService' configuration element in the application's configuration file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/how-to-implement-the-reportscontroller-in-an-application.md#2025-04-21_snippet_5\n\nLANGUAGE: vbnet\nCODE:\n```\nImports System.Web.Http\nImports Telerik.Reporting.Services\nImports Telerik.Reporting.Services.WebApi\n\nNamespace MvcVB.Controllers\n\tPublic Class ReportsController\n\t\tInherits ReportsControllerBase\n\t\tPublic Sub New()\n\t\t\t'The configuration section is the recommended way to configure the service\n\t\t\t'as it allows you to modify the service configuration without\n\t\t\t'recompiling the application.\n\t\t\tMe.ReportServiceConfiguration = New ConfigSectionReportServiceConfiguration()\n\t\tEnd Sub\n\tEnd Class\nEnd Namespace\n```\n\n----------------------------------------\n\nTITLE: Updating CSHTML Layout for Telerik Blazor UI 4.0.0\nDESCRIPTION: This code snippet shows how to update the CSHTML layout file to fix blank icons in the Native Blazor Report Viewer when using Telerik Blazor UI 4.0.0. It includes referencing a custom CSS file and updating the Kendo Theme CSS reference.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/blank-icons-in-blazor-native-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSHTML\nCODE:\n```\n<script src=\"_content/Telerik.UI.for.Blazor/js/telerik-blazor.js\"></script>\n<script src=\"_content/Telerik.ReportViewer.BlazorNative/js/reporting-blazor-viewer.js\"></script>\n\n<link rel=\"stylesheet\" href=\"https://blazor.cdn.telerik.com/blazor/4.0.0/kendo-theme-default/all.css\" />\n\n<link href=\"_content/Telerik.ReportViewer.BlazorNative/css/reporting-blazor-viewer.css\" rel=\"stylesheet\" />\n<link rel=\"stylesheet\" href=\"css/icon-patch.css\" />\n```\n\n----------------------------------------\n\nTITLE: Error Message Example in HTML Format\nDESCRIPTION: Example of the HTML error message displayed when multiple actions match the request in a Telerik Reporting REST service implementation. The error shows conflicts between different controller methods.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resolve-reporting-rest-service-access-issues.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<Error>\n    <Message>An error has occurred.</Message>\n    <ExceptionMessage>Multiple actions were found that match the request: Formats on type Controllers.ReportsController GetClientsSessionTimeoutSeconds on type Controllers.ReportsController Version on type     Controllers.ReportsController</ExceptionMessage>\n    <ExceptionType>System.InvalidOperationException</ExceptionType>\n    <StackTrace> at System.Web.Http.Controllers.ApiControllerActionSelector.ActionSelectorCacheItem.SelectAction(HttpControllerContext controllerContext) at System.Web.Http.ApiController.ExecuteAsync(HttpControllerContext controllerContext, CancellationToken cancellationToken) at System.Web.Http.Dispatcher.HttpControllerDispatcher.<SendAsync>d__1.MoveNext()</StackTrace>\n</Error>\n```\n\n----------------------------------------\n\nTITLE: Parameterized Method Binding in EntityDataSource\nDESCRIPTION: Demonstrates how to bind EntityDataSource to a method that accepts parameters for flexible data retrieval.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/retrieving-data-from-an-entity-data-model-with-the-entitydatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nentityDataSource.Entity = typeof(AdventureWorksEntities);\nentityDataSource.EntityProvider = typeof(System.Data.Objects.ObjectContext);\nentityDataSource.MethodName = \"GetProductsByColor\";\nentityDataSource.Parameters.Add(new Parameter(\"color\", typeof(string), \"Red\"));\n```\n\nLANGUAGE: VB\nCODE:\n```\nentityDataSource.Entity = GetType(AdventureWorksEntities)\nentityDataSource.EntityProvider = GetType(System.Data.Objects.ObjectContext)\nentityDataSource.MethodName = \"GetProductsByColor\"\nentityDataSource.Parameters.Add(New Parameter(\"color\", GetType(String), \"Red\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Report Action to HomeController\nDESCRIPTION: Adds a Report action method to the HomeController to create an MVC page view for the HTML5 report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer-in-asp.net-core.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic IActionResult Report()\n{\n\tViewBag.Message = \"Your reports page.\";\n\treturn View();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Styles for Enhanced Report Viewer - CSS\nDESCRIPTION: This CSS snippet establishes custom styles for the report viewer components to ensure they behave correctly within the dynamic resizing context.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resize-the-html5-report-viewer-to-accommodate-its-content.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.trv-report-viewer div.trv-content-wrapper,\n.trv-pages-area,\n.trv-pages-area .trv-page-container {\n    position: static !important;\n}\n \n.trv-pages-area .trv-error-pane {\n    position: absolute !important;\n    float: none;\n    z-index: 1;\n    top: 0;\n}\n \n.trv-page-wrapper {\n    /* Uncomment to add initial minimum height to the viewer */\n    /* min-height: 200px; */\n}\n \n.trv-side-menu {\n    z-index: 1;\n    left: -14em;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML5 Report Viewer Script Reference\nDESCRIPTION: Reference to the core HTML5 Report Viewer JavaScript file that is served from the Telerik Reporting REST Service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/requirements-and-browser-support.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"telerikReportViewer-{{site.buildversion}}.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Vue.js application in development mode\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-viewer-and-designer-in-vue.md#2025-04-21_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using EntityDataSource with Custom Context Management in VB.NET\nDESCRIPTION: Demonstrates how to use EntityDataSource with a custom-managed instance of ObjectContext/DbContext for scenarios where you have your own lifecycle management.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/maintaining-the-lifecycle-of-the-context-with-the-entitydatasource-component.md#2025-04-21_snippet_7\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim context As New AdventureWorksEntities()\nDim entityDataSource As New Telerik.Reporting.EntityDataSource()\nentityDataSource.Context = context\nentityDataSource.EntitySet = \"Products\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Table Column Generation in C#\nDESCRIPTION: C# code that demonstrates how to programmatically add columns to a Telerik Report table. Includes methods for deserializing a report, formatting table columns, and serializing the modified report back to a file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-modify-table-with-preset-styles-and-width-dynamically.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nSampleCodeForTheMainMethod()\n{\n\tIList<string> columnNames = ListWithTheNamesOfTableColumns;\n\tReport report = DeserializeReport(trdxFileName);\n\tvar detailSection = (DetailSection)report.Items.FindItem(typeof(DetailSection));\n\tvar table = (Table)detailSection.Items.FindItem(typeof(Table));\n\ttable.DataSource = myDataSource;\n\tFormatTableBasedOnColumnNames(table, columnNames);\n\tSerializeReport(report, newTrdxFileName);\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response from Register Client Request in Telerik Reporting REST API\nDESCRIPTION: This snippet shows the successful response from a Register Client request. The response includes a status code of 200 OK and a JSON body containing the newly registered client's identifier.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/clients-api/register-client.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n\n{\"clientId\": \"a5f3\"}\n```\n\n----------------------------------------\n\nTITLE: Handling Quotation Marks in Literal Text Expressions\nDESCRIPTION: Shows various ways to handle quotation marks within literal text expressions in Telerik Reporting. Demonstrates escaping techniques and alternative quotation mark usage.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/constants.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n'It''s my birthday'\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"It\"\"s my birthday\"\n```\n\nLANGUAGE: C#\nCODE:\n```\n'It\"s my birthday'\n```\n\nLANGUAGE: C#\nCODE:\n```\n\"It's my birthday\"\n```\n\n----------------------------------------\n\nTITLE: XAML Silverlight Report Rendering\nDESCRIPTION: Renders a report in XAML for Silverlight with physical page layout. Requires multi-stream rendering with RenderReport method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/export-formats.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.XamlRendering.SilverlightReport, Telerik.Reporting, Version=x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Binding Redirect for OpenXML SDK\nDESCRIPTION: This XML configuration snippet shows how to add a binding redirect for using a newer version of the OpenXML SDK with Telerik Reporting. It specifies the old and new versions of the DocumentFormat.OpenXml assembly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/deploy-telerik-reporting-with-newer-openxml-sdk-version.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<runtime>\n\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t<dependentAssembly>\n\t\t<assemblyIdentity name=\"DocumentFormat.OpenXml\"\n\t\t\t\t\tpublicKeyToken=\"31bf3856ad364e35\"\n\t\t\t\t\tculture=\"neutral\" />\n\t\t<bindingRedirect oldVersion=\"2.0.5022.0\"\n\t\t\t\t\tnewVersion=\"2.5.5631.0\"/>\n\t\t</dependentAssembly>\n\t</assemblyBinding>\n\t</runtime>\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly References in XML\nDESCRIPTION: Example of configuring assembly references in XML configuration, including the name, version, culture, and public key token attributes. This snippet demonstrates how to properly reference external assemblies for use with Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/security/security-best-practices.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<assemblyReferences>\n  <add name=\"AssemblyName\"\n       version=\"1.0.0.0\"\n       culture=\"neutral\"\n       publicKeyToken=\"abcdef1234567890\" />\n</assemblyReferences>\n```\n\n----------------------------------------\n\nTITLE: Configuring WinForms Report Viewer Accessibility Key Mapping\nDESCRIPTION: Demonstrate how to modify default keyboard shortcut for navigating to the menu area in the report viewer's accessibility settings. Allows customization of accessibility key mappings to prevent potential interference with application behavior.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/accessibility.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Code snippet placeholder for C# accessibility key mapping\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n' Code snippet placeholder for VB.NET accessibility key mapping\n```\n\n----------------------------------------\n\nTITLE: Positional Parameters Implementation for OLE DB Provider\nDESCRIPTION: Code showing implementation of positional parameters with SqlDataSource using OLE DB provider\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-parameters-with-the-sqldatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\SqlDataSourceSnippets.cs region=PositionalParametersSnippet}}\n```\n\n----------------------------------------\n\nTITLE: PageInfo JSON Entity when page is not available\nDESCRIPTION: This JSON snippet represents the PageInfo entity when a specific page is not yet available.  It contains the 'pageReady' field set to 'false' and the 'pageNumber' field indicating the page number being processed. This is useful for clients to understand the rendering status.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/pageinfo.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"pageReady\": false,\n\t\"pageNumber\": 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Table\nDESCRIPTION: Markdown table displaying the environment details including product version, product name, and report designer type.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-external-data-provider-to-dotnet-standalone-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Product Version</td>\n\t\t\t<td>16.2.22.914+</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Product</td>\n\t\t\t<td>Progress® Telerik® Reporting</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Report Designer</td>\n\t\t\t<td>.NET Standalone Designer</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Importing Localized Strings in TypeScript\nDESCRIPTION: This snippet shows how to import the `StringResources` class in a TypeScript file. This import is necessary to access the localized string resources defined in `stringResources.ts` for further use in an Angular component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/customizing/localization.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { StringResources } from './stringResources';\n```\n\n----------------------------------------\n\nTITLE: Setting CanGrow Property for HtmlTextBox in Telerik Reporting Markdown\nDESCRIPTION: This snippet demonstrates how to set the CanGrow property of an HtmlTextBox report item to allow it to expand vertically based on its content. The default value of CanGrow is True, which needs to be explicitly set in case it has been changed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/htmltextbox/grow-and-shrink.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo allow the HtmlTextBox to expand vertically based on its content, set its [`CanGrow`](/reporting/api/Telerik.Reporting.TextItemBase#Telerik_Reporting_TextItemBase_CanGrow) property to its default `True` value.\n```\n\n----------------------------------------\n\nTITLE: Invoking Stored Procedure in PostgreSQL\nDESCRIPTION: This SQL snippet illustrates how to manually call a stored procedure in PostgreSQL as a workaround for the SqlCommand conversion error in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-mysqlcommand--to-sqlcommand-conversion-error.md#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCALL Stored_Procedure();\n```\n\n----------------------------------------\n\nTITLE: Running Telerik Reporting Installer with Logging (Batch)\nDESCRIPTION: This command uses msiexec to run the Telerik Reporting installer with verbose logging enabled. It specifies the path to the .msi file and the output log file location.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshoot-telerik-reporting-installation-problems.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nmsiexec /i <path>\\Telerik_Reporting_<version>.msi -l*xv <logFilePath>install.log\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Source Using CLI in Azure DevOps - Bash\nDESCRIPTION: This Bash command adds a NuGet package feed to the Azure DevOps environment using the CLI. It sets the feed's username to 'api-key' and retrieves the password from the environment variable, storing it in clear text.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/using-nuget-keys.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet nuget add source 'MyTelerikFeed' --source 'https://nuget.telerik.com/v3/index.json' --username 'api-key' --password '$(TELERIK_NUGET_KEY)' --configfile './nuget.config' --store-password-in-clear-text\n```\n\n----------------------------------------\n\nTITLE: Adding Constructor for DbContext in VB.NET\nDESCRIPTION: Shows how to add a constructor with a connection string parameter to the DbContext class for design-time purposes in VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/configuring-the-database-connectivity-with-the-entitydatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nPartial Class AdventureWorksContext\n\tPublic Sub New(connectionString As String)\n\t\tMyBase.New(connectionString)\n\tEnd Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Using Custom NumberEditor in MVC Report Viewer\nDESCRIPTION: This snippet demonstrates how to integrate the custom NumberEditor created with the kendoNumericTextBox into the MVC Report Viewer setup. It adds the custom editor to the ReportViewer's ParameterEditors collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-kendonumerictextbox-widget-to-create-custom-parameter-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n@(Html.TelerikReporting().ReportViewer()\n        .Id(\"reportViewer1\")\n        .ParameterEditors(\n                    editors => editors\n                        .NumberEditor(\"createNumberEditor\")\n            )\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Standard DateTime Format Strings for Excel Export in Telerik Reporting\nDESCRIPTION: This snippet enumerates the standard DateTime format strings supported by the Excel rendering extension in Telerik Reporting. These formats can be used to control the display of date and time values in the exported Excel document.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/design-considerations-for-report-rendering/excel-rendering-design-considerations.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* d (Short date pattern)\n* D (Long date pattern)\n* t (Short time pattern)\n* T (Long time pattern)\n* f (Full date/time pattern with short time)\n* F (Full date/time pattern with long time)\n* g (General date/time pattern with short time)\n* G (General date/time pattern with long time)\n* M or m (Month day pattern)\n* R or r (RFC1123 pattern)\n* s (Sortable date/time pattern; conforms to ISO 8601)\n* u (Universal sortable date/time pattern)\n* U (Universal sortable date/time pattern)\n* Y or y (Year month pattern)\n```\n\n----------------------------------------\n\nTITLE: Handling Report Loading Events in Angular Report Viewer\nDESCRIPTION: Shows implementation of report loading lifecycle events including beforeLoadReport, beginLoadReport, and reportLoadProgress.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(reportLoadProgress)=\"reportLoadProgress($event)\">\n</reporting-angular-viewer>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\nimport { DocumentInfo } from '@progress/telerik-common-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\treportLoadProgress(e: DocumentInfo) {\n\t\t\tconsole.log(\"The e parameter will contain the current information for the report rendering progress.\", e);\n\t\t\tconsole.log(\"This event will be emitted after each successful Get Document Info request until the report rendering is complete.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Updating Telerik NuGet Source Credentials in PowerShell\nDESCRIPTION: This PowerShell command updates the Telerik NuGet source credentials in the NuGet.config file. It requires the user's login email and new password as inputs. This command should be run in a Command Prompt to resolve the 401 error after changing the Telerik password.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/nuget-feed-error-returned-unexpected-401-status-code.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNuGet Sources Update -Name \"telerik.com\" -Source \"https://nuget.telerik.com/v3/index.json\" -UserName \"your login email\" -Password \"your new password\"\n```\n\n----------------------------------------\n\nTITLE: Read-only Parameters Property in HTML5 ASP.NET Web Forms Report Viewer\nDESCRIPTION: The Parameters property in the HTML5 ASP.NET Web Forms Report Viewer is now read-only. Parameter instances can be accessed by name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2015/q3-2015-sp1.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Accessing parameters by name\nvar parameterValue = reportViewer.ReportSource.Parameters[\"parameterName\"].Value;\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response for Successful Action Application\nDESCRIPTION: Example HTTP response showing a successful (200 OK) result after applying an interactive action on a document.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/apply-interactive-action-on-document.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n```\n\n----------------------------------------\n\nTITLE: Inserting Control Characters in GS1-128 Barcode - VB.NET\nDESCRIPTION: This snippet demonstrates how to insert the FNC1 control character into a GS1-128 barcode value in VB.NET, using the ChrW function to handle the character appropriately.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/barcode/1d-barcodes/1d-specifications.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nMe.Barcode1.Value = \"1234\" & ChrW(&HF7) & \"5678\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Report Viewer with Sass-Based Theme\nDESCRIPTION: This snippet shows how to configure the Angular Report Viewer component using a Sass-based theme. It includes setting the container style, service URL, template URL, and report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-customize-viewer-using-kendo-ui-sass-based-theme.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- in app.component.html -->\n<tr-viewer #viewer1 \n    [containerStyle]=\"viewerContainerStyle\"\n    [serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports/'\"\n    [templateUrl]=\"'\\\\node_modules\\\\@progress\\\\telerik-angular-report-viewer\\\\dist\\\\dependencies\\\\telerikReportViewerTemplate-sass.html'\"\n    [reportSource]=\"{\n        report: 'Telerik.Reporting.Examples.CSharp.ReportCatalog, CSharp.ReportLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null',\n        parameters: {}\n    }\"\n    ...>\n</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth_ActionExecuting Handler Method - CSharp\nDESCRIPTION: Handles execution of interactive actions, prompting users with confirmation dialogs. Based on the result, it may cancel `NavigateToUrlAction`; for CustomActions, it optionally opens a wiki page with more info.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-wpf-report-viewer.md#2025-04-21_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nvoid Choropleth_ActionExecuting( object sender, Telerik.ReportViewer.Wpf.InteractiveActionCancelEventArgs args)\n{\n\tif (args.Action.ReportItemName == \"textBoxTitle\" )\n\t{\n\t\targs.Cancel = MessageBox.Show( \"Do you want to learn more about the world population density?\" , \"More information\" , MessageBoxButton.YesNo) != MessageBoxResult.Yes;\n\t}\n\telse\n\t{\n\t\tvar customAction = (Telerik.Reporting.Processing.CustomAction)args.Action;\n\t\tstring countryName = customAction.Parameters[ \"country\" ].ToString();\n\t\tvar msg = string .Format( \"{0}{1}{1}Do you want to learn more about {2} ?\" ,\n\t\t\tthis .GetCountryInfo(customAction.Parameters),\n\t\t\tEnvironment.NewLine,\n\t\t\tcountryName);\n\n\t\tif (MessageBox.Show(msg, \"More information\" , MessageBoxButton.YesNo) == MessageBoxResult.Yes)\n\t\t{\n\t\t\tSystem.Diagnostics.Process.Start( string .Format( \"https://en.wikipedia.org/wiki/{0}\" , countryName));\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Matrix Barcode Settings in VB.NET\nDESCRIPTION: This VB.NET code snippet shows how to configure the settings of a Data Matrix barcode, including Encodation, SymbolSize, and TextEncoding, for use in Telerik Reporting. These settings are used to adjust the barcode's behavior, which will optimize for data density, readability, and specific encoding requirements. It uses the Telerik.Reporting namespace.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/barcode/2d-barcodes/data-matrix.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n \"' Creates a new instance of the DataMatrixEncoder class\\nDim dataMatrixEncoder As New Telerik.Reporting.DataMatrixEncoder()\\n\\n' Sets the DataMatrix encoder settings\\ndataMatrixEncoder.Encodation = Telerik.Reporting.DataMatrix.DataMatrixEncodation.ASCII\\ndataMatrixEncoder.SymbolSize = Telerik.Reporting.DataMatrix.DataMatrixSymbolSize.SquareAuto\\ndataMatrixEncoder.TextEncoding = System.Text.Encoding.UTF8\"\n```\n\n----------------------------------------\n\nTITLE: Binding to Parent Data Object in Telerik Reporting\nDESCRIPTION: This code snippet demonstrates how to bind a data item to its parent's data object using an expression in Telerik Reporting. This method improves report performance by reusing existing data instead of creating a new data source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/binding-a-data-item-to-data.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n= ReportItem.DataObject\n```\n\n----------------------------------------\n\nTITLE: ReportDesignerControllerBase Method Signature in C#\nDESCRIPTION: The method signature in the ReportDesignerControllerBase class that potentially causes the error due to a non-nullable parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/could-not-retrieve-information-for-folder-web-designer.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic override IActionResult GetFolderModel([FromQuery] string uri)\n```\n\n----------------------------------------\n\nTITLE: Configuring Anti-Forgery Token in ASP.NET Core MVC\nDESCRIPTION: This snippet shows how to implement the anti-forgery token in an ASP.NET Core MVC application. It creates a function to get the request token and adds it to each request header.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/anti-forgery-token-issue-in-asp-net-core-application.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf\n@functions{\n    public string GetAntiXsrfRequestToken()\n    {\n        return Xsrf.GetAndStoreTokens(Context).RequestToken;\n    }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n    $.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n        jqXHR.setRequestHeader(\"__RequestVerificationToken\", '@GetAntiXsrfRequestToken()');\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration (XML)\nDESCRIPTION: Configure the default connection string in the web.config file for Telerik Reporting sample reports\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-rest-service.md#2025-04-21_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<connectionStrings>\n\t<add name=\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\"\n\t\t\tconnectionString=\"Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=SSPI\"\n\t\t\tproviderName=\"System.Data.SqlClient\" />\n</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Changing Accessibility Key Map in WPF Report Viewer using C#\nDESCRIPTION: This snippet demonstrates how to modify default shortcut keys for navigating the WPF Report Viewer areas by accessing the AccessibilityKeyMap property. This modification needs to be done after the theme template is loaded to be effective.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/accessibility.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected void ReportViewer_Loaded(object sender, RoutedEventArgs e) {\n    ReportViewer.AccessibilityKeyMap[\"Menu\"] = KeyInterop.VirtualKeyFromKey(Key.F11);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fonts on Alpine Docker\nDESCRIPTION: This code snippet contains the commands needed to install the required TrueType fonts in an Alpine Docker container to resolve font rendering issues in Telerik Reporting. These commands ensure that necessary font libraries are available for the application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resolve-object-reference-error-telerik-reporting-fontextensions.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napk update\napk upgrade\napk add freetype\napk add fontconfig\napk add msttcorefonts-installer\nupdate-ms-fonts\nfc-cache -f\n```\n\n----------------------------------------\n\nTITLE: Initializing ServiceStack Reports Service\nDESCRIPTION: Demonstrates how to initialize the ServiceStack reports service within the Global Application Class in ASP.NET through the Application_Start method. This setup is crucial for starting the ServiceStack reports service as the application runs, ensuring the required assemblies and dependencies are correctly referenced and available.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/servicestack-implementation/add-rest-servicestack-to-web-application.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\MvcCS\\ServiceStack\\Application.cs region=ServiceStack_Application_Start}}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\MvcVB\\ServiceStack\\Application.vb region=ServiceStack_Application_Start}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String in XML Configuration File\nDESCRIPTION: Shows how to store a connection string in the connectionStrings configuration element of an XML configuration file for .NET Framework applications.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/connecting-the-sqldatasource-component-to-a-data-source.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<connectionStrings>\n\t\t<add name=\"MyAdventureWorksDB\"\n\t\t\tconnectionString=\"Data Source=.\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True\"\n\t\t\tproviderName=\"System.Data.SqlClient\" />\n\t</connectionStrings>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Vertically Arranged TextBox Layout Structure in Telerik Reporting\nDESCRIPTION: Example showing how TextBoxes can be arranged vertically in a single column, with the Name TextBox appearing twice followed by a Summary TextBox. This arrangement demonstrates how TextBoxes with CanShrink=true will collapse when empty.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/shrink-textboxes-with-no-data.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nName\n\tName\n\tSummary\n```\n\n----------------------------------------\n\nTITLE: Configuring IIS Handler for Telerik ReportViewer in ASP.NET WebForms\nDESCRIPTION: This snippet configures the IIS handler for Telerik ReportViewer in ASP.NET WebForms by adding the necessary preCondition attribute to ensure proper resource loading. It is critical for environments running on IIS7 to include this configuration to avoid runtime errors related to undefined ReportViewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reportviewer-is-undefined-javascript-error.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<system.webServer>  \n  <handlers>  \n    <add name=\"Telerik.ReportViewer.axd_*\" path=\"Telerik.ReportViewer.axd\" verb=\"*\" type=\"Telerik.ReportViewer.WebForms.HttpHandler, Telerik.ReportViewer.WebForms, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" preCondition=\"integratedMode\"   />  \n  </handlers>  \n  <validation validateIntegratedModeConfiguration=\"false\" />    \n</system.webServer>\n```\n\n----------------------------------------\n\nTITLE: Configuring AssemblyReferences in Report Designer\nDESCRIPTION: Example of an uncommitted XML configuration for adding custom assembly references to the Telerik Report Designer. This snippet shows how to reference the MyAssembly assembly with version 1.0.0.0.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-external-assemblies-with-custom-clr-objects-in-the-report-designer.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Add assembly references -->\n\n<!--\n<Telerik.Reporting>\n\t<AssemblyReferences>\n\t\t<add name=\"MyAssembly\" version=\"1.0.0.0\" />\n\t</AssemblyReferences>\n</Telerik.Reporting>\n-->\n```\n\n----------------------------------------\n\nTITLE: Binding CubeDataSource Parameter to Report Parameter in C#\nDESCRIPTION: Demonstrates how to bind a CubeDataSourceParameter to a ReportParameter using an expression in C#, allowing the use of the default parameter user interface in the Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/specifying-query-parameters-with-the-cubedatasource-component.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nCubeDataSource cubeDataSource = new CubeDataSource();\ncubeDataSource.ConnectionString = \"Data Source=localhost;\";\ncubeDataSource.Cube = \"Adventure Works\";\ncubeDataSource.SelectCommand = \"select non empty { [Measures].[Sales Amount] } on columns, non empty { [Product].[Category].[Category] * [Product].[Subcategory].[Subcategory] } on rows from [Adventure Works] where StrToMember(@Year)\";\nCubeDataSourceParameter yearParameter = new CubeDataSourceParameter();\nyearParameter.Name = \"@Year\";\nyearParameter.Value = \"= Parameters.Year.Value\";\ncubeDataSource.Parameters.Add(yearParameter);\n```\n\n----------------------------------------\n\nTITLE: Resource Name Example for External Style Sheet\nDESCRIPTION: Example showing resource name reference format for embedded style sheets in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/exporting-and-reusing-style-sheets.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nApplication1.Resources.StyleSheet1.xml\n```\n\n----------------------------------------\n\nTITLE: Using 'Not Like' Operator in Telerik Reporting Filter Rules\nDESCRIPTION: This example demonstrates how to use the 'Not Like' operator to exclude products with names containing a specific string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/filtering-data/filter-rules.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nFields.ProductName NotLike \"%Bike%\"\n```\n\n----------------------------------------\n\nTITLE: Dynamically Modifying Table Columns in Telerik Reporting (C#)\nDESCRIPTION: This code snippet demonstrates how to dynamically change a Table's DataSource and columns while preserving its width and styles. It also shows how to add totals in the table footer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-modify-table-with-preset-styles-and-width-dynamically.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void ModifyTable(Report report)\n{\n    Table table = (Table)report.Items[\"Table1\"];\n    table.DataSource = GetNewDataSource();\n\n    TableGroup detailGroup = table.Details;\n    TableRow detailRow = detailGroup.Rows[0];\n\n    int columnsCount = table.Columns.Count;\n    decimal tableWidth = table.Width.Value;\n    decimal columnWidth = tableWidth / columnsCount;\n\n    for (int i = columnsCount - 1; i >= 0; i--)\n    {\n        table.Body.Columns.RemoveAt(i);\n        table.Header.Columns.RemoveAt(i);\n        table.Footer.Columns.RemoveAt(i);\n    }\n\n    foreach (var column in GetNewColumns())\n    {\n        TableColumn tableColumn = new TableColumn();\n        tableColumn.Width = new Unit(columnWidth, UnitType.Cm);\n        table.Body.Columns.Add(tableColumn);\n        table.Header.Columns.Add(tableColumn);\n        table.Footer.Columns.Add(tableColumn);\n\n        TextBox headerTextBox = new TextBox();\n        headerTextBox.Value = column.HeaderText;\n        table.Header.Rows[0].Cells.Add(headerTextBox);\n\n        TextBox detailTextBox = new TextBox();\n        detailTextBox.Value = \"=Fields.\" + column.FieldName;\n        detailRow.Cells.Add(detailTextBox);\n\n        if (column.AddTotal)\n        {\n            TextBox footerTextBox = new TextBox();\n            footerTextBox.Value = \"=Sum(Fields.\" + column.FieldName + \")\";\n            table.Footer.Rows[0].Cells.Add(footerTextBox);\n        }\n        else\n        {\n            table.Footer.Rows[0].Cells.Add(new TextBox());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Assembly in Application Configuration File\nDESCRIPTION: XML configuration for registering a custom assembly in web.config or app.config files of .NET Framework applications. This makes the custom User functions available at runtime in the application that displays the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-the-file-path-of-json-or-csv-datasource-through-report-parameter.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<AssemblyReferences>\n\t\t<add name=\"MyUserFunction\" />\n\t</AssemblyReferences>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Handling Report Errors in VB.NET\nDESCRIPTION: This VB.NET code snippet shows how to handle report processing errors using the Error event.  It initializes the component and then handles the Error event by canceling it and throwing a new exception.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/handling-errors-occurring-in-a-custom-resolver-used-by-a-reporting-rest-service.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n````VB\n'the report\nPublic Partial Class ReportTest\n    Inherits Telerik.Reporting.Report\n    Public Sub New()\n        '\n        ' Required for telerik Reporting designer support\n        '\n        InitializeComponent()     \n    End Sub\n      Private Sub ReportCatalog_Error(sender As Object, eventArgs As Telerik.Reporting.ErrorEventArgs) Handles MyBase.Error\n        eventArgs.Cancel = True\n        Throw New Exception(\"Manually cancelled.\")\n    End Sub\nEnd Class\n````\n```\n\n----------------------------------------\n\nTITLE: Conditional PageBreak Expression for Report Groups in Telerik Reporting\nDESCRIPTION: An expression that compares the last value in the current group with the last value of the entire report data. If they match (indicating this is the last group), the PageBreak property is set to \"None\", otherwise it's set to \"After\".\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/remove-last-pagebreak-for-report-group.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n=IIF(Last(Fields.value) = Exec(\"Report1\", Last(Fields.value)), \"None\", \"After\")\n```\n\n----------------------------------------\n\nTITLE: Optional: Setting Culture Programmatically\nDESCRIPTION: Demonstrate how to change the current culture programmatically in a Blazor component\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/customizing/localization.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnInitialized()\n{\n\tvar culture = new CultureInfo(\"bg-BG\");\n\n\tCultureInfo.DefaultThreadCurrentCulture = culture;\n\tCultureInfo.DefaultThreadCurrentUICulture = culture;\n\n\tbase.OnInitialized();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AvailableValues for ReportParameter UI in C#\nDESCRIPTION: Illustrates how to define available values for a report parameter's user interface in Telerik Reporting programmatically using C#. This snippet sets the DataSource, ValueMember, and DisplayMember properties to populate the available values for the parameter, enhancing user selection and data interaction within the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/how-to-add-report-parameters.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n            Telerik.Reporting.Report report = new Telerik.Reporting.Report();\n\n            Telerik.Reporting.ReportParameter parameter = new Telerik.Reporting.ReportParameter();\n\n            parameter.AvailableValues.DataSource = \"Categories\";\n            parameter.AvailableValues.ValueMember = \"CategoryID\";\n            parameter.AvailableValues.DisplayMember = \"CategoryName\";\n\n            report.ReportParameters.Add(parameter);\n```\n\n----------------------------------------\n\nTITLE: Add TextBox ItemDataBinding in VB.NET\nDESCRIPTION: This code snippet demonstrates how to add an ItemDataBinding event handler to a TextBox in VB.NET. The event handler checks the value of the TextBox and changes its color if it matches a specific condition. It expects a Processing.TextBox as the sender and uses its Value property to determine the color.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/using-report-item-events.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n \"Private Sub TextBox1_ItemDataBinding(sender As Object, e As EventArgs) Handles TextBox1.ItemDataBinding\\n    Dim txtBox As Telerik.Reporting.Processing.TextBox = DirectCast(sender, Telerik.Reporting.Processing.TextBox)\\n\\n    If txtBox.Value.ToString().Contains(\\\"Developer\\\") Then\\n        txtBox.Style.Color = System.Drawing.Color.Blue\\n    End If\\nEnd Sub\"\n```\n\n----------------------------------------\n\nTITLE: PageFooterSumUntilNow Custom Aggregate Function\nDESCRIPTION: Implements a custom aggregate function that handles multi-pass report rendering and manages page-level aggregation with thread-static considerations\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/summary-per-page-when-group-is-on-multiple-pages.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[AggregateFunction(Description = \"Special sum aggregate. Output: (value1, value2, ...)\", Name = \"PageFooterSumUntilNow\")]\nclass PageFooterSumUntilNow : IAggregateFunction\n{\n\t[ThreadStatic]\n\tstatic decimal result;\n\n\t[ThreadStatic]\n\tstatic int currentPage;\n\n\t[ThreadStatic]\n\tstatic string currentGroupByValue;\n\n\t[ThreadStatic]\n\tstatic object processingOperationId;\n\n\tpublic void Accumulate(object[] values)\n\t{\n\t\tobject value = values[0];\n\t\tvar reportDefinition = values[2];\n\t\tint page = (int)values[3];\n\t\tif (!object.ReferenceEquals(processingOperationId, reportDefinition))\n\t\t{\n\t\t\tprocessingOperationId = reportDefinition;\n\t\t\tresult = 0;\n\t\t\tcurrentPage = -1;\n\t\t}\n\n\t\tif (currentPage > page)\n\t\t{\n\t\t\tresult = 0;\n\t\t\tcurrentPage = page;\n\t\t}\n\n\t\tif (currentPage < page)\n\t\t{\n\t\t\tcurrentPage = page;\n\t\t}\n\n\t\tif (null == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvar groupByValue = (string)values[1];\n\n\t\tif (groupByValue != currentGroupByValue)\n\t\t{\n\t\t\tcurrentGroupByValue = groupByValue;\n\t\t\tresult = 0M;\n\t\t}\n\n\t\tresult += (decimal)value;\n\t}\n\n\tpublic object GetValue()\n\t{\n\t\treturn result;\n\t}\n\n\tpublic void Init() {}\n\n\tpublic void Merge(IAggregateFunction aggregateFunction) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Page Load Parameter Initialization\nDESCRIPTION: Server-side code for initializing report parameters during page load in both C# and VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprotected void Page_Load(object sender, EventArgs e)\n{\n\tif (!IsPostBack)\n\t{\n\t\tthis.reportViewer1.ReportSource.Parameters.Add(\"OrderNumber\", this.invoiceId.Value);\n\t}\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nProtected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\n\tIf Not Page.IsPostBack Then\n\t\tMe.reportViewer1.ReportSource.Parameters.Add(\"OrderNumber\", Me.invoiceId.Value)\n\tEnd If\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Rendering Report as Image Print Preview\nDESCRIPTION: Renders a report with print preview page layout using image output. Defaults to EMF format, with fallback to other bitmap formats. TIFF not supported.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/export-formats.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.ImageRendering.PrintPreviewImageReport, Telerik.Reporting, Version=x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Fixing libdl Error on CentOS\nDESCRIPTION: Command to create a symbolic link to fix the 'Unable to load shared library libdl' error that may occur with libgdiplus on CentOS.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-install-libgdiplus-centos-amazon-linux.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nln -s /lib64/libdl.so.2 /lib64/libdl.so\n```\n\n----------------------------------------\n\nTITLE: Telerik Reporting HTML5 Assets Local Path\nDESCRIPTION: This snippet shows the local path where the HTML5 assets of Telerik Reporting are located after installation. This path allows developers to access the files directly from their local machine instead of using the CDN or REST service.  The `{{site.suiteversion}}` is a placeholder for the specific version installed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/cdn-assets.md#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n`C:\\Program Files (x86)\\Progress\\Telerik Reporting {{site.suiteversion}}\\Html5`\n```\n\n----------------------------------------\n\nTITLE: Registering DbProviderFactory with Assembly Qualified Name in .NET Core\nDESCRIPTION: This snippet shows how to register a database provider factory using its assembly qualified name, which is useful when the provider doesn't expose a static instance. This approach uses the full type name with assembly information.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-register-db-provider-factory-in-net-core-project.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.Processing.Data.DbProviderFactories.RegisterFactory(\"FirebirdSql.Data.FirebirdClient\", \"FirebirdSql.Data.FirebirdClient.FirebirdClientFactory, FirebirdSql.Data.FirebirdClient, Version=7.0.0.0\");\n```\n\n----------------------------------------\n\nTITLE: Report Viewer Service Access Error Message\nDESCRIPTION: Error message displayed in the report viewer when the REST service cannot be accessed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-viewer-does-not-load-with-jquery-slim.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCannot access the Reporting REST service. (serviceUrl = '/api/reports'). \nMake sure the service address is correct and enable CORS if needed. (https://enable-cors.org)\n```\n\n----------------------------------------\n\nTITLE: Connecting Report to Data Source using NeedDataSource Event in VB.NET\nDESCRIPTION: This snippet shows how to use the Report.NeedDataSource event in VB.NET to provide a data source to a Report item at runtime. It creates a SQL connection, executes a query, and sets the resulting dataset as the report's data source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/using-the-needdatasource-event-to-connect-data.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPrivate Sub Report1_NeedDataSource(ByVal sender As Object, ByVal e As System.EventArgs)\n\tDim sql As String = \"SELECT Production.Product.Name, Production.Product.ProductNumber FROM Production.Product\"\n\tDim connectionString As String = \"Data Source=(local)\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True\"\n\tDim adapter As New SqlDataAdapter(sql, connectionString)\n\tDim dataSet As New DataSet()\n\tadapter.Fill(dataSet)\n\tTryCast(sender, Telerik.Reporting.Processing.Report).DataSource = dataSet\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Initializing React App with Report Viewer Integration\nDESCRIPTION: This snippet initializes a React application by rendering the ReportViewer component into the root DOM element. It uses React's render method and imports the necessary polyfills for compatibility.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport {ReportViewer} from './ReportViewer.js';\n\nReactDOM.render(\n\t<ReportViewer/>,\n\tdocument.getElementById('root')\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration in ASP.NET Core\nDESCRIPTION: Basic code for retrieving the ReportingEngineConfiguration from the service provider using dependency injection in ASP.NET Core.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nReportingEngineConfiguration = sp.GetService<IConfiguration>()\n```\n\n----------------------------------------\n\nTITLE: Programmatically Loading XML into DataSet\nDESCRIPTION: Load XML data into a DataSet at runtime using the ReadXml method. This approach allows dynamic XML data loading but lacks design-time schema support.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/xml-support.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Programmatically loading XML into a DataSet\nDataSet dataSet = new DataSet();\ndataSet.ReadXml(\"data.xml\");\nreport.DataSource = dataSet;\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files\nDESCRIPTION: This code snippet ensures that the Blazor application serves static files, which is mandatory for Blazor projects dealing with static content.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-blazor-application.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\napp.UseStaticFiles();\n```\n\n----------------------------------------\n\nTITLE: Removing .TBD files from Visual Studio folder\nDESCRIPTION: This step involves navigating to the Visual Studio's local application data folder and deleting all files with the .TBD extension. This helps to clear the cache and resolve potential conflicts that may be causing issues with the Toolbox.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"%USERPROFILE%\\AppData\\Local\\Microsoft\\VisualStudio\\10.0\"\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Telerik Reporting Documentation\nDESCRIPTION: Defines metadata for the Telerik Reporting documentation page, including title, description, type, and related tags\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-filter-pie-chart-multiple-parameters-telerik-reporting.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Creating and Filtering a Pie Chart\ndescription: \"Learn how to create a pie chart and apply filtering with multivalue report parameters in Telerik Reporting.\"\ntype: how-to\npage_title: How to Create and Filter a Pie Chart\nslug: create-filter-pie-chart-multiple-parameters-telerik-reporting\ntags: reporting, pie chart, filter, parameters\nres_type: kb\nticketid: 1659572\n```\n\n----------------------------------------\n\nTITLE: Applying DontWrapResult Attribute to ReportsController in ASPNetZero\nDESCRIPTION: Shows how to apply the [DontWrapResult] attribute to the ReportsController or its GetVersion() method to prevent ASPNetZero's BoilerPlate from wrapping API responses, resolving version mismatch errors between the Report Viewer and the REST Service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reporting-rest-api-hosted-aspnetzero-projects-returns-incorrect-version-response.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[DontWrapResult]\npublic class ReportsController : Controller\n{\n    // Controller implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Example - SharedDataSource XML Structure\nDESCRIPTION: Shows the folder structure and setup for configuring a SharedDataSource component in a report definition. The component can have a Name and Path property, with the Path supporting expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/shareddatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<sharedDataSourceResolver>\n  <!-- Custom resolver implementation -->\n</sharedDataSourceResolver>\n```\n\n----------------------------------------\n\nTITLE: Modifying Documents in ServiceStack Controller\nDESCRIPTION: Demonstrates how to override the OnGetDocument method in a ServiceStack controller to modify PDF documents before serving them to web viewers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/modify-exported-report-document-before-serving-it-to-the-viewer-client.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReportController : Telerik.Reporting.Services.WebApi.ReportsControllerBase\n{\n\tprotected override void OnGetDocument(Telerik.Reporting.Services.GetDocumentEventArgs args)\n\t{\n\t\tif(args.Extension.Equals(\"pdf\"))\n\t\t{\n\t\t\t//modify the rendered document in args.DocumentBytes \n\t\t}\n\t}\n}\n```\n\nLANGUAGE: VB\nCODE:\n```\nPublic Class ReportController Inherits Telerik.Reporting.Services.WebApi.ReportsControllerBase\n\tProtected Overrides Sub OnGetDocument(args As Telerik.Reporting.Services.GetDocumentEventArgs)\n\t\tIf args.Extension = \"PDF\" Then\n\t\t\t'modify the rendered document in args.DocumentBytes\n\t\tEnd If\n\tEnd Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Adding Toggle Visibility Action Programmatically in VB.NET\nDESCRIPTION: This VB.NET code snippet demonstrates how to add a ToggleVisibilityAction to a Telerik Report item programmatically. It requires importing the Telerik.Reporting namespace and specifying the report item to which the action will be added. The action toggles the visibility of a target report item, specified by its name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/drilldown-report-action.md#2025-04-21_snippet_1\n\nLANGUAGE: vbnet\nCODE:\n```\n\t\t\tDim reportItem As ReportItem = Me.textBox1\n\t\t\tDim action As New Telerik.Reporting.ToggleVisibilityAction()\n\t\t\tCType(action, Telerik.Reporting.ToggleVisibilityAction).Target = \"textBox2\"\n\t\t\treportItem.Actions.Add(action)\n\n```\n\n----------------------------------------\n\nTITLE: Using ReportProcessor - Pre Q2 2012 vs Q2 2012\nDESCRIPTION: Examples demonstrating how to use ReportProcessor for rendering reports before and after Q2 2012 changes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nReport1 report1 = new Report1();\nTelerik.Reporting.Processing.ReportProcessor reportProcessor = new Telerik.Reporting.Processing.ReportProcessor();\nTelerik.Reporting.Processing.RenderingResult result = reportProcessor.RenderReport(\"PDF\", report1, null);\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim report1 As New Report1()\nDim reportProcessor As New Telerik.Reporting.Processing.ReportProcessor()\nDim result As Telerik.Reporting.Processing.RenderingResult = reportProcessor.RenderReport(\"PDF\", report1, Nothing)\n```\n\nLANGUAGE: C#\nCODE:\n```\nReport1 report1 = new Report1();\nTelerik.Reporting.Processing.ReportProcessor reportProcessor = new Telerik.Reporting.Processing.ReportProcessor();\nTelerik.Reporting.InstanceReportSource instanceReportSource = new Telerik.Reporting.InstanceReportSource();\ninstanceReportSource.ReportDocument = report1;\nTelerik.Reporting.Processing.RenderingResult result = reportProcessor.RenderReport(\"PDF\", instanceReportSource, null);\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim report1 As New Report1()\nDim reportProcessor As New Telerik.Reporting.Processing.ReportProcessor()\nDim instanceReportSource As New Telerik.Reporting.InstanceReportSource()\ninstanceReportSource.ReportDocument = report1\nDim result As Telerik.Reporting.Processing.RenderingResult = reportProcessor.RenderReport(\"PDF\", instanceReportSource, Nothing)\n```\n\n----------------------------------------\n\nTITLE: Starting Standalone Report Designer with RollForward\nDESCRIPTION: This snippet shows how to start the Standalone Report Designer for .NET using the command line with the RollForward feature. Ensure the appropriate .NET runtime version is installed. The command will run the designer using the latest major .NET version.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\Program Files (x86)\\Progress\\Telerik Reporting {Version}\\Report Designer\\.NET>Telerik.ReportDesigner.Net.exe --roll-forward LatestMajor\n```\n\n----------------------------------------\n\nTITLE: Updating Report Parameters on Custom UI Change in JavaScript\nDESCRIPTION: This JavaScript code updates the ReportSource parameters when the custom dropdown selection changes. It demonstrates how to dynamically update report parameters based on user input outside the viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('#invoiceId').change(function () {\n\tvar viewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n\tviewer.reportSource({\n\t\treport: viewer.reportSource().report,\n\t\tparameters: { OrderNumber: $(this).val() }\n\t});\n\t//setting the HTML5 Viewer's reportSource causes a refresh automatically\n\t//if you need to force a refresh for other cases, use:\n\t//viewer.refreshReport();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Multivalue Parameters in ReportSource\nDESCRIPTION: Shows how to parse multivalue parameters from the query string and add them to the ReportSource parameters collection in a WebForms page\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/passing-multivalue-parameters-from-url-query-string-with-web-service-data-source.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\npublic partial class ReportViewerForm : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        var clientReportSource = new Telerik.ReportViewer.Html5.WebForms.ReportSource();\n        clientReportSource.IdentifierType = Telerik.ReportViewer.Html5.WebForms.IdentifierType.TypeReportSource;\n\n        clientReportSource.Identifier = typeof(ReportLibrary1.Report1).AssemblyQualifiedName;\n\n        //multivalue parameter ...?Id=1,5,7\n        var multiValueParam = Request.QueryString[\"Id\"].Split(new[] { ',' });\n        clientReportSource.Parameters.Add(\"Id\", multiValueParam);\n\n        this.reportViewer1.ReportSource = clientReportSource;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with Selector\nDESCRIPTION: Shows how to initialize the HTML5 Report Viewer with a specific selector. This is necessary when using data attributes to target a specific viewer instance on a page with multiple viewers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/data-attributes.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\").telerik_ReportViewer({\n\tserviceUrl: \"../api/reports/\",\n\ttemplateUrl: 'src/templates/telerikReportViewerTemplate-{{buildversion}}.html',\n\treportSource: { report: \"product catalog.trdx\" },\n\tselector: '#reportViewer1'\n});\n```\n\n----------------------------------------\n\nTITLE: Using Async Methods in Telerik Report Event Handlers - CSharp\nDESCRIPTION: This C# code snippet demonstrates how to execute an asynchronous method synchronously within a Telerik report event handler by using ConfigureAwait(false) to prevent UI thread deadlocks. This method utilizes GetAwaiter().GetResult() to handle exceptions directly rather than wrapping them in an AggregateException.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-async-method-in-report-event-handler.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nMyMethodAsync().ConfigureAwait(false).GetAwaiter().GetResult();\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAccessDataSource with ObjectContext Property in VB.NET\nDESCRIPTION: This VB.NET code configures the OpenAccessDataSource component by setting the ObjectContext and ObjectContextMember properties to connect to an AdventureWorksEntities context and retrieve product information.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/connecting-to-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim oaDataSource As New OpenAccessDataSource()\noaDataSource.ObjectContext = GetType(AdventureWorksEntities)\noaDataSource.ObjectContextMember = \"Products\"\n```\n\n----------------------------------------\n\nTITLE: Adding Sass-Based Theme Stylesheet\nDESCRIPTION: This snippet demonstrates how to include the Sass-based theme stylesheet in the index.html file. It assumes the all.css file has been copied to the assets folder.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-customize-viewer-using-kendo-ui-sass-based-theme.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- in index.html -->\n<link href=\"assets/all.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Rendering Extension in XML\nDESCRIPTION: XML configuration required to register the custom rendering extension in the application configuration file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/custom-rendering-extension.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n    <Extensions>\n      <Render>\n        <Extension name=\"CustomExtensionName\" \n                   type=\"NameSpace.CustomRenderingExtension, ProjectName\" \n                   description=\"This Value Will Appear As Extension Name In the Export Options of the Viewers and Designers\">\n        </Extension>\n      </Render>\n    </Extensions>\n  </Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Column Visibility Conditional Expression\nDESCRIPTION: Conditional formatting expression used to control column visibility based on parameter nullability\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/switch-hide-show-table-columns.md#2025-04-21_snippet_2\n\nLANGUAGE: Expression\nCODE:\n```\n= Parameters.Column5.Value <> Null\n```\n\n----------------------------------------\n\nTITLE: Configuring Required CsvDataSource Settings in VB.NET\nDESCRIPTION: VB.NET implementation of mandatory configuration settings for CsvDataSource including source URI, field separators, and record separators.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/csvdatasource-component/connecting-the-csvdatasource-component-to-a-csv-source.md#2025-04-21_snippet_2\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim csvDataSource As New CsvDataSource()\ncsvDataSource.Source = New Uri(\"C:\\\\temp\\\\data.csv\", UriKind.RelativeOrAbsolute)\ncsvDataSource.FieldSeparators = New String() {\",\"}\ncsvDataSource.RecordSeparators = New String() {\"\\r\\n\", \"\\n\"}\n```\n\n----------------------------------------\n\nTITLE: Modified Generic Image Configuration in RESX File\nDESCRIPTION: This XML snippet showcases the corrected format for storing the image as plain base64 string. The `{pictureBoxNameHere}` should be replaced by the real PictureBox Name in the report and `{the value of the image base64 string here}` with the encoded image value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/embedded-image-clr-report-skia-error.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n\"<data name=\\\"{pictureBoxNameHere}.Value\\\" xml:space=\\\"preserve\\\">\\n\t\t<value>\\n\t\t\t{the value of the image base64 string here}\\n\t\t</value>\\n\t</data>\"\n```\n\n----------------------------------------\n\nTITLE: Connecting Report to Data Source using NeedDataSource Event in C#\nDESCRIPTION: This snippet demonstrates how to use the Report.NeedDataSource event to provide a data source to a Report item at runtime. It creates a SQL connection, executes a query, and sets the resulting dataset as the report's data source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/using-the-needdatasource-event-to-connect-data.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Report1_NeedDataSource(object sender, System.EventArgs e)\n{\n\tstring sql = @\"SELECT Production.Product.Name, Production.Product.ProductNumber FROM Production.Product\";\n\tstring connectionString = \"Data Source=(local)\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True\";\n\tSqlDataAdapter adapter = new SqlDataAdapter(sql, connectionString);\n\tDataSet dataSet = new DataSet();\n\tadapter.Fill(dataSet);\n\t(sender as Telerik.Reporting.Processing.Report).DataSource = dataSet;\n}\n```\n\n----------------------------------------\n\nTITLE: Web.config Service Configuration for Telerik Reporting WCF Service\nDESCRIPTION: Full web.config configuration that registers the Reporting Service endpoints with proper service name, bindings, and behaviors for hosting in IIS.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-implement-and-use-custom-ireportresolver.md#2025-04-21_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n\t<system.serviceModel>\n\t\t<services>\n\t\t\t<service name=\"CSharp.SilverlightDemo.Web.CustomReportService\"\n\t\t\t\t\t behaviorConfiguration=\"ReportServiceBehavior\">\n\t\t\t\t<endpoint\n\t\t\t\t\t   address=\"\"\n\t\t\t\t\t   binding=\"basicHttpBinding\"\n\t\t\t\t\t   contract=\"Telerik.Reporting.Service.IReportService\">\n\t\t\t\t\t<identity>\n\t\t\t\t\t\t<dns value=\"localhost\" />\n\t\t\t\t\t</identity>\n\t\t\t\t</endpoint>\n\t\t\t\t<endpoint\n\t\t\t\t\t\taddress=\"resources\"\n\t\t\t\t\t\tbinding=\"webHttpBinding\"\n\t\t\t\t\t\tbehaviorConfiguration=\"WebBehavior\"\n\t\t\t\t\t\tcontract=\"Telerik.Reporting.Service.IResourceService\"/>\n\t\t\t\t<endpoint\n\t\t\t\t\t\taddress=\"mex\"\n\t\t\t\t\t\tbinding=\"mexHttpBinding\"\n\t\t\t\t\t\tcontract=\"IMetadataExchange\" />\n\t\t\t</service>\n\t\t</services>\n\t\t<behaviors>\n\t\t\t<serviceBehaviors>\n\t\t\t\t<behavior name=\"ReportServiceBehavior\">\n\t\t\t\t\t<serviceMetadata httpGetEnabled=\"true\" />\n\t\t\t\t\t<serviceDebug includeExceptionDetailInFaults=\"false\" />\n\t\t\t\t</behavior>\n\t\t\t</serviceBehaviors>\n\t\t\t<endpointBehaviors>\n\t\t\t\t<behavior name=\"WebBehavior\">\n\t\t\t\t\t<webHttp />\n\t\t\t\t</behavior>\n\t\t\t</endpointBehaviors>\n\t\t</behaviors>\n\t</system.serviceModel>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Converting DateTime Parameter to UTC Format\nDESCRIPTION: Expression to convert a DateTime Report Parameter value to UTC format to ensure compatibility with Npgsql 6+ provider when writing to PostgreSQL timestamp with time zone fields.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/cannot-write-datetime-with-kind-unspecified-postgresql.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n= Parameters.Parameter1.Value.ToUniversalTime()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Concatenation in Telerik Reporting Expressions\nDESCRIPTION: This snippet shows how to concatenate strings using the '+' operator in Telerik Reporting expressions. It combines the FirstName and LastName fields with a space in between.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/operators.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nFields.FirstName + \" \" + Fields.LastName\n```\n\n----------------------------------------\n\nTITLE: Configuring WPF Report Viewer in XAML - Version Comparison\nDESCRIPTION: XAML markup examples showing how to configure the WPF Report Viewer before and after Q2 2012 update.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_9\n\nLANGUAGE: XAML\nCODE:\n```\n<telerik:ReportViewer x:Name=\"ReportViewer1\" Report=\"ReportLibrary1.Report1, ReportLibrary1\" />\n```\n\nLANGUAGE: XAML\nCODE:\n```\n<tr:ReportViewer x:Name=\"ReportViewer1\">\n\t<tr:ReportViewer.ReportSource>\n\t\t<telerikReporting:TypeReportSource TypeName=\"ReportLibrary1.Report1, ReportLibrary1\" />\n\t</tr:ReportViewer.ReportSource>\n</tr:ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Adding Page Header and Footer Sections\nDESCRIPTION: Instructions for adding or removing page headers and footers through the report designer's context menu\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/report-item/page-headers-footers.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Right-click in the empty space around the sections.\n\n1. Select __Page Header__ or __Page Footer__ and follow the prompts.\n```\n\n----------------------------------------\n\nTITLE: Issuing Ajax Request through Telerik RadAjaxManager\nDESCRIPTION: This code snippet demonstrates how to integrate the ASP.NET ReportViewer with Telerik RadAjaxManager to perform AJAX requests without full-page postbacks. It utilizes the RadAjaxManager to update only specific areas within the page such as the ReportViewer during certain trigger actions, enhancing performance and user experience.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/ajax-support.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<asp:Button ID=\"Button1\" runat=\"server\" Text=\"Button\" onclick=\"Button1_Click\" />\n<telerik:ReportViewer ID=\"ReportViewer1\" runat=\"server\"></telerik:ReportViewer>\n<telerik:RadAjaxManager ID=\"RadAjaxManager1\" runat=\"server\">\n\t<AjaxSettings>\n\t\t<telerik:AjaxSetting AjaxControlID=\"Button1\">\n\t\t\t<UpdatedControls>\n\t\t\t\t<telerik:AjaxUpdatedControl ControlID=\"ReportViewer1\"/>\n\t\t\t</UpdatedControls>\n\t\t</telerik:AjaxSetting>\n\t</AjaxSettings>\n</telerik:RadAjaxManager>\n```\n\n----------------------------------------\n\nTITLE: Running Telerik Reporting Installer with Logging\nDESCRIPTION: Command to execute the Telerik Reporting installer with verbose logging enabled. The command generates a detailed log file that can help identify installation issues.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/installer-fails.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nmsiexec /i Telerik_Reporting.msi -l*xv install.log\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS Policy in C#\nDESCRIPTION: This C# code shows how to add a new CORS policy named \"ReportingRestPolicy\" to the application's services. The policy allows any origin, method, and header, enabling Cross-Origin Resource Sharing.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_9\n\nLANGUAGE: CSharp\nCODE:\n```\n````CSharp\nbuilder.Services.AddCors(corsOption => corsOption.AddPolicy(\n\t\"ReportingRestPolicy\",\n\tcorsBuilder =>\n\t{\n\t\tcorsBuilder.AllowAnyOrigin()\n\t\t\t.AllowAnyMethod()\n\t\t\t.AllowAnyHeader();\n\t}\n));\n````\n```\n\n----------------------------------------\n\nTITLE: Registry Key for RIA Services (32-bit)\nDESCRIPTION: These registry keys are associated with RIA Services and may cause issues with the Visual Studio Toolbox. Removing these keys can resolve problems related to slow loading or duplicated toolbox items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Silverlight\\v4.0\\AssemblyFoldersEx\\Ria Services v1.0 Silverlight Libraries\\Toolbox\n```\n\nLANGUAGE: text\nCODE:\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Silverlight\\v5.0\\AssemblyFoldersEx\\Ria Services v1.0 Silverlight Libraries\\Toolbox\n```\n\n----------------------------------------\n\nTITLE: Adding Localization Resources to ASP.NET WebForms Project\nDESCRIPTION: Step-by-step process for adding localization resources to an ASP.NET WebForms project, including creating resource files and configuring their properties for proper localization support.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/report-viewer-localization.md#2025-04-21_snippet_1\n\nLANGUAGE: aspx\nCODE:\n```\n// 1. Create App_GlobalResources folder\n// 2. Add RESX resource file\n// 3. Set Build Action to 'None'\n// 4. Set Copy to Output Directory to 'Copy if newer'\n// 5. Edit resource strings in Visual Studio Resource Editor\n```\n\n----------------------------------------\n\nTITLE: Adding Report Parameter Programmatically in VB.NET\nDESCRIPTION: Demonstrates how to add a report parameter to a Telerik Reporting report programmatically using VB.NET. This snippet adds a new ReportParameter to the ReportParameters collection with specified Name, Type, and Text. The report parameter enables user-input data, allowing for report content control and improved data filtering.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/how-to-add-report-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: vbnet\nCODE:\n```\n            Dim report As New Telerik.Reporting.Report()\n            Dim parameter As New Telerik.Reporting.ReportParameter()\n            parameter.Name = \"ReportParameter1\"\n            parameter.Type = Telerik.Reporting.ReportParameterType.Integer\n            parameter.Text = \"Please enter value for ReportParameter1\"\n            report.ReportParameters.Add(parameter)\n```\n\n----------------------------------------\n\nTITLE: Creating a Helper Function to Load Scripts in Angular\nDESCRIPTION: This TypeScript function creates a script element and appends it to the document body to dynamically load external scripts. It sets the script to load asynchronously and deferred.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-culture-of-date-picker-in-angular-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nloadScript(url: string) {\n\tlet body = <HTMLDivElement>document.body;\n\tlet script = document.createElement('script');\n\tscript.innerHTML = '';\n\tscript.src = url;\n\tscript.async = true;\n\tscript.defer = true;\n\tbody.appendChild(script);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTML5 Report Viewer Parameter Area in HTML\nDESCRIPTION: This HTML snippet demonstrates how to define the parameters area of the HTML5 Report Viewer using a div element with specific classes and a data-role attribute.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/styling-and-appearance/templates-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"trv-parameters-area k-widget hidden\" data-role=\"telerik_ReportViewer_ParametersArea\"> … </div>\n```\n\n----------------------------------------\n\nTITLE: Configuring appsettings.json for Npgsql in .NET Applications\nDESCRIPTION: This JSON configuration specifies the connection string and provider name for a PostgreSQL database connection in a .NET application's appsettings.json file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/configuring-postgres-with-npgsql.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"ConnectionStrings\":{\n\t\t\"postgres\":{\n\t\t\t\"connectionString\":\"Server=127.0.0.1;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\",\n\t\t\t\"providerName\":\"Npgsql\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Named Parameters Implementation for SqlClient Provider\nDESCRIPTION: Code demonstrating how to implement named parameters with SqlDataSource using SqlClient provider\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-parameters-with-the-sqldatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\SqlDataSourceSnippets.cs region=NamedParametersSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Handling interactiveActionExecuting Event in HTML5 Report Viewer (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to handle the interactiveActionExecuting event in the Telerik HTML5 Report Viewer. It shows how to intercept and potentially cancel a 'navigateToReport' action by prompting the user for confirmation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/interactiveactionexecuting(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.ProductSales, CSharp.ReportLibrary\"\n\t\t},\n\t\tinteractiveActionExecuting: function(e, args) {\n\t\t\tif (args.action.Type === 'navigateToReport') {\n\t\t\t\targs.cancel = !confirm(\"You are about to navigate to report \"+args.action.Value.Report + \".\\r\\n\\nContinue?\");\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ImageInteractive Extension Settings in JSON\nDESCRIPTION: An example of configuring ImageInteractive rendering settings in a JSON-based configuration file. It configures the same settings as the XML example - PNG output format and AntiAliasGridFit text rendering hint.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-export-formats/imageinteractive-device-information-settings.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"extensions\": [\n\t\t{\n\t\t\t\"name\": \"IMAGEInteractive\",\n\t\t\t\"parameters\": [\n\t\t\t\t{\n\t\t\t\t\t\"Name\": \"OutputFormat\",\n\t\t\t\t\t\"Value\": \"PNG\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"Name\": \"TextRenderingHint\",\n\t\t\t\t\t\"Value\": \"AntiAliasGridFit\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving SQLite DLL Loading Error in Standalone Report Designer\nDESCRIPTION: Fix for System.TypeInitializationException related to SQLite.Interop.dll not being found. Requires manually copying the correct architecture-specific DLL to the application directory.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/problems-configuring-standalone-report-designer-to-use-sqlite.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nError: System.TypeInitializationException: The type initializer for 'System.Data.SQLite.SQLiteFactory' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'SQLite.Interop.dll': The specified module could not be found. (Exception from HRESULT: 0x8007007E)\n```\n\n----------------------------------------\n\nTITLE: Overriding GetDocumentFormats Method in C#\nDESCRIPTION: This method overrides the default GetDocumentFormats to include a new 'Embedded' option for embedding reports in email bodies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/send-telerik-report-embedded-email-body.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\npublic override JsonResult GetDocumentFormats()\n{\n\tvar formats = new Telerik.Reporting.Services.Engine.ExtensionInfo[6] {\n\tnew()  {\n\t\t\tName = \"Embedded\",\n\t\t\tLocalizedName = \"Embedded\" },\n\tnew() {\n\t\t\tName = \"PDF\",\n\t\t\tLocalizedName = \"PDF Document\" },\n\tnew()  {\n\t\t\tName = \"CSV\",\n\t\t\tLocalizedName = \"CSV (comma delimited)\" },\n\tnew()  {\n\t\t\tName = \"DOCX\",\n\t\t\tLocalizedName = \"Word Document\" },\n\tnew()  {\n\t\t\tName = \"XLSX\",\n\t\t\tLocalizedName = \"Excel Worksheet\" },\n\tnew()  {\n\t\t\tName = \"PPTX\",\n\t\t\tLocalizedName = \"PowerPoint Presentation\" },\n\t};\n\treturn Json(formats);\n}\n```\n\n----------------------------------------\n\nTITLE: Painting Interactive Action Boundaries\nDESCRIPTION: Draws a visual border around interactive action areas during report viewer area painting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-winforms-report-viewer.md#2025-04-21_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nvoid reportViewer1_ViewerAreaPaint(object sender, PaintEventArgs e)\n{\n    if (this.borderBounds != Rectangle.Empty)\n    {\n        using (var p = new Pen(Brushes.Salmon, 2f))\n        {\n            e.Graphics.DrawRectangle(p, this.borderBounds);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Telerik License Key in GitHub Actions with YAML\nDESCRIPTION: This snippet demonstrates how to define an environment variable to hold the Telerik license key in GitHub Actions using YAML. The `secrets.TELERIK_LICENSE` references a repository secret containing the license key.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/licensing/add-license-key-ci-services.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n````yaml\nenv:\n\t\tTELERIK_LICENSE: ${{ secrets.TELERIK_LICENSE }}\n````\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Handlers for ReportViewer in web.config (System.Web)\nDESCRIPTION: XML configuration for registering Telerik ReportViewer HTTP handler in the system.web section for handling report viewer requests\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/deploying-web-reportviewer-in-sharepoint.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<add path=\"Telerik.ReportViewer.axd\" type=\"Telerik.ReportViewer.WebForms.HttpHandler, Telerik.ReportViewer.WebForms, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" verb=\"*\" validate=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring EntityDataSource with Instance Binding\nDESCRIPTION: Demonstrates how to bind EntityDataSource to a live instance of ObjectContext/DbContext for data retrieval.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/connecting-to-an-entity-data-model-with-the-entitydatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nentityDataSource.Context = new AdventureWorksEntities();\nentityDataSource.ContextMember = \"Products\";\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nentityDataSource.Context = New AdventureWorksEntities()\nentityDataSource.ContextMember = \"Products\"\n```\n\n----------------------------------------\n\nTITLE: Version Numbers and Dependencies List\nDESCRIPTION: Lists of version numbers and dependencies for various Telerik Reporting components including Web Report Designer, HTML5 Report Viewer, Angular Viewer, React Viewer, and other integrations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q1-18-0-24-305.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Telerik Kendo UI (2022.3.913 or later)\n* jQuery (1.9.1 or later)\n* Angular (14.0.0 or later)\n* React (16.8.6 or later)\n* React-DOM (16.8.6 or later)\n* jQuery (3.2.1)\n* Newtonsoft.Json (13.0.0.0 or later)\n* Microsoft ASP.NET Web API (4.0.20710.0 or later)\n* ServiceStack (3.9.70.0)\n* SQLite version 3.33.0 (.NET Framework)\n* SQLite version 3.38.0 (.NET Core and .NET 6+)\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Row Height Using Telerik Expression\nDESCRIPTION: Expression that calculates the appropriate row height based on the maximum length of data content. Uses conditional logic to assign different heights (0.2in to 0.8in) depending on content length ranges.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/table-detail-rows-with-same-height.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\n= Ifs(Exec(\"table1\", Max(Len(Fields.data))) <= 13, \"0.2in\",\n\t\tExec(\"table1\", Max(Len(Fields.data))) <= 26, \"0.4in\",\n\t\tExec(\"table1\", Max(Len(Fields.data))) <= 39, \"0.6in\", \"0.8in\")\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Meta Tag for Responsive Design in HTML\nDESCRIPTION: This HTML snippet shows how to set the viewport meta tag to enable proper responsive design for the HTML5 Report Viewer. It sets the width, initial-scale, and maximum-scale properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/styling-and-appearance/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n```\n\n----------------------------------------\n\nTITLE: Assembly Binding Redirect Configuration for ActiveReports Conversion\nDESCRIPTION: XML configuration that sets up assembly binding redirects for ActiveReports 3 and ActiveReports.Viewer3 assemblies. This configuration enables compatibility between different versions of ActiveReports and the Telerik converter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/converting-reports-from-activereports.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"ActiveReports3\" publicKeyToken=\"cc4967777c49a3ff\" culture=\"neutral\" />\n\t\t\t\t<bindingRedirect newVersion=\"x.x.x.x\" oldVersion=\"x.x.x.x\" />\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"ActiveReports.Viewer3\" publicKeyToken=\"cc4967777c49a3ff\" culture=\"neutral\" />\n\t\t\t\t<bindingRedirect newVersion=\"x.x.x.x\" oldVersion=\"x.x.x.x\" />\n\t\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t\t</runtime>\n\t</configuration>\n```\n\n----------------------------------------\n\nTITLE: Complete HTML5 Page Implementation\nDESCRIPTION: Full HTML page implementation combining all components for the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/manual-setup.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<title>Telerik HTML5 Report Viewer</title>\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n\t\t<script src=\"/api/reports/resources/js/telerikReportViewer\"></script>\n\t\t<style>\n\t\t\t#reportViewer1 {\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 5px;\n\t\t\t\tright: 5px;\n\t\t\t\ttop: 5px;\n\t\t\t\tbottom: 5px;\n\t\t\t\tfont-family: 'segoe ui', 'ms sans serif';\n\t\t\t\toverflow: hidden;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"reportViewer1\" class=\"k-widget\">\n\t\t\tloading...\n\t\t</div>\n\t\t<script type=\"text/javascript\">\n\t\t\t$(\"#reportViewer1\")\n\t\t\t .telerik_ReportViewer({\n\t\t\t\t\tserviceUrl: \"/api/reports/\",\n\t\t\t\t\treportSource: {\n\t\t\t\t\t\treport: \"Telerik.Reporting.Examples.CSharp.ProductCatalog, CSharp.ReportLibrary\",\n\t\t\t\t\t\tparameters: {\n\t\t\t\t\t\t\tCultureID: \"en\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t</script>\n\t</body>\n\t</html>\n```\n\n----------------------------------------\n\nTITLE: Creating User Function for Data Type Parsing in C#\nDESCRIPTION: Custom User Function class that converts string values to integers when possible, otherwise returns the original string. This helps avoid Excel formatting warnings by ensuring proper data types.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/number-in-the-cell-is-formatted-as-text-or-preceded-by-an-apostrophe.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class ReturnTypeClass\n{\n    public static object ParseString(string str)\n    {\n        Int32 intValue;\n        if (Int32.TryParse(str, out intValue))\n            return intValue;\n        else return str;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings in XML\nDESCRIPTION: This XML snippet shows how to configure connection strings for Telerik Reporting. It specifies the data source and provides properties necessary for establishing a connection to the database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<connectionStrings>\n\t\t<add name=\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\"\n\t\t\tconnectionString=\"Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=SSPI\"\n\t\t\tproviderName=\"System.Data.SqlClient\" />\n\t</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Registering Npgsql Provider in DbProviderFactories Configuration\nDESCRIPTION: This XML configuration registers the Npgsql data provider in the DbProviderFactories section of the application's config file. It specifies the invariant name, description, and full type information for the Npgsql provider factory.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-register-sqldatasource-data-providers-without-driver-installation.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<system.data>\n\t.................. \n\t<DbProviderFactories>\n\t\t<add name=\"Npgsql Data Provider\"\n\t\t\tinvariant=\"Npgsql\"\n\t\t\tdescription=\".NET Framework Data Provider for Postgresql Server\"\n\t\t\ttype=\"Npgsql.NpgsqlFactory, Npgsql, Version=3.2.1.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\" />\n\t\t..................\n\t</DbProviderFactories>\n</system.data>\n```\n\n----------------------------------------\n\nTITLE: Querying Product Category\nDESCRIPTION: This SQL query retrieves product category data from the Production.ProductCategory table. It selects the ProductCategoryID and Name, aliasing Name as CategoryName. This is used to populate the first level of the cascading parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/how-to-cascade-parameters-with-applied-filtering-on-data-source-level.md#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\tProductCategoryID,\n\t\tName AS CategoryName\n\tFROM\n\t\tProduction.ProductCategory\n```\n\n----------------------------------------\n\nTITLE: Report Server Web Preview Error\nDESCRIPTION: This error message appears when a published/uploaded report cannot be previewed on the web through Telerik Report Server. This indicates an inability to read the report due to schema incompatibility, which typically arises from using an older version of the product.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/issues-on-connecting-telerik-reporting-standalone-report-designer-to-telerik-report-server.md#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\"Unable to get report parameters.\\nAn error has occurred.\\nCannot read a document with the specified schema: http://schemas.telerik.com/reporting/2021/2.0\\nYou might be using an older version of the product.\"\n```\n\n----------------------------------------\n\nTITLE: Marking a Class as a Data Object in VB.NET\nDESCRIPTION: This VB.NET code snippet demonstrates how to mark a class, `Cars`, as a data object using the `DataObjectAttribute`. This attribute helps in identifying types suitable for data binding when using the ObjectDataSource Wizard.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/tools/data-source-wizards/objectdatasource-wizard.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n````VB\n<System.ComponentModel.DataObject>\n\t\tPublic Class Cars\n\t\t\tInherits List(Of Car)\n\t\t\t....\n\t\tEnd Class\n````\n```\n\n----------------------------------------\n\nTITLE: SearchResultsInfo JSON Entity Structure Example\nDESCRIPTION: An example of the SearchResultsInfo JSON entity returned by the Telerik Reporting REST Service. This entity contains search results with description, id, and page information.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/searchresultsinfo.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"description\": \"Quarterly Sales Dashboard for 2003\",\n\t\"id\": \"a082030a03fa4e349abe183d161a35ea\",\n\t\"page\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ConnectionString for CubeDataSource in C#\nDESCRIPTION: This snippet demonstrates how to set the ConnectionString property of a CubeDataSource to connect to the Adventure Works DW 2008R2 sample database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/connecting-the-cubedatasource-component-to-an-olap-database.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nthis.cubeDataSource1.ConnectionString = \"Data Source=localhost;Initial Catalog=Adventure Works DW 2008R2\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection String in C#\nDESCRIPTION: Demonstrates how to specify a connection string for the EntityDataSource component to ensure proper functionality in both design-time and runtime environments.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/configuring-the-database-connectivity-with-the-entitydatasource-component.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nentityDataSource.EntityContextType = typeof(AdventureWorksContext);\nentityDataSource.EntityMember = \"Employees\";\nentityDataSource.ConnectionString = \"AdventureWorks\";\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP Handler in web.config (XML)\nDESCRIPTION: This XML snippet demonstrates how to manually register the HTTP handler required by the Telerik ReportViewer in the `web.config` file. This is necessary if the ReportViewer control is not added from the Toolbox.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/how-to-add-report-viewer-to-a-web-page.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n\"<system.web>\n\t....\n\t\t<httpHandlers>\n\t\t\t<add path=\\\"Telerik.ReportViewer.axd\\\" verb=\\\"*\\\" type=\\\"Telerik.ReportViewer.WebForms.HttpHandler, Telerik.ReportViewer.WebForms, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\\\"/>\n\t\t</httpHandlers>\n\t....\n\t</system.web>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ADO.NET Cache Provider in JSON for Telerik Reporting\nDESCRIPTION: JSON configuration for the ADO.NET cache provider. This provider requires provider name and connection string parameters to store rendered pages and resources using ADO.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"cache\": {\n\t\t\"provider\": \"ADO.NET\",\n\t\t\"providers\": [\n\t\t\t{\n\t\t\t\t\"name\": \"ADONETProviderName\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"ProviderName\",\n\t\t\t\t\t\t\"value\": \"ADONETProviderProviderName\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"ConnectionString\",\n\t\t\t\t\t\t\"value\": \"ADONETProviderConnectionString\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Report Page Settings with InstanceReportSource in Telerik Reporting\nDESCRIPTION: Demonstrates how to dynamically change report page settings such as paper kind and orientation before rendering, using InstanceReportSource and ReportProcessor\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/export-or-print-same-report-on-paper-with-different-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nreport = new MyReport();\n\n// Modify report PageSettings\nreport.PageSettings.PaperKind = \"A3\";\nreport.PageSettings.Landscape = True;\n\nInstanceReportSource instanceReportSource = new InstanceReportSource();\ninstanceReportSource.ReportDocument = report;\nTelerik.Reporting.Processing.ReportProcessor reportProcessor = new Telerik.Reporting.Processing.ReportProcessor();\nSystem.Collections.Hashtable deviceInfo = new System.Collections.Hashtable();\nTelerik.Reporting.Processing.RenderingResult result = reportProcessor.RenderReport(\"PDF\", instanceReportSource, deviceInfo);\n```\n\n----------------------------------------\n\nTITLE: Using Data Field Validation in Telerik Report Expression\nDESCRIPTION: Expression syntax for using the IfFieldDoesNotExist function within a Telerik Report. The expression references the current ReportItem's DataObject and specifies the field to check along with a default value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/check-if-data-field-exists-before-using-it.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n=IfFieldDoesNotExist(ReportItem.DataObject, \"FieldNameHere\", DefaultValueHere)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting X-Axis Label Unit in Telerik Reporting\nDESCRIPTION: This expression sets the X-axis label unit to 'Months' if there are more than 10 distinct data points, otherwise it sets it to 'Auto'. This is necessary for the LabelStep property to be applied correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/graph-bindings-to-control-coordinate-system-properties.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n=IIF(CountDistinct(Fields.MonthYear) > 10, 'Months', 'Auto')\n```\n\n----------------------------------------\n\nTITLE: Resolve Report Instance Response Example\nDESCRIPTION: This snippet shows a sample HTTP response from the Telerik Reporting REST API after a successful Resolve Report Instance request. It includes the HTTP status code and the report instance identifier in the response body. This identifier is used to reference the created report instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/report-instances-api/resolve-report-instance.md#2025-04-21_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 201 Created\n\n\t\t\"a5f3\"\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Telerik Reporting REST Service\nDESCRIPTION: Example of XML-based configuration for the restReportService element. Shows how to configure various settings including hostAppId, workerCount, storage providers, and report resolvers in web.config or app.config.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/restreportservice-element.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n…\n\t<Telerik.Reporting>\n\t\t<restReportService hostAppId=\"Application1\" workerCount=\"4\" reportSharingTimeout=\"10\" clientSessionTimeout=\"10\" exceptionsVerbosity=\"detailed\">\n\t\t\t<reportResolver provider=\"type\" />\n\t\t\t<storage provider=\"file\">\n\t\t\t\t<parameters>\n\t\t\t\t\t<parameter name=\"directory\" value=\"C:\\Temp\\RestServiceStorage\" />\n\t\t\t\t</parameters>\n\t\t\t</storage>\n\t\t\t<!--<storage provider=\"Redis\">\n\t\t\t\t<parameters>\n\t\t\t\t\t<parameter name=\"configuration\" value=\"localhost:10001\" />\n\t\t\t\t\t<parameter name=\"databaseNumber\" value=\"1\" />\n\t\t\t\t</parameters>\n\t\t\t</storage>-->\n\t\t\t<!--<storage provider=\"MSSQLServer\">\n\t\t\t\t<parameters>\n\t\t\t\t\t<parameter name=\"connectionString\" value=\"Data Source=(local)\\SQLEXPRESS;Initial Catalog=RestServiceStorage;Integrated Security=SSPI\" />\n\t\t\t\t\t<parameter name=\"commandTimeout\" value=\"60\" />\n\t\t\t\t</parameters>\n\t\t\t</storage>-->\n\t\t</restReportService>\n\t</Telerik.Reporting>\n…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Using AddYears Function in Telerik Reporting\nDESCRIPTION: The `AddYears` function returns a new DateTime that adds the specified number of years to the value of the specified date. It takes a date and a number of years as input and returns a new DateTime object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_6\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=AddYears(Now(), 3)\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Client Session Timeout via HTTP GET\nDESCRIPTION: Sends a GET request to retrieve the client's session timeout in seconds from the Telerik Reporting REST API. This endpoint is used by the HTML5 Report Viewer when the keepClientAlive option is set to true.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/clients-api/get-clients-session-timeout-seconds.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/reports/clients/sessionTimeout HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Initializing ReportViewer with Custom Parameter Editor\nDESCRIPTION: Example demonstrating how to initialize the ReportViewer with a custom parameter editor configuration. Shows the complete setup within a script tag.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tparameterEditors: [{\n\t\t\tmatch: function (parameter) {\n\t\t\t\treturn Boolean(parameter.availableValues) && !parameter.multivalue;\n\t\t\t},\n\t\t\tcreateEditor: function (placeholder, options) {\n\t\t\t\tvar dropDownElement = $(placeholder).html('<div></div>'),\n\t\t\t\t\tparameter,\n\t\t\t\t\tvalueChangedCallback = options.parameterChanged,\n\t\t\t\t\tdropDownList;\n\t\t\t\tfunction onChange() {\n\t\t\t\t\tvar val = dropDownList.value();\n\t\t\t\t\tvalueChangedCallback(parameter, val);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tbeginEdit: function (param) {\n\t\t\t\t\t\tparameter = param;\n\t\t\t\t\t\t$(dropDownElement).kendoDropDownList({\n\t\t\t\t\t\t\tdataTextField: \"name\",\n\t\t\t\t\t\t\tdataValueField: \"value\",\n\t\t\t\t\t\t\tvalue: parameter.value,\n\t\t\t\t\t\t\tdataSource: parameter.availableValues,\n\t\t\t\t\t\t\tchange: onChange\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdropDownList = $(dropDownElement).data(\"kendoDropDownList\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}]\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: XML Serialization Error When Opening Reports in Telerik Standalone Report Designer\nDESCRIPTION: This error occurs when attempting to open a report created with a newer version of the Standalone Report Designer than the one being used. The XML serializer cannot resolve the Report type due to schema version incompatibility.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/report-cannot-be-opened-in-standalone-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nTelerik.Reporting.Xml.XmlSerializerExcepion: An error has occurred during xml serialization. The xml serializer cannot resolve type with name: Report. \n```\n\n----------------------------------------\n\nTITLE: HTML5 Report Rendering\nDESCRIPTION: Renders a report in XHTML 1.1 compliant HTML with physical page layout. Requires multi-stream rendering with RenderReport method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/export-formats.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.Html5Rendering.Html5Report, Telerik.Reporting, Version=x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Licensing Package in .NET Project\nDESCRIPTION: XML configuration for adding Telerik Licensing package reference in modern .NET project types using PackageReference\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/licensing/setting-up-your-telerik-reporting-license-key.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<PackageReference Include=\"Telerik.Licensing\" Version=\"1.*\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying XML for Image in DOCX Reports (R3 2023 and later)\nDESCRIPTION: This XML snippet illustrates the updated method of embedding images in DOCX reports starting from R3 2023. It uses DrawingML instead of VML to ensure compatibility with current OpenXML standards, resolving issues related to image visibility on OneDrive.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/images-missing-from-docx-in-onedrive.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<w:drawing><wp:inline xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"><wp:extent cx=\"1368000\" cy=\"647999\" /><wp:docPr id=\"2\" name=\"\" /><a:graphic xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\"><a:graphicData uri=\"http://schemas.openxmlformats.org/drawingml/2006/picture\"><pic:pic xmlns:pic=\"http://schemas.openxmlformats.org/drawingml/2006/picture\"><pic:nvPicPr><pic:cNvPr id=\"2\" name=\"\" /><pic:cNvPicPr /></pic:nvPicPr><pic:blipFill><a:blip r:embed=\"R6f68189fed5f4494\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" /><a:srcRect l=\"-57943\" t=\"0\" r=\"-57943\" b=\"0\" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr><a:xfrm><a:ext cx=\"1368000\" cy=\"647999\" /></a:xfrm><a:prstGeom prst=\"rect\" /></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing>\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Output with Default Settings\nDESCRIPTION: This CSV snippet shows the default output of a report before applying custom rendering settings. It includes headers and static text.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/configuring-the-csv-rendering-extension.md#2025-04-21_snippet_2\n\nLANGUAGE: CSV\nCODE:\n```\naddressIDCaptionTextBox1,cityCaptionTextBox1,postalCodeCaptionTextBox1,textBox1,cityDataTextBox,postalCodeDataTextBox\nAddressID,City,PostalCode,20,Bothell,98011\nAddressID,City,PostalCode,21,Bothell,98011\nAddressID,City,PostalCode,22,Portland,97205\nAddressID,City,PostalCode,23,Seattle,98104\nAddressID,City,PostalCode,24,Duluth,55802\nAddressID,City,PostalCode,25,Dallas,75201\nAddressID,City,PostalCode,26,San Francisco,94109\nAddressID,City,PostalCode,27,Nevada,84407\nAddressID,City,PostalCode,28,Phoenix,85004\nAddressID,City,PostalCode,29,Memphis,38103\nAddressID,City,PostalCode,30,Orlando,32804\nAddressID,City,PostalCode,31,Ottawa,K4B 1T7\nAddressID,City,PostalCode,32,Montreal,H1Y 2H5\n```\n\n----------------------------------------\n\nTITLE: Adding Web Report Designer HTML Page\nDESCRIPTION: This HTML snippet outlines the structure of the web page needed for the Telerik Web Report Designer. It includes references to necessary scripts and initializes the telerik_WebReportDesigner widget, ensuring the correct layout and functionality in a web environment.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-core-2.1-application.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n\t<title>Telerik Web Report Designer Demo</title>\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t<link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500&display=swap\" rel=\"stylesheet\">\n</head>\n  <body>\n\t<div id=\"webReportDesigner\">\n\t\tloading...\n\t</div>\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t<script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}//js/kendo.all.min.js\"></script>\n\t<script src=\"api/reportdesigner/resources/js/telerikReportViewer\"></script>\n\t<script src=\"api/reportdesigner/designerresources/js/webReportDesigner\"></script>\n\t<script type=\"text/javascript\">\n\t\t$(document).ready(function () {\n\t\t\t$(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\t\t\tpersistSession: false,\n\t\t\t\ttoolboxArea: {\n\t\t\t\t\tlayout: \"list\"\n\t\t\t\t},\n\t\t\t\tserviceUrl: \"api/reportdesigner/\",\n\t\t\t\treport: \"Product Catalog.trdp\"\n\t\t\t}).data(\"telerik_WebDesigner\");\n\t\t});\n\t</script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Rendering Report Using Report Processor in VB.NET\nDESCRIPTION: This snippet illustrates the process of manually rendering a report with the Report Processor in VB.NET. Similar to the C# example, it uses TypeReportSource to define the report by its Assembly Qualified Name and demonstrates the use of Reflection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/report-definitions.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\Processing\\ReportProcessorSnippets.vb region=Export_Single_Stream_Snippet}}\n```\n\n----------------------------------------\n\nTITLE: Sample DELETE Response\nDESCRIPTION: This snippet shows the expected HTTP response code for a successful DELETE request. A 204 NoContent response indicates that the document was successfully destroyed. The HTTP version is specified as HTTP/1.1.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/release-document.md#2025-04-21_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 204 NoContent\n```\n\n----------------------------------------\n\nTITLE: Adding a Hyperlink Action Programmatically - C#\nDESCRIPTION: This snippet demonstrates how to programmatically add a hyperlink action that navigates to a URL using C#. The hyperlink action can be applied to any report item that supports the Action property.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/hyperlink-action.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\ActionSnippets.cs region=AddNewNavigateToUrlSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Installing Libraries on Linux (Ubuntu/Debian) using SkiaSharp\nDESCRIPTION: This snippet shows how to update and install necessary libraries (freetype6 and fontconfig1) on Ubuntu or Debian systems when using SkiaSharp in a .NET application for Telerik Reporting. These libraries are required for SkiaSharp to function correctly on Linux.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/dot-net-core-support.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\nsudo apt-get install -y libfreetype6\nsudo apt-get install -y libfontconfig1\n```\n\n----------------------------------------\n\nTITLE: Applying Function and Description Attributes to User Functions in C#\nDESCRIPTION: Illustrates how to use Function and Description attributes to provide metadata for user functions in C#, including category, name, namespace, and parameter descriptions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/extending-expressions/user-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MyFunctions\n{\n    [Function(Category = \"My Functions\", Name = \"Greet\", Namespace = \"My\", Description = \"Returns a greeting message\")]\n    public static string Greet([Description(\"The name to greet\")] string name)\n    {\n        return string.Format(\"Hello, {0}!\", name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AddHours Function in Telerik Reporting\nDESCRIPTION: The `AddHours` function returns a new DateTime that adds the specified number of hours to the value of the specified date. It takes a date and a number of hours as input and returns a new DateTime object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_9\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=AddHours(Now(), 3)\"\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource for HTML5 ASP.NET WebForms Report Viewer via Markup\nDESCRIPTION: Demonstrates how to set the ReportSource for the HTML5 ASP.NET WebForms Report Viewer using HTML markup, including setting the identifier type, identifier, and parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<form runat=\"server\">\n\t<telerik:ReportViewer Width=\"\" Height=\"\"\n\t\tID=\"reportViewer1\"\n\t\trunat=\"server\">\n\t\t<ReportSource\n\t\t\tIdentifierType=\"TypeReportSource\"\n\t\t\tIdentifier=\"Telerik.Reporting.Examples.CSharp.ReportCatalog, CSharp.ReportLibrary, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\">\n\t\t\t<Parameters>\n\t\t\t\t<telerik:Parameter Name=\"Parameter1\" Value=\"123\" />\n\t\t\t</Parameters>\n\t\t</ReportSource>\n\t</telerik:ReportViewer>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String for Telerik Reporting in Web.config\nDESCRIPTION: XML configuration snippet that adds the default connection string used by Telerik Reporting sample reports to the web.config file of the project hosting the Reporting REST service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<connectionStrings>\n\t\t<add name=\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\"\n\t\t\t\t   connectionString=\"Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=SSPI\"\n\t\t\t\t   providerName=\"System.Data.SqlClient\" />\n\t</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Angular Report Viewer Component Template with renderingBegin Event Binding\nDESCRIPTION: This HTML template shows how to configure the Telerik Report Viewer in an Angular application. It includes setting the service URL, report source, view mode, and binding the renderingBegin event to the custom function that sets the Kendo culture.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-culture-of-date-picker-in-angular-viewer.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer #viewer1 [containerStyle]=\"viewerContainerStyle\" [serviceUrl]=\"'http://localhost:59655/api/reports/'\"\n\t[reportSource]=\"{\n\t\treport: 'Employee Sales Summary.trdp',\n\t\tparameters: {}\n\t}\" [viewMode]=\"'INTERACTIVE'\" [renderingBegin]=\"renderingBegin\"\n\t[scaleMode]=\"'SPECIFIC'\" [scale]=\"1.0\"\n\t[enableAccessibility]=\"false\">\n</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies in runtime assemblyBinding Configuration\nDESCRIPTION: This XML snippet demonstrates how to configure the Standalone designer's configuration file to register Npgsql and its dependencies. It defines assembly bindings with proper versions and file paths, enabling the application to find these assemblies without GAC installation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-register-sqldatasource-data-providers-without-driver-installation.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<runtime>\n\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t..................\n\t\t<probing privatePath=\"bin\"/>\n\t\t\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"Npgsql\" culture=\"neutral\"publicKeyToken=\"5d8b90d52f46fda7\"/>\n\t\t\t<codeBase version=\"3.2.1.0\" href=\"FILE://(appFolder)/bin/Npgsql.dll\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"Microsoft.Extensions.DependencyInjection.Abstractions\"culture=\"neutral\" publicKeyToken=\"adb9793829ddae60\" />\n\t\t\t<codeBase version=\"1.1.0.0\"href=\"FILE://(appFolder)/bin/Microsoft.Extensions.DependencyInjection.Abstractions.dll\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"Microsoft.Extensions.Logging.Abstractions\"culture=\"neutral\" publicKeyToken=\"adb9793829ddae60\" />\n\t\t\t<codeBase version=\"1.1.0.0\"href=\"FILE://(appFolder)/bin/Microsoft.Extensions.Logging.Abstractions.dll\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"Microsoft.Extensions.Logging\" culture=\"neutral\"publicKeyToken=\"adb9793829ddae60\"/>\n\t\t\t<codeBase version=\"1.1.0.0\"href=\"FILE://(appFolder)/bin/Microsoft.Extensions.Logging.dll\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Runtime.InteropServices.RuntimeInformation\"culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\"/>\n\t\t\t<codeBase version=\"4.0.1.0\"href=\"FILE://(appFolder)/bin/System.Runtime.InteropServices.RuntimeInformation.dll\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Threading.Tasks.Extensions\" culture=\"neutral\"publicKeyToken=\"cc7b13ffcd2ddd51\" />\n\t\t\t<codeBase version=\"4.1.0.0\"href=\"FILE://(appFolder)/bin/System.Threading.Tasks.Extensions.dll\"/>\n\t\t</dependentAssembly>\n\t\t..................\n\t</assemblyBinding>\n</runtime>\n```\n\n----------------------------------------\n\nTITLE: Invoking Stored Procedure in MySQL\nDESCRIPTION: This SQL snippet demonstrates how to manually invoke a stored procedure in MySQL as a workaround for the SqlCommand conversion error in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-mysqlcommand--to-sqlcommand-conversion-error.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCALL Stored_Procedure;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Report Service in C#\nDESCRIPTION: Implementing a custom ReportService class that uses a custom IReportResolver implementation to handle report resolution in a Telerik Reporting WCF service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-implement-and-use-custom-ireportresolver.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclass CustomReportService : ReportService\n{\n\tstatic readonly IReportResolver resolver = new ReportResolver();\n\n\tpublic CustomReportService()\n\t{\n\t\tthis.ReportResolver = resolver;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Phone Class in VB.NET\nDESCRIPTION: Defines a Phone class with a Number property and a GetFormattedNumber method to format the phone number in Visual Basic.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/how-to-use-the-reportitem.dataobject-property-in-expressions.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Class Phone\n\tPublic Property Number() As String\n\t\tGet\n\t\t\tReturn _Number\n\t\tEnd Get\n\t\tSet\n\t\t\t_Number = Value\n\t\tEnd Set\n\tEnd Property\n\tPrivate _Number As String\n\tPublic Function GetFormattedNumber() As String\n\t\tReturn Number.Replace(\" \", \"-\")\n\tEnd Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Disabling Type Validation in XML Configuration File\nDESCRIPTION: Complete XML configuration example demonstrating how to disable both expression and serialization type validation. Includes the necessary configSections registration and security warning.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/typeValidation-element.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<configuration>\n\t<configSections>\n\t\t<section name=\"Telerik.Reporting\" type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\" allowLocation=\"true\" allowDefinition=\"Everywhere\" />\n\t</configSections>\n\t<Telerik.Reporting>\n\t\t<typeValidation validateExpressionTypes=\"false\" validateSerializationTypes=\"false\" />\n\t</Telerik.Reporting>\n...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Location Properties in Map Series\nDESCRIPTION: Examples of expressions for accessing specific latitude and longitude properties of the current location in a Map series. These properties are automatically available in the Fields collection of the Edit Expression dialog when working with MapSeriesBase.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/structure/layers.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nLocation.Latitude\n```\n\nLANGUAGE: csharp\nCODE:\n```\nLocation.Longitude\n```\n\n----------------------------------------\n\nTITLE: Setting Report DataSource in NeedDataSource Event (VB.NET)\nDESCRIPTION: This VB.NET code snippet demonstrates how to set the report's DataSource within the `NeedDataSource` event handler. It retrieves the 'Year' parameter value from the report, converts it to a string, and passes it to the `GetData` function. The returned DataTable is then assigned as the report's DataSource, effectively filtering the data based on the selected year.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/use-parameters-to-retrieve-specific-data.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nPrivate Sub Report2_NeedDataSource(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.NeedDataSource\n\t\tDim report As Telerik.Reporting.Processing.Report = DirectCast(sender, Telerik.Reporting.Processing.Report)\n\t\treport.DataSource = GetData(report.Parameters(\"Year\").Value.ToString())\n\tEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Substring Extraction with Substr Function in C#\nDESCRIPTION: Shows how to use the Substr function to extract a portion of a string, specifying the start index and length of the desired substring.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/text-functions.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n=SubStr(\"Telerik\", 0, 3)\n```\n\n----------------------------------------\n\nTITLE: Defining Math Functions Table in Markdown\nDESCRIPTION: A markdown table listing various Math functions available in Telerik Reporting, including their names and descriptions. The table covers a wide range of mathematical operations from basic arithmetic to trigonometric and logarithmic functions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/math-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Description |\n| ------ | ------ |\n| `Abs(number)` |Returns the absolute value of a specified number.|\n| `Acos(number)` |Returns the angle whose cosine is the specified number.|\n| `Asin(number)` |Returns the angle whose sine is the specified number.|\n| `Atan(number)` |Returns the angle whose tangent is the specified number.|\n| `Atan2(y, x)` |Returns the angle whose tangent is the quotient of two specified numbers.|\n| `BigMul(a, b)` |Produces the full product of two 32-bit numbers.|\n| `Ceiling(number)` |Returns the smallest integral value that is greater than or equal to the specified decimal or double-precision floating-point number.|\n| `Cos(angle)` |Returns the cosine of the specified angle.|\n| `Cosh(angle)` |Returns the hyperbolic cosine of the specified angle.|\n| `Exp(power)` |Returns the cosine of the specified angle.|\n| `Floor(number)` |Returns the largest integral value that is less than or equal to the specified decimal or double-precision floating-point number.|\n| `Log(number)` |Returns the natural (base e) logarithm of a specified number.|\n| `Log(number, newBase)` |Returns the logarithm of a specified number in a specified base.|\n| `Log10(number)` |Returns the base 10 logarithm of a specified number.|\n| `Pow(number, power)` |Returns a specified number raised to the specified power.|\n| `Random()` |Returns a 32-bit signed integer greater than or equal to zero .|\n| `Round(number)` |Rounds a decimal or a double-precision floating-point number to the nearest integral value.|\n| `Round(number, digits)` |Rounds a decimal or a double-precision floating-point number to the specified number of fractional digits.|\n| `Sign(number)` |Returns a value (-1, 0, 1) indicating the sign of a number.|\n| `Sin(angle)` |Returns the sine of the specified angle.|\n| `Sqrt(number)` |Returns the hyperbolic sine of the specified angle.|\n| `Tan(angle)` |Returns the tangent of the specified angle.|\n| `Tanh(angle)` |Returns the hyperbolic tangent of the specified angle.|\n| `Truncate(number)` |Calculates the integral part of a specified number|\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TypeDescriptor for ExpandoObject in C#\nDESCRIPTION: This code snippet defines custom TypeDescriptionProvider and TypeDescriptor classes to expose ExpandoObject properties to the Telerik Reporting engine. It includes ExpandoObjectTypeDescriptionProvider, ExpandoObjectTypeDescriptor, and ExpandoObjectPropertyDescriptor classes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-objectdatasource-with-expandoobject.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ExpandoObjectTypeDescriptionProvider : TypeDescriptionProvider\n{\n    private static readonly TypeDescriptionProvider m_Default = TypeDescriptor.GetProvider(typeof(ExpandoObject));\n    public ExpandoObjectTypeDescriptionProvider()\n        :base(m_Default)\n    {\n    }\n    public override ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance)\n    {\n        var defaultDescriptor = base.GetTypeDescriptor(objectType, instance);\n        return instance == null ? defaultDescriptor :\n                   new ExpandoObjectTypeDescriptor(instance);\n    }\n}\npublic class ExpandoObjectTypeDescriptor : ICustomTypeDescriptor\n{\n    private readonly IDictionary<string,object> m_Instance;\n    public ExpandoObjectTypeDescriptor(dynamic instance)\n    {\n        m_Instance = instance as IDictionary<string, object>;\n    }\n    public string GetComponentName()\n    {\n        return TypeDescriptor.GetComponentName(this, true);\n    }\n    public EventDescriptor GetDefaultEvent()\n    {\n        return TypeDescriptor.GetDefaultEvent(this, true);\n    }\n    public string GetClassName()\n    {\n        return TypeDescriptor.GetClassName(this, true);\n    }\n    public EventDescriptorCollection GetEvents(Attribute[] attributes)\n    {\n        return TypeDescriptor.GetEvents(this, attributes, true);\n    }\n    EventDescriptorCollection ICustomTypeDescriptor.GetEvents()\n    {\n        return TypeDescriptor.GetEvents(this, true);\n    }\n    public TypeConverter GetConverter()\n    {\n        return TypeDescriptor.GetConverter(this, true);\n    }\n    public object GetPropertyOwner(PropertyDescriptor pd)\n    {\n        return m_Instance;\n    }\n    public AttributeCollection GetAttributes()\n    {\n        return TypeDescriptor.GetAttributes(this, true);\n    }\n    public object GetEditor(Type editorBaseType)\n    {\n        return TypeDescriptor.GetEditor(this, editorBaseType, true);\n    }\n    public PropertyDescriptor GetDefaultProperty()\n    {\n        return null;\n    }\n    PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties()\n    {\n        return ((ICustomTypeDescriptor)this).GetProperties(new Attribute[0]);\n    }\n    public PropertyDescriptorCollection GetProperties(Attribute[] attributes)\n    {\n        return new PropertyDescriptorCollection(\n            m_Instance.Keys\n                      .Select(x => new ExpandoObjectPropertyDescriptor(m_Instance, x))\n                      .ToArray<PropertyDescriptor>());\n    }\n    class ExpandoObjectPropertyDescriptor : PropertyDescriptor\n    {\n        private readonly IDictionary<string, object> m_Instance;\n        private readonly string m_Name;\n        public ExpandoObjectPropertyDescriptor(IDictionary<string, object> instance, string name)\n            : base(name, null)\n        {\n            m_Instance = instance;\n            m_Name = name;\n        }\n        public override Type PropertyType\n        {\n            get { return m_Instance[m_Name].GetType(); }\n        }\n        public override void SetValue(object component, object value)\n        {\n            m_Instance[m_Name] = value;\n        }\n        public override object GetValue(object component)\n        {\n            return (((IDictionary<string, object>)component))[m_Name];\n        }\n        public override bool IsReadOnly\n        {\n            get\n            {\n                return false;\n            }\n        }\n        public override Type ComponentType\n        {\n            get { return null; }\n        }\n        public override bool CanResetValue(object component)\n        {\n            return false;\n        }\n        public override void ResetValue(object component)\n        {\n        }\n        public override bool ShouldSerializeValue(object component)\n        {\n            return false;\n        }\n        public override string Category\n        {\n            get { return string.Empty; }\n        }\n        public override string Description\n        {\n            get { return string.Empty; }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parameterized SQL Select Command\nDESCRIPTION: Shows an example of a parameterized SQL select command that includes a placeholder for a parameter value to be supplied at runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/connecting-the-sqldatasource-component-to-a-data-source.md#2025-04-21_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CustomerID, CompanyName FROM Customers WHERE City = @City\n```\n\n----------------------------------------\n\nTITLE: Handling Report Selection Changes\nDESCRIPTION: Event handler for dropdown selection changes that updates the selected report and refreshes the PDF viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-reports-in-maui-blazor-pdf-viewer.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate async Task OnDropDownValueChanged(string newValue)\n{\n\tSelectedReport = newValue;\n\tawait GetPdfAsync(newValue);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Total Page Count in Telerik Reporting (C#)\nDESCRIPTION: Demonstrates how to display the current page number and total page count in a report expression.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/page-functions.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n= PageNumber + \" of \" + PageCount\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectionStrings in JSON for Telerik Reporting\nDESCRIPTION: A JSON configuration example that sets up a connection string for SQL Server without specifying a provider. This format uses System.Data.SqlClient as the default provider.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-core-2.1-and-2.2.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n...\n\t\"ConnectionStrings\": {\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Empty Lines to TextBox Value in VB.NET\nDESCRIPTION: This snippet shows how to add empty lines at the beginning of a TextBox value in VB.NET to improve the layout of tilted text.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/textbox.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nMe.textBox1.Value = \"= \"\"\" & vbCr & vbLf & vbCr & vbLf & \"\"\" + Fields.MyDataColumn\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Barcode Item to Prevent Text Overflow\nDESCRIPTION: Demonstrates potential solutions to resolve text rendering issues in Telerik Reporting Barcode items by adjusting font or item size\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-showtext-true-text-exceeds-barcode-boundaries.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Solution\n\nTo handle the issue, change the font size, pick another font or increase the size of the item.\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Parameter in WebServiceDataSource URL (C#)\nDESCRIPTION: This example shows how to configure an inline parameter in the Service URL of a WebServiceDataSource. The parameter value replaces a part of the URL at runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/webservicedatasource-component/using-parameters-with-the-webservicedatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nhttp://localhost:50160/api/data/GetProductsForCountry/{countryId}\n```\n\n----------------------------------------\n\nTITLE: Running the Angular Application\nDESCRIPTION: This snippet shows the command used to run the Angular application using the Angular CLI.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Licensing Package in .NET Framework Project\nDESCRIPTION: XML configuration for adding Telerik Licensing package reference in older .NET Framework project types using packages.config\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/licensing/setting-up-your-telerik-reporting-license-key.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<package id=\"Telerik.Licensing\" version=\"1.*\" targetFramework=\"net4*\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Template CSS Link in HTML\nDESCRIPTION: This HTML snippet shows how to update the CSS link in the telerikReportViewerTemplate-sass.html file to point to the stylesheet in the assets folder.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-customize-viewer-using-kendo-ui-sass-based-theme.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"assets/telerikReportViewer-sass.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration Example for TypeReferences in Telerik Reporting\nDESCRIPTION: Shows a JSON configuration example for the TypeReferences element with a sample type reference including typeName, assemblyName, and publicKeyToken properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/typereferences-element.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"TypeReferences\": [\n\t\t{\n\t\t\t\"typeName\": \"MyNamespace.MyClassName\",\n\t\t\t\"assemblyName\": \"MyAssemblyName\",\n\t\t\t\"publicKeyToken\": \"my-assembly-public-key-token\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Switch Function in Telerik Reporting Expressions\nDESCRIPTION: Illustrates the use of the Switch function to compare an expression against multiple values and return a corresponding result. This example shows how to handle multiple cases and provide a default value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/conditional-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n=Switch(Fields.A, 1, \"True\", 0, \"False\", \"Undefined\")\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI for jQuery Reference\nDESCRIPTION: This snippet shows how to include the Kendo UI for jQuery library in the HTML file. It's a prerequisite for using the CheckBoxGroup widget.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-multiselect-checkbox-parameter-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://kendo.cdn.telerik.com/2021.1.119/js/kendo.all.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectionStrings in appsettings.json for Telerik Reporting\nDESCRIPTION: Demonstrates three different ways to configure connection strings in the appsettings.json file for use with Telerik Reporting in ASP.NET Core.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-implement-telerik-reporting-in-asp-net-core-mvc.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  ...\n  \"ConnectionStrings\": {\n      \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\"\n  }  \n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  ...\n  \"ConnectionStrings\": {\n    \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": {\n      \"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n      \"providerName\": \"System.Data.SqlClient\"\n    }\n  }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  ...\n  \"ConnectionStrings\": [\n    {\n      \"name\": \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\",\n      \"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n      \"providerName\": \"System.Data.SqlClient\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Theme CSS References\nDESCRIPTION: Include Kendo UI theme CSS files in the HTML head to style the report viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-report-server.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- The required Less-based styles -->\n<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Deleting Telerik Reporting Redis Keys with Spaces\nDESCRIPTION: This command is used when the keys contain spaces. It wraps each key in quotes before passing to the DEL command, ensuring proper handling of keys with spaces.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/clear-redis-storage-telerik-reporting-rest-service.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nredis-cli KEYS \"*18.1.24.514*\" | sed 's/\\(.*\\)/\"\\1\"/' | xargs redis-cli DEL\n```\n\n----------------------------------------\n\nTITLE: Adding RadHtmlChart to ASP.NET Web Forms Page\nDESCRIPTION: This code snippet demonstrates how to add the RadHtmlChart (HTML5) component to an ASP.NET Web Forms page. It includes a basic configuration for a column series chart.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/combine-chart-and-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: ASP.NET\nCODE:\n```\n<telerik:RadHtmlChart ID=\"RadHtmlChart1\" runat=\"server\">\n    <PlotArea>\n        <Series>\n            <telerik:ColumnSeries DataFieldY=\"valueField\"></telerik:ColumnSeries>\n        </Series>\n        <XAxis DataLabelsField=\"labelsField\"></XAxis>\n    </PlotArea>\n</telerik:RadHtmlChart>\n```\n\n----------------------------------------\n\nTITLE: Starting React Application\nDESCRIPTION: Run the React application using the npm start command\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-report-server.md#2025-04-21_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Calculating Dynamic Crosstab Column Width in Telerik Reporting\nDESCRIPTION: This expression calculates the width for each crosstab column by dividing the available page width by the number of columns. It accounts for page margins and converts units between inches and the report's native unit.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adjust-crosstab-to-page-width.md#2025-04-21_snippet_0\n\nLANGUAGE: VB.NET\nCODE:\n```\n= (CDbl(Replace(CStr(ReportDefinition.PageSettings.PaperSize.Width), 'in', '')) - CDbl(Replace(CStr(ReportDefinition.PageSettings.Margins.Right), 'in', '')) - CDbl(Replace(CStr(ReportDefinition.PageSettings.Margins.Left), 'in', ''))) / Exec('crosstab1', CountDistinct(Fields.group)) + \"in\"\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource Programmatically (C#)\nDESCRIPTION: This C# code snippet demonstrates how to set the ReportSource of the Telerik ReportViewer programmatically within the Page_Load event. It creates a TypeReportSource, sets the TypeName to the AssemblyQualifiedName of the report type, and then assigns the TypeReportSource instance to the ReportSource property of the viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/how-to-add-report-viewer-to-a-web-page.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\"{{\\source=CodeSnippets\\\\CS\\\\API\\\\Telerik\\\\ReportViewer\\\\WebForms\\\\WebForm1.aspx.cs region=Webviewer_SetReportSource}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAccessDataSource with Connection String in C#\nDESCRIPTION: This snippet shows how to specify a connection string and provider name for the OpenAccessDataSource component. This approach works both at design-time and in production.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/configuring-the-database-connectivity-with-the-openaccessdatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nOpenAccessDataSource openAccessDataSource = new OpenAccessDataSource();\nopenAccessDataSource.ContextTypeName = typeof(AdventureWorksModel.AdventureWorksEntities).AssemblyQualifiedName;\nopenAccessDataSource.OpenAccessContextOptions = OpenAccessContextOptions.Default;\nopenAccessDataSource.Member = \"SalesOrderHeaders\";\nopenAccessDataSource.ConnectionString = \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True\";\nopenAccessDataSource.ProviderName = \"System.Data.SqlClient\";\n```\n\n----------------------------------------\n\nTITLE: Registering MySQL Data Provider in .NET Framework config\nDESCRIPTION: This XML snippet shows how to register the MySQL data provider in the Telerik.ReportDesigner.exe.config file for the .NET Framework Standalone Report Designer. It adds the MySQL Data Provider to the DbProviderFactories section.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-data-providers/using-mysql-data-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<system.data>\n\t<DbProviderFactories>\n\t\t<add name=\"MySQL Data Provider\" invariant=\"MySql.Data.MySqlClient\" description=\".Net Framework Data Provider for MySQL\" \t\t\ttype=\"MySql.Data.MySqlClient.MySqlClientFactory, MySql.Data, Version=9.0.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d\"/>\n\t</DbProviderFactories>\n</system.data>\n```\n\n----------------------------------------\n\nTITLE: Configuring Major Gridlines Visibility\nDESCRIPTION: Steps to make major gridlines visible in a Telerik Reporting graph by adjusting axis properties in the Property Browser\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/formatting-a-graph/gridlines.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Click the target __graph axis__. The selected graph axis properties are listed in the __Property Browser__.\n1. In the __Appearance__ section, set the **Major/MinorGridStyle.Visible** to **True**.\n1. Additionally, you may have to update the **LineWidth** and **LineColor** properties.\n```\n\n----------------------------------------\n\nTITLE: Using Date-Time Constants in Telerik Reporting Expressions\nDESCRIPTION: Shows how to use date-time constants in Telerik Reporting expressions. Date values should be enclosed within pound signs (#) for proper interpretation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/constants.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n=Fields.Birthdate < #1/31/82#\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Rendering Settings in XML Configuration File\nDESCRIPTION: XML configuration example showing how to set device information settings for IMAGE, IMAGEPrintPreview, and IMAGEPrint rendering formats. The configuration defines output formats, compression methods, text rendering hints, and DPI settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-export-formats/image-device-information-settings.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n…\n\t<Telerik.Reporting>\n\t\t<extensions>\n\t\t\t<render>\n\t\t\t\t<extension name=\"IMAGE\">\n\t\t\t\t\t<parameters>\n\t\t\t\t\t\t<parameter name=\"OutputFormat\" value=\"TIFF\"/>\n\t\t\t\t\t\t<parameter name=\"TiffCompression\" value=\"RLE\"/>\n\t\t\t\t\t</parameters>\n\t\t\t\t</extension>\n\t\t\t\t<extension name=\"IMAGEPrintPreview\">\n\t\t\t\t\t<parameters>\n\t\t\t\t\t\t<parameter name=\"OutputFormat\" value=\"JPEG\"/>\n\t\t\t\t\t</parameters>\n\t\t\t\t</extension>\n\t\t\t\t<extension name=\"IMAGEPrint\">\n\t\t\t\t\t<parameters>\n\t\t\t\t\t\t<parameter name=\"OutputFormat\" value=\"PNG\"/>\n\t\t\t\t\t\t<parameter name=\"TextRenderingHint\" value=\"AntiAliasGridFit\"/>\n\t\t\t\t\t\t<parameter name=\"DpiX\" value=\"1200\"/>\n\t\t\t\t\t\t<parameter name=\"DpiY\" value=\"1200\"/>\n\t\t\t\t\t</parameters>\n\t\t\t\t</extension>\n\t\t\t</render>\n\t\t</extensions>\n\t</Telerik.Reporting>\n…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Listener in .NET Framework\nDESCRIPTION: Sets up a trace listener in the Standalone Report Designer for .NET Framework to log diagnostic information, which assists in crash troubleshooting. The snippet should be added to the Telerik.ReportDesigner.exe.config file. Prerequisites include the file path configuration and a backup of the original config file. Inputs are diagnostic data, and the output is a log file 'StandaloneDesigner.LOG'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/standalone-report-designer-problems.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version =\"1.0\"?>\n\t\t<configuration>\n\t\t\t...\n\t\t\t<system.diagnostics>\n\t\t\t\t<trace autoflush=\"true\" indentsize=\"4\">\n\t\t\t\t\t<listeners>\n\t\t\t\t\t\t<add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"c:\\temp\\StandaloneDesigner.LOG\" />\n\t\t\t\t\t\t<remove name=\"Default\" />\n\t\t\t\t\t</listeners>\n\t\t\t\t</trace>\n\t\t\t</system.diagnostics>\n\t\t</configuration>\n```\n\n----------------------------------------\n\nTITLE: Aggregating Grouped Data in Telerik Reporting\nDESCRIPTION: Example demonstrating how to create a sum aggregation for quantity values within a product category group.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/table-crosstab-list/basic-concepts.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n=Sum(Fields.Quantity)\n```\n\n----------------------------------------\n\nTITLE: Overriding ProcessCmdKey in C# for Key Event Handling in WinForms\nDESCRIPTION: This snippet demonstrates how to override the ProcessCmdKey method in a WinForms application to detect key combinations such as Ctrl-S after incorporating the WinForms ReportViewer. This approach ensures that the host form can capture key presses even when the ReportViewer is on the form.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/key-events-not-raised-when-winforms-viewer-is-added-to-form.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nprotected override bool ProcessCmdKey(ref Message msg, Keys keyData) {\n\tif(keyData == (Keys.S | Keys.Control)) \n\t{ \n\t\t//do my job\n\t}\n\n\treturn base.ProcessCmdKey(ref msg, keyData);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportViewer DocumentMap Button Visibility in C#\nDESCRIPTION: Example of setting the ReportViewer's ShowDocumentMapButton property to control the visibility of the button that toggles the document map display. This can be used to restrict users from showing or hiding the document map.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/document-map.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nreportViewer.ShowDocumentMapButton = false;\n```\n\n----------------------------------------\n\nTITLE: Including Kendo UI Theme Styles in HTML - HTML\nDESCRIPTION: This HTML snippet shows how to include the required Less-based CSS files for Kendo UI themes in the index.html file, which styles the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-report-server.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- The required Less-based styles -->\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Dependencies with Yarn\nDESCRIPTION: PowerShell command to install required peer dependencies for the Native Angular Report Viewer using yarn package manager.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-narv-using-yarn-package-manager.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nyarn add @angular-devkit/schematics @angular-devkit/core @progress/kendo-angular-upload @progress/kendo-drawing @progress/kendo-svg-icons\n```\n\n----------------------------------------\n\nTITLE: Graph DataSource Binding\nDESCRIPTION: This code snippet describes how to bind the DataSource property of the Graph report item to the ReportItem.DataObject, effectively filtering the graph data to display only the data relevant to the current group. This ensures that each graph within a grouped report shows data specific to its respective group.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/graph-bindings-to-control-coordinate-system-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n=\"=ReportItem.DataObject\"\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Data for Olympic Associations in Telerik Reporting\nDESCRIPTION: This CSV data defines Olympic associations with their IDs and names, to be used as a data source for report parameters in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/map-types/barchart-map.md#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nId,Name\n1,Pan-American Sports Organization\n2,European Olympic Committees\n3,Olympic Council of Asia\n4,Oceania National Olympic Committees\n5,Association of National Olympic Committees of Africa\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Year's Total in Crosstab (C#)\nDESCRIPTION: Demonstrates the use of Previous function with a scope parameter to access the total of the previous year in a crosstab.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/data-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n=Previous('Year', Sum(Fields.LineTotal))\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Resources in Angular index.html\nDESCRIPTION: HTML configuration showing how to reference local Kendo UI stylesheets in the application's index.html file. The stylesheets need to be placed in the src/assets folder and referenced using relative paths.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/angular6-application-with-local-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>DreamApp</title>\n\t\t<base href=\"/\">\n\t\t\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t\t<link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"assets/kendo.common.min.css\">\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"assets/kendo.blueopal.min.css\">\n\t</head>\n\t<body>\n\t\t<app-root></app-root>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using PageExec Function in Telerik Reporting (C#)\nDESCRIPTION: Demonstrates how to use the PageExec function to calculate a summary for each page of the report. It takes a scope and an aggregate function as parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/page-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n= PageExec(\"lineTotalTextBox\", Sum(Fields.LineTotal))\n```\n\n----------------------------------------\n\nTITLE: Initializing UI String Constants in JavaScript\nDESCRIPTION: Comprehensive set of string constants for the Telerik Reporting Designer UI, including messages for data sources, wizards, charts, tables, and error handling. These strings are used for labels, descriptions, error messages and configuration options throughout the application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/localizing-the-web-report-designer.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.ObjectDataSourceNoTypeModelMessage = \"No business object types have been found on the server. Only types from assemblies that are declared in the application configuration file are allowed.\";\nthis.ObjectDataSourceChooseDataMember = \"Choose a data member\";\nthis.ObjectDataSourceChooseDataMemberDescription = \"The business object instance will be created using its default constructor. You have the option to specify a different constructor or a data member (method or property) that will return the data.\";\n// ... [Additional string initializations omitted for brevity] ...\nthis.CouldNotRetrieveSdsRef = \"Unable to retrieve the referenced Shared Data Source for '{sdsName}'\";\nthis.FollowingItemsFromSelectionCouldNotBeDeleted = \"The following items from the selection could not be deleted: {itemList}\";\n```\n\n----------------------------------------\n\nTITLE: Setting SqlDataSource Connection String in VB.NET\nDESCRIPTION: Demonstrates how to set the ProviderName and ConnectionString properties of a SqlDataSource component in VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/connecting-the-sqldatasource-component-to-a-data-source.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nsqlDataSource1.ProviderName = \"System.Data.SqlClient\"\nsqlDataSource1.ConnectionString = \"Data Source=.\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True\"\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI LESS-Based Themes to HTML\nDESCRIPTION: This snippet shows how to add Kendo UI LESS-Based Themes to the `head` element of the HTML page.  It's important to note that Kendo UI LESS-Based Themes are not compatible with Telerik UI for Blazor and should not be used together.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/how-to-use-blazor-report-viewer.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n````HTML\n<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n````\n```\n\n----------------------------------------\n\nTITLE: Changing Accessibility Key Map in WPF Report Viewer using VB.NET\nDESCRIPTION: This snippet provides an example of how to change the accessibility key map in the WPF Report Viewer using VB.NET. It demonstrates handling the Loaded event to ensure the changes take effect after the viewer is fully initialized.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/accessibility.md#2025-04-21_snippet_1\n\nLANGUAGE: vbnet\nCODE:\n```\nProtected Sub ReportViewer_Loaded(sender As Object, e As RoutedEventArgs)\n    ReportViewer.AccessibilityKeyMap(\"Menu\") = KeyInterop.VirtualKeyFromKey(Key.F11)\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Designer with Binding Redirects for Crystal Reports Assemblies\nDESCRIPTION: This XML snippet shows the configuration file of the Report Designer (`Telerik.ReportDesigner.exe.config` or `devenv.exe.config`) with added binding redirects. These redirects are necessary for the Report Designer to correctly load the Crystal Reports assemblies required for the conversion process, pointing to the version of Crystal Reports runtime installed on the machine.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/importing-reports/crystal-reports-converter.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<runtime>\n\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"CrystalDecisions.CrystalReports.Engine\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>   \n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-13.0.3500.0\" newVersion=\"13.0.3500.0\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"CrystalDecisions.Shared\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-13.0.3500.0\" newVersion=\"13.0.3500.0\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"CrystalDecisions.Enterprise.Framework\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-13.0.3500.0\" newVersion=\"13.0.3500.0\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"CrystalDecisions.Enterprise.InfoStore\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-13.0.3500.0\" newVersion=\"13.0.3500.0\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"CrystalDecisions.ReportAppServer.DataDefModel\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-13.0.3500.0\" newVersion=\"13.0.3500.0\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"CrystalDecisions.ReportAppServer.ReportDefModel\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-13.0.3500.0\" newVersion=\"13.0.3500.0\"/>\n\t\t</dependentAssembly>\n\t\t...\n\t</assemblyBinding>\n</runtime>\n```\n\n----------------------------------------\n\nTITLE: Styling Markdown Table in HTML\nDESCRIPTION: HTML style block to set column widths for a markdown table. It targets the first and second columns of the table.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/design-considerations-for-report-rendering/excel-rendering-design-considerations.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\ntable th:first-of-type {\n\twidth: 20%;\n}\ntable th:nth-of-type(2) {\n\twidth: 80%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings as Array in JSON\nDESCRIPTION: Alternative array-based configuration for connection strings that allows defining multiple connections with their respective provider names.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-5.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t//...\n\t\"ConnectionStrings\": [\n\t\t{\n\t\t\t\"name\": \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\",\n\t\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DPI Awareness Using JSON Configuration in Telerik Reporting\nDESCRIPTION: This JSON snippet shows how to configure DPI awareness to PROCESS_SYSTEM_DPI_AWARE in a JSON-based configuration file. This setting ensures that Telerik Reporting renders correctly on systems with non-standard DPI settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/dpiaware-element.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"dpiAware\": {\n\t\t\"dpiAwareness\": \"PROCESS_SYSTEM_DPI_AWARE\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding ReportsController Method to Add Custom Headers in .NET/.NET Core\nDESCRIPTION: This snippet demonstrates how to override the GetDocumentFormats method of the ReportsController to add a custom header to the response. It's suitable when custom headers are needed for specific responses.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-custom-headers-to-responses-of-rests-service.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[Route(\"api/reports\")]\npublic class ReportsController : ReportsControllerBase\n{\n\tpublic ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n\t\t: base(reportServiceConfiguration)\n\t{\n\t}\n\n\t// ...\n\n\tpublic override JsonResult GetDocumentFormats()\n\t{\n\t\tResponse.Headers.Add(\"cross-origin-embedder-policy\", \"require-corp\");\n\t\treturn base.GetDocumentFormats();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kendo UI Theme\nDESCRIPTION: NPM command to install the Kendo UI Default Theme package\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-reporting-service.md#2025-04-21_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install --save @progress/kendo-theme-default\n```\n\n----------------------------------------\n\nTITLE: Converting IList to DataTable for serialization in C#\nDESCRIPTION: This code snippet demonstrates how to convert a non-serializable IList to a serializable DataTable. It creates a new DataTable, adds columns, and populates rows with data from the IList, making it suitable for use in ASP.NET session state serialization.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-runtime-unable-to-serialize-the-session-state-in-stateserver-sqlserver-and-custom-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nDataTable dt = new DataTable();\nDataColumn col = new DataColumn(\"ColumnName\", typeof(string));\n//....\ndt.Columns.Add(col);\nforeach (object Item in MyIList)\n{\n    DataRow row = dt.NewRow();\n    row[\"ColumnName\"] = Item;\n    //.....\n    dt.Rows.Add(row);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Viewer Container Style in Angular Component - TypeScript\nDESCRIPTION: This TypeScript snippet defines a style object for the report viewer container in the AppComponent class, detailing its position, dimensions, and font settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-report-server.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class AppComponent {\n\t\tviewerContainerStyle = {\n\t\t\tposition: 'relative',\n\t\t\twidth: '1000px',\n\t\t\theight: '800px',\n\t\t\t['font-family']: 'ms sans serif'\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly References in JSON Config\nDESCRIPTION: JSON configuration for adding assembly references in .NET projects\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/connecting-the-objectdatasource-component-to-a-data-source.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"assemblyReferences\": [\n\t\t{\n\t\t\t\"name\": \"yourAssemblyName\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MergedDataPoints Threshold Value in Telerik Reporting Graph\nDESCRIPTION: This expression determines the number of series to display separately based on a boolean parameter. When true, it shows 5 series, otherwise it shows all series (up to 120).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-graph-with-merged-last-column-which-can-expand-and-collapse.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\n= IIf(Parameters.paramMerged.Value = \"True\", 5, 120)\n```\n\n----------------------------------------\n\nTITLE: Obsolete CancelRendering Method in WinForms Report Viewer\nDESCRIPTION: The CancelRendering method taking an integer parameter is now obsolete in the WinForms Report Viewer. Use the parameterless CancelRendering method instead.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2015/q3-2015-sp1.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Obsolete method\nreportViewer.CancelRendering(int);\n\n// New method to use\nreportViewer.CancelRendering();\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Table Column Widths\nDESCRIPTION: CSS styling to configure specific column widths in a documentation table. Sets first column to 35% width and third column to 50% width.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntable th:first-of-type {\n\twidth: 35%;\n}\ntable th:nth-of-type(3) {\n\twidth: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BookmarkId Property in C#\nDESCRIPTION: Example of setting the BookmarkId property on a report item or group. This property is used to define a unique identifier for creating bookmarks in the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/bookmarks.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nreportItem.BookmarkId = \"UniqueBookmarkIdentifier\";\n```\n\n----------------------------------------\n\nTITLE: HTML Decoding with HtmlDecode Function in C#\nDESCRIPTION: Demonstrates the use of HtmlDecode function to convert an HTML-encoded string back to its original form, decoding the ampersand entity.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/text-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n=HtmlDecode(\"&amp;Telerik\")\n```\n\n----------------------------------------\n\nTITLE: Adding UseWindowsForms Property to WPF Project File for .NET 9\nDESCRIPTION: This code snippet shows how to modify a WPF project file (.csproj) to include the UseWindowsForms property set to true. This ensures that the System.Windows.Forms dependencies are correctly referenced, allowing the Telerik ReportViewer to initialize without errors on its first load.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resolve-system-windows-forms-assembly-error-telerik-reportviewer-wpf-net9.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <UseWindowsForms>true</UseWindowsForms>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling NotSupportedException in .NET for Telerik Reporting\nDESCRIPTION: This code snippet shows the error stack trace for a NotSupportedException when using ZipWrappingStream in Telerik Reporting. The error arises from referencing a .NET Framework-specific Telerik.Reporting.dll in a .NET Core project. The trace provides insights into resolving serialization issues by aligning the assembly references with the correct .NET version.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/seeking-is-not-supported-in-a-zipwrappingstream.md#2025-04-21_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\nUnhandled exception. System.NotSupportedException: Seeking is not supported in a System.IO.Packaging.ZipWrappingStream\n\tat Telerik.Reporting.Utils.StreamExtensions.ToArray(Stream input)\n\tat Telerik.Reporting.ReportSerialization.Current.ImageContainerHelper.ResolveValue(String image, IResourceHandler handler)\n\tat Telerik.Reporting.ReportSerialization.Current.ImageContainerHelper.GetDeserializedValue(IImageContainerSerializable source, IResourceHandler handler)\n\tat Telerik.Reporting.ReportSerialization.Current.PictureBoxSurrogate.GetDeserializedObject(PictureBoxSerializable surrogate, IResourceHandler handler)\n\tat Telerik.Reporting.ReportSerialization.SerializationSurrogate`2.Telerik.Reporting.Serialization.ISerializationSurrogate.GetDeserializedObject(Object o, IResourceHandler handler)\n\tat Telerik.Reporting.Serialization.SurrogateSelectorHierarchy.GetDeserializedObject(Object o, IResourceHandler handler)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadObject(Type type)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadXmlElement(String name)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadCollection(Object collection)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadProperties(Object obj)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadObject(Type type)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadXmlElement(String name)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadCollection(Object collection)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadProperties(Object obj)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadObject(Type type)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadXmlElement(String name)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadCollection(Object collection)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadProperties(Object obj)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadObject(Type type)\n\tat Telerik.Reporting.Serialization.ObjectReader.ReadXmlElement(String name)\n\tat Telerik.Reporting.XmlSerialization.XmlSerializerBase.Deserialize(Stream stream, IResourceHandler resourceHandler)\n\tat Telerik.Reporting.XmlSerialization.ReportXmlSerializer.Telerik.Reporting.ReportSerialization.IXmlSerializer.Deserialize(Stream stream, IResourceHandler resourceHandler)\n\tat Telerik.Reporting.ReportPackager.UnpackageDocument(Stream packageStream)\n```\n\n----------------------------------------\n\nTITLE: Binding Method Parameters to EntityDataSource in C# and VB.NET\nDESCRIPTION: This code demonstrates how to call a context method by specifying its name and defining parameters that match the method's signature. The parameters' names and types must match exactly the method arguments.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/using-parameters-with-the-entitydatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nEntityDataSource entityDataSource = new EntityDataSource();\n{\n    entityDataSource.ConnectionString = \"name=AdventureWorksEntities\";\n    entityDataSource.EntitySetName = string.Empty;\n    entityDataSource.ContextMember = \"GetOrdersByStatusAndDate\";\n\n    entityDataSource.Parameters.Add(new Parameter(\"status\", typeof(byte), 5));\n    entityDataSource.Parameters.Add(new Parameter(\"orderDate\", typeof(DateTime), new DateTime(2005, 7, 1)));\n};\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim entityDataSource As New EntityDataSource()\nWith entityDataSource\n    .ConnectionString = \"name=AdventureWorksEntities\"\n    .EntitySetName = String.Empty\n    .ContextMember = \"GetOrdersByStatusAndDate\"\n\n    .Parameters.Add(New Parameter(\"status\", GetType(Byte), 5))\n    .Parameters.Add(New Parameter(\"orderDate\", GetType(DateTime), New DateTime(2005, 7, 1)))\nEnd With\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Bubble Chart Data Source\nDESCRIPTION: SQL query to retrieve sales data for creating a Bubble chart, filtering by year and city, joining multiple tables from AdventureWorks database\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/scatter.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\t[Person].[Contact].[FirstName] + ' ' + [Person].[Contact].[LastName] AS 'SalesPersonName',\n\t[Sales].[SalesOrderHeader].[OrderDate],\n\t[Sales].[SalesOrderHeader].[SubTotal]\nFROM\n\t[Person].[Address] INNER JOIN\n\t[Sales].[SalesOrderHeader] ON [Person].[Address].[AddressID] = [Sales].[SalesOrderHeader].[BillToAddressID] AND \n\t\t[Person].[Address].[AddressID] = [Sales].[SalesOrderHeader].[ShipToAddressID] INNER JOIN\n\t[Person].[Contact] ON [Sales].[SalesOrderHeader].[ContactID] = [Person].[Contact].[ContactID] \nWHERE\n\tYEAR([Sales].[SalesOrderHeader].[OrderDate]) IN (2003, 2004) AND\n\t[Person].[Address].[City] = 'Toronto'\n```\n\n----------------------------------------\n\nTITLE: Binding Parameters to Report Parameters\nDESCRIPTION: Demonstrates how to link data source parameters to report parameters using expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/using-parameters-with-the-openaccessdatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nParameter parameter = new Parameter();\nparameter.Name = \"companyName\";\nparameter.Type = typeof(string);\nparameter.Value = \"= Parameters.CompanyName.Value\";\ndataSource.Parameters.Add(parameter);\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim parameter As New Parameter()\nparameter.Name = \"companyName\"\nparameter.Type = GetType(String)\nparameter.Value = \"= Parameters.CompanyName.Value\"\ndataSource.Parameters.Add(parameter)\n```\n\n----------------------------------------\n\nTITLE: Accessing ShapeMapSeries Virtual Fields\nDESCRIPTION: Examples of virtual fields automatically generated by the processing engine when using ShapeMapSeries with ShapeFile data sources. These fields provide access to the coordinates of data point centroids for use in expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/structure/layers.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nLocation.Latitude\n```\n\nLANGUAGE: csharp\nCODE:\n```\nLocation.Longitude\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI SASS-Based Themes to HTML\nDESCRIPTION: This snippet demonstrates how to add Kendo UI SASS-Based Themes to the `head` element of the HTML page, which is necessary for styling the Blazor Report Viewer.  The Razor syntax requires escaping the __@__ symbol using __@@__ in server applications.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/how-to-use-blazor-report-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n````HTML\n<link rel=\"stylesheet\" href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.default-main.min.css\" />\n````\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceDictionary in XAML for WPF\nDESCRIPTION: This snippet illustrates how to incorporate multiple theme-related XAML files into a WPF application's ResourceDictionary via the App.xaml file. The example demonstrates integrating Material Design themes directly from XAML resources. This method bypasses the default Telerik theme DLL, allowing customization via local XAML files. Ensure that the theme files exist at the specified paths for proper integration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/wpf-viewer-themes-from-xaml.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Application.Resources >\n\t//....\n\t<ResourceDictionary>\n\t\t<ResourceDictionary.MergedDictionaries>\n\t\t<ResourceDictionary Source=\"Themes/Material/System.Windows.xaml\" />\n\t\t<ResourceDictionary Source=\"Themes/Material/Telerik.Windows.Controls.xaml\" />\n\t\t<ResourceDictionary Source=\"Themes/Material/Telerik.Windows.Controls.Input.xaml\" />\n\t\t<ResourceDictionary Source=\"Themes/Material/Telerik.Windows.Controls.Navigation.xaml\" />\n\t\t<ResourceDictionary Source=\"Themes/Material/Telerik.ReportViewer.Wpf.xaml\" />\n\t\t</ResourceDictionary.MergedDictionaries>\n\n\t\t// YOU MAY ADD OTHER STYLES IN THE <ResourceDictionary> TAG :\n\t\t//....\n\t</ResourceDictionary>\n\t//....\n\t</Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Adding Constructor for DbContext in C#\nDESCRIPTION: Demonstrates how to add a constructor with a connection string parameter to the DbContext class for design-time purposes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/configuring-the-database-connectivity-with-the-entitydatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npartial class AdventureWorksContext\n{\n\tpublic AdventureWorksContext(string connectionString) : base(connectionString) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NavigateToReportAction with TypeReportSource in VB.NET\nDESCRIPTION: Shows how to specify a report for NavigateToReportAction and its corresponding report parameters using TypeReportSource in VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim reportSource As New TypeReportSource()\nreportSource.TypeName = \"ReportLibrary1.InvoiceReport, ReportLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\nreportSource.Parameters.Add(New Telerik.Reporting.Parameter(\"OrderNumber\", \"SO43659\"))\nDim reportAction1 As New Telerik.Reporting.NavigateToReportAction()\ntextBox1.Action = reportAction1\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik UI Theme\nDESCRIPTION: Adding the Telerik UI for Blazor built-in theme stylesheet\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/how-to-use-native-blazor-report-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://blazor.cdn.telerik.com/blazor/{{blazoruiversion}}/kendo-theme-default/all.css\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Non-Empty Field Value Expression\nDESCRIPTION: Expression to control sub-report visibility by checking if a specific field value is not empty when data is passed from the main report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-hide-subreport-with-no-data.md#2025-04-21_snippet_2\n\nLANGUAGE: expression\nCODE:\n```\n= ReportItem.DataObject.SomeFieldValue <> \"\"\n```\n\n----------------------------------------\n\nTITLE: Using AddMilliseconds Function in Telerik Reporting\nDESCRIPTION: The `AddMilliseconds` function returns a new DateTime that adds the specified number of milliseconds to the value of the specified date. It takes a date and a number of milliseconds as input and returns a new DateTime object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_12\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=AddMilliseconds(Now(), 3333)\"\n```\n\n----------------------------------------\n\nTITLE: Updating HTML5 Report Viewer Old References\nDESCRIPTION: Original HTML and JavaScript code showing how file references were structured before Q2 2014 changes\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2014/q2-2014.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"ReportViewer/js/ReportViewer-x.x.x.x.js\" /script>\n<script src=\"ReportViewer/js/ReportViewer-x.x.x.x.min.js\" /script>\n<script src=\"ReportViewer/styles/ReportViewer-x.x.x.x.css\" /script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n      $(\"#reportViewer1\")\n       .telerik_ReportViewer({\n   ...\n              templateUrl: '/ReportViewer/templates/telerikReportViewerTemplate.html',\n           ...\n          });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Formatting with Culture using FormatWithCulture Function in C#\nDESCRIPTION: Demonstrates the use of FormatWithCulture function to format a price value using a specific culture (British English in this case) and currency format specifier.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/text-functions.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n=FormatWithCulture(\"en-GB\", \"Price: {0:C}\", Fields.Price)\n```\n\n----------------------------------------\n\nTITLE: Packaging TRDX Report Definition in Telerik Reporting with C#\nDESCRIPTION: This code snippet demonstrates how to package a predefined .TRDX (XML) report definition using the ReportPackager class in C#. It takes the path to the .TRDX file as input and creates a corresponding .TRDP package. The .TRDP package contains the XML definition and any associated resources in a compressed format.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/package-report-definition.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstring reportFilePath = @\"C:\\Reports\\MyReport.trdx\";\nstring packageFilePath = @\"C:\\Packages\\MyReport.trdp\";\n\nTelerik.Reporting.ReportPackager reportPackager = new Telerik.Reporting.ReportPackager();\nusing (FileStream packageStream = new FileStream(packageFilePath, FileMode.Create))\n{\n    reportPackager.Package(reportFilePath, packageStream);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App.config for Npgsql in .NET Framework\nDESCRIPTION: XML configuration file showing assembly binding redirects and DbProviderFactories setup for Npgsql data provider in .NET Framework applications. Includes version specifications and security tokens.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-data-providers/using-npgsql-data-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n\t<configSections>\n\t\t<section\n\t\t\t\tname=\"Telerik.Reporting\"\n\t\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\"\n\t\t\t\tallowLocation=\"true\"\n\t\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\n\t<runtime>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"Npgsql\" culture=\"neutral\" publicKeyToken=\"5d8b90d52f46fda7\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-8.0.4.0\" newVersion=\"8.0.4.0\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"Microsoft.Bcl.AsyncInterfaces\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-8.0.0.0\" newVersion=\"8.0.0.0\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Numerics.Vectors\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-4.1.4.0\" newVersion=\"4.1.4.0\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-6.0.0.0\" newVersion=\"6.0.0.0\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Buffers\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-4.0.3.0\" newVersion=\"4.0.3.0\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Threading.Tasks.Extensions\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-4.2.0.1\" newVersion=\"4.2.0.1\" />\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.ValueTuple\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-4.0.3.0\" newVersion=\"4.0.3.0\" />\n\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n\n\t<system.data>\n\t\t<DbProviderFactories>\n\t\t\t<add name=\"Npgsql Data Provider\"\n\t\t\t\tinvariant=\"Npgsql\"\n\t\t\t\tdescription=\".NET Framework Data Provider for Postgresql Server\"\n\t\t\t\ttype=\"Npgsql.NpgsqlFactory, Npgsql, Version=8.0.4.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\" />\n\t\t</DbProviderFactories>\n\t</system.data>\n<configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Server Engine Connection in WinForms Viewer\nDESCRIPTION: Shows how to connect a WinForms Report Viewer to a Report Server engine. The example creates a ReportServerConnectionInfo object with server URI, username, password, and timeout settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-construct-a-string-to-connect-to-report-engine.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nreportViewer1.ReportEngineConnection = new ReportServerConnectionInfo()\n{\n    Uri = new Uri(\"http://localhost:83\"),\n    Username = \"admin\",\n    Password = \"pass\",\n    Timeout = 30,\n    KeepClientAlive = true\n};\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nReportViewer1.ReportEngineConnection = New ReportServerConnectionInfo() With {\n    .Uri = New Uri(\"http://localhost:83\"),\n    .Username = \"admin\",\n    .Password = \"pass\",\n    .Timeout = 30,\n    .KeepClientAlive = True\n}\n```\n\n----------------------------------------\n\nTITLE: Handling renderingEnd Event in HTML5 Report Viewer Initialization (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a Telerik HTML5 Report Viewer and attach a handler for the renderingEnd event. The event handler logs information about the rendered report, including its readiness, page count, document map availability, and bookmark nodes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/renderingend(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\trenderingEnd: function(e, args) {\n\t\t\tconsole.log(\"This event handler will be called after rendering the report.\");\n\t\t\tconsole.log(\"The rendered report is \" + (args.documentReady ? \"\" : \"not\") + \" ready.\");\n\t\t\tconsole.log(\"The rendered report has \" + args.pageCount + \" pages.\");\n\t\t\tconsole.log(\"The rendered report \" + (args.documentMapAvailable ? \"has\" : \"does not have\") + \" document map.\");\n\t\t\tconsole.log(\"The rendered report has \" + args.bookmarkNodes.length + \" nodes\");\n\t\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings using Array Format in JSON Configuration\nDESCRIPTION: Example of adding connection strings using array notation in appSettings.json. This format supports multiple connection strings with their names and providers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-6-with-minimal-api.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"ConnectionStrings\": [\n\t\t{\n\t\t\t\"name\": \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\",\n\t\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Expression Definition with Whitespace\nDESCRIPTION: This snippet shows an incorrect way of defining an expression in Telerik Reporting. Expressions cannot begin with whitespace, as it will be interpreted as a hardcoded string instead of an expression.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n =Fields.Data\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Connection String in JSON for ASP.NET Core\nDESCRIPTION: This JSON snippet shows how to add a connection string for a SQL DataSource in the appsettings.json file. It includes the connection string name, the actual connection string, and the provider name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-web-report-designer-in-net-core-mvc.md#2025-04-21_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"ConnectionStrings\": [\n\t{\n\t\t\"name\": \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\",\n\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\"providerName\": \"System.Data.SqlClient\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Using PageCount Function with PageExec in Telerik Reporting (C#)\nDESCRIPTION: Demonstrates an alternative way to use the PageCount function by passing a PageExec function as a parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/page-functions.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n= PageCount(PageExec(\"group1\", Fields.GroupName))\n```\n\n----------------------------------------\n\nTITLE: Ignoring Anti-Forgery Token for ReportsController\nDESCRIPTION: This snippet demonstrates how to add the IgnoreAntiforgeryToken attribute to the ReportsController to bypass anti-forgery token validation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/anti-forgery-token-issue-in-asp-net-core-application.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[Route(\"api/reports\")]\n[IgnoreAntiforgeryToken]\npublic class ReportsController : ReportsControllerBase\n{\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Storage Dependencies Version Requirements\nDESCRIPTION: Version requirements for Redis storage implementation in different .NET frameworks\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q3.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStackExchange.Redis.StrongName version 1.0.320 or greater for .NET Framework 4.6.2\nStackExchange.Redis version 2.6.122 or greater for .NET Framework 4.6.2+ or .NET 6+\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response for Successful Document Sending\nDESCRIPTION: Example of a successful HTTP response when a document is successfully sent as an email attachment. The response includes a 200 OK status code.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/send-document.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n```\n\n----------------------------------------\n\nTITLE: XML Schema Version for TRDX Files\nDESCRIPTION: The XML schema version used in TRDX files created by the Standalone Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2015/q2-2015.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2012/3.8\n```\n\n----------------------------------------\n\nTITLE: Using Memory-Optimized Tables in SQL Stored Procedures\nDESCRIPTION: This snippet illustrates the use of memory-optimized tables in a SQL stored procedure. Using the MEMORY_OPTIMIZED table option allows for efficient schema retrieval without needing the deprecated FMTONLY setting, applicable to SQL Server 2016 and later.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-temporary-tables-in-stored-procedure.md#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nUSE AdventureWorks\nGO\nCREATE TYPE MemoryOptTabVar as TABLE (\n   [ProductID] integer NOT NULL ,\n   [Name] nvarchar(50) NULL,\n   INDEX IX_MemoryOptTabVar_ID NONCLUSTERED ([ProductID])\n) WITH (MEMORY_OPTIMIZED = ON)\nGO\n \nCREATE PROCEDURE dbo.MemoryOptTableVarExample\nAS\nBEGIN\nSET NOCOUNT ON;\n    DECLARE @MemOptVarTab MemoryOptTabVar ;\n       INSERT @MemOptVarTab ([ProductID], [Name])\n    SELECT\n        p.[ProductID], p.[Name]\n    FROM Production.Product AS p\n       SELECT * FROM @MemOptVarTab\nEND\nGO\n```\n\n----------------------------------------\n\nTITLE: Configuring ADO.NET Cache Provider in XML for Telerik Reporting\nDESCRIPTION: XML configuration for the ADO.NET cache provider. This provider requires provider name and connection string parameters to store rendered pages and resources using ADO.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t…\n\t<Telerik.Reporting>\n\t\t<cache provider=\"ADO.NET\">\n\t\t\t<providers>\n\t\t\t\t<provider name=\"ADONETProviderName\">\n\t\t\t\t\t<parameters>\n\t\t\t\t\t\t<parameter name=\"ProviderName\" value=\"ADONETProviderProviderName\" />\n\t\t\t\t\t\t<parameter name=\"ConnectionString\" value=\"ADONETProviderConnectionString\" />\n\t\t\t\t\t</parameters>\n\t\t\t\t</provider>\n\t\t\t</providers>\n\t\t</cache>\n\t</Telerik.Reporting>\n\t…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Using AddMinutes Function in Telerik Reporting\nDESCRIPTION: The `AddMinutes` function returns a new DateTime that adds the specified number of minutes to the value of the specified date. It takes a date and a number of minutes as input and returns a new DateTime object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_10\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=AddMinutes(Now(), 3)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Report Viewer with Parameters in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Telerik Report Viewer and pass parameters to the report source, allowing changes to the PageSettings such as Landscape orientation. The report viewer's service URL and the report source details are specified, including the parameters to modify report properties at runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/change-page-settings-from-the-client-side.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n\t.telerik_ReportViewer({\n\t\tserviceUrl: \"/api/reports\",\n\t\treportSource: {                      \n\t\t\treport: \"SampleReport.trdp\",\n\t\t\tparameters: { Landscape: true }\n\t\t}\n\t\t...\n\t});\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Telerik Reporting SqlDataSource in VB.NET\nDESCRIPTION: Code snippet demonstrating how to create a custom component by inheriting from Telerik.Reporting.SqlDataSource in VB.NET. This enables reuse of a configured data source across multiple reports.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/reuse-data-source-components-across-reports.md#2025-04-21_snippet_1\n\nLANGUAGE: VB\nCODE:\n```\nPartial Class Component1\n\tInherits Telerik.Reporting.SqlDataSource\n```\n\n----------------------------------------\n\nTITLE: Documentation YAML Front Matter Example\nDESCRIPTION: Example of the YAML front matter used at the top of documentation files for the auto-import tool\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Introduction\npage_title: Introduction\ndescription: Introduction\nslug: introduction\ntags: introduction\npublished: True\nposition: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Closing Multi-Select Parameter Editor on Selection in HTML5 Report Viewer\nDESCRIPTION: This code snippet demonstrates how to modify the behavior of the multi-select parameter editor in the Telerik HTML5 Report Viewer. It uses the renderingEnd event of the report viewer to bind a custom change event handler to the Kendo UI MultiSelect widget, which closes the dropdown list after each selection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/close-multi-select-parameter-editor-on-each-selection-html5-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n    .telerik_ReportViewer({\n    ....\n        renderingEnd: function () {\n            var multiselect = $(\".k-widget .k-multiselect .trv-combo\").data(\"kendoMultiSelect\");\n            multiselect.bind(\"change\", function () {\n                if (!multiselect.open()) { multiselect.toggle() };\n            });\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Updating Pages Area Margin Function Definition - JavaScript\nDESCRIPTION: This function updates the margin of the pages area based on a condition, allowing for responsive resizing of the report viewer content.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resize-the-html5-report-viewer-to-accommodate-its-content.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updatePagesAreaMargin(condition, marginType) {\n    if (condition) {\n        $(\".trv-pages-area\").css(marginType, \"15em\");\n    }\n    else {\n        $(\".trv-pages-area\").css(marginType, \"0em\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Runtime Error Message in ASP.NET Web Forms Report Viewer\nDESCRIPTION: This error message appears when testing a Web Application with the ASP.NET Web Forms Report Viewer in Visual Studio 2013+. It's caused by BrowserLink intersecting AJAX calls in Ajaxified Web applications.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/javascript-runtime-error-sys.webforms-pagerequestmanagerservererrorexception.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n0x800a139e - JavaScript runtime error: Sys.WebForms.PageRequestManagerServerErrorException: Value cannot be null.\n```\n\n----------------------------------------\n\nTITLE: Resetting Visual Studio Toolbox - Removing .tbd files\nDESCRIPTION: Removes the .tbd files from the specified Visual Studio instance folder in the local app data. These files are temporary files related to the toolbox and removing them can help resolve issues.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n\"%localappdata%\\Microsoft\\VisualStudio\\16.0_[InstanceID]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Binding Redirect for Newtonsoft.Json in XML\nDESCRIPTION: This XML snippet provides the configuration required to redirect the binding of the Newtonsoft.Json library to a new version. It is necessary when upgrading to Telerik Reporting R2 2018 or higher to ensure compatibility with version 9.0.1 or newer of Newtonsoft.Json. The snippet should be modified to include the specific version number of Newtonsoft.Json being used.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-after-update-to-R2-2018-due-to-old-newtonsoft-json-version.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n  .....\n  <runtime>\n    .....\n      <dependentAssembly>\n        <assemblyIdentity name=\"Newtonsoft.Json\" culture=\"neutral\" publicKeyToken=\"30ad4fe6b2a6aeed\" />\n        <bindingRedirect oldVersion=\"0.0.0.0-X.X.X.X\" newVersion=\"X.X.X.X\" />\n      </dependentAssembly>\t  \n  .....\n    </assemblyBinding>\n  </runtime>\n  .....  \n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting NoDataMessage in Telerik Reporting\nDESCRIPTION: Steps to set the NoDataMessage property for a data item or PictureBox item in Telerik Reporting. This includes selecting the item, accessing the Properties Browser, and setting the NoDataMessage and NoDataStyle properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/how-to-set-a-no-data-message.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Click the data item on the design surface to select it. The __Properties Browser__ displays the properties for the selected item.\n2. In the __Properties Browser__ , expand the __No Data__ node.\n3. Set the __NoDataMessage__ property to the text you want to display. Alternatively, click the Edit(…) button to open the [Edit Expression Dialog]({%slug telerikreporting/designing-reports/report-designer-tools/desktop-designers/tools/edit-expression-dialog%}) and create an expression.\n4. Optionally to style the no data message, click the __NoDataStyle__ Edit(…) button and set the style properties according to your requirements.\n```\n\n----------------------------------------\n\nTITLE: Configuring ObjectDataSource Connection\nDESCRIPTION: Shows how to connect ObjectDataSource to the custom business object for data retrieval.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/maintaining-the-lifecycle-of-the-openaccesscontext-with-the-openaccessdatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.ObjectDataSource objectDataSource = new Telerik.Reporting.ObjectDataSource();\nobjectDataSource.DataSource = typeof(AdventureWorksBO);\nobjectDataSource.DataMember = \"GetProducts\";\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim objectDataSource As New Telerik.Reporting.ObjectDataSource()\nobjectDataSource.DataSource = GetType(AdventureWorksBO)\nobjectDataSource.DataMember = \"GetProducts\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF417 Barcode Settings in Telerik Reporting with C#\nDESCRIPTION: This code snippet demonstrates how to configure various settings of a PDF417 barcode in Telerik Reporting using C#. It initializes a Barcode object, sets the Symbology to PDF417, and then configures properties such as EncodingMode, ErrorCorrectionLevel, Rows, and Columns.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/barcode/2d-barcodes/pdf417.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n \"// Sets the PDF417 settings of the Barcode report item.\nBarcode barcode = new Barcode();\nbarcode.Symbology = BarcodeSymbology.PDF417;\nbarcode.PDF417.EncodingMode = PDF417EncodingMode.Byte;\nbarcode.PDF417.ErrorCorrectionLevel = 8;\nbarcode.PDF417.Rows = 5;\nbarcode.PDF417.Columns = 10;\"\n```\n\n----------------------------------------\n\nTITLE: Logging into npm for Telerik Package Installation - PowerShell\nDESCRIPTION: This snippet shows the command to login to npm registry with appropriate scope for installing the Telerik packages.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-report-server.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nnpm login --registry=https://registry.npmjs.org --scope=@progress\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for ReportService\nDESCRIPTION: This XML configuration snippet provides an example of how to configure the REST Report Service with necessary parameters such as connection string and command timeout. It requires proper XML structure under the Telerik.Reporting node.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-storage/how-to-configure-an-mssql-database-storage.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t\t\t\t...\n\t\t\t\t\t<Telerik.Reporting>\n\t\t\t\t\t\t<restReportService hostAppId=\"Application1\" workerCount=\"4\" reportSharingTimeout=\"10\" clientSessionTimeout=\"10\" exceptionsVerbosity=\"detailed\">\n\t\t\t\t\t\t\t<reportResolver provider=\"type\" />\n\t\t\t\t\t\t\t<storage provider=\"MSSQLServer\">\n\t\t\t\t\t\t\t\t<parameters>\n\t\t\t\t\t\t\t\t\t<parameter name=\"connectionString\" value=\"Data Source=(local)\\SQLEXPRESS;Initial Catalog=RestServiceStorage;Integrated Security=SSPI\" />\n\t\t\t\t\t\t\t\t\t<parameter name=\"commandTimeout\" value=\"60\" />\n\t\t\t\t\t\t\t\t</parameters>\n\t\t\t\t\t\t\t</storage>\n\t\t\t\t\t\t...\n\t\t\t\t\t\t</restReportService>\n\t\t\t\t\t...\n\t\t\t\t\t</Telerik.Reporting>\n\t\t\t\t...\n\t\t\t</configuration>\n```\n\n----------------------------------------\n\nTITLE: Making an HTTP PUT Request to Apply Interactive Action on Document\nDESCRIPTION: HTTP request for applying an interactive action on a document. This request uses path parameters including clientId, instanceId, documentId, and actionId to identify the specific document and action to apply.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/apply-interactive-action-on-document.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/reports/clients/{clientId}/instances/{instanceId}/documents/{documentId}/actions/{actionId}\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Theme References\nDESCRIPTION: This snippet demonstrates how to include Kendo UI theme styles in the Angular application by adding links in the index.html file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- The required Less-based styles -->\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Resource File Naming Convention for Report Viewer Localization\nDESCRIPTION: Demonstrates the standard naming convention for localization resource files used by the Telerik Report Viewer, following a hierarchical culture-based approach for loading localized resources.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/report-viewer-localization.md#2025-04-21_snippet_0\n\nLANGUAGE: resx\nCODE:\n```\nTelerik.ReportViewer.WebForms.Resources.[culture].resx\n```\n\nLANGUAGE: resx\nCODE:\n```\nTelerik.ReportViewer.WebForms.Resources.fr-BE.resx\n```\n\nLANGUAGE: resx\nCODE:\n```\nTelerik.ReportViewer.WebForms.Resources.fr.resx\n```\n\nLANGUAGE: resx\nCODE:\n```\nTelerik.ReportViewer.WebForms.Resources.resx\n```\n\n----------------------------------------\n\nTITLE: Adding Report Sorting Programmatically - C#\nDESCRIPTION: Code example showing how to programmatically add sorting to a Telerik Report using SortingCollection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/ordering-data/how-to-add-sorting-to-report.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSorting sorting = new Sorting();\nsorting.Expression = \"=Fields.CategoryName\";\nsorting.Direction = SortDirection.Asc;\nreport.Sortings.Add(sorting);\n```\n\n----------------------------------------\n\nTITLE: API Changes in C# Property Types\nDESCRIPTION: Updates to property types in Telerik Reporting API, changing from interface types to concrete implementations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2019/r3-2019.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.GraphSeriesBase.ToolTip // Changed from IToolTip to ToolTip\nTelerik.Reporting.ReportItemBase.ToolTip // Changed from IToolTip to ToolTip\nTelerik.Reporting.Report.ExternalStyleSheets // Changed from ICollection<ExternalStyleSheet> to ExternalStyleSheetCollection\nTelerik.Reporting.IToolTip // Now internal\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Embedded Expressions in Telerik Reporting\nDESCRIPTION: This snippet shows how to embed expressions within a string literal using curly brackets. The expressions will be evaluated and replaced with their results at runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/using-expressions/embedded-expressions.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHi Mr. {Fields.LastName}, {Fields.FirstName}!\n```\n\n----------------------------------------\n\nTITLE: Converting String to Guid in VB.NET for Telerik Reporting Parameters\nDESCRIPTION: User function in VB.NET that converts a string representation of a GUID to a Guid object. This function is used to set values for DataSourceParameter from a string-type ReportParameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-a-guid-as-value-for-report-parameter-or-data-source-parameter.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Shared Function ConvertToGuid(guid As String) As Guid\n    Return New Guid(guid)\nEnd Function\n```\n\n----------------------------------------\n\nTITLE: Adding Reports to ReportBook Post-R1 2017\nDESCRIPTION: Shows the current recommended approach for adding reports to ReportBook using TypeReportSource objects after R1 2017 release. This method supports integration with Standalone Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-reportsource-objects-with-reportbook.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.ReportBook reportBook = new ReportBook();\nTelerik.Reporting.TypeReportSource typeReportSource = new TypeReportSource();\ntypeReportSource.TypeName = typeof(Report1).AssemblyQualifiedName;\nreportBook.ReportSources.Add(typeReportSource);\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim reportBook As Telerik.Reporting.ReportBook = New ReportBook()\nDim typeReportSource As Telerik.Reporting.TypeReportSource = New TypeReportSource()\ntypeReportSource.TypeName = GetType(Report1).AssemblyQualifiedName\nreportBook.ReportSources.Add(typeReportSource)\n```\n\n----------------------------------------\n\nTITLE: Hiding Print Dialog in VB.NET for Telerik Reporting\nDESCRIPTION: This VB.NET code snippet shows how to hide the print progress dialog when printing a report programmatically using Telerik Reporting. It uses a StandardPrintController and custom printer settings to prevent the UI from appearing during batch printing or when printing from a service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-hide-print-dialog.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim reportName = \"ReportCatalog, VB.ReportLibrary\"\n\n' Obtain the settings of the default printer\nDim printerSettings As New System.Drawing.Printing.PrinterSettings\n\n' The standard print controller comes with no UI\nDim standardPrintController As New System.Drawing.Printing.StandardPrintController\n\n' Create a report source to pass the report to the report processor\nDim typeReportSource As New Telerik.Reporting.TypeReportSource()\n\n' reportName is the Assembly Qualified Name of the report\ntypeReportSource.TypeName = reportName\n\n' Print the report using the custom print controller\nDim reportProcessor As New Telerik.Reporting.Processing.ReportProcessor\nreportProcessor.PrintController = standardPrintController\nreportProcessor.PrintReport(typeReportSource, printerSettings)\n```\n\n----------------------------------------\n\nTITLE: Using Expression to Handle NULL Values for SqlDataSource Parameter in Telerik Reporting\nDESCRIPTION: This expression can be used when setting the value of a SqlDataSource parameter. It passes a hard-coded default value when the report parameter 'grade' is NULL.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-deal-with-stored-procedure-optional-parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n= Parameters.grade.Value ?? 9\n```\n\n----------------------------------------\n\nTITLE: First Page Conditional Expression\nDESCRIPTION: Conditional expression to determine if the current page is the first page of a group based on the index value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/two-lists-show-details-in-parallel.md#2025-04-21_snippet_2\n\nLANGUAGE: Expression\nCODE:\n```\n= First(Fields.Index) = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Mappings for CubeDataSource\nDESCRIPTION: C# and VB.NET code showing how to set up field mappings to create aliases for MDX query fields in expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/selecting-data-from-an-olap-cube-with-the-cubedatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\CubeDataSourceSnippets.cs region=FieldMappingSnippet}}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\CubeDataSourceSnippets.vb region=FieldMappingSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Adding interop.js Dependency to HTML\nDESCRIPTION: This snippet shows how to add the `interop.js` dependency at the end of the `body` element.  The correct `interop.js` file depends on whether the `Telerik.ReportViewer.Blazor` or `Telerik.ReportViewer.Blazor.Trial` package is being used.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/how-to-use-blazor-report-viewer.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n````HTML\n<script src=\"_content/Telerik.ReportViewer.Blazor/interop.js\" defer></script>\n\t@* Or this one if using the Telerik.ReportViewer.Blazor.Trial package *@\n\t@*<script src=\"_content/Telerik.ReportViewer.Blazor.Trial/interop.js\" defer></script>*@\n````\n```\n\n----------------------------------------\n\nTITLE: Displaying a Parameter Value in a TextBox - C#\nDESCRIPTION: This snippet demonstrates how to assign an expression to a TextBox to display the value of a report parameter named 'VendorSelect'. This is useful for showing dynamic data within a report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/using-report-parameters-in-expressions.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n=Parameters.VendorSelect\n```\n\n----------------------------------------\n\nTITLE: Initial XML Report Definition with Table Structure\nDESCRIPTION: Base XML template for a Telerik report containing a table with style rules, page header, detail section, and page footer. The table includes a single column that will be used as a template for dynamic column generation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-modify-table-with-preset-styles-and-width-dynamically.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Report Width=\"4.39999993642171in\" Name=\"BlankReport\" xmlns=\"http://schemas.telerik.com/reporting/2017/3.0\">\n\t<Items>\n\t\t<PageHeaderSection Height=\"0.5in\" Name=\"pageHeaderSection1\">\n\t\t\t<Style BackgroundColor=\"128, 255, 128\" />\n\t\t\t<Items>\n\t\t\t\t<TextBox Width=\"3.50000071525574in\" Height=\"0.19999997317791in\" Left=\"0.449999650319417in\" Top=\"0.150000015894572in\" Value=\"PAGE HEADER\" Name=\"textBox4\">\n\t\t\t\t\t<Style TextAlign=\"Center\" VerticalAlign=\"Middle\" />\n\t\t\t\t</TextBox>\n\t\t\t</Items>\n\t\t</PageHeaderSection>\n\t\t<!-- ... rest of XML structure ... -->\n\t</Report>\n```\n\n----------------------------------------\n\nTITLE: Registering ExpandoObject Type in C# Application Main Method\nDESCRIPTION: This code snippet shows how to register the ExpandoObject type in the application's Main method, which is part of the workaround for using multiple ExpandoObjects with different properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-objectdatasource-with-expandoobject.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nTypeDescriptor.AddProvider(new ExpandoObjectTypeDescriptionProvider(), typeof(ExpandoObject));\n```\n\n----------------------------------------\n\nTITLE: Referencing Blazor Report Viewer Interop.js in HTML\nDESCRIPTION: This snippet shows how to correctly reference the interop.js file for the Blazor Report Viewer. It should be placed at the end of the body element in Pages/_Host.cshtml (Blazor Server) or wwwroot/index.html (Blazor WebAssembly).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/could-not-find-telerik-report-viewer-interop.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"_content/Telerik.ReportViewer.Blazor/interop.js\" defer /script>\n@* Or this one if using the Telerik.ReportViewer.Blazor.Trial package *@\n@*<script src=\"_content/Telerik.ReportViewer.Blazor.Trial/interop.js\" defer /script>*@\n```\n\n----------------------------------------\n\nTITLE: Custom Report Source Resolver Implementation in C#\nDESCRIPTION: This C# code snippet demonstrates a custom report source resolver implementation that accesses user information from the HttpContext. It resolves a report source based on a given report ID and operation origin. The resolver retrieves user-specific data using `UserIdentity.Current`, queries a database context, and updates the report's connection string using `ReportConnectionStringManager`.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/getauthenticationstateasync-was-called-before-setauthenticationstate.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n````C#\npublic class CustomReportSourceResolver : IReportSourceResolver\n{\n      public Telerik.Reporting.ReportSource Resolve(string reportId, OperationOrigin operationOrigin, IDictionary<string, object> currentParameterValues)\n\t{\n\t\t var userClass = new ServiceClass(UserIdentity.Current);\n\t if (!string.IsNullOrEmpty(report))\n\t {\n\t     using var context = new DataContext(userClass);\n\t     report = (from table in context.Reports where table.Name == report select table.Definition).First();\n\t }\n\t ReportSource updatedReport;\n\t if (string.IsNullOrEmpty(report))\n\t {\n\t     throw new System.Exception(\"Unable to load a report with the specified ID: \" + report);\n\n\t }\n\t else\n\t {\n\t     XmlReportSource retreivedReport = new Telerik.Reporting.XmlReportSource { Xml = report };\n\t     var conStrMan = new ReportConnectionStringManager(userClass);\n\t     updatedReport = conStrMan.UpdateReportSource(retreivedReport);\n\t }\n\n\t return updatedReport;\n\t}\n}\n````\n```\n\n----------------------------------------\n\nTITLE: Setting Area Series Properties for Plot Bands in Telerik Reporting Graph\nDESCRIPTION: This snippet shows how to set the X, Y, and Y0 properties of area series to create plot bands in a Telerik Reporting Graph. The X property is set to the column number minus one, while Y and Y0 properties define the span of each area on the Y axis.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-plot-bands-using-the-graph-item.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Set X property for area series\n_=ColumnNumber('graph1')-1_\n\n// Set Y and Y0 properties for first area series\nY = 0\nY0 = 50\n\n// Set Y and Y0 properties for second area series\nY = 50\nY0 = 75\n\n// Set Y and Y0 properties for third area series\nY = 75\nY0 = 100\n```\n\n----------------------------------------\n\nTITLE: Size and Location Binding Expression\nDESCRIPTION: Example demonstrating the new binding expression format for Size and Location properties using InvariantCulture list separator\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2016/r3-2016.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n=\"2cm, 1cm\"\n```\n\n----------------------------------------\n\nTITLE: Accessing User Configuration File Path in Windows\nDESCRIPTION: File path location for the Telerik Report Designer user configuration file that stores recent folders and other settings. The path includes a version-specific folder and strong name key.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/change-recent-folders-listed-in-the-standalone-report-designer-open-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n%LocalAppData%\\Progress_Software_Corpora\\Telerik.ReportDesigner.ex_StrongName_xvg2ahozm2u22wxtsw2egsvlddrzt5hj\\[TELERIK_REPORTING_VERSION]\\user.config\n```\n\n----------------------------------------\n\nTITLE: Managing Report Connection Strings with Telerik Reporting REST Service in VB\nDESCRIPTION: The VB snippet implements a similar functionality to the C# equivalent, providing a class `ReportConnectionStringManager` that facilitates the dynamic updating of connection strings in Telerik Reporting. It processes various report sources including UriReportSource, XmlReportSource, InstanceReportSource, and TypeReportSource. The class features methods to validate, unpackage, deserialize, and set connection strings across report structures while ensuring nested reports like SubReports are also updated. It relies on Telerik Reporting libraries and basic IO and XML handling functions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/navigate-to-report-not-working-when-custom-report-resolver-changes-connectionstring-dynamically.md#2025-04-21_snippet_1\n\nLANGUAGE: VB\nCODE:\n```\nImports Telerik.Reporting\n  \nClass ReportConnectionStringManager\n\tReadOnly connectionString As String\n\t\n\tPublic Sub New(connectionString As String)\n\t\tMe.connectionString = connectionString\n\tEnd Sub\n\t\n\tPublic Function UpdateReportSource(sourceReportSource As ReportSource) As ReportSource\n\t\tIf TypeOf sourceReportSource Is UriReportSource Then\n\t\t\tDim uriReportSource = DirectCast(sourceReportSource, UriReportSource)\n\t\t\t' unpackage TRDP report\n\t\t\tDim reportInstance = UnpackageReport(uriReportSource)\n\t\t\t' or deserialize TRDX report(legacy format)\n\t\t\t' var reportInstance = DeserializeReport(uriReportSource);\n\t\t\tValidateReportSource(uriReportSource.Uri)\n\t\t\tMe.SetConnectionString(reportInstance)\n\t\t\tReturn CreateInstanceReportSource(reportInstance, uriReportSource)\n\t\tEnd If\n\t\n\t\tIf TypeOf sourceReportSource Is XmlReportSource Then\n\t\t\tDim xml = DirectCast(sourceReportSource, XmlReportSource)\n\t\t\tValidateReportSource(xml.Xml)\n\t\t\tDim reportInstance = Me.DeserializeReport(xml)\n\t\t\tMe.SetConnectionString(reportInstance)\n\t\t\tReturn CreateInstanceReportSource(reportInstance, xml)\n\t\tEnd If\n\t\n\t\tIf TypeOf sourceReportSource Is InstanceReportSource Then\n\t\t\tDim instanceReportSource = DirectCast(sourceReportSource, InstanceReportSource)\n\t\t\tMe.SetConnectionString(DirectCast(instanceReportSource.ReportDocument, ReportItemBase))\n\t\t\tReturn instanceReportSource\n\t\tEnd If\n\t\n\t\tIf TypeOf sourceReportSource Is TypeReportSource Then\n\t\t\tDim typeReportSource = DirectCast(sourceReportSource, TypeReportSource)\n\t\t\tDim typeName = typeReportSource.TypeName\n\t\t\tValidateReportSource(typeName)\n\t\t\tDim reportType = Type.[GetType](typeName)\n\t\t\tDim reportInstance = DirectCast(Activator.CreateInstance(reportType), Report)\n\t\t\tMe.SetConnectionString(DirectCast(reportInstance, ReportItemBase))\n\t\t\tReturn CreateInstanceReportSource(reportInstance, typeReportSource)\n\t\tEnd If\n\t\n\t\tThrow New NotImplementedException(\"Handler for the used ReportSource type is not implemented.\")\n\tEnd Function\n\t\n\tPrivate Function CreateInstanceReportSource(report As IReportDocument, originalReportSource As ReportSource) As ReportSource\n\t\tDim instanceReportSource = New InstanceReportSource() With { _\n\t\t\t.ReportDocument = report _\n\t\t}\n\t\tInstanceReportSource.Parameters.AddRange(originalReportSource.Parameters)\n\t\tReturn InstanceReportSource\n\tEnd Function\n\t\n\tPublic Sub ValidateReportSource(value As String)\n\t\tIf value.Trim().StartsWith(\"=\") Then\n\t\t\tThrow New InvalidOperationException(\"Expressions for ReportSource are not supported when changing the connection string dynamically\")\n\t\tEnd If\n\tEnd Sub\n\t\n\tPrivate Function UnpackageReport(uriReportSource As UriReportSource) As Report\n\t\tDim reportPackager = New ReportPackager()\n\t\tUsing sourceStream = System.IO.File.OpenRead(uriReportSource.Uri)\n\t\t\tDim report = DirectCast(reportPackager.UnpackageDocument(sourceStream), Report)\n\t\t\tReturn report\n\t\tEnd Using\n\tEnd Function\n\t\n\tPublic Function DeserializeReport(uriReportSource As UriReportSource) As Report\n\t\tDim settings = New System.Xml.XmlReaderSettings()\n\t\tsettings.IgnoreWhitespace = True\n\t\tUsing xmlReader = System.Xml.XmlReader.Create(uriReportSource.Uri, settings)\n\t\t\tDim xmlSerializer = New Telerik.Reporting.XmlSerialization.ReportXmlSerializer()\n\t\t\tDim report = DirectCast(xmlSerializer.Deserialize(xmlReader), Telerik.Reporting.Report)\n\t\t\tReturn report\n\t\tEnd Using\n\tEnd Function\n\t\n\tPublic Function DeserializeReport(xmlReportSource As XmlReportSource) As Report\n\t\tDim settings = New System.Xml.XmlReaderSettings()\n\t\tsettings.IgnoreWhitespace = True\n\t\tDim textReader = New System.IO.StringReader(xmlReportSource.Xml)\n\t\tUsing xmlReader = System.Xml.XmlReader.Create(textReader, settings)\n\t\t\tDim xmlSerializer = New Telerik.Reporting.XmlSerialization.ReportXmlSerializer()\n\t\t\tDim report = DirectCast(xmlSerializer.Deserialize(xmlReader), Telerik.Reporting.Report)\n\t\t\tReturn report\n\t\tEnd Using\n\tEnd Function\n\t\n\tPublic Sub SetConnectionString(reportItemBase As ReportItemBase)\n\t\tIf reportItemBase.Items.Count < 1 Then\n\t\t\tReturn\n\t\tEnd If\n\t\n\t\tIf TypeOf reportItemBase Is Report Then\n\t\t\tDim report = DirectCast(reportItemBase, Report)\n\t\n\t\t\tIf TypeOf report.DataSource Is SqlDataSource Then\n\t\t\t\tDim sqlDataSource = DirectCast(report.DataSource, SqlDataSource)\n\t\t\t\tsqlDataSource.ConnectionString = connectionString\n\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Telerik Reporting Processing Element\nDESCRIPTION: XML-based configuration demonstrating processing element setup with graphics engine, resource resolver, and shared data source resolver configurations\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/processing-element.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\\n\\t<processing cacheDefinitionProperties=\\\"false\\\">\\n\\t\\t<graphicsEngine engineName=\\\"PlatformDependent\\\">\\n\\t\\t</graphicsEngine>\\n\\n\\t\\t<resourceResolver provider=\\\"custom\\\">\\n\\t\\t\\t<parameters>\\n\\t\\t\\t\\t<parameter name=\\\"typeName\\\" value=\\\"Namespace.CustomResourceResolverClass, AssemblyName\\\" />\\n\\t\\t\\t\\t<parameter name=\\\"constructorParameter1\\\" value=\\\"constructorParameterValue1\\\" />\\n\\t\\t\\t</parameters>\\n\\t\\t</resourceResolver>\\n\\n\\t\\t<sharedResourceResolver provider=\\\"custom\\\">\\n\\t\\t\\t<parameters>\\n\\t\\t\\t\\t<parameter name=\\\"typeName\\\" value=\\\"Namespace.CustomSharedDataSourceResolverClass, AssemblyName\\\" />\\n\\t\\t\\t\\t<parameter name=\\\"constructorParameter1\\\" value=\\\"constructorParameterValue1\\\" />\\n\\t\\t\\t</parameters>\\n\\t\\t</sharedResourceResolver>\\n\\t</processing>\\n</Telerik.Reporting>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Reports to ReportBook Pre-R1 2017\nDESCRIPTION: Demonstrates the legacy method of adding reports directly to the ReportBook.Reports collection before R1 2017 release. This approach is now obsolete.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-reportsource-objects-with-reportbook.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.ReportBook reportBook = new ReportBook();\nTelerik.Reporting.Report report = new Report1();\nreportBook.Reports.Add(report);\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim reportBook As Telerik.Reporting.ReportBook = New ReportBook()\nDim report As Telerik.Reporting.Report = New Report1()\nreportBook.Reports.Add(report)\n```\n\n----------------------------------------\n\nTITLE: Binding Redirect Example for OpenXML 2.8.1.0\nDESCRIPTION: This XML configuration snippet is for setting up a binding redirect to use DocumentFormat.OpenXml version 2.8.1.0. It highlights the change in PublicKeyToken and the requirement for referencing updated Telerik Reporting OpenXmlRendering assemblies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/deploy-telerik-reporting-with-newer-openxml-sdk-version.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<runtime>\n\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"DocumentFormat.OpenXml\" publicKeyToken=\"8fb06cb64d019a17\" culture=\"neutral\" />\n\t\t\t<bindingRedirect oldVersion=\"2.7.2.0\" newVersion=\"2.8.1.0\" />\n\t\t</dependentAssembly>\n\t</assemblyBinding>\n\t</runtime>\n...\n```\n\n----------------------------------------\n\nTITLE: Conflicting Border Style and Width Settings in Telerik Reporting\nDESCRIPTION: This code snippet demonstrates a common cause of border styles not being applied correctly in Telerik Reporting. It shows conflicting values for BorderStyle and BorderWidth properties, which can produce unexpected results in some rendering formats.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/borders-style-is-not-applied.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBorderStyle: Solid\n\nBorderWidth: 0px\n```\n\n----------------------------------------\n\nTITLE: Registering Routes in ASP.NET MVC\nDESCRIPTION: This code snippet demonstrates how to register routes in an ASP.NET MVC application using the 'RegisterRoutes' method of the 'ReportsControllerConfiguration' class. It is crucial to ensure that route names are unique to prevent System.ArgumentException.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-system-argumentexception-a-route-named-x-is-already-in-the-route-collection.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nTelerik.Reporting.Services.WebApi.ReportsControllerConfiguration.RegisterRoutes(config);\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource for ASP.NET ReportViewer in VB.NET\nDESCRIPTION: This code snippet shows how to programmatically set the ReportSource for an ASP.NET ReportViewer control in the Page_Load event using VB.NET. It creates a new instance of the Report1 class and assigns it to the ReportSource property of the ReportViewer1 control.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/cannot-show-report-reportviewer.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nProtected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n    If Not IsPostBack Then\n        ReportViewer1.ReportSource = New Telerik.Reporting.Report1()\n    End If\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Loading Report in Viewer\nDESCRIPTION: This function is triggered when the report viewer is loading, allowing for custom parameters to be set based on the current report source. It customizes the report options by calling auxiliary functions to ensure proper functionality. Dependencies include jQuery and Telerik reporting components.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onViewerLoading(e, args) {\n\t// e: jQuery event;\n\t// args: IViewerPreLoadEventArgs ->\n\t//      reportViewerOptions: report viewer's options. Available options:\n\t//          reportSource: report viewer's report source.\n\t//          viewMode: report viewer's view mode.\n\t//          pageMode: report viewer's page mode.\n\tsetReportParameters(args.reportViewerOptions.reportSource);\n\tsetReportOptions(args.reportViewerOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ValueError Exception with Try-Catch in C#\nDESCRIPTION: This C# snippet demonstrates how to use a try-catch block to handle the ValueError exception when providing invalid XHTML content for the HtmlTextBox. It ensures the program can manage invalid inputs gracefully during reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/htmltextbox/xhtml-validation.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\Processing\\HtmlTextBoxSnippets.cs region=Validate_Xhtml_Using_Event_And_ValueError_Snippet}}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying DescendantSelector StyleRule in Telerik Reporting VB.NET\nDESCRIPTION: This code snippet demonstrates how to create a DescendantSelector StyleRule programmatically using VB.NET. It involves creating a StyleRule and DescendantSelector, defining selectors and types, applying formatting, and adding the rule to the StyleSheet. Dependencies include Telerik.Reporting.Drawing namespace. Key parameters include selector types and style properties such as BorderStyle and Font Name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/creating-style-rules.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\n'Create StyleRule and DescendantSelector\nDim MyStyleRule As Telerik.Reporting.Drawing.StyleRule = New Telerik.Reporting.Drawing.StyleRule\nDim MyDescendantSelector As Telerik.Reporting.Drawing.DescendantSelector = _ \nNew Telerik.Reporting.Drawing.DescendantSelector\n'Define the Selectors and Types of the DescendantSelector\nMyDescendantSelector.Selectors.AddRange(New Telerik.Reporting.Drawing.ISelector() _ \n{New Telerik.Reporting.Drawing.TypeSelector(GetType(Telerik.Reporting.ReportHeaderSection)), _  \nNew Telerik.Reporting.Drawing.TypeSelector(GetType(Telerik.Reporting.TextBox))})\n'Add the DescendantSelector to the StyleRule\nMyStyleRule.Selectors.AddRange(New Telerik.Reporting.Drawing.ISelector() {DescendantSelector1})\n'Apply formatting\nMyStyleRule.Style.BorderStyle.Default = Telerik.Reporting.Drawing.BorderType.Ridge\nMyStyleRule.Style.Color = System.Drawing.Color.Navy\nMyStyleRule.Style.Font.Name = \"Arial\"\n'Add the StyleRule to the Style Sheet\nMe.StyleSheet.AddRange(New Telerik.Reporting.Drawing.StyleRule() {MyStyleRule})\n```\n\n----------------------------------------\n\nTITLE: ConfigSection for ReportService in C#\nDESCRIPTION: This C# snippet illustrates how to utilize ConfigSectionReportServiceConfiguration for the REST Service. It allows the overriding of properties from the configuration file, ensuring the correct settings are applied.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-storage/how-to-configure-an-mssql-database-storage.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\MvcCS\\Controllers\\ReportsControllerConfigSection.cs region=ReportsControllerConfigSectionImplementation}}\n```\n\n----------------------------------------\n\nTITLE: Sample Get Document Resource Request\nDESCRIPTION: This snippet shows a sample HTTP request to retrieve a document resource. The `clientId`, `instanceId`, `documentId`, and `resourceId` are provided as path parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document-resource.md#2025-04-21_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\n\"GET /api/reports/clients/2c3d/instances/4d3c/documents/5x3a/resources/4t6d HTTP/1.1\"\n```\n\n----------------------------------------\n\nTITLE: Setting View Encapsulation for Styles\nDESCRIPTION: This snippet illustrates how to set the view encapsulation to None when using styleUrls for referencing CSS in Angular components.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewEncapsulation } from '@angular/core';\n\t\t@Component({\n\t\t\tencapsulation: ViewEncapsulation.None\n\t\t...})\n```\n\n----------------------------------------\n\nTITLE: Using ConnectionString from Configuration in C#\nDESCRIPTION: This snippet shows how to set the ConnectionString property of a CubeDataSource to use a connection string stored in the configuration file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/connecting-the-cubedatasource-component-to-an-olap-database.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nthis.cubeDataSource1.ConnectionString = \"MyAdventureWorksDW\";\n```\n\n----------------------------------------\n\nTITLE: Adding a Group to Table Data Item Programmatically in C#\nDESCRIPTION: This code demonstrates how to programmatically add a new group to a Table data item in C#. It creates a new RowGroup called 'regionRowGroup' that groups by the Region field, adds sorting by the Region field in ascending order, and adds the group to the Table's RowGroups collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/grouping-data/how-to-add-groups-to-table-item-and-crosstab-item.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddNewGroup()\n{\n    //create a group that groups by the Region field.\n    Telerik.Reporting.TableGroup regionRowGroup = new Telerik.Reporting.TableGroup();\n    regionRowGroup.Name = \"regionRowGroup\";\n    //Specify the grouping expression\n    regionRowGroup.Groupings.Add(new Telerik.Reporting.Grouping(\"=Fields.Region\"));\n    //Specify the sort expression for the group\n    regionRowGroup.Sortings.Add(new Telerik.Reporting.Sorting(\"=Fields.Region\", Telerik.Reporting.SortDirection.Asc));\n\n    //add the region group to the table's RowGroups collection\n    this.table1.RowGroups.Add(regionRowGroup);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating UserIdentity Context Type in C#\nDESCRIPTION: The UserIdentity.Context property type has been changed from ConcurrentDictionary<string, object> to IDictionary<string, object>. This change should not break existing code or cause runtime errors.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2019/r1-2019.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.Processing.UserIdentity.Context\n```\n\n----------------------------------------\n\nTITLE: Converting String to Guid in C# for Telerik Reporting Parameters\nDESCRIPTION: User function that converts a string representation of a GUID to a Guid object. This function is used to set values for DataSourceParameter from a string-type ReportParameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-a-guid-as-value-for-report-parameter-or-data-source-parameter.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static Guid ConvertToGuid(string guid)\n{\n           return new Guid(guid);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeSelector StyleRule in C#\nDESCRIPTION: Creates a TypeSelector style rule programmatically that applies formatting to all TextBox report items. Demonstrates creating a StyleRule, adding a TypeSelector, setting formatting properties, and adding the rule to the StyleSheet.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/creating-style-rules.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//Create a StyleRule\nTelerik.Reporting.Drawing.StyleRule myStyleRule = new Telerik.Reporting.Drawing.StyleRule();\n//Add a TypeSelector\nmyStyleRule.Selectors.AddRange(new Telerik.Reporting.Drawing.ISelector[] \n    {new Telerik.Reporting.Drawing.TypeSelector(typeof(Telerik.Reporting.TextBox))});\n//Add formatting\nmyStyleRule.Style.BackgroundColor = System.Drawing.Color.Linen;\nmyStyleRule.Style.Color = System.Drawing.Color.DodgerBlue;\nmyStyleRule.Style.Font.Name = \"Courier New\";\n//Add rule to Style Sheet\nthis.StyleSheet.AddRange(new Telerik.Reporting.Drawing.StyleRule[] {myStyleRule});\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Value with Expression\nDESCRIPTION: An expression to determine cell values in a table or crosstab. Repeated values are substituted with an empty string, leaving unique values unchanged.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-merge-cell-dynamic-table-crosstab.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= If(Previous(Fields.responsibilityAgency) is Not Null,\\n\\t\\t(Fields.responsibilityAgency = Previous(Fields.responsibilityAgency)) ?\\n\\t\\t\\t\\'\\' : Fields.responsibilityAgency,\\n\\t\\tIf(Previous('risk', Fields.responsibilityAgency) is Not Null,\\n\\t\\t\\t(Fields.responsibilityAgency = Previous('risk', Last(Fields.responsibilityAgency))) ?\\n\\t\\t\\t\\t\\'\\' : Fields.responsibilityAgency,\\n\\t\\t\\tIf(Previous('questDetail', Fields.responsibilityAgency) is Not Null,\\n\\t\\t\\t\\t(Fields.responsibilityAgency = Previous('questDetail', Last(Fields.responsibilityAgency))) ?\\n\\t\\t\\t\\t\\t\\'\\' : Fields.responsibilityAgency,\\n\\t\\t\\t\\tFields.responsibilityAgency)))\n```\n\n----------------------------------------\n\nTITLE: Handling DllNotFoundException for libgdiplus on CentOS\nDESCRIPTION: This snippet provides a command to fix a DllNotFoundException error for libgdiplus on CentOS by creating a symbolic link to the libdl.so file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-build-and-Install-libgdiplus-linux.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nln -s /lib64/libdl.so.2 /lib64/libdl.so\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility Key Mappings in HTML5 Report Viewer\nDESCRIPTION: Sets custom key mappings for the report viewer's accessible mode. The method allows defining specific key codes for various viewer areas like content, document map, menu, and parameters. Each key is mapped to its corresponding ASCII key code value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/accessibilitykeymap(keymap).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nreportViewer.accessibilityKeyMap(\n{\n\tCONFIRM_KEY: 32,\n\tCONTENT_AREA_KEY: 82, //R\n\tDOCUMENT_MAP_AREA_KEY: 77, //M\n\tMENU_AREA_KEY: 85, //U\n\tPARAMETERS_AREA_KEY: 80 //P\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Global Styles\nDESCRIPTION: This HTML snippet demonstrates how to add a link to the all.css file in the index.html to apply global Kendo UI styles.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-customize-viewer-using-kendo-ui-sass-based-theme.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"assets/all.css\" rel=\"stylesheet\"/>\n```\n\n----------------------------------------\n\nTITLE: Visibility Expression for Extended Details\nDESCRIPTION: Expression binding for showing rows beyond the first 3. Applied to the secondary TextBox's Visible property to control extended content visibility.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-show-more-or-less-details-in-report-group.md#2025-04-21_snippet_1\n\nLANGUAGE: expression\nCODE:\n```\n= RowNumber()>3\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Query for Product Subcategory Values\nDESCRIPTION: This SQL query selects ProductCategoryID, ProductSubcategoryID, and Name from the Production.ProductSubcategory table, which is essential for configuring the ProductSubcategoryID report parameter in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/how-to-cascade-parameters-with-applied-filtering-on-report-level.md#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\tProductCategoryID,\n\t\tProductSubcategoryID,\n\t\tName AS SubcategoryName\n\tFROM\n\t\tProduction.ProductSubcategory\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Method in OpenAccessContext\nDESCRIPTION: Example method implementation in AdventureWorksEntities context that retrieves Customer data based on CompanyName parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/using-parameters-with-the-openaccessdatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic IQueryable<Customer> GetCustomersByCompanyName(string companyName)\n{\n    return this.Customers.Where(c => c.CompanyName.Contains(companyName));\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Function GetCustomersByCompanyName(ByVal companyName As String) As IQueryable(Of Customer)\n    Return Me.Customers.Where(Function(c) c.CompanyName.Contains(companyName))\nEnd Function\n```\n\n----------------------------------------\n\nTITLE: Using Connection String from Configuration in VB.NET\nDESCRIPTION: Demonstrates how to use a connection string stored in the configuration file by setting the ConnectionString property to the name of the configuration element in VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/connecting-the-sqldatasource-component-to-a-data-source.md#2025-04-21_snippet_4\n\nLANGUAGE: VB.NET\nCODE:\n```\nsqlDataSource1.ConnectionString = \"MyAdventureWorksDB\"\n```\n\n----------------------------------------\n\nTITLE: Example Location Provider Reference\nDESCRIPTION: Reference to the BingLocationProvider class in the Telerik.Reporting namespace\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/structure/location-providers.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`BingLocationProvider`\n```\n\n----------------------------------------\n\nTITLE: XML Structure of TypeReferences Element in Telerik Reporting Configuration\nDESCRIPTION: Shows the basic XML structure of the TypeReferences element in a Telerik Reporting configuration file. This element defines a collection of type references with add, clear, and remove child elements.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/typereferences-element.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<TypeReferences>\n\t<add />\n\t<clear />\n\t<remove />\n</TypeReferences>\n```\n\n----------------------------------------\n\nTITLE: Making DELETE Request to Unregister Client in Telerik Reporting REST Service\nDESCRIPTION: HTTP DELETE request format for unregistering a client from the Telerik Reporting REST Service. The request requires the client ID as a path parameter, which is originally obtained from the Register Client endpoint.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/clients-api/unregister-client.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/reports/clients/{clientId}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Document Formats via HTTP GET\nDESCRIPTION: This snippet outlines the HTTP GET request to retrieve available document formats from the Telerik Reporting REST API. It provides details on the request endpoint and the expected response format, including HTTP status codes and the structure of the response body.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/general-api/get-available-document-formats.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/reports/formats HTTP/1.1\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\n\n[\n\t{\"name\": \"PDF\", \"localizedName\": \"Acrobat (PDF) file\"},\n\t{\"name\": \"CSV\", \"localizedName\": \"CSV (comma delimited)\"},\n\t{\"name\": \"XLS\", \"localizedName\": \"Excel 97-2003\"},\n\t{\"name\": \"XLSX\", \"localizedName\": \"Excel Worksheet\"},\n\t{\"name\": \"PPTX\", \"localizedName\": \"PowerPoint Presentation\"},\n\t{\"name\": \"RTF\", \"localizedName\": \"Rich Text Format\"},\n\t{\"name\": \"IMAGE\", \"localizedName\": \"TIFF file\"},\n\t{\"name\": \"DOCX\", \"localizedName\": \"Word Document\"},\n\t{\"name\": \"XPS\", \"localizedName\": \"XPS Document\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Problematic VB.NET Type Definition without Global Namespace\nDESCRIPTION: Shows a code snippet that causes build errors by not using the Global namespace prefix when defining Telerik Reporting types\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/vb-projects-cannot-be-built-due-to-the-usage-of-the-global-namespace.md#2025-04-21_snippet_0\n\nLANGUAGE: vb.net\nCODE:\n```\nMe.TextBox1 = New Telerik.Reporting.TextBox()\n```\n\n----------------------------------------\n\nTITLE: Setting PDF JavaScript Parameter Programmatically in VB.NET\nDESCRIPTION: Visual Basic code snippet for setting the JavaScript device info parameter when exporting a report programmatically using the embedded report engine.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-expand-the-pdf-reader-s-bookmarks-pane-on-opening-a-pdf-file-produced-by-telerik-reporting.md#2025-04-21_snippet_2\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim deviceInfo As New System.Collections.Hashtable()\ndeviceInfo.Add(\"JavaScript\",  \"app.execMenuItem('ShowHideBookmarks')\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting REST Service in ASP.NET\nDESCRIPTION: This snippet shows how to configure the Telerik Reporting REST service using a configuration file. By setting the ReportServiceConfiguration property to an instance of ConfigSectionReportServiceConfiguration class, users can manage service settings directly from the configuration. Includes example setup for restReportService configuration element within the Telerik Reporting Configuration Section.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/servicestack-implementation/add-rest-servicestack-to-web-application.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\MvcCS\\ServiceStack\\ReportsHostConfigSection.cs region=ReportsHostConfigSectionImplementation}}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\MvcVB\\ServiceStack\\ReportsHostConfigSection.vb region=ReportsHostConfigSectionImplementation}}\n```\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\MvcCS\\ReportServiceConfigurationSnippets\\ConfigSectionConfiguration.xml}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Framework for ASP.NET Core Project\nDESCRIPTION: Specifies the target framework in the project.json file to use the full .NET Framework 4.6.1, which is required for Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer-in-asp.net-core.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"frameworks\": {\n    \"net461\": { }\n},\n```\n\n----------------------------------------\n\nTITLE: Customizing Report Viewer Behavior in JavaScript\nDESCRIPTION: This JavaScript code overrides the default email sending behavior of the Telerik Report Viewer. It intercepts the 'Embedded' format selection and makes a custom API call to the new endpoint for embedding reports in emails.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/send-telerik-report-embedded-email-body.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n\t.telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Dashboard.trdp\",\n\t\t},\n\t\tsendEmailBegin: function ({ data }, args) {\n\n\t\t\tif (args.format === \"Embedded\") {\n\t\t\t\targs.handled = true;\n\n\t\t\t\tconst from = $('[aria-label=\"From email address\"]').val();\n\t\t\t\tconst to = $('[aria-label=\"Recipient email address\"]').val();\n\t\t\t\tconst cc = $('[aria-label=\"Carbon Copy email address\"]').val();\n\t\t\t\tconst subject = $('[aria-label=\"Email subject:\"]').val();\n\t\t\t\tconst body = $('.trv-send-email-editor textarea').data(\"kendoEditor\").value();\n\n\t\t\t\tconst reportSource = data.sender.reportSource();\n\n\t\t\t\ttry {\n\t\t\t\t\tfetch(\"/api/reports/cmail\", {\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tfrom,\n\t\t\t\t\t\t\tto,\n\t\t\t\t\t\t\tcc,\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\treportSource\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(\"Error:\", error);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsendEmail: { enabled: true }\n\t});\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Report Viewer Tooltips\nDESCRIPTION: Basic CSS styling for the tooltip elements including font size and weight customizations for the tooltip container, title, and text areas.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.trv-pages-area-kendo-tooltip {\n\t\t\t\tfont-size: 0.7em;\n\t\t\t}\n\n\t\t.trv-pages-area-kendo-tooltip-title {\n\t\t\t\tfont-weight: bold;\n\t\t}\n\n\t\t.trv-pages-area-kendo-tooltip-text {\n\t\t\tfont-weight: normal;\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Parameter Editor with Kendo and JavaScript\nDESCRIPTION: This JavaScript snippet defines a custom parameter editor for the Telerik React Report Viewer using the Kendo DateTimePicker widget. It specifies methods to match parameters by type and create an editor widget. Dependencies include jQuery and Kendo UI, with the need to manage parameter change callbacks. Inputs are determined by the parameter's configuration, and the output is the editor UI modification.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/customizing/how-to-create-a-custom-parameter-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction match(parameter) {\n\t\treturn parameter.type === \"System.DateTime\";\n\t}\n\t\n\tfunction createEditor(placeholder, options) {\n\t\tvar dateTimePicker = $(placeholder).html('<input type=\"datetime\"/>'),\n\t\tparameter,\n\t\tvalueChangedCallback = options.parameterChanged,\n\t\tdropDownList;\n\t\t\n\t\tfunction onChange() {\n\t\t\tvar val = dropDownList.value();\n\t\t\tvalueChangedCallback(parameter, val);\n\t\t}\n\t\t\n\t\treturn {\n\t\t\tbeginEdit: function (param) {\n\t\t\n\t\t\t\tparameter = param;\n\t\t\n\t\t\t\t$(dateTimePicker).find(\"input\").kendoDateTimePicker({\n\t\t\t\t\tdataTextField: \"name\",\n\t\t\t\t\tdataValueField: \"value\",\n\t\t\t\t\tvalue: parameter.value,\n\t\t\t\t\tdataSource: parameter.availableValues,\n\t\t\t\t\tchange: onChange\n\t\t\t\t});\n\t\t\n\t\t\t\tdropDownList = $(dateTimePicker).find(\"input\").data(\"kendoDateTimePicker\");\n\t\t\t}\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Styling Table Columns with CSS\nDESCRIPTION: CSS styles to set specific widths for table columns in the documentation. The first column is set to 20% width, while the second and third columns are each set to 40% width.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/interactive-actions.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntable th:first-of-type {\n\twidth: 20%;\n}\ntable th:nth-of-type(2) {\n\twidth: 40%;\n}\ntable th:nth-of-type(3) {\n\twidth: 40%;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for UserReportBook Loading Exception in Telerik Reporting\nDESCRIPTION: The exception stack trace showing the type permission error when attempting to load UserReportBook type. This error occurs due to security restrictions introduced in Telerik Reporting version 18.2.24.924.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resolve-userreportbook-loading-exception.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTelerik.Reporting.Utils.TypePermissionException: The type \"Telerik.Reporting.UserReportBook\" contained in assembly \"Telerik.Reporting, Version=18.2.24.924, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" cannot be loaded. \nTo help improve the application's security, the reporting engine prevents loading types that are not essentially needed or listed as trusted by the user. If you consider particular types or assemblies as trusted include them in the corresponding TypeReferences or AssemblyReferences element of the 'Telerik.Reporting' configuration section in the application's configuration file.\n   at Telerik.Reporting.TypeValidation.TypeValidator.ValidateSerializationType(Type type)\n   at Telerik.Reporting.TypeValidation.SafeActivator.CreateInstanceSafe(Type type, Object[] parameters)\n   at Telerik.ReportDesigner.Packages.ReportDesigner.Serialization.ComponentActivator.CreateInstance(IDesignerHost host, Type type, String name, IConvertersContainer converters)\n   at Telerik.ReportDesigner.Packages.ReportDesigner.Serialization.ReportXmlSerializer.ObjectXmlHostReader.CreateInstance(Type type, String name)\n   at Telerik.Reporting.Serialization.ObjectReader.CreateInstance(Type type)\n   at Telerik.Reporting.Serialization.ObjectReader.ReadObject(Type type)\n   at Telerik.Reporting.Serialization.ObjectReader.ReadXmlElement(String name)\n   at Telerik.Reporting.Serialization.ObjectReader.Deserialize(IResourceHandler handler)\n   at Telerik.Reporting.XmlSerialization.XmlSerializerBase.Deserialize(XmlReader reader, IResourceHandler resourceHandler)\n   at Telerik.Reporting.XmlSerialization.XmlSerializerBase.Deserialize(Stream stream, IResourceHandler resourceHandler)\n   at Telerik.ReportDesigner.Packages.ReportDesigner.Serialization.ReportXmlSerializer.Deserialize(Stream stream, IResourceHandler resourceHandler)\n   at Telerik.Reporting.ReportPackager.UnpackageDocument(Stream packageStream)\n   at Telerik.ReportDesigner.Packages.ReportDesigner.Serialization.PackageDocDataHandler.DeserializeReportDocument(IDesignerLoaderHost targetHost)\n   at Telerik.ReportDesigner.Packages.ReportDesigner.Serialization.PackageDocDataHandler.UploadReportDocument(IDesignerLoaderHost targetHost)\n   at Telerik.ReportDesigner.Packages.ReportDesigner.Serialization.DocData.UploadReportDocument(IDesignerLoaderHost host)\n   at Telerik.ReportDesigner.Packages.ReportDesigner.Serialization.ReportDocumentDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\n```\n\n----------------------------------------\n\nTITLE: Including Kendo UI CSS Stylesheets in HTML\nDESCRIPTION: This HTML snippet demonstrates how to include the necessary Kendo UI CSS stylesheets for the HTML5 Report Viewer. It includes both the common styles and a specific theme (blueopal in this case).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/styling-and-appearance/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/kendo/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n<link href=\"/kendo/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Defining FormatInfo Object in JSON\nDESCRIPTION: The snippet defines a JSON object representing the document format, which includes essential fields such as `name` for the document format ID and `localizedName` for the display name. It's used within the Telerik Reporting REST Service to specify format details for document creation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/formatinfo.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"name\": \"PDF\",\n\t\"localizedName\": \"Acrobat (PDF) file\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Corner Radius in C# for WPF Report Viewer\nDESCRIPTION: This code snippet shows how to set the corner radius of the WPF ReportViewer in the code-behind. It initializes the component and then sets the `CornerRadius` property of the `ReportViewer1` instance to a new `CornerRadius` object with a value of 15.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/customizing/how-to-use-rounded-corners.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n````C#\npublic MainWindow()\n{\n\tthis.InitializeComponent();\n\tthis.ReportViewer1.CornerRadius = new CornerRadius(15);\n}\n````\n```\n\n----------------------------------------\n\nTITLE: Get Document Resource Request\nDESCRIPTION: This snippet shows the structure of the GET request to retrieve a document resource from the Telerik Reporting REST service.  It requires `clientId`, `instanceId`, `documentId`, and `resourceId` as path parameters to identify the resource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/get-document-resource.md#2025-04-21_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\n\"GET /api/reports/clients/{clientId}/instances/{instanceId}/documents/{documentId}/resources/{resourceId}\"\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for ReportService\nDESCRIPTION: This JSON configuration snippet provides a detailed setup for the REST Report Service, defining host application ID, storage provider settings, and necessary parameters such as a connection string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-storage/how-to-configure-an-mssql-database-storage.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\t\t\"restReportService\": {\n\t\t\t\t\"hostAppId\": \"Application1\",\n\t\t\t\t\"reportResolver\": {\n\t\t\t\t\t\"provider\": \"type\"\n\t\t\t\t},\n\t\t\t\t\"storage\": {\n\t\t\t\t\t\"provider\": \"MSSQLServer\",\n\t\t\t\t\t\"parameters\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"connectionString\",\n\t\t\t\t\t\t\t\"value\": \"Data Source=(local)\\SQLEXPRESS;Initial Catalog=RestServiceStorage;Integrated Security=SSPI\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"commandTimeout\",\n\t\t\t\t\t\t\t\"value\": 60\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t...\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Correct Item Data Binding Example in C#\nDESCRIPTION: This snippet demonstrates a valid method for binding data to report items using the Items collection, which aligns with the requirements of using out-proc session state efficiently.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\Processing\\OutProcSnippets.cs region=CorrectItemDataBinding}}\n```\n\n----------------------------------------\n\nTITLE: CSS Table Column Width Styling\nDESCRIPTION: CSS styling rules that define specific column widths for a table, setting the first column to 20% width and the second column to 80% width.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/api-reference/options.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\ntable th:first-of-type {\n\twidth: 20%;\n}\ntable th:nth-of-type(2) {\n\twidth: 80%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: MDX Query with Multiple Value Parameter for CubeDataSource\nDESCRIPTION: An MDX query that uses the StrToSet function to allow passing multiple years for the slicing axis at once.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/specifying-query-parameters-with-the-cubedatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nselect non empty { [Measures].[Sales Amount] } on columns,\n\tnon empty { [Product].[Category].[Category] *\n\t[Product].[Subcategory].[Subcategory] } on rows\nfrom [Adventure Works]\nwhere StrToSet(@Year)\n```\n\n----------------------------------------\n\nTITLE: Adding Filters to Table or Crosstab Items Programmatically in Telerik Reporting\nDESCRIPTION: Code examples in C# and VB.NET demonstrating how to programmatically add filters to Table and Crosstab items. The snippet shows how to create a filter with a specified expression, operator, and value, then add it to the item's Filters collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/filtering-data/how-to-add-filtering-to-table-item-and-crosstab-item.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nFilter filter = new Filter();\nfilter.Expression = \"=Fields.CategoryName\";\nfilter.Operator = FilterOperator.Equal;\nfilter.Value = \"Beverages\";\n\n//get a reference to the table or crosstab item on the current report\nTable table = (Table)this.ActiveReport.Items[\"table1\"];\ntable.Filters.Add(filter);\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim filter As New Filter()\nfilter.Expression = \"=Fields.CategoryName\"\nfilter.Operator = FilterOperator.Equal\nfilter.Value = \"Beverages\"\n\n'get a reference to the table or crosstab item on the current report\nDim table As Table = DirectCast(Me.ActiveReport.Items(\"table1\"), Table)\ntable.Filters.Add(filter)\n```\n\n----------------------------------------\n\nTITLE: Report Schema Version\nDESCRIPTION: Specifies the schema version used by TRDX, TRDP and TRBP report definitions in the Standalone Report Designer and Web Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2021/r3-2021-sp1.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2021/2.0\n```\n\n----------------------------------------\n\nTITLE: Programmatically Adding a Custom Action (VB)\nDESCRIPTION: This snippet demonstrates how to programmatically add a custom action to a report using VB within Telerik Reporting. It outlines the necessary steps for parameter definition and action configuration, requiring Telerik Reporting libraries.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/custom-action.md#2025-04-21_snippet_3\n\nLANGUAGE: VB\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\ActionSnippets.vb region=AddNewCustomActionSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Setting Graph ColorPalette with Bindings in Telerik Reporting\nDESCRIPTION: This snippet demonstrates how to use Bindings to set the ColorPalette property of a Graph. It calls a user-defined function to generate the ColorPalette.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/colorpalette-set-with-bindings.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nProperty Path\t|\tExpression\nColorPalette\t|\t= MyUserFunctionName(MyColor1, MyColor2, ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Font Embedding in JSON Configuration\nDESCRIPTION: JSON configuration snippet demonstrating how to configure font embedding for PDF rendering in Telerik Reporting using the telerikReporting section.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/characters-not-appearing-correctly-in-pdf-files.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\t\"extensions\": [\n\t\t{\n\t\t\t\"name\": \"PDF\",\n\t\t\t\"description\":  \"PDF Description\",\n\t\t\t\"parameters\": [\n\t\t\t{\n\t\t\t\t\"Name\": \"FontEmbedding\",\n\t\t\t\t\"Value\": \"Full\"\n\t\t\t}\n\t\t\t]\n\t\t}\n\t\t]\n\t}\n```\n\n----------------------------------------\n\nTITLE: Resolve Document Response in REST\nDESCRIPTION: This snippet shows the expected response when a Resolve Document request is successfully accepted by the Telerik Reporting REST Service. A status code of 202 Accepted indicates document instance creation and rendering initiation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/resolve-document.md#2025-04-21_snippet_1\n\nLANGUAGE: REST\nCODE:\n```\nHTTP/1.1 202 Accepted\n\n“5x3a”\n```\n\n----------------------------------------\n\nTITLE: Authorizing Access to ReportViewer Handler in web.config\nDESCRIPTION: This XML code ensures that the HTTP handler for Telerik ReportViewer remains accessible, even when authorization forms are applied. Adding this <location> element is necessary if access permissions are interfering with the functionality of the ReportViewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reportviewer-is-undefined-javascript-error.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<location path=\"Telerik.ReportViewer.axd\">   \n  <system.web>  \n    <authorization>  \n      <allow users=\"*\"/>   \n    </authorization>  \n  </system.web>  \n</location>\n```\n\n----------------------------------------\n\nTITLE: Initializing .NET Client for Telerik Report Server REST API\nDESCRIPTION: Sets up an HttpClient with base address and configures default request headers for JSON communication with the Report Server API\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/export-a-report-from-telerik-report-server-via-dot-net-client.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclient.BaseAddress = new Uri(serverREStAPI);\nclient.DefaultRequestHeaders.Accept.Clear();\nclient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace Declarations for WPF Report Viewer\nDESCRIPTION: XAML namespace declarations needed for the WPF Report Viewer in a Window declaration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add-report-viewer-to-a-wpf-.net-core-project.md#2025-04-21_snippet_2\n\nLANGUAGE: XAML\nCODE:\n```\nxmlns:tr=\"http://schemas.telerik.com/wpf\"\n\txmlns:telerikControls=\"clr-namespace:Telerik.Windows.Controls;assembly=Telerik.Windows.Controls\"\n\txmlns:telerikReporting=\"clr-namespace:Telerik.Reporting;assembly=Telerik.Reporting\"\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Layout with Render Sections\nDESCRIPTION: Basic HTML template structure with viewport meta tag and render sections for styles and scripts.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n@RenderSection(\"styles\", required: false)\n@RenderSection(\"scripts\", required: false)\n</head>\n<body>\n\t@RenderBody()\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring fontLibrary in XML Configuration File\nDESCRIPTION: This example shows how to configure the reporting engine using XML configuration to skip default font folders and specify custom font locations. It sets useDefaultLocations to false and adds a custom font path with recursive subfolder search.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/fontlibrary-element.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<configuration>\n...\n    <Telerik.Reporting>\n\t\t<fontLibrary useDefaultLocations =\"false\">\n\t\t\t<fontLocations>\n\t\t\t\t<add path=\"/usr/customFonts/trueType\" searchSubfolders=\"true\"></add>\n\t\t\t</fontLocations>\n\t\t</fontLibrary>\n  </Telerik.Reporting>\n...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Binding ObjectDataSource to DataTable in VB.NET\nDESCRIPTION: This VB.NET code snippet demonstrates how to create a DataTable, add a calculated field, configure an ObjectDataSource, and set up a report to use it. It also shows how to preview the report in a Windows Forms Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/bind-to-data-table.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Sub HowToBindToDataTable()\n    Dim dt As New DataTable()\n    dt.Columns.Add(\"ProductID\", GetType(Integer))\n    dt.Columns.Add(\"ProductName\", GetType(String))\n    dt.Columns.Add(\"UnitPrice\", GetType(Decimal))\n    dt.Columns.Add(\"UnitsInStock\", GetType(Int16))\n    dt.Rows.Add(1, \"Chai\", 18.0, 39)\n    dt.Rows.Add(2, \"Chang\", 19.0, 17)\n    dt.Rows.Add(3, \"Aniseed Syrup\", 10.0, 13)\n\n    Dim calcColumn As New DataColumn(\"Total\")\n    calcColumn.DataType = GetType(Decimal)\n    calcColumn.Expression = \"UnitPrice * UnitsInStock\"\n    dt.Columns.Add(calcColumn)\n\n    Dim objectDataSource As New ObjectDataSource()\n    objectDataSource.DataSource = dt\n\n    Dim report As New Report()\n    report.DataSource = objectDataSource\n\n    Dim reportProcessor As New ReportProcessor()\n    Dim result As RenderingResult = reportProcessor.RenderReport(\"PDF\", report, Nothing)\n\n    System.IO.File.WriteAllBytes(\"report.pdf\", result.DocumentBytes)\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Configuring DbProviderFactories for SQLite in Standalone Report Designer\nDESCRIPTION: This XML snippet shows how to add the DbProvider Factory declaration for SQLite to the Standalone Report Designer configuration file. It removes any existing SQLite provider and adds a new one with specific version and public key token.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-data-providers/using-sqlite-data-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<system.data>\n\t\t<DbProviderFactories>\n\t\t\t<remove invariant=\"System.Data.SQLite\" />\n\t\t\t<add name=\"SQLite Data Provider\" invariant=\"System.Data.SQLite\" description=\".NET Framework Data Provider for SQLite\"\n\t\t\t\ttype=\"System.Data.SQLite.SQLiteFactory, System.Data.SQLite, Version=1.0.117.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139\" />\n\t\t</DbProviderFactories>\n\t</system.data>\n```\n\n----------------------------------------\n\nTITLE: Reinstall Telerik Reporting - VS 2022\nDESCRIPTION: This command reinstalls Telerik Reporting specifically for Visual Studio 2022, resolving possible registration problems. The `PRODUCTDIR` parameter indicates where Visual Studio is installed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-value-cannot-be-null-parameter-name-instance-vs2017-report-designer.md#2025-04-21_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n\"msiexec /i [installer_file_name].msi PRODUCTDIR=\\\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\[version]\\\\[edition]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Modifying printDesktop function in telerikReportViewer.js\nDESCRIPTION: This snippet shows how to modify the `printDesktop` function within the `telerikReportViewer-x.x.x.x.js` file to use Print.js for Chrome and an iframe for other browsers, triggering the print dialog on click. This snippet depends on the Print.js library being referenced.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-error-chrome.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"function printDesktop(src) {\\n    window.open(src, \\\"_blank\\\");\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting WinUI Report Viewer Source with REST Service\nDESCRIPTION: Example showing how to declaratively configure a WinUI Report Viewer with REST Service connection and report parameters in XAML.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_10\n\nLANGUAGE: XAML\nCODE:\n```\n<telerikReportingCore:ReportViewer x:Name=\"reportViewer\" Grid.Row=\"1\" ReportEngineConnection=\"engine=RestService;uri=http://localhost:59655/api/reports\">\n\t<telerikReportingCore:ReportViewer.ReportSource>\n\t\t<telerikReportingCore:UriReportSource Uri=\"MyReport.trdp\">\n\t\t\t<telerikReportingCore:ReportSource.Parameters>\n\t\t\t\t<telerikReportingCore:Parameter Name=\"ParameterName_01\" Value=\"ParameterValue_01\"/>\n\t\t\t\t<telerikReportingCore:Parameter Name=\"ParameterName_02\" Value=\"ParameterValue_02\"/>\n\t\t\t</telerikReportingCore:ReportSource.Parameters>\n\t\t</telerikReportingCore:UriReportSource>\n\t</telerikReportingCore:ReportViewer.ReportSource>\n</telerikReportingCore:ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Locating Kendo UI Subset in Angular Report Viewer NPM Package\nDESCRIPTION: This code snippet shows the file path where the Kendo UI subset can be found in the Telerik Angular Report Viewer NPM package. This information is useful for implementing the suggested workaround.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/search-dialog-doesnt-appear-in-angular-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnode_modules\\@progress\\telerik-angular-report-viewer\\dist\\dependencies\\telerikReportViewer.kendo-<VERSION>.min.js.\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters in Blazor Component\nDESCRIPTION: Demonstrates how to define component parameters that can be supplied from query string using SupplyParameterFromQuery and Parameter attributes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-query-parameters-native-blazor-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Parameter]\n[SupplyParameterFromQuery(Name = \"ReportName\")]\npublic string? ReportName { get; set; }\n\n[Parameter]\n[SupplyParameterFromQuery(Name = \"ReportYear\")]\npublic int? ReportYear { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery for Angular CLI\nDESCRIPTION: This snippet demonstrates how to install jQuery as a dependency in your Angular application using npm.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install jquery\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Telerik Reporting Processing Element\nDESCRIPTION: JSON-based configuration demonstrating processing element setup with graphics engine, resource resolver, and shared data source resolver configurations\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/processing-element.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\\n\\t\"processing\": {\\n\\t\\t\"graphicsEngine\": {\\n        \\t\"engineName\": \"PlatformDependent\"\\n      \\t},\\n\\t\\t\"cacheDefinitionProperties\": \"false\",\\n\\t\\t\"resourceResolver\": {\\n\\t\\t\\t\"provider\": \"custom\",\\n\\t\\t\\t\"parameters\": [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\"name\": \"typeName\",\\n\\t\\t\\t\\t\\t\"value\": \"Namespace.CustomResourceResolverClass, AssemblyName\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\"name\": \"constructorParameter1\",\\n\\t\\t\\t\\t\\t\"value\": \"constructorParameterValue1\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t},\\n\\t\\t\"sharedDataSourceResolver\": {\\n\\t\\t\\t\"provider\": \"custom\",\\n\\t\\t\\t\\t\"parameters\": [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\"name\": \"typename\",\\n\\t\\t\\t\\t\\t\"value\": \"Namespace.CustomSharedDataSourceResolverClass, AssemblyName\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t}\\n\\t}\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Resize for MVC Wrapper HTML5 Report Viewer\nDESCRIPTION: C# and JavaScript code to set up the pageReady event handler and implement the resizing function for the MVC wrapper of the HTML5 Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-resize-the-report-viewer-to-accommodate-its-content.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n@(Html.TelerikReporting().ReportViewer()\n\t.Id(\"reportViewer1\")\n\t//...\n\t.PageMode(PageMode.SinglePage)\n\t.ClientEvents(\n\t\tevents => events\n\t\t\t\t\t.PageReady(\"onPageReady\")\n\t)\n)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n\tfunction onPageReady() {\n\t\tresizeViewer();\n\t}\n\n\tfunction resizeViewer() {\n\t\tvar pageHeight = $(\".trv-pages-area .trv-page-wrapper\").height() + $(\".trv-nav\").outerHeight() + 2, // Calculate the report page height\n\t\t\tviewer = $(\"#reportViewer1\"),\n\t\t\tviewerHeight = viewer.height();\n\t\n\t\tif (viewerHeight !== pageHeight ) {\n\t\t\tviewer.height(pageHeight);\n\t\t\tvar documentMapSplitter = $(\".trv-document-map-splitter\").data(\"kendoSplitter\");\n\t\t\tdocumentMapSplitter.resize(true);\n\t\n\t\t\tvar parameterSplitter = $(\".trv-parameters-splitter\").data(\"kendoSplitter\");\n\t\t\tparameterSplitter.resize(true);\n\t\t}\n\t}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sample XML Report Definition\nDESCRIPTION: Example of an XML representation of a serialized Telerik Reporting report definition\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/serialize-report-definition-in-xml.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n// Snippet from CodeSnippets\\CS\\Report1.xml\n```\n\n----------------------------------------\n\nTITLE: Setting PictureBox Value Expression to Use HTML Renderer\nDESCRIPTION: An expression to set on a PictureBox's Value property that calls the custom HtmlToImage function to render HTML content as an image.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-render-any-html-tags-in-reports.md#2025-04-21_snippet_2\n\nLANGUAGE: Expression\nCODE:\n```\n= UserFunctions.Functions.HtmlToImage(HTML)\n```\n\n----------------------------------------\n\nTITLE: Handling ValueError Exception with Try-Catch in VB\nDESCRIPTION: This VB snippet demonstrates how to use a try-catch block to handle the ValueError exception when providing invalid XHTML content for the HtmlTextBox. It ensures the program can manage invalid inputs gracefully during reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/htmltextbox/xhtml-validation.md#2025-04-21_snippet_5\n\nLANGUAGE: VB\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\Processing\\HtmlTextBoxSnippets.vb region=Validate_Xhtml_Using_Event_And_ValueError_Snippet}}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Cache Provider in XML for Telerik Reporting\nDESCRIPTION: XML configuration for the File cache provider with a custom base path. This provider stores rendered pages and resources as temporary files in the file system.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t…\n\t<Telerik.Reporting>\n\t\t<cache provider=\"File\">\n\t\t\t<providers>\n\t\t\t\t<provider name=\"FileProviderName\">\n\t\t\t\t\t<parameters>\n\t\t\t\t\t\t<parameter name=\"BasePath\" value=\"C:\\MyDataCache\" />\n\t\t\t\t\t</parameters>\n\t\t\t\t</provider>\n\t\t\t</providers>\n\t\t</cache>\n\t</Telerik.Reporting>\n\t…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Declaring DPI-Awareness for WinForms Applications\nDESCRIPTION: This XML snippet configures a Windows Forms application to be DPI-aware, which improves rendering quality and prevents visual artifacts on high-DPI displays. No additional dependencies are required except access to the application manifest file. The expected input is the application's XML manifest, and the output is improved DPI handling in the application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/windows-forms-application/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\" xmlns:asmv3=\"urn:schemas-microsoft-com:asm.v3\" >\n\t<asmv3:application>\n\t<asmv3:windowsSettings xmlns=\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\">\n\t\t<dpiAware>True</dpiAware>\n\t</asmv3:windowsSettings>\n\t</asmv3:application>\n</assembly>\n```\n\n----------------------------------------\n\nTITLE: Configuring ODP.NET Connection String in JSON\nDESCRIPTION: This JSON snippet shows how to configure a shared connection string for ODP.NET in the project's configuration file (e.g., appsettings.json). It specifies the connection string and provider name for an Oracle database connection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-data-providers/using-odp-net-data-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"ConnectionStrings\":{\n\t\t\"oracle\":{\n\t\t\t\"connectionString\":\"Data Source=TORCL;User Id=myUsername;Password=myPassword;\",\n\t\t\t\"providerName\":\"Oracle.ManagedDataAccess.Client\"\n\t\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent's Parent Data Object in Telerik Reporting\nDESCRIPTION: This code snippet shows how to access the data object of a parent item higher in the hierarchy using the Parent keyword in Telerik Reporting. This can be repeated as needed to reach the desired item in the hierarchy.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/binding-a-data-item-to-data.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n= ReportItem.Parent.DataObject\n```\n\n----------------------------------------\n\nTITLE: Report Schema Version Configuration\nDESCRIPTION: Details the updated schema versions for report definitions in Standalone Report Designer for .NET Framework and .NET 8\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q4-18-3-24-1218.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nSchema Versions:\n  .NET Framework: http://schemas.telerik.com/reporting/2024/4.0\n  .NET 8: http://schemas.telerik.com/reporting/2024/4.0\n```\n\n----------------------------------------\n\nTITLE: SQL: JSON Column Generation for Master-Detail Reporting\nDESCRIPTION: SQL query that generates a JSON column alongside regular columns, enabling nested data retrieval from a single data source. Uses SQL Server 2016+ JSON functions to convert related table data into a single JSON field.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/pass-sqldatasource-columns-as-datasource-for-nested-data-items.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect c.ProductCategoryId, c.Name, \n(select * from Production.ProductSubcategory sc where sc.ProductCategoryID = c.ProductCategoryID for Json Auto) as JSONOUT\nfrom Production.ProductCategory c\n```\n\n----------------------------------------\n\nTITLE: First Page Header Visibility Expression in Telerik Reporting\nDESCRIPTION: A binding expression that controls page header visibility based on page number. The expression evaluates to True for the first page (PageNumber < 2) and False for all subsequent pages.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-display-page-header-on-first-page-only.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n= IIF(PageNumber < 2, True, False)\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Output Format for Printing and Previewing\nDESCRIPTION: Setting OutputFormat to PNG in device information settings to handle DPI scaling when printing or previewing reports in Windows Forms Viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-report-correctly-from-winforms-viewer-without-declaring-entire-application-as-dpi-aware.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<DeviceInfo>\n    <OutputFormat>PNG</OutputFormat>\n</DeviceInfo>\n```\n\n----------------------------------------\n\nTITLE: Configuring UseMetafile Parameter in .NET Framework\nDESCRIPTION: This XML configuration sets the UseMetafile parameter to false for the DOCX rendering extension in a .NET Framework project's web.config or app.config file. This forces the rendering engine to create Bitmap images instead of EMF, avoiding the shrinking issue on Mac machines.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/images-are-shrunk-in-docx-xlsx-pptx-formats-on-mac-machines.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <configSections>\n        <section\n                name=\"Telerik.Reporting\"\n                type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n                allowLocation=\"true\"\n                allowDefinition=\"Everywhere\"/>\n    </configSections>\n<Telerik.Reporting>\n        <extensions>\n            <render>\n                <extension name=\"DOCX\">\n                    <parameters>\n                        <parameter name=\"UseMetafile\" value=\"false\"/>\n                    </parameters>\n                </extension>\n            </render>\n        </extensions>\n    </Telerik.Reporting>\n    …\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting Textbox Value for Expand/Collapse Indicator in Telerik Reporting\nDESCRIPTION: This expression sets the textbox value to '+' when columns are merged and '-' when expanded, based on the boolean parameter value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-graph-with-merged-last-column-which-can-expand-and-collapse.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= IIf(Parameters.paramMerged.Value = 'True', \"+\", \"-\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets in Angular CLI Configuration\nDESCRIPTION: This JavaScript snippet shows how to configure the assets property in the Angular CLI configuration file to include custom files in the production build.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-customize-viewer-using-kendo-ui-sass-based-theme.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"assets\": [\n        \"assets\",\n         ...\n],\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Theme References\nDESCRIPTION: Include Kendo UI theme CSS files in the HTML to style the Telerik Report Viewer with a specific theme\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-rest-service.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- The required Less-based styles -->\n<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Angular Report Viewer Version Requirements\nDESCRIPTION: Version requirements for Angular Report Viewer dependencies including Angular framework and jQuery.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q3-18-2-24-924.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAngular (15.0.0 or later)\njQuery (^1.10.0 || ^2.2.0 || ^3.7.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring DbProvider Factory for SQLite in Standalone Report Designer\nDESCRIPTION: This XML snippet shows how to add the DbProvider Factory declaration for SQLite in the Stand-alone Report Designer configuration file. It removes any existing SQLite provider and adds a new one with specific version and public key token.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/configure-the-stand-alone-report-designer-sqlite-data-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<system.data>\n\t\t<DbProviderFactories>\n\t\t\t\t<remove invariant=\"System.Data.SQLite\" />\n\t\t\t\t<add name=\"SQLite Data Provider\" invariant=\"System.Data.SQLite\" description=\".NET Framework Data Provider for SQLite\"\n\t\t\t\t\t\t\ttype=\"System.Data.SQLite.SQLiteFactory, System.Data.SQLite, Version=1.0.117.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139\" />\n\t\t</DbProviderFactories>\n</system.data>\n```\n\n----------------------------------------\n\nTITLE: ARIA Label Example Output\nDESCRIPTION: Shows a complete example of an aria-label generated for a TextBox with sorting action in a table\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/accessibility.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nText box. Performs a sorting action. Column header. Column 2 Row 0. Sorts by Category.\n```\n\n----------------------------------------\n\nTITLE: Including jQuery Reference\nDESCRIPTION: Adds reference to jQuery library which is required for the viewer's functionality.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/manual-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>>\n```\n\n----------------------------------------\n\nTITLE: Replacing Invalid Hexadecimal Symbols in C# for WPF Reports\nDESCRIPTION: This C# function is designed to filter out invalid hexadecimal symbols from a string input, which is essential to prevent rendering issues in WPF reports. It utilizes regular expressions to identify and remove unwanted characters that do not comply with XML standards.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/unicode-characters-are-not-rendered-in-wpf.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static string ReplaceHexadecimalSymbols(string txt)\\n{\\n    string r = \"[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x26]\";\\n    return Regex.Replace(txt, r, \"\", RegexOptions.Compiled);\\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default PrintReport Function for Custom Printing Behavior\nDESCRIPTION: This JavaScript code demonstrates how to override the default PrintReport function of the ReportViewer to implement custom printing behavior. It utilizes the PrintAs method with \"Default\" parameter to trigger browser printing capabilities.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-print-report-on-client-machine-without-showing-the-report.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n  ReportViewer.prototype.PrintReport = function()\n  { \n    this.PrintAs(\"Default\");\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using AddMonths Function in Telerik Reporting\nDESCRIPTION: The `AddMonths` function returns a new DateTime that adds the specified number of months to the value of the specified date. It takes a date and a number of months as input and returns a new DateTime object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_7\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=AddMonths(Now(), 3)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme in Angular\nDESCRIPTION: JSON configuration to add the Kendo UI theme to the Angular project styles\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-reporting-service.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"styles\": [\n\t\"src/styles.scss\",\n\t\"node_modules/@progress/kendo-theme-default/dist/default-ocean-blue.scss\"\n],\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Culture for Report Localization in VB.NET\nDESCRIPTION: This VB.NET snippet demonstrates how to set the current thread's `CurrentUICulture` and `CurrentCulture` properties to a specific culture, ensuring that the Telerik report is rendered using the correct localized resources. The culture settings must be applied before creating an instance of the report. The `CultureInfo` constructor takes the culture code of the language to display, such as \"en-US\" or \"es-MX\".\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/globalization/localization.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports System.Threading\nImports System.Globalization\n\nPublic Shared Sub SetThreadCulture(cultureCode As String)\n    Dim culture As CultureInfo = CultureInfo.CreateSpecificCulture(cultureCode)\n    Thread.CurrentThread.CurrentCulture = culture\n    Thread.CurrentThread.CurrentUICulture = culture\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Complete XML Configuration Example for Assembly References\nDESCRIPTION: Complete XML configuration example showing how to configure the reporting engine to use a custom assembly as a source for user functions. It also demonstrates how to specify probing paths for locating assemblies in subdirectories.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/assemblyreferences-element.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<configuration>\n\t<configSections>\n\t\t<section name=\"Telerik.Reporting\" type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\" allowLocation=\"true\" allowDefinition=\"Everywhere\" />\n\t</configSections>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t  <probing privatePath=\"MyDir; MyDir2\\SubDir\"/>\n\t\t</assemblyBinding>\n\t</runtime>\n\t<Telerik.Reporting>\n\t\t<assemblyReferences>\n\t\t\t<add name=\"MyUserFunctionsAssembly\" version=\"1.0.0.0\" culture=\"neutral\" publicKeyToken =\"null\" />\n\t\t</assemblyReferences>\n\t</Telerik.Reporting>\n...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Kendo UI Styles for HTML5 WebForms Report Viewer\nDESCRIPTION: Example of manually registering Kendo JavaScript and CSS files in the page head to customize the viewer styling or change the default theme. This approach bypasses the automatic style loading through HTTPHandler.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/styling-and-appearance.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<head>\n\t....\n\t<!--kendo.all.min.js can be used as well instead of kendo.web.min.js, kendo.mobile.min.js or telerikReportViewer-kendo-->\n\t<script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/kendo.web.min.js\" /script>\n\t<!--kendo.mobile.min.js - optional, if gestures/touch support is required-->\n\t<script src=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/js/kendo.mobile.min.js\" /script>\n\t<!--telerikReportViewer-kendo - optional, if you need to use a theme different from the default one-->\n\t<script src=\"/api/reports/resources/js/telerikReportViewer-kendo\" /script>\n\t<!-- the required Kendo styles -->\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Setting HTML DOCTYPE\nDESCRIPTION: Defines HTML5 DOCTYPE declaration to ensure browser compatibility\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n```\n\n----------------------------------------\n\nTITLE: Updating CSHTML Layout for Telerik Blazor UI 4.0.1 or Higher\nDESCRIPTION: This code snippet demonstrates how to update the CSHTML layout file to fix blank icons in the Native Blazor Report Viewer when using Telerik Blazor UI 4.0.1 or higher. It includes referencing a different custom CSS file and updating the Kendo Theme CSS reference.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/blank-icons-in-blazor-native-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: CSHTML\nCODE:\n```\n<script src=\"_content/Telerik.UI.for.Blazor/js/telerik-blazor.js\"></script>\n<script src=\"_content/Telerik.ReportViewer.BlazorNative/js/reporting-blazor-viewer.js\"></script>\n\n<link rel=\"stylesheet\" href=\"https://blazor.cdn.telerik.com/blazor/4.0.1/kendo-theme-default/all.css\" />\n\n<link href=\"_content/Telerik.ReportViewer.BlazorNative/css/reporting-blazor-viewer.css\" rel=\"stylesheet\" />\n<link rel=\"stylesheet\" href=\"css/icon-patch-4-0-1.css\" />\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Successful Client Unregistration\nDESCRIPTION: Example of a successful HTTP response with status code 204 NoContent after unregistering a client from the Telerik Reporting REST Service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/clients-api/unregister-client.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 NoContent\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Formatting Expression for Alternating Rows in Telerik Reporting\nDESCRIPTION: This expression is used in the conditional formatting rule to apply styling to every other row in a Telerik Report. It uses the RowNumber() function to determine if the current row is odd or even.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-display-alternating-style-rows.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n= RowNumber()%2\n```\n\n----------------------------------------\n\nTITLE: Configuring TableGroup PageBreak in C#\nDESCRIPTION: Set the PageBreak property for TableGroup to control page breaks before or after each group instance in both horizontal and vertical directions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/understanding-pagination.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntableGroup.PageBreak = PageBreak.Before; // or PageBreak.After\n```\n\n----------------------------------------\n\nTITLE: Downloading Exported PDF Report\nDESCRIPTION: Downloads the exported PDF report document to a temporary file and opens it using the default PDF viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/export-a-report-from-telerik-report-server-via-dot-net-client.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic void DownloadPDF(string path, string documentID, bool asAttachment)\n{\n    var queryString = \"\";\n    if (asAttachment)\n    {\n        queryString += \"?content-disposition=attachment\";\n    }\n\n    string fileName = \"test1.pdf\";\n    string folderName = System.IO.Path.GetTempPath();\n    string filePath = System.IO.Path.Combine(folderName, fileName);\n    using (System.Net.WebClient myWebClient = new System.Net.WebClient())\n    {\n        myWebClient.DownloadFile(path + documentID + queryString, filePath);\n    }\n\n    System.Diagnostics.Process.Start(filePath);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IsolatedStorage Cache Provider in JSON for Telerik Reporting\nDESCRIPTION: JSON configuration for the IsolatedStorage cache provider. This provider stores rendered pages and resources as temporary files in the isolated storage.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"cache\": {\n\t\t\"provider\": \"IsolatedStorage\",\n\t\t\"providers\": [\n\t\t\t{\n\t\t\t\t\"name\": \"IsolatedStorageProviderName\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAccessDataSource with Live Instance in VB.NET\nDESCRIPTION: This VB.NET code demonstrates configuring the OpenAccessDataSource using a live instance of the OpenAccessContext, highlighting the need to destroy the instance after use.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/connecting-to-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim oaDataSource As New OpenAccessDataSource()\nDim context As New AdventureWorksEntities()\noaDataSource.ObjectContext = context\noaDataSource.ObjectContextMember = \"Products\"\n```\n\n----------------------------------------\n\nTITLE: Styling Table Column Widths with CSS\nDESCRIPTION: CSS styling rules to control the width of table columns on the document page. These styles set specific width percentages for the first four columns of tables on the page.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/export-formats.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntable th:first-of-type {\n\twidth: 15%;\n}\ntable th:nth-of-type(2) {\n\twidth: 30%;\n}\ntable th:nth-of-type(3) {\n\twidth: 25%;\n}\ntable th:nth-of-type(4) {\n\twidth: 30%;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Quarter Function in Telerik Reporting\nDESCRIPTION: The `Quarter` function returns the quarter of the year component of a specified date.  The input is a date, and the output is a number representing the quarter (1-4).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=Quarter (Now())\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Group Headers with Continuation Status in Page Header (Telerik Reporting Expression)\nDESCRIPTION: Expression that displays the group name, indicates if the group is continued from a previous page, and shows if another group starts on the same page. This works for reports with a single group level.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/repeat-report-group-names-on-each-page.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\n= PageExec(\"textBox2\", Fields.Group) + \nIIF(PageExec(\"group\", Fields.Value) = PageExec(\"textBox2\", Fields.Value), \"\", \"-Continued \") + \nIIF(PageExec(\"textBox2\", Fields.Group) = PageExec(\"textBox2\", Last(Fields.Group)), \"\", \" / \" + PageExec(\"textBox2\", Last(Fields.Group)))\n```\n\n----------------------------------------\n\nTITLE: Instantiating Converter and Executing Conversion in C#\nDESCRIPTION: This snippet shows how to call the Converter class's Convert method from the Main method in a C# console application. It specifies a directory containing Crystal Report files (.rpt) for conversion, making use of the previously defined Converter and ConsoleLogger classes. Ensure that all necessary Telerik and Crystal Reports assemblies are referenced correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/crystal-reports-convert-programmatically.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nstatic void Main(string[] args)\n{\n\tconst string crystalReportsFolder = @\"c:\\crystal-reports\";\n\tnew CrystalReportsConverter.Converter()\n\t\t.Convert(crystalReportsFolder);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing First Value from UserIdentity.Context in Report Expression\nDESCRIPTION: Shows how to retrieve the first value from the UserIdentity.Context collection using an expression. This approach allows passing custom objects to reports dynamically without traditional parameter methods.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-useridentity-context-to-pass-custom-objects-to-report.md#2025-04-21_snippet_0\n\nLANGUAGE: telerik-reporting-expression\nCODE:\n```\n= Item(0, UserIdentity.Context.Values)\n```\n\n----------------------------------------\n\nTITLE: WPF XAML Interactive Report Rendering\nDESCRIPTION: Renders a report in XAML for WPF with interactive page layout. Requires multi-stream rendering with RenderReport method. Telerik internal use.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/export-formats.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.XamlRendering.WpfReportInteractive, Telerik.Reporting, Version=x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Binding Redirects for WebAPI in Web.config\nDESCRIPTION: XML configuration that sets up binding redirects for System.Web.Http and System.Net.Http.Formatting assemblies. This is necessary when using a newer version of Microsoft.AspNet.WebApi.WebHost than what Telerik Reporting was built against.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/add-rest-web-api-to-web-application.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\t...\n\t<configuration>\n\t\t<runtime>\n\t\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t\t<dependentAssembly>\n\t\t\t\t\t<assemblyIdentity name=\"System.Web.Http\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\"/>\n\t\t\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"5.1.0.0\"/>\n\t\t\t\t</dependentAssembly>\n\t\t\t\t<dependentAssembly>\n\t\t\t\t\t<assemblyIdentity name=\"System.Net.Http.Formatting\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\"/>\n\t\t\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"5.1.0.0\"/>\n\t\t\t\t</dependentAssembly>\n\t\t\t</assemblyBinding>\n\t\t</runtime>\n\t</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Config with Animations\nDESCRIPTION: Sets up the application configuration for Angular, enabling animations using the provideAnimations function in app.config.ts\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-standalone-components.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ApplicationConfig } from '@angular/core';\n\timport { provideRouter } from '@angular/router';\n\timport { routes } from './app.routes';\n\timport { provideAnimations } from '@angular/platform-browser/animations';\n\n\texport const appConfig: ApplicationConfig = {\n\t\tproviders: [provideRouter(routes), provideAnimations()]\n\t};\n```\n\n----------------------------------------\n\nTITLE: Error Message for Disabled BinaryFormatter in .NET 5\nDESCRIPTION: The error message displayed when BinaryFormatter serialization is disabled in a .NET 5 application using Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/binaryformatter-exception-after-upgrade-to-net5.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError registering the viewer with the service.\nAn error has occurred.\nBinaryFormatter serialization and deserialization are disabled within this application. See https://aka.ms/binaryformatter for more information.\n```\n\n----------------------------------------\n\nTITLE: Configuring fontLibrary in JSON Configuration File\nDESCRIPTION: This example demonstrates how to configure the font library settings using a JSON configuration file. It disables default font locations and specifies a custom font directory with recursive subfolder search enabled.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/fontlibrary-element.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"telerikReporting\": {\n\t\"fontLibrary\": {\n\t\t\"useDefaultLocations\": \"false\",\n\t\t\"fontLocations\": [\n\t\t\t{\n\t\t\t\t\"path\": \"/usr/customFonts/trueType\",\n\t\t\t\t\"searchSubfolders\": \"true\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration of typeValidation Element in JSON\nDESCRIPTION: JSON configuration example showing the default typeValidation element setup with both validation types enabled.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/typeValidation-element.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"typeValidation\": {\n\t\"validateExpressionTypes\": \"true\",\n\t\"validateSerializationTypes\": \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Table\nDESCRIPTION: Configuration table showing the affected product and report item specifications for the SqlDataSource wizard issue.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/data-provider-is-missing-in-the-sqldatasource-wizard.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<table>\n\t<tr>\n\t\t<td>Product</td>\n\t\t<td>Progress® Telerik® Reporting</td>\n\t</tr>\n\t<tr>\n\t\t<td>Report Item</td>\n\t\t<td>SqlDataSource component</td>\n\t</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Initial TypeScript Component Implementation\nDESCRIPTION: Component code showing the problematic implementation where 'this' context is lost in the event handler\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/angular-component-properties-in-viewer-events.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class AppComponent {\n\tisReportRendered = false;\n\t...\n\treportRendered(e: any, args: any) {\n\t\tthis.isReportRendered = true; // run-time error: isReportRendered is undefined here\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SqlDataSource with Stored Procedure in VB.NET\nDESCRIPTION: This VB.NET code snippet shows how to configure a SqlDataSource component to use a stored procedure by setting the SelectCommand and SelectCommandType properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/selecting-data-with-the-sqldatasource-component.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim sqlDataSource As New SqlDataSource()\nsqlDataSource.ConnectionString = \"Data Source=MYSERVER;Initial Catalog=AdventureWorks;Integrated Security=True\"\nsqlDataSource.SelectCommand = \"GetAllContacts\"\nsqlDataSource.SelectCommandType = SqlCommandType.StoredProcedure\n```\n\n----------------------------------------\n\nTITLE: Hiding Image Rendering Extension via JSON configuration\nDESCRIPTION: This JSON configuration snippet hides the Image rendering extension from the list of available rendering extensions in Telerik Reporting. This is useful on Linux machines, where the Image rendering extension may produce inconsistent results due to graphics library incompatibilities. By setting 'visible' to 'false', the extension is effectively disabled.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/dot-net-core-support.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"extensions\": [\n\t\t{\n\t\t\t\"name\": \"IMAGE\",\n\t\t\t\"visible\": \"false\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring ReportDesignerController in NSwag Configuration\nDESCRIPTION: Example of how to configure the ReportDesignerController to be ignored by NSwag using ApiExplorerSettings attribute.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/conflicting-actions-error-in-swagger-generation-net-core.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ApiExplorerSettings(IgnoreApi = true)]\n[Route(\"api/reportdesigner\")]\npublic class ReportDesignerController : ReportDesignerControllerBase\n{\n    public ReportDesignerController(IReportDesignerServiceConfiguration reportDesignerServiceConfiguration, IReportServiceConfiguration reportServiceConfiguration)\n        : base(reportDesignerServiceConfiguration, reportServiceConfiguration)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure File Download in Azure Pipelines (YAML)\nDESCRIPTION: This YAML pipeline snippet demonstrates how to download a secure file (telerik-license.txt) containing the license key and then references it in a subsequent MSBuild task. The `DownloadSecureFile@1` task downloads the secure file, and the `TELERIK_LICENSE_PATH` environment variable is set to the secure file path using `$(DownloadTelerikLicenseFile.secureFilePath)`. This eliminates size limitations on pipeline variables.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/licensing/add-license-key-ci-services.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n````yaml\n- task: DownloadSecureFile@1\n  name: DownloadTelerikLicenseFile # defining the 'name' is important\n  displayName: 'Download Telerik License Key File'\n  inputs:\n    secureFile: 'telerik-license.txt'\n\n- task: MSBuild@1\n  displayName: 'Build Project'\n  inputs:\n    solution: 'myapp.csproj'\n    platform: Any CPU\n    configuration: Release\n    msbuildArguments: '/p:RestorePackages=false'\n  env:\n    # use the name.secureFilePath value to set TELERIK_LICENSE_PATH\n    TELERIK_LICENSE_PATH: $(DownloadTelerikLicenseFile.secureFilePath)\n````\n```\n\n----------------------------------------\n\nTITLE: Excel 2003 Export Error Stack Trace\nDESCRIPTION: Stack trace of the InvalidOperationException that occurs when attempting to export a report with overlapping items to Excel 2003 format. The error indicates an attempt to get a range that intersects with an already merged range.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/attempting-to-get-range-that-intersects-with-an-already-merged-range.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSystem.InvalidOperationException: Attempting to get range {X,Y}{X,Y},Merged=False,Parent=Telerik.Reporting.OpenXmlRendering.Spreadsheet.Worksheet, that intersects with an already merged range.\n   at Telerik.Reporting.OpenXmlRendering.Spreadsheet.Worksheet.GetRange(Int32 col, Int32 row, Int32 colSpan, Int32 rowSpan)\n   at Telerik.Reporting.ExcelRendering.RenderingItem.GetRange(IWorksheet worksheet, TableLayoutInfo layoutInfo)\n   at Telerik.Reporting.ExcelRendering.RenderingItem.Render(IWorksheet worksheet, TableLayoutInfo layoutInfo)\n   at Telerik.Reporting.ExcelRendering.RenderingItemContainer.RenderInternal(IWorksheet worksheet, TableLayoutInfo layoutInfo)\n   at Telerik.Reporting.ExcelRendering.RenderingItemContainer.RenderInternal(IWorksheet worksheet, TableLayoutInfo layoutInfo)\n   at Telerik.Reporting.ExcelRendering.Section.RenderInternal(IWorksheet worksheet, TableLayoutInfo layoutInfo)\n   at Telerik.Reporting.ExcelRendering.Group.RenderInternal(IWorksheet worksheet, TableLayoutInfo layoutInfo)\n   at Telerik.Reporting.ExcelRendering.Group.RenderInternal(IWorksheet worksheet, TableLayoutInfo layoutInfo)\n   at Telerik.Reporting.ExcelRendering.RenderingItemContainer.RenderInternal(IWorksheet worksheet, TableLayoutInfo layoutInfo)\n   at Telerik.Reporting.ExcelRendering.Report.RenderInternal(IWorksheet worksheet, TableLayoutInfo layoutInfo)\n   at Telerik.Reporting.OpenXmlRendering.Spreadsheet.SpreadsheetReport.Telerik.Reporting.Processing.IRenderingExtension.Render(Report report, Hashtable renderingContext, Hashtable deviceInfo, CreateStream createStreamCallback, EvaluateHeaderFooterExpressions evalHeaderFooterCallback)\n   at Telerik.Reporting.Processing.ReportProcessor.RenderCore(ExtensionInfo extensionInfo, IList`1 reports, Hashtable deviceInfo, IRenderingContext renderingContext, CreateStream createStreamCallback)\n   at Telerik.ReportViewer.WebForms.ReportExportOperation.RenderReport(String format, IList`1 processingReports, Hashtable deviceInfo, IRenderingContext renderingContext)\n   at Telerik.ReportViewer.WebForms.ReportRenderOperation.PerformOperationOverride()\n   at Telerik.ReportViewer.WebForms.BasicHandler.ProcessRequest(HttpContext context)\n   at System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()\n   at System.Web.HttpApplication.ExecuteStepImpl(IExecutionStep step)\n   at System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)\n```\n\n----------------------------------------\n\nTITLE: Removing Gridlines Configuration\nDESCRIPTION: Procedure for hiding major and minor gridlines by setting the Visible property to False\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/formatting-a-graph/gridlines.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Click the gridlines you want to remove. The selected gridlines properties are listed in the __Property Browser__.\n1. Set the __Visible__ property to __False__.\n```\n\n----------------------------------------\n\nTITLE: Displaying Continuation Information for Multiple Nested Groups (Telerik Reporting Expression)\nDESCRIPTION: Expression that displays group information in the Page Header only for groups that continue from the previous page. This approach is suitable for reports with multiple nested groups.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/repeat-report-group-names-on-each-page.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= IIF(PageExec(\"group\", Fields.Value) = PageExec(\"textBox2\", Fields.Value), \"\", PageExec(\"textBox2\", Fields.Group) + \"-Continued \")\n```\n\n----------------------------------------\n\nTITLE: Attach Items Events Example in C#\nDESCRIPTION: This C# snippet provides an example of how to correctly attach events for report items during the ItemDataBinding event of the report, a critical aspect when using out-proc session state.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\Processing\\OutProcSnippets.cs region=AttachItemsEvents}}\n```\n\n----------------------------------------\n\nTITLE: Configuring TelerikLayout\nDESCRIPTION: Setup for the TelerikLayout component in MainLayout.razor\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/how-to-use-native-blazor-report-viewer.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n@inherits LayoutComponentBase\n\n<TelerikRootComponent>\n\t@Body\n</TelerikRootComponent>\n```\n\n----------------------------------------\n\nTITLE: Dependencies Version Numbers\nDESCRIPTION: Lists of version numbers for various dependencies including Telerik UI Controls, jQuery, Angular, and other required packages\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2020/r3-2020-sp1.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTelerik UI Controls for WPF: 2020.3.1020.40\nTelerik UI Controls for WPF .NET Core: 2020.3.1020.310\nTelerik UI Controls for Silverlight: 2020.3.1020.1050\nKendo UI: 2015.3.1111 or later\njQuery: 1.9.1 or later (3.2.1 for Angular)\nAngular: 4.0.0 or later\nNewtonsoft.Json: 9.0.1 or later (.NET Framework), 12.0.3 or later (.NET Core)\nMicrosoft.AspNet.WebApi.Client: 4.0.30506 or later (.NET Framework), 5.2.7 or later (.NET Core)\nServiceStack: 3.9.70.0\nSQLite: 3.26.0\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportService with Fallback Mechanism in VB.NET\nDESCRIPTION: VB.NET implementation of a ReportService that creates a chain of IReportResolver implementations with fallback capability, trying default resolvers if the custom implementation fails.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-implement-and-use-custom-ireportresolver.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nClass ReportServiceWithResolverFallback\n\tInherits ReportService\n\tShared ReadOnly resolvers As IReportResolver = New ReportResolverWithFallBack(New ReportTypeResolver(New ReportFileResolverWeb(Nothing)))\n\tPublic Sub New()\n\t\tMe.ReportResolver = resolvers\n\tEnd Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Basic Row Alternation Expression\nDESCRIPTION: Expression for basic row alternation using the modulo operator to determine odd/even rows.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/alternate-cell-background-color-by-table-group.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\nRowNumber()%2\n```\n\n----------------------------------------\n\nTITLE: Group-Based Row Alternation Expression\nDESCRIPTION: Expression for alternating rows within a specific group, where groupName is the name of the group to base alternation on.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/alternate-cell-background-color-by-table-group.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n=RowNumber('groupName')%2\n```\n\n----------------------------------------\n\nTITLE: Configuring nuget.config for NuGet Key Authentication - XML\nDESCRIPTION: This XML configuration sets up the nuget.config file to use a NuGet Key for authenticating with the Telerik NuGet server. It specifies 'api-key' as the username and a placeholder for the environment variable containing the clear text password.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/using-nuget-keys.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t\t<packageSources>\n\t\t\t<clear/>\n\t\t\t<add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n\t\t\t<add key=\"MyTelerikFeed\" value=\"https://nuget.telerik.com/v3/index.json\" protocolVersion=\"3\"/>\n\t\t</packageSources>\n\t\t<packageSourceCredentials>\n\t\t\t<MyTelerikFeed>\n\t\t\t<add key=\"Username\" value=\"api-key\" />\n\t\t\t<add key=\"ClearTextPassword\" value=\"%MY_API_KEY%\" />\n\t\t\t</MyTelerikFeed>\n\t\t</packageSourceCredentials>\n\t\t...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Telerik Reporting CDN URL Structure\nDESCRIPTION: This snippet demonstrates the structure of the URL used to access resources from the Telerik Reporting CDN. It shows how to construct the URL using the build version and the name of the desired JavaScript file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/cdn-assets.md#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n`https://reporting.cdn.telerik.com/{{site.buildversion}}/js/*NameOfFile*`\n```\n\n----------------------------------------\n\nTITLE: Excel 2007 Device Information Configuration Options\nDESCRIPTION: A comprehensive table of device information settings for Excel 2007 export, including boolean flags to control page headers, footers, gridlines, formatting, and worksheet generation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-export-formats/excel-2007-device-information-settings.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|__Name__|__Type__|__Description__|\n| ------ | ------ | ------ |\n|UseNativePageHeader|Boolean|Specifies whether to render the report's page header in the native Excel page header section.|\n|UseNativePageFooter|Boolean|Specifies whether to render the report's page footer in the native Excel page footer section.|\n|ShowGridlines|Boolean|Specifies whether Excel Gridlines are visible.|\n|UseMetafile|Boolean|A flag specifying whether to render Graph, Map and Barcode items as Metafile or Bitmap images.|\n|UseExtendedFormatting|Boolean|Format strings used throughout the report will be hard-coded with \"Custom Format\" in Excel.|\n|SplitWorksheetOnPageBreak|Boolean|Specifies whether rendering should generate a new worksheet on soft page breaks.|\n|FormulaPrefix|String|Allows specifying a prefix to escape values that start with a formula identifier.|\n```\n\n----------------------------------------\n\nTITLE: Configuration for Referencing Custom Assembly in Report Designer\nDESCRIPTION: XML configuration to add a reference to a custom assembly in the Telerik Report Designer configuration file, allowing the designer to recognize and use custom business objects.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/steps-on-how-to-add-objectdatadource-in-a-report-designed-in-the-standalone-designer.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n        <AssemblyReferences>\n            <add name=\"MyClassLibrary\"/>\n        </AssemblyReferences>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Adding a Bookmark Action Programmatically in VB.NET\nDESCRIPTION: Demonstrates how to add a 'NavigateToBookmarkAction' to a report item programmatically in VB.NET. This allows users to click and navigate to a specified bookmark within a report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/bookmark-action.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\ActionSnippets.vb region=AddNewNavigateToBookMarkSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Telerik.Reporting Configuration Section in XML Configuration\nDESCRIPTION: This snippet shows how to declare the Telerik.Reporting configuration section in the configSections element of an XML-based configuration file. The section must be the first child element of the configuration root.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<configSections>\n\t\t<section\n\t\t\t\tname=\"Telerik.Reporting\"\n\t\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n\t\t\t\tallowLocation=\"true\"\n\t\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\t…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Selecting Product Categories - SQL Query\nDESCRIPTION: This SQL query retrieves product category IDs and names, which will be used to populate the master report in the Telerik Reporting framework. It fetches data from the ProductCategory table in the AdventureWorks database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-master-detail-report-using-subreport-item.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ProductCategoryID,Name FROM Production.ProductCategory\n```\n\n----------------------------------------\n\nTITLE: Telerik Reporting CDN Web Report Designer Example\nDESCRIPTION: This snippet provides an example URL for accessing the Web Report Designer JavaScript file from the Telerik Reporting CDN.  It illustrates the specific URL format using the `webReportDesigner.min.js` file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/cdn-assets.md#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n`https://reporting.cdn.telerik.com/{{site.buildversion}}/js/webReportDesigner.min.js`\n```\n\n----------------------------------------\n\nTITLE: Correctly Importing ReportingAngularViewerModule in Angular Root Module\nDESCRIPTION: This code snippet shows the proper way to import the ReportingAngularViewerModule in the root AppModule to avoid the 'Providers from the BrowserModule have already been loaded' error. The module must be imported in the root module rather than in a feature module.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/providers-from-browsermodule-already-loaded-narv.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ReportingAngularViewerModule } from '@progress/telerik-angular-native-report-viewer';\n\n@NgModule({\n\tdeclarations: [\n\t\tAppComponent\n\t],\n\timports: [\n\t\tBrowserModule,\n\t\tAppRoutingModule,\n\t\tReportingAngularViewerModule\n\t],\n\tproviders: [],\n\tbootstrap: [AppComponent]\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Table for Telerik Reporting\nDESCRIPTION: HTML table showing the product environment details for Progress Telerik Reporting implementation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-print-dialog-without-displaying-report-on-webpage.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n\t<tr>\n\t\t<td>Product</td>\n\t\t<td>Progress® Telerik® Reporting</td>\n\t</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Telerik Reporting Design Components Assembly in GAC\nDESCRIPTION: This snippet shows the file path to the Telerik.Reporting.Design.Components assembly in the Global Assembly Cache (GAC). This assembly needs to be manually loaded to resolve the missing wizards issue.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/missing-telerik-reporting-toolbox-wizards-in-visual-studio-2017.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\Telerik.Reporting.Design.Components\\v4.0_13.0.19.116__a9d7983dfcc261be\n```\n\n----------------------------------------\n\nTITLE: Custom LINQ Query Method for Optimized Data Retrieval in C#\nDESCRIPTION: Demonstrates a custom method using a LINQ query to retrieve only necessary data for the report, avoiding lazy loading issues. This is the most flexible and efficient method for retrieving data from the Telerik Data Access Model.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/retrieving-data-from-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<ProductInfo> GetProductInfos()\n{\n    return from p in this.Products\n           select new ProductInfo\n           {\n               ProductID = p.ProductID,\n               Name = p.Name,\n               ProductNumber = p.ProductNumber,\n               ListPrice = p.ListPrice,\n               Color = p.Color,\n               SubcategoryName = p.ProductSubcategory.Name,\n               CategoryName = p.ProductSubcategory.ProductCategory.Name\n           };\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Record Count Expression for Sub-Report Visibility\nDESCRIPTION: Expression to determine visibility of ReportHeader/ReportFooter sections based on the count of records in the data source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-hide-subreport-with-no-data.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n= Count(Fields.SomeFieldValue) > 0\n```\n\n----------------------------------------\n\nTITLE: Setting TELERIK_LICENSE_PATH using PowerShell in Azure Pipelines\nDESCRIPTION: This PowerShell script sets the `TELERIK_LICENSE_PATH` environment variable to the secure file path within an Azure DevOps Classic Pipeline.  It uses the `telerikLicense.secureFilePath` property (output variable from the \"Download secure file\" task) to set the environment variable. This allows Telerik.Licensing to find the license key during the build process.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/licensing/add-license-key-ci-services.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n````powershell\nWrite-Host \"Setting TELERIK_LICENSE_PATH to $(telerikLicense.secureFilePath)\"\nWrite-Host \"##vso[task.setvariable variable=TELERIK_LICENSE_PATH;]$(telerikLicense.secureFilePath)\"\n````\n```\n\n----------------------------------------\n\nTITLE: Resetting Visual Studio Toolbox - Removing Toolbox Registry Keys\nDESCRIPTION: Removes the ToolboxControlsInstaller_AssemblyFoldersExCache and ToolboxControlsInstallerCache registry keys for the specified Visual Studio instance. This clears cached information about toolbox controls, forcing Visual Studio to rebuild the toolbox.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n\"[HiveName]\\Software\\Microsoft\\VisualStudio\\16.0_[InstanceID]\\ToolboxControlsInstaller_AssemblyFoldersExCache\"\n```\n\nLANGUAGE: text\nCODE:\n```\n\"[HiveName]\\Software\\Microsoft\\VisualStudio\\16.0_[InstanceID]\\ToolboxControlsInstallerCache\"\n```\n\n----------------------------------------\n\nTITLE: Using PageCount Function with Scope in Telerik Reporting (C#)\nDESCRIPTION: Shows how to use the PageCount function with a scope and aggregate function to calculate page counts for specific groups or sections in the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/page-functions.md#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n= PageCount(\"group1\", Fields.GroupName)\n```\n\n----------------------------------------\n\nTITLE: Database Connection Error Message\nDESCRIPTION: Error message shown when the application fails to establish database connection due to duplicate DbProviderFactories configuration entries.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/unable-to-establish-a-connection-to-the-database-when-the-application-is-deployed.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUnable to establish a connection to the database. Please verify that your connection string is valid. In case you use a named connection string from\\nthe application configuration file, make sure the name is correct and the connection string settings are present in the configuration file of your\\napplication.\\n------------- InnerException -------------\\nThe 'DbProviderFactories' section can only appear once per config file.\n```\n\n----------------------------------------\n\nTITLE: Setting 100% Height to ASP.NET WebForms Report Viewer Using HTML and CSS\nDESCRIPTION: This code snippet demonstrates how to set up the HTML structure and CSS styling to ensure the ASP.NET WebForms Report Viewer displays at 100% height. The key is to set height:100% for all parent elements in the DOM tree including html, body, form, and container div.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-set-100-percent-height-to-the-asp-net-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html xmlns=\"http://www.w3.org/1999/xhtml\" id=\"html\">\n<head runat=\"server\">\n  <title>telerik Report Viewer</title>\n  <style type=\"text/css\">   \n  html#html, body#body, form#form1, div#content\n  { \n    height: 100%;\n  }\n  </style>\n</head>\n<body id=\"body\">\n  <form id=\"form1\" runat=\"server\">              \n  <div id=\"content\">\n  \t<telerik:ReportViewer ID=\"ReportViewer1\" runat=\"server\" height=\"100%\"/>\n  </div>\n  </form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Startup.cs for Telerik Reporting in ASP.NET Core\nDESCRIPTION: Configures services and middleware in the Startup class to support Telerik Reporting, including setting up the ReportServiceConfiguration and necessary dependencies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-reporting-net-core-mvc.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class Startup\n{\n\tpublic Startup(IConfiguration configuration)\n\t{\n\t\tConfiguration = configuration;\n\t}\n\n\tpublic IConfiguration Configuration { get; }\n\n\t// This method gets called by the runtime. Use this method to add services to the container.\n\tpublic void ConfigureServices(IServiceCollection services)\n\t{\n\t\tservices.AddControllersWithViews();\n\t\tservices.AddControllers();\n\t\tservices.Configure<IISServerOptions>(options =>\n\t\t{\n\t\t\toptions.AllowSynchronousIO = true;\n\t\t});\n\t\tservices.AddRazorPages().AddNewtonsoftJson();\n\t\t// Configure dependencies for ReportsController.\n\t\tservices.TryAddSingleton<IReportServiceConfiguration>(sp =>\n\t\t\tnew ReportServiceConfiguration\n\t\t\t{\n\t\t\t\tReportingEngineConfiguration = ConfigurationHelper.ResolveConfiguration(sp.GetService<IWebHostEnvironment>()),\n\t\t\t\tHostAppId = \"ReportingCore3App\",\n\t\t\t\tStorage = new FileStorage(),\n\t\t\t\tReportResolver = new ReportFileResolver(\n\t\t\t\t\tSystem.IO.Path.Combine(sp.GetService<IWebHostEnvironment>().ContentRootPath, \"Reports\"))\n\t\t\t});\n\t}\n\n\t// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n\tpublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n\t{\n\t\tif (env.IsDevelopment())\n\t\t{\n\t\t\tapp.UseDeveloperExceptionPage();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tapp.UseExceptionHandler(\"/Home/Error\");\n\t\t}\n\t\tapp.UseStaticFiles();\n\t\tapp.UseRouting();\n\t\tapp.UseAuthorization();\n\n\t\tapp.UseEndpoints(endpoints =>\n\t\t{\n\t\t\tendpoints.MapControllers();\n\t\t\tendpoints.MapControllerRoute(\n\t\t\t\tname: \"default\",\n\t\t\t\tpattern: \"{controller=Home}/{action=Index}/{id?}\");\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Assembly Binding Redirect Configuration\nDESCRIPTION: Configuration example mentioning the need for binding redirect when using DocumentFormat.OpenXml version 2.5.5631.0 or newer versions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/missing-docx-xlsx-pptx-xps-export-options.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Binding redirect required for DocumentFormat.OpenXml.dll assembly when using version 2.5.5631.0 or newer -->\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with Custom Template URL\nDESCRIPTION: Demonstrates how to configure Report Viewer with a custom template URL, allowing modification of toolbar button configuration\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hide-or-change-html5-report-viewer-toolbar-buttons.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n    .telerik_ReportViewer({\n        serviceUrl: \"/api/reports/\",\n        templateUrl: /ReportViewer/templates/telerikReportViewerTemplate.html\n        ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with Custom Template in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the telerik_ReportViewer plugin with a custom template URL. It sets the service URL, template URL, and report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/styling-and-appearance/providing-custom-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\").telerik_ReportViewer({\n\tserviceUrl: \"../api/reports/\",\n\ttemplateUrl: '/ReportViewer/templates/telerikReportViewerTemplate.html',\n\treportSource: { report: \"product catalog.trdp\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting SkipBlankPages Property in Telerik Reporting\nDESCRIPTION: To ensure reports render properly when no data is returned, set the Report.SkipBlankPages property to False. This will maintain the previous behavior where header and footer sections are still rendered even without data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/corrupted-reports-when-dataset-is-empty.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nReport.SkipBlankPages = false;\n```\n\n----------------------------------------\n\nTITLE: Loading Localized Strings for Web Report Designer in JavaScript\nDESCRIPTION: This code snippet demonstrates how to load localized strings for the Web Report Designer. It imports a JavaScript file containing the strings and assigns them to a global variable.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/localizing-the-web-report-designer.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n\timport(\"/Scripts/WebReportDesignerStringsBase-{{buildversion}}.js\").then((result) => {\n\t\twindow.telerikWebDesignerResources = new result.WebReportDesignerStringsBase();\n\t});\n\t</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting Extensions for Azure Web Apps - XML\nDESCRIPTION: This XML configuration sets the properties for the rendering extensions in the Telerik Reporting module to use Bitmap instead of Metafiles, which is necessary for avoiding GDI+ errors when exporting reports in Azure Web Apps.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/outofmemoryexception-on-exporting-or-printing-telerik-report-from-azure-webapps.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration> \n\t\t<configSections>\n\t\t\t<section\n\t\t\t\tname=\"Telerik.Reporting\"\n\t\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\"\n\t\t\t\tallowLocation=\"true\"\n\t\t\t\tallowDefinition=\"Everywhere\"/>\n\t\t</configSections>\n\t\t…\n\t\t<Telerik.Reporting>\n\t\t\t<Extensions>\n\t\t\t\t<Render>\n\t\t\t\t\t<Extension name=\"DOCX\" >\n\t\t\t\t\t\t<Parameters>\n\t\t\t\t\t\t\t<Parameter name=\"UseMetafile\" value=\"false\"/>\n\t\t\t\t\t\t</Parameters>\n\t\t\t\t\t</Extension>\n\t\t\t\t\t<Extension name=\"XLSX\" >\n\t\t\t\t\t\t<Parameters>\n\t\t\t\t\t\t\t<Parameter name=\"UseMetafile\" value=\"false\"/>\n\t\t\t\t\t\t</Parameters>\n\t\t\t\t\t</Extension>\n\t\t\t\t\t<Extension name=\"PPTX\" >\n\t\t\t\t\t\t<Parameters>\n\t\t\t\t\t\t\t<Parameter name=\"UseMetafile\" value=\"false\"/>\n\t\t\t\t\t\t</Parameters>\n\t\t\t\t\t</Extension>\n\t\t\t\t\t<Extension name=\"RTF\" >\n\t\t\t\t\t\t<Parameters>\n\t\t\t\t\t\t\t<Parameter name=\"UseMetafile\" value=\"false\"/>\n\t\t\t\t\t\t</Parameters>\n\t\t\t\t\t</Extension>\n\t\t\t\t</Render>\n\t\t\t</Extensions>\n\t\t</Telerik.Reporting>\n\t\t…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Standard Numeric Format Strings for Excel Export in Telerik Reporting\nDESCRIPTION: This snippet lists the subset of .NET string formats supported by the Excel rendering extension in Telerik Reporting for numeric values. These formats are applied through the TextBox.Format property.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/design-considerations-for-report-rendering/excel-rendering-design-considerations.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* C or c (Currency)\n* N or n (Number)\n* G or g (General)\n* P or p (Percent)\n* and others ...\n```\n\n----------------------------------------\n\nTITLE: Configuring External Assembly References in Application Config\nDESCRIPTION: XML configuration example showing how to reference external assemblies in a Telerik Reporting application. The configuration includes the Telerik.Reporting section, assembly probing paths, and assembly references.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/deploying-trdx-(xml-report-definition)-that-uses-external-assembly.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<configSections>\n\t<section \n\t\tname=\"Telerik.Reporting\"\n\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n\t\tallowLocation=\"true\"\n\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<probing privatePath=\"MySubDir; MySubDir\\SubDir\"/>\n\t\t</assemblyBinding>\n\t</runtime>\n\n\t<Telerik.Reporting>\n\t\t<AssemblyReferences>\n\t\t\t<add name=\"MyAssembly\" version=\"1.0.0.0\" culture=\"neutral\" publicKeyToken=\"null\" />\n\t\t</AssemblyReferences>\n\t</Telerik.Reporting>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding NuGet Source Using CLI in GitHub Actions - Bash\nDESCRIPTION: This Bash command adds a NuGet package feed to a GitHub Actions workflow via the CLI. It specifies 'api-key' as the username and retrieves the password from GitHub secrets, allowing for secure authentication.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/using-nuget-keys.md#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet nuget add source 'MyTelerikFeed' --source 'https://nuget.telerik.com/v3/index.json' --username 'api-key' --password '${{ secrets.TELERIK_NUGET_KEY }}' --configfile './nuget.config' --store-password-in-clear-text\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request to Retrieve Telerik Reporting REST Service Version\nDESCRIPTION: HTTP GET request to the /api/reports/version endpoint to retrieve the Telerik Reporting REST Service version. The successful response has a 200 OK status code and returns a string representing the service version.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/general-api/get-version.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/reports/version\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for Table Column Widths in Markdown\nDESCRIPTION: This CSS snippet sets specific widths for the first two columns in a table within the Markdown document. It's used to control the layout of tables in the rendered output.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/design-considerations-for-report-rendering/pdf-rendering-design-considerations.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<style>\ntable th:first-of-type {\n    width: 20%;\n}\ntable th:nth-of-type(2) {\n    width: 80%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring SubReport DataSource Binding\nDESCRIPTION: Demonstrates how to bind a SubReport's DataSource to the parent report's data object, enabling dynamic filtering based on aggregate conditions\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/filter-data-based-on-aggregate-function-through-subreport.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n1. Add a `SubReport` item in the Report Group Header and use Bindings to set its DataSource to `ReportItem.DataObject`\n```\n\n----------------------------------------\n\nTITLE: Configuring DPI Awareness Using XML Configuration in Telerik Reporting\nDESCRIPTION: This XML snippet demonstrates how to set an application's DPI awareness to PROCESS_SYSTEM_DPI_AWARE using the Telerik.Reporting configuration section. This setting helps ensure proper rendering of reports on high-DPI displays.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/dpiaware-element.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t...\n\t<dpiAware dpiAwareness=\"PROCESS_SYSTEM_DPI_AWARE\"></dpiAware>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Bindings for ReportServiceClient in C#\nDESCRIPTION: This C# code snippet illustrates how to implement the IReportServiceClientFactory interface to create a ReportServiceClient with a custom BasicHttpBinding. The ReportServiceClientFactory then integrates with the Silverlight Report Viewer to enable the use of custom bindings. Dependencies include Telerik.Reporting.Service.SilverlightClient and Telerik.ReportViewer.Silverlight, as well as System.ServiceModel. The snippet highlights the configuration of binding parameters such as MaxBufferSize and timeouts.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/silverlight-application/using-custom-bindings.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.ServiceModel;\nusing System.Windows.Controls;\nusing Telerik.Reporting.Service.SilverlightClient;\nusing Telerik.ReportViewer.Silverlight;\n\npublic partial class MainPage : UserControl, IReportServiceClientFactory\n{\n\tpublic MainPage()\n\t{\n\t\tInitializeComponent();\n\n\t\tthis.ReportViewer1.ReportServiceClientFactory = this;\n\t}\n\n\tReportServiceClient IReportServiceClientFactory.Create(System.Uri remoteAddress)\n\t{\n\t\tvar binding = new BasicHttpBinding() // or BasicHttpBinding(BasicHttpSecurityMode.Transport) overload if SSL is used\n\t\t{\n\t\t\tMaxBufferSize = int.MaxValue,\n\t\t\tMaxReceivedMessageSize = int.MaxValue,\n\t\t\tReceiveTimeout = new TimeSpan(0, 15, 0),\n\t\t\tSendTimeout = new TimeSpan(0, 15, 0)\n\t\t};\n\n\t\tvar endpointAddress = new EndpointAddress(remoteAddress);\n\n\t\treturn new ReportServiceClient(binding, endpointAddress);\n\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Binding SubReport DataSource to Grandparent's DataObject\nDESCRIPTION: This snippet shows how to access the DataObject of a grandparent report item. It allows retrieving data from a higher level in the report hierarchy. This is achieved by navigating the Parent property twice: `ReportItem.Parent.Parent.DataObject`.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-bind-sub-report-to-main-report-s-data.md#2025-04-21_snippet_1\n\nLANGUAGE: expression\nCODE:\n```\n\nProperty path: DataSource\nExpression: =ReportItem.Parent.Parent.DataObject\n\n```\n\n----------------------------------------\n\nTITLE: Building .NET project on macOS\nDESCRIPTION: Command to build a .NET project on macOS after setting up the environment and dependencies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/dot-net-core-support.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Post-R3 2016 Report Event Modification\nDESCRIPTION: Example of correctly modifying the Report item in events after R3 2016 using the processing instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/changes-on-items-in-report-events-are-not-applied.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvoid report_NeedDataSource(object sender, EventArgs e)\n{\n\tTelerik.Reporting.Processing.Report processingReport = (Telerik.Reporting.Processing.Report)sender;\n\tprocessingReport.DataSource = GetReportData();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DataSource Path Using Uri Function in Telerik Reporting Expression\nDESCRIPTION: This code shows how to use the Uri utility function in a Binding expression to set the file path of a CSV or JSON DataSource through a report parameter. The expression converts the parameter value to a relative Uri that can be consumed by the DataSource component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/set-the-file-path-of-json-or-csv-datasource-through-report-parameter.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\n= Uri(Parameters.uriParameter.Value, \"relative\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Epel Repository Installation\nDESCRIPTION: Command to verify that the Epel repository has been successfully installed by listing all available repositories.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-install-libgdiplus-centos-amazon-linux.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyum repolist\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Series for Funnel Chart in Telerik Reporting\nDESCRIPTION: This snippet demonstrates how to configure two bar series in Telerik Reporting to achieve a funnel chart effect by adjusting the X-axis expression for each series. The first series calculates the sum of values divided by 2, while the second series uses the negative of this calculation to display on opposite sides of the Y-axis.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-funnel-chart-telerik-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nX-axis expression for first series: `= Sum(Fields.Value) / 2.0`\nX-axis expression for second series: `= - Sum(Fields.Value) / 2.0`\n```\n\n----------------------------------------\n\nTITLE: Basic File Cache Provider Configuration in XML\nDESCRIPTION: Configures the Telerik Reporting file cache provider with default settings, using the built-in temporary folder for storing cached files\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-the-file-cache-provider.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<Cache provider=\"File\" />\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Overriding ReportDesignerControllerBase Method with Nullable Parameter in C#\nDESCRIPTION: A C# code snippet showing how to override the GetFolderModel method with a nullable parameter to resolve the error.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/could-not-retrieve-information-for-folder-web-designer.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic override IActionResult GetFolderModel([FromQuery] string? uri)\n{\n    return base.GetFolderModel(uri);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Web Report Designer Interop\nDESCRIPTION: This HTML snippet adds a dedicated interop script necessary for Telerik Web Report Designer functionality, placed within the body element to defer loading.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-blazor-application.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"_content/Telerik.WebReportDesigner.Blazor/telerikWebReportDesignerInterop.js\" defer></script>\n\t@* Or this one if using the Telerik.WebReportDesigner.Blazor.Trial package *@\n\t@*<script src=\"_content/Telerik.WebReportDesigner.Blazor.Trial/telerikWebReportDesignerInterop.js\" defer></script>*@\n```\n\n----------------------------------------\n\nTITLE: Unhandled exception System.TypeInitializationException stack trace\nDESCRIPTION: This is a stack trace of a potential unhandled exception that might occur due to a missing libdl dependency when using libgdiplus on CentOS.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-build-and-Install-libgdiplus-linux.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nUnhandled exception. System.TypeInitializationException: The type initializer for 'Telerik.Reporting.Processing.Common.FontContainer' threw an exception.\n ---> System.TypeInitializationException: The type initializer for 'Gdip' threw an exception.\n ---> System.DllNotFoundException: Unable to load shared library 'libdl' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: liblibdl: cannot open shared object file: No such file or directory\n   at Interop.Libdl.dlopen(String fileName, Int32 flag)\n   at System.Drawing.SafeNativeMethods.Gdip.LoadNativeLibrary()\n   at System.Drawing.SafeNativeMethods.Gdip..cctor()\n   --- End of inner exception stack trace ---\n   at System.Drawing.SafeNativeMethods.Gdip.GdipNewPrivateFontCollection(IntPtr& fontCollection)\n   at System.Drawing.Text.PrivateFontCollection..ctor()\n   at Telerik.Reporting.Processing.Common.FontContainer..ctor()\n   at Telerik.Reporting.Processing.Common.FontContainer..cctor()\n   --- End of inner exception stack trace ---\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessReportSource(ReportSource reportSource, IRenderingContext context)\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessReportSource(ReportSource reportSource, Hashtable deviceInfo, IRenderingContext context)\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessAndRender(String format, ReportSource reportSource, Hashtable deviceInfo, IRenderingContext renderingContext, CreateStream createStreamCallback)\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessAndRenderStateless(String format, ReportSource reportSource, Hashtable deviceInfo, IRenderingContext renderingContext, CreateStream createStreamCallback)\n   at Telerik.Reporting.Processing.ReportProcessor.<>c__DisplayClass47_0.<RenderReport>b__0(SingleStreamManager sm)\n   at Telerik.Reporting.Processing.ReportProcessor.RenderReportSafe(Func`2 renderCallback, String format, IRenderingContext renderingContext)\n   at Telerik.Reporting.Processing.ReportProcessor.RenderReport(String format, ReportSource reportSource, Hashtable deviceInfo, CancellationToken cancellationToken)\n   at Telerik.Reporting.Processing.ReportProcessor.RenderReport(String format, ReportSource reportSource, Hashtable deviceInfo)\n   at Program.<Main>$(String[] args) in /home/projects/ConsoleApp1/ConsoleApp1/Program.cs:line 10\n```\n\n----------------------------------------\n\nTITLE: Copying Telerik License File in Azure Pipelines using PowerShell\nDESCRIPTION: This PowerShell script copies the downloaded Telerik license file to the repository directory within an Azure DevOps Classic Pipeline. It retrieves the secure file path from the `telerikLicense.secureFilePath` property and copies the file to the specified destination within the repository. The `-Force` parameter ensures that any existing file is overwritten.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/licensing/add-license-key-ci-services.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n````powershell\necho \"Copying $(telerikLicense.secureFilePath) to $(Build.Repository.LocalPath)/telerik-license.txt\"\nCopy-Item -Path $(telerikLicense.secureFilePath) -Destination \"$(Build.Repository.LocalPath)/telerik-license.txt\" -Force\n````\n```\n\n----------------------------------------\n\nTITLE: Corrected Web.config Configuration Without Default Namespace\nDESCRIPTION: The correct configuration of the web.config file without the default namespace, which resolves the DocumentElement exception in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/this-document-already-has-a-documentelement-node-exception.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource for SubReport in Telerik Reporting\nDESCRIPTION: This snippet demonstrates how to define the ReportSource property for a SubReport, allowing for conditional loading of subreports based on the availability of list data in the parent DataSource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hierarchical-report-from-nested-data.md#2025-04-21_snippet_1\n\nLANGUAGE: Telerik Reporting\nCODE:\n```\n\"Property path\\t|\\tExpression\\nReportSource.Uri\\t|\\t= Fields(\"List\") is Null ? Null : \\\"HierarchyFromNestedCollections.trdp\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Getting Image from URL - C# User Function\nDESCRIPTION: This code snippet demonstrates a User Function in C# that retrieves an image from a specified URL without authorization. It makes an HTTP request to the URL, downloads the response stream, and converts it into a Bitmap object for use in a PictureBox.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/the-remote-server-returned-an-error-401-unauthorized-when-using-a-pictureBox-from-url.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static Bitmap GetImage(string url)\\n{\\n    System.Net.WebRequest request = System.Net.WebRequest.Create(url);\\n    System.Net.WebResponse response = request.GetResponse();\\n    System.IO.Stream responseStream = response.GetResponseStream();\\n \\n    Bitmap bitmap = new Bitmap(responseStream);\\n    return bitmap;\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Query for Product Information in Telerik Reporting\nDESCRIPTION: This SQL query retrieves product information including Product Number, Name, and Subcategory from the Production database. Required for binding to the report's SqlDataSource.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/how-to-cascade-parameters-with-applied-filtering-on-report-level.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\tProduction.Product.ProductNumber,\n\t\tProduction.Product.Name AS ProductName,\n\t\tProduction.Product.ProductSubcategoryID,\n\t\tProduction.ProductSubcategory.Name AS SubcategoryName\n\tFROM\n\t\tProduction.Product\n\t\tINNER JOIN Production.ProductSubcategory\n\t\t\tON Production.Product.ProductSubcategoryID = Production.ProductSubcategory.ProductSubcategoryID\n```\n\n----------------------------------------\n\nTITLE: Kendo UI Subset Reference\nDESCRIPTION: Reference to the Kendo UI subset JavaScript file containing the default widgets used by the HTML5 Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/requirements-and-browser-support.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"telerikReportViewer.kendo-{{site.buildversion}}.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly References in Telerik Reporting - XML\nDESCRIPTION: This XML snippet shows how to configure the Telerik Reporting Standalone Designer to recognize custom assemblies by editing its configuration file. It includes references to custom assemblies using the AssemblyReferences element. Dependencies include the Telerik.Reporting configuration section, and it requires the specified assembly to exist and be accessible. The main parameter is the name of the custom assembly, and the configuration is expected to be read by the Telerik engine to load necessary resources.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/configuration/extending-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<configSections>\n\t\t<section\n\t\t\tname=\"Telerik.Reporting\"\n\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\"\n\t\t\tallowLocation=\"true\"\n\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\t...\n\t<Telerik.Reporting>\n\t\t<AssemblyReferences>\n\t\t\t<add name=\"MyCustomAssembly\" version=\"1.0.0.0\" culture=\"neutral\" publicKeyToken =\"null\" />\n\t\t</AssemblyReferences>\n\t</Telerik.Reporting>\n</configuration>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n...\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<probing privatePath=\"MyDir;MyDir2\\SubDir\"/>\n\t\t</assemblyBinding>\n\t</runtime>\n\t<Telerik.Reporting>\n\t\t<AssemblyReferences>\n\t\t\t<add name=\"MyCustomAssembly\" version=\"1.0.0.0\" culture=\"neutral\" publicKeyToken =\"null\" />\n\t\t</AssemblyReferences>\n\t</Telerik.Reporting>\n...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic SQL Connection String in JSON\nDESCRIPTION: Example of a basic connection string configuration in appSettings.json that uses System.Data.SqlClient as the default provider.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-5.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"ConnectionStrings\": {\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Resolver Configuration in appsettings.json\nDESCRIPTION: This JSON configuration snippet shows how to define a custom ResourceResolver in appsettings.json for Telerik Reporting. It specifies using a custom implementation, identified by its typeName, to resolve resources instead of using default behaviors. The configuration allows for flexible resource resolution strategies in applications.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/web-report-designer-cannot-preview-reports.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"telerikReporting\": {\n\t\t\"processing\": {\n\t\t\t\"resourceResolver\": {\n\t\t\t\t// The element below represents a custom implementation of resource resolver:\n\t\t\t\t\"provider\": \"custom\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"typeName\",\n\t\t\t\t\t\t\"value\": \"CSharp.Net6.BlazorIntegrationDemo.CustomResourceResolver, CSharp.Net6.BlazorIntegrationDemo\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Toolbar Buttons with JavaScript\nDESCRIPTION: Demonstrates using the 'ready' callback to hide specific toolbar buttons dynamically using jQuery selector\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hide-or-change-html5-report-viewer-toolbar-buttons.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"#reportViewer1\")\n   .telerik_ReportViewer({                \n       serviceUrl: \"api/reports/\",\n       ...\n       ready: function () {\n           $(\"[data-command='telerik_ReportViewer_historyBack']\").parent().hide();\n       }\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding BaseAddress for Custom Report Service in VB.NET\nDESCRIPTION: This VB.NET code snippet shows how to inherit from ReportService and override the BaseAddress property to handle URL rewriting or load balancing scenarios where the Reporting WCF Service URL differs from the browser-displayed URL.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/images-charts-barcodes-and-shapes-are-not-being-displayed-in-the-silverlight-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports System.Collections.Generic\nImports System.Web\nImports Telerik.Reporting.Service\nNamespace CSharp.SilverlightDemo.Web\n  \n    Public Class MyService\n        Inherits ReportService\n        Protected Overrides ReadOnly Property BaseAddress() As Uri\n            Get\n                ' Sample\n  \n                    ' Original logic quoted for reference\n                    'var request = this.HttpContext.Request;\n                    'var response = this.HttpContext.Response;\n                    'return new UriBuilder(request.Url.GetLeftPart(UriPartial.Authority))\n                    '    {\n                    '        Path = response.ApplyAppPathModifier(request.RawUrl)\n                    '    }\n                    '    .Uri;\n                Return New Uri(\"http://www.mysite.com/ReportService.svc\")\n            End Get\n        End Property\n    End Class\nEnd Namespace\n```\n\n----------------------------------------\n\nTITLE: Handling DropDownList Change in ASP.NET Web Forms (VB.NET)\nDESCRIPTION: This VB.NET event handler updates a report parameter based on the selected value of a DropDownList. It is intended for use with a Telerik ReportViewer control. The InstanceReportSource is utilized to access the report and modify the 'Year' report parameter as per the DropDownList's selected item. The report viewer is refreshed afterward. Dependencies: Telerik Reporting, ASP.NET Web Forms. The sender is a DropDownList, and its selected value is assigned to the report parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/modify-textbox-value-with-expression.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nProtected Sub DropDownList1_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles DropDownList1.SelectedIndexChanged\n\t\t Dim reportsource As InstanceReportSource = DirectCast(Me.ReportViewer1.ReportSource, InstanceReportSource)\n\t\t Dim report As Report = DirectCast(reportsource.ReportDocument, Report)\n\t\t report.ReportParameters(\"Year\").Value = DirectCast(sender, DropDownList).SelectedItem.Value\n\t\t ReportViewer1.RefreshReport()\n\tEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Styling Report Items HTML Table\nDESCRIPTION: This HTML table provides a detailed breakdown of styling properties for report items in Telerik Reporting. It includes properties such as BackgroundColor, BorderStyle, Font, and TextAlign, along with their descriptions and default values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/styling-report-items.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n\t<table>\n\t\t<tr>\n\t\t\t<th>Property</th>\n\t\t\t<th>Description</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BackgroundColor</td>\n\t\t\t<td>A Color that represents the background color of the report item.\n\t\t\t\tCan be selected from the widget or written by hand as RGB, RGBA, or Hex color.\n\t\t\t\t<i>\n\t\t\t\tThe default value is Empty, which indicates\n\t\t\t\tthat this property is not set.\n\t\t\t\t</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BackgroundImage</td>\n\t\t\t<td>Represents the image to display in the background of the report item. \n\t\t\t\tSupports BMP, GIF, JPG, JPEG, PNG, ICO, EMF, and WMF image files.\n\t\t\t\t<ul>\n\t\t\t\t\t<li>ImageData - An Image containing the image data of this BackgroundImage. Use this property if you\n\t\t\t\t\t\twant to bind the BackgroundImage to an image that is not in the data source.</li>\n\t\t\t\t\t<li>MimeType - The MIME type of the current BackgroundImage object.</li>\n\t\t\t\t\t<li>Repeat - Indicates how a background image will be repeated.\n\t\t\t\t\t\tThe available values are:\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>NoRepeat - The background image will be displayed only once.</li>\n\t\t\t\t\t\t\t<li>Repeat - The background image will be repeated vertically and horizontally.</li>\n\t\t\t\t\t\t\t<li>RepeatX - The background image will be repeated horizontally.</li>\n\t\t\t\t\t\t\t<li>RepeatY - The background image will be repeated vertically.\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<i>\n\t\t\t\tReport items have no background\n\t\t\t\timage by default.\n\t\t\t\t</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BorderColor</td>\n\t\t\t<td>The border color of the item can be set by using the properties Default, Left, Right, Top, and Bottom.\n\t\t\t\tThe Default property is used to set all border colors at once.\n\t\t\t\t<i>All borders are Black by default.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BorderStyle</td>\n\t\t\t<td>The border style of the item can be set by using the properties Default, Left, Right, Top, and Bottom.\n\t\t\t\tThe Default property is used to set all border styles at once.\n\t\t\t\tThe available border styles are:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>None - No line.</li>\n\t\t\t\t\t<li>Solid - Solid line.</li>\n\t\t\t\t\t<li>Dotted - Dotted line.</li>\n\t\t\t\t\t<li>Dashed - Dashed line.</li>\n\t\t\t\t\t<li>Double - Double solid line.</li>\n\t\t\t\t\t<li>Groove - Grooved line for a sunken border appearance.</li>\n\t\t\t\t\t<li>Ridge - Ridged line for a raised border appearance.</li>\n\t\t\t\t\t<li>Inset - Inset line for a sunken item appearance.</li>\n\t\t\t\t\t<li>Outset - Outset line for a raised item appearance.</li>\n\t\t\t\t</ul>\n\t\t\t\t<i> All borders are BorderType.None by\n\t\t\t\tdefault.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>BorderWidth</td>\n\t\t\t<td>The border width of the item can be set by using the properties Default, Left, Right, Top, and Bottom.\n\t\t\t\tThe Default property is used to set all border widths at once, however, the more specific rules will override the Default setting.\n\t\t\t\tFor example, if you set the Default and then you set only the Top, then the Default will be applied to Bottom, Left, and Right only.\n\t\t\t\t<i>All borders are 1pt wide by default.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Color</td>\n\t\t\t<td>The foreground Color of the report item.\n\t\t\t\tCan be selected from the widget or written by hand as RGB, RGBA, or Hex color.\n\t\t\t\t<i>The default color is Black.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Font</td>\n\t\t\t<td>Defines a particular format for text, including font face, size, and style attributes.\n\t\t\t\tThe Font type exposes the following members:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Bold - <strong>Boolean</strong>. Indicates whether this Font is bold. </li>\n\t\t\t\t\t<li>Italic - <strong>Boolean</strong>. Indicates whether this Font is italic.</li>\n\t\t\t\t\t<li>Name - <strong>String</strong>. The face name of this Font.</li>\n\t\t\t\t\t<li>Size - <strong>Telerik.Reporting.Drawing.Unit</strong>. The size of this Font measured in Units.\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>Strikeout - <strong>Boolean</strong>. Indicates whether this Font specifies a horizontal line\n\t\t\t\t\t\tthrough the font.</li>\n\t\t\t\t\t<li>Style - <strong>FontStyle</strong>\n\t\t\t\t\t\tenumeration that contains style information for this Font.</li>\n\t\t\t\t\t<li>Underline - <strong>Boolean.</strong> Indicates whether this Font is underlined.</li>\n\t\t\t\t</ul>\n\t\t\t\t<i>By default the font of a report item is Arial-Regular, 10pts.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>LineColor</td>\n\t\t\t<td>The Color (stroke) representing the line color of report items that support it, such as lines and\n\t\t\t\tshapes.\n\t\t\t\t<i>By default, the value is Black.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>LineStyle</td>\n\t\t\t<td>Represents the line style of the report item.\n\t\t\t\tThe available values are:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Solid - Solid line.</li>\n\t\t\t\t\t<li>Dotted - Dotted line.</li>\n\t\t\t\t\t<li>Dashed - Dashed line.</li>\n\t\t\t\t</ul>\n\t\t\t\t<i>By default the line style is LineStyle.Solid.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>LineWidth</td>\n\t\t\t<td>Represents the line width of report items that support it, such as lines and shapes.\n\t\t\t\t<i>By default, the width is 1pt.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Padding</td>\n\t\t\t<td>Represents the padding of the report item. You can set the padding of the item by using the properties\n\t\t\t\tLeft, Right, Top, and Bottom.\n\t\t\t\t<i>Padding on all sides is 0 by default.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>TextAlign</td>\n\t\t\t<td>Represents the horizontal alignment of text in the report item. The following horizontal alignments are\n\t\t\t\tavailable:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Left - Specifies that the text is aligned to the left.</li>\n\t\t\t\t\t<li>Center - Specifies that the text is aligned to the center.</li>\n\t\t\t\t\t<li>Right - Specifies that the text is aligned to the right.</li>\n\t\t\t\t\t<li>Justify - Specifies that the text is justified.</li>\n\t\t\t\t</ul>\n\t\t\t\t<i>By default, the TextAlign is Left.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>VerticalAlign</td>\n\t\t\t<td>Represents the vertical alignment of text in the report item. The following vertical alignments are\n\t\t\t\tavailable:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Top - Specifies that the object is aligned to the top.</li>\n\t\t\t\t\t<li>Center - Specifies that the object is aligned to the middle.</li>\n\t\t\t\t\t<li>Bottom - Specifies that the object is aligned to the bottom.</li>\n\t\t\t\t</ul>\n\t\t\t\t<i>By default, the VerticalAlign is Top.</i>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Visible</td>\n\t\t\t<td><strong>Boolean</strong>. Indicates whether the report item is displayed in the rendered document.\n\t\t\t\t<i>The default value is True</i>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Table Data Binding\nDESCRIPTION: Shows how to use conditional expressions to bind table data sources based on distinct count of fields, simulating complex filtering\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/filter-data-based-on-aggregate-function-through-subreport.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n1. Case 1 `= If(CountDistinct(Fields.Name) >= 3, ReportItem.DataObject, Null)`\n2. Case 2 `= If(CountDistinct(Fields.Name) = 2, ReportItem.DataObject, Null)`\n3. Case 3 `= If(CountDistinct(Fields.Name) = 1, ReportItem.DataObject, Null)`\n```\n\n----------------------------------------\n\nTITLE: Configuring DPI Awareness in WinForms Application Manifest (XML)\nDESCRIPTION: This XML snippet demonstrates how to declare a WinForms application as DPI-aware by including a manifest file. Setting the `dpiAware` element to `True/PM` informs Windows that the application handles DPI scaling, preventing blurry or incorrectly sized report viewer content. This ensures correct rendering and printing of reports on high DPI displays.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/windows-forms-report-viewer-scaling-issues-on-higher-dpi.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n````XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<asmv1:assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" xmlns:asmv1=\"urn:schemas-microsoft-com:asm.v1\" xmlns:asmv2=\"urn:schemas-microsoft-com:asm.v2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t<assemblyIdentity version=\"1.0.0.0\" name=\"MyApplication.app\"/>\n\t<asmv3:application  xmlns:asmv3=\"urn:schemas-microsoft-com:asm.v3\" >\n\t<asmv3:windowsSettings xmlns=\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\">\n\t\t<dpiAware>True/PM</dpiAware>\n\t</asmv3:windowsSettings>\n\t</asmv3:application>\n</asmv1:assembly>\n````\n```\n\n----------------------------------------\n\nTITLE: ExecuteCommand Method Signature in C#\nDESCRIPTION: Method signature for executing commands in the Native Blazor Report Viewer. Takes command name and optional command value as parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/api-reference/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvoid ExecuteCommand(string commandName, string commandValue(optional))\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeReferences in XML Configuration for Telerik Reporting\nDESCRIPTION: XML configuration that adds the UserReportBook type to the trusted type references list in the application's XML configuration file (App.config or Web.config). This allows the Telerik Reporting engine to load the type without security exceptions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resolve-userreportbook-loading-exception.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <configSections>\n        <section name=\"Telerik.Reporting\" type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\" allowLocation=\"true\" allowDefinition=\"Everywhere\" />\n    </configSections>\n    <Telerik.Reporting>\n        <TypeReferences>\n            <add typeName=\"Telerik.Reporting.UserReportBook\" assemblyName=\"Telerik.Reporting\" publicKeyToken=\"a9d7983dfcc261be\" />\n        </TypeReferences>\n    </Telerik.Reporting>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Displaying XML for Image in DOCX Reports (R2 2023 SP1 and before)\nDESCRIPTION: This XML snippet represents how images were embedded in DOCX reports using R2 2023 SP1 and earlier versions. It uses deprecated VML tags that are no longer supported in OpenXML formats, leading to issues when documents are accessed via OneDrive.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/images-missing-from-docx-in-onedrive.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<w:pict><v:image style=\"width:108pt;height:51pt\" xmlns:v=\"urn:schemas-microsoft-com:vml\"><v:imagedata cropleft=\"-0.5794312\" croptop=\"0\" cropright=\"-0.5794313\" cropbottom=\"0\" r:pict=\"Rb91251125dcc43d0\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" /></v:image></w:pict>\n```\n\n----------------------------------------\n\nTITLE: Example Location Provider Reference\nDESCRIPTION: Reference to the MapQuestLocationProvider class in the Telerik.Reporting namespace\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/structure/location-providers.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`MapQuestLocationProvider`\n```\n\n----------------------------------------\n\nTITLE: Using User Function in Binding Expression with Concatenated Colors\nDESCRIPTION: This snippet demonstrates calling the UserColorPalette function in a Binding Expression, providing all colors concatenated in a single string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/colorpalette-set-with-bindings.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n= UserColorPalette(\"#FAFAFA#FF8080#80FF80\")\n```\n\n----------------------------------------\n\nTITLE: Setting Border Style Based on Group Changes in Telerik Reporting Expression\nDESCRIPTION: This code snippet is an expression used in Telerik Reporting to conditionally set the border style of a crosstab based on whether the group has changed. The expression compares the current and previous values of a grouping field to determine if a solid border is needed. Dependencies include access to the Reports' Fields collection for group data. This expression outputs 'None' or 'Solid' for the border style.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hide-gridlines-crosstab-table-telerik-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\n= Previous(Fields.group) = Fields.group ?\n\t\"None\" : \"Solid\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Tabindex Violations Using pageReady Event\nDESCRIPTION: Addresses the 'Elements should not have tabindex greater than zero' violation by setting all tabindex attributes to 0 when the page is ready. This maintains accessibility while complying with Axe requirements.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-fix-axe-errors-for-html5-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npageReady: function (e, args) {\n                        $(\"[tabindex]\").attr(\"tabindex\", \"0\");\n                    }\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Handlers for IIS 7+ Integrated Mode\nDESCRIPTION: XML configuration for registering Telerik ReportViewer HTTP handler in the system.webServer section for IIS 7+ integrated mode\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/deploying-web-reportviewer-in-sharepoint.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<add name=\"Telerik.ReportViewer.axd_*\" path=\"Telerik.ReportViewer.axd\" verb=\"*\" type=\"Telerik.ReportViewer.WebForms.HttpHandler, Telerik.ReportViewer.WebForms, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" preCondition=\"integratedMode\" />\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace Analysis in C#\nDESCRIPTION: The provided stack trace illustrates the sequence of method calls leading up to the 'HRESULT E_FAIL' error. This highlights the error is raised during the deserialization process in the Visual Studio CodeDomParser when handling a report with SubReport items. Understanding this sequence is crucial for diagnosing the root cause of the error.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-hresult-e-fail-has-been-returned-from-a-call-to-a-com-component.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nInstances of this error (1)\n \nat System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo)\nat Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.Exceptions.ThrowEFail()\nat Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.CodeTypeRef.LookupTypeSymbol()\nat Microsoft.VisualStudio.LanguageServices.Implementation.CodeModel.CodeTypeRef.get_TypeKind()\nat EnvDTE.CodeTypeRef.get_TypeKind()\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomParser.GetUrtTypeFromVsType(CodeTypeRef vsType)\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomParser.OnTypePopulateMembers(Object sender, EventArgs e)\nat System.CodeDom.CodeTypeDeclaration.get_Members()\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.MergedCodeDomParser.CodeTypeDeclarationPopulator.OnPopulateMembers(Object sender, EventArgs e)\nat System.CodeDom.CodeTypeDeclaration.get_Members()\nat System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(IDesignerSerializationManager manager, CodeTypeDeclaration declaration)\nat System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager manager)\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.PerformLoad(IDesignerSerializationManager serializationManager)\nat Microsoft.VisualStudio.Design.Serialization.CodeDom.VSCodeDomDesignerLoader.DeferredLoadHandler.Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(Int32 fReload)\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Binding Redirects for WebAPI\nDESCRIPTION: XML configuration for binding redirects to resolve version conflicts with WebAPI packages. Specifies redirects for System.Web.Http and System.Net.Http.Formatting assemblies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/item-template-failed-to-add-nuget-packages.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Web.Http\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"5.1.0.0\"/>\n\t\t</dependentAssembly>\n\t\t<dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Net.Http.Formatting\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"5.1.0.0\"/>\n\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Resetting Visual Studio Toolbox - Loading privateregistry.bin\nDESCRIPTION: Loads the privateregistry.bin file as a hive into the registry editor. This allows modification of the Visual Studio's private registry settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nRegEdit.exe\n```\n\nLANGUAGE: text\nCODE:\n```\n\"Computer\\HKEY_LOCAL_MACHINE\"\n```\n\nLANGUAGE: text\nCODE:\n```\n\"File | Load Hive...\"\n```\n\nLANGUAGE: text\nCODE:\n```\n\"privateregistry.bin\"\n```\n\nLANGUAGE: text\nCODE:\n```\n\"VSRegHive\"\n```\n\nLANGUAGE: text\nCODE:\n```\n\"File | Unload Hive...\"\n```\n\n----------------------------------------\n\nTITLE: Getting Row Number of Year Group (C#)\nDESCRIPTION: Combines Exec and RowNumber functions to get the row number of the Year group itself.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/data-functions.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n=Exec(\"Year\", RowNumber(\"DataItemName\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Duplicate XLSX Export Extensions\nDESCRIPTION: XML configuration showing how to register two XLSX rendering extensions with different UseNativePageHeader settings. One uses the default name 'XLSX' while the other uses a custom name 'XLSX1'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-same-rendering-extension-twice-with-different-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<extensions>\n\t\t<render>\n\t\t\t<extension name=\"XLSX\" description=\"abc\">\n\t\t\t\t<parameters>\n\t\t\t\t\t<parameter name=\"UseNativePageHeader\" value=\"true\" />\n\t\t\t\t</parameters>\n\t\t\t</extension>\n\t\t\t<extension name=\"XLSX1\" type=\"Telerik.Reporting.OpenXmlRendering.Spreadsheet.SpreadsheetReport, Telerik.Reporting.OpenXmlRendering\" description=\"xlsx1\">\n\t\t\t\t<parameters>\n\t\t\t\t\t<parameter name=\"UseNativePageHeader\" value=\"false\" />\n\t\t\t\t</parameters>\n\t\t\t</extension>\n\t\t</render>\n\t</extensions>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Installing libgdiplus on Linux (Ubuntu/Debian)\nDESCRIPTION: This snippet demonstrates how to update and install the libgdiplus library on Ubuntu or Debian systems. libgdiplus is a Mono implementation of the GDI+ API, required for .NET applications using System.Drawing on non-Windows operating systems, specifically for older .NET versions prior to .NET 8. However, note that System.Drawing for .NET 8+ is not supported on Linux and macOS.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/dot-net-core-support.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\nsudo apt-get install libc6-dev\nsudo apt-get install libgdiplus\n```\n\n----------------------------------------\n\nTITLE: Removing Default Report Viewer Container Styles - CSS\nDESCRIPTION: This CSS snippet removes the default styles that may interfere with the report viewer's ability to resize based on content.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/resize-the-html5-report-viewer-to-accommodate-its-content.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#reportViewer1 {\n    position: absolute;\n    left: 5px;\n    right: 5px;\n    top: 40px;\n    bottom: 5px;\n    overflow: hidden;\n    clear: both;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting to Multi-Document Formats in VB.NET using Telerik Reporting\nDESCRIPTION: This snippet demonstrates exporting a report to multi-document formats using VB.NET. It shows how to render a report to JPEG images using the CreateStream callback with device information for controlling image quality and resolution.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/generate-reports-locally.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\n' Exporting to image format:\nDim rs As New InstanceReportSource()\nrs.ReportDocument = New Report1()\n\nDim reportProcessor As New ReportProcessor()\n\n' An instance of the Hashtable class to create a deviceInfo.\nDim deviceInfo As New System.Collections.Hashtable()\n\n' Setting the DPI.\ndeviceInfo.Add(\"DpiX\", \"300\")\ndeviceInfo.Add(\"DpiY\", \"300\")\n\n' Setting the image quality. The quality must be between 0 and 100.\ndeviceInfo.Add(\"OutputFormat\", \"JPEG\")\ndeviceInfo.Add(\"JpegQuality\", \"80\")\n\nreportProcessor.RenderReport(\"IMAGE\", rs, deviceInfo, createStreamCallback, Nothing)\n\nPrivate Shared Function createStreamCallback(name As String, extension As String, encoding As String, mimeType As String, willSeek As Boolean) As MemoryStream\n    ' We only need to care about the extension, a more general implementation would\n    ' pay attention to name, encoding, and mimeType as well.\n    Dim fileName As String = \"\" + Guid.NewGuid().ToString() + \".\" + extension.Replace(\".\", \"\")\n\n    If File.Exists(fileName) Then\n        File.Delete(fileName)\n    End If\n\n    Dim stream As New MemoryStream()\n\n    Return stream\nEnd Function\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with UpdateUi Event Handler\nDESCRIPTION: Example showing how to initialize the Telerik Report Viewer with a custom updateUi event handler. The event fires when the viewer's state changes. Uses jQuery's document.ready shorthand and configures the viewer with a service URL and report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/updateui(e).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\tupdateUi: function(e) { console.log(\"This event handler will be called when the state of the viewer changes.\"); }\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Web.config Handlers for WebAPI in ASP.NET\nDESCRIPTION: XML configuration for Web.config to add the necessary handlers for WebAPI version 4.0.30506. This configures URL handling for GET, POST, PUT, DELETE and other HTTP methods.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/add-rest-web-api-to-web-application.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<handlers>\n\t\t<remove name=\"ExtensionlessUrlHandler-ISAPI-4.0_32bit\" />\n\t\t<remove name=\"ExtensionlessUrlHandler-ISAPI-4.0_64bit\" />\n\t\t<remove name=\"ExtensionlessUrlHandler-Integrated-4.0\" />\n\t\t<add name=\"ExtensionlessUrlHandler-ISAPI-4.0_32bit\" path=\"*.\" verb=\"GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS\" modules=\"IsapiModule\" scriptProcessor=\"%windir%\\Microsoft.NET\\Framework\\v4.0.30319\\aspnet_isapi.dll\" preCondition=\"classicMode,runtimeVersionv4.0,bitness32\" responseBufferLimit=\"0\" />\n\t\t<add name=\"ExtensionlessUrlHandler-ISAPI-4.0_64bit\" path=\"*.\" verb=\"GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS\" modules=\"IsapiModule\" scriptProcessor=\"%windir%\\Microsoft.NET\\Framework64\\v4.0.30319\\aspnet_isapi.dll\" preCondition=\"classicMode,runtimeVersionv4.0,bitness64\" responseBufferLimit=\"0\" />\n\t\t<add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />\n\t</handlers>\n```\n\n----------------------------------------\n\nTITLE: Using DaysInMonth Function in Telerik Reporting\nDESCRIPTION: The `DaysInMonth` function returns the number of days in the specified month and year. It takes the year and month as input and returns the number of days in that month.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_5\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=DaysInMonth(2020, 9)\"\n```\n\n----------------------------------------\n\nTITLE: Data Source Binding Expression for Stub Lines\nDESCRIPTION: Expression used to bind the List data source to the stub lines data field from the main data source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/two-lists-show-details-in-parallel.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\n= Fields.StubLines\n```\n\n----------------------------------------\n\nTITLE: Listing Crystal Reports Assemblies Version using gacutil\nDESCRIPTION: This command-line example demonstrates how to use the `gacutil.exe` tool to list the version of the `CrystalDecisions.Shared.dll` assembly installed in the Global Assembly Cache (GAC). This information is crucial for configuring binding redirects in the Telerik Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/importing-reports/crystal-reports-converter.md#2025-04-21_snippet_0\n\nLANGUAGE: Batchfile\nCODE:\n```\n\"C:\\WINDOWS\\system32>gacutil -l CrystalDecisions.Shared\nMicrosoft (R).NET Global Assembly Cache Utility. Version 4.0.30319.0\nCopyright (c) Microsoft Corporation. All rights reserved.\nThe Global Assembly Cache contains the following assemblies:\n\tCrystalDecisions.Shared, Version=13.0.3500.0, Culture=neutral, PublicKeyToken=692fbea5521e1304, processorArchitecture=MSIL\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Angular Report Viewer Template\nDESCRIPTION: HTML template showing the report viewer component implementation with command buttons for executing various viewer operations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[contentTabIndex]=\"2001\"\n\t[reportSource]=\"reportSource\"\n\t[serviceUrl]=\"serviceUrl\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\">\n</reporting-angular-viewer>\n\n<div class=\"func-btn-wrapper\">\n\t<button\n\t\tkendoButton\n\t\tclass=\"func-btn\"\n\t\t*ngFor=\"let button of buttons\"\n\t\t(click)=\"execute(button.commandName, button.commandValue)\"> {{button.name}}\n\t</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generic Image Configuration in RESX File\nDESCRIPTION: This XML snippet showcases the generic format for referencing an image in the RESX file. The `{pictureBoxNameHere}` should be replaced by the real PictureBox Name in the report. \nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/embedded-image-clr-report-skia-error.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n\"<assembly alias=\\\"System.Drawing\\\" name=\\\"System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\\\" />\\n\t<data name=\\\"{pictureBoxNameHere}.Value\\\" type=\\\"System.Drawing.Bitmap, System.Drawing\\\" mimetype=\\\"application/x-microsoft.net.object.bytearray.base64\\\">\\n\t\t<value>\\n\t\t\t{the value of the image base64 string here}\\n\t\t</value>\\n\t</data>\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Frame in HTML\nDESCRIPTION: HTML code for embedding a responsive YouTube video iframe that demonstrates setting up the Telerik HTML5 Report Viewer with an external REST service in .NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"position: relative; width: 100%; height: 100%;\">\n    <iframe src=\"https://www.youtube.com/embed/GeCUGTgZziI\" \n            title=\"Setting up Telerik Html5 Report Viewer with an external Telerik Reporting REST Service in .NET\" frameborder=\"0\" allowfullscreen\n            allow=\"accelerometer; autoplay; picture-in-picture\" \n            style=\"position: absolute; width: 100%; height: 100%;\">\n    </iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using CsvDataSource for OHLC Charts\nDESCRIPTION: Demonstrates the structure of a CsvDataSource containing OHLC data such as date, open, high, low, and close values. This data serves as the basis for generating Candlestick charts via the Telerik Reporting Candlestick Wizard. The snippet outlines the data required for the report showing daily financial marker changes, with date as DateTime and other values as decimals.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/ohlc.md#2025-04-21_snippet_0\n\nLANGUAGE: CSV\nCODE:\n```\ndate,open,high,low,close\n03.07.2017,18.2,18.6,18.1,18.4\n04.07.2017,18.3,18.6,18.1,18.4\n05.07.2017,18.5,19,18.3,18.7\n06.07.2017,18.9,19,18.2,18.3\n07.07.2017,18.3,18.9,18.3,18.7\n10.07.2017,18.8,19.2,18.3,18.4\n11.07.2017,18.2,19.2,18.1,18.8\n12.07.2017,18.3,18.6,18.2,18.6\n13.07.2017,18.4,19.4,18.3,18.7\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphicsEngine Element in XML\nDESCRIPTION: The graphicsEngine element configures the rendering engine with options for PlatformDependent, Gdi, or Skia implementations. The engineName attribute determines which graphics engine implementation to use across different platforms.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/processing-element.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<graphicsEngine engineName=\"[PlatformDependent|Gdi|Skia]\" />\n```\n\n----------------------------------------\n\nTITLE: Complete XML Configuration for External Assemblies in Report Designer\nDESCRIPTION: Full XML configuration example for the Telerik Report Designer that includes probing paths for locating assemblies in subfolders and AssemblyReferences section for referencing the custom MyAssembly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-external-assemblies-with-custom-clr-objects-in-the-report-designer.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t...\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<probing privatePath=\"MySubDir; MySubDir\\SubDir\"/>\n\t\t</assemblyBinding>\n\t</runtime>\n\t\n\t<Telerik.Reporting>\n\t\t<AssemblyReferences>\n\t\t\t<add name=\"MyAssembly\" version=\"1.0.0.0\"/>\n\t\t</AssemblyReferences>\n\t</Telerik.Reporting>\n\t...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Rendering Report as Image for Printing\nDESCRIPTION: Renders a report as an image specifically for printing. Defaults to EMF format, with fallback to other bitmap formats. TIFF not supported.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/export-formats.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.ImageRendering.PrintImageReport, Telerik.Reporting, Version=x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Fonts in XML Configuration\nDESCRIPTION: Example of a complete XML configuration that defines multiple private fonts including Courier New with different styles and Ubuntu. Shows how to specify font family, path, and style attributes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/privatefonts-element.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<configuration>\n...\n\t<Telerik.Reporting>\n\t\t<privateFonts>\n\t\t\t<add fontFamily=\"Courier New\" path=\"CourBI.ttf\" fontStyle=\"Bold, Italic\" />\n\t\t\t<add fontFamily=\"ubuntu\" path=\"Ubuntu-R.ttf\" />\n\t\t\t<add fontFamily=\"Courier New\" path=\"CourI.ttf\" fontStyle=\"Italic\" />\n\t\t</privateFonts>\n\t</Telerik.Reporting>\n...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Error Message for SqlCommand Conversion in Telerik Reporting\nDESCRIPTION: This code snippet shows the error message that occurs when trying to convert a MySqlCommand to SqlCommand in Telerik Reporting. It includes the full stack trace to help identify the source of the error.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-mysqlcommand--to-sqlcommand-conversion-error.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSystem.ArgumentException: Object of type 'MySql.Data.MySqlClient.MySqlCommand' cannot be converted to type 'System.Data.SqlClient.SqlCommand'.\n   at System.RuntimeType.TryChangeType(Object value, Binder binder, CultureInfo culture, Boolean needsSpecialCast)\n   at System.Reflection.MethodBase.CheckArguments(Object[] parameters, Binder binder, BindingFlags invokeAttr, CultureInfo culture, Signature sig)\n   at System.Reflection.RuntimeMethodInfo.InvokeArgumentsCheck(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n   at Telerik.Reporting.Processing.Data.SqlProviderFactory.DeriveParameters(IDbCommand command)\n   at Telerik.Reporting.Processing.Data.SqlCommandProvider.ResolveProcedure(IDbCommand command, SqlDataSourceParameterCollection parameters)\n   at Telerik.Reporting.Processing.Data.SqlQueryProvider.CreateCommandCore(IDbConnection connection, Boolean evaluateParameters)\n   at Telerik.Reporting.Processing.Data.SqlQueryProvider.CreateCommand(IDbConnection connection)\n   at Telerik.Reporting.Processing.Data.SqlDataEnumerable.<GetEnumerator>d__2.MoveNext()\n   at Telerik.Reporting.Processing.Data.LazyList`1.LazyListEnumerator.MoveNext()\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\n   at Telerik.Reporting.Processing.Data.SeedDataAdapter.Execute(IEnumerable`1 data)\n   at Telerik.Reporting.Processing.Data.ResultSetAdapter.Execute(IEnumerable`1 data)\n   at Telerik.Reporting.Processing.Data.MultidimentionalDataProvider.Execute(MultidimensionalQuery query)\n   at Telerik.Reporting.Processing.DataItemResolveDataAlgorithm.GetDataCore(IDataSource dataSource, MultidimensionalQuery query, IServiceProvider serviceProvider, EvalObject expressionContext, IProcessingContext processingContext)\n   at Telerik.Reporting.Processing.Report.GetDataCore(IDataSource dataSource, MultidimensionalQuery query)\n   at Telerik.Reporting.Processing.DataItemResolveDataAlgorithm.ResolveData(String processingId, InMemoryState inMemoryState, MultidimensionalQuery query, Func`1 getDataCore, EvalObject expressionContext)\n   at Telerik.Reporting.Processing.Report.ResolveData()\n   at Telerik.Reporting.Processing.Report.ProcessItemCore()\n   at Telerik.Reporting.Processing.Report.ProcessItem()\n   at Telerik.Reporting.Processing.ReportItemBase.ProcessElement()\n   at Telerik.Reporting.Processing.ProcessingElement.Process(IDataMember dataContext)\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportViewer HTTP Handler in XML for ASP.NET\nDESCRIPTION: This XML snippet illustrates the necessary configuration for the Telerik ReportViewer HTTP handler in the web.config file to ensure proper functioning when deployed on IIS7 in integrated mode. It specifies the required handler attributes including type, path, and preCondition settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reportviewer-styles-and-images-messed-up.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<add\n\t\tname=\"Telerik.ReportViewer.axd_*\"\n\t\ttype=\"Telerik.ReportViewer.WebForms.HttpHandler, Telerik.ReportViewer.WebForms, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n\t\tpath=\"Telerik.ReportViewer.axd\" verb=\"*\"\n\t\tpreCondition=\"integratedMode\"\n\t/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Data Member Value (C#)\nDESCRIPTION: Uses the Previous function to access the value of the previous data member in a detail section of a report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/data-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n=Previous(Fields.LineTotal)\n```\n\n----------------------------------------\n\nTITLE: Handling ODBC Provider Parameter Detection for PostgreSQL Functions\nDESCRIPTION: Workaround for ODBC provider incorrectly including returned columns as input parameters when discovering PostgreSQL stored functions. Recommends using an alternative ADO.NET provider like NpgSql to resolve parameter detection issues.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/postgres-stored-functions-in-sqldatasource-wizard.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Using DbCommandBuilder with reflection to derive parameters\n// Note: This approach may include unexpected returned columns as input parameters\n```\n\n----------------------------------------\n\nTITLE: Top Border Style with Additional Group Check\nDESCRIPTION: Extended expression to include an additional group (`questName`) for checking repetitions and controlling top border styles. It is an improvement upon the previous expression that adapts to additional hierarchical levels in the data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-merge-cell-dynamic-table-crosstab.md#2025-04-21_snippet_2\n\nLANGUAGE: Expression\nCODE:\n```\n= If(Previous(Fields.responsibilityAgency) is Not Null,\\n\\t\\t(Fields.responsibilityAgency = Previous(Fields.responsibilityAgency)) ?\\n\\t\\t\\t'None' : 'Solid',\\n\\t\\tIf(Previous('risk', Fields.responsibilityAgency) is Not Null,\\n\\t\\t\\t(Fields.responsibilityAgency = Previous('risk', Last(Fields.responsibilityAgency))) ?\\n\\t\\t\\t\\t'None' : 'Solid',\\n\\t\\t\\tIf(Previous('questDetail', Fields.responsibilityAgency) is Not Null,\\n\\t\\t\\t\\t(Fields.responsibilityAgency = Previous('questDetail', Last(Fields.responsibilityAgency))) ?\\n\\t\\t\\t\\t\\t'None' : 'Solid',\\n\\t\\t\\t\\tIf(Previous('questName', Fields.responsibilityAgency) is Not Null,\\n\\t\\t\\t\\t\\t(Fields.responsibilityAgency = Previous('questName', Last(Fields.responsibilityAgency))) ?\\n\\t\\t\\t\\t\\t\\t'None' : 'Solid',\\n\\t\\t\\t\\t\\t'Solid'))))\n```\n\n----------------------------------------\n\nTITLE: Configuring SharedDataSourceResolver Element in XML\nDESCRIPTION: The sharedDataSourceResolver element configures how shared data sources (.sdsx files) are resolved, supporting both path-based and custom implementations. It enables custom storage and retrieval of shared data source definitions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/processing-element.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<sharedDataSourceResolver provider=\"[path|custom]\">\n  <parameters>\n    <parameter name=\"[directory|typeName]\" value=\"[path|qualified.type.name]\" />\n  </parameters>\n</sharedDataSourceResolver>\n```\n\n----------------------------------------\n\nTITLE: Making a Keep Client Alive Request in Telerik Reporting REST API\nDESCRIPTION: A POST request to extend the client's expiration time. The clientID parameter must be provided in the URL path, which is initially obtained from the Register Client endpoint.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/clients-api/keep-client-alive.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/reports/clients/keepAlive/{clientID}\n```\n\n----------------------------------------\n\nTITLE: Hiding SQL Connection Option with JavaScript and jQuery\nDESCRIPTION: JavaScript implementation that uses jQuery selectors and timeouts to hide the 'New SQL Connection' option in the SQL DataSource Wizard. The code adds click listeners to components and manipulates DOM elements to hide specific UI elements.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-hide-the-option-for-adding-a-new-sql-connection-in-sql-datasource-wizard-in-web-report-desgner.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n    // JS function to set click-listener on the SQL-data-source button\n    function setSqlDsListener() {\n        // selecting the div for the SQL DataSource button and adding a listener\n        $('div[component-name=\"SqlDataSource\"]').click(function () {\n            // timeout to wait for the wizard to load in\n            setTimeout(function () {\n                // Selects the radio button within the New Sql Connection DIV\n                // The Radio button is selected as it has a unique ID to it, the div does not\n                var radio = $('#newSQLConnection');\n                // Selects the div tag that contains the radio button\n                var el = radio.closest('div[class^=\"editor__content\"]');\n                el.attr(\"style\", \"display:none\");\n                // Recalls itself because the click-listener gets removed after the wizards opens\n                setSqlDsListener();\n            }, 200)\n        })\n    }\n</script>\n\n<script type=\"text/javascript\">\n    $(document).ready(function () {\n        $(\"#webReportDesigner\").telerik_WebReportDesigner({\n            toolboxArea: {\n                layout: \"list\" //Change to \"grid\" to display the contents of the Components area in a flow grid layout.\n            },\n            serviceUrl: \"api/reportdesigner/\",\n            report: \"Product Catalog.trdp\"\n        }).data(\"telerik_WebDesigner\");\n      // 500 ms timeout to wait for the designer to load in\n    setTimeout(function () {\n        // selecting the Components tab and adding a click listener\n        $('span[class^=\"k-link\"]').click(function () {\n            // a timeout to wait for the components tab to load in\n            setTimeout(function () {\n                //Calls the function to set the click listener for SQL DataSource\n                setSqlDsListener();\n            }, 400)\n        })\n    }, 500)\n    });\n </script>\n```\n\n----------------------------------------\n\nTITLE: Using Path References Example\nDESCRIPTION: Code reference showing how to use ASP.NET Web Project Paths for adapting path references according to project setup.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/how-to-use-html5-report-viewer-with-rest-service.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nC:\\Program Files (x86)\\Progress\\Telerik Reporting {{site.suiteversion}}\\Examples\\CSharp\\Html5Demo\n```\n\n----------------------------------------\n\nTITLE: Setting Multi-Column Report Properties\nDESCRIPTION: Example of property settings for creating a multi-column report layout with 4 columns. Shows the configuration for report width, column count, and column spacing.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/report-item/multi-column-reports.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nReport.Width = 1.5in\nReport.PageSettings.ColumnCount = 4\nReport.PageSettings.ColumnSpacing = 0in\n```\n\n----------------------------------------\n\nTITLE: Example of Running Telerik Reporting Installer with Logging (Batch)\nDESCRIPTION: This is a specific example of running the Telerik Reporting installer for Q1 2013 SP1 with logging enabled. It specifies the full path to the .msi file and sets the log output to C:\\install.log.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshoot-telerik-reporting-installation-problems.md#2025-04-21_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nmsiexec /i C:\\Telerik_Reporting_Q1_2013_SP1_DEV.msi -l*xv C:\\install.log\n```\n\n----------------------------------------\n\nTITLE: Viewing and Editing User Configuration File Structure in XML\nDESCRIPTION: This XML configuration file shows the structure of the user.config file where connection strings are stored for the Telerik Standalone Report Designer. Connection strings can be modified in the UserConnectionStringCollection element within the file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-edit-connection-strings-saved-by-the-standalone-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <configSections>\n        <sectionGroup name=\"userSettings\" type=\"System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" >\n            <section name=\"Telerik.ReportDesigner.Settings\"\n                     type=\"System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"\n                     allowExeDefinition=\"MachineToLocalUser\"\n                     requirePermission=\"false\" />\n        </sectionGroup>\n    </configSections>\n    <userSettings>\n        <Telerik.ReportDesigner.Settings>\n            <setting name=\"ConnectionStrings\" serializeAs=\"Xml\">\n                <value>\n                    <UserConnectionStringCollection>                                  \n                    </UserConnectionStringCollection>\n                </value>\n            </setting>\n            <setting name=\"Session\" serializeAs=\"Xml\">\n                <value>\n                    <UserSession>\n                        <ActiveDocument Path=\"C:\\MyReport.trdx\" />\n                        <Documents>                          \n                        </Documents>\n                    </UserSession>\n                </value>\n            </setting>\n            <setting name=\"RecentDocuments\" serializeAs=\"Xml\">\n                <value>\n                    <RecentDocumentList MaxSize=\"10\">                     \n                    </RecentDocumentList>\n                </value>\n            </setting>\n            <setting name=\"UpgradeRequired\" serializeAs=\"String\">\n                <value>False</value>\n            </setting>\n        </Telerik.ReportDesigner.Settings>\n    </userSettings>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Obsolete CancelRendering Method in WPF Report Viewer\nDESCRIPTION: The CancelRendering method taking an integer parameter is now obsolete in the WPF Report Viewer. Use the parameterless CancelRendering method instead.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2015/q3-2015-sp1.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Obsolete method\nreportViewer.CancelRendering(int);\n\n// New method to use\nreportViewer.CancelRendering();\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String in appsettings.json for Telerik Reporting\nDESCRIPTION: Adds a connection string to the appsettings.json file for use with SQL DataSource in Telerik Reporting. This configuration is necessary when using a Shared connection string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-reporting-net-core-mvc.md#2025-04-21_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"ConnectionStrings\": [\n\t{\n\t\t\"name\": \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\",\n\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\"providerName\": \"System.Data.SqlClient\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Business Objects for Hierarchical Data in C#\nDESCRIPTION: This code snippet defines a ContactsCollection class with nested Contact and Phone classes. It creates a hierarchical data structure for use in a Telerik Reporting table.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-databind-to-collection-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class ContactsCollection\n{\n\tBindingList<Contact> _contacts;\n\tpublic ContactsCollection()\n\t{\n\t\t_contacts = new BindingList<Contact>();\n\t\tfor (int i = 0; i < 5; i++)\n\t\t{\n\t\t\tBindingList<Phone> phones = new BindingList<Phone>();\n\t\t\tfor (int j = 0; j < 3; j++)\n\t\t\t{\n\t\t\t\tphones.Add(new Phone(\"Phone\" + i + \".\" + j));\n\t\t\t}\n\t\t\t_contacts.Add(new Contact(\"Contact\" + i, phones));\n\t\t}\n\t}\n\tpublic BindingList<Contact> AllContacts { get { return _contacts; } }\n}\n\npublic class Contact\n{\n\tpublic Contact(string _name, BindingList<Phone> _phones)\n\t{\n\t\tthis.Name = _name;\n\t\tthis.Phones = _phones;\n\t}\n\tpublic string Name { get; set; }\n\tpublic BindingList<Phone> Phones { get; set; }\n}\n\npublic class Phone\n{\n\tpublic Phone(string _number)\n\t{\n\t\tthis.Number = _number;\n\t}\n\tpublic string Number { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Telerik Report Viewer in React Application\nDESCRIPTION: Import the TelerikReportViewer component in the index.js file to enable report viewer functionality\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-report-server.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TelerikReportViewer } from '@progress/telerik-react-report-viewer'\n```\n\n----------------------------------------\n\nTITLE: Setting Sub-Report Data Source Expression\nDESCRIPTION: Expression used to bind the sub-report's data source to the main report's data object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-hide-subreport-with-no-data.md#2025-04-21_snippet_1\n\nLANGUAGE: expression\nCODE:\n```\n= ReportItem.DataObject\n```\n\n----------------------------------------\n\nTITLE: Escaping Curly Brackets in Telerik Reporting Expressions\nDESCRIPTION: This snippet demonstrates how to escape curly brackets when they are needed as literal characters in a string that contains embedded expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/using-expressions/embedded-expressions.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{{{%raw%}{{{%endraw%}}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n{{{%raw%}}}{%endraw%}}\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema Version for TRDX Files\nDESCRIPTION: The XML schema version used in TRDX files created by the Standalone Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2016/q1-2016.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2012/3.9\n```\n\n----------------------------------------\n\nTITLE: Column Reorder Parameter Assignment\nDESCRIPTION: Parameter value assignments used in Navigate to Report action to switch column positions\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/switch-hide-show-table-columns.md#2025-04-21_snippet_3\n\nLANGUAGE: Expression\nCODE:\n```\n= Parameters.Column1.Value\n= Parameters.Column2.Value\n= Parameters.Column4.Value\n= Parameters.Column3.Value\n= Parameters.Column5.Value\n```\n\n----------------------------------------\n\nTITLE: Error Message Snippet for Nuget Package Retrieval\nDESCRIPTION: Displays the specific 401 error encountered when trying to access the Telerik private Nuget feed. This error indicates authentication or credential issues preventing package restoration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-401-failed-to-retrieve-information-from-remote-source-nugettelerikcom-on-restoring-nuget-packages-in-net-core-project.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError 401: Failed to retrieve information from remote source https://nuget.telerik.com\n```\n\n----------------------------------------\n\nTITLE: Checking for Parameterless Constructor in VB Report Class\nDESCRIPTION: This snippet illustrates the same concept for VB.NET report classes, emphasizing that a parameterless constructor must be present to avoid the issue of a blank report in the Visual Studio Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/visual-studio-report-designer-is-blank.md#2025-04-21_snippet_1\n\nLANGUAGE: vbnet\nCODE:\n```\nPublic Class MyReport\n    Inherits Telerik.Reporting.Report\n\n    Public Sub New() ' Parameterless constructor\n        InitializeComponent()\n    End Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Error Message: Missing report name\nDESCRIPTION: This snippet shows the error message that appears in the Report Viewer when the report name is missing or not correctly passed to the Reporting REST service. The error occurs during the parameter loading process, preventing the report from displaying.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reporting-rest-service-throws-unable-to-get-parameters-missing-report-name-error.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"Unable to get parameters. Missing report name\"\n```\n\n----------------------------------------\n\nTITLE: Setting PaperKind Property in Telerik Reporting\nDESCRIPTION: Code demonstrating how to set the PaperKind property on a Telerik Report's PageSettings. This assignment triggers a compiler warning on MacOS and Linux due to System.Drawing.Printing namespace being Windows-only supported in .NET 6+.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/mac-linux-warning-about-paper-kind.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nreport.PageSettings.PaperKind = System.Drawing.Printing.PaperKind.A4;\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportViewer DocumentMap Visibility in C#\nDESCRIPTION: Example of setting the ReportViewer's DocumentMapVisible property to control the initial visibility of the document map. This can be used to hide the document map when the report is first viewed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/document-map.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nreportViewer.DocumentMapVisible = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Binding Redirects for WebAPI in XML Configuration\nDESCRIPTION: XML configuration for setting up assembly binding redirects for newer WebAPI versions. This snippet shows how to configure the application to redirect assembly bindings for System.Web.Http and System.Net.Http.Formatting to a specific version (5.1.0.0 in this example).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-web-api-implementation/requirements.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t  <dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Web.Http\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"5.1.0.0\"/>\n\t\t  </dependentAssembly>\n\t\t  <dependentAssembly>\n\t\t\t<assemblyIdentity name=\"System.Net.Http.Formatting\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\"/>\n\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"5.1.0.0\"/>\n\t\t  </dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Report Viewer - Pre Q2 2012 vs Q2 2012\nDESCRIPTION: Examples showing how to configure the ASP.NET Report Viewer declaratively before and after Q2 2012 update using assembly qualified name.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<telerik:ReportViewer ID=\"ReportViewer1\" runat=\"server\" Report=\"ReportLibrary1.Report1, ReportLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\">\n</telerik:ReportViewer>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<telerik:ReportViewer ID=\"ReportViewer1\" runat=\"server\">\n\t<typereportsource typename=\"ReportLibrary1.Report1, ReportLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\">\n\t</typereportsource>\n</telerik:ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Setting PageBreak Property for Sections in C#\nDESCRIPTION: Use the PageBreak property of a section to force a page break before or after it. This controls vertical paging behavior.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/understanding-pagination.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nsection.PageBreak = PageBreak.Before; // or PageBreak.After\n```\n\n----------------------------------------\n\nTITLE: Error Message for Dependency Resolution\nDESCRIPTION: Indicates a failure to resolve a specific Telerik assembly dependency in a WPF application. This typically occurs when assembly versions are not synchronized between Telerik Reporting and Telerik UI for WPF.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/wpf-viewer-cannot-resolve-dependency-to-assembly-error.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCannot resolve dependency to assembly 'Telerik.Windows.XXXX...'\n```\n\n----------------------------------------\n\nTITLE: JavaScript Runtime Error Message\nDESCRIPTION: The error message that appears in the browser console when the HTML5 Report Viewer fails to initialize due to jQuery version conflicts.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/javascript-runtime-error-object-doesnt-support-property-or-method-telerik-reportviewer.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0x800a01b6 - JavaScript runtime error: Object doesn't support property or method 'telerik\\_ReportViewer'.\n```\n\n----------------------------------------\n\nTITLE: Registering Custom IReportSourceResolver in C#\nDESCRIPTION: This code snippet shows how to register the custom IReportSourceResolver in the ReportServiceConfiguration within Program.cs/Startup.cs.  It configures the ReportServiceConfiguration to use the custom resolver, injecting the IConfiguration service for accessing configuration settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-encrypted-connection-strings-telerik-reporting.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n// Configure dependencies for ReportsController.\nbuilder.Services.TryAddSingleton<IReportServiceConfiguration>(sp =>\n    new ReportServiceConfiguration\n    {\n        HostAppId = \"ReportingNet8\",\n        Storage = new FileStorage(),\n        ReportSourceResolver = new CustomReportSourceResolver(sp.GetService<IConfiguration>())\n    });\n```\n\n----------------------------------------\n\nTITLE: Assigning Report to Windows Forms Report Viewer with InstanceReportSource in VB.NET\nDESCRIPTION: Demonstrates how to assign a report to WinForms report viewer using InstanceReportSource in VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim report1 As New Report1()\n`perform additional operations on the report object if needed\nDim instanceReportSource As New Telerik.Reporting.InstanceReportSource()\ninstanceReportSource.ReportDocument = report1\nMe.ReportViewer1.ReportSource = instanceReportSource\n```\n\n----------------------------------------\n\nTITLE: Specifying XML Schema Version for TRDX Files in Standalone Report Designer\nDESCRIPTION: The Standalone Report Designer generates TRDX files using XML version http://schemas.telerik.com/reporting/2012/3.8 for the Q3 2015 release.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2015/q3-2015.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2012/3.8\n```\n\n----------------------------------------\n\nTITLE: Converting String to Character Array for Telerik Reporting List DataSource\nDESCRIPTION: This expression converts a string field to a character array using the ToCharArray() method. It's used as a binding expression for a List control's DataSource property to display each character in a separate cell with borders.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/draw-box-border-around-each-data-field-character.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n= Fields.Value.ToCharArray()\n```\n\n----------------------------------------\n\nTITLE: Creating Subreport Visibility Binding Expression in Telerik Reporting\nDESCRIPTION: Expression binding that controls the visibility of a subreport item based on data count. This binding should be added to the textbox item's Bindings collection to hide the subreport when it contains no data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-display-no-data-message-for-reports-and-subreports.md#2025-04-21_snippet_1\n\nLANGUAGE: expression\nCODE:\n```\nProperty path: Parent.Parent.Parent.Visible\nExpression: = Count(1)>0\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting JSON Output Format for Azure\nDESCRIPTION: JSON configuration to force PNG output format for rendering extensions in Azure environments, providing an alternative to XML configuration\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/preview-reports-using-rest-service-deployed-in-azure.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \"telerikReporting\": {\\n    \"extensions\": [\\n      {\\n        \"name\": \"IMAGEInteractive\",\\n        \"parameters\": [\\n          {\\n            \"name\": \"OutputFormat\",\\n            \"value\": \"PNG\"\\n          }\\n        ]\\n      },\\n      {\\n        \"name\": \"IMAGE\",\\n        \"parameters\": [\\n          {\\n            \"name\": \"OutputFormat\",\\n            \"value\": \"PNG\"\\n          }\\n        ]\\n      },\\n      {\\n        \"name\": \"IMAGEPrintPreview\",\\n        \"parameters\": [\\n          {\\n            \"name\": \"OutputFormat\",\\n            \"value\": \"PNG\"\\n          }\\n        ]\\n      },\\n      {\\n        \"name\": \"IMAGEPrint\",\\n        \"parameters\": [\\n          {\\n            \"name\": \"OutputFormat\",\\n            \"value\": \"PNG\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Query Detail Data - Product Information\nDESCRIPTION: SQL query to retrieve product details with category relationships for the detail table section. Joins multiple product-related tables to get comprehensive product information.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-master-detail-report-using-table.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\tP.Name,ProductID,ProductNumber,PC.ProductCategoryID\n\tFROM\n\t\tProduction.Product P,\n\t\tProduction.ProductSubcategory PS,\n\t\tProduction.ProductCategory PC\n\tWHERE\n\t\tP.ProductSubcategoryID=PS.ProductSubcategoryID\n\t\tAND PS.ProductCategoryID=PC.ProductCategoryID\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Telerik Web Report Designer\nDESCRIPTION: This code snippet demonstrates a common error message encountered when previewing reports in the Telerik Web Report Designer. The error occurs due to an invalid URI format, possibly caused by incorrect service URLs or CORS issues. The stack trace provided can be used for debugging URI format exceptions within the .NET environment.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/web-report-designer-cannot-preview-reports.md#2025-04-21_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\nSystem.UriFormatException: Invalid URI: The format of the URI could not be determined.\n\t\tat System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind, UriCreationOptions& creationOptions)\n\t\tat System.Uri..ctor(String uriString, UriKind uriKind)\n\t\tat Telerik.Reporting.Processing.PathResolver..ctor(String baseDir)\n\t\tat Telerik.WebReportDesigner.Services.ResourceResolver..ctor(IResourceStorage resourceStorage, String definitionDir)\n\t\tat Telerik.WebReportDesigner.Services.Controllers.ReportDesignerControllerBase.CreateResourceResolver()\n\t\tat Telerik.WebReportDesigner.Services.Controllers.ReportDesignerControllerBase.get_ProcessingContext()\n\t\tat Telerik.Reporting.Services.AspNetCore.ReportsControllerBase.get_Engine()\n\t\tat Telerik.Reporting.Services.AspNetCore.ReportsControllerBase.GetVersion()\n\t\tat lambda_method262(Closure , Object , Object[] )\n\t\tat Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\n\t\tat Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Logged|12_1(ControllerActionInvoker invoker)\n\t\tat Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n\t\tat Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\n\t\tat Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n\t\tat Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\n\t--- End of stack trace from previous location ---\n\t\tat Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextExceptionFilterAsync>g__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\n```\n\n----------------------------------------\n\nTITLE: Inserting Control Characters in Code128 Barcode - VB.NET\nDESCRIPTION: This snippet shows how to insert the FNC4 control character within a Code128 barcode value in VB.NET, using the ChrW function to represent the control character as a Unicode character.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/barcode/1d-barcodes/1d-specifications.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nMe.Barcode1.Value = \"ABCD\" & ChrW(&HFA) & \"1234\"\n```\n\n----------------------------------------\n\nTITLE: Packaging TRDX Report Definition in Telerik Reporting with VB.NET\nDESCRIPTION: This code snippet demonstrates how to package a predefined .TRDX (XML) report definition using the ReportPackager class in VB.NET. It takes the path to the .TRDX file as input and creates a corresponding .TRDP package. The .TRDP package contains the XML definition and any associated resources in a compressed format.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/package-report-definition.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim reportFilePath As String = \"C:\\\\Reports\\\\MyReport.trdx\"\nDim packageFilePath As String = \"C:\\\\Packages\\\\MyReport.trdp\"\n\nDim reportPackager As New Telerik.Reporting.ReportPackager()\nUsing packageStream As New FileStream(packageFilePath, FileMode.Create)\n\treportPackager.Package(reportFilePath, packageStream)\nEnd Using\n```\n\n----------------------------------------\n\nTITLE: Disabling RadCompression for Reporting REST Service in Web.config\nDESCRIPTION: This XML configuration disables RadCompression for the Reporting REST service endpoint to resolve the ERR_CONNECTION_RESET error during export operations. It adds an exclusion rule for the API handler path in the radCompression section of the web.config file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-viewer-export-operations-fail-in-chrome-and-firefox-with-err-connection-reset.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <configSections>\n    <sectionGroup name=\"telerik.web.ui\">\n      <section name=\"radCompression\" type=\"Telerik.Web.UI.RadCompressionConfigurationSection, Telerik.Web.UI, PublicKeyToken=121fae78165ba3d4\" allowDefinition=\"MachineToApplication\" requirePermission=\"false\"/>\n    </sectionGroup>\n  </configSections>\n   \n  <telerik.web.ui>\n    <radCompression>\n      <excludeHandlers>\n        <add handlerPath=\"api/reports/\" matchExact=\"false\"/>\n      </excludeHandlers>\n    </radCompression>\n  </telerik.web.ui>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Instances of Image Rendering Extension in XML\nDESCRIPTION: XML configuration example showing how to configure a custom TIFF rendering extension with CCITT Group 4 compression. This demonstrates how to create multiple instances of the same rendering extension with different parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/extensions-element.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n    <extensions>\n        <render>\n            <extension name=\"TIFF_CCITT4\"\n                                 type=\"Telerik.Reporting.ImageRendering.ImageReport, Telerik.Reporting, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n                                 description=\"TIFF file (CCITT Group 4)\">\n                <parameters>\n                    <parameter name=\"TiffCompression\" value=\"ccitt4\" />\n                </parameters>\n            </extension>\n        </render>\n    </extensions>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Setting printMode to FORCE_PDF_FILE in HTML5 Report Viewer\nDESCRIPTION: This snippet demonstrates how to set the `printMode` option to `FORCE_PDF_FILE` in the HTML5 Report Viewer configuration. This configuration change ensures that the report is always exported as a PDF file with the print script, although it requires manual user interaction to trigger the print dialog. Requires the telerikReportViewer namespace and the `printMode` setting to be properly configured.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-error-chrome.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"$(\\\"#reportViewer1\\\")\\n\\t.telerik_ReportViewer({                  \\n       serviceUrl: \\\"/api/reports\\\",\\n\\t\t...\\n       printMode: telerikReportViewer.PrintModes.FORCE_PDF_FILE\\n\t\t},\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Report Parameters in JavaScript using HTML5 Report Viewer\nDESCRIPTION: This snippet demonstrates how to use the getReportParameters() method to retrieve the current report parameters from an HTML5 Report Viewer instance. It returns an object where parameter IDs are keys and their corresponding values are the parameter values.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/getreportparameters().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nvar currentParameters = reportViewer.getReportParameters();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Shape Class in C#\nDESCRIPTION: This snippet demonstrates how to create a custom shape by inheriting from the ShapeBase class and defining a set of points to form the shape.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/shape.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomShape : ShapeBase\n{\n    public CustomShape()\n    {\n    }\n\n    public override PointF[][] GetPoints()\n    {\n        return new PointF[][] {\n            new PointF[] {\n                new PointF(0, 0),\n                new PointF(1, 0),\n                new PointF(1, 1),\n                new PointF(0, 1)\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WPF Report Viewer Dependencies\nDESCRIPTION: Specifies the required Telerik UI Controls for WPF version and recommends adding binding redirects when using newer versions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2014/q3-2014.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTelerik UI Controls for WPF 2014.3.1021.40\n```\n\n----------------------------------------\n\nTITLE: Modifying Graph Data Source for Series Spacing - CSV\nDESCRIPTION: This CSV snippet illustrates how to modify the Graph item's data source by including additional series with zero values to create spacing between different series.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-change-the-space-between-charts-series.md#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n\"Category,Series,SeriesOrder,Value\nA,ser1,0,10\nA,emptySer,1,0\nA,ser2,2,20\nB,ser1,0,15\nB,emptySer,1,0\nB,ser2,2,25\"\n```\n\n----------------------------------------\n\nTITLE: Mapping HTML Element to jQuery Plugin Function in JavaScript\nDESCRIPTION: This JavaScript code shows how the HTML element with a specific data-role is mapped to a corresponding jQuery plugin function for the HTML5 Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/customizing/styling-and-appearance/templates-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\njQuery.fn.telerik_ReportViewer_ParametersArea(options)\n```\n\n----------------------------------------\n\nTITLE: Setting ReportBook DocumentName using Parameter Expression in Telerik Reporting\nDESCRIPTION: An expression example that references a report parameter to dynamically set the DocumentName of a ReportBook. This expression must be manually typed in the DocumentName property of the ReportBook.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/dynamic-reportbook-name-on-export.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n=Parameters.ParameterName.Value\n```\n\n----------------------------------------\n\nTITLE: Enabling Unsafe BinaryFormatter Serialization in .NET 5 Project File\nDESCRIPTION: XML configuration to add to the .csproj file to enable unsafe BinaryFormatter serialization in a .NET 5 project as a workaround for the error.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/binaryformatter-exception-after-upgrade-to-net5.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n\t<TargetFramework>net5.0</TargetFramework>\n\t<EnableUnsafeBinaryFormatterSerialization>true</EnableUnsafeBinaryFormatterSerialization>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Styling Blockquotes and Articles in CSS\nDESCRIPTION: This CSS snippet defines styles for blockquotes and articles in the Telerik Reporting documentation. It includes styles for different types of alerts, article paragraphs, and responsive design adjustments.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/_assetsApi/api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\narticle {\n  background: transparent !important;\n}\n\ndiv.contribution-panel {\n  display: none;\n}\n\nblockquote {\n  border: 0;\n  margin: 20px 0;\n  min-height: 70px;\n  padding: 24px 80px;\n  background-color: #f9edc6;\n  background-image: url(\"/reporting/assets/important-icon.svg\");\n  color: #fff;\n  background-repeat: no-repeat;\n  background-size: 48px;\n  background-position: center;\n  background-position-x: 16px;\n  background-position-y: 50%;\n  color: #000000; }\n  blockquote:not(.alert-note) a, blockquote:not(.alert-note) a:link {\n    color: #000000;\n    text-decoration: underline; }\n    blockquote:not(.alert-note) a:hover, blockquote:not(.alert-note) a:active, blockquote:not(.alert-note) a:focus, blockquote:not(.alert-note) a:link:hover, blockquote:not(.alert-note) a:link:active, blockquote:not(.alert-note) a:link:focus {\n      color: #000000;\n      text-decoration: none !important; }\n  blockquote p:first-child,\n  blockquote ul:first-child,\n  blockquote ol:first-child {\n    margin-top: 0; }\n  blockquote p:last-child,\n  blockquote ul:last-child,\n  blockquote ol:last-child {\n    margin-bottom: 0; }\n  blockquote.disclaimer {\n    background-color: #eaebec;\n    color: #4f5d6c; }\n    blockquote.disclaimer p:first-child {\n      color: #36393f; }\n  blockquote.alert-note {\n    margin-top: 2em;\n    margin-bottom: 2em;\n    background-color: #eaebec;\n    color: #4f5d6c; }\n  blockquote.important {\n    background-color: #f9edc6;\n    background-image: url(\"/reporting/assets/important-icon.svg\"); }\n  blockquote.caution {\n    background-color: #f7e1df;\n    background-image: url(\"/reporting/assets/caution-icon.svg\"); }\n  blockquote.tip {\n    background-color: #e4f1df;\n    background-image: url(\"/reporting/assets/tip-icon.svg\"); }\n\n\narticle:not(.api-reference)>p:first-child, article:not(.api-reference) h1+p {\n  font-size: 18px;\n  font-weight: 300;\n  line-height: 24px;\n  margin-top: 15px;\n  margin-bottom: 20px;\n  font-family: \"Roboto\", Helvetica, Arial, sans-serif;\n  color: #8a959f;\n}\n\n@media (min-width: 768px) {\n  article:not(.api-reference)>p:first-child, article:not(.api-reference) h1+p {\n    font-size: 22px;\n    line-height: 28px;\n  }\n}\n\n@media (min-width: 1025px) {\n  article:not(.api-reference)>p:first-child, article:not(.api-reference) h1+p {\n    font-size: 26px;\n    line-height: 32px;\n  }\n}\n\n</style>\n```\n\n----------------------------------------\n\nTITLE: Generating Visual Studio ActivityLog using Developer Command Prompt\nDESCRIPTION: This command starts Visual Studio and creates log files on the user's desktop. It's used for troubleshooting when the Telerik menu is missing in Visual Studio.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/missing-telerik-menu-in-visual-studio.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\ndevenv /log %userprofile%\\desktop\\ActivityLog.xml\n```\n\n----------------------------------------\n\nTITLE: Environment Table for Telerik Reporting Nested Table Splitting\nDESCRIPTION: A markdown table describing the environment for splitting nested tables in Telerik Reporting, including product version, product name, and affected report item.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-split-a-nested-tabel-on-two-pages.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Product Version</td>\n\t\t\t<td>All</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Product</td>\n\t\t\t<td>Progress® Telerik® Reporting</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Report Item</td>\n\t\t\t<td>Table Report Item</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for .NET Framework Designer in XML\nDESCRIPTION: This XML snippet shows the default configuration file (`Telerik.ReportDesigner.exe.config`) distributed with the .NET Framework version of the Telerik Report Designer.  It includes configuration sections for Telerik Reporting and Report Designer, startup settings, assembly binding redirects, connection strings, and designer-specific settings, representing a standard configuration setup.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/configuration/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version =\"1.0\"?>\n<configuration>\n\t<configSections>\n\t\t<section\n\t\t\tname=\"Telerik.Reporting\"\n\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\"\n\t\t\tallowLocation=\"true\"\n\t\t\tallowDefinition=\"Everywhere\"/>\n\t\t<section\n\t\t\tname=\"Telerik.ReportDesigner\"\n\t\t\ttype=\"Telerik.ReportDesigner.Configuration.ReportDesignerConfigurationSection, Telerik.ReportDesigner.Configuration\"\n\t\t\tallowLocation=\"true\"\n\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\t<startup>\n\t\t<supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.0\"/>\n\t</startup>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<!--\n\t\t\t<probing privatePath=\"path-to-the-assemblies\"/>\n\t\t\t-->\n\t\t\t<dependentAssembly>\n\t\t\t\t<!-- Required for interoperability with older versions of Telerik Reporting -->\n\t\t\t\t<assemblyIdentity name=\"Telerik.Reporting\" culture=\"neutral\" publicKeyToken=\"a9d7983dfcc261be\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"0.0.0.0-{{buildversion}}\" newVersion=\"{{buildversion}}\"/>\n\t\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n\t<connectionStrings>\n\t\t<add name=\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\"\n\t\t\tconnectionString=\"Data Source=(local)\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=SSPI\"\n\t\t\tproviderName=\"System.Data.SqlClient\" />\n\t</connectionStrings>\n\t<Telerik.ReportDesigner DefaultWorkingDir=\"Examples\">\n\t</Telerik.ReportDesigner>\n\t<!-- Add assembly references -->\n\t<!--\n\t<Telerik.Reporting>\n\t\t<AssemblyReferences>\n\t\t\t<add name=\"MyCustomAssembly\" version=\"1.0.0.0\" />\n\t\t</AssemblyReferences>\n\t</Telerik.Reporting>\n\t-->\n\t<!--\n\t<system.diagnostics>\n\t\t<trace autoflush=\"true\" indentsize=\"4\">\n\t\t\t<listeners>\n\t\t\t\t<add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"C:\\Temp\\Telerik.ReportDesigner.log\" />\n\t\t\t\t<remove name=\"Default\" />\n\t\t\t</listeners>\n\t\t</trace>\n\t</system.diagnostics>\n\t-->\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Localize Package\nDESCRIPTION: NPM command to add the Angular localize package for report viewer localization\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-report-server.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nng add @angular/localize\n```\n\n----------------------------------------\n\nTITLE: Configuring GroupKeepTogether Property in C#\nDESCRIPTION: Set the GroupKeepTogether property of a Report group to control whether the group should be kept together on a single page or allowed to split.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/understanding-pagination.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nreportGroup.GroupKeepTogether = GroupKeepTogether.FirstDetail;\n```\n\n----------------------------------------\n\nTITLE: Report Unavailable Error Message in Telerik Reporting Web Viewers\nDESCRIPTION: The error message displayed when a report becomes unavailable or the session expires in Telerik Reporting web viewers. This typically happens when the ASP.NET Session state cannot be maintained.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/report-is-unavailable-or-session-has-expired-error-message.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nReport is unavailable or session has expired.\n```\n\n----------------------------------------\n\nTITLE: Setting Culture in Dockerfile with PowerShell\nDESCRIPTION: This PowerShell code snippet sets the locale within a Docker container to ensure that the correct culture is used for formatting, specifically addressing issues with invariant cultures that might cause incorrect currency symbol rendering. It sets DOTNET_SYSTEM_GLOBALIZATION_INVARIANT to false and defines LC_ALL and LANG to specify the desired culture (e.g., en_US.UTF-8).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/currency-formatted-textbox-does-not-render-correctly-in-certain-environments.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false\\\n    # Set the locale\n    LC_ALL=en_US.UTF-8 \\\n    LANG=en_US.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Setting Visibility Binding for SubReport in Telerik Reporting\nDESCRIPTION: This code snippet demonstrates how to hide a SubReport item when no data is available by adding a binding to the TextBox item's Bindings collection. The Expression uses Count(1)>0 to determine visibility based on record count.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-show-no-data-message-or-hide-an-item-in-case-of-no-data.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nProperty path: Parent.Parent.Parent.Visible\n\nExpression: = Count(1)>0\n```\n\n----------------------------------------\n\nTITLE: JSON Parameter Handling in HTML5 Report Viewer\nDESCRIPTION: The HTML5 Report Viewer uses JSON-formatted strings to transmit reportSource.parameters from the client. The solution involves updating JSON.NET package and configuring persistSession parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/cannot-refresh-html5-reportviewer-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reportSource\": {\n    \"parameters\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Subcategory with Parameter\nDESCRIPTION: This SQL query retrieves product subcategory data from the Production.ProductSubcategory table, filtering based on the ProductCategoryID parameter. The @ProductCategoryID parameter is used in the WHERE clause to dynamically filter the product subcategories based on the selected category.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/how-to-cascade-parameters-with-applied-filtering-on-data-source-level.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\tProductSubcategoryID,\n\t\tName AS SubcategoryName\n\tFROM\n\t\tProduction.ProductSubcategory\n\tWHERE\n\t\t(ProductCategoryID = @ProductCategoryID)\n```\n\n----------------------------------------\n\nTITLE: Query Master Data - Product Categories\nDESCRIPTION: SQL query to fetch product categories from the AdventureWorks database for the master report section.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-master-detail-report-using-table.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ProductCategoryID, Name FROM Production.ProductCategory\n```\n\n----------------------------------------\n\nTITLE: Configuring sendEmailEnd Event in HTML5 Report Viewer - JavaScript\nDESCRIPTION: This JavaScript code configures the sendEmailEnd event handler when initializing the HTML5 Report Viewer. The handler is invoked after a report is exported, changing the format to 'XLS' and logging the exported report's URL. Dependencies include jQuery for DOM manipulation and event handling, as well as the Telerik Reporting HTML5 Report Viewer for report interaction. Parameters include 'e', a jQuery event object, and 'args', which contains report-related data such as the format, URL, and email details. The code should be executed when the DOM is ready.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/sendemailend(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\tsendEmailEnd: function(e, args) {\n\t\t\targs.format = \"XLS\";\n\t\t\tconsole.log(\"This event handler will be called after exporting the report.\");\n\t\t\tconsole.log(\"The exported report can be found at \" + args.url);\n\t\t}\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ODP.NET for Parameter Binding\nDESCRIPTION: The provided XML snippet configures ODP.NET to bind parameters by name, which can resolve the ORA-01008 error when using the Oracle.ManagedDataAccess data provider. This configuration should be added to the application's configuration file. It forces the provider to use named parameter binding instead of positional binding.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/oracle-error-ora-01008-on-report-preview.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<oracle.manageddataaccess.client>\n\t\t<version number=\"*\">\n\t\t\t<settings>\n\t\t\t\t<setting name=\"BindByName\" value=\"True\"/>\n\t\t\t</settings>\n\t\t</version>\n\t</oracle.manageddataaccess.client>\n```\n\n----------------------------------------\n\nTITLE: Adding WPF ReportViewer to Toolbox Instructions\nDESCRIPTION: This section provides a step-by-step guide for adding the WPF ReportViewer control to the Visual Studio toolbox, enhancing developer convenience during report design.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add--manually-report-viewer-to-a-wpf-.net-framework-project.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Select a WPF window file (e.g. Window1.xaml).\n2. Open the toolbox and add your own tab or click on the General tab.\n3. Right click in the selected tab area and select Choose Items… from the context menu.\n4. The previous step will open Choose Toolbox Items dialog. Select the WPF Components tab and find the ReportViewer component.\n5. Click OK.\n```\n\n----------------------------------------\n\nTITLE: Runtime Item Error Stack Trace - C#\nDESCRIPTION: Stack trace showing the error path when a NotImplementedException occurs due to improperly merged Telerik Reporting assemblies. The error originates in the ItemFactory.Create method and propagates through the report processing pipeline.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/notimplementedexception-no-runtime-item-is-defined-for-report-item.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAn error has occurred while rendering a report:\nSystem.NotImplementedException: No runtime item is defined for Telerik.Reporting.Report item\n   at Telerik.Reporting.Processing.ItemFactory.Create(Object itemDef, IProcessingContext processingContext)\n   at Telerik.Reporting.Processing.ItemFactory.CreateItem(Object itemDef, IProcessingContext processingContext)\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessReport(Report report, IPathResolver pathResolver, IProcessingContext parentContext, IEnumerable`1 parameters, Key rootKey, Boolean interactivityEnabled, Boolean documentMapEnabled, PageLayoutInfo pageSettings, ErrorEventHandler errorHandler, List`1 documentNodes, Boolean& documentMapAvailable)\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessResolvedReports(ResolvedReportDocument resolvedReportDocument, IList`1 parameters, IProcessingContext contextPerDocument, Boolean interactivityEnabled, Boolean documentMapEnabled, PageLayoutInfo pageSettings, List`1 processedReports, ErrorEventHandler errorHandler, List`1 documentNodes, Boolean& documentMapAvailable, ListSlice& tocReportsSlice)\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessReportSource(ReportSource reportSource, IRenderingContext context)\n   at Telerik.Reporting.Processing.ReportProcessor.ProcessReportSource(ReportSource reportSource, Hashtable deviceInfo, IRenderingContext context)\n   at Telerik.ReportViewer.Common.ReportRenderer.Render(ReportRendererArgs args)\n```\n\n----------------------------------------\n\nTITLE: HTML Encoding with HtmlEncode Function in C#\nDESCRIPTION: Shows how to use the HtmlEncode function to encode an ampersand character in a string, which is useful for preparing text for HTML output.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/text-functions.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n=HtmlEncode(\"&Telerik\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly References for Custom Functions in XML\nDESCRIPTION: This XML snippet demonstrates how to add a reference to a custom assembly containing user-defined functions in the application's configuration file. It includes the necessary configuration section for Telerik Reporting and specifies the custom assembly under the AssemblyReferences section.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/extending-expressions/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<configSections>\n\t\t<section\n\t\t\tname=\"Telerik.Reporting\"\n\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\"\n\t\t\tallowLocation=\"true\"\n\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\t…\n\t<Telerik.Reporting>\n\t\t<AssemblyReferences>\n\t\t\t<add name=\"MyCustomAssembly\" version=\"1.0.0.0\" />\n\t\t</AssemblyReferences>\n\t</Telerik.Reporting>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Get Page from TIFF Image - C#\nDESCRIPTION: This C# code defines a custom user function `GetPageFromTiff` that extracts a specific page from a multi-page TIFF image. It takes the file path of the TIFF image and the page number as input, reads the image, extracts the specified page, and returns it as an Image object. The helper function `GetAllPages` extracts all frames from the image.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/select-page-of-tiff-image.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static Image GetPageFromTiff(string path, int page)\n{\n\tImage tiffImage;\n\tList<Image> images;\n\n\ttiffImage = Image.FromFile(path);\n\timages = GetAllPages(tiffImage);\n\n\treturn images[page];\n}\n\nprivate static List<Image> GetAllPages(Image multiPageImage)\n{\n\tList<Image> images = new List<Image>();\n\tint count = multiPageImage.GetFrameCount(FrameDimension.Page);\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tmultiPageImage.SelectActiveFrame(FrameDimension.Page, i);\n\t\tMemoryStream byteStream = new MemoryStream();\n\t\tmultiPageImage.Save(byteStream, ImageFormat.Tiff);\n\t\timages.Add(Image.FromStream(byteStream));\n\t\tbyteStream.Dispose();\n\t}\n\treturn images;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ITextResources Interface for Localization in VB\nDESCRIPTION: This code snippet demonstrates how to create a class that implements the ITextResources interface, allowing for flexible localization of tooltips and messages in the WPF Report Viewer. You need to define all required properties and pass an instance of your custom class to the TextResources property of the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/customizing/report-viewer-localization.md#2025-04-21_snippet_1\n\nLANGUAGE: vb\nCODE:\n```\n' Implementing ITextResources interface\nPublic Class CustomTextResources\n    Implements ITextResources\n\n    Default Public Property Item(ByVal resourceKey As String) As String Implements ITextResources.Item\n        Get\n            ' Custom logic to retrieve the resource string\n            Return GetResourceString(resourceKey)\n        End Get\n    End Property\n\n    Private Function GetResourceString(ByVal resourceKey As String) As String\n        ' Logic to retrieve the translated string based on resourceKey\n        Return \"Translated string for \" & resourceKey\n    End Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Configuring Globalization Settings for Automatic Culture Detection in XML\nDESCRIPTION: This XML snippet shows how to configure the globalization element in the web.config file to automatically detect and use the client browser's preferred language settings when rendering reports.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/localization.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<globalization culture=\"auto\" uiCulture=\"auto\" />\n```\n\n----------------------------------------\n\nTITLE: Report Definition - Instance Report Definition\nDESCRIPTION: Describes how reports are defined in code, by creating an instance of `Telerik.Reporting.Report`. These definitions can be passed to the Reporting engine with the built-in `InstanceReportSource`. They can also be serialized to `TRDX` or `TRDP` files.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/about-telerik-reporting.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIf you design a report in code, the result is an instance of `Telerik.Reporting.Report` which is created at runtime or is a result of modifying an already designed report. These report definition instances may be passed to the Reporting engine with the built-in [InstanceReportSource](/api/Telerik.Reporting.InstanceReportSource). They may be serialized or packaged to an equivalent declarative report definition (TRDX or TRDP file).\n```\n\n----------------------------------------\n\nTITLE: Implementing Clone Method for Custom Shape in C#\nDESCRIPTION: Overrides the Clone method to return a new instance of the custom shape with the same bounds.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-custom-shape.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\npublic override object Clone()\n{\n\treturn new MyCustomShape()\n\t{\n\t\tBounds = this.Bounds\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Product Category Line Total\nDESCRIPTION: Complex SQL query to retrieve product category line totals from AdventureWorks database, joining multiple tables to fetch sales and product information\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/polar.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\t[Production].[ProductCategory].[Name] AS 'Category',\n\t[Sales].[SalesOrderHeader].[OrderDate],\n\t[Sales].[SalesOrderDetail].[LineTotal]\nFROM\n\t[Production].[Product] INNER JOIN\n\t[Production].[ProductSubcategory] ON [Production].[Product].[ProductSubcategoryID] = [Production].[ProductSubcategory].[ProductSubcategoryID] INNER JOIN\n\t[Production].[ProductCategory] ON [Production].[ProductSubcategory].[ProductCategoryID] = [Production].[ProductCategory].[ProductCategoryID] INNER JOIN\n\t[Sales].[SalesOrderDetail] ON [Production].[Product].[ProductID] = [Sales].[SalesOrderDetail].[ProductID] INNER JOIN\n\t[Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] AND [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] AND \n\t[Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID]\n```\n\n----------------------------------------\n\nTITLE: Error Message: InvalidCastException during Report Viewer setup\nDESCRIPTION: This code snippet shows the error message that appears when trying to add a Telerik Report Viewer to a Web Site project within Visual Studio.  It highlights an InvalidCastException caused by incompatible COM object casting during the service setup.  This typically occurs because Telerik Reporting does not fully support design-time integration with Web Site projects.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-in-web-site-project-failed-to-setup-service-system-invalidcastexception.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"Failed to setup service.\\nSystem.InvalidCastException: Unable to cast COM object of type 'System.__ComObject' to class type 'Telerik.Reporting.Vs.Common.AssemblyReference'. Instances of types that represent COM components cannot be cast to types that do not represent COM components; however they can be cast to interfaces as long as the underlying COM component supports QueryInterface calls for the IID of the interface.\\n   at Telerik.Reporting.Vs.Common.DTEReferences.WebSiteReferences.Contains(String assemblyName)\\n   at Telerik.Reporting.Vs.Common.DTEReferences.WebSiteReferences.Contains(AssemblyName assemblyName)\\n   at Telerik.ReportViewer.Html5.WebForms.Design.InitialConfigHelper.ConfigureReferences(DTEProject project)\\n   at Telerik.ReportViewer.Html5.WebForms.Design.InitialConfigHelper.ConfigureFirstTime(IServiceProvider serviceProvider)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String in Web.config\nDESCRIPTION: XML configuration for setting up the database connection string in web.config file for the AdventureWorks database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<connectionStrings>\n\t<add name=\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\"\n\t\t\tconnectionString=\"Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=SSPI\"\n\t\t\tproviderName=\"System.Data.SqlClient\" />\n</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Properties for HTML5 Report Viewer in Markdown\nDESCRIPTION: This code snippet defines a markdown table that lists and describes the properties of the 'parameter' object in the HTML5 Report Viewer. It includes property names, their types, and descriptions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/parameter.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter | Type | Description |\n| ------ | ------ | ------ |\n| __availableValues__ |array of name-value pairs ({name: …, value: ….})|represents a list of predefined parameter values and their labels|\n| __multivalue__ |boolean|specifies whether the parameter can hold more than one value|\n| __allowBlank__ |boolean|specifies whether the parameter allows an empty string to be passed. Only for parameters of type string|\n| __allowNull__ |boolean|specifies whether the parameter allows a <null> value to be passed from its editor|\n| __autoRefresh__ |boolean|specifies whether the report viewer should auto-update the report when its value has changed|\n| __hasChildParameters__ |boolean|specifies whether the parameter is a cascading one (has dependencies)|\n| __id__ |boolean|represents parameter's unique identifier|\n| __isVisible__ |boolean|determines whether the parameter editor is visible or not|\n| __label__ |string|specifies the label for the parameter editor|\n| __name__ |string|specifies the name of the parameter editor|\n| __text__ |string|specifies the text for the parameter editor|\n| __type__ | __telerikReportViewer.ParameterTypes__ |specifies the type of the parameter|\n| __value__ |object|specifies the value of the parameter|\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Area Chart Query - SQL\nDESCRIPTION: This SQL snippet is used to retrieve the necessary fields from the Sales database to populate a Stacked Area Chart. It selects the OrderDate and LineTotal from the SalesOrderHeader and SalesOrderDetail tables, utilizing an inner join to correlate sales orders with their details.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/area.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n````SQL\nSELECT\n\t[Sales].[SalesOrderHeader].[OrderDate],\n\t[Sales].[SalesOrderDetail].[LineTotal]\nFROM\n\t[Sales].[SalesOrderDetail] INNER JOIN\n\t[Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID]\n````\n```\n\n----------------------------------------\n\nTITLE: Installing jQuery Peer Dependency\nDESCRIPTION: This PowerShell snippet demonstrates how to install jQuery as a peer dependency for the Angular Report Viewer, which is necessary for its operation within the Angular application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install --save jquery\n```\n\n----------------------------------------\n\nTITLE: Adding Background Overlay Programmatically in C# and VB.NET\nDESCRIPTION: This code demonstrates how to programmatically add a background overlay to a report by creating a BackgroundOverlay instance, setting its properties like Image, Sizing, and Opacity, and adding it to the report's PageSettings.Watermarks collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/watermarks.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nReport report = new Report();\n\n// Create a new BackgroundOverlay\nBackgroundOverlay backgroundOverlay = new BackgroundOverlay();\n\n// Set the properties\nbackgroundOverlay.Image = \"C:\\template.png\";\nbackgroundOverlay.Sizing = PictureWatermarkSizing.Stretch;\nbackgroundOverlay.Opacity = 1.0;\nbackgroundOverlay.RenderInReportDocument = true;\nbackgroundOverlay.PrintOnFirstPage = true;\nbackgroundOverlay.PrintOnLastPage = true;\n\n// Add the watermark to the Watermarks collection\nreport.PageSettings.Watermarks.Add(backgroundOverlay);\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim report As New Report()\n\n' Create a new BackgroundOverlay\nDim backgroundOverlay As New BackgroundOverlay()\n\n' Set the properties\nbackgroundOverlay.Image = \"C:\\template.png\"\nbackgroundOverlay.Sizing = PictureWatermarkSizing.Stretch\nbackgroundOverlay.Opacity = 1.0\nbackgroundOverlay.RenderInReportDocument = True\nbackgroundOverlay.PrintOnFirstPage = True\nbackgroundOverlay.PrintOnLastPage = True\n\n' Add the watermark to the Watermarks collection\nreport.PageSettings.Watermarks.Add(backgroundOverlay)\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught TypeError in jQuery\nDESCRIPTION: This code snippet shows the error message encountered when attempting to open the export options in the Telerik Reporting viewer, indicating a compatibility issue between jQuery and Kendo UI versions. The error occurs during function calls that utilize the 'getClientRects' method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/uncaught-typeerror-getClientRects-is-not-a-function.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n````\nUncaught TypeError: X.getClientRects is not a function\n\n\tat M.fn.init.offset (jquery-3.3.1.js:10020)\n\tat init._position (telerikReportViewer.kendo-<VERSION>.min.js:3)\n\tat init.open (telerikReportViewer.kendo-<VERSION>.min.js:3)\n\tat telerikReportViewer.kendo-<VERSION>.min.js:3\n````\n```\n\n----------------------------------------\n\nTITLE: Creating Button UI for Parameter Updates in Angular\nDESCRIPTION: HTML code for creating a button in Angular that triggers a parameter update function when clicked. The button passes the current value to the handler function.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button (click)=\"onButtonClick(value)\">Update parameter value</button>\n```\n\n----------------------------------------\n\nTITLE: Crystal Reports 12.0 Assembly Binding Configuration\nDESCRIPTION: XML configuration for Crystal Reports version 12.0, with mixed version numbers for different components.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/converting-reports-from-various-versions-of-crystalreports.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.CrystalReports.Engine\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"12.0.2000.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Enterprise.Framework\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"12.0.1100.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Enterprise.InfoStore\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"12.0.1100.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Shared\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"12.0.2000.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.ReportAppServer.DataDefModel\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"12.0.1100.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.ReportAppServer.ReportDefModel\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"12.0.1100.0\"/>\n\t\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource Programmatically in ASP.NET Web Forms (VB.NET)\nDESCRIPTION: This snippet shows how to programmatically set the ReportSource property of a ReportViewer control in an ASP.NET Web Forms application using VB.NET. It creates a TypeReportSource object and sets its TypeName to specify the report class and assembly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-design-time-reportviewer-control-reportsource-property-from-the-property-grid-does-not-show-available-reports.md#2025-04-21_snippet_1\n\nLANGUAGE: VB\nCODE:\n```\nProtected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\n\tIf Not IsPostBack Then\n\t\tDim typeReportSource As New Telerik.Reporting.TypeReportSource()\n\t\ttypeReportSource.TypeName = \"ListBoundReport, VB.ReportLibrary\"\n\t\tReportViewer1.ReportSource = typeReportSource\n\t\tReportViewer1.RefreshReport()\n\tEnd If\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Listener in .NET\nDESCRIPTION: Sets up a trace listener in the Standalone Report Designer for .NET to capture diagnostic logs, useful in identifying crash causes. This XML snippet is intended for the Telerik.ReportDesigner.Net.dll.config file, requiring setup of the assembly path and a backup of the configuration. The type specifies the fully qualified name of the trace listener. Inputs include debugging information and the output is a custom log file. Ensure the custom listener assembly is in the designer's folder.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/standalone-report-designer-problems.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version =\"1.0\"?>\n\t\t<configuration>\n\t\t\t...\n\t\t\t<Telerik.Reporting>\n\t\t\t\t...\n\t\t\t\t<traceListeners>\n\t\t\t\t\t<add name=\"myCustomListener\" type=\"CustomListenersNamespace.CustomListener, CustomListenersAssembly\"  initializeData=\"Telerik.ReportDesigner.custom.log\" />\n\t\t\t\t\t<remove name=\"Default\" />\n\t\t\t\t</traceListeners>\n\t\t\t</Telerik.Reporting>\n\t\t</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding Sorting to Table/Crosstab Data Item Programmatically in VB.NET\nDESCRIPTION: This code snippet shows how to programmatically add sorting to a Table or Crosstab data item in VB.NET. It creates a new Sorting object, sets its Expression and Direction properties, and adds it to the table's Sortings collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/ordering-data/how-to-add-sorting-to-table-item-and-crosstab-item.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim sorting As New Telerik.Reporting.Sorting()\nsorting.Expression = \"=Fields.ProductName\"\nsorting.Direction = Telerik.Reporting.SortDirection.Asc\ntable.Sortings.Add(sorting)\n```\n\n----------------------------------------\n\nTITLE: Sample Data for Range Bar Graph with Multiple Ranges\nDESCRIPTION: This SQL-like data structure represents the sample data used for demonstrating multiple ranges per category in a Range Bar graph. It includes Start and End values for each range, along with a Category identifier.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-display-multiple-ranges-per-series-range-bar-graph.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nStart,End,Category\n0,540,A\n540,600,B\n600,1020,C\n1020,1080,D\n1080,1439,A\n```\n\n----------------------------------------\n\nTITLE: Embedding Web Report Designer HTML\nDESCRIPTION: This HTML snippet demonstrates how to embed the Telerik Web Report Designer into an ASP.NET Web Forms page. The key aspect is placing the `<div>` placeholder for the designer outside of the `<form>` element to prevent post-back issues. It includes references to jQuery, the web report designer's Kendo UI scripts, and resources from the reporting API.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/web-designer-in-webforms-page.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"<body>\n\t<div id=\\\"webReportDesigner\\\" style=\\\"margin-top: 40px\\\">\n\t\tloading...\n\t</div>\n\t<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>\n\t<script src=\\\"https://reporting.cdn.telerik.com/16.2.22.1109/js/webReportDesigner.kendo.min.js\\\"></script>\n\t<script src=\\\"http://localhost:59655/api/reportdesigner/resources/js/telerikReportViewer\\\"></script>\n\t<script src=\\\"http://localhost:59655/api/reportdesigner/designerresources/js/webReportDesigner-16.2.22.1109.min.js/\\\"></script>\n\t\n\t<script type=\\\"text/javascript\\\">\n\t\t$(document).ready(function () {\n\t\t\tvar reportName = \\\"Barcodes Report.trdp\\\";\n\t\n\t\t\t$(\\\"#webReportDesigner\\\").telerik_WebReportDesigner({\n\t\t\t\ttoolboxArea: {\n\t\t\t\t\tlayout: \\\"list\\\"\n\t\t\t\t},\n\t\t\t\tserviceUrl: \\\"http://localhost:59655/api/reportdesigner/\\\",\n\t\t\t\treport: reportName,\n\t\t\t\tpersistSession: true,\n\t\t\t\tskipOnboarding: false,\n\t\t\t}).data(\\\"telerik_WebDesigner\\\");\n\t\t});\n\t</script>\n\n\t<form id=\\\"form1\\\" runat=\\\"server\\\">\n\t</form>\n</body>\n\"\n```\n\n----------------------------------------\n\nTITLE: HTML Environment Table Structure\nDESCRIPTION: HTML table structure defining the environment details for Telerik Reporting, including product information, version, and supported report viewers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/cannot-load-html5-viewer-templates-error.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Product</td>\n\t\t\t<td>Progress® Telerik® Reporting</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Version</td>\n\t\t\t<td>Q2 2012 and later</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Report Viewers</td>\n\t\t\t<td>WinForms, WPF, ASP.NET</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Configuration in C#\nDESCRIPTION: This C# code defines a helper method to load a specific JSON-formatted configuration file (reportingAppSettings.json) for the reporting engine. It uses the ConfigurationBuilder to add the JSON file and builds the IConfiguration instance.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-with-controllers.md#2025-04-21_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\n````CSharp\nstatic IConfiguration ResolveSpecificReportingConfiguration(IWebHostEnvironment environment)\n{\n\t// If a specific configuration needs to be passed to the reporting engine, add it through a new IConfiguration instance.\n\tvar reportingConfigFileName = System.IO.Path.Combine(environment.ContentRootPath, \"reportingAppSettings.json\");\n\treturn new ConfigurationBuilder()\n\t\t.AddJsonFile(reportingConfigFileName, true)\n\t\t.Build();\n}\n````\n```\n\n----------------------------------------\n\nTITLE: Referencing Print.js and Telerik Report Viewer\nDESCRIPTION: This snippet demonstrates how to add references to the Print.js third-party library and the local copy of the Telerik Report Viewer's JavaScript file in the HTML page.  It is a prerequisite for the first workaround.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-error-chrome.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"<head>\\n    ...\\n\\n    <script src=\\\"https://printjs-4de6.kxcdn.com/print.min.js\\\"></script>\\n\\n    <script src=\\\"/ReportViewer/telerikReportViewer-13.2.19.918.js\\\"></script>\\n   ...\"\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Formatting Rule Expression for No Data Message in Telerik Reporting\nDESCRIPTION: Expression for conditionally displaying a \"No Data\" message based on data count. This filter expression should be added to the Conditional Formatting Rule to check if the data source contains any records.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-display-no-data-message-for-reports-and-subreports.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\nExpression: =Count(1)\nOperator: =\nValue: =0\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Constants in Telerik Reporting Expressions\nDESCRIPTION: Illustrates the use of numeric constants in Telerik Reporting expressions. Integers and decimals are supported and can be used in comparisons.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/constants.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n= Fields.LineTotal < 100\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportDesignerController in VB.NET\nDESCRIPTION: Configuration of Telerik Web Report Designer REST service with file-based storage and report source resolution in an ASP.NET MVC application using Visual Basic\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-framework-application.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nImports System.IO\nImports Telerik.Reporting.Services\nImports Telerik.WebReportDesigner.Services\nImports Telerik.WebReportDesigner.Services.Controllers\n\nPublic Class ReportDesignerController\n    Inherits ReportDesignerControllerBase\n\n    Shared ReadOnly configurationInstance As ReportServiceConfiguration\n    Shared ReadOnly designerConfigurationInstance As ReportDesignerServiceConfiguration\n\n    Shared Sub New()\n        Dim appPath = HttpContext.Current.Server.MapPath(\"~/\")\n        Dim reportsPath = Path.Combine(appPath, \"Reports\")\n        Dim resolver = New UriReportSourceResolver(reportsPath).AddFallbackResolver(New TypeReportSourceResolver())\n\n        Dim reportServiceConfiguration As New ReportServiceConfiguration()\n        reportServiceConfiguration.HostAppId = \"Html5App\"\n        reportServiceConfiguration.ReportSourceResolver = resolver\n        reportServiceConfiguration.Storage = New Telerik.Reporting.Cache.File.FileStorage()\n        configurationInstance = reportServiceConfiguration\n\n        Dim designerServiceConfiguration As New ReportDesignerServiceConfiguration()\n        designerServiceConfiguration.DefinitionStorage = New FileDefinitionStorage(reportsPath)\n        designerServiceConfiguration.SettingsStorage = New FileSettingsStorage(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"Telerik Reporting\"))\n        designerConfigurationInstance = designerServiceConfiguration\n    End Sub\n\n    Public Sub New()\n        Me.ReportServiceConfiguration = configurationInstance\n        Me.ReportDesignerServiceConfiguration = designerConfigurationInstance\n    End Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker container for SkiaSharp\nDESCRIPTION: Dockerfile snippet for setting up a Linux Docker container with SkiaSharp support for Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/dot-net-core-support.md#2025-04-21_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM microsoft/dotnet:7.0-runtime AS base\nRUN apt-get update && \\\n    apt-get install -y libfreetype6 libfontconfig1\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth_ActionLeave Handler Method - CSharp\nDESCRIPTION: This snippet outlines a method that resets the changes made to framework elements during the ActionEnter event. It uses existing field values to revert the visual state of elements like Borders or Paths when the mouse leaves.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-wpf-report-viewer.md#2025-04-21_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\n// The code here restores the default state of the framework elements, changed during the Choropleth_ActionEnter  event.\nvoid Choropleth_ActionLeave( object sender, Telerik.ReportViewer.Wpf.InteractiveActionEventArgs args)\n{\n\tif (args.Action.ReportItemName == \"textBoxTitle\" )\n\t{\n\t\tvar b = args.Element as System.Windows.Controls.Border;\n\t\tif ( null != b)\n\t\t{\n\t\t\tb.BorderThickness = new Thickness(0);\n\t\t\tb.BorderBrush = null ;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar p = args.Element as System.Windows.Shapes.Path;\n\t\tif (p != null )\n\t\t{\n\t\t\tp.Fill = this .fillBrush;\n\t\t\tp.Stroke = this .stroke;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Kendo Scripts and Disabling Embedded AJAX DLLs in ASP.NET\nDESCRIPTION: This snippet shows how to load Kendo scripts in the head section and disable embedded jQuery in the RadScriptManager. It's necessary for integrating the Chart and Report Viewer components.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/combine-chart-and-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<head runat=\"server\">\n    <link rel=\"stylesheet\" href=\"https://kendo.cdn.telerik.com/2019.3.1023/styles/kendo.default-v2.min.css\" />\n    <script src=\"https://kendo.cdn.telerik.com/2019.3.1023/js/jquery.min.js\"></script>\n    <script src=\"https://kendo.cdn.telerik.com/2019.3.1023/js/kendo.all.min.js\"></script>\n    ...\n</head>\n```\n\nLANGUAGE: ASP.NET\nCODE:\n```\n<telerik:RadScriptManager ID=\"RadScriptManager1\" runat=\"server\" EnableEmbeddedjQuery=\"false\">\n    <Scripts>\n        <asp:ScriptReference Assembly=\"Telerik.Web.UI\" Name=\"Telerik.Web.UI.Common.Core.js\" />\n        <asp:ScriptReference Assembly=\"Telerik.Web.UI\" Name=\"Telerik.Web.UI.Common.jQueryExternal.js\" />\n        <asp:ScriptReference Assembly=\"Telerik.Web.UI\" Name=\"Telerik.Web.UI.Common.jQueryPlugins.js\" />\n    </Scripts>\n</telerik:RadScriptManager>\n```\n\n----------------------------------------\n\nTITLE: Absolute Path/URL Example for External Style Sheet\nDESCRIPTION: Example showing absolute path reference format for external style sheets in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/exporting-and-reusing-style-sheets.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nC:\\Application1\\StyleSheets\\StyleSheet1.xml\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://www.mysite.com/Application1/StyleSheets/StyleSheet1.xml\n```\n\n----------------------------------------\n\nTITLE: Launching Visual Studio with Reset Parameters\nDESCRIPTION: This step involves launching Visual Studio from the command line with specific parameters that reset package information and enable logging. This allows for a clean start and helps diagnose issues by generating an activity log.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"C:\\Program Files\\Microsoft Visual Studio 10.0\\Common7\\IDE\\devenv\" /ResetSkipPkgs /log \"&lt;my_folder&gt;\\ActivityLog.xml\"\n```\n\nLANGUAGE: text\nCODE:\n```\n\"C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\Common7\\IDE\\devenv\" /ResetSkipPkgs /log \"&lt;my_folder&gt;\\ActivityLog.xml\"\n```\n\n----------------------------------------\n\nTITLE: Updating GraphSeries Legend Property in Telerik Reporting\nDESCRIPTION: The Telerik.Reporting.GraphSeries.Legend property is now obsolete. It should be replaced with the Telerik.Reporting.GraphSeries.LegendItem.Value property in code. Failing to do so will result in the report definition being re-serialized with the new property when opened and modified in the designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2013/q3-2013.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2012/3.4\n```\n\n----------------------------------------\n\nTITLE: XAML Silverlight Interactive Report Rendering\nDESCRIPTION: Renders a report in XAML for Silverlight with interactive page layout. Requires multi-stream rendering with RenderReport method. Telerik internal use.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/export-formats.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.XamlRendering.SilverlightReportInteractive, Telerik.Reporting, Version=x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll Mode Button for Mobile (Default Template)\nDESCRIPTION: HTML code to add the Scroll Mode button to the side menu for mobile screens using the default template. This snippet should be inserted into the 'ul' element with the 'trv-side-menu-ul' id attribute.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-show-the-page-scroll-mode-button.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<li aria-label=\"ariaLabelMenuContinuousScroll\"><a data-command=\"telerik_ReportViewer_pageMode\" title=\"menuContinuousScrollTitle\" href=\"#\"><i class=\"t-font-icon t-i-scroll\"></i><span>menuContinuousScrollText</span></a></li>\n```\n\n----------------------------------------\n\nTITLE: Conditional Cell Color Expression for Triangle Matrix in Telerik Reporting\nDESCRIPTION: This expression dynamically sets the font color of cells in the triangle matrix based on value ranges. It makes cells with no content white, and applies different colors to cells based on specific numeric value thresholds.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-triangle-matrix-table-design-telerik-reporting.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= (Fields.Value is Null) Or (Fields.Value = \"\") ? \"white\" : Ifs(\n\t\tFields.Value < 150, \"green\", \n\t\tFields.Value < 250, \"red\", \n\t\tFields.Value < 350, \"yellow\",\n\t\tFields.Value < 450, \"blue\",\n\t\tFields.Value < 550, \"brown\",\n\t\tFields.Value < 650, \"pink\",\n\t\tFields.Value < 750, \"black\",\n\t\tFields.Value < 850, \"light green\",\n\t\tFields.Value < 950, \"violet\",\n\t\t\"gray\")\n```\n\n----------------------------------------\n\nTITLE: Error Response from Fiddler\nDESCRIPTION: Raw response from Fiddler showing the connection reset error when attempting export operations.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-viewer-export-operations-fail-with-err_connection_reset_error_504.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Fiddler] ReadResponse() failed: The server did not return a complete response for this request. Server returned 0 bytes.\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Filters Programmatically in C#\nDESCRIPTION: Demonstrates how to programmatically add a filter to a Graph item using C#. The code shows creating a new Filter object and adding it to the Graph's Filters collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/filtering-data/how-to-add-filtering-to-graph-item.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nGraph graph = new Graph();\nFilter filter = new Filter();\nfilter.Expression = \"=Fields.UnitsInStock\";\nfilter.Operator = FilterOperator.GreaterThan;\nfilter.Value = \"10\";\ngraph.Filters.Add(filter);\n```\n\n----------------------------------------\n\nTITLE: FileNotFoundException Error Message in C#\nDESCRIPTION: This code snippet shows the error message that occurs when there's a version mismatch between Telerik.ReportViewer.BlazorNative and Telerik UI for Blazor packages. The error indicates that the system cannot find the specified Telerik.Blazor assembly file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/could-not-load-file-assembly-telerik-blazor.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nFileNotFoundException: Could not load file or assembly 'Telerik.Blazor, Version=4.1.0.0, Culture=neutral, PublicKeyToken=29ac1a93ec063d92'. The system cannot find the file specified.\n```\n\n----------------------------------------\n\nTITLE: Problematic Web.config Configuration with Default Namespace\nDESCRIPTION: An example of a web.config file with a default namespace that causes the DocumentElement exception in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/this-document-already-has-a-documentelement-node-exception.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<configuration xmlns=\"http://schemas.microsoft.com/.NetConfiguration/v2.0\">\n```\n\n----------------------------------------\n\nTITLE: Setting ConnectionString for CubeDataSource in VB.NET\nDESCRIPTION: This snippet shows how to set the ConnectionString property of a CubeDataSource to connect to the Adventure Works DW 2008R2 sample database in VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/connecting-the-cubedatasource-component-to-an-olap-database.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nMe.cubeDataSource1.ConnectionString = \"Data Source=localhost;Initial Catalog=Adventure Works DW 2008R2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Connection String via Parameter Binding in XML\nDESCRIPTION: XML binding configuration that maps a report parameter to the DataSource.ConnectionString property. This allows dynamic modification of the connection string at runtime through a parameter named ConnectionStringParameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-pass-connectionstring-to-report-dynamically-through-report-parameter.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nProperty path                   |   Expression\n\nDataSource.ConnectionString     |   = Parameters.ConnectionStringParameter.Value\n```\n\n----------------------------------------\n\nTITLE: Sample Error Message for Export Format\nDESCRIPTION: Example of the error message shown when a rendering format is not available during programmatic export.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/missing-docx-xlsx-pptx-xps-export-options.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{X} rendering format is not available\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing for Visual Studio Crashes (XML)\nDESCRIPTION: This XML snippet demonstrates how to enable tracing in the Visual Studio configuration file (`devenv.exe.config`) to capture detailed information about Visual Studio crashes.  The trace listener is configured to write the output to a log file named `DEVENV.LOG` in the `c:\\temp` directory.  The `autoflush` attribute ensures that the buffer is flushed to the file after each write.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/visual-studio-report-designer/visual-studio-problems.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n\"<?xml version =\\\"1.0\\\"?>\\n\\t<configuration>\\n\\t\\t...\\n\\t\\t<system.diagnostics>\\n\\t\\t\\t<trace autoflush=\\\"true\\\" indentsize=\\\"4\\\">\\n\\t\\t\\t\\t<listeners>\\n\\t\\t\\t\\t\\t<add name=\\\"myListener\\\" type=\\\"System.Diagnostics.TextWriterTraceListener\\\" initializeData=\\\"c:\\\\temp\\\\DEVENV.LOG\\\" />\\n\\t\\t\\t\\t\\t<remove name=\\\"Default\\\" />\\n\\t\\t\\t\\t</listeners>\\n\\t\\t\\t</trace>\\n\\t\\t</system.diagnostics>\\n\\t</configuration>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Setting Security Protocol for TLS 1.2\nDESCRIPTION: This snippet sets the Security Protocol to allow the use of TLS 1.2 for connections in .NET Framework 4.0, which does not support it by default. This is necessary to avoid errors when trying to communicate with services that require TLS 1.2.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/web-service-data-source-failing-to-connect-with-tls1.2.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;\n```\n\n----------------------------------------\n\nTITLE: Inner List Data Source Binding\nDESCRIPTION: Expression used to bind the inner list's data source to the parent data object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/two-lists-show-details-in-parallel.md#2025-04-21_snippet_3\n\nLANGUAGE: Expression\nCODE:\n```\n= ReportItem.DataObject\n```\n\n----------------------------------------\n\nTITLE: XML Schema Version Update for TRDX Files\nDESCRIPTION: The XML schema version used in TRDX files created by the Standalone Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2016/r2-2016.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2012/4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL DataSource for Sales Data\nDESCRIPTION: SQL query to retrieve product category, subcategory, product name, line total, and order date from AdventureWorks database. Joins multiple tables to provide comprehensive sales information for reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/graph-add-drilldown-action.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\tPC.Name AS ProductCategory\n\t, PS.Name AS ProductSubCategory\n\t, P.Name AS ProductName\n\t, SOD.LineTotal\n\t, SOH.OrderDate\n\tFROM\n\tProduction.Product AS P\n\tINNER JOIN Production.ProductSubcategory AS PS\n\tINNER JOIN Production.ProductCategory AS PC\n\tON PS.ProductCategoryID = PC.ProductCategoryID\n\tON P.ProductSubcategoryID = PS.ProductSubcategoryID\n\tINNER JOIN Sales.SalesOrderDetail AS SOD\n\tON P.ProductID = SOD.ProductID\n\tINNER JOIN Sales.SalesOrderHeader AS SOH\n\tON SOD.SalesOrderID = SOH.SalesOrderID\n```\n\n----------------------------------------\n\nTITLE: Parameterized MDX Query for CubeDataSource\nDESCRIPTION: An MDX query that selects product sales grouped by category and subcategory, with a slicing axis by year specified as a parameter. It uses the StrToMember function to convert the parameter value to a valid cube member.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/specifying-query-parameters-with-the-cubedatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect non empty { [Measures].[Sales Amount] } on columns,\n\tnon empty { [Product].[Category].[Category] *\n\t[Product].[Subcategory].[Subcategory] } on rows\nfrom [Adventure Works]\nwhere StrToMember(@Year)\n```\n\n----------------------------------------\n\nTITLE: Removing StyleManager Theme Attribute in XAML\nDESCRIPTION: Remove the StyleManager.Theme attribute from the report viewer as it's no longer required with implicit styling.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/the-wpf-silverlight-report-viewer-is-blank-after-upgrading-from-version-prior-to-q1-2014-to-q1-2014-or-later.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\ntelerikControls:StyleManager.Theme=\"Vista\"\n```\n\n----------------------------------------\n\nTITLE: ASP.NET Core REST Service Method Reference\nDESCRIPTION: Obsolete and new asynchronous methods for the ASP.NET Core Reporting REST Service\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2021/r1-2021-sp1.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nGetResource // Obsolete\nGetResourceAsync // New recommended method\n```\n\n----------------------------------------\n\nTITLE: Registering SqlClientFactory in Web Report Designer Controller\nDESCRIPTION: Code showing how to register the Microsoft.Data.SqlClient provider factory in a Web Report Designer controller. This setup is required to enable SQL Server connections using the Microsoft.Data.SqlClient provider.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-data-providers/using-microsoft-data-sqlclient-data-proivder.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Route(\"api/reportdesigner\")]\npublic class ReportDesignerController : ReportDesignerControllerBase\n{\n    static ReportDesignerController()\n    {\n        Telerik.Reporting.Processing.Data.DbProviderFactories.RegisterFactory(\"Microsoft.Data.SqlClient\", Microsoft.Data.SqlClient.SqlClientFactory.Instance);\n    }\n    public ReportDesignerController(IReportDesignerServiceConfiguration reportDesignerServiceConfiguration, IReportServiceConfiguration reportServiceConfiguration)\n        : base(reportDesignerServiceConfiguration, reportServiceConfiguration)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing libgdiplus on macOS using Homebrew\nDESCRIPTION: Command to install libgdiplus, which is required for using System.Drawing on macOS.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/dot-net-core-support.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install mono-libgdiplus\n```\n\n----------------------------------------\n\nTITLE: Updating NuGet Source with Clear Text Credentials (PowerShell)\nDESCRIPTION: This PowerShell command updates an existing Telerik NuGet feed source to store the credentials in clear text.  This is useful if a token was previously stored and needs to be replaced with clear text credentials.  NuGet CLI must be installed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/installation/adding-private-nuget-feed.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n\"NuGet Sources Update -Name \\\"telerik.com\\\" -Source \\\"https://nuget.telerik.com/v3/index.json\\\" ^\n\t-UserName \\\"your login email\\\" -Password \\\"your password\\\" ^\n\t-StorePasswordInClearText\"\n```\n\n----------------------------------------\n\nTITLE: Relative Path/URL Example for External Style Sheet\nDESCRIPTION: Example showing relative path reference format for external style sheets in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/exporting-and-reusing-style-sheets.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\\StyleSheets\\StyleSheet1.xml\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n~/StyleSheets/StyleSheet1.xml\n```\n\n----------------------------------------\n\nTITLE: Specifying jQuery Version for HTML5 Report Viewers\nDESCRIPTION: The jQuery version required for HTML5 Report Viewers in R3 2018, which is compatible with multiple jQuery versions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2018/r3-2018.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// jQuery 1.12.4 (also compatible with 1.10.x, 2.2.x and 3.3.1)\n```\n\n----------------------------------------\n\nTITLE: Accessing User Identity in Telerik Reporting R1 2018 SP3\nDESCRIPTION: In REST Report Service implementations, HttpContext.Current is not accessible in the rendering thread. Instead, use the new UserIdentity.Current property or the global UserIdentity object in report expressions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2018/r1-2018-sp3.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.Processing.UserIdentity.Current\n```\n\nLANGUAGE: C#\nCODE:\n```\n=UserIdentity\n```\n\n----------------------------------------\n\nTITLE: Error Message Display in Web Report Designer\nDESCRIPTION: The error message that appears in the bottom right corner of the Web Report Designer and in the browser's console when the issue occurs.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/could-not-retrieve-information-for-folder-web-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCould not retrieve information for folder. Error: An error has occurred.\n```\n\n----------------------------------------\n\nTITLE: Default Localization Resource File\nDESCRIPTION: Primary resource file containing default string resources for Telerik Report Viewer UI elements and messages\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/html5-report-viewer-translations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n_resources.en.js\n```\n\n----------------------------------------\n\nTITLE: Setting ContinuousPaper for Word Format Using Binding Expression\nDESCRIPTION: This binding expression sets the ContinuousPaper property to true only when rendering to DOCX format. This avoids the first paging when rendering to Word, preventing blank pages from appearing.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/report-blank-pages-word-docx.md#2025-04-21_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n= RenderingFormat.Name = \"DOCX\"\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.AspNet.WebApi.Client in Visual Studio\nDESCRIPTION: This snippet provides guidance on installing the necessary Microsoft.AspNet.WebApi.Client package through the Visual Studio Package Manager Console, which is essential for addressing the failed attempt error in the WinForms ReportViewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/winforms-reportviewer-failed-attempt-error-connecting-server-reporting-rest.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nInstall-Package Microsoft.AspNet.WebApi.Client\n```\n\n----------------------------------------\n\nTITLE: Adding Kendo UI Theme Resources for Report Viewer\nDESCRIPTION: HTML code for adding Kendo UI CSS theme references needed by the Telerik HTML5 Report Viewer in the viewer component template.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-web-report-designer-in-angular-application.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" id=\"common-css\" />\n\t<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" id=\"skin-css\" />\n\t<div id=\"reportViewer\">\n\t//...\n```\n\n----------------------------------------\n\nTITLE: Configuring Application with Provide Animations in Angular 17\nDESCRIPTION: This snippet configures an Angular 17 application by importing the provideAnimations function and establishing necessary providers for routing and animations in a configuration file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/integrating-with-project-item-generator.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ApplicationConfig } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { provideAnimations } from '@angular/platform-browser/animations'\nimport { routes } from './app.routes';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideRouter(routes), provideAnimations()]\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning the Telerik Reporting Documentation Repository\nDESCRIPTION: Git command to clone the Telerik Reporting documentation repository to your local machine\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:telerik/reporting-docs.git\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer in ASP.NET Core\nDESCRIPTION: Sets up an HTML page with the necessary references and JavaScript code to initialize the Telerik HTML5 Report Viewer in an ASP.NET Core application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/how-to-use-html5-report-viewer-in-an-asp.net-core-2.1-and-2.2-application.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t  <title>Telerik HTML5 Report Viewer Demo in ASP.NET Core</title>\n\t  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>>\n\t  <link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n\t  <link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n\t  <script src=\"/api/reports/resources/js/telerikReportViewer\"></script>>\n\t  <style>\n\t\t  #reportViewer1 {\n\t\t\t  position: absolute;\n\t\t\t  left: 5px;\n\t\t\t  right: 5px;\n\t\t\t  top: 50px;\n\t\t\t  bottom: 5px;\n\t\t\t  overflow: hidden;\n\t\t\t  font-family: Verdana, Arial;\n\t\t  }\n\t  </style>\n\t</head>\n\t<body>\n\t  <div id=\"reportViewer1\">\n\t\t  loading...\n\t  </div>\n\t  <script>\n\t\t  $(document).ready(function () {\n\t\t\t  $(\"#reportViewer1\")\n\t\t\t   .telerik_ReportViewer({\n\t\t\t\t\t  serviceUrl: \"api/reports/\",\n\t\t\t\t\t  reportSource: {\n\t\t\t\t\t\t  report: \"Barcodes Report.trdp\",\n\t\t\t\t\t\t  parameters: {}\n\t\t\t\t\t  },\n\t\t\t\t\t  viewMode: telerikReportViewer.ViewModes.INTERACTIVE,\n\t\t\t\t\t  scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,\n\t\t\t\t\t  scale: 1.0,\n\t\t\t\t\t  enableAccessibility: false,\n\t\t\t\t\t  sendEmail: { enabled: true }\n\t\t\t\t  });\n\t\t  });\n\t  </script>\n\t</body>\n\t</html>\n```\n\n----------------------------------------\n\nTITLE: Example Reinstall Telerik Reporting - VS 2019 Professional\nDESCRIPTION: This is an example command that reinstalls Telerik Reporting for Visual Studio 2019 Professional edition.  It demonstrates the use of the `msiexec` command with the specific installer name and directory for Visual Studio 2019 Professional.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-value-cannot-be-null-parameter-name-instance-vs2017-report-designer.md#2025-04-21_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n\"msiexec /i Telerik_Reporting_R1_2023_SP1_DEV.msi PRODUCTDIR=\\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Professional\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Angular Report Viewer Setup\nDESCRIPTION: Dependencies and version requirements for implementing the Angular Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2017/r3-2017.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Required Angular version: 4.0.0 or later\n// Required jQuery version: 3.2.1\nimport { ReportViewerModule } from '@progress/telerik-reporting-angular-viewer';\n```\n\n----------------------------------------\n\nTITLE: Sample Data for Waterfall Chart in SQL\nDESCRIPTION: This SQL snippet represents the sample data structure for creating a waterfall chart. It includes columns for Item names and their corresponding Values, with the last row representing the total.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-waterfall-chart-using-graph.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nItem,Value\nProduct Revenue,420\nServices Revenue,210\nFixed Costs,-170\nVariable Costs,-140\nTotal,0\n```\n\n----------------------------------------\n\nTITLE: Adding Text Watermark Programmatically in C# and VB.NET\nDESCRIPTION: This code demonstrates how to programmatically add a text watermark to a report by creating a TextWatermark instance, setting its properties such as Text, Font, Color, Opacity, and Position, and adding it to the report's PageSettings.Watermarks collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/watermarks.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nReport report = new Report();\n\n// Create a new TextWatermark\nTextWatermark textWatermark = new TextWatermark();\n\n// Set the properties\ntextWatermark.Text = \"Draft\";\ntextWatermark.Font = new Drawing.TypedFont(\"Arial\", Drawing.TypedFontStyle.Bold, Drawing.Unit.Point(60));\ntextWatermark.Color = Drawing.Color.FromArgb(50, Drawing.Color.Gray);\ntextWatermark.Opacity = 0.2;\ntextWatermark.Position = WatermarkPosition.Front;\ntextWatermark.Orientation = WatermarkOrientation.Diagonal;\ntextWatermark.PrintOnFirstPage = true;\ntextWatermark.PrintOnLastPage = true;\n\n// Add the watermark to the Watermarks collection\nreport.PageSettings.Watermarks.Add(textWatermark);\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim report As New Report()\n\n' Create a new TextWatermark\nDim textWatermark As New TextWatermark()\n\n' Set the properties\ntextWatermark.Text = \"Draft\"\ntextWatermark.Font = New Drawing.TypedFont(\"Arial\", Drawing.TypedFontStyle.Bold, Drawing.Unit.Point(60))\ntextWatermark.Color = Drawing.Color.FromArgb(50, Drawing.Color.Gray)\ntextWatermark.Opacity = 0.2\ntextWatermark.Position = WatermarkPosition.Front\ntextWatermark.Orientation = WatermarkOrientation.Diagonal\ntextWatermark.PrintOnFirstPage = True\ntextWatermark.PrintOnLastPage = True\n\n' Add the watermark to the Watermarks collection\nreport.PageSettings.Watermarks.Add(textWatermark)\n```\n\n----------------------------------------\n\nTITLE: Error Message: Failed to Create ReportViewer Component\nDESCRIPTION: Details the specific assembly loading error encountered when attempting to create a ReportViewer component after a Telerik Reporting upgrade. The error indicates a missing or incompatible assembly file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/failed-to-create-component-reportviewer-after-upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFailed to create component ReportViewer. The error message follows: \"System.IO.FileNotFoundException:\nCould not load file or assembly 'Telerik,Reporting.Design.VisualStudio, Version=15.2.21.1125, Culture=neutral' or one of its assemblies\"\n```\n\n----------------------------------------\n\nTITLE: Defining Car Model Class - C#\nDESCRIPTION: This code snippet defines the Car class that serves as a model for the car with properties for manufacturer, model, year, image URL, and available colors. It provides getters and setters for each property for data encapsulation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/tools/objectdatasource-wizard.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class Car\n{\n\tstring manufacturer;\n\tstring model;\n\tint year;\n\tstring imageUrl;\n\tArrayList availableColor;\n\tpublic Car(string manufacturer, string model, int year, string imageUrl, string[] availableColor)\n\t{\n\t\tthis.manufacturer = manufacturer;\n\t\tthis.model = model;\n\t\tthis.year = year;\n\t\tthis.imageUrl = imageUrl;\n\t\tthis.AvailableColor = new ArrayList(availableColor);\n\t}\n\tpublic string Model\n\t{\n\t\tget { return this.model; }\n\t\tset { this.model = value; }\n\t}\n\tpublic string Manufacturer\n\t{\n\t\tget { return this.manufacturer; }\n\t\tset { this.manufacturer = value; }\n\t}\n\tpublic int Year\n\t{\n\t\tget { return this.year; }\n\t\tset { this.year = value; }\n\t}\n\tpublic string ImageUrl\n\t{\n\t\tget { return this.imageUrl; }\n\t\tset { this.imageUrl = value; }\n\t}\n\tpublic ArrayList AvailableColor\n\t{\n\t\tget { return this.availableColor; }\n\t\tset { this.availableColor = value; }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Report Service in VB.NET\nDESCRIPTION: VB.NET implementation of a custom ReportService class that uses a custom IReportResolver implementation to handle report resolution in a Telerik Reporting WCF service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-implement-and-use-custom-ireportresolver.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nClass CustomReportService\n\tInherits ReportService\n\tShared ReadOnly resolver As IReportResolver = New ReportResolver()\n\n\tPublic Sub New()\n\t\tMe.ReportResolver = resolver\n\tEnd Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Configuring IsolatedStorage Cache Provider in XML for Telerik Reporting\nDESCRIPTION: XML configuration for the IsolatedStorage cache provider. This provider stores rendered pages and resources as temporary files in the isolated storage.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t…\n\t<Telerik.Reporting>\n\t\t<cache provider=\"IsolatedStorage\">\n\t\t\t<providers>\n\t\t\t\t<provider name=\"IsolatedStorageProviderName\" />\n\t\t\t</providers>\n\t\t</cache>\n\t</Telerik.Reporting>\n\t…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding Report Filters Programmatically in VB.NET\nDESCRIPTION: Demonstrates how to programmatically add filters to a report's FilterCollection using VB.NET. Shows the creation of a new Filter object with an expression, operator, and value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/filtering-data/how-to-add-filtering-to-report.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim report As New Report()\nDim filter As New Filter()\nfilter.Expression = \"=Fields.CategoryName\"\nfilter.Operator = FilterOperator.Equal\nfilter.Value = \"Beverages\"\nreport.Filters.Add(filter)\n```\n\n----------------------------------------\n\nTITLE: Angular Viewer Dependencies\nDESCRIPTION: Lists required dependencies for the Angular Report Viewer including versions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q2.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Angular (__15.0.0__ or later)\n* jQuery (__^1.10.0 || ^2.2.0 || ^3.7.0\"__)\n```\n\n----------------------------------------\n\nTITLE: Header/Footer Expression Evaluation in C#\nDESCRIPTION: Code for evaluating expressions in page headers and footers of the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/custom-rendering-extension.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nevalHeaderFooterCallback(1, 1, report);\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Binding Redirects in XML\nDESCRIPTION: This XML snippet demonstrates how to configure assembly binding redirects in the application configuration file to resolve version conflicts between Telerik Reporting and Telerik UI for WPF assemblies. It specifies redirects for Telerik.Windows.Controls, Telerik.Windows.Controls.Navigation, Telerik.Windows.Controls.Input, and Telerik.Windows.Data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/wpf-report-viewer-exception-cannot-load-assembly-45.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"Telerik.Windows.Controls\"\n\t\t\t\t\t\t\t\tpublicKeyToken=\"5803cfa389c90ce7\"\n\t\t\t\t\t\t\t\tculture=\"neutral\" />\n\t\t\t\t<bindingRedirect oldVersion=\"2018.2.620.40\"\n\t\t\t\t\t\t\tnewVersion=\"2018.2.620.45\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"Telerik.Windows.Controls.Navigation\"\n\t\t\t\t\t\t\t\t\tpublicKeyToken=\"5803cfa389c90ce7\"\n\t\t\t\t\t\t\t\t\tculture=\"neutral\" />\n\t\t\t\t<bindingRedirect oldVersion=\"2018.2.620.40\"\n\t\t\t\t\t\t\t\tnewVersion=\"2018.2.620.45\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"Telerik.Windows.Controls.Input\"\n\t\t\t\t\t\t\t\t\tpublicKeyToken=\"5803cfa389c90ce7\"\n\t\t\t\t\t\t\t\t\tculture=\"neutral\" />\n\t\t\t\t<bindingRedirect oldVersion=\"2018.2.620.40\"\n\t\t\t\t\t\t\t\tnewVersion=\"2018.2.620.45\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"Telerik.Windows.Data\"\n\t\t\t\t\t\t\t\t\tpublicKeyToken=\"5803cfa389c90ce7\"\n\t\t\t\t\t\t\t\t\tculture=\"neutral\" />\n\t\t\t\t<bindingRedirect oldVersion=\"2018.2.620.40\"\n\t\t\t\t\t\t\t\tnewVersion=\"2018.2.620.45\"/>\n\t\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Checking ActivityLog.xml for Missing Registry Key (32-bit)\nDESCRIPTION: This step verifies the existence of a specific registry key within the ActivityLog.xml file. The absence of this key can indicate a problem with the Visual Studio installation, potentially leading to missing toolbox items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\10.0\\Packages\\{2c298b35-07da-45f1-96a3-be55d91c8d7a}\"\n```\n\n----------------------------------------\n\nTITLE: XML Schema Version for TRDX Files\nDESCRIPTION: The XML schema version used in TRDX files created by the Standalone Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2015/q2-2015-sp1.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2012/3.8\n```\n\n----------------------------------------\n\nTITLE: Creating Band Report: SQL Query\nDESCRIPTION: This SQL query retrieves product information along with inventory details necessary for the Band Report. It joins multiple tables to aggregate fields like product name, product number, reorder point, thumbnail images, and inventory quantity, which are crucial for detailed reporting in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/tools/report-wizards/band-report-wizard/how-to-use-the-report-wizard-to-create-a-band-report.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT Production.Product.Name, Production.Product.ProductNumber, Production.Product.ReorderPoint,\n            Production.ProductPhoto.ThumbNailPhoto, Production.ProductInventory.Quantity\n            FROM Production.Product\n            INNER JOIN Production.ProductInventory ON Production.Product.ProductID = Production.ProductInventory.ProductID\n            INNER JOIN Production.ProductProductPhoto ON Production.Product.ProductID = Production.ProductProductPhoto.ProductID\n            INNER JOIN Production.ProductPhoto ON Production.ProductProductPhoto.ProductPhotoID = Production.ProductPhoto.ProductPhotoID\n```\n\n----------------------------------------\n\nTITLE: Merging Resource Dictionaries in Silverlight Application\nDESCRIPTION: This snippet demonstrates how to merge multiple resource dictionaries in the App.xaml file for applying a Vista theme using implicit styles in a Silverlight application. Required dependencies include several XAML files from the Telerik UI themes and Telerik Reporting. The inputs are the resource dictionary sources, and the output is the styled application. Ensure the correct referencing of assemblies from the appropriate directories.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/silverlight-application/setting-a-theme-(using-implicit-styles).md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Application x:Class=\\\"SilverlightApplication1.App\\\"\\n\\t\\t\\txmlns=\\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\\"\\n\\t\\t\\txmlns:x=\\\"http://schemas.microsoft.com/winfx/2006/xaml\\\"\\n\\t\\t\\t\\>\\n\\t <Application.Resources>\\n\\t   <ResourceDictionary>\\n\\t\\t <ResourceDictionary.MergedDictionaries>\\n\\t\\t   <ResourceDictionary Source=\\\"/SilverlightApplication1;component/Themes/System.Windows.xaml\\\"/>\\n\\t\\t   <ResourceDictionary Source=\\\"/SilverlightApplication1;component/Themes/Telerik.Windows.Controls.xaml\\\"/>\\n\\t\\t   <ResourceDictionary Source=\\\"/SilverlightApplication1;component/Themes/Telerik.Windows.Controls.Input.xaml\\\"/>\\n\\t\\t   <ResourceDictionary Source=\\\"/SilverlightApplication1;component/Themes/Telerik.Windows.Controls.Navigation.xaml\\\"/>\\n\\t\\t   <ResourceDictionary Source=\\\"/SilverlightApplication1;component/Themes/Telerik.ReportViewer.Silverlight.xaml\\\"/>\\n\\t\\t </ResourceDictionary.MergedDictionaries>\\n\\t   </ResourceDictionary>\\n\\t </Application.Resources>\\n\\t</Application>\n```\n\n----------------------------------------\n\nTITLE: Implementing IStorage Interface Changes\nDESCRIPTION: The IStorage interface requires implementation of a new DeleteSet method in any custom storage implementation. This is a breaking API change introduced in R3 2017.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2017/r3-2017.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IStorage\n{\n    void DeleteSet();\n    // Other existing methods\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PageHeaderSumFromPrevPage Custom Aggregate Function in C#\nDESCRIPTION: This custom aggregate function accumulates values within a group up to the end of the previous page. It tracks page numbers and postpones current page data accumulation, making it suitable for showing running totals in page headers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/summary-per-page-when-group-is-on-multiple-pages.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[AggregateFunction(Description = \"Special sum aggregate. Output: (value1, value2, ...)\", Name = \"PageHeaderSumFromPrevPage\")]\nclass PageHeaderSumFromPrevPage : IAggregateFunction\n{\n    [ThreadStatic]\n    static decimal result;\n\n    [ThreadStatic]\n    static string currentGroupByValue;\n\n    [ThreadStatic]\n    static int currentPage = -1;\n\n    [ThreadStatic]\n    static List<object[]> currentPageValues;\n\n\n    public void Accumulate(object[] values)\n    {\n        var page = (int)values[2];\n        if (page != currentPage)\n        {\n            currentPage = page;\n\n            for (int index = 0; index < currentPageValues.Count; index++)\n            {\n                this.AccumulateCore(currentPageValues[index]);\n            }\n            currentPageValues.Clear();\n        }\n\n        currentPageValues.Add(values);\n    }\n\n    void AccumulateCore(object[] values)\n    {\n        // The aggregate function expects one parameter\n        object value = values[0];\n\n        // null values are not aggregated\n        if (null == value)\n        {\n            return;\n        }\n\n        var groupByValue = (string)values[1];\n\n        if (groupByValue != currentGroupByValue)\n        {\n            currentGroupByValue = groupByValue;\n            result = 0M;\n        }\n\n        result += (decimal)value;\n    }\n\n    public object GetValue()\n    {\n        if (currentPage == 1)\n        {\n            return 0;\n        }\n\n        return result;\n    }\n\n    public void Init()\n    {\n        if (currentPageValues == null)\n        {\n            currentPageValues = new List<object[]>();\n        }\n    }\n\n    public void Merge(IAggregateFunction aggregateFunction)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Local Variable Usage in SQL Query\nDESCRIPTION: This SQL snippet shows how to declare and use a local variable in a SQL query. However, using this directly in SqlDataSource will result in an error.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-local-variables-in-a-sql-query-used-by-the-sqldatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nDeclare @localVariable varchar(max)\nSet @localVariable='SELECT * FROM MYTABLE'\n\nExec(@localVariable)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings with Fields in C# Expression\nDESCRIPTION: This expression concatenates string literals with field values to create a personalized greeting. It demonstrates how to combine text and data fields in a Telerik Reporting expression.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/using-expressions/expressions-as-values-of-item-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n='Hi Mr.' + Fields.LastName + ', ' + Fields.FirstName + '!'\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays with JSONPath in JSON\nDESCRIPTION: This example shows how to use JSONPath to filter an array of objects based on a specific condition, in this case, selecting books with a price less than 10.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/webservicedatasource-component/how-to-use-jsonpath-to-filter-json-data.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"store\": {\n\t\t\"book\": [\n\t\t\t{\n\t\t\t\t\"category\": \"reference\",\n\t\t\t\t\"author\": \"Nigel Rees\",\n\t\t\t\t\"title\": \"Sayings of the Century\",\n\t\t\t\t\"price\": 8.95\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"category\": \"fiction\",\n\t\t\t\t\"author\": \"Evelyn Waugh\",\n\t\t\t\t\"title\": \"Sword of Honour\",\n\t\t\t\t\"price\": 12.99\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: ARIA Label Pattern Example\nDESCRIPTION: Demonstrates the pattern used for generating aria-label attributes for report elements: {type} {additional information} {description}\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/accessibility.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{type} {additional information} {description}\n```\n\n----------------------------------------\n\nTITLE: StyleName Property Usage\nDESCRIPTION: Example showing how to use the StyleName property to apply StyleSelector rules to report items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/understanding-style-selectors.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nStyleName\n```\n\n----------------------------------------\n\nTITLE: Longitude Expression for Virtual Data Points with Conditional Offset\nDESCRIPTION: Expression for calculating longitude values of virtual data points with a conditional offset of 1 degree. The offset is only applied when there is a single data point in the current group.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-set-the-map-extent-dynamically-when-showing-a-single-data-point.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n=Fields.Long - (IF(Exec('map1', Count(Fields.City)) = 1, 1, 0))\n```\n\n----------------------------------------\n\nTITLE: Error Message for Font-Related NullReferenceException in Docker\nDESCRIPTION: Detailed error stack trace showing a System.NullReferenceException occurring in the font handling components of Telerik Reporting when running in a Docker container on Linux.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/system-null-reference-exception-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at Telerik.Reporting.Drawing.FontExtensions.ToGdiFont(IFont font)\n   at Telerik.Reporting.Processing.GdiFontInfoCache.CreateValue(IFont font)\n   at Telerik.Reporting.Processing.GdiFontCache1.GetValue(IFont font)\n   . . .\n```\n\n----------------------------------------\n\nTITLE: Adding TrustServerCertificate to SQL Connection String\nDESCRIPTION: A short-term solution to the certificate trust issue is to add 'TrustServerCertificate=True' to the SQL Server connection string. This tells the connection to trust any server certificate by default, bypassing the certificate validation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/certificate-chain-was-issued-by-authority-not-trusted.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nTrustServerCertificate=True\n```\n\n----------------------------------------\n\nTITLE: Updating Target Framework in Project File\nDESCRIPTION: Modification of the .csproj file to change the target framework to .NET Core 2.2.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/migrate-an-existing-asp-net-core-project-from-full-dotnet-framework-4-6-to-dotnet-core-2-2.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<TargetFramework>netcoreapp2.2</TargetFramework>\n```\n\n----------------------------------------\n\nTITLE: Corrected VB.NET Type Definition with Global Namespace\nDESCRIPTION: Demonstrates the correct way to define Telerik Reporting types by using the Global namespace prefix to resolve type definition errors\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/vb-projects-cannot-be-built-due-to-the-usage-of-the-global-namespace.md#2025-04-21_snippet_1\n\nLANGUAGE: vb.net\nCODE:\n```\nMe.TextBox1 = New Global.Telerik.Reporting.TextBox()\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Documentation Table\nDESCRIPTION: CSS rules to set specific widths for table columns in the documentation\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/graphqldatasource-component/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntable th:first-of-type {\n\twidth: 20%;\n}\ntable th:nth-of-type(2) {\n\twidth: 80%;\n}\n```\n\n----------------------------------------\n\nTITLE: Framework Version Update Notice\nDESCRIPTION: Specifies the change in .NET Framework targeting version to 4.6.2 for all Telerik Reporting assets.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q2.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAll Telerik Reporting assets for .NET Framework now target __.NET Framework v4.6.2.__\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Binding with Parameters\nDESCRIPTION: Shows how to configure OpenAccessDataSource to call a method with parameters programmatically.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/using-parameters-with-the-openaccessdatasource-component.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nOpenAccessDataSource dataSource = new OpenAccessDataSource();\ndataSource.ObjectContextMember = \"GetCustomersByCompanyName\";\n\nParameter parameter = new Parameter();\nparameter.Name = \"companyName\";\nparameter.Type = typeof(string);\nparameter.Value = \"Bike\";\ndataSource.Parameters.Add(parameter);\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim dataSource As New OpenAccessDataSource()\ndataSource.ObjectContextMember = \"GetCustomersByCompanyName\"\n\nDim parameter As New Parameter()\nparameter.Name = \"companyName\"\nparameter.Type = GetType(String)\nparameter.Value = \"Bike\"\ndataSource.Parameters.Add(parameter)\n```\n\n----------------------------------------\n\nTITLE: Binding Chart to Data in NeedDataSource Event\nDESCRIPTION: This VB.NET code snippet illustrates how to bind the obsolete Chart report item to a data source within the `NeedDataSource` event handler. It casts the sender object to a `Telerik.Reporting.Processing.Chart` instance and sets its `DataSource` property. The `your_datasource` placeholder should be replaced with the actual data source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/chart-(obsolete).md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPrivate Sub chart1_NeedDataSource(sender As Object, e As System.EventArgs)\n\tDim procChart As Telerik.Reporting.Processing.Chart = DirectCast(sender, Telerik.Reporting.Processing.Chart)\n\tprocChart.DataSource = your_datasource\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Understanding Hierarchical Flat Data Representation in JSON\nDESCRIPTION: This JSON snippet demonstrates a simple hierarchical structure representing parent-child relationships in an array format. Each entry specifies a 'ChildItem' and its corresponding 'ParentItem'. Such structure is typically used in reports where hierarchy needs to be visually represented. The JSON format does not require specific dependencies but should be parsed and utilized within a compatible system or language like JavaScript or reporting tools.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hierarchical-report-from-flat-data.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[{\n\"ChildItem\":\"Grand Parent\",\n\"ParentItem\":null},\n{\n\"ChildItem\":\"Parent 1\",\n\"ParentItem\":\"Grand Parent\"},\n{\n\"ChildItem\":\"Parent 2\",\n\"ParentItem\":\"Grand Parent\"},\n...,\n{\n\"ChildItem\":\"Child 1\",\n\"ParentItem\":\"Parent 1\"},\n{\n\"ChildItem\":\"Child 2\",\n\"ParentItem\":\"Parent 1\"},\n...,\n{\n\"ChildItem\":\"Child 5\",\n\"ParentItem\":\"Parent 2\"},\n{\n\"ChildItem\":\"Child 6\",\n\"ParentItem\":\"Parent 2\"},\n...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Silverlight Report Viewer Dependencies\nDESCRIPTION: Specifies the required Telerik UI Controls for Silverlight version.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2014/q3-2014.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTelerik UI Controls for Silverlight 2014.3.1021.1050\n```\n\n----------------------------------------\n\nTITLE: Registering User Function in Telerik Configuration\nDESCRIPTION: XML configuration required to register the custom User Function in the Telerik Report Designer. This needs to be added to the Telerik.ReportDesigner.exe.config file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/number-in-the-cell-is-formatted-as-text-or-preceded-by-an-apostrophe.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Telerik.Reporting>\n\t<AssemblyReferences>\n\t\t<add name=\"ReturnDataType\" />\n\t</AssemblyReferences>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Updating Telerik NuGet Source Credentials in Command Line\nDESCRIPTION: This command updates the credentials for the Telerik NuGet source after changing the password. It uses the NuGet CLI to update the source with the new login information.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-nuget.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nNuGet Sources Update -Name \"telerik.com\" -Source \"https://nuget.telerik.com/v3/index.json\" -UserName \"your login email\" -Password \"your new password\"\n```\n\n----------------------------------------\n\nTITLE: Styling Table Columns with HTML/CSS\nDESCRIPTION: CSS styling for configuring table column widths in the documentation. Sets first column to 25% width and second column to 75% width.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\ntable th:first-of-type {\n\twidth: 25%;\n}\ntable th:nth-of-type(2) {\n\twidth: 75%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Modified Image Configuration in RESX File\nDESCRIPTION: This XML snippet showcases the corrected format for storing the image in the RESX file. By removing the assembly alias and type declaration, the image data is treated as a plain base64 string. This approach is compatible with both Skia and System.Drawing (GDI) graphics engines, resolving the original error.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/embedded-image-clr-report-skia-error.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n\"<data name=\\\"pictureBox2.Value\\\" xml:space=\\\"preserve\\\">\\n\t<value>\\n\t\tiVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8\\n\t\tYQUAAAAJcEhZcwAACxEAAAsRAX9kX5EAAAP8SURBVHhe7d2vbhRdHMbxGrgFLqFBIEm4AAQahysWg8CR\\n\t\tcAVwBYBDkeBRCEQFooYQBKKiAoFoQhAIxDBP05Jtec7s7O6cmXN+53uSj3pn2U2/Dx22f/LudV1Xhf2P\\n\t\tw96HaZlP9il6V8o8TOxH/CS9C+S+BnZD3op+hdI/MzsB74E/Ysj/gzsB39p/Qsj/kxsgCX1L4r4M7IR\\n\t\tltK/IOLPzIZYws0311+7F4i8bIy5EX85NsiciL8sG2UuxF+eDTMH4pfBxsmN+OWwgXIifllspFyIXx4b\\n\t\tKgfil8nGmhrxy2WDTYn4ZbPRpkL88tlwUyB+HWy8XRGhHjbgLohfFxtxW8Svjw25DeLXycbcFPHrZYNu\\n\t\tgvh1s1HHIn79bNgxiB+DjbsO8eOwgYcQPxYbOYX48djQDvFjsrGvIn5cNvgq4sdmo1+49eQav6sXnA0v\\n\t\tit+zD0Icg/EZQHyD8RlAfIPxGUB8g/HFPQhxDMYX9yDEMRhf3IMQhwZgw19wD0IcDKBxDKBxDKBxDKBx\\n\t\tDKBxDKBxDKBxYQfw8PO9bpvz889pd3j6oXtx/LS7f3TH/tmRMIA1R2O4+2nfPkcEDGDE0WeFqJ8NGMDI\\n\t\tE3UEDGCDo9uBe66aNTkA/Tfn8dcH3cuT52d/21NH17nnq1WTA3DXr9Kn+tQINBD3mFoxgIRn3x6dX335\\n\t\tRLsNMIAEvfVLHXd9rRjAgNRx19aKAQxIHXdtrRhAgt4RuPPl15G9vlYMwLh9eOMstDtvv7+yj6kVA1ih\\n\t\t8PrXfyq+jj4zuMfWqskBbHtOfh/b56oZA9jg6M90z1UzBjDy6Nbgnqd2DGDN0Vf+Iv9gCANInOjhLzQ5\\n\t\tgNXr9M0dd/TNIL0rWL02ouYHoMj6170773+8u3RtRM0PYN210d73X8UAzukrfO5EvxUwgHOKnPohkMi3\\n\t\tAgawIvUNIJ2otwIGcIX+trsT9VbAAK5o7VbAAAz9Wljq8N3ASuwyANFXAt2JditgAAn6odAWbgVhB4Bx\\n\t\tGEDjGEDjGEDjGEDbDhhAuw76NzR7DKBNZ/EZQJv+xWcA7bkUnwG05b/4DKAdNr4wgPiS8YUBBKb/7a+L\\n\t\tvooBBDUmvjCAgMbGFwYQzCbxhQEEsml8YQBBbBNfGEAA28YXBlC5XeILA6jYrvGFAVRqivjCACo0VXxh\\n\t\tAJWZMr4wgIpMHV8YQCVyxBcGUIFc8YUBFC5nfGEABcsdXxhAoeaILwygQHPFFwZQmDnjCwMoyNzxhQEU\\n\t\tYon4wgAKsFR8YQALWzK+MIAFLR1fGMBCSogvDGABpcSXtQPA5AZ/V29uDGBeRcUXBjCf4uILA5hHkfGF\\n\t\tAeRXbHxhAHkVHV8YQD7FxxcGkEcV8buu2/sLNx2vmOLdNKkAAAAASUVORK5CYII=\\n\t</value>\\n</data>\"\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Query for Product Category Values\nDESCRIPTION: This SQL query fetches ProductCategoryID and corresponding Name from the Production.ProductCategory table, used for available values of the ProductCategoryID report parameter in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/report-parameters/how-to-cascade-parameters-with-applied-filtering-on-report-level.md#2025-04-21_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\tProductCategoryID,\n\t\tName AS CategoryName\n\tFROM\n\t\tProduction.ProductCategory\n```\n\n----------------------------------------\n\nTITLE: Logging Viewer Rendering Events\nDESCRIPTION: These functions log messages when the rendering of the Telerik report viewer begins and ends, providing essential information that could be useful for debugging or user feedback. They depend on the event system of jQuery.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onViewerRenderingBegin(e) {\n\tconsole.log('TRV rendering begin.');\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onViewerRenderingEnd(e) {\n\tconsole.log('TRV rendering end');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Shape Class in VB.NET\nDESCRIPTION: This VB.NET snippet shows how to create a custom shape by inheriting from the ShapeBase class and defining a set of points to form the shape.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/shape.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Class CustomShape\n    Inherits ShapeBase\n\n    Public Sub New()\n    End Sub\n\n    Public Overrides Function GetPoints() As PointF()()        \n        Return New PointF()() {\n            New PointF() {\n                New PointF(0, 0),\n                New PointF(1, 0),\n                New PointF(1, 1),\n                New PointF(0, 1)\n            }\n        }\n    End Function\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Schema Version for Report Definitions\nDESCRIPTION: Schema version used for TRDX, TRDP, and TRBP report definitions in Standalone Report Designer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q3.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2024/3.0\n```\n\n----------------------------------------\n\nTITLE: Binding Chart to Data in NeedDataSource Event\nDESCRIPTION: This code snippet demonstrates how to bind the obsolete Chart report item to a data source within the `NeedDataSource` event handler.  It accesses the Chart instance through the sender object and assigns the data source to the `DataSource` property. Replace `your_datasource` with your actual data source object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/chart-(obsolete).md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nprivate void chart1_NeedDataSource(object sender, System.EventArgs e)\n{\n\tTelerik.Reporting.Processing.Chart procChart = (Telerik.Reporting.Processing.Chart)sender;\n\tprocChart.DataSource = your_datasource;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Configuration and Hosting Environment in Startup Class\nDESCRIPTION: This code snippet demonstrates how to inject IConfiguration and IHostingEnvironment into the Startup class constructor in an ASP.NET Core 2.1 application. These interfaces are used to access configuration settings and the application's hosting environment, respectively. They are used to retrieve configuration settings and relative paths later in the setup process.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-core-2.1-application.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n````CSharp\npublic Startup(IConfiguration configuration, IHostingEnvironment hostingEnvironment)\n\t{\n\t\tConfiguration = configuration;\n\t\tHostingEnvironment = hostingEnvironment;\n\t}\n\tpublic IConfiguration Configuration { get; }\n\tpublic IHostingEnvironment HostingEnvironment { get; }\n````\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema Version for Standalone Report Designer Files\nDESCRIPTION: The schema version used for TRDX, TRDP and TRBP files created by the Standalone Report Designer in R3 2018.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2018/r3-2018.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2018/3.0\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Classes with VB for Telerik Report Designer\nDESCRIPTION: Visual Basic implementation of the Car class and Cars collection for Telerik Reporting. The Cars class inherits from List(Of Car) and provides the same sample car data as the C# version.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-external-assemblies-with-custom-clr-objects-in-the-report-designer.md#2025-04-21_snippet_1\n\nLANGUAGE: VB\nCODE:\n```\nImports System.Collections\nImports System.Collections.Generic\n\nPublic Class Car\n\tPrivate m_model As String\n\tPrivate m_year As Integer\n\n\tPublic Sub New(model As String, year As Integer)\n\t\tMe.m_model = model\n\t\tMe.m_year = year\n\tEnd Sub\n\n\tPublic Property Model() As String\n\t\tGet\n\t\t\tReturn Me.m_model\n\t\tEnd Get\n\t\tSet(value As String)\n\t\t\tMe.m_model = value\n\t\tEnd Set\n\tEnd Property\n\n\tPublic Property Year() As Integer\n\t\tGet\n\t\t\tReturn Me.m_year\n\t\tEnd Get\n\t\tSet(value As Integer)\n\t\t\tMe.m_year = value\n\t\tEnd Set\n\tEnd Property\nEnd Class\n\nPublic Class Cars\n\tInherits List(Of Car)\n\tPublic Sub New()\n\t\tDim car As Car\n\t\tcar = New Car(\"Honda NSX GT\", 2003)\n\t\tMe.Add(car)\n\n\t\tcar = New Car(\"Nissan Skyline R34 GT-R\", 2005)\n\t\tMe.Add(car)\n\tEnd Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Filtered Result using JSONPath\nDESCRIPTION: Shows the resulting JSON after applying the JSONPath expression '$.store.book' to extract just the book array from the parent object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/graphqldatasource-component/how-to-use-jsonpath-to-filter-json-data.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"category\": \"reference\",\n\t\t\"author\": \"Nigel Rees\",\n\t\t\"title\": \"Sayings of the Century\",\n\t\t\"price\": 8.95\n\t},\n\t{\n\t\t\"category\": \"fiction\",\n\t\t\"author\": \"Evelyn Waugh\",\n\t\t\"title\": \"Sword of Honour\",\n\t\t\"price\": 12.99\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: SQL String Escape for Special Characters\nDESCRIPTION: Using SQL Server 2016's STRING_ESCAPE function to properly escape special characters in database queries for HtmlTextBox values. This helps prevent EntityName parsing errors when the text contains HTML special characters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/htmltextbox-an-error-occurred-while-parsing-entityname.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSTRING_ESCAPE\n```\n\n----------------------------------------\n\nTITLE: Initializing Telerik Web Report Designer in VBHTML\nDESCRIPTION: Similar to the CSHTML snippet, this VBHTML configuration initializes the Telerik Web Report Designer widget with the required libraries. It establishes the HTML layout and specifies the report to be loaded.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-framework-application.md#2025-04-21_snippet_3\n\nLANGUAGE: vbhtml\nCODE:\n```\n@Imports Telerik.Reporting\n\t@Code\n\t\tLayout = Nothing\n\tEnd Code\n\t<!DOCTYPE html>\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<title>Telerik Web Report Designer Demo</title>\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t<link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500&display=swap\" rel=\"stylesheet\">\n\t</head>\n\t<body>\n\t\t<div id=\"webReportDesigner\">\n\t\t\tloading...\n\t\t</div>\n\t\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n\t\t<script src=\"https://kendo.cdn.telerik.com/2022.3.913//js/kendo.all.min.js\"></script>\n\t\t<script src=\"/api/reportdesigner/resources/js/telerikReportViewer\"></script>\n\t\t<script src=\"/api/reportdesigner/designerresources/js/webReportDesigner\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t\t$(document).ready(function () {\n\t\t\t\t$(\"#webReportDesigner\").telerik_WebReportDesigner({\n\t\t\t\t\tpersistSession: false,\n\t\t\t\t\ttoolboxArea: {\n\t\t\t\t\t\tlayout: \"list\"\n\t\t\t\t\t},\n\t\t\t\t\tserviceUrl: \"/api/reportdesigner/\",\n\t\t\t\t\treport: \"SampleReport.trdp\"\n\t\t\t\t}).data(\"telerik_WebDesigner\");\n\t\t\t});\n\t\t</script>\n\t</body>\n\t</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing Date Members in C# Expressions\nDESCRIPTION: Demonstrates how to access the ToShortDateString() method of the Now() function to format the current date.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/member-access.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n= Now().ToShortDateString()\n```\n\n----------------------------------------\n\nTITLE: Group-Level Background Alternation Expression\nDESCRIPTION: Expression that alternates background colors between different groups using RunningValue and CountDistinct functions. This ensures all rows within the same group have the same color.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/alternate-cell-background-color-by-table-group.md#2025-04-21_snippet_2\n\nLANGUAGE: Expression\nCODE:\n```\n=RunningValue(\"tableName\", CountDistinct(Fields.groupingFieldName))%2\n```\n\n----------------------------------------\n\nTITLE: Counting Records with Specific Category Value in Telerik Reporting Expression\nDESCRIPTION: This expression uses the Sum aggregate function with a conditional IIF statement to count the number of records where the Category field equals 'A'. It returns 1 for each matching record and 0 for non-matching records, effectively counting the total occurrences.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/count-records-with-specific-column-value.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\n= Sum(IIF(Fields.Category = \"A\", 1, 0))\n```\n\n----------------------------------------\n\nTITLE: Recursively Setting Connection Strings for Report Items in VB.NET\nDESCRIPTION: A method that recursively updates connection strings for all SqlDataSource instances in a report, including report parameters and data items. It also handles subreports by calling UpdateReportSource on their report sources.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/navigate-to-report-not-working-when-custom-report-resolver-changes-connectionstring-dynamically.md#2025-04-21_snippet_2\n\nLANGUAGE: VB.NET\nCODE:\n```\n\tEnd If\n\tFor Each parameter As Telerik.Reporting.ReportParameter In report.ReportParameters\n\t\tIf TypeOf parameter.AvailableValues.DataSource Is SqlDataSource Then\n\t\t\tDim sqlDataSource = DirectCast(parameter.AvailableValues.DataSource, SqlDataSource)\n\t\t\tsqlDataSource.ConnectionString = connectionString\n\t\tEnd If\n\tNext\nEnd If\n\nFor Each item As Telerik.Reporting.ReportItemBase In reportItemBase.Items\n\t'recursively set the connection string to the items from the Items collection\n\tSetConnectionString(item)\n\n\tIf TypeOf item Is SubReport Then\n\t\tDim subReport = DirectCast(item, SubReport)\n\t\tsubReport.ReportSource = Me.UpdateReportSource(subReport.ReportSource)\n\t\tContinue For\n\tEnd If\n\n\t'Covers all data items(Crosstab, Table, List, Graph, Map and Chart)\n\tIf TypeOf item Is DataItem Then\n\t\tDim dataItem = DirectCast(item, DataItem)\n\t\tIf TypeOf dataItem.DataSource Is SqlDataSource Then\n\t\t\tDim sqlDataSource = DirectCast(dataItem.DataSource, SqlDataSource)\n\t\t\tsqlDataSource.ConnectionString = connectionString\n\t\t\tContinue For\n\t\tEnd If\n\n\tEnd If\nNext\nEnd Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateShape Method for Custom Shape in C#\nDESCRIPTION: Overrides the CreateShape method to define the geometry of the custom shape using a series of points.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-create-custom-shape.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\nprotected override void CreateShape()\n{\n\t//DESCRIBE THE GEOMETRY OF THE CUSTOM SHAPE HERE\n\t\n\tPointF[] seriesofPoints = new PointF[8];\n\tseriesofPoints[0] = new PointF(-10, 10);\n\tseriesofPoints[1] = new PointF(-10, 4);\n\tseriesofPoints[2] = new PointF(-12, 4);\n\tseriesofPoints[3] = new PointF(-12, 0);\n\tseriesofPoints[4] = new PointF(12, 0);\n\tseriesofPoints[5] = new PointF(12, 4);\n\tseriesofPoints[6] = new PointF(10, 4);\n\tseriesofPoints[7] = new PointF(10, 10);\n\n\tbase.AddLines(seriesofPoints, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Required jQuery CDN Reference\nDESCRIPTION: CDN link for the minimum required jQuery version 1.9.1 needed by the HTML5 Report Viewer. Note that jQuery slim build is not supported.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/requirements-and-browser-support.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Telerik.Reporting Configuration Section in XML\nDESCRIPTION: This XML snippet defines the `Telerik.Reporting` configuration section, specifying the type of the configuration section and allowing its definition everywhere. This section is used to configure the Telerik Reporting engine, including rendering extensions and cache management.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/configuration/report-designer-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n\t<configSections>\n\t\t<section\n\t\t\tname=\"Telerik.Reporting\"\n\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\"\n\t\t\tallowLocation=\"true\"\n\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\t...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Error message when loading .NET 9 assemblies in the Standalone Report Designer\nDESCRIPTION: This error message appears when attempting to load a .NET 9 assembly in the Standalone Report Designer for .NET when both .NET 8 and .NET 9 are installed on the machine. The error occurs because the application defaults to using .NET 8 runtime when it's available.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-load-dot-net-7-assemblies-in-srd-dot-net.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSystem.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\nCould not find or load a specific file. (0x80131621)\n```\n\n----------------------------------------\n\nTITLE: Importing TelerikReportingModule in Angular\nDESCRIPTION: This TypeScript code snippet imports the TelerikReportingModule into the main application module to make the Angular Report Viewer available within the Angular application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TelerikReportingModule } from '@progress/telerik-angular-report-viewer';\n@NgModule({\n\timports: [TelerikReportingModule]\n```\n\n----------------------------------------\n\nTITLE: Dependency Definition - Internal Cache SQLite Versions\nDESCRIPTION: SQLite version requirements for different .NET framework targets in the internal cache implementation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2022/r2-2022.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.NET Framework: SQLite 3.26.0\n.NET Core, .NET 5, .NET 6: SQLite 3.28.0\n```\n\n----------------------------------------\n\nTITLE: Initializing HTML5 Report Viewer with exportBegin Event Handler\nDESCRIPTION: Example showing how to initialize a Telerik Report Viewer with an exportBegin event handler. The handler is configured during viewer initialization using jQuery, sets the service URL, report source, and logs export format to console.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/events/exportbegin(e,-args).md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\texportBegin: function(e) { console.log(\"This event handler will be called before exporting the report in\" + arguments.format); }\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: XML Namespace Reference for Standalone Report Designer\nDESCRIPTION: The XML namespace specification used in TRDX files created by the Standalone Report Designer in Q1 2015 release. Files contain XML version http://schemas.telerik.com/reporting/2012/3.8.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2015/q1-2015.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2012/3.8\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch URL in launchSetting.json for .NET 6\nDESCRIPTION: This snippet demonstrates how to configure the launch URL in the `launchSetting.json` file to automatically open the Web Report Designer page when the .NET 6 application starts. This setting is within the \"profiles\" section, specifically targeting the application's profile (e.g., \"Telerik.WRD.GettingStarted\"). It specifies the `webReportDesigner.html` page to be launched upon application startup. Note that the name of the project and the web page may vary.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/web-designer/set-up-and-create-basic-report.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"launchUrl\": \"webReportDesigner.html\"\n```\n\n----------------------------------------\n\nTITLE: Installing Epel release on CentOS\nDESCRIPTION: This shell command installs the Epel repository on CentOS Linux distributions necessary for installing libgdiplus. This Epel release might need modification depending on the system setup.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-build-and-Install-libgdiplus-linux.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyum install epel-release -y\n# Note: if 'yum install epel-release' doesn't work for you, try manually updating the source\n# rpm -ihv --nodeps https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\n```\n\n----------------------------------------\n\nTITLE: Removing InProcess Hosting Configuration in .NET Core Project\nDESCRIPTION: Remove the AspNetCoreHostingModel configuration from the CSPROJ file to resolve HTTP Error 503.0 when using .NET Core 2.2. Alternatively, upgrading to .NET Core 3.0 or downgrading to 2.1 will also resolve the issue.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/http-error-net-core.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings in XML\nDESCRIPTION: This XML snippet demonstrates how to define a connection string within the application configuration file. It specifies the data source, initial catalog, and integrated security settings, along with the provider name for database connectivity in Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/configuration/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<connectionStrings>\n\t<add name=\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\"\n\t\tconnectionString=\"Data Source=(local)\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=SSPI\"\n\t\tproviderName=\"System.Data.SqlClient\" />\n</connectionStrings>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Report Viewers with Angular Material Tabs\nDESCRIPTION: HTML template implementation showing how to structure multiple report viewers within Material tabs. Uses lazy loading through matTabContent and includes Load buttons for each tab viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/angular-report-viewer-in-multiple-tabs.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"container\">\n  <form>\n    <div class=\"form-group\">\n      <div class=\"input-group-prepend\" style=\"display: flex; justify-content: center;\">\n          <mat-tab-group [(selectedIndex)]=\"selectedTab\" style=\"width: 75vw;\">\n              <mat-tab label=\"Tab 1\">\n                <ng-template matTabContent>\n                  <button mat-button type=\"button\" (click)=\"onLoad1Click()\">Load</button>\n                  <tr-viewer #rptViewer1\n                    [containerStyle]=\"viewerContainerStyle\"\n                    [serviceUrl]=\"reportServerUrl\"\n                    [viewMode]=\"'INTERACTIVE'\"\n                    [scaleMode]=\"'SPECIFIC'\"\n                    [scale]=\"1.0\">\n                  </tr-viewer>\n                </ng-template>\n              </mat-tab>\n\n              <mat-tab label=\"Tab 2\">\n                <ng-template matTabContent>\n                  <button mat-button type=\"button\" (click)=\"onLoad2Click()\">Load</button>\n                  <tr-viewer #rptViewer2\n                    [containerStyle]=\"viewerContainerStyle\"\n                    [serviceUrl]=\"reportServerUrl\"\n                    [viewMode]=\"'INTERACTIVE'\"\n                    [scaleMode]=\"'SPECIFIC'\"\n                    [scale]=\"1.0\">\n                  </tr-viewer>\n                </ng-template>\n              </mat-tab>\n          </mat-tab-group>\n       </div>\n    </div>\n  </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Font Embedding in HTML Configuration\nDESCRIPTION: HTML configuration snippet showing how to set up font embedding for PDF rendering in Telerik Reporting using the Telerik.Reporting section with FontEmbedding parameter set to Full.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/characters-not-appearing-correctly-in-pdf-files.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<Telerik.Reporting>\n\t\t<extensions>\n\t\t<render>\n\t\t\t<extension name=\"PDF\" >\n\t\t\t<parameters>\n\t\t\t\t<parameter name=\"FontEmbedding\" value=\"Full\"/>\n\t\t\t</parameters>\n\t\t\t</extension>\n\t\t</render>\n\t\t</extensions>\n\t</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Querying Data with SQL for Telerik Reporting\nDESCRIPTION: This SQL query retrieves employee data from the AdventureWorks database, specifically selecting the first 14 employees and ordering them by their employee ID. It is used within the Telerik Reporting Standalone Designer to populate a data source for a report table.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/getting-started/first-steps-designing.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n\"SELECT\\n\\t\\t[HumanResources].[vEmployee].[EmployeeID] ,\\n\\t\\t[HumanResources].[vEmployee].[FirstName],\\n\\t\\t[HumanResources].[vEmployee].[LastName],\\n\\t\\t[HumanResources].[vEmployee].[JobTitle],\\n\\t\\t[HumanResources].[vEmployee].[Phone]\\n\\tFROM [HumanResources].[vEmployee]\\n\\tWHERE [HumanResources].[vEmployee].[EmployeeID] <= 14\\n\\tORDER BY 1 ASC\"\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Localizer in Dependency Injection\nDESCRIPTION: Register the custom string localizer for the ITelerikReportingStringLocalizer interface in the Blazor application's service collection\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/customizing/localization.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddTelerikBlazor();\n...\nbuilder.Services.AddSingleton(typeof(ITelerikReportingStringLocalizer), typeof(CustomStringLocalizer));\n```\n\n----------------------------------------\n\nTITLE: Configuring appData Path in XML for Unix Systems\nDESCRIPTION: XML configuration example showing how to set a Unix-based file path for temporary application data in Telerik Reporting. This specifies the absolute path to the folder (/tmp/reportingAppData) that will be used to store temporary data.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/appdata-element.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    …\n    <Telerik.Reporting>\n        <appData path=\"/tmp/reportingAppData\" />\n    </Telerik.Reporting>\n    …\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Defining Telerik.ReportDesigner Configuration Section in XML\nDESCRIPTION: This XML snippet defines the `Telerik.ReportDesigner` configuration section, specifying the type of the configuration section and allowing its definition everywhere. This section allows additional configuration options for the Telerik Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/standalone-report-designer/configuration/report-designer-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n\t<configSections>\n\t\t<section\n\t\t\t\t\tname=\"Telerik.ReportDesigner\"\n\t\t\t\t\ttype=\"Telerik.ReportDesigner.Configuration.ReportDesignerConfigurationSection, Telerik.ReportDesigner.Configuration\"\n\t\t\t\t\tallowLocation=\"true\"\n\t\t\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\t...\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Grouping in Telerik Reporting\nDESCRIPTION: This snippet details the process of creating a table in Telerik Reporting with appropriate grouping and configuration to place group values on the right side of the table. Key actions include adding a table, grouping, and manipulating the header and columns.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/right-to-left-in-table.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1) Add a [CSV DataSource]({%slug telerikreporting/designing-reports/connecting-to-data/data-source-components/csvdatasource-component/overview%}) (with **Group**, **Item** and **Value** fields) but don't set it to be the datasource of the report;\n\n2) Add a table through the Table Wizard -> set its DataSource to the csvDataSource -> add only the **Item** and **Value** fields.\n\n3) Right-click over the table -> **Add group** -> **Row group -  Parent Group**;\n\n    - Set the **Expression** to be \"=Fields.Group\";\n\n    - Mark **Add Header** -> **OK**;\n\n4) Right-click over the table -> **Insert row** -> **Outside Group Above**;\n\n    - Move the headers of the table in the new empty row over \"= Fields.Value\" and \"= Fields.Item\";\n\n5) Right-click over the table -> **Insert Column** -> **Right**;\n\n    - Merge the upper header and set its **Value** to be  \"=Fields.Group\";\n\n6) Remove the unnecessary column of the group (**Delete column only**) and row;\n```\n\n----------------------------------------\n\nTITLE: XML Schema Version for TRDX Files\nDESCRIPTION: The XML schema version used in TRDX files created by the Standalone Report Designer. This version identifier is used for report file compatibility.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2014/q1-2014-sp1.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2012/3.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings in appsettings.json\nDESCRIPTION: JSON configuration for database connection strings in ASP.NET Core application settings. Shows different supported formats including explicit provider name specification.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/migrate-an-existing-asp-net-core-project-from-full-dotnet-framework-4-6-to-dotnet-core-2-2.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"ConnectionStrings\": {\n        \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": {\n            \"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n            \"providerName\": \"System.Data.SqlClient\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll Mode Button for Desktop (Default Template)\nDESCRIPTION: HTML code to add the Scroll Mode button to the main menu for desktop screens using the default template. This snippet should be inserted into the 'ul' element with the 'trv-main-menu-ul' id attribute.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-show-the-page-scroll-mode-button.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<li aria-label=\"ariaLabelMenuContinuousScroll\"><a data-command=\"telerik_ReportViewer_pageMode\" title=\"menuContinuousScrollTitle\" href=\"#\"><i class=\"t-font-icon t-i-scroll\"></i></a></li>\n```\n\n----------------------------------------\n\nTITLE: Error Message\nDESCRIPTION: Displays the exact error message encountered when the data source name is not found. This error occurs when trying to use an ODBC connection in Telerik Report Server.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-data-source-name-not-found-when-using-odbc-connection-with-telerik-report-server.md#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"'Data source name not found and no default driver specified.'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Framework in ASP.NET Core\nDESCRIPTION: XML configuration to set the target framework for an ASP.NET Core project to use the full .NET Framework.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer-in-asp.net-core-2.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<PropertyGroup>\n  <TargetFramework>net461</TargetFramework>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: WPF XAML Report Rendering\nDESCRIPTION: Renders a report in XAML for WPF with physical page layout. Requires multi-stream rendering with RenderReport method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/export-formats.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.XamlRendering.WpfReport, Telerik.Reporting, Version=x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding a Bookmark Action Programmatically in C#\nDESCRIPTION: Demonstrates how to add a 'NavigateToBookmarkAction' to a report item programmatically in C#. This allows users to click and navigate to a specified bookmark within a report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/actions/bookmark-action.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\ActionSnippets.cs region=AddNewNavigateToBookMarkSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Report Viewer Container Element\nDESCRIPTION: HTML container element for the report viewer with loading placeholder.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/manual-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"reportViewer1\" class=\"k-widget\">\n\t\tloading...\n\t</div>\n```\n\n----------------------------------------\n\nTITLE: Setting PictureBox Values with Different Source Types\nDESCRIPTION: Examples of setting PictureBox Value property using various source types including binary data, URIs, file paths, and URLs.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/picturebox.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nthis.pictureBox1.Value = \"=Fields.MyImageBinary\";//a binary data column\nthis.pictureBox2.Value = \"=Fields.MyImageURI\";//a data column containing an URI\nthis.pictureBox3.Value = @\"C:\\MyPictures\\MyPicture.png\";//absolute file path to a PNG file\nthis.pictureBox4.Value = @\"C:\\MyPictures\\MySVGImage.svg\";//absolute file path to an SVG file\nthis.pictureBox5.Value = @\".\\images\\MyPicture.png\";//relative path\nthis.pictureBox6.Value = \"https://www.mysite.com/images/img1.gif\";//absolute URL\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nMe.PictureBox1.Value = \"=Fields.MyImageBinary\" 'a binary data column\nMe.PictureBox2.Value = \"=Fields.MyImageURI\" 'a data column containing an URI\nMe.PictureBox3.Value = \"C:\\MyPictures\\MyPicture.png\" 'absolute file path to a PNG image\nMe.PictureBox4.Value = \"C:\\MyPictures\\MySVGImage.svg\" 'absolute file path to an SVG file\nMe.PictureBox5.Value = \".\\images\\MyPicture.png\" 'relative path\nMe.PictureBox6.Value = \"https://www.mysite.com/images/img1.gif\" 'absolute URL\n```\n\n----------------------------------------\n\nTITLE: Crystal Reports 11.5 Assembly Binding Configuration\nDESCRIPTION: XML configuration for Crystal Reports version 11.5.3700.0, redirecting from base version 10.2.3600.0.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/converting-reports-from-various-versions-of-crystalreports.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.CrystalReports.Engine\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"11.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Enterprise.Framework\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"11.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Enterprise.InfoStore\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"11.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Shared\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"11.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.ReportAppServer.DataDefModel\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"11.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.ReportAppServer.ReportDefModel\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"11.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Connection Strings in JSON Format\nDESCRIPTION: Example of configuring database connection strings in JSON format. This basic format uses a simple key-value pair and defaults to System.Data.SqlClient as the provider.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/how-to-host-reports-service-in-asp.net-core-3.1.md#2025-04-21_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t//...\n\t\"ConnectionStrings\": {\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: DataPointConditionalFormatting rule in Telerik Reporting\nDESCRIPTION: This snippet refers to a `DataPointConditionalFormatting` rule within the Telerik Reporting framework. It shows where to find in the Report Designer the settings to configure the data point conditional formatting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/map-types/barchart-map.md#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n![Point Map Data Point Conditional Formatting in the Report Designer](images/PointMapDataPointConditionalFormatting.png)\n```\n\n----------------------------------------\n\nTITLE: Setting CanShrink Property for HtmlTextBox in Telerik Reporting Markdown\nDESCRIPTION: This snippet illustrates how to set the CanShrink property of an HtmlTextBox report item, allowing it to shrink based on its content. By default, CanShrink is set to False, which requires updating for desired behavior.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/htmltextbox/grow-and-shrink.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTo allow the HtmlTextBox to shrink based on its content, set its [`CanShrink`](/reporting/api/Telerik.Reporting.TextItemBase#Telerik_Reporting_TextItemBase_CanShrink) property to `True`. By default, `CanShrink` is set to `False`.\n```\n\n----------------------------------------\n\nTITLE: Defining the InitializeComponent Method in .NET for Telerik Reporting\nDESCRIPTION: The InitializeComponent method initializes a Report and its child items in the Telerik Reporting framework. It is automatically generated and recognized by the Report Designer during design-time, allowing for the easy manipulation of report items within the report definition class.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/understanding-events.md#2025-04-21_snippet_0\n\nLANGUAGE: .NET\nCODE:\n```\n// Define the InitializeComponent method\nprivate void InitializeComponent()\n{\n    // Initialization code for report and child items\n    this.textBox1 = new Telerik.Reporting.TextBox();\n    // Other initialization code...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Binding Timeouts in WCF\nDESCRIPTION: This XML snippet demonstrates how to configure the timeouts for a WCF service on the server side. It sets the `receiveTimeout` and `sendTimeout` attributes within the `basicHttpBinding` element to '00:10:00' (10 minutes). Additionally, it configures `maxReceivedMessageSize` and `maxBufferSize` to the maximum integer value to accommodate larger messages.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-increase-the-timeout-value-of-a-wcf-service.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bindings>\n\t<basicHttpBinding>\n\t\t<binding name=\"BasicHttpsBindingConfig\" maxReceivedMessageSize=\"2147483647\" maxBufferSize=\"2147483647\"\n\t\t\t\treceiveTimeout=\"00:10:00\" sendTimeout=\"00:10:00\">\n\t\t\t<readerQuotas maxArrayLength=\"2147483647\" maxStringContentLength=\"2147483647\"/>\n\t\t</binding>\n\t</basicHttpBinding>\n</bindings>\n```\n\n----------------------------------------\n\nTITLE: Crystal Reports 10.5 Assembly Binding Configuration\nDESCRIPTION: XML configuration for Crystal Reports version 10.5.3700.0, redirecting from base version 10.2.3600.0.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/converting-reports-from-various-versions-of-crystalreports.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<runtime>\n\t\t<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.CrystalReports.Engine\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"10.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Enterprise.Framework\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"10.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Enterprise.InfoStore\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"10.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.Shared\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"10.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.ReportAppServer.DataDefModel\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"10.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t\t<dependentAssembly>\n\t\t\t\t<assemblyIdentity name=\"CrystalDecisions.ReportAppServer.ReportDefModel\" publicKeyToken=\"692fbea5521e1304\" culture=\"neutral\"/>\n\t\t\t\t<bindingRedirect oldVersion=\"10.2.3600.0\" newVersion=\"10.5.3700.0\"/>\n\t\t\t</dependentAssembly>\n\t\t</assemblyBinding>\n\t</runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: WinUI Report Viewer Configuration\nDESCRIPTION: Specifies the Telerik UI for WinUI version used in the 2024 Q4 release with version 2.11.1\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q4-18-3-24-1218.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nWinUI Report Viewer:\n  Version: 2.11.1\n```\n\n----------------------------------------\n\nTITLE: Catching Resolver Errors in VB.NET\nDESCRIPTION: This VB.NET code snippet overrides the GetParameters method of the ReportsControllerBase to handle exceptions during report resolving.  It wraps the base method call in a Try-Catch block to catch exceptions and re-throw a new exception.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/handling-errors-occurring-in-a-custom-resolver-used-by-a-reporting-rest-service.md#2025-04-21_snippet_4\n\nLANGUAGE: VB.NET\nCODE:\n```\n````VB\nPublic Overrides Function GetParameters(clientID As String, reportSource As ClientReportSource) As System.Net.Http.HttpResponseMessage\n    Try\n        Return MyBase.GetParameters(clientID, reportSource)\n    Catch ex As Exception\n        Throw New Exception(\"Report resolving error.\")\n    End Try\nEnd Function\n````\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data Structure for Hierarchical Report\nDESCRIPTION: This JSON snippet illustrates the structure of hierarchical nested data that is used as input for the reporting solutions developed in Telerik Reporting. The hierarchy consists of multiple levels of 'Parent' and 'Child' entities.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hierarchical-report-from-nested-data.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"[\\n{\\n\\t\\\"Name\\\":\\\"Grand Parent 1\\\",\\n\\t\\\"List\\\":[{\\n\\t\\t\\\"Name\\\":\\\"Parent 1-1\\\",\\n\\t\\t\\\"List\\\":[{\\n\\t\\t\\t\\\"Name\\\":\\\"Child 1-1-1\\\"}, {\\n\\t\\t\\t\\\"Name\\\":\\\"Child 1-1-2\\\"}]\\n\\t\\t}, {...}\\n\\t]}\\n{\\n\\t\\\"Name\\\":\\\"Grand Parent 2\\\",\\n\\t\\\"List\\\":[{\\n\\t\\t\\\"Name\\\":\\\"Parent 2-1\\\",\\n\\t\\t\\\"List\\\":[{\\n\\t\\t\\t\\\"Name\\\":\\\"Child 2-1-1\\\"}, {...}]\\n\\t\\t}, {\\n\\t\\t\\\"Name\\\":\\\"Parent 2-2\\\",\\n\\t\\t\\\"List\\\":[{\\n\\t\\t\\t\\\"Name\\\":\\\"Child 2-2-1\\\"}, {\\n\\t\\t\\t\\\"Name\\\":\\\"Child 2-2-2\\\",\\n\\t\\t\\t\\\"List\\\":[{\\n\\t\\t\\t\\t\\\"Name\\\":\\\"Grand Child 2-2-2-1\\\"}, {...}]\\n\\t\\t\\t}]}\\n\\t]}\\n]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ReportService with MsSqlServerStorage - VB.NET\nDESCRIPTION: This VB.NET snippet shows how to set up the ReportServiceConfiguration using MsSqlServerStorage for the Reporting REST Service. This snippet needs a correctly configured instance with essential properties like ReportSourceResolver and Storage.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-service-storage/how-to-configure-an-mssql-database-storage.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n{{source=CodeSnippets\\MvcVB\\Controllers\\ReportsController.vb region=MSSqlReportsControllerImplementation}}\n```\n\n----------------------------------------\n\nTITLE: Binding JsonDataSource to Report Parameter in Telerik Reporting\nDESCRIPTION: This code snippet demonstrates how to set up a Binding expression that connects a report parameter to the DataSource.Source property of a JsonDataSource. This allows for dynamic setting of the JSON content at runtime.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/setting-the-content-of-jsondatasource-through-report-parameter.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nProperty path: DataSource.Source\nExpression: = Parameters.Parameter1.Value\n```\n\n----------------------------------------\n\nTITLE: Adding a Group to a Table in Telerik Reporting\nDESCRIPTION: This snippet outlines the steps to add a group to a Telerik report and configure it to display group values on the right side. It includes setting the group expression and adding textboxes to different sections of the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/right-to-left-in-table.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1) Add a [CSV DataSource]({%slug telerikreporting/designing-reports/connecting-to-data/data-source-components/csvdatasource-component/overview%}) (with **Group**, **Item** and **Value** fields) and set it to be the **DataSource** of the report.\n\n2) [Add a group to the report]({%slug telerikreporting/designing-reports/connecting-to-data/data-items/grouping-data/how-to-add-groups-to-report%}): right-click outside the report -> **Add New Group** and set the **Expression** to be \"=Fields.Group\";\n\n3) In the **groupHeaderSection** add a textbox whose **Value** is  \"=Fields.Group\";\n\n4) In the detail section, add textboxes containing \"= Fields.Value\" and \"= Fields.Item\"\n```\n\n----------------------------------------\n\nTITLE: Merging Resource Dictionaries in App.xaml\nDESCRIPTION: This code snippet demonstrates how to merge resource dictionaries in the App.xaml file in a WPF application. It includes references to the required Telerik UI for WPF XAML files, allowing for the application of implicit styles and themes to the WPF Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/customizing/setting-a-theme-(using-implicit-styles).md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n\"<Application x:Class=\\\"WpfApplication1.App\\\"\\n\\t\t\txmlns=\\\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\\\"\\n\\t\t\txmlns:x=\\\"http://schemas.microsoft.com/winfx/2006/xaml\\\"\\n\\t\t\tStartupUri=\\\"MainWindow.xaml\\\">\\n\\t <Application.Resources>\\n\\t   <ResourceDictionary>\\n\\t\\t <ResourceDictionary.MergedDictionaries>\\n\\t\\t   <ResourceDictionary Source=\\\"/Themes/System.Windows.xaml\\\"/>\\n\\t\\t   <ResourceDictionary Source=\\\"/Themes/Telerik.Windows.Controls.xaml\\\"/>\\n\\t\\t   <ResourceDictionary Source=\\\"/Themes/Telerik.Windows.Controls.Input.xaml\\\"/>\\n\\t\\t   <ResourceDictionary Source=\\\"/Themes/Telerik.Windows.Controls.Navigation.xaml\\\"/>\\n\\t\\t   <ResourceDictionary Source=\\\"/Themes/Telerik.ReportViewer.Wpf.xaml\\\"/>\\n\\t\\t </ResourceDictionary.MergedDictionaries>\\n\\t   </ResourceDictionary>\\n\\t </Application.Resources>\\n\\t</Application>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Merging Theme Resources in App.xaml for WPF Report Viewer\nDESCRIPTION: Code showing how to merge required theme resources into application resources in App.xaml for the WPF Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add-report-viewer-to-a-wpf-.net-core-project.md#2025-04-21_snippet_0\n\nLANGUAGE: XAML\nCODE:\n```\n<Application.Resources>\n    <ResourceDictionary>\n        <ResourceDictionary.MergedDictionaries>\n            <ResourceDictionary Source=\"/Telerik.ReportViewer.Wpf.Themes;component/Common/Themes/Light/System.Windows.xaml\" />\n            <ResourceDictionary Source=\"/Telerik.ReportViewer.Wpf.Themes;component/Common/Themes/Light/Telerik.Windows.Controls.xaml\" />\n            <ResourceDictionary Source=\"/Telerik.ReportViewer.Wpf.Themes;component/Common/Themes/Light/Telerik.Windows.Controls.Navigation.xaml\" />\n            <ResourceDictionary Source=\"/Telerik.ReportViewer.Wpf.Themes;component/Common/Themes/Light/Telerik.Windows.Controls.Input.xaml\" />\n            <ResourceDictionary Source=\"/Telerik.ReportViewer.Wpf.Themes;component/Common/Themes/Light/Telerik.ReportViewer.Wpf.xaml\" />\n        </ResourceDictionary.MergedDictionaries>\n    </ResourceDictionary>\n</Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Styling Report Viewer Table Columns CSS\nDESCRIPTION: CSS styles that define width proportions for table columns in the report viewer documentation, setting first column to 28% width and second column to 72% width.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/report-viewer-initialization.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntable th:first-of-type {\n\twidth: 28%;\n}\ntable th:nth-of-type(2) {\n\twidth: 72%;\n}\n```\n\n----------------------------------------\n\nTITLE: Security Exception Error Message when Using ObjectDataSource Component\nDESCRIPTION: This error occurs when an external assembly is not properly referenced in the configuration file. The message indicates that the assembly needs to be included in the AssemblyReferences element of the Telerik.Reporting configuration section.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-r3-2016---upgrade-issues-with-objectdatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAn exception has occurred while processing 'REPORTNAME' item:\n\nSystem.Security.SecurityException: The assembly \"EXTERNAL_ASSEMBLY_TYPE\" is not permitted to be used by an ObjectDataSource component. Please include it in an AssemblyReferences element in the Telerik.Reporting configuration section of your application configuration file.\n```\n\n----------------------------------------\n\nTITLE: Custom File Cache Provider Configuration with Specified Base Path\nDESCRIPTION: Configures the Telerik Reporting file cache provider with a custom base path for storing cached files, allowing specification of an absolute or relative file system location\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-the-file-cache-provider.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<Cache provider=\"File\">\n\t\t<Providers>\n\t\t\t<Provider name=\"File\">\n\t\t\t\t<Parameters>\n\t\t\t\t\t<Parameter name=\"BasePath\" value=\"C:\\MyDataCache\" />\n\t\t\t\t</Parameters>\n\t\t\t</Provider>\n\t\t</Providers>\n\t</Cache>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Events in HTML5 Report Viewer\nDESCRIPTION: Example showing how to attach a client event handler to the ReportViewer control by setting the ClientEvents tag and implementing the corresponding JavaScript function.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/client-events.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<telerik:ReportViewer ID=\"reportViewer1\" runat=\"server\">\n\t<ClientEvents RenderingBegin=\"onRenderingBegin\" />\n\t...\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n\tfunction onRenderingBegin() {\n\t\tconsole.log(\"rendering begin!\");\n\t}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sample Keep Client Alive HTTP Request\nDESCRIPTION: An example HTTP request that extends the expiration time for a client with ID 'bfe79165c60'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/clients-api/keep-client-alive.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/reports/clients/keepAlive/bfe79165c60 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Cache Provider in JSON for Telerik Reporting\nDESCRIPTION: JSON configuration for the Auto cache provider with a custom base path. This provider automatically selects the appropriate caching method based on resource characteristics and application permissions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"cache\": {\n\t\t\"provider\": \"Auto\",\n\t\t\"providers\": [\n\t\t\t{\n\t\t\t\t\"name\": \"AutoProviderName\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"BasePath\",\n\t\t\t\t\t\t\"value\": \"c:\\\\MyDataCache\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String with Explicit Provider in JSON\nDESCRIPTION: Advanced connection string configuration that explicitly specifies the provider name along with the connection string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-5.md#2025-04-21_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"ConnectionStrings\": {\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": {\n\t\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Stored HttpContext Data in Report Resolver\nDESCRIPTION: Example of retrieving the stored UrlReferrer from UserIdentity.Context within a Custom Report Resolver's Resolve method.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-pass-information-from-httpcontext-to-reporting-engine.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nUri urlReferrer = (Uri)UserIdentity.Current.Context[\"UrlRefferer\"];\n```\n\n----------------------------------------\n\nTITLE: Setting Bar Spacing in Telerik Reporting Charts with C#\nDESCRIPTION: This code snippet demonstrates how to create space between bars in the same category for Telerik Reporting charts. It sets the LineColor to Transparent and adjusts the LineWidth to create the illusion of space between bars.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/add-space-between-bars-telerik-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nDataPointStyle.LineColor = Transparent;\nDataPointStyle.LineWidth = 2;  // Adjust the value as needed\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Binding Redirects for WebAPI 2 in Web.config\nDESCRIPTION: XML configuration that redirects System.Web.Http and System.Net.Http.Formatting assemblies to their newer versions when using WebAPI 2 with Telerik Reporting REST service. The binding redirects should be placed in the web.config file, with the version number (5.1.0.0) replaced with the exact version being used.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/system-methodaccessexception.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <runtime>\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n      <dependentAssembly>\n        <assemblyIdentity name=\"System.Web.Http\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\"/>\n        <bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"5.1.0.0\"/>\n      </dependentAssembly>\n      <dependentAssembly>\n        <assemblyIdentity name=\"System.Net.Http.Formatting\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\"/>\n        <bindingRedirect oldVersion=\"0.0.0.0-65535.65535.65535.65535\" newVersion=\"5.1.0.0\"/>\n      </dependentAssembly>\n    </assemblyBinding>\n  </runtime>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Reporting REST Service with RedisStorage in VB.NET\nDESCRIPTION: VB.NET implementation of a ReportsController class that configures Telerik Reporting REST service to use Redis for storage. It establishes report resolvers and connects to Redis using a connection string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/reporting-rest-service-with-redisstorage-returns-error-500-to-requests.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Class ReportsController\n    Inherits ReportsControllerBase\n    Shared configurationInstance As ReportServiceConfiguration\n \n    Shared Sub New()\n        'This is the folder that contains the XML (trdx/trdp) report definitions\n        'In this case this is the Reports folder\n        Dim appPath = HttpContext.Current.Server.MapPath(\"~/\")\n        Dim reportsPath = Path.Combine(appPath, \"Reports\")\n \n        'Add resolver for trdx report definitions,\n        'then add resolver for class report definitions as fallback resolver;\n        'finally create the resolver and use it in the ReportServiceConfiguration instance.\n        Dim resolver = New ReportFileResolver(reportsPath).AddFallbackResolver(New ReportTypeResolver())\n \n        'Setup the ReportServiceConfiguration      \n            ' ReportSharingTimeout = 0,\n            ' ClientSessionTimeout = 15,\n        configurationInstance = New ReportServiceConfiguration() With { _\n            Key .HostAppId = \"Html5App\", _\n            Key .Storage = New RedisStorage(ConnectionMultiplexer.Connect(\"RedisConnectionStringHERE\")), _\n            Key .ReportResolver = resolver _\n        }\n    End Sub\n \n    Public Sub New()\n        'Initialize the service configuration\n        Me.ReportServiceConfiguration = configurationInstance\n    End Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Request for Sending a Document as Email\nDESCRIPTION: Complete example of an HTTP request to send a document as an email attachment. The request includes the endpoint with specific IDs and a JSON body containing email details like from, to, cc, subject, and body fields.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/documents-api/send-document.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/reports/clients/2c3d/instances/4d3c/documents/5x3a/send HTTP/1.1\n\n{\n\t\"from\": \"john.doe@mycompany.com\",\n\t\"to\": \"jane.doe@mycompany.com\",\n\t\"cc\": \"john.doe.jr@mycompany.com\",\n\t\"subject\": \"my mail subject\",\n\t\"body\": \"my mail body\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Rendering Extension in JSON Configuration File\nDESCRIPTION: This JSON configuration snippet modifies the CSV rendering extension settings to generate a CSV file without the header row and skip all TextBox items containing static text.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/configuring-the-csv-rendering-extension.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"telerikReporting\": {\n\t\t\"extensions\": [\n\t\t\t{\n\t\t\t\t\"name\": \"CSV\",\n\t\t\t\t\"parameters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Name\": \"NoHeader\",\n\t\t\t\t\t\t\"Value\": true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Name\": \"NoStaticText\",\n\t\t\t\t\t\t\"Value\": true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Specific Reporting Configuration\nDESCRIPTION: This code snippet defines a ResolveSpecificReportingConfiguration method that loads reporting configuration from a JSON file with a specific name (reportingAppSettings.json). It creates a ConfigurationBuilder, adds the JSON file, and builds the configuration. This allows for using a configuration file different from the default appSettings.json for reporting-specific settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-core-2.1-application.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n````CSharp\nstatic IConfiguration ResolveSpecificReportingConfiguration(IHostingEnvironment environment)\n\t{\n\t\t// If a specific configuration needs to be passed to the reporting engine, add it through a new IConfiguration instance.\n\t\tvar reportingConfigFileName = System.IO.Path.Combine(environment.ContentRootPath, \"reportingAppSettings.json\");\n\t\treturn new ConfigurationBuilder()\n\t\t .AddJsonFile(reportingConfigFileName, true)\n\t\t .Build();\n\t}\n````\n```\n\n----------------------------------------\n\nTITLE: Adding Supported Cultures in Project XML Configuration\nDESCRIPTION: This XML snippet shows how to specify supported cultures in the project file. The SupportedCultures tag lists the cultures that will be supported by the Silverlight Report Viewer, with semicolons separating multiple cultures.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/silverlight-application/report-viewer-localization.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<SupportedCultures>\n\t\tfr;fr-BE\n\t</SupportedCultures>\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Cache Provider in XML for Telerik Reporting\nDESCRIPTION: XML configuration for the Memory cache provider. This provider stores rendered pages and resources in memory without any additional parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/cache-element.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t…\n\t<Telerik.Reporting>\n\t\t<cache provider=\"Memory\">\n\t\t\t<providers>\n\t\t\t\t<provider name=\"MemoryProviderName\" />\n\t\t\t</providers>\n\t\t</cache>\n\t</Telerik.Reporting>\n\t…\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Referencing Kendo UI Themes in Index.html\nDESCRIPTION: This HTML snippet shows how to include the required LESS-based Kendo UI theme styles in the index.html file to style the Angular Report Viewer appropriately.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- The required LESS-based styles -->\n<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.common.min.css\" rel=\"stylesheet\" />\n<link href=\"https://kendo.cdn.telerik.com/{{kendosubsetversion}}/styles/kendo.blueopal.min.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Rendering Extension in XML Configuration File\nDESCRIPTION: This XML configuration snippet modifies the CSV rendering extension settings to generate a CSV file without the header row and skip all TextBox items containing static text.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/configuring-the-csv-rendering-extension.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<configuration>\n\t<!-- The configSectins element should be the first child element of configuration -->\n\t<configSections>\n\t\t<!-- Substitute Version=X.X.X.X with the assembly version you are using! -->\n\t\t<section \n\t\t\tname=\"Telerik.Reporting\"\n\t\t\ttype=\"Telerik.Reporting.Processing.Config.ReportingConfigurationSection, Telerik.Reporting, Version=X.X.X.X, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n\t\t\tallowLocation=\"true\"\n\t\t\tallowDefinition=\"Everywhere\"/>\n\t</configSections>\n\t<Telerik.Reporting>\n\t\t<Extensions>\n\t\t\t<Render>\n\t\t\t\t<Extension name=\"CSV\">\n\t\t\t\t\t<Parameters>\n\t\t\t\t\t\t<Parameter name=\"NoHeader\" value=\"true\"/>\n\t\t\t\t\t\t<Parameter name=\"NoStaticText\" value=\"true\"/>\n\t\t\t\t\t</Parameters>\n\t\t\t\t</Extension>\n\t\t\t</Render>\n\t\t</Extensions>\n\t</Telerik.Reporting>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring SubReport with ReportSource in VB.NET\nDESCRIPTION: Demonstrates how to specify a report for the SubReport item and its corresponding report parameters using InstanceReportSource in VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim report1 As New InvoiceReport()\nDim subReport1 As New Telerik.Reporting.SubReport()\nDim instanceReportSource1 As New Telerik.Reporting.InstanceReportSource()\ninstanceReportSource1.ReportDocument = report1\ninstanceReportSource1.Parameters.Add(New Telerik.Reporting.Parameter(\"SaledOrderID\", \"=Fields.SalesOrderID\"))\nsubReport1.ReportSource = instanceReportSource1\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers in Angular Component\nDESCRIPTION: This TypeScript code demonstrates how to implement the necessary event handlers in the Angular component. It includes methods for handling window resize, viewer ready, and rendering end events, which initialize and update the ExportOptionsHider.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-customize-export-options-of-angular-report-viewer.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n.....\n    @HostListener('window:resize', ['$event'])\n    onResize() {\n        ExportOptionsHider.init();  \n    }\n\n    ready() {\n        ExportOptionsHider.init();\n    }\n\n    onRenderingEnd(e, args): void {\n        ExportOptionsHider.instance.update(e.target.reportSource().report);\n    }\n```\n\n----------------------------------------\n\nTITLE: Binding ObjectDataSource to DataView in VB.NET\nDESCRIPTION: This code snippet demonstrates how to create a DataView, configure an ObjectDataSource with it, and set up a report using this data source in VB.NET. It also shows how to add a calculated field and preview the report in a Windows Forms Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/objectdatasource-component/bind-to-a-dataview.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim table As New DataTable()\ntable.Columns.Add(\"ID\", GetType(Integer))\ntable.Columns.Add(\"Name\", GetType(String))\n\nDim view As DataView = table.DefaultView\nview.Sort = \"ID\"\n\nDim objectDataSource As New ObjectDataSource()\nobjectDataSource.DataSource = view\nobjectDataSource.DataMember = \"\"\n\n' add calculated field\nobjectDataSource.CalculatedFields.Add(\"IdPlusOne\", _\n    GetType(Integer), _\n    \"= Fields.ID + 1\")\n\nDim report As New Report()\nreport.DataSource = objectDataSource\n\nDim reportProcessor As New ReportProcessor()\nDim result As RenderingResult = reportProcessor.RenderReport(\"PDF\", report, Nothing)\n\nDim viewer As New ReportViewer()\nviewer.ReportSource = report\nviewer.RefreshReport()\nviewer.ShowDialog()\n```\n\n----------------------------------------\n\nTITLE: Overriding PrintReport function in ASP.NET Web Forms Report Viewer\nDESCRIPTION: This code overrides the `PrintReport` function in the ASP.NET Web Forms Report Viewer to handle printing. It checks the `defaultPrintFormat` and either calls `DefaultPrint()` or `PrintAs(\"PDF\")`, then executes the `print` command in the preview frame.  This snippet targets the obsolete ASP.NET Web Forms Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/print-error-chrome.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"<div>\\n<form runat=\\\"server\\\">\\n    <telerik:ReportViewer\\n        ID=\\\"reportViewer1\\\"\\n        Width=\\\"1300px\\\"\\n        Height=\\\"900px\\\"\\n        EnableAccessibility=\\\"false\\\"\\n        runat=\\\"server\\\">\\n    <ReportSource IdentifierType=\\\"UriReportSource\\\" Identifier=\\\"SampleReport.trdp\\\">\\n    </ReportSource>\\n   <sendemail enabled=\\\"false\\\" />\\n    </telerik:ReportViewer>\\n </form>\\n\\n<script type=\\\"text/javascript\\\">\\n    ReportViewer.prototype.PrintReport = function () {\\n        switch (this.defaultPrintFormat) {\\n            case \\\"Default\\\":\\n                this.DefaultPrint();\\n                break;\\n            case \\\"PDF\\\":\\n                this.PrintAs(\\\"PDF\\\");\\n                previewFrame = document.getElementById(this.previewFrameID);\\n                previewFrame.onload = function () { previewFrame.contentDocument.execCommand(\\\"print\\\", true, null); }\\n                break;\\n        }\\n    };\\n</script>\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Database for Range Chart Data\nDESCRIPTION: This SQL query retrieves data from the AdventureWorks database, specifically targeting sales territories and order totals for the years 2002 and 2003. The results are used to populate a range chart in Telerik Reporting, displaying the difference between these years for illustrative purposes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/range.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\t[Sales].[SalesTerritory].[Name] AS 'TerritoryName',\n\t[Sales].[SalesOrderHeader].[OrderDate],\n\t[Sales].[SalesOrderHeader].[TotalDue]\nFROM\n\t[Sales].[SalesOrderHeader] INNER JOIN\n\t[Sales].[SalesTerritory] ON [Sales].[SalesOrderHeader].[TerritoryID] = [Sales].[SalesTerritory].[TerritoryID]\nWHERE\n\tYEAR([Sales].[SalesOrderHeader].[OrderDate]) IN (2002, 2003)\n```\n\n----------------------------------------\n\nTITLE: Setting RuntimeSettings for Telerik Reports in C#\nDESCRIPTION: This code snippet demonstrates how to set the RuntimeSettings property of a Telerik Report in C#. It creates a new report instance, defines rendering settings for PDF, sets the visibility of the PDF export option, and adds a parameter to the PDF settings. Finally, it adds the PDF settings to the report's RuntimeSettings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/enable-per-report-rendering-format-settings.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\n````CSharp\nReport report = new Report()\n\nvar pdfSettings = new RenderingSettings() { Name = \"PDF\" , Visible = false }; \n// Setting Visible to false of a rendering extension means that that rendering extension will not be visible in the export dropdown\n// when the report is displayed in a report viewer.\npdfSettings.Parameters.Add(new Parameter() { Name = \"DocumentAuthor\", Value = \"Dimitar\" });\nreport.RuntimeSettings.Add(pdfSettings);\n````\n```\n\n----------------------------------------\n\nTITLE: Installing Telerik Angular Report Viewer - PowerShell\nDESCRIPTION: This PowerShell command installs the Telerik Angular Report Viewer package from npm, which is essential for displaying reports in an Angular application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-report-server.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install @progress/telerik-angular-report-viewer\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace from Blazor WASM System.Drawing.Common Exception\nDESCRIPTION: Error stack trace showing the PlatformNotSupportedException when attempting to use System.Drawing.Common functionality in a Blazor WebAssembly project. The error occurs because Blazor WASM runs on Mono which doesn't support System.Drawing.Common.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/blazor-wasm-system-drawing-common-not-supported.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUnhandled exception rendering component: System.Drawing.Common is not supported on this platform.\nSystem.PlatformNotSupportedException: System.Drawing.Common is not supported on this platform.\n\tat System.Drawing.Image..ctor()\n\tat System.Drawing.Bitmap..ctor(Int32 width, Int32 height)\n\tat BlazorApp_empty1.Pages.Index.OnButtonClick2() in D:\\Program Files\\Progress\\Telerik Reporting R3 2022\\Examples\\CSharp\\.NET 7\\BlazorApp-empty1\\Pages\\Index.razor:line 32\n\tat Microsoft.AspNetCore.Components.EventCallbackWorkItem.InvokeAsync[Object](MulticastDelegate delegate, Object arg)\n\tat Microsoft.AspNetCore.Components.EventCallbackWorkItem.InvokeAsync(Object arg)\n\tat Microsoft.AspNetCore.Components.ComponentBase.Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, Object arg)\n\tat Microsoft.AspNetCore.Components.EventCallback.InvokeAsync(Object arg)\n\tat Microsoft.AspNetCore.Components.RenderTree.Renderer.DispatchEventAsync(UInt64 eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs)\n```\n\n----------------------------------------\n\nTITLE: Report Export Implementation Example\nDESCRIPTION: Example implementation showing how to use the ReportClient class to export a report to a file, including client registration, instance creation, document generation, and file saving.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-use-reporting-rest-service-api-with-csharp-client.md#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic async Task ExportReportFromServiceAsync(string reportName, string format, string baseUrl)\n{\n\t// 1. Register client\n\tReportClient reportClient = new ReportClient(baseUrl);\n\tawait reportClient.RegisterClient();\n\n\n\t// 2. Create Report Instance\n\tReportSourceModel reportSourceModel = new ReportSourceModel()\n\t{\n\t\tReport = reportName\n\t};\n\n\tstring reportSource = System.Text.Json.JsonSerializer.Serialize(reportSourceModel);\n\tstring reportInstanceId = await reportClient.CreateInstance(reportSource);\n\n\n\t// 3. Create Document\n\tstring reportDocumentId = await reportClient.CreateDocument(reportInstanceId, format);\n\n\tbool documentProcessing;\n\tdo\n\t{\n\t\tThread.Sleep(500);// wait before next Info request\n\t\tdocumentProcessing = await reportClient.DocumentIsProcessing(reportInstanceId, reportDocumentId);\n\t} while (documentProcessing);\n\n\t// 4. Get Document\n\tbyte[] result = await reportClient.GetDocument(reportInstanceId, reportDocumentId);\n\tFile.WriteAllBytes($\"C:\\\\temp\\\\{reportName}.{format.ToLower()}\", result);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigurationHelper Class in C# for ASP.NET Core\nDESCRIPTION: This code snippet defines a static ConfigurationHelper class with a method to resolve the configuration from the appsettings.json file. It's used to set up the reporting configuration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/adding-web-report-designer-in-net-core-mvc.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\n\nnamespace WebApplication1\n{\n\tstatic class ConfigurationHelper\n\t{\n\t\tpublic static IConfiguration ResolveConfiguration(IWebHostEnvironment environment)\n\t\t{\n\t\t\tvar reportingConfigFileName = System.IO.Path.Combine(environment.ContentRootPath, \"appsettings.json\");\n\t\t\treturn new ConfigurationBuilder()\n\t\t\t\t.AddJsonFile(reportingConfigFileName, true)\n\t\t\t\t.Build();\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Action Executing Event Handler\nDESCRIPTION: Provides a confirmation dialog for drill-through actions, allowing cancellation of navigation based on user interaction.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-winforms-report-viewer.md#2025-04-21_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nvoid reportViewer1_ActionExecuting(object sender, ReportViewer.Common.InteractiveActionCancelEventArgs args)\n{\n    var reportAction = args.Action as Telerik.Reporting.Processing.NavigateToReportAction;\n    if (null == reportAction)\n    {\n        return;\n    }\n    var msg = string.Format(\"Would you like to open the external report for order number {0}?\", reportAction.ReportSource.Parameters[\"OrderNumber\"]);\n    args.Cancel = MessageBox.Show(msg, \"Confirm\", MessageBoxButtons.OKCancel) != System.Windows.Forms.DialogResult.OK;\n    this.borderBounds = System.Drawing.Rectangle.Empty;\n    this.reportViewer1.Refresh();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing libgdiplus via apt on Ubuntu-based distributions\nDESCRIPTION: This code snippet provides commands to install the libgdiplus library on Ubuntu-based Linux distributions using the apt package manager. It requires adding the Mono repository to the system's source list using an apt-key and then installing libgdiplus.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-build-and-Install-libgdiplus-linux.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install gnupg ca-certificates\n\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\n\necho \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list\n\nsudo apt update\n\nsudo apt install libgdiplus\n```\n\n----------------------------------------\n\nTITLE: Using PageNumber Function with PageExec in Telerik Reporting (C#)\nDESCRIPTION: Shows an alternative way to use the PageNumber function by passing a PageExec function as a parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/page-functions.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n= PageNumber(PageExec(\"group1\", Fields.GroupName))\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Rendering Extension in XML Configuration\nDESCRIPTION: XML configuration example showing how to set a DocumentAuthor parameter for the PDF rendering extension. This demonstrates the basic structure of the extensions element in an XML-based configuration file.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/extensions-element.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    …\n    <Telerik.Reporting>\n        <extensions>\n            <render>\n                <extension name=\"PDF\" description=\"PDF Description\">\n                    <parameters>\n                        <parameter name=\"DocumentAuthor\" value=\"John Doe\"/>\n                    </parameters>\n                </extension>\n            </render>\n        </extensions>\n    </Telerik.Reporting>\n    …\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Validating XHTML Using IsValidXhtml Method in VB Expressions\nDESCRIPTION: This snippet demonstrates how to use the IsValidXhtml method inside a HtmlTextBox Expression in VB. The method ensures that the provided XHTML content is valid. No external dependencies are required for this validation approach.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/htmltextbox/xhtml-validation.md#2025-04-21_snippet_1\n\nLANGUAGE: VB\nCODE:\n```\n{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\Processing\\HtmlTextBoxSnippets.vb region=Validate_Xhtml_Using_IsValidXhtml_InExpression_Snippet}}\n```\n\n----------------------------------------\n\nTITLE: Adding jQuery Reference in Angular Configuration - TypeScript\nDESCRIPTION: This snippet demonstrates how to add jQuery to the scripts array in the Angular configuration file, ensuring it is included in the application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-report-server.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"scripts\": [\"./node_modules/jquery/dist/jquery.js\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing NavigateToUrlAction and CustomAction in Report Constructor - CSharp\nDESCRIPTION: This snippet demonstrates how to add actions like NavigateToUrlAction and CustomAction to a report's title text box and shape map series group, respectively. It's used in the report constructor for enhanced interactivity. Modify the report programmatically by setting up parameters for actions on data points in a choropleth map.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-add-interactivity-to-a-report-using-action-event-handlers-in-wpf-report-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\ntextBoxTitle.Action = new NavigateToUrlAction()\n{\n\tUrl = \"https://en.wikipedia.org/wiki/Population_density\" ,\n\tTarget = UrlTarget.NewWindow\n};\n\nvar customAction = new CustomAction();\ncustomAction.Parameters.Add( new Parameter( \"country\" , \"=Fields.CNTRY_NAME\" ));\ncustomAction.Parameters.Add( new Parameter( \"area\" , \"=Fields.SQKM\" ));\ncustomAction.Parameters.Add( new Parameter( \"population\" , \"=Fields.POP_CNTRY\" ));\ncustomAction.Parameters.Add( new Parameter( \"populationDensity\" , \"=CInt(Fields.POP_CNTRY / Fields.SQKM)\" ));\nshapeMapSeries1.SeriesGroup.Action = customAction;\n```\n\n----------------------------------------\n\nTITLE: Command to start SRD.NET with .NET 9 compatibility\nDESCRIPTION: This command starts the Standalone Report Designer for .NET with the 'LatestMajor' roll-forward option, which enforces the use of the latest .NET runtime available, allowing it to load .NET 9 assemblies even when .NET 8 is installed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-load-dot-net-7-assemblies-in-srd-dot-net.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nC:\\Program Files (x86)\\Progress\\Telerik Reporting {Release}\\Report Designer\\.NET>Telerik.ReportDesigner.Net.exe --roll-forward LatestMajor\n```\n\n----------------------------------------\n\nTITLE: Adding Empty Lines to TextBox Value in C#\nDESCRIPTION: This snippet demonstrates how to add empty lines at the beginning of a TextBox value in C# to improve the layout of tilted text.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/textbox.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nthis.textBox1.Value = \"= \\\"\\r\\n\\r\\n\\\" + Fields.MyDataColumn\";\n```\n\n----------------------------------------\n\nTITLE: Parameter Update JavaScript Handler\nDESCRIPTION: Client-side JavaScript code for handling parameter changes and updating the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/customizing/how-to-pass-values-to-report-parameters.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('#invoiceId').change(function () {\n\tvar viewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n\tviewer.reportSource({\n\t\treport: viewer.reportSource().report,\n\t\tparameters: { OrderNumber: $(this).val() }\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP Handler in web.config (system.webServer)\nDESCRIPTION: This XML snippet demonstrates how to register the HTTP handler for the Telerik ReportViewer within the `<system.webServer>` section of the `web.config` file, which is required for IIS 7 and later. The version number (x.x.x.x) needs to be updated with your Telerik Reporting assembly version.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/how-to-add-report-viewer-to-a-web-page.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n\"<system.webServer>\n\t\t<handlers>\n\t\t\t<add name=\\\"Telerik.ReportViewer.axd_*\\\" path=\\\"Telerik.ReportViewer.axd\\\" verb=\\\"*\\\" type=\\\"Telerik.ReportViewer.WebForms.HttpHandler, Telerik.ReportViewer.WebForms, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\\\" preCondition=\\\"integratedMode\\\"/>\n\t\t</handlers>\n\t\t<validation validateIntegratedModeConfiguration=\\\"false\\\"/>\n\t</system.webServer>\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Identified Telerik Reporting Redis Keys\nDESCRIPTION: This command identifies Telerik Reporting keys and passes them to the DEL command for deletion. It combines the KEYS command with xargs to efficiently remove multiple keys.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/clear-redis-storage-telerik-reporting-rest-service.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nredis-cli KEYS \"*18.1.24.514*\" | xargs redis-cli DEL\n```\n\n----------------------------------------\n\nTITLE: Page Count Skip Logic in C#\nDESCRIPTION: Code snippet showing how to skip the page count phase of report rendering when not needed.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/custom-rendering-extension.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nif (ShouldCountOnly(renderingContext))\n{ // Our custom rendering extension format (XML) does not have pages, so we do not need to count pages.\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Swashbuckle Exception on Conflicting Controllers\nDESCRIPTION: Server-side exception thrown by Swashbuckle when there are conflicting method/path combinations in the Telerik Reporting controllers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/conflicting-actions-error-in-swagger-generation-net-core.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAn unhandled exception has occurred while executing the request.\n\n\tSwashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination \"GET api/ReportDesignerControllerBase\" for actions - Telerik.WebReportDesigner.Services.Controllers.ReportDesignerControllerBase.GetDesignerResource (Telerik.WebReportDesigner.Services),Telerik.WebReportDesigner.Services.Controllers.ReportDesignerControllerBase.GetResource (Telerik.WebReportDesigner.Services). Actions require a unique method/path combination for Swagger/OpenAPI 3.0. Use ConflictingActionsResolver as a workaround\n\t\tat Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperations(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)\n\t\tat Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePaths(IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)\n\t\tat Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwagger(String documentName, String host, String basePath)\n\t\tat Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n\t\tat Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\n```\n\n----------------------------------------\n\nTITLE: Setting Version Configuration for Web Report Designer Dependencies\nDESCRIPTION: Key dependencies required for the Web Report Designer including Kendo UI, jQuery and Promise object support.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q3-18-2-24-924.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTelerik Kendo UI (2022.3.913 or later)\njQuery (1.9.1 or later)\nBrowser's native Promise support\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting Expression for Item Row in Telerik Reporting\nDESCRIPTION: This expression applies alternating styles to item rows within expandable groups. It uses a custom Exec function to calculate the row number within each group.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/applying-conditional-formatting-rule-to-expandable-area.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= Exec(\"group\", RowNumber())%2\n```\n\n----------------------------------------\n\nTITLE: Updating Connection String for Report Viewer in VB\nDESCRIPTION: This VB code snippet demonstrates updating the report source with a new connection string using a ReportConnectionStringManager. Specifically designed for use with Telerik Reporting, it involves setting a new UriReportSource and refreshing the report view. Dependencies include a valid connection string and the necessary Telerik libraries.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/changing-the-connection-string-dynamically-according-to-runtime-data.md#2025-04-21_snippet_4\n\nLANGUAGE: VB\nCODE:\n```\nDim connectionString = \"Data Source=(local)\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=SSPI\"\nDim connectionStringHandler = New ReportConnectionStringManager(connectionString)\nDim sourceReportSource = New UriReportSource() With { _\n\t.Uri = \"Employee Sales Summary.trdx\" _\n}\n\nDim reportSource = connectionStringHandler.UpdateReportSource(sourceReportSource)\nMe.reportViewer1.ReportSource = reportSource\nMe.reportViewer1.RefreshReport()\n```\n\n----------------------------------------\n\nTITLE: Resetting Custom Aggregate Function with ReportDefinition\nDESCRIPTION: Demonstrates a method to reset thread-static variables using ReportDefinition as a unique identifier to prevent value carryover between report renderings\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/summary-per-page-when-group-is-on-multiple-pages.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprivate static void Reset()\n{\n    result = 0;\n    currentPage = -1;\n    if (currentPageValues != null)\n    {\n\t\tcurrentPageValues.Clear();\n    }\n}\n\npublic void Accumulate(object[] values)\n{\n\tvar reportDefinition = values[3];\n\tif (!object.ReferenceEquals(processingOperationId, reportDefinition))\n    {\n\t\tprocessingOperationId = reportDefinition;\n\t\tReset();\n    }\n\n\tvar page = (int)values[2];\n\n    if (page != currentPage)\n    {\n\t\tcurrentPage = page;\n\n\t\tfor (int index = 0; index < currentPageValues.Count; index++)\n\t\t{\n\t\t\tthis.AccumulateCore(currentPageValues[index]);\n\t\t}\n\t\tcurrentPageValues.Clear();\n    }\n\n    currentPageValues.Add(values);\n}\n```\n\n----------------------------------------\n\nTITLE: React Report Viewer Error Message in Console\nDESCRIPTION: The error message shown in the browser console when attempting to load the React Report Viewer, indicating that 'perspectiveManager.dispose is not a function'.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/react-viewer-does-not-load-dispose-error.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreact-dom.development.js:22686 \n\nUncaught TypeError: perspectiveManager.dispose is not a function\nat Object.dispose (telerikReportViewer.js:9876:1)\nat TelerikReportViewer.dispose (telerik-report-viewer.js:345:1)\nat TelerikReportViewer.componentWillUnmount (telerik-report-viewer.js:237:1)\nat callComponentWillUnmountWithTimer (react-dom.development.js:22699:1)\nat safelyCallComponentWillUnmount (react-dom.development.js:22720:1)\nat commitDeletionEffectsOnFiber (react-dom.development.js:23948:1)\nat recursivelyTraverseDeletionEffects (react-dom.development.js:23813:1)\nat commitDeletionEffectsOnFiber (react-dom.development.js:23937:1)\nat recursivelyTraverseDeletionEffects (react-dom.development.js:23813:1)\nat commitDeletionEffectsOnFiber (react-dom.development.js:23988:1)\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Zoom Level in Telerik.Reporting XML Configuration\nDESCRIPTION: This XML configuration snippet sets the default PDF zoom level to 100% using the Telerik.Reporting Configuration Section Extension Element. It adds a JavaScript parameter to the PDF rendering extension.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-set-the-default-pdf-view-size-to-100-percentages.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n   <extensions>\n      <render>\n        <extension name=\"PDF\">\n          <parameters>\n            <parameter name=\"JavaScript\" value=\"this.zoom=100\"/>\n          </parameters>\n        </extension>\n      </render>\n    </extensions>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Configuring Invariant Globalization in runtimeconfig.json\nDESCRIPTION: This JSON snippet configures the invariant globalization setting through the 'runtimeconfig.json' file. The 'System.Globalization.Invariant' property can be set to 'false' for enabling cultural data access. This configuration is adjusted at runtime, requiring no fixed dependencies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/only-invariant-culture-is-supported-in-globalization-invariant-mode-error.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\\\"runtimeOptions\\\": {\n\t\t\\\"configProperties\\\": {\n\t\t\t\\\"System.Globalization.Invariant\\\": false\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Web Report Viewer Dependencies\nDESCRIPTION: Lists library dependencies for Web Report Designer and HTML5 Report Viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q4-18-3-24-1218.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nWeb Report Viewer Dependencies:\n  Telerik Kendo UI: '2022.3.913+'\n  jQuery: '1.9.1+'\n  Promise Support: Browser Native\n```\n\n----------------------------------------\n\nTITLE: REST Service Request for Viewer Template\nDESCRIPTION: Example of the correct REST Service request for the viewer template after the upgrade. The version number is now included in the request URL.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/angular-error-loading-report-viewers-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://localhost:44332/api/reports/resources/templates/telerikReportViewerTemplate-14.0.20.219.html\n```\n\n----------------------------------------\n\nTITLE: Error Message for Failed Telerik.Reporting.Report Object Creation\nDESCRIPTION: This code snippet shows the error message that occurs when the system fails to create a Telerik.Reporting.Report object from its string representation. The error typically includes the namespace, class, and assembly information of the report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-runtime-cannot-create-an-object-of-type-telerik-reporting-report-from-its-string-representation.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nCannot create an object of type 'Telerik.Reporting.Report' from its string representation 'MyNameSpace.MyClass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' for the 'Report' property.\n```\n\n----------------------------------------\n\nTITLE: Installing Telerik Angular Report Viewer NPM Package\nDESCRIPTION: This code snippet illustrates how to install the Telerik Angular Report Viewer package from npm.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install @progress/telerik-angular-report-viewer\n```\n\n----------------------------------------\n\nTITLE: Merging Resource Dictionaries for WPF Report Viewer\nDESCRIPTION: This snippet demonstrates how to merge ResourceDictionaries in the App.xaml file to utilize the Telerik WPF Report Viewer. It uses the Fluent theme as an example, which can be altered to match different themes as necessary.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add--manually-report-viewer-to-a-wpf-.net-framework-project.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Application.Resources>\n    <ResourceDictionary>\n        <ResourceDictionary.MergedDictionaries>\n            <ResourceDictionary Source=\"pack://siteoforigin:,,,/Telerik.Windows.Controls.Themes.Fluent;component/Themes/Fluent.xaml\" />\n        </ResourceDictionary.MergedDictionaries>\n    </ResourceDictionary>\n</Application.Resources>\n```\n\n----------------------------------------\n\nTITLE: Unbinding Event Handlers in HTML5 ReportViewer\nDESCRIPTION: Shows how to unbind specific event handlers from the report viewer using a named function reference. Also mentions the ability to unbind all handlers from an event.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/event-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction onPageReady(e) {\n\tconsole.log(\"page ready\");\n}\n// $(handler) is jQuery's shorthand for $(document).ready(handler)\n$(function () {\n\t$(\"#reportViewer1\").telerik_ReportViewer({\n\t\tserviceUrl: \"api/reports/\",\n\t\ttemplateUrl: 'ReportViewer/templates/telerikReportViewerTemplate-{{buildversion}}.html',\n\t\treportSource: {\n\t\t\treport: \"Telerik.Reporting.Examples.CSharp.Invoice, CSharp.ReportLibrary\"\n\t\t},\n\t\tpageReady: onPageReady\n\t});\n\tvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\n\treportViewer.unbind(telerikReportViewer.Events.PAGE_READY, onPageReady);\n});\n```\n\n----------------------------------------\n\nTITLE: Console Application Demo Implementation\nDESCRIPTION: Example console application that demonstrates the usage of async report rendering while performing other operations concurrently. Shows proper task handling and result retrieval.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-render-reports-asynchronously-by-using-the-async-and-await-keywords.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nclass Program\n{\n    // A working example\n    static void Main(string[] args)\n    {\n        // Use your class to render the report in an async manner\n        var myClass = new MyClass();\n  \n        Console.WriteLine(\"Starting rendering...\");\n        var task = myClass.RenderReportAsync();\n  \n        // While the report is rendering do something else\n        Count();\n  \n        Console.WriteLine(\"Main finished on: {0}\", Thread.CurrentThread.ManagedThreadId);\n        Console.WriteLine(\"Render Status: {0}\\n\", task.Result);\n  \n        Console.ReadLine();\n    }\n  \n    static void Count()\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            Console.WriteLine(i);\n        }\n    }\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nClass Program\n    ' A working example\n    Private Shared Sub Main(args As String())\n        ' Use your class to render the report in an async manner\n        Dim [myClass] = New [MyClass]()\n \n        Console.WriteLine(\"Starting rendering...\")\n        Dim task = [myClass].RenderReportAsync()\n \n        ' While the report is rendering do something else\n        Count()\n \n        Console.WriteLine(\"Main finished on: {0}\", Thread.CurrentThread.ManagedThreadId)\n        Console.WriteLine(\"Render Status: {0}\" & vbLf, task.Result)\n \n        Console.ReadLine()\n    End Sub\n \n    Private Shared Sub Count()\n        For i As Integer = 0 To 9\n            Console.WriteLine(i)\n        Next\n    End Sub\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Implementing Newtonsoft JSON Action Filter in ASP.NET Core\nDESCRIPTION: A custom action filter that converts JsonResult to Newtonsoft.Json serialized content, allowing localized control over JSON serialization for specific controllers\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/use-two-json-serializers-in-same-asp-net-core-project.md#2025-04-21_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\npublic class ToNewtonsoftActionFilter : IAsyncResultFilter \n{\n\tpublic async Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next) \n\t{\n\t\tif (context.Result is JsonResult jsonResult) \n\t\t{\n\t\t\tstring jsonStr = Newtonsoft.Json.JsonConvert.SerializeObject(jsonResult.Value, (Newtonsoft.Json.JsonSerializerSettings?)jsonResult.SerializerSettings ?? new Newtonsoft.Json.JsonSerializerSettings {\n\t\t\t\tContractResolver = new Newtonsoft.Json.Serialization.DefaultContractResolver { NamingStrategy = new Newtonsoft.Json.Serialization.CamelCaseNamingStrategy() }\n\t\t\t});\n\n\t\t\tcontext.Result = new ContentResult { Content = jsonStr, ContentType = \"application/json\" };\n\t\t}\n\n\t\tawait next().ConfigureAwait(false);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ObjectDataSource for .NET Framework - XML\nDESCRIPTION: This XML configuration snippet illustrates how to register the CarObjects assembly in the web.config file within .NET Framework applications. It includes necessary settings for Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/tools/objectdatasource-wizard.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n\t<configSections>\n\t\t<section name=\"Telerik.Reporting\"\n\t\t\ttype=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting\"\n\t\t\tallowLocation=\"true\"\n\t\t\tallowDefinition=\"Everywhere\" />\n\t</configSections>\n\t<Telerik.Reporting>\n\t\t<AssemblyReferences>\n\t\t\t<add name=\"CarObjects\"/>\n\t\t</AssemblyReferences>\n\t</Telerik.Reporting>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Styles for HTML5 Report Viewer in CSS\nDESCRIPTION: CSS code to set a default height for the report viewer and hide overflow in the scrollable area.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-resize-the-report-viewer-to-accommodate-its-content.md#2025-04-21_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n#reportViewer1 {\n\theight: 600px;\n}\n\n#reportViewer1 .k-splitter .k-scrollable {\n\toverflow: hidden;\n}\n```\n\n----------------------------------------\n\nTITLE: Data Method Snippet in VB.NET\nDESCRIPTION: This is a placeholder for a VB.NET data method snippet within the Cars class.  It emphasizes the use of the DataObjectMethodAttribute for methods used in data binding.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/tools/data-source-wizards/objectdatasource-wizard.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\n\t\t{{source=CodeSnippets\\VB\\API\\Telerik\\Reporting\\ObjectDataSourceSnippets.vb region=DataMethodSnippet}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Path Handling in .NET Runtime\nDESCRIPTION: This HTML snippet illustrates how to configure the .NET application runtime to use legacy path handling, preventing the 'The path is not of a legal form' exception. Include this in the application's configuration file to resolve path issues in Telerik Reports targeting .NET 4.6.2. This is applicable for applications using file paths as resources, such as in PictureBox.Value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/the-path-is-not-of-a-legal-form-error-message-on-processing-a-telerik-report-net462-framework.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<runtime>\\n    <AppContextSwitchOverrides value=\\\"Switch.System.IO.UseLegacyPathHandling=true\\\"/>\\u00A0 \\n</runtime>\n```\n\n----------------------------------------\n\nTITLE: Running the Angular Application\nDESCRIPTION: This PowerShell command initiates the Angular application, allowing developers to view the integrated Angular Report Viewer component in action.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Report Printing with Button Control in ASP.NET\nDESCRIPTION: This code snippet demonstrates how to add a Print button that triggers report printing without displaying the report. It includes logic to disable the button until the report is fully loaded in the hidden ReportViewer control.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-print-report-on-client-machine-without-showing-the-report.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n<asp:Button ID=\"PrintButton\" runat=\"server\" Text=\"Print Report\" OnClientClick=\"MyPrint(); return false;\" />\n<telerik:ReportViewer ID=\"ReportViewer1\" runat=\"server\" style=\"display:none\" />\n<script type=\"text/javascript\">\n  ReportViewer.OnReportLoadedOld = ReportViewer.OnReportLoaded; \n  ReportViewer.prototype.OnReportLoaded = function()\n  {\n    this.OnReportLoadedOld();            \n    var printButton = document.getElementById(\"PrintButton\"); \n    printButton.disabled = false; \n  } \n  function MyPrint()\n  {\n    <%=ReportViewer1.ClientID %>.PrintReport();\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Binding Background Image in Telerik Reporting\nDESCRIPTION: This code snippet demonstrates how to bind the BackgroundImage property of a report to a specific expression, allowing for dynamic image changes based on conditions. It specifies the property path and the expression format required for implementation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/change-background-image-through-binding.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nStyle.BackgroundImage.ImageData\n```\n\nLANGUAGE: csharp\nCODE:\n```\n=IIf(Condition, imageWhenConditionIsTrue, imageWhenConditionIsFalse)\n```\n\n----------------------------------------\n\nTITLE: Enabling MVC in Configure Method\nDESCRIPTION: This code snippet enables MVC in the Configure method of the Startup.cs file using the UseMvc() extension method. This middleware is essential for routing requests to the appropriate controllers and actions within the ASP.NET Core application, which is necessary for the Web Report Designer to function correctly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-.net-core-2.1-application.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n````CSharp\napp.UseMvc();\n````\n```\n\n----------------------------------------\n\nTITLE: Resolving ReportViewer Mobile Rendering with DOCTYPE\nDESCRIPTION: Using an older DOCTYPE declaration to address layout issues in legacy ASP.NET WebForms ReportViewer when rendering on mobile devices. This solution helps mitigate rendering problems caused by iframe and table elements.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/old-webforms-viewer-messes-rendering-on-mobile.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n```\n\n----------------------------------------\n\nTITLE: Removing Default HTML5 Report Viewer Container Styles in CSS\nDESCRIPTION: CSS code to remove the default styles for the report viewer container, which is a prerequisite for custom resizing.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-resize-the-report-viewer-to-accommodate-its-content.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n#reportViewer1 {\n\tposition: absolute;\n\tleft: 5px;\n\tright: 5px;\n\ttop: 40px;\n\tbottom: 5px;\n\toverflow: hidden;\n\tclear: both;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Angular Report Viewer in HTML\nDESCRIPTION: Example showing how to configure the report viewer options using HTML markup with various attributes like reportSource, serviceUrl, viewMode, and keepClientAlive.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/options.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"reportSource\"\n\t[serviceUrl]=\"serviceUrl\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Error Message for Missing Assembly Reference in Telerik Reporting\nDESCRIPTION: This code snippet shows the error message that appears when the Telerik.Reporting.WebServiceDataSource assembly is missing. The error occurs when trying to preview a report that uses the JsonDataSource component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/missing-assembly-reference-when-using-jsondatasource.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe data provider of type 'Telerik.Reporting.Processing.WebServiceDataSource.JsonDataProvider, Telerik.Reporting.WebServiceDataSource, Version={{site.buildversion}}, Culture=neutral, PublicKeyToken=a9d7983dfcc261be' defined for data sources of type 'Telerik.Reporting.JsonDataSource' cannot be resolved. Are you missing an assembly reference?\n```\n\n----------------------------------------\n\nTITLE: jQuery Reference\nDESCRIPTION: Adding jQuery library reference required for the report viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/manual-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Picture Watermark Programmatically in C# and VB.NET\nDESCRIPTION: This code shows how to programmatically add a picture watermark to a report by creating a PictureWatermark instance, configuring its Image, Sizing, Opacity, and Position properties, and adding it to the report's PageSettings.Watermarks collection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/rendering-and-paging/watermarks.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nReport report = new Report();\n\n// Create a new PictureWatermark\nPictureWatermark pictureWatermark = new PictureWatermark();\n\n// Set the properties\npictureWatermark.Image = \"=Resources.logo\";\npictureWatermark.Sizing = PictureWatermarkSizing.ScaleProportional;\npictureWatermark.Opacity = 0.2;\npictureWatermark.Position = WatermarkPosition.Front;\npictureWatermark.PrintOnFirstPage = true;\npictureWatermark.PrintOnLastPage = true;\n\n// Add the watermark to the Watermarks collection\nreport.PageSettings.Watermarks.Add(pictureWatermark);\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim report As New Report()\n\n' Create a new PictureWatermark\nDim pictureWatermark As New PictureWatermark()\n\n' Set the properties\npictureWatermark.Image = \"=Resources.logo\"\npictureWatermark.Sizing = PictureWatermarkSizing.ScaleProportional\npictureWatermark.Opacity = 0.2\npictureWatermark.Position = WatermarkPosition.Front\npictureWatermark.PrintOnFirstPage = True\npictureWatermark.PrintOnLastPage = True\n\n' Add the watermark to the Watermarks collection\nreport.PageSettings.Watermarks.Add(pictureWatermark)\n```\n\n----------------------------------------\n\nTITLE: Conditional Border Style Expression for Triangle Matrix in Telerik Reporting\nDESCRIPTION: This expression sets the border style for cells in a Crosstab control based on whether the cell has content. It displays borders only for cells that are part of the triangle matrix by checking if the value is null or empty.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/display-triangle-matrix-table-design-telerik-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\n= (Fields.Value is Null) Or (Fields.Value = \"\") ? \"None\" : \"Solid\"\n```\n\n----------------------------------------\n\nTITLE: Telerik Licensing Warning Example\nDESCRIPTION: This code snippet displays the warnings that will appear in the build log when a license file is missing, expired, or invalid, including the locations where the system searches for the license and a link to activate a license key.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/licensing/license-errors-and-warnings.md#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"Telerik and Kendo UI Licensing warning TKL002: No Telerik and Kendo UI License file found.\n    Telerik and Kendo UI Licensing warning TKL002: The following locations were searched:\n    Telerik and Kendo UI Licensing warning TKL002:  * TELERIK_LICENSE (EnvironmentVariable)\n    Telerik and Kendo UI Licensing warning TKL002:  * KENDO_UI_LICENSE (EnvironmentVariable)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\Telerik Reporting 2025 Q1\\Examples\\CSharp\\.NET 6\\WinFormsIntegrationDemo\\telerik-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\Telerik Reporting 2025 Q1\\Examples\\CSharp\\.NET 6\\WinFormsIntegrationDemo\\kendo-ui-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\Telerik Reporting 2025 Q1\\Examples\\CSharp\\.NET 6\\telerik-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\Telerik Reporting 2025 Q1\\Examples\\CSharp\\.NET 6\\kendo-ui-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\Telerik Reporting 2025 Q1\\Examples\\CSharp\\telerik-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\Telerik Reporting 2025 Q1\\Examples\\CSharp\\kendo-ui-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\Telerik Reporting 2025 Q1\\Examples\\telerik-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\Telerik Reporting 2025 Q1\\Examples\\kendo-ui-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\Telerik Reporting 2025 Q1\\telerik-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\Telerik Reporting 2025 Q1\\kendo-ui-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\telerik-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\Progress\\kendo-ui-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\telerik-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Program Files (x86)\\kendo-ui-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\telerik-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\kendo-ui-license.txt (RecursiveFilePath)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Users\\user1\\AppData\\Roaming\\Telerik\\telerik-license.txt (UserDirectory)\n    Telerik and Kendo UI Licensing warning TKL002:  * C:\\Users\\user1\\AppData\\Roaming\\Telerik\\kendo-ui-license.txt (UserDirectory)\n    Telerik and Kendo UI Licensing warning TKL002: Activate a License Key file at https://prgress.co/3PBSVoC\n    Telerik and Kendo UI Licensing warning TKL101: Telerik Reporting is not listed in your current license file.\n    Telerik and Kendo UI Licensing warning TKL004: Unable to locate licenses for all products.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Data Access Database Cache Provider in XML\nDESCRIPTION: XML configuration for the Telerik Data Access cache provider, which requires specifying the backend name and connection string. This provider requires references to Telerik.OpenAccess.dll, Telerik.OpenAccess.35.Extensions.dll, and Telerik.OpenAccess.Runtime.dll.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/cache-management/configuring-the-database-cache-provider.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Telerik.Reporting>\n\t<Cache provider=\"Database\">\n\t\t<Providers>\n\t\t\t<Provider name=\"Database\">\n\t\t\t\t<Parameters>\n\t\t\t\t\t<Parameter name=\"BackendName\" value=\"mssql\" />\n\t\t\t\t\t<Parameter name=\"ConnectionString\" value=\"MyConnectionString\" />\n\t\t\t\t</Parameters>\n\t\t\t</Provider>\n\t\t</Providers>\n\t</Cache>\n</Telerik.Reporting>\n```\n\n----------------------------------------\n\nTITLE: Report Designer - Report Server Version Warning\nDESCRIPTION: This warning message indicates that the Telerik Reporting Standalone Report Designer supports a newer report definition schema version than the Telerik Report Server. It advises using the Report Designer provided with the Report Server to edit and publish changes, ensuring compatibility.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/issues-on-connecting-telerik-reporting-standalone-report-designer-to-telerik-report-server.md#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"This designer supports report definition schema vX.X+1 which is newer than vX.X supported by the Report Server. \\nIf you want to edit and publish the changes, you have to use the Report Designer that is provided with the Report Server.\"\n```\n\n----------------------------------------\n\nTITLE: TRDP Report XML Schema Modification Process\nDESCRIPTION: Steps to modify the XML schema version in a TRDP report definition, which is a ZIP archive containing the report definition and resources. Involves editing the definition.xml file directly within the archive.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/open-reports-that-use-newer-xml-schema.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Open TRDP file with archive utility (e.g., 7Zip)\n2. Locate and edit definition.xml\n3. Update xmlns attribute with compatible schema version\n4. Save changes directly in the archive\n```\n\n----------------------------------------\n\nTITLE: Configuring Send Email Dialog Settings in Blazor Report Viewer\nDESCRIPTION: Complete example showing how to configure the Send Email Dialog settings including From, To, CC, Subject, Body and Format options.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/send-mail-message.md#2025-04-21_snippet_1\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer\n\tServiceUrl=\"/api/reports\"\n\t@bind-ReportSource=\"@ReportSource\"\n\tEnableSendEmail=\"true\">\n\t<ReportViewerSettings>\n\t\t<SendEmailDialogSettings\n\t\t\tFrom=\"from@mail.com\"\n\t\t\tTo=\"to@mail.com\"\n\t\t\tCc=\"Cc\"\n\t\t\tSubject=\"\"\n\t\t\tBody=\"\"\n\t\t\tFormat=\"CSV\">\n\t\t</SendEmailDialogSettings>\n\t</ReportViewerSettings>\n</ReportViewer>\n```\n\n----------------------------------------\n\nTITLE: Merging Theme Resources in Window Resources for WPF Report Viewer\nDESCRIPTION: Alternative approach for merging theme resources in the Window that contains the WPF Report Viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/wpf-application/how-to-add-report-viewer-to-a-wpf-.net-core-project.md#2025-04-21_snippet_1\n\nLANGUAGE: XAML\nCODE:\n```\n<Window.Resources>\n    <ResourceDictionary>\n        <ResourceDictionary.MergedDictionaries>\n            <ResourceDictionary Source=\"/Telerik.ReportViewer.Wpf.Themes;component/Common/Themes/Light/System.Windows.xaml\" />\n            <ResourceDictionary Source=\"/Telerik.ReportViewer.Wpf.Themes;component/Common/Themes/Light/Telerik.Windows.Controls.xaml\" />\n            <ResourceDictionary Source=\"/Telerik.ReportViewer.Wpf.Themes;component/Common/Themes/Light/Telerik.Windows.Controls.Navigation.xaml\" />\n            <ResourceDictionary Source=\"/Telerik.ReportViewer.Wpf.Themes;component/Common/Themes/Light/Telerik.Windows.Controls.Input.xaml\" />\n            <ResourceDictionary Source=\"/Telerik.ReportViewer.Wpf.Themes;component/Common/Themes/Light/Telerik.ReportViewer.Wpf.xaml\" />\n        </ResourceDictionary.MergedDictionaries>\n    </ResourceDictionary>\n</Window.Resources>\n```\n\n----------------------------------------\n\nTITLE: Resetting Visual Studio Toolbox - Removing ComponentModelCache folder\nDESCRIPTION: Deletes the ComponentModelCache folder from the Visual Studio instance folder. This cache stores information about components and deleting it forces Visual Studio to rebuild the cache, which can resolve issues with the toolbox.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n\"%localappdata%\\Microsoft\\VisualStudio\\16.0_[InstanceID]\"\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll Mode Button for Desktop (Font Awesome Template)\nDESCRIPTION: HTML code to add the Scroll Mode button to the main menu for desktop screens using the Font Awesome template. This snippet should be inserted into the 'ul' element with the 'trv-main-menu-ul' id attribute.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-show-the-page-scroll-mode-button.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<li aria-label=\"ariaLabelMenuContinuousScroll\"><a data-command=\"telerik_ReportViewer_pageMode\" title=\"menuContinuousScrollTitle\" href=\"#\"><i class=\"fa fa-angle-double-down icon-angle-double-down\"></i></a></li>\n```\n\n----------------------------------------\n\nTITLE: Registering ReportViewer HTTP Handler in Web.config for IIS7 Integrated Mode\nDESCRIPTION: This XML snippet shows how to properly register the Telerik.ReportViewer HTTP handler in the web.config file for IIS7 running in integrated mode. It includes the necessary attributes and the preCondition for integrated mode.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/troubleshooting-runtime-my-asp-net-web-forms-reportviewer-looks-messed-up-its-styles-and-images-are-missing.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<add \n\tname=\"Telerik.ReportViewer.axd_*\" \n\ttype=\"Telerik.ReportViewer.WebForms.HttpHandler, Telerik.ReportViewer.WebForms, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" \n\tpath=\"Telerik.ReportViewer.axd\" verb=\"*\" \n\tpreCondition=\"integratedMode\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Reinstall Telerik Reporting - VS 2017/2019\nDESCRIPTION: This command reinstalls Telerik Reporting specifically for Visual Studio 2017 and 2019, addressing potential registration issues. The `PRODUCTDIR` parameter specifies the Visual Studio installation directory.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-value-cannot-be-null-parameter-name-instance-vs2017-report-designer.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n\"msiexec /i [installer_file_name].msi PRODUCTDIR=\\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\[version]\\\\[edition]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Updated Angular Template with Bound Function\nDESCRIPTION: Modified HTML template using the bound function approach for event handling\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/angular-component-properties-in-viewer-events.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div *ngIf=\"isReportRendered\">Report has been rendered!</div>\n<tr-viewer #viewer1\n\t...\n\t[renderingEnd]=\"boundReportRendered\">\n</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Accessing Report Items from Events in VB.NET\nDESCRIPTION: This snippet demonstrates how to access a TextBox item from within the ItemDataBinding event handler of a report's detail section using the ElementTreeHelper.GetChildByName() method. It focuses on using Processing.TextBox during report processing instead of defining report items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/access-report-items-programmatically.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\n' Example code snippet for accessing report items from events in VB.NET\n' This is a placeholder for the actual code.\n```\n\n----------------------------------------\n\nTITLE: Exporting Report to PDF\nDESCRIPTION: Exports a specific report to PDF format by providing report ID and optional parameter values\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/export-a-report-from-telerik-report-server-via-dot-net-client.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic async Task<string> ExportReportAsync(string path, string format, string reportId, string parameterValuesJSONSerieliazed)\n{\n    var data = new { ReportId = reportId, Format = format, ParameterValues = parameterValuesJSONSerieliazed };\n    HttpResponseMessage response = await client.PostAsJsonAsync(path, data);\n    response.EnsureSuccessStatusCode();\n\n    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();\n    dynamic result = serializer.DeserializeObject(response.Content.ReadAsStringAsync().Result);\n    return result[\"DocumentId\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Section Children in VB.NET for Telerik Reporting\nDESCRIPTION: This snippet shows how to access all children of a detail section in a Telerik report using VB.NET and set a background color for each child element. It emphasizes using the appropriate interfaces for accessing children.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/program-the-report-definition/report-events/using-section-events.md#2025-04-21_snippet_3\n\nLANGUAGE: VB.NET\nCODE:\n```\nPrivate Sub Detail_ItemDataBound(sender As Object, e As EventArgs)\n    ' Get reference to the section object\n    Dim section As Telerik.Reporting.Processing.ReportSection = CType(sender, Telerik.Reporting.Processing.ReportSection)\n    ' Loop through all children and set BackgroundColor\n    For Each child In section.Children\n        child.Style.BackgroundColor = Color.LightGray\n    Next\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Setting DocumentMapText Property in C#\nDESCRIPTION: Example of setting the DocumentMapText property for a report item to add it to the document map. This property can be set to static text or an expression that evaluates to text.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/document-map.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nreportItem.DocumentMapText = \"Product Catalog\";\n```\n\n----------------------------------------\n\nTITLE: Error Message for Npgsql GlobalTypeMapper Initialization Exception\nDESCRIPTION: This code snippet shows the error message that occurs when the Npgsql GlobalTypeMapper fails to initialize. The error is caused by an implementation issue in the Npgsql.NpgsqlBinaryExporter type.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/the-type-initializer-npgsql-globaltypemapper-threw-exception.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.TypeInitializationException: The type initializer for 'Npgsql.TypeMapping.GlobalTypeMapper' threw an exception\n\nMethod 'DisposeAsync' in type 'Npgsql.NpgsqlBinaryExporter' from assembly 'Npgsql, Version=4.1.3.1, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7' does not have an implementation.\":\"Npgsql.NpgsqlBinaryExporter\"} | System.Exception {System.TypeLoadException}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Category Data in Telerik Reporting\nDESCRIPTION: Example showing how to reference a simple field value in a detail row using Telerik Reporting expression syntax.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/table-crosstab-list/basic-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n=Fields.ProductCategory\n```\n\n----------------------------------------\n\nTITLE: Implementing updateUI Event in Angular Report Viewer\nDESCRIPTION: Demonstrates how to handle the updateUI event which fires when the viewer state changes. Uses a basic report viewer configuration with interactive view mode.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/api-reference/events.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<reporting-angular-viewer\n\t#viewer\n\t[reportSource]=\"{\n\t\treport: 'Dashboard.trdx', \n\t\tparameters: { ReportYear: 2004 }\n\t}\"\n\t[serviceUrl]=\"'https://demos.telerik.com/reporting/api/reports'\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\"\n\t(updateUI)=\"updateUI()\">\n</reporting-angular-viewer>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, ViewChild } from '@angular/core';\nimport { ReportingAngularViewerComponent } from '@progress/telerik-angular-native-report-viewer'\n\t\n\t@Component({\n\t\tselector: 'app-root',\n\t\ttemplateUrl: './app.component.html',\n\t\tstyleUrls: ['./app.component.scss']\n\t})\n\t\n\texport class AppComponent {\n\t\ttitle = 'Native Angular Report Viewer Demo';\n\t\n\t\t@ViewChild('viewer') public viewer!: ReportingAngularViewerComponent;\n\n\t\tupdateUI() {\n\t\t\tconsole.log(\"This event handler will be called when the state of the viewer changes.\");\n\t\t};\n\t}\n```\n\n----------------------------------------\n\nTITLE: Registering SafeControl Entries in web.config\nDESCRIPTION: XML configuration to declare Telerik Reporting assemblies as safe controls in SharePoint, allowing their usage without security restrictions\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/deploying-web-reportviewer-in-sharepoint.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<SafeControl Assembly=\"Telerik.Reporting, Version=x.x.x.xxxx, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" Namespace=\"Telerik.Reporting\" TypeName=\"*\" Safe=\"True\" />\n<SafeControl Assembly=\"Telerik.ReportViewer.WebForms, Version=x.x.x.xxxx, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" Namespace=\"Telerik.ReportViewer\" TypeName=\"*\" Safe=\"True\" />\n```\n\n----------------------------------------\n\nTITLE: Error Message for Invalid SystemColors in .NET Standard\nDESCRIPTION: This error occurs when trying to use color names from the SystemColors class in a Telerik Reporting project using .NET Standard. The error message indicates that the color name cannot be converted to a valid Int32 value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/systemcolors-are-not-valid-in-dot-net-core.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n'ControlText' is not a valid value for Int32.\n```\n\n----------------------------------------\n\nTITLE: Configuring Nullable Setting in Project XML\nDESCRIPTION: XML configuration to set the Nullable setting to 'warnings' in the project's .csproj file as a workaround.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/could-not-retrieve-information-for-folder-web-designer.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<Nullable>warnings</Nullable>\n```\n\n----------------------------------------\n\nTITLE: Setting ReportSource in HTML5 WebForms Viewer - VB.NET\nDESCRIPTION: Example showing how to properly initialize and set the ReportSource property for HTML5 WebForms Report Viewer using VB.NET. The code demonstrates setting the IdentifierType and Identifier properties within a Page_Load event handler.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/cannot-implicitly-convert-type-telerik.reporting.xxxreportsource-to-telerik.reportviewer_html5.webforms.reportsource-error.md#2025-04-21_snippet_1\n\nLANGUAGE: VB.NET\nCODE:\n```\nProtected Sub Page_Load(sender As Object, e As EventArgs)\n\tIf Not IsPostBack Then\n\t\tDim reportSource As New Telerik.ReportViewer.Html5.WebForms.ReportSource()\n\t\treportSource.IdentifierType = Telerik.ReportViewer.Html5.WebForms.IdentifierType.UriReportSource\n\t\treportSource.Identifier = \"Report1.trdp\"\n\t\treportViewer1.ReportSource = reportSource\n\tEnd If\nEnd Sub\n```\n\n----------------------------------------\n\nTITLE: LoadImage User Function Implementation\nDESCRIPTION: Shows how to implement a user function for loading images from relative paths by constructing the absolute path.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/picturebox.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static Image LoadImage(string imageLocation)\n{\n\tstring absoluteLocation = \"C:\\\\\" + imageLocation;\n\treturn Image.FromFile(absoluteLocation);\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Shared Function LoadImage(imageLocation As String) As Image\n\tDim absoluteLocation As String = \"C:\\\" + imageLocation\n\tReturn Image.FromFile(absoluteLocation)\nEnd Function\n```\n\n----------------------------------------\n\nTITLE: Defining Cars Collection Class - C#\nDESCRIPTION: This code snippet defines the Cars class, which is a list type collection of Car objects. In its constructor, it initializes instances of Car with sample data for demonstration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/tools/objectdatasource-wizard.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Cars : List<Car>\n{\n\tpublic Cars()\n\t{\n\t\tCar car;\n\t\tcar = new Car(\"Honda\", \"NSX GT\", 2003, \"https://www.telerik.com/images/reporting/cars/NSXGT_7.jpg\"\n\t\t, new string[] { \"Black\", \"Red\", \"White\", \"Orange\" });\n\t\tthis.Add(car);\n\t\tcar = new Car(\"Nissan\", \"Skyline R34 GT-R\", 2005, \"https://www.telerik.com/images/reporting/cars/EVLR34_1.jpg\"\n\t\t, new string[] { \"Black\", \"White\" });\n\t\tthis.Add(car);\n\t\t...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ITextResources with Database-Driven Translations\nDESCRIPTION: Demonstrates implementing ITextResources interface using dynamic translations fetched from a database via SqlHelper.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/silverlight-application/report-viewer-localization.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomTextResources : Telerik.ReportViewer.Silverlight.ITextResources\n{\n\tpublic string AllFiles\n\t{\n\t\tget\n\t\t{\n\t\t\treturn SqlHelper.GetViewerKeyFromDb(TextResourcesEnum.AllFiles);\n\t\t}\n\t}\n\n\tpublic string BackToolTip\n\t{\n\t\tget\n\t\t{\n\t\t\treturn SqlHelper.GetViewerKeyFromDb(TextResourcesEnum.BackToolTip);\n\t\t}\n\t}\n\n\tpublic string CurrentPageToolTip\n\t{\n\t\tget\n\t\t{\n\t\t\treturn SqlHelper.GetViewerKeyFromDb(TextResourcesEnum.CurrentPageToolTip);\n\t\t}\n\t}\n\n\t//...... Implement the rest of the properties ......\n}\n```\n\nLANGUAGE: VB.NET\nCODE:\n```\nPublic Class CustomTextResources\n\tImplements Telerik.ReportViewer.Silverlight.ITextResources\n\n\tPublic ReadOnly Property AllFiles() As String Implements ReportViewer.Silverlight.ITextResources.AllFiles\n\t\tGet\n\t\t\tReturn SqlHelper.GetViewerKeyFromDb(TextResourcesEnum.AllFiles)\n\t\tEnd Get\n\tEnd Property\n\n\tPublic ReadOnly Property BackToolTip() As String Implements ReportViewer.Silverlight.ITextResources.BackToolTip\n\t\tGet\n\t\t\tReturn SqlHelper.GetViewerKeyFromDb(TextResourcesEnum.BackToolTip)\n\t\tEnd Get\n\tEnd Property\n\n\tPublic ReadOnly Property CurrentPageToolTip() As String Implements ReportViewer.Silverlight.ITextResources.CurrentPageToolTip\n\t\tGet\n\t\t\tReturn SqlHelper.GetViewerKeyFromDb(TextResourcesEnum.CurrentPageToolTip)\n\t\tEnd Get\n\tEnd Property\n\n\t'...... Implement the rest of the properties ......\nEnd Class\n```\n\n----------------------------------------\n\nTITLE: Setting Background Image for Custom Legend Markers in Telerik Reporting\nDESCRIPTION: Use the LegendItem.MarkStyle.BackgroundImage property to set a transparent PNG image as the custom marker shape for Graph legend items. This allows the default series color to show through the transparent areas.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-custom-shaped-marker-for-graph-s-legend-items.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nLegendItem.MarkStyle.BackgroundImage\n```\n\n----------------------------------------\n\nTITLE: Adding CSS to Restore Missing Kendo Treeview Icons in Document Map Area\nDESCRIPTION: This CSS snippet defines the necessary styles to restore the expand and collapse icons in the Kendo treeview used in the Document Map Area. It uses content character codes to display the appropriate icons for both states of the treeview nodes.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/document-map-missing-icons.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.k-treeview .k-plus:before,\n.k-i-expand:before { content: \"\\e005\"; }\n\n.k-treeview .k-minus:before,\n.k-i-collapse:before { content: \"\\e001\"; }\n```\n\n----------------------------------------\n\nTITLE: Project Configuration for Resource Files (.csproj)\nDESCRIPTION: Configure project file to generate designer files for resource files and mark them as embedded resources\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/customizing/localization.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup>\n\t<Compile Update=\"Resources\\Messages.Designer.cs\">\n\t\t<DesignTime>True</DesignTime>\n\t\t<AutoGen>True</AutoGen>\n\t\t<DependentUpon>Messages.resx</DependentUpon>\n\t</Compile>\n</ItemGroup>\n\n<ItemGroup>\n\t<EmbeddedResource Update=\"Resources\\Messages.resx\">\n\t\t<Generator>PublicResXFileCodeGenerator</Generator>\n\t\t<LastGenOutput>Messages.Designer.cs</LastGenOutput>\n\t</EmbeddedResource>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling DataDirect ODBC Drivers via CLI (Command Line)\nDESCRIPTION: Example of using the command-line interface to uninstall 32-bit SQL Server and Oracle drivers. The command specifies the uninstallation mode, platform, drivers to uninstall, and a success token.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/datadirect-odbc-drivers.md#2025-04-21_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n/mode uninstall /platform x86 /drivers \"SQLS,ORA\" /successToken \"OK\"\n```\n\n----------------------------------------\n\nTITLE: Including jQuery UI Library for Custom Tooltips\nDESCRIPTION: HTML code to include jQuery UI library and its CSS styles from CDN, enabling custom tooltip implementation with jQuery UI instead of Kendo UI.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/styling-tooltips-in-html5-based-report-viewers.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.13.0/themes/base/jquery-ui.css\">\n\t<script src=\"https://code.jquery.com/ui/1.13.0/jquery-ui.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration HTML Table\nDESCRIPTION: HTML table showing the affected product environment details including the product name, version, and affected report viewers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/old-webforms-viewer-cannot-display-list-items.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Product</td>\n\t\t\t<td>Progress® Telerik® Reporting</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Version</td>\n\t\t\t<td>Q2 2012 and later</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Report Viewers</td>\n\t\t\t<td>Legacy ASP.NET WebForms Viewer</td>\n\t\t</tr>\n\t</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Reporting Service Reference in SVC File\nDESCRIPTION: This XML snippet creates a service host file (ReportService.svc) that references the Telerik.Reporting.Service.ReportService class. The version number (x.x.x.x) should be replaced with the actual assembly version being used.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/telerik-reporting-wcf-service/how-to-add-telerik-reporting-wcf-service-to-web-application.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<%@ServiceHost Service=\"Telerik.Reporting.Service.ReportService, Telerik.Reporting.Service, Version=x.x.x.x, Culture=neutral, PublicKeyToken=A9D7983DFCC261BE\" %>\n```\n\n----------------------------------------\n\nTITLE: Example Location Provider Reference\nDESCRIPTION: Reference to the MapQuestOpenAPILocationProvider class in the Telerik.Reporting namespace\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/map/structure/location-providers.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`MapQuestOpenAPILocationProvider`\n```\n\n----------------------------------------\n\nTITLE: Report Viewer Style Configuration\nDESCRIPTION: CSS styling to make the report viewer fill the browser window\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n\t\t#reportViewer1 {\n\t\t\tposition: absolute;\n\t\t\tleft: 5px;\n\t\t\tright: 5px;\n\t\t\ttop: 5px;\n\t\t\tbottom: 5px;\n\t\t\toverflow: hidden;\n\t\t}\n\t</style>\n```\n\n----------------------------------------\n\nTITLE: Setting SubReport Height to Zero\nDESCRIPTION: This implementation detail specifies setting the height of the SubReport item to zero in the main report. This prevents the SubReport from taking up space when it does not have any content to display, effectively hiding it from the report layout.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/hide-sub-report-if-there-is-no-data.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nSubReportItem.Height = new Telerik.Reporting.Drawing.Unit(0);\n```\n\n----------------------------------------\n\nTITLE: Initializing Report Parameter Values in Telerik Reporting Silverlight Viewer CSharp\nDESCRIPTION: This code snippet demonstrates how to initialize report parameter values using the RenderBegin event in a Silverlight application. The parameters 'ProductCategory' and 'ProductSubcategory' are set programmatically before the report rendering begins. The snippet illustrates the implementation of the RenderBegin event handler and the setting of both single and multi-value parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/programmatic-initialization-of-report-parameter-values-in-telerik-reporting-silverlight-viewer.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\npublic MainPage() {\n\tInitializeComponent();\n\tthis.ReportViewer1.RenderBegin += new RenderBeginEventHandler(ReportViewer1_RenderBegin);\n}\n\nvoid ReportViewer1_RenderBegin(object sender, RenderBeginEventArgs args) {\n\t//single value parameter\n\targs.ParameterValues[\"ProductCategory\"] = \"Components\";\n\t//multi value parameter\n\targs.ParameterValues[\"ProductSubcategory\"] = new object[] { \"Brakes\", \"Chains\" };\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Control Characters in GS1-128 Barcode - CSharp\nDESCRIPTION: This snippet illustrates how to include the FNC1 control character in a GS1-128 barcode value in C#. The control character is used to separate different parts within the barcode to adhere to the GS1 specification.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/barcode/1d-barcodes/1d-specifications.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nthis.Barcode1.Value = \"1234\" + \"\\u00F7\" + \"5678\";\n```\n\n----------------------------------------\n\nTITLE: Querying AdventureWorks Database for Contacts\nDESCRIPTION: SQL query to select contacts with additional contact information from the AdventureWorks database.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/how-to-use-the-reportitem.dataobject-property-in-expressions.md#2025-04-21_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nselect Contact.*\n\tfrom Person.Contact\n\twhere Contact.AdditionalContactInfo is not null\n```\n\n----------------------------------------\n\nTITLE: Inserting Control Characters in Code128 Barcode - CSharp\nDESCRIPTION: This snippet demonstrates how to insert the FNC4 control character within a Code128 barcode value in C#. The character is expressed as a Unicode escape sequence to meet specific specification requirements.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/barcode/1d-barcodes/1d-specifications.md#2025-04-21_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\nthis.Barcode1.Value = \"ABCD\" + \"\\u00FA\" + \"1234\";\n```\n\n----------------------------------------\n\nTITLE: Applying IsVisible Attribute to User Functions in C#\nDESCRIPTION: Demonstrates how to use the IsVisible attribute to control the visibility of user functions in the Edit Expression dialog.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/extending-expressions/user-functions.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static class UserFunctions\n{\n    [Function(IsVisible = true)]\n    public static string VisibleFunction()\n    {\n        return \"This function will be visible in the Edit Expression dialog\";\n    }\n\n    [Function(IsVisible = false)]\n    public static string InvisibleFunction()\n    {\n        return \"This function will NOT be visible in the Edit Expression dialog\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: jQuery Version Requirements\nDESCRIPTION: jQuery version requirements for Angular Report Viewer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q3.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n^1.10.0 || ^2.2.0 || ^3.7.0\n```\n\n----------------------------------------\n\nTITLE: Assigning Report to Windows Forms Report Viewer with InstanceReportSource in C#\nDESCRIPTION: Demonstrates how to assign a report to WinForms report viewer using InstanceReportSource in C#.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-migrate-your-project-to-utilize-the-new-reportsource-objects.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nReport1 report1 = new Report1();\n// perform additional operations on the report object if needed            `\nTelerik.Reporting.InstanceReportSource instanceReportSource = new  Telerik.Reporting.InstanceReportSource();\ninstanceReportSource.ReportDocument = report1;\nthis.ReportViewer1.ReportSource = instanceReportSource;\n```\n\n----------------------------------------\n\nTITLE: Successful Response from Session Timeout Request\nDESCRIPTION: A successful response (HTTP 200 OK) from the client session timeout request. The response body contains a JSON object with the clientSessionTimeout value in seconds (in this example, 900 seconds or 15 minutes).\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/clients-api/get-clients-session-timeout-seconds.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n\n{\"clientSessionTimeout\": 900}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Layout Structure\nDESCRIPTION: Shows the basic HTML structure for the layout page\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-mvc-report-viewer/manual-setup.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>Demo</title>\n\t\t<meta charset=\"utf-8\" />\n```\n\n----------------------------------------\n\nTITLE: Installing DataDirect ODBC Drivers via CLI (Command Line)\nDESCRIPTION: Example of using the command-line interface to install 32-bit SQL Server and Oracle drivers to a specific path. The command specifies the installation mode, target path, platform, drivers to install, and a success token.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/datadirect-odbc-drivers.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n/mode install /targetpath \"C:\\Program Files\\Progress\\Telerik Reporting ODBC Drivers\" /platform x86 /drivers \"SQLS,ORA\" /successToken \"OK\"\n```\n\n----------------------------------------\n\nTITLE: Marking a Class as a Data Object in C#\nDESCRIPTION: This C# code snippet demonstrates how to mark a class, `Cars`, as a data object using the `DataObjectAttribute`. This attribute is useful for distinguishing types appropriate for data binding from regular ones within the ObjectDataSource Wizard.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/desktop-designers/tools/data-source-wizards/objectdatasource-wizard.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\t\t````C#\n[System.ComponentModel.DataObject()]\n\t\tpublic class Cars : List<Car>;\n\t\t{\n\t\t\t....\n\t\t}\n````\n```\n\n----------------------------------------\n\nTITLE: Browser Console Kendo Loading Error\nDESCRIPTION: Error message shown in the browser console indicating Kendo failed to load automatically due to jQuery slim build issues.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-viewer-does-not-load-with-jquery-slim.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nKendo could not be loaded automatically. Make sure 'options.serviceUrl' / 'options.reportServer.url' is correct and accessible.\nThe error is: undefined\n```\n\n----------------------------------------\n\nTITLE: Using AddDays Function in Telerik Reporting\nDESCRIPTION: The `AddDays` function returns a new DateTime that adds the specified number of days to the value of the specified date. It takes a date and a number of days as input and returns a new DateTime object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_8\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=AddDays(Now(), 3)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Parameters in WebServiceDataSource (C#)\nDESCRIPTION: Shows how to set up query parameters that are automatically concatenated to the Service URL. The example uses an Action method with two parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/webservicedatasource-component/using-parameters-with-the-webservicedatasource-component.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nhttp://localhost:50160/api/data/GetWithQueryParameters\n```\n\n----------------------------------------\n\nTITLE: Registering SqlClientFactory in Web Report Viewer Controller\nDESCRIPTION: Code demonstrating how to register the Microsoft.Data.SqlClient provider factory in a Web Report Viewer controller for SQL Server connections.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-data-providers/using-microsoft-data-sqlclient-data-proivder.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Route(\"api/reports\")]\npublic class ReportsController : ReportsControllerBase\n{\n    static ReportsController()\n    {\n        Telerik.Reporting.Processing.Data.DbProviderFactories.RegisterFactory(\"Microsoft.Data.SqlClient\", Microsoft.Data.SqlClient.SqlClientFactory.Instance);\n    }\n    public ReportsController(IReportServiceConfiguration reportServiceConfiguration)\n        : base(reportServiceConfiguration)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Report Viewer View Mode in JavaScript\nDESCRIPTION: Demonstrates how to get the current view mode of a report viewer by accessing the telerik_ReportViewer data method. Returns a string representing the view mode configuration.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-report-viewer/api-reference/reportviewer/methods/viewmode().md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar reportViewer = $(\"#reportViewer1\").data(\"telerik_ReportViewer\");\nvar vm = reportViewer.viewMode();\n```\n\n----------------------------------------\n\nTITLE: Using Environment Object in Telerik Reporting Expressions\nDESCRIPTION: Demonstrates how to use the Environment object in Telerik Reporting expressions. This object provides information about the operating system and graphics engine.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/global-objects.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nSwitch(Environment.GraphicsEngine, GraphicsEngine.Gdi, \"Using GDI\", GraphicsEngine.Skia, \"Using Skia\", \"N\\A\")\n```\n\n----------------------------------------\n\nTITLE: React Viewer Dependencies\nDESCRIPTION: Lists required dependencies for the React Report Viewer including versions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q2.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* React (__16.8.6__ or later)\n* React-DOM (__16.8.6__ or later)\n* jQuery (__3.2.1__)\n```\n\n----------------------------------------\n\nTITLE: Removing Registry Keys for ToolboxControlsInstaller\nDESCRIPTION: This step involves using the Registry Editor (regedit.exe) to locate and delete specific registry keys related to the ToolboxControlsInstaller. This action clears cached information and settings that might be causing the Toolbox issues.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"HKEY_CURRENT_USER\\Software\\Microsoft\\VisualStudio\\10.0\\ToolboxControlsInstaller_AssemblyFoldersExCache\"\n```\n\nLANGUAGE: text\nCODE:\n```\n\"HKEY_CURRENT_USER\\Software\\Microsoft\\VisualStudio\\10.0\\ToolboxControlsInstallerCache\"\n```\n\n----------------------------------------\n\nTITLE: Using Adobe JavaScript to Show Bookmarks Pane in PDF\nDESCRIPTION: JavaScript code that executes when the PDF is opened to display the bookmarks pane automatically. This is added to the PDF file through Telerik Reporting's device settings.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-expand-the-pdf-reader-s-bookmarks-pane-on-opening-a-pdf-file-produced-by-telerik-reporting.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\napp.execMenuItem('ShowHideBookmarks')\n```\n\n----------------------------------------\n\nTITLE: Data Source Configuration UI String Constants - JavaScript\nDESCRIPTION: Defines UI string constants for a data source configuration wizard, including messages for SQL, JSON, CSV and Web Service data sources. Contains text for buttons, headers, validation messages, and configuration options.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/localizing-the-web-report-designer.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.QuitWizardDialogueConfirmationMessage = \"Are you sure you want to quit data source configuration ?\";\nthis.QuitWizardButton = \"Quit wizard\";\nthis.CancelQuitWizardButton = \"Cancel\";\nthis.SQLDataConnectionHeader = \"Choose data connection\";\nthis.SQLExistingDataConnection = \"Select from existing data connections\";\nthis.SQLNewDataConnection = \"Build new data connections\";\nthis.SQLDataProvider = \"Data Provider\";\nthis.SQLConnectionString = \"Connection String\";\nthis.TestSqlConnection = \"Test connection\";\nthis.ConnectionError = \"Connection unsuccessful. Check the connection string and try again.\";\nthis.ConnectionSuccess = \"Connection successful.\";\n/* ... Additional string constants ... */\n```\n\n----------------------------------------\n\nTITLE: Configuring IIS7 Handler for Telerik Report Viewer\nDESCRIPTION: XML configuration for setting up the correct handler in IIS7 for the Telerik Report Viewer. This ensures proper loading of the stylesheet and other resources.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/the-styles-of-the-web-report-viewer-s-toolbar-are-messed-up.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<system.webServer>   \n    <handlers>   \n       <add name=\"Telerik.ReportViewer.axd_*\" path=\"Telerik.ReportViewer.axd\" verb=\"*\" type=\"Telerik.ReportViewer.WebForms.HttpHandler, Telerik.ReportViewer.WebForms, Version=x.x.x.x, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" preCondition=\"integratedMode\"   />   \n    </handlers>   \n    <validation validateIntegratedModeConfiguration=\"false\" />     \n</system.webServer>   \n```\n\n----------------------------------------\n\nTITLE: Registering Telerik ReportViewer Assembly in Master Page\nDESCRIPTION: XML directive for registering the Telerik ReportViewer WebForms assembly in a SharePoint master page, enabling the use of ReportViewer controls\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/deploying-web-reportviewer-in-sharepoint.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<%@ Register TagPrefix=\"telerik\" Namespace=\"Telerik.ReportViewer.WebForms\"\n        Assembly=\"Telerik.ReportViewer.WebForms, Version=x.x.x.xxxx, Culture=neutral, PublicKeyToken=a9d7983dfcc261be\" %>\n```\n\n----------------------------------------\n\nTITLE: Kendo UI Custom Build Command for Web Report Designer\nDESCRIPTION: Gulp command to create a custom Kendo UI build with specific widgets required for the Web Report Designer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngulp custom -c mvvm,button,buttongroup,combobox,dateinput,datepicker,datetimepicker,dropdowntree,grid,editor,filemanager,listbox,listview,menu,multiselect,panelbar,slider,splitter,tabstrip,tooltip,treeview,upload,window,touch,autocomplete,stepper\n```\n\n----------------------------------------\n\nTITLE: Configuring Telerik Report Designer Settings - XML Configuration\nDESCRIPTION: Complete XML configuration file for Telerik Report Designer that defines user settings, recent document history, connection strings, UI layout preferences, and various dialog window configurations. Includes settings for session persistence, server connections, and designer perspectives.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/change-recent-folders-listed-in-the-standalone-report-designer-open-menu.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <configSections>\n        <sectionGroup name=\"userSettings\" type=\"System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\">\n            <section name=\"Telerik.ReportDesigner.Settings\" type=\"System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" allowExeDefinition=\"MachineToLocalUser\" requirePermission=\"false\" />\n        </sectionGroup>\n    </configSections>\n    <userSettings>\n        <Telerik.ReportDesigner.Settings>\n            <setting name=\"Session\" serializeAs=\"Xml\">\n                <value>\n                    <UserSession />\n                </value>\n            </setting>\n            <setting name=\"ConnectionStrings\" serializeAs=\"Xml\">\n                <value>\n                    <UserConnectionStringCollection />\n                </value>\n            </setting>\n            <setting name=\"RecentFolders\" serializeAs=\"Xml\">\n                <value>\n                    <RecentFoldersList MaxSize=\"10\">\n                        <Item Time=\"Mon, 11 May 2020 20:18:27 GMT\" Path=\"C:\\Program Files (x86)\\Progress\\Telerik Reporting R1 2020\\Report Designer\\Examples\\\" />\n                        <Item Time=\"Mon, 11 May 2020 20:11:25 GMT\" Path=\"C:\\Program Files (x86)\\Progress\\Telerik Report Server\\Telerik.ReportServer.Web\\SampleReports\\\" />\n                    </RecentFoldersList>\n                </value>\n            </setting>\n            <setting name=\"RecentDocuments\" serializeAs=\"Xml\">\n                <value>\n                    <RecentDocumentList MaxSize=\"10\">\n                        <Item Time=\"Mon, 11 May 2020 20:18:27 GMT\" Path=\"C:\\Program Files (x86)\\Progress\\Telerik Reporting R1 2020\\Report Designer\\Examples\\Dashboard.trdp\" />\n                        <Item Time=\"Mon, 11 May 2020 20:11:25 GMT\" Path=\"C:\\Program Files (x86)\\Progress\\Telerik Report Server\\Telerik.ReportServer.Web\\SampleReports\\Employee Sales Summary.trdp\" />\n                        <Item Time=\"Mon, 11 May 2020 19:44:43 GMT\" Path=\"C:\\Program Files (x86)\\Progress\\Telerik Report Server\\Telerik.ReportServer.Web\\SampleReports\\Dashboard.trdp\" />\n                        <Item Time=\"Thu, 07 May 2020 23:53:42 GMT\" Path=\"C:\\Users\\[USER_NAME]\\Downloads\\Report1.trdp\" />\n                        <Item Time=\"Wed, 06 May 2020 21:37:54 GMT\" Path=\"D:\\dev\\repos\\support\\reporting\\tickets\\1464699\\src\\TWA.SaveReportOnLoad\\Reports\\Products.trdp\" />\n                        <Item Time=\"Wed, 06 May 2020 14:40:36 GMT\" Path=\"D:\\dev\\repos\\support\\reporting\\tickets\\1464699\\src\\TWA.SaveReportOnLoad\\Reports\\Dashboard.trdp\" />\n                        <Item Time=\"Tue, 05 May 2020 18:56:01 GMT\" Path=\"D:\\dev\\repos\\support\\reporting\\tickets\\1464693\\src\\MSWA.AngularReportViewer\\wwwroot\\Reports\\Dashboard.trdp\" />\n                        <Item Time=\"Tue, 05 May 2020 16:48:04 GMT\" Path=\"D:\\dev\\repos\\support\\reporting\\tickets\\1464677\\src\\CandleStickGraph.trdp\" />\n                        <Item Time=\"Fri, 01 May 2020 13:02:32 GMT\" Path=\"C:\\Users\\[USER_NAME]\\Downloads\\SupportSample\\src\\MainReport.trdp\" />\n                    </RecentDocumentList>\n                </value>\n            </setting>\n            <setting name=\"KnownServers\" serializeAs=\"Xml\">\n                <value>\n                    <KnownServersList MaxSize=\"10\" />\n                </value>\n            </setting>\n            <setting name=\"PersistSession\" serializeAs=\"String\">\n                <value>Never</value>\n            </setting>\n            <setting name=\"UpgradeRequired\" serializeAs=\"String\">\n                <value>False</value>\n            </setting>\n            <setting name=\"PerspectiveDefault\" serializeAs=\"String\">\n                <value>IVByb3BlcnR5QnJvd3NlclRvb2xXaW5kb3cuVmlzaWJsZQMAAAAAIFJlcG9ydEV4cGxvcmVyVG9vbFdpbmRvdy5WaXNpYmxlAwAAAAAeRGF0YUV4cGxvcmVyVG9vbFdpbmRvdy5WaXNpYmxlAwAAAAAfR3JvdXBFeHBsb3JlclRvb2xXaW5kb3cuVmlzaWJsZQMAAAAA</value>\n            </setting>\n            <setting name=\"TelerikReportingDesignQueryDesignerFormSqlQueryDesignerView\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBlTcWxRdWVyeURlc2lnbmVyVmlldy5MZWZ0CQAAAPcEAAAYU3FsUXVlcnlEZXNpZ25lclZpZXcuVG9wCQAAAF0CAAAaU3FsUXVlcnlEZXNpZ25lclZpZXcuV2lkdGgJAAAAGAcAABtTcWxRdWVyeURlc2lnbmVyVmlldy5IZWlnaHQJAAAABAUAAA==</value>\n            </setting>\n            <setting name=\"TelerikReportingDataDesignSqlWizardSqlDataSourceWizardForm\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBhTcWxEYXRhU291cmNlV2l6YXJkLkxlZnQJAAAACAUAABdTcWxEYXRhU291cmNlV2l6YXJkLlRvcAkAAAA1AgAAGVNxbERhdGFTb3VyY2VXaXphcmQuV2lkdGgJAAAA1AkAABpTcWxEYXRhU291cmNlV2l6YXJkLkhlaWdodAkAAADrBAAA</value>\n            </setting>\n            <setting name=\"TelerikReportingDesignReportWizardLabelReportWizardForm\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBZMYWJlbFJlcG9ydFdpemFyZC5MZWZ0CQAAAAgFAAAVTGFiZWxSZXBvcnRXaXphcmQuVG9wCQAAADUCAAAXTGFiZWxSZXBvcnRXaXphcmQuV2lkdGgJAAAA8AQAABhMYWJlbFJlcG9ydFdpemFyZC5IZWlnaHQJAAAAzwQAAA==</value>\n            </setting>\n            <setting name=\"PerspectiveReportDesign\" serializeAs=\"String\">\n                <value>IVByb3BlcnR5QnJvd3NlclRvb2xXaW5kb3cuVmlzaWJsZQMAAAABIFJlcG9ydEV4cGxvcmVyVG9vbFdpbmRvdy5WaXNpYmxlAwAAAAEeRGF0YUV4cGxvcmVyVG9vbFdpbmRvdy5WaXNpYmxlAwAAAAEfR3JvdXBFeHBsb3JlclRvb2xXaW5kb3cuVmlzaWJsZQMAAAAB</value>\n            </setting>\n            <setting name=\"PerspectiveReportPreview\" serializeAs=\"String\">\n                <value />\n            </setting>\n            <setting name=\"TelerikReportingDesignGraphWizardScatterGraphWizardForm\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBdTY2F0dGVyR3JhcGhXaXphcmQuTGVmdAkAAAC1BwAAFlNjYXR0ZXJHcmFwaFdpemFyZC5Ub3AJAAAAhgEAABhTY2F0dGVyR3JhcGhXaXphcmQuV2lkdGgJAAAA8AQAABlTY2F0dGVyR3JhcGhXaXphcmQuSGVpZ2h0CQAAAA4FAAA=</value>\n            </setting>\n            <setting name=\"TelerikReportingGroupingCollectionEditor\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBNDb2xsZWN0aW9uRm9ybS5MZWZ0CQAAAOQAAAASQ29sbGVjdGlvbkZvcm0uVG9wCQAAAOQAAAAUQ29sbGVjdGlvbkZvcm0uV2lkdGgJAAAA1wIAABVDb2xsZWN0aW9uRm9ybS5IZWlnaHQJAAAAvwEAABZFeHByZXNzaW9uQ29sdW1uLldpZHRoCQAAALACAAA=</value>\n            </setting>\n            <setting name=\"TelerikReportingDesignCommonExpressionBuilderExpressionBuilderDialog\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBxFeHByZXNzaW9uQnVpbGRlckRpYWxvZy5MZWZ0CQAAABIFAAAbRXhwcmVzc2lvbkJ1aWxkZXJEaWFsb2cuVG9wCQAAAGABAAAdRXhwcmVzc2lvbkJ1aWxkZXJEaWFsb2cuV2lkdGgJAAAAygMAAB5FeHByZXNzaW9uQnVpbGRlckRpYWxvZy5IZWlnaHQJAAAAywMAABRzZWxlY3Rpb25QYW5lbC5XaWR0aAkAAACkAwAAFXNlbGVjdGlvblBhbmVsLkhlaWdodAkAAACQAQAAFmNhdGVnb3J5VHJlZVZpZXcuV2lkdGgJAAAADwEAABdjYXRlZ29yeVRyZWVWaWV3LkhlaWdodAkAAACQAQAAGGRlc2NyaXB0aW9uVGV4dEJveC5XaWR0aAkAAAAqAQAAGWRlc2NyaXB0aW9uVGV4dEJveC5IZWlnaHQJAAAAkAEAAA==</value>\n            </setting>\n            <setting name=\"TelerikReportingDesignStyleBuilderUI\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBVTdHlsZUJ1aWxkZXJGb3JtLkxlZnQJAAAA+QUAABRTdHlsZUJ1aWxkZXJGb3JtLlRvcAkAAADJAgAAFlN0eWxlQnVpbGRlckZvcm0uV2lkdGgJAAAADQMAABdTdHlsZUJ1aWxkZXJGb3JtLkhlaWdodAkAAACiAgAAC0luaXRpYWxQYWdlEgAAAAtMYXlvdXRQYW5lbBZVc2VyRGVmaW5lZENvbG9yVmFsdWVzEgAAAAA=</value>\n            </setting>\n            <setting name=\"TelerikReportingDesignBindingCollectionForm\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBxCaW5kaW5nQ29sbGVjdGlvbkVkaXRvci5MZWZ0CQAAAAoBAAAbQmluZGluZ0NvbGxlY3Rpb25FZGl0b3IuVG9wCQAAAAoBAAAdQmluZGluZ0NvbGxlY3Rpb25FZGl0b3IuV2lkdGgJAAAA1wIAAB5CaW5kaW5nQ29sbGVjdGlvbkVkaXRvci5IZWlnaHQJAAAAvwEAABlQcm9wZXJ0eSBwYXRoQ29sdW1uLldpZHRoCQAAALQAAAAWRXhwcmVzc2lvbkNvbHVtbi5XaWR0aAkAAAD8AQAA</value>\n            </setting>\n            <setting name=\"TelerikReportingSqlDataSourceParameterCollectionEditor\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBNDb2xsZWN0aW9uRm9ybS5MZWZ0CQAAAFYBAAASQ29sbGVjdGlvbkZvcm0uVG9wCQAAAFYBAAAUQ29sbGVjdGlvbkZvcm0uV2lkdGgJAAAA1wIAABVDb2xsZWN0aW9uRm9ybS5IZWlnaHQJAAAAvwEAABBOYW1lQ29sdW1uLldpZHRoCQAAAGQAAAASRGJUeXBlQ29sdW1uLldpZHRoCQAAAGQAAAARVmFsdWVDb2x1bW4uV2lkdGgJAAAA6AEAAA==</value>\n            </setting>\n            <setting name=\"TelerikReportingDataDesignCsvWizardCsvDataSourceWizardForm\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBhDc3ZEYXRhU291cmNlV2l6YXJkLkxlZnQJAAAAWwEAABdDc3ZEYXRhU291cmNlV2l6YXJkLlRvcAkAAAA7AgAAGUNzdkRhdGFTb3VyY2VXaXphcmQuV2lkdGgJAAAA8AQAABpDc3ZEYXRhU291cmNlV2l6YXJkLkhlaWdodAkAAACwBAAA</value>\n            </setting>\n            <setting name=\"TelerikReportingDesignControlsEditReportSourceDialog\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQB9FZGl0UmVwb3J0U291cmNlRGlhbG9nQmFzZS5MZWZ0CQAAAKIBAAAeRWRpdFJlcG9ydFNvdXJjZURpYWxvZ0Jhc2UuVG9wCQAAAKIBAAAgRWRpdFJlcG9ydFNvdXJjZURpYWxvZ0Jhc2UuV2lkdGgJAAAArAMAACFFZGl0UmVwb3J0U291cmNlRGlhbG9nQmFzZS5IZWlnaHQJAAAAzwIAAA==</value>\n            </setting>\n            <setting name=\"PerspectiveReportBook\" serializeAs=\"String\">\n                <value />\n            </setting>\n            <setting name=\"TelerikReportingCalculatedFieldCollectionEditor\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBNDb2xsZWN0aW9uRm9ybS5MZWZ0CQAAAF4CAAASQ29sbGVjdGlvbkZvcm0uVG9wCQAAADUCAAAUQ29sbGVjdGlvbkZvcm0uV2lkdGgJAAAApgUAABVDb2xsZWN0aW9uRm9ybS5IZWlnaHQJAAAAvwEAABBOYW1lQ29sdW1uLldpZHRoCQAAAO4AAAAURGF0YVR5cGVDb2x1bW4uV2lkdGgJAAAAZAAAABZFeHByZXNzaW9uQ29sdW1uLldpZHRoCQAAAC0EAAA=</value>\n            </setting>\n            <setting name=\"TelerikReportingParameterCollectionEditor\" serializeAs=\"String\">\n                <value>A0RQSQ4AAAAAAAAAAABiQBNDb2xsZWN0aW9uRm9ybS5MZWZ0CQAAABsCAAASQ29sbGVjdGlvbkZvcm0uVG9wCQAAACkDAAAUQ29sbGVjdGlvbkZvcm0uV2lkdGgJAAAAjgIAABVDb2xsZWN0aW9uRm9ybS5IZWlnaHQJAAAAcAEAABpQYXJhbWV0ZXIgTmFtZUNvbHVtbi5XaWR0aAkAAAAQAQAAG1BhcmFtZXRlciBWYWx1ZUNvbHVtbi5XaWR0aAkAAABXAQAA</value>\n            </setting>\n        </Telerik.ReportDesigner.Settings>\n    </userSettings>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Using ConnectionString from Configuration in VB.NET\nDESCRIPTION: This snippet demonstrates how to set the ConnectionString property of a CubeDataSource to use a connection string stored in the configuration file in VB.NET.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/connecting-the-cubedatasource-component-to-an-olap-database.md#2025-04-21_snippet_4\n\nLANGUAGE: VB.NET\nCODE:\n```\nMe.cubeDataSource1.ConnectionString = \"MyAdventureWorksDW\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers in JavaScript\nDESCRIPTION: This JavaScript code defines the trvEventHandlers object containing the exportBegin and exportEnd functions. These functions serve as event handlers for the Blazor Report Viewer's export events. The exportBegin handler logs the export format, while the exportEnd handler logs the completion and the URL of the exported report.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/blazor-report-viewer/event-binding.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\n\twindow.trvEventHandlers = {\n\t\texportBegin: function (e, args) {\n\t\t\tconsole.log(\"This event handler will be called before exporting the report in \" + args.format + \" format.\");\n\t\t},\n\t\texportEnd: function (e, args) {\n\t\t\tconsole.log(\"This event handler will be called after exporting the report.\");\n\t\t\tconsole.log(\"The exported report can be found at: \" + window.location.origin + args.url);\n\t\t}\n\t}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Report Rendering Configuration Property\nDESCRIPTION: Property to control whether blank pages are skipped during report rendering\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2021/r1-2021-sp1.md#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.Report.SkipBlankPages\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Rendering Extension for Print Scaling in Telerik Reporting\nDESCRIPTION: This XML configuration sets up the PDF rendering extension in Telerik Reporting to enable print scaling. It configures the ViewerPrintScaling parameter and adds JavaScript to trigger the print dialog on PDF opening.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-produce-pdf-files-fitting-the-physical-page-on-printing.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n  <configSections>\n    <section\n            name=\"Telerik.Reporting\"\n            type=\"Telerik.Reporting.Configuration.ReportingConfigurationSection, Telerik.Reporting, Version=[X.X.X.X], Culture=neutral, PublicKeyToken=a9d7983dfcc261be\"\n            allowLocation=\"true\"\n            allowDefinition=\"Everywhere\"/>\n  </configSections>\n  <Telerik.Reporting>\n    <Extensions>\n      <Render>\n        <Extension name=\"PDF\" description=\"PDF Description\">\n          <Parameters>\n            <Parameter name=\"JavaScript\" value=\"this.print({bUI: true, bSilent: false, bShrinkToFit: true});\"/>\n            <Parameter name=\"ViewerPrintScaling\" value=\"AppDefault\"/>\n          </Parameters>\n        </Extension>\n      </Render>\n    </Extensions>\n  </Telerik.Reporting>\n....\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Checking ActivityLog.xml for Missing Registry Key (64-bit)\nDESCRIPTION: This step verifies the existence of a specific registry key within the ActivityLog.xml file. The absence of this key can indicate a problem with the Visual Studio installation, potentially leading to missing toolbox items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-toolbox-items-are-missing.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\10.0\\Packages\\{2c298b35-07da-45f1-96a3-be55d91c8d7a}\"\n```\n\n----------------------------------------\n\nTITLE: Optional Assemblies for Extended Reporting Features\nDESCRIPTION: Additional assemblies that provide supplementary reporting capabilities such as rendering extensions, database caching, and OLAP cube data sourcing. These should be included only when specific advanced features are required.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/deploying-web-site.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n* Telerik.Reporting.XpsRendering.dll\n* Telerik.Reporting.OpenXmlRendering.dll\n* Telerik.Reporting.Cache.Database.dll\n* Telerik.Reporting.Adomd.dll\n```\n\n----------------------------------------\n\nTITLE: Managing Margins for Report Viewer Elements with JavaScript\nDESCRIPTION: These JavaScript functions update the margins of different viewer areas (pages area and document map) when toggling visibility of parameters or document map. They ensure the UI remains properly laid out without white spaces when elements are shown or hidden.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-move-parameters-area.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction updatePagesAreaTopMargin(condition, marginType) {\n\tif (condition) {\n\t\t$(\".trv-pages-area\").css(marginType, \"3.5em\");\n\t}\n\telse {\n\t\t$(\".trv-pages-area\").css(marginType, \"0em\");\n\t}\n}\nfunction updatePagesAreaLeftMargin(condition, marginType) {\n\tif (condition) {\n\t\t$(\".trv-pages-area\").css(marginType, \"12em\");\n\t}\n\telse {\n\t\t$(\".trv-pages-area\").css(marginType, \"0em\");\n\t}\n}\nfunction updateDocumentMapArea(condition, marginType) {\n\tif (condition) {\n\t\t$(\".trv-document-map\").css(marginType, \"3.5em\");\n\t}\n\telse {\n\t\t$(\".trv-document-map\").css(marginType, \"0em\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing libgdiplus Package\nDESCRIPTION: Command to install the libgdiplus package from the Epel repository on CentOS or Amazon Linux.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-install-libgdiplus-centos-amazon-linux.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyum install libgdiplus\n```\n\n----------------------------------------\n\nTITLE: Disabling Type Validation in JSON Configuration File\nDESCRIPTION: JSON configuration example showing how to disable both expression and serialization type validation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/typeValidation-element.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"telerikReporting\": {\n\t\"typeValidation\": {\n\t\t\"validateExpressionTypes\": \"false\",\n\t\t\"validateSerializationTypes\": \"false\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying IsValidXhtml Method in C# Event Handlers\nDESCRIPTION: This C# snippet shows how to use the IsValidXhtml method within the HtmlTextBox ItemDataBinding event handler. This approach requires handling events to validate XHTML content. Ensure XHTML content is valid during data binding events.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/htmltextbox/xhtml-validation.md#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n{{source=CodeSnippets\\CS\\API\\Telerik\\Reporting\\Processing\\HtmlTextBoxSnippets.cs region=Validate_Xhtml_Using_Event_And_IsValidXhtml_Snippet}}\n```\n\n----------------------------------------\n\nTITLE: Creating React Application with PowerShell\nDESCRIPTION: Initialize a new React project using create-react-app CLI tool, changing into the project directory\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-report-server.md#2025-04-21_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpx create-react-app my-app-with-viewer\ncd my-app-with-viewer\n```\n\n----------------------------------------\n\nTITLE: Group Index Calculation Expression\nDESCRIPTION: Expression used to group stub lines by calculating page breaks based on 2 lines per page.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/two-lists-show-details-in-parallel.md#2025-04-21_snippet_1\n\nLANGUAGE: Expression\nCODE:\n```\n= Fields.Index/ 2\n```\n\n----------------------------------------\n\nTITLE: Example Reinstall Telerik Reporting - VS 2022 Professional\nDESCRIPTION: This provides a command example that reinstalls Telerik Reporting for Visual Studio 2022 Professional edition. It shows the proper usage of the `msiexec` command using a valid installer file name and directory for Visual Studio 2022 Professional.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/error-value-cannot-be-null-parameter-name-instance-vs2017-report-designer.md#2025-04-21_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n\"msiexec /i Telerik_Reporting_R1_2023_SP1_DEV.msi PRODUCTDIR=\\\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Professional\\\"\"\n```\n\n----------------------------------------\n\nTITLE: ReportSource JSON Example\nDESCRIPTION: This JSON snippet represents a ReportSource object.  It specifies the report to be used (Report1.trdp) and provides a parameter value for the parameter 'City' with the value 'Sofia'.  This is used to identify a report and pass parameter values to it within the Telerik Reporting REST Service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/reportsource.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"report\": \"Report1.trdp\",\n\t\"parameterValues\": { \"City\": \"Sofia\" }\n}\n```\n\n----------------------------------------\n\nTITLE: NpgSql Provider Stored Function Discovery Workaround\nDESCRIPTION: Demonstrates how to manually type PostgreSQL stored functions in the SqlDataSource wizard when they are not automatically listed. The NpgSql provider can recognize and execute functions, but the wizard may not populate the dropdown automatically.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/postgres-stored-functions-in-sqldatasource-wizard.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Manually enter stored function name in SqlDataSource wizard\n-- Example: SELECT * FROM your_stored_function()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Method in AdventureWorksEntities Context in C#\nDESCRIPTION: This C# code snippet defines a custom method 'GetProductsByCategory' in the AdventureWorksEntities context using a partial class. It retrieves products based on a category name parameter.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/connecting-to-a-telerik-data-access-model-with-the-openaccessdatasource-component.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic partial class AdventureWorksEntities\n{\n    public IEnumerable<Product> GetProductsByCategory(string categoryName)\n    {\n        return this.Products.Where(p => p.ProductCategory.Name == categoryName);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: REST Service Error Message\nDESCRIPTION: The error message displayed when the HTML5 Report Viewer cannot access the Reporting REST service\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/cannot-access-the-reporting-rest-service.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCannot access the Reporting REST service. (serviceUrl = '/api/reports'). Make sure the service address is correct and enable CORS if needed (https://enable-cors.org)\n```\n\n----------------------------------------\n\nTITLE: Installing Kendo UI Theme\nDESCRIPTION: NPM command to install the Kendo UI Default Theme package\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-report-server.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nnpm install --save @progress/kendo-theme-default\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration of typeValidation Element in XML\nDESCRIPTION: XML configuration example showing the default typeValidation element setup with both validation types enabled.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/typeValidation-element.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<typeValidation validateExpressionTypes=\"true\" validateSerializationTypes=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Using TypeSelector in Telerik Reporting\nDESCRIPTION: TypeSelector applies styles to all report items of a specific type like Telerik.Reporting.TextBox or Telerik.Reporting.PageFooterSection.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/styling/styling-reports/understanding-style-selectors.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTelerik.Reporting.TextBox\n```\n\n----------------------------------------\n\nTITLE: Setting Report Parameters for Viewer\nDESCRIPTION: This function sets specific parameters for the report based on the source report's name, allowing customization of report data before it is displayed to the user. It checks for the report name and adjusts parameters accordingly. No external dependencies.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/web-report-designer-initialization.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction setReportParameters(reportSource) {\n\tif (reportSource.report === \"Dashboard.trdp\") {\n\t\treportSource.parameters = { ReportYear: 2003 };\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: HTML5 Viewer Dependencies\nDESCRIPTION: Required JavaScript libraries and versions for the HTML5 Report Viewer implementation.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2017/r3-2017.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"jquery-1.9.1.min.js\"></script>\n<script src=\"kendo-ui-2015.3.930.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using OpenAccessDataSource with Object Instance\nDESCRIPTION: Shows how to use OpenAccessDataSource with an existing OpenAccessContext instance for custom lifecycle management.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/maintaining-the-lifecycle-of-the-openaccesscontext-with-the-openaccessdatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nTelerik.Reporting.OpenAccessDataSource openAccessDataSource = new Telerik.Reporting.OpenAccessDataSource();\nopenAccessDataSource.ObjectContext = myAdventureWorksModel;\nopenAccessDataSource.SelectCommand = \"Products\";\n```\n\nLANGUAGE: VB\nCODE:\n```\nDim openAccessDataSource As New Telerik.Reporting.OpenAccessDataSource()\nopenAccessDataSource.ObjectContext = myAdventureWorksModel\nopenAccessDataSource.SelectCommand = \"Products\"\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration (JSON)\nDESCRIPTION: Configure the default connection string in the appsettings.json file for Telerik Reporting sample reports\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/react-report-viewer/how-to-use-react-report-viewer-with-rest-service.md#2025-04-21_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t...\n\t\"ConnectionStrings\": [\n\t\t{\n\t\t\t\"name\": \"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\",\n\t\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GET Version Response in HTTP\nDESCRIPTION: Complete HTTP sample response for the Get Version request, showing a 200 OK status and returning the version string of the Telerik Reporting REST Service.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/general-api/get-version.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n\n\"{{site.buildversion}}\"\n```\n\n----------------------------------------\n\nTITLE: WinUI Report Viewer Version\nDESCRIPTION: Specifies the Telerik UI for WinUI version used in the viewer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q2.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThe viewer is built with Telerik UI for WinUI __2.10.0__.\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembly Binding Redirects in XML\nDESCRIPTION: This XML snippet demonstrates the necessary assembly binding redirects to resolve cycling issues when deploying an MVC 5 project using Telerik Reporting WebAPI REST service on Windows Azure. It requires setting the 'Copy to Output Directory' property and ensuring correct versions for 'System.Web.Http' and 'System.Net.Http.Formatting' assemblies. The configuration enables the service to start and function properly.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/webrole-starts-cycling-after-deploying-to-windows-azure.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\\\"1.0\\\"?>\\n\\t<configuration>\\n\\t\\t<runtime>\\n\\t\\t\\t<assemblyBinding xmlns=\\\"urn:schemas-microsoft-com:asm.v1\\\"> \\n\\t\\t\\t\\t<dependentAssembly>\\n\\t\\t\\t\\t\\t<assemblyIdentity name=\\\"System.Web.Http\\\" publicKeyToken=\\\"31bf3856ad364e35\\\"/>\\n\\t\\t\\t\\t\\t<bindingRedirect oldVersion=\\\"0.0.0.0-5.0.0.0\\\" newVersion=\\\"5.0.0.0\\\"/>\\n\\t\\t\\t\\t</dependentAssembly>\\n\\t\\t\\t\\t<dependentAssembly>\\n\\t\\t\\t\\t\\t<assemblyIdentity name=\\\"System.Net.Http.Formatting\\\" publicKeyToken=\\\"31bf3856ad364e35\\\"/>\\n\\t\\t\\t\\t\\t<bindingRedirect oldVersion=\\\"0.0.0.0-5.0.0.0\\\" newVersion=\\\"5.0.0.0\\\"/>\\n\\t\\t\\t\\t</dependentAssembly>\\n\\t\\t\\t</assemblyBinding>\\n\\t\\t</runtime>\\n\\t</configuration>\n```\n\n----------------------------------------\n\nTITLE: Using Connection String from Configuration in C#\nDESCRIPTION: Demonstrates how to use a connection string stored in the configuration file by setting the ConnectionString property to the name of the configuration element in C#.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/connecting-the-sqldatasource-component-to-a-data-source.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nsqlDataSource1.ConnectionString = \"MyAdventureWorksDB\";\n```\n\n----------------------------------------\n\nTITLE: Starting the Application\nDESCRIPTION: NPM command to start the Angular application\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/how-to-use-with-report-server.md#2025-04-21_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Connection Strings\nDESCRIPTION: This snippet provides an example of JSON configuration for connection strings used in an Angular application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\"ConnectionStrings\": {\n\t\t//This connection string will use System.Data.SqlClient as data provider invariant name.\n\t\t//\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\"\n\n\t\t//This connection string explicitly states the data provider invariant name - mandatory for databases other than MSSQL Server.\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": {\n\t\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Adding Telerik Licensing Reference in .NET Framework Project\nDESCRIPTION: XML configuration for adding Telerik Licensing DLL reference in older .NET Framework project types\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/licensing/setting-up-your-telerik-reporting-license-key.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<Reference Include=\"Telerik.Licensing, Version=1.*, Culture=neutral, PublicKeyToken=*, processorArchitecture=MSIL\">\n\t<HintPath>..\\..\\packages\\Telerik.Licensing\\lib\\net4*\\Telerik.Licensing.dll</HintPath>\n</Reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring BarSeries Properties for Right Alignment\nDESCRIPTION: Settings required to align data point labels to the right edge of the Graph Chart Area by using a large offset value and hiding the connector line.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/align-barseries-datapointlabel-to-graph-right-side.md#2025-04-21_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\nDataPointLabelAlignment = OutsideEnd\nDataPointLabelOffset = [large value/graph width]\nDataPointLabelConnectorStyle.Visible = False\n```\n\n----------------------------------------\n\nTITLE: Querying Data for Bar Charts with SQL\nDESCRIPTION: This SQL snippet retrieves the necessary fields to create a Bar chart for visualizing product sales over time. The query joins multiple tables in the AdventureWorks database to extract the product category, order date, and line total of sales. It establishes the relationships needed for accurate financial reporting based on product categories.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/report-items/graph/chart-types/bar.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t[Production].[ProductCategory].[Name] AS 'Category',\n\t[Sales].[SalesOrderHeader].[OrderDate],\n\t[Sales].[SalesOrderDetail].[LineTotal]\nFROM\n\t[Production].[Product] INNER JOIN\n\t[Production].[ProductSubcategory] ON [Production].[Product].[ProductSubcategoryID] = [Production].[ProductSubcategory].[ProductSubcategoryID] INNER JOIN\n\t[Production].[ProductCategory] ON [Production].[ProductSubcategory].[ProductCategoryID] = [Production].[ProductCategory].[ProductCategoryID] INNER JOIN\n\t[Sales].[SalesOrderDetail] ON [Production].[Product].[ProductID] = [Sales].[SalesOrderDetail].[ProductID] INNER JOIN\n\t[Sales].[SalesOrderHeader] ON [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] AND [Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] AND \n\t[Sales].[SalesOrderDetail].[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID]\n```\n\n----------------------------------------\n\nTITLE: Identifying XML Schema Version in TRDX Report\nDESCRIPTION: Extract the XML schema version from the root element's xmlns attribute in a TRDX report file. This helps determine the compatibility of the report with the current Standalone Report Designer version.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/open-reports-that-use-newer-xml-schema.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nxmlns=\"http://schemas.telerik.com/reporting/<version>\"\n```\n\n----------------------------------------\n\nTITLE: Creating NavigateToBookmarkAction in C#\nDESCRIPTION: Demonstrates how to create a NavigateToBookmarkAction for implementing bookmark navigation in a report. This action is typically added to clickable items like text boxes or images.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/interactivity/bookmarks.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nreportItem.Action = new NavigateToBookmarkAction(\"TargetBookmarkId\");\n```\n\n----------------------------------------\n\nTITLE: Generating PictureBox Error in Telerik Reporting\nDESCRIPTION: This snippet shows the exception stack trace resulting from using an unsupported image format in the PictureBox. Telerik Reporting uses the GDI+ graphics library which does not support WebP format, leading to an InvalidOperationException with an inner ArgumentException indicating an invalid parameter. No dependencies beyond Telerik Reporting are required; ensure images are in supported formats.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/picturebox-parameter-is-not-valid-error.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nAn exception has occurred while processing 'pictureBox1' item:\nSystem.InvalidOperationException: Invalid image data.\n---> System.ArgumentException: Parameter is not valid.\n\tat System.Drawing.Image.FromStream(Stream stream, Boolean useEmbeddedColorManagement, Boolean validateImageData)\n\tat System.Drawing.Image.FromStream(Stream stream)\n\tat Telerik.Reporting.Processing.Imaging.ImageUtils.LoadImage(Stream stream)\n\tat Telerik.Reporting.Processing.Imaging.ImageUtils.CreateImageFromBytes(Byte[] data)\n\tat Telerik.Reporting.Processing.Imaging.ByteImageItem.CreateImageCore(CreateImageContext context)\n\tat Telerik.Reporting.Processing.Imaging.ImageItemBase.CreateImage(CreateImageContext context)\n\t--- End of inner exception stack trace ---\n\tat Telerik.Reporting.Processing.Imaging.ImageItemBase.CreateImage(CreateImageContext context)\n\tat Telerik.Reporting.Processing.Imaging.ImageItemBase.CreateImageInfo()74\n\tat Telerik.Reporting.Processing.Imaging.IImageInfoMapExtensions.StoreImageData(IImageInfoMap imageInfoMap, IImageItem imageItem, ICache cache)\n\tat Telerik.Reporting.Processing.PictureBox.ResolveImage(Object value)4\n\tat Telerik.Reporting.Processing.PictureBox.ProcessItem()102\n\tat Telerik.Reporting.Processing.ReportItemBase.ProcessElement()\n\tat Telerik.Reporting.Processing.ProcessingElement.Process(IDataMember dataContext)\n```\n\n----------------------------------------\n\nTITLE: Updating Report Parameters Using HTML Select Control - Angular\nDESCRIPTION: This snippet demonstrates how to use an HTML select control to pass a selected value to the report viewer's reportSource for dynamic report parameter updates. The select control triggers an event to change the report parameters when the user selects a different option.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-angular-report-viewer/customizing/passing-parameter-values.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<select #orderNumber value=\"SO51081\" (change)=\"onChange(orderNumber.value)\">\n\t<option *ngFor=\"let i of [1,2,3,4,5]\">{{ \"SO5108\" + i }}</option>\n</select>\n\n<reporting-angular-viewer\n\t#report\n\t[reportSource]=\"{\n\t\treport: 'Invoice.trdx',\n\t\tparameters: {}\n\t}\"\n\tserviceUrl=\"https://demos.telerik.com/reporting/api/reports\"\n\tviewMode=\"interactive\"\n\t[keepClientAlive]=\"true\">\n</reporting-angular-viewer>\n```\n\n----------------------------------------\n\nTITLE: Installing Telerik Angular Report Viewer Package\nDESCRIPTION: This PowerShell code shows the command to install the Telerik Angular Report Viewer package from the NPM registry, which is required for rendering reports in the application.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nnpm install --save @progress/telerik-angular-report-viewer\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in Startup.cs\nDESCRIPTION: Ensure the application configuration within the Configure method of Startup.cs can serve static files, which is essential for the functioning of the Web Report Designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/report-designer-tools/web-report-designer/how-to-set-up-in-dotnet.md#2025-04-21_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\napp.UseStaticFiles();\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of BookmarkNode Entity in Telerik Reporting\nDESCRIPTION: Illustrates the structure of a BookmarkNode entity used in Telerik Reporting REST Service. The node contains identifying information, display text, page reference, and can contain child bookmark items.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/rest-api-reference/json-entities/bookmarknode.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"id\": \"Bikes\",\n\t\"text\": \"Bikes\",\n\t\"page\": 3,\n\t\"items\": [{ \"id\": \"Bikes\", \"text\": \"Bikes\", \"page\": 3 }]\n}\n```\n\n----------------------------------------\n\nTITLE: Cursor-Based Pagination Query in GraphQL\nDESCRIPTION: Example GraphQL query demonstrating cursor-based pagination using variables for after argument and retrieving pageInfo fields for pagination control.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/graphqldatasource-component/using-parameters-with-the-graphqldatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  issues(first: 100, after: $someVariable) {\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n    edges {\n      node {\n        title\n        bodyText\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging License Warning Message in Build Log\nDESCRIPTION: Sample warning message displayed when a Telerik Reporting license key is invalid or not found during build process. Includes detailed search paths and activation instructions.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/licensing/license-faq.md#2025-04-21_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nTelerik and Kendo UI Licensing warning TKL002: No Telerik and Kendo UI License file found.\\nTelerik and Kendo UI Licensing warning TKL002: The following locations were searched:\\n...\\nTelerik and Kendo UI Licensing warning TKL002: Activate a License Key file at https://prgress.co/3PBSVoC\\nTelerik and Kendo UI Licensing warning TKL101: Telerik Reporting is not listed in your current license file.\\nTelerik and Kendo UI Licensing warning TKL004: Unable to locate licenses for all products.\n```\n\n----------------------------------------\n\nTITLE: Styling HTML Table Columns\nDESCRIPTION: CSS styles defining specific width percentages for table columns in the documentation page. Sets first and second columns to 30% width and third column to 40% width.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\ntable th:first-of-type {\n\twidth: 30%;\n}\ntable th:nth-of-type(2) {\n\twidth: 30%;\n}\ntable th:nth-of-type(3) {\n\twidth: 40%;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using Report Viewer Selector in AppComponent Template\nDESCRIPTION: This HTML snippet demonstrates how to include the report viewer in the AppComponent's template and bind the necessary properties, such as the service URL and report source.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-systemjs.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<tr-viewer\n\t\t[containerStyle]=\"viewerContainerStyle\"\n\t\t[serviceUrl]=\"'http://localhost/api/reports'\"\n\t\t[reportSource]=\"{\n\t\t\treport: 'Product Catalog.trdp',\n\t\t\tparameters: {}\n\t\t}\"\n\t\t[viewMode]=\"'INTERACTIVE'\"\n\t\t[scaleMode]=\"'SPECIFIC'\"\n\t\t[scale]=\"1.0\">\n\t</tr-viewer>\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data for Map with Multiple Locations\nDESCRIPTION: Sample CSV data containing country, city, latitude, longitude, and value information for testing map functionality with multiple data points across different countries.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-set-the-map-extent-dynamically-when-showing-a-single-data-point.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nCountry,City,Lat,Long,Value\n\tFrance,Paris,48.8566,2.3522,5\n\tFrance,Toulouse,43.6047,1.4442,15\n\tFrance,Caen,49.1829,0.3707,25\n\tGermany,Munich,48.131,11.57,20\n\tGermany,Berlin,52.5272,13.3739,40\n\tSwitzerland,Zurich,47.3798,8.5283,30\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Named Parameters for SQL Server\nDESCRIPTION: Example of SQL query using named parameters with @ prefix for SQL Server database\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-parameters-with-the-sqldatasource-component.md#2025-04-21_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM Person.Contact WHERE FirstName = @FirstName AND LastName = @LastName\n```\n\n----------------------------------------\n\nTITLE: Creating UriReportSource for Telerik Reporting in VB.NET\nDESCRIPTION: This snippet illustrates how to instantiate a UriReportSource in VB.NET for rendering reports in Telerik Reporting applications. This is essential for specifying where the report source can be located, and it is important to handle any report parameters appropriately. Make sure to include necessary references to Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/how-to-set-reportsource-for-report-viewers.md#2025-04-21_snippet_1\n\nLANGUAGE: VB\nCODE:\n```\nDim uriReportSource As New UriReportSource()\nuriReportSource.Uri = \"http://reports.example.com/report.trdx\"\n\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for assemblyReferences Element\nDESCRIPTION: Basic JSON structure for configuring assembly references in Telerik Reporting. This enables the Reporting Engine to resolve custom user functions and types used by the ObjectDataSource component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-report-engine/assemblyreferences-element.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"assemblyReferences\": [\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAccessDataSource with Connection String in VB.NET\nDESCRIPTION: This snippet shows how to specify a connection string and provider name for the OpenAccessDataSource component in VB.NET. This approach works both at design-time and in production.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/openaccessdatasource-component/configuring-the-database-connectivity-with-the-openaccessdatasource-component.md#2025-04-21_snippet_4\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim openAccessDataSource As New OpenAccessDataSource()\nopenAccessDataSource.ContextTypeName = GetType(AdventureWorksModel.AdventureWorksEntities).AssemblyQualifiedName\nopenAccessDataSource.OpenAccessContextOptions = OpenAccessContextOptions.Default\nopenAccessDataSource.Member = \"SalesOrderHeaders\"\nopenAccessDataSource.ConnectionString = \"Data Source=.\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=True\"\nopenAccessDataSource.ProviderName = \"System.Data.SqlClient\"\n```\n\n----------------------------------------\n\nTITLE: Using EntityDataSource for Automatic Context Management in VB.NET\nDESCRIPTION: Shows how to use EntityDataSource to automatically manage the lifecycle of ObjectContext/DbContext, ensuring proper lazy loading of related entities.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/maintaining-the-lifecycle-of-the-context-with-the-entitydatasource-component.md#2025-04-21_snippet_6\n\nLANGUAGE: VB.NET\nCODE:\n```\nDim entityDataSource As New Telerik.Reporting.EntityDataSource()\nentityDataSource.Context = GetType(AdventureWorksEntities)\nentityDataSource.EntitySet = \"Products\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection String in VB.NET\nDESCRIPTION: Shows how to specify a connection string for the EntityDataSource component in VB.NET to ensure proper functionality in both design-time and runtime environments.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/configuring-the-database-connectivity-with-the-entitydatasource-component.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nentityDataSource.EntityContextType = GetType(AdventureWorksContext)\nentityDataSource.EntityMember = \"Employees\"\nentityDataSource.ConnectionString = \"AdventureWorks\"\n```\n\n----------------------------------------\n\nTITLE: HTML Table Styling for Settings Description\nDESCRIPTION: CSS styling to define column widths for the PDF settings documentation table\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/doc-output/configure-the-export-formats/pdf-device-information-settings.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntable th:first-of-type {\n\twidth: 25%;\n}\ntable th:nth-of-type(2) {\n\twidth: 10%;\n}\ntable th:nth-of-type(3) {\n\twidth: 65%;\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone Report Designer Schema Version\nDESCRIPTION: This snippet highlights the schema version used by TRDX, TRDP, and TRBP files created by the Standalone Report Designer in Telerik Reporting R2 2019 SP1. It's crucial for understanding the structure of report definition files created or modified by this version of the designer.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2019/r2-2019-sp1.md#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"http://schemas.telerik.com/reporting/2019/2.0\"\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration: Hide RTF Rendering Extension in .NET Core\nDESCRIPTION: JSON configuration to hide the RTF export format in .NET Core applications by modifying the appSettings.json file. Provides a simplified configuration approach for controlling rendering extension visibility.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/limit-export-options-in-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"telerikReporting\": {\n    \"extensions\": [\n      {\n        \"name\": \"RTF\",\n        \"visible\": \"false\"\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: XML Schema Version for TRDX Files\nDESCRIPTION: Specifies the XML schema version used by the Standalone Report Designer for TRDX files.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2014/q3-2014.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2012/3.7\n```\n\n----------------------------------------\n\nTITLE: Configuring Report Source in JSON\nDESCRIPTION: JSON structure for setting up the report source configuration, including report identification and parameters.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/api-reference/options.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"report\": \"{Category}/{ReportName}\",\n  \"parameters\": {\n    \"parameterName\": \"parameterValue\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling DropDownList Selection Change Event (VB.NET)\nDESCRIPTION: This VB.NET code handles the `SelectedIndexChanged` event of a DropDownList. It retrieves the report from the ReportViewer's ReportSource, casts it to the appropriate types (InstanceReportSource and Report), and sets the value of the report's 'Year' parameter to the selected value of the DropDownList. Finally, it refreshes the report to reflect the new parameter value.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/asp.net-web-forms-report-viewer/using-out-proc-session-state/use-parameters-to-retrieve-specific-data.md#2025-04-21_snippet_5\n\nLANGUAGE: VB.NET\nCODE:\n```\nProtected Sub DropDownList1_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles DropDownList1.SelectedIndexChanged\n\t\t Dim reportsource As InstanceReportSource = DirectCast(Me.ReportViewer1.ReportSource, InstanceReportSource)\n\t\t Dim report As Report = DirectCast(reportsource.ReportDocument, Report)\n\t\t report.ReportParameters(\"Year\").Value = DirectCast(sender, DropDownList).SelectedItem.Value\n\t\t ReportViewer1.RefreshReport()\n\tEnd Sub\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Value Parameter for CubeDataSource in C#\nDESCRIPTION: Shows how to assign an array of years to the data source parameter in C#, allowing multiple values to be passed to the MDX query.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/cubedatasource-component/specifying-query-parameters-with-the-cubedatasource-component.md#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nCubeDataSource cubeDataSource = new CubeDataSource();\ncubeDataSource.ConnectionString = \"Data Source=localhost;\";\ncubeDataSource.Cube = \"Adventure Works\";\ncubeDataSource.SelectCommand = \"select non empty { [Measures].[Sales Amount] } on columns, non empty { [Product].[Category].[Category] * [Product].[Subcategory].[Subcategory] } on rows from [Adventure Works] where StrToSet(@Year)\";\nCubeDataSourceParameter yearParameter = new CubeDataSourceParameter();\nyearParameter.Name = \"@Year\";\nyearParameter.Value = new string[] { \"[Date].[Calendar Year].&[2005]\", \"[Date].[Calendar Year].&[2006]\" };\ncubeDataSource.Parameters.Add(yearParameter);\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Telerik Reporting Documentation\nDESCRIPTION: This snippet defines the robots.txt configuration for the Telerik Reporting documentation website. It allows all user agents to access the site and specifies the location of the sitemap using a Liquid template tag.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow:\nSitemap: {{ \"sitemap.xml\" | absolute_url }}\n```\n\n----------------------------------------\n\nTITLE: Controlling Border Style with Expression\nDESCRIPTION: An expression to control border styles in cells based on whether content is repeated, ensuring that repeated values do not have a top border, but new values do. It requires expressions support within Telerik Reporting.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/create-merge-cell-dynamic-table-crosstab.md#2025-04-21_snippet_0\n\nLANGUAGE: Expression\nCODE:\n```\n= If(Previous(Fields.responsibilityAgency) is Not Null,\\n\\t\\t(Fields.responsibilityAgency = Previous(Fields.responsibilityAgency)) ?\\n\\t\\t\\t'None' : 'Solid',\\n\\t\\tIf(Previous('risk', Fields.responsibilityAgency) is Not Null,\\n\\t\\t\\t(Fields.responsibilityAgency = Previous('risk', Last(Fields.responsibilityAgency))) ?\\n\\t\\t\\t\\t'None' : 'Solid',\\n\\t\\t\\tIf(Previous('questDetail', Fields.responsibilityAgency) is Not Null,\\n\\t\\t\\t\\t(Fields.responsibilityAgency = Previous('questDetail', Last(Fields.responsibilityAgency))) ?\\n\\t\\t\\t\\t\\t'None' : 'Solid',\\n\\t\\t\\t\\t'Solid')))\n```\n\n----------------------------------------\n\nTITLE: Accessing ReportItem in Telerik Reporting Expressions\nDESCRIPTION: Shows how to access the ReportItem object in Telerik Reporting expressions. ReportItem represents the current processing item and provides access to its data and properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/global-objects.md#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nReportItem.DataObject.fieldName\n```\n\n----------------------------------------\n\nTITLE: FileNotFoundException Error Message\nDESCRIPTION: The specific error message encountered when the Telerik.OpenAccess assembly fails to load during deployment.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/telerik-reporting-deployment-cannot-load-telerik-data-access.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSystem.IO.FileNotFoundException: Could not load file or assembly 'Telerik.OpenAccess, Version=2015.1.225.1, Culture=neutral, PublicKeyToken=7ce17eeaf1d59342' or one of its dependencies. The system cannot find the file specified.\n```\n\n----------------------------------------\n\nTITLE: Setting PDF JavaScript Parameter Programmatically in C#\nDESCRIPTION: C# code snippet for setting the JavaScript device info parameter when exporting a report programmatically using the embedded report engine.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-expand-the-pdf-reader-s-bookmarks-pane-on-opening-a-pdf-file-produced-by-telerik-reporting.md#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar deviceInfo = new System.Collections.Hashtable();\ndeviceInfo[\"JavaScript\"] = \"app.execMenuItem('ShowHideBookmarks')\";\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Connection String in JSON Configuration File\nDESCRIPTION: This JSON snippet demonstrates how to specify a SQLite connection string in a project's configuration file (e.g., appsettings.json). It includes the connection string and provider name for a shared connection used by SqlDataSource component.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/sqldatasource-component/using-data-providers/using-sqlite-data-provider.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"ConnectionStrings\":{\n\t\t\"sqlite\":{\n\t\t\t\"connectionString\":\"Data Source=c:\\mydb.db;Version=3;\",\n\t\t\t\"providerName\":\"System.Data.Sqlite\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Version Definition\nDESCRIPTION: Schema version specification for TRDX, TRDP, and TRBP report definitions in Standalone Report Designer\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q1.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2023/3.0\n```\n\n----------------------------------------\n\nTITLE: Using AddSeconds Function in Telerik Reporting\nDESCRIPTION: The `AddSeconds` function returns a new DateTime that adds the specified number of seconds to the value of the specified date. It takes a date and a number of seconds as input and returns a new DateTime object.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/expressions/expressions-reference/functions/date-and-time-functions.md#2025-04-21_snippet_11\n\nLANGUAGE: Telerik Reporting Expression\nCODE:\n```\n\"=AddSeconds(Now(), 33)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing User Function in Report Field\nDESCRIPTION: Expression syntax for applying the custom User Function to a report field to ensure proper data type conversion.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/number-in-the-cell-is-formatted-as-text-or-preceded-by-an-apostrophe.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n= ReturnDataType.ReturnTypeClass.ParseString(Fields.NameOfField)\n```\n\n----------------------------------------\n\nTITLE: Login to npm for Telerik Package Installation\nDESCRIPTION: This snippet shows how to log in to npm with the correct registry and scope before installing the Telerik package.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/angular-report-viewer/how-to-use-angular-report-viewer-with-angular-cli.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nnpm login --registry=https://registry.npmjs.org --scope=@progress\n```\n\n----------------------------------------\n\nTITLE: Modifying Preview Button Position with CSS\nDESCRIPTION: CSS rules to remove absolute positioning from preview button and related elements in the Report Viewer. These styles override the default positioning to allow the Preview button to be placed higher in the Parameters Area.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/change-preview-button-position.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.trv-parameters-area-preview-button {\n\tposition: relative !important;\n}\n.trv-parameters-area-footer {\n\tposition: relative !important;\n}\n.trv-parameters-area-content {\n\tposition: relative !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Meta Tag\nDESCRIPTION: Sets up the viewport meta tag for proper mobile browser layout control.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/html5-asp.net-web-forms-report-viewer/manual-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\" />\n```\n\n----------------------------------------\n\nTITLE: Redis Storage Version Requirements\nDESCRIPTION: Version requirements for Redis storage implementation in REST Service, specifying different versions for .NET Framework and .NET 6+ projects.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* StackExchange.Redis.StrongName version 1.0.320 or greater for projects targeting .NET Framework 4.\n* StackExchange.Redis version 2.6.122 or greater for projects targeting .NET Framework 4.6.1+ or .NET 6+.\n```\n\n----------------------------------------\n\nTITLE: Using 'Like' Operator in Telerik Reporting Filter Rules\nDESCRIPTION: This example shows how to use the 'Like' operator with wildcards to filter product names containing a specific string.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-items/filtering-data/filter-rules.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nFields.ProductName Like \"%Bike%\"\n```\n\n----------------------------------------\n\nTITLE: Updating XML Schema Version for Standalone Report Designer Files\nDESCRIPTION: The TRDX, TRDP, and TRBP files created by the Standalone Report Designer now use an updated schema version.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2020/r1-2020-sp1.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nhttp://schemas.telerik.com/reporting/2020/1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectionStrings with Provider in JSON for Telerik Reporting\nDESCRIPTION: A JSON configuration example that sets up a connection string with an explicit provider name for SQL Server. This allows specification of different data providers.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/host-the-report-engine-remotely/asp.net-core-web-api-implementation/host-reports-service-in-.net-core-2.1-and-2.2.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n...\n\t\"ConnectionStrings\": {\n\t\t\"Telerik.Reporting.Examples.CSharp.Properties.Settings.TelerikConnectionString\": {\n\t\t\t\"connectionString\": \"Data Source=.\\\\SQLEXPRESS;Initial Catalog=AdventureWorks;Integrated Security=true\",\n\t\t\t\"providerName\": \"System.Data.SqlClient\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: HttpClient Dependencies Configuration\nDESCRIPTION: Required NuGet packages for connecting desktop report viewers to REST service or Report Server.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2024/2024-q3-18-2-24-924.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNewtonsoft.Json (13.0.1 or later)\nMicrosoft.AspNet.WebApi.Client (6.0.0 or later for .NET Framework, 5.2.7 or later for .NET Core)\n```\n\n----------------------------------------\n\nTITLE: Handling OnExportEnd Event in Native Blazor Report Viewer\nDESCRIPTION: This snippet illustrates how to process the OnExportEnd event in the Native Blazor Report Viewer to modify the export behavior. It utilizes ExportEndEventArgs to control the target of the exported report's URL.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/embedding-reports/display-reports-in-applications/web-application/native-blazor-report-viewer/api-reference/events.md#2025-04-21_snippet_3\n\nLANGUAGE: CSHTML\nCODE:\n```\n<ReportViewer @ref=\"reportViewer1\"\n\tServiceUrl=\"https://demos.telerik.com/reporting/api/reports\"\n\t@bind-ReportSource=\"@ReportSource\"\n\tServiceType=\"@ReportViewerServiceType.REST\"\n\tHeight=\"800px\"\n\tWidth=\"100%\"\n\tOnExportEnd=\"@ExportEnd\"></ReportViewer>\n\n@code {\n\tReportViewer reportViewer1;\n\tpublic ReportSourceOptions ReportSource { get; set; } = new ReportSourceOptions(\"Report Catalog.trdx\", new Dictionary<string, object>{});\n\t\n\tvoid ExportEnd(ExportEndEventArgs args)\n\t{\n\t\t// Change the window's open target\n\t\tif(args.Format == \"PDF\")\n\t\t{\n\t\t\targs.WindowOpenTarget = \"_blank\";\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Version Information in Markdown\nDESCRIPTION: Markdown frontmatter defining metadata for the R2 2017 release documentation page, including title, description, and navigation properties.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/upgrade/2017/r2-2017.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: R2 2017\npage_title: R2 2017 Release Overview \ndescription: \"See the changes introduced with Telerik Reporting R2 2017 that should be considered before upgrading, and the 3rd party products & packages this version depends on.\"\nslug: telerikreporting/upgrade/2017/r2-2017\ntags: r2,2017\npublished: True\nposition: 3\nprevious_url: /upgrade-path-2017-r2\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Kendo DatePicker Culture with JavaScript\nDESCRIPTION: This JavaScript code demonstrates setting the Kendo widget culture to Spanish (Paraguay) using the `kendo.culture` method before initializing the report viewer. Key functionality includes setting the service URL and report source for the Telerik Report Viewer. Dependencies include prior inclusion of Kendo UI and required scripts.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/how-to-change-the-culture-of-the-datepicker-in-html5-mvc-report-viewer.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n    kendo.culture(\"es-PY\");\n\n    $(\"#reportViewer1\")\n        .telerik_ReportViewer({\n            serviceUrl: \"https://demos.telerik.com/reporting/api/reports/\",\n            reportSource: {\n                report: \"Employee Sales Summary.trdx\",\n            }\n        });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Accessibility Functions to Custom Parameter Editor in JavaScript\nDESCRIPTION: This code snippet demonstrates how to add the required accessibility functions to a custom parameter editor for the HTML5 Report Viewer. It includes empty implementations of addAccessibility and setAccessibilityErrorState functions to prevent the parameters area from disappearing when accessibility is enabled.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/knowledge-base/html5-viewer-custom-parameter-editors-disappear-when-accessibility-is-enabled.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type=\"text/javascript\">\n      $(\"#reportViewer1\")\n            .telerik_ReportViewer({           \n                parameterEditors: [\n                    {\n                        match: function (parameter) {\n                            return Boolean(parameter.availableValues) && !parameter.multivalue;\n                        },\n\n                        createEditor: function (placeholder, options)  {\n                            var dropDownElement = $(placeholder).html('<div></div>'),\n                                      parameter,\n                                      valueChangedCallback = options.parameterChanged,\n                                      dropDownList;\n\n                                      function onChange() {\n                                     var val = dropDownList.value();\n                                    valueChangedCallback(parameter, val);\n                                     }\n\n                            return {\n                                beginEdit: function (param) {\n\n                                    parameter = param;\n\n                                    $(dropDownElement).kendoDropDownList({\n                                        dataTextField: \"name\",\n                                        dataValueField: \"value\",\n                                      value: parameter.value,\n                                        dataSource: parameter.availableValues,\n                                        change: onChange\n                                    });\n\n                                    dropDownList = $(dropDownElement).data(\"kendoDropDownList\");\n                                },\n                                addAccessibility: function (param) { },\n                                setAccessibilityErrorState: function (param) { }\t\n                            };\n                        }\n                  }]\n            });        \n</script>\n```\n\n----------------------------------------\n\nTITLE: LINQ Query with POCO Results\nDESCRIPTION: Shows how to use a LINQ query to efficiently retrieve only necessary data and return it as POCO objects.\nSOURCE: https://github.com/telerik/reporting-docs.git/blob/master/designing-reports/connecting-to-data/data-source-components/entitydatasource-component/retrieving-data-from-an-entity-data-model-with-the-entitydatasource-component.md#2025-04-21_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\npublic IEnumerable<ProductInfo> GetProductsInfo()\n{\n    var query = from p in this.Products\n                select new ProductInfo\n                {\n                    Name = p.Name,\n                    ProductNumber = p.ProductNumber,\n                    CategoryName = p.ProductSubcategory.ProductCategory.Name\n                };\n    return query.ToList();\n}\n```\n\nLANGUAGE: VB\nCODE:\n```\nPublic Function GetProductsInfo() As IEnumerable(Of ProductInfo)\n    Dim query = From p In Me.Products\n                Select New ProductInfo With {\n                    .Name = p.Name,\n                    .ProductNumber = p.ProductNumber,\n                    .CategoryName = p.ProductSubcategory.ProductCategory.Name\n                }\n    Return query.ToList()\nEnd Function\n```"
  }
]