[
  {
    "owner": "miguelgrinberg",
    "repo": "flask-socketio",
    "content": "TITLE: Implementing Flask-SocketIO in Python\nDESCRIPTION: This snippet demonstrates how to create a basic Flask application with SocketIO integration. It includes setting up the Flask app, configuring SocketIO, defining a route, and handling a socket event.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom flask import Flask, render_template\nfrom flask_socketio import SocketIO, emit\n    \napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret!'\nsocketio = SocketIO(app)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@socketio.event\ndef my_event(message):\n    emit('my response', {'data': 'got it!'})\n\nif __name__ == '__main__':\n    socketio.run(app)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask-SocketIO Basic Setup\nDESCRIPTION: Basic initialization of Flask-SocketIO with a Flask application using direct initialization method.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, render_template\nfrom flask_socketio import SocketIO\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret!'\nsocketio = SocketIO(app)\n\nif __name__ == '__main__':\n    socketio.run(app)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask-SocketIO with Factory Pattern\nDESCRIPTION: Alternative initialization using the factory pattern with init_app() method.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, render_template\nfrom flask_socketio import SocketIO\n\nsocketio = SocketIO()\n\ndef create_app():\n    app = Flask(__name__)\n    app.config['SECRET_KEY'] = 'secret!'\n    socketio.init_app(app)\n    return app\n\nif __name__ == '__main__':\n    app = create_app()\n    socketio.run(app)\n```\n\n----------------------------------------\n\nTITLE: Server-side Event Handler Examples\nDESCRIPTION: Various examples of handling Socket.IO events on the server side including unnamed, JSON, and custom events.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@socketio.on('message')\ndef handle_message(data):\n    print('received message: ' + data)\n\n@socketio.on('json')\ndef handle_json(json):\n    print('received json: ' + str(json))\n\n@socketio.on('my event')\ndef handle_my_custom_event(json):\n    print('received json: ' + str(json))\n```\n\n----------------------------------------\n\nTITLE: Client-side Socket.IO Connection Setup\nDESCRIPTION: HTML/JavaScript code for establishing Socket.IO connection from the client side.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js\" integrity=\"sha512-q/dWJ3kcmjBLU4Qc47E4A9kTB4m3wuTY7vkFJDTZKjTs8jhyGQnaUrxa0Ytd0ssMZhbNua9hE+E7Qv1j+DyZwA==\" crossorigin=\"anonymous\"></script>\n<script type=\"text/javascript\" charset=\"utf-8\">\n    var socket = io();\n    socket.on('connect', function() {\n        socket.emit('my event', {data: 'I\\'m connected!'});\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Class-Based Namespace Implementation in Flask-SocketIO\nDESCRIPTION: Example of creating a class-based namespace handler that inherits from Namespace class, demonstrating connect, disconnect, and custom event handling.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_socketio import Namespace, emit\n\nclass MyCustomNamespace(Namespace):\n    def on_connect(self):\n        pass\n\n    def on_disconnect(self, reason):\n        pass\n\n    def on_my_event(self, data):\n        emit('my_response', data)\n\nsocketio.on_namespace(MyCustomNamespace('/test'))\n```\n\n----------------------------------------\n\nTITLE: Room Management with Flask-SocketIO\nDESCRIPTION: Implementation of room-based messaging functionality including joining and leaving rooms.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_socketio import join_room, leave_room\n\n@socketio.on('join')\ndef on_join(data):\n    username = data['username']\n    room = data['room']\n    join_room(room)\n    send(username + ' has entered the room.', to=room)\n\n@socketio.on('leave')\ndef on_leave(data):\n    username = data['username']\n    room = data['room']\n    leave_room(room)\n    send(username + ' has left the room.', to=room)\n```\n\n----------------------------------------\n\nTITLE: Authentication and Connection Rejection in Flask-SocketIO\nDESCRIPTION: Example showing how to implement authentication in connection events and reject unauthorized connections using ConnectionRefusedError.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_socketio import ConnectionRefusedError\n\n@socketio.on('connect')\ndef connect():\n    if not self.authenticate(request.args):\n        raise ConnectionRefusedError('unauthorized!')\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Events in Flask-SocketIO\nDESCRIPTION: Basic connection and disconnection event handlers for Flask-SocketIO. The connect handler can emit responses while the disconnect handler logs the reason for disconnection.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@socketio.on('connect')\ndef test_connect(auth):\n    emit('my response', {'data': 'Connected'})\n\n@socketio.on('disconnect')\ndef test_disconnect(reason):\n    print('Client disconnected, reason:', reason)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask-SocketIO with a Message Queue (Python)\nDESCRIPTION: Python code snippet showing how to initialize a Flask-SocketIO server instance (`SocketIO`) to connect to a message queue, enabling coordination between multiple worker processes. The `message_queue` argument accepts the connection URL for the queue service (e.g., 'redis://' for local Redis, 'amqp://' for RabbitMQ, 'kafka://' for Kafka). This setup is essential for broadcasting events and managing rooms across multiple server instances.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nsocketio = SocketIO(app, message_queue='redis://')\n```\n\n----------------------------------------\n\nTITLE: Implementing Flask-SocketIO Connect Handler with Flask-Login\nDESCRIPTION: Example of a SocketIO connect event handler that uses Flask-Login's current_user to authenticate connections and broadcast join messages.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/implementation_notes.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@socketio.on('connect')\ndef connect_handler():\n    if current_user.is_authenticated:\n        emit('my response',\n             {'message': '{0} has joined'.format(current_user.name)},\n             broadcast=True)\n    else:\n        return False  # not allowed here\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authentication Decorator for Flask-SocketIO\nDESCRIPTION: Implementation of a custom decorator that enforces authentication for SocketIO event handlers by checking current_user status and disconnecting unauthorized users.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/implementation_notes.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport functools\nfrom flask import request\nfrom flask_login import current_user\nfrom flask_socketio import disconnect, emit\n\ndef authenticated_only(f):\n    @functools.wraps(f)\n    def wrapped(*args, **kwargs):\n        if not current_user.is_authenticated:\n            disconnect()\n        else:\n            return f(*args, **kwargs)\n    return wrapped\n\n@socketio.on('my event')\n@authenticated_only\ndef handle_my_custom_event(data):\n    emit('my response', {'message': '{0} has joined'.format(current_user.name)},\n         broadcast=True)\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket.IO Events from an External Process (Python)\nDESCRIPTION: Illustrates how an external process (e.g., a Celery worker) can emit events to connected Socket.IO clients. It creates a `SocketIO` instance, providing only the `message_queue` URL (e.g., 'redis://') without the Flask `app` object. This allows the external process to publish events through the message queue, which are then relayed to clients by the running Flask-SocketIO server(s) connected to the same queue. The `emit` method works similarly to how it's used within the server.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nsocketio = SocketIO(message_queue='redis://')\nsocketio.emit('my event', {'data': 'foo'}, namespace='/test')\n```\n\n----------------------------------------\n\nTITLE: Error Handling Implementation in Flask-SocketIO\nDESCRIPTION: Examples of implementing error handlers for different namespaces and default error handling in Flask-SocketIO.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@socketio.on_error()        # Handles the default namespace\ndef error_handler(e):\n    pass\n\n@socketio.on_error('/chat') # handles the '/chat' namespace\ndef error_handler_chat(e):\n    pass\n\n@socketio.on_error_default  # handles all namespaces without an explicit error handler\ndef default_error_handler(e):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Error Event Handling with Request Inspection\nDESCRIPTION: Example showing how to access event details during error handling using the request.event object.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request\n\n@socketio.on(\"my error event\")\ndef on_my_event(data):\n    raise RuntimeError()\n\n@socketio.on_error_default\ndef default_error_handler(e):\n    print(request.event[\"message\"]) # \"my error event\"\n    print(request.event[\"args\"])    # (data,)\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-SocketIO using pip in Python\nDESCRIPTION: This snippet shows how to install Flask-SocketIO using pip, the Python package installer. It's a simple one-line command that installs the package and its dependencies.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/intro.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flask-socketio\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging in Flask-SocketIO\nDESCRIPTION: Example of enabling debug logging for both Socket.IO and Engine.IO components.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/getting_started.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsocketio = SocketIO(logger=True, engineio_logger=True)\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for Flask-SocketIO Project\nDESCRIPTION: Lists required Python packages and their version constraints for a Flask application with Socket.IO support. Includes core Flask dependencies, SocketIO libraries, and supporting packages for session management and authentication.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/example/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbidict==0.22.0\ncachelib==0.9.0\nclick==8.1.3\nFlask==2.2.5\nFlask-Login==0.6.2\nFlask-Session==0.4.0\nFlask-SocketIO\nimportlib-metadata==4.12.0\nitsdangerous==2.1.2\nJinja2==3.1.5\nMarkupSafe==2.1.1\npython-engineio\npython-socketio\nsix==1.11.0\nWerkzeug==2.3.8\nzipp==3.19.1\n```\n\n----------------------------------------\n\nTITLE: Starting Flask-SocketIO with Gunicorn and Eventlet (Bash)\nDESCRIPTION: Runs a Flask-SocketIO application using Gunicorn as the web server with the eventlet worker. This requires both eventlet and gunicorn to be installed. The '-w 1' argument specifies a single worker process, which is necessary due to limitations in gunicorn's load balancing for Socket.IO. 'module:app' refers to the Python module containing the Flask application instance named 'app'.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngunicorn --worker-class eventlet -w 1 module:app\n```\n\n----------------------------------------\n\nTITLE: Starting Flask-SocketIO with Gunicorn, Gevent, and gevent-websocket (Bash)\nDESCRIPTION: Launches a Flask-SocketIO server using Gunicorn with the gevent worker, specifically enabling WebSocket support via the gevent-websocket package. This requires gunicorn, gevent, and gevent-websocket. The '-k geventwebsocket.gunicorn.workers.GeventWebSocketWorker' flag selects the custom worker needed for gevent's WebSocket protocol handling. The '-w 1' option restricts it to one worker process. 'module:app' indicates the application module and instance.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngunicorn -k geventwebsocket.gunicorn.workers.GeventWebSocketWorker -w 1 module:app\n```\n\n----------------------------------------\n\nTITLE: Starting Flask-SocketIO with Gunicorn and Gevent (Bash)\nDESCRIPTION: Starts a Flask-SocketIO application using Gunicorn with the gevent worker. This requires gevent and gunicorn to be installed. The '-k gevent' option explicitly selects the gevent worker class. Similar to the eventlet example, '-w 1' limits the deployment to a single worker. 'module:app' specifies the Python module and the application instance.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngunicorn -k gevent -w 1 module:app\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Event Call Function\nDESCRIPTION: Shows usage of the call() function added in version 5.3.0 for emitting events to clients and waiting for callback responses\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/CHANGES.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncall()\n```\n\n----------------------------------------\n\nTITLE: Example Socket.IO Catch-all Event Handler\nDESCRIPTION: Demonstrates the catch-all event handler feature introduced in version 5.4.0 using socketio.on('*') notation\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/CHANGES.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsocketio.on('*')\n```\n\n----------------------------------------\n\nTITLE: Applying Eventlet Monkey Patching for Coroutine Compatibility (Python)\nDESCRIPTION: Shows how to apply monkey patching using the eventlet library in Python. Calling `eventlet.monkey_patch()` modifies the Python standard library to use eventlet's non-blocking equivalents for I/O operations, which is often required when using eventlet with technologies like message queues (Redis, RabbitMQ) to prevent blocking the event loop. It's recommended to call this early in the application startup process, even before imports.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport eventlet\neventlet.monkey_patch()\n```\n\n----------------------------------------\n\nTITLE: Applying Gevent Monkey Patching for Coroutine Compatibility (Python)\nDESCRIPTION: Demonstrates how to apply gevent monkey patching in Python using `monkey.patch_all()`. This replaces parts of the standard library with gevent-friendly versions, enabling cooperative multitasking and preventing blocking operations when using gevent, particularly important when interacting with message queues or other I/O-bound dependencies. This should typically be done at the beginning of the main script.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom gevent import monkey\nmonkey.patch_all()\n```\n\n----------------------------------------\n\nTITLE: Starting Flask-SocketIO with uWSGI and Gevent (Bash)\nDESCRIPTION: Example command to run a Flask-SocketIO application (defined in app.py with callable 'app') using the uWSGI server integrated with gevent. It utilizes uWSGI's native WebSocket support. Prerequisites include uWSGI compiled with WebSocket and SSL support. Key options: '--http :5000' binds to port 5000, '--gevent 1000' enables gevent mode with 1000 greenlets, '--http-websockets' enables WebSocket proxying, '--master' runs a master process, and '--wsgi-file app.py --callable app' specifies the application.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ uwsgi --http :5000 --gevent 1000 --http-websockets --master --wsgi-file app.py --callable app\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as a Basic Reverse Proxy for Flask-SocketIO (Nginx)\nDESCRIPTION: Provides a basic Nginx server block configuration to act as a reverse proxy for a Flask-SocketIO application running locally on port 5000. It correctly proxies both standard HTTP requests (location /) and WebSocket connections (location /socket.io), including necessary headers for the WebSocket upgrade. This configuration requires Nginx version 1.4 or newer for WebSocket support. Static files are served directly by Nginx for efficiency.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_5\n\nLANGUAGE: Nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name _;\n\n    location / {\n        include proxy_params;\n        proxy_pass http://127.0.0.1:5000;\n    }\n\n    location /static/ {\n        alias <path-to-your-application>/static/;\n        expires 30d;\n    }\n\n    location /socket.io {\n        include proxy_params;\n        proxy_http_version 1.1;\n        proxy_buffering off;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass http://127.0.0.1:5000/socket.io;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Load Balancing Flask-SocketIO Servers (Nginx)\nDESCRIPTION: Nginx configuration demonstrating load balancing across multiple backend Flask-SocketIO server instances (running on ports 5000, 5001, 5002). It defines an 'upstream' block named 'socketio_nodes' and uses the 'ip_hash' directive to ensure sticky sessions, routing requests from the same client IP address to the same backend server. This is crucial for Socket.IO connections. The '/socket.io' location block proxies requests to this upstream group.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_6\n\nLANGUAGE: Nginx\nCODE:\n```\nupstream socketio_nodes {\n    ip_hash;\n\n    server 127.0.0.1:5000;\n    server 127.0.0.1:5001;\n    server 127.0.0.1:5002;\n    # to scale the app, just add more nodes here!\n}\n\nserver {\n    listen 80;\n    server_name _;\n\n    location / {\n        include proxy_params;\n        proxy_pass http://127.0.0.1:5000;\n    }\n\n    location /static/ {\n        alias <path-to-your-application>/static/;\n        expires 30d;\n    }\n\n    location /socket.io {\n        include proxy_params;\n        proxy_http_version 1.1;\n        proxy_buffering off;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass http://socketio_nodes/socket.io;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Flask-SocketIO with Gunicorn Threaded Worker (Bash)\nDESCRIPTION: Command to start a Flask-SocketIO application using Gunicorn's threaded worker, often used for CPU-intensive applications or those incompatible with green threads (eventlet/gevent). Requires gunicorn and the simple-websocket package for WebSocket support. '-w 1' sets a single worker process, and '--threads 100' configures the number of threads for that worker. 'module:app' is the application's entry point.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/deployment.rst#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ngunicorn -w 1 --threads 100 module:app\n```\n\n----------------------------------------\n\nTITLE: Flask-SocketIO Module Documentation Structure\nDESCRIPTION: ReStructuredText documentation directives defining the structure and contents of the Flask-SocketIO API reference documentation.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/api.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: flask_socketio\n.. autoclass:: SocketIO\n   :members:\n.. autofunction:: emit\n.. autofunction:: send\n.. autofunction:: join_room\n.. autofunction:: leave_room\n.. autofunction:: close_room\n.. autofunction:: rooms\n.. autofunction:: disconnect\n.. autoclass:: Namespace\n   :members:\n.. autoclass:: SocketIOTestClient\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Root Documentation Structure in RST\nDESCRIPTION: Sphinx documentation root file structure defining the table of contents and document organization for Flask-SocketIO documentation.\nSOURCE: https://github.com/miguelgrinberg/flask-socketio/blob/main/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n\n   intro\n   getting_started\n   implementation_notes\n   deployment\n   upgrading\n   api\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```"
  }
]