[
  {
    "owner": "py-pdf",
    "repo": "pypdf",
    "content": "TITLE: Basic PDF Merging with PdfWriter\nDESCRIPTION: Demonstrates the most basic way to merge multiple PDF files using pypdf's PdfWriter class. This snippet shows how to append multiple PDF files and write the merged result to a new file.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/merging-pdfs.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfWriter\n\nmerger = PdfWriter()\n\nfor pdf in [\"file1.pdf\", \"file2.pdf\", \"file3.pdf\"]:\n    merger.append(pdf)\n\nmerger.write(\"merged-pdf.pdf\")\nmerger.close()\n```\n\n----------------------------------------\n\nTITLE: Basic Text Extraction from PDFs using PyPDF\nDESCRIPTION: Demonstrates various methods to extract text from PDF files using PyPDF, including basic extraction, orientation-specific extraction, and layout-preserving extraction with different options.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/extract-text.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"example.pdf\")\npage = reader.pages[0]\nprint(page.extract_text())\n\n# extract only text oriented up\nprint(page.extract_text(0))\n\n# extract text oriented up and turned left\nprint(page.extract_text((0, 90)))\n\n# extract text in a fixed width format that closely adheres to the rendered\n# layout in the source pdf\nprint(page.extract_text(extraction_mode=\"layout\"))\n\n# extract text preserving horizontal positioning without excess vertical\n# whitespace (removes blank and \"whitespace only\" lines)\nprint(page.extract_text(extraction_mode=\"layout\", layout_mode_space_vertically=False))\n\n# adjust horizontal spacing\nprint(page.extract_text(extraction_mode=\"layout\", layout_mode_scale_weight=1.0))\n\n# exclude (default) or include (as shown below) text rotated w.r.t. the page\nprint(page.extract_text(extraction_mode=\"layout\", layout_mode_strip_rotated=False))\n```\n\n----------------------------------------\n\nTITLE: Basic Text Extraction from PDF\nDESCRIPTION: Simple example showing how to read a PDF file, count its pages, and extract text from the first page using pypdf's PdfReader class.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"example.pdf\")\nnumber_of_pages = len(reader.pages)\npage = reader.pages[0]\ntext = page.extract_text()\n```\n\n----------------------------------------\n\nTITLE: Filling PDF Forms with pypdf\nDESCRIPTION: Shows how to fill out PDF form fields using PdfReader and PdfWriter. Includes file handling and form field value updating with auto_regenerate parameter.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/forms.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\n\nreader = PdfReader(\"form.pdf\")\nwriter = PdfWriter()\n\npage = reader.pages[0]\nfields = reader.get_fields()\n\nwriter.append(reader)\n\nwriter.update_page_form_field_values(\n    writer.pages[0],\n    {\"fieldname\": \"some filled in text\"},\n    auto_regenerate=False,\n)\n\nwith open(\"filled-out.pdf\", \"wb\") as output_stream:\n    writer.write(output_stream)\n```\n\n----------------------------------------\n\nTITLE: Extracting Page Images from PDF with pypdf\nDESCRIPTION: This snippet demonstrates how to extract all images from a PDF page and save them as separate files. It iterates through the images collection of a page object, writing each image's binary data to a file. Note that this requires installing optional dependencies as mentioned in the installation guide.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/extract-images.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"example.pdf\")\n\npage = reader.pages[0]\n\nfor count, image_file_object in enumerate(page.images):\n    with open(str(count) + image_file_object.name, \"wb\") as fp:\n        fp.write(image_file_object.data)\n```\n\n----------------------------------------\n\nTITLE: Encrypting PDFs with pypdf using a password\nDESCRIPTION: This snippet demonstrates how to encrypt a PDF file with a password using pypdf. It reads an existing PDF, creates a writer object, applies encryption with the AES-256 algorithm, and saves the encrypted PDF to a new file.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/encryption-decryption.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\n\nreader = PdfReader(\"example.pdf\")\nwriter = PdfWriter(clone_from=reader)\n\n# Add a password to the new PDF\nwriter.encrypt(\"my-secret-password\", algorithm=\"AES-256\")\n\n# Save the new PDF to a file\nwith open(\"encrypted-pdf.pdf\", \"wb\") as f:\n    writer.write(f)\n```\n\n----------------------------------------\n\nTITLE: Extracting Images from PDF Stamp Annotations with pypdf\nDESCRIPTION: This snippet shows how to extract images from stamp annotations in a PDF document. It navigates through the annotation object structure to access the embedded image, then displays it. This approach is necessary for images that aren't part of the standard page content but are contained within annotations.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/extract-images.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"test_stamp.pdf\")\nim = (\n    reader.pages[0][\"/Annots\"][0]\n    .get_object()[\"/AP\"][\"/N\"][\"/Resources\"][\"/XObject\"][\"/Im4\"]\n    .decode_as_image()\n)\n\nim.show()\n```\n\n----------------------------------------\n\nTITLE: Multiple Page Insertion with Custom Ordering\nDESCRIPTION: Shows how to insert the same page multiple times with a custom ordering using a list-based syntax.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/merging-pdfs.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Insert pages 2 and 3, with page 1 before, between, and after\nwriter.append(reader, [0, 1, 0, 2, 0])\n```\n\n----------------------------------------\n\nTITLE: Writing Encrypted PDF to AWS S3\nDESCRIPTION: Shows how to read a PDF from bytes, encrypt it with a password, and write directly to AWS S3 without intermediate file storage. Uses boto3 for AWS S3 integration.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/streaming-data.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom io import BytesIO\n\nimport boto3\nfrom pypdf import PdfReader, PdfWriter\n\n\nreader = PdfReader(BytesIO(raw_bytes_data))\nwriter = PdfWriter()\n\n# Add all pages to the writer\nfor page in reader.pages:\n    writer.add_page(page)\n\n# Add a password to the new PDF\nwriter.encrypt(\"my-secret-password\")\n\n# Save the new PDF to a file\nwith BytesIO() as bytes_stream:\n    writer.write(bytes_stream)\n    bytes_stream.seek(0)\n    s3 = boto3.client(\"s3\")\n    s3.write_get_object_response(\n        Body=bytes_stream, RequestRoute=request_route, RequestToken=request_token\n    )\n```\n\n----------------------------------------\n\nTITLE: Reducing Image Quality in PDF using pypdf\nDESCRIPTION: Reduces the quality of all images in the PDF by processing each page and image, setting a specific quality level (80%). This can reduce file size while maintaining reasonable visual quality.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/file-size.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfWriter\n\nwriter = PdfWriter(clone_from=\"example.pdf\")\n\nfor page in writer.pages:\n    for img in page.images:\n        img.replace(img.image, quality=80)\n\nwith open(\"out.pdf\", \"wb\") as f:\n    writer.write(f)\n```\n\n----------------------------------------\n\nTITLE: Writing PDF Metadata with PyPDF\nDESCRIPTION: This snippet illustrates how to write metadata to a PDF file using the PdfWriter class in PyPDF. It creates a new PDF by copying pages from an existing one and adds custom metadata entries like Author, Producer, Title, etc. The metadata includes current date/time formatted as a string, and the resulting PDF is saved to a new file.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom pypdf import PdfReader, PdfWriter\n\nreader = PdfReader(\"example.pdf\")\nwriter = PdfWriter()\n\n# Add all pages to the writer\nfor page in reader.pages:\n    writer.add_page(page)\n\n# If you want to add the old metadata, include these two lines\nif reader.metadata is not None:\n    writer.add_metadata(reader.metadata)\n\n# Format the current date and time for the metadata\nutc_time = \"-05'00'\"  # UTC time optional\ntime = datetime.now().strftime(f\"D\\072%Y%m%d%H%M%S{utc_time}\")\n\n# Add the new metadata\nwriter.add_metadata(\n    {\n        \"/Author\": \"Martin\",\n        \"/Producer\": \"Libre Writer\",\n        \"/Title\": \"Title\",\n        \"/Subject\": \"Subject\",\n        \"/Keywords\": \"Keywords\",\n        \"/CreationDate\": time,\n        \"/ModDate\": time,\n        \"/Creator\": \"Creator\",\n        \"/CustomField\": \"CustomField\",\n    }\n)\n\n# Save the new PDF to a file\nwith open(\"meta-pdf.pdf\", \"wb\") as f:\n    writer.write(f)\n```\n\n----------------------------------------\n\nTITLE: Reading PDF from AWS S3\nDESCRIPTION: Demonstrates how to read a PDF directly from AWS S3 using boto3 and BytesIO streaming. Converts the S3 object to a byte stream for PdfReader.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/streaming-data.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom io import BytesIO\n\nimport boto3\nfrom pypdf import PdfReader\n\n\ns3 = boto3.client(\"s3\")\nobj = s3.get_object(Body=csv_buffer.getvalue(), Bucket=\"my-bucket\", Key=\"my/doc.pdf\")\nreader = PdfReader(BytesIO(obj[\"Body\"].read()))\n```\n\n----------------------------------------\n\nTITLE: Adding URL Links to PDF Documents with pypdf\nDESCRIPTION: This code demonstrates how to add a clickable URL link to a PDF document. It creates a rectangular area that serves as a hyperlink to an external website. The annotation is added to the first page of an existing PDF and the modified document is saved to disk.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\nfrom pypdf.annotations import Link\n\npdf_path = os.path.join(RESOURCE_ROOT, \"crazyones.pdf\")\nreader = PdfReader(pdf_path)\npage = reader.pages[0]\nwriter = PdfWriter()\nwriter.add_page(page)\n\n# Add the link\nannotation = Link(\n    rect=(50, 550, 200, 650),\n    url=\"https://martin-thoma.com/\",\n)\nwriter.add_annotation(page_number=0, annotation=annotation)\n\n# Write the annotated file to disk\nwith open(\"annotated-pdf.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Basic PDF Watermarking with merge_page in PyPDF\nDESCRIPTION: Demonstrates how to add a watermark to a PDF document using merge_page. This method overlays or underlays content from another PDF without transformation. The over parameter controls whether the content appears as a stamp (over=True) or watermark (over=False).\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/add-watermark.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\n\nstamp = PdfReader(\"bg.pdf\").pages[0]\nwriter = PdfWriter(clone_from=\"source.pdf\")\nfor page in writer.pages:\n    page.merge_page(stamp, over=False)  # here set to False for watermarking\n\nwriter.write(\"out.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Adding Text Highlighting Annotations in PDF with pypdf\nDESCRIPTION: This code demonstrates how to highlight text in a PDF document. It requires specifying quad points that define the exact area to highlight. The example creates a highlight annotation over a rectangular area and adds it to the first page of an existing PDF document.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\nfrom pypdf.annotations import Highlight\nfrom pypdf.generic import ArrayObject, FloatObject\n\npdf_path = os.path.join(RESOURCE_ROOT, \"crazyones.pdf\")\nreader = PdfReader(pdf_path)\npage = reader.pages[0]\nwriter = PdfWriter()\nwriter.add_page(page)\n\nrect = (50, 550, 200, 650)\nquad_points = [rect[0], rect[1], rect[2], rect[1], rect[0], rect[3], rect[2], rect[3]]\n\n# Add the highlight\nannotation = Highlight(\n    rect=rect,\n    quad_points=ArrayObject([FloatObject(quad_point) for quad_point in quad_points]),\n)\nwriter.add_annotation(page_number=0, annotation=annotation)\n\n# Write the annotated file to disk\nwith open(\"annotated-pdf.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Creating FreeText Annotations in PDF with pypdf\nDESCRIPTION: This code shows how to add a free text annotation to a PDF. It creates a text box with customized formatting including font, size, colors, and text alignment. The annotation is marked as printable using flags and added to the first page of an existing PDF.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\nfrom pypdf.annotations import FreeText\n\n# Fill the writer with the pages you want\npdf_path = os.path.join(RESOURCE_ROOT, \"crazyones.pdf\")\nreader = PdfReader(pdf_path)\npage = reader.pages[0]\nwriter = PdfWriter()\nwriter.add_page(page)\n\n# Create the annotation and add it\nannotation = FreeText(\n    text=\"Hello World\\nThis is the second line!\",\n    rect=(50, 550, 200, 650),\n    font=\"Arial\",\n    bold=True,\n    italic=True,\n    font_size=\"20pt\",\n    font_color=\"00ff00\",\n    border_color=\"0000ff\",\n    background_color=\"cdcdcd\",\n)\n\n# Set annotation flags to 4 for printable annotations.\n# See \"AnnotationFlag\" for other options, e.g. hidden etc.\nannotation.flags = 4\n\nwriter.add_annotation(page_number=0, annotation=annotation)\n\n# Write the annotated file to disk\nwith open(\"annotated-pdf.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Reading PDF Form Fields with pypdf\nDESCRIPTION: Demonstrates how to read form fields from a PDF file using PdfReader. Shows both methods to get specific text fields or all form fields.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/forms.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"form.pdf\")\nfields = reader.get_form_text_fields()\nfields == {\"key\": \"value\", \"key2\": \"value2\"}\n\n# You can also get all fields:\nfields = reader.get_fields()\n```\n\n----------------------------------------\n\nTITLE: Filtering PDF Text by Position using Visitor Functions in PyPDF\nDESCRIPTION: Shows how to extract text from specific areas of a PDF by using visitor functions to filter out header and footer content based on y-coordinate positions.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/extract-text.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"GeoBase_NHNC1_Data_Model_UML_EN.pdf\")\npage = reader.pages[3]\n\nparts = []\n\n\ndef visitor_body(text, cm, tm, font_dict, font_size):\n    y = cm[5]\n    if 50 < y < 720:\n        parts.append(text)\n\n\npage.extract_text(visitor_text=visitor_body)\ntext_body = \"\".join(parts)\n\nprint(text_body)\n```\n\n----------------------------------------\n\nTITLE: Using append Method with Page Selection and Outlines\nDESCRIPTION: Demonstrates how to use the extended append method in PdfWriter to select specific pages and create outlines. Shows examples of appending specific page ranges and individual pages.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/merging-pdfs.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Append the first 10 pages of source.pdf\nwriter.append(\"source.pdf\", (0, 10))\n\n# Append the first and 10th page from reader and create an outline\nwriter.append(reader, \"page 1 and 10\", [0, 9])\n```\n\n----------------------------------------\n\nTITLE: Advanced PDF Merging with Page Selection\nDESCRIPTION: Shows more advanced merging options including selecting specific page ranges, inserting pages at specific positions, and appending entire documents. This example demonstrates how to work with file objects directly.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/merging-pdfs.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfWriter\n\nmerger = PdfWriter()\n\ninput1 = open(\"document1.pdf\", \"rb\")\ninput2 = open(\"document2.pdf\", \"rb\")\ninput3 = open(\"document3.pdf\", \"rb\")\n\n# Add the first 3 pages of input1 document to output\nmerger.append(fileobj=input1, pages=(0, 3))\n\n# Insert the first page of input2 into the output beginning after the second page\nmerger.merge(position=2, fileobj=input2, pages=(0, 1))\n\n# Append entire input3 document to the end of the output document\nmerger.append(input3)\n\n# Write to an output PDF document\noutput = open(\"document-output.pdf\", \"wb\")\nmerger.write(output)\n\n# Close file descriptors\nmerger.close()\noutput.close()\n```\n\n----------------------------------------\n\nTITLE: Extracting PDF Attachments Using Dictionary Approach in Python\nDESCRIPTION: This snippet demonstrates how to extract all attachments from a PDF file using PyPDF's dictionary-based approach. It iterates through the attachments dictionary, handles multiple files with the same name by appending an index, and writes each attachment to disk.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/extract-attachments.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"example.pdf\")\n\nfor name, content_list in reader.attachments.items():\n    for i, content in enumerate(content_list):\n        with open(f\"{name}-{i}\", \"wb\") as fp:\n            fp.write(content)\n```\n\n----------------------------------------\n\nTITLE: Decrypting PDFs with pypdf using a password\nDESCRIPTION: This snippet shows how to decrypt a password-protected PDF file using pypdf. It checks if the PDF is encrypted, attempts to decrypt it with the provided password, and then creates a new decrypted PDF file.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/encryption-decryption.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\n\nreader = PdfReader(\"encrypted-pdf.pdf\")\n\nif reader.is_encrypted:\n    reader.decrypt(\"my-secret-password\")\n\nwriter = PdfWriter(clone_from=reader)\n\n# Save the new PDF to a file\nwith open(\"decrypted-pdf.pdf\", \"wb\") as f:\n    writer.write(f)\n```\n\n----------------------------------------\n\nTITLE: Extracting File Attachments from PDF Annotations with PyPDF\nDESCRIPTION: This code snippet shows how to extract file attachments from PDF annotations using PyPDF. It filters annotations by subtype and stores the attachment data in a dictionary.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/reading-pdf-annotations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"example.pdf\")\n\nattachments = {}\nfor page in reader.pages:\n    if \"/Annots\" in page:\n        for annotation in page[\"/Annots\"]:\n            subtype = annotation.get_object()[\"/Subtype\"]\n            if subtype == \"/FileAttachment\":\n                fileobj = annotation.get_object()[\"/FS\"]\n                attachments[fileobj[\"/F\"]] = fileobj[\"/EF\"][\"/F\"].get_data()\n```\n\n----------------------------------------\n\nTITLE: Adding Rectangle Annotations to PDF with pypdf\nDESCRIPTION: This code demonstrates creating a rectangular annotation on a PDF document using the Rectangle class from pypdf. It defines a rectangle with specific coordinates and adds it to the first page of an existing PDF. The code mentions that you can also create a filled rectangle using the interior_color parameter.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\nfrom pypdf.annotations import Rectangle\n\npdf_path = os.path.join(RESOURCE_ROOT, \"crazyones.pdf\")\nreader = PdfReader(pdf_path)\npage = reader.pages[0]\nwriter = PdfWriter()\nwriter.add_page(page)\n\n# Add the rectangle\nannotation = Rectangle(\n    rect=(50, 550, 200, 650),\n)\nwriter.add_annotation(page_number=0, annotation=annotation)\n\n# Write the annotated file to disk\nwith open(\"annotated-pdf.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: PDF Content and Page Scaling\nDESCRIPTION: Demonstrates different methods for scaling PDF content and pages, including scaling both together or separately\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/cropping-and-transforming.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\n\n# Read the input\nreader = PdfReader(\"resources/side-by-side-subfig.pdf\")\npage = reader.pages[0]\n\n# Scale\npage.scale_by(0.5)\n\n# Write the result to a file\nwriter = PdfWriter()\nwriter.add_page(page)\nwriter.write(\"out.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Adding Polygon Annotations to PDF with pypdf\nDESCRIPTION: This code demonstrates adding a polygon annotation to a PDF document. It creates a closed shape by connecting specified vertices and adds it to the first page of an existing PDF file. The annotated PDF is then saved to disk as a new file.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\nfrom pypdf.annotations import Polygon\n\npdf_path = os.path.join(RESOURCE_ROOT, \"crazyones.pdf\")\nreader = PdfReader(pdf_path)\npage = reader.pages[0]\nwriter = PdfWriter()\nwriter.add_page(page)\n\n# Add the line\nannotation = Polygon(\n    vertices=[(50, 550), (200, 650), (70, 750), (50, 700)],\n)\nwriter.add_annotation(page_number=0, annotation=annotation)\n\n# Write the annotated file to disk\nwith open(\"annotated-pdf.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Basic PDF Cropping and Rotation Operations with PyPDF\nDESCRIPTION: Demonstrates basic PDF operations including adding pages unchanged, rotating pages by 90 degrees, and cropping pages to half size using PyPDF Reader and Writer\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/cropping-and-transforming.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\n\nreader = PdfReader(\"example.pdf\")\nwriter = PdfWriter()\n\n# Add page 1 from reader to output document, unchanged.\nwriter.add_page(reader.pages[0])\n\n# Add page 2 from reader, but rotated clockwise 90 degrees.\nwriter.add_page(reader.pages[1].rotate(90))\n\n# Add page 3 from reader, but crop it to half size.\npage3 = reader.pages[2]\npage3.mediabox.upper_right = (\n    page3.mediabox.right / 2,\n    page3.mediabox.top / 2,\n)\nwriter.add_page(page3)\n\n# Write to pypdf-output.pdf.\nwith open(\"pypdf-output.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions with Fallback in pypdf\nDESCRIPTION: This snippet demonstrates how to handle exceptions in pypdf by attempting to extract text and falling back to pdfminer.six if an error occurs. It's useful for applications where text extraction is critical and alternative methods should be tried on failure.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/suppress-warnings.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\nfrom pdfminer.high_level import extract_text as fallback_text_extraction\n\ntext = \"\"\ntry:\n    reader = PdfReader(\"example.pdf\")\n    for page in reader.pages:\n        text += page.extract_text()\nexcept Exception as exc:\n    text = fallback_text_extraction(\"example.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Applying Lossless Compression to PDF Content Streams with pypdf\nDESCRIPTION: Applies lossless FlateDecode compression to each page's content streams. This CPU-intensive operation can significantly reduce file size (up to 70% in some cases) without affecting the visual quality.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/file-size.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfWriter\n\nwriter = PdfWriter(clone_from=\"example.pdf\")\n\nfor page in writer.pages:\n    page.compress_content_streams()  # This is CPU intensive!\n\nwith open(\"out.pdf\", \"wb\") as f:\n    writer.write(f)\n```\n\n----------------------------------------\n\nTITLE: Advanced PDF Stamping with Transformations in PyPDF\nDESCRIPTION: Demonstrates how to add a stamp to a PDF with transformations like scaling, rotation, or translation. Uses merge_transformed_page with the Transformation class to manipulate the stamp before adding it to the content pages.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/add-watermark.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\nfrom typing import List, Union\n\nfrom pypdf import PdfReader, PdfWriter, Transformation\n\n\ndef stamp(\n    content_pdf: Union[Path, str],\n    stamp_pdf: Union[Path, str],\n    pdf_result: Union[Path, str],\n    page_indices: Union[None, List[int]] = None,\n):\n    stamp_page = PdfReader(stamp_pdf).pages[0]\n\n    writer = PdfWriter()\n    # page_indices can be a List(array) of page, tuples are for range definition\n    reader = PdfReader(content_pdf)\n    writer.append(reader, pages=page_indices)\n\n    for content_page in writer.pages:\n        content_page.merge_transformed_page(\n            stamp_page,\n            Transformation().scale(0.5),\n        )\n\n    writer.write(pdf_result)\n\n\nstamp(\"example.pdf\", \"stamp.pdf\", \"out.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Highlight Annotations from PDF with PyPDF\nDESCRIPTION: This code snippet demonstrates how to extract highlight annotations from a PDF file using PyPDF. It filters annotations by subtype and extracts the coordinates of highlighted areas.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/reading-pdf-annotations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"example.pdf\")\n\nfor page in reader.pages:\n    if \"/Annots\" in page:\n        for annotation in page[\"/Annots\"]:\n            subtype = annotation.get_object()[\"/Subtype\"]\n            if subtype == \"/Highlight\":\n                coords = annotation.get_object()[\"/QuadPoints\"]\n                x1, y1, x2, y2, x3, y3, x4, y4 = coords\n```\n\n----------------------------------------\n\nTITLE: Converting and Stamping Images in PDF with PyPDF and Pillow\nDESCRIPTION: Demonstrates how to convert an image to PDF format using Pillow and then use it as a stamp in a PDF document. This allows direct use of image files as stamps without first converting them to PDF externally.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/add-watermark.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom io import BytesIO\nfrom pathlib import Path\nfrom typing import List, Union\n\nfrom PIL import Image\nfrom pypdf import PageRange, PdfReader, PdfWriter, Transformation\n\n\ndef image_to_pdf(stamp_img: Union[Path, str]) -> PdfReader:\n    img = Image.open(stamp_img)\n    img_as_pdf = BytesIO()\n    img.save(img_as_pdf, \"pdf\")\n    return PdfReader(img_as_pdf)\n\n\ndef stamp_img(\n    content_pdf: Union[Path, str],\n    stamp_img: Union[Path, str],\n    pdf_result: Union[Path, str],\n    page_indices: Union[PageRange, List[int], None] = None,\n):\n    # Convert the image to a PDF\n    stamp_pdf = image_to_pdf(stamp_img)\n\n    # Then use the same stamp code from above\n    stamp_page = stamp_pdf.pages[0]\n\n    writer = PdfWriter()\n\n    reader = PdfReader(content_pdf)\n    writer.append(reader, pages=page_indices)\n    for content_page in writer.pages:\n        content_page.merge_transformed_page(\n            stamp_page,\n            Transformation(),\n        )\n\n    with open(pdf_result, \"wb\") as fp:\n        writer.write(fp)\n\n\nstamp_img(\"example.pdf\", \"example.png\", \"out.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Creating Popup Annotations for Text in PDF with pypdf\nDESCRIPTION: This code shows how to create popup annotations associated with text annotations in a PDF. It creates a text annotation with an associated popup window that can be opened. The code demonstrates the parent-child relationship between the text annotation and its popup window.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf.annotations import Popup, Text\n\n# Arrange\nwriter = pypdf.PdfWriter()\nwriter.append(os.path.join(RESOURCE_ROOT, \"crazyones.pdf\"), [0])\n\n# Act\ntext_annotation = writer.add_annotation(\n    0,\n    Text(\n        text=\"Hello World\\nThis is the second line!\",\n        rect=(50, 550, 200, 650),\n        open=True,\n    ),\n)\n\npopup_annotation = Popup(\n    rect=(50, 550, 200, 650),\n    open=True,\n    parent=text_annotation,  # use the output of add_annotation\n)\n\nwriter.write(\"annotated-pdf-popup.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Page Copy and Transform\nDESCRIPTION: Shows how to create multiple copies of a PDF page with transformations for creating business cards layout\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/cropping-and-transforming.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PaperSize, PdfReader, PdfWriter, Transformation\n\n# Read source file\nreader = PdfReader(\"nup-source.pdf\")\nsourcepage = reader.pages[0]\n\n# Create a destination file, and add a blank page to it\nwriter = PdfWriter()\ndestpage = writer.add_blank_page(width=PaperSize.A4.height, height=PaperSize.A4.width)\n\n# Copy source page to destination page, several times\nfor x in range(4):\n    for y in range(4):\n        destpage.merge_transformed_page(\n            sourcepage,\n            Transformation().translate(\n                x * sourcepage.mediabox.width,\n                y * sourcepage.mediabox.height,\n            ),\n        )\n\n# Write file\nwith open(\"nup-dest2.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Converting PDF Elements to SVG using PyPDF and SVGWrite\nDESCRIPTION: Demonstrates how to convert PDF elements (rectangles and text) into an SVG file by using visitor functions to capture graphical operations and text extraction.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/extract-text.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\nimport svgwrite\n\nreader = PdfReader(\"GeoBase_NHNC1_Data_Model_UML_EN.pdf\")\npage = reader.pages[2]\n\ndwg = svgwrite.Drawing(\"GeoBase_test.svg\", profile=\"tiny\")\n\n\ndef visitor_svg_rect(op, args, cm, tm):\n    if op == b\"re\":\n        (x, y, w, h) = (args[i].as_numeric() for i in range(4))\n        dwg.add(dwg.rect((x, y), (w, h), stroke=\"red\", fill_opacity=0.05))\n\n\ndef visitor_svg_text(text, cm, tm, font_dict, font_size):\n    (x, y) = (cm[4], cm[5])\n    dwg.add(dwg.text(text, insert=(x, y), fill=\"blue\"))\n\n\npage.extract_text(\n    visitor_operand_before=visitor_svg_rect, visitor_text=visitor_svg_text\n)\ndwg.save()\n```\n\n----------------------------------------\n\nTITLE: Basic PDF Streaming with BytesIO in Python\nDESCRIPTION: Demonstrates basic streaming operations using BytesIO for reading and writing PDFs without saving to disk. Uses PdfReader and PdfWriter for PDF operations with in-memory byte streams.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/streaming-data.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom io import BytesIO\n\n# Prepare example\nwith open(\"example.pdf\", \"rb\") as fh:\n    bytes_stream = BytesIO(fh.read())\n\n# Read from bytes_stream\nreader = PdfReader(bytes_stream)\n\n# Write to bytes_stream\nwriter = PdfWriter()\nwith BytesIO() as bytes_stream:\n    writer.write(bytes_stream)\n```\n\n----------------------------------------\n\nTITLE: Reading General PDF Annotations with PyPDF\nDESCRIPTION: This code snippet demonstrates how to read general annotations from a PDF file using PyPDF. It iterates through all pages and annotations, printing the subtype and location of each annotation.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/reading-pdf-annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"annotated.pdf\")\n\nfor page in reader.pages:\n    if \"/Annots\" in page:\n        for annotation in page[\"/Annots\"]:\n            obj = annotation.get_object()\n            print({\"subtype\": obj[\"/Subtype\"], \"location\": obj[\"/Rect\"]})\n```\n\n----------------------------------------\n\nTITLE: Handling Rotated Pages During Merging\nDESCRIPTION: Shows how to properly handle rotated pages when merging documents by transferring rotation to content before merging with background pages.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/merging-pdfs.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor page in writer.pages:\n    if page.rotation != 0:\n        page.transfer_rotation_to_content()\n    page.merge_page(background, over=False)\n```\n\n----------------------------------------\n\nTITLE: Extracting PDF Attachments Using Object-Oriented Approach in Python\nDESCRIPTION: This snippet shows how to extract attachments from a PDF using PyPDF's object-oriented approach. It accesses the attachment_list property which provides attachment objects with additional metadata such as name, alternative_name, and content properties.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/extract-attachments.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"example.pdf\")\n\nfor attachment in reader.attachment_list:\n    print(attachment.name, attachment.alternative_name, attachment.content)\n```\n\n----------------------------------------\n\nTITLE: Implementing Ligature Replacement in Python for PDF Text Post-Processing\nDESCRIPTION: A function that replaces typographic ligatures with their equivalent standard character combinations. It uses a dictionary mapping ligature characters to their multi-character equivalents and performs simple string replacement.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/post-processing-in-text-extraction.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef replace_ligatures(text: str) -> str:\n    ligatures = {\n        \"ﬀ\": \"ff\",\n        \"ﬁ\": \"fi\",\n        \"ﬂ\": \"fl\",\n        \"ﬃ\": \"ffi\",\n        \"ﬄ\": \"ffl\",\n        \"ﬅ\": \"ft\",\n        \"ﬆ\": \"st\",\n        # \"Ꜳ\": \"AA\",\n        # \"Æ\": \"AE\",\n        \"ꜳ\": \"aa\",\n    }\n    for search, replace in ligatures.items():\n        text = text.replace(search, replace)\n    return text\n```\n\n----------------------------------------\n\nTITLE: Removing Images from PDF using pypdf\nDESCRIPTION: Uses PdfWriter to clone a PDF and remove all images from it, then saves the result to a new file. This technique can significantly reduce file size when PDFs contain many images.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/file-size.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfWriter\n\nwriter = PdfWriter(clone_from=\"example.pdf\")\n\nwriter.remove_images()\n\nwith open(\"out.pdf\", \"wb\") as f:\n    writer.write(f)\n```\n\n----------------------------------------\n\nTITLE: Adding Blank Pages with PaperSize in PyPDF\nDESCRIPTION: Demonstrates how to add a blank page to a PDF document using the PaperSize class to specify standard dimensions. The example creates a new PdfWriter from an existing file, adds an A8-sized blank page, and writes the result to a new file.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/PaperSize.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PaperSize, PdfWriter\n\nwriter = PdfWriter(clone_from=\"sample.pdf\")\nwriter.add_blank_page(PaperSize.A8.width, PaperSize.A8.height)\nwith open(\"output.pdf\", \"wb\") as output_stream:\n    writer.write(output_stream)\n```\n\n----------------------------------------\n\nTITLE: Implementing Header/Footer Removal for PDF Text Post-Processing in Python\nDESCRIPTION: A function to remove page labels (typically found in headers/footers) from extracted text. The code searches for page labels at the beginning and end of each page's text and removes them, with limitations for dynamic headers and special page layouts.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/post-processing-in-text-extraction.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef remove_footer(extracted_texts: list[str], page_labels: list[str]):\n    def remove_page_labels(extracted_texts, page_labels):\n        processed = []\n        for text, label in zip(extracted_texts, page_labels):\n            text_left = text.lstrip()\n            if text_left.startswith(label):\n                text = text_left[len(label) :]\n\n            text_right = text.rstrip()\n            if text_right.endswith(label):\n                text = text_right[: -len(label)]\n\n            processed.append(text)\n        return processed\n\n    extracted_texts = remove_page_labels(extracted_texts, page_labels)\n    return extracted_texts\n```\n\n----------------------------------------\n\nTITLE: Adding File Attachments to PDF Using pypdf\nDESCRIPTION: This code demonstrates how to add a file attachment to a PDF document. It creates a blank page and attaches binary data (typically from a file) to the PDF. The attachment is named \"smile.png\" and the modified PDF is saved as \"output.pdf\".\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfWriter\n\nwriter = PdfWriter()\nwriter.add_blank_page(width=200, height=200)\n\ndata = b\"any bytes - typically read from a file\"\nwriter.add_attachment(\"smile.png\", data)\n\nwith open(\"output.pdf\", \"wb\") as output_stream:\n    writer.write(output_stream)\n```\n\n----------------------------------------\n\nTITLE: Plain PDF Merge\nDESCRIPTION: Demonstrates merging two PDF pages without any transformations\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/cropping-and-transforming.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter, Transformation\n\n# Get the data\nreader_base = PdfReader(\"labeled-edges-center-image.pdf\")\npage_base = reader_base.pages[0]\n\nreader = PdfReader(\"box.pdf\")\npage_box = reader.pages[0]\n\npage_base.merge_page(page_box)\n\n# Write the result back\nwriter = PdfWriter()\nwriter.add_page(page_base)\nwith open(\"merged-foo.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Reading PDF Metadata with PyPDF\nDESCRIPTION: This snippet demonstrates how to read metadata from a PDF file using the PdfReader class in PyPDF. The metadata attributes (title, author, subject, etc.) are accessed via the `metadata` property of the PdfReader object. The example shows accessing and printing common metadata fields, and notes that any value may be None.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"example.pdf\")\n\nmeta = reader.metadata\n\n# All of the following could be None!\nprint(meta.title)\nprint(meta.author)\nprint(meta.subject)\nprint(meta.creator)\nprint(meta.producer)\nprint(meta.creation_date)\nprint(meta.modification_date)\n```\n\n----------------------------------------\n\nTITLE: Setting Viewer Preferences in PDF using PyPDF\nDESCRIPTION: This code snippet demonstrates how to create and set various viewer preferences in a PDF file using PyPDF. It covers settings like hiding toolbar, menubar, window UI, fitting and centering the window, as well as setting page modes, direction, view areas, print settings, and more.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/viewer-preferences.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfWriter\nfrom pypdf.generic import ArrayObject, NumberObject\n\nwriter = PdfWriter()\n\nwriter.create_viewer_preferences()\n\n# /HideToolbar\nwriter.viewer_preferences.hide_toolbar = True\n# /HideMenubar\nwriter.viewer_preferences.hide_menubar = True\n# /HideWindowUI\nwriter.viewer_preferences.hide_windowui = True\n# /FitWindow\nwriter.viewer_preferences.fit_window = True\n# /CenterWindow\nwriter.viewer_preferences.center_window = True\n# /DisplayDocTitle\nwriter.viewer_preferences.display_doctitle = True\n\n# /NonFullScreenPageMode\nwriter.viewer_preferences.non_fullscreen_pagemode = \"/UseNone\"  # default\nwriter.viewer_preferences.non_fullscreen_pagemode = \"/UseOutlines\"\nwriter.viewer_preferences.non_fullscreen_pagemode = \"/UseThumbs\"\nwriter.viewer_preferences.non_fullscreen_pagemode = \"/UseOC\"\n\n# /Direction\nwriter.viewer_preferences.direction = \"/L2R\"  # default\nwriter.viewer_preferences.direction = \"/R2L\"\n\n# /ViewArea\nwriter.viewer_preferences.view_area = \"/CropBox\"\n# /ViewClip\nwriter.viewer_preferences.view_clip = \"/CropBox\"\n# /PrintArea\nwriter.viewer_preferences.print_area = \"/CropBox\"\n# /PrintClip\nwriter.viewer_preferences.print_clip = \"/CropBox\"\n\n# /PrintScaling\nwriter.viewer_preferences.print_scaling = \"/None\"\nwriter.viewer_preferences.print_scaling = \"/AppDefault\"  # default according to PDF spec\n\n# /Duplex\nwriter.viewer_preferences.duplex = \"/Simplex\"\nwriter.viewer_preferences.duplex = \"/DuplexFlipShortEdge\"\nwriter.viewer_preferences.duplex = \"/DuplexFlipLongEdge\"\n\n# /PickTrayByPDFSize\nwriter.viewer_preferences.pick_tray_by_pdfsize = True\n# /PrintPageRange\nwriter.viewer_preferences.print_pagerange = ArrayObject(\n    [NumberObject(\"1\"), NumberObject(\"10\"), NumberObject(\"20\"), NumberObject(\"30\")]\n)\n# /NumCopies\nwriter.viewer_preferences.num_copies = 2\n\nfor i in range(40):\n    writer.add_blank_page(10, 10)\n\nwith open(\"output.pdf\", \"wb\") as output_stream:\n    writer.write(output_stream)\n```\n\n----------------------------------------\n\nTITLE: Updating PDF Metadata with PyPDF\nDESCRIPTION: This snippet demonstrates how to update the metadata of a PDF file using the PdfWriter class in PyPDF. The example showcases three methods for updating metadata: adding specific key-value pairs, clearing all metadata while keeping the metadata entry, and replacing the entire metadata with a new set of key-value pairs.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfWriter\n\nwriter = PdfWriter(clone_from=\"example.pdf\")\n\n# Change some values\nwriter.add_metadata(\n    {\n        \"/Author\": \"Martin\",\n        \"/Producer\": \"Libre Writer\",\n        \"/Title\": \"Title\",\n    }\n)\n\n# Clear all data but keep the entry in PDF\nwriter.metadata = {}\n\n# Replace all entries with new set of entries\nwriter.metadata = {\n    \"/Author\": \"Martin\",\n    \"/Producer\": \"Libre Writer\",\n}\n\n# Save the new PDF to a file\nwith open(\"meta-pdf.pdf\", \"wb\") as f:\n    writer.write(f)\n```\n\n----------------------------------------\n\nTITLE: Extracting Text Annotations from PDF with PyPDF\nDESCRIPTION: This code snippet shows how to extract text annotations from a PDF file using PyPDF. It filters annotations by subtype and prints the contents of text annotations.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/reading-pdf-annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"example.pdf\")\n\nfor page in reader.pages:\n    if \"/Annots\" in page:\n        for annotation in page[\"/Annots\"]:\n            subtype = annotation.get_object()[\"/Subtype\"]\n            if subtype == \"/Text\":\n                print(annotation.get_object()[\"/Contents\"])\n```\n\n----------------------------------------\n\nTITLE: Removing PDF Metadata with PyPDF\nDESCRIPTION: This snippet illustrates how to remove the entire metadata entry from a PDF file using the PdfWriter class in PyPDF. Setting the `metadata` property to None effectively removes the /Info entry, stripping the PDF of its metadata. The modified PDF is then saved to a new file.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/metadata.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfWriter\n\nwriter = PdfWriter(\"example.pdf\")\n\n# Remove Metadata (/Info entry)\nwriter.metadata = None\n\n# Save the new PDF to a file\nwith open(\"meta-pdf.pdf\", \"wb\") as f:\n    writer.write(f)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Level in pypdf\nDESCRIPTION: This snippet demonstrates how to configure the logging level for pypdf to reduce noise in the logs. Setting a higher log level (like ERROR) filters out less severe messages like INFO and WARNING.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/suppress-warnings.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogger = logging.getLogger(\"pypdf\")\nlogger.setLevel(logging.ERROR)\n```\n\n----------------------------------------\n\nTITLE: Extracting PDF Form Fields from Fields Array\nDESCRIPTION: Demonstrates the standard method of extracting form fields from the PDF's Fields array using PdfReader.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/forms.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\n\nreader = PdfReader(\"form.pdf\")\nfields = reader.get_fields()\n```\n\n----------------------------------------\n\nTITLE: Implementing Dehyphenation for PDF Text Post-Processing in Python\nDESCRIPTION: A set of functions that remove hyphens at the end of lines and join word fragments across line breaks. The code handles line-by-line processing with limitations for special cases like compound words, mathematical expressions, and hyphenated names.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/post-processing-in-text-extraction.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\n\ndef remove_hyphens(text: str) -> str:\n    \"\"\"\n\n    This fails for:\n    * Natural dashes: well-known, self-replication, use-cases, non-semantic,\n                      Post-processing, Window-wise, viewpoint-dependent\n    * Trailing math operands: 2 - 4\n    * Names: Lopez-Ferreras, VGG-19, CIFAR-100\n    \"\"\"\n    lines = [line.rstrip() for line in text.split(\"\\n\")]\n\n    # Find dashes\n    line_numbers = []\n    for line_no, line in enumerate(lines[:-1]):\n        if line.endswith(\"-\"):\n            line_numbers.append(line_no)\n\n    # Replace\n    for line_no in line_numbers:\n        lines = dehyphenate(lines, line_no)\n\n    return \"\\n\".join(lines)\n\n\ndef dehyphenate(lines: List[str], line_no: int) -> List[str]:\n    next_line = lines[line_no + 1]\n    word_suffix = next_line.split(\" \")[0]\n\n    lines[line_no] = lines[line_no][:-1] + word_suffix\n    lines[line_no + 1] = lines[line_no + 1][len(word_suffix) :]\n    return lines\n```\n\n----------------------------------------\n\nTITLE: PDF Merge with Rotation\nDESCRIPTION: Shows how to merge PDF pages with a 45-degree rotation transformation\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/cropping-and-transforming.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter, Transformation\n\n# Get the data\nreader_base = PdfReader(\"labeled-edges-center-image.pdf\")\npage_base = reader_base.pages[0]\n\nreader = PdfReader(\"box.pdf\")\npage_box = reader.pages[0]\n\n# Apply the transformation\ntransformation = Transformation().rotate(45)\npage_box.add_transformation(transformation)\npage_base.merge_page(page_box)\n\n# Write the result back\nwriter = PdfWriter()\nwriter.add_page(page_base)\nwith open(\"merged-foo.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Adding Line Annotations to PDF with pypdf\nDESCRIPTION: This snippet demonstrates adding a line annotation to a PDF document. It creates a line between two points (p1 and p2) with associated text and a bounding rectangle. The annotation is added to the first page of an existing PDF file.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\nfrom pypdf.annotations import Line\n\npdf_path = os.path.join(RESOURCE_ROOT, \"crazyones.pdf\")\nreader = PdfReader(pdf_path)\npage = reader.pages[0]\nwriter = PdfWriter()\nwriter.add_page(page)\n\n# Add the line\nannotation = Line(\n    text=\"Hello World\\nLine2\",\n    rect=(50, 550, 200, 650),\n    p1=(50, 550),\n    p2=(200, 650),\n)\nwriter.add_annotation(page_number=0, annotation=annotation)\n\n# Write the annotated file to disk\nwith open(\"annotated-pdf.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Extracting PDF Form Fields from Page Annotations\nDESCRIPTION: Shows an alternative method of extracting form fields by iterating through page annotations and filtering for Widget types.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/forms.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader\nfrom pypdf.constants import AnnotationDictionaryAttributes\n\nreader = PdfReader(\"form.pdf\")\nfields = []\nfor page in reader.pages:\n    for annot in page.annotations:\n        annot = annot.get_object()\n        if annot[AnnotationDictionaryAttributes.Subtype] == \"/Widget\":\n            fields.append(annot)\n```\n\n----------------------------------------\n\nTITLE: Adding Print Dialog JavaScript to PDF with PyPDF\nDESCRIPTION: Demonstrates how to add JavaScript code to a PDF that automatically launches the print dialog when the document is opened. The script clones an existing PDF, adds the JavaScript action, and saves the modified version to a new file.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/add-javascript.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfWriter\n\nwriter = PdfWriter(clone_from=\"example.pdf\")\n\n# Add JavaScript to launch the print window on opening this PDF.\nwriter.add_js(\"this.print({bUI:true,bSilent:false,bShrinkToFit:true});\")\n\n# Write to pypdf-output.pdf.\nwith open(\"pypdf-output.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Installing pypdf with crypto support\nDESCRIPTION: Installation command for pypdf with additional cryptography dependencies for AES encryption/decryption support.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install pypdf[crypto]\n```\n\n----------------------------------------\n\nTITLE: PDF Page Rotation\nDESCRIPTION: Shows how to rotate a PDF page by 90 degrees using the rotate method, which preserves mediabox/cropbox alignment\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/cropping-and-transforming.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\n\nreader = PdfReader(\"input.pdf\")\nwriter = PdfWriter()\n\nwriter.add_page(reader.pages[0])\nwriter.pages[0].rotate(90)\n\nwith open(\"output.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Page Links in PDF with pypdf\nDESCRIPTION: This snippet shows how to add an internal link in a PDF document that navigates to another page within the same document. It creates a clickable area that jumps to page 4 (index 3) with specific fitting parameters. The annotation is added to the first page of an existing PDF.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\nfrom pypdf.annotations import Link\nfrom pypdf.generic import Fit\n\npdf_path = os.path.join(RESOURCE_ROOT, \"crazyones.pdf\")\nreader = PdfReader(pdf_path)\npage = reader.pages[0]\nwriter = PdfWriter()\nwriter.add_page(page)\n\n# Add the link\nannotation = Link(\n    rect=(50, 550, 200, 650),\n    target_page_index=3,\n    fit=Fit(fit_type=\"/FitH\", fit_args=(123,)),\n)\nwriter.add_annotation(page_number=0, annotation=annotation)\n\n# Write the annotated file to disk\nwith open(\"annotated-pdf.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Installing pypdf with all optional dependencies\nDESCRIPTION: Command to install pypdf with all optional dependencies including cryptography and image processing capabilities.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install pypdf[full]\n```\n\n----------------------------------------\n\nTITLE: Installing pypdf with pip\nDESCRIPTION: Basic installation command for pypdf using pip package manager. Requires Python 3.8+.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pypdf\n```\n\n----------------------------------------\n\nTITLE: Creating Ellipse Annotations in PDF Using pypdf\nDESCRIPTION: This snippet shows how to add an ellipse (circle) annotation to a PDF document. It creates an ellipse within the specified rectangular bounds and adds it to the first page of an existing PDF file. The modified PDF is then saved to disk.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\nfrom pypdf.annotations import Ellipse\n\npdf_path = os.path.join(RESOURCE_ROOT, \"crazyones.pdf\")\nreader = PdfReader(pdf_path)\npage = reader.pages[0]\nwriter = PdfWriter()\nwriter.add_page(page)\n\n# Add the rectangle\nannotation = Ellipse(\n    rect=(50, 550, 200, 650),\n)\nwriter.add_annotation(page_number=0, annotation=annotation)\n\n# Write the annotated file to disk\nwith open(\"annotated-pdf.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Installing pypdf with pip\nDESCRIPTION: Command to install the basic pypdf package using pip. This provides core PDF manipulation functionality.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pypdf\n```\n\n----------------------------------------\n\nTITLE: Creating PolyLine Annotations in PDF Using pypdf\nDESCRIPTION: This code shows how to add a polyline annotation (a connected series of line segments) to a PDF document. It explicitly sets the color to avoid the default transparent appearance and specifies the polyline vertices. The annotation is applied to the first page of an existing PDF.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/adding-pdf-annotations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PdfReader, PdfWriter\nfrom pypdf.annotations import PolyLine\nfrom pypdf.generic import ArrayObject, FloatObject, NameObject\n\npdf_path = os.path.join(RESOURCE_ROOT, \"crazyones.pdf\")\nreader = PdfReader(pdf_path)\npage = reader.pages[0]\nwriter = PdfWriter()\nwriter.add_page(page)\n\n# Add the polyline\n# By default, the line will be transparent. Set an explicit color.\nannotation = PolyLine(\n    vertices=[(50, 550), (200, 650), (70, 750), (50, 700)],\n)\nannotation[NameObject(\"/C\")] = ArrayObject(\n    [FloatObject(0.9), FloatObject(0.1), FloatObject(0)]\n)\nwriter.add_annotation(page_number=0, annotation=annotation)\n\n# Write the annotated file to disk\nwith open(\"annotated-pdf.pdf\", \"wb\") as fp:\n    writer.write(fp)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Warnings in pypdf\nDESCRIPTION: This snippet shows how to suppress warnings in pypdf using the warnings module. This can be useful when you want to ignore deprecation warnings or other non-critical issues.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/suppress-warnings.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n```\n\n----------------------------------------\n\nTITLE: Installing pypdf for current user\nDESCRIPTION: Installation command for pypdf that doesn't require superuser privileges, installing only for the current user.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --user pypdf\n```\n\n----------------------------------------\n\nTITLE: Reading PDF from Google Cloud Storage\nDESCRIPTION: Shows how to read a PDF from Google Cloud Storage using the storage client and BytesIO streaming. Requires Google Cloud credentials to be properly configured.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/streaming-data.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom io import BytesIO\n\nfrom google.cloud import storage\n\n# os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] must be set\nstorage_client = storage.Client()\nblob = storage_client.bucket(\"my-bucket\").blob(\"mydoc.pdf\")\nfile_stream = BytesIO()\nblob.download_to_file(file_stream)\nreader = PdfReader(file_stream)\n```\n\n----------------------------------------\n\nTITLE: Cloning PDF Objects with PdfWriter\nDESCRIPTION: Demonstrates how to manually clone PDF objects before attaching them to prevent side effects between pages. Shows object identity preservation and exclusion of specific fields during cloning.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/merging-pdfs.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncloned_object = object.clone(writer)\n```\n\n----------------------------------------\n\nTITLE: Inserting Blank Pages with PaperSize in PyPDF\nDESCRIPTION: Shows how to insert a blank page at a specific position in a PDF document using the PaperSize class. The code clones an existing PDF, inserts an A8-sized blank page at position 1 (second page), and writes the result to a new file.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/PaperSize.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pypdf import PaperSize, PdfWriter\n\nwriter = PdfWriter(clone_from=\"sample.pdf\")\nwriter.insert_blank_page(PaperSize.A8.width, PaperSize.A8.height, 1)\nwith open(\"output.pdf\", \"wb\") as output_stream:\n    writer.write(output_stream)\n```\n\n----------------------------------------\n\nTITLE: Installing pypdf with AES encryption support\nDESCRIPTION: Command to install pypdf with additional dependencies needed for AES encryption and decryption of PDF files.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pypdf[crypto]\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for PDF/A Standards\nDESCRIPTION: Detailed markdown documentation covering PDF/A versions, compliance requirements, validation tools, and pypdf integration status. Includes information about PDF/A-1 through PDF/A-4, specific requirements for PDF/A-1b compliance, and various online validation tools.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/pdfa-compliance.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# PDF/A Compliance\n\nPDF/A is a specialized, ISO-standardized version of the Portable Document Format\n(PDF) specifically designed for the long-term preservation and archiving of\nelectronic documents. It ensures that files remain accessible, readable, and\ntrue to their original appearance by embedding all necessary fonts, images, and\nmetadata within the document itself. By adhering to strict guidelines and\nminimizing dependencies on external resources or proprietary software, PDF/A\nensures the consistent and reliable reproduction of content, safeguarding it\nagainst future technological changes and obsolescence.\n\n## PDF/A Versions\n\n* **PDF/A-1**: Based on PDF 1.4, PDF/A-1 is the first version of the standard\n  and is divided into two levels: PDF/A-1a (Level A, ensuring accessibility) and\n  PDF/A-1b (Level B, ensuring visual preservation).\n    * **Level B** (Basic): Ensures visual preservation and basic requirements for archiving.\n    * **Level A** (Accessible): Everything from level B, but includes additional\n      requirements for accessibility, such as tagging, Unicode character\n      mapping, and logical structure.\n* **PDF/A-2**: Based on PDF 1.7 (ISO 32000-1), PDF/A-2 adds features and\n  improvements over PDF/A-1, while maintaining compatibility with PDF/A-1b\n  (Level B) documents.\n    * **Level B** (Basic): Like PDF/A-1b, but support for PDF 1.7 features such\n      as transparency layers.\n    * **Level U** (Unicode): Ensures Unicode mapping without the full\n      accessibility requirements of PDF/A-1a (Level A).\n    * **Level A** (Accessible): Similar to PDF/A-1a\n* **PDF/A-3**: Based on PDF 1.7 (ISO 32000-1), PDF/A-3 is similar to PDF/A-2 but\n  allows the embedding of non-PDF/A files as attachments, enabling the archiving\n  of source or supplementary data alongside the PDF/A document. This is\n  interesting for invoices which can add XML files.\n* **PDF/A-4**: Based on PDF 2.0 (ISO 32000-2), PDF/A-4 introduces new features\n  and improvements for better archiving and accessibility. The previous levels\n  are replaced by PDF/A-4f (ensuring visual preservation and allowing attachments)\n  and PDF/A-4e (Engineering, allows 3D content).\n\n## PDF/A-1b\n\nIn contrast to other PDF documents, PDF/A-1b documents must fulfill those\nrequirements:\n\n* **MarkInfo Object**: The MarkInfo object is a dictionary object within a PDF/A\n  file that provides information about the logical structure and tagging of the\n  document. The MarkInfo object indicates whether the document is tagged,\n  contains optional content, or has a structure tree that describes the logical\n  arrangement of content such as headings, paragraphs, lists, and tables. By\n  including the MarkInfo object, PDF/A ensures that electronic documents are\n  accessible to users with disabilities, such as those using screen readers or\n  other assistive technologies.\n* **Embedded fonts**: All fonts used in the document must be embedded to ensure\n  consistent text rendering across different devices and systems.\n* **Color Spaces**: DeviceRGB is a device-dependent color space that relies on\n  the specific characteristics of the output device, which can lead to\n  inconsistent color rendering across various devices. To achieve accurate and\n  consistent color representation, PDF/A requires the use of device-independent\n  color spaces, such as ICC-based color profiles.\n* **XMP (Extensible Metadata Platform) metadata**: XMP metadata provides a\n  standardized and extensible way to store essential information about a\n  document and its properties. XMP metadata is an XML-based format embedded\n  directly within a PDF/A file. It contains various types of information, such\n  as document title, author, creation and modification dates, keywords, and\n  copyright information, as well as PDF/A-specific details like conformance\n  level and OutputIntent.\n\n## Validation\n\n[VeraPDF](https://docs.verapdf.org/install/) is the go-to PDF/A validator.\n\nThere are several online-validators which allow you to simply upload the document:\n\n* [pdfen.com](https://www.pdfen.com/pdf-a-validator)\n* [avepdf.com](https://avepdf.com/pdfa-validation) : Gives an error report\n* [pdfa.org](https://pdfa.org/pdfa-online-verification-service/)\n* [visual-paradigm.com](https://online.visual-paradigm.com/de/online-pdf-editor/pdfa-validator/) - can convert the PDF to a PDF/A\n* [pdf2go.com](https://www.pdf2go.com/validate-pdfa)\n* [slub-dresden.de](https://www.slub-dresden.de/veroeffentlichen/dissertationen-habilitationen/elektronische-veroeffentlichung/slub-pdfa-validator) links to relevant parts in the specification.\n\n## pypdf and PDF/A\n\nAt the moment, pypdf does not make any guarantees regarding PDF/A.\n[Support is very welcome](https://github.com/py-pdf/pypdf/labels/is-pdf%2Fa-compliance).\n```\n\n----------------------------------------\n\nTITLE: Installing pypdf development version\nDESCRIPTION: Command to install the latest development version of pypdf directly from the GitHub repository.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/py-pdf/pypdf.git\n```\n\n----------------------------------------\n\nTITLE: Reading PDF Xref Table Example\nDESCRIPTION: Example showing the structure of a PDF cross-reference (xref) table. The table contains object offsets, generation numbers, and usage flags for quick access to indirect objects.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/pdf-format.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nxref 42 5\n0000001000 65535 f\n0000001234 00000 n\n0000001987 00000 n\n0000011987 00000 n\n0000031987 00000 n\n```\n\n----------------------------------------\n\nTITLE: PDF Trailer Example\nDESCRIPTION: Example showing the structure of a PDF trailer section, which contains the document catalog reference and file size information.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/pdf-format.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntrailer << /Root 5 0 R\n           /Size 6\n        >>\nstartxref 1234\n%%EOF\n```\n\n----------------------------------------\n\nTITLE: Installing pypdf with image support\nDESCRIPTION: Installation command for pypdf with Pillow dependency for image extraction capabilities.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install pypdf[image]\n```\n\n----------------------------------------\n\nTITLE: Documenting PdfReader Class with Sphinx autodoc in RST\nDESCRIPTION: Sphinx autodoc directive for generating comprehensive documentation of the PdfReader class from pypdf, including all its members, inherited members, and undocumented members.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/PdfReader.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pypdf.PdfReader\n    :members:\n    :inherited-members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Implementing Google-Style Docstrings in Python\nDESCRIPTION: Example of Google-Style Docstrings format used in PyPDF. This demonstrates the proper structure including sections for Args, Returns, Raises, and Examples. The docstring includes type annotations and documents parameters, return values, exceptions, and usage examples.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/documentation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef example(param1: int, param2: str) -> bool:\n    \"\"\"\n    Example function with PEP 484 type annotations.\n\n    Args:\n      param1: The first parameter.\n      param2: The second parameter.\n\n    Returns:\n      The return value. True for success, False otherwise.\n\n    Raises:\n      AttributeError: The ``Raises`` section is a list of all exceptions\n        that are relevant to the interface.\n      ValueError: If `param2` is equal to `param1`.\n\n    Examples:\n        Examples should be written in doctest format, and should illustrate how\n        to use the function.\n\n        >>> print([i for i in example_generator(4)])\n        [0, 1, 2, 3]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: CMap Character Mapping Example\nDESCRIPTION: Example showing a specific character mapping in a CMap where the byte value 0x1B (decimal 27) maps to the Unicode character FB00, which represents the 'ff' ligature.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/cmaps.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1 beginbfchar\n<1B> <FB00>\n```\n\n----------------------------------------\n\nTITLE: PyPDF2 Class Usage Updates\nDESCRIPTION: Shows the mapping of old class names to new ones in PyPDF2 2.x, including the change in the strict parameter default value\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/migration-1-to-2.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old way:\nPdfFileReader\nPdfFileWriter\nPdfFileMerger\n\n# New way:\nPdfReader\nPdfWriter\nPdfMerger\n```\n\n----------------------------------------\n\nTITLE: PyPDF2 Type Checking Updates\nDESCRIPTION: Shows the replacement of deprecated type checking functions with standard Python type checking\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/migration-1-to-2.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Old way:\nPyPDF2.isInt(obj)\nPyPDF2.isString(s)\n\n# New way:\ninstance(obj, int)\ninstance(s, str)\n```\n\n----------------------------------------\n\nTITLE: PDF Text Stream Example with Character References\nDESCRIPTION: Example of a text stream in a PDF that contains character references. The '\\034' is an octal value (28 decimal) that would be interpreted according to the CMap defined in the document.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/cmaps.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n(The)-342(mis\\034ts.)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements for PyPDF\nDESCRIPTION: Command to install all development dependencies using pip package manager\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements/dev.txt\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ambiguous Python Syntax\nDESCRIPTION: Example showing how ambiguous or malformed code can have multiple possible interpretations, analogous to handling malformed PDF files. Shows three variations of syntax - one broken and two possible intended forms.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/robustness.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Broken\nfunction (foo, bar):\n\n# Potentially intended:\ndef function(foo, bar):\n    ...\n\n# Also possible:\nfunction = (foo, bar)\n```\n\n----------------------------------------\n\nTITLE: Documenting PdfWriter Class with Sphinx in reStructuredText\nDESCRIPTION: Sphinx autoclass directive for documenting the PdfWriter class from pypdf library, including all members, inherited members, undocumented members, and inheritance information.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/PdfWriter.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: pypdf.PdfWriter\n    :members:\n    :inherited-members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for PyPDF annotations module\nDESCRIPTION: This directive configures Sphinx's autodoc extension to automatically generate documentation for the pypdf.annotations module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/annotations.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: pypdf.annotations\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Uncompressing PDF Files Command\nDESCRIPTION: Bash command using pdftk to uncompress a PDF file for manual inspection and analysis.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/pdf-format.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npdftk crazyones.pdf output crazyones-uncomp.pdf uncompress\n```\n\n----------------------------------------\n\nTITLE: Documenting PyPDF Errors Module with Sphinx\nDESCRIPTION: A Sphinx automodule directive that generates documentation for the pypdf.errors module. This directive includes all members, undocumented members, and shows inheritance relationships between classes.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/errors.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: pypdf.errors\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting PasswordType Enum with Sphinx autodoc in RST\nDESCRIPTION: Sphinx autodoc directive for generating documentation of the PasswordType enum from pypdf, including all its members and undocumented members.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/PdfReader.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pypdf.PasswordType\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Configuration for pypdf.DocumentInformation Class\nDESCRIPTION: Sphinx configuration directive that generates automatic documentation for the DocumentInformation class in the pypdf library, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/DocumentInformation.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: pypdf.DocumentInformation\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Autodocumenting the Destination Class with Sphinx in RST\nDESCRIPTION: This RST (reStructuredText) directive generates automatic documentation for the Destination class in the pypdf.generic module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/Destination.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pypdf.generic.Destination\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Requirements with pip\nDESCRIPTION: Commands to install the Continuous Integration requirements for testing pypdf. Two options are provided: one for Python versions below 3.11 and another for Python 3.11 and above.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements/ci.txt\n```\n\n----------------------------------------\n\nTITLE: Sphinx autodoc directive for PyPDF Field class in reStructuredText\nDESCRIPTION: This reStructuredText directive uses Sphinx's autodoc extension to automatically generate comprehensive documentation for the Field class in the pypdf.generic module. The directive includes all class members, undocumented members, and shows inheritance hierarchy.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/Field.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: pypdf.generic.Field\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Python Version Check with Deprecation Warnings\nDESCRIPTION: Command to run Python code with deprecation warnings enabled for migration testing\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/user/migration-1-to-2.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -W all your_code.py\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Requirements for Python 3.11+\nDESCRIPTION: Command to install the Continuous Integration requirements specifically for Python 3.11 or newer versions.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements/ci-3.11.txt\n```\n\n----------------------------------------\n\nTITLE: PDF Body Objects Example\nDESCRIPTION: Example of PDF body content showing indirect objects with their identifiers, generation numbers, and object definitions. Demonstrates typical object structure for pages and resources.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/pdf-format.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1 0 obj << /Count 1 /Kids [4 0 R] /Type /Pages >> endobj\n2 0 obj << >> endobj\n3 0 obj << >> endobj\n4 0 obj << /Contents 3 0 R /CropBox [0.0 0.0 2550.0 3508.0]\n /MediaBox [0.0 0.0 2550.0 3508.0] /Parent 1 0 R\n /Resources << /Font << >> >>\n /Rotate 0 /Type /Page >> endobj\n5 0 obj << /Pages 1 0 R /Type /Catalog >> endobj\n```\n\n----------------------------------------\n\nTITLE: Documenting PyPDF Generic Module in Python\nDESCRIPTION: This snippet uses Sphinx autodoc to generate documentation for the pypdf.generic module. It includes all members and undocumented members, shows inheritance, but excludes specific classes.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/generic.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: pypdf.generic\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :exclude-members: Destination, Field, Fit, RectangleObject\n```\n\n----------------------------------------\n\nTITLE: Documenting PdfWriterProtocol in Python\nDESCRIPTION: This snippet generates documentation for the PdfWriterProtocol class from the pypdf._protocols module. It includes all members, undocumented members, and shows inheritance.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/generic.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: pypdf._protocols.PdfWriterProtocol\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting PdfObjectProtocol in Python\nDESCRIPTION: This snippet generates documentation for the PdfObjectProtocol class from the pypdf._protocols module. It includes all members, undocumented members, and shows inheritance.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/generic.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: pypdf._protocols.PdfObjectProtocol\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Uncompressing a PDF with pdftk to examine its CMap\nDESCRIPTION: Command to decompress a PDF file named 'crazyones.pdf' to examine its internal structure, specifically the CMap data. The output file 'crazyones-uncomp.pdf' will contain the uncompressed content.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/cmaps.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npdftk crazyones.pdf output crazyones-uncomp.pdf uncompress\n```\n\n----------------------------------------\n\nTITLE: Documenting PdfCommonDocProtocol in Python\nDESCRIPTION: This snippet generates documentation for the PdfCommonDocProtocol class from the pypdf._protocols module. It includes all members, undocumented members, and shows inheritance.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/generic.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: pypdf._protocols.PdfCommonDocProtocol\n       :members:\n       :undoc-members:\n       :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: CMap Structure in a PDF File\nDESCRIPTION: Example of a CMap structure found in a PDF file. This defines character mapping from code points to Unicode characters, specifically showing how the byte value 0x1B maps to the Unicode character FB00 (the 'ff' ligature).\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/cmaps.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbegincmap\n/CMapName /T1Encoding-UTF16 def\n/CMapType 2 def\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n1 begincodespacerange\n<00> <FF>\nendcodespacerange\n1 beginbfchar\n<1B> <FB00>\nendbfchar\nendcmap\nCMapName currentdict /CMap defineresource pop\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for pypdf.Transformation Class Documentation\nDESCRIPTION: reStructuredText directive that configures the autodoc extension to generate documentation for the Transformation class. The directive includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/Transformation.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pypdf.Transformation\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodule for Sample Files\nDESCRIPTION: Command to initialize and update the sample-files git submodule which contains test files\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/intro.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Running pypdf Test Suite with pytest\nDESCRIPTION: Command to execute the pypdf test suite using pytest, which verifies the functionality of the library and ensures code quality.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest\n===================== test session starts =====================\nplatform linux -- Python 3.6.15, pytest-7.0.1, pluggy-1.0.0\nrootdir: /home/moose/GitHub/Martin/pypdf\nplugins: cov-3.0.0\ncollected 233 items\n\ntests/test_basic_features.py ..                         [  0%]\ntests/test_constants.py .                               [  1%]\ntests/test_filters.py .................x.....           [ 11%]\ntests/test_generic.py ................................. [ 25%]\n.............                                           [ 30%]\ntests/test_javascript.py ..                             [ 31%]\ntests/test_merger.py .                                  [ 32%]\ntests/test_page.py .........................            [ 42%]\ntests/test_pagerange.py ................                [ 49%]\ntests/test_papersizes.py ..................             [ 57%]\ntests/test_reader.py .................................. [ 72%]\n...............                                         [ 78%]\ntests/test_utils.py ....................                [ 87%]\ntests/test_workflows.py ..........                      [ 91%]\ntests/test_writer.py .................                  [ 98%]\ntests/test_xmp.py ...                                   [100%]\n\n========== 232 passed, 1 xfailed, 1 warning in 4.52s ==========\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for pypdf History\nDESCRIPTION: A comprehensive markdown document outlining the history and evolution of the pypdf library, including its various iterations, major contributors, and key feature developments from 2005 to 2024.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/meta/history.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# History of pypdf\n\n## The Origins: pyPdf (2005-2010)\n\nIn 2005, [Mathieu Fenniak] launched pyPdf \"as a PDF toolkit...\"\nfocused on\n\n-   document manipulation: by-page splitting, concatenation, and\n    merging;\n-   document introspection;\n-   page cropping; and\n-   document encryption and decryption.\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for pypdf PageRange class documentation\nDESCRIPTION: This RST directive configures Sphinx's autodoc extension to document the PageRange class from the pypdf package. It includes all class members, undocumented members, and displays inheritance information.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/PageRange.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pypdf.PageRange\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for RectangleObject Class in pypdf\nDESCRIPTION: A reStructuredText directive that configures autodoc to generate documentation for the RectangleObject class from the pypdf.generic module, including all members, undocumented members, and inheritance details.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/RectangleObject.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pypdf.generic.RectangleObject\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting ObjectDeletionFlag Class with Sphinx in reStructuredText\nDESCRIPTION: Sphinx autoclass directive for documenting the ObjectDeletionFlag class from pypdf library, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/PdfWriter.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: pypdf.ObjectDeletionFlag\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Downloading Test PDFs with Python\nDESCRIPTION: A Python command that downloads PDF documents needed for tests that require internet access. This command helps prepare the environment for tests marked with 'enable_socket'.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython -c \"from tests import download_test_pdfs; download_test_pdfs()\"\n```\n\n----------------------------------------\n\nTITLE: Documenting XmpInformationProtocol in Python\nDESCRIPTION: This snippet generates documentation for the XmpInformationProtocol class from the pypdf._protocols module. It includes all members, undocumented members, and shows inheritance.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/generic.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: pypdf._protocols.XmpInformationProtocol\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Installing PR Version from Git\nDESCRIPTION: Command to install a specific in-progress version of pypdf from a GitHub pull request using pip. This allows testing of unreleased versions.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/pubpub-zz/pypdf.git@iss2200\n```\n\n----------------------------------------\n\nTITLE: Running Release Script in Python\nDESCRIPTION: Command to execute the make_release.py script that updates CHANGELOG.md and _version.py files, and prepares the release commit message for pypdf.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/releasing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython make_release.py\n```\n\n----------------------------------------\n\nTITLE: Creating Release Commit with Git\nDESCRIPTION: Git command to create a release commit using the prepared message from the RELEASE_COMMIT_MSG.md file with an editor prompt.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/releasing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -eF RELEASE_COMMIT_MSG.md\n```\n\n----------------------------------------\n\nTITLE: Version Pattern Example in Deprecation Process\nDESCRIPTION: Example version numbers showing the progression of deprecation notices, from initial warning to final removal, where x.y.z represents the current version.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/deprecations.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nx.y.(z+1)     # Add DeprecationWarning\n(x+1).0.0     # Replace with DeprecationErrors\n(x+2).0.0     # Remove DeprecationErrors\n```\n\n----------------------------------------\n\nTITLE: Sphinx API Reference Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the API Reference section of the documentation using a toctree directive in reStructuredText. It lists all the modules and classes that are part of the pypdf library API.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: API Reference\n   :maxdepth: 1\n\n   modules/PdfReader\n   modules/PdfWriter\n   modules/Destination\n   modules/DocumentInformation\n   modules/Field\n   modules/Fit\n   modules/PageObject\n   modules/PageRange\n   modules/PaperSize\n   modules/RectangleObject\n   modules/Transformation\n   modules/XmpInformation\n   modules/annotations\n   modules/constants\n   modules/errors\n   modules/generic\n   modules/PdfDocCommon\n```\n\n----------------------------------------\n\nTITLE: Sphinx Developer Guide Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the Developer Guide section of the documentation using a toctree directive in reStructuredText. It includes references to pages about development processes, PDF format understanding, and project maintenance.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: Developer Guide\n   :maxdepth: 1\n\n   dev/intro\n   dev/pdf-format\n   dev/pypdf-parsing\n   dev/pypdf-writing\n   dev/cmaps\n   dev/deprecations\n   dev/documentation\n   dev/testing\n   dev/releasing\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Format Template\nDESCRIPTION: Template showing the required format for commit messages, including prefix conventions for change categorization\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/intro.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPREFIX: DESCRIPTION\n\nBODY\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for pypdf.generic.Fit Class\nDESCRIPTION: This RST (reStructuredText) directive instructs Sphinx to automatically generate documentation for the Fit class from the pypdf.generic module, including all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/Fit.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pypdf.generic.Fit\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Configuration for XmpInformation Class\nDESCRIPTION: This RST (reStructuredText) directive configures Sphinx to automatically generate documentation for the XmpInformation class from the pypdf.xmp module, including all its members, undocumented members, and inheritance information.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/XmpInformation.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: pypdf.xmp.XmpInformation\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Sphinx About Section Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the About pypdf section of the documentation using a toctree directive in reStructuredText. It includes meta information about the project such as changelog, governance, contributors, and project scope.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: About pypdf\n   :maxdepth: 1\n\n   meta/CHANGELOG\n   meta/changelog-v1\n   meta/project-governance\n   meta/taking-ownership\n   meta/history\n   meta/CONTRIBUTORS\n   meta/scope-of-pypdf\n   meta/comparisons\n   meta/faq\n```\n\n----------------------------------------\n\nTITLE: Documenting PdfReaderProtocol in Python\nDESCRIPTION: This snippet generates documentation for the PdfReaderProtocol class from the pypdf._protocols module. It includes all members, undocumented members, and shows inheritance.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/modules/generic.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: pypdf._protocols.PdfReaderProtocol\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Requirements with pip-compile\nDESCRIPTION: Command used to generate the requirements file for PyPDF documentation dependencies using pip-compile. This command compiles the input file 'requirements/docs.in' into a detailed requirements file with exact versions.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/requirements/docs.txt#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip-compile requirements/docs.in\n```\n\n----------------------------------------\n\nTITLE: Generating Development Requirements for py-pdf/pypdf with pip-compile\nDESCRIPTION: This code snippet shows the command used to generate the requirements file using pip-compile. It specifies the Python version and input file used for compilation.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/requirements/dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.8\n# by the following command:\n#\n#    pip-compile requirements/dev.in\n#\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure with Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines the Sphinx documentation structure using reStructuredText toctree directives. It organizes the documentation into various sections including User Guide, API Reference, Developer Guide, and About pypdf sections.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: User Guide\n   :maxdepth: 1\n\n   user/installation\n   user/migration-1-to-2\n   user/robustness\n   user/suppress-warnings\n   user/metadata\n   user/extract-text\n   user/post-processing-in-text-extraction\n   user/extract-images\n   user/extract-attachments\n   user/encryption-decryption\n   user/merging-pdfs\n   user/cropping-and-transforming\n   user/reading-pdf-annotations\n   user/adding-pdf-annotations\n   user/add-watermark\n   user/add-javascript\n   user/viewer-preferences\n   user/forms\n   user/streaming-data\n   user/file-size\n   user/pdf-version-support\n   user/pdfa-compliance\n```\n\n----------------------------------------\n\nTITLE: Poetry Lock File Reference\nDESCRIPTION: Reference to the poetry.lock file used for dependency management in Poetry-based Python projects.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/deprecations.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npoetry.lock\n```\n\n----------------------------------------\n\nTITLE: Sphinx Indices and Tables Section in reStructuredText\nDESCRIPTION: This snippet defines the Indices and Tables section of the documentation, providing links to the general index, module index, and search functionality using reStructuredText directives.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Citing pypdf in BibTeX Format\nDESCRIPTION: This BibTeX entry provides the proper format for citing the pypdf library in academic works. It includes the title, authors, year, URL, and a note about contributors.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/meta/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@misc{pypdf,\n title         = {The {pypdf} library},\n author        = {Mathieu Fenniak and\n                  Matthew Stamy and\n                  pubpub-zz and\n                  Martin Thoma and\n                  Matthew Peveler and\n                  exiledkingcc and {pypdf Contributors}},\n year          = {2024},\n url           = {https://pypi.org/project/pypdf/}\n note          = {See https://pypdf.readthedocs.io/en/latest/meta/CONTRIBUTORS.html for all contributors}\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Commit to Remote Repository\nDESCRIPTION: Git command to push the release commit to the remote repository, triggering CI processes for building packages and creating releases.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/releasing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Python Requirements File Reference\nDESCRIPTION: Reference to the requirements.txt file used for version pinning in Python projects to avoid breaking changes.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/docs/dev/deprecations.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrequirements.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements File for py-pdf/pypdf CI Environment\nDESCRIPTION: This code snippet shows the command used to generate the requirements file using pip-compile. It specifies the input and output files for the compilation process.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/requirements/ci-3.11.txt#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#    pip-compile --output-file=requirements/ci-3.11.txt requirements/ci.in\n```\n\n----------------------------------------\n\nTITLE: Generating Dependencies with pip-compile for py-pdf/pypdf\nDESCRIPTION: This code snippet shows the command used to generate the requirements file using pip-compile. It specifies the Python version and input file used.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/requirements/ci.txt#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n#    pip-compile requirements/ci.in\n```\n\n----------------------------------------\n\nTITLE: Formatting Template for Adding Contributors in Markdown\nDESCRIPTION: A template for adding new contributors to the pypdf project's contributor list. It provides two formats: one for contributors who prefer to use their full name, and another for those who prefer to use their GitHub username. The format includes space for a short bio and relevant links.\nSOURCE: https://github.com/py-pdf/pypdf/blob/main/CONTRIBUTORS.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Last name, First name: 140-characters of text; links to LinkedIn / GitHub / other profiles and personal pages are ok\n```\n\nLANGUAGE: markdown\nCODE:\n```\n* GitHub Username: 140-characters of text; links to LinkedIn / GitHub / other profiles and personal pages are ok\n```"
  }
]