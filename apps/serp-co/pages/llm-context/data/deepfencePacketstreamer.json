[
  {
    "owner": "deepfence",
    "repo": "packetstreamer",
    "content": "TITLE: PacketStreamer Configuration YAML\nDESCRIPTION: Defines the structure of the packetstreamer configuration file, including options for input, output, TLS, authentication, block size, packet length, logging, and capture settings. The configuration is used to control the behavior of the packetstreamer in receiver and sensor modes.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/configuration.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ninput:                             # required in 'receiver' mode\n  address: ip-address\n  port: listen-port\noutput:\n  server:                          # required in 'sensor' mode\n    address: ip-address\n    port: listen-port\n  file:                            # required in 'receiver' mode\n    path: filename|stdout          # 'stdout' is a reserved name. Receiver will write to stdout\n  plugins:                         # optional\n    s3:\n      bucket: string\n      region: string\n      totalFileSize: filesize      # optional; default: 10 MB\n      uploadChunkSize: filesize    # optional; default: 5 MB\n      uploadTimeout: timeout       # optional; default: 1m\n      cannedACL: acl               # optional; default: Bucket owner enforced\ntls:                               # optional\n  enable: true|false\n  certfile: filename\n  keyfile: filename\nauth:                              # optional; receiver and sensor must use same shared key\n  enable: true|false\n  key: string\ncompressBlockSize: integer         # optional; default: 65\ninputPacketLen: integer            # optional; default: 65535\ngatherMaxWaitSec: integer          # optional; default: 5\nlogFilename: filename              # optional\npcapMode: Allow|Deny|All           # optional\ncapturePorts: list-of-ports        # optional\ncaptureInterfacesPorts: map: interface-name:port # optional\nignorePorts: list-of-ports         # optional\n```\n\n----------------------------------------\n\nTITLE: PacketStreamer YAML Configuration\nDESCRIPTION: This YAML configuration file defines the settings for PacketStreamer. It includes options for input source (address, port), output destination (server, file, plugins like S3), TLS encryption, authentication, compression, packet length, and logging.  Placeholders like `_ip-address_` and `_filename_` should be replaced with actual values.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/configuration.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput:                             # required in 'receiver' mode\n  address: _ip-address_\n  port: _listen-port_\noutput:\n  server:                          # required in 'sensor' mode\n    address: _ip-address_\n    port: _listen-port_\n  file:                            # required in 'receiver' mode\n    path: _filename_|stdout        # 'stdout' is a reserved name. Receiver will write to stdout\n  plugins:                         # optional\n    s3:\n      bucket: _string_\n      region: _string_\n      totalFileSize: _file_size_   # optional; default: 10 MB\n      uploadChunkSize: _file_size_ # optional; default: 5 MB\n      uploadTimeout: _timeout_     # optional; default: 1m\n      cannedACL: _acl_             # optional; default: Bucket owner enforced\ntls:                               # optional\n  enable: _true_|_false_\n  certfile: _filename_\n  keyfile: _filename_\nauth:                              # optional; receiver and sensor must use same shared key\n  enable: _true_|_false_\n  key: _string_\ncompressBlockSize: _integer_       # optional; default: 65\ninputPacketLen: _integer_          # optional; default: 65535\ngatherMaxWaitSec: _integer_        # optional; default: 5\nlogFilename: _filename_            # optional\npcapMode: _Allow_|_Deny_|_All_     # optional\ncapturePorts: _list-of-ports_      # optional\ncaptureInterfacesPorts: _map: interface-name:port_ # optional\nignorePorts: _list-of-ports_       # optional\n```\n\n----------------------------------------\n\nTITLE: S3 Plugin Configuration YAML\nDESCRIPTION: Defines the YAML configuration schema for the S3 plugin in PacketStreamer. It shows required (bucket, region) and optional (totalFileSize, uploadChunkSize, uploadTimeout, cannedACL) parameters for configuring packet streaming to an S3 bucket.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/plugins/s3.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  plugins:                         # optional\n    s3:\n      bucket: _string_\n      region: _string_\n      totalFileSize: _file_size_   # optional; default: 10 MB\n      uploadChunkSize: _file_size_ # optional; default: 5 MB\n      uploadTimeout: _timeout_     # optional; default: 1m\n      cannedACL: _acl_             # optional; default: Bucket owner enforced\n```\n\n----------------------------------------\n\nTITLE: Install PacketStreamer with Helm on Kubernetes\nDESCRIPTION: This snippet deploys PacketStreamer on Kubernetes using Helm. It first applies a namespace configuration and then installs the packetstreamer helm chart into that namespace.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./contrib/kubernetes/namespace.yaml\nhelm install packetstreamer ./contrib/helm/ --namespace packetstreamer\n```\n\n----------------------------------------\n\nTITLE: S3 Plugin Configuration\nDESCRIPTION: This YAML configuration defines the settings for the S3 plugin in PacketStreamer. It specifies the S3 bucket name, region, total file size, upload chunk size, upload timeout, and canned ACL.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/extra/s3.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  plugins:                         # optional\n    s3:\n      bucket: _string_\n      region: _string_\n      totalFileSize: _file_size_   # optional; default: 10 MB\n      uploadChunkSize: _file_size_ # optional; default: 5 MB\n      uploadTimeout: _timeout_     # optional; default: 1m\n      cannedACL: _acl_             # optional; default: Bucket owner enforced\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Receiver in Docker\nDESCRIPTION: Runs the PacketStreamer receiver component in a Docker container. Mounts the configuration file and a temporary directory for storing data. Exposes port 8081 for access. Requires the deepfenceio/deepfence_packetstreamer Docker image.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n    -v $(pwd)/contrib/config:/etc/packetstreamer \\\n    -v $HOME/container_tmp:/tmp \\\n    -p 8081:8081 \\\n    deepfenceio/deepfence_packetstreamer \\\n    receiver --config /etc/packetstreamer/receiver.yaml\n```\n\n----------------------------------------\n\nTITLE: PacketStreamer Receiver Configuration for File Output (YAML)\nDESCRIPTION: This YAML configuration sets up the PacketStreamer receiver to listen on address `0.0.0.0` and port `8081`, and configures the output to write to a file at `/tmp/dump_file`. This configuration is used with the Suricata integration described above.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/tools/suricata.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninput:\n  address: 0.0.0.0\n  port: 8081\noutput:\n  file:\n    path: /tmp/dump_file\n```\n\n----------------------------------------\n\nTITLE: Build PacketStreamer Docker Image\nDESCRIPTION: Builds a Docker image for the PacketStreamer using the Makefile. The RELEASE=1 option builds a stripped release binary for a smaller image size. Requires make and Docker to be installed.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-image\n\n# Alternatively, build a stripped release binary\nmake docker-image RELEASE=1\n```\n\n----------------------------------------\n\nTITLE: PacketStreamer Receiver Configuration (yaml)\nDESCRIPTION: This YAML configuration snippet demonstrates how to configure the PacketStreamer receiver to output data to a file. It specifies the address and port for the receiver input, and defines the file output path as `/tmp/dump_file`.  This is an example configuration to enable file output that can be analyzed by Suricata.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/extra/suricata.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninput:\n  address: 0.0.0.0\n  port: 8081\noutput:\n  file:\n    path: /tmp/dump_file\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Sensor in Docker\nDESCRIPTION: Runs the PacketStreamer sensor in a Docker container. It requires `NET_ADMIN` capability and network host mode to capture packets, mounting the configuration.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n    --cap-add=NET_ADMIN --net=host \\\n    -v $(pwd)/contrib/config:/etc/packetstreamer \\\n    deepfenceio/deepfence_packetstreamer \\\n    sensor --config /etc/packetstreamer/sensor-local.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Receiver\nDESCRIPTION: Executes the PacketStreamer receiver with a specified configuration file. This command initiates the receiver process, which listens for incoming network traffic data according to the provided configuration.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/local.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npacketstreamer receiver --config [configuration_file]\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Sensor with S3 Config\nDESCRIPTION: This command executes PacketStreamer in sensor mode using the specified S3 configuration file. It requires root privileges to capture network packets.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/extra/s3.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo packetstreamer sensor --config ./contrib/config/sensor-s3.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Receiver\nDESCRIPTION: This command starts a PacketStreamer receiver using a specified configuration file. The receiver captures and processes network packets according to the settings in the configuration file. Replace [configuration_file] with the actual path to your YAML configuration.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/local.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npacketstreamer receiver --config [configuration_file]\n```\n\n----------------------------------------\n\nTITLE: Running PacketStreamer Sensor\nDESCRIPTION: These commands demonstrate how to configure and run a PacketStreamer sensor. First, a sample sensor configuration file is copied and renamed.  Then, the sensor is started using the updated configuration. The sensor captures and forwards network traffic from the target host.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/README.md#_snippet_2\n\nLANGUAGE: shell script\nCODE:\n```\n# run on the target hosts to capture and forward traffic\n\n# copy and edit the sample sensor-local.yaml file, and add the address of the receiver host\ncp ./contrib/config/sensor-local.yaml ./contrib/config/sensor.yaml\n\n./packetstreamer sensor --config ./contrib/config/sensor.yaml\n```\n\n----------------------------------------\n\nTITLE: Running PacketStreamer Receiver\nDESCRIPTION: This snippet demonstrates how to run the PacketStreamer receiver with a specified configuration file. The receiver listens on port 8081 and writes pcap output to /tmp/dump_file. The configuration file defines the receiver's settings, such as the listening port and output file.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/README.md#_snippet_1\n\nLANGUAGE: shell script\nCODE:\n```\n./packetstreamer receiver --config ./contrib/config/receiver.yaml\n```\n\n----------------------------------------\n\nTITLE: Running PacketStreamer Receiver\nDESCRIPTION: Starts a PacketStreamer receiver process. The receiver listens on a specified port (8081) and writes pcap output to a file (/tmp/dump_file). The configuration is loaded from the receiver.yaml file.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/quickstart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./packetstreamer receiver --config ./contrib/config/receiver.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Receiver with Local Config\nDESCRIPTION: Executes the PacketStreamer receiver using the example local configuration file. This simplifies setup for local testing and development, providing a default configuration for receiving network packets.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/local.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npacketstreamer receiver --config ./contrib/config/receiver-local.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Sensor with Local Config\nDESCRIPTION: This command starts a PacketStreamer sensor with root privileges using the example local configuration file. This config file is suited for local network capture and forwarding.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/local.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo packetstreamer sensor --config ./contrib/config/sensor-local.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Receiver with Local Config\nDESCRIPTION: This command starts a PacketStreamer receiver using the example local configuration file provided in the contrib directory. This config file is useful for local testing and development. No additional dependencies are needed.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/local.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npacketstreamer receiver --config ./contrib/config/receiver-local.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Sensor\nDESCRIPTION: Executes the PacketStreamer sensor with a specified configuration file, requiring root privileges. The sensor captures network traffic and sends it to a receiver according to the provided configuration.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/local.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo packetstreamer sensor --config [configuration_file]\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Sensor with S3 Configuration\nDESCRIPTION: Demonstrates how to execute PacketStreamer in sensor mode using a provided S3 configuration file. The command uses `sudo` as it runs a sensor that requires root privileges for capturing packets.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/plugins/s3.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo packetstreamer sensor --config ./contrib/config/sensor-s3.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Sensor\nDESCRIPTION: Navigates to the PacketStreamer directory and starts the sensor component with a specific configuration file using sudo. Assumes the PacketStreamer source code is present in the 'PacketStreamer' directory and the config file exists at the specified path. It starts the sensor process, capturing network traffic.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/vagrant.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd PacketStreamer\nsudo ./packetstreamer --config ./contrib/config/sensor-vagrant.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Receiver with S3 Config\nDESCRIPTION: This command executes PacketStreamer in receiver mode using the specified S3 configuration file.  It configures the receiver to stream packets to the S3 bucket defined in the config file.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/extra/s3.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npacketstreamer receiver --config ./contrib/config/receiver-s3.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Sensor\nDESCRIPTION: This command navigates to the PacketStreamer directory and starts the sensor with a specific configuration file using sudo. It assumes the PacketStreamer source code is available in the directory and requires sudo privileges.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/vagrant.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd PacketStreamer\nsudo ./packetstreamer --config ./contrib/config/sensor-vagrant.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Receiver with S3 Configuration\nDESCRIPTION: Demonstrates how to execute PacketStreamer in receiver mode using a provided S3 configuration file. The command runs PacketStreamer as a receiver and streams data to an S3 bucket as configured in the specified YAML file.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/plugins/s3.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npacketstreamer receiver --config ./contrib/config/receiver-s3.yaml\n```\n\n----------------------------------------\n\nTITLE: Analyze File Output with Suricata (bash)\nDESCRIPTION: This command pipes the output from a PacketStreamer file output to Suricata for analysis. It requires Suricata to be configured and accessible, and assumes the PacketStreamer output file is located at `/tmp/dump_file`. The configuration file used by Suricata is assumed to be at `/etc/suricata/suricata.yaml`.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/extra/suricata.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntail -f /tmp/dump_file | suricata -v -c /etc/suricata/suricata.yaml -r /dev/stdin\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Receiver in Docker\nDESCRIPTION: Runs the PacketStreamer receiver in a Docker container. It mounts configuration files and a temporary directory, and exposes port 8081.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n    -v $(pwd)/contrib/config:/etc/packetstreamer \\\n    -v $HOME/container_tmp:/tmp \\\n    -p 8081:8081 \\\n    deepfenceio/deepfence_packetstreamer \\\n    receiver --config /etc/packetstreamer/receiver.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Suricata with PacketStreamer File Output (Bash)\nDESCRIPTION: This command pipes the PacketStreamer output file to Suricata for analysis. It assumes Suricata's configuration file is located at `/etc/suricata/suricata.yaml` and the PacketStreamer output is being written to `/tmp/dump_file`.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/tools/suricata.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntail -f /tmp/dump_file | suricata -v -c /etc/suricata/suricata.yaml -r /dev/stdin\n```\n\n----------------------------------------\n\nTITLE: Running PacketStreamer Sensor\nDESCRIPTION: This snippet outlines how to run the PacketStreamer sensor on target hosts to capture and forward network traffic. It involves copying and editing the sample sensor-local.yaml file to include the receiver's address. The sensor captures traffic based on the configuration in the sensor.yaml file.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/README.md#_snippet_2\n\nLANGUAGE: shell script\nCODE:\n```\n# run on the target hosts to capture and forward traffic\n\n# copy and edit the sample sensor-local.yaml file, and add the address of the receiver host\ncp ./contrib/config/sensor-local.yaml ./contrib/config/sensor.yaml\n\n./packetstreamer sensor --config ./contrib/config/sensor.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Suricata with PacketStreamer Stdout Output (Bash)\nDESCRIPTION: This command pipes the PacketStreamer's stdout output directly to Suricata for real-time analysis. It assumes PacketStreamer is configured to write to stdout and Suricata's configuration file is at `/etc/suricata/suricata.yaml`.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/tools/suricata.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./packet-streamer receiver --config ./contrib/config/receiver-stdout.yaml | suricata -v -c /etc/suricata/suricata.yaml -r /dev/stdin\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Sensor in Docker\nDESCRIPTION: Runs the PacketStreamer sensor component in a Docker container. Requires NET_ADMIN capability and network host mode to capture all packets on the host. Mounts the configuration file. Requires the deepfenceio/deepfence_packetstreamer Docker image.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n    --cap-add=NET_ADMIN --net=host \\\n    -v $(pwd)/contrib/config:/etc/packetstreamer \\\n    deepfenceio/deepfence_packetstreamer \\\n    sensor --config /etc/packetstreamer/sensor-local.yaml\n```\n\n----------------------------------------\n\nTITLE: Building PacketStreamer with Make\nDESCRIPTION: Builds the PacketStreamer application using the provided Makefile. Requires golang and libpcap-dev to be installed. Clones the repository, navigates to the PacketStreamer directory, and executes the make command.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Pre-requisites (Ubuntu): sudo apt install golang-go libpcap-dev\ngit clone https://github.com/deepfence/PacketStreamer.git\ncd PacketStreamer/\nmake\n```\n\n----------------------------------------\n\nTITLE: Deploying PacketStreamer with kubectl and Helm\nDESCRIPTION: This snippet deploys PacketStreamer on a Kubernetes cluster. It first creates a namespace using `kubectl apply` and then installs the PacketStreamer Helm chart in that namespace.  Requires `kubectl` and `helm` to be installed and configured.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./contrib/kubernetes/namespace.yaml\nhelm install packetstreamer ./contrib/helm/ --namespace packetstreamer\n```\n\n----------------------------------------\n\nTITLE: Build PacketStreamer\nDESCRIPTION: This command builds the `packetstreamer` binary using the standard `go` toolchain. It utilizes the make utility to automate the build process.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/building.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Sensor with Local Config\nDESCRIPTION: Executes the PacketStreamer sensor with the provided example local configuration, requires root privileges. This is useful for local testing.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/local.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo packetstreamer sensor --config ./contrib/config/sensor-local.yaml\n```\n\n----------------------------------------\n\nTITLE: Build Release PacketStreamer\nDESCRIPTION: This command builds the `packetstreamer` binary and strips it for a production environment. It uses the `RELEASE` parameter to remove debugging information and optimize the binary size.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/building.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake RELEASE=1\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Sensor\nDESCRIPTION: This command starts a PacketStreamer sensor with root privileges using a specified configuration file. The sensor captures network traffic and sends it to a configured receiver.  Replace [configuration_file] with the path to your sensor YAML configuration.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/local.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo packetstreamer sensor --config [configuration_file]\n```\n\n----------------------------------------\n\nTITLE: Process pcap Output with tcpdump\nDESCRIPTION: Passes the output file generated by PacketStreamer to the tcpdump utility for network traffic analysis. The `tail -f` command streams the output file content to tcpdump, which interprets and displays the packet data.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/local.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntail -c +1 -f /tmp/dump_file | tcpdump -r -\n```\n\n----------------------------------------\n\nTITLE: Running PacketStreamer Sensor\nDESCRIPTION: Runs a PacketStreamer sensor on a target host to capture and forward traffic. The sensor's configuration is loaded from the sensor.yaml file, and the server address within this file should be edited to point to the receiver host.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/quickstart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# run on the target hosts to capture and forward traffic\n\n# copy and edit the sample sensor-local.yaml file, and add the address of the receiver host\ncp ./contrib/config/sensor-local.yaml ./contrib/config/sensor.yaml\n\n./packetstreamer sensor --config ./contrib/config/sensor.yaml\n```\n\n----------------------------------------\n\nTITLE: Pipe PacketStreamer Output to tcpdump\nDESCRIPTION: This command configures PacketStreamer to write its output to stdout and pipes that output to tcpdump. This allows for real-time packet analysis directly from PacketStreamer's output stream. The configuration file specifies 'stdout' as the output target.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/local.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./packet-streamer receiver --config ./contrib/config/receiver-stdout.yaml | tcpdump -r -\n```\n\n----------------------------------------\n\nTITLE: Pipe PacketStreamer Output to tcpdump\nDESCRIPTION: Configures the PacketStreamer receiver to write output to standard output (stdout), and then pipes this output directly to tcpdump for real-time analysis. This method enables immediate examination of captured packets without intermediate file storage.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/local.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./packet-streamer receiver --config ./contrib/config/receiver-stdout.yaml | tcpdump -r -\n```\n\n----------------------------------------\n\nTITLE: Generate Test Traffic with Vegeta\nDESCRIPTION: Installs and uses the Vegeta load testing tool to generate HTTP traffic. This example shows how to install Vegeta, define a simple HTTP request, and run an attack, and generate a report on the test results.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/local.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# install vegeta\ngo install github.com/tsenart/vegeta@latest\n\necho 'GET http://some_ip:80' | vegeta attack -rate 100 -duration 5m | tee results.bin | vegeta report\n```\n\n----------------------------------------\n\nTITLE: Process pcap Output with tcpdump\nDESCRIPTION: This command pipes the output from PacketStreamer's dump file to tcpdump for analysis. It uses `tail -f` to continuously read the dump file and pipes the output to tcpdump, which then interprets and displays the packet data in a human-readable format.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/local.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntail -c +1 -f /tmp/dump_file | tcpdump -r -\n```\n\n----------------------------------------\n\nTITLE: Generate Test Traffic with Vegeta\nDESCRIPTION: This set of commands installs and uses Vegeta, a load testing tool, to generate HTTP traffic. It attacks a specified endpoint, reports on the results, and saves the raw data. Requires Go to be installed to install vegeta.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/local.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# install vegeta\ngo install github.com/tsenart/vegeta@latest\n\necho 'GET http://some_ip:80' | vegeta attack -rate 100 -duration 5m | tee results.bin | vegeta report\n```\n\n----------------------------------------\n\nTITLE: Build Static PacketStreamer\nDESCRIPTION: This command builds the `packetstreamer` binary with static linking. It uses the `STATIC` parameter to include all dependencies within the binary, making it more portable.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/building.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake STATIC=1\n```\n\n----------------------------------------\n\nTITLE: Starting Vagrant VMs using Vagrant\nDESCRIPTION: This command starts the two Vagrant VMs, 'receiver' and 'sensor', using the 'vagrant up' command. It then checks the status of the VMs using 'vagrant status', confirming they are running.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/vagrant.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvagrant up\n\nvagrant status\n# Current machine states:\n#\n# receiver                  running (libvirt)\n# sensor                    running (libvirt)\n```\n\n----------------------------------------\n\nTITLE: Build PacketStreamer with Make\nDESCRIPTION: This command builds the `packetstreamer` binary using the `go` toolchain. It assumes that the `go` toolchain is installed and configured correctly.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Starting Vagrant VMs\nDESCRIPTION: Starts the 'receiver' and 'sensor' Vagrant virtual machines. This command initializes the VMs based on the Vagrantfile configuration. It assumes Vagrant is already installed and configured.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/vagrant.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvagrant up\n\nvagrant status\n# Current machine states:\n#\n# receiver                  running (libvirt)\n# sensor                    running (libvirt)\n```\n\n----------------------------------------\n\nTITLE: Building PacketStreamer with Make\nDESCRIPTION: This snippet provides the commands to clone the PacketStreamer repository, navigate to the directory, and build the project using the make command. It requires the golang toolchain and libpcap-dev to be installed. This builds the packetstreamer executable.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/README.md#_snippet_0\n\nLANGUAGE: shell script\nCODE:\n```\n# Pre-requisites (Ubuntu): sudo apt install golang-go libpcap-dev\ngit clone https://github.com/deepfence/PacketStreamer.git\ncd PacketStreamer/\nmake\n```\n\n----------------------------------------\n\nTITLE: SSH into the Receiver VM\nDESCRIPTION: This command establishes an SSH connection to the 'receiver' virtual machine using the 'vagrant ssh receiver' command.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/vagrant.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvagrant ssh receiver\n```\n\n----------------------------------------\n\nTITLE: Building PacketStreamer with Make\nDESCRIPTION: This snippet provides commands to clone the PacketStreamer repository, navigate into it, and build the project using the 'make' command. It requires the golang toolchain and libpcap-dev to be installed. This will compile the PacketStreamer binaries.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell script\nCODE:\n```\n# Pre-requisites (Ubuntu): sudo apt install golang-go libpcap-dev\ngit clone https://github.com/deepfence/PacketStreamer.git\ncd PacketStreamer/\nmake\n```\n\n----------------------------------------\n\nTITLE: SSH into the Sensor VM\nDESCRIPTION: This command establishes an SSH connection to the 'sensor' virtual machine using the 'vagrant ssh sensor' command.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/vagrant.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvagrant ssh sensor\n```\n\n----------------------------------------\n\nTITLE: Build PacketStreamer (Release)\nDESCRIPTION: This command builds the `packetstreamer` binary with the `RELEASE` parameter set to 1, which strips the binary for a production environment, reducing its size.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake RELEASE=1\n```\n\n----------------------------------------\n\nTITLE: SSH to Sensor VM\nDESCRIPTION: Establishes an SSH connection to the 'sensor' Vagrant virtual machine. Requires Vagrant to be running and the VM to be in a running state. Enables the user to execute commands within the sensor VM.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/vagrant.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvagrant ssh sensor\n```\n\n----------------------------------------\n\nTITLE: Build Docker PacketStreamer\nDESCRIPTION: This command builds the `packetstreamer` binary within a Docker container. The resulting binary is statically linked with `musl` and `libpcap`, which enhances its portability across different Linux distributions.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/building.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-bin\n```\n\n----------------------------------------\n\nTITLE: Creating Edit on GitHub Link in HTML using siteConfig\nDESCRIPTION: This HTML snippet creates a link to edit the document on GitHub, using information from the site configuration. The URL is obtained from `siteConfig().presets[0][1].docs.editUrl`.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/src/pages/index.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<span>\n\t<a href={siteConfig().presets[0][1].docs.editUrl}>\n\t\t<div class=\"deepfence-button\">\n\t\t\tEdit on GitHub\n\t\t</div>\n\t</a>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Build PacketStreamer with Docker\nDESCRIPTION: This command builds the `packetstreamer` binary using Docker. The binary is statically linked with `musl` and `libpcap`, making it portable across Linux distributions. Docker needs to be installed and running.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/build.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-bin\n```\n\n----------------------------------------\n\nTITLE: Running PacketStreamer Receiver\nDESCRIPTION: This snippet shows how to run the PacketStreamer receiver with a specified configuration file. The receiver listens on port 8081 and writes pcap output to /tmp/dump_file, as defined in the receiver.yaml file. This command initiates the receiver process to accept traffic streams.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell script\nCODE:\n```\n./packetstreamer receiver --config ./contrib/config/receiver.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Link in HTML using siteConfig\nDESCRIPTION: This HTML snippet creates a navigation link using the `siteConfig` function to get the URL and label. It uses `siteConfig().themeConfig.navbar.items[0].docId` and `siteConfig().themeConfig.navbar.items[0].label` to dynamically render the link. It also removes '/index' from docId.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/src/pages/index.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<span>\n\t<a href={siteConfig().themeConfig.navbar.items[0].docId.replace('/index', '')}>\n\t\t<div class=\"deepfence-button\">\n\t\t\t{siteConfig().themeConfig.navbar.items[0].label}\n\t\t</div>\n\t</a>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Build Release Docker PacketStreamer\nDESCRIPTION: This command builds a stripped release binary of `packetstreamer` inside a Docker container, optimizing it for production use. It combines the `docker-bin` target with the `RELEASE` parameter.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/building.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-bin RELEASE=1\n```\n\n----------------------------------------\n\nTITLE: Build PacketStreamer with Docker (Release)\nDESCRIPTION: This command builds a stripped release binary of `packetstreamer` using Docker. It combines the benefits of Docker-based builds and release stripping for a portable and smaller binary. Docker needs to be installed and running.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/build.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-bin RELEASE=1\n```\n\n----------------------------------------\n\nTITLE: Analyze Stdout Output with Suricata (bash)\nDESCRIPTION: This command pipes the stdout output from a PacketStreamer receiver to Suricata for analysis. It assumes PacketStreamer is configured to write to stdout using the `receiver-stdout.yaml` configuration file. The Suricata configuration file is assumed to be at `/etc/suricata/suricata.yaml`.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/extra/suricata.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./packet-streamer receiver --config ./contrib/config/receiver-stdout.yaml | suricata -v -c /etc/suricata/suricata.yaml -r /dev/stdin\n```\n\n----------------------------------------\n\nTITLE: SSH to Receiver VM\nDESCRIPTION: Establishes an SSH connection to the 'receiver' Vagrant virtual machine. Requires Vagrant to be running and the VM to be in a running state. Allows the user to execute commands within the receiver VM.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/vagrant.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvagrant ssh receiver\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Receiver\nDESCRIPTION: Navigates to the PacketStreamer directory and starts the receiver component with a specific configuration file. Assumes the PacketStreamer source code is present in the 'PacketStreamer' directory and the config file exists at the specified path. It starts the receiver process, listening for network traffic.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/vagrant.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd PacketStreamer\n./packetstreamer receiver --config ./contrib/config/receiver-vagrant.yaml\n```\n\n----------------------------------------\n\nTITLE: Run PacketStreamer Receiver\nDESCRIPTION: This command navigates to the PacketStreamer directory and starts the receiver with a specific configuration file. It assumes the PacketStreamer source code is available in the directory.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/vagrant.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd PacketStreamer\n./packetstreamer receiver --config ./contrib/config/receiver-vagrant.yaml\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Configuration using useDocusaurusContext in JavaScript\nDESCRIPTION: This JavaScript function retrieves the site configuration object from the Docusaurus context using the `useDocusaurusContext` hook.  It returns the `siteConfig` property of the context object. Dependencies: `@docusaurus/useDocusaurusContext`.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/src/pages/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport useDocusaurusContext from '@docusaurus/useDocusaurusContext';\nexport function siteConfig() {\n  const {siteConfig, siteMetadata} = useDocusaurusContext();\n  return siteConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Metadata using useDocusaurusContext in JavaScript\nDESCRIPTION: This JavaScript function retrieves the site metadata object from the Docusaurus context using the `useDocusaurusContext` hook. It returns the `siteMetadata` property of the context object. Dependencies: `@docusaurus/useDocusaurusContext`.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/src/pages/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport useDocusaurusContext from '@docusaurus/useDocusaurusContext';\nexport function siteMetadata() {\n  const {siteConfig, siteMetadata} = useDocusaurusContext();\n  return siteMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Build PacketStreamer (Static)\nDESCRIPTION: This command builds the `packetstreamer` binary with the `STATIC` parameter set to 1, which statically links the binary, making it self-contained.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake STATIC=1\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Configuration Title and Tagline in HTML\nDESCRIPTION: This HTML snippet displays the site title and tagline retrieved from the `siteConfig` function. It utilizes the `siteConfig().title` and `siteConfig().tagline` properties to render the title within an `<h1>` tag and the tagline within a `<p>` tag.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/src/pages/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>{siteConfig().title}</h1>\n\n<p>{siteConfig().tagline}</p>\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Config as JSON in HTML\nDESCRIPTION: This HTML snippet displays the site configuration object as a formatted JSON string. It uses `JSON.stringify` with `null` and `2` as arguments to pretty-print the JSON. The data is rendered within a `<pre>` tag for proper formatting.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/src/pages/index.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<pre>{JSON.stringify( siteConfig(), null, 2 )}</pre>\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Metadata as JSON in HTML\nDESCRIPTION: This HTML snippet displays the site metadata object as a formatted JSON string. It uses `JSON.stringify` with `null` and `2` as arguments to pretty-print the JSON. The data is rendered within a `<pre>` tag for proper formatting.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/src/pages/index.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<pre>{JSON.stringify(siteMetadata(), null, 2) }</pre>\n```\n\n----------------------------------------\n\nTITLE: Generate Live Traffic using Vegeta\nDESCRIPTION: This command generates HTTP traffic using the 'vegeta' tool to simulate network activity. It attacks a specified IP address with a rate of 100 requests per second for 5 minutes, saves the results to 'results.bin', and generates a report.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/vagrant.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho 'GET http://some_ip:80' | vegeta attack -rate 100 -duration 5m | tee results.bin | vegeta report\n```\n\n----------------------------------------\n\nTITLE: Generate Live Traffic with Vegeta\nDESCRIPTION: Generates HTTP traffic using the Vegeta load testing tool. Sends GET requests to a specified IP address at a rate of 100 requests per second for 5 minutes, and then generates a report of the test results.  Requires Vegeta to be installed.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/vagrant.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho 'GET http://some_ip:80' | vegeta attack -rate 100 -duration 5m | tee results.bin | vegeta report\n```\n\n----------------------------------------\n\nTITLE: Generate HTTP Traffic with Vegeta\nDESCRIPTION: Generates HTTP traffic using the Vegeta load testing tool. Sends GET requests to a specified IP address and port at a rate of 100 requests per second for 5 minutes. The results are saved to a file and reported.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/docs/packetstreamer/using/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho 'GET http://some_ip:80' | vegeta attack -rate 100 -duration 5m | tee results.bin | vegeta report\n```\n\n----------------------------------------\n\nTITLE: Run Vegeta Attack\nDESCRIPTION: Runs a Vegeta attack to generate traffic, piping the output to a file and a report.  Requires `vegeta` to be installed.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho 'GET http://some_ip:80' | vegeta attack -rate 100 -duration 5m | tee results.bin | vegeta report\n```\n\n----------------------------------------\n\nTITLE: Start Local Development Server with Yarn\nDESCRIPTION: This command starts a local development server and opens a browser window. Most changes are reflected live without needing to restart the server. The `--port` option can be used to specify a different port than the default (3000).\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the website using Yarn. Ensure Yarn is installed on your system before running this command.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Build Docker Image\nDESCRIPTION: Builds a Docker image for PacketStreamer using the `docker-image` make target. An optional `RELEASE=1` argument creates a stripped release binary.\nSOURCE: https://github.com/deepfence/packetstreamer/blob/main/docs-mdbook/src/quickstart/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake docker-image\n\n# Alternatively, build a stripped release binary\nmake docker-image RELEASE=1\n```"
  }
]