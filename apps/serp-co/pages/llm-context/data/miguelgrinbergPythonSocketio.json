[
  {
    "owner": "miguelgrinberg",
    "repo": "python-socketio",
    "content": "TITLE: Creating a Socket.IO Server with Eventlet\nDESCRIPTION: A basic Socket.IO server implementation using Eventlet as the asynchronous server backend. This example demonstrates event handlers for client connections, message handling, and disconnections, along with serving static files.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/intro.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport eventlet\nimport socketio\n\nsio = socketio.Server()\napp = socketio.WSGIApp(sio, static_files={\n    '/': {'content_type': 'text/html', 'filename': 'index.html'}\n})\n\n@sio.event\ndef connect(sid, environ):\n    print('connect ', sid)\n\n@sio.event\ndef my_message(sid, data):\n    print('message ', data)\n\n@sio.event\ndef disconnect(sid):\n    print('disconnect ', sid)\n\nif __name__ == '__main__':\n    eventlet.wsgi.server(eventlet.listen(('', 5000)), app)\n```\n\n----------------------------------------\n\nTITLE: Creating an Async Socket.IO Server with aiohttp\nDESCRIPTION: An implementation of an asynchronous Socket.IO server using aiohttp and the asyncio framework. This example shows how to integrate Socket.IO with aiohttp, define event handlers, serve static files, and route HTTP requests.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/intro.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\nimport socketio\n\nsio = socketio.AsyncServer()\napp = web.Application()\nsio.attach(app)\n\nasync def index(request):\n    \"\"\"Serve the client-side application.\"\"\"\n    with open('index.html') as f:\n        return web.Response(text=f.read(), content_type='text/html')\n\n@sio.event\ndef connect(sid, environ):\n    print(\"connect \", sid)\n\n@sio.event\nasync def chat_message(sid, data):\n    print(\"message \", data)\n\n@sio.event\ndef disconnect(sid):\n    print('disconnect ', sid)\n\napp.router.add_static('/static', 'static')\napp.router.add_get('/', index)\n\nif __name__ == '__main__':\n    web.run_app(app)\n```\n\n----------------------------------------\n\nTITLE: Creating a Socket.IO Server Instance in Python\nDESCRIPTION: Demonstrates how to create a Socket.IO server instance using the socketio.Server class for standard synchronous operations.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport socketio\n\n# create a Socket.IO server\nsio = socketio.Server()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Socket.IO Client in Python\nDESCRIPTION: A basic implementation of a Socket.IO client in standard Python that establishes a connection to a server, defines event handlers for connection, message reception, and disconnection events, and demonstrates how to emit responses back to the server.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/intro.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport socketio\n\nsio = socketio.Client()\n\n@sio.event\ndef connect():\n    print('connection established')\n\n@sio.event\ndef my_message(data):\n    print('message received with ', data)\n    sio.emit('my response', {'response': 'my response'})\n\n@sio.event\ndef disconnect():\n    print('disconnected from server')\n\nsio.connect('http://localhost:5000')\nsio.wait()\n```\n\n----------------------------------------\n\nTITLE: Implementing an Async Socket.IO Client with asyncio\nDESCRIPTION: An asynchronous implementation of a Socket.IO client using Python's asyncio framework. This example shows how to create connection handlers, define async event callbacks, and set up the main async execution loop.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/intro.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport socketio\n\nsio = socketio.AsyncClient()\n\n@sio.event\nasync def connect():\n    print('connection established')\n\n@sio.event\nasync def my_message(data):\n    print('message received with ', data)\n    await sio.emit('my response', {'response': 'my response'})\n\n@sio.event\nasync def disconnect():\n    print('disconnected from server')\n\nasync def main():\n    await sio.connect('http://localhost:5000')\n    await sio.wait()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Combining Socket.IO with ASGI Web Application in Python\nDESCRIPTION: Shows how to integrate a Socket.IO server with an existing ASGI web application (e.g., FastAPI) using the socketio.ASGIApp class.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom mywebapp import app  # a FastAPI or other ASGI application\napp = socketio.ASGIApp(sio, app)\n```\n\n----------------------------------------\n\nTITLE: Creating an Asyncio-based Socket.IO Server in Python\nDESCRIPTION: Shows how to create an asyncio-compatible Socket.IO server instance using the socketio.AsyncServer class for asynchronous operations.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport socketio\n\n# create a Socket.IO server\nsio = socketio.AsyncServer()\n```\n\n----------------------------------------\n\nTITLE: Creating an Event-Driven Socket.IO Client\nDESCRIPTION: Examples of creating event-driven Socket.IO clients for both standard Python and asyncio variants.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport socketio\n\n# standard Python\nsio = socketio.Client()\n\n# asyncio\nsio = socketio.AsyncClient()\n```\n\n----------------------------------------\n\nTITLE: Room Management in Python Socket.IO\nDESCRIPTION: Shows how to implement room-based event handling including entering/leaving rooms and broadcasting messages to room members.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef begin_chat(sid):\n    sio.enter_room(sid, 'chat_users')\n\n@sio.event\ndef exit_chat(sid):\n    sio.leave_room(sid, 'chat_users')\n\n@sio.event\ndef my_message(sid, data):\n    sio.emit('my reply', data, room='chat_users', skip_sid=sid)\n```\n\n----------------------------------------\n\nTITLE: Handling Asyncio Socket.IO Events in Python\nDESCRIPTION: Demonstrates how to register asynchronous event handlers for Socket.IO events using coroutines.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\nasync def my_event(sid, data):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Socket.IO Server\nDESCRIPTION: Examples of connecting to a Socket.IO server using both standard Python and asyncio clients, including transport specification.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsio.connect('http://localhost:5000')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait sio.connect('http://localhost:5000')\n```\n\nLANGUAGE: python\nCODE:\n```\nsio.connect('http://localhost:5000', transports=['websocket'])\n```\n\n----------------------------------------\n\nTITLE: Class-Based Namespace Implementation in Python Socket.IO\nDESCRIPTION: Demonstrates how to create class-based namespaces for both synchronous and asynchronous Socket.IO servers.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomNamespace(socketio.Namespace):\n    def on_connect(self, sid, environ):\n        pass\n\n    def on_disconnect(self, sid, reason):\n        pass\n\n    def on_my_event(self, sid, data):\n        self.emit('my_response', data)\n\nsio.register_namespace(MyCustomNamespace('/test'))\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomNamespace(socketio.AsyncNamespace):\n    def on_connect(self, sid, environ):\n        pass\n\n    def on_disconnect(self, sid, reason):\n        pass\n\n    async def on_my_event(self, sid, data):\n        await self.emit('my_response', data)\n\nsio.register_namespace(MyCustomNamespace('/test'))\n```\n\n----------------------------------------\n\nTITLE: Emitting Events to a Socket.IO Server\nDESCRIPTION: Examples of emitting events to a Socket.IO server with data payloads for both standard Python and asyncio clients.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsio.emit('my message', {'foo': 'bar'})\n```\n\nLANGUAGE: python\nCODE:\n```\nawait sio.emit('my message', {'foo': 'bar'})\n```\n\n----------------------------------------\n\nTITLE: Handling Socket.IO Connect and Disconnect Events in Python\nDESCRIPTION: Shows how to implement handlers for the special connect and disconnect events in Socket.IO, including authentication and disconnection reason handling.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef connect(sid, environ, auth):\n    print('connect ', sid)\n\n@sio.event\ndef disconnect(sid, reason):\n    print('disconnect ', sid, reason)\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handlers for Socket.IO Events\nDESCRIPTION: Examples of defining event handlers for Socket.IO events using decorators for both standard Python and asyncio clients.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef message(data):\n    print('I received a message!')\n\n@sio.on('my message')\ndef on_message(data):\n    print('I received a message!')\n```\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\nasync def message(data):\n    print('I received a message!')\n```\n\n----------------------------------------\n\nTITLE: Handling Socket.IO Events in Python\nDESCRIPTION: Shows how to register event handlers for Socket.IO events using decorators, including both standard and custom event names.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef my_event(sid, data):\n    pass\n\n@sio.on('my custom event')\ndef another_event(sid, data):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Connection Event Handlers for Socket.IO\nDESCRIPTION: Examples of defining special event handlers for connect, connect_error, and disconnect events in Socket.IO.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef connect():\n    print(\"I'm connected!\")\n\n@sio.event\ndef connect_error(data):\n    print(\"The connection failed!\")\n\n@sio.event\ndef disconnect(reason):\n    print(\"I'm disconnected! reason:\", reason)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Socket.IO Server in Python\nDESCRIPTION: Shows how to establish a connection to a Socket.IO server using the connect method. Includes examples for both synchronous and asynchronous implementations.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsio.connect('http://localhost:5000')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait sio.connect('http://localhost:5000')\n```\n\n----------------------------------------\n\nTITLE: Deploying Asynchronous Socket.IO Server with ASGI (Python)\nDESCRIPTION: Shows how to set up an asynchronous Socket.IO server for deployment with ASGI-compatible web servers like Uvicorn. It includes an example of integrating with another ASGI application.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nsio = socketio.AsyncServer(async_mode='asgi')\napp = socketio.ASGIApp(sio)\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket.IO Server as WSGI Application in Python\nDESCRIPTION: Demonstrates how to wrap a Socket.IO server instance with the socketio.WSGIApp class to create a WSGI-compatible application.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# wrap with a WSGI application\napp = socketio.WSGIApp(sio)\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Socket.IO Python Client\nDESCRIPTION: Shows how to emit events to the server using both synchronous and asynchronous clients. Events can include data payloads in various formats.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsio.emit('my message', {'foo': 'bar'})\n```\n\nLANGUAGE: python\nCODE:\n```\nawait sio.emit('my message', {'foo': 'bar'})\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Callbacks in Socket.IO Python Client\nDESCRIPTION: Demonstrates how to return values from an event handler to be passed to the server's callback function, acknowledging that the client has processed the event.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef my_event(sid, data):\n    # handle the message\n    return \"OK\", 123\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Message Queue for Socket.IO\nDESCRIPTION: This snippet shows how to configure a Redis message queue for a Socket.IO server using the RedisManager class. It demonstrates setup for both synchronous and asynchronous servers.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n# socketio.Server class\nmgr = socketio.RedisManager('redis://')\nsio = socketio.Server(client_manager=mgr)\n\n# socketio.AsyncServer class\nmgr = socketio.AsyncRedisManager('redis://')\nsio = socketio.AsyncServer(client_manager=mgr)\n```\n\n----------------------------------------\n\nTITLE: Receiving Events from a Socket.IO Server\nDESCRIPTION: Examples of receiving events from a Socket.IO server using both standard Python and asyncio clients.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nevent = sio.receive()\nprint(f'received event: \"{event[0]}\" with arguments {event[1:]}')\n```\n\nLANGUAGE: python\nCODE:\n```\nevent = await sio.receive()\nprint(f'received event: \"{event[0]}\" with arguments {event[1:]}')\n```\n\n----------------------------------------\n\nTITLE: Creating Class-Based Namespaces in Socket.IO Python Client\nDESCRIPTION: Demonstrates how to implement class-based namespaces by subclassing ClientNamespace. This approach organizes related event handlers into a single class.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomNamespace(socketio.ClientNamespace):\n    def on_connect(self):\n        pass\n\n    def on_disconnect(self, reason):\n        pass\n\n    def on_my_event(self, data):\n        self.emit('my_response', data)\n\nsio.register_namespace(MyCustomNamespace('/chat'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Management in Socket.IO Server (Python)\nDESCRIPTION: Demonstrates how to manage user sessions in a Socket.IO server using the connect and message events. It shows both synchronous and asynchronous implementations.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef connect(sid, environ):\n    username = authenticate_user(environ)\n    sio.save_session(sid, {'username': username})\n\n@sio.event\ndef message(sid, data):\n    session = sio.get_session(sid)\n    print('message from ', session['username'])\n```\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\nasync def connect(sid, environ):\n    username = authenticate_user(environ)\n    await sio.save_session(sid, {'username': username})\n\n@sio.event\nasync def message(sid, data):\n    session = await sio.get_session(sid)\n    print('message from ', session['username'])\n```\n\n----------------------------------------\n\nTITLE: Handling Socket.IO Disconnection Reasons in Python\nDESCRIPTION: Shows how to handle different disconnection reasons in the disconnect event handler using the socketio.Server.reason attribute.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef disconnect(sid, reason):\n    if reason == sio.reason.CLIENT_DISCONNECT:\n        print('the client disconnected')\n    elif reason == sio.reason.SERVER_DISCONNECT:\n        print('the server disconnected the client')\n    else:\n        print('disconnect reason:', reason)\n```\n\n----------------------------------------\n\nTITLE: Handling Disconnection Events in Socket.IO Python Client\nDESCRIPTION: Demonstrates how to set up a disconnect event handler that receives a reason parameter and checks against predefined reason codes to determine the cause of disconnection.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef disconnect(reason):\n    if reason == sio.reason.CLIENT_DISCONNECT:\n        print('the client disconnected')\n    elif reason == sio.reason.SERVER_DISCONNECT:\n        print('the server disconnected the client')\n    else:\n        print('disconnect reason:', reason)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Socket.IO Client Manually\nDESCRIPTION: Examples of manually instantiating Socket.IO clients for both standard Python and asyncio variants.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport socketio\n\n# standard Python\nsio = socketio.SimpleClient()\n\n# asyncio\nsio = socketio.AsyncSimpleClient()\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from a Socket.IO Server in Python\nDESCRIPTION: Shows how to disconnect a client from a Socket.IO server using both synchronous and asynchronous client implementations.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nsio.disconnect()\n```\n\nLANGUAGE: python\nCODE:\n```\nawait sio.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Socket.IO Client with Context Manager\nDESCRIPTION: Examples of creating Socket.IO clients using the context manager interface for both standard Python and asyncio variants.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport socketio\n\n# standard Python\nwith socketio.SimpleClient() as sio:\n    # ... connect to a server and use the client\n    # ... no need to manually disconnect!\n\n# asyncio\nasync with socketio.AsyncSimpleClient() as sio:\n    # ... connect to a server and use the client\n    # ... no need to manually disconnect!\n```\n\n----------------------------------------\n\nTITLE: Starting Background Tasks with Socket.IO in Python\nDESCRIPTION: Shows how to start a custom background task using the start_background_task() method in both standard Python and asyncio versions. The method takes a function and its arguments as parameters.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\ndef my_background_task(my_argument):\n    # do some background work here!\n    pass\n\ntask = sio.start_background_task(my_background_task, 123)\n```\n\nLANGUAGE: Python\nCODE:\n```\nasync def my_background_task(my_argument):\n    # do some background work here!\n    pass\n\ntask = sio.start_background_task(my_background_task, 123)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Socket.IO Server with TLS/SSL\nDESCRIPTION: Examples of connecting to a Socket.IO server using secure HTTPS connections for both standard Python and asyncio clients.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsio.connect('https://example.com')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait sio.connect('https://example.com')\n```\n\n----------------------------------------\n\nTITLE: Combining Socket.IO with WSGI Web Application in Python\nDESCRIPTION: Shows how to integrate a Socket.IO server with an existing WSGI web application (e.g., Flask or Django) using the socketio.WSGIApp class.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom mywebapp import app  # a Flask, Django, etc. application\napp = socketio.WSGIApp(sio, app)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Socket.IO Connection in Python\nDESCRIPTION: Demonstrates how to use the wait() method to keep the Socket.IO connection alive in both standard Python and asyncio versions.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nsio.wait()\n```\n\nLANGUAGE: Python\nCODE:\n```\nawait sio.wait()\n```\n\n----------------------------------------\n\nTITLE: Setting Up TLS/SSL for Socket.IO Client with Client Certificate Authentication\nDESCRIPTION: Demonstrates how to configure a Socket.IO client to use client certificate authentication when connecting to a server over HTTPS.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nhttp_session = requests.Session()\nhttp_session.cert = ('/path/to/client/cert.pem', '/path/to/client/key.pem')\nsio = socketio.Client(http_session=http_session)\nsio.connect('https://example.com')\n```\n\nLANGUAGE: python\nCODE:\n```\nssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\nssl_context.load_cert_chain('/path/to/client/cert.pem',\n                            '/path/to/client/key.pem')\nconnector = aiohttp.TCPConnector(ssl=ssl_context)\nhttp_session = aiohttp.ClientSession(connector=connector)\nsio = socketio.AsyncClient(http_session=http_session)\nawait sio.connect('https://example.com')\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket.IO Server as ASGI Application in Python\nDESCRIPTION: Demonstrates how to wrap a Socket.IO server instance with the socketio.ASGIApp class to create an ASGI-compatible application.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# wrap with ASGI application\napp = socketio.ASGIApp(sio)\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket.IO Server with Admin UI (Python)\nDESCRIPTION: Demonstrates how to enable and configure the Socket.IO Admin UI for monitoring and administration purposes. It includes CORS configuration and authentication setup.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport socketio\n\nsio = socketio.Server(cors_allowed_origins=[\n    'http://localhost:5000',\n    'https://admin.socket.io',\n])\nsio.instrument(auth={\n    'username': 'admin',\n    'password': os.environ['ADMIN_PASSWORD'],\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing ASGI Socket.IO Server with Uvicorn\nDESCRIPTION: This snippet demonstrates how to set up a Socket.IO server using the ASGI protocol and run it with Uvicorn. It creates an AsyncServer instance and wraps it in an ASGIApp.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nsio = socketio.AsyncServer(async_mode='asgi')\napp = socketio.ASGIApp(sio, other_asgi_app)\n```\n\n----------------------------------------\n\nTITLE: Defining Catch-All Event Handlers for Socket.IO\nDESCRIPTION: Examples of defining catch-all event handlers for Socket.IO events that don't have specific handlers.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@sio.on('*')\ndef any_event(event, sid, data):\n     pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@sio.on('*')\nasync def any_event(event, sid, data):\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@sio.on('my_event', namespace='*')\ndef my_event_any_namespace(namespace, sid, data):\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@sio.on('*', namespace='*')\ndef any_event_any_namespace(event, namespace, sid, data):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Initializing Aiohttp Socket.IO Server\nDESCRIPTION: This snippet shows how to create a Socket.IO server using Aiohttp. It explicitly sets the async_mode to 'aiohttp' and attaches the server to an Aiohttp application.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nsio = socketio.AsyncServer(async_mode='aiohttp')\napp = web.Application()\nsio.attach(app)\n```\n\n----------------------------------------\n\nTITLE: Initializing Eventlet Socket.IO Server\nDESCRIPTION: This snippet demonstrates how to create a Socket.IO server using Eventlet. It explicitly sets the async_mode to 'eventlet' and wraps the server in a WSGIApp.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nsio = socketio.Server(async_mode='eventlet')\napp = socketio.WSGIApp(sio)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple Namespaces in Socket.IO Python Client\nDESCRIPTION: Shows how to connect to multiple namespaces in a Socket.IO connection and define handlers specific to those namespaces.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nsio.connect('http://localhost:5000', namespaces=['/chat'])\n```\n\nLANGUAGE: python\nCODE:\n```\n@sio.event(namespace='/chat')\ndef my_custom_event(sid, data):\n    pass\n\n@sio.on('connect', namespace='/chat')\ndef on_connect():\n    print(\"I'm connected to the /chat namespace!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Gevent Socket.IO Server\nDESCRIPTION: This snippet shows how to create a Socket.IO server using Gevent. It explicitly sets the async_mode to 'gevent' and wraps the server in a WSGIApp for WSGI compatibility.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nsio = socketio.Server(async_mode='gevent')\napp = socketio.WSGIApp(sio, other_wsgi_app)\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrency Mode for Socket.IO Server (Python)\nDESCRIPTION: Demonstrates how to set the concurrency model for a Socket.IO server using the async_mode parameter.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsio = socketio.Server(async_mode='threading')\n```\n\n----------------------------------------\n\nTITLE: Implementing Catch-All Event Handler in Python Socket.IO\nDESCRIPTION: Demonstrates how to define a catch-all event handler using '*' as event name for both synchronous and asynchronous implementations.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@sio.on('*')\ndef any_event(event, sid, data):\n     pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@sio.on('*')\nasync def any_event(event, sid, data):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing Socket.IO Python Client\nDESCRIPTION: Installation commands for the Socket.IO client with its dependencies, showing both standard Python and asyncio variants.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install \"python-socketio[client]\"\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install \"python-socketio[asyncio_client]\"\n```\n\n----------------------------------------\n\nTITLE: Receiving Events with Timeout Handling\nDESCRIPTION: Examples of receiving events with timeout handling for both standard Python and asyncio clients using try-except blocks.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom socketio.exceptions import TimeoutError\n\ntry:\n    event = sio.receive(timeout=5)\nexcept TimeoutError:\n    print('timed out waiting for event')\nelse:\n    print('received event:', event)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom socketio.exceptions import TimeoutError\n\ntry:\n    event = await sio.receive(timeout=5)\nexcept TimeoutError:\n    print('timed out waiting for event')\nelse:\n    print('received event:', event)\n```\n\n----------------------------------------\n\nTITLE: Enabling Debugging for Socket.IO Clients\nDESCRIPTION: Examples of enabling logging for debugging purposes in Socket.IO clients for both standard Python and asyncio variants.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport socketio\n\n# standard Python\nsio = socketio.Client(logger=True, engineio_logger=True)\n\n# asyncio\nsio = socketio.AsyncClient(logger=True, engineio_logger=True)\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Socket.IO Python Client\nDESCRIPTION: Shows how to enable logging for debugging purposes in the Socket.IO Python client. The logger and engineio_logger arguments can be set to True or a logging object to output logs.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nimport socketio\n\n# standard Python\nsio = socketio.Client(logger=True, engineio_logger=True)\n\n# asyncio\nsio = socketio.AsyncClient(logger=True, engineio_logger=True)\n```\n\n----------------------------------------\n\nTITLE: Using Session Context Manager in Socket.IO Server (Python)\nDESCRIPTION: Shows how to use the session() context manager for handling user sessions in Socket.IO server. Both synchronous and asynchronous versions are provided.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef connect(sid, environ):\n    username = authenticate_user(environ)\n    with sio.session(sid) as session:\n        session['username'] = username\n\n@sio.event\ndef message(sid, data):\n    with sio.session(sid) as session:\n        print('message from ', session['username'])\n```\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\nasync def connect(sid, environ):\n    username = authenticate_user(environ)\n    async with sio.session(sid) as session:\n        session['username'] = username\n\n@sio.event\nasync def message(sid, data):\n    async with sio.session(sid) as session:\n        print('message from ', session['username'])\n```\n\n----------------------------------------\n\nTITLE: Version Compatibility Chart for Python-SocketIO\nDESCRIPTION: This table shows the compatibility between JavaScript Socket.IO versions, Socket.IO and Engine.IO protocol revisions, and python-socketio versions. It helps users ensure they are using compatible versions across different implementations.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| JavaScript Socket.IO version | Socket.IO protocol revision | Engine.IO protocol revision | python-socketio version |\n|-|-|-|-|\n| 0.9.x | 1, 2 | 1, 2 | Not supported |\n| 1.x and 2.x | 3, 4 | 3 | 4.x |\n| 3.x and 4.x | 5 | 4 | 5.x |\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from a Socket.IO Server\nDESCRIPTION: Examples of disconnecting from a Socket.IO server for both standard Python and asyncio clients.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsio.disconnect()\n```\n\nLANGUAGE: python\nCODE:\n```\nawait sio.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Checking Socket.IO Connection Details\nDESCRIPTION: Examples of accessing connection details such as session ID and transport used in a Socket.IO connection.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint('my sid is', sio.sid)\n```\n\nLANGUAGE: python\nCODE:\n```\nprint('my transport is', sio.transport)\n```\n\n----------------------------------------\n\nTITLE: Running Tornado Socket.IO Server\nDESCRIPTION: This code shows how to start the Tornado Socket.IO server by listening on a specific port and starting the IOLoop.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\napp.listen(port)\ntornado.ioloop.IOLoop.current().start()\n```\n\n----------------------------------------\n\nTITLE: Rejecting Socket.IO Connections with Custom Error in Python\nDESCRIPTION: Demonstrates how to reject a Socket.IO connection with a custom error message using the ConnectionRefusedError exception.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@sio.event\ndef connect(sid, environ, auth):\n    raise ConnectionRefusedError('authentication failed')\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn with Gunicorn Worker\nDESCRIPTION: This command demonstrates how to use Gunicorn with Uvicorn worker to run the Socket.IO application, specifying the number of workers, worker class, and binding address.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ngunicorn --workers 1 --worker-class uvicorn.workers.UvicornWorker --bind 127.0.0.1:5000\n```\n\n----------------------------------------\n\nTITLE: Running Eventlet with Gunicorn\nDESCRIPTION: This command demonstrates how to run an Eventlet Socket.IO server using Gunicorn with the Eventlet worker, specifying the number of workers and module.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\ngunicorn -k eventlet -w 1 module:app\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous Class-Based Namespaces in Socket.IO Python Client\nDESCRIPTION: Shows how to implement asynchronous class-based namespaces using AsyncClientNamespace for asyncio applications, allowing for coroutine event handlers.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomNamespace(socketio.AsyncClientNamespace):\n    def on_connect(self):\n        pass\n\n    def on_disconnect(self, reason):\n        pass\n\n    async def on_my_event(self, data):\n        await self.emit('my_response', data)\n\nsio.register_namespace(MyCustomNamespace('/chat'))\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging for Socket.IO Server Debugging (Python)\nDESCRIPTION: Shows how to enable logging for both Socket.IO and Engine.IO protocols to aid in debugging. Examples for both standard Python and asyncio servers are provided.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport socketio\n\n# standard Python\nsio = socketio.Server(logger=True, engineio_logger=True)\n\n# asyncio\nsio = socketio.AsyncServer(logger=True, engineio_logger=True)\n```\n\n----------------------------------------\n\nTITLE: Running Aiohttp Socket.IO Server\nDESCRIPTION: This code snippet demonstrates how to run the Aiohttp Socket.IO server using the web.run_app() function.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    web.run_app(app)\n```\n\n----------------------------------------\n\nTITLE: Deploying Socket.IO Server with Gunicorn (Python)\nDESCRIPTION: Illustrates how to wrap a Socket.IO server with WSGIApp for deployment using Gunicorn. It includes an example of integrating with another WSGI application.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsio = socketio.Server(async_mode='threading')\napp = socketio.WSGIApp(sio)\n\n# With another WSGI app\nsio = socketio.Server(async_mode='threading')\napp = socketio.WSGIApp(sio, other_wsgi_app)\n```\n\n----------------------------------------\n\nTITLE: Setting Up TLS/SSL for Socket.IO Client with Certificate Verification Disabled\nDESCRIPTION: Demonstrates how to configure a Socket.IO client to use HTTPS connections with certificate verification disabled. Examples for both standard and asyncio clients.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nhttp_session = requests.Session()\nhttp_session.verify = False\nsio = socketio.Client(http_session=http_session)\nsio.connect('https://example.com')\n```\n\nLANGUAGE: python\nCODE:\n```\nconnector = aiohttp.TCPConnector(ssl=False)\nhttp_session = aiohttp.ClientSession(connector=connector)\nsio = socketio.AsyncClient(http_session=http_session)\nawait sio.connect('https://example.com')\n```\n\n----------------------------------------\n\nTITLE: Running SocketIO Kitchen Sink Application\nDESCRIPTION: Command to run the basic Socket.IO application that demonstrates various server features.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/aiohttp/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up TLS/SSL for Socket.IO Client with Custom CA Certificate\nDESCRIPTION: Shows how to configure a Socket.IO client to use HTTPS with a custom certificate authority bundle for server certificate verification.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nhttp_session = requests.Session()\nhttp_session.verify = '/path/to/ca.pem'\nsio = socketio.Client(http_session=http_session)\nsio.connect('https://example.com')\n```\n\nLANGUAGE: python\nCODE:\n```\nssl_context = ssl.create_default_context()\nssl_context.load_verify_locations('/path/to/ca.pem')\nconnector = aiohttp.TCPConnector(ssl=ssl_context)\nhttp_session = aiohttp.ClientSession(connector=connector)\nsio = socketio.AsyncClient(http_session=http_session)\nawait sio.connect('https://example.com')\n```\n\n----------------------------------------\n\nTITLE: External Process Event Emission with Redis\nDESCRIPTION: Example of connecting to Redis queue as an external process to emit events. Uses write-only mode to disable listening thread, suitable for external processes that only need to emit events.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n# connect to the redis queue as an external process\nexternal_sio = socketio.RedisManager('redis://', write_only=True)\n\n# emit an event\nexternal_sio.emit('my event', data={'foo': 'bar'}, room='my room')\n```\n\n----------------------------------------\n\nTITLE: Initializing Tornado Socket.IO Server\nDESCRIPTION: This snippet demonstrates how to set up a Socket.IO server using Tornado. It creates an AsyncServer instance and includes a Socket.IO request handler in the Tornado application.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nsio = socketio.AsyncServer(async_mode='tornado')\napp = tornado.web.Application(\n    [\n        (r\"/socket.io/\", socketio.get_tornado_handler(sio)),\n    ],\n    # ... other application options\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for SocketIO Project\nDESCRIPTION: A requirements file that specifies the exact versions of Python packages needed for a Python SocketIO project. It includes web frameworks, networking libraries, and utility packages essential for Socket.IO implementation in Python.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/wsgi/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nClick==7.0\nenum-compat==0.0.2\nenum34==1.1.6\neventlet==0.35.2\nFlask==1.0.2\ngreenlet==0.4.12\nitsdangerous==1.1.0\nJinja2==3.1.6\nMarkupSafe==1.1.0\npackaging==16.8\npyparsing==2.1.10\npython-engineio\npython-socketio\nsix==1.11.0\nWerkzeug==2.2.3\n```\n\n----------------------------------------\n\nTITLE: Running Eventlet Socket.IO Server\nDESCRIPTION: This code shows how to run an Eventlet Socket.IO server using the eventlet.wsgi.server function.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport eventlet\n\neventlet.wsgi.server(eventlet.listen(('', 8000)), app)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Lists required Python packages and their specific versions for setting up a SocketIO application with Django integration. Includes core dependencies for WebSocket handling, database management, and ASGI server functionality.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/wsgi/django_socketio/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nasgiref==3.6.0\nbidict==0.22.1\nDjango==4.2.20\ngunicorn==23.0.0\nh11==0.14.0\npython-engineio\npython-socketio\nsimple-websocket\nsqlparse==0.5.0\nwsproto==1.2.0\n```\n\n----------------------------------------\n\nTITLE: Running Gevent Socket.IO Server\nDESCRIPTION: This code demonstrates how to run a Gevent Socket.IO server using the pywsgi.WSGIServer class.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom gevent import pywsgi\n\npywsgi.WSGIServer(('', 8000), app).serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Running SocketIO Fiddle Application\nDESCRIPTION: Command to run the simple fiddle application based on a JavaScript example.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/aiohttp/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python fiddle.py\n```\n\n----------------------------------------\n\nTITLE: Running SocketIO Latency Testing Application\nDESCRIPTION: Command to run the latency testing application that measures ping-pong response times between client and server.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/aiohttp/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python latency.py\n```\n\n----------------------------------------\n\nTITLE: Installing Eventlet for Socket.IO Async Mode\nDESCRIPTION: This command installs the eventlet package, which is required when using the 'eventlet' asynchronous mode in the Socket.IO examples.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/wsgi/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ pip install eventlet\n```\n\n----------------------------------------\n\nTITLE: Running Socket.IO Async Client Examples in Python\nDESCRIPTION: Instructions for running the latency_client.py and fiddle_client.py examples. These clients work with corresponding server examples and use the asyncio package.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/client/async/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ python latency_client.py\n$ python fiddle_client.py\n```\n\n----------------------------------------\n\nTITLE: Installing Gevent for Socket.IO Async Mode\nDESCRIPTION: This command installs the gevent and gevent-websocket packages, which are required when using the 'gevent' asynchronous mode in the Socket.IO examples.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/wsgi/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ pip install gevent gevent-websocket\n```\n\n----------------------------------------\n\nTITLE: Running Socket.IO Client Examples - Python Command Line\nDESCRIPTION: Terminal commands to run the Socket.IO client examples. These should be executed after starting the corresponding server examples from the examples/server subdirectories.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/simple-client/async/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python latency_client.py\n$ python fiddle_client.py\n```\n\n----------------------------------------\n\nTITLE: Running Socket.IO ASGI Examples in Python\nDESCRIPTION: Instructions for setting up and running the Socket.IO example applications. Requires creating a virtual environment and installing dependencies before launching the server on localhost:5000.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/asgi/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n\nor::\n\n$ python latency.py\n```\n\n----------------------------------------\n\nTITLE: Running Socket.IO Client Examples in Python\nDESCRIPTION: Commands to run the latency and fiddle client examples. These should be executed after starting their corresponding server implementations from the examples/server directory.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/simple-client/sync/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python latency_client.py\n$ python fiddle_client.py\n```\n\n----------------------------------------\n\nTITLE: Running Socket.IO WSGI Examples with Python\nDESCRIPTION: These commands demonstrate how to run the different Socket.IO WSGI example applications. They include running the basic app, latency app, Django example, and fiddle app.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/wsgi/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ python app.py\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ python latency.py\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd django_example\n$ ./manage.py runserver\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ python fiddle\n```\n\n----------------------------------------\n\nTITLE: Running Django with Gunicorn for WebSocket Support\nDESCRIPTION: Command to run the application using Gunicorn web server with WebSocket support. Configures 100 threads and logs access to stdout.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/wsgi/django_socketio/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn -b :8000 --threads 100 --access-logfile - django_socketio.wsgi:application\n```\n\n----------------------------------------\n\nTITLE: Running Socket.IO Sanic Example Applications\nDESCRIPTION: Commands to execute the different Socket.IO example applications after setting up a virtual environment and installing the requirements. Each command runs a different example application that can be accessed at http://localhost:8000.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/sanic/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python latency.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python fiddle.py\n```\n\n----------------------------------------\n\nTITLE: Running Django Development Server with SocketIO\nDESCRIPTION: Command to start the Django development server. Note that this will only support long-polling as WebSocket protocol is not supported in the default Django server.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/wsgi/django_socketio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Running Socket.IO Tornado Examples in Python\nDESCRIPTION: Instructions for setting up and running the Socket.IO Tornado example applications. These commands should be executed in a virtual environment after installing the required dependencies.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/tornado/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python latency.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ python fiddle.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Serving for Socket.IO Server in Python\nDESCRIPTION: Demonstrates how to set up static file serving for a Socket.IO server using a dictionary configuration.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstatic_files = {\n    '/': 'latency.html',\n    '/static/socket.io.js': 'static/socket.io.js',\n    '/static/style.css': 'static/style.css',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kombu Message Queue for Socket.IO\nDESCRIPTION: This snippet demonstrates how to set up a Kombu message queue for a Socket.IO server using the KombuManager class. It shows how to configure the server with an AMQP-compatible queue.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nmgr = socketio.KombuManager('amqp://')\nsio = socketio.Server(client_manager=mgr)\n```\n\n----------------------------------------\n\nTITLE: Configuring AsyncAioPikaManager for SocketIO\nDESCRIPTION: Setup of RabbitMQ message queue for asyncio applications using AioPika manager. This implementation provides async support for Socket.IO server.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nmgr = socketio.AsyncAioPikaManager('amqp://')\nsio = socketio.AsyncServer(client_manager=mgr)\n```\n\n----------------------------------------\n\nTITLE: Initializing Kafka Manager for SocketIO Server\nDESCRIPTION: Configuration of Kafka message queue manager for Socket.IO server using kafka-python package. Note that this implementation doesn't support asyncio operations.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nmgr = socketio.KafkaManager('kafka://')\nsio = socketio.Server(client_manager=mgr)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Socket.IO Examples\nDESCRIPTION: Commands for installing dependencies and running Socket.IO example clients. Includes npm installation and execution of fiddle and latency test examples. Port can be customized using the PORT environment variable.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/client/javascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ node fiddle-client.js   # to run the fiddle example\n$ node latency-client.js  # to run the latency example\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Socket.IO JavaScript Examples\nDESCRIPTION: This snippet shows how to install dependencies using npm and run two different Socket.IO server examples: a fiddle server and a latency server. It also mentions how to access the examples through a web browser on localhost:5000, with an option to specify a custom port.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/javascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ node fiddle  # to run the fiddle server example\n$ node latency # to run the latency server example\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sphinx Documentation Structure with toctree for Python-SocketIO\nDESCRIPTION: A Sphinx documentation structure using toctree directive to organize documentation sections for python-socketio. It includes links to introduction, client, server, and API documentation pages, along with standard Sphinx search indices.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n\n   intro\n   client\n   server\n   api\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Running Uvicorn Server from Command Line\nDESCRIPTION: This command shows how to start the ASGI Socket.IO application using Uvicorn from the command line, specifying the port and module.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn --port 5000 module:app\n```\n\n----------------------------------------\n\nTITLE: Running Gevent with Gunicorn\nDESCRIPTION: This command shows how to run a Gevent Socket.IO server using Gunicorn with the Gevent worker, specifying the number of workers and binding address.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\ngunicorn -k gevent -w 1 -b 127.0.0.1:5000 module:app\n```\n\n----------------------------------------\n\nTITLE: Installing AioPika Package\nDESCRIPTION: Installation command for AioPika package which enables RabbitMQ support for asyncio applications.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/server.rst#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\npip install aio_pika\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies for Python Socket.IO Project\nDESCRIPTION: A requirements.txt file listing all the necessary packages and their versions for a Python Socket.IO implementation. The dependencies include aiohttp for asynchronous HTTP, python-engineio and python_socketio as core components, and various supporting libraries needed for the project.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/aiohttp/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp==3.10.11\nasync-timeout==1.1.0\nchardet==2.3.0\nmultidict==2.1.4\npython-engineio\npython_socketio\nsix==1.10.0\nyarl==0.9.2\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for SocketIO Project\nDESCRIPTION: This snippet lists the required Python packages and their versions for a SocketIO project. It includes Click for command-line interfaces, h11 and httptools for HTTP processing, python-engineio and python_socketio for SocketIO functionality, uvicorn as an ASGI server, uvloop for event loop optimization, and websockets for WebSocket support.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/asgi/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nClick==7.1.2\nh11==0.11.0\nhttptools==0.1.1\npython-engineio\npython_socketio\nuvicorn==0.13.1\nuvloop==0.14.0\nwebsockets==9.1\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for python-socketio\nDESCRIPTION: This snippet specifies the required Python packages and their versions for the python-socketio project. It includes libraries for asynchronous file operations, HTTP parsing, Socket.IO implementation, Sanic web framework, and other utilities necessary for the project's functionality.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/sanic/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\naiofiles==0.3.0\nhttptools==0.0.9\npython_engineio\npython_socketio\nsanic==20.12.7\nsix==1.10.0\nujson==5.4.0\nuvloop==0.8.0\n```\n\n----------------------------------------\n\nTITLE: Dependency Requirements for Python Socket.IO with Tornado\nDESCRIPTION: This requirements file lists the necessary packages for a Python Socket.IO application using Tornado as the web server. It includes a specific version of Tornado (6.4.2), requires python-engineio and python_socketio libraries, and specifies an exact version of the six compatibility library (1.10.0).\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/examples/server/tornado/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntornado==6.4.2\npython-engineio\npython_socketio\nsix==1.10.0\n```\n\n----------------------------------------\n\nTITLE: Using Sleep Function in Socket.IO Python Client\nDESCRIPTION: Demonstrates the usage of the sleep() method for background tasks in both standard Python and asyncio versions. The method takes the number of seconds to sleep as an argument.\nSOURCE: https://github.com/miguelgrinberg/python-socketio/blob/main/docs/client.rst#2025-04-22_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nsio.sleep(2)\n```\n\nLANGUAGE: Python\nCODE:\n```\nawait sio.sleep(2)\n```"
  }
]